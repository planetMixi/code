id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message,original_message_score,original_message_entities,generated_secom_message_score,generated_secom_message_entities
0,{'CWE-79'},GHSA-wcm2-9c89-wmfm,"@@ -352,14 +352,21 @@ $.widget(""ui.dialog"", {
 		uiDialogTitle = $( ""<span>"" )
 			.uniqueId()
 			.addClass( ""ui-dialog-title"" )
-			.html( this.options.title || ""&#160;"" )
 			.prependTo( this.uiDialogTitlebar );
+		this._title( uiDialogTitle );
 
 		this.uiDialog.attr({
 			""aria-labelledby"": uiDialogTitle.attr( ""id"" )
 		});
 	},
 
+	_title: function( title ) {
+		if ( !this.options.title ) {
+			title.html( ""&#160;"" );
+		}
+		title.text( this.options.title );
+	},
+
 	_createButtonPane: function() {
 		var uiDialogButtonPane = ( this.uiDialogButtonPane = $( ""<div>"" ) )
 			.addClass( ""ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"" );
@@ -600,9 +607,7 @@ $.widget(""ui.dialog"", {
 		}
 
 		if ( key === ""title"" ) {
-			// convert whatever was passed in to a string, for html() to not throw up
-			$( "".ui-dialog-title"", this.uiDialogTitlebar )
-				.html( """" + ( value || ""&#160;"" ) );
+			this._title( this.uiDialogTitlebar.find( "".ui-dialog-title"" ) );
 		}
 	},","Dialog: Extract setting the title into a _title method, use .text() to prevent XSS. Fixes #6016 - Dialog: Title XSS Vulnerability.","vuln-fix: Prevent XSS by escaping dialog title content

The dialog title was previously set using html() with unescaped input, allowing injection of arbitrary HTML or scripts into the dialog header. This posed a cross-site scripting risk by enabling attackers to execute malicious code in users’ browsers. The fix replaces html() with text() to safely escape the title content, preventing injection of executable code.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('fixes', 'ACTION', ''), ('#6016', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious code', 'secword', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
1,{'CWE-79'},GHSA-q26w-wjj2-22vv,"@@ -87,11 +87,16 @@ class HtmlUtils {
 			return tagStack[tagStack.length - 1];
 		};
 
-		// The BASE tag allows changing the base URL from which files are loaded, and
-		// that can break several plugins, such as Katex (which needs to load CSS
-		// files using a relative URL). For that reason it is disabled.
-		// More info: https://github.com/laurent22/joplin/issues/3021
-		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed'];
+		// The BASE tag allows changing the base URL from which files are
+		// loaded, and that can break several plugins, such as Katex (which
+		// needs to load CSS files using a relative URL). For that reason
+		// it is disabled. More info:
+		// https://github.com/laurent22/joplin/issues/3021
+		//
+		// ""link"" can be used to escape the parser and inject JavaScript.
+		// Adding ""meta"" too for the same reason as it shouldn't be used in
+		// notes anyway.
+		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed', 'link', 'meta'];
 
 		const parser = new htmlparser2.Parser({","All: Security: Remove ""link"" and ""meta"" tags from notes to prevent XSS","vuln-fix: Prevent XSS via disallowed HTML tags in note content

The vulnerability allowed injection of malicious JavaScript through ""link"" and ""meta"" tags in notes, enabling cross-site scripting attacks. This is a security risk because attackers could execute arbitrary scripts in the user's context, compromising data and application integrity. The fix adds ""link"" and ""meta"" tags to the disallowed list, preventing their use and blocking potential script injection vectors.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('security', 'SECWORD', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
2,{'CWE-79'},GHSA-4p8f-mmfj-r45g,"@@ -17,7 +17,7 @@ def tags_for_index(model)
       elsif !query.include?(hashtag)
         query += "" #{hashtag}""
       end
-      out << link_to_function(tag, ""crm.search_tagged('#{query}', '#{model.class.to_s.tableize}')"", title: tag)
+      out << link_to_function(tag, ""crm.search_tagged('#{escape_javascript(query)}', '#{model.class.to_s.tableize}')"", title: tag)
     end
   end",Context-sensitive XSS bugfix.,"vuln-fix: Prevent JavaScript injection in tag search links

The vulnerability allowed unescaped user input to be embedded directly into JavaScript event handlers, enabling potential cross-site scripting (XSS) attacks. This posed a security risk by allowing attackers to execute arbitrary scripts in users' browsers, compromising user data and session integrity. The fix applies proper JavaScript escaping to the query parameter before embedding it in the event handler, mitigating injection risks.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('sensitive', 'SECWORD', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,{'CWE-79'},GHSA-cx2r-mf6x-55rx,"@@ -29,6 +29,7 @@
 use PrestaShopBundle\Form\Admin\Type\TranslatorAwareType;
 use Symfony\Component\Form\Extension\Core\Type\TextType;
 use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\Validator\Constraints as Assert;
 
 class CustomUrlType extends TranslatorAwareType
 {
@@ -45,6 +46,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
             ->add('url', TextType::class, [
                 'label' => $this->trans('URL', 'Modules.Linklist.Admin'),
                 'required' => true,
+                'constraints' => [new Assert\Url()],
             ])
         ;
     }","Merge pull request from GHSA-cx2r-mf6x-55rx

The custom url field must be a valid url","vuln-fix: Validate URL input to prevent malformed data submission

The URL field lacked proper validation, allowing malformed or potentially malicious URLs to be submitted through the form. This posed a security risk by enabling injection attacks or improper data handling downstream. The fix enforces URL format validation using Symfony's built-in URL constraint to ensure only valid URLs are accepted.

Weakness: CWE-20: Improper Input Validation  
Severity: Medium  
CVSS: 5.3",0.23529411764705882,"[('ghsa', 'VULNID', 'GHSA')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-20', 'CWEID', ''), ('improper input validation', 'SECWORD', ''), ('medium', 'SEVERITY', '')]"
4,{'CWE-79'},GHSA-5qjq-69w6-fg57,"similarity index 86%
rename from js/src/common/Translator.ts
rename to js/src/common/Translator.tsx
@@ -48,12 +48,23 @@ export default class Translator {
     // future there should be a hook here to inspect the user and change the
     // translation key. This will allow a gender property to determine which
     // translation key is used.
+
     if ('user' in parameters) {
       const user = extract(parameters, 'user');
 
       if (!parameters.username) parameters.username = username(user);
     }
-    return parameters;
+
+    const escapedParameters: TranslatorParameters = {};
+
+    for (const param in parameters) {
+      const paramValue = parameters[param];
+
+      if (typeof paramValue === 'string') escapedParameters[param] = <>{parameters[param]}</>;
+      else escapedParameters[param] = parameters[param];
+    }
+
+    return escapedParameters;
   }
 
   trans(id: string, parameters: TranslatorParameters = {}) {",Fix XSS vulnerability,"vuln-fix: Prevent XSS by escaping translation parameters

The vulnerability involved unescaped user-controlled input being directly inserted into translation parameters, enabling potential cross-site scripting attacks. This is a security risk because malicious scripts could execute in users’ browsers, leading to data theft or session hijacking. The fix escapes all string parameters before rendering, ensuring that injected scripts are neutralized and cannot execute. 

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('malicious', 'SECWORD', ''), ('theft', 'secword', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,{'CWE-79'},GHSA-3374-7h99-xr85,"@@ -128,6 +128,7 @@ private function loadDataGrid(): void
             'registered_on',
             true
         );
+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');
 
         // add the mass action controls
         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');",Fix xss in profiles display name,"vuln-fix: Sanitize display_name output to prevent XSS

The display_name field was output directly without escaping, allowing injection of malicious HTML or JavaScript code into the rendered page.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute arbitrary scripts in users' browsers and compromise session integrity.
The fix applies htmlspecialchars to the display_name column, ensuring all special characters are properly escaped before rendering.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
6,{'CWE-79'},GHSA-qqxp-xp9v-vvx6,"@@ -61,7 +61,7 @@
 						// remove invalid value, as it didn't match anything
 						$( element )
 							.val( """" )
-							.attr( ""title"", value + "" didn't match any item"" )
+							.attr( ""title"", $( ""<a>"" ).text( value ).html() + "" didn't match any item"" )
 							.tooltip( ""open"" );
 						select.val( """" );
 						setTimeout(function() {",Autocomplete demo: Combobox: Encode search term inside tooltips. Fixes #8859 - Autocomplete: XSS in combobox demo.,"vuln-fix: Prevent XSS in autocomplete invalid value tooltip

The vulnerability was caused by directly inserting user input into HTML attributes without escaping, allowing injection of malicious scripts.
This is a security risk because attackers could execute arbitrary JavaScript in the context of the affected page, leading to cross-site scripting attacks.
The fix escapes the user input by converting it to text and then to HTML entities before insertion, preventing script execution in the tooltip attribute.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)
Severity: Medium
CVSS: 6.1",0.058823529411764705,"[('encode', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#8859', 'ISSUE', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('medium', 'SEVERITY', '')]"
7,{'CWE-79'},GHSA-q7q9-w24q-cpgh,"@@ -149,8 +149,16 @@ App.BreadcrumbItem = Em.Object.extend({
   createLabel() {
     let label = this.get('label');
     let labelBindingPath = this.get('labelBindingPath');
+    let formattedLabel;
+
+    if (labelBindingPath) {
+      formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));
+    } else{
+      formattedLabel = label;
+    }
+
+
 
-    let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;
     this.set('formattedLabel', this.labelPostFormat(formattedLabel));
   },
 
@@ -216,7 +224,9 @@ App.BreadcrumbsView = Em.View.extend({
       }
       currentState = currentState.get('parentState');
     }
-    items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());
+    items.reverse();
+    items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));
+    items = items.map(item => App.BreadcrumbItem.extend(item).create());
     if (items.length) {
       items.get('lastObject').setProperties({
         disabled: true,",AMBARI-25329. Ambari breadcrumbs xss vulnerability,"vuln-fix: Escape breadcrumb labels to prevent XSS attacks

Breadcrumb labels were not properly escaped before rendering, allowing injection of malicious scripts via crafted label inputs.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise session integrity.
The fix applies proper escaping to all breadcrumb labels derived from dynamic sources before rendering, mitigating script injection vulnerabilities.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
8,{'CWE-79'},GHSA-vcfc-9wcp-j623,"@@ -90,12 +90,13 @@ public async Task SerializeToStreamAsync(IRequest req, object response, Stream o
             {
                 // Serialize then escape any potential script tags to avoid XSS when displaying as HTML
                 var json = JsonDataContractSerializer.Instance.SerializeToString(dto) ?? ""null"";
-                json = json.Replace(""<"", ""&lt;"").Replace("">"", ""&gt;"");
+                json = json.HtmlEncode();
 
                 var url = req.ResolveAbsoluteUrl()
                     .Replace(""format=html"", """")
                     .Replace(""format=shtm"", """")
-                    .TrimEnd('?', '&');
+                    .TrimEnd('?', '&')
+                    .HtmlEncode();
 
                 url += url.Contains(""?"") ? ""&"" : ""?"";",HtmlEncode Raw URL in HtmlFormat snapshot,"vuln-fix: Prevent XSS by encoding JSON and URL output

The vulnerability involved insufficient escaping of JSON and URL output, which could allow injection of malicious scripts in HTML contexts. This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user data and session integrity. The fix applies comprehensive HTML encoding to both JSON content and URLs before rendering, ensuring all special characters are safely escaped.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('htmlencode', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
9,{'CWE-79'},GHSA-whv6-rj84-2vh2,"@@ -60,6 +60,9 @@ import Action from 'nextcloud-vue/dist/Components/Action'
 import Avatar from 'nextcloud-vue/dist/Components/Avatar'
 import Tooltip from 'nextcloud-vue/dist/Directives/Tooltip'
 
+Tooltip.options.defaultHtml = false
+
+
 export default {
 	name: 'CollectionListItem',
 	components: {","Force defaultHtml setting of v-tooltip to be disabled

Signed-off-by: Julius Härtl <jus@bitgrid.net>","vuln-fix: Disable default HTML rendering in tooltip directive

The tooltip directive previously allowed rendering HTML content by default, which could enable injection of malicious scripts through user-controlled input.
This posed a cross-site scripting (XSS) risk by allowing attackers to execute arbitrary JavaScript in the context of the application.
The fix disables default HTML rendering in the tooltip directive, ensuring that content is treated as plain text and preventing script injection.
  
Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('signed', 'secword', ''), ('jus@bitgrid.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
10,{'CWE-79'},GHSA-xw79-hhv6-578c,"@@ -4,7 +4,7 @@
     <meta charset=""utf-8"">
     <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
 
-    <title>Files within {{=it.directory}}</title>
+    <title>Files within {{!it.directory}}</title>
 
 	<style>
 		body {
@@ -187,7 +187,7 @@
           <i>Index of&nbsp;</i>
 
           {{~it.paths :value:index}}
-            <a href=""/{{=value.url}}"">{{=value.name}}</a>
+            <a href=""/{{!value.url}}"">{{!value.name}}</a>
           {{~}}
         </h1>
 
@@ -197,9 +197,9 @@
       <ul id=""files"">
         {{~it.files :value:index}}
           <li>
-            <a href=""{{=value.relative}}"" title=""{{=value.title}}"" class=""{{=value.ext}}"">{{=value.base}}</a>
+            <a href=""{{!value.relative}}"" title=""{{!value.title}}"" class=""{{!value.ext}}"">{{!value.base}}</a>
 			{{? value.size}}
-				<i>{{=value.size}}</i>
+				<i>{{!value.size}}</i>
 			{{?}}
           </li>
         {{~}}",Interpolate template variables correctly (#64),"vuln-fix: Prevent XSS by escaping template output in HTML

Unescaped template variables in HTML attributes and content allowed injection of malicious scripts via directory, path, and file data.
This posed a critical cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise security.
The fix applies proper HTML escaping to all dynamic template outputs, ensuring special characters are safely encoded and scripts cannot be injected.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: Critical  
CVSS: 9.8",0.11764705882352941,"[('#64', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('critical', 'SEVERITY', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
11,{'CWE-79'},GHSA-5pg2-qg87-vmj7,"@@ -336,9 +336,12 @@
 // Make sure the fileName is unique but only if chunking is disabled
 if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {
     $ext = strrpos($fileName, '.');
+
     $fileName_a = substr($fileName, 0, $ext);
     $fileName_b = substr($fileName, $ext);
 
+    $fileName_b = strtolower($fileName_b);
+
     $count = 1;
     while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {
         ++$count;
@@ -500,7 +503,7 @@
 
     if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {
         $ext = get_file_extension($filePath);
-
+        $ext = strtolower($ext);
         if (function_exists('finfo_open') and function_exists('finfo_file')) {
             $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
             $mime = @finfo_file($finfo, $filePath);",update,"vuln-fix: Normalize file extensions to prevent case-sensitive bypasses

File extension comparisons were case-sensitive, allowing attackers to bypass file type restrictions by using uppercase or mixed-case extensions.
This could lead to unauthorized file uploads or execution of malicious files due to inconsistent validation.
The fix converts file extensions to lowercase before checks, ensuring consistent and secure handling of file types.

Weakness: Improper Neutralization of Case Variations (CWE-179)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('bypasses', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('malicious files', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('secure', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper neutralization', 'secword', ''), ('cwe-179', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
12,{'CWE-79'},GHSA-5vr6-hm68-5j9p,"@@ -44,5 +44,5 @@
 if (! empty($ok)) {
     exit(""$ok"");
 } else {
-    exit(""ERROR: $error"");
+    exit(""ERROR: "".htmlspecialchars($error));;
 }",fix XSS vulnerability in poller-groups.inc.php,"vuln-fix: Sanitize error output to prevent XSS in exit message

The vulnerability was that error messages were output directly without escaping, allowing injection of malicious HTML or JavaScript code in the response. This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user data or session integrity. The fix applies htmlspecialchars to the error message before output, ensuring special characters are escaped and preventing script execution.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('poller-groups.inc.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('error', 'FLAW', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('error', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,"{'CWE-434', 'CWE-79'}",GHSA-5q5w-mqp6-g2gh,"@@ -20,7 +20,9 @@ public function rules()
             'quantity' => ['required', 'integer', 'min:0'],
             'price' => ['required', 'numeric', 'min:0'],
             'sale_price' => ['nullable', 'numeric'],
-            'weight' => ['nullable', 'numeric', 'min:0']
+            'weight' => ['nullable', 'numeric', 'min:0'],
+            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
+            'cover' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
         ];
     }
 }",Fix vulnerability report from hunter.dev,"vuln-fix: Add image upload validation to prevent unsafe file types

The vulnerability was the lack of validation on image and cover file uploads, allowing potentially malicious files to be uploaded to the server. This posed a security risk by enabling attackers to upload executable or harmful files that could compromise the system. The fix enforces strict image type and size validation, restricting uploads to safe image formats and limiting file size to 2MB. 

Weakness: Improper Input Validation (CWE-20)  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('hunter.dev', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('server', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
14,{'CWE-79'},GHSA-vpwq-6cp4-ffqc,"@@ -309,6 +309,8 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".aspx"")
 			|| $isDangerStr($filename , "".xsd"")
 			|| $isDangerStr($filename , "".asa"")
+			|| $isDangerStr($filename , "".cshtml"")
+			|| $isDangerStr($filename , "".axd"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Prevent dangerous file extensions in upload validation

The file upload validation missed blocking certain dangerous extensions like .cshtml and .axd, which can contain executable code or sensitive handlers. Allowing these files poses a risk of remote code execution or unauthorized access to server internals. The fix adds checks to reject filenames with .cshtml and .axd extensions, enhancing upload security by preventing potentially harmful files.

Weakness: CWE-434 - Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('remote code execution', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('security', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
15,{'CWE-79'},GHSA-j6p2-cx3w-6jcp,"@@ -1079,7 +1079,7 @@
 
   // Helper function to escape a string for HTML rendering.
   var escapeHTML = function(string) {
-    return string.replace(/&(?!\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    return string.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
   };
 
 }).call(this);","Fixed escapeHTML function
to skip not only &***;, but also &#***; and &x***;","vuln-fix: Improve HTML escaping to prevent XSS via numeric entities

The HTML escaping function did not properly encode numeric character references, allowing crafted input with numeric entities to bypass escaping and inject malicious HTML or scripts. This posed a cross-site scripting risk by enabling attackers to insert executable code into rendered pages. The fix extends the escape pattern to recognize and encode numeric decimal and hexadecimal entities, ensuring all special characters are safely escaped.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('fixed', 'ACTION', ''), ('escapehtml', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('bypass', 'secword', ''), ('escaping', 'secword', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escape', 'secword', ''), ('encode', 'secword', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
16,{'CWE-79'},GHSA-h4mx-xv96-2jgm,"@@ -9,7 +9,7 @@
         {f:translate(
         key: 'forgot_validate_reset_password_html',
         extensionName: 'felogin',
-        arguments: '{ 0: receiverName, 1: recoveryLink, 2: validUntil }'
+        arguments: '{ 0: ""{receiverName -> f:format.htmlspecialchars()}"", 1: recoveryLink, 2: validUntil }'
         ) -> f:format.html()}
     </f:spaceless>
 </f:section>","[SECURITY] Avoid HTML injection in password recovery mail

The `receiverName` variable used in the password recovery mail of the
Extbase felogin plugin was susceptible to HTML injection due to
missing sanitization. The variable is now passed thru the
`f:format.htmlspecialchars` ViewHelper.

Resolves: #96559
Releases: main, 11.5, 10.4
Change-Id: I60e23c161f7f2fcc87b8870345b10a4c31d7b8db
Security-Bulletin: TYPO3-CORE-SA-2022-004
Security-References: CVE-2022-31049
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/74904
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Escape user input in password reset email template

The vulnerability was caused by unescaped user input in the password reset email template, allowing injection of malicious HTML or scripts. This poses a security risk by enabling cross-site scripting (XSS) attacks that could compromise user accounts or session data. The fix applies HTML escaping to the receiverName variable to prevent injection of executable code in the email content.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('password', 'secword', ''), ('password', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('sanitization', 'secword', ''), ('format.htmlspecialchars', 'SECWORD', ''), ('#96559', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('password', 'secword', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('password', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
17,{'CWE-79'},GHSA-wx69-rvg3-x7fc,"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {
 		'user.updateCover': socketUser.updateCover,
 		'groups.cover.update': socketGroup.cover.update,
 	};
-	if (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {
+	if (!socket.uid || !data || !data.chunk ||
+		!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {
 		throw new Error('[[error:invalid-data]]');
 	}
 
-	inProgress[socket.id] = inProgress[socket.id] || {};
+	inProgress[socket.id] = inProgress[socket.id] || Object.create(null);
 	const socketUploads = inProgress[socket.id];
 	const { method } = data.params;",fix: guard against prototype pollution,"vuln-fix: Prevent prototype pollution in upload method validation

The vulnerability allowed attackers to bypass method validation by exploiting inherited properties on the methodToFunc object, leading to potential unauthorized function execution. This posed a security risk by enabling attackers to invoke unintended methods through prototype pollution. The fix enforces a safer property check using hasOwnProperty and initializes inProgress with a null-prototype object to prevent prototype chain attacks.

Weakness: Prototype Pollution (CWE-1321)  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('prototype pollution', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('exploiting', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('prototype pollution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('initializes', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attacks', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('prototype pollution', 'secword', ''), ('cwe-1321', 'CWEID', ''), ('high', 'SEVERITY', '')]"
18,{'CWE-79'},GHSA-95hx-62rh-gg96,"@@ -317,7 +317,7 @@ public function getWidgetVariables($hookName = null, array $configuration = [])
             }
         }
         $this->contact['contacts'] = $this->getTemplateVarContact();
-        $this->contact['message'] = html_entity_decode(Tools::getValue('message'));
+        $this->contact['message'] = Tools::getValue('message');
         $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');
 
         if (!(bool)Configuration::isCatalogMode()) {
@@ -388,9 +388,10 @@ public function getTemplateVarOrders()
     {
         $orders = [];
 
-        if (!isset($this->customer_thread['id_order'])
+        if (empty($this->customer_thread['id_order'])
             && isset($this->context->customer)
-            && $this->context->customer->isLogged()) {
+            && $this->context->customer->isLogged()
+        ) {
             $customer_orders = Order::getCustomerOrders($this->context->customer->id);
 
             foreach ($customer_orders as $customer_order) {
@@ -401,7 +402,7 @@ public function getTemplateVarOrders()
                     $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();
                 }
             }
-        } elseif (isset($this->customer_thread['id_order']) && (int)$this->customer_thread['id_order'] > 0) {
+        } elseif (isset($this->customer_thread['id_order']) && (int) $this->customer_thread['id_order'] > 0) {
             $myOrder = new Order($this->customer_thread['id_order']);
 
             if (Validate::isLoadedObject($myOrder)) {
@@ -411,13 +412,13 @@ public function getTemplateVarOrders()
             }
         }
 
-        if (isset($this->customer_thread['id_product'])) {
+        if (!empty($this->customer_thread['id_product'])) {
             $id_order = isset($this->customer_thread['id_order']) ?
-                      (int)$this->customer_thread['id_order'] :
+                      (int) $this->customer_thread['id_order'] :
                       0;
 
             $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(
-                new Product((int)$this->customer_thread['id_product'])
+                new Product((int) $this->customer_thread['id_product'])
             );
         }
 
@@ -584,7 +585,7 @@ public function sendMessage()
                 $var_list = [
                     '{order_name}' => '-',
                     '{attached_file}' => '-',
-                    '{message}' => Tools::nl2br(Tools::stripslashes($message)),
+                    '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::stripslashes($message))),
                     '{email}' =>  $from,
                     '{product_name}' => '',
                 ];","Merge pull request from GHSA-95hx-62rh-gg96

Do not unescape form message data","vuln-fix: Sanitize contact form message to prevent XSS attacks

The contact form message input was not properly sanitized, allowing raw HTML entities to be decoded and potentially executed in the output context. This posed a security risk by enabling cross-site scripting (XSS) attacks through malicious user input. The fix applies UTF-8 HTML entity encoding to the message content before rendering, ensuring that any HTML tags are safely escaped and not executed.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('ghsa-95hx-62rh', 'VULNID', 'GHSA'), ('unescape', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('sanitized', 'SECWORD', ''), ('decoded', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
19,{'CWE-79'},GHSA-82j4-vr25-x394,"@@ -304,6 +304,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
+			|| $isDangerStr($filename , "".aspx"")			
 		) {
 			return true;
 		}","Merge pull request #1629 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Prevent dangerous .aspx files from being accepted as safe filenames

The vulnerability allowed .aspx files to bypass filename danger checks, enabling potentially unsafe file uploads.
This poses a security risk as .aspx files can contain executable server-side code, leading to remote code execution.
The fix adds .aspx to the list of dangerous filename extensions, blocking such files from being accepted.


Weakness: CWE-434: Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.23529411764705882,"[('#1629', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('safe', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('danger', 'secword', ''), ('unsafe', 'SECWORD', ''), ('security', 'SECWORD', ''), ('server', 'SECWORD', ''), ('remote code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
20,{'CWE-79'},GHSA-m52x-29pq-w3vv,"@@ -1726,7 +1726,7 @@ function createHotSpot(hs) {
         if (config.basePath && !absoluteURL(imgp))
             imgp = config.basePath + imgp;
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);
+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);
         a.target = '_blank';
         span.appendChild(a);
         var image = document.createElement('img');
@@ -1738,7 +1738,7 @@ function createHotSpot(hs) {
         span.style.maxWidth = 'initial';
     } else if (hs.URL) {
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL);
+        a.href = sanitizeURL(hs.URL, true);
         if (hs.attributes) {
             for (var key in hs.attributes) {
                 a.setAttribute(key, hs.attributes[key]);
@@ -2012,7 +2012,7 @@ function processOptions(isPreview) {
                 var authorText = escapeHTML(config[key]);
                 if (config.authorURL) {
                     var authorLink = document.createElement('a');
-                    authorLink.href = sanitizeURL(config['authorURL']);
+                    authorLink.href = sanitizeURL(config['authorURL'], true);
                     authorLink.target = '_blank';
                     authorLink.innerHTML = escapeHTML(config[key]);
                     authorText = authorLink.outerHTML;
@@ -2023,7 +2023,7 @@ function processOptions(isPreview) {
             
             case 'fallback':
                 var link = document.createElement('a');
-                link.href = sanitizeURL(config[key]);
+                link.href = sanitizeURL(config[key], true);
                 link.target = '_blank';
                 link.textContent = 'Click here to view this panorama in an alternative viewer.';
                 var message = document.createElement('p');
@@ -2389,10 +2389,17 @@ function escapeHTML(s) {
  * The URL cannot be of protocol 'javascript'.
  * @private
  * @param {string} url - URL to sanitize
+ * @param {boolean} href - True if URL is for link (blocks data URIs)
  * @returns {string} Sanitized URL
  */
-function sanitizeURL(url) {
-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {
+function sanitizeURL(url, href) {
+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||
+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {
+        console.log('Script URL removed.');
+        return 'about:blank';
+    }
+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {
+        console.log('Data URI removed from link.');
         return 'about:blank';
     }
     return url;","Merge pull request from GHSA-m52x-29pq-w3vv

Fix potential XSS vulnerability","vuln-fix: Prevent unsafe URLs in links to mitigate script injection

The vulnerability allowed unsafe URLs with javascript:, vbscript:, or data: schemes in link href attributes, enabling potential cross-site scripting attacks. This is a security risk because malicious URLs can execute arbitrary scripts in users' browsers, compromising user data and application integrity. The fix enforces stricter URL sanitization by blocking these schemes specifically for link hrefs, replacing them with safe placeholders to prevent script execution.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)
Severity: High
CVSS: 7.5",0.23529411764705882,"[('ghsa-m52x-29pq', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('mitigate', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unsafe', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('safe', 'secword', ''), ('prevent', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('high', 'SEVERITY', '')]"
21,{'CWE-79'},GHSA-xg72-6c83-ghh4,"@@ -563,17 +563,25 @@
                 }
 
             } else if ($ext === 'svg') {
-
+                $valid = false;
                 if (is_file($filePath)) {
                     $sanitizer = new \enshrined\svgSanitize\Sanitizer();
                     // Load the dirty svg
                     $dirtySVG = file_get_contents($filePath);
                      // Pass it to the sanitizer and get it back clean
-                    $cleanSVG = $sanitizer->sanitize($dirtySVG);
-                    file_put_contents($filePath, $cleanSVG);
+                    try {
+                        $cleanSVG = $sanitizer->sanitize($dirtySVG);
+                        $valid = true;
+                    } catch (\Exception $e) {
+                        $valid = false;
+                    }
+
+                    if ($valid) {
+                        file_put_contents($filePath, $cleanSVG);
+                    }
 
                 }
-               $valid = true;
+
 
             } else {
                 $valid = false;",update,"vuln-fix: Prevent unhandled exceptions during SVG sanitization

The vulnerability occurs because exceptions thrown during SVG sanitization were not caught, potentially causing application crashes or bypassing file validation. This is a security risk as it may allow malicious SVG files to be processed without proper sanitization or disrupt normal application flow. The fix adds exception handling around the sanitization process and only writes sanitized content if no errors occur, ensuring robust validation and stability.

Weakness: Improper Exception Handling (CWE-754)  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('sanitization', 'secword', ''), ('bypassing', 'SECWORD', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('sanitization', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitization', 'secword', ''), ('sanitized', 'SECWORD', ''), ('errors', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-754', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
22,{'CWE-79'},GHSA-hc72-vj3g-5g2g,"@@ -11,13 +11,16 @@
 using ZKEACMS.Common.Models;
 using Easy;
 using Microsoft.EntityFrameworkCore;
+using ZKEACMS.Safety;
 
 namespace ZKEACMS.Common.Service
 {
     public class NavigationService : ServiceBase<NavigationEntity, CMSDbContext>, INavigationService
     {
-        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext) : base(applicationContext, dbContext)
+        private readonly IHtmlSanitizer _htmlSanitizer;
+        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext, IHtmlSanitizer htmlSanitizer) : base(applicationContext, dbContext)
         {
+            _htmlSanitizer = htmlSanitizer;
         }
         public override DbSet<NavigationEntity> CurrentDbSet => DbContext.Navigation;
         public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
@@ -27,8 +30,34 @@ public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
                 item.ParentId = ""#"";
             }
             item.ID = Guid.NewGuid().ToString(""N"");
+            Santize(item);
             return base.Add(item);
         }
+
+        public override ServiceResult<NavigationEntity> AddRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.AddRange(items);
+        }
+
+        public override ServiceResult<NavigationEntity> Update(NavigationEntity item)
+        {
+            Santize(item);
+            return base.Update(item);
+        }
+
+        public override ServiceResult<NavigationEntity> UpdateRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.UpdateRange(items);
+        }
+
         public override void Remove(NavigationEntity item)
         {
             Remove(m => m.ParentId == item.ID);
@@ -73,5 +102,11 @@ public void Move(string id, string parentId, int position, int oldPosition)
             }
             Update(nav);
         }
+
+        private void Santize(NavigationEntity item)
+        {
+            item.Title = _htmlSanitizer.Sanitize(item.Title);
+            item.Html = _htmlSanitizer.Sanitize(item.Html);
+        }
     }
 }
\ No newline at end of file","Sanitize Html

#457","vuln-fix: Sanitize HTML input in NavigationService to prevent XSS

The vulnerability was that HTML content in navigation entities was not sanitized, allowing malicious scripts to be stored and executed in the application context. This posed a critical security risk by enabling cross-site scripting (XSS) attacks that could compromise user data and application integrity. The fix applies HTML sanitization to all input fields before adding or updating navigation entities, ensuring unsafe content is removed.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)
Severity: Critical
CVSS: 9.8",0.23529411764705882,"[('sanitize', 'secword', ''), ('#457', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', ''), ('sanitized', 'SECWORD', ''), ('malicious', 'secword', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('adding', 'ACTION', ''), ('updating', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('removed', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('critical', 'SEVERITY', '')]"
23,{'CWE-79'},GHSA-8xqr-4cpm-wx7g,"@@ -10,7 +10,7 @@ export default class ReactSVG extends React.Component {
   static defaultProps = {
     callback: () => {},
     className: null,
-    evalScripts: 'once',
+    evalScripts: 'never',
     style: {},
     wrapperClassName: null
   }",Changed default evalScripts prop to match documentation.,"vuln-fix: Disable script evaluation in ReactSVG component by default

Allowing script evaluation in SVGs can lead to cross-site scripting attacks if malicious scripts are embedded within SVG content. This poses a significant security risk by enabling attackers to execute arbitrary code in the context of the application. The fix changes the default evalScripts property to 'never', preventing automatic script execution in SVGs unless explicitly enabled.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('changed', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('changes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
24,{'CWE-79'},GHSA-h3gg-7wx2-cq3h,"@@ -21,7 +21,8 @@ export default function addStickyControl() {
       if (firstPost) {
         const excerpt = truncate(firstPost.contentPlain(), 175);
 
-        items.add('excerpt', m.trust(excerpt), -100);
+        // Wrapping in <div> because ItemList entries need to be vnodes
+        items.add('excerpt', <div>{excerpt}</div>, -100);
       }
     }
   });",Fix evaluation of post content by m.trust() (#24),"vuln-fix: Prevent XSS by wrapping excerpt in a safe vnode container

The vulnerability was caused by directly trusting and injecting raw HTML content into the UI without proper containment, allowing potential cross-site scripting attacks. This is a security risk because malicious scripts could execute in users' browsers, compromising user data and session integrity. The fix wraps the excerpt in a React vnode <div> element, ensuring safer rendering and preventing untrusted HTML from executing as script. 

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('m.trust', 'URL', ''), ('#24', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('safe', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('untrusted', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
25,{'CWE-79'},GHSA-h6wm-mr85-4h9g,"@@ -287,7 +287,7 @@ private function userAuth()
         }
 
         $this->ipWarning();
-        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => $nick]);
+        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);
         return false;
     }","Sanitized username when showing user not found message.
------
Saneado nombre de usuario al mostrar el mensaje de usuario no encontrado.","vuln-fix: Sanitize user input in login warning log

The login warning log previously included raw user input without sanitization, allowing potential injection of malicious HTML or scripts. This posed a security risk by enabling cross-site scripting (XSS) attacks through log output rendering. The fix applies HTML escaping to the user nickname before logging, preventing injection of executable code in logs.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('sanitized', 'SECWORD', ''), ('found', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
26,{'CWE-79'},GHSA-pxpf-v376-7xx5,"@@ -101,7 +101,7 @@ Tagify.prototype = {
 
         _s.disabled = input.hasAttribute('disabled')
         _s.readonly = _s.readonly || input.hasAttribute('readonly')
-        _s.placeholder = input.getAttribute('placeholder') || _s.placeholder || """"
+        _s.placeholder = escapeHTML(input.getAttribute('placeholder') || _s.placeholder || """")
         _s.required = input.hasAttribute('required')
 
         for( let name in _s.classNames )",fixes #989 - fix XSS,"vuln-fix: Escape placeholder attribute to prevent XSS

The placeholder attribute was assigned directly from user input without sanitization, allowing injection of malicious HTML or scripts.  
This poses a security risk as attackers could execute arbitrary JavaScript in the context of the application, leading to cross-site scripting attacks.  
The fix applies HTML escaping to the placeholder value before assignment, ensuring any injected code is rendered harmless.  

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fixes', 'ACTION', ''), ('#989', 'ISSUE', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitization', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
27,{'CWE-79'},GHSA-6hjc-m38h-7jhh,"@@ -96,7 +96,7 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
             if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
                 $ext = strtolower($ext);
             }
-            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+            if ($ext === '' || $ext === 'svg' || !in_array($ext, $allowedExtensions, true)) {
                 throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
             }
             // Send the file as a stream, so it can exist anywhere",Disallow SVGs,"vuln-fix: Prevent SVG file extension in SEO file link handler

The vulnerability allowed SVG files to bypass the allowed extensions check, enabling potentially unsafe file types to be processed and served by the application. This poses a security risk because SVG files can contain malicious scripts or code that lead to cross-site scripting (XSS) or other client-side attacks. The fix explicitly blocks the 'svg' extension by adding it to the disallowed condition, preventing SVG files from being accepted or served. 

Weakness: CWE-434: Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('vulnerability', 'secword', ''), ('bypass', 'secword', ''), ('unsafe', 'secword', ''), ('security', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adding', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
28,{'CWE-79'},GHSA-9g3v-j3cr-6fc6,"@@ -75,6 +75,10 @@ classes: 'table table-responsive table-no-bordered',
                 export: 'fa-download',
                 clearSearch: 'fa-times'
             },
+            exportOptions: {
+                htmlContent: true,
+            },
+
             exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],
             onLoadSuccess: function () {
                 $('[data-toggle=""tooltip""]').tooltip(); // Needed to attach tooltips after ajax call","Fixes possible XSS on all-file-types export

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Prevent HTML content export to mitigate XSS risk

The export feature allowed HTML content to be included in exported files, which could embed malicious scripts. This posed a security risk by enabling cross-site scripting attacks when users opened exported documents. The fix disables exporting raw HTML content by removing the htmlContent option, ensuring only safe data formats are exported.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('fixes', 'ACTION', ''), ('xss', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('mitigate', 'ACTION', ''), ('xss', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
29,{'CWE-79'},GHSA-6qcc-whgp-pjj2,"@@ -79,8 +79,8 @@ pimcore.document.pages.settings = Class.create(pimcore.document.settings_abstrac
             var updateSerpPreview = function () {
 
                 var metaPanel = this.layout.getComponent(""metaDataPanel"");
-                var title = metaPanel.getComponent(""title"").getValue();
-                var description = metaPanel.getComponent(""description"").getValue();
+                var title = htmlspecialchars(metaPanel.getComponent(""title"").getValue());
+                var description = htmlspecialchars(metaPanel.getComponent(""description"").getValue());
 
                 var truncate = function( text, n ){
                     if (text.length <= n) { return text; }",escaping fields in SERP preview,"vuln-fix: Sanitize metadata inputs to prevent XSS in page settings

User-provided metadata fields like title and description were not properly escaped before rendering, allowing injection of malicious HTML or scripts. This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or site integrity. The fix applies htmlspecialchars encoding to these inputs, ensuring special characters are safely escaped before use in the UI.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('escaping', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
30,{'CWE-79'},GHSA-4fc4-4p5g-6w89,"@@ -50,17 +50,18 @@
 		htmlFilter.addRules( createBogusAndFillerRules( editor, 'html' ), { applyToAll: true } );
 
 		editor.on( 'toHtml', function( evt ) {
-			var evtData = evt.data,
+			var randomNumber = generateRandomNumber(),
+				evtData = evt.data,
 				data = evtData.dataValue,
 				fixBodyTag;
 
 			// Before we start protecting markup, make sure there are no externally injected
 			// protection keywords.
-			data = removeReservedKeywords( data );
+			data = removeReservedKeywords( data, randomNumber );
 
 			// The source data is already HTML, but we need to clean
 			// it up and apply the filter.
-			data = protectSource( data, editor );
+			data = protectSource( data, editor, randomNumber );
 
 			// Protect content of textareas. (https://dev.ckeditor.com/ticket/9995)
 			// Do this before protecting attributes to avoid breaking:
@@ -70,7 +71,7 @@
 			// Before anything, we must protect the URL attributes as the
 			// browser may changing them when setting the innerHTML later in
 			// the code.
-			data = protectAttributes( data );
+			data = protectAttributes( data, randomNumber );
 
 			// Protect elements than can't be set inside a DIV. E.g. IE removes
 			// style tags from innerHTML. (https://dev.ckeditor.com/ticket/3710)
@@ -90,7 +91,7 @@
 
 			// There are attributes which may execute JavaScript code inside fixBin.
 			// Encode them greedily. They will be unprotected right after getting HTML from fixBin. (https://dev.ckeditor.com/ticket/10)
-			data = protectInsecureAttributes( data );
+			data = protectInsecureAttributes( data, randomNumber );
 
 			var fixBin = evtData.context || editor.editable().getName(),
 				isPre;
@@ -110,7 +111,7 @@
 			data = el.getHtml().substr( 1 );
 
 			// Restore shortly protected attribute names.
-			data = data.replace( new RegExp( 'data-cke-' + CKEDITOR.rnd + '-', 'ig' ), '' );
+			data = data.replace( new RegExp( 'data-cke-' + randomNumber + '-', 'ig' ), '' );
 
 			isPre && ( data = data.replace( /^<pre>|<\/pre>$/gi, '' ) );
 
@@ -838,13 +839,13 @@
 
 	var protectSelfClosingRegex = /<cke:(param|embed)([^>]*?)\/?>(?!\s*<\/cke:\1)/gi;
 
-	function protectAttributes( html ) {
+	function protectAttributes( html, randomNumber ) {
 		return html.replace( protectElementRegex, function( element, tag, attributes ) {
 			return '<' + tag + attributes.replace( protectAttributeRegex, function( fullAttr, attrName ) {
 				// Avoid corrupting the inline event attributes (https://dev.ckeditor.com/ticket/7243).
 				// We should not rewrite the existed protected attributes, e.g. clipboard content from editor. (https://dev.ckeditor.com/ticket/5218)
 				if ( protectAttributeNameRegex.test( attrName ) && attributes.indexOf( 'data-cke-saved-' + attrName ) == -1 )
-					return ' data-cke-saved-' + fullAttr + ' data-cke-' + CKEDITOR.rnd + '-' + fullAttr;
+					return ' data-cke-saved-' + fullAttr + ' data-cke-' + randomNumber + '-' + fullAttr;
 
 				return fullAttr;
 			} ) + '>';
@@ -897,8 +898,8 @@
 	// * opening tags - e.g. `<onfoo`,
 	// * closing tags - e.g. </onfoo> (tested in ""false positive 1""),
 	// * part of other attribute - e.g. `data-onfoo` or `fonfoo`.
-	function protectInsecureAttributes( html ) {
-		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + CKEDITOR.rnd + '-$2' );
+	function protectInsecureAttributes( html, randomNumber ) {
+		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + randomNumber + '-$2' );
 	}
 
 	function unprotectRealComments( html ) {
@@ -917,11 +918,11 @@
 		} );
 	}
 
-	function protectSource( data, editor ) {
+	function protectSource( data, editor, randomNumber ) {
 		var protectedHtml = [],
 			protectRegexes = editor.config.protectedSource,
 			store = editor._.dataStore || ( editor._.dataStore = { id: 1 } ),
-			tempRegex = /<\!--\{cke_temp(comment)?\}(\d*?)-->/g;
+			tempRegex = new RegExp('<\\!--\\{cke_temp_' + randomNumber + '(comment)?\\}(\\d*?)-->', 'g' );
 
 		var regexes = [
 			// Script tags will also be forced to be protected, otherwise
@@ -940,7 +941,7 @@
 		// Note that we use a different tag for comments, as we need to
 		// transform them when applying filters.
 		data = data.replace( ( /<!--[\s\S]*?-->/g ), function( match ) {
-			return '<!--{cke_tempcomment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+			return '<!--{cke_temp_' + randomNumber + 'comment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
 		} );
 
 		for ( var i = 0; i < regexes.length; i++ ) {
@@ -951,7 +952,8 @@
 				} );
 
 				// Avoid protecting over protected, e.g. /\{.*?\}/
-				return ( /cke_temp(comment)?/ ).test( match ) ? match : '<!--{cke_temp}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+				return ( tempRegex ).test( match ) ? match : '<!--{cke_temp_' + randomNumber + '}' +
+					( protectedHtml.push( match ) - 1 ) + '-->';
 			} );
 		}
 		data = data.replace( tempRegex, function( $, isComment, id ) {
@@ -1107,6 +1109,16 @@
 			};
 		}
 	} )();
+
+	function generateRandomNumber() {
+		var cryptoApi = window.crypto || window.msCrypto;
+
+		if ( cryptoApi ) {
+			return cryptoApi.getRandomValues( new Uint32Array( 1 ) )[ 0 ];
+		}
+
+		return Math.floor( Math.random() *  9000000000 + 1000000000 );
+	}
 } )();
 
 /**",Code refactoring.,"vuln-fix: Use per-instance random tokens to protect HTML attributes

The vulnerability was that static or global tokens were used to protect HTML attributes, allowing attackers to predict and bypass protection mechanisms in the editor's output.
This posed a security risk by enabling injection or manipulation of protected attributes, potentially leading to cross-site scripting or data corruption.
The fix generates a unique random number per event to namespace protection tokens, preventing attackers from guessing or reusing them across requests.

Weakness: CWE-330: Use of Insufficiently Random Values  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('protect', 'secword', ''), ('vulnerability', 'secword', ''), ('protect', 'secword', ''), ('attackers', 'SECWORD', ''), ('bypass', 'secword', ''), ('protection', 'SECWORD', ''), ('security', 'secword', ''), ('injection', 'secword', ''), ('protected', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('fix', 'ACTION', ''), ('protection', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-330', 'CWEID', ''), ('high', 'SEVERITY', '')]"
31,{'CWE-79'},GHSA-fp76-f299-v3hj,"@@ -127,8 +127,7 @@ public function getFile(): bool
         $allowedFolders = ['node_modules', 'vendor', 'Dinamic', 'Core', 'Plugins', 'MyFiles/Public'];
         foreach ($allowedFolders as $folder) {
             if ('/' . $folder === substr($uri, 0, 1 + strlen($folder))) {
-                header('Content-Type: ' . $this->getMime($filePath));
-                readfile($filePath);
+                $this->download($filePath);
                 return true;
             }
         }
@@ -137,14 +136,7 @@ public function getFile(): bool
         $token = filter_input(INPUT_GET, 'myft');
         $fixedFilePath = substr(urldecode($uri), 1);
         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {
-            header('Content-Type: ' . $this->getMime($filePath));
-
-            // disable the buffer if enabled
-            if (ob_get_contents()) {
-                ob_end_flush();
-            }
-
-            readfile($filePath);
+            $this->download($filePath);
             return true;
         }
 
@@ -205,6 +197,23 @@ private function deploy()
         }
     }
 
+    private function download(string $filePath)
+    {
+        header('Content-Type: ' . $this->getMime($filePath));
+
+        // disable the buffer if enabled
+        if (ob_get_contents()) {
+            ob_end_flush();
+        }
+
+        // force to download svg files to prevent XSS attacks
+        if (strpos($filePath, '.svg') !== false) {
+            header('Content-Disposition: attachment; filename=""' . basename($filePath) . '""');
+        }
+
+        readfile($filePath);
+    }
+
     /**
      * Return the mime type from given file.
      *","Force to download SVG files to prevent security problems.
------
Forzamos a descargar los archivos SVG para evitar problemas de seguridad.","vuln-fix: Prevent XSS by forcing SVG file download

The vulnerability allowed SVG files to be served inline, enabling potential cross-site scripting (XSS) attacks when malicious SVG content was executed in the browser context. Serving SVG files inline is a security risk because it can lead to script execution and compromise user data or session integrity. The fix centralizes file delivery and forces SVG files to be downloaded as attachments, preventing inline rendering and mitigating XSS risks.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('prevent', 'ACTION', ''), ('security', 'secword', ''), ('problems', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('xss', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
32,{'CWE-79'},GHSA-mxvc-fwgx-j778,"@@ -16,7 +16,7 @@
 <div>
     <h1>Error</h1>
     <p>
-        {{ error_message|safe }}
+        {{ error_message }}
     </p>
     <hr>
     <p>","Render error message w/o `safe` filter

The error message shown in the error template does not need to be
rendered using the safe filter, and furthermore opens up an XSS
vulnerability.","vuln-fix: Prevent XSS by removing unsafe error message rendering

The error message was rendered using a template filter that allowed raw HTML, enabling injection of malicious scripts into the page.
This posed a cross-site scripting risk, potentially compromising user sessions and data confidentiality.
The fix removes the unsafe filter, ensuring error messages are properly escaped before rendering in the template.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('error', 'FLAW', ''), ('safe', 'secword', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('removing', 'ACTION', ''), ('unsafe', 'secword', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('unsafe', 'secword', ''), ('ensuring', 'ACTION', ''), ('error', 'FLAW', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
33,{'CWE-79'},GHSA-c65v-p733-9796,"@@ -93,15 +93,15 @@ public function transformAsset(Asset $asset)
                     $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin/custom_fields/general.encrypted'));
 
                     $fields_array[$field->name] = [
-                            'field' => $field->convertUnicodeDbSlug(),
-                            'value' => $value,
+                            'field' => e($field->convertUnicodeDbSlug()),
+                            'value' => e($value),
                             'field_format' => $field->format,
                         ];
 
                 } else {
                     $fields_array[$field->name] = [
-                        'field' => $field->convertUnicodeDbSlug(),
-                        'value' => $asset->{$field->convertUnicodeDbSlug()},
+                        'field' => e($field->convertUnicodeDbSlug()),
+                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),
                         'field_format' => $field->format,
                     ];
 
@@ -134,7 +134,7 @@ public function transformAsset(Asset $asset)
                         
                             'id' => $component->id,
                             'pivot_id' => $component->pivot->id,
-                            'name' => $component->name,
+                            'name' => e($component->name),
                             'qty' => $component->pivot->assigned_qty,
                             'price_cost' => $component->purchase_cost,
                             'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,","Merge pull request #10315 from snipe/fixes/escape_custom_fields_in_api_response

Escape custom field values in API response","vuln-fix: Escape output to prevent cross-site scripting vulnerabilities

The code was outputting unescaped user-controlled or database-derived strings directly into views, allowing injection of malicious scripts.
This posed a security risk by enabling attackers to execute arbitrary JavaScript in users’ browsers, potentially stealing sensitive data or hijacking sessions.
The fix applies proper HTML escaping to all dynamic fields before rendering, mitigating cross-site scripting attacks by neutralizing harmful input. 

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('#10315', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('escape_custom_fields_in_api_response', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('sensitive data', 'secword', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
34,{'CWE-79'},GHSA-m8rp-q82r-c5mf,"@@ -91,7 +91,6 @@
             <hr class=""thin"" />
             <div class=""row"">
 
-
                 <?php
                 $iformVr=0;
                 foreach ($form_values_formated as $form_values_row) {
@@ -106,12 +105,12 @@
                             <?php if (!is_array($val1)){ ?>
                                 <div>
                                     <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
-                                    <p><?php print $val1; ?></p>
+                                    <p><?php print htmlentities($val1); ?></p>
                                 </div>
                             <?php } else { ?>
                                 <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
                                 <?php foreach ($val1 as $val1_1){ ?>
-                                    <p><?php print $val1_1 . '<br />'; ?></p>
+                                    <p><?php print htmlentities($val1_1) . '<br />'; ?></p>
                                 <?php }?>
                             <?php } ?>
                         <?php } ?>",xss on contact form fix,"vuln-fix: Prevent XSS by encoding output in form display

User-submitted form values were output directly into HTML without encoding, allowing injection of malicious scripts into the page content. This posed a critical risk of cross-site scripting attacks, enabling attackers to execute arbitrary JavaScript in users' browsers. The fix applies htmlentities() to all displayed form values, ensuring special characters are safely encoded and scripts cannot be injected.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: Critical  
CVSS: 8.8",0.11764705882352941,"[('xss', 'secword', ''), ('fix', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('critical', 'SEVERITY', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
35,{'CWE-79'},GHSA-3j58-p785-f27x,"@@ -17,9 +17,6 @@
 class ApiController  extends FrontendController
 {
 
-
-
-
     public function api_html()
     {
         if (!defined('MW_API_HTML_OUTPUT')) {
@@ -609,12 +606,14 @@ public function module()
 
         $request_data = array_merge($_GET, $_POST);
 
-
         // sanitize attributes
         if($request_data){
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
+
+                $v = $antixss->xss_clean($v);
+
                 if(is_string($k)){
                     $k = $antixss->xss_clean($k);
                     if($k){
@@ -623,6 +622,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
+                
             }
             $request_data = $request_data_new;
         }",fix xss on module api call in value parameters,"vuln-fix: Sanitize all request data keys and values to prevent XSS

The vulnerability was that user input keys and values were not consistently sanitized, allowing malicious scripts to be injected via request parameters.
This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or execute arbitrary code in the browser.
The fix applies XSS cleaning to both keys and values of all request data before further processing, ensuring no unsanitized input is used. 

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('keys', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('unsanitized', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
36,{'CWE-79'},GHSA-7c82-mp33-r854,"@@ -1,6 +1,128 @@
 (function ($) {
   'use strict';
 
+  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
+
+  var uriAttrs = [
+    'background',
+    'cite',
+    'href',
+    'itemtype',
+    'longdesc',
+    'poster',
+    'src',
+    'xlink:href'
+  ];
+
+  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
+
+  var DefaultWhitelist = {
+    // Global attributes allowed on any supplied element below.
+    '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
+    a: ['target', 'href', 'title', 'rel'],
+    area: [],
+    b: [],
+    br: [],
+    col: [],
+    code: [],
+    div: [],
+    em: [],
+    hr: [],
+    h1: [],
+    h2: [],
+    h3: [],
+    h4: [],
+    h5: [],
+    h6: [],
+    i: [],
+    img: ['src', 'alt', 'title', 'width', 'height'],
+    li: [],
+    ol: [],
+    p: [],
+    pre: [],
+    s: [],
+    small: [],
+    span: [],
+    sub: [],
+    sup: [],
+    strong: [],
+    u: [],
+    ul: []
+  }
+
+  /**
+   * A pattern that recognizes a commonly useful subset of URLs that are safe.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
+
+  /**
+   * A pattern that matches safe data URLs. Only matches image, video and audio types.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
+
+  function allowedAttribute (attr, allowedAttributeList) {
+    var attrName = attr.nodeName.toLowerCase()
+
+    if ($.inArray(attrName, allowedAttributeList) !== -1) {
+      if ($.inArray(attrName, uriAttrs) !== -1) {
+        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
+      }
+
+      return true
+    }
+
+    var regExp = $(allowedAttributeList).filter(function (index, value) {
+      return value instanceof RegExp
+    })
+
+    // Check if a regular expression validates the attribute.
+    for (var i = 0, l = regExp.length; i < l; i++) {
+      if (attrName.match(regExp[i])) {
+        return true
+      }
+    }
+
+    return false
+  }
+
+  function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
+    if (sanitizeFn && typeof sanitizeFn === 'function') {
+      return sanitizeFn(unsafeElements);
+    }
+
+    var whitelistKeys = Object.keys(whiteList);
+
+    for (var i = 0, len = unsafeElements.length; i < len; i++) {
+      var elements = unsafeElements[i].querySelectorAll('*');
+
+      for (var j = 0, len2 = elements.length; j < len2; j++) {
+        var el = elements[j];
+        var elName = el.nodeName.toLowerCase();
+
+        if (whitelistKeys.indexOf(elName) === -1) {
+          el.parentNode.removeChild(el);
+
+          continue;
+        }
+
+        var attributeList = [].slice.call(el.attributes);
+        var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
+
+        for (var k = 0, len3 = attributeList.length; k < len3; k++) {
+          var attr = attributeList[k];
+
+          if (!allowedAttribute(attr, whitelistedAttributes)) {
+            el.removeAttribute(attr.nodeName);
+          }
+        }
+      }
+    }
+  }
+
   // Polyfill for browsers with no classList support
   // Remove in v2
   if (!('classList' in document.createElement('_'))) {
@@ -745,7 +867,10 @@
     dropdownAlignRight: false,
     windowPadding: 0,
     virtualScroll: 600,
-    display: false
+    display: false,
+    sanitize: true,
+    sanitizeFn: null,
+    whiteList: DefaultWhitelist
   };
 
   if (version.major === '4') {
@@ -1100,13 +1225,35 @@
                 emptyMenu = menuInner.firstChild.cloneNode(false),
                 marginTop,
                 marginBottom,
-                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements;
+                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements,
+                toSanitize = [];
 
             // replace the existing UL with an empty one - this is faster than $.empty()
             menuInner.replaceChild(emptyMenu, menuInner.firstChild);
 
             for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
-              menuFragment.appendChild(elements[i]);
+              var element = elements[i],
+                  elText,
+                  elementData;
+
+              if (that.options.sanitize) {
+                elText = element.lastChild;
+
+                if (elText) {
+                  elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0].data;
+
+                  if (elementData && elementData.content && !elementData.sanitized) {
+                    toSanitize.push(elText);
+                    elementData.sanitized = true;
+                  }
+                }
+              }
+
+              menuFragment.appendChild(element);
+            }
+
+            if (that.options.sanitize && toSanitize.length) {
+              sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);
             }
 
             if (isVirtual === true) {
@@ -1469,7 +1616,8 @@
           multipleSeparator = document.createTextNode(this.options.multipleSeparator),
           titleFragment = elementTemplates.fragment.cloneNode(false),
           showCount,
-          countMax;
+          countMax,
+          hasContent = false;
 
       this.togglePlaceholder();
 
@@ -1506,6 +1654,7 @@
                 titleOptions.text = option.title;
               } else if (thisData.content && that.options.showContent) {
                 titleOptions.optionContent = thisData.content.toString();
+                hasContent = true;
               } else {
                 if (that.options.showIcon) {
                   titleOptions.optionIcon = thisData.icon;
@@ -1554,6 +1703,10 @@
       // strip all HTML tags and trim the result, then unescape any escaped tags
       this.$button[0].title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();
 
+      if (this.options.sanitize && hasContent) {
+        sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);
+      }
+
       buttonInner.innerHTML = '';
       buttonInner.appendChild(titleFragment);
 
@@ -2833,8 +2986,16 @@
             options = typeof _option == 'object' && _option;
 
         if (!data) {
-          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);
-          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);
+          var dataAttributes = $this.data();
+
+          for (var dataAttr in dataAttributes) {
+            if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
+              delete dataAttributes[dataAttr];
+            }
+          }
+
+          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);
+          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
           $this.data('selectpicker', (data = new Selectpicker(this, config)));
         } else if (options) {
           for (var i in options) {",add sanitize option for data-content (#2199),"vuln-fix: Sanitize HTML content to prevent XSS attacks

Unsanitized HTML content was rendered in dropdown menus and button titles, allowing injection of malicious scripts via unsafe attributes or elements. This posed a critical security risk by enabling cross-site scripting attacks that could compromise user data and application integrity. The fix implements a whitelist-based HTML sanitizer that removes disallowed elements and attributes, validates URLs, and optionally allows custom sanitization functions to ensure only safe content is rendered.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: Critical  
CVSS: 9.8",0.11764705882352941,"[('add', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('#2199', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('unsafe', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('removes', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
37,{'CWE-79'},GHSA-x7r7-wmj8-vv5g,"@@ -8,6 +8,7 @@
 import os
 import re
 from collections import defaultdict
+from urllib.parse import urlparse
 
 from flask import (
     Response,
@@ -170,7 +171,16 @@ def _add_additional_assets(hook):
 def login():
     from flask_login import current_user
 
-    redirect_url = request.args.get(""redirect"", request.script_root + url_for(""index""))
+    default_redirect_url = request.script_root + url_for(""index"")
+    redirect_url = request.args.get(""redirect"", default_redirect_url)
+
+    parsed = urlparse(redirect_url)  # check if redirect url is valid
+    if parsed.scheme != """" or parsed.netloc != """":
+        _logger.warning(
+            f""Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}""
+        )
+        redirect_url = default_redirect_url
+
     permissions = sorted(
         filter(
             lambda x: x is not None and isinstance(x, OctoPrintPermission),","🔒️ Sanitize and validate login redirect

Fixes an XSS and an open redirect issue.","vuln-fix: Prevent open redirect vulnerability in login redirect

The login endpoint accepted arbitrary redirect URLs without validation, allowing attackers to redirect users to malicious external sites.  
This posed a security risk by enabling phishing attacks and potential credential theft through crafted login redirects.  
The fix validates the redirect URL to ensure it is relative and internal, rejecting and logging any external or absolute URLs.  

Weakness: CWE-601 Open Redirect  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('sanitize', 'secword', ''), ('validate', 'secword', ''), ('login', 'secword', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('login', 'secword', ''), ('login', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('phishing', 'secword', ''), ('attacks', 'SECWORD', ''), ('credential', 'secword', ''), ('theft', 'secword', ''), ('login', 'secword', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-601', 'CWEID', ''), ('open redirect', 'secword', ''), ('high', 'SEVERITY', '')]"
38,{'CWE-79'},GHSA-2cqg-q7jm-j35c,"@@ -910,7 +910,7 @@ public function audit(Request $request) {
             }
         }
 
-        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.$request->input('asset_tag').' not found'));
+        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.e($request->input('asset_tag')).' not found'));","Merge pull request #10286 from uberbrady/fix_bulk_audit_xss

Escape asset_tag attribute at controller level for bulk checkout","vuln-fix: Escape user input in error message to prevent XSS

The vulnerability was that user-supplied input was directly embedded in the error message without proper escaping, allowing injection of malicious scripts.
This posed a security risk by enabling cross-site scripting (XSS) attacks when the error message was rendered in clients' browsers.
The fix applies proper escaping to the user input before including it in the error message, mitigating the XSS vulnerability.

Weakness: Cross-Site Scripting (CWE-79)
Severity: Medium
CVSS: 6.1",0.17647058823529413,"[('#10286', 'ISSUE', ''), ('fix_bulk_audit_xss', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('error', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('error', 'FLAW', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
39,{'CWE-79'},GHSA-mg5h-9rhq-4cqx,"@@ -300,6 +300,7 @@ public function isDangerFilename($filename){
 			 $isDangerStr($filename , "".php"")
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
+			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 		) {",file upload bug,"vuln-fix: Prevent dangerous file uploads with .shtm extension

The vulnerability allowed files with the .shtm extension to bypass dangerous filename checks, potentially enabling execution of malicious scripts on the server.
This poses a security risk as attackers could upload and execute harmful code, leading to unauthorized access or data compromise.
The fix adds .shtm to the list of blocked dangerous file extensions, improving filename validation and preventing unsafe file uploads.

Weakness: CWE-434: Unrestricted Upload of File with Dangerous Type
Severity: High
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('malicious', 'secword', ''), ('server', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('preventing', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
40,"{'CWE-89', 'CWE-79'}",GHSA-x92h-wmg2-6hp7,"@@ -1346,22 +1346,37 @@ public function setMethod($method)
      */
     public function getMethod()
     {
-        if (null === $this->method) {
-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
-
-            if ('POST' === $this->method) {
-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
-                    $this->method = strtoupper($method);
-                } elseif (self::$httpMethodParameterOverride) {
-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
-                    if (\is_string($method)) {
-                        $this->method = strtoupper($method);
-                    }
-                }
-            }
+        if (null !== $this->method) {
+            return $this->method;
+        }
+
+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
+
+        if ('POST' !== $this->method) {
+            return $this->method;
+        }
+
+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');
+
+        if (!$method && self::$httpMethodParameterOverride) {
+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
+        }
+
+        if (!\is_string($method)) {
+            return $this->method;
+        }
+
+        $method = strtoupper($method);
+
+        if (\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
+            return $this->method = $method;
+        }
+
+        if (!preg_match('/^[A-Z]++$/D', $method)) {
+            throw new SuspiciousOperationException(sprintf('Invalid method override ""%s"".', $method));
         }
 
-        return $this->method;
+        return $this->method = $method;
     }
 
     /**",[HttpFoundation] reject invalid method override,"vuln-fix: Validate HTTP method override to prevent injection

The vulnerability allowed arbitrary HTTP methods to be set via method override headers or parameters without strict validation. This posed a security risk by enabling attackers to use unexpected or malicious HTTP methods, potentially bypassing security controls or triggering unsafe behaviors. The fix enforces strict validation against a whitelist of allowed methods and rejects invalid or suspicious method overrides with an exception.

Weakness: CWE-20: Improper Input Validation  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.35294117647058826,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('bypassing', 'SECWORD', ''), ('security', 'secword', ''), ('unsafe', 'SECWORD', ''), ('fix', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-20', 'CWEID', ''), ('improper input validation', 'SECWORD', ''), ('high', 'SEVERITY', '')]"
41,{'CWE-79'},GHSA-54qq-9chj-rxhv,"@@ -12,7 +12,7 @@
 
 ?>
 <li class=""nav-item dropleft"">
-    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false""><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
+    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false"" ng-non-bindable><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
     <div class=""dropdown-menu"" style=""min-width: 25rem;"" role=""menu"">
 
         <div class=""row"">",Escape in user box,"vuln-fix: Prevent AngularJS expression injection in user dropdown

User names were rendered inside an AngularJS context without disabling expression evaluation, allowing attackers to inject malicious AngularJS expressions.
This posed a risk of client-side code execution and data exposure through crafted user names containing AngularJS syntax.
The fix adds the ng-non-bindable attribute to the dropdown toggle element to disable AngularJS expression parsing in the user name display.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('code execution', 'SECWORD', ''), ('data exposure', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('user name', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'secword', ''), ('medium', 'SEVERITY', '')]"
42,{'CWE-79'},GHSA-mrvj-7q4f-5p42,"@@ -89,6 +89,16 @@ parameters:
         - pht
         - phtml
         - pgif
+        - hta
+        - htm
+        - html
+        - xhtm
+        - xhtml
+        - jar
+        - js
+        - jse
+        - svg
+        - swf
 
     # Content settings
     ezsettings.default.content.view_cache: true         # Whether to use content view cache or not (Etag/Last-Modified based)","Merge pull request from GHSA-mrvj-7q4f-5p42

Co-authored-by: Gunnstein Lye <gunnstein.lye@ibexa.co>","vuln-fix: Restrict risky file extensions in upload parameters

The application allowed uploading files with potentially dangerous extensions like hta, html, js, and swf, which can lead to client-side code execution or malware delivery. This poses a security risk by enabling attackers to upload and execute malicious scripts or active content on the server or client browsers. The fix adds these risky extensions to the restricted list, preventing their upload and mitigating the risk of code injection and cross-site scripting attacks.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.17647058823529413,"[('ghsa', 'VULNID', 'GHSA'), ('gunnstein.lye@ibexa.co', 'EMAIL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('malware', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('code injection', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
43,{'CWE-79'},GHSA-jq4v-f5q6-mjqq,"@@ -23,6 +23,8 @@
     'usemap',
     # Not standard:
     'dynsrc', 'lowsrc',
+    # HTML5 formaction
+    'formaction'
     ])
 
 # Not in the HTML 4 spec:",Add formaction attribute to defs.link_attrs,"vuln-fix: Add 'formaction' to allowed HTML attributes whitelist

The 'formaction' attribute was missing from the allowed HTML attributes whitelist, enabling potential injection of malicious URLs in form submissions. This omission could allow attackers to redirect form actions to untrusted endpoints, leading to phishing or data exfiltration risks. The fix includes 'formaction' in the whitelist to ensure proper sanitization and prevent unsafe attribute usage.

Weakness: Improper Input Validation (CWE-20)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('add', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('attackers', 'SECWORD', ''), ('untrusted', 'secword', ''), ('phishing', 'secword', ''), ('data exfiltration', 'secword', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
44,{'CWE-79'},GHSA-8x44-pwr2-rgc6,"@@ -119,7 +119,7 @@ public function getTreeAction(Request $request)
                 'id' => $class->getId(),
                 'text' => $text,
                 'leaf' => true,
-                'icon' => $class->getIcon() ? $class->getIcon() : $defaultIcon,
+                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,
                 'cls' => 'pimcore_class_icon',
                 'propertyVisibility' => $class->getPropertyVisibility(),
                 'enableGridLocking' => $class->isEnableGridLocking(),",added escape function to the icon field,"vuln-fix: Sanitize icon field to prevent XSS in class tree

The icon field was output without escaping, allowing injection of malicious HTML or JavaScript in the class tree UI.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary scripts in users’ browsers.
The fix applies htmlspecialchars to the icon value, ensuring special characters are safely encoded before rendering.

Weakness: Cross-Site Scripting (CWE-79)
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('added', 'ACTION', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
45,{'CWE-79'},GHSA-3j9m-hcv9-rpj8,"@@ -1,6 +1,6 @@
 import React from 'react';
 import { css } from '@emotion/css';
-import { GrafanaTheme2 } from '@grafana/data';
+import { GrafanaTheme2, textUtil } from '@grafana/data';
 import { Icon, IconName, Link, useTheme2 } from '@grafana/ui';
 
 export interface Props {
@@ -29,13 +29,15 @@ const DropdownChild = ({ isDivider = false, icon, onClick, target, text, url }:
     </button>
   );
   if (url) {
+    const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url);
+
     element =
       !target && url.startsWith('/') ? (
-        <Link className={styles.element} onClick={onClick} href={url}>
+        <Link className={styles.element} onClick={onClick} href={sanitizedUrl}>
           {linkContent}
         </Link>
       ) : (
-        <a className={styles.element} href={url} target={target} rel=""noopener"" onClick={onClick}>
+        <a className={styles.element} href={sanitizedUrl} target={target} rel=""noopener"" onClick={onClick}>
           {linkContent}
         </a>
       );","Merge pull request #147 from grafana/axelav/sanitized-nav-links-8-2-3

Sanitized NavBar children links to remove angular interpolation v8.2.3","vuln-fix: Sanitize URLs to prevent Angular interpolation injection

The vulnerability allowed untrusted URLs to be used directly in link elements without sanitization, enabling potential Angular expression injection attacks. This posed a security risk by allowing attackers to execute arbitrary code or manipulate the DOM through crafted URLs. The fix applies Angular interpolation sanitization to all URLs before rendering, preventing malicious expressions from being processed.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Severity: High
CVSS: 7.5",0.17647058823529413,"[('#147', 'ISSUE', ''), ('sanitized', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('remove', 'ACTION', ''), ('v8.2.3', 'VERSION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('untrusted', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('preventing', 'ACTION', ''), ('malicious', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'secword', ''), ('high', 'SEVERITY', '')]"
46,{'CWE-79'},GHSA-wg4r-q74r-p7c8,"@@ -305,6 +305,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
 			|| $isDangerStr($filename , "".asp"")			
+			|| $isDangerStr($filename , "".xsl"")
 		) {
 			return true;
 		}","Merge pull request #1630 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Prevent dangerous .xsl files from being accepted as safe filenames

The filename validation function did not consider .xsl files as dangerous, allowing potentially harmful files to bypass security checks. This posed a risk of malicious XML stylesheet injection or server-side processing vulnerabilities. The fix adds .xsl to the list of disallowed extensions to block unsafe file uploads effectively.
Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type
Severity: High
CVSS: 7.5",0.23529411764705882,"[('#1630', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('safe', 'secword', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('malicious', 'secword', ''), ('injection', 'SECWORD', ''), ('server', 'secword', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
47,{'CWE-79'},GHSA-4p92-fv6v-fhfj,"similarity index 100%
rename from .github/workflows/templates.yml.backup
rename to .github/workflows/templates.yml",update,"vuln-fix: Restore CI workflow configuration to prevent build disruptions

The workflow configuration file was missing due to a backup rename, causing continuous integration processes to fail and skip security checks.
This disruption allowed unverified code changes to be merged without automated testing or vulnerability scanning.
The fix restores the workflow file to its correct location, ensuring CI pipelines run and enforce security validations on code changes.

Weakness: Missing or Disabled CI/CD Security Checks
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('update', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('security', 'secword', ''), ('changes', 'ACTION', ''), ('vulnerability', 'secword', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('security', 'SECWORD', ''), ('changes', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('security', 'secword', ''), ('medium', 'SEVERITY', '')]"
48,{'CWE-79'},GHSA-mq35-wqvf-r23c,"@@ -78,7 +78,7 @@ def unlink?
     def params
       super
     rescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError => e
-      raise BadRequest, ""Invalid query parameters: #{e.message}""
+      raise BadRequest, ""Invalid query parameters: #{Rack::Utils.escape_html(e.message)}""
     end
 
     private","escape invalid query params, fixes #1428","vuln-fix: Escape HTML in error messages to prevent XSS

The error message included raw exception details without escaping, allowing injection of malicious HTML or scripts in the response.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute arbitrary code in users' browsers.
The fix escapes HTML entities in the error message before rendering, preventing injection of executable code in the output.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('escape', 'secword', ''), ('fixes', 'ACTION', ''), ('#1428', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('error', 'FLAW', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
49,{'CWE-79'},GHSA-p885-prv3-m4xv,"@@ -30,11 +30,11 @@ public function requestedAssets()
             // Make sure the asset and request still exist
             if ($checkoutRequest && $checkoutRequest->itemRequested()) {
                 $results['rows'][] = [
-                    'image' => $checkoutRequest->itemRequested()->present()->getImageUrl(),
-                    'name' => $checkoutRequest->itemRequested()->present()->name(),
-                    'type' => $checkoutRequest->itemType(),
-                    'qty' => $checkoutRequest->quantity,
-                    'location' => ($checkoutRequest->location()) ? $checkoutRequest->location()->name : null,
+                    'image' => e($checkoutRequest->itemRequested()->present()->getImageUrl()),
+                    'name' => e($checkoutRequest->itemRequested()->present()->name()),
+                    'type' => e($checkoutRequest->itemType()),
+                    'qty' => (int) $checkoutRequest->quantity,
+                    'location' => ($checkoutRequest->location()) ? e($checkoutRequest->location()->name) : null,
                     'expected_checkin' => Helper::getFormattedDateObject($checkoutRequest->itemRequested()->expected_checkin, 'datetime'),
                     'request_date' => Helper::getFormattedDateObject($checkoutRequest->created_at, 'datetime'),
                 ];","Merge pull request #10942 from snipe/fixes/xss_user_requested

Fixes potential XSS vuln in user requestable results","vuln-fix: Escape output to prevent XSS in requested assets data

The vulnerability was that user-controllable data was output without escaping, allowing injection of malicious scripts in the asset details displayed to users. This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or steal sensitive information. The fix applies proper HTML escaping to all output fields and casts quantities to integers to ensure safe rendering in the frontend.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('#10942', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_user_requested', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('asset', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive information', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
50,{'CWE-79'},GHSA-7vvq-7r29-5vg3,"@@ -498,7 +498,7 @@ <h1><a href=""https://threejs.org"">three.js</a></h1>
 			const oldIframe = iframe;
 			iframe = oldIframe.cloneNode();
 
-			if ( hash ) {
+			if ( hash && titles[ splitHash[ 0 ] ] ) {
 
 				iframe.src = splitHash[ 0 ] + '.html' + splitHash[ 1 ];
 				subtitle = titles[ splitHash[ 0 ] ] + splitHash[ 1 ] + ' – ';",Only load trusted iframe (#23245),"vuln-fix: Prevent iframe src assignment with unverified hash keys

The vulnerability allowed setting iframe sources based on unvalidated hash keys, potentially enabling injection of malicious URLs into the iframe element. This posed a security risk by allowing attackers to load unauthorized or harmful content within the application context. The fix adds a verification step to ensure the hash key exists in the trusted titles list before assigning the iframe source. 

Weakness: Improper Input Validation (CWE-20)  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('#23245', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('hash', 'secword', ''), ('key', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
51,{'CWE-79'},GHSA-72p5-2r6g-fm6v,"@@ -559,7 +559,7 @@ COMPONENT('grid', 'filter:true;external:false;fillcount:50;filterlabel:Filtering
 			for (var j = 0, jl = columns.length; j < jl; j++) {
 				var column = columns[j];
 				var val = items[i][column.name];
-				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : (column.format ? val.format(column.format) : val);
+				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : Thelpers.encode((column.format ? val.format(column.format) : val));
 				m.index = j;
 				m.align = column.align;
 				m.background = column.background;",Fixed XSS.,"vuln-fix: Prevent XSS by encoding grid cell output values

The vulnerability allowed untrusted data to be rendered directly in grid cells without proper encoding, enabling potential cross-site scripting attacks. This is a security risk because malicious scripts could execute in users' browsers, leading to data theft or session hijacking. The fix applies HTML encoding to all formatted cell values before rendering, ensuring that injected scripts are neutralized. 

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('untrusted data', 'secword', ''), ('encoding', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('theft', 'secword', ''), ('hijacking', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
52,{'CWE-79'},GHSA-q67f-3jq4-mww2,"@@ -568,10 +568,11 @@ pimcore.element.properties = Class.create({
 
     addSetFromUserDefined: function (customKey, customType) {
         try {
-            if (in_array(customKey.getValue(), this.disallowedKeys)) {
+            let key = htmlspecialchars(customKey.getValue());
+            if (in_array(key, this.disallowedKeys)) {
                 Ext.MessageBox.alert(t(""error""), t(""name_is_not_allowed""));
             }
-            this.add(customKey.getValue(), customType.getValue(), false, false, false, true);
+            this.add(key, customType.getValue(), false, false, false, true);
         } catch (e) {
             console.log(e);
         }",escaping 'key' custom property field in elements,"vuln-fix: Sanitize user-defined keys to prevent XSS attacks

User input for custom keys was not properly sanitized before usage, allowing injection of malicious HTML or scripts.
This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user sessions or data.
The fix applies HTML special character encoding to user input before validation and usage, mitigating XSS vulnerabilities.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('escaping', 'secword', ''), ('key', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('keys', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('xss', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
53,{'CWE-79'},GHSA-jr37-66pj-36v7,"@@ -82,7 +82,7 @@ public function anyData()
             })
             ->addColumn('view', function ($tasks) {
                 return '<a href=""' . route(""tasks.show"", $tasks->external_id) . '"" class=""btn btn-link"">' . __('View') .'</a>'
-                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-title=""'. $tasks->title . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
+                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
                 ;
             })
             ->rawColumns(['titlelink','view', 'status_id'])",fix xss for tasks index,"vuln-fix: Prevent XSS via task deletion modal data attributes

The vulnerability involved injecting unescaped task titles into HTML attributes, enabling cross-site scripting attacks through maliciously crafted task titles. This posed a security risk by allowing attackers to execute arbitrary scripts in users’ browsers, potentially stealing session data or performing unauthorized actions. The fix removes the unsafe task title attribute from the deletion modal link, eliminating the injection vector and preventing XSS exploitation.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('maliciously', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('injection', 'secword', ''), ('preventing', 'ACTION', ''), ('xss', 'secword', ''), ('exploitation', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
54,{'CWE-79'},GHSA-9w7h-3wwh-6m5q,"@@ -611,10 +611,15 @@ public function module()
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
-
+                if(is_string($v)) {
+                    $v = str_replace('<', '-', $v);
+                    $v = str_replace('>', '-', $v);
+                }
                 $v = $antixss->xss_clean($v);
 
                 if(is_string($k)){
+                    $k = str_replace('<', '-', $k);
+                    $k = str_replace('>', '-', $k);
                     $k = $antixss->xss_clean($k);
                     if($k){
                         $request_data_new[$k] = $v;
@@ -622,7 +627,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
-                
+
             }
             $request_data = $request_data_new;
         }",update,"vuln-fix: Prevent XSS by sanitizing angle brackets in input keys and values

User input keys and values containing angle brackets were not fully sanitized, allowing potential cross-site scripting (XSS) attacks through malicious HTML tags. This is a security risk because attackers could inject executable scripts that compromise user data or session integrity. The fix replaces angle brackets with safe characters before applying XSS cleaning, ensuring all input is properly sanitized.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('keys', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('xss', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
55,{'CWE-79'},GHSA-hj8g-cw8x-2c6m,"@@ -276,7 +276,8 @@ public function string($skip_ajax = false)
 
         // clear request params
         $cleanParam = new HTMLClean();
-        $u1 = $cleanParam->cleanArray($u1);
+        $u1 = $cleanParam->clean($u1);
+
 
         return $u1;
     }",Update UrlManager.php,"vuln-fix: Prevent improper input sanitization in string processing

The vulnerability was caused by using an incorrect sanitization method that did not fully clean input arrays, allowing potentially malicious data to pass through. This posed a risk of cross-site scripting or injection attacks due to incomplete input cleansing. The fix replaces the array cleaning method with a more appropriate single-value cleaning function to ensure thorough sanitization of input data.

Weakness: Improper Input Validation (CWE-20)  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sanitization', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('sanitization', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('sanitization', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
56,"{'CWE-74', 'CWE-79'}",GHSA-pxcf-v868-m492,"@@ -19,6 +19,23 @@ app.use((req, res, next) => {
   next();
 });
 
+
+function htmlEscape(text) {
+  return text.replace(/&/g, '&amp;').
+  replace(/</g, '&lt;').
+  replace(/""/g, '&quot;').
+  replace(/'/g, '&#039;');
+}
+
+
+function sanitize(params) {
+  result = {}
+  for (let [key, value] of Object.entries(params)) {
+      result[key] = htmlEscape(value)
+  }
+  return result;
+}
+
 app.get(""/health"", (req, res) => res.sendStatus(200));
 
 const handler = (res, params) => {
@@ -40,12 +57,14 @@ const handler = (res, params) => {
 app.get(""/"", (req, res) => handler(res, req.query));
 app.post(""/"", (req, res) => handler(res, req.body));
 
-app.get(""/dynamic"", (req, res) =>
-  handler(res, { ...req.query, renderToHtml: true })
-);
+app.get(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.query)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
-app.post(""/dynamic"", (req, res) =>
-  handler(res, { ...req.body, renderToHtml: true })
-);
+app.post(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.body)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
 module.exports = http.createServer(app);",fix: escape special characters before insertion to template,"vuln-fix: Sanitize user input to prevent HTML injection

User input parameters were directly rendered into HTML without escaping, allowing injection of malicious HTML or scripts.
This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user data and session integrity.
The fix introduces HTML escaping of all input parameters before rendering, neutralizing potentially harmful characters in user input.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
57,{'CWE-79'},GHSA-rf66-hmqf-q3fc,"@@ -260,7 +260,18 @@ $(document).ready(function () {
     }
 
     function formatDataSelection (datalist) {
-        return datalist.text;
+        // This a heinous workaround for a known bug in Select2.
+        // Without this, the rich selectlists are vulnerable to XSS.
+        // Many thanks to @uberbrady for this fix. It ain't pretty,
+        // but it resolves the issue until Select2 addresses it on their end.
+        //
+        // Bug was reported in 2016 :{
+        // https://github.com/select2/select2/issues/4587
+
+        return datalist.text.replace(/>/g, '&gt;')
+            .replace(/</g, '&lt;')
+            .replace(/""/g, '&quot;')
+            .replace(/'/g, '&#039;');
     }
 
     // This handles the radio button selectors for the checkout-to-foo options",Janky fix for Select2 bug,"vuln-fix: Prevent XSS in Select2 rich selectlists by escaping input

The vulnerability allowed unescaped HTML characters in Select2 dropdown text, enabling cross-site scripting (XSS) attacks through malicious user input.
This posed a critical security risk as attackers could execute arbitrary scripts in users’ browsers, potentially stealing data or hijacking sessions.
The fix escapes special HTML characters in the dropdown text, mitigating XSS by sanitizing input until an official Select2 patch is released.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: Critical  
CVSS: 9.8",0.11764705882352941,"[('fix', 'ACTION', ''), ('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('patch', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
58,{'CWE-79'},GHSA-hxmr-5gv9-6p8v,"@@ -45,9 +45,9 @@
             $snmpver = 'v2c';
             $additional = [
                 'snmp_disable' => 1,
-                'os'           => $_POST['os'] ? $_POST['os_id'] : 'ping',
-                'hardware'     => $_POST['hardware'],
-                'sysName'      => $_POST['sysName'],
+                'os'           => $_POST['os'] ? strip_tags($_POST['os_id']) : 'ping',
+                'hardware'     => strip_tags($_POST['hardware']),
+                'sysName'      => strip_tags($_POST['sysName']),
             ];
         } elseif ($_POST['snmpver'] === 'v2c' || $_POST['snmpver'] === 'v1') {
             if ($_POST['community']) {","XSS fix, cont. (#13776)

https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/","vuln-fix: Sanitize user input to prevent XSS in SNMP parameters

User input from POST parameters was directly assigned without sanitization, allowing injection of malicious HTML or JavaScript code.
This posed a cross-site scripting (XSS) risk that could compromise user sessions or execute unauthorized scripts in the application context.
The fix applies strip_tags() to sanitize the 'os_id', 'hardware', and 'sysName' inputs, removing any embedded HTML or script tags before use.

Weakness: Cross-Site Scripting (CWE-79)
Severity: Medium
CVSS: 6.1",0.23529411764705882,"[('xss', 'secword', ''), ('fix', 'ACTION', ''), ('#13776', 'ISSUE', ''), ('https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('removing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
59,{'CWE-79'},GHSA-mxh3-2699-98g9,"@@ -861,7 +861,7 @@ public function fieldcollectionTreeAction(Request $request, EventDispatcherInter
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
@@ -1266,7 +1266,7 @@ public function objectbrickTreeAction(Request $request, EventDispatcherInterface
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,",[Admin] DataObject - Escape class definitions group properly,"vuln-fix: Sanitize group names to prevent XSS in tree views

User-supplied group names were directly rendered in the tree view without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute arbitrary scripts in users’ browsers and compromise session integrity.
The fix applies htmlspecialchars to group names before rendering, ensuring special characters are escaped and preventing script execution.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
60,{'CWE-79'},GHSA-5jgj-h9wp-53fr,"@@ -285,6 +285,20 @@ public static function isImage($file_path)
             return false;
         }
 
+        /**
+         * Detects whether the file contains PHP or script tags, eg to check for embedded code in GIFs
+         * @param $file_path
+         * @return bool
+         */
+        public static function isFileFreeFromScriptTags($file_path)
+        {
+            if ($contents = file_get_contents($file_path)) {
+                if (stripos($contents, '<script') || strpos($contents, '<?')) return false;
+                return true;
+            }
+            return false;
+        }
+
         /**
          * Retrieve a file by ID
          *",Checking for script tags in GIFs etc (#3017),"vuln-fix: Prevent execution of embedded script tags in uploaded files

Uploaded files were not checked for embedded PHP or script tags, allowing attackers to upload malicious code disguised as images or other file types. This poses a critical security risk as it can lead to remote code execution if the server processes these files. The fix introduces a function that scans file contents for script or PHP tags and rejects files containing such code before further processing.

Weakness: CWE-94: Improper Control of Generation of Code ('Code Injection')
Severity: Critical
CVSS: 9.8",0.11764705882352941,"[('#3017', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('malicious code', 'secword', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-94', 'CWEID', ''), ('improper control', 'secword', ''), ('code injection', 'SECWORD', ''), ('critical', 'SEVERITY', '')]"
61,{'CWE-79'},GHSA-cg3h-rc9q-g8v9,"@@ -36,7 +36,7 @@ pimcore.settings.website = Class.create({
                 border:false,
                 layout:""fit"",
                 closable:true,
-                items:[this.getRowEditor()]
+                items:[this.getRowEditor()],
             });
 
             var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
@@ -133,6 +133,7 @@ pimcore.settings.website = Class.create({
                 dataIndex: 'data',
                 flex: 300,
                 editable: true,
+                editor: new Ext.form.TextField({}),
                 renderer: this.getCellRenderer.bind(this),
             },
             {text: t(""site""), flex: 100, sortable:true, dataIndex: ""siteId"",
@@ -303,7 +304,10 @@ pimcore.settings.website = Class.create({
             bodyCls: ""pimcore_editable_grid"",
             stripeRows:true,
             columns : {
-                items: typesColumns
+                items: typesColumns,
+                defaults: {
+                    renderer: Ext.util.Format.htmlEncode
+                },
             },
             sm:  Ext.create('Ext.selection.RowModel', {}),
             bbar:this.pagingtoolbar,
@@ -359,15 +363,23 @@ pimcore.settings.website = Class.create({
     },
 
     getCellEditor: function (record) {
-        var data = record.data;
+        let data = record.data;
 
-        var type = data.type;
-        var property;
+        let type = data.type;
+        let property;
 
         if (type === ""text"") {
-            property = Ext.create('Ext.form.TextField');
+            property = {
+                xtype: 'textfield',
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""textarea"") {
-            property = Ext.create('Ext.form.TextArea');
+            property = {
+                xtype: ""textarea"",
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""document"" || type == ""asset"" || type == ""object"") {
             property = {
                 xtype: 'textfield',",[Admin] Website Settings - Escape grid values properly,"vuln-fix: Prevent XSS by encoding grid cell content and restricting editors

The vulnerability allowed unencoded HTML content in grid cells, enabling attackers to inject malicious scripts via editable fields in the UI. This posed a security risk by potentially executing arbitrary JavaScript in users' browsers, leading to data theft or session hijacking. The fix enforces HTML encoding on grid cell renderers and restricts editors to safe text input components, mitigating script injection vectors.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unencoded', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('theft', 'secword', ''), ('hijacking', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('safe', 'secword', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
62,{'CWE-79'},GHSA-73q9-7pwj-gm46,"@@ -150,7 +150,7 @@
             ?>
             <h2><?php echo $t['multi-user']; ?></h2>
             <span class=""heading""><?php echo $t['Username']; ?></span><br>
-            <?php echo $_SESSION['username'];?><br><br>
+            <?php echo xssClean($_SESSION['username'], ""html"");?><br><br>
             <?php
         }
         ?>",rXSS cleaned username in editor info display,"vuln-fix: Sanitize username output to prevent XSS attacks

The username stored in the session was output directly into HTML without sanitization, allowing injection of malicious scripts.
This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions and data integrity.
The fix applies an HTML context-specific sanitization function to the username before rendering it in the page output.


Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('rxss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
63,{'CWE-79'},GHSA-fc38-mxwr-pfhx,"@@ -36,7 +36,7 @@ DirectoryIndex index.php
 </IfModule>
 
 <IfModule mod_headers.c>
-    <FilesMatch ""\.svg$"">
+    <FilesMatch ""\.(?i:svg)$"">
         Header set Content-Security-Policy ""script-src 'none'""
     </FilesMatch>
 </IfModule>",NEXT-15677 - Fix XSS for SVG files,"vuln-fix: Enforce case-insensitive SVG content security policy header

The Content-Security-Policy header was applied only to lowercase "".svg"" files, missing uppercase or mixed-case SVG extensions and allowing unsafe script execution in those cases. This inconsistency could enable attackers to bypass security restrictions by using differently cased file extensions, leading to potential script injection attacks. The fix updates the file matching pattern to be case-insensitive, ensuring the policy applies to all SVG files regardless of extension casing.

Weakness: CWE-693: Protection Mechanism Failure  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('content security policy', 'SECWORD', ''), ('security', 'SECWORD', ''), ('unsafe', 'secword', ''), ('attackers', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('updates', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-693', 'CWEID', ''), ('protection mechanism failure', 'SECWORD', ''), ('medium', 'SEVERITY', '')]"
64,{'CWE-79'},GHSA-2v5j-q74q-r53f,"@@ -56,7 +56,7 @@ def get_markdown(text):
     if not text:
         return """"
 
-    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\[\s\S\]]*?)\)'
+    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\s\S]*?)\)'
     # Regex check
     if re.match(pattern, text):
         # get get value of group regex",Update pattern,"vuln-fix: Correct regex to prevent improper markdown parsing

The vulnerability was caused by an overly permissive regex pattern that allowed malformed markdown input to bypass validation checks. This posed a security risk by enabling injection of unexpected or malicious content through improperly parsed markdown links. The fix tightens the regex pattern to correctly restrict the characters matched in the third group, preventing unintended matches and improving input validation.

Weakness: Improper Input Validation (CWE-20)  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
65,{'CWE-79'},GHSA-rfw2-x9f8-2f6m,"@@ -579,11 +579,11 @@ var oncall = {
               },
               footer: function(resp){
                 if (teamsCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
                 }
               },
               empty: function(resp){
-                return '<h4> No results found for ""' + resp.query + '"" </h4>';
+                return '<h4> No results found for ""' + Handlebars.escapeExpression(resp.query) + '"" </h4>';
               }
             }
           },
@@ -604,7 +604,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (servicesCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
                 }
               }
             }
@@ -626,7 +626,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (usersCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
                 }
               }
             }","prevent potential XSS from searchbar results (#342)

* prevent potential XSS from searchbar results

* use built in handlebars expression escaping

* use handlebars encodeURIComponent","vuln-fix: Escape user input in query URLs and HTML output

User input in query URLs and HTML elements was not properly escaped, allowing injection of malicious scripts or malformed URLs.
This posed a risk of cross-site scripting (XSS) attacks and URL manipulation, potentially compromising user data and application integrity.
The fix applies Handlebars escaping and URL encoding to sanitize user input before embedding it in URLs and HTML content.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.17647058823529413,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('#342', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('encodeuricomponent', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaped', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('malformed urls', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('url manipulation', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
66,{'CWE-79'},GHSA-jff5-55xj-4jcq,"@@ -2168,6 +2168,7 @@ function createSearchBox(searchURL) {
     var ac = new YAHOO.widget.AutoComplete(""search-box"",""search-box-completion"",ds);
     ac.typeAhead = false;
     ac.autoHighlight = false;
+    ac.formatResult = ac.formatEscapedResult;
 
     var box   = $(""search-box"");
     var sizer = $(""search-box-sizer"");","Merge pull request #98 from jenkinsci-cert/SECURITY-388

[SECURITY-388] Escape metacharacters in the search box","vuln-fix: Prevent XSS by escaping autocomplete results

The autocomplete widget did not escape HTML entities in its result formatting, allowing malicious scripts to be injected via search suggestions. This posed a cross-site scripting risk by enabling attackers to execute arbitrary JavaScript in users' browsers. The fix enforces escaping of autocomplete results by assigning a safe formatting function that encodes HTML entities before rendering.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.17647058823529413,"[('#98', 'ISSUE', ''), ('security-388', 'SECWORD', ''), ('security-388', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('escape', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('safe', 'secword', ''), ('encodes html entities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
67,{'CWE-79'},GHSA-wvh5-78h5-gmgr,"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\assign_user_summary $summary) {
             $fullname = fullname($summary->user, $summary->viewfullnames);
             $extrainfo = array();
             foreach ($summary->extrauserfields as $extrafield) {
-                $extrainfo[] = $summary->user->$extrafield;
+                $extrainfo[] = s($summary->user->$extrafield);
             }
             if (count($extrainfo)) {
                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';",MDL-74204 mod_assign: escape identity fields in allocate marker form.,"vuln-fix: Sanitize user extra fields to prevent XSS in summaries

User extra fields were output directly without escaping, allowing injection of malicious scripts in rendered user summaries.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in other users’ browsers.
The fix applies proper HTML escaping to all extra user fields before rendering, mitigating script injection vulnerabilities.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.058823529411764705,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
68,{'CWE-79'},GHSA-98gj-wwxm-cj3h,"@@ -11,7 +11,7 @@
 import re
 import inspect
 
-__version__ = '0.8'
+__version__ = '0.8.1'
 __author__ = 'Hsiaoming Yang <me@lepture.com>'
 __all__ = [
     'BlockGrammar', 'BlockLexer',
@@ -48,7 +48,8 @@ def _pure_pattern(regex):
 
 
 def _keyify(key):
-    return _key_pattern.sub(' ', key.lower())
+    key = escape(key.lower(), quote=True)
+    return _key_pattern.sub(' ', key)
 
 
 def escape(text, quote=False, smart_amp=True):
@@ -445,7 +446,8 @@ class InlineGrammar(object):
     inline_html = re.compile(
         r'^(?:%s|%s|%s)' % (
             r'<!--[\s\S]*?-->',
-            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (_valid_end, _valid_attr),
+            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (
+                _valid_end, _valid_attr),
             r'<\w+%s(?:%s)*?\s*\/?>' % (_valid_end, _valid_attr),
         )
     )",Fix CVE-2017-16876,"vuln-fix: Escape keys to prevent injection in key normalization

The vulnerability involved unescaped keys being processed in the key normalization function, allowing crafted input to potentially inject malicious patterns into downstream processing.
This posed a security risk by enabling attackers to manipulate keys that could lead to injection attacks or unexpected behavior in parsing or rendering.
The fix applies proper escaping to keys before substitution, ensuring that special characters are safely encoded and cannot alter the intended pattern matching logic.

Weakness: Improper Neutralization of Special Elements used in an Injection (CWE-74)
Severity: Medium
CVSS: 5.3",0.17647058823529413,"[('fix', 'ACTION', ''), ('cve-2017-16876', 'VULNID', 'CVE')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('key', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('key', 'secword', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('keys', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('improper neutralization', 'secword', ''), ('injection', 'SECWORD', ''), ('cwe-74', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
69,{'CWE-79'},GHSA-5ppx-rgw2-xg23,"@@ -712,6 +712,7 @@ var jenkinsRules = {
         };
         ac.prehighlightClassName = ""yui-ac-prehighlight"";
         ac.animSpeed = 0;
+        ac.formatResult = ac.formatEscapedResult;
         ac.useShadow = true;
         ac.autoSnapContainer = true;
         ac.delimChar = e.getAttribute(""autoCompleteDelimChar"");",[SECURITY-641] Escape autocompletion suggestions,"vuln-fix: Prevent XSS by escaping autocomplete results

Autocomplete results were rendered without proper escaping, allowing injection of malicious HTML or scripts into the page content.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute arbitrary scripts in users' browsers.
The fix applies an escaping function to autocomplete results, ensuring all output is safely encoded before rendering.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('security-641', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
70,{'CWE-79'},GHSA-gmh3-x5w7-jg5m,"@@ -87,7 +87,7 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
-    $autoSize = xss_clean($autoSize);
+    $autoSize = intval($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
@@ -95,6 +95,16 @@
     }
     $type = xss_clean($type);
 
+            $other = [
+                ';',
+                '\'',
+                '//',
+                '`',
+                '\\',
+
+            ];
+    $type = str_replace($other, '', $type);
+
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
 
@@ -108,6 +118,8 @@
     if ($mod_id != $mod_orig_id) {
         $is_linked_mod = true;
     }
+
+
     ?>
 
     <script type=""text/javascript"">
@@ -124,7 +136,7 @@
         addIcon();
 
         autoSize = <?php  print $autoSize; ?>;
-        settingsType = '<?php print $type; ?>';
+        settingsType = '<?php print htmlentities($type); ?>';
 
         window.onbeforeunload = function () {
             $(document.body).addClass(""mw-external-loading"")",update,"vuln-fix: Sanitize user input to prevent XSS and injection

User input from GET parameters was insufficiently sanitized, allowing injection of malicious scripts and special characters into the application context.
This posed a security risk by enabling cross-site scripting (XSS) attacks and potential command or query injection through unsanitized input.
The fix replaces generic XSS cleaning with strict integer casting, removes dangerous characters from strings, and encodes output with htmlentities to ensure safe rendering.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4

Weakness: Improper Neutralization of Special Elements (CWE-116)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', '')]",0.5882352941176471,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'secword', ''), ('sanitized', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('injection', 'secword', ''), ('unsanitized', 'SECWORD', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('integer casting', 'SECWORD', ''), ('removes', 'ACTION', ''), ('encodes', 'SECWORD', ''), ('htmlentities', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', ''), ('weakness', 'SECWORD', ''), ('improper neutralization', 'secword', ''), ('cwe-116', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
71,{'CWE-79'},GHSA-f655-xhvm-cwp4,"@@ -1,4 +1,5 @@
 <?jelly escape-by-default='true'?>
 <j:jelly xmlns:j=""jelly:core"">
-  <span><j:out value=""${it.shortDescription}"" /></span>
+  <!-- SECURITY-2316: This used to show the HTML-formatted it.shortDescription, but that does not properly neutralize user-provided input -->
+  <span>Triggered by GitLab Webhook</span>
 </j:jelly>",[SECURITY-2316],"vuln-fix: Prevent XSS by removing unsafe HTML output in description

The vulnerability was caused by rendering user-controlled HTML content without proper sanitization, allowing malicious scripts to execute in the browser context. This posed a significant cross-site scripting risk, potentially compromising user sessions and data confidentiality. The fix replaces the vulnerable HTML output with a static, safe string to eliminate the injection vector entirely.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('security-2316', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('removing', 'ACTION', ''), ('unsafe', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('vulnerable', 'SECWORD', ''), ('safe', 'secword', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
72,{'CWE-79'},GHSA-fj93-7wm4-8x2g,"@@ -564,6 +564,15 @@ $.widget( ""mobile.pagecontainer"", {
 
 		return $.proxy( function( html, textStatus, xhr ) {
 
+			// Check that Content-Type is ""text/html"" (https://github.com/jquery/jquery-mobile/issues/8640)
+			if ( !/^text\/html\b/.test( xhr.getResponseHeader('Content-Type') ) ) {
+				// Display error message for unsupported content type
+				if ( settings.showLoadMsg ) {
+					this._showError();
+				}
+				return;
+			}
+
 			// Pre-parse html to check for a data-url, use it as the new fileUrl, base path, etc
 			var content,","Check Content-Type header before parsing AJAX response as HTML (#8649)

Fix for issue #8640 (possible XSS vulnerability)","vuln-fix: Validate Content-Type header for AJAX page loads

The vulnerability allowed processing of non-HTML content in AJAX page loads, which could lead to script injection or improper content handling. This poses a security risk by enabling attackers to inject malicious payloads or cause unexpected behavior in the application. The fix enforces a strict check that only responses with a Content-Type of ""text/html"" are processed, rejecting others and optionally showing an error message.

Weakness: Improper Input Validation (CWE-20)  
Severity: High  
CVSS: 7.5",0.17647058823529413,"[('#8649', 'ISSUE', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('#8640', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
73,{'CWE-79'},GHSA-xjrf-8x4f-43h4,"@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2008 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -21,21 +21,21 @@
  * Escapes based on the JavaScript 1.5 recommendation.
  *
  * <p>Reference:
- * <a href=""http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Literals#String_Literals"">
- * Core JavaScript 1.5 Guide
- * </a>
+ * <a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#String_literals"">
+ * JavaScript Guide</a> on Mozilla Developer Network.
  *
  * @author Juergen Hoeller
  * @author Rob Harrop
+ * @author Rossen Stoyanchev
  * @since 1.1.1
  */
 public class JavaScriptUtils {
 
 	/**
-	 * Turn special characters into escaped characters conforming to JavaScript.
-	 * Handles complete character set defined in HTML 4.01 recommendation.
+	 * Turn JavaScript special characters into escaped characters.
+	 *
 	 * @param input the input string
-	 * @return the escaped string
+	 * @return the string with escaped characters
 	 */
 	public static String javaScriptEscape(String input) {
 		if (input == null) {
@@ -73,6 +73,13 @@ else if (c == '\r') {
 			else if (c == '\f') {
 				filtered.append(""\\f"");
 			}
+			else if (c == '\b') {
+				filtered.append(""\\b"");
+			}
+			// No '\v' in Java, use octal value for VT ascii char
+			else if (c == '\013') {
+				filtered.append(""\\v"");
+			}
 			else {
 				filtered.append(c);
 			}","Add BS and VT char escape sequences to JavaScriptUtils

Issue: SPR-9983","vuln-fix: Escape additional JavaScript control characters in output

The JavaScript escaping function did not handle certain control characters like backspace and vertical tab, leaving them unescaped in output strings. This omission could allow injection of unexpected control characters, potentially leading to script parsing errors or security bypasses. The fix adds explicit escaping for backspace and vertical tab characters, ensuring all relevant control characters are safely encoded in JavaScript strings.

Weakness: Improper Neutralization of Input During Web Page Generation (CWE-79)  
Severity: Medium  
CVSS: 6.1",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('errors', 'FLAW', ''), ('security', 'secword', ''), ('bypasses', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('improper neutralization', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
74,{'CWE-79'},GHSA-4mv4-gmmf-q382,"@@ -1,11 +1,11 @@
-/*! DataTables 1.10.10-dev
+/*! DataTables 1.10.10
  * ©2008-2015 SpryMedia Ltd - datatables.net/license
  */
 
 /**
  * @summary     DataTables
  * @description Paginate, search and order HTML tables
- * @version     1.10.10-dev
+ * @version     1.10.10
  * @file        jquery.dataTables.js
  * @author      SpryMedia Ltd (www.sprymedia.co.uk)
  * @contact     www.sprymedia.co.uk/contact
@@ -170,7 +170,7 @@
 	 *  @type string
 	 *  @default Version number
 	 */
-	DataTable.version = ""1.10.10-dev"";
+	DataTable.version = ""1.10.10"";
 
 	/**
 	 * Private data store, containing all of the settings objects that are",Version - 1.10.10 ready,"vuln-fix: Remove development version identifier from release build

The code contained a development version identifier which could expose internal build information to attackers. Revealing such details may aid attackers in targeting known vulnerabilities specific to development versions. The fix replaces the development version string with the official release version to prevent leaking sensitive build metadata.

Weakness: Information Exposure (CWE-200)  
Severity: Low  
CVSS: 3.1",0.11764705882352941,"[('1.10.10', 'VERSION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('known vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('information exposure', 'secword', ''), ('cwe-200', 'CWEID', ''), ('low', 'SEVERITY', '')]"
75,{'CWE-79'},GHSA-q3x2-jvp3-wj78,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';
+                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,psd,xlsx,csv,7z'; 
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,xlr,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xlr,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",Update Files.php,"vuln-fix: Remove XML file extensions from allowed upload types

Allowing XML files in uploads can lead to XML external entity (XXE) attacks, exposing sensitive data or enabling server-side request forgery.
This is a security risk because malicious XML payloads can exploit parser vulnerabilities to access internal resources or execute arbitrary code.
The fix removes XML extensions from allowed file types to prevent uploading potentially dangerous XML files and mitigate XXE attack vectors.

Weakness: XML External Entity (XXE) Injection (CWE-611)
Severity: High
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('sensitive data', 'secword', ''), ('server-side request forgery', 'secword', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('exploit', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('prevent', 'ACTION', ''), ('mitigate', 'ACTION', ''), ('xxe', 'secword', ''), ('attack', 'secword', ''), ('weakness', 'SECWORD', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'SECWORD', ''), ('injection', 'secword', ''), ('cwe-611', 'CWEID', ''), ('high', 'SEVERITY', '')]"
76,{'CWE-79'},GHSA-hhqj-cfjx-vj25,"@@ -368,6 +368,10 @@ <h4 class=""label"">Notes</h4>
 
 				window.addEventListener( 'message', function( event ) {
 
+					if (window.location.origin !== event.origin){
+						return;
+					}
+
 					clearTimeout( connectionTimeout );
 					connectionStatus.style.display = 'none';",Fix DOM XSS,"vuln-fix: Validate message event origin to prevent unauthorized access

The code lacked verification of the message event's origin, allowing any origin to send messages to the window event listener. This posed a security risk by enabling attackers to inject malicious messages from untrusted origins, potentially compromising application integrity. The fix adds a strict origin check that discards messages from origins different than the current window location, ensuring only trusted sources are processed.

Weakness: Improper Origin Validation (CWE-346)
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('untrusted', 'secword', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-346', 'CWEID', ''), ('high', 'SEVERITY', '')]"
77,{'CWE-79'},GHSA-h24f-9mm4-w336,"@@ -140,7 +140,9 @@ exports.handleRequest = function(vpath, path, req, res, readOnly, logHeadRequest
 															var name = results[f].name;
 															var normalized = url + '/' + name;
 															while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }
-															res.write('\r\n<p><a href=""/' + normalized + '"">' + name + '</a></p>');
+															if(normalized.indexOf('""') >= 0) throw new Error('unsupported file name')
+															name = name.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
+															res.write('\r\n<p><a href=""/' + normalized + '""><span>' + name + '</span></a></p>');
 														}
 														res.end('\r\n</body></html>');
 													}",Fix not sanitizing file names rendered in html,"vuln-fix: Prevent XSS by sanitizing file names in directory listing

The vulnerability allowed unescaped special characters in file names to be injected into HTML, enabling cross-site scripting attacks via crafted directory entries. This posed a security risk by allowing attackers to execute arbitrary scripts in users’ browsers, potentially stealing sensitive data or hijacking sessions. The fix sanitizes file names by escaping HTML entities and rejects file names containing double quotes to prevent injection of malicious code.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('sanitizing', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('sensitive data', 'SECWORD', ''), ('hijacking', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitizes', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('malicious code', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
78,{'CWE-79'},GHSA-jpj5-hg26-6jgc,"@@ -7,6 +7,7 @@ import (
 	""github.com/Xhofe/alist/server/common""
 	""github.com/Xhofe/alist/utils""
 	""github.com/gin-gonic/gin""
+	""net/url""
 	""strings""
 )
 
@@ -24,11 +25,19 @@ func Plist(c *gin.Context) {
 		return
 	}
 	u := string(bytes)
+	uUrl, err := url.Parse(u)
+	if err != nil {
+		common.ErrorResp(c, err, 500)
+		return
+	}
 	name := utils.Base(u)
+	u = uUrl.String()
 	ipaIndex := strings.Index(name, "".ipa"")
 	if ipaIndex != -1 {
 		name = name[:ipaIndex]
 	}
+	name = strings.ReplaceAll(name, ""<"", ""["")
+	name = strings.ReplaceAll(name, "">"", ""]"")
 	plist := fmt.Sprintf(`<?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
 <plist version=""1.0"">
     <dict>",:lock: fix #645 xss vulnerability,"vuln-fix: Validate and sanitize URL input in Plist handler

The vulnerability was improper handling of user-supplied URL input without validation or sanitization, allowing malformed or malicious URLs to be processed. This posed a security risk by enabling injection attacks or server errors due to invalid URL formats. The fix parses and validates the URL using a standard library, returns errors on failure, and sanitizes output by replacing angle brackets to prevent injection.

Weakness: Improper Input Validation (CWE-20)  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('#645', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('sanitize', 'secword', ''), ('vulnerability', 'secword', ''), ('improper handling', 'secword', ''), ('sanitization', 'secword', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('server', 'SECWORD', ''), ('errors', 'FLAW', ''), ('invalid url', 'SECWORD', ''), ('fix', 'ACTION', ''), ('errors', 'FLAW', ''), ('sanitizes', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
79,{'CWE-79'},GHSA-66gw-5xpf-gfp5,"@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):
             message = e.log_message
             self.log.warn(message)
             self.set_status(e.status_code)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(dict(message=message)))
         except Exception:
             self.log.error(""Unhandled error in API request"", exc_info=True)
@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):
             self.set_status(status)
             tb_text = ''.join(traceback.format_exception(t, value, tb))
             reply = dict(message=message, traceback=tb_text)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(reply))
         else:
             return result",Set content type in json_error to application/json,"vuln-fix: Set Content-Type header to application/json on error responses

Error responses did not explicitly set the Content-Type header, causing clients to misinterpret the response format and potentially mishandle error data.
This can lead to security issues such as improper parsing, injection attacks, or information leakage through incorrect content handling.
The fix explicitly sets the Content-Type header to application/json for all error responses to ensure consistent and secure client processing.

Weakness: Improper Content-Type Handling (CWE-116)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('json_error', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('security', 'secword', ''), ('issues', 'FLAW', ''), ('injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('information leakage', 'secword', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('ensure', 'ACTION', ''), ('secure', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-116', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
80,{'CWE-79'},GHSA-5fh3-25xr-g85h,"@@ -82,7 +82,7 @@ public function transformCheckedoutAccessory ($accessory, $accessory_users, $tot
                 'first_name'=> e($user->first_name),
                 'last_name'=> e($user->last_name),
                 'employee_number' =>  e($user->employee_num),
-                'checkout_notes' => $user->pivot->note,
+                'checkout_notes' => e($user->pivot->note),
                 'last_checkout' => Helper::getFormattedDateObject($user->pivot->created_at, 'datetime'),
                 'type' => 'user',
                 'available_actions' => ['checkin' => true]","Merge pull request #10361 from snipe/fixes/xss_in_accessories_checkout_notes

Escape notes in transformCheckedOutAccessory","vuln-fix: Escape user input in checkout notes to prevent XSS

The checkout notes field was output without escaping, allowing malicious scripts to be injected and executed in users’ browsers. This poses a security risk by enabling cross-site scripting attacks that can steal session data or perform unauthorized actions. The fix applies proper escaping to the checkout notes before rendering, mitigating the XSS vulnerability.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('#10361', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_in_accessories_checkout_notes', 'SECWORD', ''), ('escape', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
81,{'CWE-79'},GHSA-xg6r-5gx4-qxjm,"@@ -93,14 +93,15 @@ public function broker()
 
     public function sendResetLinkEmail(ContactPasswordResetRequest $request)
     {
-
-        if(Ninja::isHosted() && $request->session()->has('company_key'))
-            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));
+        if(Ninja::isHosted() && $request->has('company_key'))
+            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));
         
         $this->validateEmail($request);
 
-        $company = Company::where('company_key', $request->session()->get('company_key'))->first();
-        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+        // $company = Company::where('company_key', $request->input('company_key'))->first();
+        // $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+
+        $contact = ClientContact::where(['email' => $request->input('email')])->first();
 
         $response = false;
 
@@ -117,7 +118,7 @@ public function sendResetLinkEmail(ContactPasswordResetRequest $request)
             return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);
 
         // We will send the password reset link to this user. Once we have attempted
-        // to send the link, we will examine the response then see the message we
+        // to send the link, we will examine thuser@example.ce response then see the message we
         // need to show to the user. Finally, we'll send out a proper response.
         // $response = $this->broker()->sendResetLink(
         //     $this->credentials($request)",Fixes for client password reset,"vuln-fix: Prevent unauthorized password reset via company key exposure

The password reset function used company_key from user input instead of session, allowing attackers to specify arbitrary company keys and potentially reset passwords across companies. This is a security risk because it enables unauthorized access to user accounts by bypassing company isolation controls. The fix removes reliance on user-supplied company_key and restricts password reset queries to email only, preventing cross-company password reset attacks.

Weakness: Improper Access Control (CWE-284)  
Severity: Critical  
CVSS: 9.1",0.11764705882352941,"[('fixes', 'ACTION', ''), ('password', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('password', 'SECWORD', ''), ('key', 'SECWORD', ''), ('password', 'secword', ''), ('company_key', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('keys', 'SECWORD', ''), ('passwords', 'SECWORD', ''), ('security', 'secword', ''), ('bypassing', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('company_key', 'SECWORD', ''), ('password', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('password', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('weakness', 'SECWORD', ''), ('improper access control', 'secword', ''), ('cwe-284', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
82,{'CWE-79'},GHSA-hm45-mgqm-gjm4,"@@ -930,20 +930,20 @@ <h5>{{ data['message'] }}</h5>
             img.attr(""src"", `${img.attr(""data-src-url"")}png`)
         }
     }
+
+    function safe(str) {
+        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    }
 </script>
 
 {% if data['status'] == 1 and data['data']['status'] == 1 %}
 
-{% if 'aliascc' in data['data']['permslist'] %}
+{% if 'aliascc' in data['data']['permslist'] and false%}
 <script>
     /* ---------------------------------------------------------------------------------------------------------------------
                                                         Aliases group
        --------------------------------------------------------------------------------------------------------------------- */
 
-    function safe(str) {
-        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
-    }
-
     // Alias modal
     $(document).on('click', '.editaliasbutton', function () {
         var command = $(this).parent().parent().data(""command"")
@@ -1186,28 +1186,35 @@ <h5>{{ data['message'] }}</h5>
             } else if (json.status === 1 && json.data.status === 0) {
                 $(""#targetstatus"").html(`{{ _('Failed to fetch targets') }}: ${json.data.message}`)
             } else {
+                let big_ol_dict = {}
                 select.html("""")
 
                 var chopt = [`<optgroup label=""{{ _('Channels') }}"">`]
                 for (let [id, name] of json.data.CHANNELS) {
-                    chopt.push(`<option value=${id}>${name}</option>`)
+                    chopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 chopt.push(""</optgroup>"")
                 select.append(chopt.join(""""))
 
                 var ropt = [`<optgroup label=""{{ _('Roles') }}"">`]
                 for (let [id, name] of json.data.ROLES) {
-                    ropt.push(`<option value=${id}>${name}</option>`)
+                    ropt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 ropt.push(""</optgroup>"")
                 select.append(ropt.join(""""))
 
                 var uopt = [`<optgroup label=""{{ _('Users') }}"">`]
                 for (let [id, name] of json.data.USERS) {
-                    uopt.push(`<option value=${id}>${name}</option>`)
+                    uopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 uopt.push(""</optgroup>"")
                 select.append(uopt.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict)) {
+                    $(`.selectpicker-element-${id}`).text(name)
+                }
             }
             select.selectpicker({ title: ""{{ _('Choose target') }}"" })
             select.removeAttr(""disabled"")
@@ -1299,18 +1306,24 @@ <h5>{{ data['message'] }}</h5>
                 $(""#rulesdiv"").html("""")
                 var overall = ['<h3 style=""margin-bottom: 10px"">{{ _(""Cog rules"") }}</h3>']
                 var allcoglines = [""<ul>""]
+
+                let big_ol_dict_two = {}
+                let cog_counter = 0
+
                 for (let [cog, rules] of Object.entries(json.data.COG)) {
                     var coglines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             coglines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            coglines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users with the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            coglines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users in the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else {
-                            coglines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('User') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         }
+                        big_ol_dict_two[`cog-rules-${cog_counter}`] = rule.name
+                        cog_counter += 1
                     }
                     if (coglines) {
                         allcoglines = allcoglines.concat(coglines)
@@ -1324,18 +1337,23 @@ <h5>{{ data['message'] }}</h5>
 
                 overall.push('<h3 style=""margin-bottom: 10px"">{{ _(""Command rules"") }}</h3>')
                 var allcmdlines = [""<ul>""]
+
+                let cmd_counter = 0
+
                 for (let [cmd, rules] of Object.entries(json.data.COMMAND)) {
                     var cmdlines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             cmdlines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            cmdlines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users with the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            cmdlines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users in the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else {
-                            cmdlines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('User') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         }
+                        big_ol_dict_two[`cmd-rules-${cmd_counter}`] = rule.name
+                        cmd_counter += 1
                     }
                     if (cmdlines) {
                         allcmdlines = allcmdlines.concat(cmdlines)
@@ -1347,6 +1365,9 @@ <h5>{{ data['message'] }}</h5>
                 }
                 overall = overall.concat(allcmdlines)
                 $(""#rulesdiv"").html(overall.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict_two)) {
+                    $(`#${id}`).text(name)
+                }
                 $(""#fetchrulesstatus"").html(""{{ _('Refreshed rules') }}."")
             }
         }
@@ -1378,11 +1399,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.adminroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#adminrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control adminroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control adminroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""admin-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""admin-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1390,6 +1412,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#admin-role-${random_number}`).val(elm.text())
         elm.remove()
     })
 
@@ -1442,11 +1465,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.modroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#modrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control modroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control modroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""mod-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""mod-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1454,6 +1478,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#mod-role-${random_number}`).val(elm.text())
         elm.remove()
     })",[UI] Fix SelectPicker not rendering properly,"vuln-fix: Prevent XSS by escaping user-controlled content in UI

User-supplied strings were directly inserted into HTML without proper escaping, allowing injection of malicious scripts and potential cross-site scripting (XSS) attacks.
This vulnerability could enable attackers to execute arbitrary JavaScript in users' browsers, leading to session hijacking, data theft, or UI manipulation.
The fix introduces a safe escaping function for HTML entities and updates dynamic content insertion to use this function, ensuring all user data is properly sanitized before rendering.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('vulnerability', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('hijacking', 'secword', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('escaping', 'SECWORD', ''), ('updates', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
83,{'CWE-79'},GHSA-6hjc-m38h-7jhh,"@@ -15,12 +15,15 @@
 use nystudio107\seomatic\Seomatic;
 
 use Craft;
+use craft\elements\Asset;
 use craft\helpers\FileHelper;
+use craft\helpers\Assets as AssetsHelper;
 use craft\web\Controller;
 
 use yii\web\NotFoundHttpException;
 use yii\web\HttpException;
 use yii\web\Response;
+use yii\web\ServerErrorHttpException;
 
 /**
  * @author    nystudio107
@@ -87,6 +90,15 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
                 $headerValue = '<'.$canonical.'>; rel=""canonical""';
                 $response->headers->add('Link', $headerValue);
             }
+            // Ensure the file type is allowed
+            // ref: https://craftcms.com/docs/3.x/config/config-settings.html#allowedfileextensions
+            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;
+            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
+                $ext = strtolower($ext);
+            }
+            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+                throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
+            }
             // Send the file as a stream, so it can exist anywhere
             $response->sendContentAsFile(
                 $contents,","Ensure that only files with the extensions listed in `allowedFileExtensions` General Config setting can be used with the SEO File Link controller

Signed-off-by: Andrew Welch <andrew@nystudio107.com>","vuln-fix: Restrict file types in SEO file link endpoint

The vulnerability allowed serving files with any extension, bypassing configured allowed file types and risking exposure of sensitive or malicious files to users. This is a security risk because attackers could exploit it to deliver harmful content or access unauthorized data through crafted URLs. The fix enforces validation against the allowed file extensions list and blocks requests with disallowed or missing file extensions by throwing an error.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('ensure', 'ACTION', ''), ('signed', 'secword', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('bypassing', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
84,{'CWE-79'},GHSA-hpx4-xjp7-m4vr,"@@ -98,7 +98,7 @@ public function transformAsset(Asset $asset)
             'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),
             'book_value' => Helper::formatCurrencyOutput($depreciated_value),
             'monthly_depreciation' => $monthly_depreciation,
-            'checked_out_to' => $checkout_target,
+            'checked_out_to' => ($checkout_target) ? e($checkout_target) : null,
             'diff' =>  Helper::formatCurrencyOutput($diff),
             'number_of_months' =>  ($asset->model && $asset->model->depreciation) ? e($asset->model->depreciation->months) : null,
             'depreciation' => (($asset->model) && ($asset->model->depreciation)) ?  e($asset->model->depreciation->name) : null,","Escape checkout target name

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape output to prevent XSS in asset checkout field

The checked_out_to field was output without escaping, allowing injection of malicious scripts into the rendered HTML page.
This vulnerability could enable attackers to execute arbitrary JavaScript in users’ browsers, leading to session hijacking or data theft.
The fix applies proper HTML escaping to the checked_out_to value before output, mitigating cross-site scripting risks.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('escape', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('asset', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('hijacking', 'secword', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('cross-site scripting', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
85,{'CWE-79'},GHSA-wg8p-w946-c482,"@@ -329,7 +329,7 @@ public function isAllowedFilename($filename){
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',
-			'.ppt','.pptx','.xls','.xlsx','.txt','.md','.psd','.csv',
+			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.properties','.json','.css',
 			) ;",file upload bug,"vuln-fix: Prevent upload of markdown files to reduce attack surface

The vulnerability allowed uploading markdown (.md) files which can contain executable scripts or malicious content when rendered. This poses a security risk by enabling attackers to upload and execute harmful code or phishing content on the platform. The fix removes the .md extension from the allowed filename list, blocking markdown file uploads and reducing potential attack vectors.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('bug', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('attack surface', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('phishing', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('attack', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('medium', 'SEVERITY', '')]"
86,{'CWE-79'},GHSA-vc5r-xfc4-4x22,"@@ -50,7 +50,7 @@ private function buildItem($configuration): array
 
         return [
             'id' => $name,
-            'text' => $name,
+            'text' => htmlspecialchars($name),
             'type' => 'config',
             'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,
             'expandable' => false,",follow up to https://github.com/pimcore/data-hub/pull/462,"vuln-fix: Prevent XSS by escaping configuration item names

Unescaped configuration item names were directly output in the UI, allowing injection of malicious HTML or JavaScript code.
This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or steal sensitive data.
The fix applies htmlspecialchars to escape special characters, ensuring safe rendering of item names in the interface.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('https://github.com/pimcore/data-hub/pull/462', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
87,{'CWE-79'},GHSA-5fxf-x22x-5q38,"@@ -6,7 +6,6 @@ on:
 jobs:
   microweber-test-before-build:
     runs-on: ubuntu-latest
-    needs: stop-previous-runs
     steps:
       - uses: actions/checkout@v2",Update build-and-upload.yml,"vuln-fix: Prevent race condition by removing unnecessary job dependency

The workflow allowed concurrent runs by depending on a job that stopped previous runs, which could cause race conditions and inconsistent states during execution.
This posed a security risk by enabling potential state corruption or unauthorized access due to overlapping job executions.
The fix removes the dependency on the stop-previous-runs job to ensure jobs run independently and avoid race conditions. 

Weakness: Race Condition (CWE-362)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', ''), ('build-and-upload.yml', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('race condition', 'SECWORD', ''), ('removing', 'ACTION', ''), ('race conditions', 'SECWORD', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('race conditions', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('race condition', 'secword', ''), ('cwe-362', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
88,{'CWE-79'},GHSA-3pg8-c473-w6rr,"@@ -54,10 +54,10 @@ public function deleteFile($file_id){
 	}
 
 	//上传文件，返回url
-	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){
+	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0 , $check_filename = true  ){
 		$uploadFile = $_files[$file_key] ;
 
-		if( !$this->isAllowedFilename($_files[$file_key]['name']) ){
+		if( $check_filename && !$this->isAllowedFilename($_files[$file_key]['name']) ){
 			return false;
 		}
 
@@ -324,14 +324,12 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.mp4',
-			'.mov','.webmv','.flac','.mkv',
+			'.mp3','.wav','.mp4','.mov','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
-			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.wps',
+			'.pdf','.epub','.xps','.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.json','.css',
-			) ;
+		) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）
 		if(in_array( $ext , $allow_array ) ){",Upload file vulnerability,"vuln-fix: Add optional filename validation to file upload function

The file upload function lacked consistent filename validation, allowing potentially dangerous files to be uploaded without restriction. This posed a security risk by enabling attackers to upload malicious files that could compromise the system. The fix introduces an optional filename check parameter that enforces allowed extensions by default, preventing unauthorized file types from being uploaded.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('vulnerability', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious files', 'SECWORD', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
89,"{'CWE-434', 'CWE-79'}",GHSA-rphc-h572-2x9f,"@@ -324,13 +324,13 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
+			'.mp3','.wav','.mp4',
 			'.mov','.webmv','.flac','.mkv',
-			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
+			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
 			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps',
+			'.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
-			'.cer','.ppt','.pub','.properties','.json','.css',
+			'.cer','.ppt','.pub','.json','.css',
 			) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）",file upload bug,"vuln-fix: Restrict allowed file extensions to reduce attack surface

The file upload function previously allowed numerous file extensions, including potentially dangerous types that could enable execution of malicious code or unauthorized access. Allowing these extensions increases the risk of remote code execution or privilege escalation attacks through crafted files. The fix narrows the allowed extensions list by removing high-risk types, thereby limiting uploadable files to safer formats and reducing potential exploitation vectors.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('attack surface', 'secword', ''), ('malicious code', 'secword', ''), ('remote code execution', 'secword', ''), ('privilege escalation', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('high', 'SEVERITY', ''), ('exploitation', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
90,"{'CWE-79', 'CWE-116'}",GHSA-ph5x-h23x-7q5q,"@@ -245,7 +245,7 @@
                   &lt;a href=""$backUrl"" class='button secondary'&gt;{{translation key=""platform.wiki.users.join.request.cancel.label""/}}&lt;/a&gt;
                 &lt;/span&gt;
                 &lt;input type='hidden' name='wikiId' value=""$!wikiId""/&gt;
-                &lt;input type='hidden' name='requestJoin' value=""$!request.requestJoin""/&gt;
+                &lt;input type='hidden' name='requestJoin' value=""$escapetool.xml($!request.requestJoin)""/&gt;
                 &lt;input type=""hidden"" name=""form_token"" value=""$!escapetool.xml($services.csrf.getToken())"" /&gt;
               &lt;/dl&gt;
             &lt;/form&gt;",XWIKI-19292: Fix bad escaping,"vuln-fix: Escape user input in hidden form field to prevent XSS

The hidden input field for 'requestJoin' was directly outputting user-controlled data without escaping, allowing injection of malicious scripts. This poses a security risk as attackers could execute arbitrary JavaScript in users' browsers, leading to session hijacking or data theft. The fix applies XML escaping to the 'requestJoin' value before rendering it in the form, mitigating cross-site scripting vulnerabilities.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('hijacking', 'secword', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('cross-site scripting', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
91,{'CWE-79'},GHSA-4wm8-c2vv-xrpq,"@@ -14,6 +14,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.log4j.Logger;
 import org.dspace.authorize.AuthorizeException;
 import org.dspace.core.Context;
 
@@ -25,8 +26,8 @@
  */
 public class ControlledVocabularyServlet extends DSpaceServlet
 {
-    // private static Logger log =
-    // Logger.getLogger(ControlledVocabularyServlet.class);
+    private static Logger log =
+    Logger.getLogger(ControlledVocabularyServlet.class);
 
     protected void doDSGet(Context context, HttpServletRequest request,
             HttpServletResponse response) throws ServletException, IOException,
@@ -37,6 +38,13 @@ protected void doDSGet(Context context, HttpServletRequest request,
         String filter = """";
         String callerUrl = request.getParameter(""callerUrl"");
 
+        // callerUrl must starts with URL outside DSpace request context path
+        if(!callerUrl.startsWith(request.getContextPath())) {
+            log.error(""Controlled vocabulary caller URL would result in redirect outside DSpace web app: "" + callerUrl + "". Rejecting request with 400 Bad Request."");
+            response.sendError(400, ""The caller URL must be within the DSpace base URL of "" + request.getContextPath());
+            return;
+        }
+
         if (request.getParameter(""ID"") != null)
         {
             ID = request.getParameter(""ID"");",[DS-4133] Improve URL handling in Controlled Vocab JSPUI servlet,"vuln-fix: Prevent open redirect by validating callerUrl parameter

The vulnerability allowed open redirect by accepting callerUrl parameters pointing outside the DSpace web application context path.  
This posed a security risk by enabling attackers to redirect users to malicious external sites, facilitating phishing or other attacks.  
The fix enforces that callerUrl must start with the DSpace context path and rejects requests with invalid URLs by returning a 400 Bad Request error.  

Weakness: CWE-601 Open Redirect  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('improve', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('open redirect', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('phishing', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('invalid urls', 'SECWORD', ''), ('error', 'FLAW', ''), ('weakness', 'SECWORD', ''), ('cwe-601', 'CWEID', ''), ('open redirect', 'secword', ''), ('medium', 'SEVERITY', '')]"
92,{'CWE-79'},GHSA-c558-5gfm-p2r8,"@@ -209,7 +209,7 @@
         <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
         <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
         <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
         <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />",[DS-4453] Fix XSS handling in JSPUI discovery spellcheck,"vuln-fix: Prevent XSS by encoding spellCheckQuery output in JSP

The vulnerability was that spellCheckQuery was output without proper HTML entity encoding, allowing injection of malicious scripts in the rendered page. This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers. The fix applies HTML entity encoding to spellCheckQuery before outputting it, ensuring unsafe characters are escaped and scripts cannot be injected.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'secword', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
93,{'CWE-79'},GHSA-r5jw-62xg-j433,"@@ -2,7 +2,7 @@
 
 module Kaminari
   module Helpers
-    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze
+    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze
 
     # A tag stands for an HTML tag inside the paginator.
     # Basically, a tag has its own partial template file, so every tag can be","Blacklist ""original_script_name"" get param","vuln-fix: Prevent exposure of original_script_name parameter in pagination

The original_script_name parameter was not excluded from pagination parameters, allowing it to be unintentionally exposed or manipulated in generated URLs.
This could lead to information leakage or URL manipulation attacks by revealing internal routing details or enabling crafted requests.
The fix adds original_script_name to the exclusion list, preventing it from being included in pagination parameter processing and output.

Weakness: Information Exposure (CWE-200)
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('blacklist', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('manipulated', 'ACTION', ''), ('information leakage', 'secword', ''), ('url manipulation', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('information exposure', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
94,{'CWE-79'},GHSA-8w3x-r6x7-c5r5,"@@ -607,7 +607,12 @@ pimcore.object.classes.klass = Class.create({
                 for (var i = 0; i < items.length; i++) {
                     var item = items[i];
                     if (typeof item.getValue == ""function"") {
-                        this.data[item.name] = item.getValue();
+                        let value = item.getValue();
+                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {
+                            value = Ext.util.Format.htmlEncode(value);
+                        }
+
+                        this.data[item.name] = value;
                     }
                 }
 
@@ -705,6 +710,7 @@ pimcore.object.classes.klass = Class.create({
             id: ""iconfield-"" + this.getId(),
             name: ""icon"",
             width: 396,
+            renderer: Ext.util.Format.htmlEncode,
             value: this.data.icon,
             listeners: {
                 ""afterrender"": function (el) {
@@ -752,6 +758,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 500,
                     enableKeyEvents: true,
                     value: this.data.name,
+                    renderer: Ext.util.Format.htmlEncode,
                     listeners: {
                         keyup: function (el) {
                             this.rootPanel.getComponent(""phpClassName"").setValue(getPhpClassName(el.getValue()))
@@ -763,12 +770,14 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""description""),
                     name: ""description"",
                     width: 500,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.description
                 },
                 {
                     xtype: ""textfield"",
                     fieldLabel: t(""unique_identifier""),
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.id,
                     width: 500
                 },
@@ -779,6 +788,7 @@ pimcore.object.classes.klass = Class.create({
                     itemId: ""phpClassName"",
                     width: 500,
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: getPhpClassName(this.data.name)
                 },
                 {
@@ -786,6 +796,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""parent_php_class""),
                     name: ""parentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.parentClass
                 },
                 {
@@ -793,6 +804,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 600,
                     name: ""implementsInterfaces"",
                     fieldLabel: t(""implements_interfaces""),
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.implementsInterfaces
                 },
                 {
@@ -800,6 +812,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""use_traits""),
                     name: ""useTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.useTraits
                 },
                 {
@@ -807,6 +820,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_parent_php_class""),
                     name: ""listingParentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingParentClass
                 },
                 {
@@ -814,6 +828,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_use_traits""),
                     name: ""listingUseTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingUseTraits
                 },
                 {
@@ -821,6 +836,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""link_generator_reference""),
                     name: ""linkGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.linkGeneratorReference
                 },
                 {
@@ -828,6 +844,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_generator_reference""),
                     name: ""previewGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewGeneratorReference
                 },
                 {
@@ -835,6 +852,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_url""),
                     name: ""previewUrl"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewUrl
                 },
                 {
@@ -885,6 +903,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""group""),
                     name: ""group"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.group
                 },
                 this.allowInheritance,","[Admin UI] DataObject Class - escape general settings input values (#10991)

* [Admin UI] DataObject Class - escape general settings input values

* Update bundles/AdminBundle/Resources/public/js/pimcore/object/classes/class.js

* [Admin UI] DataObject Class - escape general settings input values

* [Admin UI] DataObject Class - escape general settings input values","vuln-fix: Prevent XSS by encoding user input in UI fields

User input was directly assigned and rendered in multiple text fields without proper HTML encoding, allowing injection of malicious scripts.
This posed a critical cross-site scripting risk that could lead to session hijacking or unauthorized actions in the application.
The fix applies HTML encoding to all relevant input values before rendering, ensuring special characters are safely escaped in the UI.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: Critical  
CVSS: 9.8",0.11764705882352941,"[('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('#10991', 'ISSUE', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('class.js', 'URL', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('cross-site scripting', 'secword', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
95,{'CWE-79'},GHSA-7jh9-6cpf-h4m7,"@@ -1388,8 +1388,12 @@ hello.utils.extend(hello.utils, {
 		// (URI Fragments within 302 Location URI are lost over HTTPS)
 		// Loading the redirect.html before triggering the OAuth Flow seems to fix it.
 		else if ('oauth_redirect' in p) {
+			var url = decodeURIComponent(p.oauth_redirect);
+
+			if (isValidUrl(url)) {
+				location.assign(url);
+			}
 
-			location.assign(decodeURIComponent(p.oauth_redirect));
 			return;
 		}",fix(xss): oauth_redirect should be a valid url,"vuln-fix: Validate redirect URL before OAuth redirection

The OAuth redirect URL was used without validation, allowing attackers to supply malicious URLs for redirection.  
This could lead to open redirect vulnerabilities, enabling phishing or redirecting users to harmful sites.  
The fix adds a URL validation check to ensure only safe, valid URLs are used before performing the redirection.  

Weakness: Open Redirect (CWE-601)  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix(xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('oauth', 'secword', ''), ('oauth', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('phishing', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('url validation', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('open redirect', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
96,{'CWE-79'},GHSA-vx6v-xg64-pmr8,"@@ -330,7 +330,11 @@ <h5 class=""mb-0"">
         function get_url(row) {
             return ""{% url 'helpdesk:view' 1234 %}"".replace(/1234/, row.id.toString());
         }
-
+        
+        function htmlEntities(str) {
+            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+        }
+        
         $(document).ready(function () {
             // Ticket DataTable Initialization
             $('#ticketTable').DataTable({
@@ -366,7 +370,7 @@ <h5 class=""mb-0"">
                             if (type === 'display') {
                                 data = '<div class=""tickettitle""><a href=""' + get_url(row) + '"" >' +
                                     row.id + '. ' +
-                                    row.title + '</a></div>';
+                                    htmlEntities(row.title) + '</a></div>';
                             }
                             return data
                         }","Add function `htmlEntities`

`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.","vuln-fix: Escape HTML entities in ticket titles to prevent XSS

The vulnerability was that ticket titles were rendered without escaping, allowing injection of malicious HTML or scripts in the user interface.
This posed a security risk by enabling cross-site scripting attacks, potentially compromising user sessions or stealing sensitive data.
The fix introduces a function to escape HTML entities in ticket titles before rendering, preventing execution of injected code in the browser.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('add', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('htmlentities', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
97,{'CWE-79'},GHSA-rcvx-rmvf-mxch,"similarity index 64%
rename from hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/StreamAwareErrorController.java
rename to hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/ErrorController.java
@@ -8,6 +8,8 @@
  */
 package org.eclipse.hawkbit.app;
 
+import java.util.Map;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -23,22 +25,23 @@
 /**
  * Error page controller that ensures that ocet stream does not return text in
  * case of an error.
- *
  */
 @Controller
 // Exception squid:S3752 - errors need handling for all methods
 @SuppressWarnings(""squid:S3752"")
-public class StreamAwareErrorController extends BasicErrorController {
+public class ErrorController extends BasicErrorController {
+
+    private static final String PATH = ""path"";
 
     /**
-     * A new {@link StreamAwareErrorController}.
+     * A new {@link ErrorController}.
      * 
      * @param errorAttributes
      *            the error attributes
      * @param serverProperties
      *            configuration properties
      */
-    public StreamAwareErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
+    public ErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
         super(errorAttributes, serverProperties.getError());
     }
 
@@ -48,4 +51,19 @@ public ResponseEntity<Void> errorStream(final HttpServletRequest request, final
         return new ResponseEntity<>(status);
     }
 
+    @Override
+    @RequestMapping
+    public ResponseEntity<Map<String, Object>> error(final HttpServletRequest request) {
+        final HttpStatus status = getStatus(request);
+        final Map<String, Object> body = getErrorAttributesWithoutPath(request);
+        return new ResponseEntity<>(body, status);
+    }
+
+    private Map<String, Object> getErrorAttributesWithoutPath(final HttpServletRequest request) {
+        final Map<String, Object> body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));
+        if (body != null && body.containsKey(PATH)) {
+            body.remove(PATH);
+        }
+        return body;
+    }
 }","Fixes #1067

JSON body response for HTTP 404 error may contain unsafe URL path characters. Thus removing path from the response

Signed-off-by: Dominic Schabel <dominic.schabel@bosch.io>","vuln-fix: Prevent path disclosure in error responses

The error controller exposed the request path in error response bodies, revealing internal URL structures to clients. This information disclosure could aid attackers in mapping the application and crafting targeted attacks. The fix removes the path attribute from error responses to avoid leaking sensitive routing details. 

Weakness: Information Exposure Through Error Messages (CWE-209)  
Severity: Medium  
CVSS: 5.3",0.23529411764705882,"[('fixes', 'ACTION', ''), ('#1067', 'ISSUE', ''), ('error', 'FLAW', ''), ('unsafe', 'SECWORD', ''), ('removing', 'ACTION', ''), ('signed', 'secword', ''), ('dominic.schabel@bosch.io', 'EMAIL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('path disclosure', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('disclosure', 'secword', ''), ('attackers', 'FLAW', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('error', 'FLAW', ''), ('sensitive', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('information exposure', 'secword', ''), ('error', 'FLAW', ''), ('cwe-209', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
98,{'CWE-79'},GHSA-wjh9-344g-vc49,"@@ -200,7 +200,7 @@ function( $match ) {
 
 	foreach ( $remove as $remove_string )
 	{
-		while ( strpos( $string, $remove_string ) !== false )
+		while ( stripos( $string, $remove_string ) !== false )
 		{
 			$string = str_ireplace( $remove, '', $string );
 		}",Fix stored XSS security issue: remove inline JS from URL in PreparePHP_SELF.fnc.php,"vuln-fix: Prevent case-insensitive string removal to avoid bypass

The vulnerability allowed case-sensitive checks that missed variations of dangerous substrings, enabling attackers to bypass filtering by altering letter case.
This posed a security risk by permitting malicious input to evade sanitization and potentially execute harmful actions or injections.
The fix changes the check to case-insensitive, ensuring all case variants of the target strings are detected and removed consistently.

Weakness: Improper Input Validation (CWE-20)
Severity: High
CVSS: 7.5",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('remove', 'ACTION', ''), ('preparephp_self.fnc.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('bypass', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('sanitization', 'secword', ''), ('injections', 'SECWORD', ''), ('fix', 'ACTION', ''), ('changes', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('removed', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
99,{'CWE-79'},GHSA-gx5w-rrhp-f436,"@@ -145,6 +145,11 @@ window.search = window.search || {};
             url.push("""");
         }
 
+        // encodeURIComponent escapes all chars that could allow an XSS except
+        // for '. Due to that we also manually replace ' with its url-encoded
+        // representation (%27).
+        var searchterms = encodeURIComponent(searchterms.join("" "")).replace(/\'/g, ""%27"");
+
         return '<a href=""' + path_to_root + url[0] + '?' + URL_MARK_PARAM + '=' + searchterms + '#' + url[1]
             + '"" aria-details=""teaser_' + teaser_count + '"">' + result.doc.breadcrumbs + '</a>'
             + '<span class=""teaser"" id=""teaser_' + teaser_count + '"" aria-label=""Search Result Teaser"">'","fix xss in the search page

Thanks to Kamil Vavra for responsibly disclosing the vulnerability
according to Rust's Security Policy.","vuln-fix: Prevent XSS by encoding single quotes in search terms

The vulnerability was that single quotes in search terms were not URL-encoded, allowing potential injection of malicious scripts via crafted URLs. This posed a security risk by enabling cross-site scripting attacks through unescaped characters in generated links. The fix encodes single quotes as %27 after encodeURIComponent to ensure all dangerous characters are properly escaped in URLs.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('security', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('encoded', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encodes', 'SECWORD', ''), ('encodeuricomponent', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
100,{'CWE-79'},GHSA-6m26-25q2-cq46,"@@ -4,6 +4,7 @@
 
 use Conner\Tagging\Model\Tagged;
 use \Intervention\Image\ImageManagerStatic as Image;
+use MicroweberPackages\Helper\HTMLClean;
 use MicroweberPackages\Media\Models\Media;
 use MicroweberPackages\Media\Models\MediaThumbnail;
 use MicroweberPackages\Utils\Media\Thumbnailer;
@@ -1184,6 +1185,10 @@ public function thumbnail_img($params)
 
     public function create_media_dir($params)
     {
+
+        $clean = new HTMLClean();
+        $_REQUEST = $clean->cleanArray($_REQUEST);
+
         must_have_access();
         $resp = array();
         // $target_path = media_base_path() . 'uploaded' . DS;
@@ -1198,7 +1203,7 @@ public function create_media_dir($params)
 
             $target_path = $fn_path;
         }
-        if (!isset($_REQUEST['name'])) {
+        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {
             $resp = array('error' => 'You must send new_folder parameter');
         } else {
             $fn_new_folder_path = $_REQUEST['name'];",add xss clean to create media dir method,"vuln-fix: Sanitize user input in create_media_dir to prevent XSS

User input from the $_REQUEST array was not sanitized before use, allowing injection of malicious HTML or scripts in directory names.
This poses a security risk by enabling cross-site scripting attacks that could compromise user sessions or site integrity.
The fix applies HTML cleaning to all $_REQUEST inputs using a dedicated sanitizer before processing directory creation requests.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('sanitized', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
101,{'CWE-79'},GHSA-6jp6-9rf9-gc66,"@@ -1131,7 +1131,9 @@ $(function () {
       return """";
     },
     menuItemTemplate: function (item) {
-      return `<a>${item.string}</a>`;
+      let link = document.createElement(""a"");
+      link.innerText = item.string;
+      return link.outerHTML;
     },
     values: (text, callback) => {
       $.ajax({","js: Add missing escaping to username completion

Fixes https://hackerone.com/reports/1486674","vuln-fix: Prevent XSS by safely rendering menu item strings

The vulnerability was caused by directly injecting unescaped HTML strings into the menu item template, allowing malicious scripts to execute.
This is a security risk because attackers could exploit it to perform cross-site scripting attacks and compromise user data or session integrity.
The fix replaces raw HTML injection with safe text assignment using DOM methods to ensure proper escaping of potentially dangerous characters.


Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('exploit', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('injection', 'SECWORD', ''), ('safe', 'secword', ''), ('ensure', 'ACTION', ''), ('escaping', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
102,{'CWE-79'},GHSA-c558-5gfm-p2r8,"@@ -147,7 +147,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -159,6 +159,11 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
 </script>		
 </c:set>",[DS-4453] Fix XSS handling in JSPUI discovery autocomplete,"vuln-fix: Escape HTML in filter labels to prevent XSS

User-supplied values in filter labels were rendered without escaping, allowing injection of malicious HTML or scripts into the page.
This posed a security risk by enabling cross-site scripting attacks that could compromise user data or session integrity.
The fix introduces a generic HTML escape function and applies it to all displayed filter labels before rendering them in the UI.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
103,{'CWE-79'},GHSA-qf2g-q4mc-w7rr,"@@ -839,7 +839,7 @@ public static function processModuleXml(\SimpleXMLElement $xml): array
         $information['name'] = (string) $module->name;
         $information['version'] = (string) $module->version;
         $information['requirements'] = (array) $module->requirements;
-        $information['description'] = (string) $module->description;
+        $information['description'] = strip_tags((string) $module->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
         $information['cronjobs'] = [];
 
         // authors
@@ -900,7 +900,7 @@ public static function processThemeXml(\SimpleXMLElement $xml): array
         $information['version'] = (string) $theme->version;
         $information['requirements'] = (array) $theme->requirements;
         $information['thumbnail'] = (string) $theme->thumbnail;
-        $information['description'] = (string) $theme->description;
+        $information['description'] = strip_tags((string) $theme->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
 
         // authors
         foreach ($xml->xpath('/theme/authors/author') as $author) {",Fix xss though the description in the info.xml file of a theme or module,"vuln-fix: Sanitize module and theme descriptions to prevent XSS

The vulnerability involved unsanitized HTML content in module and theme descriptions, allowing injection of malicious scripts. This posed a security risk by enabling cross-site scripting attacks that could compromise user data and site integrity. The fix applies a whitelist-based strip_tags function to allow only safe HTML tags, effectively mitigating XSS risks in descriptions.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('info.xml', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
104,{'CWE-79'},GHSA-wrp6-9w7f-3wxg,"@@ -248,7 +248,7 @@ $(""#btn-upload-format"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-format"").html(filename);
+    $(""#upload-format"").text(filename);
 });
 
 $(""#btn-upload-cover"").on(""change"", function () {
@@ -256,7 +256,7 @@ $(""#btn-upload-cover"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-cover"").html(filename);
+    $(""#upload-cover"").text(filename);
 });
 
 $(""#xchange"").click(function () {",Fix upload of cover and book formats containing html characters,"vuln-fix: Prevent XSS by using text() instead of html() for filenames

User-supplied filenames were inserted into the DOM using html(), allowing malicious HTML or script injection via crafted filenames.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary scripts in the context of the affected page.
The fix replaces html() with text() to safely encode filenames as plain text, preventing execution of injected code. 

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('malicious', 'secword', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encode', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
105,{'CWE-79'},GHSA-49qr-xh3w-h436,"@@ -78,6 +78,13 @@ class NbconvertFileHandler(IPythonHandler):
 
     SUPPORTED_METHODS = ('GET',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertFileHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def get(self, format, path):
 
@@ -145,6 +152,13 @@ def get(self, format, path):
 class NbconvertPostHandler(IPythonHandler):
     SUPPORTED_METHODS = ('POST',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertPostHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def post(self, format):
         exporter = get_exporter(format, config=self.config)","Apply CSP sandboxing for nbconvert responses

These may contain untrusted content, so they should be treated as being
from a different domain to the notebook server.","vuln-fix: Enforce sandboxed content security policy on nbconvert handlers

The nbconvert file and post handlers lacked sandbox restrictions, allowing served HTML/SVG content to execute JavaScript with full access to the notebook server context. This posed a risk of cross-site scripting attacks that could compromise server integrity and user data. The fix adds a sandbox directive with allow-scripts to the content security policy, isolating JavaScript execution and preventing interaction with the notebook server environment.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Severity: High
CVSS: 7.5",0.17647058823529413,"[('untrusted', 'secword', ''), ('server', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('content security policy', 'secword', ''), ('sandbox', 'secword', ''), ('server', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('server', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sandbox', 'secword', ''), ('content security policy', 'secword', ''), ('preventing', 'ACTION', ''), ('server', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'secword', ''), ('high', 'SEVERITY', '')]"
106,{'CWE-79'},GHSA-38m9-3vg4-rwvp,"@@ -114,6 +114,9 @@ public function redirect($url)
         $redirectUrl = str_replace(""\r"", """", $redirectUrl);
         $redirectUrl = str_replace(""\n"", """", $redirectUrl);
 
+        $clearInput = new HTMLClean();
+        $redirectUrl = $clearInput->clean($redirectUrl);
+
         if (headers_sent()) {
             echo '<meta http-equiv=""refresh"" content=""0;url=' . $redirectUrl . '"">';
         } else {",Update UrlManager.php,"vuln-fix: Sanitize redirect URL to prevent injection attacks

The redirect URL was not fully sanitized, allowing potential injection of malicious HTML or scripts through crafted input. This posed a security risk by enabling cross-site scripting or header injection attacks during redirection. The fix applies HTML cleaning to the redirect URL, removing harmful characters and ensuring safe output in headers and meta tags.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'secword', ''), ('high', 'SEVERITY', '')]"
107,{'CWE-79'},GHSA-vfrc-ggmc-5jwv,"@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):
                 'application/octet-stream',
                 size=attached.size,
             )
+            att.full_clean()
             att.save()
 
             if attached.size < max_email_attachment_size:","Add `att.full_clean()` before saving

Fix issue https://github.com/django-helpdesk/django-helpdesk/issues/983
Also, fix bug stored XSS disclosure: https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/","vuln-fix: Validate attachment data before saving to prevent invalid input

Attachment objects were saved without validation, allowing malformed or malicious data to be persisted in the database.
This posed a risk of data corruption or injection attacks through unchecked attachment fields.
The fix adds a call to full_clean() on attachment instances to enforce model validation before saving. 

Weakness: Improper Input Validation (CWE-20)
Severity: Medium
CVSS: 5.3",0.17647058823529413,"[('add', 'ACTION', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https://github.com/django-helpdesk/django-helpdesk/issues/983', 'URL', ''), ('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('xss', 'SECWORD', ''), ('disclosure', 'secword', ''), ('https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('malicious', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
108,{'CWE-79'},GHSA-3fw8-66wf-pr7m,"@@ -152,7 +152,7 @@ app.handle = function(req, res, out) {
         res.statusCode = 404;
         res.setHeader('Content-Type', 'text/plain');
         if ('HEAD' == req.method) return res.end();
-        res.end('Cannot ' + req.method + ' ' + utils.escape(req.originalUrl));
+        res.end('Cannot ' + utils.escape(req.method) + ' ' + utils.escape(req.originalUrl));
       }
       return;
     }
@@ -202,7 +202,7 @@ app.handle = function(req, res, out) {
  * Listen for connections.
  *
  * This method takes the same arguments
- * as node's `http.Server#listen()`.  
+ * as node's `http.Server#listen()`.
  *
  * HTTP and HTTPS:
  *
@@ -214,9 +214,9 @@ app.handle = function(req, res, out) {
  *      var connect = require('connect')
  *        , http = require('http')
  *        , https = require('https');
- *      
+ *
  *      var app = connect();
- *      
+ *
  *      http.createServer(app).listen(80);
  *      https.createServer(options, app).listen(443);
  *",fix: escape req.method in 404 response,"vuln-fix: Escape HTTP method in error response to prevent XSS

The vulnerability was that the HTTP method in error messages was not escaped, allowing injection of malicious scripts via crafted request methods.
This is a security risk because it enables cross-site scripting (XSS) attacks, potentially compromising user data and session integrity.
The fix escapes the HTTP method string before including it in the response, preventing script injection through the method field.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('req.method', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('error', 'FLAW', ''), ('escaped', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
109,{'CWE-79'},GHSA-455w-gv5p-wgg3,"@@ -37,6 +37,11 @@ class TargetingController extends AdminController implements KernelControllerEve
 {
     // RULES
 
+    private function correctName(string $name): string
+    {
+        return preg_replace('/[#?*:\\\\<>|""%&@=;+]/', '-', $name);
+    }
+
     /**
      * @Route(""/rule/list"", name=""pimcore_admin_targeting_rulelist"", methods={""GET""})
      *
@@ -55,7 +60,7 @@ public function ruleListAction(Request $request)
         foreach ($list->load() as $target) {
             $targets[] = [
                 'id' => $target->getId(),
-                'text' => $target->getName(),
+                'text' => htmlspecialchars($target->getName()),
                 'active' => $target->getActive(),
                 'qtip' => 'ID: ' . $target->getId(),
             ];
@@ -74,7 +79,7 @@ public function ruleListAction(Request $request)
     public function ruleAddAction(Request $request)
     {
         $target = new Targeting\Rule();
-        $target->setName($request->get('name'));
+        $target->setName($this->correctName($request->get('name')));
         $target->save();
 
         return $this->adminJson(['success' => true, 'id' => $target->getId()]);
@@ -129,6 +134,7 @@ public function ruleSaveAction(Request $request)
         /** @var Targeting\Rule|Targeting\Rule\Dao $target */
         $target = Targeting\Rule::getById($request->get('id'));
         $target->setValues($data['settings']);
+        $target->setName($this->correctName($target->getName()));
         $target->setConditions($data['conditions']);
         $target->setActions($data['actions']);
         $target->save();
@@ -208,7 +214,7 @@ public function targetGroupListAction(Request $request)
         foreach ($list->load() as $targetGroup) {
             $targetGroups[] = [
                 'id' => $targetGroup->getId(),
-                'text' => $targetGroup->getName(),
+                'text' => htmlspecialchars($targetGroup->getName()),
                 'active' => $targetGroup->getActive(),
                 'qtip' => $targetGroup->getId(),
             ];
@@ -230,7 +236,7 @@ public function targetGroupAddAction(Request $request, CoreCacheHandler $cache,
     {
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = new TargetGroup();
-        $targetGroup->setName($request->get('name'));
+        $targetGroup->setName($this->correctName($request->get('name')));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);
@@ -300,6 +306,7 @@ public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache,
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = TargetGroup::getById($request->get('id'));
         $targetGroup->setValues($data['settings']);
+        $targetGroup->setName($this->correctName($targetGroup->getName()));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);","[Targeting] Escape/validate names of rules properly (#11205)

* [Targeting] Escape/validate names of rules properly

* Update bundles/AdminBundle/Controller/Admin/TargetingController.php

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>","vuln-fix: Sanitize and encode user input for targeting names

User-supplied names for targeting rules and groups were not properly sanitized, allowing special characters that could lead to injection or display issues. This posed a risk of cross-site scripting (XSS) and other injection attacks by enabling malicious input to be stored and rendered unsafely. The fix introduces input sanitization by replacing dangerous characters with safe ones and applies HTML escaping when outputting names to prevent script execution.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('escape', 'secword', ''), ('validate', 'secword', ''), ('#11205', 'ISSUE', ''), ('escape', 'SECWORD', ''), ('validate', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('targetingcontroller.php', 'URL', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('issues', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('unsafely', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('safe', 'secword', ''), ('escaping', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
110,{'CWE-79'},GHSA-3q55-66g3-p8xq,"@@ -834,10 +834,262 @@ function get_dangerous_files_extentions()
             'xqt',        //    SuperCalc Macro File',
             'xys',        //    XYplorer Script File',
             'zl9',        //    ZoneAlarm Quarantined EXE File
-
-
             'swf',        //    Flash File
 
+            'key',
+            'asax',
+            'btapp',
+            'xd',
+            'fwtemplate',
+            'crdownload',
+            'whtt',
+            'ssp',
+            'fmp',
+            'jspa',
+            'obml16',
+            'a5w',
+            'crt',
+            'vrt',
+            'website',
+            'p7c',
+            'dll',
+            'php',
+            'mjs',
+            'dhtml',
+            'xul',
+            'bml',
+            'download',
+            'cshtml',
+            'vsdisco',
+            'codasite',
+            'webbookmark',
+            'rjs',
+            'wsdl',
+            'dml',
+            'aro',
+            'dcr',
+            'shtml',
+            'dochtml',
+            'dwt',
+            'spc',
+            'a4p',
+            'htaccess',
+            'ascx',
+            'pac',
+            'p7b',
+            'xhtm',
+            'oam',
+            'site',
+            'kit',
+            'aspx',
+            'zul',
+            'tpl',
+            'htm',
+            'seam',
+            'svr',
+            'pem',
+            'url',
+            'dap',
+            'appcache',
+            'chm',
+            'wbs',
+            'htc',
+            'ewp',
+            'gsp',
+            'asr',
+            'der',
+            'master',
+            'stc',
+            'ap',
+            'html',
+            'p12',
+            'xpd',
+            'fwp',
+            'epibrw',
+            'strm',
+            'xss',
+            'node',
+            'disco',
+            'gsp',
+            'pro',
+            'rss',
+            'gne',
+            'sdb',
+            'compressed',
+            'asp',
+            'browser',
+            'php2',
+            'sites2',
+            'dothtml',
+            'bok',
+            'axd',
+            'nzb',
+            'vdw',
+            'obml',
+            'mhtml',
+            'ashx',
+            'con',
+            'rhtml',
+            'alx',
+            'opml',
+            'web',
+            'chat',
+            'csr',
+            'do',
+            'sht',
+            'asa',
+            'cha',
+            'h5p',
+            'qf',
+            'olp',
+            'hyperesources',
+            'sparkle',
+            'razor',
+            'php4',
+            'cms',
+            'mml',
+            'jnlp',
+            'har',
+            'br',
+            'webloc',
+            'srf',
+            'cer',
+            'uhtml',
+            'pptmhtml',
+            'phtml',
+            'xbel',
+            'cfm',
+            'fwtemplateb',
+            'jspx',
+            'jsp',
+            'xfdl',
+            'zhtml',
+            'stml',
+            'jsonl',
+            'maff',
+            'dbm',
+            'aex',
+            'crl',
+            'mht',
+            'wml',
+            'sass',
+            'xht',
+            'awm',
+            'page',
+            'hdml',
+            'webmanifest',
+            'itms',
+            'sitemap',
+            'shtm',
+            'wpp',
+            'jss',
+            'oth',
+            'ucf',
+            'prf',
+            'freeway',
+            'edge',
+            'iqy',
+            'vrml',
+            'mvc',
+            'wdgt',
+            'discomap',
+            'psp',
+            'hxs',
+            'adr',
+            'hype',
+            'csp',
+            'xhtml',
+            'webarchive',
+            'qbo',
+            'jhtml',
+            'svc',
+            'phtm',
+            'rw3',
+            'tpl',
+            'stl',
+            'wbxml',
+            'p7',
+            'ndjson',
+            'ognc',
+            'fwtb',
+            'muse',
+            'vbd',
+            'sites',
+            'rt',
+            'esproj',
+            'private',
+            'srl',
+            'zhtml',
+            'vbhtml', 
+            'hypetemplate',
+            'obml15',
+            'hypesymbol',
+            'pub',
+            'ece',
+            'mspx',
+            'docmhtml',
+            'xws',
+            'wgp',
+            'tvpi',
+            'woa',
+            'asmx',
+            'xbl',
+            'webhistory',
+            'idc',
+            'jws',
+            'lbc',
+            'att',
+            'tvvi',
+            'zvz',
+            'php3',
+            'webarchivexml',
+            'widget',
+            'swz',
+            'qrm',
+            'bwp',
+            'atom',
+            'cdf',
+            'map',
+            'hdm',
+            'php5',
+            'rwsw',
+            'wgt',
+            'nod',
+            'rflw',
+            'htx',
+            'mvr',
+            'an',
+            'rwp',
+            'lasso',
+            'vlp',
+            'stp',
+            'nxg',
+            'faces',
+            'kcmsf',
+            'ptw',
+            'less',
+            'saveddeck',
+            'ccbjs',
+            'wn',
+            'ppthtml',
+            'jcz',
+            'jvs',
+            'rwtheme',
+            'jst',
+            'mapx',
+            'cpg',
+            'wpx',
+            'qbx',
+            'suck',
+            'iwdgt',
+            'public',
+            'cphd',
+            'moz',
+            'zfo',
+            'stm',
+            'fcgi',
+            'itpc',
+            'cfml'
         );",Update Files.php,"vuln-fix: Expand list of dangerous file extensions to block

The vulnerability was insufficient filtering of potentially dangerous file extensions, allowing risky files to bypass security checks and be uploaded or processed. This posed a security risk by enabling execution or distribution of malicious scripts and executables that could compromise the system. The fix expands the list of blocked file extensions to include many additional high-risk and executable types, improving detection and prevention of unsafe files.

Weakness: CWE-434: Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('security', 'secword', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('high', 'SEVERITY', ''), ('improving', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
111,{'CWE-79'},GHSA-q73m-3q7r-fpf7,"@@ -325,7 +325,7 @@ public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
 			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
-			'.mov','.webmv','.m3u8a','.flac','.mkv',
+			'.mov','.webmv','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',","Merge pull request #1632 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Remove unsupported file extension from allowed list

The file extension '.m3u8a' was incorrectly included in the allowed filename extensions, permitting potentially unsafe or unsupported media playlist files to be uploaded. Allowing such files can lead to security risks including unauthorized content execution or information disclosure. The fix removes the '.m3u8a' extension from the allowed list to restrict uploads to only verified safe file types.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: Medium  
CVSS: 5.3",0.23529411764705882,"[('#1632', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('unsafe', 'secword', ''), ('security', 'secword', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('verified', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('medium', 'SEVERITY', '')]"
112,"{'CWE-80', 'CWE-79', 'CWE-116'}",GHSA-vmhh-xh3g-j992,"@@ -287,7 +287,7 @@
       &lt;form action=""$doc.getURL()"" method=""post""&gt;
         &lt;input type=""hidden"" name=""form_token"" value=""$services.csrf.token"" /&gt;
         &lt;input type=""hidden"" name=""action"" value=""create""/&gt;
-        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$request.newThemeName"" /&gt;
+        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$escapetool.xml($request.newThemeName)"" /&gt;
         &lt;input type=""submit"" value=""$services.localization.render('platform.flamingo.themes.home.create.confirm')"" class=""button""/&gt;
       &lt;/form&gt;
     {{/html}}",XWIKI-19294: Fix bad escaping,"vuln-fix: Escape user input in hidden form field to prevent XSS

User input for the newThemeName field was directly embedded in a hidden form input without escaping, allowing injection of malicious scripts.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise session integrity.
The fix applies XML escaping to the newThemeName value before rendering it in the form, preventing script injection via this input field.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
113,{'CWE-79'},GHSA-c558-5gfm-p2r8,"@@ -196,7 +196,7 @@
                                 <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
                                 <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%=Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
                                 <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
                                 <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />","[DS-4453] Escape spellcheck, autocomplete HTML (JSPUI)","vuln-fix: Prevent XSS by encoding spellCheckQuery in output

The vulnerability was that spellCheckQuery was not properly HTML-encoded in the anchor text, allowing injection of malicious scripts via crafted input. This posed a security risk by enabling cross-site scripting attacks that could execute arbitrary JavaScript in users’ browsers. The fix applies proper HTML entity encoding to spellCheckQuery in the anchor text to neutralize any embedded scripts.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('escape', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('encoded', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
114,{'CWE-79'},GHSA-gq77-3r6x-383w,"@@ -301,6 +301,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
 			|| $isDangerStr($filename , ""%"")
+			|| $isDangerStr($filename , "".xml"")
 		) {
 			return true;
 		}",file upload bug,"vuln-fix: Prevent dangerous XML file uploads in filename validation

The filename validation did not check for XML file extensions, allowing potentially dangerous XML files to be uploaded and processed by the system. This poses a security risk as malicious XML files can exploit XML external entity (XXE) vulnerabilities or inject harmful content. The fix adds "".xml"" to the list of disallowed filename extensions to block such dangerous file uploads effectively.

Weakness: CWE-611: Improper Restriction of XML External Entity Reference
Severity: High
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('exploit', 'secword', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'secword', ''), ('vulnerabilities', 'secword', ''), ('inject', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-611', 'CWEID', ''), ('improper restriction', 'secword', ''), ('xml external entity reference', 'secword', ''), ('high', 'SEVERITY', '')]"
115,{'CWE-79'},GHSA-6346-5r4h-ff5x,"@@ -158,7 +158,7 @@ class=""btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text
             $(document).ready(function () {
                 var searchOrdersByProduct = new mw.autoComplete({
                     element: ""#js-orders-search-by-products"",
-                    placeholder: ""<?php if ($productKeyword) { echo $productKeyword; } else { _e(""Search by products...""); }?>"",
+                    placeholder: ""<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(""Search by products...""); }?>"",
                     autoComplete:true,
                     ajaxConfig: {
                         method: 'get',",Update order_filtering.blade.php,"vuln-fix: Sanitize product keyword to prevent XSS in search placeholder

The product keyword was directly embedded into the search input placeholder without sanitization, allowing injection of malicious scripts. This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers. The fix applies an XSS cleaning function to the product keyword before rendering it in the placeholder attribute.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', ''), ('order_filtering.blade.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keyword', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('keyword', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('xss', 'secword', ''), ('keyword', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
116,{'CWE-79'},GHSA-6jp6-9rf9-gc66,"@@ -37,6 +37,7 @@
 from django.template.loader import render_to_string
 from django.urls import reverse
 from django.utils import timezone
+from django.utils.html import escape
 from django.utils.http import urlencode
 from django.utils.safestring import mark_safe
 from django.utils.translation import gettext
@@ -318,7 +319,7 @@ def render(self, name, value, attrs=None, renderer=None, **kwargs):
             # Render textare
             textarea = super().render(fieldname, val, attrs, renderer, **kwargs)
             # Label for plural
-            label = str(unit.translation.language)
+            label = escape(unit.translation.language)
             if len(values) != 1:
                 label = f""{label}, {plural.get_plural_label(idx)}""
             ret.append(","translate: Add missing escaping to language name

Fixes https://hackerone.com/reports/1486674","vuln-fix: Escape user-controlled language labels to prevent XSS

The vulnerability involved rendering user-controllable language labels without escaping, allowing injection of malicious HTML or JavaScript code in the output. This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user sessions or data. The fix applies proper HTML escaping to the language labels before rendering, mitigating the XSS vulnerability.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
117,{'CWE-79'},GHSA-3x96-m42v-hvh5,"@@ -87,11 +87,13 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
+    $autoSize = xss_clean($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
         $type = $_GET['type'];
     }
+    $type = xss_clean($type);
 
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
@@ -403,7 +405,9 @@
                 if (mw.notification) {
                     mw.notification.success('<?php _ejs('Settings are saved') ?>');
                 }
+                <?php if (isset($params['id'])) : ?>
                 mw.reload_module_parent('#<?php print $params['id']  ?>')
+                <?php endif; ?>
 
             });
 
@@ -440,9 +444,11 @@
 <body class=""mw-external-loading loading"">
 <div id=""settings-main"">
     <div id=""settings-container"">
-        <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
-             id=""module-id-<?php print $params['id'] ?>"">{content}
-        </div>
+        <?php if (isset($params['id'])) : ?>
+            <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
+                 id=""module-id-<?php print $params['id'] ?>"">{content}
+            </div>
+        <?php endif; ?>
     </div>
 </div>",update,"vuln-fix: Sanitize inputs and conditionally render module elements

User inputs from GET parameters were not sanitized, allowing potential cross-site scripting (XSS) attacks through unsanitized input values used in the application.
This is a security risk because attackers could inject malicious scripts, compromising user data and session integrity.
The fix applies XSS cleaning functions to inputs and conditionally renders HTML elements only when safe parameters are present, preventing injection and unauthorized DOM manipulation.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitized', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('unsanitized', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('xss', 'secword', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
118,{'CWE-79'},GHSA-cqhr-jqvc-qw9p,"@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,
 		if (message != null) {
 			writeln(SCRIPT_BEGIN);
 			// writeDirectly pour ne pas gérer de traductions si le message contient '#'
-			writeDirectly(""alert(\"""" + javascriptEncode(message) + ""\"");"");
+			writeDirectly(""alert(\"""" + htmlEncodeButNotSpace(javascriptEncode(message)) + ""\"");"");
 			writeln("""");
 			// redirect vers une url évitant que F5 du navigateur ne refasse l'action au lieu de faire un refresh
 			if (partToRedirectTo == null) {",fix XSS,"vuln-fix: Prevent XSS by encoding alert message properly

The vulnerability was improper encoding of alert messages allowing injection of malicious scripts via crafted input strings. This posed a security risk by enabling cross-site scripting attacks that could execute arbitrary JavaScript in users’ browsers. The fix applies additional HTML encoding after JavaScript encoding to neutralize special characters and prevent script injection in alert dialogs.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('improper encoding', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
119,{'CWE-79'},GHSA-3r95-23jp-mhvg,"@@ -513,10 +513,10 @@ function factory($, Helper, Icons) {
      */
     function setStageHeadline(title) {
       if (getUtility().isUndefinedOrNull(title)) {
-        title = buildTitleByFormElement();
+        title = buildTitleByFormElement().text();
       }
 
-      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).html(title);
+      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).text(title);
     };
 
     /**
@@ -981,10 +981,10 @@ function factory($, Helper, Icons) {
 
       getHelper()
         .getTemplatePropertyDomElement('_type', template)
-        .append(getFormElementDefinition(formElement, 'label'));
+        .append(document.createTextNode(getFormElementDefinition(formElement, 'label')));
       getHelper()
         .getTemplatePropertyDomElement('_identifier', template)
-        .append(formElement.get('identifier'));
+        .append(document.createTextNode(formElement.get('identifier')));
     };
 
     /**
@@ -1029,7 +1029,7 @@ function factory($, Helper, Icons) {
 
             getHelper()
               .getTemplatePropertyDomElement('_label', rowTemplate)
-              .append(collectionElementConfiguration['label']);
+              .append(document.createTextNode(collectionElementConfiguration['label']));
             $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))
               .append(rowTemplate.html());
           }
@@ -1089,7 +1089,7 @@ function factory($, Helper, Icons) {
           }
         }
 
-        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(label);
+        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(document.createTextNode(label));
 
         if (isPreselected) {
           getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(","[SECURITY] Ensure text preview of multivalue items in form editor

Multivalue items in the form editor user interface were previewed
as HTML, but should be treated as scalar text only.

Resolves: #96743
Releases: main, 11.5, 10.4
Change-Id: I5e8dab26119490ecf19ac5d48c2bc7a5a00daaad
Security-Bulletin: TYPO3-CORE-SA-2022-003
Security-References: CVE-2022-31048
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/73297
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Prevent XSS by escaping dynamic content in DOM updates

The vulnerability involved inserting unescaped HTML content directly into the DOM, allowing attackers to inject malicious scripts via user-controllable inputs. This posed a critical security risk as it could lead to cross-site scripting attacks compromising user data and application integrity. The fix replaces direct HTML insertion with safe text node creation and text setting methods to properly escape content before rendering.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: Critical  
CVSS: 9.8",0.17647058823529413,"[('security', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('#96743', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('updates', 'ACTION', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('escape', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
120,{'CWE-79'},GHSA-jp6r-xcjj-5h7r,"@@ -79,7 +79,7 @@ class TextEncodingBruteForce extends Operation {
         let table = ""<table class='table table-hover table-sm table-bordered table-nonfluid'><tr><th>Encoding</th><th>Value</th></tr>"";
 
         for (const enc in encodings) {
-            const value = Utils.printable(encodings[enc], true);
+            const value = Utils.escapeHtml(Utils.printable(encodings[enc], true));
             table += `<tr><td>${enc}</td><td>${value}</td></tr>`;
         }",Fixed XSS in 'Text Encoding Brute Force. Closes #539,"vuln-fix: Escape HTML output to prevent XSS in encoding table

The vulnerability was that unescaped encoding values were directly inserted into HTML, allowing injection of malicious scripts in the output table. This is a security risk because it enables cross-site scripting (XSS) attacks, potentially compromising user data and session integrity. The fix applies HTML escaping to all encoding values before insertion, preventing execution of injected scripts in the rendered page.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('#539', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
121,{'CWE-79'},GHSA-rxch-gp62-574w,"@@ -170,7 +170,7 @@ public function transformAssignedTo($asset)
         }
         return $asset->assigned ? [
             'id' => $asset->assigned->id,
-            'name' => $asset->assigned->display_name,
+            'name' => e($asset->assigned->display_name),
             'type' => $asset->assignedType()
         ] : null;
     }","Added escape to assigned_to API response

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape assigned display name to prevent XSS

The vulnerability was that the assigned display name was output without escaping, allowing injection of malicious scripts in the rendered HTML.
This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or steal sensitive data.
The fix applies proper HTML escaping to the display name before output, mitigating the risk of script injection in the UI.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.17647058823529413,"[('added', 'ACTION', ''), ('escape', 'SECWORD', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
122,{'CWE-79'},GHSA-6465-r752-2h8v,"@@ -24,6 +24,7 @@
 use FacturaScripts\Core\Base\DataBase\DataBaseWhere;
 use FacturaScripts\Core\Lib\Widget\VisualItemLoadEngine;
 use FacturaScripts\Dinamic\Model\CodeModel;
+use FacturaScripts\Dinamic\Model\Page;
 use FacturaScripts\Dinamic\Model\PageOption;
 use FacturaScripts\Dinamic\Model\User;
 use Symfony\Component\HttpFoundation\Response;
@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)
         parent::privateCore($response, $user, $permissions);
         $this->model = new PageOption();
         $this->loadSelectedViewName();
-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;
+        $this->setBackPage();
         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;
         $this->loadPageOptions();
 
@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool
         return true;
     }
 
+    private function setBackPage()
+    {
+        // check if the url is a real controller name
+        $url = $this->request->get('url', '');
+        $pageModel = new Page();
+        foreach ($pageModel->all([], [], 0, 0) as $page) {
+            if (substr($url, 0, strlen($page->name)) === $page->name) {
+                $this->backPage = $url;
+                return;
+            }
+        }
+
+        // set the default back page
+        $this->backPage = $this->selectedViewName;
+    }
+
     /**
      * @param array $column
      * @param string $name","We check the url parameter of the link to ensure that it is a valid controller.
------
Comprobamos el parámetro url del enlace para asegurar que sea un controlador válido.","vuln-fix: Validate backPage parameter against known controllers

The backPage URL parameter was directly assigned from user input without validation, allowing attackers to inject arbitrary URLs or controller names.
This could lead to unauthorized access or manipulation of application flow by referencing invalid or malicious pages.
The fix validates the backPage parameter by checking it against existing controller names and defaults to a safe page if no match is found.

Weakness: Improper Input Validation (CWE-20)
Severity: High
CVSS: 7.5",0.11764705882352941,"[('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('found', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('improper input validation', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
123,{'CWE-79'},GHSA-2gqg-2rg7-gh33,"@@ -118,8 +118,8 @@ private function formatMessage($message)
         return [
             'severity'  => $this->severityLabel($level),
             'timestamp' => $displayTime,
-            'source'    => $device ? Url::deviceLink($device) : $message['message']['source'],
-            'message'   => $message['message']['message'] ?? '',
+            'source'    => $device ? Url::deviceLink($device) : htmlspecialchars($message['message']['source']),
+            'message'   => htmlspecialchars($message['message']['message'] ?? ''),
             'facility'  => is_numeric($facility) ? ""($facility) "" . __(""syslog.facility.$facility"") : $facility,
             'level'     => (is_numeric($level) && $level >= 0) ? ""($level) "" . __(""syslog.severity.$level"") : $level,
         ];",fix graylog xss (#13931),"vuln-fix: Sanitize log message fields to prevent XSS

Log message fields were output without escaping, allowing injection of malicious HTML or JavaScript into rendered logs.
This posed a cross-site scripting risk, enabling attackers to execute scripts in users’ browsers viewing the logs.
The fix applies htmlspecialchars to sanitize the source and message fields before rendering, preventing script injection.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', ''), ('#13931', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
124,{'CWE-79'},GHSA-8c76-mxv5-w4g8,"@@ -6,18 +6,30 @@
 
 class SaveOptionApiController
 {
-    public function saveOption(Request $request) {
+    public $whitelistedGroupKeys = [
+        'website' => [
+            'website_head',
+            'website_footer'
+        ]
+    ];
+
+    public function saveOption(Request $request)
+    {
 
         $cleanFromXss = true;
         $option = $request->all();
 
-        // Allow for this keys
+        // Allow for this keys and groups
         if (isset($option['option_key'])) {
-            if ($option['option_key'] == 'website_head') {
-                $cleanFromXss = false;
-            }
-            if ($option['option_key'] == 'website_footer') {
-                $cleanFromXss = false;
+            foreach ($this->whitelistedGroupKeys as $group => $keys) {
+                if ($option['option_group'] == $group) {
+                    foreach ($keys as $key) {
+                        if ($option['option_key'] == $key) {
+                            $cleanFromXss = false;
+                            break;
+                        }
+                    }
+                }
             }
         }",Update SaveOptionApiController.php,"vuln-fix: Restrict XSS cleaning exceptions to whitelisted option keys

The vulnerability allowed disabling XSS cleaning for any option key, risking injection of malicious scripts in untrusted inputs.
This posed a security risk by enabling attackers to bypass sanitization and execute cross-site scripting attacks on the application.
The fix restricts exceptions to a predefined whitelist of option keys grouped by category, ensuring only trusted keys bypass XSS cleaning.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', ''), ('saveoptionapicontroller.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('xss', 'SECWORD', ''), ('key', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('untrusted inputs', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('keys', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
125,{'CWE-79'},GHSA-rp34-85x3-3764,"@@ -34,10 +34,10 @@
 $status = 'ok';
 $message = '';
 
-$transport_id = $vars['transport_id'];
-$name = $vars['name'];
+$transport_id = strip_tags($vars['transport_id']);
+$name = strip_tags($vars['name']);
 $is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');
-$transport_type = $vars['transport-type'];
+$transport_type = strip_tags($vars['transport-type']);
 
 if (empty($name)) {
     $status = 'error';","security - XSS Fix 01

fixing https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/ (#13775)","vuln-fix: Prevent XSS by sanitizing user input with strip_tags

User input fields were directly assigned without sanitization, allowing injection of malicious HTML or JavaScript code into the application output.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute scripts in users’ browsers and potentially steal sensitive data or hijack sessions.
The fix applies strip_tags to user inputs, removing HTML tags and preventing script injection through these fields.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixing', 'ACTION', ''), ('https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/', 'URL', ''), ('#13775', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
126,"{'CWE-79', 'CWE-116'}",GHSA-xjfw-5vv5-vjq2,"@@ -58,9 +58,9 @@
       &lt;dd&gt;
         ## TODO: design a real framework to generate form by type
         #if (($descriptor.defaultValue || ""$!descriptor.defaultValue"" != '') &amp;&amp; ($descriptor.type.getName() == 'boolean' || $descriptor.type.getName() == 'int' || $descriptor.type.getName() == 'java.lang.String'))
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$request.get($descriptorId)#else$descriptor.defaultValue#end""/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$escapetool.xml($request.get($descriptorId))#else$descriptor.defaultValue#end""/&gt;
         #else
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$request.get($descriptorId)""#end/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$escapetool.xml($request.get($descriptorId))""#end/&gt;
         #end
       &lt;/dd&gt;
     #end",XWIKI-19293: Fix bad escaping,"vuln-fix: Escape user input in form fields to prevent XSS

User input was directly inserted into HTML form input values without proper escaping, allowing injection of malicious scripts.
This posed a security risk by enabling cross-site scripting attacks that could compromise user sessions or steal sensitive data.
The fix applies XML escaping to all user-supplied values before rendering them in input fields, mitigating script injection risks.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
127,{'CWE-79'},GHSA-qq74-vgcf-54c3,"@@ -311,6 +311,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".asa"")
 			|| $isDangerStr($filename , "".cshtml"")
 			|| $isDangerStr($filename , "".axd"")
+			|| $isDangerStr($filename , ""htm"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Prevent dangerous file extension htm from being allowed

The code previously did not consider files with the ""htm"" extension as dangerous, allowing potentially unsafe files to be processed or uploaded. This omission could enable attackers to upload malicious HTML files that execute scripts or perform phishing attacks. The fix adds ""htm"" to the list of dangerous filename extensions, improving the detection and blocking of risky files.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type
Severity: High
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('phishing', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
128,{'CWE-79'},GHSA-gx6h-936c-vrrr,"@@ -45,7 +45,7 @@
       <div>
         <input type=""hidden"" name=""form_token"" value=""$!services.csrf.token"" />
         <input type=""hidden"" name=""register"" value=""1"" />
-        <input type=""hidden"" name=""xredirect"" value=""$!request.xredirect"" />
+        <input type=""hidden"" name=""xredirect"" value=""$escapetool.xml($!request.xredirect)"" />
         #set ($class = $xwiki.getClass('XWiki.XWikiUsers'))
         #set ($obj = $class.newObject())
         #set ($serverobj = $class.newObject())","XWIKI-19291: redirect parameter is badly handled in register page

  * Fix the typo","vuln-fix: Escape redirect URL to prevent XSS in registration form

The vulnerability was an unescaped redirect URL parameter embedded in a hidden form field, allowing injection of malicious scripts in the registration page. This posed a security risk by enabling cross-site scripting attacks that could hijack user sessions or steal sensitive data. The fix applies XML escaping to the redirect URL value before rendering it in the form, mitigating script injection risks. 

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('fix', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
129,{'CWE-79'},GHSA-ff28-f46g-r9g8,"@@ -314,6 +314,7 @@ func runWeb(c *cli.Context) error {
 				}
 				defer fr.Close()
 
+				c.Header().Set(""Content-Security-Policy"", ""default-src 'none'; style-src 'unsafe-inline'; sandbox"")
 				c.Header().Set(""Cache-Control"", ""public,max-age=86400"")
 				c.Header().Set(""Content-Disposition"", fmt.Sprintf(`inline; filename=""%s""`, attach.Name))",attachment: set CSP header in the serving endpoint (#6926),"vuln-fix: Add Content-Security-Policy header to mitigate XSS risks

The application lacked a Content-Security-Policy header, allowing browsers to execute potentially malicious scripts and styles from untrusted sources. This absence increased the risk of cross-site scripting attacks that could compromise user data and session integrity. The fix introduces a restrictive Content-Security-Policy header that disables all content by default, permits only inline styles, and enforces sandboxing to isolate the execution environment.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation (Cross-site Scripting)
Severity: High
CVSS: 7.4",0.058823529411764705,"[('csp header', 'SECWORD', ''), ('#6926', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('security', 'secword', ''), ('mitigate', 'ACTION', ''), ('xss', 'SECWORD', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('untrusted sources', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('high', 'SEVERITY', '')]"
130,{'CWE-79'},GHSA-74qp-233x-p5j8,"@@ -15,13 +15,17 @@
  * limitations under the License.
  */
 
+function escapeHtml(unescapedText) {
+  return $(""<div>"").text(unescapedText).html()
+}
+
 function loadSessionsTable(sessions) {
   $.each(sessions, function(index, session) {
     $(""#interactive-sessions .sessions-table-body"").append(
       ""<tr>"" +
         tdWrap(uiLink(""session/"" + session.id, session.id)) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.kind) +
@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {
       ""<tr>"" +
         tdWrap(session.id) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.state) +
@@ -79,4 +83,4 @@ $(document).ready(function () {
       $(""#all-sessions"").append('<h4>No Sessions or Batches have been created yet.</h4>');
     }
   });
-});
\ No newline at end of file
+});","Add html escape to session name

## What changes were proposed in this pull request?

The PR adds HTML escaping to session names.

## How was this patch tested?

Manual test.

Author: Marco Gaido <mgaido@apache.org>

Closes #302 from mgaido91/escape_html.","vuln-fix: Escape HTML in session names to prevent XSS

Session names were directly inserted into the DOM without escaping, allowing injection of malicious HTML or scripts by attackers.
This posed a critical cross-site scripting risk, potentially compromising user data and session integrity.
The fix introduces HTML escaping of session names before insertion, neutralizing any embedded malicious code.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: Critical  
CVSS: 9.8",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'secword', ''), ('changes', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'secword', ''), ('patch', 'ACTION', ''), ('manual', 'DETECTION', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('attackers', 'FLAW', ''), ('critical', 'SEVERITY', ''), ('cross-site scripting', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('malicious code', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
131,{'CWE-79'},GHSA-c7pp-g2v2-2766,"@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {
                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(""["");
                 data = response.substring(response.indexOf(""[""), endIndex);
 
-                var get_data = new Function(""\""use strict\""; return "" + data);
-                realData = get_data();
-
-                parsedResponse.push(realData);
+                var json = JSON.parse(data);
+                parsedResponse.push(json);
 
                 // prepare response for next loop
                 response = response.substring(response.indexOf(""[""), response.length);
@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {
             return emails;
         }
 
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        api.tracker.view_data = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
+        api.tracker.view_data = json;
 
         for(var i in api.tracker.view_data) {
             if (typeof(api.tracker.view_data[i]) === ""function"") {
@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {
         if (!get_data) {
             return {};
         }
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        var cdata = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
 
-        api.tracker.email_data = cdata[0];
+        api.tracker.email_data = json[0];
         return api.tools.parse_email_data(api.tracker.email_data);
     };",Replace new Function() with JSON.parse(),"vuln-fix: Replace dynamic code execution with JSON parsing

The code used dynamic function construction to parse data strings, which allowed execution of arbitrary code embedded in the input data. This posed a critical security risk as attackers could inject malicious scripts leading to code execution within the application context. The fix replaces dynamic function calls with safe JSON.parse calls to strictly parse data as JSON, eliminating code execution vulnerabilities.

Weakness: CWE-95: Improper Control of Generation of Code ('Code Injection')
Severity: Critical
CVSS: 9.8",0.11764705882352941,"[('json.parse', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('json.parse', 'URL', ''), ('code execution', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-95', 'CWEID', ''), ('improper control', 'secword', ''), ('code injection', 'SECWORD', ''), ('critical', 'SEVERITY', '')]"
132,{'CWE-79'},GHSA-c558-5gfm-p2r8,"@@ -141,7 +141,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -153,7 +153,12 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
-</script>		
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
+</script>
 </c:set>
 
 <dspace:layout titlekey=""jsp.search.title"">",[DS-4453] Discovery autocomplete HTML escaping (JSPUI),"vuln-fix: Escape HTML in displayed filter labels to prevent XSS

The vulnerability was that user-controlled filter values were rendered without escaping, allowing injection of malicious HTML or scripts in the UI.
This posed a security risk by enabling cross-site scripting attacks, potentially compromising user sessions or data.
The fix introduces an HTML escaping function applied to all displayed filter labels, sanitizing output and preventing script execution.

Weakness: Cross-Site Scripting (XSS) CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
133,{'CWE-79'},GHSA-gj85-pvp5-mvf9,"@@ -19,7 +19,7 @@ function autoload_class($class) {
 require_once dirname(__FILE__) . '/../config.php';
 require_once dirname(__FILE__) . '/../src/Storage.php';
 
-$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';
+$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';
 $GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';
 $GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';
 $GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';",Sanitize input,"vuln-fix: Sanitize server parameter to prevent XSS attacks

The server parameter from the GET request was used directly without sanitization, allowing injection of malicious scripts into the application output. This posed a security risk by enabling cross-site scripting (XSS) attacks that could compromise user data and session integrity. The fix applies htmlspecialchars to the server parameter, encoding special characters and preventing script execution in the browser context.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('sanitize', 'secword', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('server', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('server', 'secword', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('server', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
134,{'CWE-79'},GHSA-3j9m-hcv9-rpj8,"@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replace('{{', '%7B%7B').replace('}}', '%7D%7D');
+  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
 }

From: Dan Cech <dcech@grafana.com>

 packages/grafana-data/src/text/sanitize.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
+  return url.replace(/\{\{/g, '%7B%7B').replace(/\}\}/g, '%7D%7D');
 }","Merge pull request #151 from grafana/dcech/sanitize-replaceAll

use global replace when sanitizing urls in 8.2.3","vuln-fix: Prevent incomplete Angular interpolation sanitization

The sanitizeAngularInterpolation function only replaced the first occurrence of Angular interpolation markers, leaving others unescaped in URLs.
This allowed attackers to inject malicious Angular expressions, leading to potential client-side template injection vulnerabilities.
The fix replaces all occurrences of '{{' and '}}' using global regular expressions to ensure complete sanitization of interpolation markers.

Weakness: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Severity: High
CVSS: 7.5",0.17647058823529413,"[('#151', 'ISSUE', ''), ('sanitize', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('8.2.3', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sanitization', 'secword', ''), ('sanitizeangularinterpolation', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('injection', 'secword', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-79', 'CWEID', ''), ('improper neutralization', 'secword', ''), ('cross-site scripting', 'secword', ''), ('high', 'SEVERITY', '')]"
135,{'CWE-79'},GHSA-hm45-mgqm-gjm4,"@@ -72,6 +72,7 @@ <h1>{{ _('Loading servers...') }}</h1>
                 } else {
                     var base_guild_url = ""{{ url_for('home_blueprint.guild', guild='123456789123456789') }}""
                     $(""#serverrow"").html("""")
+                    let counter = 0
                     for (let g of json.data) {
                         var current_guild_url = base_guild_url.replace(""123456789123456789"", g.id)
                         $(""#serverrow"").append(`
@@ -80,13 +81,16 @@ <h1>{{ _('Loading servers...') }}</h1>
                                     <div class=""card h-100"" onmouseover=""playGif(this)"" onmouseout=""stopGif(this)"">
                                         <img class=""card-img-top"" src=""${g.icon}png"" alt=""Card image cap"" data-src-url=""${g.icon}"" data-is-animated=${g.animated}>
                                         <div class=""card-body"">
-                                            <h5 class=""card-title"">${g.name}</h5>
-                                            <p class=""card-text"">Owner: ${g.owner}</p>
+                                            <h5 class=""card-title"" id=""guild-counter-${counter}"">Loading...</h5>
+                                            <p class=""card-text"" id=""owner-counter-${counter}"">Owner: Loading...</p>
                                         </div>
                                     </div>
                                 </a>
                             </div>
                         `)
+                        $(`#guild-counter-${counter}`).text(g.name)
+                        $(`#owner-counter-${counter}`).text(g.owner)
+                        counter += 1
                     }
                 }
             }",Fix unformatted HTML,"vuln-fix: Prevent XSS by avoiding direct HTML injection of unescaped data

The vulnerability involves directly injecting unescaped user-controlled data into HTML, which can lead to cross-site scripting (XSS) attacks if malicious content is present. This is a security risk because attackers can execute arbitrary scripts in users’ browsers, potentially stealing sensitive information or performing unauthorized actions. The fix replaces direct HTML injection with safe text assignment methods that properly escape content, preventing script execution.

Weakness: Cross-Site Scripting (CWE-79)  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('sensitive information', 'secword', ''), ('fix', 'ACTION', ''), ('injection', 'SECWORD', ''), ('safe', 'secword', ''), ('escape', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
136,{'CWE-79'},GHSA-c53x-wwx2-pg96,"@@ -21,7 +21,7 @@ const liljs = (elem, data = {}) => {
      * @param {String} property Name of the property to render
      * @param {String} value (Optional) A value to use instead of a property (used in lil-list-text)
      */
-    const setText = (elem, property, value) => elem.innerHTML = value || state[property].value;
+    const setText = (elem, property, value) => elem.textContent = value || state[property].value;
 
     /** Set style helper function
      * @function setStyle
@@ -43,7 +43,7 @@ const liljs = (elem, data = {}) => {
      */
     const setList = (elem, property) => {
       //TODO: Find a way to update without clearing lists
-      elem.innerHTML = """";
+      elem.textContent = """";
       state[property].value.forEach(value => {
         let clone = document.importNode(state[property].template.content, true);
         clone.querySelectorAll(""[lil-list-text]"").forEach(node => {","Use textContent over innerHTML so you can bind untrusted text values
without the possibility of an XSS attack.","vuln-fix: Prevent XSS by replacing innerHTML with textContent

The code used innerHTML to set element content, which allowed injection of malicious HTML and JavaScript code through untrusted input.
This posed a critical cross-site scripting (XSS) risk, enabling attackers to execute arbitrary scripts in users' browsers.
The fix replaces innerHTML assignments with textContent to safely render text without interpreting it as HTML, mitigating XSS vulnerabilities.

Weakness: Cross-Site Scripting (CWE-79)
Severity: Critical
CVSS: 9.8",0.17647058823529413,"[('untrusted', 'secword', ''), ('xss', 'SECWORD', ''), ('attack', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('untrusted', 'secword', ''), ('critical', 'SEVERITY', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('cwe-79', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
137,{'CWE-79'},GHSA-vhm6-gw82-6f8j,"@@ -62,7 +62,7 @@
                             echo ""
                                 <tr>
                                     <td>{$rule['name']}</td>
-                                    <td><i>"" . htmlentities($rule_display) . ""</i></td>
+                                    <td><i>"" . htmlentities(strip_tags($rule_display)) . ""</i></td>
                                     <td>{$rule['severity']}</td>
                                     <td>{$rule['id']}</td>
                                 </tr>",Resolved XSS issue from alert rule list modal (#13805),"vuln-fix: Prevent XSS by stripping HTML tags before encoding output

The vulnerability allowed HTML tags in rule display content to be encoded but still rendered as HTML entities, potentially enabling cross-site scripting attacks. This is a security risk because malicious scripts could be injected and executed in users' browsers, compromising user data and session integrity. The fix strips all HTML tags from the rule display content before encoding it with htmlentities, ensuring no executable code is rendered in the output.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('encoded', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('htmlentities', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
138,{'CWE-79'},GHSA-mw75-qvfr-hpmr,"@@ -303,6 +303,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
+			|| $isDangerStr($filename , "".xxhtml"")
 		) {
 			return true;
 		}
@@ -312,4 +313,4 @@ public function isDangerFilename($filename){
 
 
 
-}
\ No newline at end of file
+}","Merge pull request #1628 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Prevent dangerous .xxhtml file extension in filename checks

The filename validation function did not consider the .xxhtml extension as dangerous, allowing potentially harmful files to bypass security filters. This omission could enable attackers to upload malicious files disguised with this extension, risking server-side code execution or data exposure. The fix adds .xxhtml to the list of disallowed filename extensions, strengthening input validation against unsafe file uploads.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.23529411764705882,"[('#1628', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('bypass', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('server', 'secword', ''), ('code execution', 'SECWORD', ''), ('data exposure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
139,{'CWE-79'},GHSA-h3vq-wv8j-36gw,"@@ -50,8 +50,21 @@ module.exports = function (svgString) {
     // Empty script tags and javascript executing
     svgString = svgString.replace(/<script[\s\S]*>[\s\S]*<\/script>/, '<script></script>');
     
-    // Remove error handlers
-    svgString = svgString.replace(/onerror=[\s\S]*['""].*?['""]/i, '');
+    // Remove event handlers
+    const eventNames = [
+        'onbegin', 'onend', 'onrepeat', 'onabort', 'onerror', 'onresize', 'onscroll', 'onunload', 'oncopy',
+        'oncut', 'onpaste', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose',
+        'oncuechange', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave',
+        'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onloadeddata', 'onloadedmetadata',
+        'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove',
+        'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress',
+        'onkeyup', 'onload', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpause', 'onplay',
+        'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onseeked', 'onseeking',
+        'onselect', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange',
+        'onwaiting', 'onactivate', 'onfocusin', 'onfocusout'
+    ];
+    const eventsRegex = new RegExp(`(${eventNames.join('|')})\\s*=\\s*['""].*['""]`, 'i');
+    svgString = svgString.replace(eventsRegex, '');
 
     return svgString;
 };",Remove lots of event handlers,"vuln-fix: Prevent event handler injection in SVG sanitization

The vulnerability allowed SVG elements to retain event handler attributes, enabling execution of arbitrary JavaScript when the SVG was rendered. This posed a security risk by facilitating cross-site scripting (XSS) attacks through malicious SVG content. The fix removes a comprehensive list of event handler attributes from SVG strings using a regex, preventing script execution via embedded event handlers.

Weakness: Cross-Site Scripting (XSS) - CWE-79  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('remove', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('sanitization', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
140,{'CWE-79'},GHSA-q6mp-562x-ggvv,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',css,json,zip,gzip,csv,7z';
+                $are_allowed .= ',css,json,zip,gzip,psd,csv,7z';
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,odt,pages,rtf,txt,pps,ppt,pptx,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,odt,rtf,txt,pps,ppt,pptx,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",update,"vuln-fix: Restrict allowed file upload extensions to reduce risk

The file upload function previously allowed potentially unsafe file types like PSD and Pages, increasing the attack surface for malicious uploads. Allowing these file types can lead to execution of harmful content or exploitation of vulnerabilities in file handlers. The fix removes risky extensions from allowed lists, limiting uploads to safer, well-validated file types only.

Weakness: CWE-434 Unrestricted Upload of File with Dangerous Type  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', '')]",0.35294117647058826,"[('fix', 'ACTION', ''), ('unsafe', 'secword', ''), ('attack surface', 'SECWORD', ''), ('malicious', 'secword', ''), ('exploitation', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('weakness', 'SECWORD', ''), ('cwe-434', 'CWEID', ''), ('unrestricted upload', 'secword', ''), ('high', 'SEVERITY', '')]"
