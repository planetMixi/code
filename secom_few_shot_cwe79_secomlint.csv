id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message,original_message_score,original_message_entities,generated_secom_message_score,generated_secom_message_entities
0,CWE-79,GHSA-wcm2-9c89-wmfm,"@@ -352,14 +352,21 @@ $.widget(""ui.dialog"", {
 		uiDialogTitle = $( ""<span>"" )
 			.uniqueId()
 			.addClass( ""ui-dialog-title"" )
-			.html( this.options.title || ""&#160;"" )
 			.prependTo( this.uiDialogTitlebar );
+		this._title( uiDialogTitle );
 
 		this.uiDialog.attr({
 			""aria-labelledby"": uiDialogTitle.attr( ""id"" )
 		});
 	},
 
+	_title: function( title ) {
+		if ( !this.options.title ) {
+			title.html( ""&#160;"" );
+		}
+		title.text( this.options.title );
+	},
+
 	_createButtonPane: function() {
 		var uiDialogButtonPane = ( this.uiDialogButtonPane = $( ""<div>"" ) )
 			.addClass( ""ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"" );
@@ -600,9 +607,7 @@ $.widget(""ui.dialog"", {
 		}
 
 		if ( key === ""title"" ) {
-			// convert whatever was passed in to a string, for html() to not throw up
-			$( "".ui-dialog-title"", this.uiDialogTitlebar )
-				.html( """" + ( value || ""&#160;"" ) );
+			this._title( this.uiDialogTitlebar.find( "".ui-dialog-title"" ) );
 		}
 	},","Dialog: Extract setting the title into a _title method, use .text() to prevent XSS. Fixes #6016 - Dialog: Title XSS Vulnerability.","vuln-fix: Prevent XSS by safely setting dialog titles

The dialog widget previously inserted raw HTML for titles without escaping, allowing injection of malicious HTML or scripts via the title option.
This exposed applications to cross-site scripting (XSS) attacks where attackers could execute arbitrary code in users’ browsers through crafted dialog titles.
The fix replaces direct HTML insertion with safe text setting, ensuring titles are properly escaped and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.058823529411764705,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('fixes', 'ACTION', ''), ('#6016', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
1,CWE-79,GHSA-q26w-wjj2-22vv,"@@ -87,11 +87,16 @@ class HtmlUtils {
 			return tagStack[tagStack.length - 1];
 		};
 
-		// The BASE tag allows changing the base URL from which files are loaded, and
-		// that can break several plugins, such as Katex (which needs to load CSS
-		// files using a relative URL). For that reason it is disabled.
-		// More info: https://github.com/laurent22/joplin/issues/3021
-		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed'];
+		// The BASE tag allows changing the base URL from which files are
+		// loaded, and that can break several plugins, such as Katex (which
+		// needs to load CSS files using a relative URL). For that reason
+		// it is disabled. More info:
+		// https://github.com/laurent22/joplin/issues/3021
+		//
+		// ""link"" can be used to escape the parser and inject JavaScript.
+		// Adding ""meta"" too for the same reason as it shouldn't be used in
+		// notes anyway.
+		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed', 'link', 'meta'];
 
 		const parser = new htmlparser2.Parser({","All: Security: Remove ""link"" and ""meta"" tags from notes to prevent XSS","vuln-fix: Block link and meta tags to prevent HTML injection

The HTML sanitizer allowed <link> and <meta> tags, which could be exploited to inject malicious scripts or manipulate document metadata in notes.
This posed a security risk by enabling attackers to bypass content restrictions and execute arbitrary JavaScript or alter page behavior.
The fix extends the disallowed tags list to include ""link"" and ""meta"", preventing their use and mitigating injection attacks.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.058823529411764705,"[('security', 'SECWORD', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitizer', 'SECWORD', ''), ('exploited', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('manipulate', 'ACTION', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('bypass', 'secword', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
2,CWE-79,GHSA-4p8f-mmfj-r45g,"@@ -17,7 +17,7 @@ def tags_for_index(model)
       elsif !query.include?(hashtag)
         query += "" #{hashtag}""
       end
-      out << link_to_function(tag, ""crm.search_tagged('#{query}', '#{model.class.to_s.tableize}')"", title: tag)
+      out << link_to_function(tag, ""crm.search_tagged('#{escape_javascript(query)}', '#{model.class.to_s.tableize}')"", title: tag)
     end
   end",Context-sensitive XSS bugfix.,"vuln-fix: Escape JavaScript in dynamic tag search calls

The code injected user-controlled tag queries directly into JavaScript function calls without escaping, allowing injection of arbitrary script code.
This created a cross-site scripting (XSS) risk where attackers could execute malicious scripts in users’ browsers by crafting special tag inputs.
The fix applies proper JavaScript escaping to the query string before embedding it in the function call, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('sensitive', 'SECWORD', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,CWE-79,GHSA-cx2r-mf6x-55rx,"@@ -29,6 +29,7 @@
 use PrestaShopBundle\Form\Admin\Type\TranslatorAwareType;
 use Symfony\Component\Form\Extension\Core\Type\TextType;
 use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\Validator\Constraints as Assert;
 
 class CustomUrlType extends TranslatorAwareType
 {
@@ -45,6 +46,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
             ->add('url', TextType::class, [
                 'label' => $this->trans('URL', 'Modules.Linklist.Admin'),
                 'required' => true,
+                'constraints' => [new Assert\Url()],
             ])
         ;
     }","Merge pull request from GHSA-cx2r-mf6x-55rx

The custom url field must be a valid url","vuln-fix: Add URL validation to custom URL form field

The form field for URLs lacked validation, allowing users to submit malformed or malicious URLs without restriction.
This posed a security risk by enabling injection of invalid or harmful URLs that could lead to phishing, open redirects, or other attacks.
The fix adds a URL constraint using Symfony’s validator to ensure only properly formatted URLs are accepted.

Weakness: CWE-20  
Severity: Medium  
CVSS: 5.3",0.23529411764705882,"[('ghsa', 'VULNID', 'GHSA')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('url validation', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('injection', 'secword', ''), ('phishing', 'secword', ''), ('open redirects', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
4,CWE-79,GHSA-5qjq-69w6-fg57,"similarity index 86%
rename from js/src/common/Translator.ts
rename to js/src/common/Translator.tsx
@@ -48,12 +48,23 @@ export default class Translator {
     // future there should be a hook here to inspect the user and change the
     // translation key. This will allow a gender property to determine which
     // translation key is used.
+
     if ('user' in parameters) {
       const user = extract(parameters, 'user');
 
       if (!parameters.username) parameters.username = username(user);
     }
-    return parameters;
+
+    const escapedParameters: TranslatorParameters = {};
+
+    for (const param in parameters) {
+      const paramValue = parameters[param];
+
+      if (typeof paramValue === 'string') escapedParameters[param] = <>{parameters[param]}</>;
+      else escapedParameters[param] = parameters[param];
+    }
+
+    return escapedParameters;
   }
 
   trans(id: string, parameters: TranslatorParameters = {}) {",Fix XSS vulnerability,"vuln-fix: Escape string parameters in translation to prevent XSS

The translation function returned user-supplied string parameters without escaping, allowing injection of malicious HTML or scripts in rendered translations.
This exposed applications to cross-site scripting (XSS) attacks where attackers could execute arbitrary code in users’ browsers via crafted translation inputs.
The fix wraps string parameters in React fragments to ensure proper escaping and safe rendering of dynamic translation content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,CWE-79,GHSA-3374-7h99-xr85,"@@ -128,6 +128,7 @@ private function loadDataGrid(): void
             'registered_on',
             true
         );
+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');
 
         // add the mass action controls
         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');",Fix xss in profiles display name,"vuln-fix: Sanitize display names in data grid output

The data grid displayed user-provided display names without escaping HTML entities, allowing injection of malicious HTML or scripts.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in users’ browsers.
The fix applies htmlspecialchars to display names before rendering, ensuring special characters are safely encoded and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
6,CWE-79,GHSA-qqxp-xp9v-vvx6,"@@ -61,7 +61,7 @@
 						// remove invalid value, as it didn't match anything
 						$( element )
 							.val( """" )
-							.attr( ""title"", value + "" didn't match any item"" )
+							.attr( ""title"", $( ""<a>"" ).text( value ).html() + "" didn't match any item"" )
 							.tooltip( ""open"" );
 						select.val( """" );
 						setTimeout(function() {",Autocomplete demo: Combobox: Encode search term inside tooltips. Fixes #8859 - Autocomplete: XSS in combobox demo.,"vuln-fix: Sanitize tooltip content to prevent XSS in autocomplete

The autocomplete widget set tooltip titles directly from user input without escaping, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting (XSS) attacks by rendering untrusted input as executable code in tooltips.
The fix escapes user input by encoding it as text before inserting into the tooltip attribute, preventing HTML interpretation.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('encode', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#8859', 'ISSUE', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('untrusted', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
7,CWE-79,GHSA-q7q9-w24q-cpgh,"@@ -149,8 +149,16 @@ App.BreadcrumbItem = Em.Object.extend({
   createLabel() {
     let label = this.get('label');
     let labelBindingPath = this.get('labelBindingPath');
+    let formattedLabel;
+
+    if (labelBindingPath) {
+      formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));
+    } else{
+      formattedLabel = label;
+    }
+
+
 
-    let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;
     this.set('formattedLabel', this.labelPostFormat(formattedLabel));
   },
 
@@ -216,7 +224,9 @@ App.BreadcrumbsView = Em.View.extend({
       }
       currentState = currentState.get('parentState');
     }
-    items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());
+    items.reverse();
+    items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));
+    items = items.map(item => App.BreadcrumbItem.extend(item).create());
     if (items.length) {
       items.get('lastObject').setProperties({
         disabled: true,",AMBARI-25329. Ambari breadcrumbs xss vulnerability,"vuln-fix: Escape breadcrumb labels to prevent XSS injection

Breadcrumb labels were rendered without proper escaping, allowing injection of malicious HTML or scripts via labelBindingPath or label properties.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in the context of the application.
The fix applies Ember's escapeExpression to breadcrumb labels derived from bindings and all but the first breadcrumb item, ensuring safe rendering.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escapeexpression', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
8,CWE-79,GHSA-vcfc-9wcp-j623,"@@ -90,12 +90,13 @@ public async Task SerializeToStreamAsync(IRequest req, object response, Stream o
             {
                 // Serialize then escape any potential script tags to avoid XSS when displaying as HTML
                 var json = JsonDataContractSerializer.Instance.SerializeToString(dto) ?? ""null"";
-                json = json.Replace(""<"", ""&lt;"").Replace("">"", ""&gt;"");
+                json = json.HtmlEncode();
 
                 var url = req.ResolveAbsoluteUrl()
                     .Replace(""format=html"", """")
                     .Replace(""format=shtm"", """")
-                    .TrimEnd('?', '&');
+                    .TrimEnd('?', '&')
+                    .HtmlEncode();
 
                 url += url.Contains(""?"") ? ""&"" : ""?"";",HtmlEncode Raw URL in HtmlFormat snapshot,"vuln-fix: Encode output to prevent cross-site scripting in HTML responses

The serialization method did not fully encode JSON and URL strings before embedding them in HTML, allowing unescaped characters that could enable script injection.
This exposed users to cross-site scripting (XSS) attacks where malicious scripts could execute in the context of trusted web pages, compromising user data and session integrity.
The fix replaces manual character replacements with comprehensive HTML encoding for both JSON content and URLs, ensuring all special characters are safely escaped.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('htmlencode', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('serialization', 'SECWORD', ''), ('encode', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('manual', 'DETECTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
9,CWE-79,GHSA-whv6-rj84-2vh2,"@@ -60,6 +60,9 @@ import Action from 'nextcloud-vue/dist/Components/Action'
 import Avatar from 'nextcloud-vue/dist/Components/Avatar'
 import Tooltip from 'nextcloud-vue/dist/Directives/Tooltip'
 
+Tooltip.options.defaultHtml = false
+
+
 export default {
 	name: 'CollectionListItem',
 	components: {","Force defaultHtml setting of v-tooltip to be disabled

Signed-off-by: Julius Härtl <jus@bitgrid.net>","vuln-fix: Disable default HTML rendering in tooltips

The tooltip directive allowed HTML content by default, enabling injection of arbitrary HTML and scripts into the user interface.
This posed a cross-site scripting (XSS) risk where attackers could execute malicious code in users' browsers by injecting crafted tooltip content.
The fix disables default HTML rendering in tooltips, forcing safer plain text display and preventing script execution via tooltip content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('signed', 'secword', ''), ('jus@bitgrid.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious code', 'SECWORD', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
10,CWE-79,GHSA-xw79-hhv6-578c,"@@ -4,7 +4,7 @@
     <meta charset=""utf-8"">
     <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
 
-    <title>Files within {{=it.directory}}</title>
+    <title>Files within {{!it.directory}}</title>
 
 	<style>
 		body {
@@ -187,7 +187,7 @@
           <i>Index of&nbsp;</i>
 
           {{~it.paths :value:index}}
-            <a href=""/{{=value.url}}"">{{=value.name}}</a>
+            <a href=""/{{!value.url}}"">{{!value.name}}</a>
           {{~}}
         </h1>
 
@@ -197,9 +197,9 @@
       <ul id=""files"">
         {{~it.files :value:index}}
           <li>
-            <a href=""{{=value.relative}}"" title=""{{=value.title}}"" class=""{{=value.ext}}"">{{=value.base}}</a>
+            <a href=""{{!value.relative}}"" title=""{{!value.title}}"" class=""{{!value.ext}}"">{{!value.base}}</a>
 			{{? value.size}}
-				<i>{{=value.size}}</i>
+				<i>{{!value.size}}</i>
 			{{?}}
           </li>
         {{~}}",Interpolate template variables correctly (#64),"vuln-fix: Escape user input in directory listing templates

The directory listing page rendered user-supplied data without escaping, allowing injection of arbitrary HTML or scripts into the page.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute malicious code in victims’ browsers and steal sensitive information.
The patch changes template interpolation from unescaped to escaped output, preventing injection by properly encoding all user-controlled fields.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('#64', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious code', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive information', 'secword', ''), ('patch', 'ACTION', ''), ('changes', 'ACTION', ''), ('unescaped', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
11,CWE-79,GHSA-5pg2-qg87-vmj7,"@@ -336,9 +336,12 @@
 // Make sure the fileName is unique but only if chunking is disabled
 if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {
     $ext = strrpos($fileName, '.');
+
     $fileName_a = substr($fileName, 0, $ext);
     $fileName_b = substr($fileName, $ext);
 
+    $fileName_b = strtolower($fileName_b);
+
     $count = 1;
     while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {
         ++$count;
@@ -500,7 +503,7 @@
 
     if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {
         $ext = get_file_extension($filePath);
-
+        $ext = strtolower($ext);
         if (function_exists('finfo_open') and function_exists('finfo_file')) {
             $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
             $mime = @finfo_file($finfo, $filePath);",update,"vuln-fix: Normalize file extensions to prevent case-based bypasses

File extension comparisons were case-sensitive, allowing attackers to bypass file existence checks and MIME type validations by using uppercase or mixed-case extensions.
This inconsistency could lead to overwriting existing files or improper MIME type handling, potentially enabling unauthorized file uploads or execution of malicious content.
The fix converts file extensions to lowercase before comparisons and checks, ensuring consistent and secure handling regardless of case variations.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('bypasses', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('secure', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
12,CWE-79,GHSA-5vr6-hm68-5j9p,"@@ -44,5 +44,5 @@
 if (! empty($ok)) {
     exit(""$ok"");
 } else {
-    exit(""ERROR: $error"");
+    exit(""ERROR: "".htmlspecialchars($error));;
 }",fix XSS vulnerability in poller-groups.inc.php,"vuln-fix: Sanitize error output to prevent XSS in responses

The application directly outputted error messages without encoding, allowing injection of malicious HTML or JavaScript into the response.
This exposed users to cross-site scripting (XSS) attacks where attackers could execute arbitrary scripts in victims' browsers.
The fix applies htmlspecialchars to encode error messages before output, preventing execution of injected code.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('poller-groups.inc.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('error', 'FLAW', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('error', 'FLAW', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,"CWE-434', 'CWE-79",GHSA-5q5w-mqp6-g2gh,"@@ -20,7 +20,9 @@ public function rules()
             'quantity' => ['required', 'integer', 'min:0'],
             'price' => ['required', 'numeric', 'min:0'],
             'sale_price' => ['nullable', 'numeric'],
-            'weight' => ['nullable', 'numeric', 'min:0']
+            'weight' => ['nullable', 'numeric', 'min:0'],
+            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
+            'cover' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
         ];
     }
 }",Fix vulnerability report from hunter.dev,"vuln-fix: Enforce image upload validation in product input

The product input validation lacked checks for uploaded image files, allowing arbitrary file types and sizes to be submitted without restriction.
This exposed the application to risks such as malicious file uploads, which could lead to remote code execution or denial of service through oversized files.
The fix adds strict validation rules to ensure only specific image MIME types are accepted and file sizes are limited to 2MB.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('hunter.dev', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('input validation', 'secword', ''), ('malicious file', 'secword', ''), ('remote code execution', 'secword', ''), ('denial of service', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
14,CWE-79,GHSA-vpwq-6cp4-ffqc,"@@ -309,6 +309,8 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".aspx"")
 			|| $isDangerStr($filename , "".xsd"")
 			|| $isDangerStr($filename , "".asa"")
+			|| $isDangerStr($filename , "".cshtml"")
+			|| $isDangerStr($filename , "".axd"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Extend dangerous filename checks to block risky extensions

The filename validation function did not consider certain web-related extensions like .cshtml and .axd as dangerous, allowing potentially unsafe files to be accepted.
This omission could enable attackers to upload or process files that execute server-side code or expose sensitive application internals, leading to remote code execution or information disclosure.
The fix adds these extensions to the danger list, improving input validation to reject files with risky server-side script or handler extensions.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('server', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('remote code execution', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('danger', 'secword', ''), ('improving', 'ACTION', ''), ('input validation', 'secword', ''), ('server', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
15,CWE-79,GHSA-j6p2-cx3w-6jcp,"@@ -1079,7 +1079,7 @@
 
   // Helper function to escape a string for HTML rendering.
   var escapeHTML = function(string) {
-    return string.replace(/&(?!\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    return string.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
   };
 
 }).call(this);","Fixed escapeHTML function
to skip not only &***;, but also &#***; and &x***;","vuln-fix: Improve HTML escaping to handle numeric character references

The HTML escaping function failed to correctly preserve numeric character references, allowing them to be partially escaped and potentially misinterpreted by browsers.
This flaw could enable injection of malicious HTML or script content by bypassing escaping, leading to cross-site scripting (XSS) vulnerabilities.
The fix extends the regex to recognize and exclude numeric character references from escaping, ensuring all entities are safely encoded.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.23529411764705882,"[('fixed', 'ACTION', ''), ('escapehtml', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('bypassing', 'SECWORD', ''), ('escaping', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
16,CWE-79,GHSA-h4mx-xv96-2jgm,"@@ -9,7 +9,7 @@
         {f:translate(
         key: 'forgot_validate_reset_password_html',
         extensionName: 'felogin',
-        arguments: '{ 0: receiverName, 1: recoveryLink, 2: validUntil }'
+        arguments: '{ 0: ""{receiverName -> f:format.htmlspecialchars()}"", 1: recoveryLink, 2: validUntil }'
         ) -> f:format.html()}
     </f:spaceless>
 </f:section>","[SECURITY] Avoid HTML injection in password recovery mail

The `receiverName` variable used in the password recovery mail of the
Extbase felogin plugin was susceptible to HTML injection due to
missing sanitization. The variable is now passed thru the
`f:format.htmlspecialchars` ViewHelper.

Resolves: #96559
Releases: main, 11.5, 10.4
Change-Id: I60e23c161f7f2fcc87b8870345b10a4c31d7b8db
Security-Bulletin: TYPO3-CORE-SA-2022-004
Security-References: CVE-2022-31049
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/74904
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Escape user name in password reset email template

The password reset email template failed to escape the receiver's name before rendering, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting attacks via crafted user names that could execute arbitrary code in email clients or web views.
The fix applies HTML special character escaping to the receiverName argument, preventing injection of unsafe markup in the email content.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('password', 'secword', ''), ('password', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('sanitization', 'secword', ''), ('format.htmlspecialchars', 'SECWORD', ''), ('#96559', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('user name', 'secword', ''), ('password', 'secword', ''), ('password', 'secword', ''), ('escape', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
17,CWE-79,GHSA-wx69-rvg3-x7fc,"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {
 		'user.updateCover': socketUser.updateCover,
 		'groups.cover.update': socketGroup.cover.update,
 	};
-	if (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {
+	if (!socket.uid || !data || !data.chunk ||
+		!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {
 		throw new Error('[[error:invalid-data]]');
 	}
 
-	inProgress[socket.id] = inProgress[socket.id] || {};
+	inProgress[socket.id] = inProgress[socket.id] || Object.create(null);
 	const socketUploads = inProgress[socket.id];
 	const { method } = data.params;",fix: guard against prototype pollution,"vuln-fix: Prevent prototype pollution in upload method dispatch

The upload handler used a direct property check on methodToFunc without safeguarding against prototype pollution via crafted method names.
This allowed attackers to invoke unintended functions or cause application logic errors by exploiting inherited properties on Object.prototype.
The fix replaces the property check with hasOwnProperty and initializes inProgress entries with a null-prototype object to prevent prototype pollution attacks.

Weakness: CWE-1321
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('prototype pollution', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('prototype pollution', 'secword', ''), ('attackers', 'FLAW', ''), ('logic errors', 'SECWORD', ''), ('exploiting', 'SECWORD', ''), ('object.prototype', 'URL', ''), ('fix', 'ACTION', ''), ('initializes', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('prototype pollution', 'secword', ''), ('attacks', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-1321', 'CWEID', ''), ('high', 'SEVERITY', '')]"
18,CWE-79,GHSA-95hx-62rh-gg96,"@@ -317,7 +317,7 @@ public function getWidgetVariables($hookName = null, array $configuration = [])
             }
         }
         $this->contact['contacts'] = $this->getTemplateVarContact();
-        $this->contact['message'] = html_entity_decode(Tools::getValue('message'));
+        $this->contact['message'] = Tools::getValue('message');
         $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');
 
         if (!(bool)Configuration::isCatalogMode()) {
@@ -388,9 +388,10 @@ public function getTemplateVarOrders()
     {
         $orders = [];
 
-        if (!isset($this->customer_thread['id_order'])
+        if (empty($this->customer_thread['id_order'])
             && isset($this->context->customer)
-            && $this->context->customer->isLogged()) {
+            && $this->context->customer->isLogged()
+        ) {
             $customer_orders = Order::getCustomerOrders($this->context->customer->id);
 
             foreach ($customer_orders as $customer_order) {
@@ -401,7 +402,7 @@ public function getTemplateVarOrders()
                     $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();
                 }
             }
-        } elseif (isset($this->customer_thread['id_order']) && (int)$this->customer_thread['id_order'] > 0) {
+        } elseif (isset($this->customer_thread['id_order']) && (int) $this->customer_thread['id_order'] > 0) {
             $myOrder = new Order($this->customer_thread['id_order']);
 
             if (Validate::isLoadedObject($myOrder)) {
@@ -411,13 +412,13 @@ public function getTemplateVarOrders()
             }
         }
 
-        if (isset($this->customer_thread['id_product'])) {
+        if (!empty($this->customer_thread['id_product'])) {
             $id_order = isset($this->customer_thread['id_order']) ?
-                      (int)$this->customer_thread['id_order'] :
+                      (int) $this->customer_thread['id_order'] :
                       0;
 
             $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(
-                new Product((int)$this->customer_thread['id_product'])
+                new Product((int) $this->customer_thread['id_product'])
             );
         }
 
@@ -584,7 +585,7 @@ public function sendMessage()
                 $var_list = [
                     '{order_name}' => '-',
                     '{attached_file}' => '-',
-                    '{message}' => Tools::nl2br(Tools::stripslashes($message)),
+                    '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::stripslashes($message))),
                     '{email}' =>  $from,
                     '{product_name}' => '',
                 ];","Merge pull request from GHSA-95hx-62rh-gg96

Do not unescape form message data","vuln-fix: Sanitize user message input to prevent XSS in contact form

The contact form message field was not properly sanitized, allowing raw user input to be included in output without escaping, leading to potential cross-site scripting attacks.
This exposed users and administrators to malicious script injection, which could hijack sessions, deface content, or steal sensitive information.
The fix applies HTML entity encoding to the message content before rendering, ensuring that special characters are safely escaped and scripts cannot execute.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('ghsa-95hx-62rh', 'VULNID', 'GHSA'), ('unescape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('escaping', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('administrators', 'SECWORD', ''), ('malicious', 'secword', ''), ('injection', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive information', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
19,CWE-79,GHSA-82j4-vr25-x394,"@@ -304,6 +304,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
+			|| $isDangerStr($filename , "".aspx"")			
 		) {
 			return true;
 		}","Merge pull request #1629 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Block .aspx files in dangerous filename check

The filename validation function did not consider "".aspx"" extensions as dangerous, allowing potentially unsafe files to bypass security filters.
This omission could enable attackers to upload or process malicious ASP.NET pages, leading to unauthorized code execution or information disclosure.
The fix adds "".aspx"" to the list of blocked extensions, enhancing filename checks to prevent handling of risky file types.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.23529411764705882,"[('#1629', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'secword', ''), ('bypass', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('asp.net', 'URL', ''), ('code execution', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
20,CWE-79,GHSA-m52x-29pq-w3vv,"@@ -1726,7 +1726,7 @@ function createHotSpot(hs) {
         if (config.basePath && !absoluteURL(imgp))
             imgp = config.basePath + imgp;
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);
+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);
         a.target = '_blank';
         span.appendChild(a);
         var image = document.createElement('img');
@@ -1738,7 +1738,7 @@ function createHotSpot(hs) {
         span.style.maxWidth = 'initial';
     } else if (hs.URL) {
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL);
+        a.href = sanitizeURL(hs.URL, true);
         if (hs.attributes) {
             for (var key in hs.attributes) {
                 a.setAttribute(key, hs.attributes[key]);
@@ -2012,7 +2012,7 @@ function processOptions(isPreview) {
                 var authorText = escapeHTML(config[key]);
                 if (config.authorURL) {
                     var authorLink = document.createElement('a');
-                    authorLink.href = sanitizeURL(config['authorURL']);
+                    authorLink.href = sanitizeURL(config['authorURL'], true);
                     authorLink.target = '_blank';
                     authorLink.innerHTML = escapeHTML(config[key]);
                     authorText = authorLink.outerHTML;
@@ -2023,7 +2023,7 @@ function processOptions(isPreview) {
             
             case 'fallback':
                 var link = document.createElement('a');
-                link.href = sanitizeURL(config[key]);
+                link.href = sanitizeURL(config[key], true);
                 link.target = '_blank';
                 link.textContent = 'Click here to view this panorama in an alternative viewer.';
                 var message = document.createElement('p');
@@ -2389,10 +2389,17 @@ function escapeHTML(s) {
  * The URL cannot be of protocol 'javascript'.
  * @private
  * @param {string} url - URL to sanitize
+ * @param {boolean} href - True if URL is for link (blocks data URIs)
  * @returns {string} Sanitized URL
  */
-function sanitizeURL(url) {
-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {
+function sanitizeURL(url, href) {
+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||
+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {
+        console.log('Script URL removed.');
+        return 'about:blank';
+    }
+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {
+        console.log('Data URI removed from link.');
         return 'about:blank';
     }
     return url;","Merge pull request from GHSA-m52x-29pq-w3vv

Fix potential XSS vulnerability","vuln-fix: Restrict unsafe URL schemes in link sanitization

The URL sanitization function did not block dangerous schemes like ""vbscript:"" and allowed data URIs in hyperlink href attributes, enabling script injection via crafted URLs.
This posed a security risk by permitting attackers to execute arbitrary scripts or embed malicious content through manipulated links, leading to cross-site scripting (XSS) attacks.
The fix extends sanitization to reject ""vbscript:"" schemes and disallow data URIs in href contexts, replacing unsafe URLs with safe placeholders to prevent script execution.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.23529411764705882,"[('ghsa-m52x-29pq', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('manipulated', 'ACTION', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('unsafe', 'secword', ''), ('safe', 'secword', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
21,CWE-79,GHSA-xg72-6c83-ghh4,"@@ -563,17 +563,25 @@
                 }
 
             } else if ($ext === 'svg') {
-
+                $valid = false;
                 if (is_file($filePath)) {
                     $sanitizer = new \enshrined\svgSanitize\Sanitizer();
                     // Load the dirty svg
                     $dirtySVG = file_get_contents($filePath);
                      // Pass it to the sanitizer and get it back clean
-                    $cleanSVG = $sanitizer->sanitize($dirtySVG);
-                    file_put_contents($filePath, $cleanSVG);
+                    try {
+                        $cleanSVG = $sanitizer->sanitize($dirtySVG);
+                        $valid = true;
+                    } catch (\Exception $e) {
+                        $valid = false;
+                    }
+
+                    if ($valid) {
+                        file_put_contents($filePath, $cleanSVG);
+                    }
 
                 }
-               $valid = true;
+
 
             } else {
                 $valid = false;",update,"vuln-fix: Handle SVG sanitization errors to prevent unsafe file writes

The SVG sanitization process did not handle exceptions, causing potentially unsafe or unclean SVG content to be written to files when sanitization failed.
This posed a security risk by allowing malicious SVG files to bypass sanitization, potentially leading to XSS or other injection attacks via crafted SVG content.
The fix adds exception handling around the sanitizer and only writes sanitized SVG content if the process succeeds, preventing unsafe file overwrites.

Weakness: CWE-703
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('errors', 'FLAW', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('unsafe', 'secword', ''), ('sanitization', 'SECWORD', ''), ('security', 'secword', ''), ('malicious', 'secword', ''), ('bypass', 'secword', ''), ('sanitization', 'secword', ''), ('xss', 'secword', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-703', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
22,CWE-79,GHSA-hc72-vj3g-5g2g,"@@ -11,13 +11,16 @@
 using ZKEACMS.Common.Models;
 using Easy;
 using Microsoft.EntityFrameworkCore;
+using ZKEACMS.Safety;
 
 namespace ZKEACMS.Common.Service
 {
     public class NavigationService : ServiceBase<NavigationEntity, CMSDbContext>, INavigationService
     {
-        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext) : base(applicationContext, dbContext)
+        private readonly IHtmlSanitizer _htmlSanitizer;
+        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext, IHtmlSanitizer htmlSanitizer) : base(applicationContext, dbContext)
         {
+            _htmlSanitizer = htmlSanitizer;
         }
         public override DbSet<NavigationEntity> CurrentDbSet => DbContext.Navigation;
         public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
@@ -27,8 +30,34 @@ public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
                 item.ParentId = ""#"";
             }
             item.ID = Guid.NewGuid().ToString(""N"");
+            Santize(item);
             return base.Add(item);
         }
+
+        public override ServiceResult<NavigationEntity> AddRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.AddRange(items);
+        }
+
+        public override ServiceResult<NavigationEntity> Update(NavigationEntity item)
+        {
+            Santize(item);
+            return base.Update(item);
+        }
+
+        public override ServiceResult<NavigationEntity> UpdateRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.UpdateRange(items);
+        }
+
         public override void Remove(NavigationEntity item)
         {
             Remove(m => m.ParentId == item.ID);
@@ -73,5 +102,11 @@ public void Move(string id, string parentId, int position, int oldPosition)
             }
             Update(nav);
         }
+
+        private void Santize(NavigationEntity item)
+        {
+            item.Title = _htmlSanitizer.Sanitize(item.Title);
+            item.Html = _htmlSanitizer.Sanitize(item.Html);
+        }
     }
 }
\ No newline at end of file","Sanitize Html

#457","vuln-fix: Sanitize navigation entity inputs to prevent XSS

The NavigationService previously stored user-supplied HTML and titles without sanitization, allowing malicious scripts to be saved and rendered in the application.
This exposed users to cross-site scripting (XSS) attacks, risking session hijacking, data theft, or unauthorized actions through injected scripts.
The fix integrates an HTML sanitizer to clean the Title and Html fields on add and update operations, ensuring stored content is safe before persistence.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('sanitize', 'secword', ''), ('#457', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitization', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'SECWORD', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('add', 'ACTION', ''), ('update', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
23,CWE-79,GHSA-8xqr-4cpm-wx7g,"@@ -10,7 +10,7 @@ export default class ReactSVG extends React.Component {
   static defaultProps = {
     callback: () => {},
     className: null,
-    evalScripts: 'once',
+    evalScripts: 'never',
     style: {},
     wrapperClassName: null
   }",Changed default evalScripts prop to match documentation.,"vuln-fix: Disable script evaluation in ReactSVG component by default

The ReactSVG component allowed script evaluation within SVGs by default, enabling execution of potentially malicious scripts embedded in SVG content.
This posed a security risk by allowing cross-site scripting (XSS) attacks through SVG injection, compromising user data and application integrity.
The fix changes the default evalScripts property to 'never', preventing automatic script execution and mitigating XSS risks.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('changed', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('injection', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('changes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
24,CWE-79,GHSA-h3gg-7wx2-cq3h,"@@ -21,7 +21,8 @@ export default function addStickyControl() {
       if (firstPost) {
         const excerpt = truncate(firstPost.contentPlain(), 175);
 
-        items.add('excerpt', m.trust(excerpt), -100);
+        // Wrapping in <div> because ItemList entries need to be vnodes
+        items.add('excerpt', <div>{excerpt}</div>, -100);
       }
     }
   });",Fix evaluation of post content by m.trust() (#24),"vuln-fix: Prevent XSS by wrapping untrusted excerpt in vnode container

The code inserted raw HTML content directly into the item list using m.trust, allowing unescaped user input to execute scripts in the page context.
This exposed the application to cross-site scripting (XSS) attacks where malicious post content could compromise user sessions or steal data.
The fix wraps the excerpt in a safe virtual DOM <div> element, preventing untrusted content from being interpreted as executable HTML.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('m.trust', 'URL', ''), ('#24', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('untrusted', 'secword', ''), ('m.trust', 'URL', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('untrusted', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
25,CWE-79,GHSA-h6wm-mr85-4h9g,"@@ -287,7 +287,7 @@ private function userAuth()
         }
 
         $this->ipWarning();
-        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => $nick]);
+        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);
         return false;
     }","Sanitized username when showing user not found message.
------
Saneado nombre de usuario al mostrar el mensaje de usuario no encontrado.","vuln-fix: Sanitize username in login warning logs

The login warning log included unsanitized usernames, allowing injection of malicious HTML or scripts into log outputs.
This posed a risk of log injection or cross-site scripting attacks if logs were viewed in a web context without proper escaping.
The fix applies htmlspecialchars to the username before logging, ensuring special characters are safely encoded.

Weakness: CWE-117
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('sanitized', 'SECWORD', ''), ('found', 'ACTION', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('escaping', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-117', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
26,CWE-79,GHSA-pxpf-v376-7xx5,"@@ -101,7 +101,7 @@ Tagify.prototype = {
 
         _s.disabled = input.hasAttribute('disabled')
         _s.readonly = _s.readonly || input.hasAttribute('readonly')
-        _s.placeholder = input.getAttribute('placeholder') || _s.placeholder || """"
+        _s.placeholder = escapeHTML(input.getAttribute('placeholder') || _s.placeholder || """")
         _s.required = input.hasAttribute('required')
 
         for( let name in _s.classNames )",fixes #989 - fix XSS,"vuln-fix: Escape placeholder attribute to prevent XSS injection

The placeholder attribute was assigned directly from user input without escaping, allowing injection of malicious HTML or scripts into the DOM.
This exposed the application to cross-site scripting (XSS) attacks where attackers could execute arbitrary code in users’ browsers.
The fix applies HTML escaping to the placeholder value before insertion, neutralizing any embedded malicious content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fixes', 'ACTION', ''), ('#989', 'ISSUE', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
27,CWE-79,GHSA-6hjc-m38h-7jhh,"@@ -96,7 +96,7 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
             if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
                 $ext = strtolower($ext);
             }
-            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+            if ($ext === '' || $ext === 'svg' || !in_array($ext, $allowedExtensions, true)) {
                 throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
             }
             // Send the file as a stream, so it can exist anywhere",Disallow SVGs,"vuln-fix: Block SVG files to prevent unsafe file handling

The file-serving function allowed SVG files to bypass extension checks, enabling potentially dangerous file formats to be served without restriction.
This posed a security risk as SVG files can contain malicious scripts or code, leading to cross-site scripting or other client-side attacks.
The fix explicitly disallows SVG extensions by adding a direct check, preventing these files from being served and mitigating associated risks.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('security', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adding', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
28,CWE-79,GHSA-9g3v-j3cr-6fc6,"@@ -75,6 +75,10 @@ classes: 'table table-responsive table-no-bordered',
                 export: 'fa-download',
                 clearSearch: 'fa-times'
             },
+            exportOptions: {
+                htmlContent: true,
+            },
+
             exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],
             onLoadSuccess: function () {
                 $('[data-toggle=""tooltip""]').tooltip(); // Needed to attach tooltips after ajax call","Fixes possible XSS on all-file-types export

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Enable HTML content export to prevent data loss in exports

The export functionality previously omitted HTML content, causing loss of formatting and embedded data when exporting table data to various formats.
This risked data integrity and user confusion by producing incomplete or misleading exported documents lacking critical HTML-based information.
The fix enables the export option to include HTML content, ensuring that exported files retain full data fidelity and presentation as seen in the UI.

Weakness: CWE-359
Severity: Low
CVSS: 3.1",0.17647058823529413,"[('fixes', 'ACTION', ''), ('xss', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('integrity', 'secword', ''), ('critical', 'SEVERITY', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-359', 'CWEID', ''), ('low', 'SEVERITY', '')]"
29,CWE-79,GHSA-6qcc-whgp-pjj2,"@@ -79,8 +79,8 @@ pimcore.document.pages.settings = Class.create(pimcore.document.settings_abstrac
             var updateSerpPreview = function () {
 
                 var metaPanel = this.layout.getComponent(""metaDataPanel"");
-                var title = metaPanel.getComponent(""title"").getValue();
-                var description = metaPanel.getComponent(""description"").getValue();
+                var title = htmlspecialchars(metaPanel.getComponent(""title"").getValue());
+                var description = htmlspecialchars(metaPanel.getComponent(""description"").getValue());
 
                 var truncate = function( text, n ){
                     if (text.length <= n) { return text; }",escaping fields in SERP preview,"vuln-fix: Sanitize metadata fields to prevent XSS in page settings

The page settings interface did not escape user input for metadata title and description fields before rendering, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in the context of the application and compromise user data.
The fix applies htmlspecialchars encoding to metadata inputs, ensuring special characters are safely escaped before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
30,CWE-79,GHSA-4fc4-4p5g-6w89,"@@ -50,17 +50,18 @@
 		htmlFilter.addRules( createBogusAndFillerRules( editor, 'html' ), { applyToAll: true } );
 
 		editor.on( 'toHtml', function( evt ) {
-			var evtData = evt.data,
+			var randomNumber = generateRandomNumber(),
+				evtData = evt.data,
 				data = evtData.dataValue,
 				fixBodyTag;
 
 			// Before we start protecting markup, make sure there are no externally injected
 			// protection keywords.
-			data = removeReservedKeywords( data );
+			data = removeReservedKeywords( data, randomNumber );
 
 			// The source data is already HTML, but we need to clean
 			// it up and apply the filter.
-			data = protectSource( data, editor );
+			data = protectSource( data, editor, randomNumber );
 
 			// Protect content of textareas. (https://dev.ckeditor.com/ticket/9995)
 			// Do this before protecting attributes to avoid breaking:
@@ -70,7 +71,7 @@
 			// Before anything, we must protect the URL attributes as the
 			// browser may changing them when setting the innerHTML later in
 			// the code.
-			data = protectAttributes( data );
+			data = protectAttributes( data, randomNumber );
 
 			// Protect elements than can't be set inside a DIV. E.g. IE removes
 			// style tags from innerHTML. (https://dev.ckeditor.com/ticket/3710)
@@ -90,7 +91,7 @@
 
 			// There are attributes which may execute JavaScript code inside fixBin.
 			// Encode them greedily. They will be unprotected right after getting HTML from fixBin. (https://dev.ckeditor.com/ticket/10)
-			data = protectInsecureAttributes( data );
+			data = protectInsecureAttributes( data, randomNumber );
 
 			var fixBin = evtData.context || editor.editable().getName(),
 				isPre;
@@ -110,7 +111,7 @@
 			data = el.getHtml().substr( 1 );
 
 			// Restore shortly protected attribute names.
-			data = data.replace( new RegExp( 'data-cke-' + CKEDITOR.rnd + '-', 'ig' ), '' );
+			data = data.replace( new RegExp( 'data-cke-' + randomNumber + '-', 'ig' ), '' );
 
 			isPre && ( data = data.replace( /^<pre>|<\/pre>$/gi, '' ) );
 
@@ -838,13 +839,13 @@
 
 	var protectSelfClosingRegex = /<cke:(param|embed)([^>]*?)\/?>(?!\s*<\/cke:\1)/gi;
 
-	function protectAttributes( html ) {
+	function protectAttributes( html, randomNumber ) {
 		return html.replace( protectElementRegex, function( element, tag, attributes ) {
 			return '<' + tag + attributes.replace( protectAttributeRegex, function( fullAttr, attrName ) {
 				// Avoid corrupting the inline event attributes (https://dev.ckeditor.com/ticket/7243).
 				// We should not rewrite the existed protected attributes, e.g. clipboard content from editor. (https://dev.ckeditor.com/ticket/5218)
 				if ( protectAttributeNameRegex.test( attrName ) && attributes.indexOf( 'data-cke-saved-' + attrName ) == -1 )
-					return ' data-cke-saved-' + fullAttr + ' data-cke-' + CKEDITOR.rnd + '-' + fullAttr;
+					return ' data-cke-saved-' + fullAttr + ' data-cke-' + randomNumber + '-' + fullAttr;
 
 				return fullAttr;
 			} ) + '>';
@@ -897,8 +898,8 @@
 	// * opening tags - e.g. `<onfoo`,
 	// * closing tags - e.g. </onfoo> (tested in ""false positive 1""),
 	// * part of other attribute - e.g. `data-onfoo` or `fonfoo`.
-	function protectInsecureAttributes( html ) {
-		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + CKEDITOR.rnd + '-$2' );
+	function protectInsecureAttributes( html, randomNumber ) {
+		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + randomNumber + '-$2' );
 	}
 
 	function unprotectRealComments( html ) {
@@ -917,11 +918,11 @@
 		} );
 	}
 
-	function protectSource( data, editor ) {
+	function protectSource( data, editor, randomNumber ) {
 		var protectedHtml = [],
 			protectRegexes = editor.config.protectedSource,
 			store = editor._.dataStore || ( editor._.dataStore = { id: 1 } ),
-			tempRegex = /<\!--\{cke_temp(comment)?\}(\d*?)-->/g;
+			tempRegex = new RegExp('<\\!--\\{cke_temp_' + randomNumber + '(comment)?\\}(\\d*?)-->', 'g' );
 
 		var regexes = [
 			// Script tags will also be forced to be protected, otherwise
@@ -940,7 +941,7 @@
 		// Note that we use a different tag for comments, as we need to
 		// transform them when applying filters.
 		data = data.replace( ( /<!--[\s\S]*?-->/g ), function( match ) {
-			return '<!--{cke_tempcomment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+			return '<!--{cke_temp_' + randomNumber + 'comment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
 		} );
 
 		for ( var i = 0; i < regexes.length; i++ ) {
@@ -951,7 +952,8 @@
 				} );
 
 				// Avoid protecting over protected, e.g. /\{.*?\}/
-				return ( /cke_temp(comment)?/ ).test( match ) ? match : '<!--{cke_temp}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+				return ( tempRegex ).test( match ) ? match : '<!--{cke_temp_' + randomNumber + '}' +
+					( protectedHtml.push( match ) - 1 ) + '-->';
 			} );
 		}
 		data = data.replace( tempRegex, function( $, isComment, id ) {
@@ -1107,6 +1109,16 @@
 			};
 		}
 	} )();
+
+	function generateRandomNumber() {
+		var cryptoApi = window.crypto || window.msCrypto;
+
+		if ( cryptoApi ) {
+			return cryptoApi.getRandomValues( new Uint32Array( 1 ) )[ 0 ];
+		}
+
+		return Math.floor( Math.random() *  9000000000 + 1000000000 );
+	}
 } )();
 
 /**",Code refactoring.,"vuln-fix: Use per-instance random tokens to prevent attribute collision

The HTML protection logic reused a global static token for attribute masking, causing potential collisions and predictable attribute names across instances.
This allowed attackers to craft payloads that could bypass protections by guessing or interfering with the static token, risking cross-site scripting or DOM corruption.
The fix generates a unique random number per instance to namespace protected attributes, preventing collisions and improving the robustness of attribute protection.

Weakness: CWE-330
Severity: Medium
CVSS: 5.0",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('collision', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('collisions', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('protections', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('fix', 'ACTION', ''), ('protected', 'ACTION', ''), ('preventing', 'ACTION', ''), ('collisions', 'SECWORD', ''), ('improving', 'ACTION', ''), ('protection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-330', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
31,CWE-79,GHSA-fp76-f299-v3hj,"@@ -127,8 +127,7 @@ public function getFile(): bool
         $allowedFolders = ['node_modules', 'vendor', 'Dinamic', 'Core', 'Plugins', 'MyFiles/Public'];
         foreach ($allowedFolders as $folder) {
             if ('/' . $folder === substr($uri, 0, 1 + strlen($folder))) {
-                header('Content-Type: ' . $this->getMime($filePath));
-                readfile($filePath);
+                $this->download($filePath);
                 return true;
             }
         }
@@ -137,14 +136,7 @@ public function getFile(): bool
         $token = filter_input(INPUT_GET, 'myft');
         $fixedFilePath = substr(urldecode($uri), 1);
         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {
-            header('Content-Type: ' . $this->getMime($filePath));
-
-            // disable the buffer if enabled
-            if (ob_get_contents()) {
-                ob_end_flush();
-            }
-
-            readfile($filePath);
+            $this->download($filePath);
             return true;
         }
 
@@ -205,6 +197,23 @@ private function deploy()
         }
     }
 
+    private function download(string $filePath)
+    {
+        header('Content-Type: ' . $this->getMime($filePath));
+
+        // disable the buffer if enabled
+        if (ob_get_contents()) {
+            ob_end_flush();
+        }
+
+        // force to download svg files to prevent XSS attacks
+        if (strpos($filePath, '.svg') !== false) {
+            header('Content-Disposition: attachment; filename=""' . basename($filePath) . '""');
+        }
+
+        readfile($filePath);
+    }
+
     /**
      * Return the mime type from given file.
      *","Force to download SVG files to prevent security problems.
------
Forzamos a descargar los archivos SVG para evitar problemas de seguridad.","vuln-fix: Force download of SVG files to prevent XSS attacks

The file serving code did not enforce download disposition for SVG files, allowing them to be rendered inline and potentially execute malicious scripts in users' browsers.
This exposed users to cross-site scripting (XSS) risks by enabling attackers to deliver crafted SVG content that could run arbitrary code when viewed.
The fix centralizes file delivery and adds a content-disposition header to force SVG files to download, mitigating inline script execution.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('prevent', 'ACTION', ''), ('security', 'secword', ''), ('problems', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
32,CWE-79,GHSA-mxvc-fwgx-j778,"@@ -16,7 +16,7 @@
 <div>
     <h1>Error</h1>
     <p>
-        {{ error_message|safe }}
+        {{ error_message }}
     </p>
     <hr>
     <p>","Render error message w/o `safe` filter

The error message shown in the error template does not need to be
rendered using the safe filter, and furthermore opens up an XSS
vulnerability.","vuln-fix: Remove unsafe HTML rendering in error messages

The error display template rendered user-supplied error messages with the 'safe' filter, allowing unescaped HTML content to be injected into the page.
This created a cross-site scripting (XSS) vulnerability where attackers could execute arbitrary scripts in users' browsers by crafting malicious error messages.
The fix removes the 'safe' filter to ensure error messages are properly escaped before rendering, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.23529411764705882,"[('error', 'FLAW', ''), ('safe', 'secword', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('error', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('safe', 'secword', ''), ('ensure', 'ACTION', ''), ('error', 'FLAW', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
33,CWE-79,GHSA-c65v-p733-9796,"@@ -93,15 +93,15 @@ public function transformAsset(Asset $asset)
                     $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin/custom_fields/general.encrypted'));
 
                     $fields_array[$field->name] = [
-                            'field' => $field->convertUnicodeDbSlug(),
-                            'value' => $value,
+                            'field' => e($field->convertUnicodeDbSlug()),
+                            'value' => e($value),
                             'field_format' => $field->format,
                         ];
 
                 } else {
                     $fields_array[$field->name] = [
-                        'field' => $field->convertUnicodeDbSlug(),
-                        'value' => $asset->{$field->convertUnicodeDbSlug()},
+                        'field' => e($field->convertUnicodeDbSlug()),
+                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),
                         'field_format' => $field->format,
                     ];
 
@@ -134,7 +134,7 @@ public function transformAsset(Asset $asset)
                         
                             'id' => $component->id,
                             'pivot_id' => $component->pivot->id,
-                            'name' => $component->name,
+                            'name' => e($component->name),
                             'qty' => $component->pivot->assigned_qty,
                             'price_cost' => $component->purchase_cost,
                             'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,","Merge pull request #10315 from snipe/fixes/escape_custom_fields_in_api_response

Escape custom field values in API response","vuln-fix: Escape output to prevent stored XSS in asset transformation

The asset transformation function failed to escape user-controlled data before rendering, allowing malicious input to be stored and later executed in the browser.
This exposed the application to stored cross-site scripting attacks, risking session hijacking, defacement, or unauthorized actions by attackers.
The fix applies proper HTML escaping to all dynamic fields and values before output, ensuring unsafe characters are neutralized.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('#10315', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('escape_custom_fields_in_api_response', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('asset', 'secword', ''), ('asset', 'secword', ''), ('escape', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('hijacking', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
34,CWE-79,GHSA-m8rp-q82r-c5mf,"@@ -91,7 +91,6 @@
             <hr class=""thin"" />
             <div class=""row"">
 
-
                 <?php
                 $iformVr=0;
                 foreach ($form_values_formated as $form_values_row) {
@@ -106,12 +105,12 @@
                             <?php if (!is_array($val1)){ ?>
                                 <div>
                                     <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
-                                    <p><?php print $val1; ?></p>
+                                    <p><?php print htmlentities($val1); ?></p>
                                 </div>
                             <?php } else { ?>
                                 <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
                                 <?php foreach ($val1 as $val1_1){ ?>
-                                    <p><?php print $val1_1 . '<br />'; ?></p>
+                                    <p><?php print htmlentities($val1_1) . '<br />'; ?></p>
                                 <?php }?>
                             <?php } ?>
                         <?php } ?>",xss on contact form fix,"vuln-fix: Encode output to prevent cross-site scripting in form display

The form display code directly printed user-submitted values without encoding, allowing injection of malicious HTML or JavaScript into the page.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in victims’ browsers and steal sensitive data or hijack sessions.
The fix applies htmlentities to all printed form values, ensuring special characters are safely encoded and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('xss', 'secword', ''), ('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
35,CWE-79,GHSA-3j58-p785-f27x,"@@ -17,9 +17,6 @@
 class ApiController  extends FrontendController
 {
 
-
-
-
     public function api_html()
     {
         if (!defined('MW_API_HTML_OUTPUT')) {
@@ -609,12 +606,14 @@ public function module()
 
         $request_data = array_merge($_GET, $_POST);
 
-
         // sanitize attributes
         if($request_data){
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
+
+                $v = $antixss->xss_clean($v);
+
                 if(is_string($k)){
                     $k = $antixss->xss_clean($k);
                     if($k){
@@ -623,6 +622,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
+                
             }
             $request_data = $request_data_new;
         }",fix xss on module api call in value parameters,"vuln-fix: Sanitize all request data keys and values to prevent XSS

The API controller previously sanitized only request data keys but failed to sanitize the corresponding values, allowing malicious scripts to be processed and stored.
This exposed the application to cross-site scripting attacks where attackers could inject executable code via unsanitized input values.
The fix applies XSS cleaning to both keys and values of all request parameters, ensuring comprehensive input sanitization before further processing.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('unsanitized', 'SECWORD', ''), ('fix', 'ACTION', ''), ('xss', 'secword', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
36,CWE-79,GHSA-7c82-mp33-r854,"@@ -1,6 +1,128 @@
 (function ($) {
   'use strict';
 
+  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
+
+  var uriAttrs = [
+    'background',
+    'cite',
+    'href',
+    'itemtype',
+    'longdesc',
+    'poster',
+    'src',
+    'xlink:href'
+  ];
+
+  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
+
+  var DefaultWhitelist = {
+    // Global attributes allowed on any supplied element below.
+    '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
+    a: ['target', 'href', 'title', 'rel'],
+    area: [],
+    b: [],
+    br: [],
+    col: [],
+    code: [],
+    div: [],
+    em: [],
+    hr: [],
+    h1: [],
+    h2: [],
+    h3: [],
+    h4: [],
+    h5: [],
+    h6: [],
+    i: [],
+    img: ['src', 'alt', 'title', 'width', 'height'],
+    li: [],
+    ol: [],
+    p: [],
+    pre: [],
+    s: [],
+    small: [],
+    span: [],
+    sub: [],
+    sup: [],
+    strong: [],
+    u: [],
+    ul: []
+  }
+
+  /**
+   * A pattern that recognizes a commonly useful subset of URLs that are safe.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
+
+  /**
+   * A pattern that matches safe data URLs. Only matches image, video and audio types.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
+
+  function allowedAttribute (attr, allowedAttributeList) {
+    var attrName = attr.nodeName.toLowerCase()
+
+    if ($.inArray(attrName, allowedAttributeList) !== -1) {
+      if ($.inArray(attrName, uriAttrs) !== -1) {
+        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
+      }
+
+      return true
+    }
+
+    var regExp = $(allowedAttributeList).filter(function (index, value) {
+      return value instanceof RegExp
+    })
+
+    // Check if a regular expression validates the attribute.
+    for (var i = 0, l = regExp.length; i < l; i++) {
+      if (attrName.match(regExp[i])) {
+        return true
+      }
+    }
+
+    return false
+  }
+
+  function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
+    if (sanitizeFn && typeof sanitizeFn === 'function') {
+      return sanitizeFn(unsafeElements);
+    }
+
+    var whitelistKeys = Object.keys(whiteList);
+
+    for (var i = 0, len = unsafeElements.length; i < len; i++) {
+      var elements = unsafeElements[i].querySelectorAll('*');
+
+      for (var j = 0, len2 = elements.length; j < len2; j++) {
+        var el = elements[j];
+        var elName = el.nodeName.toLowerCase();
+
+        if (whitelistKeys.indexOf(elName) === -1) {
+          el.parentNode.removeChild(el);
+
+          continue;
+        }
+
+        var attributeList = [].slice.call(el.attributes);
+        var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
+
+        for (var k = 0, len3 = attributeList.length; k < len3; k++) {
+          var attr = attributeList[k];
+
+          if (!allowedAttribute(attr, whitelistedAttributes)) {
+            el.removeAttribute(attr.nodeName);
+          }
+        }
+      }
+    }
+  }
+
   // Polyfill for browsers with no classList support
   // Remove in v2
   if (!('classList' in document.createElement('_'))) {
@@ -745,7 +867,10 @@
     dropdownAlignRight: false,
     windowPadding: 0,
     virtualScroll: 600,
-    display: false
+    display: false,
+    sanitize: true,
+    sanitizeFn: null,
+    whiteList: DefaultWhitelist
   };
 
   if (version.major === '4') {
@@ -1100,13 +1225,35 @@
                 emptyMenu = menuInner.firstChild.cloneNode(false),
                 marginTop,
                 marginBottom,
-                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements;
+                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements,
+                toSanitize = [];
 
             // replace the existing UL with an empty one - this is faster than $.empty()
             menuInner.replaceChild(emptyMenu, menuInner.firstChild);
 
             for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
-              menuFragment.appendChild(elements[i]);
+              var element = elements[i],
+                  elText,
+                  elementData;
+
+              if (that.options.sanitize) {
+                elText = element.lastChild;
+
+                if (elText) {
+                  elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0].data;
+
+                  if (elementData && elementData.content && !elementData.sanitized) {
+                    toSanitize.push(elText);
+                    elementData.sanitized = true;
+                  }
+                }
+              }
+
+              menuFragment.appendChild(element);
+            }
+
+            if (that.options.sanitize && toSanitize.length) {
+              sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);
             }
 
             if (isVirtual === true) {
@@ -1469,7 +1616,8 @@
           multipleSeparator = document.createTextNode(this.options.multipleSeparator),
           titleFragment = elementTemplates.fragment.cloneNode(false),
           showCount,
-          countMax;
+          countMax,
+          hasContent = false;
 
       this.togglePlaceholder();
 
@@ -1506,6 +1654,7 @@
                 titleOptions.text = option.title;
               } else if (thisData.content && that.options.showContent) {
                 titleOptions.optionContent = thisData.content.toString();
+                hasContent = true;
               } else {
                 if (that.options.showIcon) {
                   titleOptions.optionIcon = thisData.icon;
@@ -1554,6 +1703,10 @@
       // strip all HTML tags and trim the result, then unescape any escaped tags
       this.$button[0].title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();
 
+      if (this.options.sanitize && hasContent) {
+        sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);
+      }
+
       buttonInner.innerHTML = '';
       buttonInner.appendChild(titleFragment);
 
@@ -2833,8 +2986,16 @@
             options = typeof _option == 'object' && _option;
 
         if (!data) {
-          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);
-          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);
+          var dataAttributes = $this.data();
+
+          for (var dataAttr in dataAttributes) {
+            if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
+              delete dataAttributes[dataAttr];
+            }
+          }
+
+          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);
+          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
           $this.data('selectpicker', (data = new Selectpicker(this, config)));
         } else if (options) {
           for (var i in options) {",add sanitize option for data-content (#2199),"vuln-fix: Sanitize HTML input to prevent XSS in selectpicker

The selectpicker component did not properly sanitize HTML content or user-supplied configuration, allowing injection of malicious scripts via unsafe attributes or element content.
This exposed applications to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise user data or session integrity.
The fix adds a robust HTML sanitizer with a strict whitelist, validates URLs in attributes, and removes disallowed config options to ensure only safe content is rendered.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('#2199', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitize', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
37,CWE-79,GHSA-x7r7-wmj8-vv5g,"@@ -8,6 +8,7 @@
 import os
 import re
 from collections import defaultdict
+from urllib.parse import urlparse
 
 from flask import (
     Response,
@@ -170,7 +171,16 @@ def _add_additional_assets(hook):
 def login():
     from flask_login import current_user
 
-    redirect_url = request.args.get(""redirect"", request.script_root + url_for(""index""))
+    default_redirect_url = request.script_root + url_for(""index"")
+    redirect_url = request.args.get(""redirect"", default_redirect_url)
+
+    parsed = urlparse(redirect_url)  # check if redirect url is valid
+    if parsed.scheme != """" or parsed.netloc != """":
+        _logger.warning(
+            f""Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}""
+        )
+        redirect_url = default_redirect_url
+
     permissions = sorted(
         filter(
             lambda x: x is not None and isinstance(x, OctoPrintPermission),","🔒️ Sanitize and validate login redirect

Fixes an XSS and an open redirect issue.","vuln-fix: Validate redirect URL to prevent open redirect attacks

The login endpoint accepted arbitrary redirect URLs without validation, allowing attackers to craft URLs that redirect users to malicious external sites.
This posed a security risk by enabling phishing attacks and unauthorized redirection to untrusted domains after login.
The fix parses and validates the redirect URL, rejecting any with a scheme or network location, and defaults to a safe internal URL instead.

Weakness: CWE-601
Severity: High
CVSS: 7.5",0.11764705882352941,"[('sanitize', 'secword', ''), ('validate', 'secword', ''), ('login', 'secword', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('open redirect', 'secword', ''), ('attacks', 'FLAW', ''), ('login', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('phishing', 'secword', ''), ('attacks', 'FLAW', ''), ('untrusted', 'secword', ''), ('login', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('high', 'SEVERITY', '')]"
38,CWE-79,GHSA-2cqg-q7jm-j35c,"@@ -910,7 +910,7 @@ public function audit(Request $request) {
             }
         }
 
-        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.$request->input('asset_tag').' not found'));
+        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.e($request->input('asset_tag')).' not found'));","Merge pull request #10286 from uberbrady/fix_bulk_audit_xss

Escape asset_tag attribute at controller level for bulk checkout","vuln-fix: Escape user input in error message to prevent XSS

The error response included raw user input in the message without proper escaping, allowing injection of malicious scripts in JSON responses.
This exposed the application to cross-site scripting (XSS) attacks where attackers could execute arbitrary JavaScript in users’ browsers.
The fix applies escaping to the user-supplied asset tag before including it in the error message, ensuring safe output rendering.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('#10286', 'ISSUE', ''), ('fix_bulk_audit_xss', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('asset', 'secword', ''), ('error', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
39,CWE-79,GHSA-mg5h-9rhq-4cqx,"@@ -300,6 +300,7 @@ public function isDangerFilename($filename){
 			 $isDangerStr($filename , "".php"")
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
+			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 		) {",file upload bug,"vuln-fix: Extend dangerous filename check to include .shtm extension

The filename validation function omitted the "".shtm"" extension from its list of dangerous file types, allowing potentially harmful files to bypass security filters.
This omission could enable attackers to upload or execute malicious scripts disguised with the "".shtm"" extension, risking unauthorized code execution or data exposure.
The fix adds "".shtm"" to the dangerous filename checks, ensuring consistent blocking of risky file types and preventing exploitation via this extension.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('code execution', 'SECWORD', ''), ('data exposure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('exploitation', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
40,"CWE-89', 'CWE-79",GHSA-x92h-wmg2-6hp7,"@@ -1346,22 +1346,37 @@ public function setMethod($method)
      */
     public function getMethod()
     {
-        if (null === $this->method) {
-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
-
-            if ('POST' === $this->method) {
-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
-                    $this->method = strtoupper($method);
-                } elseif (self::$httpMethodParameterOverride) {
-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
-                    if (\is_string($method)) {
-                        $this->method = strtoupper($method);
-                    }
-                }
-            }
+        if (null !== $this->method) {
+            return $this->method;
+        }
+
+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
+
+        if ('POST' !== $this->method) {
+            return $this->method;
+        }
+
+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');
+
+        if (!$method && self::$httpMethodParameterOverride) {
+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
+        }
+
+        if (!\is_string($method)) {
+            return $this->method;
+        }
+
+        $method = strtoupper($method);
+
+        if (\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
+            return $this->method = $method;
+        }
+
+        if (!preg_match('/^[A-Z]++$/D', $method)) {
+            throw new SuspiciousOperationException(sprintf('Invalid method override ""%s"".', $method));
         }
 
-        return $this->method;
+        return $this->method = $method;
     }
 
     /**",[HttpFoundation] reject invalid method override,"vuln-fix: Validate HTTP method override to prevent injection

The HTTP method override feature accepted arbitrary strings without strict validation, allowing attackers to inject invalid or malicious HTTP methods.
This posed a security risk by enabling crafted requests that could bypass routing logic or trigger unexpected server behavior.
The fix enforces a whitelist of allowed HTTP methods and rejects invalid overrides with an exception, ensuring only valid methods are accepted.

Weakness: CWE-20
Severity: High
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('security', 'secword', ''), ('bypass', 'secword', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
41,CWE-79,GHSA-54qq-9chj-rxhv,"@@ -12,7 +12,7 @@
 
 ?>
 <li class=""nav-item dropleft"">
-    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false""><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
+    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false"" ng-non-bindable><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
     <div class=""dropdown-menu"" style=""min-width: 25rem;"" role=""menu"">
 
         <div class=""row"">",Escape in user box,"vuln-fix: Prevent XSS by disabling AngularJS binding in user name display

The user name and surname were output inside an AngularJS-enabled element without disabling binding, allowing injection of malicious AngularJS expressions.
This exposed the application to cross-site scripting attacks where attackers could execute arbitrary scripts in users’ browsers via crafted names.
The fix adds the ng-non-bindable attribute to disable AngularJS interpolation and prevent execution of injected expressions in the user name display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('user name', 'secword', ''), ('user name', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('user name', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
42,CWE-79,GHSA-mrvj-7q4f-5p42,"@@ -89,6 +89,16 @@ parameters:
         - pht
         - phtml
         - pgif
+        - hta
+        - htm
+        - html
+        - xhtm
+        - xhtml
+        - jar
+        - js
+        - jse
+        - svg
+        - swf
 
     # Content settings
     ezsettings.default.content.view_cache: true         # Whether to use content view cache or not (Etag/Last-Modified based)","Merge pull request from GHSA-mrvj-7q4f-5p42

Co-authored-by: Gunnstein Lye <gunnstein.lye@ibexa.co>","vuln-fix: Expand allowed file extensions to prevent unsafe content execution

The application previously restricted certain file extensions, potentially allowing unsafe or executable content to be served without proper handling.
This posed a security risk by enabling attackers to upload or serve malicious files that could execute scripts or active content in users’ browsers.
The fix adds additional safe and commonly used extensions to the allowed list, reducing the chance of serving dangerous file types inadvertently.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.17647058823529413,"[('ghsa', 'VULNID', 'GHSA'), ('gunnstein.lye@ibexa.co', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
43,CWE-79,GHSA-jq4v-f5q6-mjqq,"@@ -23,6 +23,8 @@
     'usemap',
     # Not standard:
     'dynsrc', 'lowsrc',
+    # HTML5 formaction
+    'formaction'
     ])
 
 # Not in the HTML 4 spec:",Add formaction attribute to defs.link_attrs,"vuln-fix: Add formaction attribute to allowed URL attributes whitelist

The sanitizer omitted the HTML5 'formaction' attribute from its list of URL attributes, allowing potentially unsafe URLs to bypass filtering.
This omission could enable attackers to inject malicious form submission targets, leading to phishing or cross-site request forgery attacks.
The fix adds 'formaction' to the whitelist, ensuring proper sanitization and blocking of unsafe URLs in form actions.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('add', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('sanitizer', 'secword', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('phishing', 'secword', ''), ('cross-site request forgery', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('sanitization', 'secword', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
44,CWE-79,GHSA-8x44-pwr2-rgc6,"@@ -119,7 +119,7 @@ public function getTreeAction(Request $request)
                 'id' => $class->getId(),
                 'text' => $text,
                 'leaf' => true,
-                'icon' => $class->getIcon() ? $class->getIcon() : $defaultIcon,
+                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,
                 'cls' => 'pimcore_class_icon',
                 'propertyVisibility' => $class->getPropertyVisibility(),
                 'enableGridLocking' => $class->isEnableGridLocking(),",added escape function to the icon field,"vuln-fix: Sanitize icon field to prevent XSS in tree view

The icon field in the tree view was output without escaping, allowing injection of malicious HTML or JavaScript code via crafted icon values.
This exposed users to cross-site scripting (XSS) attacks, potentially leading to session hijacking or unauthorized actions within the application.
The fix applies htmlspecialchars to the icon value, ensuring special characters are escaped and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('added', 'ACTION', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
45,CWE-79,GHSA-3j9m-hcv9-rpj8,"@@ -1,6 +1,6 @@
 import React from 'react';
 import { css } from '@emotion/css';
-import { GrafanaTheme2 } from '@grafana/data';
+import { GrafanaTheme2, textUtil } from '@grafana/data';
 import { Icon, IconName, Link, useTheme2 } from '@grafana/ui';
 
 export interface Props {
@@ -29,13 +29,15 @@ const DropdownChild = ({ isDivider = false, icon, onClick, target, text, url }:
     </button>
   );
   if (url) {
+    const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url);
+
     element =
       !target && url.startsWith('/') ? (
-        <Link className={styles.element} onClick={onClick} href={url}>
+        <Link className={styles.element} onClick={onClick} href={sanitizedUrl}>
           {linkContent}
         </Link>
       ) : (
-        <a className={styles.element} href={url} target={target} rel=""noopener"" onClick={onClick}>
+        <a className={styles.element} href={sanitizedUrl} target={target} rel=""noopener"" onClick={onClick}>
           {linkContent}
         </a>
       );","Merge pull request #147 from grafana/axelav/sanitized-nav-links-8-2-3

Sanitized NavBar children links to remove angular interpolation v8.2.3","vuln-fix: Sanitize URLs to prevent AngularJS expression injection

The dropdown component failed to sanitize URLs containing AngularJS interpolation syntax, allowing injection of malicious expressions in link href attributes.
This posed a security risk by enabling attackers to execute arbitrary AngularJS code in the application context, leading to cross-site scripting (XSS) attacks.
The fix applies textUtil.sanitizeAngularInterpolation to URLs before rendering, neutralizing dangerous AngularJS expressions and preventing code injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('#147', 'ISSUE', ''), ('sanitized', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('remove', 'ACTION', ''), ('v8.2.3', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitize', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('textutil.sanitizeangularinterpolation', 'URL', ''), ('preventing', 'ACTION', ''), ('code injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
46,CWE-79,GHSA-wg4r-q74r-p7c8,"@@ -305,6 +305,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
 			|| $isDangerStr($filename , "".asp"")			
+			|| $isDangerStr($filename , "".xsl"")
 		) {
 			return true;
 		}","Merge pull request #1630 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Extend dangerous filename check to include .xsl files

The filename validation function did not consider .xsl files as dangerous, allowing potentially unsafe XML stylesheet files to bypass security checks.
This omission could enable attackers to upload or process malicious .xsl files, leading to XML external entity (XXE) attacks or unauthorized code execution.
The fix adds .xsl to the list of disallowed extensions, strengthening input validation against risky file types.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.23529411764705882,"[('#1630', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'secword', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'secword', ''), ('attacks', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
47,CWE-79,GHSA-4p92-fv6v-fhfj,"similarity index 100%
rename from .github/workflows/templates.yml.backup
rename to .github/workflows/templates.yml",update,"vuln-fix: Remove backup file from GitHub workflows directory

The repository contained a backup copy of a GitHub Actions workflow file, potentially exposing sensitive workflow configurations or secrets unintentionally.
This posed a security risk by leaking internal CI/CD pipeline details that attackers could exploit to compromise build or deployment processes.
The fix removes the backup file from the workflows directory to prevent accidental exposure of sensitive automation configurations.

Weakness: CWE-200
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('exploit', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
48,CWE-79,GHSA-mq35-wqvf-r23c,"@@ -78,7 +78,7 @@ def unlink?
     def params
       super
     rescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError => e
-      raise BadRequest, ""Invalid query parameters: #{e.message}""
+      raise BadRequest, ""Invalid query parameters: #{Rack::Utils.escape_html(e.message)}""
     end
 
     private","escape invalid query params, fixes #1428","vuln-fix: Escape error messages to prevent XSS in query parameter errors

The application raised exceptions with unsanitized error messages directly included in HTTP responses when query parameter parsing failed.
This allowed attackers to inject malicious HTML or JavaScript via crafted query parameters, leading to cross-site scripting (XSS) attacks.
The fix escapes error message content using HTML escaping before including it in the response, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('escape', 'secword', ''), ('fixes', 'ACTION', ''), ('#1428', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('errors', 'FLAW', ''), ('unsanitized', 'SECWORD', ''), ('error', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
49,CWE-79,GHSA-p885-prv3-m4xv,"@@ -30,11 +30,11 @@ public function requestedAssets()
             // Make sure the asset and request still exist
             if ($checkoutRequest && $checkoutRequest->itemRequested()) {
                 $results['rows'][] = [
-                    'image' => $checkoutRequest->itemRequested()->present()->getImageUrl(),
-                    'name' => $checkoutRequest->itemRequested()->present()->name(),
-                    'type' => $checkoutRequest->itemType(),
-                    'qty' => $checkoutRequest->quantity,
-                    'location' => ($checkoutRequest->location()) ? $checkoutRequest->location()->name : null,
+                    'image' => e($checkoutRequest->itemRequested()->present()->getImageUrl()),
+                    'name' => e($checkoutRequest->itemRequested()->present()->name()),
+                    'type' => e($checkoutRequest->itemType()),
+                    'qty' => (int) $checkoutRequest->quantity,
+                    'location' => ($checkoutRequest->location()) ? e($checkoutRequest->location()->name) : null,
                     'expected_checkin' => Helper::getFormattedDateObject($checkoutRequest->itemRequested()->expected_checkin, 'datetime'),
                     'request_date' => Helper::getFormattedDateObject($checkoutRequest->created_at, 'datetime'),
                 ];","Merge pull request #10942 from snipe/fixes/xss_user_requested

Fixes potential XSS vuln in user requestable results","vuln-fix: Escape output to prevent XSS in asset requests

The asset request response rendered unescaped user-controllable data fields directly into the output, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and hijack sessions or steal data.
The fix applies proper escaping to all output fields and casts quantities to integers, ensuring safe rendering of dynamic content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('#10942', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_user_requested', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('asset', 'secword', ''), ('asset', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
50,CWE-79,GHSA-7vvq-7r29-5vg3,"@@ -498,7 +498,7 @@ <h1><a href=""https://threejs.org"">three.js</a></h1>
 			const oldIframe = iframe;
 			iframe = oldIframe.cloneNode();
 
-			if ( hash ) {
+			if ( hash && titles[ splitHash[ 0 ] ] ) {
 
 				iframe.src = splitHash[ 0 ] + '.html' + splitHash[ 1 ];
 				subtitle = titles[ splitHash[ 0 ] ] + splitHash[ 1 ] + ' – ';",Only load trusted iframe (#23245),"vuln-fix: Validate hash keys before iframe source assignment

The code assigned iframe sources based on unvalidated hash keys, allowing injection of arbitrary URLs if the hash contained unexpected values.
This posed a security risk by enabling attackers to load malicious or unintended content into iframes, potentially leading to phishing or content spoofing.
The fix adds a check to ensure the hash key exists in the allowed titles list before setting the iframe source, preventing unauthorized URL injection.

Weakness: CWE-601
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('#23245', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('hash', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'secword', ''), ('phishing', 'secword', ''), ('spoofing', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('hash', 'secword', ''), ('key', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
51,CWE-79,GHSA-72p5-2r6g-fm6v,"@@ -559,7 +559,7 @@ COMPONENT('grid', 'filter:true;external:false;fillcount:50;filterlabel:Filtering
 			for (var j = 0, jl = columns.length; j < jl; j++) {
 				var column = columns[j];
 				var val = items[i][column.name];
-				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : (column.format ? val.format(column.format) : val);
+				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : Thelpers.encode((column.format ? val.format(column.format) : val));
 				m.index = j;
 				m.align = column.align;
 				m.background = column.background;",Fixed XSS.,"vuln-fix: Encode grid cell output to prevent XSS injection

The grid component rendered cell values without proper encoding, allowing malicious content to be injected and executed in the browser context.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary scripts by injecting crafted data into grid cells.
The fix applies HTML encoding to formatted cell values, ensuring that any potentially dangerous characters are safely escaped before rendering.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'secword', ''), ('encoding', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
52,CWE-79,GHSA-q67f-3jq4-mww2,"@@ -568,10 +568,11 @@ pimcore.element.properties = Class.create({
 
     addSetFromUserDefined: function (customKey, customType) {
         try {
-            if (in_array(customKey.getValue(), this.disallowedKeys)) {
+            let key = htmlspecialchars(customKey.getValue());
+            if (in_array(key, this.disallowedKeys)) {
                 Ext.MessageBox.alert(t(""error""), t(""name_is_not_allowed""));
             }
-            this.add(customKey.getValue(), customType.getValue(), false, false, false, true);
+            this.add(key, customType.getValue(), false, false, false, true);
         } catch (e) {
             console.log(e);
         }",escaping 'key' custom property field in elements,"vuln-fix: Sanitize user-defined keys to prevent injection attacks

User-defined keys were used directly without sanitization, allowing injection of malicious input that could manipulate UI or backend behavior.
This posed a security risk by enabling cross-site scripting or other injection attacks through crafted property names.
The fix applies HTML escaping to user keys before validation and usage, ensuring harmful characters are neutralized.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('escaping', 'secword', ''), ('key', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('keys', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
53,CWE-79,GHSA-jr37-66pj-36v7,"@@ -82,7 +82,7 @@ public function anyData()
             })
             ->addColumn('view', function ($tasks) {
                 return '<a href=""' . route(""tasks.show"", $tasks->external_id) . '"" class=""btn btn-link"">' . __('View') .'</a>'
-                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-title=""'. $tasks->title . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
+                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
                 ;
             })
             ->rawColumns(['titlelink','view', 'status_id'])",fix xss for tasks index,"vuln-fix: Remove unescaped user input from HTML attributes

The code included user-supplied task titles directly in HTML attributes without escaping, allowing injection of arbitrary HTML or JavaScript.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute malicious scripts in users’ browsers.
The fix removes the unsafe inclusion of task titles in HTML attributes, preventing injection of untrusted content into the DOM.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('unescaped', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('untrusted', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
54,CWE-79,GHSA-9w7h-3wwh-6m5q,"@@ -611,10 +611,15 @@ public function module()
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
-
+                if(is_string($v)) {
+                    $v = str_replace('<', '-', $v);
+                    $v = str_replace('>', '-', $v);
+                }
                 $v = $antixss->xss_clean($v);
 
                 if(is_string($k)){
+                    $k = str_replace('<', '-', $k);
+                    $k = str_replace('>', '-', $k);
                     $k = $antixss->xss_clean($k);
                     if($k){
                         $request_data_new[$k] = $v;
@@ -622,7 +627,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
-                
+
             }
             $request_data = $request_data_new;
         }",update,"vuln-fix: Sanitize angle brackets in request data keys and values

The application failed to sanitize angle bracket characters in both keys and string values of incoming request data, allowing potential injection of HTML or script tags.
This exposed the system to cross-site scripting (XSS) attacks where malicious payloads could be embedded and executed in the client context.
The fix replaces '<' and '>' characters with safe placeholders before applying XSS cleaning, ensuring all input components are properly sanitized.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('keys', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('xss', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
55,CWE-79,GHSA-hj8g-cw8x-2c6m,"@@ -276,7 +276,8 @@ public function string($skip_ajax = false)
 
         // clear request params
         $cleanParam = new HTMLClean();
-        $u1 = $cleanParam->cleanArray($u1);
+        $u1 = $cleanParam->clean($u1);
+
 
         return $u1;
     }",Update UrlManager.php,"vuln-fix: Fix improper input sanitization in string processing

The code incorrectly used cleanArray instead of clean for sanitizing input, resulting in incomplete or improper cleaning of user-supplied data.
This flaw allowed attackers to inject malicious content that could bypass sanitization, leading to potential cross-site scripting or data corruption.
The fix replaces cleanArray with the correct clean method to ensure thorough and proper input sanitization before further processing.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('incorrectly used', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('flaw', 'FLAW', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('sanitization', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
56,"CWE-74', 'CWE-79",GHSA-pxcf-v868-m492,"@@ -19,6 +19,23 @@ app.use((req, res, next) => {
   next();
 });
 
+
+function htmlEscape(text) {
+  return text.replace(/&/g, '&amp;').
+  replace(/</g, '&lt;').
+  replace(/""/g, '&quot;').
+  replace(/'/g, '&#039;');
+}
+
+
+function sanitize(params) {
+  result = {}
+  for (let [key, value] of Object.entries(params)) {
+      result[key] = htmlEscape(value)
+  }
+  return result;
+}
+
 app.get(""/health"", (req, res) => res.sendStatus(200));
 
 const handler = (res, params) => {
@@ -40,12 +57,14 @@ const handler = (res, params) => {
 app.get(""/"", (req, res) => handler(res, req.query));
 app.post(""/"", (req, res) => handler(res, req.body));
 
-app.get(""/dynamic"", (req, res) =>
-  handler(res, { ...req.query, renderToHtml: true })
-);
+app.get(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.query)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
-app.post(""/dynamic"", (req, res) =>
-  handler(res, { ...req.body, renderToHtml: true })
-);
+app.post(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.body)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
 module.exports = http.createServer(app);",fix: escape special characters before insertion to template,"vuln-fix: Sanitize user input to prevent HTML injection

The application failed to escape user-supplied query and body parameters before rendering them as HTML, allowing injection of malicious HTML or scripts.
This vulnerability exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in victims’ browsers and steal sensitive data.
The fix adds a sanitization function that escapes special HTML characters in all user inputs before rendering, preventing injection of executable code.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitization', 'secword', ''), ('escapes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
57,CWE-79,GHSA-rf66-hmqf-q3fc,"@@ -260,7 +260,18 @@ $(document).ready(function () {
     }
 
     function formatDataSelection (datalist) {
-        return datalist.text;
+        // This a heinous workaround for a known bug in Select2.
+        // Without this, the rich selectlists are vulnerable to XSS.
+        // Many thanks to @uberbrady for this fix. It ain't pretty,
+        // but it resolves the issue until Select2 addresses it on their end.
+        //
+        // Bug was reported in 2016 :{
+        // https://github.com/select2/select2/issues/4587
+
+        return datalist.text.replace(/>/g, '&gt;')
+            .replace(/</g, '&lt;')
+            .replace(/""/g, '&quot;')
+            .replace(/'/g, '&#039;');
     }
 
     // This handles the radio button selectors for the checkout-to-foo options",Janky fix for Select2 bug,"vuln-fix: Sanitize Select2 datalist text to prevent XSS

The Select2 component rendered datalist text without escaping HTML special characters, allowing injection of malicious scripts via crafted input.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in the context of the affected web page.
The fix applies explicit character escaping to the datalist text, converting special characters to HTML entities to neutralize script injection vectors.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
58,CWE-79,GHSA-hxmr-5gv9-6p8v,"@@ -45,9 +45,9 @@
             $snmpver = 'v2c';
             $additional = [
                 'snmp_disable' => 1,
-                'os'           => $_POST['os'] ? $_POST['os_id'] : 'ping',
-                'hardware'     => $_POST['hardware'],
-                'sysName'      => $_POST['sysName'],
+                'os'           => $_POST['os'] ? strip_tags($_POST['os_id']) : 'ping',
+                'hardware'     => strip_tags($_POST['hardware']),
+                'sysName'      => strip_tags($_POST['sysName']),
             ];
         } elseif ($_POST['snmpver'] === 'v2c' || $_POST['snmpver'] === 'v1') {
             if ($_POST['community']) {","XSS fix, cont. (#13776)

https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/","vuln-fix: Sanitize SNMP device input fields to prevent XSS

The SNMP device creation code failed to sanitize user-supplied input fields before storing them, allowing injection of malicious HTML or script content.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in users’ browsers and compromise session integrity.
The fix applies strip_tags to relevant POST parameters, removing HTML tags and preventing injection of executable code.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.23529411764705882,"[('xss', 'secword', ''), ('fix', 'ACTION', ''), ('#13776', 'ISSUE', ''), ('https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('sanitize', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
59,CWE-79,GHSA-mxh3-2699-98g9,"@@ -861,7 +861,7 @@ public function fieldcollectionTreeAction(Request $request, EventDispatcherInter
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
@@ -1266,7 +1266,7 @@ public function objectbrickTreeAction(Request $request, EventDispatcherInterface
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,",[Admin] DataObject - Escape class definitions group properly,"vuln-fix: Escape group names to prevent XSS in tree views

The application rendered group names directly into HTML without escaping, allowing injection of malicious scripts via crafted group identifiers.
This exposed users to cross-site scripting attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and compromise user sessions.
The fix applies htmlspecialchars to group names before output, ensuring special characters are safely encoded and preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
60,CWE-79,GHSA-5jgj-h9wp-53fr,"@@ -285,6 +285,20 @@ public static function isImage($file_path)
             return false;
         }
 
+        /**
+         * Detects whether the file contains PHP or script tags, eg to check for embedded code in GIFs
+         * @param $file_path
+         * @return bool
+         */
+        public static function isFileFreeFromScriptTags($file_path)
+        {
+            if ($contents = file_get_contents($file_path)) {
+                if (stripos($contents, '<script') || strpos($contents, '<?')) return false;
+                return true;
+            }
+            return false;
+        }
+
         /**
          * Retrieve a file by ID
          *",Checking for script tags in GIFs etc (#3017),"vuln-fix: Detect and block files with embedded script tags

The file handling code did not check for embedded PHP or script tags within uploaded files, allowing malicious code to be hidden inside image or other file types.
This posed a security risk by enabling attackers to upload files containing executable code, potentially leading to remote code execution or cross-site scripting.
The fix adds a function that scans file contents for script or PHP tags and rejects files containing such embedded code before further processing.

Weakness: CWE-94
Severity: High
CVSS: 8.6",0.11764705882352941,"[('#3017', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('malicious code', 'secword', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('remote code execution', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-94', 'CWEID', ''), ('high', 'SEVERITY', '')]"
61,CWE-79,GHSA-cg3h-rc9q-g8v9,"@@ -36,7 +36,7 @@ pimcore.settings.website = Class.create({
                 border:false,
                 layout:""fit"",
                 closable:true,
-                items:[this.getRowEditor()]
+                items:[this.getRowEditor()],
             });
 
             var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
@@ -133,6 +133,7 @@ pimcore.settings.website = Class.create({
                 dataIndex: 'data',
                 flex: 300,
                 editable: true,
+                editor: new Ext.form.TextField({}),
                 renderer: this.getCellRenderer.bind(this),
             },
             {text: t(""site""), flex: 100, sortable:true, dataIndex: ""siteId"",
@@ -303,7 +304,10 @@ pimcore.settings.website = Class.create({
             bodyCls: ""pimcore_editable_grid"",
             stripeRows:true,
             columns : {
-                items: typesColumns
+                items: typesColumns,
+                defaults: {
+                    renderer: Ext.util.Format.htmlEncode
+                },
             },
             sm:  Ext.create('Ext.selection.RowModel', {}),
             bbar:this.pagingtoolbar,
@@ -359,15 +363,23 @@ pimcore.settings.website = Class.create({
     },
 
     getCellEditor: function (record) {
-        var data = record.data;
+        let data = record.data;
 
-        var type = data.type;
-        var property;
+        let type = data.type;
+        let property;
 
         if (type === ""text"") {
-            property = Ext.create('Ext.form.TextField');
+            property = {
+                xtype: 'textfield',
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""textarea"") {
-            property = Ext.create('Ext.form.TextArea');
+            property = {
+                xtype: ""textarea"",
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""document"" || type == ""asset"" || type == ""object"") {
             property = {
                 xtype: 'textfield',",[Admin] Website Settings - Escape grid values properly,"vuln-fix: Prevent XSS by enforcing HTML encoding in grid cells

The editable grid component rendered user-supplied data without proper HTML encoding, allowing injection of malicious scripts into the UI.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in the context of the application.
The fix adds default HTML encoding to all grid cell renderers and ensures editors use safe ExtJS form fields, preventing script injection via grid inputs.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensures', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
62,CWE-79,GHSA-73q9-7pwj-gm46,"@@ -150,7 +150,7 @@
             ?>
             <h2><?php echo $t['multi-user']; ?></h2>
             <span class=""heading""><?php echo $t['Username']; ?></span><br>
-            <?php echo $_SESSION['username'];?><br><br>
+            <?php echo xssClean($_SESSION['username'], ""html"");?><br><br>
             <?php
         }
         ?>",rXSS cleaned username in editor info display,"vuln-fix: Sanitize session username output to prevent XSS

The code directly echoed the session username without sanitization, allowing stored or reflected cross-site scripting attacks if the username contained malicious HTML or scripts.
This posed a security risk by enabling attackers to execute arbitrary JavaScript in users’ browsers, potentially stealing credentials or performing actions on their behalf.
The fix applies an HTML context-specific sanitization function to the username before output, ensuring unsafe characters are properly escaped.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('rxss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'secword', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
63,CWE-79,GHSA-fc38-mxwr-pfhx,"@@ -36,7 +36,7 @@ DirectoryIndex index.php
 </IfModule>
 
 <IfModule mod_headers.c>
-    <FilesMatch ""\.svg$"">
+    <FilesMatch ""\.(?i:svg)$"">
         Header set Content-Security-Policy ""script-src 'none'""
     </FilesMatch>
 </IfModule>",NEXT-15677 - Fix XSS for SVG files,"vuln-fix: Enforce case-insensitive SVG content security policy

The Content-Security-Policy header for SVG files was applied only to lowercase "".svg"" extensions, missing uppercase or mixed-case variants.
This allowed attackers to bypass script restrictions by uploading SVG files with uppercase extensions, potentially enabling script execution and cross-site scripting attacks.
The fix updates the file matching pattern to be case-insensitive, ensuring the policy applies to all SVG files regardless of extension casing.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('content security policy', 'SECWORD', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('bypass', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('updates', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
64,CWE-79,GHSA-2v5j-q74q-r53f,"@@ -56,7 +56,7 @@ def get_markdown(text):
     if not text:
         return """"
 
-    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\[\s\S\]]*?)\)'
+    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\s\S]*?)\)'
     # Regex check
     if re.match(pattern, text):
         # get get value of group regex",Update pattern,"vuln-fix: Correct regex to prevent excessive backtracking in markdown parser

The markdown parser used a regular expression with overly broad character classes that could cause catastrophic backtracking on crafted input.
This vulnerability allowed attackers to trigger Regular Expression Denial of Service (ReDoS), potentially exhausting server resources and causing service outages.
The fix narrows the regex character class to exclude problematic characters, reducing backtracking and improving input processing efficiency.

Weakness: CWE-400  
Severity: Medium  
CVSS: 5.3",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('vulnerability', 'secword', ''), ('attackers', 'FLAW', ''), ('denial of service', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('server', 'SECWORD', ''), ('fix', 'ACTION', ''), ('improving', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-400', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
65,CWE-79,GHSA-rfw2-x9f8-2f6m,"@@ -579,11 +579,11 @@ var oncall = {
               },
               footer: function(resp){
                 if (teamsCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
                 }
               },
               empty: function(resp){
-                return '<h4> No results found for ""' + resp.query + '"" </h4>';
+                return '<h4> No results found for ""' + Handlebars.escapeExpression(resp.query) + '"" </h4>';
               }
             }
           },
@@ -604,7 +604,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (servicesCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
                 }
               }
             }
@@ -626,7 +626,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (usersCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
                 }
               }
             }","prevent potential XSS from searchbar results (#342)

* prevent potential XSS from searchbar results

* use built in handlebars expression escaping

* use handlebars encodeURIComponent","vuln-fix: Escape user input in search result links to prevent XSS

The application directly embedded user-supplied query strings into HTML without proper escaping, allowing injection of malicious scripts in search result links and messages.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and steal sensitive data or perform actions on their behalf.
The fix applies Handlebars escaping and URL encoding to all user input before insertion into HTML, ensuring safe rendering and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('#342', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('encodeuricomponent', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
66,CWE-79,GHSA-jff5-55xj-4jcq,"@@ -2168,6 +2168,7 @@ function createSearchBox(searchURL) {
     var ac = new YAHOO.widget.AutoComplete(""search-box"",""search-box-completion"",ds);
     ac.typeAhead = false;
     ac.autoHighlight = false;
+    ac.formatResult = ac.formatEscapedResult;
 
     var box   = $(""search-box"");
     var sizer = $(""search-box-sizer"");","Merge pull request #98 from jenkinsci-cert/SECURITY-388

[SECURITY-388] Escape metacharacters in the search box","vuln-fix: Escape autocomplete results to prevent XSS

The autocomplete widget did not escape user-supplied search suggestions before rendering them in the dropdown list.
This allowed attackers to inject malicious scripts that could execute in users’ browsers, leading to cross-site scripting attacks.
The fix sets the autocomplete’s formatResult function to an escaping variant, ensuring all results are properly sanitized before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('#98', 'ISSUE', ''), ('security-388', 'SECWORD', ''), ('security-388', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
67,CWE-79,GHSA-wvh5-78h5-gmgr,"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\assign_user_summary $summary) {
             $fullname = fullname($summary->user, $summary->viewfullnames);
             $extrainfo = array();
             foreach ($summary->extrauserfields as $extrafield) {
-                $extrainfo[] = $summary->user->$extrafield;
+                $extrainfo[] = s($summary->user->$extrafield);
             }
             if (count($extrainfo)) {
                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';",MDL-74204 mod_assign: escape identity fields in allocate marker form.,"vuln-fix: Sanitize user extra fields in assignment summary rendering

The code rendered user extra fields without escaping, allowing injection of malicious HTML or scripts into the assignment summary display.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in other users’ browsers.
The fix applies proper escaping to all extra user fields before rendering, preventing injection of unsafe content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
68,CWE-79,GHSA-98gj-wwxm-cj3h,"@@ -11,7 +11,7 @@
 import re
 import inspect
 
-__version__ = '0.8'
+__version__ = '0.8.1'
 __author__ = 'Hsiaoming Yang <me@lepture.com>'
 __all__ = [
     'BlockGrammar', 'BlockLexer',
@@ -48,7 +48,8 @@ def _pure_pattern(regex):
 
 
 def _keyify(key):
-    return _key_pattern.sub(' ', key.lower())
+    key = escape(key.lower(), quote=True)
+    return _key_pattern.sub(' ', key)
 
 
 def escape(text, quote=False, smart_amp=True):
@@ -445,7 +446,8 @@ class InlineGrammar(object):
     inline_html = re.compile(
         r'^(?:%s|%s|%s)' % (
             r'<!--[\s\S]*?-->',
-            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (_valid_end, _valid_attr),
+            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (
+                _valid_end, _valid_attr),
             r'<\w+%s(?:%s)*?\s*\/?>' % (_valid_end, _valid_attr),
         )
     )",Fix CVE-2017-16876,"vuln-fix: Escape keys to prevent regex injection in key normalization

The key normalization function failed to escape user-supplied keys before inserting them into a regular expression pattern, allowing crafted input to manipulate regex behavior.
This flaw could enable attackers to perform regular expression injection, causing denial of service or unexpected matching results by exploiting regex metacharacters.
The fix applies proper escaping to keys before regex substitution, ensuring that special characters are treated literally and preventing injection attacks.

Weakness: CWE-117
Severity: Medium
CVSS: 5.0",0.17647058823529413,"[('fix', 'ACTION', ''), ('cve-2017-16876', 'VULNID', 'CVE')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('key', 'secword', ''), ('key', 'secword', ''), ('escape', 'secword', ''), ('keys', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('flaw', 'FLAW', ''), ('attackers', 'FLAW', ''), ('injection', 'secword', ''), ('denial of service', 'secword', ''), ('exploiting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-117', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
69,CWE-79,GHSA-5ppx-rgw2-xg23,"@@ -712,6 +712,7 @@ var jenkinsRules = {
         };
         ac.prehighlightClassName = ""yui-ac-prehighlight"";
         ac.animSpeed = 0;
+        ac.formatResult = ac.formatEscapedResult;
         ac.useShadow = true;
         ac.autoSnapContainer = true;
         ac.delimChar = e.getAttribute(""autoCompleteDelimChar"");",[SECURITY-641] Escape autocompletion suggestions,"vuln-fix: Escape autocomplete results to prevent XSS

The autocomplete component did not escape user-supplied data before rendering suggestions, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary code in the context of the affected web page.
The fix assigns a safe escaping function to formatResult, ensuring all autocomplete results are properly sanitized before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('security-641', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
70,CWE-79,GHSA-gmh3-x5w7-jg5m,"@@ -87,7 +87,7 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
-    $autoSize = xss_clean($autoSize);
+    $autoSize = intval($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
@@ -95,6 +95,16 @@
     }
     $type = xss_clean($type);
 
+            $other = [
+                ';',
+                '\'',
+                '//',
+                '`',
+                '\\',
+
+            ];
+    $type = str_replace($other, '', $type);
+
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
 
@@ -108,6 +118,8 @@
     if ($mod_id != $mod_orig_id) {
         $is_linked_mod = true;
     }
+
+
     ?>
 
     <script type=""text/javascript"">
@@ -124,7 +136,7 @@
         addIcon();
 
         autoSize = <?php  print $autoSize; ?>;
-        settingsType = '<?php print $type; ?>';
+        settingsType = '<?php print htmlentities($type); ?>';
 
         window.onbeforeunload = function () {
             $(document.body).addClass(""mw-external-loading"")",update,"vuln-fix: Sanitize and encode user inputs to prevent XSS

The code previously applied insufficient sanitization on user inputs, allowing special characters to persist and enabling injection of malicious scripts via the 'type' parameter.
This posed a cross-site scripting (XSS) risk where attackers could execute arbitrary JavaScript in users' browsers, compromising session integrity and data confidentiality.
The fix replaces unsafe cleaning with integer casting for numeric input, removes dangerous characters from strings, and applies HTML entity encoding before output to ensure safe rendering.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('sanitization', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('integer casting', 'SECWORD', ''), ('removes', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
71,CWE-79,GHSA-f655-xhvm-cwp4,"@@ -1,4 +1,5 @@
 <?jelly escape-by-default='true'?>
 <j:jelly xmlns:j=""jelly:core"">
-  <span><j:out value=""${it.shortDescription}"" /></span>
+  <!-- SECURITY-2316: This used to show the HTML-formatted it.shortDescription, but that does not properly neutralize user-provided input -->
+  <span>Triggered by GitLab Webhook</span>
 </j:jelly>",[SECURITY-2316],"vuln-fix: Neutralize user input in shortDescription display

The UI template rendered the shortDescription field as HTML without proper sanitization, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in the victim’s browser context.
The fix replaces the vulnerable output with a fixed safe string, eliminating the risk of injecting untrusted HTML content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('security-2316', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('vulnerable', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('safe', 'secword', ''), ('untrusted', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
72,CWE-79,GHSA-fj93-7wm4-8x2g,"@@ -564,6 +564,15 @@ $.widget( ""mobile.pagecontainer"", {
 
 		return $.proxy( function( html, textStatus, xhr ) {
 
+			// Check that Content-Type is ""text/html"" (https://github.com/jquery/jquery-mobile/issues/8640)
+			if ( !/^text\/html\b/.test( xhr.getResponseHeader('Content-Type') ) ) {
+				// Display error message for unsupported content type
+				if ( settings.showLoadMsg ) {
+					this._showError();
+				}
+				return;
+			}
+
 			// Pre-parse html to check for a data-url, use it as the new fileUrl, base path, etc
 			var content,","Check Content-Type header before parsing AJAX response as HTML (#8649)

Fix for issue #8640 (possible XSS vulnerability)","vuln-fix: Validate Content-Type header in AJAX page loads

The AJAX page loading mechanism did not verify the Content-Type header of HTTP responses, allowing non-HTML content to be processed as HTML.
This could lead to script injection or improper content handling, exposing users to cross-site scripting or other content-based attacks.
The fix adds a strict check to ensure only responses with a ""text/html"" Content-Type are processed, rejecting unsupported content types early.

Weakness: CWE-20
Severity: High
CVSS: 7.5",0.17647058823529413,"[('#8649', 'ISSUE', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('#8640', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('injection', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('high', 'SEVERITY', '')]"
73,CWE-79,GHSA-xjrf-8x4f-43h4,"@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2008 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -21,21 +21,21 @@
  * Escapes based on the JavaScript 1.5 recommendation.
  *
  * <p>Reference:
- * <a href=""http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Literals#String_Literals"">
- * Core JavaScript 1.5 Guide
- * </a>
+ * <a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#String_literals"">
+ * JavaScript Guide</a> on Mozilla Developer Network.
  *
  * @author Juergen Hoeller
  * @author Rob Harrop
+ * @author Rossen Stoyanchev
  * @since 1.1.1
  */
 public class JavaScriptUtils {
 
 	/**
-	 * Turn special characters into escaped characters conforming to JavaScript.
-	 * Handles complete character set defined in HTML 4.01 recommendation.
+	 * Turn JavaScript special characters into escaped characters.
+	 *
 	 * @param input the input string
-	 * @return the escaped string
+	 * @return the string with escaped characters
 	 */
 	public static String javaScriptEscape(String input) {
 		if (input == null) {
@@ -73,6 +73,13 @@ else if (c == '\r') {
 			else if (c == '\f') {
 				filtered.append(""\\f"");
 			}
+			else if (c == '\b') {
+				filtered.append(""\\b"");
+			}
+			// No '\v' in Java, use octal value for VT ascii char
+			else if (c == '\013') {
+				filtered.append(""\\v"");
+			}
 			else {
 				filtered.append(c);
 			}","Add BS and VT char escape sequences to JavaScriptUtils

Issue: SPR-9983","vuln-fix: Escape additional JavaScript control characters in output

The JavaScript escaping utility omitted certain control characters like backspace and vertical tab, leaving them unescaped in output strings.
This allowed injection of unescaped control characters that could break JavaScript syntax or enable injection attacks in contexts relying on proper escaping.
The fix adds explicit escaping for backspace and vertical tab characters, ensuring all special characters are safely encoded in output strings.

Weakness: CWE-79
Severity: Medium
CVSS: 5.3",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('escaping', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
74,CWE-79,GHSA-4mv4-gmmf-q382,"@@ -1,11 +1,11 @@
-/*! DataTables 1.10.10-dev
+/*! DataTables 1.10.10
  * ©2008-2015 SpryMedia Ltd - datatables.net/license
  */
 
 /**
  * @summary     DataTables
  * @description Paginate, search and order HTML tables
- * @version     1.10.10-dev
+ * @version     1.10.10
  * @file        jquery.dataTables.js
  * @author      SpryMedia Ltd (www.sprymedia.co.uk)
  * @contact     www.sprymedia.co.uk/contact
@@ -170,7 +170,7 @@
 	 *  @type string
 	 *  @default Version number
 	 */
-	DataTable.version = ""1.10.10-dev"";
+	DataTable.version = ""1.10.10"";
 
 	/**
 	 * Private data store, containing all of the settings objects that are",Version - 1.10.10 ready,"vuln-fix: Remove development version identifier from release build

The DataTables library incorrectly included a development version string in its production release, potentially misleading users about the software’s stability and update status.
This could cause confusion or improper version tracking, leading to deployment of unstable code or delayed security patching in production environments.
The fix replaces the development version identifier with the official release version string to accurately reflect the stable release state.

Weakness: CWE-200
Severity: Low
CVSS: 2.1",0.11764705882352941,"[('1.10.10', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('update', 'ACTION', ''), ('security', 'secword', ''), ('patching', 'ACTION', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('low', 'SEVERITY', '')]"
75,CWE-79,GHSA-q3x2-jvp3-wj78,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';
+                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,psd,xlsx,csv,7z'; 
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,xlr,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xlr,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",Update Files.php,"vuln-fix: Remove duplicate file extensions in allowed upload types

The allowed file extensions lists for uploads contained duplicate entries, which could cause inconsistent validation behavior or bypasses in file type checks.
This inconsistency might allow attackers to upload disallowed or malicious files by exploiting gaps in extension filtering logic.
The fix removes redundant duplicate extensions to ensure consistent and reliable file type validation during upload processing.

Weakness: CWE-434
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('bypasses', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('exploiting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
76,CWE-79,GHSA-hhqj-cfjx-vj25,"@@ -368,6 +368,10 @@ <h4 class=""label"">Notes</h4>
 
 				window.addEventListener( 'message', function( event ) {
 
+					if (window.location.origin !== event.origin){
+						return;
+					}
+
 					clearTimeout( connectionTimeout );
 					connectionStatus.style.display = 'none';",Fix DOM XSS,"vuln-fix: Validate origin in postMessage event handler

The event listener for postMessage lacked origin validation, allowing messages from any origin to be processed by the application.
This exposed the application to cross-origin attacks where malicious sites could send crafted messages to manipulate or disrupt client-side behavior.
The fix adds a strict origin check to ensure only messages from the same origin are accepted and processed.

Weakness: CWE-942
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-942', 'CWEID', ''), ('high', 'SEVERITY', '')]"
77,CWE-79,GHSA-h24f-9mm4-w336,"@@ -140,7 +140,9 @@ exports.handleRequest = function(vpath, path, req, res, readOnly, logHeadRequest
 															var name = results[f].name;
 															var normalized = url + '/' + name;
 															while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }
-															res.write('\r\n<p><a href=""/' + normalized + '"">' + name + '</a></p>');
+															if(normalized.indexOf('""') >= 0) throw new Error('unsupported file name')
+															name = name.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
+															res.write('\r\n<p><a href=""/' + normalized + '""><span>' + name + '</span></a></p>');
 														}
 														res.end('\r\n</body></html>');
 													}",Fix not sanitizing file names rendered in html,"vuln-fix: Sanitize directory listing output to prevent XSS

The directory listing handler failed to properly sanitize file names before embedding them in HTML links, allowing injection of malicious HTML or script code.
This exposed users to cross-site scripting (XSS) attacks where attackers could execute arbitrary scripts in the context of the affected web page.
The fix adds escaping of special HTML characters in file names and rejects names containing double quotes to prevent injection of unsafe markup.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('sanitizing', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
78,CWE-79,GHSA-jpj5-hg26-6jgc,"@@ -7,6 +7,7 @@ import (
 	""github.com/Xhofe/alist/server/common""
 	""github.com/Xhofe/alist/utils""
 	""github.com/gin-gonic/gin""
+	""net/url""
 	""strings""
 )
 
@@ -24,11 +25,19 @@ func Plist(c *gin.Context) {
 		return
 	}
 	u := string(bytes)
+	uUrl, err := url.Parse(u)
+	if err != nil {
+		common.ErrorResp(c, err, 500)
+		return
+	}
 	name := utils.Base(u)
+	u = uUrl.String()
 	ipaIndex := strings.Index(name, "".ipa"")
 	if ipaIndex != -1 {
 		name = name[:ipaIndex]
 	}
+	name = strings.ReplaceAll(name, ""<"", ""["")
+	name = strings.ReplaceAll(name, "">"", ""]"")
 	plist := fmt.Sprintf(`<?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
 <plist version=""1.0"">
     <dict>",:lock: fix #645 xss vulnerability,"vuln-fix: Sanitize and validate URL input in plist generation

The plist handler accepted raw URL input without proper parsing or validation, allowing injection of malicious characters that could break XML structure or cause unexpected behavior.
This posed a security risk by enabling XML injection or malformed plist generation, potentially leading to client crashes or exploitation via crafted URLs.
The fix parses the URL using a standard library, returns errors on invalid input, and replaces dangerous characters to ensure safe and well-formed plist output.

Weakness: CWE-74
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('fix', 'ACTION', ''), ('#645', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('validate', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('xml injection', 'secword', ''), ('exploitation', 'SECWORD', ''), ('fix', 'ACTION', ''), ('errors', 'FLAW', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-74', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
79,CWE-79,GHSA-66gw-5xpf-gfp5,"@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):
             message = e.log_message
             self.log.warn(message)
             self.set_status(e.status_code)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(dict(message=message)))
         except Exception:
             self.log.error(""Unhandled error in API request"", exc_info=True)
@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):
             self.set_status(status)
             tb_text = ''.join(traceback.format_exception(t, value, tb))
             reply = dict(message=message, traceback=tb_text)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(reply))
         else:
             return result",Set content type in json_error to application/json,"vuln-fix: Set explicit JSON content-type on error responses

The API error handler did not set the Content-Type header to application/json when returning JSON-formatted error messages.
This could cause clients to misinterpret the response format, leading to security issues such as improper parsing or injection attacks due to ambiguous content handling.
The fix explicitly sets the Content-Type header to application/json before sending error responses to ensure correct and safe client processing.

Weakness: CWE-16
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('json_error', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('error handler', 'SECWORD', ''), ('error', 'FLAW', ''), ('security', 'secword', ''), ('issues', 'FLAW', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-16', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
80,CWE-79,GHSA-5fh3-25xr-g85h,"@@ -82,7 +82,7 @@ public function transformCheckedoutAccessory ($accessory, $accessory_users, $tot
                 'first_name'=> e($user->first_name),
                 'last_name'=> e($user->last_name),
                 'employee_number' =>  e($user->employee_num),
-                'checkout_notes' => $user->pivot->note,
+                'checkout_notes' => e($user->pivot->note),
                 'last_checkout' => Helper::getFormattedDateObject($user->pivot->created_at, 'datetime'),
                 'type' => 'user',
                 'available_actions' => ['checkin' => true]","Merge pull request #10361 from snipe/fixes/xss_in_accessories_checkout_notes

Escape notes in transformCheckedOutAccessory","vuln-fix: Escape user notes to prevent XSS in accessory checkout

The accessory checkout feature failed to escape user-supplied notes before rendering them in the UI, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and steal sensitive data or hijack sessions.
The fix applies proper escaping to the checkout notes field, ensuring all user input is safely encoded before display.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('#10361', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_in_accessories_checkout_notes', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('hijack', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
81,CWE-79,GHSA-xg6r-5gx4-qxjm,"@@ -93,14 +93,15 @@ public function broker()
 
     public function sendResetLinkEmail(ContactPasswordResetRequest $request)
     {
-
-        if(Ninja::isHosted() && $request->session()->has('company_key'))
-            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));
+        if(Ninja::isHosted() && $request->has('company_key'))
+            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));
         
         $this->validateEmail($request);
 
-        $company = Company::where('company_key', $request->session()->get('company_key'))->first();
-        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+        // $company = Company::where('company_key', $request->input('company_key'))->first();
+        // $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+
+        $contact = ClientContact::where(['email' => $request->input('email')])->first();
 
         $response = false;
 
@@ -117,7 +118,7 @@ public function sendResetLinkEmail(ContactPasswordResetRequest $request)
             return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);
 
         // We will send the password reset link to this user. Once we have attempted
-        // to send the link, we will examine the response then see the message we
+        // to send the link, we will examine thuser@example.ce response then see the message we
         // need to show to the user. Finally, we'll send out a proper response.
         // $response = $this->broker()->sendResetLink(
         //     $this->credentials($request)",Fixes for client password reset,"vuln-fix: Prevent unauthorized password reset via company key misuse

The password reset function used the company_key from session data, allowing attackers to manipulate session state and reset passwords across companies.
This exposed a risk of unauthorized account access by bypassing tenant isolation and resetting passwords for users in other companies.
The fix switches to using company_key from the request input and removes session-based company scoping, enforcing proper user identification by email only.

Weakness: CWE-639
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fixes', 'ACTION', ''), ('password', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('password', 'SECWORD', ''), ('key', 'SECWORD', ''), ('password', 'SECWORD', ''), ('company_key', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('passwords', 'SECWORD', ''), ('bypassing', 'SECWORD', ''), ('passwords', 'SECWORD', ''), ('fix', 'ACTION', ''), ('company_key', 'SECWORD', ''), ('removes', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-639', 'CWEID', ''), ('high', 'SEVERITY', '')]"
82,CWE-79,GHSA-hm45-mgqm-gjm4,"@@ -930,20 +930,20 @@ <h5>{{ data['message'] }}</h5>
             img.attr(""src"", `${img.attr(""data-src-url"")}png`)
         }
     }
+
+    function safe(str) {
+        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    }
 </script>
 
 {% if data['status'] == 1 and data['data']['status'] == 1 %}
 
-{% if 'aliascc' in data['data']['permslist'] %}
+{% if 'aliascc' in data['data']['permslist'] and false%}
 <script>
     /* ---------------------------------------------------------------------------------------------------------------------
                                                         Aliases group
        --------------------------------------------------------------------------------------------------------------------- */
 
-    function safe(str) {
-        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
-    }
-
     // Alias modal
     $(document).on('click', '.editaliasbutton', function () {
         var command = $(this).parent().parent().data(""command"")
@@ -1186,28 +1186,35 @@ <h5>{{ data['message'] }}</h5>
             } else if (json.status === 1 && json.data.status === 0) {
                 $(""#targetstatus"").html(`{{ _('Failed to fetch targets') }}: ${json.data.message}`)
             } else {
+                let big_ol_dict = {}
                 select.html("""")
 
                 var chopt = [`<optgroup label=""{{ _('Channels') }}"">`]
                 for (let [id, name] of json.data.CHANNELS) {
-                    chopt.push(`<option value=${id}>${name}</option>`)
+                    chopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 chopt.push(""</optgroup>"")
                 select.append(chopt.join(""""))
 
                 var ropt = [`<optgroup label=""{{ _('Roles') }}"">`]
                 for (let [id, name] of json.data.ROLES) {
-                    ropt.push(`<option value=${id}>${name}</option>`)
+                    ropt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 ropt.push(""</optgroup>"")
                 select.append(ropt.join(""""))
 
                 var uopt = [`<optgroup label=""{{ _('Users') }}"">`]
                 for (let [id, name] of json.data.USERS) {
-                    uopt.push(`<option value=${id}>${name}</option>`)
+                    uopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 uopt.push(""</optgroup>"")
                 select.append(uopt.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict)) {
+                    $(`.selectpicker-element-${id}`).text(name)
+                }
             }
             select.selectpicker({ title: ""{{ _('Choose target') }}"" })
             select.removeAttr(""disabled"")
@@ -1299,18 +1306,24 @@ <h5>{{ data['message'] }}</h5>
                 $(""#rulesdiv"").html("""")
                 var overall = ['<h3 style=""margin-bottom: 10px"">{{ _(""Cog rules"") }}</h3>']
                 var allcoglines = [""<ul>""]
+
+                let big_ol_dict_two = {}
+                let cog_counter = 0
+
                 for (let [cog, rules] of Object.entries(json.data.COG)) {
                     var coglines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             coglines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            coglines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users with the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            coglines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users in the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else {
-                            coglines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('User') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         }
+                        big_ol_dict_two[`cog-rules-${cog_counter}`] = rule.name
+                        cog_counter += 1
                     }
                     if (coglines) {
                         allcoglines = allcoglines.concat(coglines)
@@ -1324,18 +1337,23 @@ <h5>{{ data['message'] }}</h5>
 
                 overall.push('<h3 style=""margin-bottom: 10px"">{{ _(""Command rules"") }}</h3>')
                 var allcmdlines = [""<ul>""]
+
+                let cmd_counter = 0
+
                 for (let [cmd, rules] of Object.entries(json.data.COMMAND)) {
                     var cmdlines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             cmdlines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            cmdlines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users with the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            cmdlines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users in the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else {
-                            cmdlines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('User') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         }
+                        big_ol_dict_two[`cmd-rules-${cmd_counter}`] = rule.name
+                        cmd_counter += 1
                     }
                     if (cmdlines) {
                         allcmdlines = allcmdlines.concat(cmdlines)
@@ -1347,6 +1365,9 @@ <h5>{{ data['message'] }}</h5>
                 }
                 overall = overall.concat(allcmdlines)
                 $(""#rulesdiv"").html(overall.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict_two)) {
+                    $(`#${id}`).text(name)
+                }
                 $(""#fetchrulesstatus"").html(""{{ _('Refreshed rules') }}."")
             }
         }
@@ -1378,11 +1399,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.adminroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#adminrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control adminroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control adminroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""admin-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""admin-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1390,6 +1412,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#admin-role-${random_number}`).val(elm.text())
         elm.remove()
     })
 
@@ -1442,11 +1465,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.modroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#modrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control modroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control modroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""mod-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""mod-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1454,6 +1478,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#mod-role-${random_number}`).val(elm.text())
         elm.remove()
     })",[UI] Fix SelectPicker not rendering properly,"vuln-fix: Prevent XSS by escaping user-supplied HTML content

The code rendered user-supplied strings directly into HTML without proper escaping, allowing injection of malicious scripts and HTML elements.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and steal sensitive data or hijack sessions.
The fix adds a safe function that escapes special HTML characters and updates dynamic content insertion to use this escaping, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('hijack', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('safe', 'secword', ''), ('escapes', 'SECWORD', ''), ('updates', 'ACTION', ''), ('escaping', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
83,CWE-79,GHSA-6hjc-m38h-7jhh,"@@ -15,12 +15,15 @@
 use nystudio107\seomatic\Seomatic;
 
 use Craft;
+use craft\elements\Asset;
 use craft\helpers\FileHelper;
+use craft\helpers\Assets as AssetsHelper;
 use craft\web\Controller;
 
 use yii\web\NotFoundHttpException;
 use yii\web\HttpException;
 use yii\web\Response;
+use yii\web\ServerErrorHttpException;
 
 /**
  * @author    nystudio107
@@ -87,6 +90,15 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
                 $headerValue = '<'.$canonical.'>; rel=""canonical""';
                 $response->headers->add('Link', $headerValue);
             }
+            // Ensure the file type is allowed
+            // ref: https://craftcms.com/docs/3.x/config/config-settings.html#allowedfileextensions
+            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;
+            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
+                $ext = strtolower($ext);
+            }
+            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+                throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
+            }
             // Send the file as a stream, so it can exist anywhere
             $response->sendContentAsFile(
                 $contents,","Ensure that only files with the extensions listed in `allowedFileExtensions` General Config setting can be used with the SEO File Link controller

Signed-off-by: Andrew Welch <andrew@nystudio107.com>","vuln-fix: Restrict served file types to allowed extensions

The action serving files did not verify the file extension against the configured allowed list, permitting delivery of arbitrary file types.
This could enable attackers to access or execute unauthorized files, leading to information disclosure or remote code execution risks.
The fix enforces a check against Craft CMS’s allowedFileExtensions config and rejects requests for disallowed file formats with an error.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,"[('ensure', 'ACTION', ''), ('signed', 'secword', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('attackers', 'FLAW', ''), ('disclosure', 'secword', ''), ('remote code execution', 'secword', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
84,CWE-79,GHSA-hpx4-xjp7-m4vr,"@@ -98,7 +98,7 @@ public function transformAsset(Asset $asset)
             'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),
             'book_value' => Helper::formatCurrencyOutput($depreciated_value),
             'monthly_depreciation' => $monthly_depreciation,
-            'checked_out_to' => $checkout_target,
+            'checked_out_to' => ($checkout_target) ? e($checkout_target) : null,
             'diff' =>  Helper::formatCurrencyOutput($diff),
             'number_of_months' =>  ($asset->model && $asset->model->depreciation) ? e($asset->model->depreciation->months) : null,
             'depreciation' => (($asset->model) && ($asset->model->depreciation)) ?  e($asset->model->depreciation->name) : null,","Escape checkout target name

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape user data in asset checkout output

The asset transformation function outputted the 'checked_out_to' field without escaping, allowing injection of malicious HTML or scripts if attacker-controlled data was present.
This exposed the application to cross-site scripting (XSS) attacks, risking user session theft or unauthorized actions via injected client-side code.
The fix applies proper escaping to the 'checked_out_to' value before output, ensuring any HTML special characters are neutralized and preventing script execution.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('escape', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('asset', 'secword', ''), ('asset', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('attacker', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
85,CWE-79,GHSA-wg8p-w946-c482,"@@ -329,7 +329,7 @@ public function isAllowedFilename($filename){
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',
-			'.ppt','.pptx','.xls','.xlsx','.txt','.md','.psd','.csv',
+			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.properties','.json','.css',
 			) ;",file upload bug,"vuln-fix: Restrict allowed filename extensions to prevent unsafe uploads

The file upload validation allowed certain extensions like '.md' that may enable uploading unsafe or unexpected file types.
This posed a security risk by permitting potentially harmful files that could be executed or exploited on the server or client side.
The fix removes the '.md' extension from the allowed list, tightening validation to reduce the attack surface for malicious uploads.

Weakness: CWE-434
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('unsafe', 'secword', ''), ('security', 'SECWORD', ''), ('exploited', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('attack surface', 'secword', ''), ('malicious', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
86,CWE-79,GHSA-vc5r-xfc4-4x22,"@@ -50,7 +50,7 @@ private function buildItem($configuration): array
 
         return [
             'id' => $name,
-            'text' => $name,
+            'text' => htmlspecialchars($name),
             'type' => 'config',
             'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,
             'expandable' => false,",follow up to https://github.com/pimcore/data-hub/pull/462,"vuln-fix: Escape output to prevent XSS in configuration items

The code rendered configuration item names directly into HTML without escaping, allowing injection of malicious scripts via crafted names.
This exposed users to cross-site scripting attacks, enabling attackers to execute arbitrary JavaScript in the context of the affected application.
The fix applies htmlspecialchars to encode special characters, ensuring safe rendering of configuration names in HTML contexts.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('https://github.com/pimcore/data-hub/pull/462', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encode', 'secword', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
87,CWE-79,GHSA-5fxf-x22x-5q38,"@@ -6,7 +6,6 @@ on:
 jobs:
   microweber-test-before-build:
     runs-on: ubuntu-latest
-    needs: stop-previous-runs
     steps:
       - uses: actions/checkout@v2",Update build-and-upload.yml,"vuln-fix: Remove dependency on prior job to prevent stale state issues

The CI workflow included a dependency on a previous job that could cause stale or inconsistent state to affect subsequent test runs.
This introduced a risk where outdated artifacts or environment conditions might lead to incorrect test results or mask security regressions.
The fix removes the unnecessary job dependency to ensure each test run starts with a clean, isolated environment, improving reliability and security.

Weakness: CWE-362
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('update', 'ACTION', ''), ('build-and-upload.yml', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('issues', 'FLAW', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('improving', 'ACTION', ''), ('security', 'secword', ''), ('weakness', 'secword', ''), ('cwe-362', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
88,CWE-79,GHSA-3pg8-c473-w6rr,"@@ -54,10 +54,10 @@ public function deleteFile($file_id){
 	}
 
 	//上传文件，返回url
-	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){
+	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0 , $check_filename = true  ){
 		$uploadFile = $_files[$file_key] ;
 
-		if( !$this->isAllowedFilename($_files[$file_key]['name']) ){
+		if( $check_filename && !$this->isAllowedFilename($_files[$file_key]['name']) ){
 			return false;
 		}
 
@@ -324,14 +324,12 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.mp4',
-			'.mov','.webmv','.flac','.mkv',
+			'.mp3','.wav','.mp4','.mov','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
-			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.wps',
+			'.pdf','.epub','.xps','.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.json','.css',
-			) ;
+		) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）
 		if(in_array( $ext , $allow_array ) ){",Upload file vulnerability,"vuln-fix: Enforce filename validation in file upload function

The file upload function allowed bypassing filename extension checks by disabling validation, potentially permitting dangerous file types to be uploaded.
This posed a security risk by enabling attackers to upload malicious files that could be executed or accessed, leading to server compromise or data leakage.
The fix adds a parameter to enforce filename validation by default, preventing uploads of disallowed file types unless explicitly overridden.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,"[('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypassing', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious files', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
89,"CWE-434', 'CWE-79",GHSA-rphc-h572-2x9f,"@@ -324,13 +324,13 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
+			'.mp3','.wav','.mp4',
 			'.mov','.webmv','.flac','.mkv',
-			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
+			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
 			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps',
+			'.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
-			'.cer','.ppt','.pub','.properties','.json','.css',
+			'.cer','.ppt','.pub','.json','.css',
 			) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）",file upload bug,"vuln-fix: Restrict allowed file extensions to prevent unsafe uploads

The file upload validation allowed potentially dangerous file types by including uncommon or executable extensions in the allowed list.
This increased the risk of attackers uploading malicious files that could lead to remote code execution or system compromise.
The fix removes risky extensions from the allowed list, limiting uploads to safer, commonly used media and document formats only.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious files', 'SECWORD', ''), ('remote code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
90,"CWE-79', 'CWE-116",GHSA-ph5x-h23x-7q5q,"@@ -245,7 +245,7 @@
                   &lt;a href=""$backUrl"" class='button secondary'&gt;{{translation key=""platform.wiki.users.join.request.cancel.label""/}}&lt;/a&gt;
                 &lt;/span&gt;
                 &lt;input type='hidden' name='wikiId' value=""$!wikiId""/&gt;
-                &lt;input type='hidden' name='requestJoin' value=""$!request.requestJoin""/&gt;
+                &lt;input type='hidden' name='requestJoin' value=""$escapetool.xml($!request.requestJoin)""/&gt;
                 &lt;input type=""hidden"" name=""form_token"" value=""$!escapetool.xml($services.csrf.getToken())"" /&gt;
               &lt;/dl&gt;
             &lt;/form&gt;",XWIKI-19292: Fix bad escaping,"vuln-fix: Escape user input in hidden form fields to prevent XSS

The form included user-controlled data in a hidden input field without proper escaping, allowing injection of malicious XML or HTML content.
This exposed the application to cross-site scripting attacks where attackers could execute arbitrary scripts in users’ browsers.
The fix applies XML escaping to the user input before rendering it in the hidden field, ensuring safe output encoding.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
91,CWE-79,GHSA-4wm8-c2vv-xrpq,"@@ -14,6 +14,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.log4j.Logger;
 import org.dspace.authorize.AuthorizeException;
 import org.dspace.core.Context;
 
@@ -25,8 +26,8 @@
  */
 public class ControlledVocabularyServlet extends DSpaceServlet
 {
-    // private static Logger log =
-    // Logger.getLogger(ControlledVocabularyServlet.class);
+    private static Logger log =
+    Logger.getLogger(ControlledVocabularyServlet.class);
 
     protected void doDSGet(Context context, HttpServletRequest request,
             HttpServletResponse response) throws ServletException, IOException,
@@ -37,6 +38,13 @@ protected void doDSGet(Context context, HttpServletRequest request,
         String filter = """";
         String callerUrl = request.getParameter(""callerUrl"");
 
+        // callerUrl must starts with URL outside DSpace request context path
+        if(!callerUrl.startsWith(request.getContextPath())) {
+            log.error(""Controlled vocabulary caller URL would result in redirect outside DSpace web app: "" + callerUrl + "". Rejecting request with 400 Bad Request."");
+            response.sendError(400, ""The caller URL must be within the DSpace base URL of "" + request.getContextPath());
+            return;
+        }
+
         if (request.getParameter(""ID"") != null)
         {
             ID = request.getParameter(""ID"");",[DS-4133] Improve URL handling in Controlled Vocab JSPUI servlet,"vuln-fix: Restrict callerUrl to internal context path to prevent open redirect

The servlet accepted a callerUrl parameter without verifying it was within the application’s context path, allowing potential open redirect attacks.
This flaw could enable attackers to redirect users to malicious external sites, facilitating phishing or other social engineering exploits.
The fix enforces that callerUrl must start with the server’s context path, rejecting requests with invalid URLs and preventing external redirects.

Weakness: CWE-601
Severity: High
CVSS: 7.5",0.058823529411764705,"[('improve', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('open redirect', 'secword', ''), ('attacks', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('malicious', 'secword', ''), ('phishing', 'secword', ''), ('exploits', 'SECWORD', ''), ('fix', 'ACTION', ''), ('server', 'SECWORD', ''), ('invalid urls', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('high', 'SEVERITY', '')]"
92,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -209,7 +209,7 @@
         <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
         <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
         <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
         <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />",[DS-4453] Fix XSS handling in JSPUI discovery spellcheck,"vuln-fix: Sanitize spell check query output to prevent XSS

The search page rendered the spell check suggestion without properly escaping HTML entities, allowing injection of malicious scripts via crafted spellCheckQuery input.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in the victim’s browser, compromising user data and session integrity.
The fix applies HTML entity encoding to the spellCheckQuery output, ensuring any special characters are safely escaped before rendering in the page.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
93,CWE-79,GHSA-r5jw-62xg-j433,"@@ -2,7 +2,7 @@
 
 module Kaminari
   module Helpers
-    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze
+    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze
 
     # A tag stands for an HTML tag inside the paginator.
     # Basically, a tag has its own partial template file, so every tag can be","Blacklist ""original_script_name"" get param","vuln-fix: Add original_script_name to parameter exclusion list

The pagination helper did not exclude the original_script_name parameter from processing, allowing it to be unintentionally used or leaked in URL generation.
This could lead to information disclosure or parameter pollution attacks by exposing internal routing details or enabling crafted parameter injection.
The fix adds original_script_name to the exclusion list, preventing it from being included in generated URLs or parameter handling.

Weakness: CWE-200
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('blacklist', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('disclosure', 'secword', ''), ('attacks', 'FLAW', ''), ('injection', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
94,CWE-79,GHSA-8w3x-r6x7-c5r5,"@@ -607,7 +607,12 @@ pimcore.object.classes.klass = Class.create({
                 for (var i = 0; i < items.length; i++) {
                     var item = items[i];
                     if (typeof item.getValue == ""function"") {
-                        this.data[item.name] = item.getValue();
+                        let value = item.getValue();
+                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {
+                            value = Ext.util.Format.htmlEncode(value);
+                        }
+
+                        this.data[item.name] = value;
                     }
                 }
 
@@ -705,6 +710,7 @@ pimcore.object.classes.klass = Class.create({
             id: ""iconfield-"" + this.getId(),
             name: ""icon"",
             width: 396,
+            renderer: Ext.util.Format.htmlEncode,
             value: this.data.icon,
             listeners: {
                 ""afterrender"": function (el) {
@@ -752,6 +758,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 500,
                     enableKeyEvents: true,
                     value: this.data.name,
+                    renderer: Ext.util.Format.htmlEncode,
                     listeners: {
                         keyup: function (el) {
                             this.rootPanel.getComponent(""phpClassName"").setValue(getPhpClassName(el.getValue()))
@@ -763,12 +770,14 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""description""),
                     name: ""description"",
                     width: 500,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.description
                 },
                 {
                     xtype: ""textfield"",
                     fieldLabel: t(""unique_identifier""),
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.id,
                     width: 500
                 },
@@ -779,6 +788,7 @@ pimcore.object.classes.klass = Class.create({
                     itemId: ""phpClassName"",
                     width: 500,
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: getPhpClassName(this.data.name)
                 },
                 {
@@ -786,6 +796,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""parent_php_class""),
                     name: ""parentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.parentClass
                 },
                 {
@@ -793,6 +804,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 600,
                     name: ""implementsInterfaces"",
                     fieldLabel: t(""implements_interfaces""),
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.implementsInterfaces
                 },
                 {
@@ -800,6 +812,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""use_traits""),
                     name: ""useTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.useTraits
                 },
                 {
@@ -807,6 +820,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_parent_php_class""),
                     name: ""listingParentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingParentClass
                 },
                 {
@@ -814,6 +828,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_use_traits""),
                     name: ""listingUseTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingUseTraits
                 },
                 {
@@ -821,6 +836,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""link_generator_reference""),
                     name: ""linkGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.linkGeneratorReference
                 },
                 {
@@ -828,6 +844,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_generator_reference""),
                     name: ""previewGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewGeneratorReference
                 },
                 {
@@ -835,6 +852,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_url""),
                     name: ""previewUrl"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewUrl
                 },
                 {
@@ -885,6 +903,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""group""),
                     name: ""group"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.group
                 },
                 this.allowInheritance,","[Admin UI] DataObject Class - escape general settings input values (#10991)

* [Admin UI] DataObject Class - escape general settings input values

* Update bundles/AdminBundle/Resources/public/js/pimcore/object/classes/class.js

* [Admin UI] DataObject Class - escape general settings input values

* [Admin UI] DataObject Class - escape general settings input values","vuln-fix: Encode HTML output to prevent XSS in object class fields

The application failed to properly encode user-supplied input values before rendering them in various text fields, allowing injection of malicious HTML or scripts.
This exposed users to cross-site scripting (XSS) attacks, where attackers could execute arbitrary JavaScript in the context of the victim’s browser, compromising data and session integrity.
The fix applies HTML encoding to all relevant field values and input retrievals, ensuring that special characters are safely escaped before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('#10991', 'ISSUE', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('class.js', 'URL', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encode', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
95,CWE-79,GHSA-7jh9-6cpf-h4m7,"@@ -1388,8 +1388,12 @@ hello.utils.extend(hello.utils, {
 		// (URI Fragments within 302 Location URI are lost over HTTPS)
 		// Loading the redirect.html before triggering the OAuth Flow seems to fix it.
 		else if ('oauth_redirect' in p) {
+			var url = decodeURIComponent(p.oauth_redirect);
+
+			if (isValidUrl(url)) {
+				location.assign(url);
+			}
 
-			location.assign(decodeURIComponent(p.oauth_redirect));
 			return;
 		}",fix(xss): oauth_redirect should be a valid url,"vuln-fix: Validate redirect URL to prevent open redirect attacks

The OAuth redirect handler did not validate the decoded redirect URL before navigating, allowing attackers to supply arbitrary URLs for redirection.
This exposed users to open redirect vulnerabilities, enabling phishing or malicious site redirection by tricking users into following unsafe links.
The patch adds a URL validation check to ensure only legitimate URLs are used for redirection, blocking unsafe or malformed inputs.

Weakness: CWE-601
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix(xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('open redirect', 'secword', ''), ('attacks', 'FLAW', ''), ('oauth', 'secword', ''), ('validate', 'secword', ''), ('decoded', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('open redirect', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('phishing', 'secword', ''), ('malicious', 'SECWORD', ''), ('unsafe', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('url validation', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('high', 'SEVERITY', '')]"
96,CWE-79,GHSA-vx6v-xg64-pmr8,"@@ -330,7 +330,11 @@ <h5 class=""mb-0"">
         function get_url(row) {
             return ""{% url 'helpdesk:view' 1234 %}"".replace(/1234/, row.id.toString());
         }
-
+        
+        function htmlEntities(str) {
+            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+        }
+        
         $(document).ready(function () {
             // Ticket DataTable Initialization
             $('#ticketTable').DataTable({
@@ -366,7 +370,7 @@ <h5 class=""mb-0"">
                             if (type === 'display') {
                                 data = '<div class=""tickettitle""><a href=""' + get_url(row) + '"" >' +
                                     row.id + '. ' +
-                                    row.title + '</a></div>';
+                                    htmlEntities(row.title) + '</a></div>';
                             }
                             return data
                         }","Add function `htmlEntities`

`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.","vuln-fix: Escape HTML entities in ticket titles to prevent XSS

The ticket title was rendered directly into HTML without escaping, allowing injection of malicious HTML or JavaScript code via crafted ticket titles.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in the context of the affected web application.
The fix introduces an htmlEntities function that escapes special characters in ticket titles before rendering, preventing injection of executable code.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('add', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('htmlentities', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('escapes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
97,CWE-79,GHSA-rcvx-rmvf-mxch,"similarity index 64%
rename from hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/StreamAwareErrorController.java
rename to hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/ErrorController.java
@@ -8,6 +8,8 @@
  */
 package org.eclipse.hawkbit.app;
 
+import java.util.Map;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -23,22 +25,23 @@
 /**
  * Error page controller that ensures that ocet stream does not return text in
  * case of an error.
- *
  */
 @Controller
 // Exception squid:S3752 - errors need handling for all methods
 @SuppressWarnings(""squid:S3752"")
-public class StreamAwareErrorController extends BasicErrorController {
+public class ErrorController extends BasicErrorController {
+
+    private static final String PATH = ""path"";
 
     /**
-     * A new {@link StreamAwareErrorController}.
+     * A new {@link ErrorController}.
      * 
      * @param errorAttributes
      *            the error attributes
      * @param serverProperties
      *            configuration properties
      */
-    public StreamAwareErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
+    public ErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
         super(errorAttributes, serverProperties.getError());
     }
 
@@ -48,4 +51,19 @@ public ResponseEntity<Void> errorStream(final HttpServletRequest request, final
         return new ResponseEntity<>(status);
     }
 
+    @Override
+    @RequestMapping
+    public ResponseEntity<Map<String, Object>> error(final HttpServletRequest request) {
+        final HttpStatus status = getStatus(request);
+        final Map<String, Object> body = getErrorAttributesWithoutPath(request);
+        return new ResponseEntity<>(body, status);
+    }
+
+    private Map<String, Object> getErrorAttributesWithoutPath(final HttpServletRequest request) {
+        final Map<String, Object> body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));
+        if (body != null && body.containsKey(PATH)) {
+            body.remove(PATH);
+        }
+        return body;
+    }
 }","Fixes #1067

JSON body response for HTTP 404 error may contain unsafe URL path characters. Thus removing path from the response

Signed-off-by: Dominic Schabel <dominic.schabel@bosch.io>","vuln-fix: Remove path info from error responses to prevent data leakage

The error controller included the request path in error response bodies, potentially exposing sensitive internal URL structures to clients.
This information disclosure risk could aid attackers in mapping application endpoints and crafting targeted attacks based on revealed paths.
The fix removes the path attribute from error responses, ensuring sensitive routing details are not leaked to external users.

Weakness: CWE-200
Severity: Medium
CVSS: 5.0",0.23529411764705882,"[('fixes', 'ACTION', ''), ('#1067', 'ISSUE', ''), ('error', 'FLAW', ''), ('unsafe', 'SECWORD', ''), ('removing', 'ACTION', ''), ('signed', 'secword', ''), ('dominic.schabel@bosch.io', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('sensitive', 'SECWORD', ''), ('disclosure', 'secword', ''), ('attackers', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('error', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
98,CWE-79,GHSA-wjh9-344g-vc49,"@@ -200,7 +200,7 @@ function( $match ) {
 
 	foreach ( $remove as $remove_string )
 	{
-		while ( strpos( $string, $remove_string ) !== false )
+		while ( stripos( $string, $remove_string ) !== false )
 		{
 			$string = str_ireplace( $remove, '', $string );
 		}",Fix stored XSS security issue: remove inline JS from URL in PreparePHP_SELF.fnc.php,"vuln-fix: Use case-insensitive search to remove strings securely

The string removal loop used a case-sensitive search, causing some unwanted substrings with different casing to remain in the input.
This allowed attackers to bypass filtering by altering letter case, potentially enabling injection or malicious content to persist.
The fix replaces strpos with stripos to perform case-insensitive searches, ensuring all variants of the target strings are properly removed.

Weakness: CWE-183
Severity: Medium
CVSS: 5.0",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('remove', 'ACTION', ''), ('preparephp_self.fnc.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('securely', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('removed', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-183', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
99,CWE-79,GHSA-gx5w-rrhp-f436,"@@ -145,6 +145,11 @@ window.search = window.search || {};
             url.push("""");
         }
 
+        // encodeURIComponent escapes all chars that could allow an XSS except
+        // for '. Due to that we also manually replace ' with its url-encoded
+        // representation (%27).
+        var searchterms = encodeURIComponent(searchterms.join("" "")).replace(/\'/g, ""%27"");
+
         return '<a href=""' + path_to_root + url[0] + '?' + URL_MARK_PARAM + '=' + searchterms + '#' + url[1]
             + '"" aria-details=""teaser_' + teaser_count + '"">' + result.doc.breadcrumbs + '</a>'
             + '<span class=""teaser"" id=""teaser_' + teaser_count + '"" aria-label=""Search Result Teaser"">'","fix xss in the search page

Thanks to Kamil Vavra for responsibly disclosing the vulnerability
according to Rust's Security Policy.","vuln-fix: Encode single quotes in search terms to prevent XSS

The search result link generation did not encode single quote characters in user input, allowing injection of malicious scripts via crafted search terms.
This created a cross-site scripting (XSS) risk where attackers could execute arbitrary JavaScript in users’ browsers by manipulating the search query.
The fix applies encodeURIComponent and additionally replaces single quotes with their URL-encoded form to ensure all dangerous characters are safely escaped.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('security', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('manipulating', 'ACTION', ''), ('fix', 'ACTION', ''), ('encodeuricomponent', 'SECWORD', ''), ('encoded', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
100,CWE-79,GHSA-6m26-25q2-cq46,"@@ -4,6 +4,7 @@
 
 use Conner\Tagging\Model\Tagged;
 use \Intervention\Image\ImageManagerStatic as Image;
+use MicroweberPackages\Helper\HTMLClean;
 use MicroweberPackages\Media\Models\Media;
 use MicroweberPackages\Media\Models\MediaThumbnail;
 use MicroweberPackages\Utils\Media\Thumbnailer;
@@ -1184,6 +1185,10 @@ public function thumbnail_img($params)
 
     public function create_media_dir($params)
     {
+
+        $clean = new HTMLClean();
+        $_REQUEST = $clean->cleanArray($_REQUEST);
+
         must_have_access();
         $resp = array();
         // $target_path = media_base_path() . 'uploaded' . DS;
@@ -1198,7 +1203,7 @@ public function create_media_dir($params)
 
             $target_path = $fn_path;
         }
-        if (!isset($_REQUEST['name'])) {
+        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {
             $resp = array('error' => 'You must send new_folder parameter');
         } else {
             $fn_new_folder_path = $_REQUEST['name'];",add xss clean to create media dir method,"vuln-fix: Sanitize request data in media directory creation

The create_media_dir function did not sanitize user input from the global request array, allowing potentially malicious HTML or script content to be processed.
This posed a risk of cross-site scripting or injection attacks by enabling unsafe input to influence server-side operations or responses.
The fix applies HTMLClean sanitization to the entire request array before any processing, ensuring all inputs are cleaned of harmful content.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('add', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitize', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('unsafe', 'SECWORD', ''), ('server', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
101,CWE-79,GHSA-6jp6-9rf9-gc66,"@@ -1131,7 +1131,9 @@ $(function () {
       return """";
     },
     menuItemTemplate: function (item) {
-      return `<a>${item.string}</a>`;
+      let link = document.createElement(""a"");
+      link.innerText = item.string;
+      return link.outerHTML;
     },
     values: (text, callback) => {
       $.ajax({","js: Add missing escaping to username completion

Fixes https://hackerone.com/reports/1486674","vuln-fix: Prevent XSS by safely rendering menu item strings

The menu item rendering function directly injected unescaped HTML strings into anchor elements, allowing malicious input to execute arbitrary scripts.
This exposed users to cross-site scripting (XSS) attacks where attackers could inject and run harmful JavaScript in the application context.
The fix replaces direct HTML insertion with safe text assignment using DOM APIs to ensure proper escaping and prevent script execution.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('ensure', 'ACTION', ''), ('escaping', 'secword', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
102,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -147,7 +147,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -159,6 +159,11 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
 </script>		
 </c:set>",[DS-4453] Fix XSS handling in JSPUI discovery autocomplete,"vuln-fix: Escape HTML in displayed filter labels to prevent XSS

The code rendered user-supplied filter labels directly into HTML without escaping, allowing injection of malicious scripts via crafted input.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in victims’ browsers, compromising session integrity and data.
The fix adds a generic HTML escape function to sanitize displayed values before insertion, preventing execution of injected HTML or script content.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escape', 'SECWORD', ''), ('sanitize', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
103,CWE-79,GHSA-qf2g-q4mc-w7rr,"@@ -839,7 +839,7 @@ public static function processModuleXml(\SimpleXMLElement $xml): array
         $information['name'] = (string) $module->name;
         $information['version'] = (string) $module->version;
         $information['requirements'] = (array) $module->requirements;
-        $information['description'] = (string) $module->description;
+        $information['description'] = strip_tags((string) $module->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
         $information['cronjobs'] = [];
 
         // authors
@@ -900,7 +900,7 @@ public static function processThemeXml(\SimpleXMLElement $xml): array
         $information['version'] = (string) $theme->version;
         $information['requirements'] = (array) $theme->requirements;
         $information['thumbnail'] = (string) $theme->thumbnail;
-        $information['description'] = (string) $theme->description;
+        $information['description'] = strip_tags((string) $theme->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
 
         // authors
         foreach ($xml->xpath('/theme/authors/author') as $author) {",Fix xss though the description in the info.xml file of a theme or module,"vuln-fix: Sanitize module and theme descriptions to prevent XSS

The module and theme XML processing functions did not sanitize description fields, allowing untrusted HTML content to be stored and rendered without restriction.
This exposed the application to cross-site scripting (XSS) attacks where malicious scripts could execute in users’ browsers, compromising user data and session integrity.
The fix applies strip_tags with a safe whitelist of HTML tags to clean descriptions, preventing injection of harmful scripts while preserving basic formatting.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('info.xml', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('sanitize', 'secword', ''), ('untrusted', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
104,CWE-79,GHSA-wrp6-9w7f-3wxg,"@@ -248,7 +248,7 @@ $(""#btn-upload-format"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-format"").html(filename);
+    $(""#upload-format"").text(filename);
 });
 
 $(""#btn-upload-cover"").on(""change"", function () {
@@ -256,7 +256,7 @@ $(""#btn-upload-cover"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-cover"").html(filename);
+    $(""#upload-cover"").text(filename);
 });
 
 $(""#xchange"").click(function () {",Fix upload of cover and book formats containing html characters,"vuln-fix: Prevent XSS by using text() instead of html() for filenames

The code inserted user-supplied filenames into the DOM using html(), allowing malicious filenames containing HTML or scripts to execute in the browser context.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to run arbitrary JavaScript and compromise user sessions or data.
The fix replaces html() with text() to safely encode filenames as plain text, preventing execution of embedded HTML or scripts.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('malicious filenames', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encode', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
105,CWE-79,GHSA-49qr-xh3w-h436,"@@ -78,6 +78,13 @@ class NbconvertFileHandler(IPythonHandler):
 
     SUPPORTED_METHODS = ('GET',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertFileHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def get(self, format, path):
 
@@ -145,6 +152,13 @@ def get(self, format, path):
 class NbconvertPostHandler(IPythonHandler):
     SUPPORTED_METHODS = ('POST',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertPostHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def post(self, format):
         exporter = get_exporter(format, config=self.config)","Apply CSP sandboxing for nbconvert responses

These may contain untrusted content, so they should be treated as being
from a different domain to the notebook server.","vuln-fix: Enforce sandboxed content security policy on nbconvert handlers

The nbconvert file and post handlers did not apply sandbox restrictions in their Content Security Policy, allowing served HTML/SVG to execute scripts with full origin privileges.
This exposed the notebook server to cross-site scripting risks where malicious scripts could interact with or compromise the server environment.
The fix appends a sandbox directive with allow-scripts to the CSP, isolating JavaScript execution and preventing it from accessing the notebook server’s origin.

Weakness: CWE-1021
Severity: High
CVSS: 7.8",0.17647058823529413,"[('untrusted', 'secword', ''), ('server', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('content security policy', 'secword', ''), ('sandbox', 'secword', ''), ('content security policy', 'secword', ''), ('server', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('malicious', 'secword', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('sandbox', 'secword', ''), ('preventing', 'ACTION', ''), ('server', 'secword', ''), ('weakness', 'secword', ''), ('cwe-1021', 'CWEID', ''), ('high', 'SEVERITY', '')]"
106,CWE-79,GHSA-38m9-3vg4-rwvp,"@@ -114,6 +114,9 @@ public function redirect($url)
         $redirectUrl = str_replace(""\r"", """", $redirectUrl);
         $redirectUrl = str_replace(""\n"", """", $redirectUrl);
 
+        $clearInput = new HTMLClean();
+        $redirectUrl = $clearInput->clean($redirectUrl);
+
         if (headers_sent()) {
             echo '<meta http-equiv=""refresh"" content=""0;url=' . $redirectUrl . '"">';
         } else {",Update UrlManager.php,"vuln-fix: Sanitize redirect URL to prevent header injection

The redirect function did not fully sanitize user-supplied URLs, allowing injection of malicious characters that could manipulate HTTP headers.
This vulnerability enabled attackers to perform HTTP response splitting or header injection attacks, potentially leading to cache poisoning or cross-site scripting.
The fix applies HTMLClean sanitization to the redirect URL, removing dangerous characters and ensuring safe header construction.

Weakness: CWE-113
Severity: High
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitize', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('manipulate', 'ACTION', ''), ('vulnerability', 'secword', ''), ('attackers', 'FLAW', ''), ('http response splitting', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('poisoning', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('removing', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-113', 'CWEID', ''), ('high', 'SEVERITY', '')]"
107,CWE-79,GHSA-vfrc-ggmc-5jwv,"@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):
                 'application/octet-stream',
                 size=attached.size,
             )
+            att.full_clean()
             att.save()
 
             if attached.size < max_email_attachment_size:","Add `att.full_clean()` before saving

Fix issue https://github.com/django-helpdesk/django-helpdesk/issues/983
Also, fix bug stored XSS disclosure: https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/","vuln-fix: Validate attachment data before saving to prevent invalid input

The attachment processing function did not perform validation on attachment data before saving, allowing potentially malformed or malicious files to be stored.
This posed a security risk by enabling corrupted or harmful data to enter the system, which could lead to data integrity issues or exploitation of downstream components.
The fix adds a call to full_clean() on attachments to enforce model validation and reject invalid inputs prior to saving.

Weakness: CWE-20
Severity: Medium
CVSS: 5.0",0.17647058823529413,"[('add', 'ACTION', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https://github.com/django-helpdesk/django-helpdesk/issues/983', 'URL', ''), ('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('xss', 'SECWORD', ''), ('disclosure', 'secword', ''), ('https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('malicious files', 'SECWORD', ''), ('security', 'SECWORD', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('exploitation', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
108,CWE-79,GHSA-3fw8-66wf-pr7m,"@@ -152,7 +152,7 @@ app.handle = function(req, res, out) {
         res.statusCode = 404;
         res.setHeader('Content-Type', 'text/plain');
         if ('HEAD' == req.method) return res.end();
-        res.end('Cannot ' + req.method + ' ' + utils.escape(req.originalUrl));
+        res.end('Cannot ' + utils.escape(req.method) + ' ' + utils.escape(req.originalUrl));
       }
       return;
     }
@@ -202,7 +202,7 @@ app.handle = function(req, res, out) {
  * Listen for connections.
  *
  * This method takes the same arguments
- * as node's `http.Server#listen()`.  
+ * as node's `http.Server#listen()`.
  *
  * HTTP and HTTPS:
  *
@@ -214,9 +214,9 @@ app.handle = function(req, res, out) {
  *      var connect = require('connect')
  *        , http = require('http')
  *        , https = require('https');
- *      
+ *
  *      var app = connect();
- *      
+ *
  *      http.createServer(app).listen(80);
  *      https.createServer(options, app).listen(443);
  *",fix: escape req.method in 404 response,"vuln-fix: Escape HTTP method and URL in error responses

The error handler did not escape the HTTP method and original URL before including them in the response body, allowing injection of malicious content.
This exposed applications to reflected cross-site scripting (XSS) attacks if attackers crafted requests with special characters in the method or URL.
The fix applies proper escaping to both the method and URL before sending them in the response, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('req.method', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('error', 'FLAW', ''), ('error handler', 'SECWORD', ''), ('escape', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
109,CWE-79,GHSA-455w-gv5p-wgg3,"@@ -37,6 +37,11 @@ class TargetingController extends AdminController implements KernelControllerEve
 {
     // RULES
 
+    private function correctName(string $name): string
+    {
+        return preg_replace('/[#?*:\\\\<>|""%&@=;+]/', '-', $name);
+    }
+
     /**
      * @Route(""/rule/list"", name=""pimcore_admin_targeting_rulelist"", methods={""GET""})
      *
@@ -55,7 +60,7 @@ public function ruleListAction(Request $request)
         foreach ($list->load() as $target) {
             $targets[] = [
                 'id' => $target->getId(),
-                'text' => $target->getName(),
+                'text' => htmlspecialchars($target->getName()),
                 'active' => $target->getActive(),
                 'qtip' => 'ID: ' . $target->getId(),
             ];
@@ -74,7 +79,7 @@ public function ruleListAction(Request $request)
     public function ruleAddAction(Request $request)
     {
         $target = new Targeting\Rule();
-        $target->setName($request->get('name'));
+        $target->setName($this->correctName($request->get('name')));
         $target->save();
 
         return $this->adminJson(['success' => true, 'id' => $target->getId()]);
@@ -129,6 +134,7 @@ public function ruleSaveAction(Request $request)
         /** @var Targeting\Rule|Targeting\Rule\Dao $target */
         $target = Targeting\Rule::getById($request->get('id'));
         $target->setValues($data['settings']);
+        $target->setName($this->correctName($target->getName()));
         $target->setConditions($data['conditions']);
         $target->setActions($data['actions']);
         $target->save();
@@ -208,7 +214,7 @@ public function targetGroupListAction(Request $request)
         foreach ($list->load() as $targetGroup) {
             $targetGroups[] = [
                 'id' => $targetGroup->getId(),
-                'text' => $targetGroup->getName(),
+                'text' => htmlspecialchars($targetGroup->getName()),
                 'active' => $targetGroup->getActive(),
                 'qtip' => $targetGroup->getId(),
             ];
@@ -230,7 +236,7 @@ public function targetGroupAddAction(Request $request, CoreCacheHandler $cache,
     {
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = new TargetGroup();
-        $targetGroup->setName($request->get('name'));
+        $targetGroup->setName($this->correctName($request->get('name')));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);
@@ -300,6 +306,7 @@ public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache,
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = TargetGroup::getById($request->get('id'));
         $targetGroup->setValues($data['settings']);
+        $targetGroup->setName($this->correctName($targetGroup->getName()));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);","[Targeting] Escape/validate names of rules properly (#11205)

* [Targeting] Escape/validate names of rules properly

* Update bundles/AdminBundle/Controller/Admin/TargetingController.php

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>","vuln-fix: Sanitize and encode user input in targeting names and lists

The application failed to sanitize special characters in targeting rule and group names, allowing injection of unsafe characters that could disrupt system behavior or enable XSS attacks.
This exposed users to cross-site scripting risks and potential data corruption by permitting malicious input to be stored and rendered without proper encoding or filtering.
The fix introduces character replacement to sanitize names and applies HTML escaping when rendering names in lists, preventing injection and ensuring safe output.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.23529411764705882,"[('escape', 'secword', ''), ('validate', 'secword', ''), ('#11205', 'ISSUE', ''), ('escape', 'SECWORD', ''), ('validate', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('targetingcontroller.php', 'URL', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('injection', 'secword', ''), ('unsafe', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('cross-site scripting', 'secword', ''), ('malicious', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('escaping', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
110,CWE-79,GHSA-3q55-66g3-p8xq,"@@ -834,10 +834,262 @@ function get_dangerous_files_extentions()
             'xqt',        //    SuperCalc Macro File',
             'xys',        //    XYplorer Script File',
             'zl9',        //    ZoneAlarm Quarantined EXE File
-
-
             'swf',        //    Flash File
 
+            'key',
+            'asax',
+            'btapp',
+            'xd',
+            'fwtemplate',
+            'crdownload',
+            'whtt',
+            'ssp',
+            'fmp',
+            'jspa',
+            'obml16',
+            'a5w',
+            'crt',
+            'vrt',
+            'website',
+            'p7c',
+            'dll',
+            'php',
+            'mjs',
+            'dhtml',
+            'xul',
+            'bml',
+            'download',
+            'cshtml',
+            'vsdisco',
+            'codasite',
+            'webbookmark',
+            'rjs',
+            'wsdl',
+            'dml',
+            'aro',
+            'dcr',
+            'shtml',
+            'dochtml',
+            'dwt',
+            'spc',
+            'a4p',
+            'htaccess',
+            'ascx',
+            'pac',
+            'p7b',
+            'xhtm',
+            'oam',
+            'site',
+            'kit',
+            'aspx',
+            'zul',
+            'tpl',
+            'htm',
+            'seam',
+            'svr',
+            'pem',
+            'url',
+            'dap',
+            'appcache',
+            'chm',
+            'wbs',
+            'htc',
+            'ewp',
+            'gsp',
+            'asr',
+            'der',
+            'master',
+            'stc',
+            'ap',
+            'html',
+            'p12',
+            'xpd',
+            'fwp',
+            'epibrw',
+            'strm',
+            'xss',
+            'node',
+            'disco',
+            'gsp',
+            'pro',
+            'rss',
+            'gne',
+            'sdb',
+            'compressed',
+            'asp',
+            'browser',
+            'php2',
+            'sites2',
+            'dothtml',
+            'bok',
+            'axd',
+            'nzb',
+            'vdw',
+            'obml',
+            'mhtml',
+            'ashx',
+            'con',
+            'rhtml',
+            'alx',
+            'opml',
+            'web',
+            'chat',
+            'csr',
+            'do',
+            'sht',
+            'asa',
+            'cha',
+            'h5p',
+            'qf',
+            'olp',
+            'hyperesources',
+            'sparkle',
+            'razor',
+            'php4',
+            'cms',
+            'mml',
+            'jnlp',
+            'har',
+            'br',
+            'webloc',
+            'srf',
+            'cer',
+            'uhtml',
+            'pptmhtml',
+            'phtml',
+            'xbel',
+            'cfm',
+            'fwtemplateb',
+            'jspx',
+            'jsp',
+            'xfdl',
+            'zhtml',
+            'stml',
+            'jsonl',
+            'maff',
+            'dbm',
+            'aex',
+            'crl',
+            'mht',
+            'wml',
+            'sass',
+            'xht',
+            'awm',
+            'page',
+            'hdml',
+            'webmanifest',
+            'itms',
+            'sitemap',
+            'shtm',
+            'wpp',
+            'jss',
+            'oth',
+            'ucf',
+            'prf',
+            'freeway',
+            'edge',
+            'iqy',
+            'vrml',
+            'mvc',
+            'wdgt',
+            'discomap',
+            'psp',
+            'hxs',
+            'adr',
+            'hype',
+            'csp',
+            'xhtml',
+            'webarchive',
+            'qbo',
+            'jhtml',
+            'svc',
+            'phtm',
+            'rw3',
+            'tpl',
+            'stl',
+            'wbxml',
+            'p7',
+            'ndjson',
+            'ognc',
+            'fwtb',
+            'muse',
+            'vbd',
+            'sites',
+            'rt',
+            'esproj',
+            'private',
+            'srl',
+            'zhtml',
+            'vbhtml', 
+            'hypetemplate',
+            'obml15',
+            'hypesymbol',
+            'pub',
+            'ece',
+            'mspx',
+            'docmhtml',
+            'xws',
+            'wgp',
+            'tvpi',
+            'woa',
+            'asmx',
+            'xbl',
+            'webhistory',
+            'idc',
+            'jws',
+            'lbc',
+            'att',
+            'tvvi',
+            'zvz',
+            'php3',
+            'webarchivexml',
+            'widget',
+            'swz',
+            'qrm',
+            'bwp',
+            'atom',
+            'cdf',
+            'map',
+            'hdm',
+            'php5',
+            'rwsw',
+            'wgt',
+            'nod',
+            'rflw',
+            'htx',
+            'mvr',
+            'an',
+            'rwp',
+            'lasso',
+            'vlp',
+            'stp',
+            'nxg',
+            'faces',
+            'kcmsf',
+            'ptw',
+            'less',
+            'saveddeck',
+            'ccbjs',
+            'wn',
+            'ppthtml',
+            'jcz',
+            'jvs',
+            'rwtheme',
+            'jst',
+            'mapx',
+            'cpg',
+            'wpx',
+            'qbx',
+            'suck',
+            'iwdgt',
+            'public',
+            'cphd',
+            'moz',
+            'zfo',
+            'stm',
+            'fcgi',
+            'itpc',
+            'cfml'
         );",Update Files.php,"vuln-fix: Expand list of dangerous file extensions to block risky uploads

The application maintained an incomplete list of dangerous file extensions, allowing some potentially harmful files to bypass upload restrictions and be stored or executed.
This posed a security risk by enabling attackers to upload malicious scripts or executables, which could lead to remote code execution or unauthorized system access.
The fix extends the blocked extensions list with numerous additional high-risk file types to improve detection and prevent unsafe file uploads.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('high', 'SEVERITY', ''), ('improve', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
111,CWE-79,GHSA-q73m-3q7r-fpf7,"@@ -325,7 +325,7 @@ public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
 			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
-			'.mov','.webmv','.m3u8a','.flac','.mkv',
+			'.mov','.webmv','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',","Merge pull request #1632 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Restrict allowed file extensions to prevent unsafe uploads

The file upload validation allowed the '.m3u8a' extension, which is not a standard media or document format and could be exploited to upload malicious files.
This posed a security risk by enabling attackers to bypass file type restrictions and potentially execute arbitrary code or deliver malware through crafted uploads.
The fix removes the unsupported '.m3u8a' extension from the allowed list, tightening validation to only permit recognized safe file types.

Weakness: CWE-434
Severity: High
CVSS: 7.5",0.23529411764705882,"[('#1632', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('exploited', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('malware', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
112,"CWE-80', 'CWE-79', 'CWE-116",GHSA-vmhh-xh3g-j992,"@@ -287,7 +287,7 @@
       &lt;form action=""$doc.getURL()"" method=""post""&gt;
         &lt;input type=""hidden"" name=""form_token"" value=""$services.csrf.token"" /&gt;
         &lt;input type=""hidden"" name=""action"" value=""create""/&gt;
-        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$request.newThemeName"" /&gt;
+        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$escapetool.xml($request.newThemeName)"" /&gt;
         &lt;input type=""submit"" value=""$services.localization.render('platform.flamingo.themes.home.create.confirm')"" class=""button""/&gt;
       &lt;/form&gt;
     {{/html}}",XWIKI-19294: Fix bad escaping,"vuln-fix: Escape newThemeName input to prevent XML injection

The form included user input for newThemeName without escaping, allowing injection of malicious XML content into the rendered page.
This exposed the application to XML injection attacks that could manipulate page structure or execute unintended scripts in the client context.
The fix applies XML escaping to the newThemeName value before rendering it in the hidden input field, ensuring safe output encoding.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xml injection', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('xml injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
113,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -196,7 +196,7 @@
                                 <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
                                 <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%=Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
                                 <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
                                 <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />","[DS-4453] Escape spellcheck, autocomplete HTML (JSPUI)","vuln-fix: Sanitize spell check query output to prevent XSS

The application rendered the spell check suggestion without properly escaping HTML entities, allowing injection of malicious scripts via crafted spellCheckQuery input.
This exposed users to cross-site scripting attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and potentially steal sensitive data or hijack sessions.
The fix applies HTML entity encoding to the displayed spell check query, ensuring any special characters are safely escaped before rendering in the page.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('hijack', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
114,CWE-79,GHSA-gq77-3r6x-383w,"@@ -301,6 +301,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
 			|| $isDangerStr($filename , ""%"")
+			|| $isDangerStr($filename , "".xml"")
 		) {
 			return true;
 		}",file upload bug,"vuln-fix: Block XML files in dangerous filename check

The filename validation function did not consider "".xml"" extensions as dangerous, allowing potentially harmful XML files to bypass security filters.
This omission exposed the system to risks such as XML External Entity (XXE) attacks or malicious XML payload processing.
The fix adds "".xml"" to the list of blocked extensions, preventing unsafe XML files from being accepted.

Weakness: CWE-611
Severity: High
CVSS: 7.5",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-611', 'CWEID', ''), ('high', 'SEVERITY', '')]"
115,CWE-79,GHSA-6346-5r4h-ff5x,"@@ -158,7 +158,7 @@ class=""btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text
             $(document).ready(function () {
                 var searchOrdersByProduct = new mw.autoComplete({
                     element: ""#js-orders-search-by-products"",
-                    placeholder: ""<?php if ($productKeyword) { echo $productKeyword; } else { _e(""Search by products...""); }?>"",
+                    placeholder: ""<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(""Search by products...""); }?>"",
                     autoComplete:true,
                     ajaxConfig: {
                         method: 'get',",Update order_filtering.blade.php,"vuln-fix: Sanitize product keyword in autocomplete placeholder

The autocomplete input placeholder used unsanitized user-supplied product keywords directly in HTML, allowing injection of malicious scripts.
This exposed users to cross-site scripting (XSS) attacks where attackers could execute arbitrary JavaScript in the context of the affected page.
The fix applies xss_clean to sanitize the product keyword before rendering it in the placeholder attribute, preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', ''), ('order_filtering.blade.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('keyword', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('keywords', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('xss_clean', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('keyword', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
116,CWE-79,GHSA-6jp6-9rf9-gc66,"@@ -37,6 +37,7 @@
 from django.template.loader import render_to_string
 from django.urls import reverse
 from django.utils import timezone
+from django.utils.html import escape
 from django.utils.http import urlencode
 from django.utils.safestring import mark_safe
 from django.utils.translation import gettext
@@ -318,7 +319,7 @@ def render(self, name, value, attrs=None, renderer=None, **kwargs):
             # Render textare
             textarea = super().render(fieldname, val, attrs, renderer, **kwargs)
             # Label for plural
-            label = str(unit.translation.language)
+            label = escape(unit.translation.language)
             if len(values) != 1:
                 label = f""{label}, {plural.get_plural_label(idx)}""
             ret.append(","translate: Add missing escaping to language name

Fixes https://hackerone.com/reports/1486674","vuln-fix: Escape language label to prevent XSS in form rendering

The form rendering code inserted user-controllable language labels directly into HTML without escaping, allowing injection of malicious scripts.
This exposed the application to cross-site scripting (XSS) attacks where attackers could execute arbitrary JavaScript in users’ browsers.
The fix applies HTML escaping to the language label before rendering, ensuring unsafe characters are neutralized and scripts cannot run.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
117,CWE-79,GHSA-3x96-m42v-hvh5,"@@ -87,11 +87,13 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
+    $autoSize = xss_clean($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
         $type = $_GET['type'];
     }
+    $type = xss_clean($type);
 
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
@@ -403,7 +405,9 @@
                 if (mw.notification) {
                     mw.notification.success('<?php _ejs('Settings are saved') ?>');
                 }
+                <?php if (isset($params['id'])) : ?>
                 mw.reload_module_parent('#<?php print $params['id']  ?>')
+                <?php endif; ?>
 
             });
 
@@ -440,9 +444,11 @@
 <body class=""mw-external-loading loading"">
 <div id=""settings-main"">
     <div id=""settings-container"">
-        <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
-             id=""module-id-<?php print $params['id'] ?>"">{content}
-        </div>
+        <?php if (isset($params['id'])) : ?>
+            <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
+                 id=""module-id-<?php print $params['id'] ?>"">{content}
+            </div>
+        <?php endif; ?>
     </div>
 </div>",update,"vuln-fix: Sanitize GET parameters to prevent XSS in module settings

The code failed to sanitize user-supplied GET parameters before using them in the module settings interface, allowing injection of malicious scripts.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in users’ browsers and hijack sessions or steal data.
The fix applies xss_clean sanitization to critical GET inputs and conditionally renders HTML elements only when safe parameters are present, mitigating script injection risks.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('hijack', 'secword', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('xss_clean', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('safe', 'secword', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
118,CWE-79,GHSA-cqhr-jqvc-qw9p,"@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,
 		if (message != null) {
 			writeln(SCRIPT_BEGIN);
 			// writeDirectly pour ne pas gérer de traductions si le message contient '#'
-			writeDirectly(""alert(\"""" + javascriptEncode(message) + ""\"");"");
+			writeDirectly(""alert(\"""" + htmlEncodeButNotSpace(javascriptEncode(message)) + ""\"");"");
 			writeln("""");
 			// redirect vers une url évitant que F5 du navigateur ne refasse l'action au lieu de faire un refresh
 			if (partToRedirectTo == null) {",fix XSS,"vuln-fix: Encode alert message to prevent XSS injection

The code directly injected user-controlled messages into JavaScript alert calls without proper HTML encoding, allowing injection of malicious scripts.
This created a cross-site scripting (XSS) risk where attackers could execute arbitrary JavaScript in users’ browsers, compromising session integrity and data confidentiality.
The fix applies HTML encoding alongside JavaScript encoding to sanitize message content, preventing script injection via alert dialogs.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
119,CWE-79,GHSA-3r95-23jp-mhvg,"@@ -513,10 +513,10 @@ function factory($, Helper, Icons) {
      */
     function setStageHeadline(title) {
       if (getUtility().isUndefinedOrNull(title)) {
-        title = buildTitleByFormElement();
+        title = buildTitleByFormElement().text();
       }
 
-      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).html(title);
+      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).text(title);
     };
 
     /**
@@ -981,10 +981,10 @@ function factory($, Helper, Icons) {
 
       getHelper()
         .getTemplatePropertyDomElement('_type', template)
-        .append(getFormElementDefinition(formElement, 'label'));
+        .append(document.createTextNode(getFormElementDefinition(formElement, 'label')));
       getHelper()
         .getTemplatePropertyDomElement('_identifier', template)
-        .append(formElement.get('identifier'));
+        .append(document.createTextNode(formElement.get('identifier')));
     };
 
     /**
@@ -1029,7 +1029,7 @@ function factory($, Helper, Icons) {
 
             getHelper()
               .getTemplatePropertyDomElement('_label', rowTemplate)
-              .append(collectionElementConfiguration['label']);
+              .append(document.createTextNode(collectionElementConfiguration['label']));
             $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))
               .append(rowTemplate.html());
           }
@@ -1089,7 +1089,7 @@ function factory($, Helper, Icons) {
           }
         }
 
-        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(label);
+        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(document.createTextNode(label));
 
         if (isPreselected) {
           getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(","[SECURITY] Ensure text preview of multivalue items in form editor

Multivalue items in the form editor user interface were previewed
as HTML, but should be treated as scalar text only.

Resolves: #96743
Releases: main, 11.5, 10.4
Change-Id: I5e8dab26119490ecf19ac5d48c2bc7a5a00daaad
Security-Bulletin: TYPO3-CORE-SA-2022-003
Security-References: CVE-2022-31048
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/73297
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Prevent XSS by escaping dynamic HTML content

The code inserted user-controllable strings directly into the DOM using html() or append(), allowing injection of malicious HTML or scripts.
This exposed the application to cross-site scripting (XSS) attacks where attackers could execute arbitrary JavaScript in users’ browsers.
The fix replaces unsafe HTML insertion with text nodes and text() methods to properly escape content and prevent script execution.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.17647058823529413,"[('security', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('#96743', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('escape', 'secword', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
120,CWE-79,GHSA-jp6r-xcjj-5h7r,"@@ -79,7 +79,7 @@ class TextEncodingBruteForce extends Operation {
         let table = ""<table class='table table-hover table-sm table-bordered table-nonfluid'><tr><th>Encoding</th><th>Value</th></tr>"";
 
         for (const enc in encodings) {
-            const value = Utils.printable(encodings[enc], true);
+            const value = Utils.escapeHtml(Utils.printable(encodings[enc], true));
             table += `<tr><td>${enc}</td><td>${value}</td></tr>`;
         }",Fixed XSS in 'Text Encoding Brute Force. Closes #539,"vuln-fix: Escape HTML output in encoding brute force table

The encoding brute force operation rendered user-controllable encoding values without escaping, allowing injection of malicious HTML or scripts into the output table.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in the victim’s browser context.
The fix applies HTML escaping to all encoding values before insertion into the table, preventing injection of executable code.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('#539', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
121,CWE-79,GHSA-rxch-gp62-574w,"@@ -170,7 +170,7 @@ public function transformAssignedTo($asset)
         }
         return $asset->assigned ? [
             'id' => $asset->assigned->id,
-            'name' => $asset->assigned->display_name,
+            'name' => e($asset->assigned->display_name),
             'type' => $asset->assignedType()
         ] : null;
     }","Added escape to assigned_to API response

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape assigned display name to prevent XSS

The code returned user-controlled display names without escaping, allowing injection of malicious HTML or scripts in rendered output.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in victims’ browsers.
The fix applies proper escaping to the display name before output, ensuring unsafe characters are neutralized.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('added', 'ACTION', ''), ('escape', 'SECWORD', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
122,CWE-79,GHSA-6465-r752-2h8v,"@@ -24,6 +24,7 @@
 use FacturaScripts\Core\Base\DataBase\DataBaseWhere;
 use FacturaScripts\Core\Lib\Widget\VisualItemLoadEngine;
 use FacturaScripts\Dinamic\Model\CodeModel;
+use FacturaScripts\Dinamic\Model\Page;
 use FacturaScripts\Dinamic\Model\PageOption;
 use FacturaScripts\Dinamic\Model\User;
 use Symfony\Component\HttpFoundation\Response;
@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)
         parent::privateCore($response, $user, $permissions);
         $this->model = new PageOption();
         $this->loadSelectedViewName();
-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;
+        $this->setBackPage();
         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;
         $this->loadPageOptions();
 
@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool
         return true;
     }
 
+    private function setBackPage()
+    {
+        // check if the url is a real controller name
+        $url = $this->request->get('url', '');
+        $pageModel = new Page();
+        foreach ($pageModel->all([], [], 0, 0) as $page) {
+            if (substr($url, 0, strlen($page->name)) === $page->name) {
+                $this->backPage = $url;
+                return;
+            }
+        }
+
+        // set the default back page
+        $this->backPage = $this->selectedViewName;
+    }
+
     /**
      * @param array $column
      * @param string $name","We check the url parameter of the link to ensure that it is a valid controller.
------
Comprobamos el parámetro url del enlace para asegurar que sea un controlador válido.","vuln-fix: Validate backPage parameter to prevent open redirect

The application assigned the backPage URL directly from user input without verifying it matched a valid controller name.
This allowed attackers to craft URLs that redirect users to arbitrary external sites, enabling phishing or other malicious redirections.
The fix adds validation against known page names and defaults to a safe internal page if the input is invalid, preventing open redirect attacks.

Weakness: CWE-601
Severity: High
CVSS: 7.5",0.11764705882352941,"[('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('open redirect', 'secword', ''), ('attackers', 'SECWORD', ''), ('phishing', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('open redirect', 'secword', ''), ('attacks', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('high', 'SEVERITY', '')]"
123,CWE-79,GHSA-2gqg-2rg7-gh33,"@@ -118,8 +118,8 @@ private function formatMessage($message)
         return [
             'severity'  => $this->severityLabel($level),
             'timestamp' => $displayTime,
-            'source'    => $device ? Url::deviceLink($device) : $message['message']['source'],
-            'message'   => $message['message']['message'] ?? '',
+            'source'    => $device ? Url::deviceLink($device) : htmlspecialchars($message['message']['source']),
+            'message'   => htmlspecialchars($message['message']['message'] ?? ''),
             'facility'  => is_numeric($facility) ? ""($facility) "" . __(""syslog.facility.$facility"") : $facility,
             'level'     => (is_numeric($level) && $level >= 0) ? ""($level) "" . __(""syslog.severity.$level"") : $level,
         ];",fix graylog xss (#13931),"vuln-fix: Sanitize log message fields to prevent XSS

The log formatting function did not escape user-supplied message and source fields before rendering, allowing injection of malicious HTML or scripts.
This exposed users viewing logs to cross-site scripting attacks, potentially leading to session hijacking or unauthorized actions within the application.
The fix applies htmlspecialchars to these fields, ensuring special characters are safely encoded and preventing script execution in log views.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', ''), ('#13931', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
124,CWE-79,GHSA-8c76-mxv5-w4g8,"@@ -6,18 +6,30 @@
 
 class SaveOptionApiController
 {
-    public function saveOption(Request $request) {
+    public $whitelistedGroupKeys = [
+        'website' => [
+            'website_head',
+            'website_footer'
+        ]
+    ];
+
+    public function saveOption(Request $request)
+    {
 
         $cleanFromXss = true;
         $option = $request->all();
 
-        // Allow for this keys
+        // Allow for this keys and groups
         if (isset($option['option_key'])) {
-            if ($option['option_key'] == 'website_head') {
-                $cleanFromXss = false;
-            }
-            if ($option['option_key'] == 'website_footer') {
-                $cleanFromXss = false;
+            foreach ($this->whitelistedGroupKeys as $group => $keys) {
+                if ($option['option_group'] == $group) {
+                    foreach ($keys as $key) {
+                        if ($option['option_key'] == $key) {
+                            $cleanFromXss = false;
+                            break;
+                        }
+                    }
+                }
             }
         }",Update SaveOptionApiController.php,"vuln-fix: Restrict XSS cleaning exceptions to whitelisted option keys

The saveOption API previously disabled XSS cleaning for specific option keys without verifying their group context, allowing broader bypass of input sanitization.
This flaw risked injection of malicious scripts through unvalidated inputs in unintended option groups, increasing the attack surface for cross-site scripting.
The fix introduces a whitelist mapping option groups to allowed keys, ensuring XSS cleaning is only disabled for explicitly approved key-group pairs.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', ''), ('saveoptionapicontroller.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('xss', 'secword', ''), ('keys', 'SECWORD', ''), ('bypass', 'secword', ''), ('sanitization', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('unvalidated inputs', 'SECWORD', ''), ('attack surface', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('xss', 'secword', ''), ('key', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
125,CWE-79,GHSA-rp34-85x3-3764,"@@ -34,10 +34,10 @@
 $status = 'ok';
 $message = '';
 
-$transport_id = $vars['transport_id'];
-$name = $vars['name'];
+$transport_id = strip_tags($vars['transport_id']);
+$name = strip_tags($vars['name']);
 $is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');
-$transport_type = $vars['transport-type'];
+$transport_type = strip_tags($vars['transport-type']);
 
 if (empty($name)) {
     $status = 'error';","security - XSS Fix 01

fixing https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/ (#13775)","vuln-fix: Sanitize transport input fields to prevent XSS

The code accepted user input for transport fields without removing HTML tags, allowing injection of malicious scripts into the application.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary JavaScript in victims’ browsers and steal sensitive data.
The fix applies strip_tags to sanitize transport_id, name, and transport_type inputs, removing HTML tags before further processing.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixing', 'ACTION', ''), ('https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/', 'URL', ''), ('#13775', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('transport', 'secword', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('transport', 'secword', ''), ('removing', 'ACTION', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('removing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
126,"CWE-79', 'CWE-116",GHSA-xjfw-5vv5-vjq2,"@@ -58,9 +58,9 @@
       &lt;dd&gt;
         ## TODO: design a real framework to generate form by type
         #if (($descriptor.defaultValue || ""$!descriptor.defaultValue"" != '') &amp;&amp; ($descriptor.type.getName() == 'boolean' || $descriptor.type.getName() == 'int' || $descriptor.type.getName() == 'java.lang.String'))
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$request.get($descriptorId)#else$descriptor.defaultValue#end""/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$escapetool.xml($request.get($descriptorId))#else$descriptor.defaultValue#end""/&gt;
         #else
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$request.get($descriptorId)""#end/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$escapetool.xml($request.get($descriptorId))""#end/&gt;
         #end
       &lt;/dd&gt;
     #end",XWIKI-19293: Fix bad escaping,"vuln-fix: Escape user input in form fields to prevent XSS

User-supplied input was directly injected into HTML form input values without proper escaping, allowing injection of malicious HTML or script code.
This exposed the application to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in users’ browsers and steal sensitive data.
The fix applies XML escaping to all user inputs rendered in form fields, ensuring special characters are safely encoded and preventing script injection.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
127,CWE-79,GHSA-qq74-vgcf-54c3,"@@ -311,6 +311,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".asa"")
 			|| $isDangerStr($filename , "".cshtml"")
 			|| $isDangerStr($filename , "".axd"")
+			|| $isDangerStr($filename , ""htm"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Block .htm extension in dangerous filename check

The filename validation function did not consider files with the "".htm"" extension as dangerous, allowing potentially harmful files to bypass security filters.
This omission could enable attackers to upload or execute malicious HTML files, leading to cross-site scripting or unauthorized content delivery.
The fix adds "".htm"" to the list of disallowed extensions, enhancing filename validation to prevent risky file handling.

Weakness: CWE-434
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
128,CWE-79,GHSA-gx6h-936c-vrrr,"@@ -45,7 +45,7 @@
       <div>
         <input type=""hidden"" name=""form_token"" value=""$!services.csrf.token"" />
         <input type=""hidden"" name=""register"" value=""1"" />
-        <input type=""hidden"" name=""xredirect"" value=""$!request.xredirect"" />
+        <input type=""hidden"" name=""xredirect"" value=""$escapetool.xml($!request.xredirect)"" />
         #set ($class = $xwiki.getClass('XWiki.XWikiUsers'))
         #set ($obj = $class.newObject())
         #set ($serverobj = $class.newObject())","XWIKI-19291: redirect parameter is badly handled in register page

  * Fix the typo","vuln-fix: Escape xredirect parameter to prevent XML injection

The xredirect parameter was directly embedded into a hidden input field without escaping, allowing injection of malicious XML or HTML content.
This posed a security risk by enabling cross-site scripting (XSS) or markup injection attacks that could manipulate page structure or execute arbitrary scripts.
The fix applies XML escaping to the xredirect value before rendering it in the input field, ensuring special characters are safely encoded.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xml injection', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
129,CWE-79,GHSA-ff28-f46g-r9g8,"@@ -314,6 +314,7 @@ func runWeb(c *cli.Context) error {
 				}
 				defer fr.Close()
 
+				c.Header().Set(""Content-Security-Policy"", ""default-src 'none'; style-src 'unsafe-inline'; sandbox"")
 				c.Header().Set(""Cache-Control"", ""public,max-age=86400"")
 				c.Header().Set(""Content-Disposition"", fmt.Sprintf(`inline; filename=""%s""`, attach.Name))",attachment: set CSP header in the serving endpoint (#6926),"vuln-fix: Add Content-Security-Policy header to web responses

The web server responses lacked a Content-Security-Policy header, allowing browsers to execute potentially unsafe scripts or styles from untrusted sources.
This exposed users to cross-site scripting (XSS) and other injection attacks by permitting malicious content to run in the context of the web application.
The patch adds a restrictive Content-Security-Policy header that disables all content by default, allows only inline styles, and enables sandboxing to mitigate script execution risks.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('csp header', 'SECWORD', ''), ('#6926', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('security', 'secword', ''), ('server', 'SECWORD', ''), ('security', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('untrusted sources', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('security', 'SECWORD', ''), ('mitigate', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
130,CWE-79,GHSA-74qp-233x-p5j8,"@@ -15,13 +15,17 @@
  * limitations under the License.
  */
 
+function escapeHtml(unescapedText) {
+  return $(""<div>"").text(unescapedText).html()
+}
+
 function loadSessionsTable(sessions) {
   $.each(sessions, function(index, session) {
     $(""#interactive-sessions .sessions-table-body"").append(
       ""<tr>"" +
         tdWrap(uiLink(""session/"" + session.id, session.id)) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.kind) +
@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {
       ""<tr>"" +
         tdWrap(session.id) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.state) +
@@ -79,4 +83,4 @@ $(document).ready(function () {
       $(""#all-sessions"").append('<h4>No Sessions or Batches have been created yet.</h4>');
     }
   });
-});
\ No newline at end of file
+});","Add html escape to session name

## What changes were proposed in this pull request?

The PR adds HTML escaping to session names.

## How was this patch tested?

Manual test.

Author: Marco Gaido <mgaido@apache.org>

Closes #302 from mgaido91/escape_html.","vuln-fix: Escape HTML in session and batch names to prevent XSS

The application rendered session and batch names directly into HTML without escaping, allowing injection of malicious HTML or scripts by attackers.
This exposed users to cross-site scripting (XSS) attacks, enabling execution of arbitrary JavaScript in their browsers and potential session hijacking or data theft.
The fix introduces proper HTML escaping of these fields before insertion into the DOM, neutralizing embedded scripts and preventing XSS.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'secword', ''), ('changes', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'secword', ''), ('patch', 'ACTION', ''), ('manual', 'DETECTION', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'SECWORD', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('xss', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
131,CWE-79,GHSA-c7pp-g2v2-2766,"@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {
                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(""["");
                 data = response.substring(response.indexOf(""[""), endIndex);
 
-                var get_data = new Function(""\""use strict\""; return "" + data);
-                realData = get_data();
-
-                parsedResponse.push(realData);
+                var json = JSON.parse(data);
+                parsedResponse.push(json);
 
                 // prepare response for next loop
                 response = response.substring(response.indexOf(""[""), response.length);
@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {
             return emails;
         }
 
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        api.tracker.view_data = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
+        api.tracker.view_data = json;
 
         for(var i in api.tracker.view_data) {
             if (typeof(api.tracker.view_data[i]) === ""function"") {
@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {
         if (!get_data) {
             return {};
         }
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        var cdata = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
 
-        api.tracker.email_data = cdata[0];
+        api.tracker.email_data = json[0];
         return api.tools.parse_email_data(api.tracker.email_data);
     };",Replace new Function() with JSON.parse(),"vuln-fix: Replace unsafe dynamic code execution with JSON parsing

The code used dynamic Function constructors to evaluate string data as JavaScript, enabling execution of arbitrary code from untrusted input.
This posed a critical security risk by allowing attackers to inject and run malicious scripts, leading to remote code execution within the application context.
The fix replaces dynamic evaluation with safe JSON.parse calls, ensuring only valid JSON data is processed without executing arbitrary code.

Weakness: CWE-95
Severity: Critical
CVSS: 9.8",0.11764705882352941,"[('json.parse', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('remote code execution', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('json.parse', 'URL', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-95', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
132,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -141,7 +141,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -153,7 +153,12 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
-</script>		
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
+</script>
 </c:set>
 
 <dspace:layout titlekey=""jsp.search.title"">",[DS-4453] Discovery autocomplete HTML escaping (JSPUI),"vuln-fix: Escape HTML in filter labels to prevent XSS

The filter label rendering code directly inserted user-controlled values into HTML without escaping, allowing injection of malicious scripts.
This exposed users to cross-site scripting attacks where attackers could execute arbitrary JavaScript in victims’ browsers, compromising session and data security.
The fix adds a generic HTML escape function to sanitize displayed values before insertion, preventing script injection via filter labels.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escape', 'secword', ''), ('sanitize', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
133,CWE-79,GHSA-gj85-pvp5-mvf9,"@@ -19,7 +19,7 @@ function autoload_class($class) {
 require_once dirname(__FILE__) . '/../config.php';
 require_once dirname(__FILE__) . '/../src/Storage.php';
 
-$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';
+$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';
 $GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';
 $GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';
 $GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';",Sanitize input,"vuln-fix: Sanitize server parameter to prevent XSS attacks

The application directly assigned the 'server' GET parameter to a global variable without sanitization, allowing injection of malicious HTML or JavaScript code.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to execute arbitrary scripts in victims' browsers and steal sensitive data or hijack sessions.
The fix applies htmlspecialchars to the 'server' parameter, encoding special characters and preventing script injection through this input.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('sanitize', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('server', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('server', 'secword', ''), ('sanitization', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'secword', ''), ('hijack', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('server', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
134,CWE-79,GHSA-3j9m-hcv9-rpj8,"@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replace('{{', '%7B%7B').replace('}}', '%7D%7D');
+  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
 }

From: Dan Cech <dcech@grafana.com>

 packages/grafana-data/src/text/sanitize.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
+  return url.replace(/\{\{/g, '%7B%7B').replace(/\}\}/g, '%7D%7D');
 }","Merge pull request #151 from grafana/dcech/sanitize-replaceAll

use global replace when sanitizing urls in 8.2.3","vuln-fix: Correct Angular interpolation sanitization to prevent injection

The sanitization function used replaceAll without escaping special characters, causing incomplete replacement of Angular interpolation patterns in URLs.
This allowed attackers to inject unsanitized template expressions, potentially leading to client-side template injection or XSS attacks.
The fix replaces replaceAll with global regex replace calls to ensure all interpolation delimiters are properly encoded and neutralized.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('#151', 'ISSUE', ''), ('sanitize', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('8.2.3', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
135,CWE-79,GHSA-hm45-mgqm-gjm4,"@@ -72,6 +72,7 @@ <h1>{{ _('Loading servers...') }}</h1>
                 } else {
                     var base_guild_url = ""{{ url_for('home_blueprint.guild', guild='123456789123456789') }}""
                     $(""#serverrow"").html("""")
+                    let counter = 0
                     for (let g of json.data) {
                         var current_guild_url = base_guild_url.replace(""123456789123456789"", g.id)
                         $(""#serverrow"").append(`
@@ -80,13 +81,16 @@ <h1>{{ _('Loading servers...') }}</h1>
                                     <div class=""card h-100"" onmouseover=""playGif(this)"" onmouseout=""stopGif(this)"">
                                         <img class=""card-img-top"" src=""${g.icon}png"" alt=""Card image cap"" data-src-url=""${g.icon}"" data-is-animated=${g.animated}>
                                         <div class=""card-body"">
-                                            <h5 class=""card-title"">${g.name}</h5>
-                                            <p class=""card-text"">Owner: ${g.owner}</p>
+                                            <h5 class=""card-title"" id=""guild-counter-${counter}"">Loading...</h5>
+                                            <p class=""card-text"" id=""owner-counter-${counter}"">Owner: Loading...</p>
                                         </div>
                                     </div>
                                 </a>
                             </div>
                         `)
+                        $(`#guild-counter-${counter}`).text(g.name)
+                        $(`#owner-counter-${counter}`).text(g.owner)
+                        counter += 1
                     }
                 }
             }",Fix unformatted HTML,"vuln-fix: Prevent XSS by avoiding direct HTML injection of unescaped data

The code directly injected unescaped user-controlled guild names and owner fields into HTML, allowing malicious scripts to execute in the client browser.
This exposed users to cross-site scripting (XSS) attacks, enabling attackers to steal session data or perform actions on behalf of victims.
The fix defers setting text content via safe DOM text methods instead of direct HTML interpolation, preventing script injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
136,CWE-79,GHSA-c53x-wwx2-pg96,"@@ -21,7 +21,7 @@ const liljs = (elem, data = {}) => {
      * @param {String} property Name of the property to render
      * @param {String} value (Optional) A value to use instead of a property (used in lil-list-text)
      */
-    const setText = (elem, property, value) => elem.innerHTML = value || state[property].value;
+    const setText = (elem, property, value) => elem.textContent = value || state[property].value;
 
     /** Set style helper function
      * @function setStyle
@@ -43,7 +43,7 @@ const liljs = (elem, data = {}) => {
      */
     const setList = (elem, property) => {
       //TODO: Find a way to update without clearing lists
-      elem.innerHTML = """";
+      elem.textContent = """";
       state[property].value.forEach(value => {
         let clone = document.importNode(state[property].template.content, true);
         clone.querySelectorAll(""[lil-list-text]"").forEach(node => {","Use textContent over innerHTML so you can bind untrusted text values
without the possibility of an XSS attack.","vuln-fix: Replace innerHTML with textContent to prevent XSS

The code used innerHTML to set text content from state or input, allowing injection of malicious HTML or scripts into the DOM.
This exposed the application to cross-site scripting (XSS) attacks where attackers could execute arbitrary JavaScript in users’ browsers.
The fix replaces innerHTML assignments with textContent to safely insert text without interpreting it as HTML.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('untrusted', 'secword', ''), ('xss', 'SECWORD', ''), ('attack', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
137,CWE-79,GHSA-vhm6-gw82-6f8j,"@@ -62,7 +62,7 @@
                             echo ""
                                 <tr>
                                     <td>{$rule['name']}</td>
-                                    <td><i>"" . htmlentities($rule_display) . ""</i></td>
+                                    <td><i>"" . htmlentities(strip_tags($rule_display)) . ""</i></td>
                                     <td>{$rule['severity']}</td>
                                     <td>{$rule['id']}</td>
                                 </tr>",Resolved XSS issue from alert rule list modal (#13805),"vuln-fix: Sanitize rule display output to prevent XSS

The application outputted rule display content without removing embedded HTML tags, allowing malicious scripts to be injected and executed in users' browsers.
This exposed users to cross-site scripting attacks, risking session hijacking, data theft, or unauthorized actions within the application context.
The fix applies strip_tags before htmlentities to remove HTML tags, ensuring that only safe text is encoded and rendered.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('removing', 'ACTION', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'SECWORD', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('remove', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
138,CWE-79,GHSA-mw75-qvfr-hpmr,"@@ -303,6 +303,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
+			|| $isDangerStr($filename , "".xxhtml"")
 		) {
 			return true;
 		}
@@ -312,4 +313,4 @@ public function isDangerFilename($filename){
 
 
 
-}
\ No newline at end of file
+}","Merge pull request #1628 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Extend dangerous filename checks to include .xxhtml extension

The filename validation function did not consider files with the .xxhtml extension as dangerous, allowing potentially unsafe files to bypass security filters.
This omission could enable attackers to upload or serve malicious files disguised with this extension, leading to unauthorized code execution or data exposure.
The fix adds .xxhtml to the list of dangerous filename patterns, improving input validation and preventing unsafe file handling.

Weakness: CWE-434
Severity: Medium
CVSS: 5.0",0.23529411764705882,"[('#1628', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious files', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('data exposure', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
139,CWE-79,GHSA-h3vq-wv8j-36gw,"@@ -50,8 +50,21 @@ module.exports = function (svgString) {
     // Empty script tags and javascript executing
     svgString = svgString.replace(/<script[\s\S]*>[\s\S]*<\/script>/, '<script></script>');
     
-    // Remove error handlers
-    svgString = svgString.replace(/onerror=[\s\S]*['""].*?['""]/i, '');
+    // Remove event handlers
+    const eventNames = [
+        'onbegin', 'onend', 'onrepeat', 'onabort', 'onerror', 'onresize', 'onscroll', 'onunload', 'oncopy',
+        'oncut', 'onpaste', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose',
+        'oncuechange', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave',
+        'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onloadeddata', 'onloadedmetadata',
+        'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove',
+        'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress',
+        'onkeyup', 'onload', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpause', 'onplay',
+        'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onseeked', 'onseeking',
+        'onselect', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange',
+        'onwaiting', 'onactivate', 'onfocusin', 'onfocusout'
+    ];
+    const eventsRegex = new RegExp(`(${eventNames.join('|')})\\s*=\\s*['""].*['""]`, 'i');
+    svgString = svgString.replace(eventsRegex, '');
 
     return svgString;
 };",Remove lots of event handlers,"vuln-fix: Remove all event handler attributes from SVG input

The SVG sanitizer only removed onerror attributes, leaving many other event handler attributes intact that could execute malicious JavaScript.
This allowed attackers to embed harmful scripts in SVGs via various event handlers, leading to cross-site scripting (XSS) vulnerabilities when rendered.
The fix expands removal to a comprehensive list of event handler attributes, stripping them all to prevent script execution from SVG content.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('remove', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('removed', 'ACTION', ''), ('onerror', 'FLAW', ''), ('malicious', 'secword', ''), ('attackers', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
140,CWE-79,GHSA-q6mp-562x-ggvv,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',css,json,zip,gzip,csv,7z';
+                $are_allowed .= ',css,json,zip,gzip,psd,csv,7z';
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,odt,pages,rtf,txt,pps,ppt,pptx,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,odt,rtf,txt,pps,ppt,pptx,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",update,"vuln-fix: Restrict allowed file upload extensions to prevent unsafe types

The file upload handler included potentially unsafe file types like PSD in allowed extensions without proper validation, increasing risk of malicious file uploads.
This could enable attackers to upload harmful files that might be executed or exploited on the server, leading to remote code execution or data compromise.
The fix removes risky extensions from the allowed list, tightening upload restrictions to only safe, validated file types.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'secword', ''), ('unsafe', 'SECWORD', ''), ('malicious file', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('exploited', 'SECWORD', ''), ('server', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
