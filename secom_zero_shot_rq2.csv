id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message
0,{'CWE-79'},GHSA-2xw8-j43j-5vxp,"@@ -18,7 +18,7 @@
 $report = new ElggReportedContent();
 $report->owner_guid = elgg_get_logged_in_user_guid();
 $report->title = $title;
-$report->address = $address;
+$report->address = elgg_normalize_site_url($address);
 $report->description = $description;
 $report->access_id = $access;",fix(reported_content): sanitize report URLs,"Fix improper handling of user input (CWE-20)

The vulnerability involved directly assigning user input to a variable without proper validation. This is a security risk as it can lead to unexpected behaviors or security issues, such as URL manipulation. The issue was fixed by normalizing the input using the `elgg_normalize_site_url` function before assignment.

Weakness: CWE-20
Severity: Medium"
1,{'CWE-79'},GHSA-pjpc-87mp-4332,"@@ -8,6 +8,7 @@
  *
  * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
  */
+
 if ($item = ((isset($event['extra'])) ? $event['extra']['stat'] : false)): ?>
     <p>
         <?php if (!empty($item['isFailed'])) : ?>
@@ -63,7 +64,7 @@
             endif;
             ?>
             <?php if ($counter > 1): ?><hr/><?php endif; ?>
-            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $detail['useragent']; ?>
+            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $view->escape($detail['useragent']); ?>
             <?php ++$counter; ?>
         <?php endforeach; ?>
         <?php","Merge pull request from GHSA-pjpc-87mp-4332

* sanitise user agent before displaying

* Update app/bundles/EmailBundle/Views/SubscribedEvents/Timeline/index.html.php

Co-authored-by: John Linhart <admin@escope.cz>

* removed obsolete use statement

Co-authored-by: John Linhart <admin@escope.cz>","Fix potential XSS vulnerability in user agent display (CWE-79)

An unsanitized user agent string was being rendered in the output. 
This creates a risk of cross-site scripting (XSS) attacks that could compromise user security. 
The user agent string is now properly escaped before being displayed.

Weakness: CWE-79
Severity: High
CVSS: 7.5"
2,{'CWE-79'},GHSA-5x33-h32w-6vr2,"@@ -211,7 +211,7 @@
 print('<div class=""tag-management-form generalbox""><label class=""accesshide"" for=""id_tagfilter"">'. get_string('search') .'</label>'.
     '<input type=""hidden"" name=""tc"" value=""'.$tagcollid.'"" />'.
     '<input type=""hidden"" name=""perpage"" value=""'.$perpage.'"" />'.
-    '<input id=""id_tagfilter"" name=""filter"" type=""text"" value=' . s($filter) . '>'.
+    '<input id=""id_tagfilter"" name=""filter"" type=""text"" value=""' . s($filter) . '"">'.
     '<input value=""'. s(get_string('search')) .'"" type=""submit"" class=""btn btn-secondary""> '.
     ($filter !== '' ? html_writer::link(new moodle_url($PAGE->url, array('filter' => null)),
         get_string('resetfilter', 'tag'), array('class' => 'resetfilterlink')) : '').",MDL-69340 tag: Correct the filter input HTML in the tag manager,"Fix improper escaping of HTML attribute value (CWE-79)

Improperly escaped HTML attributes can lead to Cross-Site Scripting (XSS) vulnerabilities. 
This poses a security risk as attackers can inject malicious scripts, potentially compromising user data or session integrity. 
The issue was fixed by ensuring proper quotation of the value being assigned to the attribute.

Weakness: Cross-Site Scripting (CWE-79)
Severity: High
CVSS: 7.5"
3,"{'CWE-79', 'CWE-843'}",GHSA-5f38-9jw2-6r6h,"@@ -96,8 +96,15 @@ function escapeEntities (value) {
   let i
   let j
 
-  if (value === undefined || typeof value === 'boolean' || typeof value === 'object') { // Cannot escape on these values
-    return value
+  if (typeof value === 'object') { // Cannot escape on this value
+    if (Array.isArray(value) && value.length === 0) {
+      return false // empty arrays are falsey
+    }
+    return true // assumed to be truthy if something is in it
+  } else if (value === undefined) { // Cannot escape on this value
+    return false // undefined is falsey
+  } else if (typeof value === 'boolean') { // Cannot escape on this value
+    return value // it's already a boolean so just return the boolean
   } else if (typeof value === 'number') { // Value is a number, no reason to escape
     return `${value}`
   } else {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

@@ -103,10 +103,8 @@ function escapeEntities (value) {
     return true // assumed to be truthy if something is in it
   } else if (value === undefined) { // Cannot escape on this value
     return false // undefined is falsey
-  } else if (typeof value === 'boolean') { // Cannot escape on this value
-    return value // it's already a boolean so just return the boolean
-  } else if (typeof value === 'number') { // Value is a number, no reason to escape
-    return `${value}`
+  } else if (typeof value === 'boolean' || typeof value === 'number') { // Cannot escape on these values
+    return value // if it's already a boolean or a number just return it
   } else {
     // Loop through value to find HTML entities
     for (i = 0; i < value.length; i++) {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

@@ -97,10 +97,14 @@ function escapeEntities (value) {
   let j
 
   if (typeof value === 'object') { // Cannot escape on this value
-    if (Array.isArray(value) && value.length === 0) {
-      return false // empty arrays are falsey
+    if (Array.isArray(value)) {
+      if (value.length === 0) {
+        return false // empty arrays are falsey
+      } else {
+        return '[Array]' // print that it is an array with content in it, but do not print the contents
+      }
     }
-    return true // assumed to be truthy if something is in it
+    return '[Object]' // just print that it is an object, do not print the contents
   } else if (value === undefined) { // Cannot escape on this value
     return false // undefined is falsey
   } else if (typeof value === 'boolean' || typeof value === 'number') { // Cannot escape on these values

From: Eric Newport <kethinov@gmail.com>

 utils.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

@@ -97,7 +97,9 @@ function escapeEntities (value) {
   let j
 
   if (typeof value === 'object') { // Cannot escape on this value
-    if (Array.isArray(value)) {
+    if (!value) {
+      return false // it is otherwise falsey
+    } else if (Array.isArray(value)) {
       if (value.length === 0) {
         return false // empty arrays are falsey
       } else {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

@@ -98,7 +98,7 @@ function escapeEntities (value) {
 
   if (typeof value === 'object') { // Cannot escape on this value
     if (!value) {
-      return false // it is otherwise falsey
+      return false // it is falsey to return false
     } else if (Array.isArray(value)) {
       if (value.length === 0) {
         return false // empty arrays are falsey","Merge pull request #518 from kethinov/refactor-escape-entities

refactor escape entities for better type checking","Fix potential type handling issues in escapeEntities (CWE-20)

The function escapeEntities had vulnerabilities related to improper handling of different data types such as objects and arrays. This could lead to unexpected behavior or incorrect responses when falsey values are processed. The function has been updated to correctly handle these cases, ensuring that it explicitly checks for type safety and intended outcomes.

Weakness: CWE-20
Severity: Medium"
4,{'CWE-79'},GHSA-hf4q-52x6-4p57,"@@ -591,6 +591,7 @@ function get_dangerous_files_extentions()
             'py',
             'alfa',
             'asp',
+            'aspx',
             'htaccess',
             'exe',
             'msi',",update,"Add 'aspx' to the list of dangerous file extensions (CWE-20)

The application now detects and restricts the '.aspx' file extension. 
Accepting this extension can lead to the execution of harmful web pages. 
This was fixed by adding 'aspx' to the existing list of dangerous file extensions."
