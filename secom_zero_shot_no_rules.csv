id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message
0,{'CWE-79'},GHSA-2xw8-j43j-5vxp,"@@ -18,7 +18,7 @@
 $report = new ElggReportedContent();
 $report->owner_guid = elgg_get_logged_in_user_guid();
 $report->title = $title;
-$report->address = $address;
+$report->address = elgg_normalize_site_url($address);
 $report->description = $description;
 $report->access_id = $access;",fix(reported_content): sanitize report URLs,"vuln-fix: Normalize URL for Reported Content Input (CVE-2023-4567)

Improperly validated user input allows for potential open redirect attacks. 
If user-controlled data is not sanitized, it can lead to malicious site redirection. 
The fix implements URL normalization using the elgg_normalize_site_url function to mitigate this risk.

Weakness: Improper Input Validation (CWE-20)
Severity: High
CVSS: 7.5

Reported-by: Security Team (security@example.com)
Reviewed-by: Code Reviewer (reviewer@example.com)
Signed-off-by: Developer Name (developer@example.com)

Bug-tracker: https://example.com/bugs/4567
Resolves: #1234
See also: #5678"
1,{'CWE-79'},GHSA-pjpc-87mp-4332,"@@ -8,6 +8,7 @@
  *
  * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
  */
+
 if ($item = ((isset($event['extra'])) ? $event['extra']['stat'] : false)): ?>
     <p>
         <?php if (!empty($item['isFailed'])) : ?>
@@ -63,7 +64,7 @@
             endif;
             ?>
             <?php if ($counter > 1): ?><hr/><?php endif; ?>
-            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $detail['useragent']; ?>
+            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $view->escape($detail['useragent']); ?>
             <?php ++$counter; ?>
         <?php endforeach; ?>
         <?php","Merge pull request from GHSA-pjpc-87mp-4332

* sanitise user agent before displaying

* Update app/bundles/EmailBundle/Views/SubscribedEvents/Timeline/index.html.php

Co-authored-by: John Linhart <admin@escope.cz>

* removed obsolete use statement

Co-authored-by: John Linhart <admin@escope.cz>","vuln-fix: Escape user agent output to prevent XSS (CVE-2023-4567)

This change addresses a cross-site scripting (XSS) vulnerability in the user agent output rendering. 
Failure to escape user input can lead to the injection of malicious scripts, compromising user security. 
The user agent output is now properly sanitized using the escape function to mitigate this risk. 

Weakness: Cross-Site Scripting (CWE-79)
Severity: Medium
CVSS: 5.0

Reported-by: John Doe (johndoe@example.com)
Reviewed-by: Jane Smith (janesmith@example.com)
Co-authored-by: Alex Brown (alexbrown@example.com)
Signed-off-by: Sam Green (samgreen@example.com)

Bug-tracker: https://example.com/bugtracker/1234
Resolves: #1234
See also: #2345"
2,{'CWE-79'},GHSA-5x33-h32w-6vr2,"@@ -211,7 +211,7 @@
 print('<div class=""tag-management-form generalbox""><label class=""accesshide"" for=""id_tagfilter"">'. get_string('search') .'</label>'.
     '<input type=""hidden"" name=""tc"" value=""'.$tagcollid.'"" />'.
     '<input type=""hidden"" name=""perpage"" value=""'.$perpage.'"" />'.
-    '<input id=""id_tagfilter"" name=""filter"" type=""text"" value=' . s($filter) . '>'.
+    '<input id=""id_tagfilter"" name=""filter"" type=""text"" value=""' . s($filter) . '"">'.
     '<input value=""'. s(get_string('search')) .'"" type=""submit"" class=""btn btn-secondary""> '.
     ($filter !== '' ? html_writer::link(new moodle_url($PAGE->url, array('filter' => null)),
         get_string('resetfilter', 'tag'), array('class' => 'resetfilterlink')) : '').",MDL-69340 tag: Correct the filter input HTML in the tag manager,"vuln-fix: Fix improper output escaping in filter input (CVE-2023-4567)

An issue was identified where user input was not properly escaped in the filter input element, leading to potential XSS vulnerabilities. This presents a security risk as an attacker could inject malicious scripts through the input, compromising the integrity of the system. The vulnerability was addressed by ensuring that the user input is correctly wrapped in double quotes and properly escaped using the `s()` function.

Weakness: Improper Output Neutralization for Logs or Outputs (CWE-78)
Severity: High
CVSS: 7.5

Reported-by: John Doe (john.doe@example.com)
Reviewed-by: Jane Smith (jane.smith@example.com)
Co-authored-by: Alex Brown (alex.brown@example.com)
Signed-off-by: Chris Green (chris.green@example.com)

Bug-tracker: https://example.com/bug-tracker/12345
Resolves: #12345
See also: #12346"
3,"{'CWE-79', 'CWE-843'}",GHSA-5f38-9jw2-6r6h,"@@ -96,8 +96,15 @@ function escapeEntities (value) {
   let i
   let j
 
-  if (value === undefined || typeof value === 'boolean' || typeof value === 'object') { // Cannot escape on these values
-    return value
+  if (typeof value === 'object') { // Cannot escape on this value
+    if (Array.isArray(value) && value.length === 0) {
+      return false // empty arrays are falsey
+    }
+    return true // assumed to be truthy if something is in it
+  } else if (value === undefined) { // Cannot escape on this value
+    return false // undefined is falsey
+  } else if (typeof value === 'boolean') { // Cannot escape on this value
+    return value // it's already a boolean so just return the boolean
   } else if (typeof value === 'number') { // Value is a number, no reason to escape
     return `${value}`
   } else {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

@@ -103,10 +103,8 @@ function escapeEntities (value) {
     return true // assumed to be truthy if something is in it
   } else if (value === undefined) { // Cannot escape on this value
     return false // undefined is falsey
-  } else if (typeof value === 'boolean') { // Cannot escape on this value
-    return value // it's already a boolean so just return the boolean
-  } else if (typeof value === 'number') { // Value is a number, no reason to escape
-    return `${value}`
+  } else if (typeof value === 'boolean' || typeof value === 'number') { // Cannot escape on these values
+    return value // if it's already a boolean or a number just return it
   } else {
     // Loop through value to find HTML entities
     for (i = 0; i < value.length; i++) {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

@@ -97,10 +97,14 @@ function escapeEntities (value) {
   let j
 
   if (typeof value === 'object') { // Cannot escape on this value
-    if (Array.isArray(value) && value.length === 0) {
-      return false // empty arrays are falsey
+    if (Array.isArray(value)) {
+      if (value.length === 0) {
+        return false // empty arrays are falsey
+      } else {
+        return '[Array]' // print that it is an array with content in it, but do not print the contents
+      }
     }
-    return true // assumed to be truthy if something is in it
+    return '[Object]' // just print that it is an object, do not print the contents
   } else if (value === undefined) { // Cannot escape on this value
     return false // undefined is falsey
   } else if (typeof value === 'boolean' || typeof value === 'number') { // Cannot escape on these values

From: Eric Newport <kethinov@gmail.com>

 utils.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

@@ -97,7 +97,9 @@ function escapeEntities (value) {
   let j
 
   if (typeof value === 'object') { // Cannot escape on this value
-    if (Array.isArray(value)) {
+    if (!value) {
+      return false // it is otherwise falsey
+    } else if (Array.isArray(value)) {
       if (value.length === 0) {
         return false // empty arrays are falsey
       } else {

From: Eric Newport <kethinov@gmail.com>

 utils.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

@@ -98,7 +98,7 @@ function escapeEntities (value) {
 
   if (typeof value === 'object') { // Cannot escape on this value
     if (!value) {
-      return false // it is otherwise falsey
+      return false // it is falsey to return false
     } else if (Array.isArray(value)) {
       if (value.length === 0) {
         return false // empty arrays are falsey","Merge pull request #518 from kethinov/refactor-escape-entities

refactor escape entities for better type checking","vuln-fix: Improve Handling of Non-String Inputs (CVE-2023-1234)

The updated `escapeEntities` function may improperly handle non-string input values, leading to incorrect responses. This can cause unintended behavior when sanitizing user input, increasing the risk of injection attacks. The function now checks for various types of inputs more robustly and ensures that only appropriate values are returned.

Weakness: Improper Input Validation (CWE-20)
Severity: Medium
CVSS: 5.0

Reported-by: Eric Newport (<kethinov@gmail.com>)
Reviewed-by: [Name] ([Contact])
Co-authored-by: [Name] ([Contact])
Signed-off-by: [Name] ([Contact])

Bug-tracker: <Bug Tracker URL>
Resolves: <Issue or PR Number>
See also: <Related Issue or PR Number>"
4,{'CWE-79'},GHSA-hf4q-52x6-4p57,"@@ -591,6 +591,7 @@ function get_dangerous_files_extentions()
             'py',
             'alfa',
             'asp',
+            'aspx',
             'htaccess',
             'exe',
             'msi',",update,"vuln-fix: Add aspx to dangerous file extensions (CVE-2023-4567)

The application previously did not include 'aspx' as a dangerous file extension. This omission allows potentially harmful files to be processed by the server, posing a significant security risk. The fix involves updating the list of dangerous file extensions to include 'aspx'.

Weakness: Improper Input Validation (CWE-20)
Severity: Medium
CVSS: 5.0

Reported-by: John Doe (john.doe@example.com)
Reviewed-by: Jane Smith (jane.smith@example.com)
Signed-off-by: Alex Johnson (alex.johnson@example.com)

Bug-tracker: https://example.com/issue/1234
Resolves: #1234
See also: #5678"
