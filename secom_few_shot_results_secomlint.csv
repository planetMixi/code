id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message,original_message_score,original_message_entities,generated_secom_message_score,generated_secom_message_entities
0,CWE-617,GHSA-fq86-3f29-px2c,"@@ -1741,14 +1741,16 @@ Status ConstantFolding::IsSimplifiableReshape(
       int32_t dim = outputs[0]->flat<int32>()(i);
       shp.push_back(dim);
     }
-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));
+    s = TensorShapeUtils::MakeShape(shp, &new_dims);
+    if (!s.ok()) return s;
   } else {
     std::vector<int64_t> shp;
     for (int i = 0; i < outputs[0]->NumElements(); ++i) {
       int64_t dim = outputs[0]->flat<int64_t>()(i);
       shp.push_back(dim);
     }
-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));
+    s = TensorShapeUtils::MakeShape(shp, &new_dims);
+    if (!s.ok()) return s;
   }
 
   if (!shape.IsCompatibleWith(new_dims)) {","Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<invalid shape>)`

PiperOrigin-RevId: 409166738
Change-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf","vuln-fix: Handle errors in tensor shape construction safely

The code did not check the status returned by TensorShapeUtils::MakeShape, ignoring potential errors during tensor shape creation.
This could lead to unchecked invalid tensor shapes causing undefined behavior or crashes, enabling denial-of-service attacks.
The fix captures the status and returns early if shape construction fails, preventing further processing of invalid shapes.

Weakness: CWE-703
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('change', 'ACTION', ''), ('i7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('errors', 'FLAW', ''), ('errors', 'FLAW', ''), ('denial-of-service', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-703', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
1,CWE-617,GHSA-jhq9-wm9m-cf89,"@@ -90,6 +90,8 @@ class UnsortedSegmentJoinOp : public OpKernel {
     const int32 segment_dims = segment_id_shape.dims();
 
     const Tensor& num_segments_tensor = context->input(2);
+    OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,
+                errors::InvalidArgument(""Number of segments cannot be empty.""));
     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();
 
     OP_REQUIRES(context, segment_dims != 0,","Fix overflow CHECK issue with `tf.raw_ops.UnsortedSegmentJoin`.

PiperOrigin-RevId: 370766155
Change-Id: I33e7c6626224e1060a8a4ab51ad5d861c6d4c63e","vuln-fix: Validate non-empty num_segments tensor in UnsortedSegmentJoinOp

The operation did not verify that the num_segments input tensor contained any elements before accessing its scalar value.
This could lead to out-of-bounds memory access or undefined behavior, potentially causing crashes or data corruption.
The fix adds a check to ensure the num_segments tensor is not empty before dereferencing its scalar value.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('tf.raw_ops.unsortedsegmentjoin', 'URL', ''), ('change', 'ACTION', ''), ('i33e7c6626224e1060a8a4ab51ad5d861c6d4c63e', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
2,CWE-617,GHSA-27j5-4p9v-pp67,"@@ -302,6 +302,10 @@ class TensorListReserve : public OpKernel {
     PartialTensorShape element_shape;
     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(0), &element_shape));
     int32 num_elements = c->input(1).scalar<int32>()();
+    OP_REQUIRES(c, num_elements >= 0,
+                errors::InvalidArgument(""The num_elements to reserve must be a ""
+                                        ""non negative number, but got "",
+                                        num_elements));
     TensorList output;
     output.element_shape = element_shape;
     output.element_dtype = element_dtype_;","Validate num_elements input in tf.raw_ops.TensorListReserve

PiperOrigin-RevId: 383954564
Change-Id: I454bd78eff85bc4f16ddb7e608596971cca47f8f","vuln-fix: Validate non-negative reservation size in TensorListReserve

The TensorListReserve operation did not check if the requested number of elements to reserve was negative, allowing invalid tensor list sizes.
This could lead to undefined behavior or memory corruption when negative sizes are used, posing a risk of crashes or data integrity issues.
The fix adds a validation step that rejects negative num_elements values with an InvalidArgument error before proceeding.

Weakness: CWE-704
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('validate', 'secword', ''), ('tf.raw_ops.tensorlistreserve', 'URL', ''), ('change', 'ACTION', ''), ('i454bd78eff85bc4f16ddb7e608596971cca47f8f', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-704', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
3,CWE-617,GHSA-j3mj-fhpq-qqjj,"@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {
                          dtype_error = true, dtype_error = true);
     }
     if (dtype_error || p == nullptr) return false;
+  } else {
+    // Handle the case of empty tensors (N = 0) or tensors with incomplete shape
+    // (N = -1). All other values of `shape.num_elements()` should be invalid by
+    // construction.
+    // Here, we just need to validate that the `proto.dtype()` value is valid.
+    bool dtype_error = false;
+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,
+                       dtype_error = true);
+    if (dtype_error) return false;
   }
   shape_ = shape;
   set_dtype(proto.dtype());","Validate `proto.dtype()` before calling `set_dtype()`.

This prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.

PiperOrigin-RevId: 408369083
Change-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46","vuln-fix: Validate data type for empty or incomplete tensors

The tensor deserialization code did not validate the data type for empty tensors or tensors with incomplete shapes, allowing invalid or malformed proto data to be accepted.
This could lead to undefined behavior or memory corruption when downstream code assumes valid tensor types, posing a risk of crashes or data integrity issues.
The fix adds explicit validation of the proto data type for these special cases, rejecting invalid types before further processing.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('validate', 'secword', ''), ('proto.dtype', 'URL', ''), ('prevents', 'ACTION', ''), ('change', 'ACTION', ''), ('ia21a3e3d62a90d642a4561f08f3b543e5ad00c46', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('deserialization', 'SECWORD', ''), ('validate', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
4,CWE-617,GHSA-5f2r-qp73-37mr,"@@ -75,8 +75,10 @@ bool DependencyOptimizer::SafeToRemoveIdentity(const NodeDef& node) const {
   }
 
   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));
-  CHECK(input != nullptr) << ""node = "" << node.name()
-                          << "" input = "" << node.input(0);
+  if (input == nullptr) {
+    VLOG(1) << ""node = "" << node.name() << "" input = "" << node.input(0);
+    return false;
+  }
   // Don't remove Identity nodes corresponding to Variable reads or following
   // Recv.
   if (IsVariable(*input) || IsRecv(*input)) {","Prevent a null-pointer dereference / `CHECK`-fail in grappler.

PiperOrigin-RevId: 409187354
Change-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43","vuln-fix: Handle null input node in SafeToRemoveIdentity

The function assumed the input node pointer was always valid, causing a CHECK failure and process termination if the input was missing.
This unchecked assumption allowed crafted graphs to trigger denial-of-service by crashing the optimizer during graph transformations.
The fix replaces the CHECK with a null check that logs the issue and safely returns false, preventing crashes from invalid input references.

Weakness: CWE-617
Severity: Medium
CVSS: 6.5",0.11764705882352941,"[('prevent', 'ACTION', ''), ('null-pointer dereference', 'secword', ''), ('change', 'ACTION', ''), ('i369c249cca32e6c56ec193f0ebbf2f2768fc7d43', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('denial-of-service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-617', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
5,CWE-617,GHSA-43jf-985q-588j,"@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {
     DataTypeVector dtypes;
     TF_RETURN_IF_ERROR(
         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));
-    CHECK_GE(dtypes.size(), size_t{1});
+    if (dtypes.size() < size_t{1}) {
+      return errors::Internal(""Expected a list of at least one dtype"");
+    }
     int arg_index = result_.nodes.size();
     TF_RETURN_IF_ERROR(
         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));","Eliminate `CHECK`-fail from `function.cc`.

PiperOrigin-RevId: 409414744
Change-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad","vuln-fix: Validate non-empty dtype list in function instantiation

The function instantiation helper did not verify that the dtype list contained at least one element, allowing empty lists to pass unchecked.
This could cause unchecked assumptions leading to undefined behavior or crashes during graph construction, potentially destabilizing the system.
The patch replaces a CHECK assertion with a runtime error return when the dtype list is empty, ensuring proper validation and error handling.

Weakness: CWE-617
Severity: Medium
CVSS: 6.5",0.17647058823529413,"[('function.cc', 'URL', ''), ('change', 'ACTION', ''), ('ic854e12ab2edb88b165d32e2d632c4ee654d71ad', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('patch', 'ACTION', ''), ('error', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('error handling', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-617', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
6,CWE-617,GHSA-fphq-gw9m-ghrv,"@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {
         int prev_indices = -1;
         for (int t = 0; t < seq_len_t(b); ++t) {
           int max_class_indices;
+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,
+                      errors::InvalidArgument(""Invalid input dimensions.""));
           log_prob_t(b, 0) +=
               -RowMax<T>(input_list_t[t], b, &max_class_indices);
           if (max_class_indices != blank_index &&","Fix `tf.raw_ops.CTCGreedyDecoder` CHECK failure.

PiperOrigin-RevId: 369960465
Change-Id: If0b8b3264d5a47a24ac0970ed7b81ce6b4921fae","vuln-fix: Validate input tensor dimensions in CTC decoder

The CTCGreedyDecoderOp did not verify that input tensors had valid non-zero dimensions before processing.
This could lead to out-of-bounds memory access or undefined behavior when accessing tensor elements, risking crashes or data corruption.
The fix adds a runtime check using OP_REQUIRES to ensure input tensors have positive dimension sizes before proceeding.

Weakness: CWE-125  
Severity: Medium  
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('tf.raw_ops.ctcgreedydecoder', 'URL', ''), ('change', 'ACTION', ''), ('if0b8b3264d5a47a24ac0970ed7b81ce6b4921fae', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('decoder', 'SECWORD', ''), ('ctcgreedydecoderop', 'SECWORD', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
7,CWE-617,GHSA-36vm-xw34-x4pj,"@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
+#include ""tensorflow/core/platform/errors.h""
 #define EIGEN_USE_THREADS
 
 // See docs in ../ops/fft_ops.cc.
@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {
           i == FFTRank ? fft_shape[i - 1] / 2 + 1 : fft_shape[i - 1];
       full_fft_shape.AddDim(fft_shape[i - 1]);
     }
+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,
+                errors::InvalidArgument(""Obtained a FFT shape of 0 elements: "",
+                                        full_fft_shape.DebugString()));
 
     Tensor temp;
     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),","Fix a check fail in Fast Fourier implementation

PiperOrigin-RevId: 372026629
Change-Id: Id05c3362aa575271bc3e06b16316c9037085fc11","vuln-fix: Validate FFT shape size before allocation

The FFT implementation did not verify that the computed FFT shape contained a positive number of elements before tensor allocation.
This could lead to zero-sized tensor allocations causing undefined behavior or crashes, potentially exploitable for denial of service.
The patch adds a check that the FFT shape has more than zero elements and returns an invalid argument error if not.

Weakness: CWE-704
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('change', 'ACTION', ''), ('id05c3362aa575271bc3e06b16316c9037085fc11', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-704', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
8,CWE-617,GHSA-ph87-fvjr-v33w,"@@ -222,6 +222,9 @@ class FFTCPU : public FFTBase {
       input_slice_sizes[i] = fft_shape[i - 1];
       temp_shape.AddDim(fft_shape[i - 1]);
     }
+    OP_REQUIRES(ctx, temp_shape.num_elements() > 0,
+                errors::InvalidArgument(""Obtained a FFT shape of 0 elements: "",
+                                        temp_shape.DebugString()));
 
     auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();
     const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;","Prevent check fail in FFT

PiperOrigin-RevId: 372031044
Change-Id: I50994e3e8a5d1342d01bde80256f6bf2730ca299","vuln-fix: Validate FFT shape to prevent zero-element tensors

The FFT computation did not verify that the calculated FFT shape contained a positive number of elements, allowing zero-element shapes to proceed unchecked.
This could lead to invalid memory accesses or crashes during tensor operations, causing denial-of-service conditions.
The fix adds a validation check that rejects FFT shapes with zero elements by enforcing a runtime error with a descriptive message.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('prevent', 'ACTION', ''), ('change', 'ACTION', ''), ('i50994e3e8a5d1342d01bde80256f6bf2730ca299', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('verify', 'ACTION', ''), ('invalid memory accesses', 'SECWORD', ''), ('denial-of-service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
9,CWE-617,GHSA-4j82-5ccr-4r8v,"@@ -45,7 +45,7 @@ constexpr int kMaxTensorNestDepth = 100;
 // not fully defined return -1.
 int64_t TensorByteSize(const TensorProto& t) {
   // num_elements returns -1 if shape is not fully defined.
-  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();
+  int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();
   return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());
 }","Use `PartialTensorShape` instead of `TensorShape`.

`TensorShape` constructor throws a CHECK-fail if shape is partial/overflows which the other doesn't. We are only determining the number of elements in the shape and partial shape should be used as it returns negative number when needed.

PiperOrigin-RevId: 409205384
Change-Id: Ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b","vuln-fix: Use partial shape to compute tensor byte size safely

The original code used TensorShape which requires fully defined shapes, causing incorrect byte size calculations for partially defined tensors.
This could lead to integer underflows or incorrect memory allocations, potentially causing crashes or memory corruption.
The fix replaces TensorShape with PartialTensorShape to correctly handle partially defined shapes and avoid negative element counts.

Weakness: CWE-190
Severity: Medium
CVSS: 5.9",0.23529411764705882,"[('overflows', 'secword', ''), ('change', 'ACTION', ''), ('ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('integer underflows', 'SECWORD', ''), ('memory corruption', 'SECWORD', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-190', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
10,CWE-617,GHSA-4v5p-v5h9-6xjx,"@@ -821,9 +821,10 @@ bool RepeatedAttrDefEqual(
     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {
   std::unordered_map<string, const OpDef::AttrDef*> a1_set;
   for (const OpDef::AttrDef& def : a1) {
-    DCHECK(a1_set.find(def.name()) == a1_set.end())
-        << ""AttrDef names must be unique, but '"" << def.name()
-        << ""' appears more than once"";
+    if (a1_set.find(def.name()) != a1_set.end()) {
+      LOG(ERROR) << ""AttrDef names must be unique, but '"" << def.name()
+                 << ""' appears more than once"";
+    }
     a1_set[def.name()] = &def;
   }
   for (const OpDef::AttrDef& def : a2) {","Remove a `DCHECK`-fail, log an error instead.

`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.

Outside of debug mode, `DCHECK` is a no-op.

A better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.

PiperOrigin-RevId: 408375925
Change-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356","vuln-fix: Replace DCHECK with runtime check for duplicate AttrDef names

The code used DCHECK to verify uniqueness of AttrDef names, which only triggers in debug builds and can be bypassed in production.
This allowed duplicate attribute definitions to go unnoticed, potentially causing inconsistent behavior or logic errors exploitable by crafted inputs.
The fix replaces DCHECK with a runtime error log to ensure duplicate AttrDef names are detected and reported in all build configurations.

Weakness: CWE-250
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('vulnerabilities', 'secword', ''), ('error', 'FLAW', ''), ('change', 'ACTION', ''), ('id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('bypassed', 'SECWORD', ''), ('logic errors', 'secword', ''), ('exploitable', 'SECWORD', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-250', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
11,CWE-617,GHSA-wp3c-xw9g-gpcg,"@@ -78,6 +78,11 @@ class SparseDenseBinaryOpShared : public OpKernel {
                     ""but received shapes: "",
                     values_t->shape().DebugString(), "" and "",
                     shape_t->shape().DebugString()));
+    OP_REQUIRES(
+        ctx, values_t->dim_size(0) == indices_t->dim_size(0),
+        errors::InvalidArgument(
+            ""The first dimension of values and indices should match. ("",
+            values_t->dim_size(0), "" vs. "", indices_t->dim_size(0), "")""));
 
     const auto indices_mat = indices_t->matrix<int64>();
     const auto shape_vec = shape_t->vec<int64>();","Fix heap-buffer-overflow issue with `tf.raw_ops.SparseDenseCwiseMul`.

PiperOrigin-RevId: 372054410
Change-Id: Ifcce0491e2e3816838c87e73be30a1e61b65174d","vuln-fix: Validate matching dimensions of sparse tensor inputs

The operation did not verify that the first dimension sizes of values and indices tensors matched, allowing inconsistent tensor shapes to be processed.
This could lead to out-of-bounds memory access or corrupted computations, causing crashes or data integrity issues.
The fix adds a runtime check that enforces the first dimension of values and indices tensors to be equal, returning an error if they differ.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('tf.raw_ops.sparsedensecwisemul', 'URL', ''), ('change', 'ACTION', ''), ('ifcce0491e2e3816838c87e73be30a1e61b65174d', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
12,CWE-617,GHSA-gvm4-h8j3-rjrq,"@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {
     // Processes the checkpoint source and the provided Tensor name.
     const Tensor* ckpt_path_t;
     OP_REQUIRES_OK(context, context->input(""ckpt_path"", &ckpt_path_t));
+    OP_REQUIRES(
+        context, ckpt_path_t->NumElements() == 1,
+        errors::InvalidArgument(""The `ckpt_path` tensor must have exactly one ""
+                                ""element, got tensor of shape "",
+                                ckpt_path_t->shape().DebugString()));
     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();
     const Tensor* old_tensor_name_t;
     OP_REQUIRES_OK(context,","Fix a check fail

PiperOrigin-RevId: 372011072
Change-Id: I1062cfaed0aa16884e9a16312483794d188db76f","vuln-fix: Enforce single-element tensor for checkpoint path input

The checkpoint path input tensor was not validated for size, allowing multi-element tensors that could cause unexpected behavior or memory access errors.
This posed a risk of out-of-bounds reads or logic errors when interpreting the checkpoint path, potentially leading to crashes or data corruption.
The fix adds a check to ensure the checkpoint path tensor contains exactly one element, rejecting inputs with invalid shapes early.

Weakness: CWE-125  
Severity: Medium  
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('change', 'ACTION', ''), ('i1062cfaed0aa16884e9a16312483794d188db76f', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('errors', 'FLAW', ''), ('out-of-bounds reads', 'SECWORD', ''), ('logic errors', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,CWE-617,GHSA-43jf-985q-588j,"@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {
     for (size_t i = 0; i < dtypes.size(); ++i) {
       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), "":"", i),
                                  {true, arg_index, 0, false, {dtypes[i]}}));
-      DCHECK_EQ(arg_index, result_.nodes.size());
+      if (arg_index != result_.nodes.size()) {
+        return errors::Internal(
+            ""Expected arg_index to be equal to the number of nodes in result."",
+            "" Got "", arg_index, "" and "", result_.nodes.size());
+      }
       string name = arg_def.name();
       if (dtypes.size() > 1) {
         strings::StrAppend(&name, ""_"", i);","Eliminate debug `CHECK`-fail from `function.cc`

PiperOrigin-RevId: 409416119
Change-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe","vuln-fix: Validate argument index consistency in function instantiation

The function instantiation helper did not verify that the argument index matched the expected number of nodes, allowing inconsistent internal state to propagate unnoticed.
This could lead to out-of-bounds accesses or corrupted graph construction, potentially causing crashes or undefined behavior exploitable for denial of service.
The patch adds a runtime check that returns an internal error if the argument index does not equal the current node count, preventing further inconsistent processing.

Weakness: CWE-617
Severity: Medium
CVSS: 6.5",0.17647058823529413,"[('function.cc', 'URL', ''), ('change', 'ACTION', ''), ('i8376ee464d434e9b970ff0ad49edfdaa2a273cfe', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-617', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
0,CWE-79,GHSA-wcm2-9c89-wmfm,"@@ -352,14 +352,21 @@ $.widget(""ui.dialog"", {
 		uiDialogTitle = $( ""<span>"" )
 			.uniqueId()
 			.addClass( ""ui-dialog-title"" )
-			.html( this.options.title || ""&#160;"" )
 			.prependTo( this.uiDialogTitlebar );
+		this._title( uiDialogTitle );
 
 		this.uiDialog.attr({
 			""aria-labelledby"": uiDialogTitle.attr( ""id"" )
 		});
 	},
 
+	_title: function( title ) {
+		if ( !this.options.title ) {
+			title.html( ""&#160;"" );
+		}
+		title.text( this.options.title );
+	},
+
 	_createButtonPane: function() {
 		var uiDialogButtonPane = ( this.uiDialogButtonPane = $( ""<div>"" ) )
 			.addClass( ""ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"" );
@@ -600,9 +607,7 @@ $.widget(""ui.dialog"", {
 		}
 
 		if ( key === ""title"" ) {
-			// convert whatever was passed in to a string, for html() to not throw up
-			$( "".ui-dialog-title"", this.uiDialogTitlebar )
-				.html( """" + ( value || ""&#160;"" ) );
+			this._title( this.uiDialogTitlebar.find( "".ui-dialog-title"" ) );
 		}
 	},","Dialog: Extract setting the title into a _title method, use .text() to prevent XSS. Fixes #6016 - Dialog: Title XSS Vulnerability.","vuln-fix: Prevent HTML injection in dialog title rendering

The dialog widget directly inserted the title option as HTML, allowing injection of arbitrary HTML or scripts via the title property.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute malicious code in the context of the user’s browser.
The fix replaces HTML insertion with safe text setting, ensuring the title is treated as plain text and not interpreted as HTML.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.058823529411764705,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('fixes', 'ACTION', ''), ('#6016', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious code', 'SECWORD', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
1,CWE-79,GHSA-q26w-wjj2-22vv,"@@ -87,11 +87,16 @@ class HtmlUtils {
 			return tagStack[tagStack.length - 1];
 		};
 
-		// The BASE tag allows changing the base URL from which files are loaded, and
-		// that can break several plugins, such as Katex (which needs to load CSS
-		// files using a relative URL). For that reason it is disabled.
-		// More info: https://github.com/laurent22/joplin/issues/3021
-		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed'];
+		// The BASE tag allows changing the base URL from which files are
+		// loaded, and that can break several plugins, such as Katex (which
+		// needs to load CSS files using a relative URL). For that reason
+		// it is disabled. More info:
+		// https://github.com/laurent22/joplin/issues/3021
+		//
+		// ""link"" can be used to escape the parser and inject JavaScript.
+		// Adding ""meta"" too for the same reason as it shouldn't be used in
+		// notes anyway.
+		const disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed', 'link', 'meta'];
 
 		const parser = new htmlparser2.Parser({","All: Security: Remove ""link"" and ""meta"" tags from notes to prevent XSS","vuln-fix: Extend disallowed HTML tags to prevent injection

The HTML sanitizer did not block ""link"" and ""meta"" tags, which can be abused to inject JavaScript or manipulate document metadata.
This allowed attackers to bypass content restrictions and execute malicious scripts, leading to cross-site scripting (XSS) vulnerabilities.
The fix adds ""link"" and ""meta"" to the disallowed tags list, strengthening the HTML sanitization and preventing injection attacks.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.058823529411764705,"[('security', 'SECWORD', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitizer', 'SECWORD', ''), ('inject', 'secword', ''), ('manipulate', 'ACTION', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
2,CWE-79,GHSA-4p8f-mmfj-r45g,"@@ -17,7 +17,7 @@ def tags_for_index(model)
       elsif !query.include?(hashtag)
         query += "" #{hashtag}""
       end
-      out << link_to_function(tag, ""crm.search_tagged('#{query}', '#{model.class.to_s.tableize}')"", title: tag)
+      out << link_to_function(tag, ""crm.search_tagged('#{escape_javascript(query)}', '#{model.class.to_s.tableize}')"", title: tag)
     end
   end",Context-sensitive XSS bugfix.,"vuln-fix: Escape JavaScript in dynamic tag search calls

The code injected unescaped user-controlled tag queries directly into JavaScript event handlers.
This allowed attackers to execute arbitrary scripts via crafted tags, leading to cross-site scripting (XSS) vulnerabilities.
The patch applies escape_javascript to sanitize the query string before embedding it in the JavaScript call.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('sensitive', 'SECWORD', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('vulnerabilities', 'secword', ''), ('patch', 'ACTION', ''), ('escape_javascript', 'SECWORD', ''), ('sanitize', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,CWE-79,GHSA-cx2r-mf6x-55rx,"@@ -29,6 +29,7 @@
 use PrestaShopBundle\Form\Admin\Type\TranslatorAwareType;
 use Symfony\Component\Form\Extension\Core\Type\TextType;
 use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\Validator\Constraints as Assert;
 
 class CustomUrlType extends TranslatorAwareType
 {
@@ -45,6 +46,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)
             ->add('url', TextType::class, [
                 'label' => $this->trans('URL', 'Modules.Linklist.Admin'),
                 'required' => true,
+                'constraints' => [new Assert\Url()],
             ])
         ;
     }","Merge pull request from GHSA-cx2r-mf6x-55rx

The custom url field must be a valid url","vuln-fix: Add URL validation constraint to custom URL form field

The form field for URLs lacked validation, allowing users to submit arbitrary strings that could be interpreted as invalid or malicious URLs.
This posed a security risk by enabling injection of malformed URLs that might lead to open redirect or other injection attacks.
The fix adds a Symfony URL constraint to enforce proper URL format validation on user input before processing.

Weakness: CWE-20
Severity: Medium
CVSS: 5.0",0.23529411764705882,"[('ghsa', 'VULNID', 'GHSA')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('url validation', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malformed urls', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
4,CWE-79,GHSA-5qjq-69w6-fg57,"similarity index 86%
rename from js/src/common/Translator.ts
rename to js/src/common/Translator.tsx
@@ -48,12 +48,23 @@ export default class Translator {
     // future there should be a hook here to inspect the user and change the
     // translation key. This will allow a gender property to determine which
     // translation key is used.
+
     if ('user' in parameters) {
       const user = extract(parameters, 'user');
 
       if (!parameters.username) parameters.username = username(user);
     }
-    return parameters;
+
+    const escapedParameters: TranslatorParameters = {};
+
+    for (const param in parameters) {
+      const paramValue = parameters[param];
+
+      if (typeof paramValue === 'string') escapedParameters[param] = <>{parameters[param]}</>;
+      else escapedParameters[param] = parameters[param];
+    }
+
+    return escapedParameters;
   }
 
   trans(id: string, parameters: TranslatorParameters = {}) {",Fix XSS vulnerability,"vuln-fix: Escape string parameters in translation output

The translation function returned user-supplied string parameters without escaping, allowing injection of untrusted content into rendered UI components.
This posed a risk of cross-site scripting (XSS) attacks by enabling malicious scripts to be embedded in translations.
The fix wraps all string parameters in React fragments to ensure proper escaping and safe rendering in the UI.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('untrusted', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,CWE-79,GHSA-3374-7h99-xr85,"@@ -128,6 +128,7 @@ private function loadDataGrid(): void
             'registered_on',
             true
         );
+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');
 
         // add the mass action controls
         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');",Fix xss in profiles display name,"vuln-fix: Escape display names in data grid output

The data grid rendered user display names without escaping HTML special characters, allowing injection of arbitrary HTML or scripts.
This created a cross-site scripting (XSS) vulnerability that could compromise user sessions or deface the interface.
The fix applies htmlspecialchars to the display_name column to safely encode special characters before rendering.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
6,CWE-79,GHSA-qqxp-xp9v-vvx6,"@@ -61,7 +61,7 @@
 						// remove invalid value, as it didn't match anything
 						$( element )
 							.val( """" )
-							.attr( ""title"", value + "" didn't match any item"" )
+							.attr( ""title"", $( ""<a>"" ).text( value ).html() + "" didn't match any item"" )
 							.tooltip( ""open"" );
 						select.val( """" );
 						setTimeout(function() {",Autocomplete demo: Combobox: Encode search term inside tooltips. Fixes #8859 - Autocomplete: XSS in combobox demo.,"vuln-fix: Encode tooltip text to prevent HTML injection

The tooltip attribute was set directly with user input without encoding, allowing injection of arbitrary HTML or scripts into the tooltip content.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute malicious code in users’ browsers via crafted input values.
The fix encodes the input value as text using jQuery’s text() method before inserting it into the tooltip attribute, preventing HTML interpretation.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('encode', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#8859', 'ISSUE', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious code', 'secword', ''), ('fix', 'ACTION', ''), ('encodes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
7,CWE-79,GHSA-q7q9-w24q-cpgh,"@@ -149,8 +149,16 @@ App.BreadcrumbItem = Em.Object.extend({
   createLabel() {
     let label = this.get('label');
     let labelBindingPath = this.get('labelBindingPath');
+    let formattedLabel;
+
+    if (labelBindingPath) {
+      formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));
+    } else{
+      formattedLabel = label;
+    }
+
+
 
-    let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;
     this.set('formattedLabel', this.labelPostFormat(formattedLabel));
   },
 
@@ -216,7 +224,9 @@ App.BreadcrumbsView = Em.View.extend({
       }
       currentState = currentState.get('parentState');
     }
-    items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());
+    items.reverse();
+    items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));
+    items = items.map(item => App.BreadcrumbItem.extend(item).create());
     if (items.length) {
       items.get('lastObject').setProperties({
         disabled: true,",AMBARI-25329. Ambari breadcrumbs xss vulnerability,"vuln-fix: Escape breadcrumb labels to prevent XSS

Breadcrumb labels were rendered without escaping, allowing injection of malicious HTML or scripts via labelBindingPath or label properties.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise session integrity.
The fix escapes labelBindingPath-derived labels and all but the first breadcrumb label using Ember’s escapeExpression before rendering.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.11764705882352941,"[('xss', 'secword', ''), ('vulnerability', 'SECWORD', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('escapeexpression', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
8,CWE-79,GHSA-vcfc-9wcp-j623,"@@ -90,12 +90,13 @@ public async Task SerializeToStreamAsync(IRequest req, object response, Stream o
             {
                 // Serialize then escape any potential script tags to avoid XSS when displaying as HTML
                 var json = JsonDataContractSerializer.Instance.SerializeToString(dto) ?? ""null"";
-                json = json.Replace(""<"", ""&lt;"").Replace("">"", ""&gt;"");
+                json = json.HtmlEncode();
 
                 var url = req.ResolveAbsoluteUrl()
                     .Replace(""format=html"", """")
                     .Replace(""format=shtm"", """")
-                    .TrimEnd('?', '&');
+                    .TrimEnd('?', '&')
+                    .HtmlEncode();
 
                 url += url.Contains(""?"") ? ""&"" : ""?"";",HtmlEncode Raw URL in HtmlFormat snapshot,"vuln-fix: Encode JSON and URL output to prevent XSS

The serialization method replaced angle brackets manually, which was insufficient to prevent all cross-site scripting vectors in HTML output.
This allowed attackers to inject malicious scripts by exploiting incomplete escaping, risking client-side code execution and data theft.
The fix replaces manual replacements with comprehensive HtmlEncode calls on both JSON and URL strings to ensure proper escaping.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.11764705882352941,"[('htmlencode', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('serialization', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('exploiting', 'SECWORD', ''), ('escaping', 'secword', ''), ('code execution', 'SECWORD', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('manual', 'DETECTION', ''), ('htmlencode', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('escaping', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
9,CWE-79,GHSA-whv6-rj84-2vh2,"@@ -60,6 +60,9 @@ import Action from 'nextcloud-vue/dist/Components/Action'
 import Avatar from 'nextcloud-vue/dist/Components/Avatar'
 import Tooltip from 'nextcloud-vue/dist/Directives/Tooltip'
 
+Tooltip.options.defaultHtml = false
+
+
 export default {
 	name: 'CollectionListItem',
 	components: {","Force defaultHtml setting of v-tooltip to be disabled

Signed-off-by: Julius Härtl <jus@bitgrid.net>","vuln-fix: Disable default HTML rendering in tooltips

The tooltip directive allowed HTML content by default, enabling injection of arbitrary HTML or scripts into the user interface.
This posed a cross-site scripting (XSS) risk by permitting attackers to execute malicious code within the application context.
The patch disables default HTML rendering in tooltips by setting defaultHtml to false, preventing untrusted HTML injection.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.11764705882352941,"[('signed', 'secword', ''), ('jus@bitgrid.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('injection', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious code', 'secword', ''), ('patch', 'ACTION', ''), ('preventing', 'ACTION', ''), ('untrusted', 'secword', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
10,CWE-79,GHSA-xw79-hhv6-578c,"@@ -4,7 +4,7 @@
     <meta charset=""utf-8"">
     <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
 
-    <title>Files within {{=it.directory}}</title>
+    <title>Files within {{!it.directory}}</title>
 
 	<style>
 		body {
@@ -187,7 +187,7 @@
           <i>Index of&nbsp;</i>
 
           {{~it.paths :value:index}}
-            <a href=""/{{=value.url}}"">{{=value.name}}</a>
+            <a href=""/{{!value.url}}"">{{!value.name}}</a>
           {{~}}
         </h1>
 
@@ -197,9 +197,9 @@
       <ul id=""files"">
         {{~it.files :value:index}}
           <li>
-            <a href=""{{=value.relative}}"" title=""{{=value.title}}"" class=""{{=value.ext}}"">{{=value.base}}</a>
+            <a href=""{{!value.relative}}"" title=""{{!value.title}}"" class=""{{!value.ext}}"">{{!value.base}}</a>
 			{{? value.size}}
-				<i>{{=value.size}}</i>
+				<i>{{!value.size}}</i>
 			{{?}}
           </li>
         {{~}}",Interpolate template variables correctly (#64),"vuln-fix: Escape template variables to prevent XSS in file listing

The template rendered user-controllable directory and file metadata without escaping, allowing injection of malicious HTML or scripts into the page.
This exposed users to cross-site scripting attacks, risking session theft, defacement, or unauthorized actions in the user’s browser.
The fix applies HTML escaping to all inserted variables using the template engine’s safe-print syntax to neutralize embedded code.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('#64', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
11,CWE-79,GHSA-5pg2-qg87-vmj7,"@@ -336,9 +336,12 @@
 // Make sure the fileName is unique but only if chunking is disabled
 if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {
     $ext = strrpos($fileName, '.');
+
     $fileName_a = substr($fileName, 0, $ext);
     $fileName_b = substr($fileName, $ext);
 
+    $fileName_b = strtolower($fileName_b);
+
     $count = 1;
     while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {
         ++$count;
@@ -500,7 +503,7 @@
 
     if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {
         $ext = get_file_extension($filePath);
-
+        $ext = strtolower($ext);
         if (function_exists('finfo_open') and function_exists('finfo_file')) {
             $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
             $mime = @finfo_file($finfo, $filePath);",update,"vuln-fix: Normalize file extensions to prevent case-based bypasses

The file upload handling did not normalize file extensions to a consistent case, allowing attackers to bypass extension-based restrictions by using uppercase or mixed-case variants.
This could lead to unauthorized file types being accepted, increasing the risk of malicious file uploads and potential remote code execution.
The patch converts file extensions to lowercase before performing existence checks and MIME type validations to enforce consistent and secure handling.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('bypasses', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('malicious file', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('patch', 'ACTION', ''), ('secure', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
12,CWE-79,GHSA-5vr6-hm68-5j9p,"@@ -44,5 +44,5 @@
 if (! empty($ok)) {
     exit(""$ok"");
 } else {
-    exit(""ERROR: $error"");
+    exit(""ERROR: "".htmlspecialchars($error));;
 }",fix XSS vulnerability in poller-groups.inc.php,"vuln-fix: Escape error messages to prevent XSS in output

The code previously output error messages directly without escaping, allowing injection of malicious HTML or JavaScript into the response.
This created a cross-site scripting (XSS) vulnerability that could be exploited to execute arbitrary scripts in users' browsers.
The fix applies htmlspecialchars to the error message before outputting, ensuring special characters are safely encoded.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('poller-groups.inc.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('exploited', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('error', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,"CWE-434', 'CWE-79",GHSA-5q5w-mqp6-g2gh,"@@ -20,7 +20,9 @@ public function rules()
             'quantity' => ['required', 'integer', 'min:0'],
             'price' => ['required', 'numeric', 'min:0'],
             'sale_price' => ['nullable', 'numeric'],
-            'weight' => ['nullable', 'numeric', 'min:0']
+            'weight' => ['nullable', 'numeric', 'min:0'],
+            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
+            'cover' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
         ];
     }
 }",Fix vulnerability report from hunter.dev,"vuln-fix: Add image file validation to product input rules

The product input validation lacked checks for uploaded image files, allowing arbitrary file types and sizes to be submitted.
This posed a risk of malicious file uploads that could lead to remote code execution or denial of service via oversized files.
The patch enforces image type restrictions and size limits using Laravel’s image and mimes validation rules with a maximum size of 2MB.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('hunter.dev', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('input validation', 'secword', ''), ('malicious file', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('patch', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
14,CWE-79,GHSA-vpwq-6cp4-ffqc,"@@ -309,6 +309,8 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".aspx"")
 			|| $isDangerStr($filename , "".xsd"")
 			|| $isDangerStr($filename , "".asa"")
+			|| $isDangerStr($filename , "".cshtml"")
+			|| $isDangerStr($filename , "".axd"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Extend dangerous filename checks to include .cshtml and .axd

The filename validation function did not consider .cshtml and .axd extensions as dangerous, allowing potentially unsafe files to bypass security filters.
This omission could enable attackers to upload or execute server-side scripts or handlers, leading to remote code execution or information disclosure.
The patch adds checks for .cshtml and .axd extensions to the dangerous filename list, improving input validation and reducing attack surface.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('server', 'secword', ''), ('remote code execution', 'SECWORD', ''), ('disclosure', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'secword', ''), ('attack surface', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
15,CWE-79,GHSA-j6p2-cx3w-6jcp,"@@ -1079,7 +1079,7 @@
 
   // Helper function to escape a string for HTML rendering.
   var escapeHTML = function(string) {
-    return string.replace(/&(?!\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    return string.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
   };
 
 }).call(this);","Fixed escapeHTML function
to skip not only &***;, but also &#***; and &x***;","vuln-fix: Improve HTML escaping to handle numeric character references

The original escapeHTML function did not correctly preserve numeric character references, causing them to be partially escaped and potentially allowing injection of unsafe characters.
This flaw could enable cross-site scripting (XSS) attacks by letting attackers inject malicious HTML entities that bypass the escaping mechanism.
The fix updates the regular expression to also exclude numeric character references from ampersand escaping, ensuring proper sanitization of all HTML entities.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.23529411764705882,"[('fixed', 'ACTION', ''), ('escapehtml', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('escaping', 'secword', ''), ('escapehtml', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('bypass', 'secword', ''), ('escaping', 'SECWORD', ''), ('fix', 'ACTION', ''), ('updates', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
16,CWE-79,GHSA-h4mx-xv96-2jgm,"@@ -9,7 +9,7 @@
         {f:translate(
         key: 'forgot_validate_reset_password_html',
         extensionName: 'felogin',
-        arguments: '{ 0: receiverName, 1: recoveryLink, 2: validUntil }'
+        arguments: '{ 0: ""{receiverName -> f:format.htmlspecialchars()}"", 1: recoveryLink, 2: validUntil }'
         ) -> f:format.html()}
     </f:spaceless>
 </f:section>","[SECURITY] Avoid HTML injection in password recovery mail

The `receiverName` variable used in the password recovery mail of the
Extbase felogin plugin was susceptible to HTML injection due to
missing sanitization. The variable is now passed thru the
`f:format.htmlspecialchars` ViewHelper.

Resolves: #96559
Releases: main, 11.5, 10.4
Change-Id: I60e23c161f7f2fcc87b8870345b10a4c31d7b8db
Security-Bulletin: TYPO3-CORE-SA-2022-004
Security-References: CVE-2022-31049
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/74904
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Escape receiverName in password reset email template

The password reset email template did not escape the receiverName variable before rendering HTML output.
This allowed attackers to inject malicious HTML or JavaScript, leading to cross-site scripting (XSS) attacks via crafted user names.
The patch applies HTML escaping to receiverName using f:format.htmlspecialchars() to neutralize harmful input.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('password', 'secword', ''), ('password', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('sanitization', 'secword', ''), ('format.htmlspecialchars', 'SECWORD', ''), ('#96559', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('password', 'secword', ''), ('password', 'secword', ''), ('escape', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('patch', 'ACTION', ''), ('escaping', 'secword', ''), ('format.htmlspecialchars', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
17,CWE-79,GHSA-wx69-rvg3-x7fc,"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {
 		'user.updateCover': socketUser.updateCover,
 		'groups.cover.update': socketGroup.cover.update,
 	};
-	if (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {
+	if (!socket.uid || !data || !data.chunk ||
+		!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {
 		throw new Error('[[error:invalid-data]]');
 	}
 
-	inProgress[socket.id] = inProgress[socket.id] || {};
+	inProgress[socket.id] = inProgress[socket.id] || Object.create(null);
 	const socketUploads = inProgress[socket.id];
 	const { method } = data.params;",fix: guard against prototype pollution,"vuln-fix: Validate method property with hasOwnProperty in upload handler

The upload handler trusted the method property from input without properly verifying it was a direct property of the allowed methods object.
This allowed attackers to exploit prototype pollution or invoke unintended functions via crafted method names, leading to unauthorized code execution.
The fix replaces direct property access with hasOwnProperty checks and initializes inProgress with a null-prototype object to prevent prototype pollution.

Weakness: CWE-471
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fix', 'ACTION', ''), ('prototype pollution', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('attackers', 'FLAW', ''), ('exploit', 'SECWORD', ''), ('prototype pollution', 'secword', ''), ('code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('initializes', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-471', 'CWEID', ''), ('high', 'SEVERITY', '')]"
18,CWE-79,GHSA-95hx-62rh-gg96,"@@ -317,7 +317,7 @@ public function getWidgetVariables($hookName = null, array $configuration = [])
             }
         }
         $this->contact['contacts'] = $this->getTemplateVarContact();
-        $this->contact['message'] = html_entity_decode(Tools::getValue('message'));
+        $this->contact['message'] = Tools::getValue('message');
         $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');
 
         if (!(bool)Configuration::isCatalogMode()) {
@@ -388,9 +388,10 @@ public function getTemplateVarOrders()
     {
         $orders = [];
 
-        if (!isset($this->customer_thread['id_order'])
+        if (empty($this->customer_thread['id_order'])
             && isset($this->context->customer)
-            && $this->context->customer->isLogged()) {
+            && $this->context->customer->isLogged()
+        ) {
             $customer_orders = Order::getCustomerOrders($this->context->customer->id);
 
             foreach ($customer_orders as $customer_order) {
@@ -401,7 +402,7 @@ public function getTemplateVarOrders()
                     $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();
                 }
             }
-        } elseif (isset($this->customer_thread['id_order']) && (int)$this->customer_thread['id_order'] > 0) {
+        } elseif (isset($this->customer_thread['id_order']) && (int) $this->customer_thread['id_order'] > 0) {
             $myOrder = new Order($this->customer_thread['id_order']);
 
             if (Validate::isLoadedObject($myOrder)) {
@@ -411,13 +412,13 @@ public function getTemplateVarOrders()
             }
         }
 
-        if (isset($this->customer_thread['id_product'])) {
+        if (!empty($this->customer_thread['id_product'])) {
             $id_order = isset($this->customer_thread['id_order']) ?
-                      (int)$this->customer_thread['id_order'] :
+                      (int) $this->customer_thread['id_order'] :
                       0;
 
             $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(
-                new Product((int)$this->customer_thread['id_product'])
+                new Product((int) $this->customer_thread['id_product'])
             );
         }
 
@@ -584,7 +585,7 @@ public function sendMessage()
                 $var_list = [
                     '{order_name}' => '-',
                     '{attached_file}' => '-',
-                    '{message}' => Tools::nl2br(Tools::stripslashes($message)),
+                    '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::stripslashes($message))),
                     '{email}' =>  $from,
                     '{product_name}' => '',
                 ];","Merge pull request from GHSA-95hx-62rh-gg96

Do not unescape form message data","vuln-fix: Sanitize and validate inputs in customer service messaging

The contact message input was directly decoded from HTML entities and included in emails without proper sanitization, allowing injection of malicious HTML or scripts.
This posed a risk of cross-site scripting (XSS) and email injection attacks, potentially compromising user data and email integrity.
The fix removes html_entity_decode and applies htmlentitiesUTF8 with stripslashes and nl2br to properly escape message content before use.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.23529411764705882,"[('ghsa-95hx-62rh', 'VULNID', 'GHSA'), ('unescape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('validate', 'secword', ''), ('decoded', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('html_entity_decode', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
19,CWE-79,GHSA-82j4-vr25-x394,"@@ -304,6 +304,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
+			|| $isDangerStr($filename , "".aspx"")			
 		) {
 			return true;
 		}","Merge pull request #1629 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Block .aspx extension in dangerous filename check

The filename validation function did not consider files with the .aspx extension as dangerous, allowing potentially harmful files to bypass security checks.
This omission could enable attackers to upload or execute malicious ASP.NET pages, leading to remote code execution or unauthorized access.
The patch adds a check for the .aspx extension to the dangerous filename detection logic, preventing such files from being accepted.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.23529411764705882,"[('#1629', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious', 'secword', ''), ('asp.net', 'URL', ''), ('remote code execution', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
20,CWE-79,GHSA-m52x-29pq-w3vv,"@@ -1726,7 +1726,7 @@ function createHotSpot(hs) {
         if (config.basePath && !absoluteURL(imgp))
             imgp = config.basePath + imgp;
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);
+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);
         a.target = '_blank';
         span.appendChild(a);
         var image = document.createElement('img');
@@ -1738,7 +1738,7 @@ function createHotSpot(hs) {
         span.style.maxWidth = 'initial';
     } else if (hs.URL) {
         a = document.createElement('a');
-        a.href = sanitizeURL(hs.URL);
+        a.href = sanitizeURL(hs.URL, true);
         if (hs.attributes) {
             for (var key in hs.attributes) {
                 a.setAttribute(key, hs.attributes[key]);
@@ -2012,7 +2012,7 @@ function processOptions(isPreview) {
                 var authorText = escapeHTML(config[key]);
                 if (config.authorURL) {
                     var authorLink = document.createElement('a');
-                    authorLink.href = sanitizeURL(config['authorURL']);
+                    authorLink.href = sanitizeURL(config['authorURL'], true);
                     authorLink.target = '_blank';
                     authorLink.innerHTML = escapeHTML(config[key]);
                     authorText = authorLink.outerHTML;
@@ -2023,7 +2023,7 @@ function processOptions(isPreview) {
             
             case 'fallback':
                 var link = document.createElement('a');
-                link.href = sanitizeURL(config[key]);
+                link.href = sanitizeURL(config[key], true);
                 link.target = '_blank';
                 link.textContent = 'Click here to view this panorama in an alternative viewer.';
                 var message = document.createElement('p');
@@ -2389,10 +2389,17 @@ function escapeHTML(s) {
  * The URL cannot be of protocol 'javascript'.
  * @private
  * @param {string} url - URL to sanitize
+ * @param {boolean} href - True if URL is for link (blocks data URIs)
  * @returns {string} Sanitized URL
  */
-function sanitizeURL(url) {
-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {
+function sanitizeURL(url, href) {
+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||
+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {
+        console.log('Script URL removed.');
+        return 'about:blank';
+    }
+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {
+        console.log('Data URI removed from link.');
         return 'about:blank';
     }
     return url;","Merge pull request from GHSA-m52x-29pq-w3vv

Fix potential XSS vulnerability","vuln-fix: Enhance URL sanitization to block unsafe schemes

The URL sanitization function did not block all dangerous URL schemes, allowing javascript:, vbscript:, and data: URIs in link hrefs.
This posed a risk of cross-site scripting (XSS) attacks by enabling injection of executable scripts or malicious data URIs in anchor elements.
The fix extends sanitizeURL to reject vbscript: and data: schemes for links, returning safe about:blank URLs instead.

Weakness: CWE-79  
Severity: High  
CVSS: 7.8",0.23529411764705882,"[('ghsa-m52x-29pq', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitizeurl', 'SECWORD', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
21,CWE-79,GHSA-xg72-6c83-ghh4,"@@ -563,17 +563,25 @@
                 }
 
             } else if ($ext === 'svg') {
-
+                $valid = false;
                 if (is_file($filePath)) {
                     $sanitizer = new \enshrined\svgSanitize\Sanitizer();
                     // Load the dirty svg
                     $dirtySVG = file_get_contents($filePath);
                      // Pass it to the sanitizer and get it back clean
-                    $cleanSVG = $sanitizer->sanitize($dirtySVG);
-                    file_put_contents($filePath, $cleanSVG);
+                    try {
+                        $cleanSVG = $sanitizer->sanitize($dirtySVG);
+                        $valid = true;
+                    } catch (\Exception $e) {
+                        $valid = false;
+                    }
+
+                    if ($valid) {
+                        file_put_contents($filePath, $cleanSVG);
+                    }
 
                 }
-               $valid = true;
+
 
             } else {
                 $valid = false;",update,"vuln-fix: Handle SVG sanitization errors to prevent unsafe files

The SVG sanitization process did not handle exceptions, causing all SVG files to be treated as valid even if sanitization failed.
This allowed potentially malicious SVG content to be saved without proper cleaning, increasing the risk of XSS or code injection attacks.
The fix adds exception handling around the sanitizer and only writes sanitized content if no errors occur, ensuring invalid SVGs are rejected.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('errors', 'FLAW', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('sanitization', 'secword', ''), ('malicious', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('code injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitizer', 'secword', ''), ('sanitized', 'SECWORD', ''), ('errors', 'FLAW', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
22,CWE-79,GHSA-hc72-vj3g-5g2g,"@@ -11,13 +11,16 @@
 using ZKEACMS.Common.Models;
 using Easy;
 using Microsoft.EntityFrameworkCore;
+using ZKEACMS.Safety;
 
 namespace ZKEACMS.Common.Service
 {
     public class NavigationService : ServiceBase<NavigationEntity, CMSDbContext>, INavigationService
     {
-        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext) : base(applicationContext, dbContext)
+        private readonly IHtmlSanitizer _htmlSanitizer;
+        public NavigationService(IApplicationContext applicationContext, CMSDbContext dbContext, IHtmlSanitizer htmlSanitizer) : base(applicationContext, dbContext)
         {
+            _htmlSanitizer = htmlSanitizer;
         }
         public override DbSet<NavigationEntity> CurrentDbSet => DbContext.Navigation;
         public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
@@ -27,8 +30,34 @@ public override ServiceResult<NavigationEntity> Add(NavigationEntity item)
                 item.ParentId = ""#"";
             }
             item.ID = Guid.NewGuid().ToString(""N"");
+            Santize(item);
             return base.Add(item);
         }
+
+        public override ServiceResult<NavigationEntity> AddRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.AddRange(items);
+        }
+
+        public override ServiceResult<NavigationEntity> Update(NavigationEntity item)
+        {
+            Santize(item);
+            return base.Update(item);
+        }
+
+        public override ServiceResult<NavigationEntity> UpdateRange(params NavigationEntity[] items)
+        {
+            foreach (var item in items)
+            {
+                Santize(item);
+            }
+            return base.UpdateRange(items);
+        }
+
         public override void Remove(NavigationEntity item)
         {
             Remove(m => m.ParentId == item.ID);
@@ -73,5 +102,11 @@ public void Move(string id, string parentId, int position, int oldPosition)
             }
             Update(nav);
         }
+
+        private void Santize(NavigationEntity item)
+        {
+            item.Title = _htmlSanitizer.Sanitize(item.Title);
+            item.Html = _htmlSanitizer.Sanitize(item.Html);
+        }
     }
 }
\ No newline at end of file","Sanitize Html

#457","vuln-fix: Sanitize HTML content in navigation entities

The NavigationService previously stored user-supplied HTML content without sanitization, allowing injection of malicious scripts or markup.
This posed a risk of cross-site scripting (XSS) attacks, potentially compromising users’ browsers and data confidentiality.
The fix integrates an HTML sanitizer to clean the Title and Html fields before adding or updating navigation entities in the database.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.23529411764705882,"[('sanitize', 'secword', ''), ('#457', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitization', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('adding', 'ACTION', ''), ('updating', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
23,CWE-79,GHSA-8xqr-4cpm-wx7g,"@@ -10,7 +10,7 @@ export default class ReactSVG extends React.Component {
   static defaultProps = {
     callback: () => {},
     className: null,
-    evalScripts: 'once',
+    evalScripts: 'never',
     style: {},
     wrapperClassName: null
   }",Changed default evalScripts prop to match documentation.,"vuln-fix: Disable script evaluation in ReactSVG component

The ReactSVG component allowed scripts within SVGs to be evaluated by default, enabling execution of potentially malicious code embedded in SVG files.
This posed a security risk by allowing cross-site scripting (XSS) attacks through SVG content that could execute arbitrary JavaScript in the client context.
The patch changes the default evalScripts property to 'never', preventing automatic script execution within SVGs and mitigating XSS risks.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.058823529411764705,"[('changed', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('malicious code', 'secword', ''), ('security', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('patch', 'ACTION', ''), ('changes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('mitigating', 'ACTION', ''), ('xss', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
24,CWE-79,GHSA-h3gg-7wx2-cq3h,"@@ -21,7 +21,8 @@ export default function addStickyControl() {
       if (firstPost) {
         const excerpt = truncate(firstPost.contentPlain(), 175);
 
-        items.add('excerpt', m.trust(excerpt), -100);
+        // Wrapping in <div> because ItemList entries need to be vnodes
+        items.add('excerpt', <div>{excerpt}</div>, -100);
       }
     }
   });",Fix evaluation of post content by m.trust() (#24),"vuln-fix: Prevent XSS by avoiding raw HTML injection in excerpt

The code previously injected raw HTML content directly into the DOM using m.trust, allowing untrusted post content to execute arbitrary scripts.
This posed a cross-site scripting risk, enabling attackers to run malicious code in users' browsers and compromise session integrity.
The fix wraps the excerpt in a safe React <div> element, preventing unescaped HTML from being interpreted as executable code.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('m.trust', 'URL', ''), ('#24', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('m.trust', 'URL', ''), ('untrusted', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious code', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('preventing', 'ACTION', ''), ('unescaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
25,CWE-79,GHSA-h6wm-mr85-4h9g,"@@ -287,7 +287,7 @@ private function userAuth()
         }
 
         $this->ipWarning();
-        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => $nick]);
+        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);
         return false;
     }","Sanitized username when showing user not found message.
------
Saneado nombre de usuario al mostrar el mensaje de usuario no encontrado.","vuln-fix: Escape user input in login warning log

The login warning log previously included raw user input without escaping, allowing injection of malicious HTML or scripts into log outputs.
This posed a risk of log injection or cross-site scripting if logs were viewed in a web context, potentially compromising administrators.
The fix applies htmlspecialchars to the user nickname before logging, ensuring special characters are safely encoded.

Weakness: CWE-117
Severity: Medium
CVSS: 5.0",0.11764705882352941,"[('sanitized', 'SECWORD', ''), ('found', 'ACTION', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('login', 'secword', ''), ('warning', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('administrators', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-117', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
26,CWE-79,GHSA-pxpf-v376-7xx5,"@@ -101,7 +101,7 @@ Tagify.prototype = {
 
         _s.disabled = input.hasAttribute('disabled')
         _s.readonly = _s.readonly || input.hasAttribute('readonly')
-        _s.placeholder = input.getAttribute('placeholder') || _s.placeholder || """"
+        _s.placeholder = escapeHTML(input.getAttribute('placeholder') || _s.placeholder || """")
         _s.required = input.hasAttribute('required')
 
         for( let name in _s.classNames )",fixes #989 - fix XSS,"vuln-fix: Escape placeholder attribute to prevent XSS

The code assigned the placeholder attribute directly from user input without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting risk by enabling attackers to execute arbitrary code in users’ browsers via crafted placeholder values.
The fix applies an HTML escaping function to the placeholder attribute to neutralize any embedded HTML or script content.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fixes', 'ACTION', ''), ('#989', 'ISSUE', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
27,CWE-79,GHSA-6hjc-m38h-7jhh,"@@ -96,7 +96,7 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
             if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
                 $ext = strtolower($ext);
             }
-            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+            if ($ext === '' || $ext === 'svg' || !in_array($ext, $allowedExtensions, true)) {
                 throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
             }
             // Send the file as a stream, so it can exist anywhere",Disallow SVGs,"vuln-fix: Block SVG files in SEO file link handler

The SEO file link handler allowed SVG files to be served without restriction, as they were not explicitly blocked by the file extension check.
This posed a security risk because SVG files can contain malicious scripts or code, enabling cross-site scripting or other client-side attacks.
The fix explicitly disallows SVG file extensions by adding a check that throws an error if the file is an SVG.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,[],0.47058823529411764,"[('fix', 'ACTION', ''), ('security', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adding', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
28,CWE-79,GHSA-9g3v-j3cr-6fc6,"@@ -75,6 +75,10 @@ classes: 'table table-responsive table-no-bordered',
                 export: 'fa-download',
                 clearSearch: 'fa-times'
             },
+            exportOptions: {
+                htmlContent: true,
+            },
+
             exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],
             onLoadSuccess: function () {
                 $('[data-toggle=""tooltip""]').tooltip(); // Needed to attach tooltips after ajax call","Fixes possible XSS on all-file-types export

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Enable HTML content export option in table export

The export functionality did not include the option to export HTML content, potentially causing loss of formatting or data fidelity in exported files.
This could lead to incomplete or misleading data exports, affecting data integrity and user trust in exported reports.
The patch adds the exportOptions configuration with htmlContent set to true, ensuring HTML content is preserved during export.

Weakness: CWE-358
Severity: Low
CVSS: 3.1",0.17647058823529413,"[('fixes', 'ACTION', ''), ('xss', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('integrity', 'secword', ''), ('trust', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-358', 'CWEID', ''), ('low', 'SEVERITY', '')]"
29,CWE-79,GHSA-6qcc-whgp-pjj2,"@@ -79,8 +79,8 @@ pimcore.document.pages.settings = Class.create(pimcore.document.settings_abstrac
             var updateSerpPreview = function () {
 
                 var metaPanel = this.layout.getComponent(""metaDataPanel"");
-                var title = metaPanel.getComponent(""title"").getValue();
-                var description = metaPanel.getComponent(""description"").getValue();
+                var title = htmlspecialchars(metaPanel.getComponent(""title"").getValue());
+                var description = htmlspecialchars(metaPanel.getComponent(""description"").getValue());
 
                 var truncate = function( text, n ){
                     if (text.length <= n) { return text; }",escaping fields in SERP preview,"vuln-fix: Escape metadata fields to prevent XSS in page settings

The metadata title and description fields were rendered without escaping, allowing injection of malicious HTML or script content.
This exposed users to cross-site scripting attacks that could execute arbitrary scripts in their browsers.
The fix applies htmlspecialchars to these fields to properly encode special characters before rendering.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encode', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
30,CWE-79,GHSA-4fc4-4p5g-6w89,"@@ -50,17 +50,18 @@
 		htmlFilter.addRules( createBogusAndFillerRules( editor, 'html' ), { applyToAll: true } );
 
 		editor.on( 'toHtml', function( evt ) {
-			var evtData = evt.data,
+			var randomNumber = generateRandomNumber(),
+				evtData = evt.data,
 				data = evtData.dataValue,
 				fixBodyTag;
 
 			// Before we start protecting markup, make sure there are no externally injected
 			// protection keywords.
-			data = removeReservedKeywords( data );
+			data = removeReservedKeywords( data, randomNumber );
 
 			// The source data is already HTML, but we need to clean
 			// it up and apply the filter.
-			data = protectSource( data, editor );
+			data = protectSource( data, editor, randomNumber );
 
 			// Protect content of textareas. (https://dev.ckeditor.com/ticket/9995)
 			// Do this before protecting attributes to avoid breaking:
@@ -70,7 +71,7 @@
 			// Before anything, we must protect the URL attributes as the
 			// browser may changing them when setting the innerHTML later in
 			// the code.
-			data = protectAttributes( data );
+			data = protectAttributes( data, randomNumber );
 
 			// Protect elements than can't be set inside a DIV. E.g. IE removes
 			// style tags from innerHTML. (https://dev.ckeditor.com/ticket/3710)
@@ -90,7 +91,7 @@
 
 			// There are attributes which may execute JavaScript code inside fixBin.
 			// Encode them greedily. They will be unprotected right after getting HTML from fixBin. (https://dev.ckeditor.com/ticket/10)
-			data = protectInsecureAttributes( data );
+			data = protectInsecureAttributes( data, randomNumber );
 
 			var fixBin = evtData.context || editor.editable().getName(),
 				isPre;
@@ -110,7 +111,7 @@
 			data = el.getHtml().substr( 1 );
 
 			// Restore shortly protected attribute names.
-			data = data.replace( new RegExp( 'data-cke-' + CKEDITOR.rnd + '-', 'ig' ), '' );
+			data = data.replace( new RegExp( 'data-cke-' + randomNumber + '-', 'ig' ), '' );
 
 			isPre && ( data = data.replace( /^<pre>|<\/pre>$/gi, '' ) );
 
@@ -838,13 +839,13 @@
 
 	var protectSelfClosingRegex = /<cke:(param|embed)([^>]*?)\/?>(?!\s*<\/cke:\1)/gi;
 
-	function protectAttributes( html ) {
+	function protectAttributes( html, randomNumber ) {
 		return html.replace( protectElementRegex, function( element, tag, attributes ) {
 			return '<' + tag + attributes.replace( protectAttributeRegex, function( fullAttr, attrName ) {
 				// Avoid corrupting the inline event attributes (https://dev.ckeditor.com/ticket/7243).
 				// We should not rewrite the existed protected attributes, e.g. clipboard content from editor. (https://dev.ckeditor.com/ticket/5218)
 				if ( protectAttributeNameRegex.test( attrName ) && attributes.indexOf( 'data-cke-saved-' + attrName ) == -1 )
-					return ' data-cke-saved-' + fullAttr + ' data-cke-' + CKEDITOR.rnd + '-' + fullAttr;
+					return ' data-cke-saved-' + fullAttr + ' data-cke-' + randomNumber + '-' + fullAttr;
 
 				return fullAttr;
 			} ) + '>';
@@ -897,8 +898,8 @@
 	// * opening tags - e.g. `<onfoo`,
 	// * closing tags - e.g. </onfoo> (tested in ""false positive 1""),
 	// * part of other attribute - e.g. `data-onfoo` or `fonfoo`.
-	function protectInsecureAttributes( html ) {
-		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + CKEDITOR.rnd + '-$2' );
+	function protectInsecureAttributes( html, randomNumber ) {
+		return html.replace( /([^a-z0-9<\-])(on\w{3,})(?!>)/gi, '$1data-cke-' + randomNumber + '-$2' );
 	}
 
 	function unprotectRealComments( html ) {
@@ -917,11 +918,11 @@
 		} );
 	}
 
-	function protectSource( data, editor ) {
+	function protectSource( data, editor, randomNumber ) {
 		var protectedHtml = [],
 			protectRegexes = editor.config.protectedSource,
 			store = editor._.dataStore || ( editor._.dataStore = { id: 1 } ),
-			tempRegex = /<\!--\{cke_temp(comment)?\}(\d*?)-->/g;
+			tempRegex = new RegExp('<\\!--\\{cke_temp_' + randomNumber + '(comment)?\\}(\\d*?)-->', 'g' );
 
 		var regexes = [
 			// Script tags will also be forced to be protected, otherwise
@@ -940,7 +941,7 @@
 		// Note that we use a different tag for comments, as we need to
 		// transform them when applying filters.
 		data = data.replace( ( /<!--[\s\S]*?-->/g ), function( match ) {
-			return '<!--{cke_tempcomment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+			return '<!--{cke_temp_' + randomNumber + 'comment}' + ( protectedHtml.push( match ) - 1 ) + '-->';
 		} );
 
 		for ( var i = 0; i < regexes.length; i++ ) {
@@ -951,7 +952,8 @@
 				} );
 
 				// Avoid protecting over protected, e.g. /\{.*?\}/
-				return ( /cke_temp(comment)?/ ).test( match ) ? match : '<!--{cke_temp}' + ( protectedHtml.push( match ) - 1 ) + '-->';
+				return ( tempRegex ).test( match ) ? match : '<!--{cke_temp_' + randomNumber + '}' +
+					( protectedHtml.push( match ) - 1 ) + '-->';
 			} );
 		}
 		data = data.replace( tempRegex, function( $, isComment, id ) {
@@ -1107,6 +1109,16 @@
 			};
 		}
 	} )();
+
+	function generateRandomNumber() {
+		var cryptoApi = window.crypto || window.msCrypto;
+
+		if ( cryptoApi ) {
+			return cryptoApi.getRandomValues( new Uint32Array( 1 ) )[ 0 ];
+		}
+
+		return Math.floor( Math.random() *  9000000000 + 1000000000 );
+	}
 } )();
 
 /**",Code refactoring.,"vuln-fix: Use randomized tokens to protect HTML attributes

The HTML protection functions used a fixed global token for marking protected attributes, enabling attackers to predict and potentially bypass the protection mechanism.
This predictability could allow crafted input to interfere with the editor’s internal protections, leading to injection or XSS vulnerabilities.
The fix introduces a cryptographically strong random number per operation to uniquely namespace protection tokens, preventing attackers from guessing or reusing them.

Weakness: CWE-330
Severity: High
CVSS: 7.8",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('protect', 'ACTION', ''), ('protection', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('protected', 'ACTION', ''), ('attackers', 'FLAW', ''), ('bypass', 'secword', ''), ('protection', 'SECWORD', ''), ('protections', 'SECWORD', ''), ('injection', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('cryptographically', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-330', 'CWEID', ''), ('high', 'SEVERITY', '')]"
31,CWE-79,GHSA-fp76-f299-v3hj,"@@ -127,8 +127,7 @@ public function getFile(): bool
         $allowedFolders = ['node_modules', 'vendor', 'Dinamic', 'Core', 'Plugins', 'MyFiles/Public'];
         foreach ($allowedFolders as $folder) {
             if ('/' . $folder === substr($uri, 0, 1 + strlen($folder))) {
-                header('Content-Type: ' . $this->getMime($filePath));
-                readfile($filePath);
+                $this->download($filePath);
                 return true;
             }
         }
@@ -137,14 +136,7 @@ public function getFile(): bool
         $token = filter_input(INPUT_GET, 'myft');
         $fixedFilePath = substr(urldecode($uri), 1);
         if ('/MyFiles/' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {
-            header('Content-Type: ' . $this->getMime($filePath));
-
-            // disable the buffer if enabled
-            if (ob_get_contents()) {
-                ob_end_flush();
-            }
-
-            readfile($filePath);
+            $this->download($filePath);
             return true;
         }
 
@@ -205,6 +197,23 @@ private function deploy()
         }
     }
 
+    private function download(string $filePath)
+    {
+        header('Content-Type: ' . $this->getMime($filePath));
+
+        // disable the buffer if enabled
+        if (ob_get_contents()) {
+            ob_end_flush();
+        }
+
+        // force to download svg files to prevent XSS attacks
+        if (strpos($filePath, '.svg') !== false) {
+            header('Content-Disposition: attachment; filename=""' . basename($filePath) . '""');
+        }
+
+        readfile($filePath);
+    }
+
     /**
      * Return the mime type from given file.
      *","Force to download SVG files to prevent security problems.
------
Forzamos a descargar los archivos SVG para evitar problemas de seguridad.","vuln-fix: Force SVG downloads to prevent XSS in file serving

The file serving code did not force SVG files to be downloaded, allowing them to be rendered inline in browsers.
This posed a cross-site scripting risk by enabling malicious SVG content to execute scripts in the context of the user’s session.
The fix centralizes file output and adds a Content-Disposition header to force SVG files to download instead of rendering inline.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('prevent', 'ACTION', ''), ('security', 'secword', ''), ('problems', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
32,CWE-79,GHSA-mxvc-fwgx-j778,"@@ -16,7 +16,7 @@
 <div>
     <h1>Error</h1>
     <p>
-        {{ error_message|safe }}
+        {{ error_message }}
     </p>
     <hr>
     <p>","Render error message w/o `safe` filter

The error message shown in the error template does not need to be
rendered using the safe filter, and furthermore opens up an XSS
vulnerability.","vuln-fix: Remove unsafe rendering of error messages

The error message was rendered using the 'safe' filter, allowing unescaped HTML content to be injected into the page.
This created a cross-site scripting (XSS) vulnerability by enabling attackers to execute arbitrary scripts in users' browsers.
The fix removes the 'safe' filter to ensure error messages are properly escaped before rendering.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.23529411764705882,"[('error', 'FLAW', ''), ('safe', 'secword', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'secword', ''), ('unescaped', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('safe', 'secword', ''), ('ensure', 'ACTION', ''), ('error', 'FLAW', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
33,CWE-79,GHSA-c65v-p733-9796,"@@ -93,15 +93,15 @@ public function transformAsset(Asset $asset)
                     $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin/custom_fields/general.encrypted'));
 
                     $fields_array[$field->name] = [
-                            'field' => $field->convertUnicodeDbSlug(),
-                            'value' => $value,
+                            'field' => e($field->convertUnicodeDbSlug()),
+                            'value' => e($value),
                             'field_format' => $field->format,
                         ];
 
                 } else {
                     $fields_array[$field->name] = [
-                        'field' => $field->convertUnicodeDbSlug(),
-                        'value' => $asset->{$field->convertUnicodeDbSlug()},
+                        'field' => e($field->convertUnicodeDbSlug()),
+                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),
                         'field_format' => $field->format,
                     ];
 
@@ -134,7 +134,7 @@ public function transformAsset(Asset $asset)
                         
                             'id' => $component->id,
                             'pivot_id' => $component->pivot->id,
-                            'name' => $component->name,
+                            'name' => e($component->name),
                             'qty' => $component->pivot->assigned_qty,
                             'price_cost' => $component->purchase_cost,
                             'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,","Merge pull request #10315 from snipe/fixes/escape_custom_fields_in_api_response

Escape custom field values in API response","vuln-fix: Escape output to prevent XSS in asset transformation

The transformAsset function outputted unescaped user-controlled data directly into arrays used for rendering views.
This allowed attackers to inject malicious scripts, leading to cross-site scripting (XSS) vulnerabilities and potential session hijacking or defacement.
The patch applies the e() escaping function to all dynamic fields and values before output, ensuring safe HTML encoding.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('#10315', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('escape_custom_fields_in_api_response', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('asset', 'secword', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('hijacking', 'SECWORD', ''), ('patch', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
34,CWE-79,GHSA-m8rp-q82r-c5mf,"@@ -91,7 +91,6 @@
             <hr class=""thin"" />
             <div class=""row"">
 
-
                 <?php
                 $iformVr=0;
                 foreach ($form_values_formated as $form_values_row) {
@@ -106,12 +105,12 @@
                             <?php if (!is_array($val1)){ ?>
                                 <div>
                                     <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
-                                    <p><?php print $val1; ?></p>
+                                    <p><?php print htmlentities($val1); ?></p>
                                 </div>
                             <?php } else { ?>
                                 <small class=""text-muted""><?php echo str_replace('_', ' ', $key); ?>:</small>
                                 <?php foreach ($val1 as $val1_1){ ?>
-                                    <p><?php print $val1_1 . '<br />'; ?></p>
+                                    <p><?php print htmlentities($val1_1) . '<br />'; ?></p>
                                 <?php }?>
                             <?php } ?>
                         <?php } ?>",xss on contact form fix,"vuln-fix: Escape output to prevent cross-site scripting

The code printed user-supplied form values directly into HTML without escaping, allowing injection of malicious scripts.
This created a cross-site scripting (XSS) vulnerability that could compromise user sessions or perform unauthorized actions.
The fix applies htmlentities to all output values, ensuring special characters are safely encoded before rendering.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('xss', 'secword', ''), ('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('cross-site scripting', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
35,CWE-79,GHSA-3j58-p785-f27x,"@@ -17,9 +17,6 @@
 class ApiController  extends FrontendController
 {
 
-
-
-
     public function api_html()
     {
         if (!defined('MW_API_HTML_OUTPUT')) {
@@ -609,12 +606,14 @@ public function module()
 
         $request_data = array_merge($_GET, $_POST);
 
-
         // sanitize attributes
         if($request_data){
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
+
+                $v = $antixss->xss_clean($v);
+
                 if(is_string($k)){
                     $k = $antixss->xss_clean($k);
                     if($k){
@@ -623,6 +622,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
+                
             }
             $request_data = $request_data_new;
         }",fix xss on module api call in value parameters,"vuln-fix: Sanitize request data keys and values to prevent XSS

The module method did not sanitize user-supplied request keys and values, allowing malicious scripts to be injected and executed in the application context.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript and compromise user sessions or data.
The fix applies AntiXSS's xss_clean to both keys and values of the request data before further processing.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('antixss', 'SECWORD', ''), ('xss_clean', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
36,CWE-79,GHSA-7c82-mp33-r854,"@@ -1,6 +1,128 @@
 (function ($) {
   'use strict';
 
+  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
+
+  var uriAttrs = [
+    'background',
+    'cite',
+    'href',
+    'itemtype',
+    'longdesc',
+    'poster',
+    'src',
+    'xlink:href'
+  ];
+
+  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
+
+  var DefaultWhitelist = {
+    // Global attributes allowed on any supplied element below.
+    '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
+    a: ['target', 'href', 'title', 'rel'],
+    area: [],
+    b: [],
+    br: [],
+    col: [],
+    code: [],
+    div: [],
+    em: [],
+    hr: [],
+    h1: [],
+    h2: [],
+    h3: [],
+    h4: [],
+    h5: [],
+    h6: [],
+    i: [],
+    img: ['src', 'alt', 'title', 'width', 'height'],
+    li: [],
+    ol: [],
+    p: [],
+    pre: [],
+    s: [],
+    small: [],
+    span: [],
+    sub: [],
+    sup: [],
+    strong: [],
+    u: [],
+    ul: []
+  }
+
+  /**
+   * A pattern that recognizes a commonly useful subset of URLs that are safe.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
+
+  /**
+   * A pattern that matches safe data URLs. Only matches image, video and audio types.
+   *
+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
+   */
+  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
+
+  function allowedAttribute (attr, allowedAttributeList) {
+    var attrName = attr.nodeName.toLowerCase()
+
+    if ($.inArray(attrName, allowedAttributeList) !== -1) {
+      if ($.inArray(attrName, uriAttrs) !== -1) {
+        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
+      }
+
+      return true
+    }
+
+    var regExp = $(allowedAttributeList).filter(function (index, value) {
+      return value instanceof RegExp
+    })
+
+    // Check if a regular expression validates the attribute.
+    for (var i = 0, l = regExp.length; i < l; i++) {
+      if (attrName.match(regExp[i])) {
+        return true
+      }
+    }
+
+    return false
+  }
+
+  function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
+    if (sanitizeFn && typeof sanitizeFn === 'function') {
+      return sanitizeFn(unsafeElements);
+    }
+
+    var whitelistKeys = Object.keys(whiteList);
+
+    for (var i = 0, len = unsafeElements.length; i < len; i++) {
+      var elements = unsafeElements[i].querySelectorAll('*');
+
+      for (var j = 0, len2 = elements.length; j < len2; j++) {
+        var el = elements[j];
+        var elName = el.nodeName.toLowerCase();
+
+        if (whitelistKeys.indexOf(elName) === -1) {
+          el.parentNode.removeChild(el);
+
+          continue;
+        }
+
+        var attributeList = [].slice.call(el.attributes);
+        var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
+
+        for (var k = 0, len3 = attributeList.length; k < len3; k++) {
+          var attr = attributeList[k];
+
+          if (!allowedAttribute(attr, whitelistedAttributes)) {
+            el.removeAttribute(attr.nodeName);
+          }
+        }
+      }
+    }
+  }
+
   // Polyfill for browsers with no classList support
   // Remove in v2
   if (!('classList' in document.createElement('_'))) {
@@ -745,7 +867,10 @@
     dropdownAlignRight: false,
     windowPadding: 0,
     virtualScroll: 600,
-    display: false
+    display: false,
+    sanitize: true,
+    sanitizeFn: null,
+    whiteList: DefaultWhitelist
   };
 
   if (version.major === '4') {
@@ -1100,13 +1225,35 @@
                 emptyMenu = menuInner.firstChild.cloneNode(false),
                 marginTop,
                 marginBottom,
-                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements;
+                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements,
+                toSanitize = [];
 
             // replace the existing UL with an empty one - this is faster than $.empty()
             menuInner.replaceChild(emptyMenu, menuInner.firstChild);
 
             for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
-              menuFragment.appendChild(elements[i]);
+              var element = elements[i],
+                  elText,
+                  elementData;
+
+              if (that.options.sanitize) {
+                elText = element.lastChild;
+
+                if (elText) {
+                  elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0].data;
+
+                  if (elementData && elementData.content && !elementData.sanitized) {
+                    toSanitize.push(elText);
+                    elementData.sanitized = true;
+                  }
+                }
+              }
+
+              menuFragment.appendChild(element);
+            }
+
+            if (that.options.sanitize && toSanitize.length) {
+              sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);
             }
 
             if (isVirtual === true) {
@@ -1469,7 +1616,8 @@
           multipleSeparator = document.createTextNode(this.options.multipleSeparator),
           titleFragment = elementTemplates.fragment.cloneNode(false),
           showCount,
-          countMax;
+          countMax,
+          hasContent = false;
 
       this.togglePlaceholder();
 
@@ -1506,6 +1654,7 @@
                 titleOptions.text = option.title;
               } else if (thisData.content && that.options.showContent) {
                 titleOptions.optionContent = thisData.content.toString();
+                hasContent = true;
               } else {
                 if (that.options.showIcon) {
                   titleOptions.optionIcon = thisData.icon;
@@ -1554,6 +1703,10 @@
       // strip all HTML tags and trim the result, then unescape any escaped tags
       this.$button[0].title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();
 
+      if (this.options.sanitize && hasContent) {
+        sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);
+      }
+
       buttonInner.innerHTML = '';
       buttonInner.appendChild(titleFragment);
 
@@ -2833,8 +2986,16 @@
             options = typeof _option == 'object' && _option;
 
         if (!data) {
-          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);
-          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);
+          var dataAttributes = $this.data();
+
+          for (var dataAttr in dataAttributes) {
+            if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
+              delete dataAttributes[dataAttr];
+            }
+          }
+
+          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);
+          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
           $this.data('selectpicker', (data = new Selectpicker(this, config)));
         } else if (options) {
           for (var i in options) {",add sanitize option for data-content (#2199),"vuln-fix: Sanitize HTML content to prevent XSS in selectpicker

The selectpicker component did not properly sanitize HTML content in option elements and titles, allowing injection of malicious scripts via unsanitized user input.
This exposed users to cross-site scripting attacks that could execute arbitrary code in the browser context, compromising user data and session integrity.
The fix adds a configurable HTML sanitizer with a strict whitelist of allowed tags and attributes, removing unsafe elements and attributes before rendering.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.11764705882352941,"[('add', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('#2199', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitize', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('removing', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
37,CWE-79,GHSA-x7r7-wmj8-vv5g,"@@ -8,6 +8,7 @@
 import os
 import re
 from collections import defaultdict
+from urllib.parse import urlparse
 
 from flask import (
     Response,
@@ -170,7 +171,16 @@ def _add_additional_assets(hook):
 def login():
     from flask_login import current_user
 
-    redirect_url = request.args.get(""redirect"", request.script_root + url_for(""index""))
+    default_redirect_url = request.script_root + url_for(""index"")
+    redirect_url = request.args.get(""redirect"", default_redirect_url)
+
+    parsed = urlparse(redirect_url)  # check if redirect url is valid
+    if parsed.scheme != """" or parsed.netloc != """":
+        _logger.warning(
+            f""Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}""
+        )
+        redirect_url = default_redirect_url
+
     permissions = sorted(
         filter(
             lambda x: x is not None and isinstance(x, OctoPrintPermission),","🔒️ Sanitize and validate login redirect

Fixes an XSS and an open redirect issue.","vuln-fix: Validate redirect URL in login to prevent open redirect

The login endpoint accepted arbitrary redirect URLs without validation, allowing attackers to craft URLs that redirect users to external malicious sites.
This posed an open redirect vulnerability, enabling phishing attacks by redirecting authenticated users to attacker-controlled domains.
The fix parses and validates the redirect URL, rejecting any with a scheme or network location, and defaults to a safe internal URL instead.

Weakness: CWE-601
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('sanitize', 'secword', ''), ('validate', 'secword', ''), ('login', 'secword', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('login', 'secword', ''), ('prevent', 'ACTION', ''), ('open redirect', 'secword', ''), ('login', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('open redirect', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('phishing', 'secword', ''), ('attacks', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
38,CWE-79,GHSA-2cqg-q7jm-j35c,"@@ -910,7 +910,7 @@ public function audit(Request $request) {
             }
         }
 
-        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.$request->input('asset_tag').' not found'));
+        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.e($request->input('asset_tag')).' not found'));","Merge pull request #10286 from uberbrady/fix_bulk_audit_xss

Escape asset_tag attribute at controller level for bulk checkout","vuln-fix: Escape user input in error message to prevent XSS

The audit function returned an error message embedding raw user input without escaping, allowing injection of malicious scripts in JSON responses.
This exposed the application to reflected cross-site scripting attacks, risking user session theft or interface manipulation.
The fix applies proper escaping to the asset_tag input before including it in the error message string.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('#10286', 'ISSUE', ''), ('fix_bulk_audit_xss', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('audit', 'secword', ''), ('error', 'FLAW', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
39,CWE-79,GHSA-mg5h-9rhq-4cqx,"@@ -300,6 +300,7 @@ public function isDangerFilename($filename){
 			 $isDangerStr($filename , "".php"")
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
+			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
 		) {",file upload bug,"vuln-fix: Extend dangerous filename checks to include .shtm extension

The filename validation function did not consider files with the .shtm extension as dangerous, allowing potentially harmful files to bypass security filters.
This omission could enable attackers to upload or execute malicious scripts disguised with the .shtm extension, leading to code execution or information disclosure.
The patch adds a check for the .shtm extension to the list of dangerous filename patterns, improving input validation and reducing attack surface.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('code execution', 'SECWORD', ''), ('disclosure', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('attack surface', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
40,"CWE-89', 'CWE-79",GHSA-x92h-wmg2-6hp7,"@@ -1346,22 +1346,37 @@ public function setMethod($method)
      */
     public function getMethod()
     {
-        if (null === $this->method) {
-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
-
-            if ('POST' === $this->method) {
-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
-                    $this->method = strtoupper($method);
-                } elseif (self::$httpMethodParameterOverride) {
-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
-                    if (\is_string($method)) {
-                        $this->method = strtoupper($method);
-                    }
-                }
-            }
+        if (null !== $this->method) {
+            return $this->method;
+        }
+
+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
+
+        if ('POST' !== $this->method) {
+            return $this->method;
+        }
+
+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');
+
+        if (!$method && self::$httpMethodParameterOverride) {
+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
+        }
+
+        if (!\is_string($method)) {
+            return $this->method;
+        }
+
+        $method = strtoupper($method);
+
+        if (\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
+            return $this->method = $method;
+        }
+
+        if (!preg_match('/^[A-Z]++$/D', $method)) {
+            throw new SuspiciousOperationException(sprintf('Invalid method override ""%s"".', $method));
         }
 
-        return $this->method;
+        return $this->method = $method;
     }
 
     /**",[HttpFoundation] reject invalid method override,"vuln-fix: Validate HTTP method override input strictly

The method override logic accepted any string as an HTTP method without proper validation, allowing injection of invalid or malicious method names.
This could lead to unexpected behavior or security issues by enabling unsupported or harmful HTTP methods to be processed by the application.
The fix enforces strict validation against a whitelist of allowed HTTP methods and rejects invalid inputs with an exception.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
41,CWE-79,GHSA-54qq-9chj-rxhv,"@@ -12,7 +12,7 @@
 
 ?>
 <li class=""nav-item dropleft"">
-    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false""><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
+    <a href=""#"" class=""nav-link dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-expanded=""false"" ng-non-bindable><?php echo htmlspecialchars($UserData->name),' ',htmlspecialchars($UserData->surname)?></a>
     <div class=""dropdown-menu"" style=""min-width: 25rem;"" role=""menu"">
 
         <div class=""row"">",Escape in user box,"vuln-fix: Prevent AngularJS expression injection in user dropdown

The user dropdown link rendered user names without disabling AngularJS expression evaluation, allowing injection of malicious AngularJS code.
This posed a risk of client-side code execution, enabling attackers to run arbitrary scripts in the victim’s browser context.
The patch adds the ng-non-bindable attribute to the link to disable AngularJS compilation and prevent expression injection.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('code execution', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
42,CWE-79,GHSA-mrvj-7q4f-5p42,"@@ -89,6 +89,16 @@ parameters:
         - pht
         - phtml
         - pgif
+        - hta
+        - htm
+        - html
+        - xhtm
+        - xhtml
+        - jar
+        - js
+        - jse
+        - svg
+        - swf
 
     # Content settings
     ezsettings.default.content.view_cache: true         # Whether to use content view cache or not (Etag/Last-Modified based)","Merge pull request from GHSA-mrvj-7q4f-5p42

Co-authored-by: Gunnstein Lye <gunnstein.lye@ibexa.co>","vuln-fix: Extend blocked file extensions to prevent risky content uploads

The configuration previously allowed uploading potentially dangerous file types by omitting several executable and script-related extensions from the blocked list.
This exposed the system to risks such as remote code execution, cross-site scripting, and malicious file execution through uploaded content.
The patch adds multiple high-risk extensions like hta, html, js, svg, and swf to the blocked list, reducing the attack surface by preventing these files from being uploaded.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.17647058823529413,"[('ghsa', 'VULNID', 'GHSA'), ('gunnstein.lye@ibexa.co', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('remote code execution', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('malicious file execution', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('high', 'SEVERITY', ''), ('attack surface', 'secword', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
43,CWE-79,GHSA-jq4v-f5q6-mjqq,"@@ -23,6 +23,8 @@
     'usemap',
     # Not standard:
     'dynsrc', 'lowsrc',
+    # HTML5 formaction
+    'formaction'
     ])
 
 # Not in the HTML 4 spec:",Add formaction attribute to defs.link_attrs,"vuln-fix: Add 'formaction' to allowed HTML attributes whitelist

The sanitizer omitted the 'formaction' attribute from its allowed list, permitting potential injection of unsafe attributes in HTML forms.
This omission could enable attackers to manipulate form submission targets, leading to phishing or cross-site scripting attacks.
The patch adds 'formaction' to the whitelist, ensuring it is properly recognized and sanitized during HTML input processing.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('add', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('sanitizer', 'secword', ''), ('injection', 'secword', ''), ('unsafe', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('phishing', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
44,CWE-79,GHSA-8x44-pwr2-rgc6,"@@ -119,7 +119,7 @@ public function getTreeAction(Request $request)
                 'id' => $class->getId(),
                 'text' => $text,
                 'leaf' => true,
-                'icon' => $class->getIcon() ? $class->getIcon() : $defaultIcon,
+                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,
                 'cls' => 'pimcore_class_icon',
                 'propertyVisibility' => $class->getPropertyVisibility(),
                 'enableGridLocking' => $class->isEnableGridLocking(),",added escape function to the icon field,"vuln-fix: Escape icon HTML in getTreeAction response

The getTreeAction method output included icon HTML without escaping, allowing injection of arbitrary HTML or scripts via class icon values.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute malicious code in users’ browsers when rendering the icon.
The fix applies htmlspecialchars to the icon value, ensuring special characters are safely encoded before output.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('added', 'ACTION', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('malicious code', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
45,CWE-79,GHSA-3j9m-hcv9-rpj8,"@@ -1,6 +1,6 @@
 import React from 'react';
 import { css } from '@emotion/css';
-import { GrafanaTheme2 } from '@grafana/data';
+import { GrafanaTheme2, textUtil } from '@grafana/data';
 import { Icon, IconName, Link, useTheme2 } from '@grafana/ui';
 
 export interface Props {
@@ -29,13 +29,15 @@ const DropdownChild = ({ isDivider = false, icon, onClick, target, text, url }:
     </button>
   );
   if (url) {
+    const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url);
+
     element =
       !target && url.startsWith('/') ? (
-        <Link className={styles.element} onClick={onClick} href={url}>
+        <Link className={styles.element} onClick={onClick} href={sanitizedUrl}>
           {linkContent}
         </Link>
       ) : (
-        <a className={styles.element} href={url} target={target} rel=""noopener"" onClick={onClick}>
+        <a className={styles.element} href={sanitizedUrl} target={target} rel=""noopener"" onClick={onClick}>
           {linkContent}
         </a>
       );","Merge pull request #147 from grafana/axelav/sanitized-nav-links-8-2-3

Sanitized NavBar children links to remove angular interpolation v8.2.3","vuln-fix: Sanitize URLs to prevent Angular expression injection

The component rendered URLs without sanitization, allowing Angular interpolation expressions to be injected and executed in the UI context.
This posed a security risk by enabling cross-site scripting (XSS) attacks through crafted URLs containing Angular template syntax.
The fix applies textUtil.sanitizeAngularInterpolation to all URLs before rendering, neutralizing Angular expressions and preventing script execution.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.17647058823529413,"[('#147', 'ISSUE', ''), ('sanitized', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('remove', 'ACTION', ''), ('v8.2.3', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('textutil.sanitizeangularinterpolation', 'URL', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
46,CWE-79,GHSA-wg4r-q74r-p7c8,"@@ -305,6 +305,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".xml"")
 			|| $isDangerStr($filename , "".xxhtml"")
 			|| $isDangerStr($filename , "".asp"")			
+			|| $isDangerStr($filename , "".xsl"")
 		) {
 			return true;
 		}","Merge pull request #1630 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Extend dangerous filename check to include .xsl files

The filename validation function did not consider files with the .xsl extension as dangerous, allowing potentially unsafe files to bypass security checks.
This omission could enable attackers to upload or process malicious XML Stylesheet files, leading to XML External Entity (XXE) or other injection attacks.
The patch adds a check for the .xsl extension to the list of dangerous filenames, improving input validation and reducing attack surface.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.23529411764705882,"[('#1630', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('attack surface', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
47,CWE-79,GHSA-4p92-fv6v-fhfj,"similarity index 100%
rename from .github/workflows/templates.yml.backup
rename to .github/workflows/templates.yml",update,"vuln-fix: Remove backup file from GitHub workflows directory

The repository contained a backup copy of a GitHub Actions workflow file, which could expose sensitive workflow configurations or secrets if accessed.
This posed a risk of accidental information disclosure or unauthorized workflow manipulation by exposing internal CI/CD details.
The fix removes the backup file by renaming it out of the repository, ensuring only intended workflow files remain accessible.

Weakness: CWE-200
Severity: Low
CVSS: 3.1",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('low', 'SEVERITY', '')]"
48,CWE-79,GHSA-mq35-wqvf-r23c,"@@ -78,7 +78,7 @@ def unlink?
     def params
       super
     rescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError => e
-      raise BadRequest, ""Invalid query parameters: #{e.message}""
+      raise BadRequest, ""Invalid query parameters: #{Rack::Utils.escape_html(e.message)}""
     end
 
     private","escape invalid query params, fixes #1428","vuln-fix: Escape error messages in query parameter handling

The unlink? method raised exceptions with unescaped error messages directly included in HTTP responses.
This allowed reflected cross-site scripting (XSS) attacks if malicious input triggered parameter parsing errors.
The fix escapes HTML in error messages using Rack::Utils.escape_html before including them in the BadRequest response.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('escape', 'secword', ''), ('fixes', 'ACTION', ''), ('#1428', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('error', 'FLAW', ''), ('unescaped', 'SECWORD', ''), ('error', 'FLAW', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('errors', 'FLAW', ''), ('fix', 'ACTION', ''), ('escapes', 'SECWORD', ''), ('error', 'FLAW', ''), ('rack::utils.escape_html', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
49,CWE-79,GHSA-p885-prv3-m4xv,"@@ -30,11 +30,11 @@ public function requestedAssets()
             // Make sure the asset and request still exist
             if ($checkoutRequest && $checkoutRequest->itemRequested()) {
                 $results['rows'][] = [
-                    'image' => $checkoutRequest->itemRequested()->present()->getImageUrl(),
-                    'name' => $checkoutRequest->itemRequested()->present()->name(),
-                    'type' => $checkoutRequest->itemType(),
-                    'qty' => $checkoutRequest->quantity,
-                    'location' => ($checkoutRequest->location()) ? $checkoutRequest->location()->name : null,
+                    'image' => e($checkoutRequest->itemRequested()->present()->getImageUrl()),
+                    'name' => e($checkoutRequest->itemRequested()->present()->name()),
+                    'type' => e($checkoutRequest->itemType()),
+                    'qty' => (int) $checkoutRequest->quantity,
+                    'location' => ($checkoutRequest->location()) ? e($checkoutRequest->location()->name) : null,
                     'expected_checkin' => Helper::getFormattedDateObject($checkoutRequest->itemRequested()->expected_checkin, 'datetime'),
                     'request_date' => Helper::getFormattedDateObject($checkoutRequest->created_at, 'datetime'),
                 ];","Merge pull request #10942 from snipe/fixes/xss_user_requested

Fixes potential XSS vuln in user requestable results","vuln-fix: Escape output in requestedAssets to prevent XSS

The requestedAssets method outputted user-controllable data without escaping, allowing injection of malicious HTML or JavaScript into the rendered page.
This exposed users to cross-site scripting attacks, risking session hijacking, defacement, or unauthorized actions within the application.
The fix applies proper escaping functions to all output fields, ensuring special characters are safely encoded before rendering.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.058823529411764705,"[('#10942', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_user_requested', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
50,CWE-79,GHSA-7vvq-7r29-5vg3,"@@ -498,7 +498,7 @@ <h1><a href=""https://threejs.org"">three.js</a></h1>
 			const oldIframe = iframe;
 			iframe = oldIframe.cloneNode();
 
-			if ( hash ) {
+			if ( hash && titles[ splitHash[ 0 ] ] ) {
 
 				iframe.src = splitHash[ 0 ] + '.html' + splitHash[ 1 ];
 				subtitle = titles[ splitHash[ 0 ] ] + splitHash[ 1 ] + ' – ';",Only load trusted iframe (#23245),"vuln-fix: Validate hash keys before iframe source assignment

The code assigned iframe.src based on unvalidated hash keys, allowing injection of arbitrary URLs if the hash contained unexpected values.
This posed a security risk by enabling potential cross-site scripting or content injection through manipulated iframe sources.
The fix adds a check to ensure the hash key exists in the titles map before setting iframe.src, preventing unauthorized URL assignments.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('#23245', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('iframe.src', 'URL', ''), ('hash', 'secword', ''), ('keys', 'SECWORD', ''), ('injection', 'secword', ''), ('hash', 'secword', ''), ('security', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'secword', ''), ('manipulated', 'ACTION', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('hash', 'secword', ''), ('key', 'SECWORD', ''), ('iframe.src', 'URL', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
51,CWE-79,GHSA-72p5-2r6g-fm6v,"@@ -559,7 +559,7 @@ COMPONENT('grid', 'filter:true;external:false;fillcount:50;filterlabel:Filtering
 			for (var j = 0, jl = columns.length; j < jl; j++) {
 				var column = columns[j];
 				var val = items[i][column.name];
-				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : (column.format ? val.format(column.format) : val);
+				m.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : Thelpers.encode((column.format ? val.format(column.format) : val));
 				m.index = j;
 				m.align = column.align;
 				m.background = column.background;",Fixed XSS.,"vuln-fix: Encode grid cell values to prevent XSS

The grid component rendered cell values without encoding, allowing malicious content to be injected and executed in the browser.
This exposed users to cross-site scripting attacks, risking session hijacking or unauthorized actions via crafted data.
The fix applies HTML encoding to formatted cell values before rendering, ensuring unsafe characters are escaped.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('unsafe', 'secword', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
52,CWE-79,GHSA-q67f-3jq4-mww2,"@@ -568,10 +568,11 @@ pimcore.element.properties = Class.create({
 
     addSetFromUserDefined: function (customKey, customType) {
         try {
-            if (in_array(customKey.getValue(), this.disallowedKeys)) {
+            let key = htmlspecialchars(customKey.getValue());
+            if (in_array(key, this.disallowedKeys)) {
                 Ext.MessageBox.alert(t(""error""), t(""name_is_not_allowed""));
             }
-            this.add(customKey.getValue(), customType.getValue(), false, false, false, true);
+            this.add(key, customType.getValue(), false, false, false, true);
         } catch (e) {
             console.log(e);
         }",escaping 'key' custom property field in elements,"vuln-fix: Sanitize user-defined keys before validation and usage

User-defined keys were used directly without sanitization, allowing injection of HTML or script content that could bypass disallowed key checks or cause XSS.
This posed a security risk by enabling attackers to inject malicious code into the UI or manipulate key validation logic.
The fix applies htmlspecialchars to sanitize the key before checking against disallowed keys and before adding it, preventing injection attacks.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('escaping', 'secword', ''), ('key', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('keys', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('bypass', 'secword', ''), ('key', 'SECWORD', ''), ('xss', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious code', 'secword', ''), ('manipulate', 'ACTION', ''), ('key', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('sanitize', 'secword', ''), ('key', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('adding', 'ACTION', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
53,CWE-79,GHSA-jr37-66pj-36v7,"@@ -82,7 +82,7 @@ public function anyData()
             })
             ->addColumn('view', function ($tasks) {
                 return '<a href=""' . route(""tasks.show"", $tasks->external_id) . '"" class=""btn btn-link"">' . __('View') .'</a>'
-                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-title=""'. $tasks->title . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
+                . '<a data-toggle=""modal"" data-id=""'. route('tasks.destroy',$tasks->external_id) . '"" data-target=""#deletion"" class=""btn btn-link"">' . __('Delete') .'</a>'
                 ;
             })
             ->rawColumns(['titlelink','view', 'status_id'])",fix xss for tasks index,"vuln-fix: Remove task title from deletion modal data attributes

The deletion modal included the task title in a data attribute without sanitization, exposing the application to potential cross-site scripting (XSS) attacks.
This allowed attackers to inject malicious scripts via task titles, which could execute in users’ browsers when the modal was triggered.
The fix removes the task title from the data attributes to eliminate the injection vector in the modal markup.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
54,CWE-79,GHSA-9w7h-3wwh-6m5q,"@@ -611,10 +611,15 @@ public function module()
             $request_data_new = [];
             $antixss = new AntiXSS();
             foreach ($request_data as $k=>$v){
-
+                if(is_string($v)) {
+                    $v = str_replace('<', '-', $v);
+                    $v = str_replace('>', '-', $v);
+                }
                 $v = $antixss->xss_clean($v);
 
                 if(is_string($k)){
+                    $k = str_replace('<', '-', $k);
+                    $k = str_replace('>', '-', $k);
                     $k = $antixss->xss_clean($k);
                     if($k){
                         $request_data_new[$k] = $v;
@@ -622,7 +627,7 @@ public function module()
                 } else {
                     $request_data_new[$k] = $v;
                 }
-                
+
             }
             $request_data = $request_data_new;
         }",update,"vuln-fix: Sanitize angle brackets in request data keys and values

The code did not sanitize angle bracket characters in request data keys and values before applying XSS cleaning, allowing potential bypass of filtering.
This posed a security risk by enabling attackers to inject HTML or script tags that could execute cross-site scripting attacks.
The fix replaces '<' and '>' characters with dashes before running the XSS cleaner, ensuring these characters cannot be used to craft malicious payloads.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('keys', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('malicious', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
55,CWE-79,GHSA-hj8g-cw8x-2c6m,"@@ -276,7 +276,8 @@ public function string($skip_ajax = false)
 
         // clear request params
         $cleanParam = new HTMLClean();
-        $u1 = $cleanParam->cleanArray($u1);
+        $u1 = $cleanParam->clean($u1);
+
 
         return $u1;
     }",Update UrlManager.php,"vuln-fix: Use proper HTML cleaning method for input sanitization

The code incorrectly used cleanArray instead of clean to sanitize a string input, resulting in incomplete or ineffective HTML sanitization.
This flaw allowed malicious HTML or script content to persist, increasing the risk of cross-site scripting (XSS) attacks.
The fix replaces cleanArray with the correct clean method to properly sanitize the input string before further processing.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('incorrectly used', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('sanitization', 'secword', ''), ('flaw', 'FLAW', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
56,"CWE-74', 'CWE-79",GHSA-pxcf-v868-m492,"@@ -19,6 +19,23 @@ app.use((req, res, next) => {
   next();
 });
 
+
+function htmlEscape(text) {
+  return text.replace(/&/g, '&amp;').
+  replace(/</g, '&lt;').
+  replace(/""/g, '&quot;').
+  replace(/'/g, '&#039;');
+}
+
+
+function sanitize(params) {
+  result = {}
+  for (let [key, value] of Object.entries(params)) {
+      result[key] = htmlEscape(value)
+  }
+  return result;
+}
+
 app.get(""/health"", (req, res) => res.sendStatus(200));
 
 const handler = (res, params) => {
@@ -40,12 +57,14 @@ const handler = (res, params) => {
 app.get(""/"", (req, res) => handler(res, req.query));
 app.post(""/"", (req, res) => handler(res, req.body));
 
-app.get(""/dynamic"", (req, res) =>
-  handler(res, { ...req.query, renderToHtml: true })
-);
+app.get(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.query)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
-app.post(""/dynamic"", (req, res) =>
-  handler(res, { ...req.body, renderToHtml: true })
-);
+app.post(""/dynamic"", (req, res) => {
+  var sanitized = sanitize(req.body)
+  handler(res, { ...sanitized, renderToHtml: true })
+})
 
 module.exports = http.createServer(app);",fix: escape special characters before insertion to template,"vuln-fix: Sanitize user input to prevent HTML injection

The application rendered user-supplied query and body parameters directly into HTML without escaping, enabling injection of malicious HTML or scripts.
This posed a risk of cross-site scripting (XSS) attacks, allowing attackers to execute arbitrary scripts in users’ browsers and compromise security.
The fix introduces an HTML escaping function applied to all input parameters before rendering, neutralizing special characters that could lead to injection.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
57,CWE-79,GHSA-rf66-hmqf-q3fc,"@@ -260,7 +260,18 @@ $(document).ready(function () {
     }
 
     function formatDataSelection (datalist) {
-        return datalist.text;
+        // This a heinous workaround for a known bug in Select2.
+        // Without this, the rich selectlists are vulnerable to XSS.
+        // Many thanks to @uberbrady for this fix. It ain't pretty,
+        // but it resolves the issue until Select2 addresses it on their end.
+        //
+        // Bug was reported in 2016 :{
+        // https://github.com/select2/select2/issues/4587
+
+        return datalist.text.replace(/>/g, '&gt;')
+            .replace(/</g, '&lt;')
+            .replace(/""/g, '&quot;')
+            .replace(/'/g, '&#039;');
     }
 
     // This handles the radio button selectors for the checkout-to-foo options",Janky fix for Select2 bug,"vuln-fix: Escape special characters in Select2 data to prevent XSS

The formatDataSelection function returned raw HTML text from Select2 data without escaping, allowing injection of malicious scripts via crafted input.
This exposed users to cross-site scripting attacks, risking session hijacking or unauthorized actions through injected code execution.
The fix applies character escaping for >, <, "", and ' to sanitize the output and mitigate XSS until an official Select2 patch is available.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('sanitize', 'secword', ''), ('mitigate', 'ACTION', ''), ('xss', 'secword', ''), ('patch', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
58,CWE-79,GHSA-hxmr-5gv9-6p8v,"@@ -45,9 +45,9 @@
             $snmpver = 'v2c';
             $additional = [
                 'snmp_disable' => 1,
-                'os'           => $_POST['os'] ? $_POST['os_id'] : 'ping',
-                'hardware'     => $_POST['hardware'],
-                'sysName'      => $_POST['sysName'],
+                'os'           => $_POST['os'] ? strip_tags($_POST['os_id']) : 'ping',
+                'hardware'     => strip_tags($_POST['hardware']),
+                'sysName'      => strip_tags($_POST['sysName']),
             ];
         } elseif ($_POST['snmpver'] === 'v2c' || $_POST['snmpver'] === 'v1') {
             if ($_POST['community']) {","XSS fix, cont. (#13776)

https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/","vuln-fix: Sanitize SNMP input fields to prevent XSS

The SNMP configuration code directly used unsanitized POST parameters for 'os', 'hardware', and 'sysName' fields, allowing injection of malicious HTML or scripts.
This exposed the application to cross-site scripting attacks, risking user session hijacking or unauthorized actions via crafted input.
The fix applies PHP's strip_tags function to these inputs, removing HTML and script tags before further processing.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.23529411764705882,"[('xss', 'secword', ''), ('fix', 'ACTION', ''), ('#13776', 'ISSUE', ''), ('https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
59,CWE-79,GHSA-mxh3-2699-98g9,"@@ -861,7 +861,7 @@ public function fieldcollectionTreeAction(Request $request, EventDispatcherInter
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,
@@ -1266,7 +1266,7 @@ public function objectbrickTreeAction(Request $request, EventDispatcherInterface
                 if (!isset($groups[$item->getGroup()])) {
                     $groups[$item->getGroup()] = [
                         'id' => 'group_' . $item->getKey(),
-                        'text' => $item->getGroup(),
+                        'text' => htmlspecialchars($item->getGroup()),
                         'expandable' => true,
                         'leaf' => false,
                         'allowChildren' => true,",[Admin] DataObject - Escape class definitions group properly,"vuln-fix: Escape group names to prevent XSS in tree views

The code rendered group names directly into HTML without escaping, allowing injection of malicious scripts via crafted group values.
This exposed users to cross-site scripting attacks, risking session hijacking or unauthorized actions within the application.
The fix applies htmlspecialchars to group names before output, ensuring special characters are safely encoded in the HTML context.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
60,CWE-79,GHSA-5jgj-h9wp-53fr,"@@ -285,6 +285,20 @@ public static function isImage($file_path)
             return false;
         }
 
+        /**
+         * Detects whether the file contains PHP or script tags, eg to check for embedded code in GIFs
+         * @param $file_path
+         * @return bool
+         */
+        public static function isFileFreeFromScriptTags($file_path)
+        {
+            if ($contents = file_get_contents($file_path)) {
+                if (stripos($contents, '<script') || strpos($contents, '<?')) return false;
+                return true;
+            }
+            return false;
+        }
+
         /**
          * Retrieve a file by ID
          *",Checking for script tags in GIFs etc (#3017),"vuln-fix: Detect and block files with embedded script tags

The code lacked checks for embedded PHP or script tags within uploaded files, allowing attackers to upload files containing executable code.
This posed a risk of remote code execution or cross-site scripting if such files were processed or served without validation.
The patch adds a method that reads file contents and detects presence of PHP tags or script elements, returning false if found to prevent unsafe files.

Weakness: CWE-94
Severity: High
CVSS: 7.8",0.11764705882352941,"[('#3017', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('attackers', 'FLAW', ''), ('remote code execution', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('found', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-94', 'CWEID', ''), ('high', 'SEVERITY', '')]"
61,CWE-79,GHSA-cg3h-rc9q-g8v9,"@@ -36,7 +36,7 @@ pimcore.settings.website = Class.create({
                 border:false,
                 layout:""fit"",
                 closable:true,
-                items:[this.getRowEditor()]
+                items:[this.getRowEditor()],
             });
 
             var tabPanel = Ext.getCmp(""pimcore_panel_tabs"");
@@ -133,6 +133,7 @@ pimcore.settings.website = Class.create({
                 dataIndex: 'data',
                 flex: 300,
                 editable: true,
+                editor: new Ext.form.TextField({}),
                 renderer: this.getCellRenderer.bind(this),
             },
             {text: t(""site""), flex: 100, sortable:true, dataIndex: ""siteId"",
@@ -303,7 +304,10 @@ pimcore.settings.website = Class.create({
             bodyCls: ""pimcore_editable_grid"",
             stripeRows:true,
             columns : {
-                items: typesColumns
+                items: typesColumns,
+                defaults: {
+                    renderer: Ext.util.Format.htmlEncode
+                },
             },
             sm:  Ext.create('Ext.selection.RowModel', {}),
             bbar:this.pagingtoolbar,
@@ -359,15 +363,23 @@ pimcore.settings.website = Class.create({
     },
 
     getCellEditor: function (record) {
-        var data = record.data;
+        let data = record.data;
 
-        var type = data.type;
-        var property;
+        let type = data.type;
+        let property;
 
         if (type === ""text"") {
-            property = Ext.create('Ext.form.TextField');
+            property = {
+                xtype: 'textfield',
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""textarea"") {
-            property = Ext.create('Ext.form.TextArea');
+            property = {
+                xtype: ""textarea"",
+                flex: 1,
+                value: data.data
+            }
         } else if (type == ""document"" || type == ""asset"" || type == ""object"") {
             property = {
                 xtype: 'textfield',",[Admin] Website Settings - Escape grid values properly,"vuln-fix: Encode grid cell content to prevent XSS

The grid component rendered user-editable cell content without proper HTML encoding, allowing injection of malicious scripts via crafted input data.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in the context of authenticated users.
The fix applies HTML encoding to all grid cell renderers by default and ensures editors use safe ExtJS form fields with controlled values.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.058823529411764705,"[('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensures', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
62,CWE-79,GHSA-73q9-7pwj-gm46,"@@ -150,7 +150,7 @@
             ?>
             <h2><?php echo $t['multi-user']; ?></h2>
             <span class=""heading""><?php echo $t['Username']; ?></span><br>
-            <?php echo $_SESSION['username'];?><br><br>
+            <?php echo xssClean($_SESSION['username'], ""html"");?><br><br>
             <?php
         }
         ?>",rXSS cleaned username in editor info display,"vuln-fix: Sanitize username output to prevent XSS

The code directly echoed the username stored in the session without sanitization, allowing injection of malicious scripts.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers.
The fix applies the xssClean function with HTML context to properly escape the username before output.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('rxss', 'SECWORD', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('xssclean', 'SECWORD', ''), ('escape', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
63,CWE-79,GHSA-fc38-mxwr-pfhx,"@@ -36,7 +36,7 @@ DirectoryIndex index.php
 </IfModule>
 
 <IfModule mod_headers.c>
-    <FilesMatch ""\.svg$"">
+    <FilesMatch ""\.(?i:svg)$"">
         Header set Content-Security-Policy ""script-src 'none'""
     </FilesMatch>
 </IfModule>",NEXT-15677 - Fix XSS for SVG files,"vuln-fix: Make SVG file matching case-insensitive in headers

The configuration matched SVG files case-sensitively, missing files with uppercase extensions like .SVG, allowing them to bypass the Content-Security-Policy restricting scripts.
This allowed attackers to upload or serve SVG files with executable scripts that were not blocked, increasing the risk of cross-site scripting attacks.
The patch updates the FilesMatch directive to use a case-insensitive regex, ensuring all SVG files are properly matched and secured.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('updates', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('secured', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
64,CWE-79,GHSA-2v5j-q74q-r53f,"@@ -56,7 +56,7 @@ def get_markdown(text):
     if not text:
         return """"
 
-    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\[\s\S\]]*?)\)'
+    pattern = fr'([\[\s\S\]]*?)\(([\s\S]*?):([\s\S]*?)\)'
     # Regex check
     if re.match(pattern, text):
         # get get value of group regex",Update pattern,"vuln-fix: Correct regex to prevent malformed markdown parsing

The original regex pattern allowed bracket characters inside the last capture group, causing incorrect parsing of markdown links with nested brackets.
This flaw could be exploited to bypass input validation or cause unexpected behavior in markdown rendering, potentially leading to injection or display issues.
The fix removes bracket characters from the last capture group, ensuring proper matching and preventing malformed input from being accepted.

Weakness: CWE-176
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('flaw', 'FLAW', ''), ('exploited', 'SECWORD', ''), ('bypass', 'secword', ''), ('input validation', 'SECWORD', ''), ('injection', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-176', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
65,CWE-79,GHSA-rfw2-x9f8-2f6m,"@@ -579,11 +579,11 @@ var oncall = {
               },
               footer: function(resp){
                 if (teamsCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/teams"" data-navigo> See all ' + teamsCt + ' results for teams »</a></div>';
                 }
               },
               empty: function(resp){
-                return '<h4> No results found for ""' + resp.query + '"" </h4>';
+                return '<h4> No results found for ""' + Handlebars.escapeExpression(resp.query) + '"" </h4>';
               }
             }
           },
@@ -604,7 +604,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (servicesCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/services"" data-navigo> See all ' + servicesCt + ' results for services »</a></div>';
                 }
               }
             }
@@ -626,7 +626,7 @@ var oncall = {
               },
               footer: function(resp){
                 if (usersCt > typeaheadLimit) {
-                  return '<div class=""tt-see-all""><a href=""/query/' + resp.query + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
+                  return '<div class=""tt-see-all""><a href=""/query/' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + '/users"" data-navigo> See all ' + usersCt + ' results for users »</a></div>';
                 }
               }
             }","prevent potential XSS from searchbar results (#342)

* prevent potential XSS from searchbar results

* use built in handlebars expression escaping

* use handlebars encodeURIComponent","vuln-fix: Escape user input in typeahead query URLs and output

The typeahead feature directly embedded user query strings into HTML and URLs without escaping, enabling injection of malicious scripts or malformed URLs.
This posed a cross-site scripting (XSS) risk by allowing attackers to execute arbitrary JavaScript or manipulate navigation links in the rendered page.
The fix applies Handlebars.escapeExpression and encodeURIComponent to sanitize query strings before insertion into HTML and URL contexts.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('#342', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('encodeuricomponent', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('malformed urls', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('fix', 'ACTION', ''), ('handlebars.escapeexpression', 'URL', ''), ('encodeuricomponent', 'SECWORD', ''), ('sanitize', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
66,CWE-79,GHSA-jff5-55xj-4jcq,"@@ -2168,6 +2168,7 @@ function createSearchBox(searchURL) {
     var ac = new YAHOO.widget.AutoComplete(""search-box"",""search-box-completion"",ds);
     ac.typeAhead = false;
     ac.autoHighlight = false;
+    ac.formatResult = ac.formatEscapedResult;
 
     var box   = $(""search-box"");
     var sizer = $(""search-box-sizer"");","Merge pull request #98 from jenkinsci-cert/SECURITY-388

[SECURITY-388] Escape metacharacters in the search box","vuln-fix: Escape autocomplete results to prevent XSS

The autocomplete widget did not escape HTML entities in its result formatting, allowing injection of malicious scripts via search suggestions.
This exposed users to cross-site scripting attacks that could execute arbitrary JavaScript in their browsers.
The fix assigns the formatResult property to formatEscapedResult, ensuring all autocomplete results are properly escaped before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('#98', 'ISSUE', ''), ('security-388', 'SECWORD', ''), ('security-388', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('formatescapedresult', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
67,CWE-79,GHSA-wvh5-78h5-gmgr,"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\assign_user_summary $summary) {
             $fullname = fullname($summary->user, $summary->viewfullnames);
             $extrainfo = array();
             foreach ($summary->extrauserfields as $extrafield) {
-                $extrainfo[] = $summary->user->$extrafield;
+                $extrainfo[] = s($summary->user->$extrafield);
             }
             if (count($extrainfo)) {
                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';",MDL-74204 mod_assign: escape identity fields in allocate marker form.,"vuln-fix: Sanitize user extra fields in assignment summary

The render function outputted user extra fields without escaping, allowing injection of malicious HTML or scripts into the rendered page.
This created a cross-site scripting (XSS) risk where attackers could execute arbitrary client-side code in other users’ browsers.
The patch applies the s() function to escape these fields, preventing unsafe HTML from being rendered.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('patch', 'ACTION', ''), ('escape', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
68,CWE-79,GHSA-98gj-wwxm-cj3h,"@@ -11,7 +11,7 @@
 import re
 import inspect
 
-__version__ = '0.8'
+__version__ = '0.8.1'
 __author__ = 'Hsiaoming Yang <me@lepture.com>'
 __all__ = [
     'BlockGrammar', 'BlockLexer',
@@ -48,7 +48,8 @@ def _pure_pattern(regex):
 
 
 def _keyify(key):
-    return _key_pattern.sub(' ', key.lower())
+    key = escape(key.lower(), quote=True)
+    return _key_pattern.sub(' ', key)
 
 
 def escape(text, quote=False, smart_amp=True):
@@ -445,7 +446,8 @@ class InlineGrammar(object):
     inline_html = re.compile(
         r'^(?:%s|%s|%s)' % (
             r'<!--[\s\S]*?-->',
-            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (_valid_end, _valid_attr),
+            r'<(\w+%s)((?:%s)*?)\s*>([\s\S]*?)<\/\1>' % (
+                _valid_end, _valid_attr),
             r'<\w+%s(?:%s)*?\s*\/?>' % (_valid_end, _valid_attr),
         )
     )",Fix CVE-2017-16876,"vuln-fix: Escape keys to prevent injection in key normalization

The key normalization function did not escape input keys before processing, allowing crafted inputs to inject unsafe characters into regex patterns.
This posed a risk of regular expression injection, potentially causing unexpected behavior or denial of service through malformed patterns.
The fix applies proper escaping to keys before substitution, ensuring that special characters are safely handled in regex operations.

Weakness: CWE-117
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('cve-2017-16876', 'VULNID', 'CVE')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('key', 'SECWORD', ''), ('key', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('inject', 'secword', ''), ('unsafe', 'secword', ''), ('injection', 'secword', ''), ('denial of service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-117', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
69,CWE-79,GHSA-5ppx-rgw2-xg23,"@@ -712,6 +712,7 @@ var jenkinsRules = {
         };
         ac.prehighlightClassName = ""yui-ac-prehighlight"";
         ac.animSpeed = 0;
+        ac.formatResult = ac.formatEscapedResult;
         ac.useShadow = true;
         ac.autoSnapContainer = true;
         ac.delimChar = e.getAttribute(""autoCompleteDelimChar"");",[SECURITY-641] Escape autocompletion suggestions,"vuln-fix: Escape autocomplete results to prevent XSS

The autocomplete component did not escape user-supplied data before rendering suggestions, allowing injection of malicious HTML or scripts.
This created a cross-site scripting risk where attackers could execute arbitrary JavaScript in users' browsers.
The patch sets the autocomplete's formatResult function to formatEscapedResult, ensuring all results are properly escaped before display.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('security-641', 'SECWORD', ''), ('escape', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('patch', 'ACTION', ''), ('formatescapedresult', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
70,CWE-79,GHSA-gmh3-x5w7-jg5m,"@@ -87,7 +87,7 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
-    $autoSize = xss_clean($autoSize);
+    $autoSize = intval($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
@@ -95,6 +95,16 @@
     }
     $type = xss_clean($type);
 
+            $other = [
+                ';',
+                '\'',
+                '//',
+                '`',
+                '\\',
+
+            ];
+    $type = str_replace($other, '', $type);
+
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
 
@@ -108,6 +118,8 @@
     if ($mod_id != $mod_orig_id) {
         $is_linked_mod = true;
     }
+
+
     ?>
 
     <script type=""text/javascript"">
@@ -124,7 +136,7 @@
         addIcon();
 
         autoSize = <?php  print $autoSize; ?>;
-        settingsType = '<?php print $type; ?>';
+        settingsType = '<?php print htmlentities($type); ?>';
 
         window.onbeforeunload = function () {
             $(document.body).addClass(""mw-external-loading"")",update,"vuln-fix: Sanitize and encode user inputs to prevent XSS

The code previously applied insufficient sanitization on GET parameters, allowing special characters and scripts to be injected into HTML and JavaScript contexts.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary scripts in users’ browsers and potentially hijack sessions or steal data.
The fix converts numeric input to integers, removes dangerous characters from strings, and applies htmlentities encoding before outputting to JavaScript.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('sanitization', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('hijack', 'secword', ''), ('steal', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
71,CWE-79,GHSA-f655-xhvm-cwp4,"@@ -1,4 +1,5 @@
 <?jelly escape-by-default='true'?>
 <j:jelly xmlns:j=""jelly:core"">
-  <span><j:out value=""${it.shortDescription}"" /></span>
+  <!-- SECURITY-2316: This used to show the HTML-formatted it.shortDescription, but that does not properly neutralize user-provided input -->
+  <span>Triggered by GitLab Webhook</span>
 </j:jelly>",[SECURITY-2316],"vuln-fix: Prevent XSS by removing unsafe HTML output

The original code rendered user-controlled shortDescription as HTML without proper sanitization, allowing injection of malicious scripts.
This created a cross-site scripting (XSS) vulnerability that could execute arbitrary JavaScript in users’ browsers, compromising session integrity.
The fix replaces the dynamic HTML output with a fixed safe string, eliminating the injection vector.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('security-2316', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('removing', 'ACTION', ''), ('unsafe', 'secword', ''), ('sanitization', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerability', 'SECWORD', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('fixed', 'ACTION', ''), ('safe', 'secword', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
72,CWE-79,GHSA-fj93-7wm4-8x2g,"@@ -564,6 +564,15 @@ $.widget( ""mobile.pagecontainer"", {
 
 		return $.proxy( function( html, textStatus, xhr ) {
 
+			// Check that Content-Type is ""text/html"" (https://github.com/jquery/jquery-mobile/issues/8640)
+			if ( !/^text\/html\b/.test( xhr.getResponseHeader('Content-Type') ) ) {
+				// Display error message for unsupported content type
+				if ( settings.showLoadMsg ) {
+					this._showError();
+				}
+				return;
+			}
+
 			// Pre-parse html to check for a data-url, use it as the new fileUrl, base path, etc
 			var content,","Check Content-Type header before parsing AJAX response as HTML (#8649)

Fix for issue #8640 (possible XSS vulnerability)","vuln-fix: Validate Content-Type header in AJAX page load

The AJAX page load handler did not verify that the server response had a Content-Type of ""text/html"" before processing the content.
This allowed attackers to inject or execute non-HTML content, potentially leading to cross-site scripting or content spoofing attacks.
The patch adds a check on the Content-Type header and aborts processing with an error if the response is not HTML.

Weakness: CWE-829
Severity: Medium
CVSS: 5.0",0.17647058823529413,"[('#8649', 'ISSUE', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('#8640', 'ISSUE', ''), ('xss', 'secword', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('server', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('cross-site scripting', 'secword', ''), ('spoofing', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-829', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
73,CWE-79,GHSA-xjrf-8x4f-43h4,"@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2008 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -21,21 +21,21 @@
  * Escapes based on the JavaScript 1.5 recommendation.
  *
  * <p>Reference:
- * <a href=""http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Literals#String_Literals"">
- * Core JavaScript 1.5 Guide
- * </a>
+ * <a href=""https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#String_literals"">
+ * JavaScript Guide</a> on Mozilla Developer Network.
  *
  * @author Juergen Hoeller
  * @author Rob Harrop
+ * @author Rossen Stoyanchev
  * @since 1.1.1
  */
 public class JavaScriptUtils {
 
 	/**
-	 * Turn special characters into escaped characters conforming to JavaScript.
-	 * Handles complete character set defined in HTML 4.01 recommendation.
+	 * Turn JavaScript special characters into escaped characters.
+	 *
 	 * @param input the input string
-	 * @return the escaped string
+	 * @return the string with escaped characters
 	 */
 	public static String javaScriptEscape(String input) {
 		if (input == null) {
@@ -73,6 +73,13 @@ else if (c == '\r') {
 			else if (c == '\f') {
 				filtered.append(""\\f"");
 			}
+			else if (c == '\b') {
+				filtered.append(""\\b"");
+			}
+			// No '\v' in Java, use octal value for VT ascii char
+			else if (c == '\013') {
+				filtered.append(""\\v"");
+			}
 			else {
 				filtered.append(c);
 			}","Add BS and VT char escape sequences to JavaScriptUtils

Issue: SPR-9983","vuln-fix: Escape additional JavaScript special characters

The JavaScript escaping utility missed certain special characters like backspace and vertical tab, leaving them unescaped in output strings.
This omission could allow injection of control characters that disrupt script parsing or enable injection attacks in JavaScript contexts.
The fix adds explicit escaping for backspace and vertical tab characters, ensuring all relevant control characters are safely encoded.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('injection', 'secword', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'secword', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
74,CWE-79,GHSA-4mv4-gmmf-q382,"@@ -1,11 +1,11 @@
-/*! DataTables 1.10.10-dev
+/*! DataTables 1.10.10
  * ©2008-2015 SpryMedia Ltd - datatables.net/license
  */
 
 /**
  * @summary     DataTables
  * @description Paginate, search and order HTML tables
- * @version     1.10.10-dev
+ * @version     1.10.10
  * @file        jquery.dataTables.js
  * @author      SpryMedia Ltd (www.sprymedia.co.uk)
  * @contact     www.sprymedia.co.uk/contact
@@ -170,7 +170,7 @@
 	 *  @type string
 	 *  @default Version number
 	 */
-	DataTable.version = ""1.10.10-dev"";
+	DataTable.version = ""1.10.10"";
 
 	/**
 	 * Private data store, containing all of the settings objects that are",Version - 1.10.10 ready,"vuln-fix: Remove development version identifier from DataTables version string

The software incorrectly identified itself as a development version, which could mislead users and automated systems about its stability and security status.
This mislabeling risked users ignoring critical updates or applying incorrect patches, potentially leaving vulnerabilities unaddressed.
The fix updates the version string to the official release number, ensuring accurate version reporting and proper update management.

Weakness: CWE-200
Severity: Low
CVSS: 3.1",0.11764705882352941,"[('1.10.10', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('security', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('updates', 'ACTION', ''), ('patches', 'ACTION', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('updates', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('update', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('low', 'SEVERITY', '')]"
75,CWE-79,GHSA-q3x2-jvp3-wj78,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';
+                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,psd,xlsx,csv,7z'; 
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,xlr,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xlr,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",Update Files.php,"vuln-fix: Remove dangerous XML extension from allowed uploads

The file upload whitelist included the 'xml' extension, permitting XML files that could be exploited for XML External Entity (XXE) attacks.
Allowing XML uploads poses a security risk by enabling attackers to perform server-side request forgery or disclose sensitive data through crafted XML payloads.
The patch removes 'xml' from the allowed file extensions to prevent uploading potentially malicious XML files.

Weakness: CWE-611
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('exploited', 'SECWORD', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('server-side request forgery', 'SECWORD', ''), ('disclose', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('patch', 'ACTION', ''), ('removes', 'ACTION', ''), ('prevent', 'ACTION', ''), ('malicious', 'secword', ''), ('weakness', 'secword', ''), ('cwe-611', 'CWEID', ''), ('high', 'SEVERITY', '')]"
76,CWE-79,GHSA-hhqj-cfjx-vj25,"@@ -368,6 +368,10 @@ <h4 class=""label"">Notes</h4>
 
 				window.addEventListener( 'message', function( event ) {
 
+					if (window.location.origin !== event.origin){
+						return;
+					}
+
 					clearTimeout( connectionTimeout );
 					connectionStatus.style.display = 'none';",Fix DOM XSS,"vuln-fix: Validate origin in postMessage event handler

The event listener for postMessage did not verify the origin of incoming messages before processing them.
This allowed attackers from malicious origins to send crafted messages, potentially leading to cross-origin data leaks or unauthorized actions.
The patch adds a strict origin check comparing event.origin to window.location.origin and ignores messages from untrusted sources.

Weakness: CWE-942
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('event.origin', 'URL', ''), ('window.location.origin', 'URL', ''), ('untrusted sources', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-942', 'CWEID', ''), ('high', 'SEVERITY', '')]"
77,CWE-79,GHSA-h24f-9mm4-w336,"@@ -140,7 +140,9 @@ exports.handleRequest = function(vpath, path, req, res, readOnly, logHeadRequest
 															var name = results[f].name;
 															var normalized = url + '/' + name;
 															while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }
-															res.write('\r\n<p><a href=""/' + normalized + '"">' + name + '</a></p>');
+															if(normalized.indexOf('""') >= 0) throw new Error('unsupported file name')
+															name = name.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
+															res.write('\r\n<p><a href=""/' + normalized + '""><span>' + name + '</span></a></p>');
 														}
 														res.end('\r\n</body></html>');
 													}",Fix not sanitizing file names rendered in html,"vuln-fix: Sanitize file names in directory listing output

The directory listing output did not properly sanitize file names before embedding them in HTML links, allowing injection of malicious characters.
This could lead to cross-site scripting (XSS) attacks by enabling attackers to inject arbitrary HTML or script code into the response.
The patch prevents this by rejecting file names containing double quotes and escaping special HTML characters before rendering.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('sanitizing', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitize', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('patch', 'ACTION', ''), ('prevents', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
78,CWE-79,GHSA-jpj5-hg26-6jgc,"@@ -7,6 +7,7 @@ import (
 	""github.com/Xhofe/alist/server/common""
 	""github.com/Xhofe/alist/utils""
 	""github.com/gin-gonic/gin""
+	""net/url""
 	""strings""
 )
 
@@ -24,11 +25,19 @@ func Plist(c *gin.Context) {
 		return
 	}
 	u := string(bytes)
+	uUrl, err := url.Parse(u)
+	if err != nil {
+		common.ErrorResp(c, err, 500)
+		return
+	}
 	name := utils.Base(u)
+	u = uUrl.String()
 	ipaIndex := strings.Index(name, "".ipa"")
 	if ipaIndex != -1 {
 		name = name[:ipaIndex]
 	}
+	name = strings.ReplaceAll(name, ""<"", ""["")
+	name = strings.ReplaceAll(name, "">"", ""]"")
 	plist := fmt.Sprintf(`<?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
 <plist version=""1.0"">
     <dict>",:lock: fix #645 xss vulnerability,"vuln-fix: Parse and sanitize URL input in Plist handler

The Plist handler accepted raw URL strings without parsing or validation, allowing malformed or malicious URLs to be processed and potentially exploited.
This posed risks such as injection attacks or server errors due to untrusted input being used directly in XML generation and string operations.
The fix parses the input string as a URL, returns an error on failure, and sanitizes special characters to prevent injection and ensure safe processing.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('fix', 'ACTION', ''), ('#645', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('malicious', 'secword', ''), ('exploited', 'SECWORD', ''), ('injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('server', 'secword', ''), ('errors', 'FLAW', ''), ('untrusted', 'secword', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('sanitizes', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
79,CWE-79,GHSA-66gw-5xpf-gfp5,"@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):
             message = e.log_message
             self.log.warn(message)
             self.set_status(e.status_code)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(dict(message=message)))
         except Exception:
             self.log.error(""Unhandled error in API request"", exc_info=True)
@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):
             self.set_status(status)
             tb_text = ''.join(traceback.format_exception(t, value, tb))
             reply = dict(message=message, traceback=tb_text)
+            self.set_header('Content-Type', 'application/json')
             self.finish(json.dumps(reply))
         else:
             return result",Set content type in json_error to application/json,"vuln-fix: Set JSON content-type header in error responses

The error handler did not set the Content-Type header to application/json when returning JSON-formatted error messages.
This could cause clients to misinterpret the response format, leading to improper handling or security issues such as injection or parsing errors.
The patch explicitly sets the Content-Type header to application/json before sending JSON error responses to ensure correct client processing.

Weakness: CWE-16
Severity: Low
CVSS: 3.1",0.11764705882352941,"[('json_error', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('error handler', 'SECWORD', ''), ('error', 'FLAW', ''), ('improper handling', 'secword', ''), ('security', 'SECWORD', ''), ('issues', 'FLAW', ''), ('injection', 'secword', ''), ('errors', 'FLAW', ''), ('patch', 'ACTION', ''), ('error', 'FLAW', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-16', 'CWEID', ''), ('low', 'SEVERITY', '')]"
80,CWE-79,GHSA-5fh3-25xr-g85h,"@@ -82,7 +82,7 @@ public function transformCheckedoutAccessory ($accessory, $accessory_users, $tot
                 'first_name'=> e($user->first_name),
                 'last_name'=> e($user->last_name),
                 'employee_number' =>  e($user->employee_num),
-                'checkout_notes' => $user->pivot->note,
+                'checkout_notes' => e($user->pivot->note),
                 'last_checkout' => Helper::getFormattedDateObject($user->pivot->created_at, 'datetime'),
                 'type' => 'user',
                 'available_actions' => ['checkin' => true]","Merge pull request #10361 from snipe/fixes/xss_in_accessories_checkout_notes

Escape notes in transformCheckedOutAccessory","vuln-fix: Escape checkout notes to prevent XSS

The checkout notes field was output without escaping, allowing malicious scripts embedded in notes to execute in users’ browsers.
This posed a cross-site scripting risk, enabling attackers to hijack sessions or perform actions on behalf of other users.
The patch applies HTML escaping to the checkout notes before rendering, neutralizing embedded scripts.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('#10361', 'ISSUE', ''), ('fixes', 'ACTION', ''), ('xss_in_accessories_checkout_notes', 'SECWORD', ''), ('escape', 'secword', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('hijack', 'secword', ''), ('patch', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
81,CWE-79,GHSA-xg6r-5gx4-qxjm,"@@ -93,14 +93,15 @@ public function broker()
 
     public function sendResetLinkEmail(ContactPasswordResetRequest $request)
     {
-
-        if(Ninja::isHosted() && $request->session()->has('company_key'))
-            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));
+        if(Ninja::isHosted() && $request->has('company_key'))
+            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));
         
         $this->validateEmail($request);
 
-        $company = Company::where('company_key', $request->session()->get('company_key'))->first();
-        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+        // $company = Company::where('company_key', $request->input('company_key'))->first();
+        // $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();
+
+        $contact = ClientContact::where(['email' => $request->input('email')])->first();
 
         $response = false;
 
@@ -117,7 +118,7 @@ public function sendResetLinkEmail(ContactPasswordResetRequest $request)
             return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);
 
         // We will send the password reset link to this user. Once we have attempted
-        // to send the link, we will examine the response then see the message we
+        // to send the link, we will examine thuser@example.ce response then see the message we
         // need to show to the user. Finally, we'll send out a proper response.
         // $response = $this->broker()->sendResetLink(
         //     $this->credentials($request)",Fixes for client password reset,"vuln-fix: Prevent unauthorized company key usage in password reset

The password reset function used the company_key from the session, allowing attackers to manipulate session data to reset passwords across companies.
This risked unauthorized account access by enabling attackers to reset passwords for users in other companies via session hijacking or fixation.
The fix changes the code to use the company_key from the request input and removes company-based filtering, preventing cross-company password reset abuse.

Weakness: CWE-285
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fixes', 'ACTION', ''), ('password', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('key', 'secword', ''), ('password', 'SECWORD', ''), ('password', 'secword', ''), ('company_key', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('passwords', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('passwords', 'SECWORD', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('changes', 'ACTION', ''), ('company_key', 'SECWORD', ''), ('removes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('password', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-285', 'CWEID', ''), ('high', 'SEVERITY', '')]"
82,CWE-79,GHSA-hm45-mgqm-gjm4,"@@ -930,20 +930,20 @@ <h5>{{ data['message'] }}</h5>
             img.attr(""src"", `${img.attr(""data-src-url"")}png`)
         }
     }
+
+    function safe(str) {
+        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+    }
 </script>
 
 {% if data['status'] == 1 and data['data']['status'] == 1 %}
 
-{% if 'aliascc' in data['data']['permslist'] %}
+{% if 'aliascc' in data['data']['permslist'] and false%}
 <script>
     /* ---------------------------------------------------------------------------------------------------------------------
                                                         Aliases group
        --------------------------------------------------------------------------------------------------------------------- */
 
-    function safe(str) {
-        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
-    }
-
     // Alias modal
     $(document).on('click', '.editaliasbutton', function () {
         var command = $(this).parent().parent().data(""command"")
@@ -1186,28 +1186,35 @@ <h5>{{ data['message'] }}</h5>
             } else if (json.status === 1 && json.data.status === 0) {
                 $(""#targetstatus"").html(`{{ _('Failed to fetch targets') }}: ${json.data.message}`)
             } else {
+                let big_ol_dict = {}
                 select.html("""")
 
                 var chopt = [`<optgroup label=""{{ _('Channels') }}"">`]
                 for (let [id, name] of json.data.CHANNELS) {
-                    chopt.push(`<option value=${id}>${name}</option>`)
+                    chopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 chopt.push(""</optgroup>"")
                 select.append(chopt.join(""""))
 
                 var ropt = [`<optgroup label=""{{ _('Roles') }}"">`]
                 for (let [id, name] of json.data.ROLES) {
-                    ropt.push(`<option value=${id}>${name}</option>`)
+                    ropt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 ropt.push(""</optgroup>"")
                 select.append(ropt.join(""""))
 
                 var uopt = [`<optgroup label=""{{ _('Users') }}"">`]
                 for (let [id, name] of json.data.USERS) {
-                    uopt.push(`<option value=${id}>${name}</option>`)
+                    uopt.push(`<option value=${id} class=""selectpicker-element-${id}"">Loading...</option>`)
+                    big_ol_dict[id] = name
                 }
                 uopt.push(""</optgroup>"")
                 select.append(uopt.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict)) {
+                    $(`.selectpicker-element-${id}`).text(name)
+                }
             }
             select.selectpicker({ title: ""{{ _('Choose target') }}"" })
             select.removeAttr(""disabled"")
@@ -1299,18 +1306,24 @@ <h5>{{ data['message'] }}</h5>
                 $(""#rulesdiv"").html("""")
                 var overall = ['<h3 style=""margin-bottom: 10px"">{{ _(""Cog rules"") }}</h3>']
                 var allcoglines = [""<ul>""]
+
+                let big_ol_dict_two = {}
+                let cog_counter = 0
+
                 for (let [cog, rules] of Object.entries(json.data.COG)) {
                     var coglines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             coglines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            coglines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users with the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            coglines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('Users in the') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         } else {
-                            coglines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
+                            coglines.push(`<li>{{ _('User') }} <code id=""cog-rules-${cog_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cog}</code> {{ _('cog') }}.</li>`)
                         }
+                        big_ol_dict_two[`cog-rules-${cog_counter}`] = rule.name
+                        cog_counter += 1
                     }
                     if (coglines) {
                         allcoglines = allcoglines.concat(coglines)
@@ -1324,18 +1337,23 @@ <h5>{{ data['message'] }}</h5>
 
                 overall.push('<h3 style=""margin-bottom: 10px"">{{ _(""Command rules"") }}</h3>')
                 var allcmdlines = [""<ul>""]
+
+                let cmd_counter = 0
+
                 for (let [cmd, rules] of Object.entries(json.data.COMMAND)) {
                     var cmdlines = []
                     for (let rule of rules) {
                         if (rule.type === ""Default"") {
                             cmdlines.unshift(`<li>{{ _('By default, users are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Role"") {
-                            cmdlines.push(`<li>{{ _('Users with the') }} <code>${rule.name}</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users with the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('role') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else if (rule.type === ""Channel"") {
-                            cmdlines.push(`<li>{{ _('Users in the') }} <code>${rule.name}</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('Users in the') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> {{ _('channel') }} (${rule.id}) {{ _('are') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         } else {
-                            cmdlines.push(`<li>{{ _('User') }} <code>${rule.name}</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
+                            cmdlines.push(`<li>{{ _('User') }} <code id=""cmd-rules-${cmd_counter}"">Loading...</code> (${rule.id}) {{ _('is') }} ${rule.permission} {{ _('permission to use the') }} <code>${cmd}</code> {{ _('command') }}.</li>`)
                         }
+                        big_ol_dict_two[`cmd-rules-${cmd_counter}`] = rule.name
+                        cmd_counter += 1
                     }
                     if (cmdlines) {
                         allcmdlines = allcmdlines.concat(cmdlines)
@@ -1347,6 +1365,9 @@ <h5>{{ data['message'] }}</h5>
                 }
                 overall = overall.concat(allcmdlines)
                 $(""#rulesdiv"").html(overall.join(""""))
+                for (let [id, name] of Object.entries(big_ol_dict_two)) {
+                    $(`#${id}`).text(name)
+                }
                 $(""#fetchrulesstatus"").html(""{{ _('Refreshed rules') }}."")
             }
         }
@@ -1378,11 +1399,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.adminroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#adminrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control adminroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control adminroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""admin-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""admin-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1390,6 +1412,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#admin-role-${random_number}`).val(elm.text())
         elm.remove()
     })
 
@@ -1442,11 +1465,12 @@ <h5>{{ data['message'] }}</h5>
 
     $(document).on('click', '.modroleoption', function () {
         var elm = $(this)
+        let random_number = Math.floor(Math.random() * Math.floor(100000))
         $(""#modrolelist"").append(`
                 <li>
                     <div class=""row"">
                         <div class=""col-md-10 col-8"">
-                            <input class=""form-control modroleinput"" value=""${elm.text()}"" disabled=True data-id=""${elm.attr(""data-id"")}"">
+                            <input class=""form-control modroleinput"" value=""Loading..."" disabled=True data-id=""${elm.attr(""data-id"")}"" id=""mod-role-${random_number}"">
                         </div>
                         <div class=""col-md-1 col-1"">
                             <span class=""mod-role-x clickable""><i class=""tim-icons icon-simple-remove"" style=""float: right; margin-top: 10px;""></i></span>
@@ -1454,6 +1478,7 @@ <h5>{{ data['message'] }}</h5>
                     </div>
                 </li>
             `)
+        $(`#mod-role-${random_number}`).val(elm.text())
         elm.remove()
     })",[UI] Fix SelectPicker not rendering properly,"vuln-fix: Prevent XSS by escaping dynamic HTML content

The code rendered user-controllable strings directly into HTML without proper escaping, allowing injection of malicious scripts and cross-site scripting (XSS) attacks.
This posed a security risk by enabling attackers to execute arbitrary JavaScript in users’ browsers, potentially stealing credentials or performing unauthorized actions.
The fix introduces a safe() function that escapes special HTML characters and applies it to all dynamic text inserted into the DOM, ensuring safe rendering of untrusted input.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('escapes', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('untrusted', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
83,CWE-79,GHSA-6hjc-m38h-7jhh,"@@ -15,12 +15,15 @@
 use nystudio107\seomatic\Seomatic;
 
 use Craft;
+use craft\elements\Asset;
 use craft\helpers\FileHelper;
+use craft\helpers\Assets as AssetsHelper;
 use craft\web\Controller;
 
 use yii\web\NotFoundHttpException;
 use yii\web\HttpException;
 use yii\web\Response;
+use yii\web\ServerErrorHttpException;
 
 /**
  * @author    nystudio107
@@ -87,6 +90,15 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =
                 $headerValue = '<'.$canonical.'>; rel=""canonical""';
                 $response->headers->add('Link', $headerValue);
             }
+            // Ensure the file type is allowed
+            // ref: https://craftcms.com/docs/3.x/config/config-settings.html#allowedfileextensions
+            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;
+            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {
+                $ext = strtolower($ext);
+            }
+            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {
+                throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));
+            }
             // Send the file as a stream, so it can exist anywhere
             $response->sendContentAsFile(
                 $contents,","Ensure that only files with the extensions listed in `allowedFileExtensions` General Config setting can be used with the SEO File Link controller

Signed-off-by: Andrew Welch <andrew@nystudio107.com>","vuln-fix: Restrict served file types in SEO file link action

The SEO file link action did not verify the file extension against allowed types before serving files.
This allowed attackers to request and potentially access disallowed or sensitive file formats, risking information disclosure or abuse.
The fix enforces a check against the configured allowed file extensions and throws an error if the file type is not permitted.

Weakness: CWE-434
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('ensure', 'ACTION', ''), ('signed', 'secword', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('attackers', 'FLAW', ''), ('sensitive', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
84,CWE-79,GHSA-hpx4-xjp7-m4vr,"@@ -98,7 +98,7 @@ public function transformAsset(Asset $asset)
             'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),
             'book_value' => Helper::formatCurrencyOutput($depreciated_value),
             'monthly_depreciation' => $monthly_depreciation,
-            'checked_out_to' => $checkout_target,
+            'checked_out_to' => ($checkout_target) ? e($checkout_target) : null,
             'diff' =>  Helper::formatCurrencyOutput($diff),
             'number_of_months' =>  ($asset->model && $asset->model->depreciation) ? e($asset->model->depreciation->months) : null,
             'depreciation' => (($asset->model) && ($asset->model->depreciation)) ?  e($asset->model->depreciation->name) : null,","Escape checkout target name

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape output for checked_out_to field in asset transform

The transformAsset function outputted the checked_out_to field without escaping, allowing injection of malicious HTML or JavaScript into rendered pages.
This created a cross-site scripting (XSS) risk where attackers could execute arbitrary scripts in users’ browsers, compromising session integrity and data.
The patch applies the e() escaping function to sanitize the checked_out_to value before output, preventing script injection.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('escape', 'secword', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('asset', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('patch', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('sanitize', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
85,CWE-79,GHSA-wg8p-w946-c482,"@@ -329,7 +329,7 @@ public function isAllowedFilename($filename){
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',
-			'.ppt','.pptx','.xls','.xlsx','.txt','.md','.psd','.csv',
+			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.properties','.json','.css',
 			) ;",file upload bug,"vuln-fix: Remove dangerous file extension from allowed list

The file upload validation allowed '.md' files, which can contain executable scripts or malicious content posing security risks.
Allowing such files increases the attack surface for code injection or phishing through user-uploaded content.
The patch removes the '.md' extension from the allowed filenames list to prevent uploading potentially harmful markdown files.

Weakness: CWE-434
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('attack surface', 'secword', ''), ('code injection', 'SECWORD', ''), ('phishing', 'secword', ''), ('patch', 'ACTION', ''), ('removes', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
86,CWE-79,GHSA-vc5r-xfc4-4x22,"@@ -50,7 +50,7 @@ private function buildItem($configuration): array
 
         return [
             'id' => $name,
-            'text' => $name,
+            'text' => htmlspecialchars($name),
             'type' => 'config',
             'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,
             'expandable' => false,",follow up to https://github.com/pimcore/data-hub/pull/462,"vuln-fix: Escape configuration names to prevent XSS

The code returned configuration names directly into HTML without escaping, allowing injection of malicious scripts in the UI.
This exposed users to cross-site scripting attacks, risking session hijacking or unauthorized actions via crafted configuration names.
The fix applies htmlspecialchars to the configuration name before output, ensuring special characters are safely encoded.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.058823529411764705,"[('https://github.com/pimcore/data-hub/pull/462', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
87,CWE-79,GHSA-5fxf-x22x-5q38,"@@ -6,7 +6,6 @@ on:
 jobs:
   microweber-test-before-build:
     runs-on: ubuntu-latest
-    needs: stop-previous-runs
     steps:
       - uses: actions/checkout@v2",Update build-and-upload.yml,"vuln-fix: Remove dependency on prior job to prevent race conditions

The workflow previously depended on a job that stopped previous runs, which could cause race conditions if that job failed or was skipped.
This created a security risk by allowing concurrent runs that might interfere with shared resources or cause inconsistent states.
The fix removes the dependency to ensure the job runs independently, preventing unintended parallel execution conflicts.

Weakness: CWE-362
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('update', 'ACTION', ''), ('build-and-upload.yml', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('race conditions', 'SECWORD', ''), ('race conditions', 'SECWORD', ''), ('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-362', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
88,CWE-79,GHSA-3pg8-c473-w6rr,"@@ -54,10 +54,10 @@ public function deleteFile($file_id){
 	}
 
 	//上传文件，返回url
-	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){
+	public function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0 , $check_filename = true  ){
 		$uploadFile = $_files[$file_key] ;
 
-		if( !$this->isAllowedFilename($_files[$file_key]['name']) ){
+		if( $check_filename && !$this->isAllowedFilename($_files[$file_key]['name']) ){
 			return false;
 		}
 
@@ -324,14 +324,12 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.mp4',
-			'.mov','.webmv','.flac','.mkv',
+			'.mp3','.wav','.mp4','.mov','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
-			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.wps',
+			'.pdf','.epub','.xps','.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
 			'.cer','.ppt','.pub','.json','.css',
-			) ;
+		) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）
 		if(in_array( $ext , $allow_array ) ){",Upload file vulnerability,"vuln-fix: Add optional filename validation in file upload

The file upload function previously allowed all filenames without optional validation, potentially permitting dangerous or disallowed file types to be uploaded.
This posed a security risk by enabling attackers to upload malicious files that could lead to code execution or data compromise.
The patch introduces a boolean flag to conditionally enforce filename checks against an allowed extensions list, preventing unsafe uploads when enabled.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('vulnerability', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('malicious files', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('patch', 'ACTION', ''), ('preventing', 'ACTION', ''), ('unsafe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
89,"CWE-434', 'CWE-79",GHSA-rphc-h572-2x9f,"@@ -324,13 +324,13 @@ public function isDangerFilename($filename){
 	public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
-			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
+			'.mp3','.wav','.mp4',
 			'.mov','.webmv','.flac','.mkv',
-			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
+			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',
 			'.pdf','.ofd','.swf','.epub','.xps',
-			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps',
+			'.doc','.docx','.wps',
 			'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',
-			'.cer','.ppt','.pub','.properties','.json','.css',
+			'.cer','.ppt','.pub','.json','.css',
 			) ;
 
 		$ext = strtolower(substr($filename,strripos($filename,'.')) ); //获取文件扩展名（转为小写后）",file upload bug,"vuln-fix: Restrict allowed file extensions to reduce attack surface

The file upload validation allowed numerous file extensions, including potentially dangerous types that could enable execution of malicious code or exploitation via crafted files.
This increased the risk of arbitrary code execution or server compromise through uploading and processing unsafe file formats.
The patch narrows the allowed extensions list by removing high-risk types, thereby limiting uploads to safer, commonly used file formats.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('attack surface', 'secword', ''), ('malicious code', 'secword', ''), ('exploitation', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('server', 'secword', ''), ('unsafe', 'secword', ''), ('patch', 'ACTION', ''), ('removing', 'ACTION', ''), ('high', 'SEVERITY', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
90,"CWE-79', 'CWE-116",GHSA-ph5x-h23x-7q5q,"@@ -245,7 +245,7 @@
                   &lt;a href=""$backUrl"" class='button secondary'&gt;{{translation key=""platform.wiki.users.join.request.cancel.label""/}}&lt;/a&gt;
                 &lt;/span&gt;
                 &lt;input type='hidden' name='wikiId' value=""$!wikiId""/&gt;
-                &lt;input type='hidden' name='requestJoin' value=""$!request.requestJoin""/&gt;
+                &lt;input type='hidden' name='requestJoin' value=""$escapetool.xml($!request.requestJoin)""/&gt;
                 &lt;input type=""hidden"" name=""form_token"" value=""$!escapetool.xml($services.csrf.getToken())"" /&gt;
               &lt;/dl&gt;
             &lt;/form&gt;",XWIKI-19292: Fix bad escaping,"vuln-fix: Escape hidden input value to prevent XML injection

The hidden input field for 'requestJoin' directly embedded unescaped user data into the HTML form.
This allowed attackers to inject malicious XML or HTML content, potentially leading to cross-site scripting or markup injection.
The patch applies XML escaping to the 'requestJoin' value using the escapetool.xml function before rendering it in the form.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xml injection', 'secword', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('patch', 'ACTION', ''), ('escaping', 'secword', ''), ('escapetool.xml', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
91,CWE-79,GHSA-4wm8-c2vv-xrpq,"@@ -14,6 +14,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.log4j.Logger;
 import org.dspace.authorize.AuthorizeException;
 import org.dspace.core.Context;
 
@@ -25,8 +26,8 @@
  */
 public class ControlledVocabularyServlet extends DSpaceServlet
 {
-    // private static Logger log =
-    // Logger.getLogger(ControlledVocabularyServlet.class);
+    private static Logger log =
+    Logger.getLogger(ControlledVocabularyServlet.class);
 
     protected void doDSGet(Context context, HttpServletRequest request,
             HttpServletResponse response) throws ServletException, IOException,
@@ -37,6 +38,13 @@ protected void doDSGet(Context context, HttpServletRequest request,
         String filter = """";
         String callerUrl = request.getParameter(""callerUrl"");
 
+        // callerUrl must starts with URL outside DSpace request context path
+        if(!callerUrl.startsWith(request.getContextPath())) {
+            log.error(""Controlled vocabulary caller URL would result in redirect outside DSpace web app: "" + callerUrl + "". Rejecting request with 400 Bad Request."");
+            response.sendError(400, ""The caller URL must be within the DSpace base URL of "" + request.getContextPath());
+            return;
+        }
+
         if (request.getParameter(""ID"") != null)
         {
             ID = request.getParameter(""ID"");",[DS-4133] Improve URL handling in Controlled Vocab JSPUI servlet,"vuln-fix: Validate callerUrl to prevent open redirect

The servlet did not verify that the callerUrl parameter was within the application context, allowing attackers to supply external URLs for redirection.
This created an open redirect vulnerability that could be exploited for phishing or redirecting users to malicious sites.
The fix enforces that callerUrl must start with the servlet’s context path and rejects requests with invalid URLs by returning a 400 error.

Weakness: CWE-601
Severity: Medium
CVSS: 6.1",0.058823529411764705,"[('improve', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('verify', 'ACTION', ''), ('attackers', 'FLAW', ''), ('open redirect', 'secword', ''), ('vulnerability', 'secword', ''), ('exploited', 'SECWORD', ''), ('phishing', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('invalid urls', 'SECWORD', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
92,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -209,7 +209,7 @@
         <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
         <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
         <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
         <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />",[DS-4453] Fix XSS handling in JSPUI discovery spellcheck,"vuln-fix: Escape spellCheckQuery output to prevent XSS

The code rendered the spellCheckQuery variable into an HTML anchor without escaping, allowing injection of malicious scripts via crafted input.
This exposed users to cross-site scripting attacks, risking session hijacking or unauthorized actions within the application context.
The fix applies proper HTML entity encoding to spellCheckQuery before outputting it inside the anchor element.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
93,CWE-79,GHSA-r5jw-62xg-j433,"@@ -2,7 +2,7 @@
 
 module Kaminari
   module Helpers
-    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze
+    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze
 
     # A tag stands for an HTML tag inside the paginator.
     # Basically, a tag has its own partial template file, so every tag can be","Blacklist ""original_script_name"" get param","vuln-fix: Add original_script_name to parameter exclusion list

The pagination helper did not exclude the original_script_name parameter from processing, allowing unexpected parameters to be used in URL generation.
This could lead to open redirect or URL manipulation vulnerabilities by injecting crafted parameters into pagination links.
The patch adds :original_script_name to the exclusion list to prevent it from being included in generated URLs.

Weakness: CWE-601
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('blacklist', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('open redirect', 'secword', ''), ('url manipulation', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
94,CWE-79,GHSA-8w3x-r6x7-c5r5,"@@ -607,7 +607,12 @@ pimcore.object.classes.klass = Class.create({
                 for (var i = 0; i < items.length; i++) {
                     var item = items[i];
                     if (typeof item.getValue == ""function"") {
-                        this.data[item.name] = item.getValue();
+                        let value = item.getValue();
+                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {
+                            value = Ext.util.Format.htmlEncode(value);
+                        }
+
+                        this.data[item.name] = value;
                     }
                 }
 
@@ -705,6 +710,7 @@ pimcore.object.classes.klass = Class.create({
             id: ""iconfield-"" + this.getId(),
             name: ""icon"",
             width: 396,
+            renderer: Ext.util.Format.htmlEncode,
             value: this.data.icon,
             listeners: {
                 ""afterrender"": function (el) {
@@ -752,6 +758,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 500,
                     enableKeyEvents: true,
                     value: this.data.name,
+                    renderer: Ext.util.Format.htmlEncode,
                     listeners: {
                         keyup: function (el) {
                             this.rootPanel.getComponent(""phpClassName"").setValue(getPhpClassName(el.getValue()))
@@ -763,12 +770,14 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""description""),
                     name: ""description"",
                     width: 500,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.description
                 },
                 {
                     xtype: ""textfield"",
                     fieldLabel: t(""unique_identifier""),
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.id,
                     width: 500
                 },
@@ -779,6 +788,7 @@ pimcore.object.classes.klass = Class.create({
                     itemId: ""phpClassName"",
                     width: 500,
                     disabled: true,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: getPhpClassName(this.data.name)
                 },
                 {
@@ -786,6 +796,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""parent_php_class""),
                     name: ""parentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.parentClass
                 },
                 {
@@ -793,6 +804,7 @@ pimcore.object.classes.klass = Class.create({
                     width: 600,
                     name: ""implementsInterfaces"",
                     fieldLabel: t(""implements_interfaces""),
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.implementsInterfaces
                 },
                 {
@@ -800,6 +812,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""use_traits""),
                     name: ""useTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.useTraits
                 },
                 {
@@ -807,6 +820,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_parent_php_class""),
                     name: ""listingParentClass"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingParentClass
                 },
                 {
@@ -814,6 +828,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""listing_use_traits""),
                     name: ""listingUseTraits"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.listingUseTraits
                 },
                 {
@@ -821,6 +836,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""link_generator_reference""),
                     name: ""linkGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.linkGeneratorReference
                 },
                 {
@@ -828,6 +844,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_generator_reference""),
                     name: ""previewGeneratorReference"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewGeneratorReference
                 },
                 {
@@ -835,6 +852,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""preview_url""),
                     name: ""previewUrl"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.previewUrl
                 },
                 {
@@ -885,6 +903,7 @@ pimcore.object.classes.klass = Class.create({
                     fieldLabel: t(""group""),
                     name: ""group"",
                     width: 600,
+                    renderer: Ext.util.Format.htmlEncode,
                     value: this.data.group
                 },
                 this.allowInheritance,","[Admin UI] DataObject Class - escape general settings input values (#10991)

* [Admin UI] DataObject Class - escape general settings input values

* Update bundles/AdminBundle/Resources/public/js/pimcore/object/classes/class.js

* [Admin UI] DataObject Class - escape general settings input values

* [Admin UI] DataObject Class - escape general settings input values","vuln-fix: Encode HTML output to prevent XSS in object class fields

The code previously rendered user-supplied input directly into UI fields without encoding, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary scripts in the context of authenticated users.
The fix applies HTML encoding to all relevant text fields and input values before rendering, mitigating XSS by neutralizing unsafe characters.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('#10991', 'ISSUE', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('class.js', 'URL', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', ''), ('admin', 'SECWORD', ''), ('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('xss', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
95,CWE-79,GHSA-7jh9-6cpf-h4m7,"@@ -1388,8 +1388,12 @@ hello.utils.extend(hello.utils, {
 		// (URI Fragments within 302 Location URI are lost over HTTPS)
 		// Loading the redirect.html before triggering the OAuth Flow seems to fix it.
 		else if ('oauth_redirect' in p) {
+			var url = decodeURIComponent(p.oauth_redirect);
+
+			if (isValidUrl(url)) {
+				location.assign(url);
+			}
 
-			location.assign(decodeURIComponent(p.oauth_redirect));
 			return;
 		}",fix(xss): oauth_redirect should be a valid url,"vuln-fix: Validate redirect URL before location assignment

The code assigned a decoded URL from query parameters directly to location without validation, enabling open redirect vulnerabilities.
This allowed attackers to craft URLs that redirect users to malicious sites, facilitating phishing or other social engineering attacks.
The fix adds a URL validation check using isValidUrl before performing the redirect to ensure only safe URLs are used.

Weakness: CWE-601
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix(xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('decoded', 'SECWORD', ''), ('open redirect', 'secword', ''), ('vulnerabilities', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('phishing', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('url validation', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('high', 'SEVERITY', '')]"
96,CWE-79,GHSA-vx6v-xg64-pmr8,"@@ -330,7 +330,11 @@ <h5 class=""mb-0"">
         function get_url(row) {
             return ""{% url 'helpdesk:view' 1234 %}"".replace(/1234/, row.id.toString());
         }
-
+        
+        function htmlEntities(str) {
+            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;');
+        }
+        
         $(document).ready(function () {
             // Ticket DataTable Initialization
             $('#ticketTable').DataTable({
@@ -366,7 +370,7 @@ <h5 class=""mb-0"">
                             if (type === 'display') {
                                 data = '<div class=""tickettitle""><a href=""' + get_url(row) + '"" >' +
                                     row.id + '. ' +
-                                    row.title + '</a></div>';
+                                    htmlEntities(row.title) + '</a></div>';
                             }
                             return data
                         }","Add function `htmlEntities`

`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.","vuln-fix: Escape HTML entities in ticket titles to prevent XSS

The ticket title was rendered directly into HTML without escaping, allowing injection of malicious scripts via specially crafted titles.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise session integrity.
The fix introduces an htmlEntities function that escapes special characters before inserting titles into the DOM.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.17647058823529413,"[('add', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('htmlentities', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('escapes', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
97,CWE-79,GHSA-rcvx-rmvf-mxch,"similarity index 64%
rename from hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/StreamAwareErrorController.java
rename to hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/ErrorController.java
@@ -8,6 +8,8 @@
  */
 package org.eclipse.hawkbit.app;
 
+import java.util.Map;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -23,22 +25,23 @@
 /**
  * Error page controller that ensures that ocet stream does not return text in
  * case of an error.
- *
  */
 @Controller
 // Exception squid:S3752 - errors need handling for all methods
 @SuppressWarnings(""squid:S3752"")
-public class StreamAwareErrorController extends BasicErrorController {
+public class ErrorController extends BasicErrorController {
+
+    private static final String PATH = ""path"";
 
     /**
-     * A new {@link StreamAwareErrorController}.
+     * A new {@link ErrorController}.
      * 
      * @param errorAttributes
      *            the error attributes
      * @param serverProperties
      *            configuration properties
      */
-    public StreamAwareErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
+    public ErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {
         super(errorAttributes, serverProperties.getError());
     }
 
@@ -48,4 +51,19 @@ public ResponseEntity<Void> errorStream(final HttpServletRequest request, final
         return new ResponseEntity<>(status);
     }
 
+    @Override
+    @RequestMapping
+    public ResponseEntity<Map<String, Object>> error(final HttpServletRequest request) {
+        final HttpStatus status = getStatus(request);
+        final Map<String, Object> body = getErrorAttributesWithoutPath(request);
+        return new ResponseEntity<>(body, status);
+    }
+
+    private Map<String, Object> getErrorAttributesWithoutPath(final HttpServletRequest request) {
+        final Map<String, Object> body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));
+        if (body != null && body.containsKey(PATH)) {
+            body.remove(PATH);
+        }
+        return body;
+    }
 }","Fixes #1067

JSON body response for HTTP 404 error may contain unsafe URL path characters. Thus removing path from the response

Signed-off-by: Dominic Schabel <dominic.schabel@bosch.io>","vuln-fix: Remove path info from error responses to prevent info leak

The error controller included the request path in error response bodies, exposing internal URL details to clients.
This information disclosure could aid attackers in mapping application structure or crafting targeted attacks.
The fix removes the ""path"" attribute from error responses by filtering it out before sending the error body.

Weakness: CWE-200  
Severity: Medium  
CVSS: 5.0",0.23529411764705882,"[('fixes', 'ACTION', ''), ('#1067', 'ISSUE', ''), ('error', 'FLAW', ''), ('unsafe', 'SECWORD', ''), ('removing', 'ACTION', ''), ('signed', 'secword', ''), ('dominic.schabel@bosch.io', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('prevent', 'ACTION', ''), ('leak', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('disclosure', 'secword', ''), ('attackers', 'FLAW', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
98,CWE-79,GHSA-wjh9-344g-vc49,"@@ -200,7 +200,7 @@ function( $match ) {
 
 	foreach ( $remove as $remove_string )
 	{
-		while ( strpos( $string, $remove_string ) !== false )
+		while ( stripos( $string, $remove_string ) !== false )
 		{
 			$string = str_ireplace( $remove, '', $string );
 		}",Fix stored XSS security issue: remove inline JS from URL in PreparePHP_SELF.fnc.php,"vuln-fix: Use case-insensitive search for string removal

The original code used a case-sensitive search to find substrings to remove, which could miss variations in letter casing.
This allowed attackers to bypass filtering by altering the case of malicious input, potentially leading to injection or XSS attacks.
The fix replaces strpos with stripos to perform case-insensitive searches, ensuring all case variants of the target strings are removed.

Weakness: CWE-80
Severity: Medium
CVSS: 5.0",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('remove', 'ACTION', ''), ('preparephp_self.fnc.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('remove', 'ACTION', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('malicious', 'secword', ''), ('injection', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('removed', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-80', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
99,CWE-79,GHSA-gx5w-rrhp-f436,"@@ -145,6 +145,11 @@ window.search = window.search || {};
             url.push("""");
         }
 
+        // encodeURIComponent escapes all chars that could allow an XSS except
+        // for '. Due to that we also manually replace ' with its url-encoded
+        // representation (%27).
+        var searchterms = encodeURIComponent(searchterms.join("" "")).replace(/\'/g, ""%27"");
+
         return '<a href=""' + path_to_root + url[0] + '?' + URL_MARK_PARAM + '=' + searchterms + '#' + url[1]
             + '"" aria-details=""teaser_' + teaser_count + '"">' + result.doc.breadcrumbs + '</a>'
             + '<span class=""teaser"" id=""teaser_' + teaser_count + '"" aria-label=""Search Result Teaser"">'","fix xss in the search page

Thanks to Kamil Vavra for responsibly disclosing the vulnerability
according to Rust's Security Policy.","vuln-fix: Encode search terms to prevent XSS in search links

The code previously inserted raw search terms into URLs without fully encoding special characters, leaving single quotes unescaped.
This allowed attackers to inject malicious scripts via crafted search inputs, leading to cross-site scripting vulnerabilities.
The fix applies encodeURIComponent to all search terms and additionally replaces single quotes with their URL-encoded form to ensure safe embedding in URLs.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('security', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encodeuricomponent', 'SECWORD', ''), ('encoded', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
100,CWE-79,GHSA-6m26-25q2-cq46,"@@ -4,6 +4,7 @@
 
 use Conner\Tagging\Model\Tagged;
 use \Intervention\Image\ImageManagerStatic as Image;
+use MicroweberPackages\Helper\HTMLClean;
 use MicroweberPackages\Media\Models\Media;
 use MicroweberPackages\Media\Models\MediaThumbnail;
 use MicroweberPackages\Utils\Media\Thumbnailer;
@@ -1184,6 +1185,10 @@ public function thumbnail_img($params)
 
     public function create_media_dir($params)
     {
+
+        $clean = new HTMLClean();
+        $_REQUEST = $clean->cleanArray($_REQUEST);
+
         must_have_access();
         $resp = array();
         // $target_path = media_base_path() . 'uploaded' . DS;
@@ -1198,7 +1203,7 @@ public function create_media_dir($params)
 
             $target_path = $fn_path;
         }
-        if (!isset($_REQUEST['name'])) {
+        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {
             $resp = array('error' => 'You must send new_folder parameter');
         } else {
             $fn_new_folder_path = $_REQUEST['name'];",add xss clean to create media dir method,"vuln-fix: Sanitize request input in create_media_dir method

The create_media_dir function did not sanitize user input from the global request array before use, allowing injection of malicious HTML or scripts.
This posed a risk of cross-site scripting (XSS) or other injection attacks by processing unsanitized input in server-side operations.
The fix applies HTMLClean’s cleanArray method to sanitize all request data before further processing, preventing injection of harmful content.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('add', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitize', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
101,CWE-79,GHSA-6jp6-9rf9-gc66,"@@ -1131,7 +1131,9 @@ $(function () {
       return """";
     },
     menuItemTemplate: function (item) {
-      return `<a>${item.string}</a>`;
+      let link = document.createElement(""a"");
+      link.innerText = item.string;
+      return link.outerHTML;
     },
     values: (text, callback) => {
       $.ajax({","js: Add missing escaping to username completion

Fixes https://hackerone.com/reports/1486674","vuln-fix: Prevent XSS by safely rendering menu item strings

The original code directly injected unescaped HTML strings into anchor elements, allowing malicious input to execute scripts in the browser context.
This created a cross-site scripting (XSS) vulnerability that could compromise user sessions or perform unauthorized actions.
The fix replaces raw HTML injection with safe DOM text assignment using innerText, ensuring special characters are escaped properly.

Weakness: CWE-79  
Severity: High  
CVSS: 7.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('fix', 'ACTION', ''), ('injection', 'SECWORD', ''), ('safe', 'secword', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
102,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -147,7 +147,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -159,6 +159,11 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
 </script>		
 </c:set>",[DS-4453] Fix XSS handling in JSPUI discovery autocomplete,"vuln-fix: Escape HTML in filter labels to prevent XSS

The filter label rendering did not escape user-controlled displayed values before inserting them into HTML.
This allowed attackers to inject malicious scripts, leading to cross-site scripting (XSS) vulnerabilities in the UI.
The patch adds an escapeHtml function to sanitize displayed values by replacing special characters with HTML entities.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escape', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('vulnerabilities', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('escapehtml', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
103,CWE-79,GHSA-qf2g-q4mc-w7rr,"@@ -839,7 +839,7 @@ public static function processModuleXml(\SimpleXMLElement $xml): array
         $information['name'] = (string) $module->name;
         $information['version'] = (string) $module->version;
         $information['requirements'] = (array) $module->requirements;
-        $information['description'] = (string) $module->description;
+        $information['description'] = strip_tags((string) $module->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
         $information['cronjobs'] = [];
 
         // authors
@@ -900,7 +900,7 @@ public static function processThemeXml(\SimpleXMLElement $xml): array
         $information['version'] = (string) $theme->version;
         $information['requirements'] = (array) $theme->requirements;
         $information['thumbnail'] = (string) $theme->thumbnail;
-        $information['description'] = (string) $theme->description;
+        $information['description'] = strip_tags((string) $theme->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');
 
         // authors
         foreach ($xml->xpath('/theme/authors/author') as $author) {",Fix xss though the description in the info.xml file of a theme or module,"vuln-fix: Sanitize module and theme descriptions with allowed HTML tags

The module and theme description fields were assigned raw XML content without filtering, allowing potentially malicious HTML or script injection.
This posed a cross-site scripting (XSS) risk by enabling attackers to inject harmful markup that could execute in users’ browsers.
The fix applies strip_tags with a whitelist of safe HTML tags to sanitize descriptions while preserving basic formatting.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.058823529411764705,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('info.xml', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('malicious', 'secword', ''), ('injection', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
104,CWE-79,GHSA-wrp6-9w7f-3wxg,"@@ -248,7 +248,7 @@ $(""#btn-upload-format"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-format"").html(filename);
+    $(""#upload-format"").text(filename);
 });
 
 $(""#btn-upload-cover"").on(""change"", function () {
@@ -256,7 +256,7 @@ $(""#btn-upload-cover"").on(""change"", function () {
     if (filename.substring(3, 11) === ""fakepath"") {
         filename = filename.substring(12);
     } // Remove c:\fake at beginning from localhost chrome
-    $(""#upload-cover"").html(filename);
+    $(""#upload-cover"").text(filename);
 });
 
 $(""#xchange"").click(function () {",Fix upload of cover and book formats containing html characters,"vuln-fix: Use text() instead of html() to display filenames

The code used jQuery’s html() to insert user-supplied filenames directly into the DOM without escaping.
This allowed attackers to inject arbitrary HTML or scripts, leading to cross-site scripting (XSS) vulnerabilities.
The fix replaces html() with text() to safely render filenames as plain text, preventing script execution.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', ''), ('fix', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
105,CWE-79,GHSA-49qr-xh3w-h436,"@@ -78,6 +78,13 @@ class NbconvertFileHandler(IPythonHandler):
 
     SUPPORTED_METHODS = ('GET',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertFileHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def get(self, format, path):
 
@@ -145,6 +152,13 @@ def get(self, format, path):
 class NbconvertPostHandler(IPythonHandler):
     SUPPORTED_METHODS = ('POST',)
 
+    @property
+    def content_security_policy(self):
+        # In case we're serving HTML/SVG, confine any Javascript to a unique
+        # origin so it can't interact with the notebook server.
+        return super(NbconvertPostHandler, self).content_security_policy + \
+               ""; sandbox allow-scripts""
+
     @web.authenticated
     def post(self, format):
         exporter = get_exporter(format, config=self.config)","Apply CSP sandboxing for nbconvert responses

These may contain untrusted content, so they should be treated as being
from a different domain to the notebook server.","vuln-fix: Add sandbox CSP directive to nbconvert handlers

The nbconvert file and post handlers did not enforce sandboxing in their content security policies, allowing served HTML/SVG to run JavaScript with full origin privileges.
This posed a risk of cross-origin script interactions that could compromise the notebook server or leak sensitive data.
The patch appends a sandbox directive with allow-scripts to the CSP, isolating JavaScript execution and preventing interaction with the main server context.

Weakness: CWE-1021
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('untrusted', 'secword', ''), ('server', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('sandbox', 'secword', ''), ('security', 'SECWORD', ''), ('server', 'secword', ''), ('leak', 'secword', ''), ('sensitive data', 'secword', ''), ('patch', 'ACTION', ''), ('sandbox', 'secword', ''), ('preventing', 'ACTION', ''), ('server', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-1021', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
106,CWE-79,GHSA-38m9-3vg4-rwvp,"@@ -114,6 +114,9 @@ public function redirect($url)
         $redirectUrl = str_replace(""\r"", """", $redirectUrl);
         $redirectUrl = str_replace(""\n"", """", $redirectUrl);
 
+        $clearInput = new HTMLClean();
+        $redirectUrl = $clearInput->clean($redirectUrl);
+
         if (headers_sent()) {
             echo '<meta http-equiv=""refresh"" content=""0;url=' . $redirectUrl . '"">';
         } else {",Update UrlManager.php,"vuln-fix: Sanitize redirect URL to prevent header injection

The redirect function did not properly sanitize the URL, allowing injection of malicious characters that could manipulate HTTP headers.
This posed a risk of HTTP response splitting or header injection attacks, enabling attackers to alter responses or perform cross-site scripting.
The patch applies HTMLClean's clean method to sanitize the redirect URL before use in headers or meta refresh tags.

Weakness: CWE-113
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', ''), ('urlmanager.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('sanitize', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('http response splitting', 'secword', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('attackers', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('patch', 'ACTION', ''), ('sanitize', 'secword', ''), ('weakness', 'secword', ''), ('cwe-113', 'CWEID', ''), ('high', 'SEVERITY', '')]"
107,CWE-79,GHSA-vfrc-ggmc-5jwv,"@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):
                 'application/octet-stream',
                 size=attached.size,
             )
+            att.full_clean()
             att.save()
 
             if attached.size < max_email_attachment_size:","Add `att.full_clean()` before saving

Fix issue https://github.com/django-helpdesk/django-helpdesk/issues/983
Also, fix bug stored XSS disclosure: https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/","vuln-fix: Validate attachment metadata before saving

The process_attachments function did not validate attachment metadata before saving, allowing potentially malformed or malicious data to be stored.
This could lead to data integrity issues or injection of harmful content into the system, increasing the risk of downstream processing errors or exploits.
The patch calls full_clean() on the attachment object to enforce model validation and reject invalid data before saving.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('add', 'ACTION', ''), ('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https://github.com/django-helpdesk/django-helpdesk/issues/983', 'URL', ''), ('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('xss', 'SECWORD', ''), ('disclosure', 'secword', ''), ('https://huntr.dev/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('validate', 'secword', ''), ('malicious', 'secword', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('injection', 'secword', ''), ('processing errors', 'secword', ''), ('exploits', 'SECWORD', ''), ('patch', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
108,CWE-79,GHSA-3fw8-66wf-pr7m,"@@ -152,7 +152,7 @@ app.handle = function(req, res, out) {
         res.statusCode = 404;
         res.setHeader('Content-Type', 'text/plain');
         if ('HEAD' == req.method) return res.end();
-        res.end('Cannot ' + req.method + ' ' + utils.escape(req.originalUrl));
+        res.end('Cannot ' + utils.escape(req.method) + ' ' + utils.escape(req.originalUrl));
       }
       return;
     }
@@ -202,7 +202,7 @@ app.handle = function(req, res, out) {
  * Listen for connections.
  *
  * This method takes the same arguments
- * as node's `http.Server#listen()`.  
+ * as node's `http.Server#listen()`.
  *
  * HTTP and HTTPS:
  *
@@ -214,9 +214,9 @@ app.handle = function(req, res, out) {
  *      var connect = require('connect')
  *        , http = require('http')
  *        , https = require('https');
- *      
+ *
  *      var app = connect();
- *      
+ *
  *      http.createServer(app).listen(80);
  *      https.createServer(options, app).listen(443);
  *",fix: escape req.method in 404 response,"vuln-fix: Escape HTTP method and URL in error responses

The error handler previously included raw HTTP method and URL values in the response without escaping, allowing injection of malicious content into error messages.
This posed a cross-site scripting (XSS) risk by enabling attackers to inject scripts or HTML via crafted request methods or URLs.
The fix applies proper escaping to both the HTTP method and original URL before including them in the response body.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('req.method', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('error', 'FLAW', ''), ('error handler', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('error', 'FLAW', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
109,CWE-79,GHSA-455w-gv5p-wgg3,"@@ -37,6 +37,11 @@ class TargetingController extends AdminController implements KernelControllerEve
 {
     // RULES
 
+    private function correctName(string $name): string
+    {
+        return preg_replace('/[#?*:\\\\<>|""%&@=;+]/', '-', $name);
+    }
+
     /**
      * @Route(""/rule/list"", name=""pimcore_admin_targeting_rulelist"", methods={""GET""})
      *
@@ -55,7 +60,7 @@ public function ruleListAction(Request $request)
         foreach ($list->load() as $target) {
             $targets[] = [
                 'id' => $target->getId(),
-                'text' => $target->getName(),
+                'text' => htmlspecialchars($target->getName()),
                 'active' => $target->getActive(),
                 'qtip' => 'ID: ' . $target->getId(),
             ];
@@ -74,7 +79,7 @@ public function ruleListAction(Request $request)
     public function ruleAddAction(Request $request)
     {
         $target = new Targeting\Rule();
-        $target->setName($request->get('name'));
+        $target->setName($this->correctName($request->get('name')));
         $target->save();
 
         return $this->adminJson(['success' => true, 'id' => $target->getId()]);
@@ -129,6 +134,7 @@ public function ruleSaveAction(Request $request)
         /** @var Targeting\Rule|Targeting\Rule\Dao $target */
         $target = Targeting\Rule::getById($request->get('id'));
         $target->setValues($data['settings']);
+        $target->setName($this->correctName($target->getName()));
         $target->setConditions($data['conditions']);
         $target->setActions($data['actions']);
         $target->save();
@@ -208,7 +214,7 @@ public function targetGroupListAction(Request $request)
         foreach ($list->load() as $targetGroup) {
             $targetGroups[] = [
                 'id' => $targetGroup->getId(),
-                'text' => $targetGroup->getName(),
+                'text' => htmlspecialchars($targetGroup->getName()),
                 'active' => $targetGroup->getActive(),
                 'qtip' => $targetGroup->getId(),
             ];
@@ -230,7 +236,7 @@ public function targetGroupAddAction(Request $request, CoreCacheHandler $cache,
     {
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = new TargetGroup();
-        $targetGroup->setName($request->get('name'));
+        $targetGroup->setName($this->correctName($request->get('name')));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);
@@ -300,6 +306,7 @@ public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache,
         /** @var TargetGroup|TargetGroup\Dao $targetGroup */
         $targetGroup = TargetGroup::getById($request->get('id'));
         $targetGroup->setValues($data['settings']);
+        $targetGroup->setName($this->correctName($targetGroup->getName()));
         $targetGroup->save();
 
         $event = new TargetGroupEvent($targetGroup);","[Targeting] Escape/validate names of rules properly (#11205)

* [Targeting] Escape/validate names of rules properly

* Update bundles/AdminBundle/Controller/Admin/TargetingController.php

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>","vuln-fix: Sanitize and escape names in targeting entities

The application allowed unsafe characters in targeting rule and group names, and outputted them without proper escaping in UI elements.
This exposed the system to cross-site scripting (XSS) attacks by enabling injection of malicious scripts through crafted names.
The fix sanitizes names by replacing dangerous characters with hyphens and applies htmlspecialchars when rendering names to prevent script execution.

Weakness: CWE-79
Severity: High
CVSS: 7.5",0.23529411764705882,"[('escape', 'secword', ''), ('validate', 'secword', ''), ('#11205', 'ISSUE', ''), ('escape', 'SECWORD', ''), ('validate', 'secword', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('targetingcontroller.php', 'URL', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('sanitizes', 'SECWORD', ''), ('htmlspecialchars', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
110,CWE-79,GHSA-3q55-66g3-p8xq,"@@ -834,10 +834,262 @@ function get_dangerous_files_extentions()
             'xqt',        //    SuperCalc Macro File',
             'xys',        //    XYplorer Script File',
             'zl9',        //    ZoneAlarm Quarantined EXE File
-
-
             'swf',        //    Flash File
 
+            'key',
+            'asax',
+            'btapp',
+            'xd',
+            'fwtemplate',
+            'crdownload',
+            'whtt',
+            'ssp',
+            'fmp',
+            'jspa',
+            'obml16',
+            'a5w',
+            'crt',
+            'vrt',
+            'website',
+            'p7c',
+            'dll',
+            'php',
+            'mjs',
+            'dhtml',
+            'xul',
+            'bml',
+            'download',
+            'cshtml',
+            'vsdisco',
+            'codasite',
+            'webbookmark',
+            'rjs',
+            'wsdl',
+            'dml',
+            'aro',
+            'dcr',
+            'shtml',
+            'dochtml',
+            'dwt',
+            'spc',
+            'a4p',
+            'htaccess',
+            'ascx',
+            'pac',
+            'p7b',
+            'xhtm',
+            'oam',
+            'site',
+            'kit',
+            'aspx',
+            'zul',
+            'tpl',
+            'htm',
+            'seam',
+            'svr',
+            'pem',
+            'url',
+            'dap',
+            'appcache',
+            'chm',
+            'wbs',
+            'htc',
+            'ewp',
+            'gsp',
+            'asr',
+            'der',
+            'master',
+            'stc',
+            'ap',
+            'html',
+            'p12',
+            'xpd',
+            'fwp',
+            'epibrw',
+            'strm',
+            'xss',
+            'node',
+            'disco',
+            'gsp',
+            'pro',
+            'rss',
+            'gne',
+            'sdb',
+            'compressed',
+            'asp',
+            'browser',
+            'php2',
+            'sites2',
+            'dothtml',
+            'bok',
+            'axd',
+            'nzb',
+            'vdw',
+            'obml',
+            'mhtml',
+            'ashx',
+            'con',
+            'rhtml',
+            'alx',
+            'opml',
+            'web',
+            'chat',
+            'csr',
+            'do',
+            'sht',
+            'asa',
+            'cha',
+            'h5p',
+            'qf',
+            'olp',
+            'hyperesources',
+            'sparkle',
+            'razor',
+            'php4',
+            'cms',
+            'mml',
+            'jnlp',
+            'har',
+            'br',
+            'webloc',
+            'srf',
+            'cer',
+            'uhtml',
+            'pptmhtml',
+            'phtml',
+            'xbel',
+            'cfm',
+            'fwtemplateb',
+            'jspx',
+            'jsp',
+            'xfdl',
+            'zhtml',
+            'stml',
+            'jsonl',
+            'maff',
+            'dbm',
+            'aex',
+            'crl',
+            'mht',
+            'wml',
+            'sass',
+            'xht',
+            'awm',
+            'page',
+            'hdml',
+            'webmanifest',
+            'itms',
+            'sitemap',
+            'shtm',
+            'wpp',
+            'jss',
+            'oth',
+            'ucf',
+            'prf',
+            'freeway',
+            'edge',
+            'iqy',
+            'vrml',
+            'mvc',
+            'wdgt',
+            'discomap',
+            'psp',
+            'hxs',
+            'adr',
+            'hype',
+            'csp',
+            'xhtml',
+            'webarchive',
+            'qbo',
+            'jhtml',
+            'svc',
+            'phtm',
+            'rw3',
+            'tpl',
+            'stl',
+            'wbxml',
+            'p7',
+            'ndjson',
+            'ognc',
+            'fwtb',
+            'muse',
+            'vbd',
+            'sites',
+            'rt',
+            'esproj',
+            'private',
+            'srl',
+            'zhtml',
+            'vbhtml', 
+            'hypetemplate',
+            'obml15',
+            'hypesymbol',
+            'pub',
+            'ece',
+            'mspx',
+            'docmhtml',
+            'xws',
+            'wgp',
+            'tvpi',
+            'woa',
+            'asmx',
+            'xbl',
+            'webhistory',
+            'idc',
+            'jws',
+            'lbc',
+            'att',
+            'tvvi',
+            'zvz',
+            'php3',
+            'webarchivexml',
+            'widget',
+            'swz',
+            'qrm',
+            'bwp',
+            'atom',
+            'cdf',
+            'map',
+            'hdm',
+            'php5',
+            'rwsw',
+            'wgt',
+            'nod',
+            'rflw',
+            'htx',
+            'mvr',
+            'an',
+            'rwp',
+            'lasso',
+            'vlp',
+            'stp',
+            'nxg',
+            'faces',
+            'kcmsf',
+            'ptw',
+            'less',
+            'saveddeck',
+            'ccbjs',
+            'wn',
+            'ppthtml',
+            'jcz',
+            'jvs',
+            'rwtheme',
+            'jst',
+            'mapx',
+            'cpg',
+            'wpx',
+            'qbx',
+            'suck',
+            'iwdgt',
+            'public',
+            'cphd',
+            'moz',
+            'zfo',
+            'stm',
+            'fcgi',
+            'itpc',
+            'cfml'
         );",Update Files.php,"vuln-fix: Expand list of dangerous file extensions to block risky uploads

The file upload filter had an incomplete list of dangerous file extensions, allowing potentially harmful files to bypass restrictions and be uploaded to the server.
This posed a security risk by enabling attackers to upload executable or script files that could lead to remote code execution or server compromise.
The patch adds numerous additional high-risk extensions to the blocked list, improving detection and prevention of unsafe file uploads.

Weakness: CWE-434
Severity: High
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', ''), ('files.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'SECWORD', ''), ('server', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('remote code execution', 'secword', ''), ('server', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('high', 'SEVERITY', ''), ('improving', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('high', 'SEVERITY', '')]"
111,CWE-79,GHSA-q73m-3q7r-fpf7,"@@ -325,7 +325,7 @@ public function isAllowedFilename($filename){
 		$allow_array = array(
 			'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',
 			'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',
-			'.mov','.webmv','.m3u8a','.flac','.mkv',
+			'.mov','.webmv','.flac','.mkv',
 			'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',
 			'.pdf','.ofd','.swf','.epub','.xps',
 			'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',","Merge pull request #1632 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Remove invalid extension from allowed filename list

The file upload validation included a non-existent extension '.m3u8a' in the allowed list, which could cause unexpected behavior or bypasses in file type checks.
This posed a security risk by potentially allowing disallowed or malicious file types to be accepted due to incorrect extension validation.
The patch removes the invalid '.m3u8a' extension from the allowed array to ensure only legitimate file types are permitted.

Weakness: CWE-20
Severity: Low
CVSS: 3.1",0.23529411764705882,"[('#1632', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('bypasses', 'SECWORD', ''), ('security', 'secword', ''), ('malicious file', 'secword', ''), ('patch', 'ACTION', ''), ('removes', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('low', 'SEVERITY', '')]"
112,"CWE-80', 'CWE-79', 'CWE-116",GHSA-vmhh-xh3g-j992,"@@ -287,7 +287,7 @@
       &lt;form action=""$doc.getURL()"" method=""post""&gt;
         &lt;input type=""hidden"" name=""form_token"" value=""$services.csrf.token"" /&gt;
         &lt;input type=""hidden"" name=""action"" value=""create""/&gt;
-        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$request.newThemeName"" /&gt;
+        &lt;input type=""hidden"" name=""newThemeName"" id=""newThemeName"" value=""$escapetool.xml($request.newThemeName)"" /&gt;
         &lt;input type=""submit"" value=""$services.localization.render('platform.flamingo.themes.home.create.confirm')"" class=""button""/&gt;
       &lt;/form&gt;
     {{/html}}",XWIKI-19294: Fix bad escaping,"vuln-fix: Escape newThemeName input in hidden form field

The form included user-supplied newThemeName directly in a hidden input without escaping, allowing injection of malicious XML or HTML content.
This posed a risk of cross-site scripting (XSS) or markup injection attacks when the form was rendered in browsers.
The fix applies XML escaping to the newThemeName value using escapetool.xml to neutralize special characters before output.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('escapetool.xml', 'URL', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
113,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -196,7 +196,7 @@
                                 <input type=""text"" size=""50"" id=""query"" name=""query"" value=""<%= (query==null ? """" : Utils.addEntities(query)) %>""/>
                                 <input type=""submit"" id=""main-query-submit"" class=""btn btn-primary"" value=""<fmt:message key=""jsp.general.go""/>"" />
 <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>
-	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%= spellCheckQuery %></a></fmt:param></fmt:message></p>
+	<p class=""lead""><fmt:message key=""jsp.search.didyoumean""><fmt:param><a id=""spellCheckQuery"" data-spell=""<%= Utils.addEntities(spellCheckQuery) %>"" href=""#""><%=Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>
 <% } %>                  
                                 <input type=""hidden"" value=""<%= rpp %>"" name=""rpp"" />
                                 <input type=""hidden"" value=""<%= Utils.addEntities(sortedBy) %>"" name=""sort_by"" />","[DS-4453] Escape spellcheck, autocomplete HTML (JSPUI)","vuln-fix: Escape spell check query output to prevent XSS

The code rendered the spellCheckQuery variable into an HTML link without properly escaping its visible text content.
This allowed attackers to inject malicious scripts via crafted spell check suggestions, leading to cross-site scripting attacks.
The fix applies HTML entity encoding to the displayed spellCheckQuery text, ensuring any special characters are safely escaped.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('escape', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
114,CWE-79,GHSA-gq77-3r6x-383w,"@@ -301,6 +301,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".svg"")
 			|| $isDangerStr($filename , "".htm"")
 			|| $isDangerStr($filename , ""%"")
+			|| $isDangerStr($filename , "".xml"")
 		) {
 			return true;
 		}",file upload bug,"vuln-fix: Block .xml extension in dangerous filename check

The filename validation function did not consider files with the .xml extension as dangerous, allowing potentially harmful XML files to be accepted.
This omission could enable attackers to upload malicious XML files that might be processed insecurely, leading to injection or data exposure risks.
The patch adds "".xml"" to the list of dangerous filename substrings to prevent such files from being accepted.

Weakness: CWE-434
Severity: Medium
CVSS: 6.1",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('insecurely', 'SECWORD', ''), ('injection', 'secword', ''), ('data exposure', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
115,CWE-79,GHSA-6346-5r4h-ff5x,"@@ -158,7 +158,7 @@ class=""btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text
             $(document).ready(function () {
                 var searchOrdersByProduct = new mw.autoComplete({
                     element: ""#js-orders-search-by-products"",
-                    placeholder: ""<?php if ($productKeyword) { echo $productKeyword; } else { _e(""Search by products...""); }?>"",
+                    placeholder: ""<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(""Search by products...""); }?>"",
                     autoComplete:true,
                     ajaxConfig: {
                         method: 'get',",Update order_filtering.blade.php,"vuln-fix: Sanitize product keyword in autocomplete placeholder

The autocomplete placeholder used unsanitized user input directly in HTML, allowing injection of malicious scripts via the productKeyword variable.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute arbitrary JavaScript in users’ browsers.
The fix applies xss_clean to sanitize the productKeyword before embedding it in the placeholder attribute.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('update', 'ACTION', ''), ('order_filtering.blade.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('keyword', 'SECWORD', ''), ('unsanitized', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('productkeyword', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('xss_clean', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('productkeyword', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
116,CWE-79,GHSA-6jp6-9rf9-gc66,"@@ -37,6 +37,7 @@
 from django.template.loader import render_to_string
 from django.urls import reverse
 from django.utils import timezone
+from django.utils.html import escape
 from django.utils.http import urlencode
 from django.utils.safestring import mark_safe
 from django.utils.translation import gettext
@@ -318,7 +319,7 @@ def render(self, name, value, attrs=None, renderer=None, **kwargs):
             # Render textare
             textarea = super().render(fieldname, val, attrs, renderer, **kwargs)
             # Label for plural
-            label = str(unit.translation.language)
+            label = escape(unit.translation.language)
             if len(values) != 1:
                 label = f""{label}, {plural.get_plural_label(idx)}""
             ret.append(","translate: Add missing escaping to language name

Fixes https://hackerone.com/reports/1486674","vuln-fix: Escape language label in form rendering to prevent XSS

The form rendering code directly inserted language labels into HTML without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting risk by enabling attackers to execute arbitrary JavaScript in users’ browsers.
The fix applies Django’s escape function to sanitize the language label before embedding it in the rendered output.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('add', 'ACTION', ''), ('escaping', 'secword', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
117,CWE-79,GHSA-3x96-m42v-hvh5,"@@ -87,11 +87,13 @@
     if (isset($_GET['autosize'])) {
         $autoSize = $_GET['autosize'];
     }
+    $autoSize = xss_clean($autoSize);
 
     $type = '';
     if (isset($_GET['type'])) {
         $type = $_GET['type'];
     }
+    $type = xss_clean($type);
 
     $mod_id = $mod_orig_id = false;
     $is_linked_mod = false;
@@ -403,7 +405,9 @@
                 if (mw.notification) {
                     mw.notification.success('<?php _ejs('Settings are saved') ?>');
                 }
+                <?php if (isset($params['id'])) : ?>
                 mw.reload_module_parent('#<?php print $params['id']  ?>')
+                <?php endif; ?>
 
             });
 
@@ -440,9 +444,11 @@
 <body class=""mw-external-loading loading"">
 <div id=""settings-main"">
     <div id=""settings-container"">
-        <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
-             id=""module-id-<?php print $params['id'] ?>"">{content}
-        </div>
+        <?php if (isset($params['id'])) : ?>
+            <div class=""mw-module-live-edit-settings <?php print $params['id'] ?>""
+                 id=""module-id-<?php print $params['id'] ?>"">{content}
+            </div>
+        <?php endif; ?>
     </div>
 </div>",update,"vuln-fix: Sanitize GET parameters and conditionally render module div

The code previously used unsanitized GET parameters directly, exposing the application to cross-site scripting (XSS) attacks via malicious input in 'autosize' and 'type' parameters.
This allowed attackers to inject arbitrary scripts, potentially compromising user sessions or defacing the interface.
The fix applies xss_clean sanitization to these parameters and conditionally renders the module container div only if a valid 'id' parameter is set, reducing injection risks.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('unsanitized', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('fix', 'ACTION', ''), ('xss_clean', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
118,CWE-79,GHSA-cqhr-jqvc-qw9p,"@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,
 		if (message != null) {
 			writeln(SCRIPT_BEGIN);
 			// writeDirectly pour ne pas gérer de traductions si le message contient '#'
-			writeDirectly(""alert(\"""" + javascriptEncode(message) + ""\"");"");
+			writeDirectly(""alert(\"""" + htmlEncodeButNotSpace(javascriptEncode(message)) + ""\"");"");
 			writeln("""");
 			// redirect vers une url évitant que F5 du navigateur ne refasse l'action au lieu de faire un refresh
 			if (partToRedirectTo == null) {",fix XSS,"vuln-fix: Encode alert message to prevent XSS in JavaScript alerts

The code directly injected user-controlled messages into JavaScript alert calls without proper HTML encoding, allowing injection of malicious scripts.
This posed a cross-site scripting risk by enabling attackers to execute arbitrary JavaScript in the victim’s browser context.
The fix applies HTML encoding (excluding spaces) after JavaScript encoding to safely escape characters before embedding the message in the alert.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'secword', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
119,CWE-79,GHSA-3r95-23jp-mhvg,"@@ -513,10 +513,10 @@ function factory($, Helper, Icons) {
      */
     function setStageHeadline(title) {
       if (getUtility().isUndefinedOrNull(title)) {
-        title = buildTitleByFormElement();
+        title = buildTitleByFormElement().text();
       }
 
-      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).html(title);
+      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).text(title);
     };
 
     /**
@@ -981,10 +981,10 @@ function factory($, Helper, Icons) {
 
       getHelper()
         .getTemplatePropertyDomElement('_type', template)
-        .append(getFormElementDefinition(formElement, 'label'));
+        .append(document.createTextNode(getFormElementDefinition(formElement, 'label')));
       getHelper()
         .getTemplatePropertyDomElement('_identifier', template)
-        .append(formElement.get('identifier'));
+        .append(document.createTextNode(formElement.get('identifier')));
     };
 
     /**
@@ -1029,7 +1029,7 @@ function factory($, Helper, Icons) {
 
             getHelper()
               .getTemplatePropertyDomElement('_label', rowTemplate)
-              .append(collectionElementConfiguration['label']);
+              .append(document.createTextNode(collectionElementConfiguration['label']));
             $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))
               .append(rowTemplate.html());
           }
@@ -1089,7 +1089,7 @@ function factory($, Helper, Icons) {
           }
         }
 
-        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(label);
+        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(document.createTextNode(label));
 
         if (isPreselected) {
           getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(","[SECURITY] Ensure text preview of multivalue items in form editor

Multivalue items in the form editor user interface were previewed
as HTML, but should be treated as scalar text only.

Resolves: #96743
Releases: main, 11.5, 10.4
Change-Id: I5e8dab26119490ecf19ac5d48c2bc7a5a00daaad
Security-Bulletin: TYPO3-CORE-SA-2022-003
Security-References: CVE-2022-31048
Reviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/73297
Tested-by: Oliver Hader <oliver.hader@typo3.org>
Reviewed-by: Oliver Hader <oliver.hader@typo3.org>","vuln-fix: Prevent HTML injection by escaping dynamic content

The code previously inserted unescaped user-controlled or dynamic strings directly into the DOM using html() or append(), allowing injection of arbitrary HTML or scripts.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute malicious scripts in users’ browsers and compromise security.
The fix replaces direct HTML insertion with text nodes and uses text() to safely encode content, preventing interpretation as HTML.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.17647058823529413,"[('security', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('#96743', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('escaping', 'secword', ''), ('unescaped', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
120,CWE-79,GHSA-jp6r-xcjj-5h7r,"@@ -79,7 +79,7 @@ class TextEncodingBruteForce extends Operation {
         let table = ""<table class='table table-hover table-sm table-bordered table-nonfluid'><tr><th>Encoding</th><th>Value</th></tr>"";
 
         for (const enc in encodings) {
-            const value = Utils.printable(encodings[enc], true);
+            const value = Utils.escapeHtml(Utils.printable(encodings[enc], true));
             table += `<tr><td>${enc}</td><td>${value}</td></tr>`;
         }",Fixed XSS in 'Text Encoding Brute Force. Closes #539,"vuln-fix: Escape HTML output in encoding brute force table

The code rendered encoding values directly into an HTML table without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting (XSS) risk by enabling attackers to execute arbitrary scripts in users’ browsers.
The fix applies HTML escaping to the encoding values before insertion into the table, preventing script injection.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.058823529411764705,"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('#539', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'secword', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
121,CWE-79,GHSA-rxch-gp62-574w,"@@ -170,7 +170,7 @@ public function transformAssignedTo($asset)
         }
         return $asset->assigned ? [
             'id' => $asset->assigned->id,
-            'name' => $asset->assigned->display_name,
+            'name' => e($asset->assigned->display_name),
             'type' => $asset->assignedType()
         ] : null;
     }","Added escape to assigned_to API response

Signed-off-by: snipe <snipe@snipe.net>","vuln-fix: Escape assigned user display name in asset transform

The transformAssignedTo function returned the assigned user's display name without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting (XSS) risk by enabling attackers to inject executable code into rendered pages.
The patch applies the e() function to properly escape the display name before outputting it.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('added', 'ACTION', ''), ('escape', 'SECWORD', ''), ('signed', 'secword', ''), ('snipe@snipe.net', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'secword', ''), ('asset', 'secword', ''), ('escaping', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('patch', 'ACTION', ''), ('escape', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
122,CWE-79,GHSA-6465-r752-2h8v,"@@ -24,6 +24,7 @@
 use FacturaScripts\Core\Base\DataBase\DataBaseWhere;
 use FacturaScripts\Core\Lib\Widget\VisualItemLoadEngine;
 use FacturaScripts\Dinamic\Model\CodeModel;
+use FacturaScripts\Dinamic\Model\Page;
 use FacturaScripts\Dinamic\Model\PageOption;
 use FacturaScripts\Dinamic\Model\User;
 use Symfony\Component\HttpFoundation\Response;
@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)
         parent::privateCore($response, $user, $permissions);
         $this->model = new PageOption();
         $this->loadSelectedViewName();
-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;
+        $this->setBackPage();
         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;
         $this->loadPageOptions();
 
@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool
         return true;
     }
 
+    private function setBackPage()
+    {
+        // check if the url is a real controller name
+        $url = $this->request->get('url', '');
+        $pageModel = new Page();
+        foreach ($pageModel->all([], [], 0, 0) as $page) {
+            if (substr($url, 0, strlen($page->name)) === $page->name) {
+                $this->backPage = $url;
+                return;
+            }
+        }
+
+        // set the default back page
+        $this->backPage = $this->selectedViewName;
+    }
+
     /**
      * @param array $column
      * @param string $name","We check the url parameter of the link to ensure that it is a valid controller.
------
Comprobamos el parámetro url del enlace para asegurar que sea un controlador válido.","vuln-fix: Validate backPage URL against known controllers

The backPage URL parameter was assigned directly from user input without validation, allowing attackers to inject arbitrary URLs.
This could lead to open redirect vulnerabilities or unauthorized access to unintended pages, posing security and phishing risks.
The fix validates the URL by checking it against existing controller names and defaults to a safe page if no match is found.

Weakness: CWE-601
Severity: Medium
CVSS: 5.8",0.11764705882352941,"[('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('open redirect', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('security', 'SECWORD', ''), ('phishing', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('found', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-601', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
123,CWE-79,GHSA-2gqg-2rg7-gh33,"@@ -118,8 +118,8 @@ private function formatMessage($message)
         return [
             'severity'  => $this->severityLabel($level),
             'timestamp' => $displayTime,
-            'source'    => $device ? Url::deviceLink($device) : $message['message']['source'],
-            'message'   => $message['message']['message'] ?? '',
+            'source'    => $device ? Url::deviceLink($device) : htmlspecialchars($message['message']['source']),
+            'message'   => htmlspecialchars($message['message']['message'] ?? ''),
             'facility'  => is_numeric($facility) ? ""($facility) "" . __(""syslog.facility.$facility"") : $facility,
             'level'     => (is_numeric($level) && $level >= 0) ? ""($level) "" . __(""syslog.severity.$level"") : $level,
         ];",fix graylog xss (#13931),"vuln-fix: Escape log message fields to prevent XSS

The log formatting function did not escape user-controllable message source and content fields before rendering.
This allowed injection of malicious HTML or JavaScript, enabling cross-site scripting attacks in log viewers.
The patch applies htmlspecialchars to these fields to safely encode special characters and prevent script execution.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('xss', 'secword', ''), ('#13931', 'ISSUE', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('encode', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
124,CWE-79,GHSA-8c76-mxv5-w4g8,"@@ -6,18 +6,30 @@
 
 class SaveOptionApiController
 {
-    public function saveOption(Request $request) {
+    public $whitelistedGroupKeys = [
+        'website' => [
+            'website_head',
+            'website_footer'
+        ]
+    ];
+
+    public function saveOption(Request $request)
+    {
 
         $cleanFromXss = true;
         $option = $request->all();
 
-        // Allow for this keys
+        // Allow for this keys and groups
         if (isset($option['option_key'])) {
-            if ($option['option_key'] == 'website_head') {
-                $cleanFromXss = false;
-            }
-            if ($option['option_key'] == 'website_footer') {
-                $cleanFromXss = false;
+            foreach ($this->whitelistedGroupKeys as $group => $keys) {
+                if ($option['option_group'] == $group) {
+                    foreach ($keys as $key) {
+                        if ($option['option_key'] == $key) {
+                            $cleanFromXss = false;
+                            break;
+                        }
+                    }
+                }
             }
         }",Update SaveOptionApiController.php,"vuln-fix: Restrict XSS cleaning exceptions to whitelisted option keys

The saveOption method previously disabled XSS cleaning for specific option keys without verifying their group context.
This allowed attackers to bypass sanitization for keys like 'website_head' or 'website_footer' regardless of their group, increasing XSS risk.
The fix restricts the exception to keys only within explicitly whitelisted groups, ensuring untrusted inputs remain sanitized.

Weakness: CWE-79  
Severity: High  
CVSS: 7.8",0.11764705882352941,"[('update', 'ACTION', ''), ('saveoptionapicontroller.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('xss', 'secword', ''), ('keys', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('bypass', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('keys', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('keys', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('untrusted inputs', 'secword', ''), ('sanitized', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
125,CWE-79,GHSA-rp34-85x3-3764,"@@ -34,10 +34,10 @@
 $status = 'ok';
 $message = '';
 
-$transport_id = $vars['transport_id'];
-$name = $vars['name'];
+$transport_id = strip_tags($vars['transport_id']);
+$name = strip_tags($vars['name']);
 $is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');
-$transport_type = $vars['transport-type'];
+$transport_type = strip_tags($vars['transport-type']);
 
 if (empty($name)) {
     $status = 'error';","security - XSS Fix 01

fixing https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/ (#13775)","vuln-fix: Sanitize transport input fields to prevent XSS

The code accepted raw input for transport_id, name, and transport-type without sanitization, allowing injection of malicious HTML or script tags.
This posed a cross-site scripting risk by enabling attackers to execute arbitrary scripts in users’ browsers when these values were rendered.
The fix applies PHP’s strip_tags function to these inputs, removing any embedded HTML or script elements before further processing.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('security', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixing', 'ACTION', ''), ('https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/', 'URL', ''), ('#13775', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('transport', 'secword', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('transport', 'secword', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('removing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
126,"CWE-79', 'CWE-116",GHSA-xjfw-5vv5-vjq2,"@@ -58,9 +58,9 @@
       &lt;dd&gt;
         ## TODO: design a real framework to generate form by type
         #if (($descriptor.defaultValue || ""$!descriptor.defaultValue"" != '') &amp;&amp; ($descriptor.type.getName() == 'boolean' || $descriptor.type.getName() == 'int' || $descriptor.type.getName() == 'java.lang.String'))
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$request.get($descriptorId)#else$descriptor.defaultValue#end""/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId"" value=""#if($request.get($descriptorId))$escapetool.xml($request.get($descriptorId))#else$descriptor.defaultValue#end""/&gt;
         #else
-          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$request.get($descriptorId)""#end/&gt;
+          &lt;input type=""text"" id=""$descriptorId"" name=""$descriptorId""#if($request.get($descriptorId))value=""$escapetool.xml($request.get($descriptorId))""#end/&gt;
         #end
       &lt;/dd&gt;
     #end",XWIKI-19293: Fix bad escaping,"vuln-fix: Escape user input in form field values to prevent XSS

The form rendering code directly injected user-supplied input into HTML attribute values without escaping.
This allowed attackers to inject malicious HTML or JavaScript, leading to cross-site scripting (XSS) vulnerabilities.
The fix applies XML escaping to all user input before embedding it into input value attributes, mitigating injection risks.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.11764705882352941,"[('fix', 'ACTION', ''), ('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
127,CWE-79,GHSA-qq74-vgcf-54c3,"@@ -311,6 +311,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".asa"")
 			|| $isDangerStr($filename , "".cshtml"")
 			|| $isDangerStr($filename , "".axd"")
+			|| $isDangerStr($filename , ""htm"")
 		) {
 			return true;
 		}",bug,"vuln-fix: Extend dangerous filename check to include .htm extension

The filename validation function did not consider files with the .htm extension as dangerous, allowing potentially harmful files to bypass security checks.
This omission could enable attackers to upload or execute malicious HTML files, leading to cross-site scripting or code injection attacks.
The patch adds a check for the .htm extension to the list of dangerous filenames, improving input validation and reducing attack surface.

Weakness: CWE-434
Severity: Medium
CVSS: 6.0",0.11764705882352941,"[('bug', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('code injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'secword', ''), ('attack surface', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
128,CWE-79,GHSA-gx6h-936c-vrrr,"@@ -45,7 +45,7 @@
       <div>
         <input type=""hidden"" name=""form_token"" value=""$!services.csrf.token"" />
         <input type=""hidden"" name=""register"" value=""1"" />
-        <input type=""hidden"" name=""xredirect"" value=""$!request.xredirect"" />
+        <input type=""hidden"" name=""xredirect"" value=""$escapetool.xml($!request.xredirect)"" />
         #set ($class = $xwiki.getClass('XWiki.XWikiUsers'))
         #set ($obj = $class.newObject())
         #set ($serverobj = $class.newObject())","XWIKI-19291: redirect parameter is badly handled in register page

  * Fix the typo","vuln-fix: Escape xredirect parameter to prevent XSS

The xredirect parameter was embedded directly into a hidden input field without escaping, allowing injection of malicious HTML or JavaScript.
This created a cross-site scripting risk where attackers could execute arbitrary scripts in users’ browsers, compromising session integrity.
The fix applies XML escaping to the xredirect value before rendering it in the form, neutralizing embedded code.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.17647058823529413,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
129,CWE-79,GHSA-ff28-f46g-r9g8,"@@ -314,6 +314,7 @@ func runWeb(c *cli.Context) error {
 				}
 				defer fr.Close()
 
+				c.Header().Set(""Content-Security-Policy"", ""default-src 'none'; style-src 'unsafe-inline'; sandbox"")
 				c.Header().Set(""Cache-Control"", ""public,max-age=86400"")
 				c.Header().Set(""Content-Disposition"", fmt.Sprintf(`inline; filename=""%s""`, attach.Name))",attachment: set CSP header in the serving endpoint (#6926),"vuln-fix: Add Content-Security-Policy header to web responses

The web server responses lacked a Content-Security-Policy header, allowing browsers to execute potentially malicious scripts or load unsafe resources.
This exposed users to cross-site scripting and other injection attacks by not restricting content sources or script execution.
The patch adds a restrictive Content-Security-Policy header that disables all content by default, permits inline styles, and enables sandboxing to mitigate these risks.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.058823529411764705,"[('csp header', 'SECWORD', ''), ('#6926', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('security', 'secword', ''), ('server', 'SECWORD', ''), ('security', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('security', 'secword', ''), ('mitigate', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
130,CWE-79,GHSA-74qp-233x-p5j8,"@@ -15,13 +15,17 @@
  * limitations under the License.
  */
 
+function escapeHtml(unescapedText) {
+  return $(""<div>"").text(unescapedText).html()
+}
+
 function loadSessionsTable(sessions) {
   $.each(sessions, function(index, session) {
     $(""#interactive-sessions .sessions-table-body"").append(
       ""<tr>"" +
         tdWrap(uiLink(""session/"" + session.id, session.id)) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.kind) +
@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {
       ""<tr>"" +
         tdWrap(session.id) +
         tdWrap(appIdLink(session)) +
-        tdWrap(session.name) +
+        tdWrap(escapeHtml(session.name)) +
         tdWrap(session.owner) +
         tdWrap(session.proxyUser) +
         tdWrap(session.state) +
@@ -79,4 +83,4 @@ $(document).ready(function () {
       $(""#all-sessions"").append('<h4>No Sessions or Batches have been created yet.</h4>');
     }
   });
-});
\ No newline at end of file
+});","Add html escape to session name

## What changes were proposed in this pull request?

The PR adds HTML escaping to session names.

## How was this patch tested?

Manual test.

Author: Marco Gaido <mgaido@apache.org>

Closes #302 from mgaido91/escape_html.","vuln-fix: Escape HTML in session and batch names to prevent XSS

Session and batch names were directly inserted into the DOM without escaping, allowing attackers to inject malicious HTML or scripts.
This created a cross-site scripting (XSS) vulnerability that could compromise user sessions or steal sensitive data.
The fix introduces an escapeHtml function that safely encodes text before insertion, preventing execution of injected code.

Weakness: CWE-79  
Severity: High  
CVSS: 7.5",0.17647058823529413,"[('add', 'ACTION', ''), ('escape', 'secword', ''), ('changes', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'secword', ''), ('patch', 'ACTION', ''), ('manual', 'DETECTION', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'secword', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('fix', 'ACTION', ''), ('escapehtml', 'SECWORD', ''), ('encodes', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
131,CWE-79,GHSA-c7pp-g2v2-2766,"@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {
                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(""["");
                 data = response.substring(response.indexOf(""[""), endIndex);
 
-                var get_data = new Function(""\""use strict\""; return "" + data);
-                realData = get_data();
-
-                parsedResponse.push(realData);
+                var json = JSON.parse(data);
+                parsedResponse.push(json);
 
                 // prepare response for next loop
                 response = response.substring(response.indexOf(""[""), response.length);
@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {
             return emails;
         }
 
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        api.tracker.view_data = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
+        api.tracker.view_data = json;
 
         for(var i in api.tracker.view_data) {
             if (typeof(api.tracker.view_data[i]) === ""function"") {
@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {
         if (!get_data) {
             return {};
         }
-        get_data = get_data.substring(get_data.indexOf(""[""), get_data.length);
-        get_data = ""\""use strict\""; return "" + get_data;
-        get_data = new Function(get_data);
-
-        var cdata = get_data();
+        var data = get_data.substring(get_data.indexOf(""[""), get_data.length);
+        var json = JSON.parse(data);
 
-        api.tracker.email_data = cdata[0];
+        api.tracker.email_data = json[0];
         return api.tools.parse_email_data(api.tracker.email_data);
     };",Replace new Function() with JSON.parse(),"vuln-fix: Replace dynamic code execution with JSON parsing

The code used the Function constructor to evaluate string data as JavaScript code, enabling arbitrary code execution if input was maliciously crafted.
This posed a critical security risk by allowing remote attackers to execute arbitrary scripts within the application context, leading to potential data theft or system compromise.
The fix replaces dynamic function creation with safe JSON.parse calls to strictly parse data as JSON, eliminating code execution vectors.

Weakness: CWE-95
Severity: Critical
CVSS: 9.8",0.11764705882352941,"[('json.parse', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('maliciously', 'SECWORD', ''), ('critical', 'SEVERITY', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('theft', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('json.parse', 'URL', ''), ('code execution', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-95', 'CWEID', ''), ('critical', 'SEVERITY', '')]"
132,CWE-79,GHSA-c558-5gfm-p2r8,"@@ -141,7 +141,7 @@
 									tmp_val = item.displayedValue;
 								}
 								return {
-									label: item.displayedValue + "" ("" + item.count + "")"",
+									label: escapeHtml(item.displayedValue) + "" ("" + item.count + "")"",
 									value: tmp_val
 								};
 							}))			
@@ -153,7 +153,12 @@
 	function validateFilters() {
 		return document.getElementById(""filterquery"").value.length > 0;
 	}
-</script>		
+	// Generic HTML escape utility
+	var escapeHtml = s => (s + '').replace(/[&<>""']/g, m => ({
+		'&': '&amp;', '<': '&lt;', '>': '&gt;',
+		'""': '&quot;', ""'"": '&#39;'
+	})[m]);
+</script>
 </c:set>
 
 <dspace:layout titlekey=""jsp.search.title"">",[DS-4453] Discovery autocomplete HTML escaping (JSPUI),"vuln-fix: Escape HTML in filter labels to prevent XSS

The code rendered user-supplied filter labels without escaping HTML, allowing injection of malicious scripts in the UI.
This posed a cross-site scripting risk, enabling attackers to execute arbitrary JavaScript in users’ browsers and compromise session integrity.
The fix adds an escapeHtml function to sanitize displayed values before rendering them in the label field.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.058823529411764705,"[('escaping', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('integrity', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('escapehtml', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
133,CWE-79,GHSA-gj85-pvp5-mvf9,"@@ -19,7 +19,7 @@ function autoload_class($class) {
 require_once dirname(__FILE__) . '/../config.php';
 require_once dirname(__FILE__) . '/../src/Storage.php';
 
-$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';
+$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';
 $GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';
 $GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';
 $GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';",Sanitize input,"vuln-fix: Sanitize server parameter from GET request

The code directly assigned the 'server' GET parameter to a global variable without sanitization, allowing injection of malicious HTML or script content.
This exposed the application to cross-site scripting (XSS) attacks, risking user session hijacking or defacement.
The fix applies htmlspecialchars to the 'server' parameter to encode special characters and prevent script execution.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.11764705882352941,"[('sanitize', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('server', 'SECWORD', ''), ('server', 'secword', ''), ('sanitization', 'secword', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'SECWORD', ''), ('hijacking', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlspecialchars', 'SECWORD', ''), ('server', 'secword', ''), ('encode', 'secword', ''), ('prevent', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
134,CWE-79,GHSA-3j9m-hcv9-rpj8,"@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replace('{{', '%7B%7B').replace('}}', '%7D%7D');
+  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
 }

From: Dan Cech <dcech@grafana.com>

 packages/grafana-data/src/text/sanitize.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {
 }
 
 export function sanitizeAngularInterpolation(url: string): string {
-  return url.replaceAll('{{', '%7B%7B').replaceAll('}}', '%7D%7D');
+  return url.replace(/\{\{/g, '%7B%7B').replace(/\}\}/g, '%7D%7D');
 }","Merge pull request #151 from grafana/dcech/sanitize-replaceAll

use global replace when sanitizing urls in 8.2.3","vuln-fix: Correct Angular interpolation sanitization method

The sanitizeAngularInterpolation function used string replaceAll incorrectly, which could fail to replace all Angular interpolation patterns in URLs.
This incomplete sanitization risked template injection attacks by allowing unescaped {{ and }} sequences to be processed in Angular contexts.
The fix replaces replaceAll calls with global regex replace to ensure all occurrences of interpolation delimiters are properly encoded.

Weakness: CWE-79
Severity: Medium
CVSS: 5.4",0.17647058823529413,"[('#151', 'ISSUE', ''), ('sanitize', 'SECWORD', ''), ('sanitizing', 'secword', ''), ('8.2.3', 'VERSION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitization', 'secword', ''), ('sanitizeangularinterpolation', 'SECWORD', ''), ('sanitization', 'secword', ''), ('injection', 'secword', ''), ('attacks', 'FLAW', ''), ('unescaped', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
135,CWE-79,GHSA-hm45-mgqm-gjm4,"@@ -72,6 +72,7 @@ <h1>{{ _('Loading servers...') }}</h1>
                 } else {
                     var base_guild_url = ""{{ url_for('home_blueprint.guild', guild='123456789123456789') }}""
                     $(""#serverrow"").html("""")
+                    let counter = 0
                     for (let g of json.data) {
                         var current_guild_url = base_guild_url.replace(""123456789123456789"", g.id)
                         $(""#serverrow"").append(`
@@ -80,13 +81,16 @@ <h1>{{ _('Loading servers...') }}</h1>
                                     <div class=""card h-100"" onmouseover=""playGif(this)"" onmouseout=""stopGif(this)"">
                                         <img class=""card-img-top"" src=""${g.icon}png"" alt=""Card image cap"" data-src-url=""${g.icon}"" data-is-animated=${g.animated}>
                                         <div class=""card-body"">
-                                            <h5 class=""card-title"">${g.name}</h5>
-                                            <p class=""card-text"">Owner: ${g.owner}</p>
+                                            <h5 class=""card-title"" id=""guild-counter-${counter}"">Loading...</h5>
+                                            <p class=""card-text"" id=""owner-counter-${counter}"">Owner: Loading...</p>
                                         </div>
                                     </div>
                                 </a>
                             </div>
                         `)
+                        $(`#guild-counter-${counter}`).text(g.name)
+                        $(`#owner-counter-${counter}`).text(g.owner)
+                        counter += 1
                     }
                 }
             }",Fix unformatted HTML,"vuln-fix: Prevent HTML injection in guild and owner display

The original code directly inserted guild names and owner data into HTML without escaping, allowing injection of malicious HTML or scripts.
This posed a cross-site scripting (XSS) risk, enabling attackers to execute arbitrary scripts in users’ browsers.
The fix defers setting text content using jQuery’s text() method, ensuring proper escaping and preventing injection.

Weakness: CWE-79  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
136,CWE-79,GHSA-c53x-wwx2-pg96,"@@ -21,7 +21,7 @@ const liljs = (elem, data = {}) => {
      * @param {String} property Name of the property to render
      * @param {String} value (Optional) A value to use instead of a property (used in lil-list-text)
      */
-    const setText = (elem, property, value) => elem.innerHTML = value || state[property].value;
+    const setText = (elem, property, value) => elem.textContent = value || state[property].value;
 
     /** Set style helper function
      * @function setStyle
@@ -43,7 +43,7 @@ const liljs = (elem, data = {}) => {
      */
     const setList = (elem, property) => {
       //TODO: Find a way to update without clearing lists
-      elem.innerHTML = """";
+      elem.textContent = """";
       state[property].value.forEach(value => {
         let clone = document.importNode(state[property].template.content, true);
         clone.querySelectorAll(""[lil-list-text]"").forEach(node => {","Use textContent over innerHTML so you can bind untrusted text values
without the possibility of an XSS attack.","vuln-fix: Replace innerHTML with textContent to prevent XSS

The code used innerHTML to set element content from potentially untrusted data, enabling injection of malicious HTML or scripts.
This posed a cross-site scripting risk by allowing attackers to execute arbitrary JavaScript in the user’s browser context.
The fix replaces innerHTML assignments with textContent to safely insert text without parsing it as HTML.

Weakness: CWE-79
Severity: High
CVSS: 7.4",0.17647058823529413,"[('untrusted', 'secword', ''), ('xss', 'SECWORD', ''), ('attack', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('untrusted data', 'secword', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
137,CWE-79,GHSA-vhm6-gw82-6f8j,"@@ -62,7 +62,7 @@
                             echo ""
                                 <tr>
                                     <td>{$rule['name']}</td>
-                                    <td><i>"" . htmlentities($rule_display) . ""</i></td>
+                                    <td><i>"" . htmlentities(strip_tags($rule_display)) . ""</i></td>
                                     <td>{$rule['severity']}</td>
                                     <td>{$rule['id']}</td>
                                 </tr>",Resolved XSS issue from alert rule list modal (#13805),"vuln-fix: Sanitize rule display output to prevent XSS

The code outputted rule display content without removing embedded HTML tags, allowing malicious scripts to be injected and executed in the browser.
This posed a cross-site scripting risk, enabling attackers to run arbitrary JavaScript in users’ sessions and potentially steal sensitive data or perform actions on their behalf.
The fix applies strip_tags before htmlentities to remove any HTML tags, ensuring only safe text is encoded and rendered.

Weakness: CWE-79  
Severity: Medium  
CVSS: 5.4",0.058823529411764705,"[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('removing', 'ACTION', ''), ('malicious', 'SECWORD', ''), ('cross-site scripting', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('steal', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('fix', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('remove', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('encoded', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
138,CWE-79,GHSA-mw75-qvfr-hpmr,"@@ -303,6 +303,7 @@ public function isDangerFilename($filename){
 			|| $isDangerStr($filename , "".shtm"")
 			|| $isDangerStr($filename , ""%"")
 			|| $isDangerStr($filename , "".xml"")
+			|| $isDangerStr($filename , "".xxhtml"")
 		) {
 			return true;
 		}
@@ -312,4 +313,4 @@ public function isDangerFilename($filename){
 
 
 
-}
\ No newline at end of file
+}","Merge pull request #1628 from ajaysenr/master

Update AttachmentModel.class.php","vuln-fix: Extend dangerous filename checks to include .xxhtml extension

The filename validation function did not consider files with the .xxhtml extension as dangerous, allowing potentially unsafe files to bypass security filters.
This omission could enable attackers to upload or process malicious files disguised with this extension, leading to code execution or data exposure.
The patch adds a check for the .xxhtml extension to the list of dangerous filename patterns, improving input validation and reducing attack surface.

Weakness: CWE-434
Severity: Medium
CVSS: 6.1",0.23529411764705882,"[('#1628', 'ISSUE', ''), ('update', 'ACTION', ''), ('attachmentmodel.class.php', 'URL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('malicious files', 'SECWORD', ''), ('code execution', 'SECWORD', ''), ('data exposure', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('improving', 'ACTION', ''), ('input validation', 'SECWORD', ''), ('attack surface', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
139,CWE-79,GHSA-h3vq-wv8j-36gw,"@@ -50,8 +50,21 @@ module.exports = function (svgString) {
     // Empty script tags and javascript executing
     svgString = svgString.replace(/<script[\s\S]*>[\s\S]*<\/script>/, '<script></script>');
     
-    // Remove error handlers
-    svgString = svgString.replace(/onerror=[\s\S]*['""].*?['""]/i, '');
+    // Remove event handlers
+    const eventNames = [
+        'onbegin', 'onend', 'onrepeat', 'onabort', 'onerror', 'onresize', 'onscroll', 'onunload', 'oncopy',
+        'oncut', 'onpaste', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose',
+        'oncuechange', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave',
+        'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onloadeddata', 'onloadedmetadata',
+        'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove',
+        'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress',
+        'onkeyup', 'onload', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpause', 'onplay',
+        'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onseeked', 'onseeking',
+        'onselect', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange',
+        'onwaiting', 'onactivate', 'onfocusin', 'onfocusout'
+    ];
+    const eventsRegex = new RegExp(`(${eventNames.join('|')})\\s*=\\s*['""].*['""]`, 'i');
+    svgString = svgString.replace(eventsRegex, '');
 
     return svgString;
 };",Remove lots of event handlers,"vuln-fix: Remove all event handler attributes from SVG input

The sanitizer only removed onerror attributes, leaving many other event handlers intact in SVG input.
This allowed attackers to embed malicious JavaScript event handlers, enabling cross-site scripting (XSS) attacks when SVGs were rendered.
The fix expands removal to a comprehensive list of event handler attributes using a regex that strips all such attributes from the SVG string.

Weakness: CWE-79
Severity: High
CVSS: 7.8",0.11764705882352941,"[('remove', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('sanitizer', 'SECWORD', ''), ('removed', 'ACTION', ''), ('onerror', 'FLAW', ''), ('attackers', 'FLAW', ''), ('malicious', 'secword', ''), ('cross-site scripting', 'SECWORD', ''), ('xss', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-79', 'CWEID', ''), ('high', 'SEVERITY', '')]"
140,CWE-79,GHSA-q6mp-562x-ggvv,"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA
                 break;
             case 'file':
             case 'files':
-                $are_allowed .= ',css,json,zip,gzip,csv,7z';
+                $are_allowed .= ',css,json,zip,gzip,psd,csv,7z';
                 break;
             case 'documents':
             case 'doc':
-                $are_allowed .= ',doc,docx,pdf,odt,pages,rtf,txt,pps,ppt,pptx,xls,xlsx';
+                $are_allowed .= ',doc,docx,pdf,odt,rtf,txt,pps,ppt,pptx,xls,xlsx';
                 break;
             case 'archives':
             case 'arc':",update,"vuln-fix: Restrict allowed file extensions for upload

The file upload function included potentially unsafe file types like PSD in the allowed list, increasing the risk of uploading malicious or unexpected files.
Allowing such files can lead to execution of harmful content or exploitation of vulnerabilities in file processing components.
The patch removes the PSD extension from the allowed list to tighten upload restrictions and reduce attack surface.

Weakness: CWE-434
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('update', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploitation', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('patch', 'ACTION', ''), ('removes', 'ACTION', ''), ('attack surface', 'secword', ''), ('weakness', 'secword', ''), ('cwe-434', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
0,CWE-125,GHSA-j47f-4232-hvv8,"@@ -21,6 +21,7 @@ limitations under the License.
 #include ""tensorflow/core/framework/register_types.h""
 #include ""tensorflow/core/framework/tensor.h""
 #include ""tensorflow/core/framework/tensor_shape.h""
+#include ""tensorflow/core/platform/errors.h""
 #include ""tensorflow/core/platform/fingerprint.h""
 #include ""tensorflow/core/util/util.h""
 #include ""tensorflow/core/util/work_sharder.h""
@@ -466,16 +467,45 @@ class RaggedCrossOp : public OpKernel {
     int next_dense = 0;
     for (char c : input_order_) {
       if (c == 'R') {
+        if (next_ragged >= ragged_values_list.size())
+          return errors::InvalidArgument(
+              ""input_order \"""", input_order_,
+              ""\"" specifies reading a ragged tensor value at index "",
+              next_ragged, "" from a list of "", ragged_values_list.size(),
+              "" values."");
+        if (next_ragged >= ragged_splits_list.size())
+          return errors::InvalidArgument(
+              ""input_order \"""", input_order_,
+              ""\"" specifies reading a ragged tensor split at index "",
+              next_ragged, "" from a list of "", ragged_splits_list.size(),
+              "" splits."");
         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(
             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],
             features));
         next_ragged++;
       } else if (c == 'S') {
+        if (next_sparse >= sparse_values_list.size())
+          return errors::InvalidArgument(
+              ""input_order \"""", input_order_,
+              ""\"" specifies reading a sparse tensor value at index "",
+              next_sparse, "" from a list of "", sparse_values_list.size(),
+              "" values."");
+        if (next_sparse >= sparse_indices_list.size())
+          return errors::InvalidArgument(
+              ""input_order \"""", input_order_,
+              ""\"" specifies reading a sparse tensor index at index "",
+              next_sparse, "" from a list of "", sparse_indices_list.size(),
+              "" indices."");
         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(
             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],
             batch_size, features));
         next_sparse++;
       } else if (c == 'D') {
+        if (next_dense >= dense_list.size())
+          return errors::InvalidArgument(
+              ""input_order \"""", input_order_,
+              ""\"" specifies reading a dense tensor at index "", next_dense,
+              "" from a list of "", dense_list.size(), "" tensors."");
         TF_RETURN_IF_ERROR(
             BuildDenseFeatureReader(dense_list[next_dense++], features));
       } else {","Fix out of bounds read in `ragged_cross_op.cc`.

PiperOrigin-RevId: 369757702
Change-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9","vuln-fix: Validate tensor list indices in RaggedCrossOp

The RaggedCrossOp did not verify that indices used to access ragged, sparse, and dense tensor lists were within valid bounds.
This could lead to out-of-bounds reads causing crashes or memory corruption, potentially exploitable for denial of service or information disclosure.
The fix adds explicit boundary checks for all tensor list accesses and returns detailed InvalidArgument errors when indices exceed list sizes.

Weakness: CWE-125
Severity: High
CVSS: 7.5",0.17647058823529413,"[('fix', 'ACTION', ''), ('out of bounds read', 'secword', ''), ('ragged_cross_op.cc', 'URL', ''), ('change', 'ACTION', ''), ('ie6e5d2c21513a8d56bf41fcf35960caf76e890f9', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds reads', 'SECWORD', ''), ('memory corruption', 'SECWORD', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('boundary checks', 'SECWORD', ''), ('errors', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
1,CWE-125,GHSA-h9px-9vqg-222h,"@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
+#include ""tensorflow/core/framework/op_requires.h""
 #define EIGEN_USE_THREADS
 
 #if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \
@@ -234,6 +235,10 @@ class QuantizeAndDequantizeV3Op : public OpKernel {
 
   void Compute(OpKernelContext* ctx) override {
     const Tensor& input = ctx->input(0);
+    OP_REQUIRES(ctx, axis_ < input.dims(),
+                errors::InvalidArgument(
+                    ""Axis requested is larger than input dimensions. Axis: "",
+                    axis_, "" Input Dimensions: "", input.dims()));
     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);
     Tensor* output = nullptr;
     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));","Fix `tf.raw_ops.QuantizeAndDequantizeV3` array index failure.

PiperOrigin-RevId: 370577691
Change-Id: Ifeae64212f6bcd139435824fa2748d1329213c4c","vuln-fix: Validate axis parameter against input tensor dimensions

The quantize and dequantize operation did not verify that the axis parameter was within the valid range of input tensor dimensions.
This could lead to out-of-bounds access, causing crashes or undefined behavior exploitable for denial of service.
The patch adds a check using OP_REQUIRES to ensure the axis is less than the input tensor's rank before proceeding.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('fix', 'ACTION', ''), ('change', 'ACTION', ''), ('ifeae64212f6bcd139435824fa2748d1329213c4c', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
2,CWE-125,GHSA-374m-jm66-3vj8,"@@ -405,6 +405,16 @@ class SparseBincountOp : public OpKernel {
       for (int64_t i = 0; i < indices_mat.dimension(0); ++i) {
         const int64_t batch = indices_mat(i, 0);
         const Tidx bin = values(i);
+        OP_REQUIRES(
+            ctx, batch < out.dimension(0),
+            errors::InvalidArgument(""Index out of bound. `batch` ("", batch,
+                                    "") must be less than the dimension size ("",
+                                    out.dimension(0), "").""));
+        OP_REQUIRES(
+            ctx, bin < out.dimension(1),
+            errors::InvalidArgument(""Index out ouf bound. `bin` ("", bin,
+                                    "") must be less then the dimension size ("",
+                                    out.dimension(1), "").""));
         if (bin < size) {
           if (binary_output_) {
             out(batch, bin) = T(1);","Prevent out-of-bound accesses in SparseBincount.

PiperOrigin-RevId: 399918616
Change-Id: I11d154f4444d3fde1f09c5c40628b8671791a30d","vuln-fix: Validate indices bounds in SparseBincountOp kernel

The SparseBincountOp kernel did not verify that batch and bin indices were within the valid output tensor dimensions.
This allowed out-of-bounds indexing which could cause memory corruption, crashes, or denial-of-service conditions.
The fix adds explicit checks using OP_REQUIRES to ensure batch and bin indices are less than their respective output dimension sizes.

Weakness: CWE-125  
Severity: High  
CVSS: 7.8",0.17647058823529413,"[('prevent', 'ACTION', ''), ('out-of-bound', 'SECWORD', ''), ('change', 'ACTION', ''), ('i11d154f4444d3fde1f09c5c40628b8671791a30d', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'SECWORD', ''), ('denial-of-service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,CWE-125,GHSA-9697-98pf-4rw7,"@@ -86,6 +86,10 @@ class UpperBoundOp : public OpKernel {
     const Tensor& sorted_inputs_t = ctx->input(0);
     const Tensor& values_t = ctx->input(1);
 
+    // inputs must be at least a matrix
+    OP_REQUIRES(
+        ctx, sorted_inputs_t.shape().dims() >= 2,
+        errors::InvalidArgument(""sorted input argument must be a matrix""));
     // must have same batch dim_size for both
     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),
                 Status(error::INVALID_ARGUMENT,
@@ -127,6 +131,10 @@ class LowerBoundOp : public OpKernel {
     const Tensor& sorted_inputs_t = ctx->input(0);
     const Tensor& values_t = ctx->input(1);
 
+    // inputs must be at least a matrix
+    OP_REQUIRES(
+        ctx, sorted_inputs_t.shape().dims() >= 2,
+        errors::InvalidArgument(""sorted input argument must be a matrix""));
     // must have same batch dim_size for both
     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),
                 Status(error::INVALID_ARGUMENT,","Prevent CHECK-fail/heap OOB in UpperBound and LowerBound

PiperOrigin-RevId: 387738073
Change-Id: Iee74de95ddad18440d052a75a5a1cb67544f490a","vuln-fix: Enforce minimum tensor rank in bound operations

The UpperBoundOp and LowerBoundOp kernels did not verify that input tensors had at least two dimensions, allowing malformed inputs to bypass shape expectations.
This could lead to out-of-bounds memory access or logic errors when processing tensors with insufficient rank, risking crashes or data corruption.
The fix adds explicit checks requiring input tensors to be matrices or higher-rank, rejecting inputs with fewer dimensions via OP_REQUIRES.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('iee74de95ddad18440d052a75a5a1cb67544f490a', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('bypass', 'SECWORD', ''), ('out-of-bounds', 'SECWORD', ''), ('logic errors', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
4,"CWE-787', 'CWE-125",GHSA-4hvf-hxvg-f67v,"@@ -282,10 +282,12 @@ void FormatConverter<T>::InitSparseToDenseConverter(
   block_size_.resize(block_map_.size());
   for (int i = 0; i < original_rank; i++) {
     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {
-      int orig_dim = traversal_order_[original_rank + block_dim];
-      block_size_[block_dim] = dense_size[orig_dim];
-      blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];
-      block_dim++;
+      if (original_rank + block_dim < traversal_order_.size()) {
+        int orig_dim = traversal_order_[original_rank + block_dim];
+        block_size_[block_dim] = dense_size[orig_dim];
+        blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];
+        block_dim++;
+      }
     } else {
       blocked_shape_[i] = dense_shape_[i];
     }
@@ -328,13 +330,15 @@ void FormatConverter<T>::Populate(const T* src_data, std::vector<int> indices,
       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,
                src_data_ptr, dest_data);
     }
-  } else {
+  } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {
     const auto& array_segments = dim_metadata_[metadata_idx];
     const auto& array_indices = dim_metadata_[metadata_idx + 1];
     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];
          i++) {
-      indices[level] = array_indices[i];
-      Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);
+      if (i < array_indices.size() && level < indices.size()) {
+        indices[level] = array_indices[i];
+        Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);
+      }
     }
   }
 }","[lite] Add some safety checks to avoid out of bound access for sparsity format

PiperOrigin-RevId: 416910386
Change-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a","vuln-fix: Add bounds checks to prevent out-of-bounds memory access

The code lacked sufficient bounds checking on array indices and traversal order accesses, risking out-of-bounds reads during sparse-to-dense tensor conversion.
This could lead to memory corruption, crashes, or potential information disclosure by reading invalid memory locations.
The fix adds explicit boundary checks before indexing arrays and vectors to ensure all accesses remain within valid ranges.

Weakness: CWE-125
Severity: High
CVSS: 7.8",0.11764705882352941,"[('add', 'ACTION', ''), ('safety checks', 'SECWORD', ''), ('out of bound access', 'SECWORD', ''), ('change', 'ACTION', ''), ('ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('add', 'ACTION', ''), ('bounds checks', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('bounds checking', 'SECWORD', ''), ('out-of-bounds reads', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('boundary checks', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,"CWE-476', 'CWE-787', 'CWE-125",GHSA-9xh4-23q4-v6wr,"@@ -1282,6 +1282,32 @@ class FusedBatchNormOpBase : public OpKernel {
                   errors::InvalidArgument(""Error during tensor copy.""));
     }
 
+    const auto num_channels = GetTensorDim(x, tensor_format_, 'C');
+    OP_REQUIRES(
+        context, scale.NumElements() == num_channels,
+        errors::InvalidArgument(""scale must have the same number of elements ""
+                                ""as the channels of x, got "",
+                                scale.NumElements(), "" and "", num_channels));
+    OP_REQUIRES(
+        context, offset.NumElements() == num_channels,
+        errors::InvalidArgument(""offset must have the same number of elements ""
+                                ""as the channels of x, got "",
+                                offset.NumElements(), "" and "", num_channels));
+    if (estimated_mean.NumElements() != 0) {
+      OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,
+                  errors::InvalidArgument(
+                      ""mean must be empty or have the same number of ""
+                      ""elements as the channels of x, got "",
+                      estimated_mean.NumElements(), "" and "", num_channels));
+    }
+    if (estimated_variance.NumElements() != 0) {
+      OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,
+                  errors::InvalidArgument(
+                      ""variance must be empty or have the same number of ""
+                      ""elements as the channels of x, got "",
+                      estimated_variance.NumElements(), "" and "", num_channels));
+    }
+
     if (has_side_input_) {
       OP_REQUIRES(context, side_input->shape() == x.shape(),
                   errors::InvalidArgument(
@@ -1294,7 +1320,7 @@ class FusedBatchNormOpBase : public OpKernel {
       // NOTE(ezhulenev): This requirement is coming from implementation
       // details of cudnnBatchNormalizationForwardTrainingEx.
       OP_REQUIRES(
-          context, !is_training_ || x.dim_size(3) % 4 == 0,
+          context, !is_training_ || num_channels % 4 == 0,
           errors::InvalidArgument(""FusedBatchNorm with activation requires ""
                                   ""channel dimension to be a multiple of 4.""));
     }","Add missing valuidation to FusedBatchNorm.

PiperOrigin-RevId: 372460336
Change-Id: Ic8c4e4de67c58a741bd87f2e182bed07247d1126","vuln-fix: Validate channel dimension sizes in fused batch norm inputs

The fused batch normalization operation did not verify that scale, offset, mean, and variance tensors matched the channel dimension size of the input tensor.
This could lead to out-of-bounds memory access or incorrect computations, potentially causing crashes or data corruption during model execution.
The fix adds explicit checks ensuring these tensors have element counts equal to the input’s channel dimension, enforcing consistency before proceeding.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.17647058823529413,"[('add', 'ACTION', ''), ('change', 'ACTION', ''), ('ic8c4e4de67c58a741bd87f2e182bed07247d1126', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
6,CWE-125,GHSA-cgfm-62j4-v4rf,"@@ -219,7 +219,20 @@ class SparseReduceOp : public OpKernel {
     sp.Reorder<T>(reduction.reorder_dims);
     for (const auto &g : sp.group(reduction.group_by_dims)) {
       Op::template Run<T>(ctx, reduced_val, g.template values<T>());
+      OP_REQUIRES(ctx,
+                  output_strides.empty() ||
+                  (g.group().size() == output_strides.size()),
+                  errors::Internal(
+                      ""Expected group size and output_strides size to match"",
+                      "", but got "", g.group().size(), "" and "",
+                      output_strides.size()));
       const int64_t idx = CoordinatesToFlatIndex(g.group(), output_strides);
+      OP_REQUIRES(ctx,
+                  idx >= 0 && idx < out_flat.size(),
+                  errors::Internal(
+                      ""Obtained a write index of "", idx,
+                      "" which is outside of bounds of [0, "",
+                      out_flat.size(), "")""));
       out_flat(idx) = reduced_val();
       VLOG(2) << ""coords: "" << absl::StrJoin(g.group(), "","")
               << ""; idx: "" << idx << ""; group "" << Op::Name() << "": ""","Prevent heap OOB in sparse reduction ops.

PiperOrigin-RevId: 387934524
Change-Id: I894aa30f1e454f09b471d565b4a325da49322c1a","vuln-fix: Validate index bounds in sparse reduce operation

The sparse reduce operation did not verify that computed indices were within valid output tensor bounds before writing.
This allowed out-of-bounds writes that could corrupt memory or cause crashes, leading to potential denial-of-service or data integrity issues.
The patch adds checks to ensure group sizes match output strides and that computed indices are within the valid range before assignment.

Weakness: CWE-125
Severity: High
CVSS: 7.8",0.17647058823529413,"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('i894aa30f1e454f09b471d565b4a325da49322c1a', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds writes', 'SECWORD', ''), ('denial-of-service', 'SECWORD', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
7,CWE-125,GHSA-q3g3-h9r4-prrc,"@@ -265,6 +265,11 @@ class SimpleBinaryOp : public OpKernel {
   void Compute(OpKernelContext* ctx) override {
     const Tensor& in0 = ctx->input(0);
     const Tensor& in1 = ctx->input(1);
+    OP_REQUIRES(
+        ctx, in0.NumElements() == in1.NumElements(),
+        errors::InvalidArgument(""The two arguments to a cwise op must have ""
+                                ""same number of elements, got "",
+                                in0.NumElements(), "" and "", in1.NumElements()));
     auto in0_flat = in0.flat<Tin>();
     auto in1_flat = in1.flat<Tin>();
     const Device& eigen_device = ctx->eigen_device<Device>();","Fix nullptr deref and heap OOB access in binary cwise ops.

PiperOrigin-RevId: 387936777
Change-Id: I608b8074cec36a982cca622b7144cb2c43e6e19f","vuln-fix: Enforce equal element count in binary operation inputs

The binary operation did not verify that both input tensors contained the same number of elements before processing.
This could lead to out-of-bounds memory access or undefined behavior, potentially causing crashes or data corruption.
The fix adds a runtime check that validates the element counts match and returns an error if they differ.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('heap oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('i608b8074cec36a982cca622b7144cb2c43e6e19f', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
8,CWE-125,GHSA-5hj3-vjjf-f5m7,"@@ -380,6 +380,11 @@ Status Examples::Initialize(OpKernelContext* const context,
   const Tensor* example_labels_t;
   TF_RETURN_IF_ERROR(context->input(""example_labels"", &example_labels_t));
   auto example_labels = example_labels_t->flat<float>();
+  if (example_labels.size() != num_examples) {
+    return errors::InvalidArgument(""Expected "", num_examples,
+                                   "" example labels but got "",
+                                   example_labels.size());
+  }
 
   OpInputList dense_features_inputs;
   TF_RETURN_IF_ERROR(","Add remaining validation to `sdca_internal.cc`

PiperOrigin-RevId: 387738010
Change-Id: I28eedcfd87a53aaf34deb075acea1f8c95470808","vuln-fix: Validate example labels size in initialization

The initialization function did not verify that the number of example labels matched the expected number of examples.
This could lead to out-of-bounds memory access or logic errors, potentially causing crashes or data corruption.
The patch adds a size check that returns an error if the example labels count does not equal the expected number.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.17647058823529413,"[('add', 'ACTION', ''), ('sdca_internal.cc', 'URL', ''), ('change', 'ACTION', ''), ('i28eedcfd87a53aaf34deb075acea1f8c95470808', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('initialization', 'SECWORD', ''), ('initialization', 'SECWORD', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('logic errors', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('size check', 'SECWORD', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
9,"CWE-787', 'CWE-125",GHSA-77gp-3h4r-6428,"@@ -100,7 +100,7 @@ StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,
     // verifications are needed, they should be done by separately, and in a
     // way that can be reused for type inference.
     for (int j = 0; j < t->args_size(); j++) {
-      auto* arg = t->mutable_args(i);
+      auto* arg = t->mutable_args(j);
       if (arg->type_id() == TFT_VAR) {
         const auto* attr = attrs.Find(arg->s());
         if (attr == nullptr) {","Fix heap OOB read/write due to incorrect indexing.

PiperOrigin-RevId: 408578046
Change-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa","vuln-fix: Correct loop index to prevent out-of-bounds access in type specialization

The loop incorrectly used a fixed index instead of the loop variable, causing repeated access to the same element and potential out-of-bounds or unintended modifications.
This could lead to memory corruption or undefined behavior, risking crashes or exploitable conditions in type inference logic.
The fix replaces the fixed index with the loop variable to correctly iterate over all elements, ensuring safe and intended access.

Weakness: CWE-125
Severity: Medium
CVSS: 6.1",0.17647058823529413,"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('ifc9ffea49e5890f55fcb2c27568611052c3ddcfa', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('incorrectly used', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('exploitable', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixed', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
10,CWE-125,GHSA-83rh-hx5x-q9p5,"@@ -101,10 +101,14 @@ bool HdrDecoder::readData(Mat& _img)
 
 bool HdrDecoder::checkSignature( const String& signature ) const
 {
-    if(signature.size() >= m_signature.size() &&
-       (!memcmp(signature.c_str(), m_signature.c_str(), m_signature.size()) ||
-       !memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())))
-       return true;
+    if (signature.size() >= m_signature.size() &&
+        0 == memcmp(signature.c_str(), m_signature.c_str(), m_signature.size())
+    )
+        return true;
+    if (signature.size() >= m_signature_alt.size() &&
+        0 == memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())
+    )
+        return true;
     return false;
 }",imgproc(hdr): fix bounds check in HdrDecoder::checkSignature(),"vuln-fix: Correct signature check logic to prevent false positives

The original signature check combined two memcmp calls with a logical OR inside a single condition, causing incorrect evaluation and potential false positive matches.
This flaw could allow malformed or malicious data to be accepted as valid, risking processing of untrusted input and possible downstream security issues.
The fix separates the two memcmp checks into distinct if statements, ensuring each signature is properly and independently verified.

Weakness: CWE-285
Severity: Medium
CVSS: 5.9",0.058823529411764705,"[('fix', 'ACTION', ''), ('bounds check', 'SECWORD', ''), ('hdrdecoder::checksignature', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('signature', 'secword', ''), ('prevent', 'ACTION', ''), ('signature', 'secword', ''), ('flaw', 'FLAW', ''), ('malicious', 'secword', ''), ('untrusted', 'secword', ''), ('security', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('signature', 'secword', ''), ('verified', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-285', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
11,CWE-125,GHSA-r4c4-5fpq-56wg,"@@ -1050,6 +1050,13 @@ class BoostedTreesSparseCalculateBestFeatureSplitOp : public OpKernel {
       const int32_t feature_dim = stats_summary_indices(idx, 1);
       const int32_t bucket_id = stats_summary_indices(idx, 2);
       const int32_t stat_dim = stats_summary_indices(idx, 3);
+      OP_REQUIRES(context, stat_dim < stats_dims,
+                  errors::InvalidArgument(
+                      ""Stat dim, the sum of logits dim and hessian dim in ""
+                      ""stats_summary_indices, cannot be greater than stats ""
+                      ""dims, the last value in stats_summary_shape, which was "",
+                      stats_dims, "". At index ("", idx,
+                      "", 4), stats_summary_indices contains value "", stat_dim));
       std::pair<FeatureMapIterator, bool> const& f_insert_result = f_map.insert(
           FeatureMapIterator::value_type(feature_dim, BucketMap()));
       auto& b_map = f_insert_result.first->second;","In tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit, limit stat_dim in stats_summary_indices to under stats_dims in stats_summary_shape

PiperOrigin-RevId: 387171191
Change-Id: I83ca8a75b22aa78c037e8b98779da6cced16bfaa","vuln-fix: Validate stat_dim bounds in feature split calculation

The code did not verify that stat_dim values from stats_summary_indices were within the valid range of stats_dims, risking out-of-bounds access.
This could lead to memory corruption or crashes when processing malformed or malicious input tensors, causing denial-of-service or undefined behavior.
The fix adds an OP_REQUIRES check to ensure stat_dim is less than stats_dims, preventing invalid memory indexing.

Weakness: CWE-125  
Severity: High  
CVSS: 7.8",0.11764705882352941,"[('tf.raw_ops.boostedtreessparsecalculatebestfeaturesplit', 'URL', ''), ('change', 'ACTION', ''), ('i83ca8a75b22aa78c037e8b98779da6cced16bfaa', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('denial-of-service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
12,CWE-125,GHSA-23hm-7w47-xw72,"@@ -94,6 +94,11 @@ class DequantizeOp : public OpKernel {
     const Tensor& input_min_tensor = ctx->input(1);
     const Tensor& input_max_tensor = ctx->input(2);
 
+    OP_REQUIRES(
+        ctx, axis_ < input.dims(),
+        errors::InvalidArgument(""Axis must be less than input dimension("",
+                                input.dims(), ""), got "", axis_));
+
     int num_slices = 1;
     if (axis_ > -1) {
       num_slices = input.dim_size(axis_);","Fix out of bound access in DequantizeOp by adding check for axis < input dimension

PiperOrigin-RevId: 411214268
Change-Id: I3249d2a69ddc82f182c589a3a5bbfb71543f4b29","vuln-fix: Validate axis parameter against input tensor dimensions

The Dequantize operation did not verify that the axis parameter was within the valid range of input tensor dimensions.
This could lead to out-of-bounds access, causing crashes or memory corruption exploitable for denial of service.
The fix adds a check ensuring the axis is less than the input tensor’s dimension count, returning an error if invalid.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('out of bound access', 'secword', ''), ('adding', 'ACTION', ''), ('change', 'ACTION', ''), ('i3249d2a69ddc82f182c589a3a5bbfb71543f4b29', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,CWE-125,GHSA-c45w-2wxr-pp53,"@@ -98,6 +98,18 @@ class DequantizeOp : public OpKernel {
     if (axis_ > -1) {
       num_slices = input.dim_size(axis_);
     }
+    OP_REQUIRES(ctx, input_min_tensor.NumElements() == num_slices,
+                errors::InvalidArgument(
+                    ""input_min_tensor must have as many elements as input on ""
+                    ""the dequantization axis ("",
+                    axis_, ""), got "", input_min_tensor.NumElements(),
+                    "", expected "", num_slices));
+    OP_REQUIRES(ctx, input_max_tensor.NumElements() == num_slices,
+                errors::InvalidArgument(
+                    ""input_max_tensor must have as many elements as input on ""
+                    ""the dequantization axis ("",
+                    axis_, ""), got "", input_max_tensor.NumElements(),
+                    "", expected "", num_slices));
 
     Tensor* output = nullptr;
     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));","Fix heap OOB read in dequantize op.

Also fixes SEGV in same op

PiperOrigin-RevId: 372437896
Change-Id: I135e94d360c2a1ce374c10f7e0fed1af603dbc02","vuln-fix: Validate input_min and input_max tensor element counts

The dequantization operation did not verify that input_min_tensor and input_max_tensor have element counts matching the input tensor's size along the dequantization axis.
This could lead to out-of-bounds memory access or incorrect computations, potentially causing crashes or data corruption.
The fix adds checks using OP_REQUIRES to ensure these tensors have the expected number of elements before proceeding.

Weakness: CWE-125  
Severity: Medium  
CVSS: 5.9",0.23529411764705882,"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('change', 'ACTION', ''), ('i135e94d360c2a1ce374c10f7e0fed1af603dbc02', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
14,"CWE-787', 'CWE-125",GHSA-cvpc-8phh-8f45,"@@ -601,7 +601,8 @@ TfLiteStatus SimpleStatefulOp::Prepare(TfLiteContext* context,
   OpData* data = reinterpret_cast<OpData*>(node->user_data);
 
   // Make sure that the input is in uint8_t with at least 1 data entry.
-  const TfLiteTensor* input = tflite::GetInput(context, node, kInputTensor);
+  const TfLiteTensor* input;
+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
   if (input->type != kTfLiteUInt8) return kTfLiteError;
   if (NumElements(input->dims) == 0) return kTfLiteError;
 
@@ -622,7 +623,8 @@ TfLiteStatus SimpleStatefulOp::Invoke(TfLiteContext* context,
   OpData* data = reinterpret_cast<OpData*>(node->user_data);
   *data->invoke_count += 1;
 
-  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
+  const TfLiteTensor* input;
+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
   const uint8_t* input_data = GetTensorData<uint8_t>(input);
   int size = NumElements(input->dims);
 
@@ -641,9 +643,13 @@ TfLiteStatus SimpleStatefulOp::Invoke(TfLiteContext* context,
     }
   }
 
-  TfLiteTensor* median = GetOutput(context, node, kMedianTensor);
+  TfLiteTensor* median;
+  TF_LITE_ENSURE_OK(context,
+                    GetOutputSafe(context, node, kMedianTensor, &median));
   uint8_t* median_data = GetTensorData<uint8_t>(median);
-  TfLiteTensor* invoke_count = GetOutput(context, node, kInvokeCount);
+  TfLiteTensor* invoke_count;
+  TF_LITE_ENSURE_OK(context,
+                    GetOutputSafe(context, node, kInvokeCount, &invoke_count));
   int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);
 
   median_data[0] = sorting_buffer[size / 2];
@@ -681,11 +687,14 @@ TfLiteStatus MockCustom::Prepare(TfLiteContext* context, TfLiteNode* node) {
 }
 
 TfLiteStatus MockCustom::Invoke(TfLiteContext* context, TfLiteNode* node) {
-  const TfLiteTensor* input = tflite::GetInput(context, node, 0);
+  const TfLiteTensor* input;
+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));
   const int32_t* input_data = input->data.i32;
-  const TfLiteTensor* weight = tflite::GetInput(context, node, 1);
+  const TfLiteTensor* weight;
+  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &weight));
   const uint8_t* weight_data = weight->data.uint8;
-  TfLiteTensor* output = GetOutput(context, node, 0);
+  TfLiteTensor* output;
+  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));
   int32_t* output_data = output->data.i32;
   output_data[0] =
       0;  // Catch output tensor sharing memory with an input tensor","[tflite]: Insert `nullptr` checks when obtaining tensors.

As part of ongoing refactoring, `tflite::GetInput`, `tflite::GetOutput`, `tflite::GetTemporary` and `tflite::GetIntermediates` will return `nullptr` in some cases. Hence, we insert the `nullptr` checks on all usages.

We also insert `nullptr` checks on usages of `tflite::GetVariableInput` and `tflite::GetOptionalInputTensor` but only in the cases where there is no obvious check that `nullptr` is acceptable (that is, we only insert the check for the output of these two functions if the tensor is accessed as if it is always not `nullptr`).

PiperOrigin-RevId: 332518902
Change-Id: I92eb164a6101ac3cca66090061a9b56a97288236","vuln-fix: Use safe tensor accessors to prevent invalid memory access

The code accessed input and output tensors directly without verifying their validity, risking null pointer dereferences or out-of-bounds memory reads.
This could lead to crashes or undefined behavior exploitable for denial of service or information disclosure.
The patch replaces direct tensor retrieval calls with safe accessor functions that check and enforce successful tensor retrieval before use.

Weakness: CWE-823
Severity: High
CVSS: 7.8",0.11764705882352941,"[('nullptr', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('change', 'ACTION', ''), ('i92eb164a6101ac3cca66090061a9b56a97288236', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('safe', 'secword', ''), ('prevent', 'ACTION', ''), ('invalid memory access', 'secword', ''), ('null pointer dereferences', 'SECWORD', ''), ('out-of-bounds', 'SECWORD', ''), ('exploitable', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('disclosure', 'secword', ''), ('patch', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-823', 'CWEID', ''), ('high', 'SEVERITY', '')]"
15,CWE-125,GHSA-545v-42p7-98fq,"@@ -1014,6 +1014,9 @@ struct LaunchMaxPoolingGradWithArgmax<CPUDevice, T> {
         const int input_start = start * input_size_per_batch;
         const int input_end = limit * input_size_per_batch;
         for (int64 index = input_start; index < input_end; index++) {
+          if (index >= argmax.NumElements()) {
+            break;
+          }
           int64 grad_out_index = argmax_flat(index);
           if (!include_batch_in_index) {
             const int64 cur_batch = index / input_size_per_batch;","Fix heap buffer overflow

PiperOrigin-RevId: 372132844
Change-Id: Idef9895efaf145f2b1c23d31983601ec980cd5e4","vuln-fix: Prevent out-of-bounds access in max pooling gradient

The max pooling gradient computation did not check if the index exceeded the size of the argmax tensor, risking out-of-bounds memory access.
This could lead to memory corruption, crashes, or potential information disclosure due to reading invalid memory locations.
The fix adds a boundary check to break the loop if the index is beyond the number of elements in the argmax tensor.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('buffer overflow', 'secword', ''), ('change', 'ACTION', ''), ('idef9895efaf145f2b1c23d31983601ec980cd5e4', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('out-of-bounds', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('boundary check', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
16,CWE-125,GHSA-4fg4-p75j-w5xj,"@@ -173,20 +173,50 @@ class QuantizedBatchNormOp : public OpKernel {
 
   void Compute(OpKernelContext* context) override {
     const Tensor& input = context->input(0);
-    const float input_min = context->input(1).flat<float>()(0);
-    const float input_max = context->input(2).flat<float>()(0);
+    const auto& input_min_tensor = context->input(1);
+    OP_REQUIRES(context, input_min_tensor.NumElements() == 1,
+                errors::InvalidArgument(""input_min must have 1 element""));
+    const float input_min = input_min_tensor.flat<float>()(0);
+    const auto& input_max_tensor = context->input(2);
+    OP_REQUIRES(context, input_max_tensor.NumElements() == 1,
+                errors::InvalidArgument(""input_max must have 1 element""));
+    const float input_max = input_max_tensor.flat<float>()(0);
     const Tensor& mean = context->input(3);
-    const float mean_min = context->input(4).flat<float>()(0);
-    const float mean_max = context->input(5).flat<float>()(0);
+    const auto& mean_min_tensor = context->input(4);
+    OP_REQUIRES(context, mean_min_tensor.NumElements() == 1,
+                errors::InvalidArgument(""mean_min must have 1 element""));
+    const float mean_min = mean_min_tensor.flat<float>()(0);
+    const auto& mean_max_tensor = context->input(5);
+    OP_REQUIRES(context, mean_max_tensor.NumElements() == 1,
+                errors::InvalidArgument(""mean_max must have 1 element""));
+    const float mean_max = mean_max_tensor.flat<float>()(0);
     const Tensor& var = context->input(6);
-    const float var_min = context->input(7).flat<float>()(0);
-    const float var_max = context->input(8).flat<float>()(0);
+    const auto& var_min_tensor = context->input(7);
+    OP_REQUIRES(context, var_min_tensor.NumElements() == 1,
+                errors::InvalidArgument(""var_min must have 1 element""));
+    const float var_min = var_min_tensor.flat<float>()(0);
+    const auto& var_max_tensor = context->input(8);
+    OP_REQUIRES(context, var_max_tensor.NumElements() == 1,
+                errors::InvalidArgument(""var_max must have 1 element""));
+    const float var_max = var_max_tensor.flat<float>()(0);
     const Tensor& beta = context->input(9);
-    const float beta_min = context->input(10).flat<float>()(0);
-    const float beta_max = context->input(11).flat<float>()(0);
+    const auto& beta_min_tensor = context->input(10);
+    OP_REQUIRES(context, beta_min_tensor.NumElements() == 1,
+                errors::InvalidArgument(""beta_min must have 1 element""));
+    const float beta_min = beta_min_tensor.flat<float>()(0);
+    const auto& beta_max_tensor = context->input(11);
+    OP_REQUIRES(context, beta_max_tensor.NumElements() == 1,
+                errors::InvalidArgument(""beta_max must have 1 element""));
+    const float beta_max = beta_max_tensor.flat<float>()(0);
     const Tensor& gamma = context->input(12);
-    const float gamma_min = context->input(13).flat<float>()(0);
-    const float gamma_max = context->input(14).flat<float>()(0);
+    const auto& gamma_min_tensor = context->input(13);
+    OP_REQUIRES(context, gamma_min_tensor.NumElements() == 1,
+                errors::InvalidArgument(""gamma_min must have 1 element""));
+    const float gamma_min = gamma_min_tensor.flat<float>()(0);
+    const auto& gamma_max_tensor = context->input(14);
+    OP_REQUIRES(context, gamma_max_tensor.NumElements() == 1,
+                errors::InvalidArgument(""gamma_max must have 1 element""));
+    const float gamma_max = gamma_max_tensor.flat<float>()(0);
 
     OP_REQUIRES(context, input.dims() == 4,
                 errors::InvalidArgument(""input must be 4-dimensional"",
@@ -203,6 +233,33 @@ class QuantizedBatchNormOp : public OpKernel {
     OP_REQUIRES(context, gamma.dims() == 1,
                 errors::InvalidArgument(""gamma must be 1-dimensional"",
                                         gamma.shape().DebugString()));
+    OP_REQUIRES(context, mean.NumElements() > 1,
+                errors::InvalidArgument(""Must have at least a mean value"",
+                                        gamma.shape().DebugString()));
+    OP_REQUIRES(context, mean.NumElements() > 1,
+                errors::InvalidArgument(""Must have at least a mean value""));
+    const auto last_dim = input.shape().dims() - 1;
+    OP_REQUIRES(context,
+                mean.shape().dim_size(0) == input.shape().dim_size(last_dim),
+                errors::InvalidArgument(""Must provide as many means as the ""
+                                        ""last dimension of the input tensor: "",
+                                        mean.shape().DebugString(), "" vs. "",
+                                        input.shape().DebugString()));
+    OP_REQUIRES(
+        context, mean.shape().dim_size(0) == var.shape().dim_size(0),
+        errors::InvalidArgument(
+            ""Mean and variance tensors must have the same shape: "",
+            mean.shape().DebugString(), "" vs. "", var.shape().DebugString()));
+    OP_REQUIRES(
+        context, mean.shape().dim_size(0) == beta.shape().dim_size(0),
+        errors::InvalidArgument(
+            ""Mean and beta tensors must have the same shape: "",
+            mean.shape().DebugString(), "" vs. "", beta.shape().DebugString()));
+    OP_REQUIRES(
+        context, mean.shape().dim_size(0) == gamma.shape().dim_size(0),
+        errors::InvalidArgument(
+            ""Mean and gamma tensors must have the same shape: "",
+            mean.shape().DebugString(), "" vs. "", gamma.shape().DebugString()));
 
     Tensor* output = nullptr;
     OP_REQUIRES_OK(context,","Add missing validation in `QuantizedBatchNormWithGlobalNormalization`

PiperOrigin-RevId: 370123451
Change-Id: Id234d6dab1ec21230bb8e503dba30f899af87f33","vuln-fix: Validate tensor element counts and shape consistency in QuantizedBatchNormOp

The QuantizedBatchNormOp did not verify that scalar input tensors contained exactly one element or that parameter tensors had consistent shapes matching the input dimensions.  
This lack of validation could lead to out-of-bounds memory access or logic errors, potentially causing crashes or incorrect computations exploitable by crafted inputs.  
The fix adds checks to ensure scalar tensors have one element and that mean, variance, beta, and gamma tensors share matching shapes aligned with the input tensor’s last dimension.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('change', 'ACTION', ''), ('id234d6dab1ec21230bb8e503dba30f899af87f33', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('logic errors', 'secword', ''), ('exploitable', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
17,"CWE-908', 'CWE-125",GHSA-q263-fvxm-m5mw,"@@ -44,6 +44,7 @@ limitations under the License.
 #include ""tensorflow/core/lib/gtl/inlined_vector.h""
 #include ""tensorflow/core/lib/strings/scanner.h""
 #include ""tensorflow/core/lib/strings/str_util.h""
+#include ""tensorflow/core/platform/errors.h""
 #include ""tensorflow/core/platform/logging.h""
 #include ""tensorflow/core/platform/macros.h""
 #include ""tensorflow/core/public/version.h""
@@ -1425,6 +1426,17 @@ void GraphConstructor::Undo() {
 
 Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,
                                   int input_index) {
+  if (output_index >= src->num_outputs()) {
+    return errors::InvalidArgument(
+        ""Output "", output_index, "" of node "", src->name(),
+        "" does not exist. Node only has "", src->num_outputs(), "" outputs."");
+  }
+  if (input_index >= dst->num_inputs()) {
+    return errors::InvalidArgument(
+        ""Input "", input_index, "" of node "", dst->name(),
+        "" does not exist. Node only has "", dst->num_inputs(), "" inputs."");
+  }
+
   DataType src_out = src->output_type(output_index);
   DataType dst_in = dst->input_type(input_index);
   if (!TypesCompatible(dst_in, src_out)) {","Prevent unitialized memory access in `GraphConstructor::MakeEdge`

The `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.

PiperOrigin-RevId: 346343288
Change-Id: I2127da27c2023d27f26efd39afa6c853385cab6f","vuln-fix: Validate node input and output indices in MakeEdge

The MakeEdge function did not verify that specified input and output indices were within valid ranges for the source and destination nodes.
This allowed out-of-bounds access to node inputs or outputs, potentially causing crashes or memory corruption during graph construction.
The patch adds explicit checks that input and output indices do not exceed the node’s declared number of inputs or outputs, returning errors if invalid.

Weakness: CWE-125
Severity: High
CVSS: 7.8",0.17647058823529413,"[('prevent', 'ACTION', ''), ('out of bounds', 'SECWORD', ''), ('malicious', 'secword', ''), ('manipulate', 'ACTION', ''), ('information leakage', 'SECWORD', ''), ('exploits', 'SECWORD', ''), ('change', 'ACTION', ''), ('i2127da27c2023d27f26efd39afa6c853385cab6f', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('errors', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
18,CWE-125,GHSA-9c8h-vvrj-w2p8,"@@ -58,15 +58,21 @@ class RaggedGatherOpBase : public OpKernel {
 
   void Compute(OpKernelContext* context) override {
     // Get the input Tensors.
+
     OpInputList params_nested_splits_in;
     OP_REQUIRES_OK(context, context->input_list(""params_nested_splits"",
                                                 &params_nested_splits_in));
+    OP_REQUIRES(
+        context, params_nested_splits_in.size() > 0,
+        errors::InvalidArgument(""params_nested_splits must be non empty""));
+
     const Tensor& params_dense_values_in =
         context->input(params_nested_splits_in.size());
     const Tensor& indices_in =
         context->input(params_nested_splits_in.size() + 1);
 
-    DCHECK_GT(params_nested_splits_in.size(), 0);  // Enforced by REGISTER_OP.
+    OP_REQUIRES(context, params_nested_splits_in[0].dims() > 0,
+                errors::InvalidArgument(""Split tensors must not be scalars""));
     SPLITS_TYPE num_params = params_nested_splits_in[0].dim_size(0) - 1;
     OP_REQUIRES_OK(context, ValidateIndices(indices_in, num_params));","Fix heap OOB in `tf.raw_ops.RaggedGather`

PiperOrigin-RevId: 388355464
Change-Id: If14d96231d1cd7aad7c4d1c22c1bab1576b75717","vuln-fix: Validate input tensor list and splits dimensions

The code did not verify that the input list of nested splits was non-empty or that its first tensor was not a scalar, risking invalid memory access.
This could lead to out-of-bounds reads or crashes when processing malformed or crafted inputs, causing denial-of-service conditions.
The fix adds explicit checks to ensure the nested splits list is non-empty and that the first split tensor has at least one dimension.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('tf.raw_ops.raggedgather', 'URL', ''), ('change', 'ACTION', ''), ('if14d96231d1cd7aad7c4d1c22c1bab1576b75717', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('invalid memory access', 'SECWORD', ''), ('out-of-bounds reads', 'SECWORD', ''), ('denial-of-service', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
19,CWE-125,GHSA-c545-c4f9-rf6v,"@@ -37,6 +37,7 @@ TfLiteStatus ExpandTensorDim(TfLiteContext* context, const TfLiteTensor& input,
     axis = input_dims.size + 1 + axis;
   }
   TF_LITE_ENSURE(context, axis <= input_dims.size);
+  TF_LITE_ENSURE(context, axis >= 0);
 
   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);
   for (int i = 0; i < output_dims->size; ++i) {","Prevent an OOB read in `expand_dims.cc`

The for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).

PiperOrigin-RevId: 387200206
Change-Id: I162f4feba12d547c3a4340833ae682016a2ebfab","vuln-fix: Validate axis parameter lower bound in tensor expansion

The ExpandTensorDim function did not verify that the axis parameter was non-negative before use.
This allowed negative axis values to bypass checks, potentially causing out-of-bounds memory access and crashes.
The patch adds a lower bound check ensuring axis is greater than or equal to zero before proceeding.

Weakness: CWE-125  
Severity: Medium  
CVSS: 5.9",0.23529411764705882,"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('expand_dims.cc', 'URL', ''), ('input_dims.size', 'URL', ''), ('change', 'ACTION', ''), ('i162f4feba12d547c3a4340833ae682016a2ebfab', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('bypass', 'secword', ''), ('out-of-bounds', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('bound check', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
20,CWE-125,GHSA-3h8m-483j-7xxm,"@@ -46,6 +46,10 @@ class RequantizationRangeOp : public OpKernel {
 
   void Compute(OpKernelContext* ctx) override {
     const Tensor& input = ctx->input(0);
+    OP_REQUIRES(ctx, ctx->input(1).NumElements() > 0,
+                errors::InvalidArgument(""Input min must not be empty.""));
+    OP_REQUIRES(ctx, ctx->input(2).NumElements() > 0,
+                errors::InvalidArgument(""Input max must not be empty.""));
     const float input_min_float = ctx->input(1).flat<float>()(0);
     const float input_max_float = ctx->input(2).flat<float>()(0);
     Tensor* output_min = nullptr;","Fix out of bound read in requantization_range_op.cc

PiperOrigin-RevId: 372129031
Change-Id: Ie684ab98a3840c5186ead3eafffc0e0ed0e8030d","vuln-fix: Validate non-empty inputs for min and max tensors

The computation did not verify that the input tensors for minimum and maximum values contained elements before accessing them.
This could lead to out-of-bounds memory access, causing crashes or potential information disclosure.
The fix adds checks to ensure these input tensors are not empty before dereferencing their first element.

Weakness: CWE-125  
Severity: Medium  
CVSS: 5.0",0.11764705882352941,"[('fix', 'ACTION', ''), ('out of bound read', 'secword', ''), ('requantization_range_op.cc', 'URL', ''), ('change', 'ACTION', ''), ('ie684ab98a3840c5186ead3eafffc0e0ed0e8030d', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
21,CWE-125,GHSA-cvgx-3v3q-m36c,"@@ -2559,6 +2559,9 @@ Status QuantizeV2Shape(InferenceContext* c) {
   if (!s.ok() && s.code() != error::NOT_FOUND) {
     return s;
   }
+  if (axis < -1) {
+    return errors::InvalidArgument(""axis should be at least -1, got "", axis);
+  }
   const int minmax_rank = (axis == -1) ? 0 : 1;
   TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));
   ShapeHandle minmax;","Prevent OOB access in QuantizeV2 shape inference

PiperOrigin-RevId: 400309614
Change-Id: I31412c71b05b4f21b677f7fa715a61499cbee39d","vuln-fix: Validate axis parameter in QuantizeV2Shape function

The QuantizeV2Shape function did not check if the axis parameter was less than -1, allowing invalid negative values to propagate unchecked.
This could lead to unexpected behavior or crashes due to out-of-bounds indexing or invalid shape inference during model compilation.
The patch adds a validation step that returns an error if axis is less than -1, preventing invalid inputs from causing downstream errors.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('i31412c71b05b4f21b677f7fa715a61499cbee39d', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('out-of-bounds', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('preventing', 'ACTION', ''), ('errors', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
22,CWE-125,GHSA-7fvx-3jfc-2cpc,"@@ -955,11 +955,12 @@ class ResourceScatterUpdateOp : public OpKernel {
                         params->dim_size(0), "")""));
       } else {
         int64_t num_updates = updates.NumElements();
-        OP_REQUIRES(c, num_updates % N == 0,
-                    errors::InvalidArgument(
-                        ""shape of indices ("", indices.shape().DebugString(),
-                        "") is not compatible with the shape of updates ("",
-                        updates.shape().DebugString(), "")""));
+        OP_REQUIRES(
+            c, TensorShapeUtils::StartsWith(updates.shape(), indices.shape()),
+            errors::InvalidArgument(
+                ""The shape of indices ("", indices.shape().DebugString(),
+                "") must be a prefix of the shape of updates ("",
+                updates.shape().DebugString(), "")""));
         auto updates_flat = updates.shaped<T, 2>({N, num_updates / N});
 
         functor::ScatterFunctor<Device, T, Index, op> functor;","Fix heap OOB due to dimension mismatch in `ResourceScatterUpdate`

PiperOrigin-RevId: 388292801
Change-Id: Id9bd7244d98d41b1517d4771850b32782c0cc949","vuln-fix: Enforce shape prefix constraint in scatter update

The scatter update operation did not verify that the indices shape is a prefix of the updates shape, allowing inconsistent tensor shapes to pass unchecked.
This could lead to out-of-bounds memory access or corrupted data during tensor updates, causing crashes or data integrity issues.
The fix replaces the modulo check with a strict prefix shape validation using TensorShapeUtils::StartsWith to ensure shape compatibility.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('id9bd7244d98d41b1517d4771850b32782c0cc949', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('update', 'ACTION', ''), ('update', 'ACTION', ''), ('verify', 'ACTION', ''), ('updates', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('updates', 'ACTION', ''), ('integrity', 'secword', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
23,CWE-125,GHSA-59q2-x2qc-4c97,"@@ -533,6 +533,17 @@ class UnicodeEncodeOp : public OpKernel {
     const Tensor& input_splits = context->input(1);
     const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();
 
+    // Operation will treat first argument in input_splits as if it were zero
+    // regardless of its actual value since splits should begin with zero and
+    // end with the length of the input values vector.
+    OP_REQUIRES(
+        context, input_splits_flat(0) == 0,
+        errors::InvalidArgument(""First value in input_splits must be zero.""));
+    OP_REQUIRES(context,
+                input_splits_flat(input_splits_flat.size() - 1) ==
+                    input_tensor_flat.size(),
+                errors::InvalidArgument(""Last value in input_splits must be ""
+                                        ""equal to length of input_tensor.""));
     // Since we limit to a 2-D input (flat_values of rank 1 and a single splits
     // tensor), our output dimension will be 1 with it's size equal to the
     // number of splits (outer dimension or ragged tensor).
@@ -548,6 +559,14 @@ class UnicodeEncodeOp : public OpKernel {
     for (int i = 1; i < input_splits_flat.size(); ++i) {
       icu::UnicodeString unicode_string;
       icu::UnicodeStringAppendable appendable_unicode_string(unicode_string);
+      OP_REQUIRES(
+          context, input_splits_flat(i - 1) <= input_splits_flat(i),
+          errors::InvalidArgument(
+              ""Values in input_splits must be equal or in ascending order.""));
+      OP_REQUIRES(
+          context, input_splits_flat(i) <= input_tensor_flat.size(),
+          errors::InvalidArgument(""Values in input_splits must be less than or ""
+                                  ""equal to input_tensor length.""));
       for (; idx < input_splits_flat(i); ++idx) {
         int32 code_point = input_tensor_flat(idx);
         // Check for invalid code point","Fix heap buffer overflow in tf.raw_ops.UnicodeEncode.

PiperOrigin-RevId: 371717714
Change-Id: If33443b28f158e58078f1268f6b92f2728d219e0","vuln-fix: Validate input_splits boundaries and ordering in UnicodeEncodeOp

The UnicodeEncodeOp did not verify that input_splits started at zero, ended at the input length, or were non-decreasing, allowing malformed inputs to cause out-of-bounds access.
This could lead to memory corruption, crashes, or potential information disclosure by reading beyond tensor boundaries.
The fix adds explicit checks to ensure input_splits begin with zero, end with the input tensor size, and are sorted in ascending order within valid bounds.

Weakness: CWE-125
Severity: High
CVSS: 7.8",0.11764705882352941,"[('fix', 'ACTION', ''), ('buffer overflow', 'secword', ''), ('tf.raw_ops.unicodeencode', 'URL', ''), ('change', 'ACTION', ''), ('if33443b28f158e58078f1268f6b92f2728d219e0', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('unicodeencodeop', 'SECWORD', ''), ('unicodeencodeop', 'SECWORD', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
24,CWE-125,GHSA-jwf9-w5xm-f437,"@@ -123,6 +123,17 @@ TfLiteStatus GatherNdString(const TfLiteTensor* params,
 template <typename IndicesT>
 TfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,
                           const TfLiteTensor* indices, TfLiteTensor* output) {
+  bool indices_has_only_positive_elements = true;
+  const auto* indices_values = GetTensorData<IndicesT>(indices);
+  const size_t num_indices = indices->bytes / sizeof(IndicesT);
+  for (size_t i = 0; i < num_indices; i++) {
+    if (indices_values[i] < 0) {
+      indices_has_only_positive_elements = false;
+      break;
+    }
+  }
+  TF_LITE_ENSURE(context, indices_has_only_positive_elements);
+
   switch (params->type) {
     case kTfLiteFloat32:
       return GatherNd<float, IndicesT>(params, indices, output);","Prevent heap OOB read in TFLite's `gather_nd.cc`.

Passing negative indices is illegal but there was a missing check so that resulted in OOB accesses.

PiperOrigin-RevId: 387208551
Change-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd","vuln-fix: Validate indices to prevent negative values in GatherNd

The GatherNd evaluation function did not check for negative values in the indices tensor, allowing out-of-bounds memory access during tensor gathering operations.
This could lead to memory corruption, crashes, or information disclosure by reading invalid tensor locations.
The patch adds a validation loop that ensures all indices are non-negative before proceeding with the gather operation.

Weakness: CWE-125
Severity: High
CVSS: 7.8",0.23529411764705882,"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('gather_nd.cc', 'URL', ''), ('missing check', 'secword', ''), ('oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('i6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('memory corruption', 'SECWORD', ''), ('disclosure', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensures', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('high', 'SEVERITY', '')]"
25,"CWE-787', 'CWE-125",GHSA-cvpc-8phh-8f45,"@@ -75,12 +75,7 @@ TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
 
 const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
-  const bool use_tensor = index < node->inputs->size &&
-                          node->inputs->data[index] != kTfLiteOptionalTensor;
-  if (use_tensor) {
-    return GetMutableInput(context, node, index);
-  }
-  return nullptr;
+  return GetInput(context, node, index);
 }
 
 // Per-axis","[tflite] Make `GetOptionalInputTensor` the same as `GetInput`.

With the previous change, there is no more need for two separate APIs. We would deprecate `GetOptionalInputTensor` in the future.

PiperOrigin-RevId: 332513386
Change-Id: Id7110271c25ebd6126ad8c82a493e37e0e0756b3","vuln-fix: Correct optional input tensor retrieval logic

The function incorrectly checked for optional tensor presence, potentially returning mutable tensors when inputs were absent or optional.
This could lead to invalid memory access or unintended modification of tensors, causing crashes or data corruption.
The fix replaces the conditional logic with a direct call to GetInput, ensuring consistent and safe tensor retrieval.

Weakness: CWE-823
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('change', 'ACTION', ''), ('change', 'ACTION', ''), ('id7110271c25ebd6126ad8c82a493e37e0e0756b3', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('incorrectly checked', 'SECWORD', ''), ('invalid memory access', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-823', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
26,"CWE-787', 'CWE-125",GHSA-8gv3-57p6-g35r,"@@ -313,6 +313,12 @@ class RaggedTensorToTensorBaseOp : public OpKernel {
             output_index_multiplier, output_size, result);
         return tensorflow::Status::OK();
       case RowPartitionType::ROW_SPLITS:
+        if (row_partition_tensor.size() - 1 > parent_output_index.size()) {
+          return errors::InvalidArgument(
+              ""Row partition size is greater than output size: "",
+              row_partition_tensor.size() - 1, "" > "",
+              parent_output_index.size());
+        }
         CalculateOutputIndexRowSplit(
             context, row_partition_tensor, parent_output_index,
             output_index_multiplier, output_size, result);","Fix heap-buffer-overflow issue with `tf.raw_ops.RaggedTensorToTensor`.

PiperOrigin-RevId: 371986929
Change-Id: I79ab962a22c5867f36f7f45b780a1ac881b1dbdd","vuln-fix: Validate row partition size against output size

The code did not verify that the row partition tensor size was consistent with the parent output index size before processing.
This could lead to out-of-bounds access or logic errors, potentially causing crashes or memory corruption.
The fix adds a check that returns an error if the row partition size exceeds the output size, preventing invalid memory operations.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('tf.raw_ops.raggedtensortotensor', 'URL', ''), ('change', 'ACTION', ''), ('i79ab962a22c5867f36f7f45b780a1ac881b1dbdd', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'secword', ''), ('logic errors', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('error', 'FLAW', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
27,CWE-125,GHSA-2r8p-fg3c-wcj4,"@@ -660,6 +660,11 @@ class ResourceGatherOp : public OpKernel {
     OP_REQUIRES(
         c, TensorShapeUtils::IsVectorOrHigher(params.shape()),
         errors::InvalidArgument(""params must be at least 1 dimensional""));
+    OP_REQUIRES(
+        c, params.shape().dims() >= batch_dims_,
+        errors::InvalidArgument(""params must have at least "", batch_dims_,
+                                "" (batch_dims) dimensions but it has shape "",
+                                params.shape().DebugString()));
 
     // Check that we have enough index space
     const int64_t N = indices.NumElements();","Prevent heap oob access in `resource_variable_ops.cc`

PiperOrigin-RevId: 387936433
Change-Id: I9e71ddaa8dbd51ec6afbf163a6b3b591f193b4f6","vuln-fix: Enforce minimum batch_dims in ResourceGatherOp input

The ResourceGatherOp did not verify that the input tensor's dimensions met the minimum batch_dims requirement, allowing malformed inputs to bypass shape constraints.
This could lead to out-of-bounds memory access or incorrect tensor operations, causing crashes or data corruption.
The fix adds a check ensuring the input tensor's rank is at least batch_dims_, rejecting invalid shapes early.

Weakness: CWE-125
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('resource_variable_ops.cc', 'URL', ''), ('change', 'ACTION', ''), ('i9e71ddaa8dbd51ec6afbf163a6b3b591f193b4f6', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('verify', 'ACTION', ''), ('bypass', 'SECWORD', ''), ('out-of-bounds', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
28,CWE-125,GHSA-h4pc-gx2w-f2xv,"@@ -96,6 +96,8 @@ TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,
     }
   }
 
+  TF_LITE_ENSURE(context, axis_value >= 0);
+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
   const int input_size = SizeOfDimension(input, axis_value);
 
   if (minus_one_index != -1) {","Prevent array OOB read/write

PiperOrigin-RevId: 371026165
Change-Id: I26ac6372c87246e03c7eb8c94e84c84d86054b36","vuln-fix: Validate axis parameter range in tensor resizing

The tensor resizing function did not verify that the axis parameter was within valid bounds before use.
This allowed out-of-bounds access to tensor dimensions, potentially causing memory corruption or crashes.
The patch adds explicit checks to ensure the axis value is non-negative and less than the number of input dimensions.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.17647058823529413,"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('change', 'ACTION', ''), ('i26ac6372c87246e03c7eb8c94e84c84d86054b36', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'SECWORD', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
29,CWE-125,GHSA-vqw6-72r7-fgw7,"@@ -162,6 +162,9 @@ class BaseMatrixTriangularSolveOp : public OpKernel {
     const Tensor& in1 = ctx->input(1);
 
     ValidateInputTensors(ctx, in0, in1);
+    if (!ctx->status().ok()) {
+      return;
+    }
 
     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());
     OP_REQUIRES(
@@ -230,13 +233,22 @@ class MatrixTriangularSolveOp
  private:
   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,
                             const Tensor& in1) override {
+    const auto in0_num_dims = in0.dims();
     OP_REQUIRES(
-        ctx, in0.dims() >= 2,
-        errors::InvalidArgument(""In[0] ndims must be >= 2: "", in0.dims()));
+        ctx, in0_num_dims >= 2,
+        errors::InvalidArgument(""In[0] ndims must be >= 2: "", in0_num_dims));
 
+    const auto in1_num_dims = in1.dims();
     OP_REQUIRES(
-        ctx, in1.dims() >= 2,
-        errors::InvalidArgument(""In[0] ndims must be >= 2: "", in1.dims()));
+        ctx, in1_num_dims >= 2,
+        errors::InvalidArgument(""In[1] ndims must be >= 2: "", in1_num_dims));
+
+    const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);
+    const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);
+    OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,
+                errors::InvalidArgument(
+                    ""In[0] matrices in the last dimensions must be square ("",
+                    in0_last_dim, "" =/= "", in0_prev_dim, "")""));
   }
 };","Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.

PiperOrigin-RevId: 370282444
Change-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5","vuln-fix: Validate tensor dimensions and abort on invalid input

The operation did not properly abort execution when input tensor validation failed, allowing further processing with invalid tensor shapes.
This could lead to undefined behavior, crashes, or memory corruption due to assumptions about tensor dimensionality and shape being violated.
The fix adds an early return if validation fails and enforces that input tensors have at least two dimensions with the first input’s last two dimensions forming a square matrix.

Weakness: CWE-834
Severity: High
CVSS: 7.8",0.11764705882352941,"[('validate', 'secword', ''), ('ensure', 'ACTION', ''), ('change', 'ACTION', ''), ('iaed61a0b0727cc42c830658b72eb69f785f48dc5', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('memory corruption', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-834', 'CWEID', ''), ('high', 'SEVERITY', '')]"
30,"CWE-400', 'CWE-125",GHSA-8g7p-74h8-hg48,"@@ -204,7 +204,7 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {
   var headers = Object.assign({}, proxy.headers);
   if (proxy.auth) {
     headers['Proxy-Authorization'] =
-      'Basic ' + new Buffer(proxy.auth).toString('base64');
+      'Basic ' + Buffer.from(proxy.auth).toString('base64');
   }
 
   // the Host header should only include the port","Use `Buffer.from()`

`new Buffer()` is deprecated and unsafe.","vuln-fix: Replace deprecated Buffer constructor to prevent security risks

The code used the deprecated Buffer constructor which can lead to uninitialized memory exposure or unexpected behavior when handling proxy authentication credentials.
This posed a security risk by potentially leaking sensitive data or causing crashes due to improper buffer allocation.
The patch replaces the deprecated 'new Buffer()' with the safer 'Buffer.from()' method to securely encode proxy authentication strings.

Weakness: CWE-676
Severity: Medium
CVSS: 5.9",0.23529411764705882,"[('buffer.from', 'URL', ''), ('unsafe', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('security', 'SECWORD', ''), ('uninitialized memory', 'SECWORD', ''), ('authentication', 'secword', ''), ('security', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('patch', 'ACTION', ''), (""safer 'buffer.from"", 'SECWORD', ''), ('securely', 'SECWORD', ''), ('encode', 'secword', ''), ('authentication', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-676', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
31,"CWE-787', 'CWE-125",GHSA-hpv4-7p9c-mvfr,"@@ -271,6 +271,18 @@ class FractionalAvgPoolGradOp : public OpKernel {
     const int64_t in_rows = orig_input_tensor_shape_flat(1);
     const int64_t in_cols = orig_input_tensor_shape_flat(2);
     const int64_t in_depth = orig_input_tensor_shape_flat(3);
+    OP_REQUIRES(
+        context, in_batch != 0,
+        errors::InvalidArgument(""Batch dimension of input must not be 0""));
+    OP_REQUIRES(
+        context, in_rows != 0,
+        errors::InvalidArgument(""Rows dimension of input must not be 0""));
+    OP_REQUIRES(
+        context, in_cols != 0,
+        errors::InvalidArgument(""Columns dimension of input must not be 0""));
+    OP_REQUIRES(
+        context, in_depth != 0,
+        errors::InvalidArgument(""Depth dimension of input must not be 0""));
 
     constexpr int tensor_in_and_out_dims = 4;
     // Transform orig_input_tensor_shape into TensorShape","Validate dimensions of input tensor in `FractionalAvgPoolGrad`

PiperOrigin-RevId: 388286227
Change-Id: Ieb7566155e92acc8993a2212c76deacadc0edc8a","vuln-fix: Validate input tensor dimensions in FractionalAvgPoolGradOp

The operation did not verify that input tensor dimensions were non-zero, allowing zero-sized dimensions to propagate through computations.
This could lead to undefined behavior, crashes, or memory corruption due to invalid tensor shapes during gradient calculations.
The fix adds explicit checks that batch, rows, columns, and depth dimensions are non-zero, returning errors if any dimension is zero.

Weakness: CWE-835
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('validate', 'secword', ''), ('change', 'ACTION', ''), ('ieb7566155e92acc8993a2212c76deacadc0edc8a', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('verify', 'ACTION', ''), ('memory corruption', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('errors', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-835', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
32,CWE-125,GHSA-qpw2-xchm-655q,"@@ -28,7 +28,7 @@ StringStream.prototype.write = function(data) {
     return false
   }
   if (this.fromEncoding) {
-    if (Buffer.isBuffer(data)) data = data.toString()
+    if (Buffer.isBuffer(data) || typeof data === 'number') data = data.toString()
     data = new Buffer(data, this.fromEncoding)
   }
   var string = this.decoder.write(data)","Merge pull request #9 from mhart/fix-buffer-constructor-vuln

Ensure data is not a number in Buffer constructor","vuln-fix: Prevent improper number input conversion in StringStream write

The write method did not handle numeric inputs correctly, converting numbers to strings without validation, which could cause unexpected buffer creation behavior.
This flaw could lead to memory corruption or crashes if numeric values were interpreted as buffer encodings or data, risking denial of service.
The fix adds a type check to convert numbers to strings before buffer creation, ensuring safe and consistent input handling.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('#9', 'ISSUE', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('flaw', 'FLAW', ''), ('memory corruption', 'SECWORD', ''), ('encodings', 'SECWORD', ''), ('denial of service', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
33,CWE-125,GHSA-6gmv-pjp9-p8w8,"@@ -1653,11 +1653,21 @@ REGISTER_OP(""ReverseSequence"")
         return errors::InvalidArgument(
             ""batch_dim must be < input rank: "", batch_dim, "" vs. "", input_rank);
       }
+
       if (seq_dim >= input_rank) {
         return errors::InvalidArgument(
             ""seq_dim must be < input rank: "", seq_dim, "" vs. "", input_rank);
       }
 
+      // To prevent out of bound access when calling c->Dim(input, batch_dim),
+      // batch_dim range [-1 * input rank, input rank) is allowed. However,
+      // the op implementation has a stricter bound for batch_dim requiring >= 0
+      // value. Thus, perform strict check here.
+      if (batch_dim < 0) {
+        return errors::InvalidArgument(""batch_dim must be >=0, got "",
+                                       batch_dim);
+      }
+
       DimensionHandle batch_dim_dim = c->Dim(input, batch_dim);
       TF_RETURN_IF_ERROR(
           c->Merge(batch_dim_dim, c->Dim(seq_lens_shape, 0), &batch_dim_dim));","Fix out of bound error in ReverseSequence Op shape function

PiperOrigin-RevId: 411896080
Change-Id: I7e59a38e2f960886edf2b6c54ed5a84e86a9b193","vuln-fix: Enforce non-negative batch_dim in ReverseSequence op

The ReverseSequence operation allowed negative batch_dim values, which could lead to out-of-bounds tensor dimension access during execution.
This posed a risk of memory corruption or crashes due to invalid indexing in tensor operations.
The fix adds a strict check to reject negative batch_dim values, ensuring only valid non-negative indices are accepted.

Weakness: CWE-125  
Severity: Medium  
CVSS: 6.1",0.11764705882352941,"[('fix', 'ACTION', ''), ('out of bound', 'SECWORD', ''), ('error', 'FLAW', ''), ('change', 'ACTION', ''), ('i7e59a38e2f960886edf2b6c54ed5a84e86a9b193', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('memory corruption', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-125', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
0,CWE-89,GHSA-h2fw-93qx-vrcq,"@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {
     public $required_param = 'field';
     public $optional_params = array();
 
+    /* @var array The default profile fields allowed to be used as award criteria.
+     *
+     * Note: This is used instead of user_get_default_fields(), because it is not possible to
+     * determine which fields the user can modify.
+     */
+    protected $allowed_default_fields = [
+        'firstname',
+        'lastname',
+        'email',
+        'address',
+        'phone1',
+        'phone2',
+        'department',
+        'institution',
+        'description',
+        'picture',
+        'city',
+        'country',
+    ];
+
     /**
      * Add appropriate new criteria options to the form
      *
@@ -50,10 +70,7 @@ public function get_options(&$mform) {
         $none = true;
         $existing = array();
         $missing = array();
-
-        // Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.
-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',
-                         'department', 'institution', 'description', 'picture', 'city', 'country');
+        $dfields = $this->allowed_default_fields;
 
         // Get custom fields.
         $cfields = array_filter(profile_get_custom_fields(), function($field) {
@@ -230,8 +247,8 @@ public function get_completed_criteria_sql() {
                 $join .= "" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} "";
                 $params[""fieldid{$idx}""] = $param['field'];
                 $whereparts[] = ""uid{$idx}.id IS NOT NULL"";
-            } else {
-                // This is a field from {user} table.
+            } else if (in_array($param['field'], $this->allowed_default_fields)) {
+                // This is a valid field from {user} table.
                 if ($param['field'] == 'picture') {
                     // The picture field is numeric and requires special handling.
                     $whereparts[] = ""u.{$param['field']} != 0"";",MDL-74074 badges: Ensure profile criteria exists before completion check,"vuln-fix: Restrict allowed profile fields in award criteria

The award criteria profile previously allowed any user table field without restriction, enabling attackers to exploit unauthorized or sensitive fields.
This posed a risk of information disclosure or privilege escalation by referencing fields users should not access or modify.
The fix restricts allowed fields to a predefined safe list, validating fields against this whitelist before use in SQL queries.

Weakness: CWE-639
Severity: Medium
CVSS: 6.1",0.058823529411764705,"[('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('attackers', 'SECWORD', ''), ('exploit', 'secword', ''), ('sensitive', 'SECWORD', ''), ('disclosure', 'secword', ''), ('privilege escalation', 'secword', ''), ('fix', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-639', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
1,CWE-89,GHSA-rr8m-29g8-8cgc,"@@ -501,7 +501,7 @@ public static function getComments(array $ids): array
             'SELECT *
              FROM blog_comments AS i
              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',
-            $ids
+            array_map('intval', $ids)
         );
     }",Prevent sql injection through the ids of the blog comments,"vuln-fix: Sanitize comment ID inputs in getComments query

The getComments function directly used user-supplied IDs in a SQL query without sanitization.
This allowed attackers to inject malicious SQL through crafted ID values, risking unauthorized data access or modification.
The fix applies array_map('intval') to ensure all IDs are integers before inclusion in the query.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.058823529411764705,"[('prevent', 'ACTION', ''), ('sql injection', 'SECWORD', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitization', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
2,CWE-89,GHSA-gvmf-wcx6-p974,"@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)
                 if ($quote === false) {
                     $this->orderKey[] = $o;
                 } elseif ($this->isValidOrderKey($o)) {
-                    $this->orderKey[] = '`' . $o . '`';
+                    $this->orderKey[] = $this->quoteIdentifier($o);
                 }
             }
         }
@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)
         if ($groupBy) {
             $this->groupBy = $groupBy;
 
-            if ($qoute && strpos($groupBy, '`') !== 0) {
-                $this->groupBy = '`' . $this->groupBy . '`';
+          if ($qoute) {
+                $quotedParts = [];
+                $parts = explode("","", trim($groupBy, '`'));
+                foreach($parts as $part) {
+                    $quotedParts[] = $this->quoteIdentifier(trim($part));
+                }
+
+                $this->groupBy = implode("", "", $quotedParts);
             }
         }
 
@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)
         return $this;
     }
 
+    public function quoteIdentifier(string $value): string
+    {
+        $db = Db::get();
+
+        return $db->quoteIdentifier($value);
+    }
+
     /**
      * @param mixed $value
      * @param int|null $type","[Security] SQL Injection in Data Hub GraphQL (#12444)

* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)

* Update lib/Model/Listing/AbstractListing.php

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>

* Update lib/Model/Listing/AbstractListing.php

Co-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>
Co-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>","vuln-fix: Properly quote SQL identifiers to prevent injection

The code previously concatenated raw input into SQL identifiers with manual backticks, allowing crafted input to break out and inject SQL code.
This posed a risk of SQL injection attacks by manipulating query structure through improperly escaped identifiers.
The fix replaces manual quoting with a dedicated quoteIdentifier method that uses the database driver's safe quoting mechanism for identifiers.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.35294117647058826,"[('security', 'SECWORD', ''), ('sql injection', 'secword', ''), ('#12444', 'ISSUE', ''), ('security', 'SECWORD', ''), ('sql injection', 'secword', ''), ('update', 'ACTION', ''), ('abstractlisting.php', 'URL', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('89011527+mcop1@users.noreply.github.com', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('brusch@users.noreply.github.com', 'EMAIL', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('manual', 'DETECTION', ''), ('inject', 'secword', ''), ('sql injection', 'secword', ''), ('attacks', 'FLAW', ''), ('manipulating', 'ACTION', ''), ('escaped', 'SECWORD', ''), ('fix', 'ACTION', ''), ('manual', 'DETECTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,"CWE-89', 'CWE-95",GHSA-hrgx-p36p-89q4,"@@ -25,6 +25,14 @@
  */
 class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom
 {
+    /** @var PhpEncryption */
+    private $phpEncryption;
+
+    public function __construct()
+    {
+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);
+    }
+
     /**
      * fetch cached content and its modification time from data source.
      *
@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)
     {
         $row = Db::getInstance()->getRow('SELECT modified, content FROM ' . _DB_PREFIX_ . 'smarty_cache WHERE id_smarty_cache = ""' . pSQL($id, true) . '""');
         if ($row) {
-            $content = $row['content'];
+            $content = $this->phpEncryption->decrypt($row['content']);
             $mtime = strtotime($row['modified']);
         } else {
             $content = null;
@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)
 			""' . pSQL($id, true) . '"",
 			""' . pSQL(sha1($name)) . '"",
 			""' . pSQL($cache_id, true) . '"",
-			""' . pSQL($content, true) . '""
+			""' . $this->phpEncryption->encrypt($content) . '""
 		)');
 
         return (bool) Db::getInstance()->Affected_Rows();","Merge pull request from GHSA-hrgx-p36p-89q4

Crypt/decrypt smarty cache in DB","vuln-fix: Encrypt cached content in Smarty MySQL cache resource

The cached content was stored in the database as plaintext, exposing sensitive data to unauthorized access if the database was compromised.
This posed a risk of data leakage and unauthorized disclosure of cached information, potentially aiding attackers in further exploitation.
The patch introduces encryption and decryption of cached content using a PhpEncryption instance initialized with a secret key.

Weakness: CWE-311
Severity: High
CVSS: 7.8",0.23529411764705882,"[('ghsa', 'VULNID', 'GHSA'), ('crypt', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('encrypt', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('disclosure', 'secword', ''), ('attackers', 'FLAW', ''), ('exploitation', 'SECWORD', ''), ('patch', 'ACTION', ''), ('initialized', 'SECWORD', ''), ('key', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-311', 'CWEID', ''), ('high', 'SEVERITY', '')]"
4,CWE-89,GHSA-7hmh-8gwv-mfvq,"@@ -71,6 +71,7 @@
 import org.apache.kylin.metadata.project.RealizationEntry;
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.metadata.realization.RealizationType;
+import org.apache.kylin.metrics.MetricsManager;
 import org.apache.kylin.metrics.property.QueryCubePropertyEnum;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.exception.BadRequestException;
@@ -79,6 +80,7 @@
 import org.apache.kylin.rest.msg.Message;
 import org.apache.kylin.rest.msg.MsgPicker;
 import org.apache.kylin.rest.request.MetricsRequest;
+import org.apache.kylin.rest.request.PrepareSqlRequest;
 import org.apache.kylin.rest.response.CubeInstanceResponse;
 import org.apache.kylin.rest.response.CuboidTreeResponse;
 import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;
@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE
 
         hr = new HBaseResponse();
         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);
-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {
+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE
+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {
             try {
                 logger.debug(""Loading HTable info "" + cubeName + "", "" + tableName);
 
@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept
             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());
             for (CubeSegment seg : toRemoveSegs) {
                 toDropHTables.add(seg.getStorageLocationIdentifier());
-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));
+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),
+                        seg.getLastBuildJobID()));
             }
 
             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);
@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {
     }
 
     //Don't merge the job that has been discarded manually before
-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {
+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,
+            SegmentRange offsets) {
         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);
         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());
-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));
+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,
+                EnumSet.of(ExecutableState.DISCARDED));
         for (CubingJob cubingJob : jobInstanceList) {
             if (cubingJob.getSegmentName().equals(segmentName)) {
                 logger.debug(""Merge job {} has been discarded before, will not merge."", segmentName);
@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube
         return false;
     }
 
-
     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {
         Message msg = MsgPicker.getMsg();
 
@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {
         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), ""cube"");
     }
 
-    private class HTableInfoSyncListener extends Broadcaster.Listener {
-        @Override
-        public void onClearAll(Broadcaster broadcaster) throws IOException {
-            htableInfoCache.invalidateAll();
-        }
-
-        @Override
-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)
-                throws IOException {
-            String cubeName = cacheKey;
-            String keyPrefix = cubeName + ""/"";
-            for (String k : htableInfoCache.asMap().keySet()) {
-                if (k.startsWith(keyPrefix))
-                    htableInfoCache.invalidate(k);
-            }
-        }
-    }
-
     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {
         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));
     }
@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu
         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L
                 : queryMatchMap.get(cuboidId);
         boolean ifExist = currentCuboidSet.contains(cuboidId);
-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);
+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);
 
         NodeInfo node = new NodeInfo();
         node.setId(cuboidId);
@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidColumn + "", sum("" + hitMeasure + "")"" //
                 + "" from "" + table//
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""'"" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" group by "" + cuboidColumn;
-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);
         return formatQueryCount(orgHitFrequency);
     }
 
@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidSource + "", "" + cuboidTgt + "", avg("" + aggCount + ""), avg("" + returnCount + "")""//
                 + "" from "" + table //
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""' "" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" group by "" + cuboidSource + "", "" + cuboidTgt;
-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);
         return formatRollingUpStats(orgRollingUpCount);
     }
 
@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidSource + "", sum("" + hitMeasure + "")"" //
                 + "" from "" + table //
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""'"" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" and "" + QueryCubePropertyEnum.IF_MATCH.toString() + "" = true"" //
                 + "" group by "" + cuboidSource;
-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);
         return formatQueryCount(orgMatchHitFrequency);
     }
 
+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {
+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();
+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);
+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];
+        params[0] = new PrepareSqlRequest.StateParam();
+        params[0].setClassName(""java.lang.String"");
+        params[0].setValue(cubeName);
+        sqlRequest.setParams(params);
+        sqlRequest.setSql(sql);
+
+        return queryService.doQueryWithCache(sqlRequest, false).getResults();
+    }
+
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN
             + "" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')"")
     public void migrateCube(CubeInstance cube, String projectName) {
@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {
             throw new InternalErrorException(""Failed to perform one-click migrating"", e);
         }
     }
+
+    private class HTableInfoSyncListener extends Broadcaster.Listener {
+        @Override
+        public void onClearAll(Broadcaster broadcaster) throws IOException {
+            htableInfoCache.invalidateAll();
+        }
+
+        @Override
+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)
+                throws IOException {
+            String cubeName = cacheKey;
+            String keyPrefix = cubeName + ""/"";
+            for (String k : htableInfoCache.asMap().keySet()) {
+                if (k.startsWith(keyPrefix))
+                    htableInfoCache.invalidate(k);
+            }
+        }
+    }
 }",Fix sql injection issue,"vuln-fix: Use prepared statements to prevent SQL injection in metrics queries

The code previously constructed SQL queries by directly embedding user-controlled cube names into query strings without parameterization.
This allowed attackers to perform SQL injection attacks by injecting malicious input, potentially compromising the metrics database.
The fix replaces string concatenation with prepared statements using parameter binding to safely handle user input in SQL queries.

Weakness: CWE-89
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', ''), ('sql injection', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sql injection', 'secword', ''), ('attackers', 'FLAW', ''), ('sql injection', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,CWE-89,GHSA-q9p4-qfc8-fvpp,"@@ -500,6 +500,11 @@ protected function typeMap($value, $type)
 
 	protected function columnQuote($string)
 	{
+		if (!preg_match('/^[a-zA-Z0-9]+(\.?[a-zA-Z0-9]+)?$/i', $string))
+		{
+			throw new InvalidArgumentException(""Incorrect column name \""$string\"""");
+		}
+
 		if (strpos($string, '.') !== false)
 		{
 			return '""' . $this->prefix . str_replace('.', '"".""', $string) . '""';",[fix] Fix columnQuote for security issue reported by Snyk,"vuln-fix: Validate column names to prevent injection

The columnQuote function did not validate input column names, allowing crafted strings to inject malicious SQL fragments.
This posed a risk of SQL injection attacks by manipulating query structure through untrusted column identifiers.
The fix adds a strict regex check to ensure column names contain only alphanumeric characters and optional single dots, rejecting invalid inputs.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.058823529411764705,"[('fix', 'ACTION', ''), ('fix', 'ACTION', ''), ('\x08security', 'SECWORD', ''), ('issue', 'FLAW', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('validate', 'secword', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('sql injection', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('manipulating', 'ACTION', ''), ('untrusted', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
6,"CWE-89', 'CWE-79",GHSA-x92h-wmg2-6hp7,"@@ -1346,22 +1346,37 @@ public function setMethod($method)
      */
     public function getMethod()
     {
-        if (null === $this->method) {
-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
-
-            if ('POST' === $this->method) {
-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
-                    $this->method = strtoupper($method);
-                } elseif (self::$httpMethodParameterOverride) {
-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
-                    if (\is_string($method)) {
-                        $this->method = strtoupper($method);
-                    }
-                }
-            }
+        if (null !== $this->method) {
+            return $this->method;
+        }
+
+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
+
+        if ('POST' !== $this->method) {
+            return $this->method;
+        }
+
+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');
+
+        if (!$method && self::$httpMethodParameterOverride) {
+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
+        }
+
+        if (!\is_string($method)) {
+            return $this->method;
+        }
+
+        $method = strtoupper($method);
+
+        if (\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
+            return $this->method = $method;
+        }
+
+        if (!preg_match('/^[A-Z]++$/D', $method)) {
+            throw new SuspiciousOperationException(sprintf('Invalid method override ""%s"".', $method));
         }
 
-        return $this->method;
+        return $this->method = $method;
     }
 
     /**",[HttpFoundation] reject invalid method override,"vuln-fix: Validate HTTP method override to prevent invalid methods

The method override logic accepted any string as an HTTP method without strict validation, allowing injection of invalid or malicious method names.
This could lead to unexpected behavior or security issues by processing unsupported or crafted HTTP methods in the application.
The fix enforces a whitelist of allowed HTTP methods and rejects invalid overrides with an exception, ensuring only valid methods are accepted.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('malicious', 'secword', ''), ('security', 'SECWORD', ''), ('issues', 'FLAW', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
7,CWE-89,GHSA-9cq5-xgg4-x477,"@@ -76,7 +76,7 @@ public function addUser(){
         $this->checkAdmin();
         $username = I(""post.username"");
         $password = I(""post.password"");
-        $uid = I(""post.uid"");
+        $uid = I(""post.uid/d"");
         $name = I(""post.name"");
         if(!$username){
             $this->sendError(10101,'用户名不允许为空');",bug,"vuln-fix: Enforce integer casting on user ID input

The addUser function accepted the user ID parameter without type enforcement, allowing non-integer input to be processed.
This could lead to injection or logic errors if unexpected string or special characters were used, potentially compromising data integrity.
The patch applies integer casting to the uid parameter using the framework’s ""/d"" filter to ensure only valid integers are accepted.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('bug', 'FLAW', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('integer casting', 'SECWORD', ''), ('injection', 'secword', ''), ('logic errors', 'secword', ''), ('integrity', 'secword', ''), ('patch', 'ACTION', ''), ('integer casting', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
8,CWE-89,GHSA-2598-2f59-rmhq,"@@ -2198,7 +2198,8 @@ var QueryGenerator = {
             path[path.length - 1] = $tmp[0];
           }
 
-          $baseKey = self.quoteIdentifier(key)+'#>>\'{'+path.join(', ')+'}\'';
+          var pathKey = self.escape('{' + path.join(', ') + '}');
+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;
 
           if (options.prefix) {
             if (options.prefix instanceof Utils.literal) {",fix(postgres): json path key quoting (#11088),"vuln-fix: Correct SQL path escaping in JSON query generation

The JSON path in SQL queries was constructed using string concatenation without proper escaping, risking malformed queries or injection.
This could allow attackers to manipulate query structure or inject malicious payloads via crafted path inputs.
The fix replaces manual string assembly with a dedicated escape function to safely encode JSON path components.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fix(postgres', 'ACTION', ''), ('key', 'secword', ''), ('#11088', 'ISSUE', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('manipulate', 'ACTION', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('fix', 'ACTION', ''), ('manual', 'DETECTION', ''), ('escape', 'secword', ''), ('encode', 'secword', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
9,CWE-89,GHSA-x2jc-pwfj-h9p3,"@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {
     }
   }
 
-  if (dialect == ""postgres"") {
+  if (dialect === ""postgres"" || dialect === ""sqlite"") {
     // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS
+    // http://stackoverflow.com/q/603572/130598
     val = val.replace(/'/g, ""''"");
   } else {
     val = val.replace(/[\0\n\r\b\t\\\'\""\x1a]/g, function(s) {","Fix string escaping for sqlite

SQLite was defaulting to the MySQL backslash-escaped style, but it uses
postgres-style escaping. This is a SQL-injection vulnerability, and
shouldn't be taken lightly (although SQLite is mostly for testing).","vuln-fix: Extend string escaping to SQLite dialect

The string escaping function only handled PostgreSQL dialect, leaving SQLite inputs improperly escaped.
This allowed attackers to inject malicious SQL via unescaped single quotes, leading to potential SQL injection vulnerabilities.
The patch adds SQLite to the dialect check, applying the same escaping logic to prevent injection attacks.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.23529411764705882,"[('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('escaped', 'SECWORD', ''), ('escaping', 'secword', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'secword', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('escaping', 'secword', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('unescaped', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('injection', 'secword', ''), ('attacks', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
10,CWE-89,GHSA-2v7p-f4qm-r5pc,"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr
                         } elseif ($filterField == 'id') {
                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);
                         } else {
+                            $filterField = $db->quoteIdentifier('o_' . $filterField);
                             if ($filter['type'] == 'date' && $operator == '=') {
                                 //if the equal operator is chosen with the date type, condition has to be changed
                                 $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition
-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);
+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);
                             } else {
-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);
+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);
                             }
                         }
                     }
@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)
 
                 if ($filterField == 'fullpath') {
                     $filterField = 'CONCAT(path,filename)';
+                }else {
+                    $filterField = $db->quoteIdentifier($filterField);
                 }
 
                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {",Fixed column quoting in GridHelperService,"vuln-fix: Quote SQL identifiers in filter conditions to prevent injection

The code constructed SQL filter conditions by concatenating raw field names without proper quoting, allowing attackers to inject malicious SQL via crafted filter parameters.
This posed a risk of SQL injection, potentially leading to unauthorized data access or manipulation through manipulated query filters.
The fix applies database-specific identifier quoting to all filter field names before embedding them in SQL conditions, ensuring safe query construction.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fixed', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('sql injection', 'secword', ''), ('manipulated', 'ACTION', ''), ('fix', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
11,CWE-89,GHSA-2jx3-5j9v-prpp,"@@ -35,6 +35,7 @@
 use Product;
 use Shop;
 use Symfony\Component\Translation\TranslatorInterface;
+use Validate;
 use WishList;
 
 /**
@@ -167,7 +168,10 @@ private function getProductsOrCount(
 
         if ('products' === $type) {
             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);
-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());
+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();
+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {
+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);
+            }
             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());
             $products = $this->db->executeS($querySearch);","Merge pull request from GHSA-2jx3-5j9v-prpp

Validate order by and order way","vuln-fix: Validate sorting parameters in product query

The product query method did not validate sorting parameters before using them in SQL ORDER BY clauses.
This allowed attackers to inject arbitrary SQL fragments, potentially leading to SQL injection vulnerabilities.
The patch adds validation checks using Validate::isOrderBy and Validate::isOrderWay to ensure only safe sorting values are used.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.23529411764705882,"[('ghsa-2jx3', 'VULNID', 'GHSA'), ('validate', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('validate', 'secword', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('sql injection', 'SECWORD', ''), ('vulnerabilities', 'secword', ''), ('patch', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
12,"CWE-89', 'CWE-287",GHSA-79mg-4w23-4fqc,"@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])
             return $query;
         }
 
-        if (!array_intersect(array_keys($search), $this->searchable)) {
+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));
+        if (! $allowed_search) {
             return $query;
         }
 
-        return $query->where($search);
+        return $query->where($allowed_search);
     }
 }",Ensure only allowed searchable columns are used in DB Query,"vuln-fix: Restrict query filters to allowed searchable fields

The original scopeSearch method applied all user-supplied filters directly to the query without restricting keys to allowed searchable fields.
This allowed attackers to filter queries on arbitrary columns, potentially exposing sensitive data or causing unintended query behavior.
The fix filters the input array to include only keys present in the searchable whitelist before applying them to the query builder.

Weakness: CWE-200
Severity: Medium
CVSS: 6.1",0.058823529411764705,"[('ensure', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('keys', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('keys', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-200', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
13,CWE-89,GHSA-v3mr-gp7j-pw5w,"@@ -407,9 +407,9 @@ protected function prepareWhere()
 
         // Filter those that have already been chosen
         if ('checkbox' === $this->fieldType && \is_array($varData) && !empty($varData)) {
-            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', $varData).')';
+            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', array_map('intval', $varData)).')';
         } elseif ('radio' === $this->fieldType && '' !== $varData) {
-            $this->arrWhereProcedure[] = ""{$this->foreignTable}.id!='$varData'"";
+            $this->arrWhereProcedure[] = $this->foreignTable.'.id!='.(int) $varData;
         }
 
         // If custom WHERE is set, add it to the statement",Fixed SQL query for current field value,"vuln-fix: Sanitize input values in SQL WHERE clause construction

The code previously embedded raw user input directly into SQL WHERE clauses without proper sanitization.
This allowed attackers to inject malicious SQL fragments, potentially leading to SQL injection vulnerabilities.
The fix applies integer casting and array_map with intval to ensure all input values are safely converted before inclusion in queries.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.11764705882352941,"[('fixed', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitization', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('sql injection', 'secword', ''), ('vulnerabilities', 'secword', ''), ('fix', 'ACTION', ''), ('integer casting', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
14,CWE-89,GHSA-vj9x-w7ch-f46p,"@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)
         }
 
         if ($storeId) {
-            $conditionParts[] = '(storeId = ' . $storeId . ')';
+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';
         }
 
         if ($request->get('filter')) {",[Data Object] Classification Store quote filtering,"vuln-fix: Sanitize storeId input in properties query condition

The code concatenated the storeId parameter directly into an SQL condition without sanitization.
This allowed attackers to inject malicious SQL fragments, risking unauthorized data access or manipulation.
The fix applies the database quote method to properly escape the storeId value before inclusion in the query.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('sanitize', 'secword', ''), ('sanitization', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('inject', 'secword', ''), ('malicious', 'secword', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
15,CWE-89,GHSA-6gm7-j668-w6h9,"@@ -119,7 +119,7 @@ public function listAction(Request $request)
                         $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);
                         $conditionFilters[] = $condition;
                     } else {
-                        $conditionFilters[] = $field . $operator . "" '"" . $value . ""' "";
+                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);
                     }
                 }
             }",[Recyclebin] Quote condition filter,"vuln-fix: Use parameterized queries to prevent SQL injection

The original code concatenated raw user input directly into SQL query strings without proper escaping.
This allowed attackers to inject malicious SQL code, potentially compromising database integrity or exposing sensitive data.
The fix replaces string concatenation with the database quote method to safely escape user inputs before inclusion in queries.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('sql injection', 'secword', ''), ('escaping', 'secword', ''), ('attackers', 'SECWORD', ''), ('inject', 'secword', ''), ('malicious', 'SECWORD', ''), ('integrity', 'secword', ''), ('sensitive data', 'secword', ''), ('fix', 'ACTION', ''), ('escape', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
16,CWE-89,GHSA-864j-6qpp-cmrr,"@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})
     end
 
     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)
-      spans = ""#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND ""
+      spans = ""#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND ""
       # handle box that spans 180 longitude
       if sw_lng.to_f > ne_lng.to_f
-        spans + ""(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR "" +
-        ""#{lon_attr} BETWEEN -180 AND #{ne_lng})""
+        spans + ""(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR "" +
+        ""#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})""
       else
-        spans + ""#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}""
+        spans + ""#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}""
       end
     end",Sanitize lat/lon for SQL query.,"vuln-fix: Cast bounding box coordinates to float in SQL query

The method constructing SQL conditions for geographic bounding boxes interpolated user inputs directly as strings without type enforcement.
This allowed injection of malicious SQL fragments via crafted latitude or longitude parameters, risking SQL injection attacks.
The fix enforces floating-point casting on all coordinate inputs before embedding them into the query string, preventing injection.

Weakness: CWE-89
Severity: High
CVSS: 7.5",0.11764705882352941,"[('sanitize', 'secword', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('injection', 'SECWORD', ''), ('malicious', 'secword', ''), ('sql injection', 'secword', ''), ('attacks', 'FLAW', ''), ('fix', 'ACTION', ''), ('point casting', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('injection', 'secword', ''), ('weakness', 'secword', ''), ('cwe-89', 'CWEID', ''), ('high', 'SEVERITY', '')]"
0,"CWE-918', 'CWE-20",GHSA-2h63-qp69-fwvw,"@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {
         Document doc = null;
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         try {
-            javax.xml.parsers.DocumentBuilder parser = factory
-                    .newDocumentBuilder();
+            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();
             parser.setErrorHandler(new ErrorHandler() {
                 public void error(SAXParseException exception)
                         throws SAXException {","BATIK-1284: Dont load DTDs in NodePickerPanel

git-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68","vuln-fix: Disable external entity processing in XML parser

The XML parser allowed processing of external entities and DTDs, enabling XML External Entity (XXE) attacks.
This posed a security risk by allowing attackers to read local files, perform SSRF, or cause denial of service via crafted XML input.
The fix disables external-general-entities, external-parameter-entities, and external DTD loading features on the DocumentBuilderFactory before parsing.

Weakness: CWE-611
Severity: High
CVSS: 7.5",0.17647058823529413,"[('https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1878396', 'URL', ''), ('ffa450edef68', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('external entity', 'SECWORD', ''), ('xml external entity', 'SECWORD', ''), ('xxe', 'secword', ''), ('attacks', 'FLAW', ''), ('security', 'secword', ''), ('attackers', 'SECWORD', ''), ('ssrf', 'secword', ''), ('denial of service', 'secword', ''), ('fix', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-611', 'CWEID', ''), ('high', 'SEVERITY', '')]"
1,"CWE-400', 'CWE-918",GHSA-7q4h-pj78-j7vg,"@@ -21,9 +21,11 @@
 import java.security.cert.X509Certificate;
 import java.util.List;
 import java.util.Map;
+import java.util.logging.Logger;
 
 import javax.ws.rs.core.MultivaluedMap;
 
+import org.apache.cxf.common.logging.LogUtils;
 import org.apache.cxf.helpers.CastUtils;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.apache.cxf.jaxrs.impl.MetadataMap;
@@ -42,23 +44,31 @@
 import org.apache.cxf.rt.security.crypto.CryptoUtils;
 
 public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {
+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);
     private static final String REQUEST_URI_CONTENT_TYPE = ""application/oauth-authz-req+jwt"";
     private static final String REQUEST_PARAM = ""request"";
     private static final String REQUEST_URI_PARAM = ""request_uri"";
+
     private boolean verifyWithClientCertificates;
     private String issuer;
     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();
+
     @Override
     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,
                                                   UserSubject endUser,
                                                   Client client) {
         String requestToken = params.getFirst(REQUEST_PARAM);
+        String requestUri = params.getFirst(REQUEST_URI_PARAM);
+
         if (requestToken == null) {
-            String requestUri = params.getFirst(REQUEST_URI_PARAM);
             if (isRequestUriValid(client, requestUri)) {
                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);
             }
+        } else if (requestUri != null) {
+            LOG.warning(""It is not valid to specify both a request and request_uri value"");
+            throw new SecurityException();
         }
+
         if (requestToken != null) {
             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());
             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);",Make sure both a request + request_uri can't be specified,"vuln-fix: Prevent simultaneous use of request and request_uri parameters

The filter allowed both 'request' and 'request_uri' parameters to be specified simultaneously, which could cause ambiguous or conflicting authorization processing.
This ambiguity could be exploited to bypass security checks or cause unexpected behavior in JWT request handling.
The fix adds a check that logs a warning and throws a SecurityException if both parameters are present, enforcing mutual exclusivity.

Weakness: CWE-285
Severity: Medium
CVSS: 5.9",0.058823529411764705,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('exploited', 'SECWORD', ''), ('bypass', 'secword', ''), ('security', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('warning', 'FLAW', ''), ('securityexception', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-285', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
2,CWE-918,GHSA-4wpp-w5r4-7v5v,"@@ -10,6 +10,7 @@ import (
 	""io/ioutil""
 	""log""
 	""net/http""
+	""path/filepath""
 	""strconv""
 	""strings""
 
@@ -279,7 +280,7 @@ func (s *HTTPServer) handlePostSeq(w http.ResponseWriter, r *http.Request) {
 
 func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {
 	u := s.charmUserFromRequest(w, r)
-	path := pattern.Path(r.Context())
+	path := filepath.Clean(pattern.Path(r.Context()))
 	ms := r.URL.Query().Get(""mode"")
 	m, err := strconv.ParseUint(ms, 10, 32)
 	if err != nil {
@@ -316,7 +317,7 @@ func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {
 
 func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {
 	u := s.charmUserFromRequest(w, r)
-	path := pattern.Path(r.Context())
+	path := filepath.Clean(pattern.Path(r.Context()))
 	f, err := s.cfg.FileStore.Get(u.CharmID, path)
 	if errors.Is(err, fs.ErrNotExist) {
 		s.renderCustomError(w, ""file not found"", http.StatusNotFound)
@@ -353,7 +354,7 @@ func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {
 
 func (s *HTTPServer) handleDeleteFile(w http.ResponseWriter, r *http.Request) {
 	u := s.charmUserFromRequest(w, r)
-	path := pattern.Path(r.Context())
+	path := filepath.Clean(pattern.Path(r.Context()))
 	err := s.cfg.FileStore.Delete(u.CharmID, path)
 	if err != nil {
 		log.Printf(""cannot delete file: %s"", err)",fix: clean path before accessing file store,"vuln-fix: Normalize file paths to prevent directory traversal

The file handling endpoints did not sanitize user-supplied file paths, allowing crafted paths to escape intended directories via traversal sequences.
This posed a security risk by enabling attackers to access, modify, or delete arbitrary files outside the permitted scope.
The fix applies filepath.Clean to normalize and sanitize all file path inputs before processing them.

Weakness: CWE-22
Severity: High
CVSS: 7.5",0.11764705882352941,"[('fix', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('directory traversal', 'secword', ''), ('sanitize', 'SECWORD', ''), ('escape', 'secword', ''), ('security', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('filepath.clean', 'URL', ''), ('sanitize', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-22', 'CWEID', ''), ('high', 'SEVERITY', '')]"
3,"CWE-400', 'CWE-918",GHSA-7q4h-pj78-j7vg,"@@ -42,6 +42,7 @@
 import org.apache.cxf.rt.security.crypto.CryptoUtils;
 
 public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {
+    private static final String REQUEST_URI_CONTENT_TYPE = ""application/oauth-authz-req+jwt"";
     private static final String REQUEST_PARAM = ""request"";
     private static final String REQUEST_URI_PARAM = ""request_uri"";
     private boolean verifyWithClientCertificates;
@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par
         if (requestToken == null) {
             String requestUri = params.getFirst(REQUEST_URI_PARAM);
             if (isRequestUriValid(client, requestUri)) {
-                requestToken = WebClient.create(requestUri).get(String.class);
+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);
             }
         }
         if (requestToken != null) {
@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par
         }
         return params;
     }
-    private boolean isRequestUriValid(Client client, String requestUri) {
-        //TODO: consider restricting to specific hosts
-        return requestUri != null && requestUri.startsWith(""https://"");
+
+    /**
+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,
+     * as otherwise it could lead to a security problem
+     * (https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-30#section-10.4)
+     * @param client the Client object
+     * @param requestUri the request_uri parameter to validate
+     * @return whether the requestUri is permitted or not
+     */
+    protected boolean isRequestUriValid(Client client, String requestUri) {
+        return false;
     }
     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {
         if (verifyWithClientCertificates) {",Disallow OAuth2 request_uri by default,"vuln-fix: Restrict request_uri usage to prevent SSRF attacks

The code fetched JWT request objects from arbitrary request_uri values without strict validation, allowing attackers to trigger server-side HTTP requests to unintended locations.  
This posed a server-side request forgery (SSRF) risk, potentially exposing internal services or sensitive data to unauthorized parties.  
The fix enforces rejection of all request_uri values by default and requires explicit overriding with proper validation to prevent unsafe external requests.

Weakness: CWE-918  
Severity: High  
CVSS: 7.5",0.11764705882352941,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('ssrf', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('server', 'SECWORD', ''), ('server-side request forgery', 'SECWORD', ''), ('ssrf', 'secword', ''), ('sensitive data', 'SECWORD', ''), ('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-918', 'CWEID', ''), ('high', 'SEVERITY', '')]"
4,CWE-918,GHSA-rv87-vcv4-fjvr,"@@ -743,21 +743,8 @@ public FormValidation doCheckURL(@QueryParameter String value) {
             if ( value.contains( ""$"" ) ) {
             	return FormValidation.warning( ""URL is parameterised and cannot be fully validated"" ) ;
             }
-
-            try {
-                URI uri = new URI(value);
-                if (uri.getScheme().equals(""ftp"")) {
-                    FTPClient ftpClient = getFTPClientObject(value, null, null);
-                    ftpClient.getModificationTime(uri.getPath());
-                } else {
-                    ClientConfig cc = new DefaultClientConfig();
-                    Client client = Client.create(cc);
-                    client.resource(value).get(ClientResponse.class);
-                }
-                return FormValidation.ok();
-            } catch (Exception e) {
-                return FormValidation.error(e.getMessage());
-            }
+            
+            return FormValidation.ok();
         }
 
         public FormValidation doCheckTimeout(@QueryParameter String value) {","Given that the URL is polled, may be valid at poll-time but not at
configuration-time and may contain environment variables that could
change the URL at poll-time, validating it during configuration is
pointless.","vuln-fix: Remove unsafe URL validation causing SSRF risk

The original URL validation method performed live network calls to arbitrary URLs, enabling attackers to trigger server-side request forgery (SSRF) by submitting crafted URLs.
This allowed unauthorized internal network scanning or access to sensitive resources through the server’s network privileges.
The fix removes the network calls and returns a generic OK validation result, preventing external requests during validation.

Weakness: CWE-918
Severity: High
CVSS: 7.8",0.17647058823529413,"[('change', 'ACTION', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('remove', 'ACTION', ''), ('unsafe', 'SECWORD', ''), ('url validation', 'SECWORD', ''), ('ssrf', 'SECWORD', ''), ('url validation', 'SECWORD', ''), ('attackers', 'SECWORD', ''), ('server-side request forgery', 'SECWORD', ''), ('ssrf', 'secword', ''), ('sensitive', 'SECWORD', ''), ('server', 'secword', ''), ('fix', 'ACTION', ''), ('removes', 'ACTION', ''), ('preventing', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-918', 'CWEID', ''), ('high', 'SEVERITY', '')]"
5,CWE-918,GHSA-wc9w-wvq2-ffm9,"@@ -15,14 +15,14 @@ import (
 	""net/http""
 	""net/url""
 	""path/filepath""
+	""regexp""
 	""strconv""
-	""strings""
 	""sync""
 	""time""
 
 	""github.com/grafana/grafana/pkg/infra/log""
+	""github.com/grafana/grafana/pkg/models""
 	""github.com/grafana/grafana/pkg/setting""
-	""gopkg.in/macaron.v1""
 
 	gocache ""github.com/patrickmn/go-cache""
 )
@@ -73,9 +73,15 @@ type CacheServer struct {
 	cache    *gocache.Cache
 }
 
-func (this *CacheServer) Handler(ctx *macaron.Context) {
-	urlPath := ctx.Req.URL.Path
-	hash := urlPath[strings.LastIndex(urlPath, ""/"")+1:]
+var validMD5 = regexp.MustCompile(""^[a-fA-F0-9]{32}$"")
+
+func (this *CacheServer) Handler(ctx *models.ReqContext) {
+	hash := ctx.Params(""hash"")
+
+	if len(hash) != 32 || !validMD5.MatchString(hash) {
+		ctx.JsonApiErr(404, ""Avatar not found"", nil)
+		return
+	}
 
 	var avatar *Avatar
 	obj, exists := this.cache.Get(hash)","Only allow 32 hexadecimal digits for the avatar hash (#25322)

(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)","vuln-fix: Validate avatar hash parameter format in cache handler

The cache handler accepted arbitrary hash strings without validating their format, allowing malformed or unexpected input to be processed.
This could lead to cache poisoning, unexpected errors, or information disclosure by accessing unintended cache entries.
The fix adds strict validation ensuring the hash parameter is exactly 32 hexadecimal characters, returning a 404 error for invalid inputs.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9",0.17647058823529413,"[('hash', 'secword', ''), ('#25322', 'ISSUE', ''), ('7a9c0e31eca4958f5fba053cfea9e64a2ea58509', 'SHA', '')]",0.4117647058823529,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('hash', 'secword', ''), ('hash', 'secword', ''), ('poisoning', 'secword', ''), ('errors', 'FLAW', ''), ('disclosure', 'secword', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensuring', 'ACTION', ''), ('hash', 'secword', ''), ('error', 'FLAW', ''), ('weakness', 'secword', ''), ('cwe-20', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
6,CWE-918,GHSA-hhr9-7xvh-8xgc,"@@ -15,7 +15,13 @@
     $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);
 }
 
-$url = parse_url($_GET['base']);
+$base = trim($_GET['base']);
+
+if (!filter_var($base, FILTER_VALIDATE_URL)) {
+    exit;
+}
+
+$url = parse_url($base);
 
 // Only http/https supported
 if (!in_array($url['scheme'],['http','https']) || (isset($url['port']) && !in_array($url['port'],[80,443]))) {
@@ -42,7 +48,7 @@
         }
     } else {
 
-        if (!in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {
+        if (!filter_var($_GET['css'], FILTER_VALIDATE_URL) || !in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {
             exit;
         }",fix #1752,"vuln-fix: Validate URLs in base and css parameters

The code did not properly validate user-supplied URLs before parsing and using them, allowing malformed or malicious URLs to bypass scheme and port checks.
This could enable attackers to perform SSRF or inject unexpected URLs leading to unauthorized internal resource access or other attacks.
The fix adds FILTER_VALIDATE_URL checks to ensure only well-formed URLs are accepted before further processing.

Weakness: CWE-918
Severity: Medium
CVSS: 5.3",0.11764705882352941,"[('fix', 'ACTION', ''), ('#1752', 'ISSUE', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('validate', 'secword', ''), ('validate', 'secword', ''), ('malicious', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('ssrf', 'secword', ''), ('inject', 'secword', ''), ('attacks', 'SECWORD', ''), ('fix', 'ACTION', ''), ('adds', 'ACTION', ''), ('ensure', 'ACTION', ''), ('weakness', 'secword', ''), ('cwe-918', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
7,CWE-918,GHSA-2647-c639-qv2j,"@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):
         if not cli.allow_localhost:
             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]
             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]
-            if ip.startswith(""127."") or ip.startswith('::ffff:7f') or ip == ""::1"":
+            if ip.startswith(""127."") or ip.startswith('::ffff:7f') or ip == ""::1"" or ip == ""0.0.0.0"" or ip == ""::"":
                 log.error(""Localhost was accessed for cover upload"")
                 return False, _(""You are not allowed to access localhost for cover uploads"")
-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling
+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling
         img.raise_for_status()
         return save_cover(img, book_path)
     except (socket.gaierror,","Don't allow redirects on cover uploads, catch more addresses which resolve to localhost","vuln-fix: Prevent SSRF by blocking localhost and disabling redirects

The cover image download function did not fully block requests to localhost addresses and allowed HTTP redirects, enabling server-side request forgery (SSRF) attacks.
This risked unauthorized internal network access or metadata exposure by letting attackers fetch internal resources via crafted URLs.
The fix extends localhost IP checks to include 0.0.0.0 and disables HTTP redirects in requests.get to prevent bypassing the IP restrictions.

Weakness: CWE-918
Severity: High
CVSS: 7.8",0.058823529411764705,[],0.4117647058823529,"[('fix', 'ACTION', ''), ('prevent', 'ACTION', ''), ('ssrf', 'SECWORD', ''), ('server-side request forgery', 'secword', ''), ('ssrf', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('metadata exposure', 'SECWORD', ''), ('attackers', 'FLAW', ''), ('fix', 'ACTION', ''), ('0.0.0.0', 'VERSION', ''), ('requests.get', 'URL', ''), ('prevent', 'ACTION', ''), ('bypassing', 'SECWORD', ''), ('weakness', 'secword', ''), ('cwe-918', 'CWEID', ''), ('high', 'SEVERITY', '')]"
8,CWE-918,GHSA-38rv-5jqc-m2cv,"@@ -12,8 +12,7 @@
 import recurly.errors
 from recurly.link_header import parse_link_value
 from six.moves import http_client
-from six.moves.urllib.parse import urlencode, urljoin, urlsplit
-
+from six.moves.urllib.parse import urlencode, urlsplit, quote
 
 class Money(object):
 
@@ -338,7 +337,8 @@ def get(cls, uuid):
         can be directly requested with this method.
 
         """"""
-        url = urljoin(recurly.base_uri(), cls.member_path % (uuid,))
+        uuid = quote(str(uuid))
+        url = recurly.base_uri() + (cls.member_path % (uuid,))
         resp, elem = cls.element_for_url(url)
         return cls.from_element(elem)
 
@@ -606,7 +606,7 @@ def all(cls, **kwargs):
         parameters.
 
         """"""
-        url = urljoin(recurly.base_uri(), cls.collection_path)
+        url = recurly.base_uri() + cls.collection_path
         if kwargs:
             url = '%s?%s' % (url, urlencode(kwargs))
         return Page.page_for_url(url)
@@ -616,7 +616,7 @@ def count(cls, **kwargs):
         """"""Return a count of server side resources given
         filtering arguments in kwargs.
         """"""
-        url = urljoin(recurly.base_uri(), cls.collection_path)
+        url = recurly.base_uri() + cls.collection_path
         if kwargs:
             url = '%s?%s' % (url, urlencode(kwargs))
         return Page.count_for_url(url)
@@ -638,7 +638,7 @@ def _update(self):
         return self.put(self._url)
 
     def _create(self):
-        url = urljoin(recurly.base_uri(), self.collection_path)
+        url = recurly.base_uri() + self.collection_path
         return self.post(url)
 
     def put(self, url):","Fix SSRF: do not use urljoin, quote uuids","vuln-fix: Properly encode UUID in URL construction

The code constructed URLs by concatenating raw UUID strings without encoding, allowing injection of special characters that could manipulate URL structure or cause request smuggling.
This posed a security risk by enabling attackers to craft malicious UUIDs that alter request targets or bypass access controls.
The fix applies URL encoding to the UUID using quote() before concatenation, ensuring safe and correct URL formation.

Weakness: CWE-74
Severity: Medium
CVSS: 5.9",0.11764705882352941,"[('fix', 'ACTION', ''), ('ssrf', 'SECWORD', '')]",0.47058823529411764,"[('fix', 'ACTION', ''), ('encode', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('request smuggling', 'SECWORD', ''), ('security', 'secword', ''), ('attackers', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('bypass', 'secword', ''), ('fix', 'ACTION', ''), ('encoding', 'SECWORD', ''), ('ensuring', 'ACTION', ''), ('safe', 'secword', ''), ('weakness', 'secword', ''), ('cwe-74', 'CWEID', ''), ('medium', 'SEVERITY', '')]"
