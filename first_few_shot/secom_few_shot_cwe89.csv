id,cwe_id,vuln_id,code_diff,original_message,generated_secom_message
0,CWE-89,GHSA-h2fw-93qx-vrcq,"@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {
     public $required_param = 'field';
     public $optional_params = array();
 
+    /* @var array The default profile fields allowed to be used as award criteria.
+     *
+     * Note: This is used instead of user_get_default_fields(), because it is not possible to
+     * determine which fields the user can modify.
+     */
+    protected $allowed_default_fields = [
+        'firstname',
+        'lastname',
+        'email',
+        'address',
+        'phone1',
+        'phone2',
+        'department',
+        'institution',
+        'description',
+        'picture',
+        'city',
+        'country',
+    ];
+
     /**
      * Add appropriate new criteria options to the form
      *
@@ -50,10 +70,7 @@ public function get_options(&$mform) {
         $none = true;
         $existing = array();
         $missing = array();
-
-        // Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.
-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',
-                         'department', 'institution', 'description', 'picture', 'city', 'country');
+        $dfields = $this->allowed_default_fields;
 
         // Get custom fields.
         $cfields = array_filter(profile_get_custom_fields(), function($field) {
@@ -230,8 +247,8 @@ public function get_completed_criteria_sql() {
                 $join .= "" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} "";
                 $params[""fieldid{$idx}""] = $param['field'];
                 $whereparts[] = ""uid{$idx}.id IS NOT NULL"";
-            } else {
-                // This is a field from {user} table.
+            } else if (in_array($param['field'], $this->allowed_default_fields)) {
+                // This is a valid field from {user} table.
                 if ($param['field'] == 'picture') {
                     // The picture field is numeric and requires special handling.
                     $whereparts[] = ""u.{$param['field']} != 0"";",MDL-74074 badges: Ensure profile criteria exists before completion check,"vuln-fix: Restrict allowed profile fields in award criteria

The award criteria profile previously allowed any user table field without restriction, enabling attackers to exploit unauthorized or sensitive fields.
This posed a risk of information disclosure or privilege escalation by referencing fields users should not access or modify.
The fix restricts allowed fields to a predefined safe list, validating fields against this whitelist before use in SQL queries.

Weakness: CWE-639
Severity: Medium
CVSS: 6.1"
1,CWE-89,GHSA-rr8m-29g8-8cgc,"@@ -501,7 +501,7 @@ public static function getComments(array $ids): array
             'SELECT *
              FROM blog_comments AS i
              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',
-            $ids
+            array_map('intval', $ids)
         );
     }",Prevent sql injection through the ids of the blog comments,"vuln-fix: Sanitize comment ID inputs in getComments query

The getComments function directly used user-supplied IDs in a SQL query without sanitization.
This allowed attackers to inject malicious SQL through crafted ID values, risking unauthorized data access or modification.
The fix applies array_map('intval') to ensure all IDs are integers before inclusion in the query.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
2,CWE-89,GHSA-gvmf-wcx6-p974,"@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)
                 if ($quote === false) {
                     $this->orderKey[] = $o;
                 } elseif ($this->isValidOrderKey($o)) {
-                    $this->orderKey[] = '`' . $o . '`';
+                    $this->orderKey[] = $this->quoteIdentifier($o);
                 }
             }
         }
@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)
         if ($groupBy) {
             $this->groupBy = $groupBy;
 
-            if ($qoute && strpos($groupBy, '`') !== 0) {
-                $this->groupBy = '`' . $this->groupBy . '`';
+          if ($qoute) {
+                $quotedParts = [];
+                $parts = explode("","", trim($groupBy, '`'));
+                foreach($parts as $part) {
+                    $quotedParts[] = $this->quoteIdentifier(trim($part));
+                }
+
+                $this->groupBy = implode("", "", $quotedParts);
             }
         }
 
@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)
         return $this;
     }
 
+    public function quoteIdentifier(string $value): string
+    {
+        $db = Db::get();
+
+        return $db->quoteIdentifier($value);
+    }
+
     /**
      * @param mixed $value
      * @param int|null $type","[Security] SQL Injection in Data Hub GraphQL (#12444)

* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)

* Update lib/Model/Listing/AbstractListing.php

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>

* Update lib/Model/Listing/AbstractListing.php

Co-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>

Co-authored-by: Jacob Dreesen <j.dreesen@neusta.de>
Co-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>","vuln-fix: Properly quote SQL identifiers to prevent injection

The code previously concatenated raw input into SQL identifiers with manual backticks, allowing crafted input to break out and inject SQL code.
This posed a risk of SQL injection attacks by manipulating query structure through improperly escaped identifiers.
The fix replaces manual quoting with a dedicated quoteIdentifier method that uses the database driver's safe quoting mechanism for identifiers.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
3,"CWE-89', 'CWE-95",GHSA-hrgx-p36p-89q4,"@@ -25,6 +25,14 @@
  */
 class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom
 {
+    /** @var PhpEncryption */
+    private $phpEncryption;
+
+    public function __construct()
+    {
+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);
+    }
+
     /**
      * fetch cached content and its modification time from data source.
      *
@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)
     {
         $row = Db::getInstance()->getRow('SELECT modified, content FROM ' . _DB_PREFIX_ . 'smarty_cache WHERE id_smarty_cache = ""' . pSQL($id, true) . '""');
         if ($row) {
-            $content = $row['content'];
+            $content = $this->phpEncryption->decrypt($row['content']);
             $mtime = strtotime($row['modified']);
         } else {
             $content = null;
@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)
 			""' . pSQL($id, true) . '"",
 			""' . pSQL(sha1($name)) . '"",
 			""' . pSQL($cache_id, true) . '"",
-			""' . pSQL($content, true) . '""
+			""' . $this->phpEncryption->encrypt($content) . '""
 		)');
 
         return (bool) Db::getInstance()->Affected_Rows();","Merge pull request from GHSA-hrgx-p36p-89q4

Crypt/decrypt smarty cache in DB","vuln-fix: Encrypt cached content in Smarty MySQL cache resource

The cached content was stored in the database as plaintext, exposing sensitive data to unauthorized access if the database was compromised.
This posed a risk of data leakage and unauthorized disclosure of cached information, potentially aiding attackers in further exploitation.
The patch introduces encryption and decryption of cached content using a PhpEncryption instance initialized with a secret key.

Weakness: CWE-311
Severity: High
CVSS: 7.8"
4,CWE-89,GHSA-7hmh-8gwv-mfvq,"@@ -71,6 +71,7 @@
 import org.apache.kylin.metadata.project.RealizationEntry;
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.metadata.realization.RealizationType;
+import org.apache.kylin.metrics.MetricsManager;
 import org.apache.kylin.metrics.property.QueryCubePropertyEnum;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.exception.BadRequestException;
@@ -79,6 +80,7 @@
 import org.apache.kylin.rest.msg.Message;
 import org.apache.kylin.rest.msg.MsgPicker;
 import org.apache.kylin.rest.request.MetricsRequest;
+import org.apache.kylin.rest.request.PrepareSqlRequest;
 import org.apache.kylin.rest.response.CubeInstanceResponse;
 import org.apache.kylin.rest.response.CuboidTreeResponse;
 import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;
@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE
 
         hr = new HBaseResponse();
         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);
-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {
+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE
+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {
             try {
                 logger.debug(""Loading HTable info "" + cubeName + "", "" + tableName);
 
@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept
             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());
             for (CubeSegment seg : toRemoveSegs) {
                 toDropHTables.add(seg.getStorageLocationIdentifier());
-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));
+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),
+                        seg.getLastBuildJobID()));
             }
 
             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);
@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {
     }
 
     //Don't merge the job that has been discarded manually before
-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {
+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,
+            SegmentRange offsets) {
         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);
         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());
-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));
+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,
+                EnumSet.of(ExecutableState.DISCARDED));
         for (CubingJob cubingJob : jobInstanceList) {
             if (cubingJob.getSegmentName().equals(segmentName)) {
                 logger.debug(""Merge job {} has been discarded before, will not merge."", segmentName);
@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube
         return false;
     }
 
-
     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {
         Message msg = MsgPicker.getMsg();
 
@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {
         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), ""cube"");
     }
 
-    private class HTableInfoSyncListener extends Broadcaster.Listener {
-        @Override
-        public void onClearAll(Broadcaster broadcaster) throws IOException {
-            htableInfoCache.invalidateAll();
-        }
-
-        @Override
-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)
-                throws IOException {
-            String cubeName = cacheKey;
-            String keyPrefix = cubeName + ""/"";
-            for (String k : htableInfoCache.asMap().keySet()) {
-                if (k.startsWith(keyPrefix))
-                    htableInfoCache.invalidate(k);
-            }
-        }
-    }
-
     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {
         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));
     }
@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu
         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L
                 : queryMatchMap.get(cuboidId);
         boolean ifExist = currentCuboidSet.contains(cuboidId);
-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);
+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);
 
         NodeInfo node = new NodeInfo();
         node.setId(cuboidId);
@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidColumn + "", sum("" + hitMeasure + "")"" //
                 + "" from "" + table//
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""'"" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" group by "" + cuboidColumn;
-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);
         return formatQueryCount(orgHitFrequency);
     }
 
@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidSource + "", "" + cuboidTgt + "", avg("" + aggCount + ""), avg("" + returnCount + "")""//
                 + "" from "" + table //
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""' "" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" group by "" + cuboidSource + "", "" + cuboidTgt;
-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);
         return formatRollingUpStats(orgRollingUpCount);
     }
 
@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {
         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());
         String sql = ""select "" + cuboidSource + "", sum("" + hitMeasure + "")"" //
                 + "" from "" + table //
-                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = '"" + cubeName + ""'"" //
+                + "" where "" + QueryCubePropertyEnum.CUBE.toString() + "" = ?"" //
                 + "" and "" + QueryCubePropertyEnum.IF_MATCH.toString() + "" = true"" //
                 + "" group by "" + cuboidSource;
-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();
+
+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);
         return formatQueryCount(orgMatchHitFrequency);
     }
 
+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {
+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();
+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);
+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];
+        params[0] = new PrepareSqlRequest.StateParam();
+        params[0].setClassName(""java.lang.String"");
+        params[0].setValue(cubeName);
+        sqlRequest.setParams(params);
+        sqlRequest.setSql(sql);
+
+        return queryService.doQueryWithCache(sqlRequest, false).getResults();
+    }
+
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN
             + "" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')"")
     public void migrateCube(CubeInstance cube, String projectName) {
@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {
             throw new InternalErrorException(""Failed to perform one-click migrating"", e);
         }
     }
+
+    private class HTableInfoSyncListener extends Broadcaster.Listener {
+        @Override
+        public void onClearAll(Broadcaster broadcaster) throws IOException {
+            htableInfoCache.invalidateAll();
+        }
+
+        @Override
+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)
+                throws IOException {
+            String cubeName = cacheKey;
+            String keyPrefix = cubeName + ""/"";
+            for (String k : htableInfoCache.asMap().keySet()) {
+                if (k.startsWith(keyPrefix))
+                    htableInfoCache.invalidate(k);
+            }
+        }
+    }
 }",Fix sql injection issue,"vuln-fix: Use prepared statements to prevent SQL injection in metrics queries

The code previously constructed SQL queries by directly embedding user-controlled cube names into query strings without parameterization.
This allowed attackers to perform SQL injection attacks by injecting malicious input, potentially compromising the metrics database.
The fix replaces string concatenation with prepared statements using parameter binding to safely handle user input in SQL queries.

Weakness: CWE-89
Severity: High
CVSS: 7.5"
5,CWE-89,GHSA-q9p4-qfc8-fvpp,"@@ -500,6 +500,11 @@ protected function typeMap($value, $type)
 
 	protected function columnQuote($string)
 	{
+		if (!preg_match('/^[a-zA-Z0-9]+(\.?[a-zA-Z0-9]+)?$/i', $string))
+		{
+			throw new InvalidArgumentException(""Incorrect column name \""$string\"""");
+		}
+
 		if (strpos($string, '.') !== false)
 		{
 			return '""' . $this->prefix . str_replace('.', '"".""', $string) . '""';",[fix] Fix columnQuote for security issue reported by Snyk,"vuln-fix: Validate column names to prevent injection

The columnQuote function did not validate input column names, allowing crafted strings to inject malicious SQL fragments.
This posed a risk of SQL injection attacks by manipulating query structure through untrusted column identifiers.
The fix adds a strict regex check to ensure column names contain only alphanumeric characters and optional single dots, rejecting invalid inputs.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
6,"CWE-89', 'CWE-79",GHSA-x92h-wmg2-6hp7,"@@ -1346,22 +1346,37 @@ public function setMethod($method)
      */
     public function getMethod()
     {
-        if (null === $this->method) {
-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
-
-            if ('POST' === $this->method) {
-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {
-                    $this->method = strtoupper($method);
-                } elseif (self::$httpMethodParameterOverride) {
-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
-                    if (\is_string($method)) {
-                        $this->method = strtoupper($method);
-                    }
-                }
-            }
+        if (null !== $this->method) {
+            return $this->method;
+        }
+
+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
+
+        if ('POST' !== $this->method) {
+            return $this->method;
+        }
+
+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');
+
+        if (!$method && self::$httpMethodParameterOverride) {
+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));
+        }
+
+        if (!\is_string($method)) {
+            return $this->method;
+        }
+
+        $method = strtoupper($method);
+
+        if (\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
+            return $this->method = $method;
+        }
+
+        if (!preg_match('/^[A-Z]++$/D', $method)) {
+            throw new SuspiciousOperationException(sprintf('Invalid method override ""%s"".', $method));
         }
 
-        return $this->method;
+        return $this->method = $method;
     }
 
     /**",[HttpFoundation] reject invalid method override,"vuln-fix: Validate HTTP method override to prevent invalid methods

The method override logic accepted any string as an HTTP method without strict validation, allowing injection of invalid or malicious method names.
This could lead to unexpected behavior or security issues by processing unsupported or crafted HTTP methods in the application.
The fix enforces a whitelist of allowed HTTP methods and rejects invalid overrides with an exception, ensuring only valid methods are accepted.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9"
7,CWE-89,GHSA-9cq5-xgg4-x477,"@@ -76,7 +76,7 @@ public function addUser(){
         $this->checkAdmin();
         $username = I(""post.username"");
         $password = I(""post.password"");
-        $uid = I(""post.uid"");
+        $uid = I(""post.uid/d"");
         $name = I(""post.name"");
         if(!$username){
             $this->sendError(10101,'用户名不允许为空');",bug,"vuln-fix: Enforce integer casting on user ID input

The addUser function accepted the user ID parameter without type enforcement, allowing non-integer input to be processed.
This could lead to injection or logic errors if unexpected string or special characters were used, potentially compromising data integrity.
The patch applies integer casting to the uid parameter using the framework’s ""/d"" filter to ensure only valid integers are accepted.

Weakness: CWE-20
Severity: Medium
CVSS: 5.9"
8,CWE-89,GHSA-2598-2f59-rmhq,"@@ -2198,7 +2198,8 @@ var QueryGenerator = {
             path[path.length - 1] = $tmp[0];
           }
 
-          $baseKey = self.quoteIdentifier(key)+'#>>\'{'+path.join(', ')+'}\'';
+          var pathKey = self.escape('{' + path.join(', ') + '}');
+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;
 
           if (options.prefix) {
             if (options.prefix instanceof Utils.literal) {",fix(postgres): json path key quoting (#11088),"vuln-fix: Correct SQL path escaping in JSON query generation

The JSON path in SQL queries was constructed using string concatenation without proper escaping, risking malformed queries or injection.
This could allow attackers to manipulate query structure or inject malicious payloads via crafted path inputs.
The fix replaces manual string assembly with a dedicated escape function to safely encode JSON path components.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
9,CWE-89,GHSA-x2jc-pwfj-h9p3,"@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {
     }
   }
 
-  if (dialect == ""postgres"") {
+  if (dialect === ""postgres"" || dialect === ""sqlite"") {
     // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS
+    // http://stackoverflow.com/q/603572/130598
     val = val.replace(/'/g, ""''"");
   } else {
     val = val.replace(/[\0\n\r\b\t\\\'\""\x1a]/g, function(s) {","Fix string escaping for sqlite

SQLite was defaulting to the MySQL backslash-escaped style, but it uses
postgres-style escaping. This is a SQL-injection vulnerability, and
shouldn't be taken lightly (although SQLite is mostly for testing).","vuln-fix: Extend string escaping to SQLite dialect

The string escaping function only handled PostgreSQL dialect, leaving SQLite inputs improperly escaped.
This allowed attackers to inject malicious SQL via unescaped single quotes, leading to potential SQL injection vulnerabilities.
The patch adds SQLite to the dialect check, applying the same escaping logic to prevent injection attacks.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
10,CWE-89,GHSA-2v7p-f4qm-r5pc,"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr
                         } elseif ($filterField == 'id') {
                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);
                         } else {
+                            $filterField = $db->quoteIdentifier('o_' . $filterField);
                             if ($filter['type'] == 'date' && $operator == '=') {
                                 //if the equal operator is chosen with the date type, condition has to be changed
                                 $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition
-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);
+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);
                             } else {
-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);
+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);
                             }
                         }
                     }
@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)
 
                 if ($filterField == 'fullpath') {
                     $filterField = 'CONCAT(path,filename)';
+                }else {
+                    $filterField = $db->quoteIdentifier($filterField);
                 }
 
                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {",Fixed column quoting in GridHelperService,"vuln-fix: Quote SQL identifiers in filter conditions to prevent injection

The code constructed SQL filter conditions by concatenating raw field names without proper quoting, allowing attackers to inject malicious SQL via crafted filter parameters.
This posed a risk of SQL injection, potentially leading to unauthorized data access or manipulation through manipulated query filters.
The fix applies database-specific identifier quoting to all filter field names before embedding them in SQL conditions, ensuring safe query construction.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
11,CWE-89,GHSA-2jx3-5j9v-prpp,"@@ -35,6 +35,7 @@
 use Product;
 use Shop;
 use Symfony\Component\Translation\TranslatorInterface;
+use Validate;
 use WishList;
 
 /**
@@ -167,7 +168,10 @@ private function getProductsOrCount(
 
         if ('products' === $type) {
             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);
-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());
+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();
+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {
+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);
+            }
             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());
             $products = $this->db->executeS($querySearch);","Merge pull request from GHSA-2jx3-5j9v-prpp

Validate order by and order way","vuln-fix: Validate sorting parameters in product query

The product query method did not validate sorting parameters before using them in SQL ORDER BY clauses.
This allowed attackers to inject arbitrary SQL fragments, potentially leading to SQL injection vulnerabilities.
The patch adds validation checks using Validate::isOrderBy and Validate::isOrderWay to ensure only safe sorting values are used.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
12,"CWE-89', 'CWE-287",GHSA-79mg-4w23-4fqc,"@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])
             return $query;
         }
 
-        if (!array_intersect(array_keys($search), $this->searchable)) {
+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));
+        if (! $allowed_search) {
             return $query;
         }
 
-        return $query->where($search);
+        return $query->where($allowed_search);
     }
 }",Ensure only allowed searchable columns are used in DB Query,"vuln-fix: Restrict query filters to allowed searchable fields

The original scopeSearch method applied all user-supplied filters directly to the query without restricting keys to allowed searchable fields.
This allowed attackers to filter queries on arbitrary columns, potentially exposing sensitive data or causing unintended query behavior.
The fix filters the input array to include only keys present in the searchable whitelist before applying them to the query builder.

Weakness: CWE-200
Severity: Medium
CVSS: 6.1"
13,CWE-89,GHSA-v3mr-gp7j-pw5w,"@@ -407,9 +407,9 @@ protected function prepareWhere()
 
         // Filter those that have already been chosen
         if ('checkbox' === $this->fieldType && \is_array($varData) && !empty($varData)) {
-            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', $varData).')';
+            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', array_map('intval', $varData)).')';
         } elseif ('radio' === $this->fieldType && '' !== $varData) {
-            $this->arrWhereProcedure[] = ""{$this->foreignTable}.id!='$varData'"";
+            $this->arrWhereProcedure[] = $this->foreignTable.'.id!='.(int) $varData;
         }
 
         // If custom WHERE is set, add it to the statement",Fixed SQL query for current field value,"vuln-fix: Sanitize input values in SQL WHERE clause construction

The code previously embedded raw user input directly into SQL WHERE clauses without proper sanitization.
This allowed attackers to inject malicious SQL fragments, potentially leading to SQL injection vulnerabilities.
The fix applies integer casting and array_map with intval to ensure all input values are safely converted before inclusion in queries.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
14,CWE-89,GHSA-vj9x-w7ch-f46p,"@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)
         }
 
         if ($storeId) {
-            $conditionParts[] = '(storeId = ' . $storeId . ')';
+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';
         }
 
         if ($request->get('filter')) {",[Data Object] Classification Store quote filtering,"vuln-fix: Sanitize storeId input in properties query condition

The code concatenated the storeId parameter directly into an SQL condition without sanitization.
This allowed attackers to inject malicious SQL fragments, risking unauthorized data access or manipulation.
The fix applies the database quote method to properly escape the storeId value before inclusion in the query.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
15,CWE-89,GHSA-6gm7-j668-w6h9,"@@ -119,7 +119,7 @@ public function listAction(Request $request)
                         $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);
                         $conditionFilters[] = $condition;
                     } else {
-                        $conditionFilters[] = $field . $operator . "" '"" . $value . ""' "";
+                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);
                     }
                 }
             }",[Recyclebin] Quote condition filter,"vuln-fix: Use parameterized queries to prevent SQL injection

The original code concatenated raw user input directly into SQL query strings without proper escaping.
This allowed attackers to inject malicious SQL code, potentially compromising database integrity or exposing sensitive data.
The fix replaces string concatenation with the database quote method to safely escape user inputs before inclusion in queries.

Weakness: CWE-89  
Severity: High  
CVSS: 7.5"
16,CWE-89,GHSA-864j-6qpp-cmrr,"@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})
     end
 
     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)
-      spans = ""#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND ""
+      spans = ""#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND ""
       # handle box that spans 180 longitude
       if sw_lng.to_f > ne_lng.to_f
-        spans + ""(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR "" +
-        ""#{lon_attr} BETWEEN -180 AND #{ne_lng})""
+        spans + ""(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR "" +
+        ""#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})""
       else
-        spans + ""#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}""
+        spans + ""#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}""
       end
     end",Sanitize lat/lon for SQL query.,"vuln-fix: Cast bounding box coordinates to float in SQL query

The method constructing SQL conditions for geographic bounding boxes interpolated user inputs directly as strings without type enforcement.
This allowed injection of malicious SQL fragments via crafted latitude or longitude parameters, risking SQL injection attacks.
The fix enforces floating-point casting on all coordinate inputs before embedding them into the query string, preventing injection.

Weakness: CWE-89
Severity: High
CVSS: 7.5"
