vuln_id,code_diff
CVE-2019-15075,"From 9877ec62556f0470030acd306b24bc94fdcbe2ae Mon Sep 17 00:00:00 2001
From: ""devang.nathwani"" <devang.nathwani@inextrix.com>
Date: Fri, 12 Jul 2019 16:55:07 +0530
Subject: [PATCH] [IMP] Generating random strong keys

---
 config/astpp-config.conf                          | 3 ++-
 install.sh                                        | 4 ++++
 web_interface/astpp/application/config/config.php | 5 ++---
 3 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/config/astpp-config.conf b/config/astpp-config.conf
index e5428f74d..c53701af8 100755
--- a/config/astpp-config.conf
+++ b/config/astpp-config.conf
@@ -3,7 +3,8 @@ dbhost = 127.0.0.1
 dbname = astpp
 dbuser = astppuser
 dbpass = <PASSSWORD>
-
+PRIVATE_KEY = <PR_KEY>
+ENCRYPTION_KEY = <EN_KEY>
 
 ; Database type:  ASTPP was designed for a MySQL database initially.  Valid options are:
 ; MySQL. Pgsql is coming but is not ready yet.
diff --git a/install.sh b/install.sh
index a59bbcfde..858abaee3 100644
--- a/install.sh
+++ b/install.sh
@@ -70,6 +70,8 @@ genpasswd()
 
 MYSQL_ROOT_PASSWORD=`echo ""$(genpasswd 20)"" | sed s/./*/5`
 ASTPPUSER_MYSQL_PASSWORD=`echo ""$(genpasswd 20)"" | sed s/./*/5`
+PR_KEY=`echo ""$(genpasswd 32)""`
+EN_KEY=`echo ""$(genpasswd 12)""`
 #Fetch OS Distribution
 get_linux_distribution ()
 { 
@@ -332,6 +334,8 @@ normalize_astpp ()
         sed -i ""s#DB_PASSWD=\""<PASSSWORD>\""#DB_PASSWD = \""${ASTPPUSER_MYSQL_PASSWORD}\""#g"" ${ASTPPDIR}astpp.lua
         sed -i ""s#base_url=http://localhost:8089/#base_url=https://${ASTPP_HOST_DOMAIN_NAME}/#g"" ${ASTPPDIR}/astpp-config.conf
         sed -i ""s#PASSWORD = <PASSWORD>#PASSWORD = ${ASTPPUSER_MYSQL_PASSWORD}#g"" /etc/odbc.ini
+        sed -i ""s#<PR_KEY>#${PR_KEY}#g"" ${ASTPPDIR}astpp-config.conf
+        sed -i ""s#<EN_KEY>#${EN_KEY}#g"" ${ASTPPDIR}astpp-config.conf
         systemctl restart nginx
 }
 
diff --git a/web_interface/astpp/application/config/config.php b/web_interface/astpp/application/config/config.php
index 07ac130e6..222e42c07 100755
--- a/web_interface/astpp/application/config/config.php
+++ b/web_interface/astpp/application/config/config.php
@@ -228,7 +228,7 @@
  * | MUST set private key with 32 characters.
  * |
  */
-$config ['private_key'] = '8YSDaBtDHAB3EQkxPAyTz2I5DttzA9uR';
+$config ['private_key'] = $astpp_config ['PRIVATE_KEY'];
 /*
  * |--------------------------------------------------------------------------
  * | Encryption Key
@@ -238,8 +238,7 @@
  * | MUST set an encryption key. See the user guide for info.
  * |
  */
-$config ['encryption_key'] = 'r)fddEw232f';
-
+$config ['encryption_key'] = $astpp_config ['ENCRYPTION_KEY'];
 /*
  * |--------------------------------------------------------------------------
  * | Session Variables"
CVE-2021-43860,"From 54ec1a482dfc668127eaae57f135e6a8e0bc52da Mon Sep 17 00:00:00 2001
From: Phaedrus Leeds <mwleeds@protonmail.com>
Date: Tue, 28 Dec 2021 11:48:16 -0800
Subject: [PATCH] Add test for metadata validation

This tests for invalid metadata, missing xa.metadata and mismatched
values in xa.metadata and the real metadata, including the embedded
null leading to the hidden permissions of CVE-2021-43860.
---
 tests/Makefile-test-matrix.am.inc |   1 +
 tests/Makefile.am.inc             |   1 +
 tests/test-metadata-validation.sh | 158 ++++++++++++++++++++++++++++++
 3 files changed, 160 insertions(+)
 create mode 100755 tests/test-metadata-validation.sh

diff --git a/tests/Makefile-test-matrix.am.inc b/tests/Makefile-test-matrix.am.inc
index 80547f3608..fde7aafc9f 100644
--- a/tests/Makefile-test-matrix.am.inc
+++ b/tests/Makefile-test-matrix.am.inc
@@ -37,6 +37,7 @@ TEST_MATRIX_DIST= \
 	tests/test-http-utils.sh \
 	tests/test-history.sh \
 	tests/test-default-remotes.sh \
+	tests/test-metadata-validation.sh \
 	tests/test-extensions.sh \
 	tests/test-oci.sh \
 	tests/test-override.sh \
diff --git a/tests/Makefile.am.inc b/tests/Makefile.am.inc
index 8c38f28ea4..8422a19db9 100644
--- a/tests/Makefile.am.inc
+++ b/tests/Makefile.am.inc
@@ -269,6 +269,7 @@ TEST_MATRIX_SOURCE = \
 	tests/test-history.sh \
 	tests/test-sideload.sh{user+system} \
 	tests/test-default-remotes.sh \
+	tests/test-metadata-validation.sh \
 	tests/test-extensions.sh \
 	tests/test-bundle.sh{user+system+system-norevokefs} \
 	tests/test-oci.sh \
diff --git a/tests/test-metadata-validation.sh b/tests/test-metadata-validation.sh
new file mode 100755
index 0000000000..7e3efccbc3
--- /dev/null
+++ b/tests/test-metadata-validation.sh
@@ -0,0 +1,158 @@
+#!/bin/bash
+#
+# Copyright (C) 2021 Matthew Leeds <mwleeds@protonmail.com>
+#
+# SPDX-License-Identifier: LGPL-2.0-or-later
+
+set -euo pipefail
+
+. $(dirname $0)/libtest.sh
+
+echo ""1..7""
+
+setup_repo
+
+COUNTER=1
+
+create_app () {
+    local OPTIONS=""$1""
+    local DIR=`mktemp -d`
+
+    mkdir ${DIR}/files
+    echo $COUNTER > ${DIR}/files/counter
+    let COUNTER=COUNTER+1
+
+    local INVALID=""""
+    if [[ $OPTIONS =~ ""invalid"" ]]; then
+        INVALID=invalidkeyfileline
+    fi
+    cat > ${DIR}/metadata <<EOF
+[Application]
+name=org.test.Malicious
+runtime=org.test.Platform/${ARCH}/master
+$INVALID
+
+[Context]
+EOF
+    if [[ $OPTIONS =~ ""mismatch"" ]]; then
+        echo -e ""filesystems=host;"" >> ${DIR}/metadata
+    fi
+    if [[ $OPTIONS =~ ""hidden"" ]]; then
+        echo -ne ""\0"" >> ${DIR}/metadata
+        echo -e ""\nfilesystems=home;"" >> ${DIR}/metadata
+    fi
+    local XA_METADATA=--add-metadata-string=xa.metadata=""$(head -n6 ${DIR}/metadata)""$'\n'
+    if [[ $OPTIONS =~ ""no-xametadata"" ]]; then
+        XA_METADATA=""--add-metadata-string=xa.nometadata=1""
+    fi
+    ostree commit --repo=repos/test --branch=app/org.test.Malicious/${ARCH}/master ${FL_GPGARGS} ""$XA_METADATA"" ${DIR}/
+    if [[ $OPTIONS =~ ""no-cache-in-summary"" ]]; then
+        ostree --repo=repos/test ${FL_GPGARGS} summary -u
+        # force use of legacy summary format
+        rm -rf repos/test/summary.idx repos/test/summaries
+    else
+        update_repo
+    fi
+    rm -rf ${DIR}
+}
+
+cleanup_repo () {
+    ostree refs --repo=repos/test --delete app/org.test.Malicious/${ARCH}/master
+    update_repo
+}
+
+create_app ""hidden""
+
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with hidden permissions""
+fi
+
+assert_file_has_content install-error-log ""not matching expected metadata""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with hidden permissions can't be installed (CVE-2021-43860)""
+
+create_app no-xametadata
+
+# The install will fail because the metadata in the summary doesn't match the metadata on the commit
+# The missing xa.metadata in the commit got turned into """" in the xa.cache
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with missing xa.metadata""
+fi
+
+assert_file_has_content install-error-log ""not matching expected metadata""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with no xa.metadata can't be installed""
+
+create_app ""no-xametadata no-cache-in-summary""
+
+# The install will fail because there's no metadata in the summary or on the commit
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with missing metadata""
+fi
+assert_file_has_content install-error-log ""No xa.metadata in local commit""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with no xa.metadata and no metadata in summary can't be installed""
+
+create_app ""invalid""
+
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with invalid metadata""
+fi
+assert_file_has_content install-error-log ""Metadata for .* is invalid""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with invalid metadata (in summary) can't be installed""
+
+create_app ""invalid no-cache-in-summary""
+
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with invalid metadata""
+fi
+assert_file_has_content install-error-log ""Metadata for .* is invalid""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with invalid metadata (in commit) can't be installed""
+
+create_app ""mismatch no-cache-in-summary""
+
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with non-matching metadata""
+fi
+assert_file_has_content install-error-log ""Commit metadata for .* not matching expected metadata""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with mismatched metadata (in commit) can't be installed""
+
+create_app ""mismatch""
+
+if ${FLATPAK} ${U} install -y test-repo org.test.Malicious 2>install-error-log; then
+    assert_not_reached ""Should not be able to install app with non-matching metadata""
+fi
+assert_file_has_content install-error-log ""Commit metadata for .* not matching expected metadata""
+
+assert_not_has_dir $FL_DIR/app/org.test.Malicious/current/active
+
+cleanup_repo
+
+ok ""app with mismatched metadata (in summary) can't be installed"""
GHSA-9c4x-5hgq-q3wh,"From af7fb01e31fe2d389e5f1c36b399ddc46b412b21 Mon Sep 17 00:00:00 2001
From: Robert Fratto <robert.fratto@grafana.com>
Date: Wed, 8 Dec 2021 08:40:17 -0500
Subject: [PATCH] announce patch releases for cve-2021-41090 (#1152)

---
 CHANGELOG.md                                  | 22 +++++++++++++++++++
 .../integrations/node-exporter-config.md      |  4 ++--
 .../integrations/process-exporter-config.md   |  4 ++--
 docs/getting-started/_index.md                |  2 +-
 docs/operator/custom-resource-quickstart.md   |  2 +-
 docs/operator/getting-started.md              |  2 +-
 docs/upgrade-guide/_index.md                  | 10 +++++++++
 pkg/operator/defaults.go                      |  2 ++
 production/README.md                          |  2 +-
 production/grafanacloud-install.sh            |  2 +-
 production/kubernetes/agent-bare.yaml         |  2 +-
 production/kubernetes/agent-loki.yaml         |  2 +-
 production/kubernetes/agent-traces.yaml       |  2 +-
 .../kubernetes/build/lib/version.libsonnet    |  2 +-
 production/kubernetes/install-bare.sh         |  2 +-
 .../tanka/grafana-agent/v1/main.libsonnet     |  4 ++--
 .../grafana-agent/v2/internal/base.libsonnet  |  4 ++--
 .../v2/internal/syncer.libsonnet              |  2 +-
 18 files changed, 53 insertions(+), 19 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index c30203472ac6..820d0dc85d18 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,16 @@
 
 - [ENHANCEMENT] Traces: Improved pod association in PromSD processor (@mapno)
 
+# v0.21.2 (2021-12-08)
+
+- [SECURITY] This release contains a fix for
+  [CVE-2021-41090](https://github.com/grafana/agent/security/advisories/GHSA-9c4x-5hgq-q3wh).
+
+- [CHANGE] This release disables the existing `/-/config` and
+  `/agent/api/v1/configs/{name}` endpoitns by default. Pass the
+  `--config.enable-read-api` flag at the command line to opt in to these
+  endpoints.
+
 # v0.21.1 (2021-11-18)
 
 - [BUGFIX] Fix panic when using postgres_exporter integration (@saputradharma)
@@ -47,6 +57,18 @@
 
 - [CHANGE] Traces: Changed service graphs store implementation to improve CPU performance (@mapno)
 
+# v0.20.1 (2021-12-08)
+
+*NOTE*: The fixes in this patch are only present in v0.20.1 and >=v0.21.2.
+
+- [SECURITY] This release contains a fix for
+  [CVE-2021-41090](https://github.com/grafana/agent/security/advisories/GHSA-9c4x-5hgq-q3wh).
+
+- [CHANGE] This release disables the existing `/-/config` and
+  `/agent/api/v1/configs/{name}` endpoitns by default. Pass the
+  `--config.enable-read-api` flag at the command line to opt in to these
+  endpoints.
+
 # v0.20.0 (2021-10-28)
 
 - [FEATURE] Operator: The Grafana Agent Operator can now generate a Kubelet
diff --git a/docs/configuration/integrations/node-exporter-config.md b/docs/configuration/integrations/node-exporter-config.md
index 42d6c4875006..d44d675a6a39 100644
--- a/docs/configuration/integrations/node-exporter-config.md
+++ b/docs/configuration/integrations/node-exporter-config.md
@@ -26,7 +26,7 @@ docker run \
   -v ""/proc:/host/proc:ro,rslave"" \
   -v /tmp/agent:/etc/agent \
   -v /path/to/config.yaml:/etc/agent-config/agent.yaml \
-  grafana/agent:v0.21.1 \
+  grafana/agent:v0.21.2 \
   --config.file=/etc/agent-config/agent.yaml
 ```
 
@@ -66,7 +66,7 @@ metadata:
   name: agent
 spec:
   containers:
-  - image: grafana/agent:v0.21.1
+  - image: grafana/agent:v0.21.2
     name: agent
     args:
     - --config.file=/etc/agent-config/agent.yaml
diff --git a/docs/configuration/integrations/process-exporter-config.md b/docs/configuration/integrations/process-exporter-config.md
index 3e0ccb7dc921..d5e428841a54 100644
--- a/docs/configuration/integrations/process-exporter-config.md
+++ b/docs/configuration/integrations/process-exporter-config.md
@@ -18,7 +18,7 @@ docker run \
   -v ""/proc:/proc:ro"" \
   -v /tmp/agent:/etc/agent \
   -v /path/to/config.yaml:/etc/agent-config/agent.yaml \
-  grafana/agent:v0.21.1 \
+  grafana/agent:v0.21.2 \
   --config.file=/etc/agent-config/agent.yaml
 ```
 
@@ -35,7 +35,7 @@ metadata:
   name: agent
 spec:
   containers:
-  - image: grafana/agent:v0.21.1
+  - image: grafana/agent:v0.21.2
     name: agent
     args:
     - --config.file=/etc/agent-config/agent.yaml
diff --git a/docs/getting-started/_index.md b/docs/getting-started/_index.md
index 8e16295475cf..bf477d9448a2 100644
--- a/docs/getting-started/_index.md
+++ b/docs/getting-started/_index.md
@@ -26,7 +26,7 @@ See the list of [Community Projects](#community-projects) for the community-driv
 docker run \
   -v /tmp/agent:/etc/agent/data \
   -v /path/to/config.yaml:/etc/agent/agent.yaml \
-  grafana/agent:v0.21.1
+  grafana/agent:v0.21.2
 ```
 
 Replace `/tmp/agent` with the folder you wish to store WAL data in. WAL data is
diff --git a/docs/operator/custom-resource-quickstart.md b/docs/operator/custom-resource-quickstart.md
index 57160a08d638..bfef07d9cb47 100644
--- a/docs/operator/custom-resource-quickstart.md
+++ b/docs/operator/custom-resource-quickstart.md
@@ -43,7 +43,7 @@ metadata:
   labels:
     app: grafana-agent
 spec:
-  image: grafana/agent:v0.21.1
+  image: grafana/agent:v0.21.2
   logLevel: info
   serviceAccountName: grafana-agent
   metrics:
diff --git a/docs/operator/getting-started.md b/docs/operator/getting-started.md
index 662fccbd945e..fe11b9543a92 100644
--- a/docs/operator/getting-started.md
+++ b/docs/operator/getting-started.md
@@ -72,7 +72,7 @@ spec:
       serviceAccountName: grafana-agent-operator
       containers:
       - name: operator
-        image: grafana/agent-operator:v0.21.1
+        image: grafana/agent-operator:v0.21.2
         args:
         - --kubelet-service=default/kubelet
 ---
diff --git a/docs/upgrade-guide/_index.md b/docs/upgrade-guide/_index.md
index 299c6be7238c..bff63e6ae01a 100644
--- a/docs/upgrade-guide/_index.md
+++ b/docs/upgrade-guide/_index.md
@@ -12,6 +12,16 @@ releases and how to migrate to newer versions.
 
 These changes will come in a future version.
 
+## v0.21.2, v0.20.1
+
+### Disabling of config retrieval enpoints
+
+These two patch releases, as part of a fix for
+[CVE-2021-41090](https://github.com/grafana/agent/security/advisories/GHSA-9c4x-5hgq-q3wh),
+disable the `/-/config` and `/agent/api/v1/configs/{name}` endpoints by
+default. Pass the `--config.enable-read-api` flag at the command line to
+re-enable them.
+
 ## v0.21.0
 
 ### Integrations: Change in how instance labels are handled (Breaking change)
diff --git a/pkg/operator/defaults.go b/pkg/operator/defaults.go
index efc54e6f7062..e0189dc0f942 100644
--- a/pkg/operator/defaults.go
+++ b/pkg/operator/defaults.go
@@ -15,8 +15,10 @@ var (
 		""v0.18.4"",
 		""v0.19.0"",
 		""v0.20.0"",
+		""v0.20.1"",
 		""v0.21.0"",
 		""v0.21.1"",
+		""v0.21.2"",
 
 		// NOTE(rfratto): when performing an upgrade, add the newest version above instead of changing the existing reference.
 	}
diff --git a/production/README.md b/production/README.md
index 020deb53a7fc..2fe509253e6e 100644
--- a/production/README.md
+++ b/production/README.md
@@ -27,7 +27,7 @@ directory on your host that you want the agent to store its WAL.
 docker run \
   -v /tmp/agent:/etc/agent/data \
   -v /path/to/config.yaml:/etc/agent/agent.yaml \
-  grafana/agent:v0.21.1
+  grafana/agent:v0.21.2
 ```
 
 ## Running the Agent locally
diff --git a/production/grafanacloud-install.sh b/production/grafanacloud-install.sh
index 701dfddb1a0d..b7acda2ba2c5 100755
--- a/production/grafanacloud-install.sh
+++ b/production/grafanacloud-install.sh
@@ -50,7 +50,7 @@ PACKAGE_SYSTEM=${PACKAGE_SYSTEM:=}
 #
 # Global constants.
 #
-RELEASE_VERSION=""0.21.1""
+RELEASE_VERSION=""0.21.2""
 
 RELEASE_URL=""https://github.com/grafana/agent/releases/download/v${RELEASE_VERSION}""
 DEB_URL=""${RELEASE_URL}/grafana-agent-${RELEASE_VERSION}-1.${ARCH}.deb""
diff --git a/production/kubernetes/agent-bare.yaml b/production/kubernetes/agent-bare.yaml
index ccc52c952bb8..cea60c76ba81 100644
--- a/production/kubernetes/agent-bare.yaml
+++ b/production/kubernetes/agent-bare.yaml
@@ -66,7 +66,7 @@ spec:
           valueFrom:
             fieldRef:
               fieldPath: spec.nodeName
-        image: grafana/agent:v0.21.1
+        image: grafana/agent:v0.21.2
         imagePullPolicy: IfNotPresent
         name: agent
         ports:
diff --git a/production/kubernetes/agent-loki.yaml b/production/kubernetes/agent-loki.yaml
index 2f361e72f888..bd746b2b7b98 100644
--- a/production/kubernetes/agent-loki.yaml
+++ b/production/kubernetes/agent-loki.yaml
@@ -64,7 +64,7 @@ spec:
           valueFrom:
             fieldRef:
               fieldPath: spec.nodeName
-        image: grafana/agent:v0.21.1
+        image: grafana/agent:v0.21.2
         imagePullPolicy: IfNotPresent
         name: agent
         ports:
diff --git a/production/kubernetes/agent-traces.yaml b/production/kubernetes/agent-traces.yaml
index b24195c78871..51b82f7e5151 100644
--- a/production/kubernetes/agent-traces.yaml
+++ b/production/kubernetes/agent-traces.yaml
@@ -109,7 +109,7 @@ spec:
           valueFrom:
             fieldRef:
               fieldPath: spec.nodeName
-        image: grafana/agent:v0.21.1
+        image: grafana/agent:v0.21.2
         imagePullPolicy: IfNotPresent
         name: agent
         ports:
diff --git a/production/kubernetes/build/lib/version.libsonnet b/production/kubernetes/build/lib/version.libsonnet
index 1f68d087721c..47c428aa1220 100644
--- a/production/kubernetes/build/lib/version.libsonnet
+++ b/production/kubernetes/build/lib/version.libsonnet
@@ -1 +1 @@
-'grafana/agent:v0.21.1'
+'grafana/agent:v0.21.2'
diff --git a/production/kubernetes/install-bare.sh b/production/kubernetes/install-bare.sh
index 80c0e52f9a63..cfcef950a1ce 100644
--- a/production/kubernetes/install-bare.sh
+++ b/production/kubernetes/install-bare.sh
@@ -25,7 +25,7 @@ check_installed() {
 check_installed curl
 check_installed envsubst
 
-MANIFEST_BRANCH=v0.21.1
+MANIFEST_BRANCH=v0.21.2
 MANIFEST_URL=${MANIFEST_URL:-https://raw.githubusercontent.com/grafana/agent/${MANIFEST_BRANCH}/production/kubernetes/agent-bare.yaml}
 NAMESPACE=${NAMESPACE:-default}
 
diff --git a/production/tanka/grafana-agent/v1/main.libsonnet b/production/tanka/grafana-agent/v1/main.libsonnet
index fe8af7c363d4..cda3bffd1942 100644
--- a/production/tanka/grafana-agent/v1/main.libsonnet
+++ b/production/tanka/grafana-agent/v1/main.libsonnet
@@ -15,8 +15,8 @@ local service = k.core.v1.service;
 (import './lib/traces.libsonnet') +
 {
   _images:: {
-    agent: 'grafana/agent:v0.21.1',
-    agentctl: 'grafana/agentctl:v0.21.1',
+    agent: 'grafana/agent:v0.21.2',
+    agentctl: 'grafana/agentctl:v0.21.2',
   },
 
   // new creates a new DaemonSet deployment of the grafana-agent. By default,
diff --git a/production/tanka/grafana-agent/v2/internal/base.libsonnet b/production/tanka/grafana-agent/v2/internal/base.libsonnet
index 15b769b1ef19..c07b012d978d 100644
--- a/production/tanka/grafana-agent/v2/internal/base.libsonnet
+++ b/production/tanka/grafana-agent/v2/internal/base.libsonnet
@@ -10,8 +10,8 @@ function(name='grafana-agent', namespace='') {
   local this = self,
 
   _images:: {
-    agent: 'grafana/agent:v0.21.1',
-    agentctl: 'grafana/agentctl:v0.21.1',
+    agent: 'grafana/agent:v0.21.2',
+    agentctl: 'grafana/agentctl:v0.21.2',
   },
   _config:: {
     name: name,
diff --git a/production/tanka/grafana-agent/v2/internal/syncer.libsonnet b/production/tanka/grafana-agent/v2/internal/syncer.libsonnet
index 2f0050d85113..a90672591d68 100644
--- a/production/tanka/grafana-agent/v2/internal/syncer.libsonnet
+++ b/production/tanka/grafana-agent/v2/internal/syncer.libsonnet
@@ -14,7 +14,7 @@ function(
 ) {
   local _config = {
     api: error 'api must be set',
-    image: 'grafana/agentctl:v0.21.1',
+    image: 'grafana/agentctl:v0.21.2',
     schedule: '*/5 * * * *',
     configs: [],
   } + config,"
CVE-2012-0787,"From b8de6a8c5cfffb007149036ffa561ced4d11c462 Mon Sep 17 00:00:00 2001
From: Dominic Cleal <dcleal@redhat.com>
Date: Sun, 25 Mar 2012 17:07:54 +0100
Subject: [PATCH] Prevent cross-mountpoint attacks via .augsave during saving

Previously Augeas would open PATH.augsave for writing if a rename from PATH to
PATH.augsave failed, then write the file contents in.  Now if the rename fails,
it tries to unlink PATH.augsave and open it with O_EXCL first.

Mountpoints remain permitted at either PATH or PATH.augnew provided
/augeas/save/copy_if_rename_fails exists.

* src/transform.c (clone_file):
    add argument to perform unlink and O_EXCL on destination filename after a
    rename failure to prevent PATH.augsave being a mountpoint
* src/transform.c (transform_save, remove_file):
    always try to unlink PATH.augsave if rename fails, only allowing PATH to be
    a mountpoint; allow PATH or PATH.augnew to be mountpoints
* tests/
    test-put-mount: check PATH being a mountpoint is supported
    test-put-mount-augnew.sh: check PATH.augnew being a mountpoint is supported
    test-put-mount-augsave.sh: check unlink error when PATH.augsave is a mount

Fixes BZ 772261
---
 src/transform.c                 | 40 ++++++++++++++++---
 tests/Makefile.am               |  5 ++-
 tests/test-put-mount-augnew.sh  | 69 +++++++++++++++++++++++++++++++++
 tests/test-put-mount-augsave.sh | 62 +++++++++++++++++++++++++++++
 tests/test-put-mount.sh         | 55 ++++++++++++++++++++++++++
 5 files changed, 223 insertions(+), 8 deletions(-)
 create mode 100755 tests/test-put-mount-augnew.sh
 create mode 100755 tests/test-put-mount-augsave.sh
 create mode 100755 tests/test-put-mount.sh

diff --git a/src/transform.c b/src/transform.c
index 6ebcbd695..62563e2cf 100644
--- a/src/transform.c
+++ b/src/transform.c
@@ -27,6 +27,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <fcntl.h>
 #include <unistd.h>
 #include <selinux/selinux.h>
 #include <stdbool.h>
@@ -844,14 +845,21 @@ static int transfer_file_attrs(FILE *from, FILE *to,
  * means that FROM or TO is a bindmounted file), and COPY_IF_RENAME_FAILS
  * is true, copy the contents of FROM into TO and delete FROM.
  *
+ * If COPY_IF_RENAME_FAILS and UNLINK_IF_RENAME_FAILS are true, and the above
+ * copy mechanism is used, it will unlink the TO path and open with O_EXCL
+ * to ensure we only copy *from* a bind mount rather than into an attacker's
+ * mount placed at TO (e.g. for .augsave).
+ *
  * Return 0 on success (either rename succeeded or we copied the contents
  * over successfully), -1 on failure.
  */
 static int clone_file(const char *from, const char *to,
-                      const char **err_status, int copy_if_rename_fails) {
+                      const char **err_status, int copy_if_rename_fails,
+                      int unlink_if_rename_fails) {
     FILE *from_fp = NULL, *to_fp = NULL;
     char buf[BUFSIZ];
     size_t len;
+    int to_fd = -1, to_oflags, r;
     int result = -1;
 
     if (rename(from, to) == 0)
@@ -867,10 +875,23 @@ static int clone_file(const char *from, const char *to,
         goto done;
     }
 
-    if (!(to_fp = fopen(to, ""w""))) {
+    if (unlink_if_rename_fails) {
+        r = unlink(to);
+        if (r < 0) {
+            *err_status = ""clone_unlink_dst"";
+            goto done;
+        }
+    }
+
+    to_oflags = unlink_if_rename_fails ? O_EXCL : O_TRUNC;
+    if ((to_fd = open(to, O_WRONLY|O_CREAT|to_oflags, S_IRUSR|S_IWUSR)) < 0) {
         *err_status = ""clone_open_dst"";
         goto done;
     }
+    if (!(to_fp = fdopen(to_fd, ""w""))) {
+        *err_status = ""clone_fdopen_dst"";
+        goto done;
+    }
 
     if (transfer_file_attrs(from_fp, to_fp, err_status) < 0)
         goto done;
@@ -897,8 +918,15 @@ static int clone_file(const char *from, const char *to,
  done:
     if (from_fp != NULL)
         fclose(from_fp);
-    if (to_fp != NULL && fclose(to_fp) != 0)
+    if (to_fp != NULL) {
+        if (fclose(to_fp) != 0) {
+            *err_status = ""clone_fclose_dst"";
+            result = -1;
+        }
+    } else if (to_fd >= 0 && close(to_fd) < 0) {
+        *err_status = ""clone_close_dst"";
         result = -1;
+    }
     if (result != 0)
         unlink(to);
     if (result == 0)
@@ -1132,7 +1160,7 @@ int transform_save(struct augeas *aug, struct tree *xfm,
                 goto done;
             }
 
-            r = clone_file(augorig_canon, augsave, &err_status, 1);
+            r = clone_file(augorig_canon, augsave, &err_status, 1, 1);
             if (r != 0) {
                 dyn_err_status = strappend(err_status, ""_augsave"");
                 goto done;
@@ -1140,7 +1168,7 @@ int transform_save(struct augeas *aug, struct tree *xfm,
         }
     }
 
-    r = clone_file(augtemp, augdest, &err_status, copy_if_rename_fails);
+    r = clone_file(augtemp, augdest, &err_status, copy_if_rename_fails, 0);
     if (r != 0) {
         dyn_err_status = strappend(err_status, ""_augtemp"");
         goto done;
@@ -1298,7 +1326,7 @@ int remove_file(struct augeas *aug, struct tree *tree) {
                 goto error;
         }
 
-        r = clone_file(augorig_canon, augsave, &err_status, 1);
+        r = clone_file(augorig_canon, augsave, &err_status, 1, 1);
         if (r != 0) {
             dyn_err_status = strappend(err_status, ""_augsave"");
             goto error;
diff --git a/tests/Makefile.am b/tests/Makefile.am
index f6645378a..d4697649d 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -184,8 +184,9 @@ check_SCRIPTS = \
   $(lens_tests) \
   test-get.sh test-augtool.sh \
   test-put-symlink.sh test-put-symlink-augnew.sh \
-  test-put-symlink-augsave.sh test-put-symlink-augtemp.sh test-save-empty.sh \
-  test-bug-1.sh test-idempotent.sh test-preserve.sh \
+  test-put-symlink-augsave.sh test-put-symlink-augtemp.sh \
+  test-put-mount.sh test-put-mount-augnew.sh test-put-mount-augsave.sh \
+  test-save-empty.sh test-bug-1.sh test-idempotent.sh test-preserve.sh \
   test-events-saved.sh test-save-mode.sh test-unlink-error.sh \
   test-augtool-empty-line.sh test-augtool-modify-root.sh
 
diff --git a/tests/test-put-mount-augnew.sh b/tests/test-put-mount-augnew.sh
new file mode 100755
index 000000000..cb95bdacd
--- /dev/null
+++ b/tests/test-put-mount-augnew.sh
@@ -0,0 +1,69 @@
+#! /bin/bash
+
+# Test that we can write into a bind mount placed at PATH.augnew with the
+# copy_if_rename_fails flag.
+# This requires that EXDEV or EBUSY is returned from rename(2) to activate the
+# code path, so set up a bind mount on Linux.
+
+if [ $UID -ne 0 -o ""$(uname -s)"" != ""Linux"" ]; then
+    echo ""Test can only be run as root on Linux to create bind mounts""
+    exit 77
+fi
+
+ROOT=$abs_top_builddir/build/test-put-mount-augnew
+LENSES=$abs_top_srcdir/lenses
+
+HOSTS=$ROOT/etc/hosts
+HOSTS_AUGNEW=${HOSTS}.augnew
+TARGET=$ROOT/other/real_hosts
+
+rm -rf $ROOT
+mkdir -p $(dirname $HOSTS)
+mkdir -p $(dirname $TARGET)
+
+echo 127.0.0.1 localhost > $HOSTS
+touch $TARGET $HOSTS_AUGNEW
+
+mount --bind $TARGET $HOSTS_AUGNEW
+Exit() {
+    umount $HOSTS_AUGNEW
+    exit $1
+}
+
+HOSTS_SUM=$(sum $HOSTS)
+
+augtool --nostdinc -I $LENSES -r $ROOT --new <<EOF
+set /augeas/save/copy_if_rename_fails 1
+set /files/etc/hosts/1/alias myhost
+save
+print /augeas//error
+EOF
+
+if [ ! -f $HOSTS ] ; then
+    echo ""/etc/hosts is no longer a regular file""
+    Exit 1
+fi
+if [ ! ""x${HOSTS_SUM}"" = ""x$(sum $HOSTS)"" ]; then
+    echo ""/etc/hosts has changed""
+    Exit 1
+fi
+if [ ! ""x${HOSTS_SUM}"" = ""x$(sum $HOSTS)"" ]; then
+    echo ""/etc/hosts has changed""
+    Exit 1
+fi
+
+if [ ! -s $HOSTS_AUGNEW ]; then
+    echo ""/etc/hosts.augnew is empty""
+    Exit 1
+fi
+if [ ! -s $TARGET ]; then
+    echo ""/other/real_hosts is empty""
+    Exit 1
+fi
+
+if ! grep myhost $TARGET >/dev/null; then
+    echo ""/other/real_hosts does not contain the modification""
+    Exit 1
+fi
+
+Exit 0
diff --git a/tests/test-put-mount-augsave.sh b/tests/test-put-mount-augsave.sh
new file mode 100755
index 000000000..31fcfca6b
--- /dev/null
+++ b/tests/test-put-mount-augsave.sh
@@ -0,0 +1,62 @@
+#! /bin/bash
+
+# Test that we don't follow bind mounts when writing to .augsave.
+# This requires that EXDEV or EBUSY is returned from rename(2) to activate the
+# code path, so set up a bind mount on Linux.
+
+if [ $UID -ne 0 -o ""$(uname -s)"" != ""Linux"" ]; then
+    echo ""Test can only be run as root on Linux to create bind mounts""
+    exit 77
+fi
+
+actual() {
+    (augtool --nostdinc -I $LENSES -r $ROOT --backup | grep ^/augeas) <<EOF
+    set /augeas/save/copy_if_rename_fails 1
+    set /files/etc/hosts/1/alias myhost
+    save
+    print /augeas//error
+EOF
+}
+
+expected() {
+    cat <<EOF
+/augeas/files/etc/hosts/error = ""clone_unlink_dst_augsave""
+/augeas/files/etc/hosts/error/message = ""Device or resource busy""
+EOF
+}
+
+ROOT=$abs_top_builddir/build/test-put-mount-augsave
+LENSES=$abs_top_srcdir/lenses
+
+HOSTS=$ROOT/etc/hosts
+HOSTS_AUGSAVE=${HOSTS}.augsave
+
+ATTACK_FILE=$ROOT/other/attack
+
+rm -rf $ROOT
+mkdir -p $(dirname $HOSTS)
+mkdir -p $(dirname $ATTACK_FILE)
+
+echo 127.0.0.1 localhost > $HOSTS
+touch $ATTACK_FILE $HOSTS_AUGSAVE
+
+mount --bind $ATTACK_FILE $HOSTS_AUGSAVE
+Exit() {
+    umount $HOSTS_AUGSAVE
+    exit $1
+}
+
+ACTUAL=$(actual)
+EXPECTED=$(expected)
+if [ ""$ACTUAL"" != ""$EXPECTED"" ]; then
+    echo ""No error when trying to unlink augsave (a bind mount):""
+    echo ""$ACTUAL""
+    exit 1
+fi
+
+if [ -s $ATTACK_FILE ]; then
+    echo ""/other/attack now contains data, should be blank""
+    Exit 1
+fi
+
+Exit 0
diff --git a/tests/test-put-mount.sh b/tests/test-put-mount.sh
new file mode 100755
index 000000000..210bc10ac
--- /dev/null
+++ b/tests/test-put-mount.sh
@@ -0,0 +1,55 @@
+#! /bin/bash
+
+# Test that we can write into a bind mount with the copy_if_rename_fails flag.
+# This requires that EXDEV or EBUSY is returned from rename(2) to activate the
+# code path, so set up a bind mount on Linux.
+
+if [ $UID -ne 0 -o ""$(uname -s)"" != ""Linux"" ]; then
+    echo ""Test can only be run as root on Linux to create bind mounts""
+    exit 77
+fi
+
+ROOT=$abs_top_builddir/build/test-put-mount
+LENSES=$abs_top_srcdir/lenses
+
+HOSTS=$ROOT/etc/hosts
+TARGET=$ROOT/other/real_hosts
+
+rm -rf $ROOT
+mkdir -p $(dirname $HOSTS)
+mkdir -p $(dirname $TARGET)
+
+echo 127.0.0.1 localhost > $TARGET
+touch $HOSTS
+
+mount --bind $TARGET $HOSTS
+Exit() {
+    umount $HOSTS
+    exit $1
+}
+
+HOSTS_SUM=$(sum $HOSTS)
+
+augtool --nostdinc -I $LENSES -r $ROOT <<EOF
+set /augeas/save/copy_if_rename_fails 1
+set /files/etc/hosts/1/alias myhost
+save
+print /augeas//error
+EOF
+
+if [ ! ""x${HOSTS_SUM}"" != ""x$(sum $HOSTS)"" ]; then
+    echo ""/etc/hosts hasn't changed""
+    Exit 1
+fi
+
+if [ ! ""x${HOSTS_SUM}"" != ""x$(sum $TARGET)"" ]; then
+    echo ""/other/real_hosts hasn't changed""
+    Exit 1
+fi
+
+if ! grep myhost $TARGET >/dev/null; then
+    echo ""/other/real_hosts does not contain the modification""
+    Exit 1
+fi
+
+Exit 0"
GHSA-84j7-475p-hp8v,"From c36491756f68a9d6a8b3a49e7e5eb07fe6f1332f Mon Sep 17 00:00:00 2001
From: Nate Berkopec <nate.berkopec@gmail.com>
Date: Thu, 27 Feb 2020 11:52:27 -0600
Subject: [PATCH] Merge pull request from GHSA-84j7-475p-hp8v

header value could inject a CR or LF and inject their own HTTP response.
---
 benchmarks/wrk/hello.sh              |  2 +-
 benchmarks/wrk/many_long_headers.sh  |  6 ++++++
 benchmarks/wrk/realistic_response.sh |  6 ++++++
 lib/puma/const.rb                    |  1 +
 lib/puma/server.rb                   |  2 ++
 test/rackup/many_long_headers.ru     |  9 +++++++++
 test/rackup/realistic_response.ru    | 11 +++++++++++
 test/test_puma_server.rb             | 19 +++++++++++++++++++
 8 files changed, 55 insertions(+), 1 deletion(-)
 create mode 100755 benchmarks/wrk/many_long_headers.sh
 create mode 100755 benchmarks/wrk/realistic_response.sh
 create mode 100644 test/rackup/many_long_headers.ru
 create mode 100644 test/rackup/realistic_response.ru

diff --git a/benchmarks/wrk/hello.sh b/benchmarks/wrk/hello.sh
index 9378366945..ca51b74671 100755
--- a/benchmarks/wrk/hello.sh
+++ b/benchmarks/wrk/hello.sh
@@ -3,6 +3,6 @@
 bundle exec bin/puma -t 4 test/rackup/hello.ru &
 PID1=$!
 sleep 5
-wrk -c 4 --latency http://localhost:9292
+wrk -c 4 -d 30 --latency http://localhost:9292
 
 kill $PID1
diff --git a/benchmarks/wrk/many_long_headers.sh b/benchmarks/wrk/many_long_headers.sh
new file mode 100755
index 0000000000..f0378c00e7
--- /dev/null
+++ b/benchmarks/wrk/many_long_headers.sh
@@ -0,0 +1,6 @@
+bundle exec bin/puma -t 4 test/rackup/many_long_headers.ru &
+PID1=$!
+sleep 5
+wrk -c 4 -d 30 --latency http://localhost:9292
+
+kill $PID1
diff --git a/benchmarks/wrk/realistic_response.sh b/benchmarks/wrk/realistic_response.sh
new file mode 100755
index 0000000000..b8e74a6c44
--- /dev/null
+++ b/benchmarks/wrk/realistic_response.sh
@@ -0,0 +1,6 @@
+bundle exec bin/puma -t 4 test/rackup/realistic_response.ru &
+PID1=$!
+sleep 5
+wrk -c 4 -d 30 --latency http://localhost:9292
+
+kill $PID1
diff --git a/lib/puma/const.rb b/lib/puma/const.rb
index 504b33126c..c3c8bcd15c 100644
--- a/lib/puma/const.rb
+++ b/lib/puma/const.rb
@@ -228,6 +228,7 @@ module Const
     COLON = "": "".freeze
 
     NEWLINE = ""\n"".freeze
+    CRLF_REGEX = /[\r\n]/.freeze
 
     HIJACK_P = ""rack.hijack?"".freeze
     HIJACK = ""rack.hijack"".freeze
diff --git a/lib/puma/server.rb b/lib/puma/server.rb
index fb18349956..a57bd3878d 100644
--- a/lib/puma/server.rb
+++ b/lib/puma/server.rb
@@ -686,6 +686,8 @@ def handle_request(req, lines)
           status, headers, res_body = @app.call(env)
 
           return :async if req.hijacked
+          # Checking to see if an attacker is trying to inject headers into the response
+          headers.reject! { |_k, v| CRLF_REGEX =~ v.to_s }
 
           status = status.to_i
 
diff --git a/test/rackup/many_long_headers.ru b/test/rackup/many_long_headers.ru
new file mode 100644
index 0000000000..f9c5f53e8d
--- /dev/null
+++ b/test/rackup/many_long_headers.ru
@@ -0,0 +1,9 @@
+require 'securerandom'
+
+long_header_hash = {}
+
+30.times do |i|
+  long_header_hash[""X-My-Header-#{i}""] = SecureRandom.hex(1000)
+end
+
+run lambda { |env| [200, long_header_hash, [""Hello World""]] }
diff --git a/test/rackup/realistic_response.ru b/test/rackup/realistic_response.ru
new file mode 100644
index 0000000000..8b6ede20d2
--- /dev/null
+++ b/test/rackup/realistic_response.ru
@@ -0,0 +1,11 @@
+require 'securerandom'
+
+long_header_hash = {}
+
+25.times do |i|
+  long_header_hash[""X-My-Header-#{i}""] = SecureRandom.hex(25)
+end
+
+response = SecureRandom.hex(100_000) # A 100kb document
+
+run lambda { |env| [200, long_header_hash.dup, [response.dup]] }
diff --git a/test/test_puma_server.rb b/test/test_puma_server.rb
index 738b9e58f4..6e198b7886 100644
--- a/test/test_puma_server.rb
+++ b/test/test_puma_server.rb
@@ -771,4 +771,23 @@ def test_open_connection_wait_no_queue
     @server = Puma::Server.new @app, @events, queue_requests: false
     test_open_connection_wait
   end
+
+  # https://github.com/ruby/ruby/commit/d9d4a28f1cdd05a0e8dabb36d747d40bbcc30f16
+  def test_prevent_response_splitting_headers
+    server_run app: ->(_) { [200, {'X-header' => ""malicious\r\nCookie: hack""}, [""Hello""]] }
+    data = send_http_and_read ""HEAD / HTTP/1.0\r\n\r\n""
+    refute_match 'hack', data
+  end
+
+  def test_prevent_response_splitting_headers_cr
+    server_run app: ->(_) { [200, {'X-header' => ""malicious\rCookie: hack""}, [""Hello""]] }
+    data = send_http_and_read ""HEAD / HTTP/1.0\r\n\r\n""
+    refute_match 'hack', data
+  end
+
+  def test_prevent_response_splitting_headers_lf
+    server_run app: ->(_) { [200, {'X-header' => ""malicious\nCookie: hack""}, [""Hello""]] }
+    data = send_http_and_read ""HEAD / HTTP/1.0\r\n\r\n""
+    refute_match 'hack', data
+  end
 end"
OSV-2022-17,"From ed611d3754bc38f2d9c9aabf0fb7becd8d8fdc7d Mon Sep 17 00:00:00 2001
From: Yann Ylavic <ylavic@apache.org>
Date: Thu, 6 Jan 2022 17:16:34 +0000
Subject: [PATCH] Revert r1896758 and r1896746 (travis debug temporaries).
 [skip ci]

git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1896759 13f79535-47bb-0310-9956-ffa450edef68
---
 .travis.yml              | 1 -
 test/travis_run_linux.sh | 6 +++---
 2 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index e60220831bf..efe827e85c9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -248,7 +248,6 @@ jobs:
       env: APR_VERSION=1.7.x APR_CONFIG=""--enable-pool-debug""
            APU_VERSION=1.7.x APU_CONFIG=""--with-crypto --with-ldap""
            CONFIG=""--enable-mods-shared=reallyall --enable-mpms-shared=all --with-mpm=event""
-           TESTS=""t/ssl/ocsp.t"" TEST_ARGS=""-verbose -trace=debug""
            TEST_MALLOC=1 TEST_SSL=1
            CLEAR_CACHE=1
     # -------------------------------------------------------------------------
diff --git a/test/travis_run_linux.sh b/test/travis_run_linux.sh
index 03c2e475a40..c2a08eeb22e 100755
--- a/test/travis_run_linux.sh
+++ b/test/travis_run_linux.sh
@@ -184,9 +184,9 @@ if ! test -v SKIP_TESTING; then
         popd
     fi
 
-    #if test $RV -ne 0 && test -f test/perl-framework/t/logs/error_log; then
-    #    grep -v ':\(debug\|trace[12345678]\)\]' test/perl-framework/t/logs/error_log
-    #fi
+    if test $RV -ne 0 && test -f test/perl-framework/t/logs/error_log; then
+        grep -v ':\(debug\|trace[12345678]\)\]' test/perl-framework/t/logs/error_log
+    fi
 
     if test -v TEST_CORE -a $RV -eq 0; then
         # Run HTTP/2 tests."
CVE-2013-2012,"From c763b2afadb188ab52849c21d43d2e8fe5b8800a Mon Sep 17 00:00:00 2001
From: William Ting <io@williamting.com>
Date: Wed, 24 Apr 2013 19:05:56 -0500
Subject: [PATCH] better fix for custom installation directories

---
 bin/autojump    | 2 +-
 bin/autojump.sh | 4 ++--
 install.sh      | 3 ++-
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/bin/autojump b/bin/autojump
index 9d145b97..819535ae 100755
--- a/bin/autojump
+++ b/bin/autojump
@@ -34,7 +34,7 @@ import re
 import shutil
 from tempfile import NamedTemporaryFile
 
-VERSION = 'release-v21.5.6'
+VERSION = 'release-v21.5.7'
 MAX_KEYWEIGHT = 1000
 MAX_STORED_PATHS = 1000
 COMPLETION_SEPARATOR = '__'
diff --git a/bin/autojump.sh b/bin/autojump.sh
index 528e49a4..f631d95d 100644
--- a/bin/autojump.sh
+++ b/bin/autojump.sh
@@ -15,7 +15,7 @@ elif [ -s /etc/profile.d/autojump.${shell} ]; then
 	source /etc/profile.d/autojump.${shell}
 
 # check custom install locations (modified by Homebrew or using --destdir option)
-elif [ -s /destdir_${RANDOM}_install/autojump.${shell} ]; then
-	source /destdir_${RANDOM}_install/autojump.${shell}
+#custom#	elif [ -s destdir_install/autojump.${shell} ]; then
+#custom#		source destdir_install/autojump.${shell}
 
 fi
diff --git a/install.sh b/install.sh
index 58abc53f..259970d0 100755
--- a/install.sh
+++ b/install.sh
@@ -222,7 +222,8 @@ install -v -m 0755 ./bin/_j ${destdir}${zshsharedir} || exit 1
 
 # MODIFY AUTOJUMP.SH FOR CUSTOM INSTALLS
 if [[ -z ${local} ]] && [[ -z ${global} ]]; then
-    sed -i ""s:/destdir_.*_install:${destdir}etc/profile.d:g"" ${destdir}etc/profile.d/autojump.sh
+    sed -i ""s:#custom#\t::g"" ${destdir}etc/profile.d/autojump.sh
+    sed -i ""s:destdir_install\t:${destdir}etc/profile.d:g"" ${destdir}etc/profile.d/autojump.sh
 fi
 
 # DISPLAY ADD MESSAGE"
CVE-2010-2060,"From 2e8e8c6387ecdf5923dfc4d7718d18eba1b0873d Mon Sep 17 00:00:00 2001
From: Keith Rarick <kr@xph.us>
Date: Sun, 23 May 2010 00:13:28 -0700
Subject: [PATCH] Discard job body bytes if the job is too big.

Previously, a malicious user could craft a job payload and inject
beanstalk commands without the client application knowing. (An
extra-careful client library could check the size of the job body before
sending the put command, but most libraries do not do this, nor should
they have to.)

Reported by Graham Barr.
---
 check-one.sh              | 2 +-
 prot.c                    | 3 ++-
 sh-tests/too-big.commands | 3 +++
 sh-tests/too-big.expected | 1 +
 4 files changed, 7 insertions(+), 2 deletions(-)
 create mode 100644 sh-tests/too-big.commands
 create mode 100644 sh-tests/too-big.expected

diff --git a/check-one.sh b/check-one.sh
index 709993f4..bcfb7d4b 100755
--- a/check-one.sh
+++ b/check-one.sh
@@ -34,7 +34,7 @@ if [ ! -x ./beanstalkd ]; then
   exit 2
 fi
 
-start_beanstalkd
+start_beanstalkd '' '-z 10'
 
 # Run the test
 fgrep -v ""#"" $commands | $nc $server $port > ""$tmpf""
diff --git a/prot.c b/prot.c
index 93fe8cec..481b0ede 100644
--- a/prot.c
+++ b/prot.c
@@ -1196,7 +1196,8 @@ dispatch_cmd(conn c)
         if (errno) return reply_msg(c, MSG_BAD_FORMAT);
 
         if (body_size > job_data_size_limit) {
-            return reply_msg(c, MSG_JOB_TOO_BIG);
+            /* throw away the job body and respond with JOB_TOO_BIG */
+            return skip(c, body_size + 2, MSG_JOB_TOO_BIG);
         }
 
         /* don't allow trailing garbage */
diff --git a/sh-tests/too-big.commands b/sh-tests/too-big.commands
new file mode 100644
index 00000000..d85cd399
--- /dev/null
+++ b/sh-tests/too-big.commands
@@ -0,0 +1,3 @@
+put 0 0 0 11
+delete 9999
+quit
diff --git a/sh-tests/too-big.expected b/sh-tests/too-big.expected
new file mode 100644
index 00000000..88448bcd
--- /dev/null
+++ b/sh-tests/too-big.expected
@@ -0,0 +1 @@
+JOB_TOO_BIG"
OSV-2021-120,"From 24176ffff471a25fa765d5fdd475c5dec2b59837 Mon Sep 17 00:00:00 2001
From: Stefan Profanter <git@s.profanter.me>
Date: Tue, 23 Jan 2018 15:20:14 +0100
Subject: [PATCH] Build tcc from source

---
 .travis.yml                                 |  1 -
 tools/travis/travis_linux_before_install.sh | 12 ++++++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/.travis.yml b/.travis.yml
index 73b89f25af9..0fb0a000841 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -78,7 +78,6 @@ addons:
       - mingw-w64
       - python-six
       - python3-six
-      - tcc
       - texlive-fonts-recommended
       - texlive-latex-extra
       - texlive-latex-recommended
diff --git a/tools/travis/travis_linux_before_install.sh b/tools/travis/travis_linux_before_install.sh
index e6f2251606a..44e0edd6b03 100644
--- a/tools/travis/travis_linux_before_install.sh
+++ b/tools/travis/travis_linux_before_install.sh
@@ -18,6 +18,18 @@ if [ -z ${DOCKER+x} ]; then
 		sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install clang-3.9 clang-tidy-3.9 libfuzzer-3.9-dev
 	fi
 
+	if [ ""$CC"" = ""tcc"" ]; then
+		mkdir tcc_install && cd tcc_install
+		wget https://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27.tar.bz2
+		tar xvf tcc-0.9.27.tar.bz2
+		cd tcc-0.9.27
+		./configure
+		make
+		sudo make install
+		cd ../..
+		rm -rf tcc_install
+	fi
+
 	sudo add-apt-repository -y ppa:lttng/ppa
 	sudo apt-get update -qq
 	sudo apt-get install -y liburcu4 liburcu-dev"
CVE-2020-10788,"From 581cc9007bbfba84a2575729d5d903ab3a8f25ee Mon Sep 17 00:00:00 2001
From: nook24 <info@nook24.eu>
Date: Wed, 26 Feb 2020 11:25:07 +0100
Subject: [PATCH] ITC-1720 V3 Generate random API Key for WebSocket connections

---
 app/SETUP.sh | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/app/SETUP.sh b/app/SETUP.sh
index eaeeb0bc13..9993b52960 100755
--- a/app/SETUP.sh
+++ b/app/SETUP.sh
@@ -1,7 +1,16 @@
 #!/bin/bash
+
+INIFILE=/etc/openitcockpit/mysql.cnf
+
 ln -s /etc/openitcockpit/nagios.cfg /opt/openitc/nagios/etc/nagios.cfg
 sudo -g www-data /usr/share/openitcockpit/app/Console/cake schema update -y --connection default --file schema_itcockpit.php -s 26
 #sudo -g www-data /usr/share/openitcockpit/app/Console/cake schema update --plugin NagiosModule --file ndo.php --connection default
+
+echo ""---------------------------------------------------------------""
+echo ""Create new WebSocket Key""
+WEBSOCKET_KEY=$(php -r ""echo bin2hex(openssl_random_pseudo_bytes(80, \$cstrong));"")
+mysql ""--defaults-extra-file=${INIFILE}"" -e ""UPDATE systemsettings SET \`systemsettings\`.\`value\`='${WEBSOCKET_KEY}' WHERE \`key\`='SUDO_SERVER.API_KEY';""
+
 oitc AclExtras.AclExtras aco_sync
 oitc compress
 oitc nagios_export --all
@@ -10,6 +19,7 @@ CODENAME=$(lsb_release -sc)
 if [ $CODENAME = ""jessie"" ] || [ $CODENAME = ""xenial"" ] || [ $CODENAME = ""bionic"" ] || [ $CODENAME = ""stretch"" ]; then
     systemctl restart nagios
     systemctl restart sudo_server
+    systemctl restart push_notification
 fi
 
 if [ $CODENAME = ""trusty"" ]; then"
