vuln_id,code_diff
CVE-2022-23641,"From a34075d205a8857e29574ffd82aaece0c467565e Mon Sep 17 00:00:00 2001
From: Krzysztof Kotlarek <kotlarek.krzysztof@gmail.com>
Date: Mon, 14 Feb 2022 12:11:09 +1100
Subject: [PATCH] SECURITY: Onebox response timeout and size limit (#15927)

Validation to ensure that Onebox request is no longer than 10 seconds and response size is not bigger than 1 MB
---
 lib/final_destination.rb                  | 17 ++++++++++++++---
 spec/components/final_destination_spec.rb | 21 +++++++++++++++++++++
 2 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/lib/final_destination.rb b/lib/final_destination.rb
index 2fbc5711b1833..078fd4fd781f7 100644
--- a/lib/final_destination.rb
+++ b/lib/final_destination.rb
@@ -8,6 +8,8 @@
 
 # Determine the final endpoint for a Web URI, following redirects
 class FinalDestination
+  MAX_REQUEST_TIME_SECONDS = 10
+  MAX_REQUEST_SIZE_BYTES = 1_048_576 # 1024 * 1024
 
   def self.clear_https_cache!(domain)
     key = redis_https_key(domain)
@@ -203,12 +205,21 @@ def resolve
     middlewares = Excon.defaults[:middlewares]
     middlewares << Excon::Middleware::Decompress if @http_verb == :get
 
+    request_start_time = Time.now
+    response_body = +""""
+    request_validator = lambda do |chunk, _remaining_bytes, _total_bytes|
+      response_body << chunk
+      raise Excon::Errors::ExpectationFailed.new(""response size too big: #{@uri.to_s}"") if response_body.bytesize > MAX_REQUEST_SIZE_BYTES
+      raise Excon::Errors::ExpectationFailed.new(""connect timeout reached: #{@uri.to_s}"") if Time.now - request_start_time > MAX_REQUEST_TIME_SECONDS
+    end
+
     response = Excon.public_send(@http_verb,
       @uri.to_s,
       read_timeout: timeout,
       connect_timeout: timeout,
       headers: headers,
-      middlewares: middlewares
+      middlewares: middlewares,
+      response_block: request_validator
     )
 
     location = nil
@@ -220,12 +231,12 @@ def resolve
       # Cache body of successful `get` requests
       if @http_verb == :get
         if Oneboxer.cache_response_body?(@uri)
-          Oneboxer.cache_response_body(@uri.to_s, response.body)
+          Oneboxer.cache_response_body(@uri.to_s, response_body)
         end
       end
 
       if @follow_canonical
-        next_url = fetch_canonical_url(response.body)
+        next_url = fetch_canonical_url(response_body)
 
         if next_url.to_s.present? && next_url != @uri
           @follow_canonical = false
diff --git a/spec/components/final_destination_spec.rb b/spec/components/final_destination_spec.rb
index e9548ead0b919..b1ce1a262a0fe 100644
--- a/spec/components/final_destination_spec.rb
+++ b/spec/components/final_destination_spec.rb
@@ -49,6 +49,13 @@
     }
   end
 
+  let(:body_response) do
+    {
+      status: 200,
+      body: ""<body>test</body>""
+    }
+  end
+
   def canonical_follow(from, dest)
     stub_request(:get, from).to_return(
       status: 200,
@@ -182,6 +189,20 @@ def fd(url)
       end
     end
 
+    it 'raises error when response is too big' do
+      stub_const(described_class, ""MAX_REQUEST_SIZE_BYTES"", 1) do
+        stub_request(:get, ""https://codinghorror.com/blog"").to_return(body_response)
+        final = FinalDestination.new('https://codinghorror.com/blog', opts.merge(follow_canonical: true))
+        expect { final.resolve }.to raise_error(Excon::Errors::ExpectationFailed, ""response size too big: https://codinghorror.com/blog"")
+      end
+    end
+
+    it 'raises error when response is too slow' do
+      stub_request(:get, ""https://codinghorror.com/blog"").to_return(lambda { |request| freeze_time(11.seconds.from_now) ; body_response })
+      final = FinalDestination.new('https://codinghorror.com/blog', opts.merge(follow_canonical: true))
+      expect { final.resolve }.to raise_error(Excon::Errors::ExpectationFailed, ""connect timeout reached: https://codinghorror.com/blog"")
+    end
+
     context 'follows canonical links' do
       it 'resolves the canonical link as the final destination' do
         canonical_follow(""https://eviltrout.com"", ""https://codinghorror.com/blog"")"
CVE-2013-3703,"From 06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Adrian=20Schr=C3=B6ter?= <adrian@suse.de>
Date: Fri, 5 Jul 2013 17:07:29 +0200
Subject: [PATCH] [api] move write permission checks from controller to package
 and project model

This is just the first part doing the checks. Removing the old ones is another step.
---
 .../app/controllers/application_controller.rb |  8 ++++
 src/api/app/models/package.rb                 | 22 ++++++++++
 src/api/app/models/project.rb                 | 41 +++++++++++++++++--
 src/api/test/unit/project_test.rb             | 11 +++++
 4 files changed, 79 insertions(+), 3 deletions(-)

diff --git a/src/api/app/controllers/application_controller.rb b/src/api/app/controllers/application_controller.rb
index 7682ee787b6..50988d4e537 100644
--- a/src/api/app/controllers/application_controller.rb
+++ b/src/api/app/controllers/application_controller.rb
@@ -442,6 +442,14 @@ def pass_to_backend( path = nil )
     render :text => xml_text, :status => http_status
   end
 
+  rescue_from Project::WritePermissionError do |exception|
+    render_error :status => 403, :errorcode => ""modify_project_no_permission"", :message => exception.message
+  end
+
+  rescue_from Package::WritePermissionError do |exception|
+    render_error :status => 403, :errorcode => ""modify_package_no_permission"", :message => exception.message
+  end
+
   rescue_from Suse::Backend::NotFoundError, ActiveRecord::RecordNotFound do |exception|
     render_error message: exception.message, status: 404, errorcode: 'not_found'
   end
diff --git a/src/api/app/models/package.rb b/src/api/app/models/package.rb
index 77c45891939..b221a142620 100644
--- a/src/api/app/models/package.rb
+++ b/src/api/app/models/package.rb
@@ -15,6 +15,9 @@ class DeleteError < APIException
   class SaveError < APIException
     setup ""package_save_error""
   end
+  class WritePermissionError < APIException
+    setup ""package_write_permission_error""
+  end
   class ReadAccessError < APIException
     setup 'unknown_package', 404, ""Unknown package""
   end
@@ -239,6 +242,14 @@ def is_locked?
     return self.project.is_locked?
   end
 
+  def check_write_access!
+    return if Rails.env.test? and User.current.nil? # for unit tests
+
+    unless User.current.can_modify_package? self
+      raise WritePermissionError, ""No permission to modify package '#{self.name}' for user '#{User.current.login}'""
+    end
+  end
+
   # NOTE: this is no permission check, should it be added ?
   def can_be_deleted?
     # check if other packages have me as devel package
@@ -285,14 +296,17 @@ def sources_changed
   end
 
   def add_package_kind( kinds )
+    check_write_access!
     private_set_package_kind( kinds, nil, true )
   end
 
   def set_package_kind( kinds = nil )
+    check_write_access!
     private_set_package_kind( kinds )
   end
 
   def set_package_kind_from_commit( commit )
+    check_write_access!
     private_set_package_kind( nil, commit )
   end
 
@@ -419,6 +433,7 @@ def resolve_devel_package
   end
 
   def update_from_xml( xmlhash )
+    check_write_access!
     self.title = xmlhash.value('title')
     self.description = xmlhash.value('description')
     self.bcntsynctag = nil
@@ -616,6 +631,7 @@ def write_attributes(comment=nil)
   end
 
   def store(opts = {})
+    # no write access check here, since this operation may will disable this permission ...
     @commit_opts = opts
     save!
   end
@@ -649,6 +665,7 @@ def find_attribute( namespace, name, binary=nil )
   end
 
   def add_user( user, role )
+    check_write_access!
     unless role.kind_of? Role
       role = Role.get_by_title(role)
     end
@@ -669,6 +686,7 @@ def add_user( user, role )
   end
 
   def add_group( group, role )
+    check_write_access!
     unless role.kind_of? Role
       role = Role.get_by_title(role)
     end
@@ -933,14 +951,17 @@ def expand_flags
   end
 
   def remove_all_persons
+    check_write_access!
     self.package_user_role_relationships.delete_all
   end
 
   def remove_all_groups
+    check_write_access!
     self.package_group_role_relationships.delete_all
   end
 
   def remove_role(what, role)
+    check_write_access!
     if what.kind_of? Group
       rel = self.package_group_role_relationships.where(bs_group_id: what.id)
     else
@@ -954,6 +975,7 @@ def remove_role(what, role)
   end
 
   def add_role(what, role)
+    check_write_access!
     self.transaction do
       if what.kind_of? Group
         self.package_group_role_relationships.create!(role: role, group: what)
diff --git a/src/api/app/models/project.rb b/src/api/app/models/project.rb
index 38c3978dbe5..33c88c775b5 100644
--- a/src/api/app/models/project.rb
+++ b/src/api/app/models/project.rb
@@ -19,6 +19,9 @@ class UnknownObjectError < APIException
   class SaveError < APIException
     setup ""project_save_error""
   end
+  class WritePermissionError < APIException
+    setup ""project_write_permission_error""
+  end
   class ForbiddenError < APIException
     setup(""change_project_protection_level"", 403,
           ""admin rights are required to raise the protection level of a project (it won't be safe anyway)"")
@@ -247,6 +250,15 @@ def find_remote_project(name, skip_access=false)
     end
   end
 
+  def check_write_access!
+    return if Rails.env.test? and User.current.nil? # for unit tests
+
+    # the can_create_check is inconsistent with package class check_write_access! check
+    unless User.current.can_modify_project?(self) || User.current.can_create_project?(self.name)
+      raise WritePermissionError, ""No permission to modify project '#{self.name}' for user '#{User.current.login}'""
+    end
+  end
+
   def find_linking_projects
       sql =<<-END_SQL
       SELECT prj.*
@@ -289,6 +301,8 @@ def can_be_deleted?
   end
 
   def update_from_xml(xmlhash, force=nil)
+    check_write_access!
+
     # check for raising read access permissions, which can't get ensured atm
     unless self.new_record? || self.disabled_for?('access', nil, nil)
       if FlagHelper.xml_disabled_for?(xmlhash, 'access')
@@ -892,6 +906,8 @@ def find_parent
   end
 
   def add_user( user, role )
+    check_write_access!
+
     unless role.kind_of? Role
       role = Role.get_by_title(role)
     end
@@ -912,6 +928,8 @@ def add_user( user, role )
   end
 
   def add_group( group, role )
+    check_write_access!
+
     unless role.kind_of? Role
       role = Role.get_by_title(role)
     end
@@ -1523,6 +1541,8 @@ def project_type
   end
 
   def set_project_type(project_type_name)
+    check_write_access!
+
     mytype = DbProjectType.find_by_name(project_type_name)
     return false unless mytype
     self.type_id = mytype.id
@@ -1535,6 +1555,8 @@ def maintenance_project
   end
 
   def set_maintenance_project(project)
+    check_write_access!
+
     if project.class == Project
       self.maintenance_project_id = project.id
       self.save!
@@ -1583,6 +1605,11 @@ def repositories_linking_project(tproj, backend)
 
   # called either directly or from delayed job
   def do_project_copy( params )
+    # set user if nil, needed for delayed job in Package model
+    User.current ||= User.find_by_login(params[:user])
+
+    check_write_access!
+
     # copy entire project in the backend
     begin
       path = ""/source/#{URI.escape(self.name)}""
@@ -1593,9 +1620,6 @@ def do_project_copy( params )
       # we need to check results of backend in any case (also timeout error eg)
     end
 
-    # set user if nil, needed for delayed job in Package model
-    User.current ||= User.find_by_login(params[:user])
-
     # restore all package meta data objects in DB
     backend_pkgs = Collection.find :package, :match => ""@project='#{self.name}'""
     backend_pkgs.each_package do |package|
@@ -1611,6 +1635,8 @@ def do_project_copy( params )
   def do_project_release( params )
     User.current ||= User.find_by_login(params[:user])
 
+    check_write_access!
+
     packages.each do |pkg|
       pkg.project.repositories.each do |repo|
         next if params[:repository] and params[:repository] != repo.name
@@ -1647,6 +1673,8 @@ def user_has_role?(user, role)
   end
 
   def remove_role(what, role)
+    check_write_access!
+
     if what.kind_of? Group
       rel = self.project_group_role_relationships.where(bs_group_id: what.id)
     else
@@ -1660,6 +1688,8 @@ def remove_role(what, role)
   end
  
   def add_role(what, role)
+    check_write_access!
+
     self.transaction do
       if what.kind_of? Group
         self.project_group_role_relationships.create!(role: role, group: what)
@@ -1684,6 +1714,8 @@ def valid_name
   end
 
   def update_patchinfo(patchinfo, opts = {})
+    check_write_access!
+
     opts[:enfore_issue_update] ||= false
 
     # collect bugnumbers from diff
@@ -1721,6 +1753,8 @@ def update_patchinfo(patchinfo, opts = {})
   end
 
   def create_patchinfo_from_request(req)
+    check_write_access!
+
     patchinfo = Package.new(:name => ""patchinfo"", :title => ""Patchinfo"", :description => ""Collected packages for update"")
     self.packages << patchinfo
     patchinfo.add_flag(""build"", ""enable"", nil, nil)
@@ -1755,6 +1789,7 @@ def create_patchinfo_from_request(req)
 
   # updates packages automatically generated in the backend after submitting a product file
   def update_product_autopackages
+    check_write_access!
 
     backend_pkgs = Collection.find :id, :what => 'package', :match => ""@project='#{self.name}' and starts-with(@name,'_product:')""
     b_pkg_index = backend_pkgs.each_package.inject(Hash.new) {|hash,elem| hash[elem.name] = elem; hash}
diff --git a/src/api/test/unit/project_test.rb b/src/api/test/unit/project_test.rb
index 611ecf6cdbe..5c240fe4f18 100644
--- a/src/api/test/unit/project_test.rb
+++ b/src/api/test/unit/project_test.rb
@@ -28,6 +28,7 @@ def test_flags_to_axml
   
   
   def test_add_new_flags_from_xml
+    User.current = users( :Iggy )
     
     #precondition check
     @project.flags.delete_all
@@ -88,6 +89,8 @@ def test_add_new_flags_from_xml
   
   
   def test_delete_flags_through_xml
+    User.current = users( :Iggy )
+
     #check precondition
     assert_equal 2, @project.type_flags('build').size
     assert_equal 2, @project.type_flags('publish').size
@@ -107,6 +110,8 @@ def test_delete_flags_through_xml
 
     
   def test_store_axml
+    User.current = users( :Iggy )
+
     original = @project.to_axml
 
     #project is given as axml
@@ -131,6 +136,8 @@ def test_store_axml
   end  
 
   def test_ordering
+    User.current = users( :Iggy )
+
     #project is given as axml
     axml = Xmlhash.parse(
       ""<project name='home:Iggy'>
@@ -175,6 +182,7 @@ def test_ordering
   end
     
   test ""duplicated repos"" do
+     User.current = users( :king )
      orig = @project.render_axml
 
      axml = Xmlhash.parse(
@@ -199,6 +207,7 @@ def test_ordering
   end
 
   test ""duplicated repos with remote"" do
+     User.current = users( :Iggy )
      orig = @project.render_axml
 
      xml = <<END
@@ -225,6 +234,7 @@ def test_ordering
      assert_equal orig, @project.render_axml
   end
   test ""not duplicated repos with remote"" do
+     User.current = users( :Iggy )
      xml = <<END
 <project name=""home:Iggy"">
   <title>Iggy""s Home Project</title>
@@ -250,6 +260,7 @@ def test_ordering
   end
 
   def test_create_maintenance_project_and_maintained_project
+    User.current = users( :king )
     maintenance_project = Project.new(:name => 'Maintenance:Project')
     assert_equal true, maintenance_project.set_project_type('maintenance')
     assert_equal 'maintenance', maintenance_project.project_type()"
GHSA-49pj-69vf-c689,"From f9639bd6e1d920cc46ff56ec11981536cb371c6b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hubert=20Nod=C5=BCak-Pluta?=
 <hubertnodzak-pluta@MBP-infakt-8.localdomain>
Date: Fri, 27 Sep 2019 12:17:48 +0200
Subject: [PATCH] correct chmods - using too high causes setting 777 during gem
 install that's insecure on production env.

---
 .gitignore           | 0
 LICENSE              | 0
 README.md            | 0
 lib/eui48.rb         | 0
 lib/eui64.rb         | 0
 lib/ipv4.rb          | 0
 lib/ipv4net.rb       | 0
 lib/ipv6.rb          | 0
 lib/ipv6net.rb       | 0
 lib/mask128.rb       | 0
 lib/mask32.rb        | 0
 lib/netaddr.rb       | 0
 lib/util.rb          | 0
 netaddr.gemspec      | 0
 test/eui48_test.rb   | 0
 test/eui64_test.rb   | 0
 test/examples.rb     | 0
 test/ipv4_test.rb    | 0
 test/ipv4net_test.rb | 0
 test/ipv6_test.rb    | 0
 test/ipv6net_test.rb | 0
 test/mask128_test.rb | 0
 test/mask32_test.rb  | 0
 test/netaddr_test.rb | 0
 test/run_all.rb      | 0
 25 files changed, 0 insertions(+), 0 deletions(-)
 mode change 100755 => 100644 .gitignore
 mode change 100755 => 100644 LICENSE
 mode change 100755 => 100644 README.md
 mode change 100755 => 100644 lib/eui48.rb
 mode change 100755 => 100644 lib/eui64.rb
 mode change 100755 => 100644 lib/ipv4.rb
 mode change 100755 => 100644 lib/ipv4net.rb
 mode change 100755 => 100644 lib/ipv6.rb
 mode change 100755 => 100644 lib/ipv6net.rb
 mode change 100755 => 100644 lib/mask128.rb
 mode change 100755 => 100644 lib/mask32.rb
 mode change 100755 => 100644 lib/netaddr.rb
 mode change 100755 => 100644 lib/util.rb
 mode change 100755 => 100644 netaddr.gemspec
 mode change 100755 => 100644 test/eui48_test.rb
 mode change 100755 => 100644 test/eui64_test.rb
 mode change 100755 => 100644 test/examples.rb
 mode change 100755 => 100644 test/ipv4_test.rb
 mode change 100755 => 100644 test/ipv4net_test.rb
 mode change 100755 => 100644 test/ipv6_test.rb
 mode change 100755 => 100644 test/ipv6net_test.rb
 mode change 100755 => 100644 test/mask128_test.rb
 mode change 100755 => 100644 test/mask32_test.rb
 mode change 100755 => 100644 test/netaddr_test.rb
 mode change 100755 => 100644 test/run_all.rb

diff --git a/.gitignore b/.gitignore
old mode 100755
new mode 100644
diff --git a/LICENSE b/LICENSE
old mode 100755
new mode 100644
diff --git a/README.md b/README.md
old mode 100755
new mode 100644
diff --git a/lib/eui48.rb b/lib/eui48.rb
old mode 100755
new mode 100644
diff --git a/lib/eui64.rb b/lib/eui64.rb
old mode 100755
new mode 100644
diff --git a/lib/ipv4.rb b/lib/ipv4.rb
old mode 100755
new mode 100644
diff --git a/lib/ipv4net.rb b/lib/ipv4net.rb
old mode 100755
new mode 100644
diff --git a/lib/ipv6.rb b/lib/ipv6.rb
old mode 100755
new mode 100644
diff --git a/lib/ipv6net.rb b/lib/ipv6net.rb
old mode 100755
new mode 100644
diff --git a/lib/mask128.rb b/lib/mask128.rb
old mode 100755
new mode 100644
diff --git a/lib/mask32.rb b/lib/mask32.rb
old mode 100755
new mode 100644
diff --git a/lib/netaddr.rb b/lib/netaddr.rb
old mode 100755
new mode 100644
diff --git a/lib/util.rb b/lib/util.rb
old mode 100755
new mode 100644
diff --git a/netaddr.gemspec b/netaddr.gemspec
old mode 100755
new mode 100644
diff --git a/test/eui48_test.rb b/test/eui48_test.rb
old mode 100755
new mode 100644
diff --git a/test/eui64_test.rb b/test/eui64_test.rb
old mode 100755
new mode 100644
diff --git a/test/examples.rb b/test/examples.rb
old mode 100755
new mode 100644
diff --git a/test/ipv4_test.rb b/test/ipv4_test.rb
old mode 100755
new mode 100644
diff --git a/test/ipv4net_test.rb b/test/ipv4net_test.rb
old mode 100755
new mode 100644
diff --git a/test/ipv6_test.rb b/test/ipv6_test.rb
old mode 100755
new mode 100644
diff --git a/test/ipv6net_test.rb b/test/ipv6net_test.rb
old mode 100755
new mode 100644
diff --git a/test/mask128_test.rb b/test/mask128_test.rb
old mode 100755
new mode 100644
diff --git a/test/mask32_test.rb b/test/mask32_test.rb
old mode 100755
new mode 100644
diff --git a/test/netaddr_test.rb b/test/netaddr_test.rb
old mode 100755
new mode 100644
diff --git a/test/run_all.rb b/test/run_all.rb
old mode 100755
new mode 100644"
GHSA-7vxr-6cxg-j3x8,"From 828064f1a0ab69b2642c59cab8292a67bb44182c Mon Sep 17 00:00:00 2001
From: Wayne Conrad <wconrad@yagni.com>
Date: Sat, 2 Mar 2013 14:15:45 -0700
Subject: [PATCH] Close code injection vulnerabilit in LIST and NLST.

This is quick piece of plywood over the hole.  It still allows
arbitrary ls switches (yuck), and breaks globbing.  LIST and NLST need
to be rewritten to not shell out to ls.

The vulnerability was discovered by Larry. W. Cashdollar.
---
 Changelog.md                          | 5 ++++-
 README.md                             | 4 ++++
 doc/rfc-compliance.md                 | 4 ++--
 features/ftp_server/list.feature      | 1 +
 features/ftp_server/name_list.feature | 9 ---------
 lib/ftpd.rb                           | 1 +
 lib/ftpd/disk_file_system.rb          | 7 ++++---
 7 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/Changelog.md b/Changelog.md
index 2b27f23..d6e7227 100644
--- a/Changelog.md
+++ b/Changelog.md
@@ -1,4 +1,4 @@
-### dev
+### 0.2.2
 
 Bug fixes
 
@@ -8,6 +8,9 @@ Bug fixes
   PASS
 * Open PASV mode data connection on same local IP as control connection.
   This is required by RFC 1123.
+* Disabled globbing in LIST (for now) due to code injection
+  vulnerability.  This patch also disables globbing in NLST, but NLST
+  probably shouldn't do globbing.
 
 Enhancements
 
diff --git a/README.md b/README.md
index 12d366b..50ff518 100644
--- a/README.md
+++ b/README.md
@@ -103,6 +103,10 @@ _and_ for advertising to the client which IP to connect to.  Binding
 to 0.0.0.0 will work fine, but when the client tries to connect to
 0.0.0.0, it won't get to the server.
 
+LIST doesn't accept globs.  It has other problems (it accepts
+arbitrary ls arguments!) and needs to be rewritten to not shell out to
+""ls"".
+
 ## RUBY COMPATABILITY
 
 The tests pass with these Rubies:
diff --git a/doc/rfc-compliance.md b/doc/rfc-compliance.md
index 40909a3..45263d2 100644
--- a/doc/rfc-compliance.md
+++ b/doc/rfc-compliance.md
@@ -29,7 +29,7 @@ Commands supported:
     CDUP    Yes    0.1.0    Change to parent directory    
     CWD     Yes    0.1.0    Change working directory    
     DELE    Yes    0.1.0    Delete file    
-    HELP    Yes     dev     Help
+    HELP    Yes    0.2.2    Help
     LIST    Yes    0.1.0    List directory    
     MKD     Yes    0.2.1    Make directory    
     MODE    Yes    0.1.0    Set transfer mode
@@ -52,7 +52,7 @@ Commands supported:
     SMNT    No      ---     Structure Mount    
     STAT    No      ---     Server status    
     STOR    Yes    0.1.0    Store file    
-    STOU    Yes     dev     Store with unique name    
+    STOU    Yes    0.2.2    Store with unique name    
     STRU    Yes    0.1.0    Set file structure
                             Supports ""File"" structure only. ""Record"" and
                             ""Page"" are not supported
diff --git a/features/ftp_server/list.feature b/features/ftp_server/list.feature
index 8dbe229..b8bfbee 100644
--- a/features/ftp_server/list.feature
+++ b/features/ftp_server/list.feature
@@ -42,6 +42,7 @@ Feature: List
     And the file list should contain ""foo""
 
   Scenario: Glob
+    Given PENDING ""Disabled (for now) due to code injection vulnerability""
     Given a successful login
     And the server has file ""foo""
     And the server has file ""bar""
diff --git a/features/ftp_server/name_list.feature b/features/ftp_server/name_list.feature
index 8043843..b43a50f 100644
--- a/features/ftp_server/name_list.feature
+++ b/features/ftp_server/name_list.feature
@@ -41,15 +41,6 @@ Feature: Name List
     Then the file list should be in short form
     And the file list should contain ""foo""
 
-  Scenario: Glob
-    Given a successful login
-    And the server has file ""foo""
-    And the server has file ""bar""
-    When the client successfully name-lists the directory ""f*""
-    Then the file list should be in short form
-    And the file list should contain ""foo""
-    And the file list should not contain ""bar""
-
   Scenario: Passive
     Given a successful login
     And the server has file ""foo""
diff --git a/lib/ftpd.rb b/lib/ftpd.rb
index df5bd32..0ac1147 100644
--- a/lib/ftpd.rb
+++ b/lib/ftpd.rb
@@ -2,6 +2,7 @@
 require 'memoizer'
 require 'openssl'
 require 'pathname'
+require 'shellwords'
 require 'socket'
 require 'tmpdir'
 
diff --git a/lib/ftpd/disk_file_system.rb b/lib/ftpd/disk_file_system.rb
index 96aaca9..8a1cf34 100644
--- a/lib/ftpd/disk_file_system.rb
+++ b/lib/ftpd/disk_file_system.rb
@@ -206,6 +206,8 @@ class DiskFileSystem
 
     module Ls
 
+      include Shellwords
+
       def ls(ftp_path, option)
         path = expand_ftp_path(ftp_path)
         dirname = File.dirname(path)
@@ -214,11 +216,10 @@ def ls(ftp_path, option)
           'ls',
           option,
           filename,
-          '2>&1',
-        ].compact.join(' ')
+        ].compact
         if File.exists?(dirname)
           list = Dir.chdir(dirname) do
-            `#{command}`
+            `#{shelljoin(command)} 2>&1`
           end
         else
           list = ''"
CVE-2021-41082,"From 27bad28c530c89acab35a56b945b6a3924280f4b Mon Sep 17 00:00:00 2001
From: Alan Guo Xiang Tan <gxtan1990@gmail.com>
Date: Wed, 15 Sep 2021 11:32:10 +0800
Subject: [PATCH] Partially revert ""PERF: Improve query performance all inbox
 private messages. (#14304)"" (#14344)

This partially reverts commit ddb458343dc39a7a8c99467dcd809b444514fe2c.

Seeing performance degrade on larger sites so back to drawing board on
this one. Instead of the DISTINCT LEFT JOIN, we switch back to
IN(subquery).
---
 app/controllers/topics_controller.rb     | 12 ++---
 lib/topic_query/private_message_lists.rb | 58 +++++++++++++++---------
 2 files changed, 40 insertions(+), 30 deletions(-)

diff --git a/app/controllers/topics_controller.rb b/app/controllers/topics_controller.rb
index 4de9618a941dc..b23245cc1be08 100644
--- a/app/controllers/topics_controller.rb
+++ b/app/controllers/topics_controller.rb
@@ -973,7 +973,7 @@ def private_message_reset_new
 
     topic_ids = TopicsBulkAction.new(
       current_user,
-      topic_scope.distinct(false).pluck(:id),
+      topic_scope.pluck(:id),
       type: ""dismiss_topics""
     ).perform!
 
@@ -1245,11 +1245,7 @@ def bulk_unread_topic_ids
     if inbox = params[:private_message_inbox]
       filter = private_message_filter(topic_query, inbox)
       topic_query.options[:limit] = false
-
-      topic_query
-        .filter_private_messages_unread(current_user, filter)
-        .distinct(false)
-        .pluck(:id)
+      topics = topic_query.filter_private_messages_unread(current_user, filter)
     else
       topics = TopicQuery.unread_filter(topic_query.joined_topic_user, staff: guardian.is_staff?).listable_topics
       topics = TopicQuery.tracked_filter(topics, current_user.id) if params[:tracked].to_s == ""true""
@@ -1268,9 +1264,9 @@ def bulk_unread_topic_ids
       if params[:tag_name].present?
         topics = topics.joins(:tags).where(""tags.name"": params[:tag_name])
       end
-
-      topics.pluck(:id)
     end
+
+    topics.pluck(:id)
   end
 
   def private_message_filter(topic_query, inbox)
diff --git a/lib/topic_query/private_message_lists.rb b/lib/topic_query/private_message_lists.rb
index 1a0c770a730c2..c056d5946bf08 100644
--- a/lib/topic_query/private_message_lists.rb
+++ b/lib/topic_query/private_message_lists.rb
@@ -145,18 +145,25 @@ def private_messages_for(user, type)
       elsif type == :all
         group_ids = group_with_messages_ids(user)
 
-        result = result.joins(<<~SQL)
-        LEFT JOIN topic_allowed_users tau
-          ON tau.topic_id = topics.id
-          AND tau.user_id = #{user.id.to_i}
-        LEFT JOIN topic_allowed_groups tag
-          ON tag.topic_id = topics.id
-          #{group_ids.present? ? ""AND tag.group_id IN (#{group_ids.join("","")})"" : """"}
-        SQL
-
-        result = result
-          .where(""tag.topic_id IS NOT NULL OR tau.topic_id IS NOT NULL"")
-          .distinct
+        result =
+        if group_ids.present?
+          result.where(<<~SQL)
+            topics.id IN (
+              SELECT topic_id
+              FROM topic_allowed_users
+              WHERE user_id = #{user.id.to_i}
+              UNION ALL
+              SELECT topic_id FROM topic_allowed_groups
+              WHERE group_id IN (#{group_ids.join("","")})
+            )
+          SQL
+        else
+          result.joins(<<~SQL)
+          INNER JOIN topic_allowed_users tau
+            ON tau.topic_id = topics.id
+            AND tau.user_id = #{user.id.to_i}
+          SQL
+        end
       end
 
       result = result.joins(""LEFT OUTER JOIN topic_users AS tu ON (topics.id = tu.topic_id AND tu.user_id = #{user.id.to_i})"")
@@ -238,23 +245,30 @@ def filter_archived(list, user, archived: true)
       # query here as it can easily lead to an inefficient query.
       group_ids = group_with_messages_ids(user)
 
-      list = list.joins(<<~SQL)
-      LEFT JOIN group_archived_messages gm
-        ON gm.topic_id = topics.id
-        #{group_ids.present? ? ""AND gm.group_id IN (#{group_ids.join("","")})"" : """"}
-      LEFT JOIN user_archived_messages um
-        ON um.user_id = #{user.id.to_i}
-        AND um.topic_id = topics.id
-      SQL
+      if group_ids.present?
+        list = list.joins(<<~SQL)
+          LEFT JOIN group_archived_messages gm
+            ON gm.topic_id = topics.id
+            AND gm.group_id IN (#{group_ids.join("","")})
+          LEFT JOIN user_archived_messages um
+            ON um.user_id = #{user.id.to_i}
+            AND um.topic_id = topics.id
+        SQL
 
-      list =
         if archived
           list.where(""um.user_id IS NOT NULL OR gm.topic_id IS NOT NULL"")
         else
           list.where(""um.user_id IS NULL AND gm.topic_id IS NULL"")
         end
+      else
+        list = list.joins(<<~SQL)
+          LEFT JOIN user_archived_messages um
+          ON um.user_id = #{user.id.to_i}
+          AND um.topic_id = topics.id
+        SQL
 
-      list
+        list.where(""um.user_id IS #{archived ? ""NOT NULL"" : ""NULL""}"")
+      end
     end
 
     def not_archived(list, user)"
GHSA-fj7f-vq84-fh43,"From a4f2f8ac17e6ce81c689527a8b6f14381060d95f Mon Sep 17 00:00:00 2001
From: Simon Fish <si@mon.fish>
Date: Tue, 26 Oct 2021 17:50:55 +0100
Subject: [PATCH] Add require parameter to `bundle add``

Test and ensure ""false"" is handled

Don't use yield_self to operate on autorequire

Remove duplicate autorequire

Add banner to require option

Don't use json to break down require params

Pass linter
---
 bundler/lib/bundler/cli.rb        |  1 +
 bundler/lib/bundler/injector.rb   |  9 ++++++++-
 bundler/spec/commands/add_spec.rb | 12 ++++++++++++
 3 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/bundler/lib/bundler/cli.rb b/bundler/lib/bundler/cli.rb
index d271086b254a..9046c0115c9f 100644
--- a/bundler/lib/bundler/cli.rb
+++ b/bundler/lib/bundler/cli.rb
@@ -367,6 +367,7 @@ def binstubs(*gems)
     method_option ""version"", :aliases => ""-v"", :type => :string
     method_option ""group"", :aliases => ""-g"", :type => :string
     method_option ""source"", :aliases => ""-s"", :type => :string
+    method_option ""require"", :aliases => ""-r"", :type => :string, :banner => ""Adds require path to gem. Provide false, or a path as a string.""
     method_option ""git"", :type => :string
     method_option ""branch"", :type => :string
     method_option ""skip-install"", :type => :boolean, :banner =>
diff --git a/bundler/lib/bundler/injector.rb b/bundler/lib/bundler/injector.rb
index 613bda4f8446..5e5dfca02ee5 100644
--- a/bundler/lib/bundler/injector.rb
+++ b/bundler/lib/bundler/injector.rb
@@ -113,8 +113,9 @@ def build_gem_lines(conservative_versioning)
         source = "", :source => \""#{d.source}\"""" unless d.source.nil?
         git = "", :git => \""#{d.git}\"""" unless d.git.nil?
         branch = "", :branch => \""#{d.branch}\"""" unless d.branch.nil?
+        require_path = "", :require => #{convert_autorequire(d.autorequire)}"" unless d.autorequire.nil?
 
-        %(gem #{name}#{requirement}#{group}#{source}#{git}#{branch})
+        %(gem #{name}#{requirement}#{group}#{source}#{git}#{branch}#{require_path})
       end.join(""\n"")
     end
 
@@ -269,5 +270,11 @@ def cross_check_for_errors(gemfile_path, original_deps, removed_deps, initial_ge
     def show_warning(message)
       Bundler.ui.info Bundler.ui.add_color(message, :yellow)
     end
+
+    def convert_autorequire(autorequire)
+      autorequire = autorequire.first
+      return autorequire if autorequire == ""false""
+      autorequire.inspect
+    end
   end
 end
diff --git a/bundler/spec/commands/add_spec.rb b/bundler/spec/commands/add_spec.rb
index 4c533652ca66..093ec53fea0e 100644
--- a/bundler/spec/commands/add_spec.rb
+++ b/bundler/spec/commands/add_spec.rb
@@ -68,6 +68,18 @@
     end
   end
 
+  describe ""with --require"" do
+    it ""adds the require param for the gem"" do
+      bundle ""add 'foo' --require=foo/engine""
+      expect(bundled_app_gemfile.read).to match(%r{gem ""foo"",(?: .*,) :require => ""foo\/engine""})
+    end
+
+    it ""converts false to a boolean"" do
+      bundle ""add 'foo' --require=false""
+      expect(bundled_app_gemfile.read).to match(/gem ""foo"",(?: .*,) :require => false/)
+    end
+  end
+
   describe ""with --group"" do
     it ""adds dependency for the specified group"" do
       bundle ""add 'foo' --group='development'"""
GHSA-7359-3c6r-hfc2,"From eb5b00a91d4ef0899082fdba929c34ccad6d4ccb Mon Sep 17 00:00:00 2001
From: Khem <kveasna@gmail.com>
Date: Mon, 2 Nov 2020 10:29:00 -0500
Subject: [PATCH] Avoid using ssl no verify

---
 lib/oauth/consumer.rb       | 31 +++++++++++++++++-------
 test/units/test_consumer.rb | 48 +++++++++++++++++++++++++++++++++++++
 2 files changed, 70 insertions(+), 9 deletions(-)

diff --git a/lib/oauth/consumer.rb b/lib/oauth/consumer.rb
index 1f9e7f37..fe5d133f 100644
--- a/lib/oauth/consumer.rb
+++ b/lib/oauth/consumer.rb
@@ -8,11 +8,21 @@
 module OAuth
   class Consumer
     # determine the certificate authority path to verify SSL certs
-    CA_FILES = %W(#{ENV['SSL_CERT_FILE']} /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt /usr/share/curl/curl-ca-bundle.crt)
-    CA_FILES.each do |ca_file|
-      if File.exist?(ca_file)
-        CA_FILE = ca_file
-        break
+    if ENV['SSL_CERT_FILE']
+      if File.exist?(ENV['SSL_CERT_FILE'])
+        CA_FILE = ENV['SSL_CERT_FILE']
+      else
+        raise ""The SSL CERT provided does not exist.""
+      end
+    end
+
+    if !defined?(CA_FILE)
+      CA_FILES = %W(/etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt /usr/share/curl/curl-ca-bundle.crt)
+      CA_FILES.each do |ca_file|
+        if File.exist?(ca_file)
+          CA_FILE = ca_file
+          break
+        end
       end
     end
     CA_FILE = nil unless defined?(CA_FILE)
@@ -343,12 +353,15 @@ def create_http(_url = nil)
 
       http_object.use_ssl = (our_uri.scheme == 'https')
 
-      if @options[:ca_file] || CA_FILE
-        http_object.ca_file = @options[:ca_file] || CA_FILE
+      if @options[:no_verify]
+        http_object.verify_mode = OpenSSL::SSL::VERIFY_NONE
+      else
+        ca_file =  @options[:ca_file] || CA_FILE
+        if ca_file
+          http_object.ca_file = ca_file
+        end
         http_object.verify_mode = OpenSSL::SSL::VERIFY_PEER
         http_object.verify_depth = 5
-      else
-        http_object.verify_mode = OpenSSL::SSL::VERIFY_NONE
       end
 
       http_object.read_timeout = http_object.open_timeout = @options[:timeout] || 30
diff --git a/test/units/test_consumer.rb b/test/units/test_consumer.rb
index af97bd13..361457ad 100644
--- a/test/units/test_consumer.rb
+++ b/test/units/test_consumer.rb
@@ -165,6 +165,54 @@ def test_getting_tokens_doesnt_add_paths_if_full_url_is_specified
    @consumer.get_request_token
   end
 
+  def test_noverify_true
+    @consumer = OAuth::Consumer.new(
+     ""key"",
+     ""secret"",
+     {
+         :site              => ""https://api.mysite.co.nz/v1"",
+         :request_token_url => ""https://authentication.mysite.co.nz/Oauth/RequestToken"",
+         :no_verify         => true
+     })
+
+    stub_request(:post, ""https://authentication.mysite.co.nz/Oauth/RequestToken"").to_return(:body => ""success"", :status => 200)
+
+    Net::HTTP.any_instance.expects(:'verify_mode=').with(OpenSSL::SSL::VERIFY_NONE)
+
+    @consumer.get_request_token
+  end
+
+  def test_noverify_false
+    @consumer = OAuth::Consumer.new(
+     ""key"",
+     ""secret"",
+     {
+         :site              => ""https://api.mysite.co.nz/v1"",
+         :request_token_url => ""https://authentication.mysite.co.nz/Oauth/RequestToken"",
+         :no_verify         => false
+     })
+
+    stub_request(:post, ""https://authentication.mysite.co.nz/Oauth/RequestToken"").to_return(:body => ""success"", :status => 200)
+
+    Net::HTTP.any_instance.expects(:'verify_mode=').with(OpenSSL::SSL::VERIFY_PEER)
+    @consumer.get_request_token
+  end
+
+  def test_noverify_empty
+    @consumer = OAuth::Consumer.new(
+     ""key"",
+     ""secret"",
+     {
+         :site              => ""https://api.mysite.co.nz/v1"",
+         :request_token_url => ""https://authentication.mysite.co.nz/Oauth/RequestToken""
+     })
+
+    stub_request(:post, ""https://authentication.mysite.co.nz/Oauth/RequestToken"").to_return(:body => ""success"", :status => 200)
+
+    Net::HTTP.any_instance.expects(:'verify_mode=').with(OpenSSL::SSL::VERIFY_PEER)
+    @consumer.get_request_token
+  end
+
   def test_token_request_identifies_itself_as_a_token_request
     request_options = {}
     @consumer.stubs(:request).returns(create_stub_http_response)"
CVE-2016-6319,"From 0f35fe14acf0d0d3b55e9337bc5e2b9640ff2372 Mon Sep 17 00:00:00 2001
From: Marek Hulan <mhulan@redhat.com>
Date: Wed, 10 Aug 2016 09:45:29 +0200
Subject: [PATCH] Fixes #16024 - escape labels of form fields

---
 app/helpers/form_helper.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/helpers/form_helper.rb b/app/helpers/form_helper.rb
index 0db9635a046..2e7d451fb2e 100644
--- a/app/helpers/form_helper.rb
+++ b/app/helpers/form_helper.rb
@@ -283,7 +283,7 @@ def add_label options, f, attr
     label = options[:label] == :none ? '' : options.delete(:label)
     label ||= ((clazz = f.object.class).respond_to?(:gettext_translation_for_attribute_name) &&
         s_(clazz.gettext_translation_for_attribute_name attr)) if f
-    label = label.present? ? label_tag(attr, ""#{label}#{required_mark}"".html_safe, :class => label_size + "" control-label"") : ''
+    label = label.present? ? label_tag(attr, ""#{label}#{required_mark}"", :class => label_size + "" control-label"") : ''
     label
   end"
GHSA-qxmr-qxh6-2cc9,"From ff33a8bdbeb66cd47625e6c05af1a10a26399834 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marc=20Busqu=C3=A9?= <marc@lamarciana.com>
Date: Thu, 25 Nov 2021 07:18:14 +0100
Subject: [PATCH] Fix ReDos vulnerability on
 Spree::EmailValidator::EMAIL_REGEXP

The denial of service vulnerability could be exploited in the checkout
process for guest orders, as it's the only place where that regexp is
used. To this point, registered users' emails (for instance, through
solidus_auth_devise) don't validate against that regular expression.

The previous regular expression had `([^@\s]+\.)+` bit on it. It was
susceptible to exponential backtracking with a substring like `a.a.`.
I.e.:

```
irb(main)> Spree::EmailValidator::EMAIL_REGEXP.match ""a@a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.@""
processing time: 54.293660s
=> nil
```

We take the occasion to remove the crafted regexp in use altogether.
Instead, we use `URI::MailTo::REGEXP`, which follows
https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.

It's improbable to find old emails that become invalid in a system,
but, as a safeguard, we provide a task
`solidus:check_orders_with_invalid_emails` to print information for
orders that don't fulfill the new requirement.

The issue has been present since 7af4b932. I.e., since version 1.0. The
regexp had been copied from Devise's one, but they updated it in
https://github.com/heartcombo/devise/commit/830d3e86ee9541b1f8a9ddddd176bba35e0a0e68

References:

https://github.com/solidusio/solidus/security/advisories/GHSA-qxmr-qxh6-2cc9
https://en.wikipedia.org/wiki/ReDoS
https://snyk.io/blog/redos-and-catastrophic-backtracking/

References #4022
---
 core/lib/spree/core/validators/email.rb       |  2 +-
 .../check_orders_with_invalid_email.rake      | 18 +++++++++
 .../lib/spree/core/validators/email_spec.rb   | 11 ++----
 .../check_orders_with_invalid_email_spec.rb   | 38 +++++++++++++++++++
 4 files changed, 61 insertions(+), 8 deletions(-)
 create mode 100644 core/lib/tasks/solidus/check_orders_with_invalid_email.rake
 create mode 100644 core/spec/lib/tasks/solidus/check_orders_with_invalid_email_spec.rb

diff --git a/core/lib/spree/core/validators/email.rb b/core/lib/spree/core/validators/email.rb
index 44917d3273f..60fe5bcfc8e 100644
--- a/core/lib/spree/core/validators/email.rb
+++ b/core/lib/spree/core/validators/email.rb
@@ -12,7 +12,7 @@ module Spree
   #     end
   #
   class EmailValidator < ActiveModel::EachValidator
-    EMAIL_REGEXP = /\A([^@\.]|[^@\.]([^@\s]*)[^@\.])@([^@\s]+\.)+[^@\s]+\z/
+    EMAIL_REGEXP = URI::MailTo::EMAIL_REGEXP
 
     def validate_each(record, attribute, value)
       unless EMAIL_REGEXP.match? value
diff --git a/core/lib/tasks/solidus/check_orders_with_invalid_email.rake b/core/lib/tasks/solidus/check_orders_with_invalid_email.rake
new file mode 100644
index 00000000000..846d7b8814d
--- /dev/null
+++ b/core/lib/tasks/solidus/check_orders_with_invalid_email.rake
@@ -0,0 +1,18 @@
+# frozen_string_literal: true
+
+namespace :solidus do
+  desc 'Prints orders with invalid email (after fix for GHSA-qxmr-qxh6-2cc9)'
+  task check_orders_with_invalid_email: :environment do
+    matches = Spree::Order.find_each.reduce([]) do |matches, order|
+      order.email.nil? || Spree::EmailValidator::EMAIL_REGEXP.match?(order.email) ? matches : matches + [order]
+    end
+    if matches.any?
+      puts 'Email / ID / Number'
+      puts(matches.map do |order|
+        ""#{order.email} / #{order.id} / #{order.number}""
+      end.join(""\n""))
+    else
+      puts 'NO MATCHES'
+    end
+  end
+end
diff --git a/core/spec/lib/spree/core/validators/email_spec.rb b/core/spec/lib/spree/core/validators/email_spec.rb
index 7ab4843a362..134da68da7e 100644
--- a/core/spec/lib/spree/core/validators/email_spec.rb
+++ b/core/spec/lib/spree/core/validators/email_spec.rb
@@ -24,10 +24,7 @@ class Tester
   let(:invalid_emails) {
     [
       'invalid email@email.com',
-      '.invalid.email@email.com',
-      'invalid.email.@email.com',
       '@email.com',
-      '.@email.com',
       'invalidemailemail.com',
       '@invalid.email@email.com',
       'invalid@email@email.com',
@@ -35,19 +32,19 @@ class Tester
     ]
   }
 
-  it 'validates valid email addresses' do
+  it 'validates valid email addresses', :aggregate_failures do
     tester = Tester.new
     valid_emails.each do |email|
       tester.email_address = email
-      expect(tester.valid?).to be true
+      expect(tester.valid?).to be(true), ""expected #{email} to be valid""
     end
   end
 
-  it 'validates invalid email addresses' do
+  it 'validates invalid email addresses', :aggregate_failures do
     tester = Tester.new
     invalid_emails.each do |email|
       tester.email_address = email
-      expect(tester.valid?).to be false
+      expect(tester.valid?).to be(false), ""expected #{email} not to be valid""
     end
   end
 end
diff --git a/core/spec/lib/tasks/solidus/check_orders_with_invalid_email_spec.rb b/core/spec/lib/tasks/solidus/check_orders_with_invalid_email_spec.rb
new file mode 100644
index 00000000000..a0106ea7e08
--- /dev/null
+++ b/core/spec/lib/tasks/solidus/check_orders_with_invalid_email_spec.rb
@@ -0,0 +1,38 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+path = Spree::Core::Engine.root.join('lib/tasks/solidus/check_orders_with_invalid_email.rake')
+
+RSpec.describe 'solidus' do
+  describe 'check_orders_with_invalid_email' do
+    include_context(
+      'rake',
+      task_path: path,
+      task_name: 'solidus:check_orders_with_invalid_email'
+    )
+
+    it 'includes orders with invalid email' do
+      order = create(:order)
+      order.update_column(:email, 'invalid email@email.com')
+
+      expect { task.invoke }.to output(/invalid email@email.com \/ #{order.id} \/ #{order.number}\n/).to_stdout
+    end
+
+    it ""doesn't include orders with valid email"" do
+      order = create(:order, email: 'valid@email.com')
+
+      expect { task.invoke }.not_to output(/valid@email.com/).to_stdout
+    end
+
+    it ""doesn't include orders with no email"" do
+      order = create(:order, user: nil, email: nil, number: '123')
+
+      expect { task.invoke }.not_to output(/#{order.number}/).to_stdout
+    end
+
+    it ""prints message when no matches found"" do
+      expect { task.invoke }.to output(/NO MATCHES/).to_stdout
+    end
+  end
+end"
GHSA-49r3-2549-3633,"From b37d5409213adae2ca06a67fec14c8d3d07d9016 Mon Sep 17 00:00:00 2001
From: nhosoya <hnhnnhnh@gmail.com>
Date: Wed, 2 Dec 2020 14:12:51 +0900
Subject: [PATCH] Use only verified email address to prevent fake email address

Co-authored-by: David Taylor <david@taylorhq.com>
---
 lib/omniauth/strategies/apple.rb       |  2 +-
 spec/omniauth/strategies/apple_spec.rb | 15 +++++++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/lib/omniauth/strategies/apple.rb b/lib/omniauth/strategies/apple.rb
index 49b605c..79c5bd6 100644
--- a/lib/omniauth/strategies/apple.rb
+++ b/lib/omniauth/strategies/apple.rb
@@ -104,7 +104,7 @@ def user_info
       end
 
       def email
-        user_info['email'] || id_info['email']
+        id_info['email']
       end
 
       def first_name
diff --git a/spec/omniauth/strategies/apple_spec.rb b/spec/omniauth/strategies/apple_spec.rb
index 04eaae8..30cb713 100644
--- a/spec/omniauth/strategies/apple_spec.rb
+++ b/spec/omniauth/strategies/apple_spec.rb
@@ -252,6 +252,21 @@
       end
     end
 
+    context 'with a spoofed email in the user payload' do
+      before do
+        request.params['user'] = {
+          name: {
+            firstName: 'first',
+            lastName: 'last'
+          },
+          email: ""spoofed@example.com""
+        }.to_json
+      end
+
+      it 'should return the true email' do
+        expect(subject.info[:email]).to eq('something@privatrerelay.appleid.com')
+      end
+    end
   end
 
   describe '#extra' do"
GHSA-vx9g-377x-xwxq,"From b2eb99ed304d7491a6d348a5bbdc83a008fc6e0b Mon Sep 17 00:00:00 2001
From: Guillaume Feliciano <guillaume.feliciano@intercom.io>
Date: Fri, 18 Feb 2022 10:59:38 +0000
Subject: [PATCH] Ensure we raise if the root domain changed and it was not an
 expected behavior

---
 lib/gibbon/api_request.rb  | 2 ++
 spec/gibbon/gibbon_spec.rb | 8 +++++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/lib/gibbon/api_request.rb b/lib/gibbon/api_request.rb
index b48a7a3..7e376d1 100644
--- a/lib/gibbon/api_request.rb
+++ b/lib/gibbon/api_request.rb
@@ -194,6 +194,8 @@ def api_url
 
     def base_api_url
       computed_api_endpoint = ""https://#{get_data_center_from_api_key(self.api_key)}api.mailchimp.com""
+      raise Gibbon::GibbonError, ""SSRF attempt"" unless URI(computed_api_endpoint).host.include?(""api.mailchimp.com"")
+
       ""#{self.api_endpoint || computed_api_endpoint}/3.0/""
     end
   end
diff --git a/spec/gibbon/gibbon_spec.rb b/spec/gibbon/gibbon_spec.rb
index 9814e22..0ea3c04 100644
--- a/spec/gibbon/gibbon_spec.rb
+++ b/spec/gibbon/gibbon_spec.rb
@@ -162,6 +162,12 @@
       @request = Gibbon::APIRequest.new(builder: @gibbon)
       expect {@request.validate_api_key}.not_to raise_error
     end
+
+    it ""raises with a valid SSRF attack"" do
+      @api_key = ""-attacker.net/test/?""
+      @gibbon.api_key = @api_key
+      expect {@gibbon.try.retrieve}.not_to raise_error
+    end
   end
 
   describe ""class variables"" do
@@ -213,7 +219,7 @@
     it ""set debug on new instances"" do
       expect(Gibbon::Request.new.debug).to eq(Gibbon::Request.debug)
     end
-    
+
     it ""set faraday_adapter on new instances"" do
       expect(Gibbon::Request.new.faraday_adapter).to eq(Gibbon::Request.faraday_adapter)
     end"
GHSA-5f9h-9pjv-v6j7,"From dddb7ad18ed79ca6ab06ccc417a169fde451246e Mon Sep 17 00:00:00 2001
From: Jack McCracken <jack.mccracken@shopify.com>
Date: Tue, 12 May 2020 12:23:33 -0400
Subject: [PATCH] Use Dir.entries instead of Dir[glob] to prevent
 user-specified glob metacharacters

[CVE-2020-8161]
---
 lib/rack/directory.rb | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/lib/rack/directory.rb b/lib/rack/directory.rb
index b08f59490..d68f36a9f 100644
--- a/lib/rack/directory.rb
+++ b/lib/rack/directory.rb
@@ -106,13 +106,12 @@ def check_forbidden(path_info)
 
     def list_directory(path_info, path, script_name)
       files = [['../', 'Parent Directory', '', '', '']]
-      glob = ::File.join(path, '*')
 
       url_head = (script_name.split('/') + path_info.split('/')).map do |part|
         Rack::Utils.escape_path part
       end
 
-      Dir[glob].sort.each do |node|
+      Dir.entries(path).reject { |e| e.start_with?('.') }.sort.each do |node|
         stat = stat(node)
         next unless stat
         basename = ::File.basename(node)"
GHSA-2j9c-9vmv-7m39,"From 42ebe6caa8e85ffa9c8a171bda668ba1acc7a5e6 Mon Sep 17 00:00:00 2001
From: Calvin Yu <me@sourcebender.com>
Date: Tue, 13 Oct 2015 13:28:24 -0400
Subject: [PATCH] Add end string anchor to string origin def

Build regex with end string anchor when string is used to configure
origin

[Fixes #86]
---
 lib/rack/cors.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/rack/cors.rb b/lib/rack/cors.rb
index 17d7e25..3d74ebb 100644
--- a/lib/rack/cors.rb
+++ b/lib/rack/cors.rb
@@ -253,7 +253,7 @@ def origins(*args, &blk)
                  /^https?:\/\//,
                  'file://'        then n
             when '*'              then @public_resources = true; n
-            else                  Regexp.compile(""^[a-z][a-z0-9.+-]*:\\\/\\\/#{Regexp.quote(n)}"")
+            else                  Regexp.compile(""^[a-z][a-z0-9.+-]*:\\\/\\\/#{Regexp.quote(n)}$"")
             end
           end.flatten
           @origins.push(blk) if blk"
GHSA-wjx2-7hqq-8h7m,"From d72090ec6a07c3b9b7b48ab50f3d405f91ff4375 Mon Sep 17 00:00:00 2001
From: ""M.Shibuya"" <mit.shibuya@gmail.com>
Date: Sat, 14 Mar 2020 18:14:25 +0900
Subject: [PATCH] Fix XSS vulnerability in nested forms

---
 .../rails_admin/ra.nested-form-hooks.js       |  6 ++++--
 .../javascripts/rails_admin/ra.widgets.js     | 14 +++++++++++---
 .../fields/has_many_association_spec.rb       | 16 ++++++++++++++++
 ...on_spec.rb => has_one_association_spec.rb} | 19 +++++++++++++++++++
 4 files changed, 50 insertions(+), 5 deletions(-)
 rename spec/integration/fields/{has_one_assosiation_spec.rb => has_one_association_spec.rb} (84%)

diff --git a/app/assets/javascripts/rails_admin/ra.nested-form-hooks.js b/app/assets/javascripts/rails_admin/ra.nested-form-hooks.js
index a7509a891e..8175335d45 100644
--- a/app/assets/javascripts/rails_admin/ra.nested-form-hooks.js
+++ b/app/assets/javascripts/rails_admin/ra.nested-form-hooks.js
@@ -11,7 +11,9 @@
   $(document).on('nested:fieldAdded', 'form', function(content) {
     var controls, field, nav, new_tab, one_to_one, parent_group, toggler;
     field = content.field.addClass('tab-pane').attr('id', 'unique-id-' + (new Date().getTime()));
-    new_tab = $('<li><a data-toggle=""tab"" href=""#' + field.attr('id') + '"">' + field.children('.object-infos').data('object-label') + '</a></li>');
+    new_tab = $('<li></li>').append(
+        $('<a></a>').attr('data-toggle', 'tab').attr('href', '#' + field.attr('id')).text(field.children('.object-infos').data('object-label'))
+    )
     parent_group = field.closest('.control-group');
     controls = parent_group.children('.controls');
     one_to_one = controls.data('nestedone') !== void 0;
@@ -27,7 +29,7 @@
     content.select(':hidden').show('slow');
     toggler.addClass('active').removeClass('disabled').children('i').addClass('icon-chevron-down').removeClass('icon-chevron-right');
     if (one_to_one) {
-      controls.find('.add_nested_fields').removeClass('add_nested_fields').html(field.children('.object-infos').data('object-label'));
+      controls.find('.add_nested_fields').removeClass('add_nested_fields').text(field.children('.object-infos').data('object-label'));
     }
   });
 
diff --git a/app/assets/javascripts/rails_admin/ra.widgets.js b/app/assets/javascripts/rails_admin/ra.widgets.js
index b3e6e9aa48..4662e2bcaa 100644
--- a/app/assets/javascripts/rails_admin/ra.widgets.js
+++ b/app/assets/javascripts/rails_admin/ra.widgets.js
@@ -137,7 +137,11 @@
         toggler = field.find('> .controls > .btn-group > .toggler');
         tab_content.children('.fields:not(.tab-pane)').addClass('tab-pane').each(function() {
           $(this).attr('id', 'unique-id-' + (new Date().getTime()) + Math.floor(Math.random() * 100000));
-          nav.append('<li><a data-toggle=""tab"" href=""#' + this.id + '"">' + $(this).children('.object-infos').data('object-label') + '</a></li>');
+          nav.append(
+              $('<li></li>').append(
+                  $('<a></a>').attr('data-toggle', 'tab').attr('href', '#' + this.id).text($(this).children('.object-infos').data('object-label'))
+              )
+          );
         });
         if (nav.find(""> li.active"").length === 0) {
           nav.find(""> li > a[data-toggle='tab']:first"").tab('show');
@@ -165,8 +169,12 @@
         tab_content = field.find(""> .tab-content"");
         toggler = field.find('> .controls > .btn-group > .toggler');
         tab_content.children("".fields:not(.tab-pane)"").addClass('tab-pane active').each(function() {
-          field.find('> .controls .add_nested_fields').removeClass('add_nested_fields').html($(this).children('.object-infos').data('object-label'));
-          nav.append('<li><a data-toggle=""tab"" href=""#' + this.id + '"">' + $(this).children('.object-infos').data('object-label') + '</a></li>');
+          field.find('> .controls .add_nested_fields').removeClass('add_nested_fields').text($(this).children('.object-infos').data('object-label'));
+          nav.append(
+              $('<li></li>').append(
+                  $('<a></a>').attr('data-toggle', 'tab').attr('href', '#' + this.id).text($(this).children('.object-infos').data('object-label'))
+              )
+          );
         });
         first_tab = nav.find(""> li > a[data-toggle='tab']:first"");
         first_tab.tab('show');
diff --git a/spec/integration/fields/has_many_association_spec.rb b/spec/integration/fields/has_many_association_spec.rb
index 432790575b..525ee385a9 100644
--- a/spec/integration/fields/has_many_association_spec.rb
+++ b/spec/integration/fields/has_many_association_spec.rb
@@ -211,6 +211,22 @@
         expect(page.body).to include('field_test_nested_field_tests_attributes_new_nested_field_tests_deeply_nested_field_tests_attributes_new_deeply_nested_field_tests_title')
       end
     end
+
+    context 'when XSS attack is attempted', js: true do
+      it 'does not break on adding a new item' do
+        allow(I18n).to receive(:t).and_call_original
+        expect(I18n).to receive(:t).with('admin.form.new_model', name: 'Nested field test').and_return('<script>throw ""XSS"";</script>')
+        @record = FactoryBot.create :field_test
+        visit edit_path(model_name: 'field_test', id: @record.id)
+        find('#field_test_nested_field_tests_attributes_field .add_nested_fields').click
+      end
+
+      it 'does not break on editing an existing item' do
+        @record = FactoryBot.create :field_test
+        NestedFieldTest.create! title: '<script>throw ""XSS"";</script>', field_test: @record
+        visit edit_path(model_name: 'field_test', id: @record.id)
+      end
+    end
   end
 
   context 'with not nullable foreign key', active_record: true do
diff --git a/spec/integration/fields/has_one_assosiation_spec.rb b/spec/integration/fields/has_one_association_spec.rb
similarity index 84%
rename from spec/integration/fields/has_one_assosiation_spec.rb
rename to spec/integration/fields/has_one_association_spec.rb
index ef681f9e9e..b2ee3f499d 100644
--- a/spec/integration/fields/has_one_assosiation_spec.rb
+++ b/spec/integration/fields/has_one_association_spec.rb
@@ -91,6 +91,25 @@
       @record.reload
       expect(@record.comment).to be_nil
     end
+
+    context 'when XSS attack is attempted', js: true do
+      it 'does not break on adding a new item' do
+        allow(I18n).to receive(:t).and_call_original
+        expect(I18n).to receive(:t).with('admin.form.new_model', name: 'Comment').and_return('<script>throw ""XSS"";</script>')
+        @record = FactoryBot.create :field_test
+        visit edit_path(model_name: 'field_test', id: @record.id)
+        find('#field_test_comment_attributes_field .add_nested_fields').click
+      end
+
+      it 'does not break on adding an existing item' do
+        RailsAdmin.config Comment do
+          object_label_method :content
+        end
+        @record = FactoryBot.create :field_test
+        FactoryBot.create :comment, content: '<script>throw ""XSS"";</script>', commentable: @record
+        visit edit_path(model_name: 'field_test', id: @record.id)
+      end
+    end
   end
 
   context 'with custom primary_key option' do"
CVE-2021-41271,"From 2da0001965c6d8632d723c46ea5df9f22a1a23f1 Mon Sep 17 00:00:00 2001
From: David Taylor <david@taylorhq.com>
Date: Mon, 15 Nov 2021 12:02:56 +0000
Subject: [PATCH] SECURITY: Disallow caching of MIME/Content-Type errors
 (#14939)

This will sign intermediary proxies and/or misconfigured CDNs to not
cache those error responses.

Co-authored-by: Rafael dos Santos Silva <xfalcox@gmail.com>
---
 lib/middleware/anonymous_cache.rb                  | 2 +-
 lib/middleware/discourse_public_exceptions.rb      | 2 +-
 spec/components/middleware/anonymous_cache_spec.rb | 3 ++-
 3 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/lib/middleware/anonymous_cache.rb b/lib/middleware/anonymous_cache.rb
index ca869abb97747..0cdc1c6302004 100644
--- a/lib/middleware/anonymous_cache.rb
+++ b/lib/middleware/anonymous_cache.rb
@@ -314,7 +314,7 @@ def call(env)
       if PAYLOAD_INVALID_REQUEST_METHODS.include?(env[Rack::REQUEST_METHOD]) &&
         env[Rack::RACK_INPUT].size > 0
 
-        return [413, {}, []]
+        return [413, { ""Cache-Control"" => ""private, max-age=0, must-revalidate"" }, []]
       end
 
       helper = Helper.new(env)
diff --git a/lib/middleware/discourse_public_exceptions.rb b/lib/middleware/discourse_public_exceptions.rb
index 8b9cbc827df82..fcc2b5ed2684f 100644
--- a/lib/middleware/discourse_public_exceptions.rb
+++ b/lib/middleware/discourse_public_exceptions.rb
@@ -35,7 +35,7 @@ def call(env)
           begin
             request.format
           rescue Mime::Type::InvalidMimeType
-            return [400, {}, [""Invalid MIME type""]]
+            return [400, { ""Cache-Control"" => ""private, max-age=0, must-revalidate"" }, [""Invalid MIME type""]]
           end
 
           if ApplicationController.rescue_with_handler(exception, object: fake_controller)
diff --git a/spec/components/middleware/anonymous_cache_spec.rb b/spec/components/middleware/anonymous_cache_spec.rb
index e2beddc40a8fd..a4aa30be695cd 100644
--- a/spec/components/middleware/anonymous_cache_spec.rb
+++ b/spec/components/middleware/anonymous_cache_spec.rb
@@ -243,11 +243,12 @@ def new_helper(opts = {})
 
   context 'invalid request payload' do
     it 'returns 413 for GET request with payload' do
-      status, _, _ = middleware.call(env.tap do |environment|
+      status, headers, _ = middleware.call(env.tap do |environment|
         environment[Rack::RACK_INPUT].write(""test"")
       end)
 
       expect(status).to eq(413)
+      expect(headers[""Cache-Control""]).to eq(""private, max-age=0, must-revalidate"")
     end
   end"
GHSA-w542-cpp9-r3g7,"From defd3fdf457c22d7dc5b3be7048481947bd5f0d0 Mon Sep 17 00:00:00 2001
From: Andrew Kane <andrew@chartkick.com>
Date: Tue, 4 Aug 2020 12:57:34 -0700
Subject: [PATCH] Fixed CSRF vulnerability with non-session based
 authentication

---
 CHANGELOG.md                                  | 3 ++-
 app/controllers/field_test/base_controller.rb | 2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7d9b858..e8e1886 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
-## 0.3.3 (unreleased)
+## 0.4.0 (unreleased)
 
+- Fixed CSRF vulnerability with non-session based authentication
 - Fixed cache key for requests
 
 ## 0.3.2 (2020-04-16)
diff --git a/app/controllers/field_test/base_controller.rb b/app/controllers/field_test/base_controller.rb
index fe67819..0025076 100644
--- a/app/controllers/field_test/base_controller.rb
+++ b/app/controllers/field_test/base_controller.rb
@@ -2,7 +2,7 @@ module FieldTest
   class BaseController < ActionController::Base
     layout ""field_test/application""
 
-    protect_from_forgery
+    protect_from_forgery with: :exception
 
     http_basic_authenticate_with name: ENV[""FIELD_TEST_USERNAME""], password: ENV[""FIELD_TEST_PASSWORD""] if ENV[""FIELD_TEST_PASSWORD""]
   end"
CVE-2021-43850,"From 7a8ec129fb54f188b2da6588c9d24d3a36eb0d39 Mon Sep 17 00:00:00 2001
From: Alan Guo Xiang Tan <gxtan1990@gmail.com>
Date: Fri, 17 Dec 2021 14:24:32 +0800
Subject: [PATCH] SECURITY: Disable MessageBus::Diagnostics.

MessageBus::Diagnostics allows anyone with access to carry out certain
operations that may result in a denial of service. The impact of this is
greater on multisiite clusters.
---
 config/initializers/004-message_bus.rb | 1 -
 1 file changed, 1 deletion(-)

diff --git a/config/initializers/004-message_bus.rb b/config/initializers/004-message_bus.rb
index a566d4658f57c..87fa9c4c76132 100644
--- a/config/initializers/004-message_bus.rb
+++ b/config/initializers/004-message_bus.rb
@@ -120,7 +120,6 @@ def setup_message_bus_env(env)
 MessageBus.long_polling_enabled = SiteSetting.enable_long_polling
 MessageBus.long_polling_interval = SiteSetting.long_polling_interval
 MessageBus.cache_assets = !Rails.env.development?
-MessageBus.enable_diagnostics
 
 if Rails.env == ""test"" || $0 =~ /rake$/
   # disable keepalive in testing"
CVE-2021-37703,"From aed65ec16d38886d7be7209d8c02df4ffd4937a4 Mon Sep 17 00:00:00 2001
From: Alan Guo Xiang Tan <gxtan1990@gmail.com>
Date: Wed, 11 Aug 2021 11:01:13 +0800
Subject: [PATCH] SECURITY: User's read state for topic is leaked to
 unauthorized clients.

A user's read state for a topic such as the last read post number and the notification level is exposed.
---
 app/models/topic_tracking_state.rb       | 25 +++++++++-----
 spec/components/post_creator_spec.rb     |  3 +-
 spec/models/topic_tracking_state_spec.rb | 43 ++++++++++++++++++++++++
 3 files changed, 62 insertions(+), 9 deletions(-)

diff --git a/app/models/topic_tracking_state.rb b/app/models/topic_tracking_state.rb
index e7db1b888e852..3e44f0cd593ea 100644
--- a/app/models/topic_tracking_state.rb
+++ b/app/models/topic_tracking_state.rb
@@ -145,6 +145,15 @@ def self.publish_unread(post)
     return unless post.topic.regular?
     # TODO at high scale we are going to have to defer this,
     #   perhaps cut down to users that are around in the last 7 days as well
+    tags = nil
+    tag_ids = nil
+    if include_tags_in_report?
+      tag_ids, tags = post.topic.tags.pluck(:id, :name).transpose
+    end
+
+    scope = TopicUser
+      .tracking(post.topic_id)
+      .includes(user: :user_stat)
 
     group_ids =
       if post.post_type == Post.types[:whisper]
@@ -153,15 +162,13 @@ def self.publish_unread(post)
         post.topic.category && post.topic.category.secure_group_ids
       end
 
-    tags = nil
-    tag_ids = nil
-    if include_tags_in_report?
-      tag_ids, tags = post.topic.tags.pluck(:id, :name).transpose
+    if group_ids.present?
+      scope = scope
+        .joins(""INNER JOIN group_users gu ON gu.user_id = topic_users.user_id"")
+        .where(""gu.group_id IN (?)"", group_ids)
     end
 
-    TopicUser
-      .tracking(post.topic_id)
-      .includes(user: :user_stat)
+    scope
       .select([:user_id, :last_read_post_number, :notification_level])
       .each do |tu|
 
@@ -188,7 +195,9 @@ def self.publish_unread(post)
         payload: payload
       }
 
-      MessageBus.publish(self.unread_channel_key(tu.user_id), message.as_json, group_ids: group_ids)
+      MessageBus.publish(self.unread_channel_key(tu.user_id), message.as_json,
+        user_ids: [tu.user_id]
+      )
     end
 
   end
diff --git a/spec/components/post_creator_spec.rb b/spec/components/post_creator_spec.rb
index f993f5aeedfe3..165162953e5f9 100644
--- a/spec/components/post_creator_spec.rb
+++ b/spec/components/post_creator_spec.rb
@@ -137,7 +137,8 @@
         Jobs.run_immediately!
         UserActionManager.enable
 
-        admin = Fabricate(:admin)
+        admin = Fabricate(:user)
+        admin.grant_admin!
 
         cat = Fabricate(:category)
         cat.set_permissions(admins: :full)
diff --git a/spec/models/topic_tracking_state_spec.rb b/spec/models/topic_tracking_state_spec.rb
index e25df41d22add..ddcfc37c31238 100644
--- a/spec/models/topic_tracking_state_spec.rb
+++ b/spec/models/topic_tracking_state_spec.rb
@@ -48,11 +48,54 @@
 
       data = message.data
 
+      expect(message.user_ids).to contain_exactly(post.user.id)
+      expect(message.group_ids).to eq(nil)
       expect(data[""topic_id""]).to eq(topic.id)
       expect(data[""message_type""]).to eq(described_class::UNREAD_MESSAGE_TYPE)
       expect(data[""payload""][""archetype""]).to eq(Archetype.default)
     end
 
+    it ""does not publish whisper post to non-staff users"" do
+      post.update!(post_type: Post.types[:whisper])
+
+      messages = MessageBus.track_publish(described_class.unread_channel_key(post.user_id)) do
+        TopicTrackingState.publish_unread(post)
+      end
+
+      expect(messages).to eq([])
+
+      post.user.grant_admin!
+
+      message = MessageBus.track_publish(described_class.unread_channel_key(post.user_id)) do
+        TopicTrackingState.publish_unread(post)
+      end.first
+
+      expect(message.user_ids).to contain_exactly(post.user_id)
+      expect(message.group_ids).to eq(nil)
+    end
+
+    it ""correctly publishes unread for a post in a restricted category"" do
+      group = Fabricate(:group)
+      category = Fabricate(:private_category, group: group)
+
+      post.topic.update!(category: category)
+
+      messages = MessageBus.track_publish(described_class.unread_channel_key(post.user_id)) do
+        TopicTrackingState.publish_unread(post)
+      end
+
+      expect(messages).to eq([])
+
+      group.add(post.user)
+
+      message = MessageBus.track_publish(described_class.unread_channel_key(post.user_id)) do
+        TopicTrackingState.publish_unread(post)
+      end.first
+
+      expect(message.user_ids).to contain_exactly(post.user_id)
+      expect(message.group_ids).to eq(nil)
+    end
+
     describe 'for a private message' do
       before do
         TopicUser.change("
GHSA-g89m-3wjw-h857,"From d80478208d79a3e6d6cb1fbc525e24817fe8c4c6 Mon Sep 17 00:00:00 2001
From: Patrick Carlisle <patrick@puppetlabs.com>
Date: Thu, 28 Jun 2012 14:08:55 -0700
Subject: [PATCH] Reject directory traversal in store report processor

---
 lib/puppet/reports/store.rb     | 19 +++++++++++++------
 spec/unit/reports/store_spec.rb | 28 ++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/lib/puppet/reports/store.rb b/lib/puppet/reports/store.rb
index cd188fafd90..4f2d225324d 100644
--- a/lib/puppet/reports/store.rb
+++ b/lib/puppet/reports/store.rb
@@ -2,6 +2,8 @@
 require 'fileutils'
 require 'tempfile'
 
+SEPARATOR = [Regexp.escape(File::SEPARATOR.to_s), Regexp.escape(File::ALT_SEPARATOR.to_s)].join
+
 Puppet::Reports.register_report(:store) do
   desc ""Store the yaml report on disk.  Each host sends its report as a YAML dump
     and this just stores the file on disk, in the `reportdir` directory.
@@ -13,9 +15,11 @@
   def process
     # We don't want any tracking back in the fs.  Unlikely, but there
     # you go.
-    client = self.host.gsub("".."",""."")
+    if host =~ Regexp.union(/[#{SEPARATOR}]/, /\A\.\.?\Z/)
+      raise ArgumentError, ""Invalid node name #{host.inspect}""
+    end
 
-    dir = File.join(Puppet[:reportdir], client)
+    dir = File.join(Puppet[:reportdir], host)
 
     if ! FileTest.exists?(dir)
       FileUtils.mkdir_p(dir)
@@ -42,17 +46,20 @@ def process
       FileUtils.mv(f.path, file)
     rescue => detail
       puts detail.backtrace if Puppet[:trace]
-      Puppet.warning ""Could not write report for #{client} at #{file}: #{detail}""
+      Puppet.warning ""Could not write report for #{host} at #{file}: #{detail}""
     end
 
     # Only testing cares about the return value
     file
   end
 
-  # removes all reports for a given host
+  # removes all reports for a given host?
   def self.destroy(host)
-    client = host.gsub("".."",""."")
-    dir = File.join(Puppet[:reportdir], client)
+    if host =~ Regexp.union(/[#{SEPARATOR}]/, /\A\.\.?\Z/)
+      raise ArgumentError, ""Invalid node name #{host.inspect}""
+    end
+
+    dir = File.join(Puppet[:reportdir], host)
 
     if File.exists?(dir)
       Dir.entries(dir).each do |file|
diff --git a/spec/unit/reports/store_spec.rb b/spec/unit/reports/store_spec.rb
index 5b752c4b7c1..b4f849cdef9 100755
--- a/spec/unit/reports/store_spec.rb
+++ b/spec/unit/reports/store_spec.rb
@@ -44,5 +44,33 @@
       FileUtils.expects(:mv).in_sequence(writeseq).with(File.join(Dir.tmpdir, ""foo123""), File.join(Puppet[:reportdir], @report.host, ""201101061200.yaml""))
       @report.process
     end
+
+    ['..', 'hello/', '/hello', 'he/llo', 'hello/..', '.'].each do |node|
+      it ""rejects #{node.inspect}"" do
+        @report.host = node
+        expect { @report.process }.to raise_error(ArgumentError, /Invalid node/)
+      end
+    end
+
+    ['.hello', 'hello.', '..hi', 'hi..'].each do |node|
+      it ""accepts #{node.inspect}"" do
+        @report.host = node
+        @report.process
+      end
+    end
+  end
+
+  describe ""::destroy"" do
+    ['..', 'hello/', '/hello', 'he/llo', 'hello/..', '.'].each do |node|
+      it ""rejects #{node.inspect}"" do
+        expect { processor.destroy(node) }.to raise_error(ArgumentError, /Invalid node/)
+      end
+    end
+
+    ['.hello', 'hello.', '..hi', 'hi..'].each do |node|
+      it ""accepts #{node.inspect}"" do
+        processor.destroy(node)
+      end
+    end
   end
 end"
CVE-2018-12466,"From f57b660f49f830006766a8d4abc3b4af6e178063 Mon Sep 17 00:00:00 2001
From: Marcus Huewe <suse-tux@gmx.de>
Date: Thu, 5 Jul 2018 12:48:41 +0200
Subject: [PATCH] Ignore a project link in
 BsRequestAction.check_action_permission!

This makes sure that we check the permissions of the correct package. For
instance, assume that the project ""Staging"" is a link project where the
link points to the ""Base"" project. Also, assume that there exists a
""Base/foo"" package, but there exists no explicit ""Staging/foo"" package.
Moreover, assume we check the permissions for the following ""submit""
action:

<action type=""submit"">
  <source project=""Staging"" package=""foo""/>
  <target project=""an_arbitrary_project"" package=""foo""/>
</action>

In this case, the old code checks if request acceptor can modify the
""Base/foo"" package (since it follows the project link). This is wrong
because the ""Staging/foo"" package would be turned into a branch during
accept.
The new code checks the correct package because it does not follow the
project link and requires that the source package exists in the source
project. Requiring the existence of the source package potentially
breaks artificial requests (for instance, a request where the ""submit""
action from above is preceded by a ""submit"" action that creates a
""Staging/foo"" package).

Note: so far I was unable to exploit the old code - so this is just
to avoid a potential future headache.

Fixes: commit 990ef7ccc (""[api][webui] Check access to source package"")
---
 src/api/app/models/bs_request_action_submit.rb | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/api/app/models/bs_request_action_submit.rb b/src/api/app/models/bs_request_action_submit.rb
index 7e4f39db1a8..a08110ef40a 100644
--- a/src/api/app/models/bs_request_action_submit.rb
+++ b/src/api/app/models/bs_request_action_submit.rb
@@ -115,8 +115,11 @@ def check_action_permission!(skip_source = nil)
     target_package = target_project.packages.find_by_name(self.target_package)
     initialize_devel_package = target_project.find_attribute('OBS', 'InitializeDevelPackage')
     return if target_package || !initialize_devel_package
-    source_package = Package.get_by_project_and_name(source_project, self.source_package)
-    return if !source_package || User.current.can_modify?(source_package)
+    opts = { follow_project_links: false }
+    source_package = Package.get_by_project_and_name!(source_project,
+                                                      self.source_package,
+                                                      opts)
+    return if User.current.can_modify?(source_package)
     msg = 'No permission to initialize the source package as a devel package'
     raise PostRequestNoPermission, msg
   end"
CVE-2021-43793,"From 0c6b9df77bac9c6f7c7e2eadf6fe100064afdeab Mon Sep 17 00:00:00 2001
From: David Taylor <david@taylorhq.com>
Date: Wed, 1 Dec 2021 16:42:39 +0000
Subject: [PATCH] FIX: Validate number of votes allowed per poll per user
 (stable) (#15158)

Backport of 1d0faedfbc3a8b77b971dc70d25e30791dbb6e0b
---
 plugins/poll/config/locales/server.en.yml |  8 ++++++++
 plugins/poll/plugin.rb                    | 21 +++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/plugins/poll/config/locales/server.en.yml b/plugins/poll/config/locales/server.en.yml
index 58e121d5d3dcf..f6a8917efc8ea 100644
--- a/plugins/poll/config/locales/server.en.yml
+++ b/plugins/poll/config/locales/server.en.yml
@@ -48,6 +48,14 @@ en:
     topic_must_be_open_to_vote: ""The topic must be open to vote.""
     poll_must_be_open_to_vote: ""Poll must be open to vote.""
 
+    one_vote_per_user: ""Only 1 vote is allowed for this poll.""
+    max_vote_per_user:
+      one: Only %{count} vote is allowed for this poll.
+      other: A maximum of %{count} votes is allowed for this poll.
+    min_vote_per_user:
+      one: A minimum of %{count} vote is required for this poll.
+      other: A minimum of %{count} votes is required for this poll.
+
     topic_must_be_open_to_toggle_status: ""The topic must be open to toggle status.""
     only_staff_or_op_can_toggle_status: ""Only a staff member or the original poster can toggle a poll status.""
 
diff --git a/plugins/poll/plugin.rb b/plugins/poll/plugin.rb
index b5f657f8652de..418b726e82c32 100644
--- a/plugins/poll/plugin.rb
+++ b/plugins/poll/plugin.rb
@@ -85,6 +85,7 @@ def vote(post_id, poll_name, options, user)
           available_options = poll.poll_options.map { |o| o.digest }.to_set
           options.select! { |o| available_options.include?(o) }
 
+          self.validate_votes!(poll, options)
           raise StandardError.new I18n.t(""poll.requires_at_least_1_valid_option"") if options.empty?
 
           new_option_ids = poll.poll_options.each_with_object([]) do |option, obj|
@@ -119,6 +120,26 @@ def vote(post_id, poll_name, options, user)
         end
       end
 
+      def validate_votes!(poll, options)
+        num_of_options = options.length
+
+        if poll.multiple?
+          if num_of_options < poll.min
+            raise StandardError.new(I18n.t(
+              ""poll.min_vote_per_user"",
+              count: poll.min
+            ))
+          elsif num_of_options > poll.max
+            raise StandardError.new(I18n.t(
+              ""poll.max_vote_per_user"",
+              count: poll.max
+            ))
+          end
+        elsif num_of_options > 1
+          raise StandardError.new(I18n.t(""poll.one_vote_per_user""))
+        end
+      end
+
       def toggle_status(post_id, poll_name, status, user, raise_errors = true)
         Poll.transaction do
           post = Post.find_by(id: post_id)"
GHSA-ghqm-pgxj-37gq,"From 63903b0eaa6d2a4e1c91bc86008256c4c8335e78 Mon Sep 17 00:00:00 2001
From: Aaron Patterson <aaron.patterson@gmail.com>
Date: Thu, 29 Oct 2015 12:06:26 -0700
Subject: [PATCH] convert CDATA nodes to TEXT nodes to avoid XSS issues

CDATA nodes will not be html escaped.  Users shouldn't be submitting
CDATA nodes in the first place, so we should convert them to text nodes
before escaping

CVE-2015-7580
---
 lib/rails/html/scrubbers.rb |  7 ++++++-
 test/sanitizer_test.rb      | 10 ++++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/lib/rails/html/scrubbers.rb b/lib/rails/html/scrubbers.rb
index d6f8ce4..1e6f887 100644
--- a/lib/rails/html/scrubbers.rb
+++ b/lib/rails/html/scrubbers.rb
@@ -60,6 +60,11 @@ def attributes=(attributes)
       end
 
       def scrub(node)
+        if node.cdata?
+          text = node.document.create_text_node node.text
+          node.replace text
+          return CONTINUE
+        end
         return CONTINUE if skip_node?(node)
 
         unless keep_node?(node)
@@ -76,7 +81,7 @@ def allowed_node?(node)
       end
 
       def skip_node?(node)
-        node.text? || node.cdata?
+        node.text?
       end
 
       def scrub_attribute?(name)
diff --git a/test/sanitizer_test.rb b/test/sanitizer_test.rb
index 8c1ea2c..f72b702 100644
--- a/test/sanitizer_test.rb
+++ b/test/sanitizer_test.rb
@@ -11,6 +11,16 @@ def test_sanitizer_sanitize_raises_not_implemented_error
     end
   end
 
+  def test_sanitize_nested_script
+    sanitizer = Rails::Html::WhiteListSanitizer.new
+    assert_equal '&lt;script&gt;alert(""XSS"");&lt;/script&gt;', sanitizer.sanitize('<script><script></script>alert(""XSS"");<script><</script>/</script><script>script></script>', tags: %w(em))
+  end
+
+  def test_sanitize_nested_script_in_style
+    sanitizer = Rails::Html::WhiteListSanitizer.new
+    assert_equal '&lt;script&gt;alert(""XSS"");&lt;/script&gt;', sanitizer.sanitize('<style><script></style>alert(""XSS"");<style><</style>/</style><style>script></style>', tags: %w(em))
+  end
+
   class XpathRemovalTestSanitizer < Rails::Html::Sanitizer
     def sanitize(html, options = {})
       fragment = Loofah.fragment(html)"
GHSA-cff7-6h4q-q5pj,"From ada16e772906efdd035e3df49cb2ae372f0f948a Mon Sep 17 00:00:00 2001
From: nov <nov@matake.jp>
Date: Mon, 11 Nov 2019 23:28:48 +0900
Subject: [PATCH] explicitly specifying number of elements when splitting JWE
 string

ref.) CVE-2019-18848
---
 lib/json/jwe.rb | 2 +-
 lib/json/jws.rb | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/lib/json/jwe.rb b/lib/json/jwe.rb
index f5a4919..03cfd3a 100644
--- a/lib/json/jwe.rb
+++ b/lib/json/jwe.rb
@@ -254,7 +254,7 @@ def decode_compact_serialized(input, private_key_or_secret, algorithms = nil, en
           raise InvalidFormat.new(""Invalid JWE Format. JWE should include #{NUM_OF_SEGMENTS} segments."")
         end
         jwe = new
-        _header_json_, jwe.jwe_encrypted_key, jwe.iv, jwe.cipher_text, jwe.authentication_tag = input.split('.').collect do |segment|
+        _header_json_, jwe.jwe_encrypted_key, jwe.iv, jwe.cipher_text, jwe.authentication_tag = input.split('.', NUM_OF_SEGMENTS).collect do |segment|
           begin
             Base64.urlsafe_decode64 segment
           rescue ArgumentError
diff --git a/lib/json/jws.rb b/lib/json/jws.rb
index a97a4a3..826416c 100644
--- a/lib/json/jws.rb
+++ b/lib/json/jws.rb
@@ -179,7 +179,7 @@ def decode_compact_serialized(input, public_key_or_secret, algorithms = nil, all
         unless input.count('.') + 1 == NUM_OF_SEGMENTS
           raise InvalidFormat.new(""Invalid JWS Format. JWS should include #{NUM_OF_SEGMENTS} segments."")
         end
-        header, claims, signature = input.split('.', JWS::NUM_OF_SEGMENTS).collect do |segment|
+        header, claims, signature = input.split('.', NUM_OF_SEGMENTS).collect do |segment|
           Base64.urlsafe_decode64 segment.to_s
         end
         header = JSON.parse(header).with_indifferent_access
@@ -191,7 +191,7 @@ def decode_compact_serialized(input, public_key_or_secret, algorithms = nil, all
         jws = new claims
         jws.header = header
         jws.signature = signature
-        jws.signature_base_string = input.split('.')[0, JWS::NUM_OF_SEGMENTS - 1].join('.')
+        jws.signature_base_string = input.split('.')[0, NUM_OF_SEGMENTS - 1].join('.')
         jws.verify! public_key_or_secret, algorithms unless public_key_or_secret == :skip_verification
         jws
       end"
GHSA-2hxv-mx8x-mcj9,"From bfe44f289e336f80b6593032679300c493735e75 Mon Sep 17 00:00:00 2001
From: Bram Jetten <mail@bramjetten.nl>
Date: Tue, 16 Jun 2015 16:23:27 +0200
Subject: [PATCH] protect from forgery

---
 app/controllers/spina/application_controller.rb | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/app/controllers/spina/application_controller.rb b/app/controllers/spina/application_controller.rb
index 257f5fb8c..bf39207e4 100644
--- a/app/controllers/spina/application_controller.rb
+++ b/app/controllers/spina/application_controller.rb
@@ -1,5 +1,7 @@
 module Spina
   class ApplicationController < ActionController::Base
+    protect_from_forgery
+    
     include ApplicationHelper
 
     private"
CVE-2011-3178,"From cbfe2ed36dd77c0843702935dea7f914bb599201 Mon Sep 17 00:00:00 2001
From: Stephan Kulow <coolo@suse.de>
Date: Fri, 2 Sep 2011 14:39:57 +0200
Subject: [PATCH] [webui] check the value of the scheduler parameter

---
 .../app/controllers/project_controller.rb      | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/src/webui/app/controllers/project_controller.rb b/src/webui/app/controllers/project_controller.rb
index 5aed60fa3b9..9d97ae76202 100644
--- a/src/webui/app/controllers/project_controller.rb
+++ b/src/webui/app/controllers/project_controller.rb
@@ -457,6 +457,11 @@ def rebuild_time
     @arch = params[:arch]
     @hosts = begin Integer(params[:hosts] || '40') rescue 40 end
     @scheduler = params[:scheduler] || 'needed'
+    unless [""fifo"", ""lifo"", ""random"", ""btime"", ""needed"", ""neededb"", ""longest_data"", ""longested_triedread"", ""longest""].include? @scheduler
+      flash[:error] = ""Invalid scheduler type, check mkdiststats docu - aehm, source""
+      redirect_to :action => :show, :project => @project
+      return
+    end
     bdep = find_cached(BuilddepInfo, :project => @project.name, :repository => @repository, :arch => @arch)
     jobs = find_cached(Jobhislist , :project => @project.name, :repository => @repository, :arch => @arch, 
             :limit => @packages.each.size * 3, :code => ['succeeded', 'unchanged'])
@@ -473,9 +478,16 @@ def rebuild_time
     f.write(jobs.dump_xml)
     f.close
     outdir = Dir.mktmpdir
-    cmd=""perl ./mkdiststats '--srcdir=#{indir}' '--destdir=#{outdir}' --outfmt=xml #{@project.name}/#{@repository}/#{@arch} --width=910 --buildhosts=#{@hosts} --scheduler=#{@scheduler}""
-    logger.debug ""cd #{RAILS_ROOT}/vendor/diststats && #{cmd}""
-    system(""cd #{RAILS_ROOT}/vendor/diststats && #{cmd}"")
+    logger.debug ""cd #{RAILS_ROOT}/vendor/diststats && perl ./mkdiststats --srcdir=#{indir} --destdir=#{outdir} 
+             --outfmt=xml #{@project.name}/#{@repository}/#{@arch} --width=910
+             --buildhosts=#{@hosts} --scheduler=#{@scheduler}""
+    fork do
+      Dir.chdir(""#{RAILS_ROOT}/vendor/diststats"")
+      system(""perl"", ""./mkdiststats"", ""--srcdir=#{indir}"", ""--destdir=#{outdir}"", 
+             ""--outfmt=xml"", ""#{@project.name}/#{@repository}/#{@arch}"", ""--width=910"",
+             ""--buildhosts=#{@hosts}"", ""--scheduler=#{@scheduler}"")
+    end
+    Process.wait
     f=File.open(outdir + ""/rebuild.png"")
     png=f.read
     f.close"
CVE-2010-5142,"From c3bb41f727fbe00e5de719d687757b24c8dcdfc8 Mon Sep 17 00:00:00 2001
From: Ian Meyer <ianmmeyer@gmail.com>
Date: Thu, 10 Jun 2010 12:49:45 -0400
Subject: [PATCH] CHEF-1289 API does not check for admin rights for user
 management

---
 chef-server-api/app/controllers/users.rb | 1 +
 1 file changed, 1 insertion(+)

diff --git a/chef-server-api/app/controllers/users.rb b/chef-server-api/app/controllers/users.rb
index 494039fd5ef..a336f04f03f 100644
--- a/chef-server-api/app/controllers/users.rb
+++ b/chef-server-api/app/controllers/users.rb
@@ -22,6 +22,7 @@ class Users < Application
   provides :json
 
   before :authenticate_every
+  before :is_admin, :only => [ :create, :destroy, :update ]
 
   # GET to /users
   def index"
GHSA-64qm-hrgp-pgr9,"From 907c778001625cb9daa686d5019c939cb416e45b Mon Sep 17 00:00:00 2001
From: Mike Dalessio <mike.dalessio@gmail.com>
Date: Sun, 5 Jun 2022 21:25:48 -0400
Subject: [PATCH] fix: clear credentials when redirecting to a different port

Note that in this case we treat cookies differently from credentials
per RFC 6265 section 8.5:

https://datatracker.ietf.org/doc/html/rfc6265#section-8.5

> Cookies do not provide isolation by port.  If a cookie is readable
> by a service running on one port, the cookie is also readable by a
> service running on another port of the same server.  If a cookie is
> writable by a service on one port, the cookie is also writable by a
> service running on another port of the same server.  For this
> reason, servers SHOULD NOT both run mutually distrusting services on
> different ports of the same host and use cookies to store security-
> sensitive information.
---
 lib/mechanize/http/agent.rb       | 13 +++++++++----
 test/test_mechanize_http_agent.rb | 25 +++++++++++++++++++++++--
 2 files changed, 32 insertions(+), 6 deletions(-)

diff --git a/lib/mechanize/http/agent.rb b/lib/mechanize/http/agent.rb
index 5b1b2266..9e433a3f 100644
--- a/lib/mechanize/http/agent.rb
+++ b/lib/mechanize/http/agent.rb
@@ -9,7 +9,8 @@
 
 class Mechanize::HTTP::Agent
 
-  CREDENTIAL_HEADERS = ['Authorization', 'Cookie']
+  CREDENTIAL_HEADERS = ['Authorization']
+  COOKIE_HEADERS = ['Cookie']
   POST_HEADERS = ['Content-Length', 'Content-MD5', 'Content-Type']
 
   # :section: Headers
@@ -998,10 +999,14 @@ def response_redirect(response, method, page, redirects, headers,
     end
 
     # Make sure we clear credential headers if being redirected to another site
-    if new_uri.host != page.uri.host
-      CREDENTIAL_HEADERS.each do |ch|
-        headers.delete_if { |h| h.casecmp?(ch) }
+    if new_uri.host == page.uri.host
+      if new_uri.port != page.uri.port
+        # https://datatracker.ietf.org/doc/html/rfc6265#section-8.5
+        # cookies are OK to be shared across ports on the same host
+        CREDENTIAL_HEADERS.each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }
       end
+    else
+      (COOKIE_HEADERS + CREDENTIAL_HEADERS).each { |ch| headers.delete_if { |h| h.casecmp?(ch) } }
     end
 
     fetch new_uri, redirect_method, headers, [], referer, redirects + 1
diff --git a/test/test_mechanize_http_agent.rb b/test/test_mechanize_http_agent.rb
index bc8c0580..8a2681f5 100644
--- a/test/test_mechanize_http_agent.rb
+++ b/test/test_mechanize_http_agent.rb
@@ -1569,7 +1569,7 @@ def test_response_redirect_to_cross_site_with_credential
     refute_includes(headers.keys, ""AUTHORIZATION"")
     refute_includes(headers.keys, ""cookie"")
 
-    assert_match 'range|bytes=0-9999', page.body
+    assert_match(""range|bytes=0-9999"", page.body)
     refute_match(""authorization|Basic xxx"", page.body)
     refute_match(""cookie|name=value"", page.body)
   end
@@ -1590,11 +1590,32 @@ def test_response_redirect_to_same_site_with_credential
     assert_includes(headers.keys, ""AUTHORIZATION"")
     assert_includes(headers.keys, ""cookie"")
 
-    assert_match 'range|bytes=0-9999', page.body
+    assert_match(""range|bytes=0-9999"", page.body)
     assert_match(""authorization|Basic xxx"", page.body)
     assert_match(""cookie|name=value"", page.body)
   end
 
+  def test_response_redirect_to_same_site_diff_port_with_credential
+    @agent.redirect_ok = true
+
+    headers = {
+      'Range' => 'bytes=0-9999',
+      'AUTHORIZATION' => 'Basic xxx',
+      'cookie' => 'name=value',
+    }
+
+    page = html_page ''
+    page = @agent.response_redirect({ 'Location' => 'http://example:81/http_headers' }, :get,
+                                    page, 0, headers)
+
+    refute_includes(headers.keys, ""AUTHORIZATION"")
+    assert_includes(headers.keys, ""cookie"")
+
+    assert_match(""range|bytes=0-9999"", page.body)
+    refute_match(""authorization|Basic xxx"", page.body)
+    assert_match(""cookie|name=value"", page.body)
+  end
+
   def test_response_redirect_not_ok
     @agent.redirect_ok = false"
CVE-2021-41095,"From 40b776b9d39c41d9273d01eecf8fe03aa39fcb59 Mon Sep 17 00:00:00 2001
From: Bianca Nenciu <nenciu.bianca@gmail.com>
Date: Thu, 23 Sep 2021 14:46:11 +0300
Subject: [PATCH] SECURITY: Escape watched word in error message

---
 lib/new_post_manager.rb                   | 4 ++--
 lib/validators/watched_words_validator.rb | 4 ++--
 spec/integration/watched_words_spec.rb    | 8 ++++++++
 3 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/lib/new_post_manager.rb b/lib/new_post_manager.rb
index 1dc38fcc7f7af..777d93bdb0da7 100644
--- a/lib/new_post_manager.rb
+++ b/lib/new_post_manager.rb
@@ -201,10 +201,10 @@ def perform
       result = NewPostResult.new(:created_post, false)
       if matches.size == 1
         key = 'contains_blocked_word'
-        translation_args = { word: matches[0] }
+        translation_args = { word: CGI.escapeHTML(matches[0]) }
       else
         key = 'contains_blocked_words'
-        translation_args = { words: matches.join(', ') }
+        translation_args = { words: CGI.escapeHTML(matches.join(', ')) }
       end
       result.errors.add(:base, I18n.t(key, translation_args))
       return result
diff --git a/lib/validators/watched_words_validator.rb b/lib/validators/watched_words_validator.rb
index cfa7e5a6b666b..4174e514af10d 100644
--- a/lib/validators/watched_words_validator.rb
+++ b/lib/validators/watched_words_validator.rb
@@ -5,10 +5,10 @@ def validate_each(record, attribute, value)
     if matches = WordWatcher.new(value).should_block?.presence
       if matches.size == 1
         key = 'contains_blocked_word'
-        translation_args = { word: matches[0] }
+        translation_args = { word: CGI.escapeHTML(matches[0]) }
       else
         key = 'contains_blocked_words'
-        translation_args = { words: matches.join(', ') }
+        translation_args = { words: CGI.escapeHTML(matches.join(', ')) }
       end
       record.errors.add(:base, I18n.t(key, translation_args))
     end
diff --git a/spec/integration/watched_words_spec.rb b/spec/integration/watched_words_spec.rb
index b8f5fff39b5bd..7fb3c04708e71 100644
--- a/spec/integration/watched_words_spec.rb
+++ b/spec/integration/watched_words_spec.rb
@@ -32,6 +32,14 @@ def should_block_post(manager)
       }.to_not change { Post.count }
     end
 
+    it ""escapes the blocked word in error message"" do
+      block_word = Fabricate(:watched_word, action: WatchedWord.actions[:block], word: ""<a>"")
+      manager = NewPostManager.new(tl2_user, raw: ""Want some #{block_word.word} for cheap?"", topic_id: topic.id)
+      result = manager.perform
+      expect(result).to_not be_success
+      expect(result.errors[:base]&.first).to eq(I18n.t('contains_blocked_word', word: ""&lt;a&gt;""))
+    end
+
     it ""should prevent the post from being created"" do
       manager = NewPostManager.new(tl2_user, raw: ""Want some #{block_word.word} for cheap?"", topic_id: topic.id)
       should_block_post(manager)"
CVE-2013-7225,"From d4b2de81a4d8c1b201482edcb2488ed9280a65fd Mon Sep 17 00:00:00 2001
From: Steve Kenworthy <steveyken@gmail.com>
Date: Fri, 27 Dec 2013 15:41:55 +0800
Subject: [PATCH] Refactor activity_user to remove possible SQL injection
 points.

---
 app/controllers/home_controller.rb       | 10 ++++++----
 spec/controllers/home_controller_spec.rb |  6 ++++--
 2 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/app/controllers/home_controller.rb b/app/controllers/home_controller.rb
index 491fd4dc29..0306f02b53 100644
--- a/app/controllers/home_controller.rb
+++ b/app/controllers/home_controller.rb
@@ -122,6 +122,9 @@ def activity_event
   end
 
   #----------------------------------------------------------------------------
+  # TODO: this is ugly, ugly code. It's being security patched now but urgently
+  # needs refactoring to use user id instead. Permuations based on name or email
+  # yield incorrect results.
   def activity_user
     user = current_user.pref[:activity_user]
     if user && user != ""all_users""
@@ -130,12 +133,11 @@ def activity_user
         else # first_name middle_name last_name any_name
           name_query = if user.include?("" "")
             user.name_permutations.map{ |first, last|
-              ""(upper(first_name) LIKE upper('%#{first}%') AND upper(last_name) LIKE upper('%#{last}%'))""
-            }.join("" OR "")
+              User.where(:first_name => first, :last_name => last)
+            }.map(&:to_a).flatten.first
           else
-            ""upper(first_name) LIKE upper('%#{user}%') OR upper(last_name) LIKE upper('%#{user}%')""
+            [User.where(:first_name => user), User.where(:last_name => user)].map(&:to_a).flatten.first
           end
-          User.where(name_query).first
         end
     end
     user.is_a?(User) ? user.id : nil
diff --git a/spec/controllers/home_controller_spec.rb b/spec/controllers/home_controller_spec.rb
index ed1725d2f8..0095333be7 100644
--- a/spec/controllers/home_controller_spec.rb
+++ b/spec/controllers/home_controller_spec.rb
@@ -171,14 +171,16 @@
     it ""should find a user by first name or last name"" do
       @cur_user.stub(:pref).and_return(:activity_user => 'Billy')
       controller.instance_variable_set(:@current_user, @cur_user)
-      User.should_receive(:where).with(""upper(first_name) LIKE upper('%Billy%') OR upper(last_name) LIKE upper('%Billy%')"").and_return([@user])
+      User.should_receive(:where).with(:first_name => 'Billy').and_return([@user])
+      User.should_receive(:where).with(:last_name => 'Billy').and_return([@user])
       controller.send(:activity_user).should == 1
     end
 
     it ""should find a user by first name and last name"" do
       @cur_user.stub(:pref).and_return(:activity_user => 'Billy Elliot')
       controller.instance_variable_set(:@current_user, @cur_user)
-      User.should_receive(:where).with(""(upper(first_name) LIKE upper('%Billy%') AND upper(last_name) LIKE upper('%Elliot%')) OR (upper(first_name) LIKE upper('%Elliot%') AND upper(last_name) LIKE upper('%Billy%'))"").and_return([@user])
+      User.should_receive(:where).with(:first_name => 'Billy', :last_name => ""Elliot"").and_return([@user])
+      User.should_receive(:where).with(:first_name => 'Elliot', :last_name => ""Billy"").and_return([@user])
       controller.send(:activity_user).should == 1
     end"
CVE-2017-18026,"From 9d797400eaec5f9fa7ba9507c82d9c18cb91d02e Mon Sep 17 00:00:00 2001
From: Toshi MARUYAMA <marutosijp2@yahoo.co.jp>
Date: Thu, 7 Dec 2017 11:38:47 +0000
Subject: [PATCH] mercurial: work around faulty parsing of early command
 options (#27516)

Use -sVALUE and --long=VALUE instead of ""-s VALUE"" and ""--long VALUE""
respectively.

Contributed by Yuya Nishihara.

git-svn-id: http://svn.redmine.org/redmine/trunk@17062 e93f8b46-1217-0410-a6f0-8f06a7374b81
---
 lib/redmine/scm/adapters/mercurial_adapter.rb | 27 ++++++++++---------
 .../scm/adapters/mercurial_adapter_test.rb    | 12 ++++-----
 2 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/lib/redmine/scm/adapters/mercurial_adapter.rb b/lib/redmine/scm/adapters/mercurial_adapter.rb
index 0e7f766d472..599c3a42fae 100644
--- a/lib/redmine/scm/adapters/mercurial_adapter.rb
+++ b/lib/redmine/scm/adapters/mercurial_adapter.rb
@@ -140,7 +140,7 @@ def summary
 
         def entries(path=nil, identifier=nil, options={})
           p1 = scm_iconv(@path_encoding, 'UTF-8', path)
-          manifest = hg('rhmanifest', '-r', CGI.escape(hgrev(identifier)),
+          manifest = hg('rhmanifest', ""-r#{CGI.escape(hgrev(identifier))}"",
                         '--', CGI.escape(without_leading_slash(p1.to_s))) do |io|
             output = io.read.force_encoding('UTF-8')
             begin
@@ -181,9 +181,9 @@ def revisions(path=nil, identifier_from=nil, identifier_to=nil, options={})
         # Iterates the revisions by using a template file that
         # makes Mercurial produce a xml output.
         def each_revision(path=nil, identifier_from=nil, identifier_to=nil, options={})
-          hg_args = ['log', '--debug', '-C', '--style', self.class.template_path]
-          hg_args << '-r' << ""#{hgrev(identifier_from)}:#{hgrev(identifier_to)}""
-          hg_args << '--limit' << options[:limit] if options[:limit]
+          hg_args = ['log', '--debug', '-C', ""--style=#{self.class.template_path}""]
+          hg_args << ""-r#{hgrev(identifier_from)}:#{hgrev(identifier_to)}""
+          hg_args << ""--limit=#{options[:limit]}"" if options[:limit]
           hg_args << '--' << hgtarget(path) unless path.blank?
           log = hg(*hg_args) do |io|
             output = io.read.force_encoding('UTF-8')
@@ -224,19 +224,19 @@ def each_revision(path=nil, identifier_from=nil, identifier_to=nil, options={})
 
         # Returns list of nodes in the specified branch
         def nodes_in_branch(branch, options={})
-          hg_args = ['rhlog', '--template', '{node}\n', '--rhbranch', CGI.escape(branch)]
-          hg_args << '--from' << CGI.escape(branch)
-          hg_args << '--to'   << '0'
-          hg_args << '--limit' << options[:limit] if options[:limit]
+          hg_args = ['rhlog', '--template={node}\n', ""--rhbranch=#{CGI.escape(branch)}""]
+          hg_args << ""--from=#{CGI.escape(branch)}""
+          hg_args << '--to=0'
+          hg_args << ""--limit=#{options[:limit]}"" if options[:limit]
           hg(*hg_args) { |io| io.readlines.map { |e| e.chomp } }
         end
 
         def diff(path, identifier_from, identifier_to=nil)
           hg_args = %w|rhdiff|
           if identifier_to
-            hg_args << '-r' << hgrev(identifier_to) << '-r' << hgrev(identifier_from)
+            hg_args << ""-r#{hgrev(identifier_to)}"" << ""-r#{hgrev(identifier_from)}""
           else
-            hg_args << '-c' << hgrev(identifier_from)
+            hg_args << ""-c#{hgrev(identifier_from)}""
           end
           unless path.blank?
             p = scm_iconv(@path_encoding, 'UTF-8', path)
@@ -255,7 +255,7 @@ def diff(path, identifier_from, identifier_to=nil)
 
         def cat(path, identifier=nil)
           p = CGI.escape(scm_iconv(@path_encoding, 'UTF-8', path))
-          hg 'rhcat', '-r', CGI.escape(hgrev(identifier)), '--', hgtarget(p) do |io|
+          hg 'rhcat', ""-r#{CGI.escape(hgrev(identifier))}"", '--', hgtarget(p) do |io|
             io.binmode
             io.read
           end
@@ -266,7 +266,7 @@ def cat(path, identifier=nil)
         def annotate(path, identifier=nil)
           p = CGI.escape(scm_iconv(@path_encoding, 'UTF-8', path))
           blame = Annotate.new
-          hg 'rhannotate', '-ncu', '-r', CGI.escape(hgrev(identifier)), '--', hgtarget(p) do |io|
+          hg 'rhannotate', '-ncu', ""-r#{CGI.escape(hgrev(identifier))}"", '--', hgtarget(p) do |io|
             io.each_line do |line|
               line.force_encoding('ASCII-8BIT')
               next unless line =~ %r{^([^:]+)\s(\d+)\s([0-9a-f]+):\s(.*)$}
@@ -304,7 +304,8 @@ def hg(*args, &block)
           end
 
           repo_path = root_url || url
-          full_args = ['-R', repo_path, '--encoding', 'utf-8']
+          full_args = [""-R#{repo_path}"", '--encoding=utf-8']
+          # don't use ""--config=<value>"" form for compatibility with ancient Mercurial
           full_args << '--config' << ""extensions.redminehelper=#{HG_HELPER_EXT}""
           full_args << '--config' << 'diff.git=false'
           full_args += args
diff --git a/test/unit/lib/redmine/scm/adapters/mercurial_adapter_test.rb b/test/unit/lib/redmine/scm/adapters/mercurial_adapter_test.rb
index e0458ce55a5..4f891602a3b 100644
--- a/test/unit/lib/redmine/scm/adapters/mercurial_adapter_test.rb
+++ b/test/unit/lib/redmine/scm/adapters/mercurial_adapter_test.rb
@@ -21,6 +21,7 @@ class MercurialAdapterTest < ActiveSupport::TestCase
   HELPERS_DIR        = Redmine::Scm::Adapters::MercurialAdapter::HELPERS_DIR
   TEMPLATE_NAME      = Redmine::Scm::Adapters::MercurialAdapter::TEMPLATE_NAME
   TEMPLATE_EXTENSION = Redmine::Scm::Adapters::MercurialAdapter::TEMPLATE_EXTENSION
+  HgCommandAborted   = Redmine::Scm::Adapters::MercurialAdapter::HgCommandAborted
   HgCommandArgumentError = Redmine::Scm::Adapters::MercurialAdapter::HgCommandArgumentError
 
   REPOSITORY_PATH = repository_path('mercurial')
@@ -445,19 +446,18 @@ def test_path_encoding_default_utf8
     end
 
     def test_bad_early_options
-      assert_raise HgCommandArgumentError do
-        @adapter.diff('sources/welcome_controller.rb', '--config=alias.rhdiff=!xterm')
-      end
+      assert_nil @adapter.diff('sources/welcome_controller.rb',
+                               '--config=alias.rhdiff=!xterm')
       assert_raise HgCommandArgumentError do
         @adapter.entries('--debugger')
       end
-      assert_raise HgCommandArgumentError do
+      assert_raise HgCommandAborted do
         @adapter.revisions(nil, nil, nil, limit: '--repo=otherrepo')
       end
-      assert_raise HgCommandArgumentError do
+      assert_raise HgCommandAborted do
         @adapter.nodes_in_branch('default', limit: '--repository=otherrepo')
       end
-      assert_raise HgCommandArgumentError do
+      assert_raise HgCommandAborted do
         @adapter.nodes_in_branch('-Rotherrepo')
       end
     end"
GHSA-cf3w-g86h-35x4,"From 387116f5c72efa42bc3938d946b4c8d2f22181b7 Mon Sep 17 00:00:00 2001
From: ""M.Shibuya"" <mit.shibuya@gmail.com>
Date: Sun, 7 Feb 2021 15:26:22 +0900
Subject: [PATCH] Fix Code Injection vulnerability in CarrierWave::RMagick

Refs. https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-cf3w-g86h-35x4
---
 lib/carrierwave/processing/rmagick.rb | 12 +++++++---
 spec/processing/rmagick_spec.rb       | 34 ++++++++++++++++++++++++++-
 2 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/lib/carrierwave/processing/rmagick.rb b/lib/carrierwave/processing/rmagick.rb
index 45d57039c..2c0786a35 100644
--- a/lib/carrierwave/processing/rmagick.rb
+++ b/lib/carrierwave/processing/rmagick.rb
@@ -378,9 +378,15 @@ def manipulate!(options={}, &block)
 
     def create_info_block(options)
       return nil unless options
-      assignments = options.map { |k, v| ""img.#{k} = #{v}"" }
-      code = ""lambda { |img| "" + assignments.join("";"") + ""}""
-      eval code
+      proc do |img|
+        options.each do |k, v|
+          if v.is_a?(String) && (matches = v.match(/^[""'](.+)[""']/))
+            ActiveSupport::Deprecation.warn ""Passing quoted strings like #{v} to #manipulate! is deprecated, pass them without quoting.""
+            v = matches[1]
+          end
+          img.public_send(:""#{k}="", v)
+        end
+      end
     end
 
     def destroy_image(image)
diff --git a/spec/processing/rmagick_spec.rb b/spec/processing/rmagick_spec.rb
index 2c5d95fde..19037749b 100644
--- a/spec/processing/rmagick_spec.rb
+++ b/spec/processing/rmagick_spec.rb
@@ -208,9 +208,41 @@
 
       instance.manipulate! :read => {
           :density => 10,
-          :size => %{""200x200""}
+          :size => ""200x200""
         }
     end
+
+    it 'shows deprecation but still accepts strings enclosed with double quotes' do
+      expect_any_instance_of(::Magick::Image::Info).to receive(:size=).once.with(""200x200"")
+      expect(ActiveSupport::Deprecation).to receive(:warn).with(any_args)
+      instance.manipulate! :read => {:size => %{""200x200""}}
+    end
+
+    it 'shows deprecation but still accepts strings enclosed with single quotes' do
+      expect_any_instance_of(::Magick::Image::Info).to receive(:size=).once.with(""200x200"")
+      expect(ActiveSupport::Deprecation).to receive(:warn).with(any_args)
+      instance.manipulate! :read => {:size => %{'200x200'}}
+    end
+
+    it 'does not allow arbitrary code execution' do
+      expect_any_instance_of(Kernel).not_to receive(:puts)
+      expect do
+        instance.manipulate! :read => {
+            :density => ""1 }; raise; {""
+        }
+      end.to raise_error ArgumentError, /invalid density geometry/
+    end
+
+    it 'does not allow invocation of non-public methods' do
+      module Kernel
+        private def foo=(value); raise; end
+      end
+      expect do
+        instance.manipulate! :read => {
+            :foo => ""1""
+        }
+      end.to raise_error NoMethodError, /private method `foo=' called/
+    end
   end
 
   describe ""#width and #height"" do"
GHSA-52p9-v744-mwjj,"From d6a1cbcb2caa2f8a70927f176070d126b2422760 Mon Sep 17 00:00:00 2001
From: Stan Hu <stanhu@gmail.com>
Date: Sun, 14 Mar 2021 11:21:00 -0700
Subject: [PATCH] Restrict Rouge formatters to Rouge::Formatters namespace

ff0218a added support for specifying custom Rouge formatters with the
constraint that the formatter be in theRouge::Formatters namespace, but
it did not actually enforce this constraint. For example, this is valid:

```ruby
Rouge::Formatters.const_get('CSV')
=> CSV
```

Adding the `false` parameter to `const_get` prevents this:

```ruby
Rouge::Formatters.const_get('CSV', false)
NameError: uninitialized constant Rouge::Formatters::CSV
```
---
 .../converter/syntax_highlighter/rouge.rb      |  2 +-
 test/test_files.rb                             | 18 +++++++++++-------
 2 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/lib/kramdown/converter/syntax_highlighter/rouge.rb b/lib/kramdown/converter/syntax_highlighter/rouge.rb
index c799526c..ed6a4f83 100644
--- a/lib/kramdown/converter/syntax_highlighter/rouge.rb
+++ b/lib/kramdown/converter/syntax_highlighter/rouge.rb
@@ -70,7 +70,7 @@ def self.formatter_class(opts = {})
       when Class
         formatter
       when /\A[[:upper:]][[:alnum:]_]*\z/
-        ::Rouge::Formatters.const_get(formatter)
+        ::Rouge::Formatters.const_get(formatter, false)
       else
         # Available in Rouge 2.0 or later
         ::Rouge::Formatters::HTMLLegacy
diff --git a/test/test_files.rb b/test/test_files.rb
index b446b3bc..7e2ccad3 100644
--- a/test/test_files.rb
+++ b/test/test_files.rb
@@ -21,16 +21,20 @@
   end
 
   # custom formatter for tests
-  class RougeHTMLFormatters < Kramdown::Converter::SyntaxHighlighter::Rouge.formatter_class
+  module Rouge
+    module Formatters
+      class RougeHTMLFormatters < Kramdown::Converter::SyntaxHighlighter::Rouge.formatter_class
 
-    tag 'rouge_html_formatters'
+        tag 'rouge_html_formatters'
 
-    def stream(tokens, &b)
-      yield %(<div class=""custom-class"">)
-      super
-      yield %(</div>)
-    end
+        def stream(tokens, &b)
+          yield %(<div class=""custom-class"">)
+          super
+          yield %(</div>)
+        end
 
+      end
+    end
   end
 rescue LoadError, SyntaxError, NameError
 end"
