vuln_id,code_diff
GHSA-7q8g-gpfp-v8gx,"From 95746d346cddbd6134c4b28fdc39d5813a626f97 Mon Sep 17 00:00:00 2001
From: Andy LoPresto <alopresto@apache.org>
Date: Thu, 30 Jan 2020 20:51:32 -0800
Subject: [PATCH] NIFI-7079 Added SecureHasher interface and Argon2SecureHasher
 implementation. Added unit tests. Fixed JwtService charset references.
 Changed FingerprintFactory to mask sensitive values via Argon2 hashing.
 Resolved RAT checks.

---
 nifi-commons/nifi-security-utils/pom.xml      |   9 +-
 .../util/crypto/Argon2SecureHasher.java       | 218 ++++++++++++++++
 .../security/util/crypto/SecureHasher.java    |  56 ++++
 .../util/crypto/Argon2SecureHasherTest.groovy | 242 ++++++++++++++++++
 .../src/test/resources/logback-test.xml       |  39 +++
 .../nifi/fingerprint/FingerprintFactory.java  |  75 ++++--
 .../FingerprintFactoryGroovyTest.groovy       |  88 +++++++
 .../fingerprint/FingerprintFactoryTest.java   |  50 ++--
 .../src/test/resources/logback-test.xml       |   1 +
 .../resources/nifi/fingerprint/initial.xml    | 152 +++++++++++
 .../resources/nifi/fingerprint/modified.xml   | 152 +++++++++++
 .../nifi/web/security/jwt/JwtServiceTest.java |  45 ++--
 12 files changed, 1053 insertions(+), 74 deletions(-)
 create mode 100644 nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/Argon2SecureHasher.java
 create mode 100644 nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/SecureHasher.java
 create mode 100644 nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/util/crypto/Argon2SecureHasherTest.groovy
 create mode 100644 nifi-commons/nifi-security-utils/src/test/resources/logback-test.xml
 create mode 100644 nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/fingerprint/FingerprintFactoryGroovyTest.groovy
 create mode 100644 nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/initial.xml
 create mode 100644 nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/modified.xml

diff --git a/nifi-commons/nifi-security-utils/pom.xml b/nifi-commons/nifi-security-utils/pom.xml
index eadbaef8640d..1b14efa963f6 100644
--- a/nifi-commons/nifi-security-utils/pom.xml
+++ b/nifi-commons/nifi-security-utils/pom.xml
@@ -37,9 +37,14 @@
             <artifactId>nifi-utils</artifactId>
             <version>1.12.0-SNAPSHOT</version>
         </dependency>
+        <!--<dependency>-->
+            <!--<groupId>org.slf4j</groupId>-->
+            <!--<artifactId>slf4j-api</artifactId>-->
+        <!--</dependency>-->
         <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.commons</groupId>
diff --git a/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/Argon2SecureHasher.java b/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/Argon2SecureHasher.java
new file mode 100644
index 000000000000..c152759f9930
--- /dev/null
+++ b/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/Argon2SecureHasher.java
@@ -0,0 +1,218 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.security.util.crypto;
+
+import java.nio.charset.StandardCharsets;
+import java.security.SecureRandom;
+import java.util.concurrent.TimeUnit;
+import org.bouncycastle.crypto.generators.Argon2BytesGenerator;
+import org.bouncycastle.crypto.params.Argon2Parameters;
+import org.bouncycastle.util.encoders.Base64;
+import org.bouncycastle.util.encoders.Hex;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Provides an implementation of {@code Argon2} for secure password hashing. This class is
+ * roughly based on Spring Security's implementation but does not include the full module
+ * in this utility module. This implementation uses {@code Argon2id} which provides a
+ * balance of protection against side-channel and memory attacks.
+ * <p>
+ * One <strong>critical</strong> difference is that this implementation uses a
+ * <strong>static universal</strong> salt unless instructed otherwise, which provides
+ * strict determinism across nodes in a cluster. The purpose for this is to allow for
+ * blind equality comparison of sensitive values hashed on different nodes (with
+ * potentially different {@code nifi.sensitive.props.key} values) during flow inheritance
+ * (see {@code FingerprintFactory}).
+ */
+public class Argon2SecureHasher implements SecureHasher {
+    private static final Logger logger = LoggerFactory.getLogger(Argon2SecureHasher.class);
+
+    private static final int DEFAULT_SALT_LENGTH = 16;
+    private static final int DEFAULT_HASH_LENGTH = 32;
+    private static final int DEFAULT_PARALLELISM = 1;
+    private static final int DEFAULT_MEMORY = 1 << 12;
+    private static final int DEFAULT_ITERATIONS = 3;
+
+    private final int hashLength;
+    private final int memory;
+    private final int parallelism;
+    private final int iterations;
+    private final int saltLength;
+
+    private final boolean usingStaticSalt;
+
+    // A 16 byte salt (nonce) is recommended for password hashing
+    private static final byte[] staticSalt = ""NiFi Static Salt"".getBytes(StandardCharsets.UTF_8);
+
+    /**
+     * Instantiates an Argon2 secure hasher using the default cost parameters
+     * ({@code hashLength = }{@link #DEFAULT_HASH_LENGTH},
+     * {@code memory = }{@link #DEFAULT_MEMORY},
+     * {@code parallelism = }{@link #DEFAULT_PARALLELISM},
+     * {@code iterations = }{@link #DEFAULT_ITERATIONS}). A static salt is also used.
+     */
+    public Argon2SecureHasher() {
+        this(DEFAULT_HASH_LENGTH, DEFAULT_MEMORY, DEFAULT_PARALLELISM, DEFAULT_ITERATIONS, 0);
+    }
+
+    /**
+     * Instantiates an Argon2 secure hasher using the provided cost parameters. A unique
+     * {@link #DEFAULT_SALT_LENGTH} byte salt will be generated on every hash request.
+     *
+     * @param hashLength  the output length in bytes ({@code 4 to 2^32 -1})
+     * @param memory      the integer number of KB used ({@code 8p to 2^32 - 1})
+     * @param parallelism degree of parallelism ({@code 1 to 2^24 - 1})
+     * @param iterations  number of iterations ({@code 1 to 2^32 - 1})
+     */
+    public Argon2SecureHasher(int hashLength, int memory, int parallelism, int iterations) {
+        this(hashLength, memory, parallelism, iterations, 0);
+    }
+
+    /**
+     * Instantiates an Argon2 secure hasher using the provided cost parameters. A unique
+     * salt of the specified length will be generated on every hash request.
+     *
+     * @param hashLength  the output length in bytes ({@code 4 to 2^32 -1})
+     * @param memory      the integer number of KB used ({@code 8p to 2^32 - 1})
+     * @param parallelism degree of parallelism ({@code 1 to 2^24 - 1})
+     * @param iterations  number of iterations ({@code 1 to 2^32 - 1})
+     * @param saltLength  the salt length in bytes {@code 8 to 2^32 - 1})
+     */
+    public Argon2SecureHasher(int hashLength, int memory, int parallelism, int iterations, int saltLength) {
+        // TODO: Implement boundary checking
+        this.hashLength = hashLength;
+        this.memory = memory;
+        this.parallelism = parallelism;
+        this.iterations = iterations;
+
+        this.saltLength = saltLength;
+        if (saltLength > 0) {
+            this.usingStaticSalt = false;
+        } else {
+            this.usingStaticSalt = true;
+            logger.debug(""Configured to use static salt"");
+        }
+    }
+
+    /**
+     * Returns {@code true} if this instance is configured to use a static salt.
+     *
+     * @return true if all hashes will be generated using a static salt
+     */
+    public boolean isUsingStaticSalt() {
+        return usingStaticSalt;
+    }
+
+    /**
+     * Returns a salt to use. If using a static salt (see {@link #isUsingStaticSalt()}),
+     * this return value will be identical across every invocation. If using a dynamic salt,
+     * it will be {@link #saltLength} bytes of a securely-generated random value.
+     *
+     * @return the salt value
+     */
+    byte[] getSalt() {
+        if (isUsingStaticSalt()) {
+            return staticSalt;
+        } else {
+            SecureRandom sr = new SecureRandom();
+            byte[] salt = new byte[saltLength];
+            sr.nextBytes(salt);
+            return salt;
+        }
+    }
+
+    /**
+     * Returns a String representation of {@code CHF(input)} in hex-encoded format.
+     *
+     * @param input the input
+     * @return the hex-encoded hash
+     */
+    @Override
+    public String hashHex(String input) {
+        if (input == null) {
+            logger.warn(""Attempting to generate an Argon2 hash of null input; using empty input"");
+            input = """";
+        }
+
+        return Hex.toHexString(hash(input.getBytes(StandardCharsets.UTF_8)));
+    }
+
+    /**
+     * Returns a String representation of {@code CHF(input)} in Base 64-encoded format.
+     *
+     * @param input the input
+     * @return the Base 64-encoded hash
+     */
+    @Override
+    public String hashBase64(String input) {
+        if (input == null) {
+            logger.warn(""Attempting to generate an Argon2 hash of null input; using empty input"");
+            input = """";
+        }
+
+        return Base64.toBase64String(hash(input.getBytes(StandardCharsets.UTF_8)));
+    }
+
+    /**
+     * Returns a byte[] representation of {@code CHF(input)}.
+     *
+     * @param input the input
+     * @return the hash
+     */
+    @Override
+    public byte[] hashRaw(byte[] input) {
+        return hash(input);
+    }
+
+    /**
+     * Internal method to hash the raw bytes.
+     *
+     * @param input the raw bytes to hash (can be length 0)
+     * @return the generated hash
+     */
+    private byte[] hash(byte[] input) {
+        byte[] salt = getSalt();
+        byte[] hash = new byte[hashLength];
+        logger.debug(""Creating {} byte Argon2 hash with salt [{}]"", hashLength, Hex.toHexString(salt));
+
+        final long startNanos = System.nanoTime();
+
+        Argon2Parameters params = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id)
+                .withSalt(salt)
+                .withParallelism(parallelism)
+                .withMemoryAsKB(memory)
+                .withIterations(iterations)
+                .build();
+        Argon2BytesGenerator generator = new Argon2BytesGenerator();
+        generator.init(params);
+
+        final long initNanos = System.nanoTime();
+
+        generator.generateBytes(input, hash);
+
+        final long generateNanos = System.nanoTime();
+
+        final long initDurationMicros = TimeUnit.NANOSECONDS.toMicros(initNanos - startNanos);
+        final long generateDurationMicros = TimeUnit.NANOSECONDS.toMicros(generateNanos - initNanos);
+        final long totalDurationMillis = TimeUnit.MICROSECONDS.toMillis(initDurationMicros + generateDurationMicros);
+
+        logger.debug(""Generated Argon2 hash in {} ms (init: {} µs, generate: {} µs)"", totalDurationMillis, initDurationMicros, generateDurationMicros);
+
+        return hash;
+    }
+}
diff --git a/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/SecureHasher.java b/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/SecureHasher.java
new file mode 100644
index 000000000000..be0328fa7a9b
--- /dev/null
+++ b/nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/util/crypto/SecureHasher.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.security.util.crypto;
+
+/**
+ * An interface which specifies that implementations should provide a
+ * cryptographic hash function (CHF) which accepts input and returns a
+ * deterministic, (mathematically-difficult) irreversible value.
+ *
+ * While SHA-256, SHA-512, and Blake2 are CHF implementations, this interface is intended to
+ * be used by password protection or key derivation functions (KDF) like
+ * {@link PBKDF2CipherProvider}, {@link BcryptCipherProvider}, {@link ScryptCipherProvider},
+ * or {@link Argon2SecureHasher}. These classes implement iterative processes which make use
+ * of cryptographic primitives to return an irreversible value which can either securely
+ * store a password representation or be used as an encryption key derived from a password.
+ */
+public interface SecureHasher {
+
+    /**
+     * Returns a String representation of {@code CHF(input)} in hex-encoded format.
+     *
+     * @param input the input
+     * @return the hex-encoded hash
+     */
+    String hashHex(String input);
+
+    /**
+     * Returns a String representation of {@code CHF(input)} in Base 64-encoded format.
+     *
+     * @param input the input
+     * @return the Base 64-encoded hash
+     */
+    String hashBase64(String input);
+
+    /**
+     * Returns a byte[] representation of {@code CHF(input)}.
+     *
+     * @param input the input
+     * @return the hash
+     */
+    byte[] hashRaw(byte[] input);
+}
diff --git a/nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/util/crypto/Argon2SecureHasherTest.groovy b/nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/util/crypto/Argon2SecureHasherTest.groovy
new file mode 100644
index 000000000000..e952a70e3ba1
--- /dev/null
+++ b/nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/util/crypto/Argon2SecureHasherTest.groovy
@@ -0,0 +1,242 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.security.util.crypto
+
+import org.apache.kerby.util.Hex
+import org.bouncycastle.jce.provider.BouncyCastleProvider
+import org.junit.After
+import org.junit.Before
+import org.junit.BeforeClass
+import org.junit.Ignore
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.JUnit4
+import org.slf4j.Logger
+import org.slf4j.LoggerFactory
+
+import java.security.Security
+
+@RunWith(JUnit4.class)
+class Argon2SecureHasherTest extends GroovyTestCase {
+    private static final Logger logger = LoggerFactory.getLogger(Argon2SecureHasherTest.class)
+
+    @BeforeClass
+    static void setUpOnce() throws Exception {
+        Security.addProvider(new BouncyCastleProvider())
+
+        logger.metaClass.methodMissing = { String name, args ->
+            logger.info(""[${name?.toUpperCase()}] ${(args as List).join("" "")}"")
+        }
+    }
+
+    @Before
+    void setUp() throws Exception {
+    }
+
+    @After
+    void tearDown() throws Exception {
+    }
+
+    private static byte[] decodeHex(String hex) {
+        Hex.decode(hex?.replaceAll(""[^0-9a-fA-F]"", """"))
+    }
+
+    @Ignore(""Cannot override static salt"")
+    @Test
+    void testShouldMatchReferenceVectors() {
+        // Arrange
+        int hashLength = 32
+        int memory = 32
+        int parallelism = 4
+        int iterations = 3
+        logger.info(""Generating Argon2 hash for hash length: ${hashLength} B, mem: ${memory} KiB, parallelism: ${parallelism}, iterations: ${iterations}"")
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher(hashLength, memory, parallelism, iterations)
+        // Override the static salt for the published test vector
+//        a2sh.staticSalt = [0x02] * 16
+
+        // Act
+        byte[] hash = a2sh.hashRaw([0x01] * 32 as byte[])
+        logger.info(""Generated hash: ${Hex.encode(hash)}"")
+
+        // Assert
+        assert hash == decodeHex(""0d 64 0d f5 8d 78 76 6c 08 c0 37 a3 4a 8b 53 c9 d0 "" +
+                ""1e f0 45 2d 75 b6 5e b5 25 20 e9 6b 01 e6 59"")
+
+        // Clean up
+//        Argon2SecureHasher.staticSalt = ""NiFi Static Salt"".bytes
+    }
+
+    @Test
+    void testShouldBeDeterministicWithStaticSalt() {
+        // Arrange
+        int hashLength = 32
+        int memory = 8
+        int parallelism = 4
+        int iterations = 4
+        logger.info(""Generating Argon2 hash for hash length: ${hashLength} B, mem: ${memory} KiB, parallelism: ${parallelism}, iterations: ${iterations}"")
+
+        int testIterations = 10
+        byte[] inputBytes = ""This is a sensitive value"".bytes
+
+        final String EXPECTED_HASH_HEX = ""a73a471f51b2900901a00b81e770b9c1dfc595602bb7aec64cd27754a4174919""
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher(hashLength, memory, parallelism, iterations)
+
+        def results = []
+
+        // Act
+        testIterations.times { int i ->
+            byte[] hash = a2sh.hashRaw(inputBytes)
+            String hashHex = Hex.encode(hash)
+            logger.info(""Generated hash: ${hashHex}"")
+            results << hashHex
+        }
+
+        // Assert
+        assert results.every { it == EXPECTED_HASH_HEX }
+    }
+
+    @Test
+    void testShouldBeDifferentWithRandomSalt() {
+        // Arrange
+        int hashLength = 32
+        int memory = 8
+        int parallelism = 4
+        int iterations = 4
+        logger.info(""Generating Argon2 hash for hash length: ${hashLength} B, mem: ${memory} KiB, parallelism: ${parallelism}, iterations: ${iterations}"")
+
+        int testIterations = 10
+        byte[] inputBytes = ""This is a sensitive value"".bytes
+
+        final String EXPECTED_HASH_HEX = ""a73a471f51b2900901a00b81e770b9c1dfc595602bb7aec64cd27754a4174919""
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher(hashLength, memory, parallelism, iterations, 16)
+
+        def results = []
+
+        // Act
+        testIterations.times { int i ->
+            byte[] hash = a2sh.hashRaw(inputBytes)
+            String hashHex = Hex.encode(hash)
+            logger.info(""Generated hash: ${hashHex}"")
+            results << hashHex
+        }
+
+        // Assert
+        assert results.unique().size() == results.size()
+        assert results.every { it != EXPECTED_HASH_HEX }
+    }
+
+    @Test
+    void testShouldFormatHex() {
+        // Arrange
+        String input = ""This is a sensitive value""
+
+        final String EXPECTED_HASH_HEX = ""0c2920c52f28e0a2c77d006ec6138c8dc59580881468b85541cf886abdebcf18""
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher()
+
+        // Act
+        String hashHex = a2sh.hashHex(input)
+        logger.info(""Generated hash: ${hashHex}"")
+
+        // Assert
+        assert hashHex == EXPECTED_HASH_HEX
+    }
+
+    @Test
+    void testShouldFormatBase64() {
+        // Arrange
+        String input = ""This is a sensitive value""
+
+        final String EXPECTED_HASH_B64 = ""DCkgxS8o4KLHfQBuxhOMjcWVgIgUaLhVQc+Iar3rzxg=""
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher()
+
+        // Act
+        String hashB64 = a2sh.hashBase64(input)
+        logger.info(""Generated hash: ${hashB64}"")
+
+        // Assert
+        assert hashB64 == EXPECTED_HASH_B64
+    }
+
+    @Test
+    void testShouldHandleNullInput() {
+        // Arrange
+        List<String> inputs = [null, """"]
+
+        final String EXPECTED_HASH_HEX = ""8e5625a66b94ed9d31c1496d7f9ff49249cf05d6753b50ba0e2bf2a1108973dd""
+        final String EXPECTED_HASH_B64 = ""jlYlpmuU7Z0xwUltf5/0kknPBdZ1O1C6DivyoRCJc90=""
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher()
+
+        def hexResults = []
+        def b64Results = []
+
+        // Act
+        inputs.each { String input ->
+            String hashHex = a2sh.hashHex(input)
+            logger.info(""Generated hash: ${hashHex}"")
+            hexResults << hashHex
+
+            String hashB64 = a2sh.hashBase64(input)
+            logger.info(""Generated hash: ${hashB64}"")
+            b64Results << hashB64
+        }
+
+        // Assert
+        assert hexResults.every { it == EXPECTED_HASH_HEX }
+        assert b64Results.every { it == EXPECTED_HASH_B64 }
+    }
+
+    /**
+     * This test can have the minimum time threshold updated to determine if the performance
+     * is still sufficient compared to the existing threat model.
+     */
+    @Test
+    void testDefaultCostParamsShouldBeSufficient() {
+        // Arrange
+        int testIterations = 10
+        byte[] inputBytes = ""This is a sensitive value"".bytes
+
+        Argon2SecureHasher a2sh = new Argon2SecureHasher()
+
+        def results = []
+        def resultDurations = []
+
+        // Act
+        testIterations.times { int i ->
+            long startNanos = System.nanoTime()
+            byte[] hash = a2sh.hashRaw(inputBytes)
+            long endNanos = System.nanoTime()
+            long durationNanos = endNanos - startNanos
+
+            String hashHex = Hex.encode(hash)
+            logger.info(""Generated hash: ${hashHex} in ${durationNanos} ns"")
+
+            results << hashHex
+            resultDurations << durationNanos
+        }
+
+        // Assert
+        final long MIN_DURATION_NANOS = 5_000_000 // 5 ms
+        assert resultDurations.min() > MIN_DURATION_NANOS
+        assert resultDurations.sum() / testIterations > MIN_DURATION_NANOS
+    }
+}
diff --git a/nifi-commons/nifi-security-utils/src/test/resources/logback-test.xml b/nifi-commons/nifi-security-utils/src/test/resources/logback-test.xml
new file mode 100644
index 000000000000..d8e72bd175f9
--- /dev/null
+++ b/nifi-commons/nifi-security-utils/src/test/resources/logback-test.xml
@@ -0,0 +1,39 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+      http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+
+<configuration>
+    <appender name=""CONSOLE"" class=""ch.qos.logback.core.ConsoleAppender"">
+        <encoder class=""ch.qos.logback.classic.encoder.PatternLayoutEncoder"">
+            <pattern>%-4r [%t] %-5p %c{3} - %m%n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name=""FILE"" class=""ch.qos.logback.core.FileAppender"">
+        <file>./target/log</file>
+        <encoder class=""ch.qos.logback.classic.encoder.PatternLayoutEncoder"">
+            <pattern>%date %level [%thread] %logger{40} %msg%n</pattern>
+        </encoder>
+    </appender>
+
+
+    <logger name=""org.apache.nifi"" level=""INFO""/>
+    <logger name=""org.apache.nifi.security.util.crypto"" level=""DEBUG""/>
+
+    <root level=""DEBUG"">
+        <appender-ref ref=""CONSOLE""/>
+    </root>
+
+</configuration>
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
index 35d081bcffe4..15e1635b7ce0 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
@@ -16,6 +16,23 @@
  */
 package org.apache.nifi.fingerprint;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedMap;
+import java.util.TreeMap;
+import java.util.stream.Stream;
+import javax.xml.XMLConstants;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.validation.Schema;
+import javax.xml.validation.SchemaFactory;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.bundle.BundleCoordinate;
 import org.apache.nifi.components.ConfigurableComponent;
@@ -25,6 +42,8 @@
 import org.apache.nifi.controller.serialization.FlowFromDOMFactory;
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.nar.ExtensionManager;
+import org.apache.nifi.security.util.crypto.Argon2SecureHasher;
+import org.apache.nifi.security.util.crypto.SecureHasher;
 import org.apache.nifi.util.BundleUtils;
 import org.apache.nifi.util.DomUtils;
 import org.apache.nifi.util.LoggingXmlParserErrorHandler;
@@ -39,24 +58,6 @@
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
-import javax.xml.XMLConstants;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.validation.Schema;
-import javax.xml.validation.SchemaFactory;
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Map;
-import java.util.SortedMap;
-import java.util.TreeMap;
-import java.util.stream.Stream;
-
 /**
  * <p>Creates a fingerprint of a flow.xml. The order of elements or attributes in the flow.xml does not influence the fingerprint generation.
  *
@@ -342,7 +343,7 @@ private void addParameter(final StringBuilder builder, final Element parameterEl
         // append value
         if (isEncrypted(value)) {
             // propValue is non null, no need to use getValue
-            builder.append(decrypt(value));
+            builder.append(getLoggableRepresentationOfSensitiveValue(value));
         } else {
             builder.append(getValue(value, NO_VALUE));
         }
@@ -532,8 +533,8 @@ private StringBuilder addPropertyFingerprint(final StringBuilder builder, final
 
         // append value
         if (isEncrypted(propValue)) {
-            // propValue is non null, no need to use getValue
-            builder.append(decrypt(propValue));
+            // Get a secure, deterministic, loggable representation of this value
+            builder.append(getLoggableRepresentationOfSensitiveValue(propValue));
         } else {
             builder.append(getValue(propValue, NO_VALUE));
         }
@@ -541,6 +542,32 @@ private StringBuilder addPropertyFingerprint(final StringBuilder builder, final
         return builder;
     }
 
+    /**
+     * Returns a securely-derived, deterministic value from the provided encrypted property
+     * value. This is because the flow fingerprint is displayed in the log if NiFi has
+     * trouble inheriting a flow, so the sensitive value should not be disclosed through the
+     * log. However, the equality or difference of the sensitive value can influence in the
+     * inheritability of the flow, so it cannot be ignored completely.
+     *
+     * The specific derivation process is unimportant as long as it is a salted,
+     * cryptographically-secure hash function with an iteration cost sufficient for password
+     * storage in other applications.
+     *
+     * @param encryptedPropertyValue the encrypted property value
+     * @return a deterministic string value which represents this input but is safe to print in a log
+     */
+    private String getLoggableRepresentationOfSensitiveValue(String encryptedPropertyValue) {
+        // TODO: Implement Scrypt or Argon2 secure hash of decrypted value
+
+        // TODO: Use DI/IoC to inject this implementation in the constructor of the FingerprintFactory
+        // There is little initialization cost, so it doesn't make sense to cache this as a field
+        SecureHasher secureHasher = new Argon2SecureHasher();
+
+        // TODO: Extend {@link StringEncryptor} with secure hashing capability and inject?
+        String hexEncodedHash = secureHasher.hashHex(decrypt(encryptedPropertyValue));
+        return hexEncodedHash;
+    }
+
     private StringBuilder addPortFingerprint(final StringBuilder builder, final Element portElem) throws FingerprintException {
         // id
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(portElem, ""id""));
@@ -593,7 +620,7 @@ private StringBuilder addRemoteProcessGroupFingerprint(final StringBuilder build
                 ""transportProtocol"", ""proxyHost"", ""proxyPort"", ""proxyUser"", ""proxyPassword""}) {
             final String value = getFirstValue(DomUtils.getChildNodesByTagName(remoteProcessGroupElem, tagName));
             if (isEncrypted(value)) {
-                builder.append(decrypt(value));
+                builder.append(getLoggableRepresentationOfSensitiveValue(value));
             } else {
                 builder.append(value);
             }
@@ -824,7 +851,7 @@ public int compare(final Element e1, final Element e2) {
                 final String e1PropName = getFirstValue(DomUtils.getChildNodesByTagName(e1, ""name""));
                 String e1PropValue = getFirstValue(DomUtils.getChildNodesByTagName(e1, ""value""));
                 if (isEncrypted(e1PropValue)) {
-                    e1PropValue = decrypt(e1PropValue);
+                    e1PropValue = getLoggableRepresentationOfSensitiveValue(e1PropValue);
                 }
                 final String e1CombinedValue = e1PropName + e1PropValue;
 
@@ -832,7 +859,7 @@ public int compare(final Element e1, final Element e2) {
                 final String e2PropName = getFirstValue(DomUtils.getChildNodesByTagName(e2, ""name""));
                 String e2PropValue = getFirstValue(DomUtils.getChildNodesByTagName(e2, ""value""));
                 if (isEncrypted(e2PropValue)) {
-                    e2PropValue = decrypt(e2PropValue);
+                    e2PropValue = getLoggableRepresentationOfSensitiveValue(e2PropValue);
                 }
                 final String e2CombinedValue = e2PropName + e2PropValue;
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/fingerprint/FingerprintFactoryGroovyTest.groovy b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/fingerprint/FingerprintFactoryGroovyTest.groovy
new file mode 100644
index 000000000000..969cad878ed8
--- /dev/null
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/fingerprint/FingerprintFactoryGroovyTest.groovy
@@ -0,0 +1,88 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.fingerprint
+
+
+import org.apache.nifi.encrypt.StringEncryptor
+import org.apache.nifi.nar.ExtensionManager
+import org.apache.nifi.nar.StandardExtensionDiscoveringManager
+import org.bouncycastle.jce.provider.BouncyCastleProvider
+import org.junit.After
+import org.junit.Before
+import org.junit.BeforeClass
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.JUnit4
+import org.slf4j.Logger
+import org.slf4j.LoggerFactory
+
+import java.security.Security
+
+@RunWith(JUnit4.class)
+class FingerprintFactoryGroovyTest extends GroovyTestCase {
+    private static final Logger logger = LoggerFactory.getLogger(FingerprintFactoryGroovyTest.class)
+
+    private static StringEncryptor mockEncryptor = [
+            encrypt: { String plaintext -> plaintext.reverse() },
+            decrypt: { String cipherText -> cipherText.reverse() }] as StringEncryptor
+    private static ExtensionManager extensionManager = new StandardExtensionDiscoveringManager()
+
+    @BeforeClass
+    static void setUpOnce() throws Exception {
+        Security.addProvider(new BouncyCastleProvider())
+
+        logger.metaClass.methodMissing = { String name, args ->
+            logger.info(""[${name?.toUpperCase()}] ${(args as List).join("" "")}"")
+        }
+    }
+
+    @Before
+    void setUp() throws Exception {
+
+    }
+
+    @After
+    void tearDown() throws Exception {
+
+    }
+
+    /**
+     * The flow fingerprint should not disclose sensitive property values.
+     */
+    @Test
+    void testCreateFingerprintShouldNotDiscloseSensitivePropertyValues() {
+        // Arrange
+
+        // Create flow
+        String initialFlowXML = new File(""src/test/resources/nifi/fingerprint/initial.xml"").text
+        logger.info(""Read initial flow: ${initialFlowXML[0..<100]}..."")
+
+        // Create the FingerprintFactory with collaborators
+        FingerprintFactory fingerprintFactory = new FingerprintFactory(mockEncryptor, extensionManager)
+
+        // Act
+
+        // Create the fingerprint from the flow
+        String fingerprint = fingerprintFactory.createFingerprint(initialFlowXML.bytes)
+        logger.info(""Generated flow fingerprint: ${fingerprint}"")
+
+        // Assert
+
+        // Assert the fingerprint does not contain the password
+        assert !(fingerprint =~ ""originalPlaintextPassword"")
+    }
+}
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java
index 35bc2e3cf75a..5baaf6dc7c69 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/fingerprint/FingerprintFactoryTest.java
@@ -16,6 +16,26 @@
  */
 package org.apache.nifi.fingerprint;
 
+import static org.apache.nifi.controller.serialization.ScheduledStateLookup.IDENTITY_LOOKUP;
+import static org.apache.nifi.fingerprint.FingerprintFactory.FLOW_CONFIG_XSD;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.util.Collections;
+import java.util.Optional;
+import javax.xml.XMLConstants;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.validation.Schema;
+import javax.xml.validation.SchemaFactory;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.nifi.connectable.Position;
@@ -30,6 +50,7 @@
 import org.apache.nifi.nar.StandardExtensionDiscoveringManager;
 import org.apache.nifi.remote.RemoteGroupPort;
 import org.apache.nifi.remote.protocol.SiteToSiteTransportProtocol;
+import org.apache.nifi.security.util.crypto.Argon2SecureHasher;
 import org.junit.Before;
 import org.junit.Test;
 import org.w3c.dom.Document;
@@ -38,27 +59,6 @@
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
-import javax.xml.XMLConstants;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.validation.Schema;
-import javax.xml.validation.SchemaFactory;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.util.Collections;
-import java.util.Optional;
-
-import static org.apache.nifi.controller.serialization.ScheduledStateLookup.IDENTITY_LOOKUP;
-import static org.apache.nifi.fingerprint.FingerprintFactory.FLOW_CONFIG_XSD;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
 /**
  */
 public class FingerprintFactoryTest {
@@ -248,6 +248,7 @@ public void testRemoteProcessGroupFingerprintRaw() throws Exception {
 
     @Test
     public void testRemoteProcessGroupFingerprintWithProxy() throws Exception {
+        final String proxyPassword = ""proxy-pass"";
 
         // Fill out every configuration.
         final RemoteProcessGroup component = mock(RemoteProcessGroup.class);
@@ -263,10 +264,11 @@ public void testRemoteProcessGroupFingerprintWithProxy() throws Exception {
         when(component.getProxyHost()).thenReturn(""proxy-host"");
         when(component.getProxyPort()).thenReturn(3128);
         when(component.getProxyUser()).thenReturn(""proxy-user"");
-        when(component.getProxyPassword()).thenReturn(""proxy-pass"");
+        when(component.getProxyPassword()).thenReturn(proxyPassword);
         when(component.getVersionedComponentId()).thenReturn(Optional.empty());
 
         // Assert fingerprints with expected one.
+        final String hashedProxyPassword = new Argon2SecureHasher().hashHex(proxyPassword);
         final String expected = ""id"" +
                 ""NO_VALUE"" +
                 ""http://node1:8080/nifi, http://node2:8080/nifi"" +
@@ -277,11 +279,11 @@ public void testRemoteProcessGroupFingerprintWithProxy() throws Exception {
                 ""proxy-host"" +
                 ""3128"" +
                 ""proxy-user"" +
-                ""proxy-pass"";
+                hashedProxyPassword;
 
         final Element rootElement = serializeElement(encryptor, RemoteProcessGroup.class, component, ""addRemoteProcessGroup"", IDENTITY_LOOKUP);
         final Element componentElement = (Element) rootElement.getElementsByTagName(""remoteProcessGroup"").item(0);
-        assertEquals(expected.toString(), fingerprint(""addRemoteProcessGroupFingerprint"", Element.class, componentElement));
+        assertEquals(expected, fingerprint(""addRemoteProcessGroupFingerprint"", Element.class, componentElement));
     }
 
     @Test
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/logback-test.xml b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/logback-test.xml
index 076ba323294b..99d1743ef2ca 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/logback-test.xml
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/logback-test.xml
@@ -33,6 +33,7 @@
     <logger name=""org.apache.nifi.controller.tasks"" level=""DEBUG"" />""
     <logger name=""org.apache.nifi.controller.service"" level=""DEBUG""/>
     <logger name=""org.apache.nifi.encrypt"" level=""DEBUG""/>
+    <logger name=""org.apache.nifi.security.util.crypto"" level=""DEBUG""/>
     <logger name=""org.apache.nifi.controller.repository.crypto"" level=""DEBUG""/>
     <logger name=""org.apache.nifi.security.repository"" level=""DEBUG""/>
     <logger name=""org.apache.nifi.controller.service.mock"" level=""ERROR""/>
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/initial.xml b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/initial.xml
new file mode 100644
index 000000000000..ef37e51b2e49
--- /dev/null
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/initial.xml
@@ -0,0 +1,152 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+      http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<flowController encoding-version=""1.4"">
+    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
+    <maxEventDrivenThreadCount>1</maxEventDrivenThreadCount>
+    <registries/>
+    <parameterContexts/>
+    <rootGroup>
+        <id>f31f71c7-016f-1000-52b1-4f4e21375b31</id>
+        <name>NiFi Flow</name>
+        <position x=""0.0"" y=""0.0""/>
+        <comment/>
+        <processor>
+            <id>f3214b1c-016f-1000-0000-00001b1546be</id>
+            <name>GetFTP</name>
+            <position x=""363.0"" y=""111.01388549804688""/>
+            <styles/>
+            <comment/>
+            <class>org.apache.nifi.processors.standard.GetFTP</class>
+            <bundle>
+                <group>org.apache.nifi</group>
+                <artifact>nifi-standard-nar</artifact>
+                <version>1.11.0</version>
+            </bundle>
+            <maxConcurrentTasks>1</maxConcurrentTasks>
+            <schedulingPeriod>0 sec</schedulingPeriod>
+            <penalizationPeriod>30 sec</penalizationPeriod>
+            <yieldPeriod>1 sec</yieldPeriod>
+            <bulletinLevel>WARN</bulletinLevel>
+            <lossTolerant>false</lossTolerant>
+            <scheduledState>STOPPED</scheduledState>
+            <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
+            <executionNode>ALL</executionNode>
+            <runDurationNanos>0</runDurationNanos>
+            <property>
+                <name>Hostname</name>
+                <value>abc</value>
+            </property>
+            <property>
+                <name>Port</name>
+                <value>21</value>
+            </property>
+            <property>
+                <name>Username</name>
+                <value>abc</value>
+            </property>
+            <property>
+                <name>Password</name>
+                <value>enc{drowssaPtxetnialPlanigiro}</value>
+            </property>
+            <property>
+                <name>Connection Mode</name>
+                <value>Passive</value>
+            </property>
+            <property>
+                <name>Transfer Mode</name>
+                <value>Binary</value>
+            </property>
+            <property>
+                <name>Remote Path</name>
+            </property>
+            <property>
+                <name>File Filter Regex</name>
+            </property>
+            <property>
+                <name>Path Filter Regex</name>
+            </property>
+            <property>
+                <name>Polling Interval</name>
+                <value>60 sec</value>
+            </property>
+            <property>
+                <name>Search Recursively</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>follow-symlink</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>Ignore Dotted Files</name>
+                <value>true</value>
+            </property>
+            <property>
+                <name>Delete Original</name>
+                <value>true</value>
+            </property>
+            <property>
+                <name>Connection Timeout</name>
+                <value>30 sec</value>
+            </property>
+            <property>
+                <name>Data Timeout</name>
+                <value>30 sec</value>
+            </property>
+            <property>
+                <name>Max Selects</name>
+                <value>100</value>
+            </property>
+            <property>
+                <name>Remote Poll Batch Size</name>
+                <value>5000</value>
+            </property>
+            <property>
+                <name>Use Natural Ordering</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>proxy-configuration-service</name>
+            </property>
+            <property>
+                <name>Proxy Type</name>
+                <value>DIRECT</value>
+            </property>
+            <property>
+                <name>Proxy Host</name>
+            </property>
+            <property>
+                <name>Proxy Port</name>
+            </property>
+            <property>
+                <name>Http Proxy Username</name>
+            </property>
+            <property>
+                <name>Http Proxy Password</name>
+            </property>
+            <property>
+                <name>Internal Buffer Size</name>
+                <value>16KB</value>
+            </property>
+            <property>
+                <name>ftp-use-utf8</name>
+                <value>false</value>
+            </property>
+        </processor>
+    </rootGroup>
+    <controllerServices/>
+    <reportingTasks/>
+</flowController>
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/modified.xml b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/modified.xml
new file mode 100644
index 000000000000..922d0f95ef38
--- /dev/null
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/nifi/fingerprint/modified.xml
@@ -0,0 +1,152 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+      http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<flowController encoding-version=""1.4"">
+    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
+    <maxEventDrivenThreadCount>1</maxEventDrivenThreadCount>
+    <registries/>
+    <parameterContexts/>
+    <rootGroup>
+        <id>f31f71c7-016f-1000-52b1-4f4e21375b31</id>
+        <name>NiFi Flow</name>
+        <position x=""0.0"" y=""0.0""/>
+        <comment/>
+        <processor>
+            <id>f3214b1c-016f-1000-0000-00001b1546be</id>
+            <name>GetFTP</name>
+            <position x=""363.0"" y=""111.01388549804688""/>
+            <styles/>
+            <comment/>
+            <class>org.apache.nifi.processors.standard.GetFTP</class>
+            <bundle>
+                <group>org.apache.nifi</group>
+                <artifact>nifi-standard-nar</artifact>
+                <version>1.11.0</version>
+            </bundle>
+            <maxConcurrentTasks>1</maxConcurrentTasks>
+            <schedulingPeriod>0 sec</schedulingPeriod>
+            <penalizationPeriod>30 sec</penalizationPeriod>
+            <yieldPeriod>1 sec</yieldPeriod>
+            <bulletinLevel>WARN</bulletinLevel>
+            <lossTolerant>false</lossTolerant>
+            <scheduledState>STOPPED</scheduledState>
+            <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
+            <executionNode>ALL</executionNode>
+            <runDurationNanos>0</runDurationNanos>
+            <property>
+                <name>Hostname</name>
+                <value>abc</value>
+            </property>
+            <property>
+                <name>Port</name>
+                <value>21</value>
+            </property>
+            <property>
+                <name>Username</name>
+                <value>abc</value>
+            </property>
+            <property>
+                <name>Password</name>
+                <value>enc{drowssaPtxetnialPdeifidom}</value>
+            </property>
+            <property>
+                <name>Connection Mode</name>
+                <value>Passive</value>
+            </property>
+            <property>
+                <name>Transfer Mode</name>
+                <value>Binary</value>
+            </property>
+            <property>
+                <name>Remote Path</name>
+            </property>
+            <property>
+                <name>File Filter Regex</name>
+            </property>
+            <property>
+                <name>Path Filter Regex</name>
+            </property>
+            <property>
+                <name>Polling Interval</name>
+                <value>60 sec</value>
+            </property>
+            <property>
+                <name>Search Recursively</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>follow-symlink</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>Ignore Dotted Files</name>
+                <value>true</value>
+            </property>
+            <property>
+                <name>Delete Original</name>
+                <value>true</value>
+            </property>
+            <property>
+                <name>Connection Timeout</name>
+                <value>30 sec</value>
+            </property>
+            <property>
+                <name>Data Timeout</name>
+                <value>30 sec</value>
+            </property>
+            <property>
+                <name>Max Selects</name>
+                <value>100</value>
+            </property>
+            <property>
+                <name>Remote Poll Batch Size</name>
+                <value>5000</value>
+            </property>
+            <property>
+                <name>Use Natural Ordering</name>
+                <value>false</value>
+            </property>
+            <property>
+                <name>proxy-configuration-service</name>
+            </property>
+            <property>
+                <name>Proxy Type</name>
+                <value>DIRECT</value>
+            </property>
+            <property>
+                <name>Proxy Host</name>
+            </property>
+            <property>
+                <name>Proxy Port</name>
+            </property>
+            <property>
+                <name>Http Proxy Username</name>
+            </property>
+            <property>
+                <name>Http Proxy Password</name>
+            </property>
+            <property>
+                <name>Internal Buffer Size</name>
+                <value>16KB</value>
+            </property>
+            <property>
+                <name>ftp-use-utf8</name>
+                <value>false</value>
+            </property>
+        </processor>
+    </rootGroup>
+    <controllerServices/>
+    <reportingTasks/>
+</flowController>
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java
index 17754d0eb7c3..0727ccf96d3f 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/test/java/org/apache/nifi/web/security/jwt/JwtServiceTest.java
@@ -16,8 +16,22 @@
  */
 package org.apache.nifi.web.security.jwt;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
 import io.jsonwebtoken.JwtException;
-import org.apache.commons.codec.CharEncoding;
+import java.nio.charset.StandardCharsets;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
 import org.apache.commons.codec.binary.Base64;
 import org.apache.nifi.admin.service.AdministrationException;
 import org.apache.nifi.admin.service.KeyService;
@@ -40,22 +54,6 @@
 import org.springframework.security.core.context.SecurityContext;
 import org.springframework.security.core.context.SecurityContextHolder;
 
-import javax.crypto.Mac;
-import javax.crypto.spec.SecretKeySpec;
-import java.io.UnsupportedEncodingException;
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.ArgumentMatchers.anyInt;
-import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
 public class JwtServiceTest {
 
     private static final Logger logger = LoggerFactory.getLogger(JwtServiceTest.class);
@@ -155,8 +153,8 @@ private static String generateHS256Token(String rawHeader, String rawPayload, St
         try {
             logger.info(""Generating token for "" + rawHeader + "" + "" + rawPayload);
 
-            String base64Header = Base64.encodeBase64URLSafeString(rawHeader.getBytes(CharEncoding.UTF_8));
-            String base64Payload = Base64.encodeBase64URLSafeString(rawPayload.getBytes(CharEncoding.UTF_8));
+            String base64Header = Base64.encodeBase64URLSafeString(rawHeader.getBytes(StandardCharsets.UTF_8));
+            String base64Payload = Base64.encodeBase64URLSafeString(rawPayload.getBytes(StandardCharsets.UTF_8));
             // TODO: Support valid/invalid manipulation
 
             final String body = base64Header + TOKEN_DELIMITER + base64Payload;
@@ -164,7 +162,7 @@ private static String generateHS256Token(String rawHeader, String rawPayload, St
             String signature = generateHMAC(hmacSecret, body);
 
             return body + TOKEN_DELIMITER + signature;
-        } catch (NoSuchAlgorithmException | InvalidKeyException | UnsupportedEncodingException e) {
+        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
             final String errorMessage = ""Could not generate the token"";
             logger.error(errorMessage, e);
             fail(errorMessage);
@@ -173,11 +171,11 @@ private static String generateHS256Token(String rawHeader, String rawPayload, St
     }
 
     private static String generateHMAC(String hmacSecret, String body) throws NoSuchAlgorithmException,
-            UnsupportedEncodingException, InvalidKeyException {
+            InvalidKeyException {
         Mac hmacSHA256 = Mac.getInstance(""HmacSHA256"");
-        SecretKeySpec secret_key = new SecretKeySpec(hmacSecret.getBytes(""UTF-8""), ""HmacSHA256"");
+        SecretKeySpec secret_key = new SecretKeySpec(hmacSecret.getBytes(StandardCharsets.UTF_8), ""HmacSHA256"");
         hmacSHA256.init(secret_key);
-        return Base64.encodeBase64URLSafeString(hmacSHA256.doFinal(body.getBytes(""UTF-8"")));
+        return Base64.encodeBase64URLSafeString(hmacSHA256.doFinal(body.getBytes(StandardCharsets.UTF_8)));
     }
 
     @Before
@@ -481,7 +479,6 @@ public void testShouldNotGenerateTokenWithMissingKey() throws Exception {
 
     @Test
     public void testShouldLogOutUser() throws Exception {
-
         // Arrange
         expectedException.expect(JwtException.class);
         expectedException.expectMessage(""Unable to validate the access token."");"
CVE-2020-28371,"From 0871979b298add320ca63f65060acb7532c8a0dd Mon Sep 17 00:00:00 2001
From: Pietro Oliva <pietro.oliva@r3.com>
Date: Tue, 27 Oct 2020 05:13:59 -0400
Subject: [PATCH] Fix integer overflow leading to out-of-bounds read/write

---
 classpath/java/io/FileOutputStream.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/classpath/java/io/FileOutputStream.java b/classpath/java/io/FileOutputStream.java
index 8732004e7..f5518d797 100644
--- a/classpath/java/io/FileOutputStream.java
+++ b/classpath/java/io/FileOutputStream.java
@@ -52,7 +52,7 @@ public void write(byte[] b, int offset, int length) throws IOException {
       throw new NullPointerException();
     }
 
-    if (offset < 0 || offset + length > b.length) {
+    if (offset < 0 || length < 0 || length > b.length || offset > b.length - length) {
       throw new ArrayIndexOutOfBoundsException();
     }"
GHSA-5x3v-2gxr-59m2,"From f8f6fbe4aa7f5dee937e688322628c366b12a552 Mon Sep 17 00:00:00 2001
From: Heng Du <duhengforever@apache.org>
Date: Thu, 12 Dec 2019 11:39:33 +0800
Subject: [PATCH] [ISSUE #1637]Fix 1637 (#1644)

* fix(broker): add the check logic of the server to the topic

* chore(test):add unit test

* chore(validator):polish the code

* chore(test):add ASF license header
---
 .../AbstractSendMessageProcessor.java         | 11 +--
 .../processor/AdminBrokerProcessor.java       | 29 ++++---
 .../broker/topic/TopicConfigManager.java      |  4 -
 .../rocketmq/broker/topic/TopicValidator.java | 69 ++++++++++++++++
 .../broker/topic/TopicValidatorTest.java      | 80 +++++++++++++++++++
 .../apache/rocketmq/client/Validators.java    |  7 +-
 .../rocketmq/client/impl/MQAdminImpl.java     |  2 +
 .../rocketmq/client/impl/MQClientAPIImpl.java |  6 +-
 .../org/apache/rocketmq/common/UtilAll.java   |  4 +-
 9 files changed, 178 insertions(+), 34 deletions(-)
 create mode 100644 broker/src/main/java/org/apache/rocketmq/broker/topic/TopicValidator.java
 create mode 100644 broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java

diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
index b0668d49f87..adf027993b5 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java
@@ -16,16 +16,16 @@
  */
 package org.apache.rocketmq.broker.processor;
 
+import io.netty.channel.ChannelHandlerContext;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
-
-import io.netty.channel.ChannelHandlerContext;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
 import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
+import org.apache.rocketmq.broker.topic.TopicValidator;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.TopicConfig;
 import org.apache.rocketmq.common.TopicFilterType;
@@ -171,11 +171,8 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,
                 + ""] sending message is forbidden"");
             return response;
         }
-        if (!this.brokerController.getTopicConfigManager().isTopicCanSendMessage(requestHeader.getTopic())) {
-            String errorMsg = ""the topic["" + requestHeader.getTopic() + ""] is conflict with system reserved words."";
-            log.warn(errorMsg);
-            response.setCode(ResponseCode.SYSTEM_ERROR);
-            response.setRemark(errorMsg);
+
+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {
             return response;
         }
 
diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
index d63cc2010f4..df0ec905605 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java
@@ -38,25 +38,18 @@
 import org.apache.rocketmq.broker.filter.ConsumerFilterData;
 import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
 import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
+import org.apache.rocketmq.broker.topic.TopicValidator;
+import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.admin.OffsetWrapper;
 import org.apache.rocketmq.common.admin.TopicOffset;
 import org.apache.rocketmq.common.admin.TopicStatsTable;
 import org.apache.rocketmq.common.constant.LoggerName;
-import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;
-import org.apache.rocketmq.common.protocol.header.DeleteAccessConfigRequestHeader;
-import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;
-import org.apache.rocketmq.common.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;
-import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseHeader;
-import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseBody;
-import org.apache.rocketmq.logging.InternalLogger;
-import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -84,10 +77,15 @@
 import org.apache.rocketmq.common.protocol.body.UnlockBatchRequestBody;
 import org.apache.rocketmq.common.protocol.header.CloneGroupOffsetRequestHeader;
 import org.apache.rocketmq.common.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
+import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;
 import org.apache.rocketmq.common.protocol.header.CreateTopicRequestHeader;
+import org.apache.rocketmq.common.protocol.header.DeleteAccessConfigRequestHeader;
 import org.apache.rocketmq.common.protocol.header.DeleteSubscriptionGroupRequestHeader;
 import org.apache.rocketmq.common.protocol.header.DeleteTopicRequestHeader;
 import org.apache.rocketmq.common.protocol.header.GetAllTopicConfigResponseHeader;
+import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;
+import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseBody;
+import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseHeader;
 import org.apache.rocketmq.common.protocol.header.GetBrokerConfigResponseHeader;
 import org.apache.rocketmq.common.protocol.header.GetConsumeStatsInBrokerHeader;
 import org.apache.rocketmq.common.protocol.header.GetConsumeStatsRequestHeader;
@@ -110,6 +108,7 @@
 import org.apache.rocketmq.common.protocol.header.ResumeCheckHalfMessageRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SearchOffsetRequestHeader;
 import org.apache.rocketmq.common.protocol.header.SearchOffsetResponseHeader;
+import org.apache.rocketmq.common.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;
 import org.apache.rocketmq.common.protocol.header.ViewBrokerStatsDataRequestHeader;
 import org.apache.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerRequestHeader;
 import org.apache.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerResponseHeader;
@@ -118,6 +117,8 @@
 import org.apache.rocketmq.common.stats.StatsSnapshot;
 import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;
 import org.apache.rocketmq.filter.util.BitsArray;
+import org.apache.rocketmq.logging.InternalLogger;
+import org.apache.rocketmq.logging.InternalLoggerFactory;
 import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingCommandException;
 import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
@@ -258,6 +259,10 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext
             return response;
         }
 
+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {
+            return response;
+        }
+
         try {
             response.setCode(ResponseCode.SUCCESS);
             response.setOpaque(request.getOpaque());
@@ -312,8 +317,8 @@ private synchronized RemotingCommand updateAndCreateAccessConfig(ChannelHandlerC
         accessConfig.setWhiteRemoteAddress(requestHeader.getWhiteRemoteAddress());
         accessConfig.setDefaultTopicPerm(requestHeader.getDefaultTopicPerm());
         accessConfig.setDefaultGroupPerm(requestHeader.getDefaultGroupPerm());
-        accessConfig.setTopicPerms(UtilAll.String2List(requestHeader.getTopicPerms(),"",""));
-        accessConfig.setGroupPerms(UtilAll.String2List(requestHeader.getGroupPerms(),"",""));
+        accessConfig.setTopicPerms(UtilAll.string2List(requestHeader.getTopicPerms(), "",""));
+        accessConfig.setGroupPerms(UtilAll.string2List(requestHeader.getGroupPerms(), "",""));
         accessConfig.setAdmin(requestHeader.isAdmin());
         try {
 
@@ -386,7 +391,7 @@ private synchronized RemotingCommand updateGlobalWhiteAddrsConfig(ChannelHandler
 
         try {
             AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);
-            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.String2List(requestHeader.getGlobalWhiteAddrs(),"",""))) {
+            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.string2List(requestHeader.getGlobalWhiteAddrs(), "",""))) {
                 response.setCode(ResponseCode.SUCCESS);
                 response.setOpaque(request.getOpaque());
                 response.markResponseType();
diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
index cb2901117f8..199b46d603a 100644
--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java
@@ -152,10 +152,6 @@ public Set<String> getSystemTopic() {
         return this.systemTopicList;
     }
 
-    public boolean isTopicCanSendMessage(final String topic) {
-        return !topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC);
-    }
-
     public TopicConfig selectTopicConfig(final String topic) {
         return this.topicConfigTable.get(topic);
     }
diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicValidator.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicValidator.java
new file mode 100644
index 00000000000..8b5347642a1
--- /dev/null
+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicValidator.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.rocketmq.broker.topic;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.UtilAll;
+import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+
+public class TopicValidator {
+
+    private static final String VALID_PATTERN_STR = ""^[%|a-zA-Z0-9_-]+$"";
+    private static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);
+    private static final int CHARACTER_MAX_LENGTH = 255;
+
+    private static boolean regularExpressionMatcher(String origin, Pattern pattern) {
+        if (pattern == null) {
+            return true;
+        }
+        Matcher matcher = pattern.matcher(origin);
+        return matcher.matches();
+    }
+
+    public static boolean validateTopic(String topic, RemotingCommand response) {
+
+        if (UtilAll.isBlank(topic)) {
+            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setRemark(""The specified topic is blank."");
+            return false;
+        }
+
+        if (!regularExpressionMatcher(topic, PATTERN)) {
+            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setRemark(""The specified topic contains illegal characters, allowing only "" + VALID_PATTERN_STR);
+            return false;
+        }
+
+        if (topic.length() > CHARACTER_MAX_LENGTH) {
+            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setRemark(""The specified topic is longer than topic max length 255."");
+            return false;
+        }
+
+        //whether the same with system reserved keyword
+        if (topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {
+            response.setCode(ResponseCode.SYSTEM_ERROR);
+            response.setRemark(""The specified topic is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC."");
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java b/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java
new file mode 100644
index 00000000000..267931fd8bd
--- /dev/null
+++ b/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+package org.apache.rocketmq.broker.topic;
+
+import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.protocol.ResponseCode;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class TopicValidatorTest {
+
+    @Test
+    public void testTopicValidator_NotPass() {
+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, """");
+
+        Boolean res = TopicValidator.validateTopic("""", response);
+        assertThat(res).isFalse();
+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
+        assertThat(response.getRemark()).contains(""The specified topic is blank"");
+
+        clearResponse(response);
+        res = TopicValidator.validateTopic(""../TopicTest"", response);
+        assertThat(res).isFalse();
+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
+        assertThat(response.getRemark()).contains(""The specified topic contains illegal characters"");
+
+        clearResponse(response);
+        res = TopicValidator.validateTopic(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC, response);
+        assertThat(res).isFalse();
+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
+        assertThat(response.getRemark()).contains(""The specified topic is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC."");
+
+        clearResponse(response);
+        res = TopicValidator.validateTopic(generateString(255), response);
+        assertThat(res).isFalse();
+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);
+        assertThat(response.getRemark()).contains(""The specified topic is longer than topic max length 255."");
+
+    }
+
+    @Test
+    public void testTopicValidator_Pass() {
+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, """");
+
+        Boolean res = TopicValidator.validateTopic(""TestTopic"", response);
+        assertThat(res).isTrue();
+        assertThat(response.getCode()).isEqualTo(-1);
+        assertThat(response.getRemark()).isEmpty();
+    }
+
+    private static void clearResponse(RemotingCommand response) {
+        response.setCode(-1);
+        response.setRemark("""");
+    }
+
+    private static String generateString(int length) {
+        StringBuilder stringBuffer = new StringBuilder();
+        String tmpStr = ""0123456789"";
+        for (int i = 0; i < length; i++) {
+            stringBuffer.append(tmpStr);
+        }
+        return stringBuffer.toString();
+    }
+}
diff --git a/client/src/main/java/org/apache/rocketmq/client/Validators.java b/client/src/main/java/org/apache/rocketmq/client/Validators.java
index 1b96cd058ff..a37a17b6f1b 100644
--- a/client/src/main/java/org/apache/rocketmq/client/Validators.java
+++ b/client/src/main/java/org/apache/rocketmq/client/Validators.java
@@ -77,9 +77,6 @@ public static boolean regularExpressionMatcher(String origin, Pattern pattern) {
         return matcher.matches();
     }
 
-    /**
-     * Validate message
-     */
     public static void checkMessage(Message msg, DefaultMQProducer defaultMQProducer)
         throws MQClientException {
         if (null == msg) {
@@ -103,9 +100,6 @@ public static void checkMessage(Message msg, DefaultMQProducer defaultMQProducer
         }
     }
 
-    /**
-     * Validate topic
-     */
     public static void checkTopic(String topic) throws MQClientException {
         if (UtilAll.isBlank(topic)) {
             throw new MQClientException(""The specified topic is blank"", null);
@@ -127,4 +121,5 @@ public static void checkTopic(String topic) throws MQClientException {
                 String.format(""The topic[%s] is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC."", topic), null);
         }
     }
+
 }
diff --git a/client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java b/client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
index ca89d613060..9dbd55201dc 100644
--- a/client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
+++ b/client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java
@@ -28,6 +28,7 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.rocketmq.client.QueryResult;
+import org.apache.rocketmq.client.Validators;
 import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.impl.factory.MQClientInstance;
@@ -80,6 +81,7 @@ public void createTopic(String key, String newTopic, int queueNum) throws MQClie
 
     public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
         try {
+            Validators.checkTopic(newTopic);
             TopicRouteData topicRouteData = this.mQClientFactory.getMQClientAPIImpl().getTopicRouteInfoFromNameServer(key, timeoutMillis);
             List<BrokerData> brokerDataList = topicRouteData.getBrokerDatas();
             if (brokerDataList != null && !brokerDataList.isEmpty()) {
diff --git a/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java b/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
index 1ad5fbfe6fd..9380f4b73e2 100644
--- a/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
+++ b/client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java
@@ -43,12 +43,12 @@
 import org.apache.rocketmq.client.producer.SendCallback;
 import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
+import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.DataVersion;
 import org.apache.rocketmq.common.MQVersion;
 import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.PlainAccessConfig;
 import org.apache.rocketmq.common.TopicConfig;
-import org.apache.rocketmq.common.AclConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.admin.TopicStatsTable;
@@ -305,8 +305,8 @@ public void createPlainAccessConfig(final String addr, final PlainAccessConfig p
         requestHeader.setDefaultGroupPerm(plainAccessConfig.getDefaultGroupPerm());
         requestHeader.setDefaultTopicPerm(plainAccessConfig.getDefaultTopicPerm());
         requestHeader.setWhiteRemoteAddress(plainAccessConfig.getWhiteRemoteAddress());
-        requestHeader.setTopicPerms(UtilAll.List2String(plainAccessConfig.getTopicPerms(), "",""));
-        requestHeader.setGroupPerms(UtilAll.List2String(plainAccessConfig.getGroupPerms(), "",""));
+        requestHeader.setTopicPerms(UtilAll.list2String(plainAccessConfig.getTopicPerms(), "",""));
+        requestHeader.setGroupPerms(UtilAll.list2String(plainAccessConfig.getGroupPerms(), "",""));
 
         RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_ACL_CONFIG, requestHeader);
 
diff --git a/common/src/main/java/org/apache/rocketmq/common/UtilAll.java b/common/src/main/java/org/apache/rocketmq/common/UtilAll.java
index 222f697eb54..624199c4aa6 100644
--- a/common/src/main/java/org/apache/rocketmq/common/UtilAll.java
+++ b/common/src/main/java/org/apache/rocketmq/common/UtilAll.java
@@ -580,7 +580,7 @@ public static void deleteFile(File file) {
         }
     }
 
-    public static String List2String(List<String> list, String splitor) {
+    public static String list2String(List<String> list, String splitor) {
         if (list == null || list.size() == 0) {
             return null;
         }
@@ -595,7 +595,7 @@ public static String List2String(List<String> list, String splitor) {
         return str.toString();
     }
 
-    public static List<String> String2List(String str, String splitor) {
+    public static List<String> string2List(String str, String splitor) {
         if (StringUtils.isEmpty(str)) {
             return null;
         }"
GHSA-76mp-659p-rw65,"From f9a677408ffb06f309be46ef9d8df1915d9099a4 Mon Sep 17 00:00:00 2001
From: Simon Urli <simon.urli@xwiki.com>
Date: Wed, 16 Dec 2020 15:43:13 +0100
Subject: [PATCH] XWIKI-17942: Email validation check is not properly reset

  * Ensure to reset the validation email key once validated
---
 .../src/main/java/com/xpn/xwiki/XWiki.java                  | 6 +++++-
 .../src/test/java/com/xpn/xwiki/XWikiTest.java              | 2 ++
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java
index fb5b8327d4bb..3712d1b2206a 100644
--- a/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java
+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java
@@ -3857,10 +3857,14 @@ public int validateUser(boolean withConfirmEmail, XWikiContext context) throws X
 
             // Compare the two keys
             if ((!storedKey.equals("""") && (storedKey.equals(validationKey)))) {
+                // Ensure to remove the validation key value, so it cannot be used afterwards to enable back
+                // a disabled user.
+                userObject.setStringValue(""validkey"", """");
+                saveDocument(userDocument, context);
+
                 XWikiUser xWikiUser = new XWikiUser(userDocument.getDocumentReference());
                 xWikiUser.setDisabled(false, context);
                 xWikiUser.setEmailChecked(true, context);
-                saveDocument(userDocument, context);
 
                 if (withConfirmEmail) {
                     String email = userObject.getStringValue(""email"");
diff --git a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/XWikiTest.java b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/XWikiTest.java
index 23184ac9fb53..ed0b0f22d6b9 100644
--- a/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/XWikiTest.java
+++ b/xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/XWikiTest.java
@@ -580,6 +580,8 @@ public void testValidationKeyStorage() throws Exception
         this.xwiki.saveDocument(testUser, context);
 
         assertEquals(0, this.xwiki.validateUser(false, this.oldcore.getXWikiContext()));
+        XWikiDocument reloadedDocument = this.xwiki.getDocument(testUser, context);
+        assertEquals("""", reloadedDocument.getObject(""XWiki.XWikiUsers"").getStringValue(""validkey""));
 
         // Check with an incorrect plaintext key
         validationKey.setValue(""wrong key"");"
GHSA-wcp5-m52f-mhh5,"From c3e457f7a16facfe563eade82b0fa8736a8c96f9 Mon Sep 17 00:00:00 2001
From: Jon Iles <jon.iles@bcs.org.uk>
Date: Sat, 29 Aug 2020 13:01:57 +0100
Subject: [PATCH] XXE fix

---
 CHANGELOG.md                                  |   1 +
 src/changes/changes.xml                       |   1 +
 .../net/sf/mpxj/common/UnmarshalHelper.java   | 104 ++++++++++++++++++
 .../net/sf/mpxj/common/XmlReaderHelper.java   |  51 +++++++++
 .../conceptdraw/ConceptDrawProjectReader.java |  32 ++----
 .../ganttdesigner/GanttDesignerReader.java    |  26 ++---
 .../mpxj/ganttproject/GanttProjectReader.java |  26 ++---
 .../java/net/sf/mpxj/mspdi/MSPDIReader.java   |  48 ++------
 .../net/sf/mpxj/phoenix/PhoenixReader.java    |  26 ++---
 .../net/sf/mpxj/planner/PlannerReader.java    |  28 ++---
 .../mpxj/primavera/PrimaveraPMFileReader.java |  22 +---
 11 files changed, 201 insertions(+), 164 deletions(-)
 create mode 100644 src/main/java/net/sf/mpxj/common/UnmarshalHelper.java
 create mode 100644 src/main/java/net/sf/mpxj/common/XmlReaderHelper.java

diff --git a/CHANGELOG.md b/CHANGELOG.md
index bab455a9dd..b39f028011 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,7 @@
 # Changelog
 
 ## 8.1.4 (git master)
+* XXE security vulnerability
 * Import milestone constraints from Asta schedules (Contributed by Dave McKay)
 * Handle elapsed durations in Asta schedules (Based on a contribution by Dave McKay)
 * Correctly determine the constraint type for tasks with ALAP placement with or without predecessors when reading from from Asta schedules (Contributed by Dave McKay)
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 9f03c6e774..45fe5141a0 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -6,6 +6,7 @@
 	</properties>
 	<body>
 		<release date=""git master"" version=""8.1.4"">
+			<action dev=""joniles"" type=""update"">XXE security vulnerability</action>
 			<action dev=""joniles"" type=""update"">Import milestone constraints from Asta schedules (Contributed by Dave McKay)</action>
 			<action dev=""joniles"" type=""update"">Handle elapsed durations in Asta schedules (Based on a contribution by Dave McKay)</action>
 			<action dev=""joniles"" type=""update"">Correctly determine the constraint type for tasks with ALAP placement with or without predecessors when reading from from Asta schedules (Contributed by Dave McKay)</action>
diff --git a/src/main/java/net/sf/mpxj/common/UnmarshalHelper.java b/src/main/java/net/sf/mpxj/common/UnmarshalHelper.java
new file mode 100644
index 0000000000..967adcdc05
--- /dev/null
+++ b/src/main/java/net/sf/mpxj/common/UnmarshalHelper.java
@@ -0,0 +1,104 @@
+/*
+ * file:       UnmarshalHelper.java
+ * author:     Jon Iles
+ * copyright:  (c) Packwood Software 2020
+ * date:       29/08/2020
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by the
+ * Free Software Foundation; either version 2.1 of the License, or (at your
+ * option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+package net.sf.mpxj.common;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Unmarshaller;
+import javax.xml.bind.UnmarshallerHandler;
+import javax.xml.bind.ValidationEvent;
+import javax.xml.bind.ValidationEventHandler;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.sax.SAXSource;
+
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLFilter;
+
+/**
+ * Utility methods wrapping JAXB unmarshal.
+ */
+public final class UnmarshalHelper
+{
+   /**
+    * Unmarshal from an input stream.
+    *
+    * @param context JAXB context
+    * @param stream input stream
+    * @return Unmarshalled root node
+    */
+   public static final Object unmarshal(JAXBContext context, InputStream stream) throws JAXBException, SAXException, ParserConfigurationException
+   {
+      return context.createUnmarshaller().unmarshal(new SAXSource(XmlReaderHelper.createXmlReader(), new InputSource(stream)));
+   }
+
+   /**
+    * Unmarshall from an input stream and apply a filter.
+    *
+    * @param context JAXB context
+    * @param stream input stream
+    * @param filter XMLFilter instance
+    * @return Unmarshalled root node
+    */
+   public static final Object unmarshal(JAXBContext context, InputStream stream, XMLFilter filter) throws JAXBException, SAXException, ParserConfigurationException, IOException
+   {
+      return unmarshal(context, new InputSource(stream), filter, false);
+   }
+
+   /**
+    * Unmarshall from an input source and apply a filter, optionally ignore validation errors.
+    *
+    * @param context JAXB context
+    * @param source input source
+    * @param filter XMLFilter instance
+    * @param ignoreValidationErrors true if validation errors are ignored
+    * @return Unmarshalled root node
+    */
+   public static final Object unmarshal(JAXBContext context, InputSource source, XMLFilter filter, boolean ignoreValidationErrors) throws JAXBException, SAXException, ParserConfigurationException, IOException
+   {
+      Unmarshaller unmarshaller = context.createUnmarshaller();
+
+      if (ignoreValidationErrors)
+      {
+         unmarshaller.setEventHandler(new ValidationEventHandler()
+         {
+            @Override public boolean handleEvent(ValidationEvent event)
+            {
+               return true;
+            }
+         });
+      }
+
+      UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();
+      filter.setParent(XmlReaderHelper.createXmlReader());
+      filter.setContentHandler(unmarshallerHandler);
+      filter.parse(source);
+
+      return unmarshallerHandler.getResult();
+   }
+
+}
diff --git a/src/main/java/net/sf/mpxj/common/XmlReaderHelper.java b/src/main/java/net/sf/mpxj/common/XmlReaderHelper.java
new file mode 100644
index 0000000000..64e4cdcd70
--- /dev/null
+++ b/src/main/java/net/sf/mpxj/common/XmlReaderHelper.java
@@ -0,0 +1,51 @@
+/*
+ * file:       XmlReaderHelper.java
+ * author:     Jon Iles
+ * copyright:  (c) Packwood Software 2020
+ * date:       29/08/2020
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by the
+ * Free Software Foundation; either version 2.1 of the License, or (at your
+ * option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+package net.sf.mpxj.common;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+
+/**
+ * Utility methods for working with XmlReader.
+ */
+public final class XmlReaderHelper
+{
+   /**
+    * Create a new XmlReader instance.
+    *
+    * @return XmlReader instance
+    */
+   public static final XMLReader createXmlReader() throws SAXException, ParserConfigurationException
+   {
+      SAXParserFactory factory = SAXParserFactory.newInstance();
+      factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
+      factory.setNamespaceAware(true);
+      SAXParser saxParser = factory.newSAXParser();
+      return saxParser.getXMLReader();
+   }
+}
diff --git a/src/main/java/net/sf/mpxj/conceptdraw/ConceptDrawProjectReader.java b/src/main/java/net/sf/mpxj/conceptdraw/ConceptDrawProjectReader.java
index 576908beeb..3d95d542c2 100644
--- a/src/main/java/net/sf/mpxj/conceptdraw/ConceptDrawProjectReader.java
+++ b/src/main/java/net/sf/mpxj/conceptdraw/ConceptDrawProjectReader.java
@@ -25,7 +25,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -36,16 +35,9 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
-import javax.xml.bind.UnmarshallerHandler;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
 
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLFilter;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.DateRange;
 import net.sf.mpxj.Duration;
@@ -65,6 +57,7 @@
 import net.sf.mpxj.Task;
 import net.sf.mpxj.TimeUnit;
 import net.sf.mpxj.common.AlphanumComparator;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.conceptdraw.schema.Document;
 import net.sf.mpxj.conceptdraw.schema.Document.Calendars.Calendar;
 import net.sf.mpxj.conceptdraw.schema.Document.Calendars.Calendar.ExceptedDays.ExceptedDay;
@@ -99,6 +92,11 @@ public final class ConceptDrawProjectReader extends AbstractProjectReader
    {
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_eventManager = m_projectFile.getEventManager();
          m_calendarMap = new HashMap<>();
@@ -113,23 +111,7 @@ public final class ConceptDrawProjectReader extends AbstractProjectReader
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         XMLFilter filter = new NamespaceFilter();
-         filter.setParent(xmlReader);
-         UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();
-         filter.setContentHandler(unmarshallerHandler);
-         filter.parse(new InputSource(new InputStreamReader(stream)));
-         Document cdp = (Document) unmarshallerHandler.getResult();
+         Document cdp = (Document) UnmarshalHelper.unmarshal(CONTEXT, stream, new NamespaceFilter());
 
          readProjectProperties(cdp);
          readCalendars(cdp);
diff --git a/src/main/java/net/sf/mpxj/ganttdesigner/GanttDesignerReader.java b/src/main/java/net/sf/mpxj/ganttdesigner/GanttDesignerReader.java
index 4ae64205c6..cf3f4ab791 100644
--- a/src/main/java/net/sf/mpxj/ganttdesigner/GanttDesignerReader.java
+++ b/src/main/java/net/sf/mpxj/ganttdesigner/GanttDesignerReader.java
@@ -31,15 +31,9 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.transform.sax.SAXSource;
 
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.ChildTaskContainer;
 import net.sf.mpxj.Day;
@@ -54,6 +48,7 @@
 import net.sf.mpxj.ProjectProperties;
 import net.sf.mpxj.RelationType;
 import net.sf.mpxj.Task;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.ganttdesigner.schema.Gantt;
 import net.sf.mpxj.ganttdesigner.schema.GanttDesignerRemark;
 import net.sf.mpxj.listener.ProjectListener;
@@ -83,6 +78,11 @@ public final class GanttDesignerReader extends AbstractProjectReader
    {
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_eventManager = m_projectFile.getEventManager();
          m_taskMap = new HashMap<>();
@@ -95,19 +95,7 @@ public final class GanttDesignerReader extends AbstractProjectReader
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-         SAXSource doc = new SAXSource(xmlReader, new InputSource(stream));
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         Gantt gantt = (Gantt) unmarshaller.unmarshal(doc);
+         Gantt gantt = (Gantt) UnmarshalHelper.unmarshal(CONTEXT, stream);
 
          readProjectProperties(gantt);
          readCalendar(gantt);
diff --git a/src/main/java/net/sf/mpxj/ganttproject/GanttProjectReader.java b/src/main/java/net/sf/mpxj/ganttproject/GanttProjectReader.java
index 5abc818ac6..10084fd689 100644
--- a/src/main/java/net/sf/mpxj/ganttproject/GanttProjectReader.java
+++ b/src/main/java/net/sf/mpxj/ganttproject/GanttProjectReader.java
@@ -37,15 +37,9 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.transform.sax.SAXSource;
 
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.ChildTaskContainer;
 import net.sf.mpxj.ConstraintType;
@@ -76,6 +70,7 @@
 import net.sf.mpxj.common.Pair;
 import net.sf.mpxj.common.ResourceFieldLists;
 import net.sf.mpxj.common.TaskFieldLists;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.ganttproject.schema.Allocation;
 import net.sf.mpxj.ganttproject.schema.Allocations;
 import net.sf.mpxj.ganttproject.schema.Calendars;
@@ -118,6 +113,11 @@ public final class GanttProjectReader extends AbstractProjectReader
    {
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_eventManager = m_projectFile.getEventManager();
          m_resourcePropertyDefinitions = new HashMap<>();
@@ -137,19 +137,7 @@ public final class GanttProjectReader extends AbstractProjectReader
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-         SAXSource doc = new SAXSource(xmlReader, new InputSource(stream));
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         Project ganttProject = (Project) unmarshaller.unmarshal(doc);
+         Project ganttProject = (Project) UnmarshalHelper.unmarshal(CONTEXT, stream);
 
          readProjectProperties(ganttProject);
          readCalendars(ganttProject);
diff --git a/src/main/java/net/sf/mpxj/mspdi/MSPDIReader.java b/src/main/java/net/sf/mpxj/mspdi/MSPDIReader.java
index 87da42b149..71c3187d26 100644
--- a/src/main/java/net/sf/mpxj/mspdi/MSPDIReader.java
+++ b/src/main/java/net/sf/mpxj/mspdi/MSPDIReader.java
@@ -40,18 +40,10 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
-import javax.xml.bind.UnmarshallerHandler;
-import javax.xml.bind.ValidationEvent;
-import javax.xml.bind.ValidationEventHandler;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
 
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLFilter;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.AssignmentField;
 import net.sf.mpxj.Availability;
@@ -104,6 +96,7 @@
 import net.sf.mpxj.common.Pair;
 import net.sf.mpxj.common.SplitTaskFactory;
 import net.sf.mpxj.common.TimephasedWorkNormaliser;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.listener.ProjectListener;
 import net.sf.mpxj.mpp.CustomFieldValueItem;
 import net.sf.mpxj.mspdi.schema.Project;
@@ -177,6 +170,11 @@ private Charset getCharset()
    {
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_eventManager = m_projectFile.getEventManager();
 
@@ -193,41 +191,9 @@ private Charset getCharset()
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
-         factory.setNamespaceAware(true);
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
          DatatypeConverter.setParentFile(m_projectFile);
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         //
-         // If we are matching the behaviour of MS project, then we need to
-         // ignore validation warnings.
-         //
-         if (m_compatibleInput == true)
-         {
-            unmarshaller.setEventHandler(new ValidationEventHandler()
-            {
-               @Override public boolean handleEvent(ValidationEvent event)
-               {
-                  return (true);
-               }
-            });
-         }
 
-         XMLFilter filter = new NamespaceFilter();
-         filter.setParent(xmlReader);
-         UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();
-         filter.setContentHandler(unmarshallerHandler);
-         filter.parse(new InputSource(new InputStreamReader(stream, getCharset())));
-         Project project = (Project) unmarshallerHandler.getResult();
+         Project project = (Project) UnmarshalHelper.unmarshal(CONTEXT, new InputSource(new InputStreamReader(stream, getCharset())), new NamespaceFilter(), !m_compatibleInput);
 
          HashMap<BigInteger, ProjectCalendar> calendarMap = new HashMap<>();
 
diff --git a/src/main/java/net/sf/mpxj/phoenix/PhoenixReader.java b/src/main/java/net/sf/mpxj/phoenix/PhoenixReader.java
index 2d739188c9..a37b05f6d9 100644
--- a/src/main/java/net/sf/mpxj/phoenix/PhoenixReader.java
+++ b/src/main/java/net/sf/mpxj/phoenix/PhoenixReader.java
@@ -37,15 +37,9 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.transform.sax.SAXSource;
 
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.ChildTaskContainer;
 import net.sf.mpxj.Day;
@@ -68,6 +62,7 @@
 import net.sf.mpxj.common.DateHelper;
 import net.sf.mpxj.common.DebugLogPrintWriter;
 import net.sf.mpxj.common.NumberHelper;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.listener.ProjectListener;
 import net.sf.mpxj.phoenix.schema.Project;
 import net.sf.mpxj.phoenix.schema.Project.Layouts.Layout;
@@ -112,6 +107,11 @@ public final class PhoenixReader extends AbstractProjectReader
 
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_activityMap = new HashMap<>();
          m_activityCodeValues = new HashMap<>();
@@ -134,19 +134,7 @@ public final class PhoenixReader extends AbstractProjectReader
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-         SAXSource doc = new SAXSource(xmlReader, new InputSource(new SkipNulInputStream(stream)));
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         Project phoenixProject = (Project) unmarshaller.unmarshal(doc);
+         Project phoenixProject = (Project) UnmarshalHelper.unmarshal(CONTEXT, new SkipNulInputStream(stream));
          Storepoint storepoint = getCurrentStorepoint(phoenixProject);
          readProjectProperties(phoenixProject.getSettings(), storepoint);
          readCalendars(storepoint);
diff --git a/src/main/java/net/sf/mpxj/planner/PlannerReader.java b/src/main/java/net/sf/mpxj/planner/PlannerReader.java
index ea133e5434..cdca815592 100644
--- a/src/main/java/net/sf/mpxj/planner/PlannerReader.java
+++ b/src/main/java/net/sf/mpxj/planner/PlannerReader.java
@@ -39,15 +39,9 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import javax.xml.transform.sax.SAXSource;
 
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.ConstraintType;
 import net.sf.mpxj.DateRange;
@@ -73,6 +67,7 @@
 import net.sf.mpxj.TimeUnit;
 import net.sf.mpxj.common.DateHelper;
 import net.sf.mpxj.common.NumberHelper;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.listener.ProjectListener;
 import net.sf.mpxj.planner.schema.Allocation;
 import net.sf.mpxj.planner.schema.Allocations;
@@ -114,6 +109,11 @@ public final class PlannerReader extends AbstractProjectReader
    {
       try
       {
+         if (CONTEXT == null)
+         {
+            throw CONTEXT_EXCEPTION;
+         }
+
          m_projectFile = new ProjectFile();
          m_eventManager = m_projectFile.getEventManager();
 
@@ -129,21 +129,7 @@ public final class PlannerReader extends AbstractProjectReader
 
          m_eventManager.addProjectListeners(m_projectListeners);
 
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
-         factory.setNamespaceAware(true);
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-         SAXSource doc = new SAXSource(xmlReader, new InputSource(stream));
-
-         if (CONTEXT == null)
-         {
-            throw CONTEXT_EXCEPTION;
-         }
-
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-
-         Project plannerProject = (Project) unmarshaller.unmarshal(doc);
+         Project plannerProject = (Project) UnmarshalHelper.unmarshal(CONTEXT, stream);
 
          readProjectProperties(plannerProject);
          readCalendars(plannerProject);
diff --git a/src/main/java/net/sf/mpxj/primavera/PrimaveraPMFileReader.java b/src/main/java/net/sf/mpxj/primavera/PrimaveraPMFileReader.java
index 76000af37d..cdebe09648 100644
--- a/src/main/java/net/sf/mpxj/primavera/PrimaveraPMFileReader.java
+++ b/src/main/java/net/sf/mpxj/primavera/PrimaveraPMFileReader.java
@@ -39,17 +39,11 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
-import javax.xml.bind.Unmarshaller;
-import javax.xml.bind.UnmarshallerHandler;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
 
 import org.apache.poi.util.ReplacingInputStream;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLFilter;
-import org.xml.sax.XMLReader;
 
 import net.sf.mpxj.ActivityCode;
 import net.sf.mpxj.ActivityCodeContainer;
@@ -84,6 +78,7 @@
 import net.sf.mpxj.common.BooleanHelper;
 import net.sf.mpxj.common.DateHelper;
 import net.sf.mpxj.common.NumberHelper;
+import net.sf.mpxj.common.UnmarshalHelper;
 import net.sf.mpxj.listener.ProjectListener;
 import net.sf.mpxj.primavera.schema.APIBusinessObjects;
 import net.sf.mpxj.primavera.schema.ActivityCodeType;
@@ -265,25 +260,12 @@ private APIBusinessObjects processFile(InputStream stream) throws MPXJException
    {
       try
       {
-         SAXParserFactory factory = SAXParserFactory.newInstance();
-         factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
-         factory.setNamespaceAware(true);
-         SAXParser saxParser = factory.newSAXParser();
-         XMLReader xmlReader = saxParser.getXMLReader();
-
          if (CONTEXT == null)
          {
             throw CONTEXT_EXCEPTION;
          }
 
-         Unmarshaller unmarshaller = CONTEXT.createUnmarshaller();
-         XMLFilter filter = new NamespaceFilter();
-         filter.setParent(xmlReader);
-         UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler();
-         filter.setContentHandler(unmarshallerHandler);
-         filter.parse(configureInputSource(stream));
-
-         return (APIBusinessObjects) unmarshallerHandler.getResult();
+         return (APIBusinessObjects) UnmarshalHelper.unmarshal(CONTEXT, configureInputSource(stream), new NamespaceFilter(), false);
       }
 
       catch (ParserConfigurationException ex)"
GHSA-v7wg-cpwc-24m4,"From f4d0ed69c0b3aae8531d83d6af4c57f22312c813 Mon Sep 17 00:00:00 2001
From: Vladimir Sitnikov <sitnikov.vladimir@gmail.com>
Date: Tue, 1 Feb 2022 15:27:13 +0300
Subject: [PATCH] Merge pull request from GHSA-v7wg-cpwc-24m4

This ensures arbitrary classes can't be passed instead of
AuthenticationPlugin, SocketFactory, SSLSocketFactory, CallbackHandler, HostnameVerifier
---
 .../postgresql/core/SocketFactoryFactory.java |   4 +-
 .../core/v3/AuthenticationPluginManager.java  |  10 +-
 .../java/org/postgresql/ssl/LibPQFactory.java |   2 +-
 .../main/java/org/postgresql/ssl/MakeSSL.java |   2 +-
 .../org/postgresql/util/ObjectFactory.java    |   7 +-
 .../test/util/ObjectFactoryTest.java          | 106 ++++++++++++++++++
 6 files changed, 120 insertions(+), 11 deletions(-)
 create mode 100644 pgjdbc/src/test/java/org/postgresql/test/util/ObjectFactoryTest.java

diff --git a/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java b/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java
index 09efa75f07..fe56354a21 100644
--- a/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java
+++ b/pgjdbc/src/main/java/org/postgresql/core/SocketFactoryFactory.java
@@ -36,7 +36,7 @@ public static SocketFactory getSocketFactory(Properties info) throws PSQLExcepti
       return SocketFactory.getDefault();
     }
     try {
-      return (SocketFactory) ObjectFactory.instantiate(socketFactoryClassName, info, true,
+      return ObjectFactory.instantiate(SocketFactory.class, socketFactoryClassName, info, true,
           PGProperty.SOCKET_FACTORY_ARG.get(info));
     } catch (Exception e) {
       throw new PSQLException(
@@ -61,7 +61,7 @@ public static SSLSocketFactory getSslSocketFactory(Properties info) throws PSQLE
       return new LibPQFactory(info);
     }
     try {
-      return (SSLSocketFactory) ObjectFactory.instantiate(classname, info, true,
+      return ObjectFactory.instantiate(SSLSocketFactory.class, classname, info, true,
           PGProperty.SSL_FACTORY_ARG.get(info));
     } catch (Exception e) {
       throw new PSQLException(
diff --git a/pgjdbc/src/main/java/org/postgresql/core/v3/AuthenticationPluginManager.java b/pgjdbc/src/main/java/org/postgresql/core/v3/AuthenticationPluginManager.java
index 938f24632f..bcc8b3a9b6 100644
--- a/pgjdbc/src/main/java/org/postgresql/core/v3/AuthenticationPluginManager.java
+++ b/pgjdbc/src/main/java/org/postgresql/core/v3/AuthenticationPluginManager.java
@@ -66,11 +66,12 @@ public static <T> T withPassword(AuthenticationRequestType type, Properties info
     } else {
       AuthenticationPlugin authPlugin;
       try {
-        authPlugin = (AuthenticationPlugin) ObjectFactory.instantiate(authPluginClassName, info,
+        authPlugin = ObjectFactory.instantiate(AuthenticationPlugin.class, authPluginClassName, info,
             false, null);
       } catch (Exception ex) {
-        LOGGER.log(Level.FINE, ""Unable to load Authentication Plugin "" + ex.toString());
-        throw new PSQLException(ex.getMessage(), PSQLState.UNEXPECTED_ERROR);
+        String msg = GT.tr(""Unable to load Authentication Plugin {0}"", authPluginClassName);
+        LOGGER.log(Level.FINE, msg, ex);
+        throw new PSQLException(msg, PSQLState.INVALID_PARAMETER_VALUE, ex);
       }
 
       password = authPlugin.getPassword(type);
@@ -106,7 +107,8 @@ public static <T> T withEncodedPassword(AuthenticationRequestType type, Properti
     byte[] encodedPassword = withPassword(type, info, password -> {
       if (password == null) {
         throw new PSQLException(
-            GT.tr(""The server requested password-based authentication, but no password was provided.""),
+            GT.tr(""The server requested password-based authentication, but no password was provided by plugin {0}"",
+                PGProperty.AUTHENTICATION_PLUGIN_CLASS_NAME.get(info)),
             PSQLState.CONNECTION_REJECTED);
       }
       ByteBuffer buf = StandardCharsets.UTF_8.encode(CharBuffer.wrap(password));
diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java b/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java
index 67e1196b15..4249dcda77 100644
--- a/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java
+++ b/pgjdbc/src/main/java/org/postgresql/ssl/LibPQFactory.java
@@ -56,7 +56,7 @@ private CallbackHandler getCallbackHandler(
     String sslpasswordcallback = PGProperty.SSL_PASSWORD_CALLBACK.get(info);
     if (sslpasswordcallback != null) {
       try {
-        cbh = (CallbackHandler) ObjectFactory.instantiate(sslpasswordcallback, info, false, null);
+        cbh = ObjectFactory.instantiate(CallbackHandler.class, sslpasswordcallback, info, false, null);
       } catch (Exception e) {
         throw new PSQLException(
           GT.tr(""The password callback class provided {0} could not be instantiated."",
diff --git a/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java b/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java
index bf64673f41..849d107321 100644
--- a/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java
+++ b/pgjdbc/src/main/java/org/postgresql/ssl/MakeSSL.java
@@ -64,7 +64,7 @@ private static void verifyPeerName(PGStream stream, Properties info, SSLSocket n
       sslhostnameverifier = ""PgjdbcHostnameVerifier"";
     } else {
       try {
-        hvn = (HostnameVerifier) instantiate(sslhostnameverifier, info, false, null);
+        hvn = instantiate(HostnameVerifier.class, sslhostnameverifier, info, false, null);
       } catch (Exception e) {
         throw new PSQLException(
             GT.tr(""The HostnameVerifier class provided {0} could not be instantiated."",
diff --git a/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java b/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java
index ef24770e6f..e4fec28fc4 100644
--- a/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java
+++ b/pgjdbc/src/main/java/org/postgresql/util/ObjectFactory.java
@@ -36,14 +36,15 @@ public class ObjectFactory {
    * @throws IllegalAccessException if something goes wrong
    * @throws InvocationTargetException if something goes wrong
    */
-  public static Object instantiate(String classname, Properties info, boolean tryString,
+  public static <T> T instantiate(Class<T> expectedClass, String classname, Properties info,
+      boolean tryString,
       @Nullable String stringarg)
       throws ClassNotFoundException, SecurityException, NoSuchMethodException,
           IllegalArgumentException, InstantiationException, IllegalAccessException,
           InvocationTargetException {
     @Nullable Object[] args = {info};
-    Constructor<?> ctor = null;
-    Class<?> cls = Class.forName(classname);
+    Constructor<? extends T> ctor = null;
+    Class<? extends T> cls = Class.forName(classname).asSubclass(expectedClass);
     try {
       ctor = cls.getConstructor(Properties.class);
     } catch (NoSuchMethodException ignored) {
diff --git a/pgjdbc/src/test/java/org/postgresql/test/util/ObjectFactoryTest.java b/pgjdbc/src/test/java/org/postgresql/test/util/ObjectFactoryTest.java
new file mode 100644
index 0000000000..e0a9d1f4b4
--- /dev/null
+++ b/pgjdbc/src/test/java/org/postgresql/test/util/ObjectFactoryTest.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2022, PostgreSQL Global Development Group
+ * See the LICENSE file in the project root for more information.
+ */
+
+package org.postgresql.test.util;
+
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+import org.postgresql.PGProperty;
+import org.postgresql.jdbc.SslMode;
+import org.postgresql.test.TestUtil;
+import org.postgresql.util.ObjectFactory;
+import org.postgresql.util.PSQLState;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Assertions;
+import org.opentest4j.MultipleFailuresError;
+
+import java.sql.SQLException;
+import java.util.Properties;
+
+import javax.net.SocketFactory;
+
+public class ObjectFactoryTest {
+  Properties props = new Properties();
+
+  static class BadObject {
+    static boolean wasInstantiated = false;
+
+    BadObject() {
+      wasInstantiated = true;
+      throw new RuntimeException(""I should not be instantiated"");
+    }
+  }
+
+  private void testInvalidInstantiation(PGProperty prop, PSQLState expectedSqlState) {
+    prop.set(props, BadObject.class.getName());
+
+    BadObject.wasInstantiated = false;
+    SQLException ex = assertThrows(SQLException.class, () -> {
+      TestUtil.openDB(props);
+    });
+
+    try {
+      Assertions.assertAll(
+          () -> assertFalse(BadObject.wasInstantiated, ""ObjectFactory should not have ""
+              + ""instantiated bad object for "" + prop),
+          () -> assertEquals(expectedSqlState.getState(), ex.getSQLState(), () -> ""#getSQLState()""),
+          () -> {
+            assertThrows(
+                ClassCastException.class,
+                () -> {
+                  throw ex.getCause();
+                },
+                () -> ""Wrong class specified for "" + prop.name()
+                    + "" => ClassCastException is expected in SQLException#getCause()""
+            );
+          }
+      );
+    } catch (MultipleFailuresError e) {
+      // Add the original exception so it is easier to understand the reason for the test to fail
+      e.addSuppressed(ex);
+      throw e;
+    }
+  }
+
+  @Test
+  public void testInvalidSocketFactory() {
+    testInvalidInstantiation(PGProperty.SOCKET_FACTORY, PSQLState.CONNECTION_FAILURE);
+  }
+
+  @Test
+  public void testInvalidSSLFactory() {
+    TestUtil.assumeSslTestsEnabled();
+    // We need at least ""require"" to trigger SslSockerFactory instantiation
+    PGProperty.SSL_MODE.set(props, SslMode.REQUIRE.value);
+    testInvalidInstantiation(PGProperty.SSL_FACTORY, PSQLState.CONNECTION_FAILURE);
+  }
+
+  @Test
+  public void testInvalidAuthenticationPlugin() {
+    testInvalidInstantiation(PGProperty.AUTHENTICATION_PLUGIN_CLASS_NAME,
+        PSQLState.INVALID_PARAMETER_VALUE);
+  }
+
+  @Test
+  public void testInvalidSslHostnameVerifier() {
+    TestUtil.assumeSslTestsEnabled();
+    // Hostname verification is done at verify-full level only
+    PGProperty.SSL_MODE.set(props, SslMode.VERIFY_FULL.value);
+    PGProperty.SSL_ROOT_CERT.set(props, TestUtil.getSslTestCertPath(""goodroot.crt""));
+    testInvalidInstantiation(PGProperty.SSL_HOSTNAME_VERIFIER, PSQLState.CONNECTION_FAILURE);
+  }
+
+  @Test
+  public void testInstantiateInvalidSocketFactory() {
+    Properties props = new Properties();
+    assertThrows(ClassCastException.class, () -> {
+      ObjectFactory.instantiate(SocketFactory.class, BadObject.class.getName(), props,
+          false, null);
+    });
+  }
+}"
CVE-2014-2067,"From 5d57c855f3147bfc5e7fda9252317b428a700014 Mon Sep 17 00:00:00 2001
From: Jesse Glick <jglick@cloudbees.com>
Date: Fri, 7 Feb 2014 14:33:10 -0500
Subject: [PATCH] [FIXED SECURITY-74] Apply markup formatter to remote cause
 note.

---
 core/src/main/java/hudson/model/Cause.java | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/core/src/main/java/hudson/model/Cause.java b/core/src/main/java/hudson/model/Cause.java
index 4ccab0333893..52b2eeffb13d 100644
--- a/core/src/main/java/hudson/model/Cause.java
+++ b/core/src/main/java/hudson/model/Cause.java
@@ -34,6 +34,7 @@
 import org.kohsuke.stapler.export.Exported;
 import org.kohsuke.stapler.export.ExportedBean;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
+import java.io.IOException;
 import java.util.HashSet;
 import java.util.Set;
 import javax.annotation.CheckForNull;
@@ -371,10 +372,13 @@ public RemoteCause(String host, String note) {
         @Override
         public String getShortDescription() {
             if(note != null) {
-                return Messages.Cause_RemoteCause_ShortDescriptionWithNote(addr, note);
-            } else {
-                return Messages.Cause_RemoteCause_ShortDescription(addr);
+                try {
+                    return Messages.Cause_RemoteCause_ShortDescriptionWithNote(addr, Jenkins.getInstance().getMarkupFormatter().translate(note));
+                } catch (IOException x) {
+                    // ignore
+                }
             }
+            return Messages.Cause_RemoteCause_ShortDescription(addr);
         }
 
         @Override"
GHSA-rp7r-79rm-2758,"From fd24a7590ff5426bac68303fbeca07dbc5067412 Mon Sep 17 00:00:00 2001
From: Katherine Marsden <kmarsden@apache.org>
Date: Sun, 18 Sep 2005 22:27:48 +0000
Subject: [PATCH] DERBY-530

Addtional test checkin to fix output on non-windows platforms



git-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@289989 13f79535-47bb-0310-9956-ffa450edef68
---
 .../functionTests/master/DerbyNetClient/checkDriver.out   | 8 ++++----
 .../functionTests/tests/jdbcapi/checkDriver.java          | 7 ++++---
 2 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out b/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out
index f314e748e7..f1c328a533 100644
--- a/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out
+++ b/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/checkDriver.out
@@ -32,13 +32,13 @@ getUserName() = testuser
 CURRENT SCHEMA = TESTUSER
 Expected Exception:08006:DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: Database 'testcreatedb1' shutdown.
 testClientAttributes()
-Connection info for connect(jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]\trace.out, {})
-getURL() = jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]\trace.out
+Connection info for connect(jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]/trace.out, {})
+getURL() = jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]/trace.out
 getUserName() = APP
 CURRENT SCHEMA = APP
  trace file exists
-Connection info for connect(jdbc:derby://localhost:1527/testpropdb, {traceFile=[DERBY_SYSTEM_HOME]\trace2.out})
-getURL() = jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]\trace2.out
+Connection info for connect(jdbc:derby://localhost:1527/testpropdb, {traceFile=[DERBY_SYSTEM_HOME]/trace2.out})
+getURL() = jdbc:derby://localhost:1527/testpropdb;traceFile=[DERBY_SYSTEM_HOME]/trace2.out
 getUserName() = APP
 CURRENT SCHEMA = APP
  trace file exists
diff --git a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
index f6b6a435b4..36c7ea5762 100644
--- a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
+++ b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDriver.java
@@ -360,12 +360,13 @@ private static void testConnect(Driver driver, String url, Properties info) thro
 	 * @return origString with derby.system.home path replaed with [DERBY_SYSTEM_HOME]
 	 */
 	private static String replaceSystemHome(String origString) {
-		int offset = origString.indexOf(DERBY_SYSTEM_HOME);
+		String replaceString = DERBY_SYSTEM_HOME + File.separator;
+		int offset = origString.indexOf(replaceString);
 		if (offset == -1)
 			return origString;
 		else
-			return origString.substring(0,offset) + ""[DERBY_SYSTEM_HOME]""+ 
-			origString.substring(offset + DERBY_SYSTEM_HOME.length());
+			return origString.substring(0,offset) + ""[DERBY_SYSTEM_HOME]/""+ 
+			origString.substring(offset + replaceString.length());
 	}
 	
 }
\ No newline at end of file"
GHSA-wm47-8v5p-wjpj,"From 89c241e3b1795ff257af4ad6eadc616cb2fb3dc4 Mon Sep 17 00:00:00 2001
From: Norman Maurer <norman_maurer@apple.com>
Date: Tue, 9 Mar 2021 08:20:09 +0100
Subject: [PATCH] Merge pull request from GHSA-wm47-8v5p-wjpj

Motivation:

As stated by https://tools.ietf.org/html/rfc7540#section-8.1.2.6 we should report a stream error if the content-length does not match the sum of all data frames.

Modifications:

- Verify that the sum of data frames match if a content-length header was send.
- Handle multiple content-length headers and also handle negative values
- Add io.netty.http2.validateContentLength system property which allows to disable the more strict validation
- Add unit tests

Result:

Correctly handle the case when the content-length header was included but not match what is send and also when content-length header is invalid
---
 .../handler/codec/http/HttpObjectDecoder.java |  48 +------
 .../io/netty/handler/codec/http/HttpUtil.java |  86 ++++++++++++
 .../http2/DefaultHttp2ConnectionDecoder.java  | 100 ++++++++++++--
 .../DefaultHttp2ConnectionDecoderTest.java    | 128 ++++++++++++++++++
 4 files changed, 312 insertions(+), 50 deletions(-)

diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java
index db4904407d34..761041aed589 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java
@@ -16,7 +16,6 @@
 package io.netty.handler.codec.http;
 
 import static io.netty.util.internal.ObjectUtil.checkPositive;
-import static io.netty.util.internal.StringUtil.COMMA;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -630,49 +629,16 @@ private State readHeaders(ByteBuf buffer) {
         value = null;
 
         List<String> contentLengthFields = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);
-
         if (!contentLengthFields.isEmpty()) {
+            HttpVersion version = message.protocolVersion();
+            boolean isHttp10OrEarlier = version.majorVersion() < 1 || (version.majorVersion() == 1
+                    && version.minorVersion() == 0);
             // Guard against multiple Content-Length headers as stated in
             // https://tools.ietf.org/html/rfc7230#section-3.3.2:
-            //
-            // If a message is received that has multiple Content-Length header
-            //   fields with field-values consisting of the same decimal value, or a
-            //   single Content-Length header field with a field value containing a
-            //   list of identical decimal values (e.g., ""Content-Length: 42, 42""),
-            //   indicating that duplicate Content-Length header fields have been
-            //   generated or combined by an upstream message processor, then the
-            //   recipient MUST either reject the message as invalid or replace the
-            //   duplicated field-values with a single valid Content-Length field
-            //   containing that decimal value prior to determining the message body
-            //   length or forwarding the message.
-            boolean multipleContentLengths =
-                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;
-            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {
-                if (allowDuplicateContentLengths) {
-                    // Find and enforce that all Content-Length values are the same
-                    String firstValue = null;
-                    for (String field : contentLengthFields) {
-                        String[] tokens = COMMA_PATTERN.split(field, -1);
-                        for (String token : tokens) {
-                            String trimmed = token.trim();
-                            if (firstValue == null) {
-                                firstValue = trimmed;
-                            } else if (!trimmed.equals(firstValue)) {
-                                throw new IllegalArgumentException(
-                                        ""Multiple Content-Length values found: "" + contentLengthFields);
-                            }
-                        }
-                    }
-                    // Replace the duplicated field-values with a single valid Content-Length field
-                    headers.set(HttpHeaderNames.CONTENT_LENGTH, firstValue);
-                    contentLength = Long.parseLong(firstValue);
-                } else {
-                    // Reject the message as invalid
-                    throw new IllegalArgumentException(
-                            ""Multiple Content-Length values found: "" + contentLengthFields);
-                }
-            } else {
-                contentLength = Long.parseLong(contentLengthFields.get(0));
+            contentLength = HttpUtil.normalizeAndGetContentLength(contentLengthFields,
+                    isHttp10OrEarlier, allowDuplicateContentLengths);
+            if (contentLength != -1) {
+                headers.set(HttpHeaderNames.CONTENT_LENGTH, contentLength);
             }
         }
 
diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java
index 8b9aedc55194..49ed25510f25 100644
--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java
+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java
@@ -24,10 +24,14 @@
 import java.util.Iterator;
 import java.util.List;
 
+import io.netty.handler.codec.Headers;
 import io.netty.util.AsciiString;
 import io.netty.util.CharsetUtil;
 import io.netty.util.NetUtil;
 import io.netty.util.internal.ObjectUtil;
+import io.netty.util.internal.UnstableApi;
+
+import static io.netty.util.internal.StringUtil.COMMA;
 
 /**
  * Utility methods useful in the HTTP context.
@@ -36,6 +40,7 @@ public final class HttpUtil {
 
     private static final AsciiString CHARSET_EQUALS = AsciiString.of(HttpHeaderValues.CHARSET + ""="");
     private static final AsciiString SEMICOLON = AsciiString.cached("";"");
+    private static final String COMMA_STRING = String.valueOf(COMMA);
 
     private HttpUtil() { }
 
@@ -530,4 +535,85 @@ public static String formatHostnameForHttp(InetSocketAddress addr) {
         }
         return hostString;
     }
+
+    /**
+     * Validates, and optionally extracts the content length from headers. This method is not intended for
+     * general use, but is here to be shared between HTTP/1 and HTTP/2 parsing.
+     *
+     * @param contentLengthFields the content-length header fields.
+     * @param isHttp10OrEarlier {@code true} if we are handling HTTP/1.0 or earlier
+     * @param allowDuplicateContentLengths {@code true}  if multiple, identical-value content lengths should be allowed.
+     * @return the normalized content length from the headers or {@code -1} if the fields were empty.
+     * @throws IllegalArgumentException if the content-length fields are not valid
+     */
+    @UnstableApi
+    public static long normalizeAndGetContentLength(
+            List<? extends CharSequence> contentLengthFields, boolean isHttp10OrEarlier,
+            boolean allowDuplicateContentLengths) {
+        if (contentLengthFields.isEmpty()) {
+            return -1;
+        }
+
+        // Guard against multiple Content-Length headers as stated in
+        // https://tools.ietf.org/html/rfc7230#section-3.3.2:
+        //
+        // If a message is received that has multiple Content-Length header
+        //   fields with field-values consisting of the same decimal value, or a
+        //   single Content-Length header field with a field value containing a
+        //   list of identical decimal values (e.g., ""Content-Length: 42, 42""),
+        //   indicating that duplicate Content-Length header fields have been
+        //   generated or combined by an upstream message processor, then the
+        //   recipient MUST either reject the message as invalid or replace the
+        //   duplicated field-values with a single valid Content-Length field
+        //   containing that decimal value prior to determining the message body
+        //   length or forwarding the message.
+        String firstField = contentLengthFields.get(0).toString();
+        boolean multipleContentLengths =
+                contentLengthFields.size() > 1 || firstField.indexOf(COMMA) >= 0;
+
+        if (multipleContentLengths && !isHttp10OrEarlier) {
+            if (allowDuplicateContentLengths) {
+                // Find and enforce that all Content-Length values are the same
+                String firstValue = null;
+                for (CharSequence field : contentLengthFields) {
+                    String[] tokens = field.toString().split(COMMA_STRING, -1);
+                    for (String token : tokens) {
+                        String trimmed = token.trim();
+                        if (firstValue == null) {
+                            firstValue = trimmed;
+                        } else if (!trimmed.equals(firstValue)) {
+                            throw new IllegalArgumentException(
+                                    ""Multiple Content-Length values found: "" + contentLengthFields);
+                        }
+                    }
+                }
+                // Replace the duplicated field-values with a single valid Content-Length field
+                firstField = firstValue;
+            } else {
+                // Reject the message as invalid
+                throw new IllegalArgumentException(
+                        ""Multiple Content-Length values found: "" + contentLengthFields);
+            }
+        }
+        // Ensure we not allow sign as part of the content-length:
+        // See https://github.com/squid-cache/squid/security/advisories/GHSA-qf3v-rc95-96j5
+        if (!Character.isDigit(firstField.charAt(0))) {
+            // Reject the message as invalid
+            throw new IllegalArgumentException(
+                    ""Content-Length value is not a number: "" + firstField);
+        }
+        try {
+            final long value = Long.parseLong(firstField);
+            if (value < 0) {
+                // Reject the message as invalid
+                throw new IllegalArgumentException(
+                        ""Content-Length value must be >=0: "" + value);
+            }
+            return value;
+        } catch (NumberFormatException e) {
+            // Reject the message as invalid
+            throw new IllegalArgumentException(
+                    ""Content-Length value is not a number: "" + firstField, e);
+        }
+    }
 }
diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java
index 1bbaf632b506..9655d6bc18f8 100644
--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java
+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java
@@ -16,8 +16,11 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpStatusClass;
+import io.netty.handler.codec.http.HttpUtil;
 import io.netty.handler.codec.http2.Http2Connection.Endpoint;
+import io.netty.util.internal.SystemPropertyUtil;
 import io.netty.util.internal.UnstableApi;
 import io.netty.util.internal.logging.InternalLogger;
 import io.netty.util.internal.logging.InternalLoggerFactory;
@@ -49,6 +52,8 @@
  */
 @UnstableApi
 public class DefaultHttp2ConnectionDecoder implements Http2ConnectionDecoder {
+    private static final boolean VALIDATE_CONTENT_LENGTH =
+            SystemPropertyUtil.getBoolean(""io.netty.http2.validateContentLength"", true);
     private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultHttp2ConnectionDecoder.class);
     private Http2FrameListener internalFrameListener = new PrefaceFrameListener();
     private final Http2Connection connection;
@@ -59,6 +64,7 @@ public class DefaultHttp2ConnectionDecoder implements Http2ConnectionDecoder {
     private final Http2PromisedRequestVerifier requestVerifier;
     private final Http2SettingsReceivedConsumer settingsReceivedConsumer;
     private final boolean autoAckPing;
+    private final Http2Connection.PropertyKey contentLengthKey;
 
     public DefaultHttp2ConnectionDecoder(Http2Connection connection,
                                          Http2ConnectionEncoder encoder,
@@ -125,6 +131,7 @@ public DefaultHttp2ConnectionDecoder(Http2Connection connection,
             settingsReceivedConsumer = (Http2SettingsReceivedConsumer) encoder;
         }
         this.connection = checkNotNull(connection, ""connection"");
+        contentLengthKey = this.connection.newKey();
         this.frameReader = checkNotNull(frameReader, ""frameReader"");
         this.encoder = checkNotNull(encoder, ""encoder"");
         this.requestVerifier = checkNotNull(requestVerifier, ""requestVerifier"");
@@ -223,6 +230,23 @@ void onUnknownFrame0(ChannelHandlerContext ctx, byte frameType, int streamId, Ht
         listener.onUnknownFrame(ctx, frameType, streamId, flags, payload);
     }
 
+    // See https://tools.ietf.org/html/rfc7540#section-8.1.2.6
+    private void verifyContentLength(Http2Stream stream, int data, boolean isEnd) throws Http2Exception {
+        if (!VALIDATE_CONTENT_LENGTH) {
+            return;
+        }
+        ContentLength contentLength = stream.getProperty(contentLengthKey);
+        if (contentLength != null) {
+            try {
+                contentLength.increaseReceivedBytes(connection.isServer(), stream.id(), data, isEnd);
+            } finally {
+                if (isEnd) {
+                    stream.removeProperty(contentLengthKey);
+                }
+            }
+        }
+    }
+
     /**
      * Handles all inbound frames from the network.
      */
@@ -232,7 +256,8 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat
                               boolean endOfStream) throws Http2Exception {
             Http2Stream stream = connection.stream(streamId);
             Http2LocalFlowController flowController = flowController();
-            int bytesToReturn = data.readableBytes() + padding;
+            int readable = data.readableBytes();
+            int bytesToReturn = readable + padding;
 
             final boolean shouldIgnore;
             try {
@@ -259,7 +284,6 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat
                 // All bytes have been consumed.
                 return bytesToReturn;
             }
-
             Http2Exception error = null;
             switch (stream.state()) {
                 case OPEN:
@@ -287,6 +311,8 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat
                     throw error;
                 }
 
+                verifyContentLength(stream, readable, endOfStream);
+
                 // Call back the application and retrieve the number of bytes that have been
                 // immediately processed.
                 bytesToReturn = listener.onDataRead(ctx, streamId, data, padding, endOfStream);
@@ -367,14 +393,34 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
                             stream.state());
             }
 
-            stream.headersReceived(isInformational);
-            encoder.flowController().updateDependencyTree(streamId, streamDependency, weight, exclusive);
-
-            listener.onHeadersRead(ctx, streamId, headers, streamDependency, weight, exclusive, padding, endOfStream);
+            if (!stream.isHeadersReceived()) {
+                // extract the content-length header
+                List<? extends CharSequence> contentLength = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);
+                if (contentLength != null && !contentLength.isEmpty()) {
+                    try {
+                        long cLength = HttpUtil.normalizeAndGetContentLength(contentLength, false, true);
+                        if (cLength != -1) {
+                            headers.setLong(HttpHeaderNames.CONTENT_LENGTH, cLength);
+                            stream.setProperty(contentLengthKey, new ContentLength(cLength));
+                        }
+                    } catch (IllegalArgumentException e) {
+                        throw streamError(stream.id(), PROTOCOL_ERROR,
+                                ""Multiple content-length headers received"", e);
+                    }
+                }
+            }
 
-            // If the headers completes this stream, close it.
-            if (endOfStream) {
-                lifecycleManager.closeStreamRemote(stream, ctx.newSucceededFuture());
+            stream.headersReceived(isInformational);
+            try {
+                verifyContentLength(stream, 0, endOfStream);
+                encoder.flowController().updateDependencyTree(streamId, streamDependency, weight, exclusive);
+                listener.onHeadersRead(ctx, streamId, headers, streamDependency,
+                        weight, exclusive, padding, endOfStream);
+            } finally {
+                // If the headers completes this stream, close it.
+                if (endOfStream) {
+                    lifecycleManager.closeStreamRemote(stream, ctx.newSucceededFuture());
+                }
             }
         }
 
@@ -736,4 +782,40 @@ public void onUnknownFrame(ChannelHandlerContext ctx, byte frameType, int stream
             onUnknownFrame0(ctx, frameType, streamId, flags, payload);
         }
     }
+
+    private static final class ContentLength {
+        private final long expected;
+        private long seen;
+
+        ContentLength(long expected) {
+            this.expected = expected;
+        }
+
+        void increaseReceivedBytes(boolean server, int streamId, int bytes, boolean isEnd) throws Http2Exception {
+            seen += bytes;
+            // Check for overflow
+            if (seen < 0) {
+                throw streamError(streamId, PROTOCOL_ERROR,
+                        ""Received amount of data did overflow and so not match content-length header %d"", expected);
+            }
+            // Check if we received more data then what was advertised via the content-length header.
+            if (seen > expected) {
+                throw streamError(streamId, PROTOCOL_ERROR,
+                        ""Received amount of data %d does not match content-length header %d"", seen, expected);
+            }
+
+            if (isEnd) {
+                if (seen == 0 && !server) {
+                    // This may be a response to a HEAD request, let's just allow it.
+                    return;
+                }
+
+                // Check that we really saw what was told via the content-length header.
+                if (expected > seen) {
+                    throw streamError(streamId, PROTOCOL_ERROR,
+                            ""Received amount of data %d does not match content-length header %d"", seen, expected);
+                }
+            }
+        }
+    }
 }
diff --git a/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java
index 2f91a58d78ab..42ab7031a1ce 100644
--- a/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java
+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java
@@ -21,17 +21,21 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
 import io.netty.channel.DefaultChannelPromise;
+import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import junit.framework.AssertionFailedError;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 import java.util.Collections;
+import java.util.IdentityHashMap;
+import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static io.netty.buffer.Unpooled.EMPTY_BUFFER;
@@ -134,6 +138,21 @@ public void setup() throws Exception {
         when(stream.id()).thenReturn(STREAM_ID);
         when(stream.state()).thenReturn(OPEN);
         when(stream.open(anyBoolean())).thenReturn(stream);
+
+        final Map<Object, Object> properties = new IdentityHashMap<Object, Object>();
+        when(stream.getProperty(ArgumentMatchers.<Http2Connection.PropertyKey>any())).thenAnswer(new Answer<Object>() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) {
+                return properties.get(invocationOnMock.getArgument(0));
+            }
+        });
+        when(stream.setProperty(ArgumentMatchers.<Http2Connection.PropertyKey>any(), any())).then(new Answer<Object>() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) {
+                return properties.put(invocationOnMock.getArgument(0), invocationOnMock.getArgument(1));
+            }
+        });
+
         when(pushStream.id()).thenReturn(PUSH_STREAM_ID);
         doAnswer(new Answer<Boolean>() {
             @Override
@@ -774,6 +793,115 @@ public void goAwayShouldReadShouldUpdateConnectionState() throws Exception {
         verify(listener).onGoAwayRead(eq(ctx), eq(1), eq(2L), eq(EMPTY_BUFFER));
     }
 
+    @Test(expected = Http2Exception.StreamException.class)
+    public void dataContentLengthMissmatch() throws Exception {
+        dataContentLengthInvalid(false);
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void dataContentLengthInvalid() throws Exception {
+        dataContentLengthInvalid(true);
+    }
+
+    private void dataContentLengthInvalid(boolean negative) throws Exception {
+        final ByteBuf data = dummyData();
+        int padding = 10;
+        int processedBytes = data.readableBytes() + padding;
+        mockFlowControl(processedBytes);
+        try {
+            decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()
+                    .setLong(HttpHeaderNames.CONTENT_LENGTH, negative ? -1L : 1L), padding, false);
+            decode().onDataRead(ctx, STREAM_ID, data, padding, true);
+            verify(localFlow).receiveFlowControlledFrame(eq(stream), eq(data), eq(padding), eq(true));
+            verify(localFlow).consumeBytes(eq(stream), eq(processedBytes));
+
+            verify(listener, times(1)).onHeadersRead(eq(ctx), anyInt(),
+                    any(Http2Headers.class), eq(0), eq(DEFAULT_PRIORITY_WEIGHT), eq(false),
+                    eq(padding), eq(false));
+            // Verify that the event was absorbed and not propagated to the observer.
+            verify(listener, never()).onDataRead(eq(ctx), anyInt(), any(ByteBuf.class), anyInt(), anyBoolean());
+        } finally {
+            data.release();
+        }
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void headersContentLengthPositiveSign() throws Exception {
+        headersContentLengthSign(""+1"");
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void headersContentLengthNegativeSign() throws Exception {
+        headersContentLengthSign(""-1"");
+    }
+
+    private void headersContentLengthSign(String length) throws Exception {
+        int padding = 10;
+        when(connection.isServer()).thenReturn(true);
+        decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()
+                .set(HttpHeaderNames.CONTENT_LENGTH, length), padding, false);
+
+        // Verify that the event was absorbed and not propagated to the observer.
+        verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),
+                any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void headersContentLengthMissmatch() throws Exception {
+        headersContentLength(false);
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void headersContentLengthInvalid() throws Exception {
+        headersContentLength(true);
+    }
+
+    private void headersContentLength(boolean negative) throws Exception {
+        int padding = 10;
+        when(connection.isServer()).thenReturn(true);
+        decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()
+                .setLong(HttpHeaderNames.CONTENT_LENGTH, negative ? -1L : 1L), padding, true);
+
+        // Verify that the event was absorbed and not propagated to the observer.
+        verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),
+                any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());
+    }
+
+    @Test
+    public void multipleHeadersContentLengthSame() throws Exception {
+        multipleHeadersContentLength(true);
+    }
+
+    @Test(expected = Http2Exception.StreamException.class)
+    public void multipleHeadersContentLengthDifferent() throws Exception {
+        multipleHeadersContentLength(false);
+    }
+
+    private void multipleHeadersContentLength(boolean same) throws Exception {
+        int padding = 10;
+        when(connection.isServer()).thenReturn(true);
+        Http2Headers headers = new DefaultHttp2Headers();
+        if (same) {
+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);
+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);
+        } else {
+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);
+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 1);
+        }
+
+        decode().onHeadersRead(ctx, STREAM_ID, headers, padding, true);
+
+        if (same) {
+            verify(listener, times(1)).onHeadersRead(eq(ctx), anyInt(),
+                    any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());
+            assertEquals(1, headers.getAll(HttpHeaderNames.CONTENT_LENGTH).size());
+        } else {
+            // Verify that the event was absorbed and not propagated to the observer.
+            verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),
+                    any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());
+        }
+    }
+
     private static ByteBuf dummyData() {
         // The buffer is purposely 8 bytes so it will even work for a ping frame.
         return wrappedBuffer(""abcdefgh"".getBytes(UTF_8));"
GHSA-4gq5-ch57-c2mg,"From 87d29af25e82a249ea15858e2d4ecbf64091db44 Mon Sep 17 00:00:00 2001
From: Tatu Saloranta <tatu.saloranta@iki.fi>
Date: Thu, 16 Aug 2018 14:42:57 -0700
Subject: [PATCH] Fix #2097 for 2.6.7.2

---
 release-notes/VERSION                                       | 3 +++
 .../jackson/databind/deser/BeanDeserializerFactory.java     | 6 ++++++
 2 files changed, 9 insertions(+)

diff --git a/release-notes/VERSION b/release-notes/VERSION
index 859acc7151..30efa6f3b8 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -5,7 +5,10 @@ Project: jackson-databind
 ------------------------------------------------------------------------
 
 2.6.7.2 (not yet released)
+
 #1737: Block more JDK types from polymorphic deserialization
+#2097: Block more classes from polymorphic deserialization (CVE-2018-14718
+  - CVE-2018-14721)
 
 2.6.7.1 (11-Jul-2017)
 
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
index 0b1613b04a..fb4c904b7c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
@@ -68,6 +68,12 @@ public class BeanDeserializerFactory
         s.add(""com.mchange.v2.c3p0.JndiRefForwardingDataSource"");
         s.add(""com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"");
 
+        // [databind#2097]: some 3rd party, one JDK-bundled
+        s.add(""org.slf4j.ext.EventData"");
+        s.add(""flex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor"");
+        s.add(""com.sun.deploy.security.ruleset.DRSHelper"");
+        s.add(""org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl"");
+
         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
     }"
GHSA-m2r5-4w96-qxg5,"From 947e8921ebd95462d5a7928f397dd1b64f77c7d5 Mon Sep 17 00:00:00 2001
From: Thomas Mortagne <thomas.mortagne@gmail.com>
Date: Fri, 10 Sep 2021 09:40:10 +0200
Subject: [PATCH] XWIKI-18946: Improve the default XML parser

---
 .../src/main/java/org/xwiki/xml/XMLUtils.java | 23 ++++++++++++++++
 .../test/java/org/xwiki/xml/XMLUtilsTest.java | 27 +++++++++++++++++++
 2 files changed, 50 insertions(+)

diff --git a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java
index 3cd1794d32..d6913ee5a7 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java
@@ -110,6 +110,18 @@ public final class XMLUtils
     /** Xerces configuration parameter for disabling fetching and checking XMLs against their DTD. */
     private static final String DISABLE_DTD_PARAM = ""http://apache.org/xml/features/nonvalidating/load-external-dtd"";
 
+    /** Xerces configuration parameter for prevent DOCTYPE definition. */
+    private static final String DISABLE_EXTERNAL_DOCTYPE_DECLARATION =
+        ""http://apache.org/xml/features/disallow-doctype-decl"";
+
+    /** Xerces configuration parameter for disabling inserting entities defined in external files. */
+    private static final String DISABLE_EXTERNAL_PARAMETER_ENTITIES =
+        ""http://xml.org/sax/features/external-parameter-entities"";
+
+    /** Xerces configuration parameter for disabling inserting entities defined in external files. */
+    private static final String DISABLE_EXTERNAL_GENERAL_ENTITIES =
+        ""http://xml.org/sax/features/external-general-entities"";
+
     static {
         DOMImplementationLS implementation = null;
         try {
@@ -516,6 +528,17 @@ public static Document parse(LSInput source)
             if (p.getDomConfig().canSetParameter(DISABLE_DTD_PARAM, false)) {
                 p.getDomConfig().setParameter(DISABLE_DTD_PARAM, false);
             }
+
+            // Avoid XML eXternal Entity injection (XXE)
+            if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_DOCTYPE_DECLARATION, false)) {
+                p.getDomConfig().setParameter(DISABLE_EXTERNAL_DOCTYPE_DECLARATION, false);
+            }
+            if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_PARAMETER_ENTITIES, false)) {
+                p.getDomConfig().setParameter(DISABLE_EXTERNAL_PARAMETER_ENTITIES, false);
+            }
+            if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_GENERAL_ENTITIES, false)) {
+                p.getDomConfig().setParameter(DISABLE_EXTERNAL_GENERAL_ENTITIES, false);
+            }
             return p.parse(source);
         } catch (Exception ex) {
             LOGGER.warn(""Cannot parse XML document: [{}]"", ex.getMessage());
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
index 22623a6f06..1b74770dc1 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
@@ -19,10 +19,19 @@
  */
 package org.xwiki.xml;
 
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+
+import org.apache.commons.io.FileUtils;
 import org.apache.html.dom.HTMLDocumentImpl;
 import org.junit.jupiter.api.Test;
+import org.w3c.dom.Document;
 import org.w3c.dom.Element;
+import org.w3c.dom.bootstrap.DOMImplementationRegistry;
 import org.w3c.dom.html.HTMLElement;
+import org.w3c.dom.ls.DOMImplementationLS;
+import org.w3c.dom.ls.LSInput;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -279,4 +288,22 @@ void serializeNode()
         serialize = XMLUtils.serialize(node, false);
         assertEquals(""<HTML><HEAD/><BODY class=\""toto\""/></HTML>"", serialize);
     }
+
+    @Test
+    void disableExternalEntities()
+        throws ClassNotFoundException, InstantiationException, IllegalAccessException, ClassCastException, IOException
+    {
+        File tempFile = File.createTempFile(""file"", "".txt"");
+
+        FileUtils.write(tempFile, ""external"", StandardCharsets.UTF_8);
+
+        DOMImplementationLS ls =
+            (DOMImplementationLS) DOMImplementationRegistry.newInstance().getDOMImplementation(""LS 3.0"");
+        LSInput input = ls.createLSInput();
+        input.setStringData(""<?xml version='1.0' encoding='UTF-8'?>"" + ""<!DOCTYPE root[<!ENTITY xxe SYSTEM 'file://""
+            + tempFile.getAbsolutePath() + ""' >]><root>&xxe;</root>"");
+
+        Document result = XMLUtils.parse(input);
+        assertNotEquals(""external"", result.getDocumentElement().getTextContent());
+    }
 }"
CVE-2018-14371,"From 1b434748d9239f42eae8aa7d37d7a0930c061e24 Mon Sep 17 00:00:00 2001
From: Zhijun Ren <ren.zhijun@oracle.com>
Date: Fri, 11 May 2018 16:02:52 +0800
Subject: [PATCH] fixing CTS failure issue in master branch

---
 .../faces/application/applicationimpl/InstanceFactory.java    | 4 ++++
 .../com/sun/faces/application/resource/ResourceManager.java   | 2 +-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/impl/src/main/java/com/sun/faces/application/applicationimpl/InstanceFactory.java b/impl/src/main/java/com/sun/faces/application/applicationimpl/InstanceFactory.java
index a983b19526..bbcb5618b8 100644
--- a/impl/src/main/java/com/sun/faces/application/applicationimpl/InstanceFactory.java
+++ b/impl/src/main/java/com/sun/faces/application/applicationimpl/InstanceFactory.java
@@ -288,6 +288,10 @@ public UIComponent createComponent(FacesContext context, Resource componentResou
     }
     
     public UIComponent createComponent(FacesContext context, String componentType, String rendererType) {
+        
+        notNull(CONTEXT, context);
+        notNull(COMPONENT_TYPE, componentType);
+        
         return createComponentApplyAnnotations(context, componentType, rendererType, true);
     }
     
diff --git a/impl/src/main/java/com/sun/faces/application/resource/ResourceManager.java b/impl/src/main/java/com/sun/faces/application/resource/ResourceManager.java
index 24f8f7df9e..53e0d6455a 100644
--- a/impl/src/main/java/com/sun/faces/application/resource/ResourceManager.java
+++ b/impl/src/main/java/com/sun/faces/application/resource/ResourceManager.java
@@ -565,7 +565,7 @@ private String getLocalePrefix(FacesContext context) {
         
         localePrefix = context.getExternalContext().getRequestParameterMap().get(""loc"");
         
-        if(localePrefix != null){
+        if(localePrefix != null && !nameContainsForbiddenSequence(localePrefix)){
             return localePrefix;
         }"
CVE-2016-3079,"From 7b9ff9ad6caf91d789039ed106342c430223e55f Mon Sep 17 00:00:00 2001
From: Grant Gainey <ggainey@redhat.com>
Date: Tue, 29 Mar 2016 14:44:21 -0400
Subject: [PATCH] 1320444 - Bad bean-message ids and navbar-vars can lead to
 XSS issues

Fixed generally in LocalizationService and DialognavRenderer, removed
some attempts at fixing specific locations.
---
 .../localization/LocalizationService.java     | 24 +++++++++----------
 .../rhn/frontend/nav/DialognavRenderer.java   |  9 ++++---
 .../fragments/kickstart/advanced/details.jspf |  4 ++--
 .../pages/systems/sdc/history_event.jsp       |  2 +-
 4 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/java/code/src/com/redhat/rhn/common/localization/LocalizationService.java b/java/code/src/com/redhat/rhn/common/localization/LocalizationService.java
index ef9fda7b1e9..dd7af417b24 100644
--- a/java/code/src/com/redhat/rhn/common/localization/LocalizationService.java
+++ b/java/code/src/com/redhat/rhn/common/localization/LocalizationService.java
@@ -14,17 +14,6 @@
  */
 package com.redhat.rhn.common.localization;
 
-import com.redhat.rhn.common.conf.Config;
-import com.redhat.rhn.common.conf.ConfigDefaults;
-import com.redhat.rhn.common.db.datasource.DataResult;
-import com.redhat.rhn.common.db.datasource.ModeFactory;
-import com.redhat.rhn.common.db.datasource.SelectMode;
-import com.redhat.rhn.common.util.StringUtil;
-import com.redhat.rhn.frontend.context.Context;
-
-import org.apache.commons.lang.StringEscapeUtils;
-import org.apache.log4j.Logger;
-
 import java.text.Collator;
 import java.text.DateFormat;
 import java.text.NumberFormat;
@@ -47,6 +36,17 @@
 import java.util.TreeMap;
 import java.util.TreeSet;
 
+import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.log4j.Logger;
+
+import com.redhat.rhn.common.conf.Config;
+import com.redhat.rhn.common.conf.ConfigDefaults;
+import com.redhat.rhn.common.db.datasource.DataResult;
+import com.redhat.rhn.common.db.datasource.ModeFactory;
+import com.redhat.rhn.common.db.datasource.SelectMode;
+import com.redhat.rhn.common.util.StringUtil;
+import com.redhat.rhn.frontend.context.Context;
+
 /**
  * Localization service class to simplify the job for producing localized
  * (translated) strings within the product.
@@ -368,7 +368,7 @@ private String getMissingMessageString(String messageId) {
         if (exceptionMode) {
             throw new IllegalArgumentException(message);
         }
-        return ""**"" + messageId + ""**"";
+        return StringEscapeUtils.escapeHtml(""**"" + messageId + ""**"");
     }
 
     /**
diff --git a/java/code/src/com/redhat/rhn/frontend/nav/DialognavRenderer.java b/java/code/src/com/redhat/rhn/frontend/nav/DialognavRenderer.java
index 24a02f09754..5e0557aa539 100644
--- a/java/code/src/com/redhat/rhn/frontend/nav/DialognavRenderer.java
+++ b/java/code/src/com/redhat/rhn/frontend/nav/DialognavRenderer.java
@@ -15,11 +15,13 @@
 
 package com.redhat.rhn.frontend.nav;
 
-import com.redhat.rhn.frontend.html.HtmlTag;
-
 import java.util.Map;
 import java.util.StringTokenizer;
 
+import org.apache.commons.lang.StringEscapeUtils;
+
+import com.redhat.rhn.frontend.html.HtmlTag;
+
 /**
  * DialognavRenderer - renders a navigation bar
  *
@@ -135,7 +137,8 @@ private void renderNode(StringBuffer sb, NavNode node,
                 // if currentVar is null, values will be null too, so we can
                 // just check values.
                 if (values != null) {
-                    formVars.append(currentVar + ""="" + values[0]);
+                    formVars.append(currentVar + ""="" +
+                             StringEscapeUtils.escapeHtml(values[0]));
                 }
             }
             href += formVars.toString();
diff --git a/java/code/webapp/WEB-INF/pages/common/fragments/kickstart/advanced/details.jspf b/java/code/webapp/WEB-INF/pages/common/fragments/kickstart/advanced/details.jspf
index 822ebca2e2c..7677cfc117a 100644
--- a/java/code/webapp/WEB-INF/pages/common/fragments/kickstart/advanced/details.jspf
+++ b/java/code/webapp/WEB-INF/pages/common/fragments/kickstart/advanced/details.jspf
@@ -11,8 +11,8 @@
                    action=""${param.url}?csrf_token=${csrfToken}""
                    enctype=""multipart/form-data"">
             <rhn:csrf />
-            <h2><bean:message key=""${fn:escapeXml(param.title_key)}""/></h2>
-            <p><bean:message key=""${fn:escapeXml(param.summary_key)}""/></p>
+            <h2><bean:message key=""${param.title_key)}""/></h2>
+            <p><bean:message key=""${param.summary_key}""/></p>
             <div class=""form-group"">
                 <label class=""col-lg-3 control-label"">
                     <rhn:required-field key=""kickstart.jsp.create.wizard.kickstart.profile.label""/>:
diff --git a/java/code/webapp/WEB-INF/pages/systems/sdc/history_event.jsp b/java/code/webapp/WEB-INF/pages/systems/sdc/history_event.jsp
index 062fb1eac82..1607de9f09c 100644
--- a/java/code/webapp/WEB-INF/pages/systems/sdc/history_event.jsp
+++ b/java/code/webapp/WEB-INF/pages/systems/sdc/history_event.jsp
@@ -12,7 +12,7 @@
 <%@ include file=""/WEB-INF/pages/common/fragments/systems/system-header.jspf"" %>
 
 <rhn:toolbar base=""h2"" icon=""header-event-history"">
-  <bean:message key=""${fn:escapeXml(headerLabel)}"" />
+  <bean:message key=""${headerLabel}"" />
 </rhn:toolbar>
 
 <html:form method=""post"" action=""/systems/details/history/Event.do?sid=${system.id}&aid=${requestScope.aid}"">"
GHSA-pv7h-hx5h-mgfj,"From 8f3410f81cbd437f7c459f8868445d50ad301f15 Mon Sep 17 00:00:00 2001
From: ""shaojin.wensj"" <shaojin.wensj@alibaba-inc.com>
Date: Fri, 6 May 2022 15:18:39 +0800
Subject: [PATCH] bug fix for autotype

---
 .../alibaba/fastjson/parser/ParserConfig.java | 83 +++++--------------
 .../java/com/alibaba/json/bvt/PointTest2.java |  4 +-
 2 files changed, 23 insertions(+), 64 deletions(-)

diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java
index 0c5150d291..bd11a3dd15 100644
--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java
+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java
@@ -107,63 +107,10 @@ public class ParserConfig {
         }
 
         INTERNAL_WHITELIST_HASHCODES = new long[] {
-                0x82E8E13016B73F9EL,
-                0x863D2DD1E82B9ED9L,
-                0x8B2081CB3A50BD44L,
-                0x90003416F28ACD89L,
-                0x92F252C398C02946L,
-                0x9E404E583F254FD4L,
                 0x9F2E20FB6049A371L,
                 0xA8AAA929446FFCE4L,
-                0xAB9B8D073948CA9DL,
-                0xAFCB539973CEA3F7L,
-                0xB5114C70135C4538L,
-                0xC0FE32B8DC897DE9L,
-                0xC59AA84D9A94C640L,
-                0xC92D8F9129AF339BL,
-                0xCC720543DC5E7090L,
-                0xD0E71A6E155603C1L,
-                0xD11D2A941337A7BCL,
-                0xDB7BFFC197369352L,
-                0xDC9583F0087CC2C7L,
-                0xDDAAA11FECA77B5EL,
-                0xE08EE874A26F5EAFL,
-                0xE794F5F7DCD3AC85L,
-                0xEB7D4786C473368DL,
-                0xF4AA683928027CDAL,
-                0xF8C7EF9B13231FB6L,
                 0xD45D6F8C9017FAL,
-                0x6B949CE6C2FE009L,
-                0x76566C052E83815L,
-                0x9DF9341F0C76702L,
-                0xB81BA299273D4E6L,
-                0xD4788669A13AE74L,
-                0x111D12921C5466DAL,
-                0x178B0E2DC3AE9FE5L,
-                0x19DCAF4ADC37D6D4L,
-                0x1F10A70EE4065963L,
-                0x21082DFBF63FBCC1L,
-                0x24AE2D07FB5D7497L,
-                0x26C5D923AF21E2E1L,
-                0x34CC8E52316FA0CBL,
-                0x3F64BC3933A6A2DFL,
-                0x42646E60EC7E5189L,
-                0x44D57A1B1EF53451L,
-                0x4A39C6C7ACB6AA18L,
-                0x4BB3C59964A2FC50L,
-                0x4F0C3688E8A18F9FL,
-                0x5449EC9B0280B9EFL,
-                0x54DC66A59269BAE1L,
-                0x552D9FB02FFC9DEFL,
-                0x557F642131553498L,
-                0x604D6657082C1EE9L,
-                0x61D10AF54471E5DEL,
-                0x64DC636F343516DCL,
-                0x73A0BE903F2BCBF4L,
-                0x73FBA1E41C4C3553L,
-                0x7B606F16A261E1E6L,
-                0x7F36112F218143B6L,
-                0x7FE2B8E675DA0CEFL
+                0x64DC636F343516DCL
         };
     }
 
@@ -1383,6 +1330,11 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
             throw new JSONException(""safeMode not support autoType : "" + typeName);
         }
 
+        final int mask = Feature.SupportAutoType.mask;
+        boolean autoTypeSupport = this.autoTypeSupport
+                || (features & mask) != 0
+                || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;
+
         if (typeName.length() >= 192 || typeName.length() < 3) {
             throw new JSONException(""autoType is not support. "" + typeName);
         }
@@ -1500,6 +1452,10 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
                 hash *= fnv1a_64_magic_prime;
 
                 if (Arrays.binarySearch(denyHashCodes, hash) >= 0) {
+                    if (typeName.endsWith(""Exception"") || typeName.endsWith(""Error"")) {
+                        return null;
+                    }
+
                     throw new JSONException(""autoType is not support. "" + typeName);
                 }
 
@@ -1541,11 +1497,6 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
             IOUtils.close(is);
         }
 
-        final int mask = Feature.SupportAutoType.mask;
-        boolean autoTypeSupport = this.autoTypeSupport
-                || (features & mask) != 0
-                || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;
-
         if (autoTypeSupport || jsonType || expectClassFlag) {
             boolean cacheClass = autoTypeSupport || jsonType;
             clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);
@@ -1553,7 +1504,9 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
 
         if (clazz != null) {
             if (jsonType) {
-                TypeUtils.addMapping(typeName, clazz);
+                if (autoTypeSupport) {
+                    TypeUtils.addMapping(typeName, clazz);
+                }
                 return clazz;
             }
 
@@ -1566,7 +1519,9 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
 
             if (expectClass != null) {
                 if (expectClass.isAssignableFrom(clazz)) {
-                    TypeUtils.addMapping(typeName, clazz);
+                    if (autoTypeSupport) {
+                        TypeUtils.addMapping(typeName, clazz);
+                    }
                     return clazz;
                 } else {
                     throw new JSONException(""type not match. "" + typeName + "" -> "" + expectClass.getName());
@@ -1580,7 +1535,7 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
         }
 
         if (!autoTypeSupport) {
-            if (typeName.endsWith(""Exception"")) {
+            if (typeName.endsWith(""Exception"") || typeName.endsWith(""Error"")) {
                 return null;
             }
 
@@ -1588,7 +1543,9 @@ public Class<?> checkAutoType(String typeName, Class<?> expectClass, int feature
         }
 
         if (clazz != null) {
-            TypeUtils.addMapping(typeName, clazz);
+            if (autoTypeSupport) {
+                TypeUtils.addMapping(typeName, clazz);
+            }
         }
 
         return clazz;
diff --git a/src/test/java/com/alibaba/json/bvt/PointTest2.java b/src/test/java/com/alibaba/json/bvt/PointTest2.java
index b6568ba669..cfc3e8ffcd 100644
--- a/src/test/java/com/alibaba/json/bvt/PointTest2.java
+++ b/src/test/java/com/alibaba/json/bvt/PointTest2.java
@@ -2,6 +2,8 @@
 
 import java.awt.Point;
 
+import com.alibaba.fastjson.parser.Feature;
+import com.alibaba.fastjson.parser.ParserConfig;
 import org.junit.Assert;
 import junit.framework.TestCase;
 
@@ -20,7 +22,7 @@ public void test_point() throws Exception {
         String text = JSON.toJSONString(point, SerializerFeature.WriteClassName);
 
         System.out.println(text);
-        Object obj = JSON.parse(text);
+        Object obj = JSON.parse(text, Feature.SupportAutoType);
         Point point2 = (Point) obj;
 
         Assert.assertEquals(point, point2);"
GHSA-9959-6p3m-wxpc,"From 2fa9400a59d0563a66908aba55c41e7285a04994 Mon Sep 17 00:00:00 2001
From: Trustin Lee <t@motd.kr>
Date: Tue, 10 Jun 2014 17:55:19 +0900
Subject: [PATCH] Fix a bug where SslHandler does not handle SSLv2Hello
 correctly

Motivation:

When a SSLv2Hello message is received, SSLEngine expects the application buffer size to be more than 30KB which is larger than what SslBufferPool can provide.  SSLEngine will always return with BUFFER_OVERFLOW status, blocking the SSL session from continuing the handshake.

Modifications:

When SSLEngine.getSession().getApplicationBufferSize() returns a value larger than what SslBufferPool provides, allocate a temporary heap buffer.

Result:

SSLv2Hello is handled correctly.
---
 .../jboss/netty/handler/ssl/SslHandler.java   | 20 ++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java
index 83dfeb999b63..c3bb18d4cb6f 100644
--- a/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java
+++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java
@@ -1268,8 +1268,18 @@ private ChannelBuffer unwrap(
                     // always contain at least one record in decode().  Therefore, if SSLEngine.unwrap() returns
                     // BUFFER_OVERFLOW, it is always resolved by retrying after emptying the application buffer.
                     for (;;) {
+                        final int outAppBufSize = engine.getSession().getApplicationBufferSize();
+                        final ByteBuffer outAppBuf;
+                        if (nioOutAppBuf.capacity() < outAppBufSize) {
+                            // SSLEngine wants a buffer larger than what the pool can provide.
+                            // Allocate a temporary heap buffer.
+                            outAppBuf = ByteBuffer.allocate(outAppBufSize);
+                        } else {
+                            outAppBuf = nioOutAppBuf;
+                        }
+
                         try {
-                            result = engine.unwrap(nioInNetBuf, nioOutAppBuf);
+                            result = engine.unwrap(nioInNetBuf, outAppBuf);
                             switch (result.getStatus()) {
                                 case CLOSED:
                                     // notify about the CLOSED state of the SSLEngine. See #137
@@ -1283,21 +1293,21 @@ private ChannelBuffer unwrap(
 
                             break;
                         } finally {
-                            nioOutAppBuf.flip();
+                            outAppBuf.flip();
 
                             // Sync the offset of the inbound buffer.
                             nettyInNetBuf.readerIndex(
                                     nettyInNetBufStartOffset + nioInNetBuf.position() - nioInNetBufStartOffset);
 
                             // Copy the unwrapped data into a smaller buffer.
-                            if (nioOutAppBuf.hasRemaining()) {
+                            if (outAppBuf.hasRemaining()) {
                                 if (nettyOutAppBuf == null) {
                                     ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();
                                     nettyOutAppBuf = factory.getBuffer(initialNettyOutAppBufCapacity);
                                 }
-                                nettyOutAppBuf.writeBytes(nioOutAppBuf);
+                                nettyOutAppBuf.writeBytes(outAppBuf);
                             }
-                            nioOutAppBuf.clear();
+                            outAppBuf.clear();
                         }
                     }"
CVE-2015-7326,"From b5851c12717b8efeddbeec01ff0217f7bd546590 Mon Sep 17 00:00:00 2001
From: brad <brad@brad-little-laptop>
Date: Fri, 28 Aug 2015 09:42:34 +1200
Subject: [PATCH] log returning null ACL

---
 .../main/java/io/milton/http/AclUtils.java    | 27 ++++++++++---------
 1 file changed, 15 insertions(+), 12 deletions(-)

diff --git a/milton-api/src/main/java/io/milton/http/AclUtils.java b/milton-api/src/main/java/io/milton/http/AclUtils.java
index bbd42330..143ed3ad 100644
--- a/milton-api/src/main/java/io/milton/http/AclUtils.java
+++ b/milton-api/src/main/java/io/milton/http/AclUtils.java
@@ -29,19 +29,22 @@
  * @author brad
  */
 public class AclUtils {
-    
+
     /**
-     * Recurisve function which checks the given collection of priviledges, 
+     * Recurisve function which checks the given collection of priviledges,
      * and checks inside the contains property of those priviledges
-     * 
+     *
      * Returns true if the required priviledge is directly present in the collection
      * or is implied
-     * 
+     *
      * @param required
      * @param privs
-     * @return 
+     * @return
      */
     public static boolean containsPriviledge(AccessControlledResource.Priviledge required, Iterable<AccessControlledResource.Priviledge> privs) {
+        if( privs == null ) {
+            return false;
+        }
         for (AccessControlledResource.Priviledge p : privs) {
             if (p.equals(required)) {
                 return true;
@@ -51,18 +54,18 @@ public static boolean containsPriviledge(AccessControlledResource.Priviledge req
             }
         }
         return false;
-    }      
-    
+    }
+
     public static Set<AccessControlledResource.Priviledge> asSet(AccessControlledResource.Priviledge ... privs) {
         Set<AccessControlledResource.Priviledge> set = new HashSet<AccessControlledResource.Priviledge>(privs.length);
         set.addAll(Arrays.asList(privs));
         return set;
     }
-    
+
     /**
-     * Return a set containing all privs in the given collection, and also all priviledges 
+     * Return a set containing all privs in the given collection, and also all priviledges
      * implies by those, and so on recursively
-     * 
+     *
      * @param privs
      * @return - a set containiing all priviledges, direct or implied, by the given collection
      */
@@ -71,7 +74,7 @@ public static Set<AccessControlledResource.Priviledge> expand(Iterable<AccessCon
         _expand(privs, set);
         return set;
     }
-    
+
     private static void _expand(Iterable<AccessControlledResource.Priviledge> privs, Set<AccessControlledResource.Priviledge> output) {
         if( privs == null ) {
             return ;
@@ -80,6 +83,6 @@ private static void _expand(Iterable<AccessControlledResource.Priviledge> privs,
             output.add(p);
             _expand(p.contains, output);
         }
-        
+
     }
 }"
GHSA-ggmx-pq89-7mcr,"From 73afe3cb10a723cb06e29c2e5499206aadae3a0d Mon Sep 17 00:00:00 2001
From: Oleg Nenashev <o.v.nenashev@gmail.com>
Date: Wed, 10 Jul 2019 15:23:05 +0200
Subject: [PATCH] [SECURITY-1303][SECURITY-1279]

---
 integrations/pom.xml                          |  14 ++
 .../jenkins/plugins/casc/CredentialsTest.java |  27 +++
 .../io/jenkins/plugins/casc/MailExtTest.java  |  46 +++++
 .../plugins/casc/SSHCredentialsTest.java      |  66 +++++++
 .../io/jenkins/plugins/casc/MailExtTest.yml   |   7 +
 .../plugins/casc/SSHCredentialsTest.yml       |  21 ++
 .../io/jenkins/plugins/casc/Attribute.java    | 146 +++++++++++---
 .../plugins/casc/util/ExtraFieldUtils.java    |  99 ++++++++++
 .../jenkins/plugins/casc/AttributeTest.java   | 185 ++++++++++++++++++
 .../casc/core/ProxyConfiguratorTest.java      |  33 +++-
 .../misc/JenkinsConfiguredWithCodeRule.java   |  21 ++
 .../io/jenkins/plugins/casc/misc/Util.java    |  25 +++
 .../plugins/casc/yaml/YamlExportTest.java     |  40 ++++
 13 files changed, 702 insertions(+), 28 deletions(-)
 create mode 100644 integrations/src/test/java/io/jenkins/plugins/casc/MailExtTest.java
 create mode 100644 integrations/src/test/java/io/jenkins/plugins/casc/SSHCredentialsTest.java
 create mode 100644 integrations/src/test/resources/io/jenkins/plugins/casc/MailExtTest.yml
 create mode 100644 integrations/src/test/resources/io/jenkins/plugins/casc/SSHCredentialsTest.yml
 create mode 100644 plugin/src/main/java/io/jenkins/plugins/casc/util/ExtraFieldUtils.java
 create mode 100644 plugin/src/test/java/io/jenkins/plugins/casc/AttributeTest.java
 create mode 100644 plugin/src/test/java/io/jenkins/plugins/casc/yaml/YamlExportTest.java

diff --git a/integrations/pom.xml b/integrations/pom.xml
index 74e6e38bf9..ca1b1b23ba 100644
--- a/integrations/pom.xml
+++ b/integrations/pom.xml
@@ -53,6 +53,13 @@
       <version>1.20</version>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.jenkins-ci.plugins</groupId>
+      <artifactId>email-ext</artifactId>
+      <version>2.66</version>
+      <scope>test</scope>
+    </dependency>
+    
 
     <dependency>
       <groupId>org.jenkins-ci.plugins</groupId>
@@ -101,6 +108,13 @@
       <scope>test</scope>
     </dependency>
 
+    <dependency>
+      <groupId>org.jenkins-ci.plugins</groupId>
+      <artifactId>ssh-credentials</artifactId>
+      <version>1.17</version>
+      <scope>test</scope>
+    </dependency>
+
     <dependency>
       <groupId>org.jenkins-ci.plugins</groupId>
       <artifactId>github-branch-source</artifactId>
diff --git a/integrations/src/test/java/io/jenkins/plugins/casc/CredentialsTest.java b/integrations/src/test/java/io/jenkins/plugins/casc/CredentialsTest.java
index 5c29c579f6..7f12c46cdd 100644
--- a/integrations/src/test/java/io/jenkins/plugins/casc/CredentialsTest.java
+++ b/integrations/src/test/java/io/jenkins/plugins/casc/CredentialsTest.java
@@ -2,19 +2,25 @@
 
 import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey;
 import com.cloudbees.plugins.credentials.CredentialsProvider;
+import com.cloudbees.plugins.credentials.CredentialsScope;
 import com.cloudbees.plugins.credentials.casc.CredentialsRootConfigurator;
 import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
+import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl;
 import hudson.ExtensionList;
 import hudson.util.Secret;
+import io.jenkins.plugins.casc.impl.configurators.DataBoundConfigurator;
 import io.jenkins.plugins.casc.misc.ConfiguredWithCode;
 import io.jenkins.plugins.casc.misc.JenkinsConfiguredWithCodeRule;
 import io.jenkins.plugins.casc.model.CNode;
 import io.jenkins.plugins.casc.model.Mapping;
 import java.util.Collections;
 import java.util.List;
+import java.util.Set;
+import javax.annotation.Nonnull;
 import jenkins.model.Jenkins;
 import org.junit.Rule;
 import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
 
 import static java.util.Objects.requireNonNull;
 import static org.hamcrest.Matchers.is;
@@ -22,6 +28,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 public class CredentialsTest {
 
@@ -99,4 +106,24 @@ public void testExportSSHCredentials() throws Exception {
         assertThat(requireNonNull(Secret.decrypt(sshKeyExported)).getPlainText(), is(""sp0ds9d+skkfjf""));
     }
 
+    @Test
+    @Issue(""SECURITY-1404"")
+    public void checkUsernamePasswordIsSecret() {
+        Attribute a = getFromDatabound(UsernamePasswordCredentialsImpl.class, ""password"");
+        assertTrue(""Attribute 'password' should be secret"", a.isSecret(
+                new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, ""1"", ""2"", ""3"", ""4"")));
+    }
+
+    @Nonnull
+    private <T> Attribute<T,?> getFromDatabound(Class<T> clazz, @Nonnull String attributeName) {
+        DataBoundConfigurator<T> cfg = new DataBoundConfigurator<T>(clazz);
+        Set<Attribute<T,?>> attributes = cfg.describe();
+        for (Attribute<T,?> a : attributes) {
+            if(attributeName.equals(a.getName())) {
+                return a;
+            }
+        }
+        throw new AssertionError(""Cannot find databound attribute "" + attributeName + "" in "" + clazz);
+    }
+
 }
diff --git a/integrations/src/test/java/io/jenkins/plugins/casc/MailExtTest.java b/integrations/src/test/java/io/jenkins/plugins/casc/MailExtTest.java
new file mode 100644
index 0000000000..aeac07face
--- /dev/null
+++ b/integrations/src/test/java/io/jenkins/plugins/casc/MailExtTest.java
@@ -0,0 +1,46 @@
+package io.jenkins.plugins.casc;
+
+import hudson.plugins.emailext.ExtendedEmailPublisher;
+import io.jenkins.plugins.casc.misc.ConfiguredWithCode;
+import io.jenkins.plugins.casc.misc.JenkinsConfiguredWithCodeRule;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.LoggerRule;
+
+import static io.jenkins.plugins.casc.misc.Util.assertLogContains;
+import static io.jenkins.plugins.casc.misc.Util.assertNotInLog;
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.not;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
+
+public class MailExtTest {
+
+    public JenkinsConfiguredWithCodeRule j = new JenkinsConfiguredWithCodeRule();
+    public LoggerRule logging = new LoggerRule();
+
+    @Rule
+    public RuleChain chain= RuleChain
+            .outerRule(logging.record(Logger.getLogger(Attribute.class.getName()), Level.INFO).capture(2048))
+            .around(j);
+
+    private static final String SMTP_PASSWORD = ""myPassword"";
+
+    @Test
+    @ConfiguredWithCode(""MailExtTest.yml"")
+    @Issue(""SECURITY-1404"")
+    public void shouldNotExportOrLogCredentials() throws Exception {
+        assertEquals(SMTP_PASSWORD, ExtendedEmailPublisher.descriptor().getSmtpPassword().getPlainText());
+        assertLogContains(logging, ""smtpPassword ="");
+        assertNotInLog(logging, SMTP_PASSWORD);
+
+        // Verify that the password does not get exported
+        String exportedConfig = j.exportToString(false);
+        assertThat(""No entry was exported for SMTP credentials"", exportedConfig, containsString(""smtpPassword""));
+        assertThat(""There should be no SMTP password in the exported YAML"", exportedConfig, not(containsString(SMTP_PASSWORD)));
+    }
+}
diff --git a/integrations/src/test/java/io/jenkins/plugins/casc/SSHCredentialsTest.java b/integrations/src/test/java/io/jenkins/plugins/casc/SSHCredentialsTest.java
new file mode 100644
index 0000000000..1183c39e4f
--- /dev/null
+++ b/integrations/src/test/java/io/jenkins/plugins/casc/SSHCredentialsTest.java
@@ -0,0 +1,66 @@
+package io.jenkins.plugins.casc;
+
+import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey;
+import com.cloudbees.plugins.credentials.Credentials;
+import com.cloudbees.plugins.credentials.CredentialsProvider;
+import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
+import io.jenkins.plugins.casc.misc.ConfiguredWithCode;
+import io.jenkins.plugins.casc.misc.JenkinsConfiguredWithCodeRule;
+import java.util.Collections;
+import java.util.List;
+import java.util.logging.Level;
+import jenkins.model.Jenkins;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.LoggerRule;
+
+import static io.jenkins.plugins.casc.misc.Util.assertNotInLog;
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.not;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
+
+/**
+ * Integration tests for the SSH Credentials Plugin.
+ */
+public class SSHCredentialsTest {
+
+    public JenkinsConfiguredWithCodeRule j = new JenkinsConfiguredWithCodeRule();
+    public LoggerRule logging = new LoggerRule();
+
+    @Rule
+    public RuleChain chain= RuleChain
+            .outerRule(logging.record(""io.jenkins.plugins.casc.Attribute"", Level.INFO).capture(2048))
+            .around(j);
+
+    private static final String CREDENTIALS_PASSWORD = ""password-of-userid"";
+    private static final String PRIVATE_KEY = ""sp0ds9d+skkfjf"";
+
+    @Test
+    @ConfiguredWithCode(""SSHCredentialsTest.yml"")
+    @Issue(""SECURITY-1279"")
+    public void shouldNotExportOrLogCredentials() throws Exception {
+        StandardUsernamePasswordCredentials creds = getCredentials(StandardUsernamePasswordCredentials.class);
+        assertEquals(CREDENTIALS_PASSWORD, creds.getPassword().getPlainText());
+        assertNotInLog(logging, CREDENTIALS_PASSWORD);
+
+        BasicSSHUserPrivateKey certKey = getCredentials(BasicSSHUserPrivateKey.class);
+        assertEquals(PRIVATE_KEY, certKey.getPrivateKey());
+        assertNotInLog(logging, PRIVATE_KEY);
+
+        // Verify that the password does not get exported
+        String exportedConfig = j.exportToString(false);
+        assertThat(""There should be no password in the exported YAML"", exportedConfig, not(containsString(CREDENTIALS_PASSWORD)));
+        assertThat(""There should be no private key in the exported YAML"", exportedConfig, not(containsString(PRIVATE_KEY)));
+    }
+
+    private <T extends Credentials> T getCredentials(Class<T> clazz) {
+        List<T> creds = CredentialsProvider.lookupCredentials(
+                clazz, Jenkins.getInstanceOrNull(),
+                null, Collections.emptyList());
+        assertEquals(1, creds.size());
+        return (T)creds.get(0);
+    }
+}
diff --git a/integrations/src/test/resources/io/jenkins/plugins/casc/MailExtTest.yml b/integrations/src/test/resources/io/jenkins/plugins/casc/MailExtTest.yml
new file mode 100644
index 0000000000..330aa6eb28
--- /dev/null
+++ b/integrations/src/test/resources/io/jenkins/plugins/casc/MailExtTest.yml
@@ -0,0 +1,7 @@
+unclassified:
+  extendedEmailPublisher:
+    smtpUsername: email@acmecorp.com
+    smtpPassword: myPassword
+    defaultContentType: text/plain
+    defaultSubject: ""Build $BUILD_NUMBER - $BUILD_STATUS""
+    defaultBody: ""Check console output at $BUILD_URL""
diff --git a/integrations/src/test/resources/io/jenkins/plugins/casc/SSHCredentialsTest.yml b/integrations/src/test/resources/io/jenkins/plugins/casc/SSHCredentialsTest.yml
new file mode 100644
index 0000000000..7e8f7e612d
--- /dev/null
+++ b/integrations/src/test/resources/io/jenkins/plugins/casc/SSHCredentialsTest.yml
@@ -0,0 +1,21 @@
+jenkins:
+  systemMessage: Jenkins with SSH Credentials for JCasC test
+
+credentials:
+  system:
+    domainCredentials:
+      - credentials:
+          - usernamePassword:
+              scope: SYSTEM
+              id: ""userid""
+              username: ""username-of-userid""
+              password: ""password-of-userid""
+          - basicSSHUserPrivateKey:
+              scope: SYSTEM
+              id: ""userid2""
+              username: ""username-of-userid2""
+              passphrase: ""passphrase-of-userid2""
+              description: ""the description of userid2""
+              privateKeySource:
+                directEntry:
+                  privateKey: ""sp0ds9d+skkfjf""
diff --git a/plugin/src/main/java/io/jenkins/plugins/casc/Attribute.java b/plugin/src/main/java/io/jenkins/plugins/casc/Attribute.java
index eefaef1989..bc574df68e 100644
--- a/plugin/src/main/java/io/jenkins/plugins/casc/Attribute.java
+++ b/plugin/src/main/java/io/jenkins/plugins/casc/Attribute.java
@@ -1,9 +1,11 @@
 package io.jenkins.plugins.casc;
 
+import com.google.common.annotations.VisibleForTesting;
 import hudson.util.Secret;
 import io.jenkins.plugins.casc.model.CNode;
 import io.jenkins.plugins.casc.model.Scalar;
 import io.jenkins.plugins.casc.model.Sequence;
+import io.jenkins.plugins.casc.util.ExtraFieldUtils;
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -20,9 +22,10 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
+import javax.annotation.CheckForNull;
+import javax.annotation.Nonnull;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.reflect.FieldUtils;
 import org.kohsuke.accmod.AccessRestriction;
 import org.kohsuke.stapler.export.Exported;
 
@@ -40,12 +43,17 @@ public class Attribute<Owner, Type> {
 
     private static final Logger LOGGER = Logger.getLogger(Attribute.class.getName());
 
+    //TODO: Concurrent cache?
+    //private static final HashMap<Class, Boolean> SECRET_ATTRIBUTE_CACHE =
+    //        new HashMap<>();
+
     protected final String name;
     protected final Class type;
     protected boolean multiple;
     protected String preferredName;
     private Setter<Owner, Type> setter;
     private Getter<Owner, Type> getter;
+    private boolean secret;
 
     private boolean deprecated;
 
@@ -60,6 +68,7 @@ public Attribute(String name, Class type) {
         this.setter = this::_setValue;
         this.aliases = new ArrayList<>();
         this.aliases.add(name);
+        this.secret = type == Secret.class || calculateIfSecret(null, this.name);
     }
 
     @SuppressWarnings(""unchecked"")
@@ -134,6 +143,17 @@ public Attribute<Owner, Type> getter(Getter<Owner, Type> getter) {
         return this;
     }
 
+    /**
+     * Sets whether the attribute is secret.
+     * If so, various outputs will be suppressed (exports, logging).
+     * @param secret {@code true} to make an attribute secret
+     * @since TODO
+     */
+    public Attribute<Owner, Type> secret(boolean secret) {
+        this.secret = secret;
+        return this;
+    }
+
     public Attribute deprecated(boolean deprecated) {
         this.deprecated = deprecated;
         return this;
@@ -170,9 +190,21 @@ public List<String> possibleValues() {
         return Collections.EMPTY_LIST;
     }
 
+    /**
+     * Checks whether an attribute is considered a secret one.
+     * @return {@code true} if the attribute is secret
+     * @param target Target object.
+     *               If {@code null}, only the attribute metadata is checked
+     * @since TODO
+     */
+    public boolean isSecret(@CheckForNull Owner target) {
+        // This.secret should be always true for the first condition, but getType() is overridable
+        // Here we define an additional check just in case getType() is overridden in another implementation
+        return secret || calculateIfSecret(target != null ? target.getClass() : null, this.name);
+    }
 
     public void setValue(Owner target, Type value) throws Exception {
-        LOGGER.info(""Setting "" + target + '.' + name + "" = "" + (getType() == Secret.class ? ""****"" : value));
+        LOGGER.info(""Setting "" + target + '.' + name + "" = "" + (isSecret(target) ? ""****"" : value));
         setter.setValue(target, value);
     }
 
@@ -226,7 +258,6 @@ public boolean equals(Owner o1, Owner o2) throws Exception {
     @FunctionalInterface
     public interface Setter<O,T> {
         void setValue(O target, T value) throws Exception;
-
         Setter NOP =  (o,v) -> {};
     }
 
@@ -238,32 +269,103 @@ public interface Getter<O,T> {
         T getValue(O target) throws Exception;
     }
 
+    @CheckForNull
+    private static Method locateGetter(Class<?> clazz, @Nonnull String fieldName) {
+        final String upname = StringUtils.capitalize(fieldName);
+        final List<String> accessors = Arrays.asList(""get"" + upname, ""is"" + upname);
+
+        for (Method method : clazz.getMethods()) {
+            if (method.getParameterCount() != 0) continue;
+            if (accessors.contains(method.getName())) {
+                return method;
+            }
+
+            final Exported exported = method.getAnnotation(Exported.class);
+            if (exported != null && exported.name().equalsIgnoreCase(fieldName)) {
+                return method;
+            }
+        }
+        return null;
+    }
+
+    @CheckForNull
+    private static Field locatePublicField(Class<?> clazz, @Nonnull String fieldName) {
+        return ExtraFieldUtils.getField(clazz, fieldName, false);
+    }
+
+    @CheckForNull
+    private static Field locatePrivateFieldInHierarchy(Class<?> clazz, @Nonnull String fieldName) {
+        return ExtraFieldUtils.getFieldNoForce(clazz, fieldName);
+    }
+
+    //TODO: consider Boolean and third condition
+    /**
+     * This is a method which tries to guess whether an attribute is {@link Secret}.
+     * @param targetClass Class of the target object. {@code null} if unknown
+     * @param fieldName Field name
+     * @return {@code true} if the attribute is secret
+     *         {@code false} if not or if there is no conclusive answer.
+     */
+    @VisibleForTesting
+    /*package*/ static boolean calculateIfSecret(@CheckForNull Class<?> targetClass, @Nonnull String fieldName) {
+        if (targetClass == Secret.class) { // Class is final, so the check is safe
+            LOGGER.log(Level.FINER, ""Attribute {0}#{1} is secret, because it has a Secret type"",
+                    new Object[] {targetClass.getName(), fieldName});
+            return true;
+        }
+
+        if (targetClass == null) {
+            LOGGER.log(Level.FINER, ""Attribute {0} is assumed to be non-secret, because there is no class instance in the call. "" +
+                            ""This call is used only for fast-fetch caching, and the result may be adjusted later"",
+                    new Object[] {fieldName});
+            return false; // All methods below require a known target class
+        }
+
+        //TODO: Cache decisions?
+
+        Method m = locateGetter(targetClass, fieldName);
+        if (m != null && m.getReturnType() == Secret.class) {
+            LOGGER.log(Level.FINER, ""Attribute {0}#{1} is secret, because there is a getter {2} which returns a Secret type"",
+                    new Object[] {targetClass.getName(), fieldName, m});
+            return true;
+        }
+
+        Field f = locatePublicField(targetClass, fieldName);
+        if (f != null && f.getType() == Secret.class) {
+            LOGGER.log(Level.FINER, ""Attribute {0}#{1} is secret, because there is a public field {2} which has a Secret type"",
+                    new Object[] {targetClass.getName(), fieldName, f});
+            return true;
+        }
+
+        f = locatePrivateFieldInHierarchy(targetClass, fieldName);
+        if (f != null && f.getType() == Secret.class) {
+            LOGGER.log(Level.FINER, ""Attribute {0}#{1} is secret, because there is a private field {2} which has a Secret type"",
+                    new Object[] {targetClass.getName(), fieldName, f});
+            return true;
+        }
+
+        // TODO(oleg_nenashev): Consider setters? Gonna be more interesting since there might be many of them
+        LOGGER.log(Level.FINER, ""Attribute {0}#{1} is not a secret, because all checks have passed"",
+                new Object[] {targetClass.getName(), fieldName});
+        return false;
+    }
+
     private Type _getValue(Owner target) throws ConfiguratorException {
-        try {
-            final Class<?> clazz = target.getClass();
-            final String upname = StringUtils.capitalize(name);
-            final List<String> accessors = Arrays.asList(""get"" + upname, ""is"" + upname);
-
-            for (Method method : clazz.getMethods()) {
-                if (method.getParameterCount() != 0) continue;
-                if (accessors.contains(method.getName())) {
-                    return (Type) method.invoke(target);
-                }
+        final Class<?> clazz = target.getClass();
 
-                final Exported exported = method.getAnnotation(Exported.class);
-                if (exported != null && exported.name().equalsIgnoreCase(name)) {
-                    return (Type) method.invoke(target);
-                }
+        try {
+            final Method method = locateGetter(clazz, this.name);
+            if (method != null) {
+                return (Type) method.invoke(target);
             }
 
             // If this is a public final field, developers don't define getters as jelly can use them as-is
-            final Field field = FieldUtils.getField(clazz, name, true);
-            if (field == null) {
-                throw new ConfiguratorException(""Can't read attribute '"" + name + ""' from ""+ target);
+            final Field field = ExtraFieldUtils.getField(clazz, this.name, true);
+            if (field != null) {
+                return (Type) field.get(target);
             }
 
-            return (Type) field.get(target);
-
+            throw new ConfiguratorException(""Can't read attribute '"" + name + ""' from ""+ target);
         } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {
             throw new ConfiguratorException(""Can't read attribute '"" + name + ""' from ""+ target, e);
         }
diff --git a/plugin/src/main/java/io/jenkins/plugins/casc/util/ExtraFieldUtils.java b/plugin/src/main/java/io/jenkins/plugins/casc/util/ExtraFieldUtils.java
new file mode 100644
index 0000000000..139bddc860
--- /dev/null
+++ b/plugin/src/main/java/io/jenkins/plugins/casc/util/ExtraFieldUtils.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.jenkins.plugins.casc.util;
+
+import java.lang.reflect.Field;
+import java.util.Iterator;
+import javax.annotation.CheckForNull;
+import org.apache.commons.lang.ClassUtils;
+import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.NoExternalUse;
+
+/**
+ * Extends {@link org.apache.commons.lang.reflect.FieldUtils} by adding
+ * some utility methods.
+ */
+@Restricted(NoExternalUse.class)
+public class ExtraFieldUtils extends org.apache.commons.lang.reflect.FieldUtils {
+
+    /**
+     * Gets an accessible <code>Field</code> by name without breaking scope.
+     * Superclasses/interfaces will be considered.
+     * This is an equivalent of {@link #getField(Class, String, boolean)} from the commons lang library,
+     * but without {@link Field#setAccessible(boolean)} invocation.
+     *
+     * @param cls  the class to reflect, must not be null
+     * @param fieldName  the field name to obtain
+     * @return the Field object, it might be {@code null}
+     * @throws IllegalArgumentException if the class or field name is null
+     */
+    @CheckForNull
+    public static Field getFieldNoForce(final Class cls, String fieldName) {
+        if (cls == null) {
+            throw new IllegalArgumentException(""The class must not be null"");
+        }
+        if (fieldName == null) {
+            throw new IllegalArgumentException(""The field name must not be null"");
+        }
+        // Sun Java 1.3 has a bugged implementation of getField hence we write the
+        // code ourselves
+
+        // getField() will return the Field object with the declaring class
+        // set correctly to the class that declares the field. Thus requesting the
+        // field on a subclass will return the field from the superclass.
+        //
+        // priority order for lookup:
+        // searchclass private/protected/package/public
+        // superclass protected/package/public
+        //  private/different package blocks access to further superclasses
+        // implementedinterface public
+
+        // check up the superclass hierarchy
+        for (Class acls = cls; acls != null; acls = acls.getSuperclass()) {
+            try {
+                Field field = acls.getDeclaredField(fieldName);
+                // getDeclaredField checks for non-public scopes, and we return it to upstream
+                return field;
+            } catch (NoSuchFieldException ex) {
+                // ignore
+            }
+        }
+        // check the public interface case. This must be manually searched for
+        // incase there is a public supersuperclass field hidden by a private/package
+        // superclass field.
+        Field match = null;
+        for (Iterator intf = ClassUtils.getAllInterfaces(cls).iterator(); intf
+                .hasNext();) {
+            try {
+                Field test = ((Class) intf.next()).getField(fieldName);
+                if (match != null) {
+                    throw new IllegalArgumentException(
+                            ""Reference to field ""
+                                    + fieldName
+                                    + "" is ambiguous relative to ""
+                                    + cls
+                                    + ""; a matching field exists on two or more implemented interfaces."");
+                }
+                match = test;
+            } catch (NoSuchFieldException ex) {
+                // ignore
+            }
+        }
+        return match;
+    }
+
+}
diff --git a/plugin/src/test/java/io/jenkins/plugins/casc/AttributeTest.java b/plugin/src/test/java/io/jenkins/plugins/casc/AttributeTest.java
new file mode 100644
index 0000000000..6126457f3d
--- /dev/null
+++ b/plugin/src/test/java/io/jenkins/plugins/casc/AttributeTest.java
@@ -0,0 +1,185 @@
+package io.jenkins.plugins.casc;
+
+import hudson.util.Secret;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.For;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.LoggerRule;
+import org.kohsuke.stapler.DataBoundConstructor;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@For(Attribute.class)
+public class AttributeTest {
+
+    @Rule
+    public LoggerRule logging = new LoggerRule();
+
+    @Before
+    public void tearUp() {
+        logging.record(Logger.getLogger(Attribute.class.getName()), Level.FINEST).capture(2048);
+    }
+
+    @After
+    public void tearDown() {
+        for (String entry : logging.getMessages()) {
+            System.out.println(entry);
+        }
+    }
+
+    @Test
+    @Issue(""SECURITY-1279"")
+    public void checkCommonSecretPatterns() {
+        assertFieldIsSecret(WellDefinedField.class, ""secretField"");
+        assertFieldIsSecret(SecretFromGetter.class, ""secretField"");
+        assertFieldIsSecret(SecretFromPublicField.class, ""secretField"");
+        assertFieldIsSecret(SecretFromPrivateField.class, ""secretField"");
+
+        assertFieldIsSecret(SecretRenamedFieldFithSecretConstructor.class, ""mySecretValueField"");
+    }
+
+    @Test
+    @Issue(""SECURITY-1279"")
+    public void checkStaticResolution() {
+        // Field is not secret, but the attribute is secret
+        assertFieldIsNotSecret(SecretRenamedFieldFithSecretConstructor.class, ""mySecretValue"");
+    }
+
+    @Test
+    @Issue(""SECURITY-1279"")
+    public void checkCommonSecretPatternsForOverrides() {
+        assertFieldIsSecret(WellDefinedField2.class, ""secret"");
+        assertFieldIsSecret(SecretFromGetter2.class, ""secretField"");
+
+        // Fields
+        assertFieldIsSecret(SecretFromPublicField2.class, ""secretField"");
+        assertFieldIsSecret(SecretFromPrivateField2.class, ""secretField"");
+        assertFieldIsSecret(SecretFromPrivateField3.class, ""secretField"");
+    }
+
+    @Test
+    @Issue(""SECURITY-1279"")
+    public void checkNonSecretPatterns() {
+        assertFieldIsNotSecret(NonSecretField.class, ""passwordPath"");
+    }
+
+    public static void assertFieldIsSecret(Class<?> clazz, String fieldName) {
+        String displayName = clazz != null ? (clazz.getName() + ""#"" + fieldName) : fieldName;
+        assertTrue(""Field is not secret: "" + displayName,
+                Attribute.calculateIfSecret(clazz, fieldName));
+    }
+
+    public static void assertFieldIsNotSecret(Class<?> clazz, String fieldName) {
+        String displayName = clazz != null ? (clazz.getName() + ""#"" + fieldName) : fieldName;
+        assertFalse(""Field is a secret while it should not be considered as one: "" + displayName,
+                Attribute.calculateIfSecret(clazz, fieldName));
+    }
+
+    public static class WellDefinedField {
+
+        Secret secretField;
+
+        @DataBoundConstructor
+        public WellDefinedField(Secret secretField) {
+            this.secretField = secretField;
+        }
+
+        public Secret getSecret() {
+            return secretField;
+        }
+    }
+
+    public static class WellDefinedField2 extends WellDefinedField {
+        public WellDefinedField2(Secret secret) {
+            super(secret);
+        }
+    }
+
+    public static class SecretFromGetter {
+
+        Secret secretField;
+
+        @DataBoundConstructor
+        public SecretFromGetter(String secretField) {
+            this.secretField = Secret.fromString(secretField);
+        }
+
+        public Secret getSecret() {
+            return secretField;
+        }
+    }
+
+    public static class SecretFromGetter2 extends SecretFromGetter {
+        public SecretFromGetter2(String secret) {
+            super(secret);
+        }
+    }
+
+    public static class SecretFromPublicField {
+
+        public Secret secretField;
+
+        @DataBoundConstructor
+        public SecretFromPublicField(String secretField) {
+            this.secretField = Secret.fromString(secretField);
+        }
+    }
+
+    public static class SecretFromPublicField2 extends SecretFromPublicField {
+        public SecretFromPublicField2(String secret) {
+            super(secret);
+        }
+    }
+
+    public static class SecretFromPrivateField {
+
+        private Secret secretField;
+
+        @DataBoundConstructor
+        public SecretFromPrivateField(String secretField) {
+            this.secretField = Secret.fromString(secretField);
+        }
+    }
+
+    public static class SecretFromPrivateField2 extends SecretFromPrivateField {
+        public SecretFromPrivateField2(String secret) {
+            super(secret);
+        }
+    }
+
+    public static class SecretFromPrivateField3 extends SecretFromPrivateField2 {
+        public SecretFromPrivateField3(String secret) {
+            super(secret);
+        }
+    }
+
+    public static class NonSecretField {
+
+        public String passwordPath;
+
+        @DataBoundConstructor
+        public NonSecretField(String passwordPath) {
+            this.passwordPath = passwordPath;
+        }
+    }
+
+    public static class SecretRenamedFieldFithSecretConstructor {
+
+        Secret mySecretValueField;
+
+        @DataBoundConstructor
+        public SecretRenamedFieldFithSecretConstructor(Secret mySecretValue) {
+            this.mySecretValueField = mySecretValue;
+        }
+
+        public String getMySecretValue() {
+            return mySecretValueField.getPlainText();
+        }
+    }
+}
diff --git a/plugin/src/test/java/io/jenkins/plugins/casc/core/ProxyConfiguratorTest.java b/plugin/src/test/java/io/jenkins/plugins/casc/core/ProxyConfiguratorTest.java
index 3c6fba1154..d2a63935db 100644
--- a/plugin/src/test/java/io/jenkins/plugins/casc/core/ProxyConfiguratorTest.java
+++ b/plugin/src/test/java/io/jenkins/plugins/casc/core/ProxyConfiguratorTest.java
@@ -2,6 +2,7 @@
 
 import hudson.ProxyConfiguration;
 import hudson.util.Secret;
+import io.jenkins.plugins.casc.Attribute;
 import io.jenkins.plugins.casc.ConfigurationContext;
 import io.jenkins.plugins.casc.Configurator;
 import io.jenkins.plugins.casc.ConfiguratorRegistry;
@@ -9,14 +10,17 @@
 import io.jenkins.plugins.casc.misc.Env;
 import io.jenkins.plugins.casc.misc.EnvVarsRule;
 import io.jenkins.plugins.casc.misc.JenkinsConfiguredWithCodeRule;
+import io.jenkins.plugins.casc.misc.Util;
 import io.jenkins.plugins.casc.model.CNode;
 import io.jenkins.plugins.casc.model.Mapping;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.LoggerRule;
 
-import static io.jenkins.plugins.casc.misc.Util.getJenkinsRoot;
-import static io.jenkins.plugins.casc.misc.Util.toYamlString;
 import static java.util.Objects.requireNonNull;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -25,10 +29,12 @@
 public class ProxyConfiguratorTest {
 
     final JenkinsConfiguredWithCodeRule j = new JenkinsConfiguredWithCodeRule();
+    public LoggerRule logging = new LoggerRule();
 
     @Rule
     public RuleChain chain = RuleChain
-            .outerRule(new EnvVarsRule())
+            .outerRule(logging.record(Logger.getLogger(Attribute.class.getName()), Level.INFO).capture(2048))
+            .around(new EnvVarsRule())
             .around(j);
 
     @Test
@@ -93,6 +99,21 @@ public void shouldSetProxyWithSecretInFields() {
         assertEquals(proxy.getTestUrl(), ""http://google.com"");
     }
 
+    @Test
+    @Env(name = ""PROXY_USER"", value = ""proxy_user"")
+    @Env(name = ""PROXY_PASSWORD"", value = ""proxy_password"")
+    @ConfiguredWithCode(""ProxyWithSecrets.yml"")
+    @Issue(""SECURITY-1303"") // Fixed in 1.20
+    public void shouldNotWritePasswordToLog() {
+        ProxyConfiguration proxy = j.jenkins.proxy;
+        assertEquals(proxy.getUserName(), ""proxy_user"");
+        assertEquals(Secret.decrypt(proxy.getEncryptedPassword()).getPlainText(), ""proxy_password"");
+
+        // Check logs
+        Util.assertLogContains(logging, ""password"");
+        Util.assertNotInLog(logging, ""proxy_password"");
+    }
+
     @Test
     @ConfiguredWithCode(""Proxy.yml"")
     public void describeProxyConfig() throws Exception {
@@ -102,7 +123,7 @@ public void describeProxyConfig() throws Exception {
 
         Secret password = requireNonNull(Secret.decrypt(getProxyNode(context).getScalarValue(""password"")));
 
-        final String yamlConfig = toYamlString(configNode);
+        final String yamlConfig = Util.toYamlString(configNode);
         assertEquals(String.join(""\n"",
                 ""name: \""proxyhost\"""",
                 ""noProxyHost: \""externalhost\"""",
@@ -123,7 +144,7 @@ public void describeMinimalProxyConfig() throws Exception {
 
         Secret password = requireNonNull(Secret.decrypt(getProxyNode(context).getScalarValue(""password"")));
 
-        final String yamlConfig = toYamlString(configNode);
+        final String yamlConfig = Util.toYamlString(configNode);
         assertEquals(String.join(""\n"",
                 ""name: \""proxyhost\"""",
                 ""password: \"""" + password.getEncryptedValue() + ""\"""", // It's an empty string here
@@ -133,6 +154,6 @@ public void describeMinimalProxyConfig() throws Exception {
     }
 
     private Mapping getProxyNode(ConfigurationContext context) throws Exception {
-        return getJenkinsRoot(context).get(""proxy"").asMapping();
+        return Util.getJenkinsRoot(context).get(""proxy"").asMapping();
     }
 }
diff --git a/plugin/src/test/java/io/jenkins/plugins/casc/misc/JenkinsConfiguredWithCodeRule.java b/plugin/src/test/java/io/jenkins/plugins/casc/misc/JenkinsConfiguredWithCodeRule.java
index eaf9b32865..9a2f80c217 100644
--- a/plugin/src/test/java/io/jenkins/plugins/casc/misc/JenkinsConfiguredWithCodeRule.java
+++ b/plugin/src/test/java/io/jenkins/plugins/casc/misc/JenkinsConfiguredWithCodeRule.java
@@ -1,7 +1,9 @@
 package io.jenkins.plugins.casc.misc;
 
 import io.jenkins.plugins.casc.ConfigurationAsCode;
+import java.io.ByteArrayOutputStream;
 import java.lang.reflect.Field;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
@@ -76,4 +78,23 @@ private ConfiguredWithCode getConfiguredWithCode() {
         }
         return null;
     }
+
+    //TODO: Looks like API defect, exception should be thrown
+    /**
+     * Exports the Jenkins configuration to a string.
+     * @return YAML as string
+     * @param strict Fail if any export operation returns error
+     * @throws Exception Export error
+     * @throws AssertionError Failed to export the configuration
+     * @since TODO
+     */
+    public String exportToString(boolean strict) throws Exception {
+        final ByteArrayOutputStream out = new ByteArrayOutputStream();
+        ConfigurationAsCode.get().export(out);
+        final String s = out.toString(StandardCharsets.UTF_8.name());
+        if (strict && s.contains(""Failed to export"")) {
+            throw new AssertionError(""Failed to export the configuration: "" + s);
+        }
+        return s;
+    }
 }
diff --git a/plugin/src/test/java/io/jenkins/plugins/casc/misc/Util.java b/plugin/src/test/java/io/jenkins/plugins/casc/misc/Util.java
index 313cd701b5..49420ecf9f 100644
--- a/plugin/src/test/java/io/jenkins/plugins/casc/misc/Util.java
+++ b/plugin/src/test/java/io/jenkins/plugins/casc/misc/Util.java
@@ -19,8 +19,11 @@
 import java.util.Objects;
 import jenkins.model.GlobalConfigurationCategory;
 import jenkins.tools.ToolConfigurationCategory;
+import org.jvnet.hudson.test.LoggerRule;
 
 import static io.jenkins.plugins.casc.ConfigurationAsCode.serializeYamlNode;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class Util {
 
@@ -158,4 +161,26 @@ public static String toStringFromYamlFile(Object clazz, String resourcePath) thr
         byte[] bytes = Files.readAllBytes(Paths.get(resource.toURI()));
         return new String(bytes, StandardCharsets.UTF_8).replaceAll(""\r\n?"", ""\n"");
     }
+
+    /**
+     * Checks whether {@link LoggerRule} has not recorded the message.
+     * @param logging Logger rule
+     * @param unexpectedText Text to check
+     * @since TODO
+     */
+    public static void assertNotInLog(LoggerRule logging, String unexpectedText) {
+        assertFalse(""The log should not contain '"" + unexpectedText + ""'"",
+                logging.getMessages().stream().anyMatch(m -> m.contains(unexpectedText)));
+    }
+
+    /**
+     * Checks whether {@link LoggerRule} has recorded the message.
+     * @param logging Logger rule
+     * @param expectedText Text to check
+     * @since TODO
+     */
+    public static void assertLogContains(LoggerRule logging, String expectedText) {
+        assertTrue(""The log should contain '"" + expectedText + ""'"",
+                logging.getMessages().stream().anyMatch(m -> m.contains(expectedText)));
+    }
 }
diff --git a/plugin/src/test/java/io/jenkins/plugins/casc/yaml/YamlExportTest.java b/plugin/src/test/java/io/jenkins/plugins/casc/yaml/YamlExportTest.java
new file mode 100644
index 0000000000..74cde8ad8c
--- /dev/null
+++ b/plugin/src/test/java/io/jenkins/plugins/casc/yaml/YamlExportTest.java
@@ -0,0 +1,40 @@
+package io.jenkins.plugins.casc.yaml;
+
+import io.jenkins.plugins.casc.Attribute;
+import io.jenkins.plugins.casc.AttributeTest;
+import io.jenkins.plugins.casc.ConfigurationAsCode;
+import io.jenkins.plugins.casc.ConfigurationContext;
+import io.jenkins.plugins.casc.ConfiguratorRegistry;
+import io.jenkins.plugins.casc.impl.configurators.DataBoundConfigurator;
+import java.util.Set;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Contains tests for particular export cases.
+ */
+public class YamlExportTest {
+
+    @Rule
+    public JenkinsRule j = new JenkinsRule();
+
+    @Test
+    @Issue(""SECURITY-1458"")
+    public void shouldDiscoverSecretsBasedOnTheAttributeType() throws Exception {
+        ConfigurationAsCode casc = ConfigurationAsCode.get();
+        ConfiguratorRegistry registry = ConfiguratorRegistry.get();
+        ConfigurationContext context = new ConfigurationContext(registry);
+
+        DataBoundConfigurator c = new DataBoundConfigurator<>(AttributeTest.SecretRenamedFieldFithSecretConstructor.class);
+        Set<Attribute> attributes = c.describe();
+        assertThat(attributes.size(), equalTo(1));
+        Attribute attr = attributes.iterator().next();
+        assertTrue(attr.isSecret(null));
+    }
+}"
GHSA-2rq5-68hm-h4j8,"From 607151ea8f90212a3fb37c977fa57c7d58d26a84 Mon Sep 17 00:00:00 2001
From: Christian Pape <Christian.Pape@informatik.hs-fulda.de>
Date: Fri, 12 Mar 2021 17:49:14 +0100
Subject: [PATCH] NMS-13124: Fixed user deletion by renaming bug and CSRF
 privilege escalation issue

---
 .../opennms/netmgt/config/UserManager.java    |   4 +
 .../applicationContext-spring-security.xml    |  14 +-
 .../jsp/admin/userGroupView/groups/list.jsp   |   1 +
 .../userGroupView/groups/modifyGroup.jsp      |   1 +
 .../admin/userGroupView/groups/newGroup.jsp   |   1 +
 .../admin/userGroupView/roles/editDetails.jsp |   1 +
 .../userGroupView/roles/editSpecific.jsp      |   3 +-
 .../webapp/admin/userGroupView/roles/list.jsp |   2 +
 .../webapp/admin/userGroupView/roles/view.jsp |   3 +
 .../webapp/admin/userGroupView/users/list.jsp |  21 ++-
 .../admin/userGroupView/users/modifyUser.jsp  |   1 +
 .../admin/userGroupView/users/newPassword.jsp |   2 +
 .../admin/userGroupView/users/newUser.jsp     |   1 +
 .../java/org/opennms/smoketest/UserIT.java    | 166 ++++++++++++++++++
 14 files changed, 216 insertions(+), 5 deletions(-)

diff --git a/opennms-config/src/main/java/org/opennms/netmgt/config/UserManager.java b/opennms-config/src/main/java/org/opennms/netmgt/config/UserManager.java
index f10649f716bc..05fadc9ded7d 100644
--- a/opennms-config/src/main/java/org/opennms/netmgt/config/UserManager.java
+++ b/opennms-config/src/main/java/org/opennms/netmgt/config/UserManager.java
@@ -995,6 +995,10 @@ public void renameUser(final String oldName, final String newName) throws Except
                     m_users.remove(oldName);
                     throw new Exception(""UserFactory:rename the data contained for old user "" + oldName + "" is null"");
                 } else {
+                    if (m_users.containsKey(newName)) {
+                        throw new Exception(""UserFactory: cannot rename user "" + oldName + "". An user with the given name "" + newName + "" already exists"");
+                    }
+
                     // Rename the user in the user map.
                     m_users.remove(oldName);
                     data.setUserId(newName);
diff --git a/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-spring-security.xml b/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-spring-security.xml
index fb52db0a7992..af3f1cce4b84 100644
--- a/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-spring-security.xml
+++ b/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-spring-security.xml
@@ -122,6 +122,18 @@
   <!-- Allow anonymous access to the webstart portion of the app -->
   <http pattern=""/webstart/**"" security=""none""/>
 
+  <http pattern=""/admin/userGroupView/**"" use-expressions=""true"" access-denied-page=""/accessDenied.jsp"" realm=""OpenNMS Realm"" auto-config=""false"" entry-point-ref=""loginUrlAuthenticationEntryPoint"">
+    <!-- see NMS-13124 -->
+    <csrf />
+    <intercept-url pattern=""/admin/userGroupView/**"" access=""hasAnyRole('ROLE_ADMIN')"" />
+    <http-basic entry-point-ref=""xRequestedWithAwareBasicAuthEntryPoint"" />
+    <logout logout-success-url=""/"" />
+    <custom-filter position=""FORM_LOGIN_FILTER"" ref=""onmsUsernamePasswordAuthenticationFilter"" />
+    <custom-filter position=""PRE_AUTH_FILTER"" ref=""attributePreAuthFilter""/>
+    <custom-filter after=""PRE_AUTH_FILTER"" ref=""headerPreAuthFilter""/>
+    <custom-filter position=""LAST"" ref=""authFilterEnabler""/>
+  </http>
+
   <!-- Only one <http> section can match the implicit '/**' pattern -->
   <http pattern=""/**"" use-expressions=""true"" access-denied-page=""/accessDenied.jsp"" realm=""OpenNMS Realm"" auto-config=""false"" entry-point-ref=""loginUrlAuthenticationEntryPoint"">
     <intercept-url pattern=""/"" access=""hasAnyRole('ROLE_ANONYMOUS','ROLE_USER','ROLE_DASHBOARD')"" />
@@ -158,7 +170,7 @@
     <intercept-url pattern=""/graph/graph.png"" access=""hasAnyRole('ROLE_USER','ROLE_DASHBOARD')"" />
     <intercept-url pattern=""/dashboard/**"" access=""hasAnyRole('ROLE_USER','ROLE_DASHBOARD')"" />
     <intercept-url pattern=""/coreweb/**"" access=""hasAnyRole('ROLE_USER','ROLE_DASHBOARD')"" />
-    
+
     <!-- DO NOT ALLOW ACCESS TO /osgi -->
     <intercept-url pattern=""/osgi/**"" access=""denyAll"" />
 
diff --git a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/list.jsp b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/list.jsp
index f82e15920e30..05082802a81e 100644
--- a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/list.jsp
+++ b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/list.jsp
@@ -102,6 +102,7 @@
   <input type=""hidden"" name=""operation""/>
   <input type=""hidden"" name=""groupName""/>
   <input type=""hidden"" name=""newName""/>
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
   <div class=""card"">
     <table class=""table table-sm table-bordered"">
diff --git a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/modifyGroup.jsp b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/modifyGroup.jsp
index c70e61e3487f..f7d6eadda0bd 100644
--- a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/modifyGroup.jsp
+++ b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/modifyGroup.jsp
@@ -292,6 +292,7 @@
 <form role=""form"" class=""form"" method=""post"" id=""modifyGroup"" name=""modifyGroup"">
   <input type=""hidden"" name=""groupName"" value=""<%=group.getName()%>""/>
   <input type=""hidden"" name=""operation""/>
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
     <div class=""card"">
         <div class=""card-header"">
diff --git a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/newGroup.jsp b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/newGroup.jsp
index 7f6d06db02ca..90e078543d09 100644
--- a/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/newGroup.jsp
+++ b/opennms-webapp/src/main/webapp/WEB-INF/jsp/admin/userGroupView/groups/newGroup.jsp
@@ -76,6 +76,7 @@
   <div class=""card-body"">
     <form role=""form"" class=""form"" id=""newGroupForm"" method=""post"" name=""newGroupForm"" onsubmit=""return validateFormInput();"">
       <input type=""hidden"" name=""operation"" />
+      <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
       <div class=""form-group"">
         <label for=""groupName"" class="""">Group Name</label>
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editDetails.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editDetails.jsp
index 7aa44abc87b7..ce6047acb544 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editDetails.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editDetails.jsp
@@ -70,6 +70,7 @@
   </div>
   <div class=""card-body"">
     <form role=""form"" class=""form"" action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""editForm"">
+      <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
       <input type=""hidden"" name=""operation"" value=""saveDetails""/>
       <input type=""hidden"" name=""role"" value=""${fn:escapeXml(role.name)}""/>
 
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editSpecific.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editSpecific.jsp
index c086a2d1858e..185b17a8ac4b 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editSpecific.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/editSpecific.jsp
@@ -59,7 +59,8 @@
       <input type=""hidden"" name=""operation"" value=""saveEntry""/>
       <input type=""hidden"" name=""role"" value=""${fn:escapeXml(role.name)}""/>
       <input type=""hidden"" name=""schedIndex"" value=""${schedIndex}""/>
-      <input type=""hidden"" name=""timeIndex"" value=""${timeIndex}"" /> 
+      <input type=""hidden"" name=""timeIndex"" value=""${timeIndex}"" />
+      <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
       <div class=""form-group form-row"">
         <label class=""col-sm-2"">On-Call Role</label>
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/list.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/list.jsp
index ef1112ffaaed..9420a7aa8c30 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/list.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/list.jsp
@@ -93,6 +93,7 @@
 <form action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""roleForm"">
 	<input type=""hidden"" name=""operation"" />
 	<input type=""hidden"" name=""role"" />
+	<input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 </form>
 
 <div class=""card"">
@@ -148,6 +149,7 @@
 </div> <!-- panel -->
 
 <form action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""newForm"">
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
   <input name=""operation"" type=""hidden"" value=""new""/>
   <button type=""submit"" class=""btn btn-secondary"">Add New On-Call Role</button>
 </form>
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/view.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/view.jsp
index e68648cac2ec..d1554b4c6499 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/roles/view.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/roles/view.jsp
@@ -157,10 +157,12 @@
 <form action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""editForm"">
   <input type=""hidden"" name=""operation"" value=""editDetails""/>
   <input type=""hidden"" name=""role"" value=""${fn:escapeXml(role.name)}""/>
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
   <button type=""submit"" class=""btn btn-secondary"">Value Details</button>
 </form>
 
 <form action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""doneForm"" class=""my-4"">
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
   <button type=""submit"" class=""btn btn-secondary"">Done</button>
 </form>
 
@@ -220,6 +222,7 @@
 </div>
 
 <form action=""<c:url value='${reqUrl}'/>"" method=""post"" name=""doneForm"" class=""mb-4"">
+  <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
   <button type=""submit"" class=""btn btn-secondary"">Done</button>
 </form>
 
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/users/list.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/users/list.jsp
index 1250fa5c1839..682adb4b46ba 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/users/list.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/users/list.jsp
@@ -95,9 +95,19 @@
     {
         document.allUsers.userID.value=userID;
         var newID = prompt(""Enter new name for user."", userID);
-        
-        if (newID != null && newID != """")
-        {
+
+        if (newID != null && newID != """") {
+          if (/.*[&<>""`']+.*/.test(newID)) {
+            alert(""The user ID must not contain any HTML markup."");
+            return;
+          }
+
+          var element =  document.getElementById('users(' + _.escape(newID) + ').doModify');
+          if (typeof(element) != 'undefined' && element != null) {
+            alert(""A user with this ID already exist."");
+            return;
+          }
+
           document.allUsers.newID.value = newID;
           document.allUsers.action=""admin/userGroupView/users/renameUser"";
           document.allUsers.submit();
@@ -112,6 +122,7 @@
 <input type=""hidden"" name=""userID""/>
 <input type=""hidden"" name=""newID""/>
 <input type=""hidden"" name=""password""/>
+<input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
 <p>
   Click on the <i>User ID</i> link to view detailed information about a
@@ -209,4 +220,8 @@
   </div> <!-- panel -->
 </form>
 
+<jsp:include page=""/assets/load-assets.jsp"" flush=""false"">
+    <jsp:param name=""asset"" value=""underscore-js"" />
+</jsp:include>
+
 <jsp:include page=""/includes/bootstrap-footer.jsp"" flush=""false"" />
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/users/modifyUser.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/users/modifyUser.jsp
index 2c02c352a6a4..b6f97ef6cf00 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/users/modifyUser.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/users/modifyUser.jsp
@@ -256,6 +256,7 @@
 <input id=""userID"" type=""hidden"" name=""userID"" value=""<%=user.getUserId()%>""/>
 <input id=""password"" type=""hidden"" name=""password""/>
 <input id=""redirect"" type=""hidden"" name=""redirect""/>
+<input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
 
 <div class=""row"">
   <div class=""col-md-6"">
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/users/newPassword.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/users/newPassword.jsp
index 877489f2176c..e12fabf20dff 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/users/newPassword.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/users/newPassword.jsp
@@ -66,6 +66,8 @@
   </div>
   <div class=""card-body"">
     <form role=""form"" class=""form"" method=""post"" name=""goForm"">
+      <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
+
       <div class=""form-group"">
         <label for=""pass1"" class="""">Password</label>
         <input type=""password"" class=""form-control"" id=""pass1"" name=""pass1"">
diff --git a/opennms-webapp/src/main/webapp/admin/userGroupView/users/newUser.jsp b/opennms-webapp/src/main/webapp/admin/userGroupView/users/newUser.jsp
index b07ef034cc7e..7b862f85bef2 100644
--- a/opennms-webapp/src/main/webapp/admin/userGroupView/users/newUser.jsp
+++ b/opennms-webapp/src/main/webapp/admin/userGroupView/users/newUser.jsp
@@ -82,6 +82,7 @@
   </div>
   <div class=""card-body"">
     <form class=""form"" role=""form"" id=""newUserForm"" method=""post"" name=""newUserForm"" onsubmit=""return validateFormInput();"">
+      <input type=""hidden"" name=""${_csrf.parameterName}"" value=""${_csrf.token}""/>
       <div class=""form-group"">
         <label for=""userID"" class="""">User ID</label>
         <input id=""userID"" type=""text"" name=""userID"" class=""form-control"">
diff --git a/smoke-test/src/test/java/org/opennms/smoketest/UserIT.java b/smoke-test/src/test/java/org/opennms/smoketest/UserIT.java
index 688e015883fa..8c9beaee4943 100644
--- a/smoke-test/src/test/java/org/opennms/smoketest/UserIT.java
+++ b/smoke-test/src/test/java/org/opennms/smoketest/UserIT.java
@@ -31,6 +31,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import java.time.Duration;
+import java.time.temporal.ChronoUnit;
 import java.util.List;
 
 import org.junit.Before;
@@ -158,4 +160,168 @@ public void testChangeAdminPassword() throws Exception {
         assertTrue(wait.until(pageContainsText(""Password successfully changed"")));
     }
 
+    @Test
+    public void testInvalidUserIds() {
+        testInvalidUserId(""John<b>Doe</b>"",true);
+        testInvalidUserId(""Jane'Doe'"",true);
+        testInvalidUserId(""John&Doe"",true);
+        testInvalidUserId(""Jane\""\""Doe"",true);
+    }
+
+    @Test
+    public void testValidUserIds() {
+        testInvalidUserId(""John-Doe"",false);
+        testInvalidUserId(""Jane/Doe"",false);
+        testInvalidUserId(""John.Doe"",false);
+        testInvalidUserId(""Jane#Doe"", false);
+        testInvalidUserId(""John@Döe.com"", false);
+        testInvalidUserId(""JohnDoé"", false);
+    }
+
+    @Test
+    public void testInvalidGroupIds() {
+        testInvalidGroupId(""John<b>Doe</b>"",true);
+        testInvalidGroupId(""Jane'Doe'"",true);
+        testInvalidGroupId(""John&Doe"",true);
+        testInvalidGroupId(""Jane\""\""Doe"",true);
+    }
+
+    @Test
+    public void testValidGroupIds() {
+        testInvalidGroupId(""John-Doe"",false);
+        testInvalidGroupId(""Jane/Doe"",false);
+        testInvalidGroupId(""John.Doe"",false);
+        testInvalidGroupId(""Jane#Doe"", false);
+        testInvalidGroupId(""John@Döe.com"", false);
+        testInvalidGroupId(""JohnDoé"", false);
+    }
+
+    public void testInvalidUserId(final String userId, final boolean mustFail) {
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Users"").click();
+        findElementByLink(""Add new user"").click();
+
+        enterText(By.id(""userID""), userId);
+        enterText(By.id(""pass1""), ""SmokeTestPassword"");
+        enterText(By.id(""pass2""), ""SmokeTestPassword"");
+        findElementByXpath(""//button[@type='submit' and text()='OK']"").click();
+
+        if (mustFail) {
+            try {
+                final Alert alert = wait.withTimeout(Duration.of(5, ChronoUnit.SECONDS)).until(ExpectedConditions.alertIsPresent());
+                alert.dismiss();
+            } catch (final Exception e) {
+                LOG.debug(""Got an exception waiting for a 'invalid user ID' alert."", e);
+                throw e;
+            }
+        } else {
+            wait.until(ExpectedConditions.elementToBeClickable(By.name(""finish"")));
+        }
+    }
+
+    public void testInvalidGroupId(final String groupId, final boolean mustFail) {
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Groups"").click();
+        findElementByLink(""Add new group"").click();
+
+        enterText(By.id(""groupName""), groupId);
+        enterText(By.id(""groupComment""), ""SmokeTestComment"");
+        findElementByXpath(""//button[@type='submit' and text()='OK']"").click();
+
+        if (mustFail) {
+            try {
+                final Alert alert = wait.withTimeout(Duration.of(5, ChronoUnit.SECONDS)).until(ExpectedConditions.alertIsPresent());
+                alert.dismiss();
+            } catch (final Exception e) {
+                LOG.debug(""Got an exception waiting for a 'invalid group ID' alert."", e);
+                throw e;
+            }
+        } else {
+            wait.until(ExpectedConditions.elementToBeClickable(By.name(""finish"")));
+        }
+    }
+
+    /**
+     * see NMS-13124
+     */
+    @Test
+    public void testCsrfPrivilegeEscalation() {
+        // visit the admin's user page
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Users"").click();
+        findElementByLink(""Add new user"").click();
+
+        // add a new user 'user'
+        enterText(By.id(""userID""), ""user"");
+        enterText(By.id(""pass1""), ""pass"");
+        enterText(By.id(""pass2""), ""pass"");
+        findElementByXpath(""//button[@type='submit' and text()='OK']"").click();
+
+        // assign just the ROLE_USER
+        final Select select = new Select(driver.findElement(By.name(""availableRoles"")));
+        select.selectByValue(""ROLE_USER"");
+        findElementById(""roles.doAdd"").click();
+        findElementById(""saveUserButton"").click();
+
+        // assert that this is correctly set
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Users"").click();
+        findElementById(""users(user).doDetails"").click();
+
+        assertTrue(wait.until(pageContainsText(""ROLE_USER"")));
+
+        // now construct an exploit to set ROLE_ADMIN for user 'user'
+        final String html = ""<form action='"" + stack.opennms().getBaseUrlInternal() + ""opennms/admin/userGroupView/users/updateUser' method='POST' enctype='application/x-www-form-urlencoded'>"" +
+                ""<input type='hidden' name='userID' value='user' />"" +
+                ""<input type='hidden' name='password' value=' ' />"" +
+                ""<input type='hidden' name='redirect' value='/admin/userGroupView/users/saveUser' /> <input type='hidden' name='fullName' value=' ' />"" +
+                ""<input type='hidden' name='userComments' value=' ' />"" +
+                ""<input type='hidden' name='configuredRoles' value='ROLE_ADMIN' />"" +
+                ""<input type='hidden' name='email' value=' ' />"" +
+                ""<input type='hidden' name='pemail' value=' ' />"" +
+                ""<input type='hidden' name='xmppAddress' value=' ' />"" +
+                ""<input type='hidden' name='microblog' value=' ' />"" +
+                ""<input type='hidden' name='numericalService' value=' ' />"" +
+                ""<input type='hidden' name='numericalPin' value=' ' />"" +
+                ""<input type='hidden' name='textService' value=' ' />"" +
+                ""<input type='hidden' name='textPin' value=' ' />"" +
+                ""<input type='hidden' name='workPhone' value=' ' />"" +
+                ""<input type='hidden' name='mobilePhone' value=' ' />"" +
+                ""<input type='hidden' name='homePhone' value=' ' />"" +
+                ""<input type='hidden' name='tuiPin' value=' ' />"" +
+                ""<input type='hidden' name='timeZoneId' value=' ' />"" +
+                ""<input type='hidden' name='dutySchedules' value='0' />"" +
+                ""<input type='hidden' name='numSchedules' value='1' />"" +
+                ""<input type='submit' id='submitIt' />"" +
+                ""</form>"";
+        String script = ""var foo = document.createElement('div'); "" +
+                ""foo.innerHTML=\"""" + html + ""\""; "" +
+                ""document.body.appendChild(foo)"";
+
+        // ...and execute it
+        driver.executeScript(script);
+        findElementById(""submitIt"").click();
+
+        // this should be denied due to CSRF protection
+        assertTrue(wait.until(pageContainsText(""Access denied"")));
+
+        // assure that the user's role is still ROLE_USER
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Users"").click();
+        findElementById(""users(user).doDetails"").click();
+        assertTrue(wait.until(pageContainsText(""ROLE_USER"")));
+
+        // delete the user
+        adminPage();
+        findElementByLink(""Configure Users, Groups and On-Call Roles"").click();
+        findElementByLink(""Configure Users"").click();
+
+        findElementById(""users(user).doDelete"").click();
+        handleAlert(""Are you sure you want to delete the user user?"");
+    }
 }"
GHSA-pc54-pchm-xcw6,"From 3ab999c899c455a0b0a00bf5e455ed3e8d9ae347 Mon Sep 17 00:00:00 2001
From: rsigal <rsigal@redhat.com>
Date: Tue, 18 Nov 2014 01:26:03 -0500
Subject: [PATCH] RESTEASY-1130: Added test for Red Hat version of Xerces in
 TestSecureProcessing.

---
 .../org/jboss/resteasy/test/xxe/TestSecureProcessing.java | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/resteasy-jaxrs-test/src/test/java/org/jboss/resteasy/test/xxe/TestSecureProcessing.java b/resteasy-jaxrs-test/src/test/java/org/jboss/resteasy/test/xxe/TestSecureProcessing.java
index 26309dee88e..06b5aac7166 100644
--- a/resteasy-jaxrs-test/src/test/java/org/jboss/resteasy/test/xxe/TestSecureProcessing.java
+++ b/resteasy-jaxrs-test/src/test/java/org/jboss/resteasy/test/xxe/TestSecureProcessing.java
@@ -7,6 +7,7 @@
 import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
+import javax.xml.parsers.DocumentBuilderFactory;
 
 import junit.framework.Assert;
 
@@ -373,6 +374,13 @@ void doEntityExpansionPasses() throws Exception
    
    void doMaxAttributesFails() throws Exception
    {
+      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      System.out.println(""dbf.getClass(): "" + dbf.getClass());
+      if (""org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"".equals(dbf.getClass().getName()))
+      {
+         System.out.println(""Testing with Red Hat version of Xerces, skipping max attributes test"");
+         return;
+      }
       System.out.println(""entering doMaxAttributesFails()"");
       ClientRequest request = new ClientRequest(generateURL(""/test""));
       request.body(""application/xml"", bigAttributeDoc);"
GHSA-7ph6-5cmq-xgjq,"From ab778254fb8f71c774e1c1239368c44fe3b6bba5 Mon Sep 17 00:00:00 2001
From: Thomas Mortagne <thomas.mortagne@gmail.com>
Date: Wed, 7 Jul 2021 16:02:50 +0200
Subject: [PATCH] XWIKI-18819: It's possible to save pretty much anything
 anywhere by creating and using an SSX/JSX containing ""../"" in its reference

---
 ...bstractSxExportURLFactoryActionHandler.java | 18 +++++++-----------
 1 file changed, 7 insertions(+), 11 deletions(-)

diff --git a/xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/org/xwiki/skinx/internal/AbstractSxExportURLFactoryActionHandler.java b/xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/org/xwiki/skinx/internal/AbstractSxExportURLFactoryActionHandler.java
index 0b9af4e39b9d..29ff0d1db61c 100644
--- a/xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/org/xwiki/skinx/internal/AbstractSxExportURLFactoryActionHandler.java
+++ b/xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/org/xwiki/skinx/internal/AbstractSxExportURLFactoryActionHandler.java
@@ -100,13 +100,13 @@ public URL createURL(String spaces, String name, String queryString, String anch
         XWikiDocument.backupContext(backup, context);
         try {
             sxDocument.setAsContextDoc(context);
-            return processSx(spaceNames, name, queryString, context, exportContext);
+            return processSx(sxDocument.getId(), queryString, context, exportContext);
         } finally {
             XWikiDocument.restoreContext(backup, context);
         }
     }
 
-    private URL processSx(List<String> spaceNames, String name, String queryString, XWikiContext context,
+    private URL processSx(long id, String queryString, XWikiContext context,
         FilesystemExportContext exportContext) throws Exception
     {
         SxSource sxSource = null;
@@ -128,7 +128,7 @@ private URL processSx(List<String> spaceNames, String name, String queryString,
 
         // Write the content to file
         // We need a unique name for that SSX content
-        String targetPath = String.format(""%s/%s/%s"", getSxPrefix(), StringUtils.join(spaceNames, '/'), name);
+        String targetPath = String.format(""%s/%s"", getSxPrefix(), id);
         File targetDirectory = new File(exportContext.getExportDir(), targetPath);
         if (!targetDirectory.exists()) {
             targetDirectory.mkdirs();
@@ -146,11 +146,7 @@ private URL processSx(List<String> spaceNames, String name, String queryString,
 
         path.append(getSxPrefix());
         path.append(URL_PATH_SEPARATOR);
-        for (String spaceName : spaceNames) {
-            path.append(encodeURLPart(spaceName));
-            path.append(URL_PATH_SEPARATOR);
-        }
-        path.append(encodeURLPart(name));
+        path.append(id);
         path.append(URL_PATH_SEPARATOR);
         path.append(encodeURLPart(targetLocation.getName()));
 
@@ -161,14 +157,14 @@ protected String getContent(SxSource sxSource, FilesystemExportContext exportCon
     {
         String content;
 
-        // We know we're inside a SX file located at ""<S|J>sx/<Space>/<Page>/<s|j>sx<NNN>.<css|js>"". Inside this CSS
+        // We know we're inside a SX file located at ""<S|J>sx/<id>/<s|j>sx<NNN>.<css|js>"". Inside this CSS
         // there can be URLs and we need to ensure that the prefix for these URLs lead to the root of the path, i.e.
-        // 3 levels up (""../../../"").
+        // 3 levels up (""../../"").
         // To make this happen we reuse the Doc Parent Level from FileSystemExportContext to a fixed value of 3.
         // We also make sure to put back the original value
         int originalDocParentLevel = exportContext.getDocParentLevel();
         try {
-            exportContext.setDocParentLevels(3);
+            exportContext.setDocParentLevels(2);
             content = sxSource.getContent();
         } finally {
             exportContext.setDocParentLevels(originalDocParentLevel);"
GHSA-24r8-fm9r-cpj2,"From b597f7a865a527a84ee3d6937075cfbb4470ed20 Mon Sep 17 00:00:00 2001
From: Trustin Lee <t@motd.kr>
Date: Thu, 5 Dec 2019 18:35:47 +0900
Subject: [PATCH] Merge pull request from GHSA-35fr-h7jr-hh86

Motivation:

An `HttpService` can produce a malformed HTTP response when a user
specified a malformed HTTP header values, such as:

    ResponseHeaders.of(HttpStatus.OK
                       ""my-header"", ""foo\r\nbad-header: bar"");

Modification:

- Add strict header value validation to `HttpHeadersBase`
- Add strict header name validation to `HttpHeaderNames.of()`, which is
  used by `HttpHeadersBase`.

Result:

- It is not possible anymore to send a bad header value which can be
  misused for sending additional headers or injecting arbitrary content.
---
 .../armeria/common/HttpHeaderNames.java       |  94 +++++++++++-
 .../armeria/common/HttpHeadersBase.java       |  78 ++++++++--
 .../armeria/internal/ArmeriaHttpUtil.java     |   2 +-
 .../armeria/common/HttpHeaderNamesTest.java   |  64 +++++++-
 .../armeria/common/HttpHeadersBaseTest.java   | 140 ++++++++++--------
 .../HttpServerHeaderValidationTest.java       | 101 +++++++++++++
 6 files changed, 395 insertions(+), 84 deletions(-)
 create mode 100644 core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java

diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java b/core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
index a020e8ba9cd..dc3cca97e42 100644
--- a/core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
+++ b/core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
@@ -32,10 +32,12 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.BitSet;
 import java.util.Map;
 
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.math.IntMath;
 
 import io.netty.util.AsciiString;
 
@@ -65,6 +67,35 @@ public final class HttpHeaderNames {
     //   - Sec-Fetch-User
     //   - Sec-Metadata
 
+    private static final int PROHIBITED_NAME_CHAR_MASK = ~63;
+    private static final BitSet PROHIBITED_NAME_CHARS = new BitSet(~PROHIBITED_NAME_CHAR_MASK + 1);
+    private static final String[] PROHIBITED_NAME_CHAR_NAMES = new String[~PROHIBITED_NAME_CHAR_MASK + 1];
+
+    static {
+        PROHIBITED_NAME_CHARS.set(0);
+        PROHIBITED_NAME_CHARS.set('\t');
+        PROHIBITED_NAME_CHARS.set('\n');
+        PROHIBITED_NAME_CHARS.set(0xB);
+        PROHIBITED_NAME_CHARS.set('\f');
+        PROHIBITED_NAME_CHARS.set('\r');
+        PROHIBITED_NAME_CHARS.set(' ');
+        PROHIBITED_NAME_CHARS.set(',');
+        PROHIBITED_NAME_CHARS.set(':');
+        PROHIBITED_NAME_CHARS.set(';');
+        PROHIBITED_NAME_CHARS.set('=');
+        PROHIBITED_NAME_CHAR_NAMES[0] = ""<NUL>"";
+        PROHIBITED_NAME_CHAR_NAMES['\t'] = ""<TAB>"";
+        PROHIBITED_NAME_CHAR_NAMES['\n'] = ""<LF>"";
+        PROHIBITED_NAME_CHAR_NAMES[0xB] = ""<VT>"";
+        PROHIBITED_NAME_CHAR_NAMES['\f'] = ""<FF>"";
+        PROHIBITED_NAME_CHAR_NAMES['\r'] = ""<CR>"";
+        PROHIBITED_NAME_CHAR_NAMES[' '] = ""<SP>"";
+        PROHIBITED_NAME_CHAR_NAMES[','] = "","";
+        PROHIBITED_NAME_CHAR_NAMES[':'] = "":"";
+        PROHIBITED_NAME_CHAR_NAMES[';'] = "";"";
+        PROHIBITED_NAME_CHAR_NAMES['='] = ""="";
+    }
+
     // Pseudo-headers
 
     /**
@@ -564,10 +595,16 @@ public final class HttpHeaderNames {
         map = builder.build();
     }
 
+    private static AsciiString create(String name) {
+        return AsciiString.cached(Ascii.toLowerCase(name));
+    }
+
     /**
      * Lower-cases and converts the specified header name into an {@link AsciiString}. If {@code ""name""} is
      * a known header name, this method will return a pre-instantiated {@link AsciiString} to reduce
      * the allocation rate of {@link AsciiString}.
+     *
+     * @throws IllegalArgumentException if the specified {@code name} is not a valid header name.
      */
     public static AsciiString of(CharSequence name) {
         if (name instanceof AsciiString) {
@@ -576,22 +613,71 @@ public static AsciiString of(CharSequence name) {
 
         final String lowerCased = Ascii.toLowerCase(requireNonNull(name, ""name""));
         final AsciiString cached = map.get(lowerCased);
-        return cached != null ? cached : AsciiString.cached(lowerCased);
+        if (cached != null) {
+            return cached;
+        }
+
+        return validate(AsciiString.cached(lowerCased));
     }
 
     /**
      * Lower-cases and converts the specified header name into an {@link AsciiString}. If {@code ""name""} is
      * a known header name, this method will return a pre-instantiated {@link AsciiString} to reduce
      * the allocation rate of {@link AsciiString}.
+     *
+     * @throws IllegalArgumentException if the specified {@code name} is not a valid header name.
      */
     public static AsciiString of(AsciiString name) {
         final AsciiString lowerCased = name.toLowerCase();
         final AsciiString cached = map.get(lowerCased);
-        return cached != null ? cached : lowerCased;
+        if (cached != null) {
+            return cached;
+        }
+
+        return validate(lowerCased);
     }
 
-    private static AsciiString create(String name) {
-        return AsciiString.cached(Ascii.toLowerCase(name));
+    private static AsciiString validate(AsciiString name) {
+        if (name.isEmpty()) {
+            throw new IllegalArgumentException(""malformed header name: <EMPTY>"");
+        }
+
+        final int lastIndex;
+        try {
+            lastIndex = name.forEachByte(value -> {
+                if ((value & PROHIBITED_NAME_CHAR_MASK) != 0) { // value >= 64
+                    return true;
+                }
+
+                // value < 64
+                return !PROHIBITED_NAME_CHARS.get(value);
+            });
+        } catch (Exception e) {
+            throw new Error(e);
+        }
+
+        if (lastIndex >= 0) {
+            throw new IllegalArgumentException(malformedHeaderNameMessage(name));
+        }
+
+        return name;
+    }
+
+    private static String malformedHeaderNameMessage(AsciiString name) {
+        final StringBuilder buf = new StringBuilder(IntMath.saturatedAdd(name.length(), 64));
+        buf.append(""malformed header name: "");
+
+        final int nameLength = name.length();
+        for (int i = 0; i < nameLength; i++) {
+            final char ch = name.charAt(i);
+            if (PROHIBITED_NAME_CHARS.get(ch)) {
+                buf.append(PROHIBITED_NAME_CHAR_NAMES[ch]);
+            } else {
+                buf.append(ch);
+            }
+        }
+
+        return buf.toString();
     }
 
     private HttpHeaderNames() {}
diff --git a/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java b/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
index 2c05dd0d383..fdefda78026 100644
--- a/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
+++ b/core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
@@ -29,7 +29,6 @@
  */
 package com.linecorp.armeria.common;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.isAbsoluteUri;
 import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;
@@ -41,6 +40,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Arrays;
+import java.util.BitSet;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
@@ -58,6 +58,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
+import com.google.common.math.IntMath;
 
 import io.netty.handler.codec.DateFormatter;
 import io.netty.util.AsciiString;
@@ -67,6 +68,23 @@
  */
 class HttpHeadersBase implements HttpHeaderGetters {
 
+    private static final int PROHIBITED_VALUE_CHAR_MASK = ~15;
+    private static final BitSet PROHIBITED_VALUE_CHARS = new BitSet(~PROHIBITED_VALUE_CHAR_MASK + 1);
+    private static final String[] PROHIBITED_VALUE_CHAR_NAMES = new String[~PROHIBITED_VALUE_CHAR_MASK + 1];
+
+    static {
+        PROHIBITED_VALUE_CHARS.set(0);
+        PROHIBITED_VALUE_CHARS.set('\n');
+        PROHIBITED_VALUE_CHARS.set(0xB);
+        PROHIBITED_VALUE_CHARS.set('\f');
+        PROHIBITED_VALUE_CHARS.set('\r');
+        PROHIBITED_VALUE_CHAR_NAMES[0] = ""<NUL>"";
+        PROHIBITED_VALUE_CHAR_NAMES['\n'] = ""<LF>"";
+        PROHIBITED_VALUE_CHAR_NAMES[0xB] = ""<VT>"";
+        PROHIBITED_VALUE_CHAR_NAMES['\f'] = ""<FF>"";
+        PROHIBITED_VALUE_CHAR_NAMES['\r'] = ""<CR>"";
+    }
+
     static final int DEFAULT_SIZE_HINT = 16;
 
     /**
@@ -545,7 +563,7 @@ final long getTimeMillisAndRemove(CharSequence name, long defaultValue) {
     }
 
     final void add(CharSequence name, String value) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(value, ""value"");
         final int h = normalizedName.hashCode();
         final int i = index(h);
@@ -553,7 +571,7 @@ final void add(CharSequence name, String value) {
     }
 
     final void add(CharSequence name, Iterable<String> values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
         final int h = normalizedName.hashCode();
         final int i = index(h);
@@ -564,7 +582,7 @@ final void add(CharSequence name, Iterable<String> values) {
     }
 
     final void add(CharSequence name, String... values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
         final int h = normalizedName.hashCode();
         final int i = index(h);
@@ -590,7 +608,7 @@ final void addObject(CharSequence name, Object value) {
     }
 
     final void addObject(CharSequence name, Iterable<?> values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
         for (Object v : values) {
             requireNonNullElement(values, v);
@@ -599,7 +617,7 @@ final void addObject(CharSequence name, Iterable<?> values) {
     }
 
     final void addObject(CharSequence name, Object... values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
         for (Object v : values) {
             requireNonNullElement(values, v);
@@ -638,7 +656,7 @@ final void addTimeMillis(CharSequence name, long value) {
     }
 
     final void set(CharSequence name, String value) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(value, ""value"");
         final int h = normalizedName.hashCode();
         final int i = index(h);
@@ -647,7 +665,7 @@ final void set(CharSequence name, String value) {
     }
 
     final void set(CharSequence name, Iterable<String> values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
 
         final int h = normalizedName.hashCode();
@@ -661,7 +679,7 @@ final void set(CharSequence name, Iterable<String> values) {
     }
 
     final void set(CharSequence name, String... values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
 
         final int h = normalizedName.hashCode();
@@ -739,7 +757,7 @@ final void setObject(CharSequence name, Object value) {
     }
 
     final void setObject(CharSequence name, Iterable<?> values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
 
         final int h = normalizedName.hashCode();
@@ -753,7 +771,7 @@ final void setObject(CharSequence name, Iterable<?> values) {
     }
 
     final void setObject(CharSequence name, Object... values) {
-        final AsciiString normalizedName = normalizeName(name);
+        final AsciiString normalizedName = HttpHeaderNames.of(name);
         requireNonNull(values, ""values"");
 
         final int h = normalizedName.hashCode();
@@ -813,11 +831,6 @@ final void clear() {
         size = 0;
     }
 
-    private static AsciiString normalizeName(CharSequence name) {
-        checkArgument(requireNonNull(name, ""name"").length() > 0, ""name is empty."");
-        return HttpHeaderNames.of(name);
-    }
-
     private static void requireNonNullElement(Object values, @Nullable Object e) {
         if (e == null) {
             throw new NullPointerException(""values contains null: "" + values);
@@ -829,11 +842,44 @@ private int index(int hash) {
     }
 
     private void add0(int h, int i, AsciiString name, String value) {
+        validateValue(value);
         // Update the hash table.
         entries[i] = new HeaderEntry(h, name, value, entries[i]);
         ++size;
     }
 
+    private static void validateValue(String value) {
+        final int valueLength = value.length();
+        for (int i = 0; i < valueLength; i++) {
+            final char ch = value.charAt(i);
+            if ((ch & PROHIBITED_VALUE_CHAR_MASK) != 0) { // ch >= 16
+                continue;
+            }
+
+            // ch < 16
+            if (PROHIBITED_VALUE_CHARS.get(ch)) {
+                throw new IllegalArgumentException(malformedHeaderValueMessage(value));
+            }
+        }
+    }
+
+    private static String malformedHeaderValueMessage(String value) {
+        final StringBuilder buf = new StringBuilder(IntMath.saturatedAdd(value.length(), 64));
+        buf.append(""malformed header value: "");
+
+        final int valueLength = value.length();
+        for (int i = 0; i < valueLength; i++) {
+            final char ch = value.charAt(i);
+            if (PROHIBITED_VALUE_CHARS.get(ch)) {
+                buf.append(PROHIBITED_VALUE_CHAR_NAMES[ch]);
+            } else {
+                buf.append(ch);
+            }
+        }
+
+        return buf.toString();
+    }
+
     private boolean addFast(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {
         if (!(headers instanceof HttpHeadersBase)) {
             return false;
diff --git a/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java b/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
index 3b408409615..689affcbc41 100644
--- a/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
+++ b/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
@@ -673,7 +673,7 @@ private static CharSequenceMap toLowercaseMap(Iterator<? extends CharSequence> v
         final CharSequenceMap result = new CharSequenceMap(arraySizeHint);
 
         while (valuesIter.hasNext()) {
-            final AsciiString lowerCased = HttpHeaderNames.of(valuesIter.next()).toLowerCase();
+            final AsciiString lowerCased = AsciiString.of(valuesIter.next()).toLowerCase();
             try {
                 int index = lowerCased.forEachByte(FIND_COMMA);
                 if (index != -1) {
diff --git a/core/src/test/java/com/linecorp/armeria/common/HttpHeaderNamesTest.java b/core/src/test/java/com/linecorp/armeria/common/HttpHeaderNamesTest.java
index 5a4befcd058..6c23642135c 100644
--- a/core/src/test/java/com/linecorp/armeria/common/HttpHeaderNamesTest.java
+++ b/core/src/test/java/com/linecorp/armeria/common/HttpHeaderNamesTest.java
@@ -16,15 +16,16 @@
 package com.linecorp.armeria.common;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import io.netty.util.AsciiString;
 
-public class HttpHeaderNamesTest {
+class HttpHeaderNamesTest {
 
     @Test
-    public void testOfAsciiString() {
+    void testOfAsciiString() {
         // Should produce a lower-cased AsciiString.
         final AsciiString mixedCased = AsciiString.of(""Foo"");
         assertThat((Object) HttpHeaderNames.of(mixedCased)).isNotSameAs(mixedCased);
@@ -39,11 +40,66 @@ public void testOfAsciiString() {
     }
 
     @Test
-    public void testOfCharSequence() {
+    void testOfCharSequence() {
         // Should produce a lower-cased AsciiString.
         assertThat((Object) HttpHeaderNames.of(""Foo"")).isEqualTo(AsciiString.of(""foo""));
 
         // Should reuse known header name instances.
         assertThat((Object) HttpHeaderNames.of(""date"")).isSameAs(HttpHeaderNames.DATE);
     }
+
+    @Test
+    void pseudoHeaderNameValidation() {
+        // Known pseudo header names should pass validation.
+        assertThat((Object) HttpHeaderNames.of("":method"")).isSameAs(HttpHeaderNames.METHOD);
+        assertThat((Object) HttpHeaderNames.of("":scheme"")).isSameAs(HttpHeaderNames.SCHEME);
+        assertThat((Object) HttpHeaderNames.of("":authority"")).isSameAs(HttpHeaderNames.AUTHORITY);
+        assertThat((Object) HttpHeaderNames.of("":path"")).isSameAs(HttpHeaderNames.PATH);
+        assertThat((Object) HttpHeaderNames.of("":status"")).isSameAs(HttpHeaderNames.STATUS);
+
+        // However, any other headers that start with `:` should fail.
+        assertThatThrownBy(() -> HttpHeaderNames.of("":foo""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: :foo"");
+    }
+
+    @Test
+    void headerNameValidation() {
+        assertThatThrownBy(() -> HttpHeaderNames.of(""""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <EMPTY>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\u0000""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <NUL>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\t""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <TAB>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\n""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <LF>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\u000B""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <VT>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\f""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <FF>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""\r""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <CR>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of("" ""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <SP>"");
+        assertThatThrownBy(() -> HttpHeaderNames.of("",""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: ,"");
+        assertThatThrownBy(() -> HttpHeaderNames.of("":""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: :"");
+        assertThatThrownBy(() -> HttpHeaderNames.of("";""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: ;"");
+        assertThatThrownBy(() -> HttpHeaderNames.of(""=""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: ="");
+    }
 }
diff --git a/core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java b/core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java
index 13c7b1b62a8..d6898077c69 100644
--- a/core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java
+++ b/core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java
@@ -31,7 +31,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 import java.net.URI;
 import java.util.Iterator;
@@ -39,17 +39,17 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import com.google.common.collect.ImmutableList;
 
 import io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName;
 import io.netty.util.AsciiString;
 
-public class HttpHeadersBaseTest {
+class HttpHeadersBaseTest {
 
     @Test
-    public void testEqualsInsertionOrderSameHeaderName() {
+    void testEqualsInsertionOrderSameHeaderName() {
         final HttpHeadersBase h1 = newEmptyHeaders();
         h1.add(""a"", ""b"");
         h1.add(""a"", ""c"");
@@ -60,7 +60,7 @@ public void testEqualsInsertionOrderSameHeaderName() {
     }
 
     @Test
-    public void testEqualsInsertionOrderDifferentHeaderNames() {
+    void testEqualsInsertionOrderDifferentHeaderNames() {
         final HttpHeadersBase h1 = newEmptyHeaders();
         h1.add(""a"", ""b"");
         h1.add(""c"", ""d"");
@@ -73,7 +73,7 @@ public void testEqualsInsertionOrderDifferentHeaderNames() {
     // Tests forked from io.netty.handler.codec.DefaultHeadersTest
 
     @Test
-    public void addShouldIncreaseAndRemoveShouldDecreaseTheSize() {
+    void addShouldIncreaseAndRemoveShouldDecreaseTheSize() {
         final HttpHeadersBase headers = newEmptyHeaders();
         assertThat(headers.size()).isEqualTo(0);
         headers.add(""name1"", ""value1"", ""value2"");
@@ -93,7 +93,7 @@ public void addShouldIncreaseAndRemoveShouldDecreaseTheSize() {
     }
 
     @Test
-    public void afterClearHeadersShouldBeEmpty() {
+    void afterClearHeadersShouldBeEmpty() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name2"", ""value2"");
@@ -106,7 +106,7 @@ public void afterClearHeadersShouldBeEmpty() {
     }
 
     @Test
-    public void removingANameForASecondTimeShouldReturnFalse() {
+    void removingANameForASecondTimeShouldReturnFalse() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name2"", ""value2"");
@@ -115,7 +115,7 @@ public void removingANameForASecondTimeShouldReturnFalse() {
     }
 
     @Test
-    public void multipleValuesPerNameShouldBeAllowed() {
+    void multipleValuesPerNameShouldBeAllowed() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name"", ""value1"");
         headers.add(""name"", ""value2"");
@@ -128,7 +128,7 @@ public void multipleValuesPerNameShouldBeAllowed() {
     }
 
     @Test
-    public void multipleValuesPerNameIteratorWithOtherNames() {
+    void multipleValuesPerNameIteratorWithOtherNames() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name1"", ""value2"");
@@ -146,7 +146,7 @@ public void multipleValuesPerNameIteratorWithOtherNames() {
     }
 
     @Test
-    public void multipleValuesPerNameIterator() {
+    void multipleValuesPerNameIterator() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name1"", ""value2"");
@@ -157,7 +157,7 @@ public void multipleValuesPerNameIterator() {
     }
 
     @Test
-    public void multipleValuesPerNameIteratorEmpty() {
+    void multipleValuesPerNameIteratorEmpty() {
         final HttpHeadersBase headers = newEmptyHeaders();
         assertThat(headers.valueIterator(""name"")).isExhausted();
         assertThatThrownBy(() -> headers.valueIterator(""name"").next())
@@ -165,7 +165,7 @@ public void multipleValuesPerNameIteratorEmpty() {
     }
 
     @Test
-    public void testContains() {
+    void testContains() {
         final HttpHeadersBase headers = newEmptyHeaders();
 
         headers.addLong(""long"", Long.MAX_VALUE);
@@ -200,7 +200,7 @@ public void testContains() {
     }
 
     @Test
-    public void testCopy() throws Exception {
+    void testCopy() throws Exception {
         HttpHeadersBase headers = newEmptyHeaders();
         headers.addLong(""long"", Long.MAX_VALUE);
         headers.addInt(""int"", Integer.MIN_VALUE);
@@ -239,7 +239,7 @@ public void testCopy() throws Exception {
     }
 
     @Test
-    public void canMixConvertedAndNormalValues() {
+    void canMixConvertedAndNormalValues() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name"", ""value"");
         headers.addInt(""name"", 100);
@@ -251,7 +251,7 @@ public void canMixConvertedAndNormalValues() {
     }
 
     @Test
-    public void testGetAndRemove() {
+    void testGetAndRemove() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name2"", ""value2"", ""value3"");
@@ -267,14 +267,14 @@ public void testGetAndRemove() {
     }
 
     @Test
-    public void whenNameContainsMultipleValuesGetShouldReturnTheFirst() {
+    void whenNameContainsMultipleValuesGetShouldReturnTheFirst() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"", ""value2"");
         assertThat(headers.get(""name1"")).isEqualTo(""value1"");
     }
 
     @Test
-    public void getWithDefaultValueWorks() {
+    void getWithDefaultValueWorks() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
 
@@ -283,7 +283,7 @@ public void getWithDefaultValueWorks() {
     }
 
     @Test
-    public void setShouldOverWritePreviousValue() {
+    void setShouldOverWritePreviousValue() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.set(""name"", ""value1"");
         headers.set(""name"", ""value2"");
@@ -294,7 +294,7 @@ public void setShouldOverWritePreviousValue() {
     }
 
     @Test
-    public void setAllShouldOverwriteSomeAndLeaveOthersUntouched() {
+    void setAllShouldOverwriteSomeAndLeaveOthersUntouched() {
         final HttpHeadersBase h1 = newEmptyHeaders();
 
         h1.add(""name1"", ""value1"");
@@ -319,7 +319,7 @@ public void setAllShouldOverwriteSomeAndLeaveOthersUntouched() {
     }
 
     @Test
-    public void headersWithSameNamesAndValuesShouldBeEquivalent() {
+    void headersWithSameNamesAndValuesShouldBeEquivalent() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name1"", ""value1"");
         headers1.add(""name2"", ""value2"");
@@ -340,7 +340,7 @@ public void headersWithSameNamesAndValuesShouldBeEquivalent() {
     }
 
     @Test
-    public void emptyHeadersShouldBeEqual() {
+    void emptyHeadersShouldBeEqual() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         final HttpHeadersBase headers2 = newEmptyHeaders();
         assertThat(headers2).isEqualTo(headers1);
@@ -348,7 +348,7 @@ public void emptyHeadersShouldBeEqual() {
     }
 
     @Test
-    public void headersWithSameNamesButDifferentValuesShouldNotBeEquivalent() {
+    void headersWithSameNamesButDifferentValuesShouldNotBeEquivalent() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name1"", ""value1"");
         final HttpHeadersBase headers2 = newEmptyHeaders();
@@ -357,7 +357,7 @@ public void headersWithSameNamesButDifferentValuesShouldNotBeEquivalent() {
     }
 
     @Test
-    public void subsetOfHeadersShouldNotBeEquivalent() {
+    void subsetOfHeadersShouldNotBeEquivalent() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name1"", ""value1"");
         headers1.add(""name2"", ""value2"");
@@ -367,7 +367,7 @@ public void subsetOfHeadersShouldNotBeEquivalent() {
     }
 
     @Test
-    public void headersWithDifferentNamesAndValuesShouldNotBeEquivalent() {
+    void headersWithDifferentNamesAndValuesShouldNotBeEquivalent() {
         final HttpHeadersBase h1 = newEmptyHeaders();
         h1.set(""name1"", ""value1"");
         final HttpHeadersBase h2 = newEmptyHeaders();
@@ -378,15 +378,15 @@ public void headersWithDifferentNamesAndValuesShouldNotBeEquivalent() {
         assertThat(h2).isEqualTo(h2);
     }
 
-    @Test(expected = NoSuchElementException.class)
-    public void iterateEmptyHeadersShouldThrow() {
+    @Test
+    void iterateEmptyHeadersShouldThrow() {
         final Iterator<Map.Entry<AsciiString, String>> iterator = newEmptyHeaders().iterator();
         assertThat(iterator.hasNext()).isFalse();
-        iterator.next();
+        assertThatThrownBy(iterator::next).isInstanceOf(NoSuchElementException.class);
     }
 
     @Test
-    public void iteratorShouldReturnAllNameValuePairs() {
+    void iteratorShouldReturnAllNameValuePairs() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name1"", ""value1"", ""value2"");
         headers1.add(""name2"", ""value3"");
@@ -403,7 +403,7 @@ public void iteratorShouldReturnAllNameValuePairs() {
     }
 
     @Test
-    public void iteratorSetShouldFail() {
+    void iteratorSetShouldFail() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"", ""value2"", ""value3"");
         headers.add(""name2"", ""value4"");
@@ -414,7 +414,7 @@ public void iteratorSetShouldFail() {
     }
 
     @Test
-    public void testEntryEquals() {
+    void testEntryEquals() {
         final HttpHeadersBase nameValue = newEmptyHeaders();
         nameValue.add(""name"", ""value"");
         final HttpHeadersBase nameValueCopy = newEmptyHeaders();
@@ -444,13 +444,13 @@ public void testEntryEquals() {
     }
 
     @Test
-    public void getAllReturnsEmptyListForUnknownName() {
+    void getAllReturnsEmptyListForUnknownName() {
         final HttpHeadersBase headers = newEmptyHeaders();
         assertThat(headers.getAll(""noname"").size()).isEqualTo(0);
     }
 
     @Test
-    public void setHeadersShouldClearAndOverwrite() {
+    void setHeadersShouldClearAndOverwrite() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name"", ""value"");
 
@@ -463,7 +463,7 @@ public void setHeadersShouldClearAndOverwrite() {
     }
 
     @Test
-    public void setHeadersShouldOnlyOverwriteHeaders() {
+    void setHeadersShouldOnlyOverwriteHeaders() {
         final HttpHeadersBase headers1 = newEmptyHeaders();
         headers1.add(""name"", ""value"");
         headers1.add(""name1"", ""value1"");
@@ -481,14 +481,14 @@ public void setHeadersShouldOnlyOverwriteHeaders() {
         assertThat(expected).isEqualTo(headers1);
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void testAddSelf() {
+    @Test
+    void testAddSelf() {
         final HttpHeadersBase headers = newEmptyHeaders();
-        headers.add(headers);
+        assertThatThrownBy(() -> headers.add(headers)).isInstanceOf(IllegalArgumentException.class);
     }
 
     @Test
-    public void testSetSelfIsNoOp() {
+    void testSetSelfIsNoOp() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name"", ""value"");
         headers.set(headers);
@@ -496,7 +496,7 @@ public void testSetSelfIsNoOp() {
     }
 
     @Test
-    public void testToString() {
+    void testToString() {
         HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""name1"", ""value1"");
         headers.add(""name1"", ""value2"");
@@ -527,7 +527,7 @@ public void testToString() {
     }
 
     @Test
-    public void testNotThrowWhenConvertFails() {
+    void testNotThrowWhenConvertFails() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.set(""name1"", """");
         assertThat(headers.getInt(""name1"")).isNull();
@@ -546,10 +546,30 @@ public void testNotThrowWhenConvertFails() {
         assertThat(headers.getTimeMillis(""name1"", Long.MAX_VALUE)).isEqualTo(Long.MAX_VALUE);
     }
 
+    @Test
+    void valueValidation() {
+        final HttpHeadersBase headers = newEmptyHeaders();
+        assertThatThrownBy(() -> headers.add(""foo"", ""\u0000""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header value: <NUL>"");
+        assertThatThrownBy(() -> headers.add(""foo"", ""\n""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header value: <LF>"");
+        assertThatThrownBy(() -> headers.add(""foo"", ""\u000B""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header value: <VT>"");
+        assertThatThrownBy(() -> headers.add(""foo"", ""\f""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header value: <FF>"");
+        assertThatThrownBy(() -> headers.add(""foo"", ""\r""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header value: <CR>"");
+    }
+
     // Tests forked from io.netty.handler.codec.http.HttpHeadersTest
 
     @Test
-    public void testGetOperations() {
+    void testGetOperations() {
         final HttpHeadersBase headers = newEmptyHeaders();
         headers.add(""Foo"", ""1"");
         headers.add(""Foo"", ""2"");
@@ -560,33 +580,35 @@ public void testGetOperations() {
         assertThat(values).containsExactly(""1"", ""2"");
     }
 
-    @Test(expected = NullPointerException.class)
-    public void testSetNullHeaderValue() {
-        final HttpHeadersBase headers = newEmptyHeaders();
-        headers.set(""test"", (String) null);
+    @Test
+    void testSetNullHeaderValue() {
+        assertThatThrownBy(() -> newEmptyHeaders().set(""test"", (String) null))
+                .isInstanceOf(NullPointerException.class);
     }
 
     // Tests forked from io.netty.handler.codec.http2.DefaultHttp2HeadersTest
 
-    @Test(expected = NullPointerException.class)
-    public void nullHeaderNameNotAllowed() {
-        newEmptyHeaders().add(null, ""foo"");
+    @Test
+    void nullHeaderNameNotAllowed() {
+        assertThatThrownBy(() -> newEmptyHeaders().add(null, ""foo"")).isInstanceOf(NullPointerException.class);
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void emptyHeaderNameNotAllowed() {
-        newEmptyHeaders().add("""", ""foo"");
+    @Test
+    void emptyHeaderNameNotAllowed() {
+        assertThatThrownBy(() -> newEmptyHeaders().add("""", ""foo""))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessageContaining(""malformed header name: <EMPTY>"");
     }
 
     @Test
-    public void testPseudoHeadersMustComeFirstWhenIterating() {
+    void testPseudoHeadersMustComeFirstWhenIterating() {
         final HttpHeadersBase headers = newHttp2Headers();
         verifyPseudoHeadersFirst(headers);
         verifyAllPseudoHeadersPresent(headers);
     }
 
     @Test
-    public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {
+    void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {
         final HttpHeadersBase headers = newHttp2Headers();
         final HttpHeadersBase nonPseudoHeaders = newEmptyHeaders();
         for (Map.Entry<AsciiString, String> entry : headers) {
@@ -614,7 +636,7 @@ public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {
     }
 
     @Test
-    public void testPseudoHeadersWithClearDoesNotLeak() {
+    void testPseudoHeadersWithClearDoesNotLeak() {
         final HttpHeadersBase headers = newHttp2Headers();
 
         assertThat(headers.isEmpty()).isFalse();
@@ -643,7 +665,7 @@ public void testPseudoHeadersWithClearDoesNotLeak() {
     }
 
     @Test
-    public void testSetOrdersPseudoHeadersCorrectly() {
+    void testSetOrdersPseudoHeadersCorrectly() {
         final HttpHeadersBase headers = newHttp2Headers();
         final HttpHeadersBase other = newEmptyHeaders();
         other.add(""name2"", ""value2"");
@@ -663,7 +685,7 @@ public void testSetOrdersPseudoHeadersCorrectly() {
     }
 
     @Test
-    public void testHeaderNameNormalization() {
+    void testHeaderNameNormalization() {
         final HttpHeadersBase headers = newHttp2Headers();
         headers.add(""Foo"", ""bar"");
         assertThat(headers.getAll(""foo"")).containsExactly(""bar"");
@@ -673,7 +695,7 @@ public void testHeaderNameNormalization() {
     }
 
     @Test
-    public void testClearResetsPseudoHeaderDivision() {
+    void testClearResetsPseudoHeaderDivision() {
         final HttpHeadersBase http2Headers = newHttp2Headers();
         http2Headers.method(HttpMethod.POST);
         http2Headers.set(""some"", ""value"");
@@ -684,7 +706,7 @@ public void testClearResetsPseudoHeaderDivision() {
     }
 
     @Test
-    public void testContainsNameAndValue() {
+    void testContainsNameAndValue() {
         final HttpHeadersBase headers = newHttp2Headers();
         assertThat(headers.contains(""name1"", ""value2"")).isTrue();
         assertThat(headers.contains(""name1"", ""Value2"")).isFalse();
@@ -693,7 +715,7 @@ public void testContainsNameAndValue() {
     }
 
     @Test
-    public void testUri() {
+    void testUri() {
         final HttpHeadersBase headers = newHttp2Headers();
         assertThat(headers.uri()).isEqualTo(URI.create(""https://netty.io/index.html""));
     }
diff --git a/core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java b/core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java
new file mode 100644
index 00000000000..807102e7b64
--- /dev/null
+++ b/core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright 2016 LINE Corporation
+ *
+ * LINE Corporation licenses this file to you under the Apache License,
+ * version 2.0 (the ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at:
+ *
+ *   https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+package com.linecorp.armeria.server;
+
+import static com.linecorp.armeria.common.SessionProtocol.H1;
+import static com.linecorp.armeria.common.SessionProtocol.H1C;
+import static com.linecorp.armeria.common.SessionProtocol.H2;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.Timeout;
+import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.api.extension.RegisterExtension;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.ArgumentsProvider;
+import org.junit.jupiter.params.provider.ArgumentsSource;
+
+import com.linecorp.armeria.client.ClientFactory;
+import com.linecorp.armeria.client.WebClient;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.testing.junit.server.ServerExtension;
+
+import io.netty.handler.codec.http.QueryStringDecoder;
+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
+
+@Timeout(10000)
+class HttpServerHeaderValidationTest {
+
+    static final ClientFactory clientFactory = ClientFactory.builder().sslContextCustomizer(scb -> {
+        scb.trustManager(InsecureTrustManagerFactory.INSTANCE);
+    }).build();
+
+    @RegisterExtension
+    static final ServerExtension server = new ServerExtension() {
+        @Override
+        protected void configure(ServerBuilder sb) throws Exception {
+            sb.http(0);
+            sb.https(0);
+            sb.tlsSelfSigned();
+
+            sb.route().get(""/headers-custom"")
+              .build((ctx, req) -> {
+                  final String param = new QueryStringDecoder(req.path()).parameters()
+                                                                         .get(""param"").get(0);
+                  return HttpResponse.of(
+                          ResponseHeaders.of(HttpStatus.OK, ""server-header"", param),
+                          HttpData.ofUtf8(""OK""));
+              });
+        }
+    };
+
+    @AfterAll
+    static void closeClientFactory() {
+        clientFactory.close();
+    }
+
+    @ParameterizedTest
+    @ArgumentsSource(WebClientProvider.class)
+    void malformedHeaderValue(WebClient client) throws Exception {
+        final String payloadRaw = ""my-header\r\nnot-a-header: should_be_illegal"";
+        final String payload = URLEncoder.encode(payloadRaw, StandardCharsets.US_ASCII.name());
+        final String path = ""/headers-custom?param="" + payload;
+        final AggregatedHttpResponse res = client.get(path).aggregate().get();
+        assertThat(res.status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
+        assertThat(res.headers().get(""not-a-header"")).isNull();
+    }
+
+    private static class WebClientProvider implements ArgumentsProvider {
+        @Override
+        public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
+            return Stream.of(H1C, H1, H2C, H2)
+                         .map(protocol -> Arguments.of(WebClient.of(
+                                 clientFactory,
+                                 protocol.uriText() + ""://127.0.0.1:"" +
+                                 (protocol.isTls() ? server.httpsPort() : server.httpPort()))));
+        }
+    }
+}"
GHSA-6pcc-3rfx-4gpm,"From e598eb43d418744c4dbf62f647dd2381c9ce9387 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Filip=20Jirs=C3=A1k?= <filip@jirsak.org>
Date: Sun, 1 Jul 2018 11:27:15 +0200
Subject: [PATCH] #48 Validate QName inputs - throw IllegalArgumentException
 when qualified name contains disallowed character.

---
 src/main/java/org/dom4j/Namespace.java        |   4 +
 src/main/java/org/dom4j/QName.java            | 101 ++++++++++++++++++
 src/main/java/org/dom4j/tree/QNameCache.java  |   2 +
 src/test/java/org/dom4j/AllowedCharsTest.java |  78 ++++++++++++++
 4 files changed, 185 insertions(+)
 create mode 100644 src/test/java/org/dom4j/AllowedCharsTest.java

diff --git a/src/main/java/org/dom4j/Namespace.java b/src/main/java/org/dom4j/Namespace.java
index fd123b93..8f948ad8 100644
--- a/src/main/java/org/dom4j/Namespace.java
+++ b/src/main/java/org/dom4j/Namespace.java
@@ -49,6 +49,10 @@ public class Namespace extends AbstractNode {
     public Namespace(String prefix, String uri) {
         this.prefix = (prefix != null) ? prefix : """";
         this.uri = (uri != null) ? uri : """";
+
+        if (!this.prefix.isEmpty()) {
+            QName.validateNCName(this.prefix);
+        }
     }
 
     /**
diff --git a/src/main/java/org/dom4j/QName.java b/src/main/java/org/dom4j/QName.java
index 9ac0d4d8..e9b2170e 100644
--- a/src/main/java/org/dom4j/QName.java
+++ b/src/main/java/org/dom4j/QName.java
@@ -11,6 +11,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.regex.Pattern;
 
 import org.dom4j.tree.QNameCache;
 import org.dom4j.util.SingletonStrategy;
@@ -21,11 +22,86 @@
  * object is immutable.
  *
  * @author <a href=""mailto:jstrachan@apache.org"">James Strachan </a>
+ * @author Filip Jirsák
  */
 public class QName implements Serializable {
     /** The Singleton instance */
     private static SingletonStrategy<QNameCache> singleton = null;
 
+    /**
+     * {@code NameStartChar} without colon.
+     *
+     * <pre>NameStartChar	::=	"":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]</pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml/#sec-common-syn"">XML 1.0 – 2.3 Common Syntactic Constructs</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn"">XML 1.1 – 2.3 Common Syntactic Constructs</a>
+     */
+    private static final String NAME_START_CHAR = ""_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD"";
+
+    /**
+     * {@code NameChar} without colon.
+     *
+     * <pre>NameChar	::=	NameStartChar | ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]</pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml/#sec-common-syn"">XML 1.0 – 2.3 Common Syntactic Constructs</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn"">XML 1.1 – 2.3 Common Syntactic Constructs</a>
+     */
+    private static final String NAME_CHAR = NAME_START_CHAR + ""-.0-9\u00B7\u0300-\u036F\u203F-\u2040"";
+
+    /**
+     * {@code NCName}
+     *
+     * <pre>
+     * NCName		::=	NCNameStartChar NCNameChar*	(An XML Name, minus the "":"")
+     * NCNameChar	::=	NameChar -':'
+     * NCNameStartChar	::=	NameStartChar -':'
+     * </pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml-names/#ns-qualnames"">Namespaces in XML 1.0 – 4 Qualified Names</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml-names11-20060816/#ns-qualnames"">Namespaces in XML 1.1 – 4 Qualified Names</a>
+     */
+    private static final String NCNAME = ""[""+NAME_START_CHAR+""][""+NAME_CHAR+""]*"";
+
+    /**
+     * Regular expression for {@code Name} (with colon).
+     *
+     * <pre>Name	::=	NameStartChar (NameChar)*</pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml/#sec-common-syn"">XML 1.0 – 2.3 Common Syntactic Constructs</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn"">XML 1.1 – 2.3 Common Syntactic Constructs</a>
+     */
+    private static final Pattern RE_NAME = Pattern.compile(""[:""+NAME_START_CHAR+""][:""+NAME_CHAR+""]*"");
+
+    /**
+     * Regular expression for {@code NCName}.
+     *
+     * <pre>
+     * NCName		::=	NCNameStartChar NCNameChar*	(An XML Name, minus the "":"")
+     * NCNameChar	::=	NameChar -':'
+     * NCNameStartChar	::=	NameStartChar -':'
+     * </pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml-names/#ns-qualnames"">Namespaces in XML 1.0 – 4 Qualified Names</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml-names11-20060816/#ns-qualnames"">Namespaces in XML 1.1 – 4 Qualified Names</a>
+     */
+    private static final Pattern RE_NCNAME = Pattern.compile(NCNAME);
+
+    /**
+     * Regular expression for {@code QName}.
+     *
+     * <pre>
+     * QName		::=	PrefixedName | UnprefixedName
+     * PrefixedName	::=	Prefix ':' LocalPart
+     * UnprefixedName	::=	LocalPart
+     * Prefix		::=	NCName
+     * LocalPart	::=	NCName
+     * </pre>
+     *
+     * @see <a href=""https://www.w3.org/TR/xml-names/#ns-qualnames"">Namespaces in XML 1.0 – 4 Qualified Names</a>
+     * @see <a href=""https://www.w3.org/TR/2006/REC-xml-names11-20060816/#ns-qualnames"">Namespaces in XML 1.1 – 4 Qualified Names</a>
+     */
+    private static final Pattern RE_QNAME = Pattern.compile(""(?:""+NCNAME+"":)?""+NCNAME);
+
     static {
         try {
             String defaultSingletonClass = ""org.dom4j.util.SimpleSingleton"";
@@ -71,6 +147,11 @@ public QName(String name, Namespace namespace) {
         this.name = (name == null) ? """" : name;
         this.namespace = (namespace == null) ? Namespace.NO_NAMESPACE
                 : namespace;
+        if (this.namespace.equals(Namespace.NO_NAMESPACE)) {
+            validateName(this.name);
+        } else {
+            validateNCName(this.name);
+        }
     }
 
     public QName(String name, Namespace namespace, String qualifiedName) {
@@ -78,6 +159,8 @@ public QName(String name, Namespace namespace, String qualifiedName) {
         this.qualifiedName = qualifiedName;
         this.namespace = (namespace == null) ? Namespace.NO_NAMESPACE
                 : namespace;
+        validateNCName(this.name);
+        validateQName(this.qualifiedName);
     }
 
     public static QName get(String name) {
@@ -251,6 +334,24 @@ private static QNameCache getCache() {
         QNameCache cache = singleton.instance();
         return cache;
     }
+
+    private static void validateName(String name) {
+        if (!RE_NAME.matcher(name).matches()) {
+            throw new IllegalArgumentException(String.format(""Illegal character in name: '%s'."", name));
+        }
+    }
+
+    protected static void validateNCName(String ncname) {
+        if (!RE_NCNAME.matcher(ncname).matches()) {
+            throw new IllegalArgumentException(String.format(""Illegal character in local name: '%s'."", ncname));
+        }
+    }
+
+    private static void validateQName(String qname) {
+        if (!RE_QNAME.matcher(qname).matches()) {
+            throw new IllegalArgumentException(String.format(""Illegal character in qualified name: '%s'."", qname));
+        }
+    }
 }
 
 
diff --git a/src/main/java/org/dom4j/tree/QNameCache.java b/src/main/java/org/dom4j/tree/QNameCache.java
index 330f3794..d37e8aaa 100644
--- a/src/main/java/org/dom4j/tree/QNameCache.java
+++ b/src/main/java/org/dom4j/tree/QNameCache.java
@@ -152,6 +152,8 @@ public QName get(String qualifiedName, String uri) {
 
         if (index < 0) {
             return get(qualifiedName, Namespace.get(uri));
+        } else if (index == 0){
+            throw new IllegalArgumentException(""Qualified name cannot start with ':'."");
         } else {
             String name = qualifiedName.substring(index + 1);
             String prefix = qualifiedName.substring(0, index);
diff --git a/src/test/java/org/dom4j/AllowedCharsTest.java b/src/test/java/org/dom4j/AllowedCharsTest.java
new file mode 100644
index 00000000..20c1de0b
--- /dev/null
+++ b/src/test/java/org/dom4j/AllowedCharsTest.java
@@ -0,0 +1,78 @@
+package org.dom4j;
+
+import org.testng.annotations.Test;
+
+/**
+ * @author Filip Jirsák
+ */
+public class AllowedCharsTest {
+    @Test
+    public void localName() {
+        QName.get(""element"");
+        QName.get("":element"");
+        QName.get(""elem:ent"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void localNameFail() {
+        QName.get(""!element"");
+    }
+
+    @Test
+    public void qname() {
+        QName.get(""element"", ""http://example.com/namespace"");
+        QName.get(""ns:element"", ""http://example.com/namespace"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void qnameFail1() {
+        QName.get(""ns:elem:ent"", ""http://example.com/namespace"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void qnameFail2() {
+        QName.get("":nselement"", ""http://example.com/namespace"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void createElementLT() {
+        DocumentHelper.createElement(""element<name"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void createElementGT() {
+        DocumentHelper.createElement(""element>name"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void createElementAmpersand() {
+        DocumentHelper.createElement(""element&name"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void addElement() {
+        Element root = DocumentHelper.createElement(""root"");
+        root.addElement(""element>name"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void addElementQualified() {
+        Element root = DocumentHelper.createElement(""root"");
+        root.addElement(""element>name"", ""http://example.com/namespace"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void addElementQualifiedPrefix() {
+        Element root = DocumentHelper.createElement(""root"");
+        root.addElement(""ns:element>name"", ""http://example.com/namespace"");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void addElementPrefix() {
+        Element root = DocumentHelper.createElement(""root"");
+        root.addElement(""ns>:element"", ""http://example.com/namespace"");
+    }
+
+    //TODO It is illegal to create element or attribute with namespace prefix and empty namespace IRI.
+    //See https://www.w3.org/TR/2006/REC-xml-names11-20060816/#scoping
+}"
GHSA-h972-cwjv-2v39,"From da06fd471cea79123821c778228eeb08e1cedcc7 Mon Sep 17 00:00:00 2001
From: Jesse Glick <jglick@cloudbees.com>
Date: Thu, 28 Sep 2017 10:15:14 -0400
Subject: [PATCH] [SECURITY-611] Do not export hidden projects via
 Executor.currentExecutable.

---
 core/src/main/java/hudson/model/Executor.java | 14 +++++++--
 .../java/hudson/model/queue/WorkUnit.java     |  2 --
 .../test/java/hudson/model/ExecutorTest.java  | 31 +++++++++++++++++--
 3 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/core/src/main/java/hudson/model/Executor.java b/core/src/main/java/hudson/model/Executor.java
index 83345726be0b..2d2d6d1f0b5c 100644
--- a/core/src/main/java/hudson/model/Executor.java
+++ b/core/src/main/java/hudson/model/Executor.java
@@ -64,12 +64,14 @@
 import java.util.logging.Logger;
 
 import static hudson.model.queue.Executables.*;
+import hudson.security.AccessControlled;
 import java.util.Collection;
 import static java.util.logging.Level.*;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import jenkins.model.queue.AsynchronousExecution;
 import org.kohsuke.accmod.Restricted;
+import org.kohsuke.accmod.restrictions.DoNotUse;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 
 
@@ -483,7 +485,6 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
      * @return
      *      null if the executor is idle.
      */
-    @Exported
     public @CheckForNull Queue.Executable getCurrentExecutable() {
         lock.readLock().lock();
         try {
@@ -492,6 +493,16 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
             lock.readLock().unlock();
         }
     }
+
+    /**
+     * Same as {@link #getCurrentExecutable} but checks {@link Item#READ}.
+     */
+    @Exported(name=""currentExecutable"")
+    @Restricted(DoNotUse.class) // for exporting only
+    public Queue.Executable getCurrentExecutableForApi() {
+        Executable candidate = getCurrentExecutable();
+        return candidate instanceof AccessControlled && ((AccessControlled) candidate).hasPermission(Item.READ) ? candidate : null;
+    }
     
     /**
      * Returns causes of interruption.
@@ -510,7 +521,6 @@ public void completedAsynchronous(@CheckForNull Throwable error) {
      * @return
      *      null if the executor is idle.
      */
-    @Exported
     public WorkUnit getCurrentWorkUnit() {
         lock.readLock().lock();
         try {
diff --git a/core/src/main/java/hudson/model/queue/WorkUnit.java b/core/src/main/java/hudson/model/queue/WorkUnit.java
index 68a3d7fce78f..c54db401d495 100644
--- a/core/src/main/java/hudson/model/queue/WorkUnit.java
+++ b/core/src/main/java/hudson/model/queue/WorkUnit.java
@@ -31,7 +31,6 @@
 import hudson.model.Run;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
-import org.kohsuke.stapler.export.ExportedBean;
 
 /**
  * Represents a unit of hand-over to {@link Executor} from {@link Queue}.
@@ -39,7 +38,6 @@
  * @author Kohsuke Kawaguchi
  * @since 1.377
  */
-@ExportedBean
 public final class WorkUnit {
     /**
      * Task to be executed.
diff --git a/test/src/test/java/hudson/model/ExecutorTest.java b/test/src/test/java/hudson/model/ExecutorTest.java
index d288c3de63f5..e13ff1c345a5 100644
--- a/test/src/test/java/hudson/model/ExecutorTest.java
+++ b/test/src/test/java/hudson/model/ExecutorTest.java
@@ -1,6 +1,6 @@
 package hudson.model;
 
-import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
 
@@ -21,6 +21,8 @@
 import java.io.IOException;
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
+import jenkins.model.Jenkins;
+import org.jvnet.hudson.test.MockAuthorizationStrategy;
 import org.jvnet.hudson.test.TestExtension;
 
 public class ExecutorTest {
@@ -117,6 +119,31 @@ public void disconnectCause() throws Exception {
         assertThat(log, containsString(""Disconnected by Johnny : Taking offline to break your buil""));
     }
 
+    @Issue(""SECURITY-611"")
+    @Test
+    public void apiPermissions() throws Exception {
+        DumbSlave slave = new DumbSlave(""slave"", j.jenkins.getRootDir().getAbsolutePath(), j.createComputerLauncher(null));
+        slave.setNumExecutors(2);
+        j.jenkins.addNode(slave);
+        FreeStyleProject publicProject = j.createFreeStyleProject(""public-project"");
+        publicProject.setAssignedNode(slave);
+        startBlockingBuild(publicProject);
+        FreeStyleProject secretProject = j.createFreeStyleProject(""secret-project"");
+        secretProject.setAssignedNode(slave);
+        startBlockingBuild(secretProject);
+        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
+        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().
+            grant(Jenkins.READ).everywhere().toEveryone().
+            grant(Item.READ).onItems(publicProject).toEveryone().
+            grant(Item.READ).onItems(secretProject).to(""has-security-clearance""));
+        String api = j.createWebClient().login(""has-security-clearance"").goTo(slave.toComputer().getUrl() + ""api/json?pretty&depth=1"", null).getWebResponse().getContentAsString();
+        System.out.println(api);
+        assertThat(api, allOf(containsString(""public-project""), containsString(""secret-project"")));
+        api = j.createWebClient().login(""regular-joe"").goTo(slave.toComputer().getUrl() + ""api/json?pretty&depth=1"", null).getWebResponse().getContentAsString();
+        System.out.println(api);
+        assertThat(api, allOf(containsString(""public-project""), not(containsString(""secret-project""))));
+    }
+
     /**
      * Start a project with an infinite build step
      *
@@ -155,7 +182,7 @@ public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListen
                 Thread.sleep(100);
             }
         }
-        @TestExtension(""disconnectCause"")
+        @TestExtension
         public static class DescriptorImpl extends Descriptor<Builder> {}
     }
 }"
GHSA-r8j4-96mx-rjcc,"From d22db30166e7cb369d72be41382bb63ac8b81c52 Mon Sep 17 00:00:00 2001
From: Skylot <skylot@gmail.com>
Date: Thu, 20 Jan 2022 11:17:12 +0000
Subject: [PATCH] fix: use secure xml parser for process manifest

---
 .../src/main/java/jadx/core/export/ExportGradleProject.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java b/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java
index e11ebb4f961..8272bf3a032 100644
--- a/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java
+++ b/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java
@@ -8,7 +8,6 @@
 import java.util.Set;
 
 import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -24,6 +23,7 @@
 import jadx.core.utils.exceptions.JadxRuntimeException;
 import jadx.core.utils.files.FileUtils;
 import jadx.core.xmlgen.ResContainer;
+import jadx.core.xmlgen.XmlSecurity;
 
 public class ExportGradleProject {
 
@@ -139,7 +139,7 @@ private ApplicationParams getApplicationParams(Document androidManifest, Documen
 
 	private Document parseXml(String xmlContent) {
 		try {
-			DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+			DocumentBuilder builder = XmlSecurity.getSecureDbf().newDocumentBuilder();
 			Document document = builder.parse(new InputSource(new StringReader(xmlContent)));
 
 			document.getDocumentElement().normalize();"
CVE-2021-41242,"From c450df7d7ffe6afde39ebca6da9136f1caa16ec4 Mon Sep 17 00:00:00 2001
From: srosse <stephane.rosse@frentix.com>
Date: Mon, 1 Nov 2021 11:48:12 +0100
Subject: [PATCH] OO-5819: container can only create file in its own path

---
 .../olat/core/util/vfs/LocalFolderImpl.java   | 16 +++++++--
 .../org/olat/core/util/vfs/VFSContainer.java  |  4 +--
 .../modules/fo/restapi/ForumWebService.java   |  4 +--
 .../course/CourseElementWebService.java       | 14 ++++----
 .../olat/restapi/support/MultipartReader.java |  2 +-
 src/test/java/org/olat/restapi/ForumTest.java | 35 +++++++++++++++++++
 6 files changed, 60 insertions(+), 15 deletions(-)

diff --git a/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java b/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
index 46363e52164..11e5869cf10 100644
--- a/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
+++ b/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
@@ -374,7 +374,13 @@ public String toString() {
 	@Override
 	public VFSContainer createChildContainer(String name) {
 		File fNewFile = new File(getBasefile(), name);
-		if (!fNewFile.mkdir()) return null;
+		if(!isInPath(name)) {
+			log.warn(""Could not create a new container::{} in container::{} - file out of parent directory"", name, getBasefile().getAbsolutePath());
+			return null;
+		}
+		if (!fNewFile.mkdir()) {
+			return null;
+		}
 		LocalFolderImpl locFI =  new LocalFolderImpl(fNewFile, this);
 		locFI.setDefaultItemFilter(defaultFilter);
 		return locFI;
@@ -384,15 +390,19 @@ public VFSContainer createChildContainer(String name) {
 	public VFSLeaf createChildLeaf(String name) {
 		File fNewFile = new File(getBasefile(), name);
 		try {
+			if(!isInPath(name)) {
+				log.warn(""Could not create a new leaf::{} in container::{} - file out of parent directory"", name, getBasefile().getAbsolutePath());
+				return null;
+			}
 			if(!fNewFile.getParentFile().exists()) {
 				fNewFile.getParentFile().mkdirs();
 			}
 			if (!fNewFile.createNewFile()) {
-				log.warn(""Could not create a new leaf::"" + name + "" in container::"" + getBasefile().getAbsolutePath() + "" - file alreay exists"");
+				log.warn(""Could not create a new leaf::{} in container::{} - file alreay exists"", name, getBasefile().getAbsolutePath());
 				return null;
 			} 
 		} catch (Exception e) {
-			log.error(""Error while creating child leaf::"" + name + "" in container::"" + getBasefile().getAbsolutePath(), e);
+			log.error(""Error while creating child leaf::{} in container::{}"", name, getBasefile().getAbsolutePath(), e);
 			return null;
 		}
 		return new LocalFileImpl(fNewFile, this);
diff --git a/src/main/java/org/olat/core/util/vfs/VFSContainer.java b/src/main/java/org/olat/core/util/vfs/VFSContainer.java
index eed3ce1cd2d..34d64139c9d 100644
--- a/src/main/java/org/olat/core/util/vfs/VFSContainer.java
+++ b/src/main/java/org/olat/core/util/vfs/VFSContainer.java
@@ -78,14 +78,14 @@ public interface VFSContainer extends VFSItem {
 	 * Create a new child container (of same type) if possible.
 	 * 
 	 * @param name
-	 * @return VFSItem if successfull, null otherwise.
+	 * @return VFSItem if successful, null otherwise.
 	 */
 	public VFSContainer createChildContainer(String name);
 	
 	/**
 	 * Create a new leaf (of same type) if possible,
 	 * @param name
-	 * @return VFSItem if successfull, null otherwise.
+	 * @return VFSItem if successful, null otherwise.
 	 */
 	public VFSLeaf createChildLeaf(String name);
 	
diff --git a/src/main/java/org/olat/modules/fo/restapi/ForumWebService.java b/src/main/java/org/olat/modules/fo/restapi/ForumWebService.java
index 53c2fe36aa1..0a4b6ecf9dc 100644
--- a/src/main/java/org/olat/modules/fo/restapi/ForumWebService.java
+++ b/src/main/java/org/olat/modules/fo/restapi/ForumWebService.java
@@ -598,7 +598,7 @@ public Response replyToPostAttachment(@PathParam(""messageKey"") Long messageKey,
 		return attachToPost(messageKey, filename, in, request);
 	}
 	
-	protected Response attachToPost(Long messageKey, String filename, InputStream file,  HttpServletRequest request) {
+	private Response attachToPost(Long messageKey, String filename, InputStream file,  HttpServletRequest request) {
 		//load message
 		Message mess = fom.loadMessage(messageKey);
 		if(mess == null) {
@@ -610,7 +610,7 @@ protected Response attachToPost(Long messageKey, String filename, InputStream fi
 		return attachToPost(mess, filename, file, request);
 	}
 
-	protected Response attachToPost(Message mess, String filename, InputStream file,  HttpServletRequest request) {
+	private Response attachToPost(Message mess, String filename, InputStream file,  HttpServletRequest request) {
 		Identity identity = getIdentity(request);
 		if(identity == null) {
 			return Response.serverError().status(Status.UNAUTHORIZED).build();
diff --git a/src/main/java/org/olat/restapi/repository/course/CourseElementWebService.java b/src/main/java/org/olat/restapi/repository/course/CourseElementWebService.java
index a2ed1bdf40e..83448acdf2c 100644
--- a/src/main/java/org/olat/restapi/repository/course/CourseElementWebService.java
+++ b/src/main/java/org/olat/restapi/repository/course/CourseElementWebService.java
@@ -1365,9 +1365,9 @@ public Response attachTaskFile(@PathParam(""courseId"") Long courseId, @PathParam(
 			String filename = reader.getValue(""filename"", ""task"");
 			String taskFolderPath = TACourseNode.getTaskFolderPathRelToFolderRoot(course, parentNode.getCourseNode());
 			VFSContainer taskFolder = VFSManager.olatRootContainer(taskFolderPath, null);
-			VFSLeaf singleFile = (VFSLeaf) taskFolder.resolve(""/"" + filename);
+			VFSLeaf singleFile = (VFSLeaf)taskFolder.resolve(filename);
 			if (singleFile == null) {
-				singleFile = taskFolder.createChildLeaf(""/"" + filename);
+				singleFile = taskFolder.createChildLeaf(filename);
 			}
 			File file = reader.getFile();
 			if(file != null) {
@@ -2314,9 +2314,9 @@ public void configure(ICourse course, CourseNode newNode, ModuleConfiguration mo
 			if(STCourseNodeEditController.CONFIG_VALUE_DISPLAY_FILE.equals(moduleConfig.getStringValue(STCourseNodeEditController.CONFIG_KEY_DISPLAY_TYPE))) {
 				if(in != null && StringHelper.containsNonWhitespace(filename)) {
 					VFSContainer rootContainer = course.getCourseFolderContainer();
-					VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(""/"" + filename);
+					VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(filename);
 					if (singleFile == null) {
-						singleFile = rootContainer.createChildLeaf(""/"" + filename);
+						singleFile = rootContainer.createChildLeaf(filename);
 					}
 	
 					moduleConfig.set(STCourseNodeEditController.CONFIG_KEY_FILE, ""/"" + filename);
@@ -2326,7 +2326,7 @@ public void configure(ICourse course, CourseNode newNode, ModuleConfiguration mo
 					FileUtils.closeSafely(in);
 				} else if (StringHelper.containsNonWhitespace(filename)) {
 					VFSContainer rootContainer = course.getCourseFolderContainer();
-					VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(""/"" + filename);
+					VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(filename);
 					if(singleFile != null) {
 						moduleConfig.set(STCourseNodeEditController.CONFIG_KEY_FILE, ""/"" + filename);
 					}
@@ -2487,9 +2487,9 @@ public boolean isValid() {
 		public void configure(ICourse course, CourseNode newNode, ModuleConfiguration moduleConfig) {
 			newNode.setDisplayOption(CourseNode.DISPLAY_OPTS_TITLE_DESCRIPTION_CONTENT);
 			VFSContainer rootContainer = course.getCourseFolderContainer();
-			VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(""/"" + filename);
+			VFSLeaf singleFile = (VFSLeaf) rootContainer.resolve(filename);
 			if (singleFile == null) {
-				singleFile = rootContainer.createChildLeaf(""/"" + filename);
+				singleFile = rootContainer.createChildLeaf(filename);
 			}
 
 			if(in != null) {
diff --git a/src/main/java/org/olat/restapi/support/MultipartReader.java b/src/main/java/org/olat/restapi/support/MultipartReader.java
index 0aaccafa4ec..cb9582e9ea3 100644
--- a/src/main/java/org/olat/restapi/support/MultipartReader.java
+++ b/src/main/java/org/olat/restapi/support/MultipartReader.java
@@ -58,7 +58,7 @@ private final void servlet31(HttpServletRequest request) {
 				if(part.getContentType() != null && (StringHelper.containsNonWhitespace(part.getSubmittedFileName()) || !part.getContentType().startsWith(""text/plain""))) {
 					contentType = part.getContentType();
 					filename = part.getSubmittedFileName();
-					if(filename != null) {
+					if(filename != null && !filename.contains("".."")) {
 						filename = UUID.randomUUID().toString().replace(""-"", """") + ""_"" + filename;
 					} else {
 						filename = ""upload-"" + UUID.randomUUID().toString().replace(""-"", """");
diff --git a/src/test/java/org/olat/restapi/ForumTest.java b/src/test/java/org/olat/restapi/ForumTest.java
index d8cff77a6a7..d10cf834247 100644
--- a/src/test/java/org/olat/restapi/ForumTest.java
+++ b/src/test/java/org/olat/restapi/ForumTest.java
@@ -387,6 +387,41 @@ public void testUploadAttachment() throws IOException, URISyntaxException {
 		conn.shutdown();
 	}
 	
+	@Test
+	public void testUploadAttachmentOutOfBox() throws IOException, URISyntaxException {
+		RestConnection conn = new RestConnection();
+		assertTrue(conn.login(id1));
+		
+		URI uri = getForumUriBuilder().path(""posts"").path(m1.getKey().toString())
+			.queryParam(""authorKey"", id1.getKey())
+			.queryParam(""title"", ""New message with attachment "")
+			.queryParam(""body"", ""A very interesting response in Thread-1 with an attachment"").build();
+		HttpPut method = conn.createPut(uri, MediaType.APPLICATION_JSON, true);
+		HttpResponse response = conn.execute(method);
+		assertEquals(200, response.getStatusLine().getStatusCode());
+		MessageVO message = conn.parse(response, MessageVO.class);
+		assertNotNull(message);
+		
+		//attachment
+		URL portraitUrl = CoursesElementsTest.class.getResource(""portrait.jpg"");
+		assertNotNull(portraitUrl);
+		File portrait = new File(portraitUrl.toURI());
+		
+		//upload portrait
+		URI attachUri = getForumUriBuilder().path(""posts"").path(message.getKey().toString()).path(""attachments"").build();
+		HttpPost attachMethod = conn.createPost(attachUri, MediaType.APPLICATION_JSON);
+		conn.addMultipart(attachMethod, ""../../portrait.jpg"", portrait);
+		HttpResponse attachResponse = conn.execute(attachMethod);
+		assertEquals(200, attachResponse.getStatusLine().getStatusCode());
+		
+		//check if the file exists
+		VFSContainer container = forumManager.getMessageContainer(message.getForumKey(), message.getKey());
+		VFSItem uploadedFile = container.resolve(""portrait.jpg"");
+		Assert.assertNull(uploadedFile);
+		
+		conn.shutdown();
+	}
+	
 	@Test
 	public void testUpload64Attachment() throws IOException, URISyntaxException {
 		RestConnection conn = new RestConnection();"
GHSA-2rr5-8q37-2w7h,"From e93a22e8b7faaf971a19c01df7c533f0a9541b81 Mon Sep 17 00:00:00 2001
From: Mike Dalessio <mike.dalessio@gmail.com>
Date: Fri, 24 Sep 2021 08:33:52 -0400
Subject: [PATCH 1/3] format: test files

- xml/sax/test_parser.rb
- xml/sax/test_push_parser.rb
---
 test/xml/sax/test_parser.rb      | 840 ++++++++++++++++---------------
 test/xml/sax/test_push_parser.rb | 441 ++++++++--------
 2 files changed, 631 insertions(+), 650 deletions(-)

diff --git a/test/xml/sax/test_parser.rb b/test/xml/sax/test_parser.rb
index de078d6115b..69f16d66d2e 100644
--- a/test/xml/sax/test_parser.rb
+++ b/test/xml/sax/test_parser.rb
@@ -2,425 +2,429 @@
 
 require ""helper""
 
-module Nokogiri
-  module XML
-    module SAX
-      class TestParser < Nokogiri::SAX::TestCase
-        def setup
-          super
-          @parser = XML::SAX::Parser.new(Doc.new)
-        end
-
-        def test_parser_context_yielded_io
-          doc = Doc.new
-          parser = XML::SAX::Parser.new(doc)
-          xml = ""<foo a='&amp;b'/>""
-
-          block_called = false
-          parser.parse(StringIO.new(xml)) do |ctx|
-            block_called = true
-            ctx.replace_entities = true
-          end
-
-          assert(block_called)
-
-          assert_equal([[""foo"", [[""a"", ""&b""]]]], doc.start_elements)
-        end
-
-        def test_parser_context_yielded_in_memory
-          doc = Doc.new
-          parser = XML::SAX::Parser.new(doc)
-          xml = ""<foo a='&amp;b'/>""
-
-          block_called = false
-          parser.parse(xml) do |ctx|
-            block_called = true
-            ctx.replace_entities = true
-          end
-
-          assert(block_called)
-
-          assert_equal([[""foo"", [[""a"", ""&b""]]]], doc.start_elements)
-        end
-
-        def test_empty_decl
-          parser = XML::SAX::Parser.new(Doc.new)
-
-          xml = ""<root />""
-          parser.parse(xml)
-          assert(parser.document.start_document_called, xml)
-          assert_nil(parser.document.xmldecls, xml)
-        end
-
-        def test_xml_decl
-          [
-            ['<?xml version=""1.0"" ?>', [""1.0""]],
-            ['<?xml version=""1.0"" encoding=""UTF-8"" ?>', [""1.0"", ""UTF-8""]],
-            ['<?xml version=""1.0"" standalone=""yes""?>', [""1.0"", ""yes""]],
-            ['<?xml version=""1.0"" standalone=""no""?>', [""1.0"", ""no""]],
-            ['<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>', [""1.0"", ""UTF-8"", ""no""]],
-            ['<?xml version=""1.0"" encoding=""ISO-8859-1"" standalone=""yes""?>', [""1.0"", ""ISO-8859-1"", ""yes""]],
-          ].each do |decl, value|
-            parser = XML::SAX::Parser.new(Doc.new)
-
-            xml = ""#{decl}\n<root />""
-            parser.parse(xml)
-            assert(parser.document.start_document_called, xml)
-            assert_equal(value, parser.document.xmldecls, xml)
-          end
-        end
-
-        def test_parse_empty
-          assert_raises(RuntimeError) do
-            @parser.parse("""")
-          end
-        end
-
-        def test_namespace_declaration_order_is_saved
-          @parser.parse(<<~eoxml)
-            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
-              <a foo:bar='hello' />
-            </root>
-          eoxml
-          assert_equal(2, @parser.document.start_elements_namespace.length)
-          el = @parser.document.start_elements_namespace.first
-          namespaces = el.last
-          assert_equal([""foo"", ""http://foo.example.com/""], namespaces.first)
-          assert_equal([nil, ""http://example.com/""], namespaces.last)
-        end
-
-        def test_bad_document_calls_error_handler
-          @parser.parse(""<foo><bar></foo>"")
-          assert(@parser.document.errors)
-          assert(@parser.document.errors.length > 0)
-        end
-
-        def test_namespace_are_super_fun_to_parse
-          @parser.parse(<<~eoxml)
-            <root xmlns:foo='http://foo.example.com/'>
-              <a foo:bar='hello' />
-              <b xmlns:foo='http://bar.example.com/'>
-                <a foo:bar='hello' />
-              </b>
-              <foo:bar>hello world</foo:bar>
-            </root>
-          eoxml
-
-          assert(@parser.document.start_elements_namespace.length > 0)
-          el = @parser.document.start_elements_namespace[1]
-          assert_equal(""a"", el.first)
-          assert_equal(1, el[1].length)
-
-          attribute = el[1].first
-          assert_equal(""bar"", attribute.localname)
-          assert_equal(""foo"", attribute.prefix)
-          assert_equal(""hello"", attribute.value)
-          assert_equal(""http://foo.example.com/"", attribute.uri)
-        end
-
-        def test_sax_v1_namespace_attribute_declarations
-          @parser.parse(<<~eoxml)
-            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
-              <a foo:bar='hello' />
-              <b xmlns:foo='http://bar.example.com/'>
-                <a foo:bar='hello' />
-              </b>
-              <foo:bar>hello world</foo:bar>
-            </root>
-          eoxml
-          assert(@parser.document.start_elements.length > 0)
-          elm = @parser.document.start_elements.first
-          assert_equal(""root"", elm.first)
-          assert(elm[1].include?([""xmlns:foo"", ""http://foo.example.com/""]))
-          assert(elm[1].include?([""xmlns"", ""http://example.com/""]))
-        end
-
-        def test_sax_v1_namespace_nodes
-          @parser.parse(<<~eoxml)
-            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
-              <a foo:bar='hello' />
-              <b xmlns:foo='http://bar.example.com/'>
-                <a foo:bar='hello' />
-              </b>
-              <foo:bar>hello world</foo:bar>
-            </root>
-          eoxml
-          assert_equal(5, @parser.document.start_elements.length)
-          assert(@parser.document.start_elements.map(&:first).include?(""foo:bar""))
-          assert(@parser.document.end_elements.map(&:first).include?(""foo:bar""))
-        end
-
-        def test_start_is_called_without_namespace
-          @parser.parse(<<~eoxml)
-            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
-            <foo:f><bar></foo:f>
-            </root>
-          eoxml
-          assert_equal([""root"", ""foo:f"", ""bar""],
-                       @parser.document.start_elements.map(&:first))
-        end
-
-        def test_parser_sets_encoding
-          parser = XML::SAX::Parser.new(Doc.new, ""UTF-8"")
-          assert_equal(""UTF-8"", parser.encoding)
-        end
-
-        def test_errors_set_after_parsing_bad_dom
-          doc = Nokogiri::XML(""<foo><bar></foo>"")
-          assert(doc.errors)
-
-          @parser.parse(""<foo><bar></foo>"")
-          assert(@parser.document.errors)
-          assert(@parser.document.errors.length > 0)
-
-          doc.errors.each do |error|
-            assert_equal(""UTF-8"", error.message.encoding.name)
-          end
-
-          # when using JRuby Nokogiri, more errors will be generated as the DOM
-          # parser continue to parse an ill formed document, while the sax parser
-          # will stop at the first error
-          unless Nokogiri.jruby?
-            assert_equal(doc.errors.length, @parser.document.errors.length)
-          end
-        end
-
-        def test_parse_with_memory_argument
-          @parser.parse(File.read(XML_FILE))
-          assert(@parser.document.cdata_blocks.length > 0)
-        end
-
-        def test_parse_with_io_argument
-          File.open(XML_FILE, ""rb"") do |f|
-            @parser.parse(f)
-          end
-          assert(@parser.document.cdata_blocks.length > 0)
-        end
-
-        def test_parse_io
-          call_parse_io_with_encoding(""UTF-8"")
-        end
-
-        # issue #828
-        def test_parse_io_lower_case_encoding
-          call_parse_io_with_encoding(""utf-8"")
-        end
-
-        def call_parse_io_with_encoding(encoding)
-          File.open(XML_FILE, ""rb"") do |f|
-            @parser.parse_io(f, encoding)
-          end
-          assert(@parser.document.cdata_blocks.length > 0)
-
-          called = false
-          @parser.document.start_elements.flatten.each do |thing|
-            assert_equal(""UTF-8"", thing.encoding.name)
-            called = true
-          end
-          assert(called)
-
-          called = false
-          @parser.document.end_elements.flatten.each do |thing|
-            assert_equal(""UTF-8"", thing.encoding.name)
-            called = true
-          end
-          assert(called)
-
-          called = false
-          @parser.document.data.each do |thing|
-            assert_equal(""UTF-8"", thing.encoding.name)
-            called = true
-          end
-          assert(called)
-
-          called = false
-          @parser.document.comments.flatten.each do |thing|
-            assert_equal(""UTF-8"", thing.encoding.name)
-            called = true
-          end
-          assert(called)
-
-          called = false
-          @parser.document.cdata_blocks.flatten.each do |thing|
-            assert_equal(""UTF-8"", thing.encoding.name)
-            called = true
-          end
-          assert(called)
-        end
-
-        def test_parse_file
-          @parser.parse_file(XML_FILE)
-
-          assert_raises(ArgumentError) do
-            @parser.parse_file(nil)
-          end
-
-          assert_raises(Errno::ENOENT) do
-            @parser.parse_file("""")
-          end
-          assert_raises(Errno::EISDIR) do
-            @parser.parse_file(File.expand_path(File.dirname(__FILE__)))
-          end
-        end
-
-        def test_render_parse_nil_param
-          assert_raises(ArgumentError) { @parser.parse_memory(nil) }
-        end
-
-        def test_bad_encoding_args
-          assert_raises(ArgumentError) { XML::SAX::Parser.new(Doc.new, ""not an encoding"") }
-          assert_raises(ArgumentError) { @parser.parse_io(StringIO.new(""<root/>""), ""not an encoding"") }
-        end
-
-        def test_ctag
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">
-              <![CDATA[ This is a comment ]]>
-              Paragraph 1
-            </p>
-          eoxml
-          assert_equal(["" This is a comment ""], @parser.document.cdata_blocks)
-        end
-
-        def test_comment
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          assert_equal(["" This is a comment ""], @parser.document.comments)
-        end
-
-        def test_characters
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">Paragraph 1</p>
-          eoxml
-          assert_equal([""Paragraph 1""], @parser.document.data)
-        end
-
-        def test_end_document
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">Paragraph 1</p>
-          eoxml
-          assert(@parser.document.end_document_called)
-        end
-
-        def test_end_element
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">Paragraph 1</p>
-          eoxml
-          assert_equal([[""p""]], @parser.document.end_elements)
-        end
-
-        def test_start_element_attrs
-          @parser.parse_memory(<<~eoxml)
-            <p id=""asdfasdf"">Paragraph 1</p>
-          eoxml
-          assert_equal([[""p"", [[""id"", ""asdfasdf""]]]], @parser.document.start_elements)
-        end
-
-        def test_start_element_attrs_include_namespaces
-          @parser.parse_memory(<<~eoxml)
-            <p xmlns:foo='http://foo.example.com/'>Paragraph 1</p>
-          eoxml
-          assert_equal([[""p"", [[""xmlns:foo"", ""http://foo.example.com/""]]]],
-                       @parser.document.start_elements)
-        end
-
-        def test_processing_instruction
-          @parser.parse_memory(<<~eoxml)
-            <?xml-stylesheet href=""a.xsl"" type=""text/xsl""?>
-            <?xml version=""1.0""?>
-          eoxml
-          assert_equal([[""xml-stylesheet"", 'href=""a.xsl"" type=""text/xsl""']],
-                       @parser.document.processing_instructions)
-        end
-
-        def test_parse_document
-          skip_unless_libxml2(""JRuby SAXParser only parses well-formed XML documents"")
-          @parser.parse_memory(<<~eoxml)
-            <p>Paragraph 1</p>
-            <p>Paragraph 2</p>
-          eoxml
-        end
-
-        def test_parser_attributes
-          xml = <<~eoxml
-            <?xml version=""1.0"" ?><root><foo a=""&amp;b"" c=""&gt;d"" /></root>
-          eoxml
-
-          block_called = false
-          @parser.parse(xml) do |ctx|
-            block_called = true
-            ctx.replace_entities = true
-          end
-
-          assert(block_called)
-
-          assert_equal([[""root"", []], [""foo"", [[""a"", ""&b""], [""c"", "">d""]]]], @parser.document.start_elements)
-        end
-
-        def test_recovery_from_incorrect_xml
-          xml = <<~eoxml
-            <?xml version=""1.0"" ?><Root><Data><?xml version='1.0'?><Item>hey</Item></Data><Data><Item>hey yourself</Item></Data></Root>
-          eoxml
-
-          block_called = false
-          @parser.parse(xml) do |ctx|
-            block_called = true
-            ctx.recovery = true
-          end
-
-          assert(block_called)
-
-          assert_equal([[""Root"", []], [""Data"", []], [""Item"", []], [""Data"", []], [""Item"", []]],
-                       @parser.document.start_elements)
-        end
-
-        def test_square_bracket_in_text # issue 1261
-          xml = <<~eoxml
-            <tu tuid=""87dea04cf60af103ff09d1dba36ae820"" segtype=""block"">
-              <prop type=""x-smartling-string-variant"">en:#:home_page:#:stories:#:[6]:#:name</prop>
-              <tuv xml:lang=""en-US""><seg>Sandy S.</seg></tuv>
-            </tu>
-          eoxml
-          @parser.parse(xml)
-          assert_includes(@parser.document.data, ""en:#:home_page:#:stories:#:[6]:#:name"")
-        end
-
-        def test_large_cdata_is_handled
-          # see #2132 and https://gitlab.gnome.org/GNOME/libxml2/-/issues/200
-          skip(""Upstream libxml2 <= 2.9.10 needs to be patched"") if Nokogiri::VersionInfo.instance.libxml2_using_system?
-
-          template = <<~EOF
-            <?xml version=""1.0"" encoding=""UTF-8""?>
-            <soapenv:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ns=""http://example.com"">
-               <soapenv:Header>
-                  <AuthHeader xsi:type=""ns:vAuthHeader"">
-                  <userName xsi:type=""xsd:string"">gorilla</userName>
-                  <password xsi:type=""xsd:string"">secret</password>
-                </AuthHeader>
-               </soapenv:Header>
-              <soapenv:Body>
-                <ns:checkToken soapenv:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/"">
-                  <checkToken xsi:type=""xsd:string""><![CDATA[%s]]></checkToken>
-                </ns:checkToken>
-               </soapenv:Body>
-            </soapenv:Envelope>
-          EOF
-
-          factor = 10
-          huge_data = ""a"" * (1024 * 1024 * factor)
-          xml = StringIO.new(template % (huge_data))
-
-          handler = Nokogiri::SAX::TestCase::Doc.new
-          parser = Nokogiri::XML::SAX::Parser.new(handler)
-          parser.parse(xml)
-
-          assert_predicate(handler.errors, :empty?)
-        end
+class Nokogiri::SAX::TestCase
+  describe Nokogiri::XML::SAX::Parser do
+    let(:parser) { Nokogiri::XML::SAX::Parser.new(Doc.new) }
+
+    it :test_parser_context_yielded_io do
+      doc = Doc.new
+      parser = Nokogiri::XML::SAX::Parser.new(doc)
+      xml = ""<foo a='&amp;b'/>""
+
+      block_called = false
+      parser.parse(StringIO.new(xml)) do |ctx|
+        block_called = true
+        ctx.replace_entities = true
       end
+
+      assert(block_called)
+
+      assert_equal([[""foo"", [[""a"", ""&b""]]]], doc.start_elements)
+    end
+
+    it :test_parser_context_yielded_in_memory do
+      doc = Doc.new
+      parser = Nokogiri::XML::SAX::Parser.new(doc)
+      xml = ""<foo a='&amp;b'/>""
+
+      block_called = false
+      parser.parse(xml) do |ctx|
+        block_called = true
+        ctx.replace_entities = true
+      end
+
+      assert(block_called)
+
+      assert_equal([[""foo"", [[""a"", ""&b""]]]], doc.start_elements)
+    end
+
+    it :test_empty_decl do
+      parser = Nokogiri::XML::SAX::Parser.new(Doc.new)
+
+      xml = ""<root />""
+      parser.parse(xml)
+      assert(parser.document.start_document_called, xml)
+      assert_nil(parser.document.xmldecls, xml)
+    end
+
+    it :test_xml_decl do
+      [
+        ['<?xml version=""1.0"" ?>', [""1.0""]],
+        ['<?xml version=""1.0"" encoding=""UTF-8"" ?>', [""1.0"", ""UTF-8""]],
+        ['<?xml version=""1.0"" standalone=""yes""?>', [""1.0"", ""yes""]],
+        ['<?xml version=""1.0"" standalone=""no""?>', [""1.0"", ""no""]],
+        ['<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>', [""1.0"", ""UTF-8"", ""no""]],
+        ['<?xml version=""1.0"" encoding=""ISO-8859-1"" standalone=""yes""?>', [""1.0"", ""ISO-8859-1"", ""yes""]],
+      ].each do |decl, value|
+        parser = Nokogiri::XML::SAX::Parser.new(Doc.new)
+
+        xml = ""#{decl}\n<root />""
+        parser.parse(xml)
+        assert(parser.document.start_document_called, xml)
+        assert_equal(value, parser.document.xmldecls, xml)
+      end
+    end
+
+    it :test_parse_empty do
+      assert_raises(RuntimeError) do
+        parser.parse("""")
+      end
+    end
+
+    it :test_namespace_declaration_order_is_saved do
+      parser.parse(<<~EOF)
+        <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
+          <a foo:bar='hello' />
+        </root>
+      EOF
+      assert_equal(2, parser.document.start_elements_namespace.length)
+      el = parser.document.start_elements_namespace.first
+      namespaces = el.last
+      assert_equal([""foo"", ""http://foo.example.com/""], namespaces.first)
+      assert_equal([nil, ""http://example.com/""], namespaces.last)
+    end
+
+    it :test_bad_document_calls_error_handler do
+      parser.parse(""<foo><bar></foo>"")
+      assert(parser.document.errors)
+      assert(parser.document.errors.length > 0)
+    end
+
+    it :test_namespace_are_super_fun_to_parse do
+      parser.parse(<<~EOF)
+        <root xmlns:foo='http://foo.example.com/'>
+          <a foo:bar='hello' />
+          <b xmlns:foo='http://bar.example.com/'>
+            <a foo:bar='hello' />
+          </b>
+          <foo:bar>hello world</foo:bar>
+        </root>
+      EOF
+
+      assert(parser.document.start_elements_namespace.length > 0)
+      el = parser.document.start_elements_namespace[1]
+      assert_equal(""a"", el.first)
+      assert_equal(1, el[1].length)
+
+      attribute = el[1].first
+      assert_equal(""bar"", attribute.localname)
+      assert_equal(""foo"", attribute.prefix)
+      assert_equal(""hello"", attribute.value)
+      assert_equal(""http://foo.example.com/"", attribute.uri)
+    end
+
+    it :test_sax_v1_namespace_attribute_declarations do
+      parser.parse(<<~EOF)
+        <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
+          <a foo:bar='hello' />
+          <b xmlns:foo='http://bar.example.com/'>
+            <a foo:bar='hello' />
+          </b>
+          <foo:bar>hello world</foo:bar>
+        </root>
+      EOF
+      assert(parser.document.start_elements.length > 0)
+      elm = parser.document.start_elements.first
+      assert_equal(""root"", elm.first)
+      assert(elm[1].include?([""xmlns:foo"", ""http://foo.example.com/""]))
+      assert(elm[1].include?([""xmlns"", ""http://example.com/""]))
+    end
+
+    it :test_sax_v1_namespace_nodes do
+      parser.parse(<<~EOF)
+        <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
+          <a foo:bar='hello' />
+          <b xmlns:foo='http://bar.example.com/'>
+            <a foo:bar='hello' />
+          </b>
+          <foo:bar>hello world</foo:bar>
+        </root>
+      EOF
+      assert_equal(5, parser.document.start_elements.length)
+      assert(parser.document.start_elements.map(&:first).include?(""foo:bar""))
+      assert(parser.document.end_elements.map(&:first).include?(""foo:bar""))
+    end
+
+    it :test_start_is_called_without_namespace do
+      parser.parse(<<~EOF)
+        <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>
+        <foo:f><bar></foo:f>
+        </root>
+      EOF
+      assert_equal(
+        [""root"", ""foo:f"", ""bar""],
+        parser.document.start_elements.map(&:first)
+      )
+    end
+
+    it :test_parser_sets_encoding do
+      parser = Nokogiri::XML::SAX::Parser.new(Doc.new, ""UTF-8"")
+      assert_equal(""UTF-8"", parser.encoding)
+    end
+
+    it :test_errors_set_after_parsing_bad_dom do
+      doc = Nokogiri::XML(""<foo><bar></foo>"")
+      assert(doc.errors)
+
+      parser.parse(""<foo><bar></foo>"")
+      assert(parser.document.errors)
+      assert(parser.document.errors.length > 0)
+
+      doc.errors.each do |error|
+        assert_equal(""UTF-8"", error.message.encoding.name)
+      end
+
+      # when using JRuby Nokogiri, more errors will be generated as the DOM
+      # parser continue to parse an ill formed document, while the sax parser
+      # will stop at the first error
+      unless Nokogiri.jruby?
+        assert_equal(doc.errors.length, parser.document.errors.length)
+      end
+    end
+
+    it :test_parse_with_memory_argument do
+      parser.parse(File.read(XML_FILE))
+      assert(parser.document.cdata_blocks.length > 0)
+    end
+
+    it :test_parse_with_io_argument do
+      File.open(XML_FILE, ""rb"") do |f|
+        parser.parse(f)
+      end
+      assert(parser.document.cdata_blocks.length > 0)
+    end
+
+    it :test_parse_io do
+      call_parse_io_with_encoding(""UTF-8"")
+    end
+
+    # issue #828
+    it :test_parse_io_lower_case_encoding do
+      call_parse_io_with_encoding(""utf-8"")
+    end
+
+    def call_parse_io_with_encoding(encoding)
+      File.open(XML_FILE, ""rb"") do |f|
+        parser.parse_io(f, encoding)
+      end
+      assert(parser.document.cdata_blocks.length > 0)
+
+      called = false
+      parser.document.start_elements.flatten.each do |thing|
+        assert_equal(""UTF-8"", thing.encoding.name)
+        called = true
+      end
+      assert(called)
+
+      called = false
+      parser.document.end_elements.flatten.each do |thing|
+        assert_equal(""UTF-8"", thing.encoding.name)
+        called = true
+      end
+      assert(called)
+
+      called = false
+      parser.document.data.each do |thing|
+        assert_equal(""UTF-8"", thing.encoding.name)
+        called = true
+      end
+      assert(called)
+
+      called = false
+      parser.document.comments.flatten.each do |thing|
+        assert_equal(""UTF-8"", thing.encoding.name)
+        called = true
+      end
+      assert(called)
+
+      called = false
+      parser.document.cdata_blocks.flatten.each do |thing|
+        assert_equal(""UTF-8"", thing.encoding.name)
+        called = true
+      end
+      assert(called)
+    end
+
+    it :test_parse_file do
+      parser.parse_file(XML_FILE)
+
+      assert_raises(ArgumentError) do
+        parser.parse_file(nil)
+      end
+
+      assert_raises(Errno::ENOENT) do
+        parser.parse_file("""")
+      end
+      assert_raises(Errno::EISDIR) do
+        parser.parse_file(File.expand_path(File.dirname(__FILE__)))
+      end
+    end
+
+    it :test_render_parse_nil_param do
+      assert_raises(ArgumentError) { parser.parse_memory(nil) }
+    end
+
+    it :test_bad_encoding_args do
+      assert_raises(ArgumentError) { Nokogiri::XML::SAX::Parser.new(Doc.new, ""not an encoding"") }
+      assert_raises(ArgumentError) { parser.parse_io(StringIO.new(""<root/>""), ""not an encoding"") }
+    end
+
+    it :test_ctag do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">
+          <![CDATA[ This is a comment ]]>
+          Paragraph 1
+        </p>
+      EOF
+      assert_equal(["" This is a comment ""], parser.document.cdata_blocks)
+    end
+
+    it :test_comment do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      assert_equal(["" This is a comment ""], parser.document.comments)
+    end
+
+    it :test_characters do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">Paragraph 1</p>
+      EOF
+      assert_equal([""Paragraph 1""], parser.document.data)
+    end
+
+    it :test_end_document do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">Paragraph 1</p>
+      EOF
+      assert(parser.document.end_document_called)
+    end
+
+    it :test_end_element do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">Paragraph 1</p>
+      EOF
+      assert_equal([[""p""]], parser.document.end_elements)
+    end
+
+    it :test_start_element_attrs do
+      parser.parse_memory(<<~EOF)
+        <p id=""asdfasdf"">Paragraph 1</p>
+      EOF
+      assert_equal([[""p"", [[""id"", ""asdfasdf""]]]], parser.document.start_elements)
+    end
+
+    it :test_start_element_attrs_include_namespaces do
+      parser.parse_memory(<<~EOF)
+        <p xmlns:foo='http://foo.example.com/'>Paragraph 1</p>
+      EOF
+      assert_equal(
+        [[""p"", [[""xmlns:foo"", ""http://foo.example.com/""]]]],
+        parser.document.start_elements
+      )
+    end
+
+    it :test_processing_instruction do
+      parser.parse_memory(<<~EOF)
+        <?xml-stylesheet href=""a.xsl"" type=""text/xsl""?>
+        <?xml version=""1.0""?>
+      EOF
+      assert_equal(
+        [[""xml-stylesheet"", 'href=""a.xsl"" type=""text/xsl""']],
+        parser.document.processing_instructions
+      )
+    end
+
+    it :test_parse_document do
+      skip_unless_libxml2(""JRuby SAXParser only parses well-formed XML documents"")
+      parser.parse_memory(<<~EOF)
+        <p>Paragraph 1</p>
+        <p>Paragraph 2</p>
+      EOF
+    end
+
+    it :test_parser_attributes do
+      xml = <<~EOF
+        <?xml version=""1.0"" ?><root><foo a=""&amp;b"" c=""&gt;d"" /></root>
+      EOF
+
+      block_called = false
+      parser.parse(xml) do |ctx|
+        block_called = true
+        ctx.replace_entities = true
+      end
+
+      assert(block_called)
+
+      assert_equal(
+        [[""root"", []], [""foo"", [[""a"", ""&b""], [""c"", "">d""]]]], parser.document.start_elements
+      )
+    end
+
+    it :test_recovery_from_incorrect_xml do
+      xml = <<~EOF
+        <?xml version=""1.0"" ?><Root><Data><?xml version='1.0'?><Item>hey</Item></Data><Data><Item>hey yourself</Item></Data></Root>
+      EOF
+
+      block_called = false
+      parser.parse(xml) do |ctx|
+        block_called = true
+        ctx.recovery = true
+      end
+
+      assert(block_called)
+
+      assert_equal(
+        [[""Root"", []], [""Data"", []], [""Item"", []], [""Data"", []], [""Item"", []]],
+        parser.document.start_elements
+      )
+    end
+
+    it :test_square_bracket_in_text do
+      # issue 1261
+      xml = <<~EOF
+        <tu tuid=""87dea04cf60af103ff09d1dba36ae820"" segtype=""block"">
+          <prop type=""x-smartling-string-variant"">en:#:home_page:#:stories:#:[6]:#:name</prop>
+          <tuv xml:lang=""en-US""><seg>Sandy S.</seg></tuv>
+        </tu>
+      EOF
+      parser.parse(xml)
+      assert_includes(parser.document.data, ""en:#:home_page:#:stories:#:[6]:#:name"")
+    end
+
+    it :test_large_cdata_is_handled do
+      # see #2132 and https://gitlab.gnome.org/GNOME/libxml2/-/issues/200
+      skip(""Upstream libxml2 <= 2.9.10 needs to be patched"") if Nokogiri::VersionInfo.instance.libxml2_using_system?
+
+      template = <<~EOF
+        <?xml version=""1.0"" encoding=""UTF-8""?>
+        <soapenv:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ns=""http://example.com"">
+           <soapenv:Header>
+              <AuthHeader xsi:type=""ns:vAuthHeader"">
+              <userName xsi:type=""xsd:string"">gorilla</userName>
+              <password xsi:type=""xsd:string"">secret</password>
+            </AuthHeader>
+           </soapenv:Header>
+          <soapenv:Body>
+            <ns:checkToken soapenv:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/"">
+              <checkToken xsi:type=""xsd:string""><![CDATA[%s]]></checkToken>
+            </ns:checkToken>
+           </soapenv:Body>
+        </soapenv:Envelope>
+      EOF
+
+      factor = 10
+      huge_data = ""a"" * (1024 * 1024 * factor)
+      xml = StringIO.new(template % huge_data)
+
+      handler = Nokogiri::SAX::TestCase::Doc.new
+      parser = Nokogiri::XML::SAX::Parser.new(handler)
+      parser.parse(xml)
+
+      assert_predicate(handler.errors, :empty?)
     end
   end
 end
diff --git a/test/xml/sax/test_push_parser.rb b/test/xml/sax/test_push_parser.rb
index 587bd54a1a6..dfab1793fae 100644
--- a/test/xml/sax/test_push_parser.rb
+++ b/test/xml/sax/test_push_parser.rb
@@ -1,266 +1,243 @@
 # -*- coding: utf-8 -*-
+# frozen_string_literal: true
 
 require ""helper""
 
-module Nokogiri
-  module XML
-    module SAX
-      class TestPushParser < Nokogiri::SAX::TestCase
-        def setup
-          super
-          @parser = XML::SAX::PushParser.new(Doc.new)
-        end
-
-        def test_exception
-          assert_raises(SyntaxError) do
-            @parser << ""<foo /><foo />""
-          end
-
-          assert_raises(SyntaxError) do
-            @parser << nil
-          end
-        end
+class Nokogiri::SAX::TestCase
+  describe Nokogiri::XML::SAX::PushParser do
+    let(:parser) { Nokogiri::XML::SAX::PushParser.new(Doc.new) }
 
-        def test_early_finish
-          @parser << ""<foo>""
-          assert_raises(SyntaxError) do
-            @parser.finish
-          end
-        end
+    it :test_exception do
+      assert_raises(Nokogiri::XML::SyntaxError) do
+        parser << ""<foo /><foo />""
+      end
 
-        def test_write_last_chunk
-          @parser << ""<foo>""
-          @parser.write ""</foo>"", true
-          assert_equal [[""foo"", []]], @parser.document.start_elements
-          assert_equal [[""foo""]], @parser.document.end_elements
-        end
+      assert_raises(Nokogiri::XML::SyntaxError) do
+        parser << nil
+      end
+    end
 
-        def test_empty_doc
-          @parser.options |= XML::ParseOptions::RECOVER
-          @parser.write """", true
-          assert_nil @parser.document.start_elements
-          assert_nil @parser.document.end_elements
-        end
+    it :test_early_finish do
+      parser << ""<foo>""
+      assert_raises(Nokogiri::XML::SyntaxError) do
+        parser.finish
+      end
+    end
 
+    it :test_write_last_chunk do
+      parser << ""<foo>""
+      parser.write(""</foo>"", true)
+      assert_equal [[""foo"", []]], parser.document.start_elements
+      assert_equal [[""foo""]], parser.document.end_elements
+    end
 
-        def test_finish_should_rethrow_last_error
-          begin
-            @parser << ""</foo>""
-          rescue => e
-            expected = e
-          end
+    it :test_empty_doc do
+      parser.options |= Nokogiri::XML::ParseOptions::RECOVER
+      parser.write("""", true)
+      assert_nil parser.document.start_elements
+      assert_nil parser.document.end_elements
+    end
 
-          begin
-            @parser.finish
-          rescue => e
-            actual = e
-          end
+    it :test_finish_should_rethrow_last_error do
+      expected = assert_raise(Nokogiri::XML::SyntaxError) { parser << ""</foo>"" }
+      actual = assert_raise(Nokogiri::XML::SyntaxError) { parser.finish }
+      assert_equal actual.message, expected.message
+    end
 
-          assert_equal actual.message, expected.message
+    it :test_should_throw_error_returned_by_document do
+      doc = Doc.new
+      class << doc
+        def error(msg)
+          raise ""parse error""
         end
+      end
+      parser = Nokogiri::XML::SAX::PushParser.new(doc)
 
-        def test_should_throw_error_returned_by_document
-          doc = Doc.new
-          class << doc
-            def error msg
-              raise ""parse error""
-            end
-          end
-
-          @parser = XML::SAX::PushParser.new(doc)
-          begin
-            @parser << ""</foo>""
-          rescue => e
-            actual = e
-          end
-          fail 'PushParser should throw error when fed ill-formed data' if actual.nil?
-
-          assert_equal actual.message, ""parse error""
-        end
+      exception = assert_raise(RuntimeError) { parser << ""</foo>"" }
+      assert_equal exception.message, ""parse error""
+    end
 
-        def test_writing_nil
-          assert_equal @parser.write(nil), @parser
-        end
+    it :test_writing_nil do
+      assert_equal parser.write(nil), parser
+    end
 
-        def test_end_document_called
-          @parser.<<(<<-eoxml)
-            <p id=""asdfasdf"">
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          assert ! @parser.document.end_document_called
-          @parser.finish
-          assert @parser.document.end_document_called
-        end
+    it :test_end_document_called do
+      parser.<<(<<~EOF)
+        <p id=""asdfasdf"">
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      assert !parser.document.end_document_called
+      parser.finish
+      assert parser.document.end_document_called
+    end
 
-        def test_start_element
-          @parser.<<(<<-eoxml)
-            <p id=""asdfasdf"">
-          eoxml
-
-          assert_equal [[""p"", [[""id"", ""asdfasdf""]]]],
-            @parser.document.start_elements
-
-          @parser.<<(<<-eoxml)
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          assert_equal [' This is a comment '], @parser.document.comments
-          @parser.finish
-        end
+    it :test_start_element do
+      parser.<<(<<~EOF)
+        <p id=""asdfasdf"">
+      EOF
+
+      assert_equal [[""p"", [[""id"", ""asdfasdf""]]]],
+        parser.document.start_elements
+
+      parser.<<(<<~EOF)
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      assert_equal ["" This is a comment ""], parser.document.comments
+      parser.finish
+    end
 
-        def test_start_element_with_namespaces
-          @parser.<<(<<-eoxml)
-            <p xmlns:foo=""http://foo.example.com/"">
-          eoxml
-
-          assert_equal [[""p"", [[""xmlns:foo"", ""http://foo.example.com/""]]]],
-            @parser.document.start_elements
-
-          @parser.<<(<<-eoxml)
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          assert_equal [' This is a comment '], @parser.document.comments
-          @parser.finish
-        end
+    it :test_start_element_with_namespaces do
+      parser.<<(<<~EOF)
+        <p xmlns:foo=""http://foo.example.com/"">
+      EOF
+
+      assert_equal [[""p"", [[""xmlns:foo"", ""http://foo.example.com/""]]]],
+        parser.document.start_elements
+
+      parser.<<(<<~EOF)
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      assert_equal ["" This is a comment ""], parser.document.comments
+      parser.finish
+    end
 
-        def test_start_element_ns
-          @parser.<<(<<-eoxml)
-            <stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' size='large'></stream:stream>
-          eoxml
+    it :test_start_element_ns do
+      parser.<<(<<~EOF)
+        <stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' size='large'></stream:stream>
+      EOF
 
-          assert_equal 1, @parser.document.start_elements_namespace.length
-          el = @parser.document.start_elements_namespace.first
+      assert_equal 1, parser.document.start_elements_namespace.length
+      el = parser.document.start_elements_namespace.first
 
-          assert_equal 'stream', el.first
-          assert_equal 2, el[1].length
-          assert_equal [['version', '1.0'], ['size', 'large']],
-            el[1].map { |x| [x.localname, x.value] }
+      assert_equal ""stream"", el.first
+      assert_equal 2, el[1].length
+      assert_equal [[""version"", ""1.0""], [""size"", ""large""]],
+        el[1].map { |x| [x.localname, x.value] }
 
-          assert_equal 'stream', el[2]
-          assert_equal 'http://etherx.jabber.org/streams', el[3]
-          @parser.finish
-        end
+      assert_equal ""stream"", el[2]
+      assert_equal ""http://etherx.jabber.org/streams"", el[3]
+      parser.finish
+    end
 
-        def test_end_element_ns
-          @parser.<<(<<-eoxml)
-            <stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'></stream:stream>
-          eoxml
+    it :test_end_element_ns do
+      parser.<<(<<~EOF)
+        <stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'></stream:stream>
+      EOF
 
-          assert_equal [['stream', 'stream', 'http://etherx.jabber.org/streams']],
-            @parser.document.end_elements_namespace
-          @parser.finish
-        end
+      assert_equal [[""stream"", ""stream"", ""http://etherx.jabber.org/streams""]],
+        parser.document.end_elements_namespace
+      parser.finish
+    end
 
-        def test_chevron_partial_xml
-          @parser.<<(<<-eoxml)
-            <p id=""asdfasdf"">
-          eoxml
-
-          @parser.<<(<<-eoxml)
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          assert_equal [' This is a comment '], @parser.document.comments
-          @parser.finish
-        end
+    it :test_chevron_partial_xml do
+      parser.<<(<<~EOF)
+        <p id=""asdfasdf"">
+      EOF
+
+      parser.<<(<<~EOF)
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      assert_equal ["" This is a comment ""], parser.document.comments
+      parser.finish
+    end
 
-        def test_chevron
-          @parser.<<(<<-eoxml)
-            <p id=""asdfasdf"">
-              <!-- This is a comment -->
-              Paragraph 1
-            </p>
-          eoxml
-          @parser.finish
-          assert_equal [' This is a comment '], @parser.document.comments
-        end
+    it :test_chevron do
+      parser.<<(<<~EOF)
+        <p id=""asdfasdf"">
+          <!-- This is a comment -->
+          Paragraph 1
+        </p>
+      EOF
+      parser.finish
+      assert_equal ["" This is a comment ""], parser.document.comments
+    end
 
-        def test_default_options
-          assert_equal 0, @parser.options
-        end
+    it :test_default_options do
+      assert_equal 0, parser.options
+    end
 
-        def test_recover
-          @parser.options |= XML::ParseOptions::RECOVER
-          @parser.<<(<<-eoxml)
-            <p>
-              Foo
-              <bar>
-              Bar
-            </p>
-          eoxml
-          @parser.finish
-          assert(@parser.document.errors.size >= 1)
-          assert_equal [[""p"", []], [""bar"", []]], @parser.document.start_elements
-          assert_equal ""FooBar"", @parser.document.data.map { |x|
-            x.gsub(/\s/, '')
-          }.join
-        end
+    it :test_recover do
+      parser.options |= Nokogiri::XML::ParseOptions::RECOVER
+      parser.<<(<<~EOF)
+        <p>
+          Foo
+          <bar>
+          Bar
+        </p>
+      EOF
+      parser.finish
+      assert(parser.document.errors.size >= 1)
+      assert_equal [[""p"", []], [""bar"", []]], parser.document.start_elements
+      assert_equal ""FooBar"", parser.document.data.map { |x|
+        x.gsub(/\s/, """")
+      }.join
+    end
 
-        def test_broken_encoding
-          skip_unless_libxml2(""ultra hard to fix for pure Java version"")
-          @parser.options |= XML::ParseOptions::RECOVER
-          # This is ISO_8859-1:
-          @parser.<< ""<?xml version='1.0' encoding='UTF-8'?><r>Gau\337</r>""
-          @parser.finish
-          assert(@parser.document.errors.size >= 1)
-          assert_equal ""Gau\337"", @parser.document.data.join
-          assert_equal [[""r""]], @parser.document.end_elements
-        end
+    it :test_broken_encoding do
+      skip_unless_libxml2(""ultra hard to fix for pure Java version"")
+      parser.options |= Nokogiri::XML::ParseOptions::RECOVER
+      # This is ISO_8859-1:
+      parser.<< ""<?xml version='1.0' encoding='UTF-8'?><r>Gau\337</r>""
+      parser.finish
+      assert(parser.document.errors.size >= 1)
+      assert_equal ""Gau\337"", parser.document.data.join
+      assert_equal [[""r""]], parser.document.end_elements
+    end
 
-        def test_replace_entities_attribute_behavior
-          if Nokogiri.uses_libxml?
-            # initially false
-            assert_equal false, @parser.replace_entities
-
-            # can be set to true
-            @parser.replace_entities = true
-            assert_equal true, @parser.replace_entities
-
-            # can be set to false
-            @parser.replace_entities = false
-            assert_equal false, @parser.replace_entities
-          else
-            # initially true
-            assert_equal true, @parser.replace_entities
-
-            # ignore attempts to set to false
-            @parser.replace_entities = false # TODO: should we raise an exception here?
-            assert_equal true, @parser.replace_entities
-          end
-        end
+    it :test_replace_entities_attribute_behavior do
+      if Nokogiri.uses_libxml?
+        # initially false
+        assert_equal false, parser.replace_entities
+
+        # can be set to true
+        parser.replace_entities = true
+        assert_equal true, parser.replace_entities
+
+        # can be set to false
+        parser.replace_entities = false
+        assert_equal false, parser.replace_entities
+      else
+        # initially true
+        assert_equal true, parser.replace_entities
+
+        # ignore attempts to set to false
+        parser.replace_entities = false # TODO: should we raise an exception here?
+        assert_equal true, parser.replace_entities
+      end
+    end
 
-        def test_untouched_entities
-          skip_unless_libxml2(""entities are always replaced in pure Java version"")
-          @parser.<<(<<-eoxml)
-            <p id=""asdf&amp;asdf"">
-              <!-- This is a comment -->
-              Paragraph 1 &amp; 2
-            </p>
-          eoxml
-          @parser.finish
-          assert_equal [[""p"", [[""id"", ""asdf&#38;asdf""]]]], @parser.document.start_elements
-          assert_equal ""Paragraph 1 & 2"", @parser.document.data.join.strip
-        end
+    it :test_untouched_entities do
+      skip_unless_libxml2(""entities are always replaced in pure Java version"")
+      parser.<<(<<~EOF)
+        <p id=""asdf&amp;asdf"">
+          <!-- This is a comment -->
+          Paragraph 1 &amp; 2
+        </p>
+      EOF
+      parser.finish
+      assert_equal [[""p"", [[""id"", ""asdf&#38;asdf""]]]], parser.document.start_elements
+      assert_equal ""Paragraph 1 & 2"", parser.document.data.join.strip
+    end
 
-        def test_replaced_entities
-          @parser.replace_entities = true
-          @parser.<<(<<-eoxml)
-            <p id=""asdf&amp;asdf"">
-              <!-- This is a comment -->
-              Paragraph 1 &amp; 2
-            </p>
-          eoxml
-          @parser.finish
-          assert_equal [[""p"", [[""id"", ""asdf&asdf""]]]], @parser.document.start_elements
-          assert_equal ""Paragraph 1 & 2"", @parser.document.data.join.strip
-        end
-      end
+    it :test_replaced_entities do
+      parser.replace_entities = true
+      parser.<<(<<~EOF)
+        <p id=""asdf&amp;asdf"">
+          <!-- This is a comment -->
+          Paragraph 1 &amp; 2
+        </p>
+      EOF
+      parser.finish
+      assert_equal [[""p"", [[""id"", ""asdf&asdf""]]]], parser.document.start_elements
+      assert_equal ""Paragraph 1 & 2"", parser.document.data.join.strip
     end
   end
 end

From 412f4e3a396dd36677ca202df96aa36656f9c800 Mon Sep 17 00:00:00 2001
From: Mike Dalessio <mike.dalessio@gmail.com>
Date: Fri, 24 Sep 2021 14:13:39 -0400
Subject: [PATCH 2/3] refactor(jruby): handle errors more consistently

NokogiriErrorHandler stores RubyException but also accepts (and
type-converts) Exception and RaiseException.

NokgiriHandler uses NokogiriErrorHandler under the hood.

NokogiriErrorHandler classes use addError consistently everywhere.
---
 ext/java/nokogiri/Html4SaxPushParser.java     |  33 ++---
 ext/java/nokogiri/XmlSaxParserContext.java    | 123 +++++-------------
 ext/java/nokogiri/XmlSaxPushParser.java       |  42 +++---
 .../internals/NokogiriEntityResolver.java     |   2 +-
 .../internals/NokogiriErrorHandler.java       |  37 ++++--
 .../nokogiri/internals/NokogiriHandler.java   |  30 +----
 .../NokogiriNonStrictErrorHandler.java        |  17 +--
 ...okogiriNonStrictErrorHandler4NekoHtml.java |  19 +--
 .../internals/NokogiriStrictErrorHandler.java |  13 +-
 .../internals/XmlDomParserContext.java        |  41 +++---
 10 files changed, 139 insertions(+), 218 deletions(-)

diff --git a/ext/java/nokogiri/Html4SaxPushParser.java b/ext/java/nokogiri/Html4SaxPushParser.java
index d9aa6959e6d..8ff7088b6c6 100644
--- a/ext/java/nokogiri/Html4SaxPushParser.java
+++ b/ext/java/nokogiri/Html4SaxPushParser.java
@@ -1,31 +1,26 @@
 package nokogiri;
 
-import static nokogiri.XmlSaxPushParser.terminateExecution;
-import static nokogiri.internals.NokogiriHelpers.getNokogiriClass;
-import static org.jruby.runtime.Helpers.invoke;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.io.IOException;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.ThreadFactory;
-
-import nokogiri.internals.*;
-
+import nokogiri.internals.ClosedStreamException;
+import nokogiri.internals.NokogiriBlockingQueueInputStream;
+import nokogiri.internals.NokogiriHelpers;
+import nokogiri.internals.ParserContext;
 import org.jruby.Ruby;
 import org.jruby.RubyClass;
 import org.jruby.RubyObject;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
-import org.jruby.exceptions.RaiseException;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.concurrent.*;
+
+import static nokogiri.XmlSaxPushParser.terminateExecution;
+import static nokogiri.internals.NokogiriHelpers.getNokogiriClass;
+import static org.jruby.runtime.Helpers.invoke;
+
 /**
  * Class for Nokogiri::HTML4::SAX::PushParser
  *
@@ -134,7 +129,7 @@ public class Html4SaxPushParser extends RubyObject
 
     if (!options.recover && parserTask.getErrorCount() > errorCount0) {
       terminateTask(context.runtime);
-      throw parserTask.getLastError();
+      throw parserTask.getLastError().toThrowable();
     }
 
     return this;
diff --git a/ext/java/nokogiri/XmlSaxParserContext.java b/ext/java/nokogiri/XmlSaxParserContext.java
index 920b38e9644..b92538c76a2 100644
--- a/ext/java/nokogiri/XmlSaxParserContext.java
+++ b/ext/java/nokogiri/XmlSaxParserContext.java
@@ -1,33 +1,23 @@
 package nokogiri;
 
-import static org.jruby.runtime.Helpers.invoke;
-
-import java.io.IOException;
-import java.io.InputStream;
-
+import nokogiri.internals.*;
 import org.apache.xerces.parsers.AbstractSAXParser;
 import org.jruby.Ruby;
 import org.jruby.RubyClass;
 import org.jruby.RubyFixnum;
-import org.jruby.RubyModule;
-import org.jruby.RubyObjectAdapter;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
 import org.jruby.exceptions.RaiseException;
-import org.jruby.javasupport.JavaEmbedUtils;
+import org.jruby.runtime.Helpers;
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
-import org.xml.sax.ContentHandler;
-import org.xml.sax.ErrorHandler;
 import org.xml.sax.SAXException;
-import org.xml.sax.SAXNotRecognizedException;
-import org.xml.sax.SAXNotSupportedException;
 import org.xml.sax.SAXParseException;
 
-import nokogiri.internals.NokogiriHandler;
-import nokogiri.internals.NokogiriHelpers;
-import nokogiri.internals.ParserContext;
-import nokogiri.internals.XmlSaxParser;
+import java.io.IOException;
+import java.io.InputStream;
+
+import static org.jruby.runtime.Helpers.invoke;
 
 /**
  * Base class for the SAX parsers.
@@ -51,6 +41,7 @@ public class XmlSaxParserContext extends ParserContext
   protected AbstractSAXParser parser;
 
   protected NokogiriHandler handler;
+  protected NokogiriErrorHandler errorHandler;
   private boolean replaceEntities = true;
   private boolean recovery = false;
 
@@ -168,31 +159,12 @@ public class XmlSaxParserContext extends ParserContext
     return (XmlSaxParserContext) NokogiriService.XML_SAXPARSER_CONTEXT_ALLOCATOR.allocate(runtime, klazz);
   }
 
-  /**
-   * Set a property of the underlying parser.
-   */
-  protected void
-  setProperty(String key, Object val)
-  throws SAXNotRecognizedException, SAXNotSupportedException
-  {
-    parser.setProperty(key, val);
-  }
-
-  protected void
-  setContentHandler(ContentHandler handler)
-  {
-    parser.setContentHandler(handler);
-  }
-
-  protected void
-  setErrorHandler(ErrorHandler handler)
-  {
-    parser.setErrorHandler(handler);
-  }
-
   public final NokogiriHandler
   getNokogiriHandler() { return handler; }
 
+  public final NokogiriErrorHandler
+  getNokogiriErrorHandler() { return errorHandler; }
+
   /**
    * Perform any initialization prior to parsing with the handler
    * <code>handlerRuby</code>. Convenience hook for subclasses.
@@ -223,6 +195,17 @@ public class XmlSaxParserContext extends ParserContext
     parser.parse(getInputSource());
   }
 
+  protected static Options
+  defaultParseOptions(ThreadContext context)
+  {
+    return new ParserContext.Options(
+             RubyFixnum.fix2long(Helpers.invoke(context,
+                                 ((RubyClass)context.getRuntime().getClassFromPath(""Nokogiri::XML::ParseOptions""))
+                                 .getConstant(""DEFAULT_XML""),
+                                 ""to_i""))
+           );
+  }
+
   @JRubyMethod
   public IRubyObject
   parse_with(ThreadContext context, IRubyObject handlerRuby)
@@ -233,14 +216,18 @@ public class XmlSaxParserContext extends ParserContext
       throw runtime.newArgumentError(""argument must respond_to document"");
     }
 
-    NokogiriHandler handler = this.handler = new NokogiriHandler(runtime, handlerRuby);
-    preParse(runtime, handlerRuby, handler);
+    /* TODO: how should we pass in parse options? */
+    ParserContext.Options options = defaultParseOptions(context);
+
+    errorHandler = new NokogiriStrictErrorHandler(runtime, options.noError, options.noWarning);
+    handler = new NokogiriHandler(runtime, handlerRuby, errorHandler);
 
-    setContentHandler(handler);
-    setErrorHandler(handler);
+    preParse(runtime, handlerRuby, handler);
+    parser.setContentHandler(handler);
+    parser.setErrorHandler(handler);
 
     try {
-      setProperty(""http://xml.org/sax/properties/lexical-handler"", handler);
+      parser.setProperty(""http://xml.org/sax/properties/lexical-handler"", handler);
     } catch (Exception ex) {
       throw runtime.newRuntimeError(""Problem while creating XML SAX Parser: "" + ex.toString());
     }
@@ -270,8 +257,6 @@ public class XmlSaxParserContext extends ParserContext
 
     postParse(runtime, handlerRuby, handler);
 
-    //maybeTrimLeadingAndTrailingWhitespace(context, handlerRuby);
-
     return runtime.getNil();
   }
 
@@ -319,53 +304,6 @@ public class XmlSaxParserContext extends ParserContext
     return context.runtime.newBoolean(recovery);
   }
 
-  /**
-   * If the handler's document is a FragmentHandler, attempt to trim
-   * leading and trailing whitespace.
-   *
-   * This is a bit hackish and depends heavily on the internals of
-   * FragmentHandler.
-   */
-  protected void
-  maybeTrimLeadingAndTrailingWhitespace(ThreadContext context, IRubyObject parser)
-  {
-    RubyObjectAdapter adapter = JavaEmbedUtils.newObjectAdapter();
-    RubyModule mod = context.getRuntime().getClassFromPath(""Nokogiri::XML::FragmentHandler"");
-
-    IRubyObject handler = adapter.getInstanceVariable(parser, ""@document"");
-    if (handler == null || handler.isNil() || !adapter.isKindOf(handler, mod)) {
-      return;
-    }
-    IRubyObject stack = adapter.getInstanceVariable(handler, ""@stack"");
-    if (stack == null || stack.isNil()) {
-      return;
-    }
-    // doc is finally a DocumentFragment whose nodes we can check
-    IRubyObject doc = adapter.callMethod(stack, ""first"");
-    if (doc == null || doc.isNil()) {
-      return;
-    }
-
-    IRubyObject children;
-
-    for (;;) {
-      children = adapter.callMethod(doc, ""children"");
-      IRubyObject first = adapter.callMethod(children, ""first"");
-      if (NokogiriHelpers.isBlank(first)) { adapter.callMethod(first, ""unlink""); }
-      else { break; }
-    }
-
-    for (;;) {
-      children = adapter.callMethod(doc, ""children"");
-      IRubyObject last = adapter.callMethod(children, ""last"");
-      if (NokogiriHelpers.isBlank(last)) { adapter.callMethod(last, ""unlink""); }
-      else { break; }
-    }
-
-    // While we have a document, normalize it.
-    ((XmlNode) doc).normalize();
-  }
-
   @JRubyMethod(name = ""column"")
   public IRubyObject
   column(ThreadContext context)
@@ -383,5 +321,4 @@ public class XmlSaxParserContext extends ParserContext
     if (number == null) { return context.getRuntime().getNil(); }
     return RubyFixnum.newFixnum(context.getRuntime(), number.longValue());
   }
-
 }
diff --git a/ext/java/nokogiri/XmlSaxPushParser.java b/ext/java/nokogiri/XmlSaxPushParser.java
index 019965df8cb..81bbb0c5bc1 100644
--- a/ext/java/nokogiri/XmlSaxPushParser.java
+++ b/ext/java/nokogiri/XmlSaxPushParser.java
@@ -1,20 +1,9 @@
 package nokogiri;
 
-import static nokogiri.internals.NokogiriHelpers.getNokogiriClass;
-import static org.jruby.runtime.Helpers.invoke;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.ThreadFactory;
-
+import nokogiri.internals.*;
 import org.jruby.Ruby;
 import org.jruby.RubyClass;
+import org.jruby.RubyException;
 import org.jruby.RubyObject;
 import org.jruby.anno.JRubyClass;
 import org.jruby.anno.JRubyMethod;
@@ -22,11 +11,14 @@
 import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 
-import nokogiri.internals.ClosedStreamException;
-import nokogiri.internals.NokogiriBlockingQueueInputStream;
-import nokogiri.internals.NokogiriHandler;
-import nokogiri.internals.NokogiriHelpers;
-import nokogiri.internals.ParserContext;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+import java.util.concurrent.*;
+
+import static nokogiri.internals.NokogiriHelpers.getNokogiriClass;
+import static org.jruby.runtime.Helpers.invoke;
 
 /**
  * Class for Nokogiri::XML::SAX::PushParser
@@ -159,7 +151,8 @@ public class XmlSaxPushParser extends RubyObject
 
     if (!options.recover && parserTask.getErrorCount() > errorCount0) {
       terminateTask(context.runtime);
-      throw ex = parserTask.getLastError();
+      ex = parserTask.getLastError().toThrowable();
+      throw ex;
     }
 
     return this;
@@ -278,16 +271,15 @@ static class ParserTask extends ParserContext.ParserTask<XmlSaxParserContext>
     getErrorCount()
     {
       // check for null because thread may not have started yet
-      if (parser.getNokogiriHandler() == null) { return 0; }
-      return parser.getNokogiriHandler().getErrorCount();
+      if (parser.getNokogiriErrorHandler() == null) { return 0; }
+      return parser.getNokogiriErrorHandler().getErrors().size();
     }
 
-    synchronized final RaiseException
+    synchronized final RubyException
     getLastError()
     {
-      return parser.getNokogiriHandler().getLastError();
+      List<RubyException> errors = parser.getNokogiriErrorHandler().getErrors();
+      return errors.get(errors.size() - 1);
     }
-
   }
-
 }
diff --git a/ext/java/nokogiri/internals/NokogiriEntityResolver.java b/ext/java/nokogiri/internals/NokogiriEntityResolver.java
index 6ee5de87bd3..eb9a8b5b3d0 100644
--- a/ext/java/nokogiri/internals/NokogiriEntityResolver.java
+++ b/ext/java/nokogiri/internals/NokogiriEntityResolver.java
@@ -85,7 +85,7 @@ public class NokogiriEntityResolver implements EntityResolver2
   private void
   addError(String errorMessage)
   {
-    if (handler != null) { handler.errors.add(new Exception(errorMessage)); }
+    if (handler != null) { handler.addError(new Exception(errorMessage)); }
   }
 
   /**
diff --git a/ext/java/nokogiri/internals/NokogiriErrorHandler.java b/ext/java/nokogiri/internals/NokogiriErrorHandler.java
index 51d8e05daec..9c4683ee488 100644
--- a/ext/java/nokogiri/internals/NokogiriErrorHandler.java
+++ b/ext/java/nokogiri/internals/NokogiriErrorHandler.java
@@ -1,11 +1,15 @@
 package nokogiri.internals;
 
-import java.util.ArrayList;
-import java.util.List;
-
+import nokogiri.XmlSyntaxError;
 import org.apache.xerces.xni.parser.XMLErrorHandler;
+import org.jruby.Ruby;
+import org.jruby.RubyException;
+import org.jruby.exceptions.RaiseException;
 import org.xml.sax.ErrorHandler;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Super class of error handlers.
  *
@@ -17,23 +21,40 @@
  */
 public abstract class NokogiriErrorHandler implements ErrorHandler, XMLErrorHandler
 {
-  protected final List<Exception> errors;
+  private final Ruby runtime;
+  protected final List<RubyException> errors;
   protected boolean noerror;
   protected boolean nowarning;
 
   public
-  NokogiriErrorHandler(boolean noerror, boolean nowarning)
+  NokogiriErrorHandler(Ruby runtime, boolean noerror, boolean nowarning)
   {
-    this.errors = new ArrayList<Exception>(4);
+    this.runtime = runtime;
+    this.errors = new ArrayList<RubyException>(4);
     this.noerror = noerror;
     this.nowarning = nowarning;
   }
 
-  List<Exception>
+  public List<RubyException>
   getErrors() { return errors; }
 
   public void
-  addError(Exception ex) { errors.add(ex); }
+  addError(Exception ex)
+  {
+    addError(XmlSyntaxError.createXMLSyntaxError(runtime, ex));
+  }
+
+  public void
+  addError(RubyException ex)
+  {
+    errors.add(ex);
+  }
+
+  public void
+  addError(RaiseException ex)
+  {
+    addError(ex.getException());
+  }
 
   protected boolean
   usesNekoHtml(String domain)
diff --git a/ext/java/nokogiri/internals/NokogiriHandler.java b/ext/java/nokogiri/internals/NokogiriHandler.java
index 86a39c12048..fdc57f4f881 100644
--- a/ext/java/nokogiri/internals/NokogiriHandler.java
+++ b/ext/java/nokogiri/internals/NokogiriHandler.java
@@ -38,25 +38,19 @@ public class NokogiriHandler extends DefaultHandler2 implements XmlDeclHandler
   private final Ruby runtime;
   private final RubyClass attrClass;
   private final IRubyObject object;
-
-  /**
-   * Stores parse errors with the most-recent error last.
-   *
-   * TODO: should these be stored in the document 'errors' array?
-   * Currently only string messages are stored there.
-   */
-  private final LinkedList<RaiseException> errors = new LinkedList<RaiseException>();
+  private NokogiriErrorHandler errorHandler;
 
   private Locator locator;
   private boolean needEmptyAttrCheck;
 
   public
-  NokogiriHandler(Ruby runtime, IRubyObject object)
+  NokogiriHandler(Ruby runtime, IRubyObject object, NokogiriErrorHandler errorHandler)
   {
     assert object != null;
     this.runtime = runtime;
     this.attrClass = (RubyClass) runtime.getClassFromPath(""Nokogiri::XML::SAX::Parser::Attribute"");
     this.object = object;
+    this.errorHandler = errorHandler;
     charactersBuilder = new StringBuilder();
     String objectName = object.getMetaClass().getName();
     if (""Nokogiri::HTML4::SAX::Parser"".equals(objectName)) { needEmptyAttrCheck = true; }
@@ -253,9 +247,9 @@ public class NokogiriHandler extends DefaultHandler2 implements XmlDeclHandler
     try {
       final String msg = ex.getMessage();
       call(""error"", runtime.newString(msg == null ? """" : msg));
-      addError(XmlSyntaxError.createError(runtime, ex).toThrowable());
+      errorHandler.addError(ex);
     } catch (RaiseException e) {
-      addError(e);
+      errorHandler.addError(e);
       throw e;
     }
   }
@@ -282,22 +276,10 @@ public class NokogiriHandler extends DefaultHandler2 implements XmlDeclHandler
     call(""warning"", runtime.newString(msg == null ? """" : msg));
   }
 
-  protected synchronized void
-  addError(RaiseException e)
-  {
-    errors.add(e);
-  }
-
   public synchronized int
   getErrorCount()
   {
-    return errors.size();
-  }
-
-  public synchronized RaiseException
-  getLastError()
-  {
-    return errors.getLast();
+    return errorHandler.getErrors().size();
   }
 
   private void
diff --git a/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler.java b/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler.java
index 1a9e5af4903..bc907ddf951 100644
--- a/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler.java
+++ b/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler.java
@@ -1,6 +1,7 @@
 package nokogiri.internals;
 
 import org.apache.xerces.xni.parser.XMLParseException;
+import org.jruby.Ruby;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
@@ -13,21 +14,21 @@
 public class NokogiriNonStrictErrorHandler extends NokogiriErrorHandler
 {
   public
-  NokogiriNonStrictErrorHandler(boolean noerror, boolean nowarning)
+  NokogiriNonStrictErrorHandler(Ruby runtime, boolean noerror, boolean nowarning)
   {
-    super(noerror, nowarning);
+    super(runtime, noerror, nowarning);
   }
 
   public void
   warning(SAXParseException ex) throws SAXException
   {
-    errors.add(ex);
+    addError(ex);
   }
 
   public void
   error(SAXParseException ex) throws SAXException
   {
-    errors.add(ex);
+    addError(ex);
   }
 
   public void
@@ -38,7 +39,7 @@ public class NokogiriNonStrictErrorHandler extends NokogiriErrorHandler
     // found in the prolog, instead it will keep calling this method and we'll
     // keep inserting the error in the document errors array until we run
     // out of memory
-    errors.add(ex);
+    addError(ex);
     String message = ex.getMessage();
 
     // The problem with Xerces is that some errors will cause the
@@ -53,19 +54,19 @@ public class NokogiriNonStrictErrorHandler extends NokogiriErrorHandler
   public void
   error(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
   public void
   fatalError(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
   public void
   warning(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
   /*
diff --git a/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler4NekoHtml.java b/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler4NekoHtml.java
index 286820a423d..152ee4657c4 100644
--- a/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler4NekoHtml.java
+++ b/ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler4NekoHtml.java
@@ -1,6 +1,7 @@
 package nokogiri.internals;
 
 import org.apache.xerces.xni.parser.XMLParseException;
+import org.jruby.Ruby;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
@@ -20,15 +21,15 @@ public class NokogiriNonStrictErrorHandler4NekoHtml extends NokogiriErrorHandler
 {
 
   public
-  NokogiriNonStrictErrorHandler4NekoHtml(boolean nowarning)
+  NokogiriNonStrictErrorHandler4NekoHtml(Ruby runtime, boolean nowarning)
   {
-    super(false, nowarning);
+    super(runtime, false, nowarning);
   }
 
   public
-  NokogiriNonStrictErrorHandler4NekoHtml(boolean noerror, boolean nowarning)
+  NokogiriNonStrictErrorHandler4NekoHtml(Ruby runtime, boolean noerror, boolean nowarning)
   {
-    super(noerror, nowarning);
+    super(runtime, noerror, nowarning);
   }
 
   public void
@@ -40,13 +41,13 @@ public class NokogiriNonStrictErrorHandler4NekoHtml extends NokogiriErrorHandler
   public void
   error(SAXParseException ex) throws SAXException
   {
-    errors.add(ex);
+    addError(ex);
   }
 
   public void
   fatalError(SAXParseException ex) throws SAXException
   {
-    errors.add(ex);
+    addError(ex);
   }
 
   /**
@@ -64,7 +65,7 @@ public class NokogiriNonStrictErrorHandler4NekoHtml extends NokogiriErrorHandler
   public void
   error(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
   /**
@@ -82,7 +83,7 @@ public class NokogiriNonStrictErrorHandler4NekoHtml extends NokogiriErrorHandler
   public void
   fatalError(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
   /**
@@ -100,7 +101,7 @@ public class NokogiriNonStrictErrorHandler4NekoHtml extends NokogiriErrorHandler
   public void
   warning(String domain, String key, XMLParseException e)
   {
-    errors.add(e);
+    addError(e);
   }
 
 }
diff --git a/ext/java/nokogiri/internals/NokogiriStrictErrorHandler.java b/ext/java/nokogiri/internals/NokogiriStrictErrorHandler.java
index e5566b5787f..10cbc6f4417 100644
--- a/ext/java/nokogiri/internals/NokogiriStrictErrorHandler.java
+++ b/ext/java/nokogiri/internals/NokogiriStrictErrorHandler.java
@@ -1,6 +1,7 @@
 package nokogiri.internals;
 
 import org.apache.xerces.xni.parser.XMLParseException;
+import org.jruby.Ruby;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
@@ -14,23 +15,23 @@
 public class NokogiriStrictErrorHandler extends NokogiriErrorHandler
 {
   public
-  NokogiriStrictErrorHandler(boolean noerror, boolean nowarning)
+  NokogiriStrictErrorHandler(Ruby runtime, boolean noerror, boolean nowarning)
   {
-    super(noerror, nowarning);
+    super(runtime, noerror, nowarning);
   }
 
   public void
   warning(SAXParseException spex) throws SAXException
   {
     if (!nowarning) { throw spex; }
-    else { errors.add(spex); }
+    else { addError(spex); }
   }
 
   public void
   error(SAXParseException spex) throws SAXException
   {
     if (!noerror) { throw spex; }
-    else { errors.add(spex); }
+    else { addError(spex); }
   }
 
   public void
@@ -43,7 +44,7 @@ public class NokogiriStrictErrorHandler extends NokogiriErrorHandler
   error(String domain, String key, XMLParseException e) throws XMLParseException
   {
     if (!noerror) { throw e; }
-    else { errors.add(e); }
+    else { addError(e); }
   }
 
   public void
@@ -56,6 +57,6 @@ public class NokogiriStrictErrorHandler extends NokogiriErrorHandler
   warning(String domain, String key, XMLParseException e) throws XMLParseException
   {
     if (!nowarning) { throw e; }
-    if (!usesNekoHtml(domain)) { errors.add(e); }
+    if (!usesNekoHtml(domain)) { addError(e); }
   }
 }
diff --git a/ext/java/nokogiri/internals/XmlDomParserContext.java b/ext/java/nokogiri/internals/XmlDomParserContext.java
index b94d1ae1f97..3621f1f98f3 100644
--- a/ext/java/nokogiri/internals/XmlDomParserContext.java
+++ b/ext/java/nokogiri/internals/XmlDomParserContext.java
@@ -1,30 +1,24 @@
 package nokogiri.internals;
 
-import static nokogiri.internals.NokogiriHelpers.getNokogiriClass;
-import static nokogiri.internals.NokogiriHelpers.isBlank;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
+import nokogiri.XmlDocument;
+import nokogiri.XmlDtd;
+import nokogiri.XmlSyntaxError;
 import org.apache.xerces.parsers.DOMParser;
-import org.jruby.Ruby;
-import org.jruby.RubyArray;
-import org.jruby.RubyClass;
-import org.jruby.RubyFixnum;
+import org.jruby.*;
 import org.jruby.exceptions.RaiseException;
-import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.Helpers;
+import org.jruby.runtime.ThreadContext;
 import org.jruby.runtime.builtin.IRubyObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
-import nokogiri.NokogiriService;
-import nokogiri.XmlDocument;
-import nokogiri.XmlDtd;
-import nokogiri.XmlSyntaxError;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import static nokogiri.internals.NokogiriHelpers.isBlank;
 
 /**
  * Parser class for XML DOM processing. This class actually parses XML document
@@ -48,7 +42,6 @@ public class XmlDomParserContext extends ParserContext
   protected static final String FEATURE_NOT_EXPAND_ENTITY =
     ""http://apache.org/xml/features/dom/create-entity-ref-nodes"";
   protected static final String FEATURE_VALIDATION = ""http://xml.org/sax/features/validation"";
-  private static final String XINCLUDE_FEATURE_ID = ""http://apache.org/xml/features/xinclude"";
   private static final String SECURITY_MANAGER = ""http://apache.org/xml/properties/security-manager"";
 
   protected ParserContext.Options options;
@@ -69,17 +62,17 @@ public class XmlDomParserContext extends ParserContext
     this.options = new ParserContext.Options(RubyFixnum.fix2long(options));
     java_encoding = NokogiriHelpers.getValidEncodingOrNull(encoding);
     ruby_encoding = encoding;
-    initErrorHandler();
+    initErrorHandler(runtime);
     initParser(runtime);
   }
 
   protected void
-  initErrorHandler()
+  initErrorHandler(Ruby runtime)
   {
     if (options.recover) {
-      errorHandler = new NokogiriNonStrictErrorHandler(options.noError, options.noWarning);
+      errorHandler = new NokogiriNonStrictErrorHandler(runtime, options.noError, options.noWarning);
     } else {
-      errorHandler = new NokogiriStrictErrorHandler(options.noError, options.noWarning);
+      errorHandler = new NokogiriStrictErrorHandler(runtime, options.noError, options.noWarning);
     }
   }
 
@@ -161,12 +154,10 @@ public class XmlDomParserContext extends ParserContext
   mapErrors(ThreadContext context, NokogiriErrorHandler errorHandler)
   {
     final Ruby runtime = context.runtime;
-    final List<Exception> errors = errorHandler.getErrors();
+    final List<RubyException> errors = errorHandler.getErrors();
     final IRubyObject[] errorsAry = new IRubyObject[errors.size()];
     for (int i = 0; i < errors.size(); i++) {
-      XmlSyntaxError xmlSyntaxError = XmlSyntaxError.createXMLSyntaxError(runtime);
-      xmlSyntaxError.setException(errors.get(i));
-      errorsAry[i] = xmlSyntaxError;
+      errorsAry[i] = errors.get(i);
     }
     return runtime.newArrayNoCopy(errorsAry);
   }

From 382860304b2efbf837cb3fcbbe806c81c27bf6b1 Mon Sep 17 00:00:00 2001
From: Mike Dalessio <mike.dalessio@gmail.com>
Date: Fri, 24 Sep 2021 14:15:26 -0400
Subject: [PATCH 3/3] fix(jruby): SAX parser uses an entity resolver

to avoid XXE injections.

This behavior now matches the CRuby implementation.
---
 ext/java/nokogiri/XmlSaxParserContext.java |  1 +
 test/xml/sax/test_parser.rb                | 33 ++++++++++++++++++++++
 2 files changed, 34 insertions(+)

diff --git a/ext/java/nokogiri/XmlSaxParserContext.java b/ext/java/nokogiri/XmlSaxParserContext.java
index b92538c76a2..573c069740b 100644
--- a/ext/java/nokogiri/XmlSaxParserContext.java
+++ b/ext/java/nokogiri/XmlSaxParserContext.java
@@ -225,6 +225,7 @@ public class XmlSaxParserContext extends ParserContext
     preParse(runtime, handlerRuby, handler);
     parser.setContentHandler(handler);
     parser.setErrorHandler(handler);
+    parser.setEntityResolver(new NokogiriEntityResolver(runtime, errorHandler, options));
 
     try {
       parser.setProperty(""http://xml.org/sax/properties/lexical-handler"", handler);
diff --git a/test/xml/sax/test_parser.rb b/test/xml/sax/test_parser.rb
index 69f16d66d2e..1a54ff638b7 100644
--- a/test/xml/sax/test_parser.rb
+++ b/test/xml/sax/test_parser.rb
@@ -426,5 +426,38 @@ def call_parse_io_with_encoding(encoding)
 
       assert_predicate(handler.errors, :empty?)
     end
+
+    it ""does not resolve entities by default"" do
+      xml = <<~EOF
+        <?xml version=""1.0"" encoding=""UTF-8""?>
+        <!DOCTYPE doc [
+          <!ENTITY local SYSTEM ""file:///#{File.expand_path(__FILE__)}"">
+          <!ENTITY custom ""resolved>
+        ]>
+        <doc><foo>&local;</foo><foo>&custom;</foo></doc>
+      EOF
+
+      doc = Doc.new
+      parser = Nokogiri::XML::SAX::Parser.new(doc)
+      parser.parse(xml)
+
+      assert_nil(doc.data)
+    end
+
+    it ""does not resolve network external entities by default"" do
+      xml = <<~EOF
+        <?xml version=""1.0"" encoding=""UTF-8""?>
+        <!DOCTYPE doc [
+          <!ENTITY remote SYSTEM ""http://0.0.0.0:8080/evil.dtd"">
+        ]>
+        <doc><foo>&remote;</foo></doc>
+      EOF
+
+      doc = Doc.new
+      parser = Nokogiri::XML::SAX::Parser.new(doc)
+      parser.parse(xml)
+
+      assert_nil(doc.data)
+    end
   end
 end"
CVE-2021-21250,"From 9196fd795e87dab069b4260a3590a0ea886e770f Mon Sep 17 00:00:00 2001
From: robin <robin@ubuntu>
Date: Sat, 21 Nov 2020 21:37:06 +0800
Subject: [PATCH] Fix XXE injection attack by disabling XML DTD handling

---
 .../io/onedev/server/migration/XmlBuildSpecMigrator.java  | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java b/server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java
index 5fecc3ed5c..9d59206e0e 100644
--- a/server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java
+++ b/server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java
@@ -10,6 +10,7 @@
 import org.dom4j.DocumentException;
 import org.dom4j.Element;
 import org.dom4j.io.SAXReader;
+import org.xml.sax.SAXException;
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.DumperOptions.FlowStyle;
 import org.yaml.snakeyaml.emitter.Emitter;
@@ -662,8 +663,11 @@ private static List<Node> migrateFieldSupplies(List<Element> fieldSupplyElements
 	public static String migrate(String xml) {
 		Document xmlDoc;
 		try {
-			xmlDoc = new SAXReader().read(new StringReader(xml));
-		} catch (DocumentException e) {
+			SAXReader reader = new SAXReader();
+			// Prevent XXE attack as the xml might be provided by malicious users
+			reader.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
+			xmlDoc = reader.read(new StringReader(xml));
+		} catch (DocumentException | SAXException e) {
 			throw new RuntimeException(e);
 		}"
GHSA-vjw7-6gfq-6wf5,"From b12f7c4c6576a8adc3f683b2899de4b0e7d099e4 Mon Sep 17 00:00:00 2001
From: Paulo Lopes <pmlopes@gmail.com>
Date: Mon, 28 Sep 2020 13:07:48 +0200
Subject: [PATCH] Fixes #1714: Handle all paths as UNIX (CVE-2019-17640)

Signed-off-by: Paulo Lopes <pmlopes@gmail.com>

(cherry picked from commit d519a0959fa54f25e52f2d05bee03e950b4980d3)
Signed-off-by: Paulo Lopes <pmlopes@gmail.com>
---
 .../web/handler/impl/StaticHandlerImpl.java   |  9 ++++--
 .../ext/web/handler/StaticHandlerTest.java    | 31 +++++++++++++++++++
 2 files changed, 37 insertions(+), 3 deletions(-)

diff --git a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
index b7d1ea08fe..754a1db5bc 100644
--- a/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
+++ b/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/StaticHandlerImpl.java
@@ -128,13 +128,16 @@ public void handle(RoutingContext context) {
       if (log.isTraceEnabled()) log.trace(""Not GET or HEAD so ignoring request"");
       context.next();
     } else {
-      String path = HttpUtils.removeDots(URIDecoder.decodeURIComponent(context.normalisedPath(), false));
+      // decode URL path
+      String uriDecodedPath = URIDecoder.decodeURIComponent(context.normalisedPath(), false);
       // if the normalized path is null it cannot be resolved
-      if (path == null) {
+      if (uriDecodedPath == null) {
         log.warn(""Invalid path: "" + context.request().path());
         context.next();
         return;
       }
+      // will normalize and handle all paths as UNIX paths
+      String path = HttpUtils.removeDots(uriDecodedPath.replace('\\', '/'));
 
       // only root is known for sure to be a directory. all other directories must be identified as such.
       if (!directoryListing && ""/"".equals(path)) {
@@ -764,7 +767,7 @@ public boolean isMissing() {
 
   private static class FSTune {
     // These members are all related to auto tuning of synchronous vs asynchronous file system access
-    private static int NUM_SERVES_TUNING_FS_ACCESS = 1000;
+    private static final int NUM_SERVES_TUNING_FS_ACCESS = 1000;
 
     // these variables are read often and should always represent the
     // real value, no caching should be allowed
diff --git a/vertx-web/src/test/java/io/vertx/ext/web/handler/StaticHandlerTest.java b/vertx-web/src/test/java/io/vertx/ext/web/handler/StaticHandlerTest.java
index c561c01ddb..9478ad47a6 100644
--- a/vertx-web/src/test/java/io/vertx/ext/web/handler/StaticHandlerTest.java
+++ b/vertx-web/src/test/java/io/vertx/ext/web/handler/StaticHandlerTest.java
@@ -52,6 +52,15 @@ public void testGetDefaultIndex() throws Exception {
     testRequest(HttpMethod.GET, ""/"", 200, ""OK"", ""<html><body>Index page</body></html>"");
   }
 
+  @Test
+  public void testGetSubdirectoryWithoutSlashDefaultIndex() throws Exception {
+    // in the case the file is a directory, it redirects to the root.
+    testRequest(HttpMethod.GET, ""/somedir"", null, res -> {
+      String location = res.headers().get(""location"");
+      assertEquals(""/somedir/"", location);
+    }, 301, ""Moved Permanently"", null);
+  }
+
   @Test
   public void testGetSubdirectorySlashDefaultIndex() throws Exception {
     testRequest(HttpMethod.GET, ""/somedir/"", 200, ""OK"", ""<html><body>Subdirectory index page</body></html>"");
@@ -844,6 +853,28 @@ public void testHandlerAfter() throws Exception {
     testRequest(HttpMethod.GET, ""/not-existing-file.html"", 200, ""OK"", ""Howdy!"");
   }
 
+  @Test
+  public void testWriteResponseWhenAlreadyClosed() throws Exception {
+    router.clear();
+    router
+      .route()
+      .handler(rc -> {
+        rc.next();
+        rc.response().end(""OtherResponse"");
+      })
+      .handler(stat);
+    testRequest(HttpMethod.GET, ""/index.html"", 200, ""OK"", ""OtherResponse"");
+  }
+
+  @Test
+  public void testEscapeWindows() throws Exception {
+    router.clear();
+    router
+      .route()
+      .handler(stat);
+    // /\..\index.html -> /index.html
+    testRequest(HttpMethod.GET, ""/%5c..%5cindex.html"", 200, ""OK"");
+  }
 
   // TODO
   // 1.Test all the params including invalid values"
CVE-2014-9634,"From 582128b9ac179a788d43c1478be8a5224dc19710 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Thu, 16 Oct 2014 19:15:56 -0700
Subject: [PATCH] [FIXED JENKINS-25019]

A truly conforming servlet 3.0 container does not allow us to set ""secure cookie"" flag beyond ServletContextListener.onInitialized().
If we see that, don't scare the users.
---
 changelog.html                                |  4 +++
 core/src/main/java/hudson/WebAppMain.java     | 28 +++++++++++++++++++
 .../model/JenkinsLocationConfiguration.java   | 16 +++++++----
 3 files changed, 42 insertions(+), 6 deletions(-)

diff --git a/changelog.html b/changelog.html
index d8a3ebc75a0e..96236f78f915 100644
--- a/changelog.html
+++ b/changelog.html
@@ -61,6 +61,10 @@
   <li class=bug>
     Prevent empty file creation if file parameter is left empty.
     (<a href=""https://issues.jenkins-ci.org/browse/JENKINS-3539"">issue 3539</a>)
+  <li class=bug>
+    Servlet containers may refuse to let us set <a href=""https://www.owasp.org/index.php/SecureFlag"">secure cookie flag</a>.
+    Deal with it gracefully.
+    (<a href=""https://issues.jenkins-ci.org/browse/JENKINS-25019"">issue 25019</a>)
 </ul>
 </div><!--=TRUNK-END=-->
 
diff --git a/core/src/main/java/hudson/WebAppMain.java b/core/src/main/java/hudson/WebAppMain.java
index 1f332e975134..11d438d5ab04 100644
--- a/core/src/main/java/hudson/WebAppMain.java
+++ b/core/src/main/java/hudson/WebAppMain.java
@@ -56,6 +56,7 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.util.Date;
@@ -116,6 +117,8 @@ public Locale get() {
 
             installLogger();
 
+            markCookieAsHttpOnly(context);
+
             final FileAndDescription describedHomeDir = getHomeDir(event);
             home = describedHomeDir.file.getAbsoluteFile();
             home.mkdirs();
@@ -251,6 +254,31 @@ public void run() {
         }
     }
 
+    /**
+     * Set the session cookie as HTTP only.
+     *
+     * @see <a href=""https://www.owasp.org/index.php/HttpOnly"">discussion of this topic in OWASP</a>
+     */
+    private void markCookieAsHttpOnly(ServletContext context) {
+        try {
+            Method m;
+            try {
+                m = context.getClass().getMethod(""getSessionCookieConfig"");
+            } catch (NoSuchMethodException x) { // 3.0+
+                LOGGER.log(Level.FINE, ""Failed to set secure cookie flag"", x);
+                return;
+            }
+            Object sessionCookieConfig = m.invoke(context);
+
+            // not exposing session cookie to JavaScript to mitigate damage caused by XSS
+            Class scc = Class.forName(""javax.servlet.SessionCookieConfig"");
+            Method setHttpOnly = scc.getMethod(""setHttpOnly"",boolean.class);
+            setHttpOnly.invoke(sessionCookieConfig,true);
+        } catch (Exception e) {
+            LOGGER.log(Level.WARNING, ""Failed to set HTTP-only cookie flag"", e);
+        }
+    }
+
     public void joinInit() throws InterruptedException {
         initThread.join();
     }
diff --git a/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java b/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
index 6836467217f2..c10e51d526b6 100644
--- a/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
+++ b/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java
@@ -14,6 +14,7 @@
 import javax.servlet.ServletContext;
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -117,14 +118,17 @@ private void updateSecureSessionFlag() {
             }
             Object sessionCookieConfig = m.invoke(context);
 
-            // not exposing session cookie to JavaScript to mitigate damage caused by XSS
             Class scc = Class.forName(""javax.servlet.SessionCookieConfig"");
-            Method setHttpOnly = scc.getMethod(""setHttpOnly"",boolean.class);
-            setHttpOnly.invoke(sessionCookieConfig,true);
-
-            Method setSecure = scc.getMethod(""setSecure"",boolean.class);
+            Method setSecure = scc.getMethod(""setSecure"", boolean.class);
             boolean v = fixNull(jenkinsUrl).startsWith(""https"");
-            setSecure.invoke(sessionCookieConfig,v);
+            setSecure.invoke(sessionCookieConfig, v);
+        } catch (InvocationTargetException e) {
+            if (e.getTargetException() instanceof IllegalStateException) {
+                // servlet 3.0 spec seems to prohibit this from getting set at runtime,
+                // though Winstone is happy to accept i. see JENKINS-25019
+                return;
+            }
+            LOGGER.log(Level.WARNING, ""Failed to set secure cookie flag"", e);
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, ""Failed to set secure cookie flag"", e);
         }"
GHSA-qm6v-cg9v-53j3,"From 8d5ec1614eed109b812bc27b0c6d3214e456d4e7 Mon Sep 17 00:00:00 2001
From: Lars Kiesow <lkiesow@uos.de>
Date: Wed, 18 May 2022 12:43:56 +0200
Subject: [PATCH] Merge pull request from GHSA-qm6v-cg9v-53j3

This patch fixes the issue that users can pass URLs from other tenants
to the ingest service which will check only against the other
organization but not against the one currently active. This allows users
to easily ingest media from other tenants.
---
 .../ingest/impl/IngestServiceImpl.java              | 13 +------------
 1 file changed, 1 insertion(+), 12 deletions(-)

diff --git a/modules/ingest-service-impl/src/main/java/org/opencastproject/ingest/impl/IngestServiceImpl.java b/modules/ingest-service-impl/src/main/java/org/opencastproject/ingest/impl/IngestServiceImpl.java
index f50e7cbefec..f12f2eaeea4 100644
--- a/modules/ingest-service-impl/src/main/java/org/opencastproject/ingest/impl/IngestServiceImpl.java
+++ b/modules/ingest-service-impl/src/main/java/org/opencastproject/ingest/impl/IngestServiceImpl.java
@@ -129,7 +129,6 @@
 import java.util.Dictionary;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -137,7 +136,6 @@
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
 
 import javax.management.ObjectInstance;
 
@@ -1568,16 +1566,7 @@ protected URI addContentToRepo(MediaPackage mp, String elementId, URI uri) throw
     try {
       if (uri.toString().startsWith(""http"")) {
         HttpGet get = new HttpGet(uri);
-        List<String> clusterUrls = new LinkedList<>();
-        try {
-          // Note that we are not checking ports here.
-          clusterUrls = organizationDirectoryService.getOrganization(uri.toURL()).getServers()
-                          .keySet()
-                          .stream()
-                          .collect(Collectors.toUnmodifiableList());
-        } catch (NotFoundException e) {
-          logger.warn(""Unable to determine cluster members, will not be able to authenticate any downloads from them"", e);
-        }
+        var clusterUrls = securityService.getOrganization().getServers().keySet();
 
         if (uri.toString().matches(downloadSource)) {
           //NB: We're creating a new client here with *different* auth than the system auth creds"
GHSA-mgh8-hcwj-h57v,"From c3f982db3d97e395d313ae8f231202bb2139882c Mon Sep 17 00:00:00 2001
From: Artem Smotrakov <artem.smotrakov@sap.com>
Date: Wed, 13 Nov 2019 10:55:48 +0100
Subject: [PATCH] [OLINGO-1409] Better XML parsing

---
 .../apache/olingo/fit/metadata/Metadata.java  |   4 +
 .../fit/utils/XMLEventReaderWrapper.java      |   4 +
 .../apache/olingo/fit/utils/XMLUtilities.java |   4 +
 .../olingo/fit/metadata/MetadataTest.java     | 168 ++++++++++++++++++
 .../olingo/fit/metadata/TestHttpServer.java   |  79 ++++++++
 .../core/serialization/AtomDeserializer.java  |   9 +-
 .../olingo/server/core/MetadataParser.java    |   2 +-
 .../xml/ODataXmlDeserializer.java             |   2 +-
 8 files changed, 268 insertions(+), 4 deletions(-)
 create mode 100644 fit/src/test/java/org/apache/olingo/fit/metadata/MetadataTest.java
 create mode 100644 fit/src/test/java/org/apache/olingo/fit/metadata/TestHttpServer.java

diff --git a/fit/src/main/java/org/apache/olingo/fit/metadata/Metadata.java b/fit/src/main/java/org/apache/olingo/fit/metadata/Metadata.java
index 0d88b1dfa5..940d692adf 100644
--- a/fit/src/main/java/org/apache/olingo/fit/metadata/Metadata.java
+++ b/fit/src/main/java/org/apache/olingo/fit/metadata/Metadata.java
@@ -40,6 +40,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static javax.xml.stream.XMLInputFactory.*;
+
 public class Metadata extends AbstractMetadataElement {
 
   /**
@@ -57,6 +59,8 @@ public Metadata(final InputStream is) {
 
     try {
       final XMLInputFactory ifactory = XMLInputFactory.newInstance();
+      ifactory.setProperty(SUPPORT_DTD, false);
+      ifactory.setProperty(IS_SUPPORTING_EXTERNAL_ENTITIES, false);
       final XMLEventReader reader = ifactory.createXMLEventReader(is, org.apache.olingo.commons.api.Constants.UTF8);
 
       try {
diff --git a/fit/src/main/java/org/apache/olingo/fit/utils/XMLEventReaderWrapper.java b/fit/src/main/java/org/apache/olingo/fit/utils/XMLEventReaderWrapper.java
index 14936fc7ae..61803e326b 100644
--- a/fit/src/main/java/org/apache/olingo/fit/utils/XMLEventReaderWrapper.java
+++ b/fit/src/main/java/org/apache/olingo/fit/utils/XMLEventReaderWrapper.java
@@ -31,6 +31,8 @@
 
 import org.apache.commons.io.IOUtils;
 
+import static javax.xml.stream.XMLInputFactory.*;
+
 public class XMLEventReaderWrapper implements XMLEventReader {
 
   private static final Charset ENCODING = Charset.forName(org.apache.olingo.commons.api.Constants.UTF8);
@@ -58,6 +60,8 @@ public XMLEventReaderWrapper(final InputStream stream)
     CONTENT_STAG = startBuilder.toString();
 
     final XMLInputFactory factory = XMLInputFactory.newInstance();
+    factory.setProperty(SUPPORT_DTD, false);
+    factory.setProperty(IS_SUPPORTING_EXTERNAL_ENTITIES, false);
 
     final InputStreamReader reader = new InputStreamReader(
         new ByteArrayInputStream((CONTENT_STAG
diff --git a/fit/src/main/java/org/apache/olingo/fit/utils/XMLUtilities.java b/fit/src/main/java/org/apache/olingo/fit/utils/XMLUtilities.java
index c7930f0cca..293d631231 100644
--- a/fit/src/main/java/org/apache/olingo/fit/utils/XMLUtilities.java
+++ b/fit/src/main/java/org/apache/olingo/fit/utils/XMLUtilities.java
@@ -60,6 +60,8 @@
 import org.apache.olingo.fit.metadata.Metadata;
 import org.apache.olingo.fit.metadata.NavigationProperty;
 
+import static javax.xml.stream.XMLInputFactory.*;
+
 public class XMLUtilities extends AbstractUtilities {
 
   private static final Pattern ENTITY_URI_PATTERN = Pattern.compile("".*\\/.*\\(.*\\)"");
@@ -80,6 +82,8 @@ protected Accept getDefaultFormat() {
   protected XMLEventReader getEventReader(final InputStream is) throws XMLStreamException {
     if (ifactory == null) {
       ifactory = XMLInputFactory.newInstance();
+      ifactory.setProperty(SUPPORT_DTD, false);
+      ifactory.setProperty(IS_SUPPORTING_EXTERNAL_ENTITIES, false);
     }
 
     return ifactory.createXMLEventReader(new InputStreamReader(is, Constants.DECODER));
diff --git a/fit/src/test/java/org/apache/olingo/fit/metadata/MetadataTest.java b/fit/src/test/java/org/apache/olingo/fit/metadata/MetadataTest.java
new file mode 100644
index 0000000000..3f4824da3c
--- /dev/null
+++ b/fit/src/test/java/org/apache/olingo/fit/metadata/MetadataTest.java
@@ -0,0 +1,168 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.olingo.fit.metadata;
+
+import org.junit.Test;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+
+import static org.junit.Assert.fail;
+
+public class MetadataTest {
+
+    @Test
+    public void testExternalEntity() throws IOException {
+        TestHttpServer server = new TestHttpServer(""secret"");
+        try {
+            String xml = String.format(
+                    ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
+                            + ""<!DOCTYPE oops [\n""
+                            + ""     <!ENTITY foo SYSTEM \""%s\"" >\n""
+                            + ""]>\n""
+                            + ""<oops>&foo;</oops>"",
+                    server.url());
+
+            new Metadata(new ByteArrayInputStream(xml.getBytes()));
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+        } finally {
+            server.close();
+        }
+
+        if (server.accepted()) {
+            fail(""Oops! The server has been reached!"");
+        }
+    }
+
+    @Test
+    public void testExternalSchema() throws IOException {
+        TestHttpServer server = new TestHttpServer(""secret"");
+        try {
+            String xml = String.format(
+                    ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
+                            + ""<!DOCTYPE oops SYSTEM “%s”>\n""
+                            + ""<oops>&foo;</oops>"",
+                    server.url());
+
+            new Metadata(new ByteArrayInputStream(xml.getBytes()));
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+        } finally {
+            server.close();
+        }
+
+        if (server.accepted()) {
+            fail(""Oops! The server has been reached!"");
+        }
+    }
+
+    @Test
+    public void testExternalEntityParameter() throws IOException {
+        TestHttpServer server = new TestHttpServer(""secret"");
+        try {
+            String xml = String.format(
+                    ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""
+                            + ""<!DOCTYPE oops [\n""
+                            + ""     <!ENTITY %% sp SYSTEM \""%s\"">\n""
+                            + ""%%sp;""
+                            + ""]>\n""
+                            + ""<oops></oops>"",
+                    server.url());
+
+            new Metadata(new ByteArrayInputStream(xml.getBytes()));
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+        } finally {
+            server.close();
+        }
+
+        if (server.accepted()) {
+            fail(""Oops! The server has been reached!"");
+        }
+    }
+
+    @Test
+    public void billionLaughs() {
+        String xml =
+                ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" +
+                ""<!DOCTYPE lolz [\n"" +
+                "" <!ENTITY lol \""lol\"">\n"" +
+                "" <!ELEMENT lolz (#PCDATA)>\n"" +
+                "" <!ENTITY lol1 \""&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\"">\n"" +
+                "" <!ENTITY lol2 \""&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\"">\n"" +
+                "" <!ENTITY lol3 \""&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\"">\n"" +
+                "" <!ENTITY lol4 \""&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\"">\n"" +
+                "" <!ENTITY lol5 \""&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\"">\n"" +
+                "" <!ENTITY lol6 \""&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\"">\n"" +
+                "" <!ENTITY lol7 \""&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\"">\n"" +
+                "" <!ENTITY lol8 \""&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\"">\n"" +
+                "" <!ENTITY lol9 \""&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\"">\n"" +
+                ""]>\n"" +
+                ""<lolz>&lol9;</lolz>"";
+
+        new Metadata(new ByteArrayInputStream(xml.getBytes()));
+    }
+
+    @Test
+    public void testExternalXInclude() throws IOException {
+        TestHttpServer server = new TestHttpServer(""secret"");
+        try {
+            String xml = String.format(
+                    ""<root xmlns:xi=\""http://www.w3.org/2001/XInclude\"">\n"" +
+                            ""  <xi:include href=\""%s\"" parse=\""text\"" />\n"" +
+                            ""</root>"",
+                    server.url());
+
+            new Metadata(new ByteArrayInputStream(xml.getBytes()));
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+        } finally {
+            server.close();
+        }
+
+        if (server.accepted()) {
+            fail(""Oops! The server has been reached!"");
+        }
+    }
+
+    @Test
+    public void testExternalSchemaLocation() throws IOException {
+        TestHttpServer server = new TestHttpServer(""secret"");
+        try {
+            String xml = String.format(
+                    ""<ead xmlns=\""urn:isbn:1-931666-22-9\""\n"" +
+                            ""     xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""\n"" +
+                            ""     xsi:schemaLocation=\""urn:isbn:1-931666-22-9 %s\"">\n"" +
+                            ""</ead>"",
+                    server.url());
+
+            new Metadata(new ByteArrayInputStream(xml.getBytes()));
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+        } finally {
+            server.close();
+        }
+
+        if (server.accepted()) {
+            fail(""Oops! The server has been reached!"");
+        }
+    }
+
+}
diff --git a/fit/src/test/java/org/apache/olingo/fit/metadata/TestHttpServer.java b/fit/src/test/java/org/apache/olingo/fit/metadata/TestHttpServer.java
new file mode 100644
index 0000000000..2acbda5001
--- /dev/null
+++ b/fit/src/test/java/org/apache/olingo/fit/metadata/TestHttpServer.java
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.olingo.fit.metadata;
+
+import com.sun.net.httpserver.HttpExchange;
+import com.sun.net.httpserver.HttpHandler;
+import com.sun.net.httpserver.HttpServer;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.net.InetSocketAddress;
+
+/**
+ * Simple HTTP server.
+ */
+public class TestHttpServer implements HttpHandler, AutoCloseable {
+
+    private final String content;
+    private final HttpServer server;
+
+    /**
+     * This flag indicates if the server accepted a connection.
+     */
+    private boolean accepted = false;
+
+    public TestHttpServer(String content) throws IOException {
+        server = HttpServer.create(new InetSocketAddress(0), 0);
+        server.createContext(""/test"", this);
+        server.setExecutor(null);
+        server.start();
+        this.content = content;
+    }
+
+    public String url() {
+        return String.format(""http://localhost:%d/test"", server.getAddress().getPort());
+    }
+
+    @Override
+    public void handle(HttpExchange t) throws IOException {
+        System.out.println(""server: accepted a request"");
+        synchronized (this) {
+            accepted = true;
+        }
+        byte[] response = content.getBytes();
+        t.sendResponseHeaders(200, response.length);
+        try (OutputStream os = t.getResponseBody()) {
+            os.write(response);
+        }
+    }
+
+    /**
+     * @return True if the server accepted a connection, false otherwise.
+     */
+    public boolean accepted() {
+        synchronized (this) {
+            return accepted;
+        }
+    }
+
+    @Override
+    public void close() {
+        server.stop(0);
+    }
+}
\ No newline at end of file
diff --git a/lib/client-core/src/main/java/org/apache/olingo/client/core/serialization/AtomDeserializer.java b/lib/client-core/src/main/java/org/apache/olingo/client/core/serialization/AtomDeserializer.java
index a1b25a5a75..0136a1000a 100644
--- a/lib/client-core/src/main/java/org/apache/olingo/client/core/serialization/AtomDeserializer.java
+++ b/lib/client-core/src/main/java/org/apache/olingo/client/core/serialization/AtomDeserializer.java
@@ -66,6 +66,8 @@
 import com.fasterxml.aalto.stax.InputFactoryImpl;
 import org.apache.olingo.commons.api.ex.ODataErrorDetail;
 
+import static javax.xml.stream.XMLInputFactory.*;
+
 public class AtomDeserializer implements ODataDeserializer {
 
   protected static final QName etagQName = new QName(Constants.NS_METADATA, Constants.ATOM_ATTR_ETAG);
@@ -92,12 +94,15 @@ public class AtomDeserializer implements ODataDeserializer {
       new QName(Constants.NS_ATOM_TOMBSTONE, Constants.ATOM_ELEM_DELETED_ENTRY);
 
   protected static final XMLInputFactory FACTORY = new InputFactoryImpl();
+  static {
+    FACTORY.setProperty(IS_SUPPORTING_EXTERNAL_ENTITIES, false);
+    FACTORY.setProperty(SUPPORT_DTD, false);
+    FACTORY.setProperty(IS_REPLACING_ENTITY_REFERENCES, false);
+  }
 
   private final AtomGeoValueDeserializer geoDeserializer;
   
   protected XMLEventReader getReader(final InputStream input) throws XMLStreamException {
-    FACTORY.setProperty(""javax.xml.stream.isSupportingExternalEntities"", false);
-    FACTORY.setProperty(""javax.xml.stream.isReplacingEntityReferences"", false);
     return FACTORY.createXMLEventReader(input);
   }
 
diff --git a/lib/server-core-ext/src/main/java/org/apache/olingo/server/core/MetadataParser.java b/lib/server-core-ext/src/main/java/org/apache/olingo/server/core/MetadataParser.java
index 3eeaef307f..5cfbfd8976 100644
--- a/lib/server-core-ext/src/main/java/org/apache/olingo/server/core/MetadataParser.java
+++ b/lib/server-core-ext/src/main/java/org/apache/olingo/server/core/MetadataParser.java
@@ -254,7 +254,7 @@ void build(XMLEventReader reader, StartElement element, SchemaBasedEdmProvider p
   private XMLInputFactory createXmlInputFactory() {
     XMLInputFactory factory = XMLInputFactory.newInstance();
     factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
-    factory.setProperty(""javax.xml.stream.isSupportingExternalEntities"", false);
+    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
     return factory;
   }
 
diff --git a/lib/server-core/src/main/java/org/apache/olingo/server/core/deserializer/xml/ODataXmlDeserializer.java b/lib/server-core/src/main/java/org/apache/olingo/server/core/deserializer/xml/ODataXmlDeserializer.java
index 8356cba619..3854875119 100644
--- a/lib/server-core/src/main/java/org/apache/olingo/server/core/deserializer/xml/ODataXmlDeserializer.java
+++ b/lib/server-core/src/main/java/org/apache/olingo/server/core/deserializer/xml/ODataXmlDeserializer.java
@@ -95,7 +95,7 @@ public void setMetadata(ServiceMetadata metadata) {
   
   protected XMLEventReader getReader(final InputStream input) throws XMLStreamException {
     FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, false);
-    FACTORY.setProperty(""javax.xml.stream.isSupportingExternalEntities"", false);
+    FACTORY.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
     return FACTORY.createXMLEventReader(input);
   }"
GHSA-4wm8-c2vv-xrpq,"From 28eb8158210d41168a62ed5f9e044f754513bc37 Mon Sep 17 00:00:00 2001
From: Kim Shepherd <kim@shepherd.nz>
Date: Tue, 26 Jul 2022 16:23:30 +1200
Subject: [PATCH] [DS-4383] Request Item Servlet escape HTML

---
 .../dspace/app/webui/servlet/RequestItemServlet.java  | 11 ++++++-----
 .../org/dspace/app/webui/util/RequestItemManager.java |  4 ++--
 2 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/dspace-jspui/src/main/java/org/dspace/app/webui/servlet/RequestItemServlet.java b/dspace-jspui/src/main/java/org/dspace/app/webui/servlet/RequestItemServlet.java
index 71a20664a6cd..4fc109f4dabe 100644
--- a/dspace-jspui/src/main/java/org/dspace/app/webui/servlet/RequestItemServlet.java
+++ b/dspace-jspui/src/main/java/org/dspace/app/webui/servlet/RequestItemServlet.java
@@ -8,6 +8,7 @@
 package org.dspace.app.webui.servlet;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.log4j.Logger;
 import org.dspace.app.requestitem.RequestItemAuthor;
 import org.dspace.app.requestitem.RequestItemAuthorExtractor;
@@ -135,7 +136,7 @@ private void processForm (Context context,
         // handle
         String handle = request.getParameter(""handle"");
         
-        String bitstream_id=request.getParameter(""bitstream-id"");
+        int  bitstream_id= UIUtil.getIntParameter(request, ""bitstream-id"");
         
         // Title
         String title = null;
@@ -160,7 +161,7 @@ private void processForm (Context context,
 		}
           
         // User email from context
-        String requesterEmail = request.getParameter(""email"");
+        String requesterEmail = StringEscapeUtils.escapeHtml4(request.getParameter(""email""));
         EPerson currentUser = context.getCurrentUser();
         String userName = null;
         
@@ -172,8 +173,8 @@ private void processForm (Context context,
         
         if (request.getParameter(""submit"") != null)
         {
-            String reqname = request.getParameter(""reqname"");
-            String coment = request.getParameter(""coment"");
+            String reqname = StringEscapeUtils.escapeHtml4(request.getParameter(""reqname""));
+            String coment = StringEscapeUtils.escapeHtml4(request.getParameter(""coment""));
             if (coment == null || coment.equals(""""))
                 coment = """";
             boolean allfiles = ""true"".equals(request.getParameter(""allfiles""));
@@ -217,7 +218,7 @@ private void processForm (Context context,
 				email.addArgument(requesterEmail);
 				email.addArgument(allfiles ? I18nUtil
 						.getMessage(""itemRequest.all"") : Bitstream.find(
-						context, Integer.parseInt(bitstream_id)).getName());
+						context, bitstream_id).getName());
 				email.addArgument(HandleManager.getCanonicalForm(item
 						.getHandle()));
 				email.addArgument(title); // request item title
diff --git a/dspace-jspui/src/main/java/org/dspace/app/webui/util/RequestItemManager.java b/dspace-jspui/src/main/java/org/dspace/app/webui/util/RequestItemManager.java
index 07bd8e67fd50..603219f5831f 100644
--- a/dspace-jspui/src/main/java/org/dspace/app/webui/util/RequestItemManager.java
+++ b/dspace-jspui/src/main/java/org/dspace/app/webui/util/RequestItemManager.java
@@ -118,7 +118,7 @@ protected static String getNewToken(Context context, int bitstreamId
      * @exception SQLExeption
      *
      */
-    public static String getLinkTokenEmail(Context context, String bitstreamId
+    public static String getLinkTokenEmail(Context context, int bitstreamId
             , int itemID, String reqEmail, String reqName, boolean allfiles)
             throws SQLException
     {
@@ -128,7 +128,7 @@ public static String getLinkTokenEmail(Context context, String bitstreamId
                 base.endsWith(""/"") ? """" : ""/"").append(
                 ""request-item"").append(""?step="" + RequestItemServlet.ENTER_TOKEN)
                 .append(""&token="")
-                .append(getNewToken(context, Integer.parseInt(bitstreamId), itemID, reqEmail, reqName, allfiles))
+                .append(getNewToken(context, bitstreamId, itemID, reqEmail, reqName, allfiles))
                 .toString();
         
         return specialLink;"
GHSA-fcxw-hhxq-48wx,"From 75ea3fe05650fc6ca09046a72493e2b3f066fb98 Mon Sep 17 00:00:00 2001
From: Mark Waite <mark.earl.waite@gmail.com>
Date: Wed, 12 Apr 2017 22:38:54 -0600
Subject: [PATCH] [Fix SECURITY-445] better protect temporary files

Temporary files were previously written to the system temporary directory
with default permissions.  A malicious actor could have captured sensitive
information by reading files from the temporary directory.  The temporary
files typically are only on the file system for the duration of a single
command line git invocation, but cloning a large git repo could require
an extended time with those sensitive files in the temporary directory.

This change sets permissions on the temporary files to be readable only by
the file owner. If a workspace is available, a temporary directory adjacent
to the workspace is used instead of the system temporary directory.
---
 .../plugins/gitclient/CliGitAPIImpl.java      | 51 +++++++++++++++----
 1 file changed, 42 insertions(+), 9 deletions(-)

diff --git a/src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java b/src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java
index 3994f2a8e1..31e5a72119 100644
--- a/src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java
+++ b/src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java
@@ -42,6 +42,11 @@
 import java.net.URISyntaxException;
 import java.nio.charset.Charset;
 import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.attribute.FileAttribute;
+import java.nio.file.attribute.PosixFilePermission;
+import java.nio.file.attribute.PosixFilePermissions;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -1411,6 +1416,34 @@ public void addNote(String note, String namespace ) throws GitException, Interru
         createNote(note,namespace,""add"");
     }
 
+    private File createTempFileInSystemDir(String prefix, String suffix) throws IOException {
+        if (isWindows()) {
+            return Files.createTempFile(prefix, suffix).toFile();
+        }
+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(""rw-------"");
+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);
+        return Files.createTempFile(prefix, suffix, fileAttribute).toFile();
+    }
+
+    private File createTempFile(String prefix, String suffix) throws IOException {
+        if (workspace == null) {
+            return createTempFileInSystemDir(prefix, suffix);
+        }
+        File workspaceTmp = new File(workspace.getAbsolutePath() + ""@tmp"");
+        if (!workspaceTmp.isDirectory() && !workspaceTmp.mkdirs()) {
+            if (!workspaceTmp.isDirectory()) {
+                return createTempFileInSystemDir(prefix, suffix);
+            }
+        }
+        Path tmpPath = Paths.get(workspaceTmp.getAbsolutePath());
+        if (isWindows()) {
+            return Files.createTempFile(tmpPath, prefix, suffix).toFile();
+        }
+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(""rw-------"");
+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);
+        return Files.createTempFile(tmpPath, prefix, suffix, fileAttribute).toFile();
+    }
+
     private void deleteTempFile(File tempFile) {
         if (tempFile != null && !tempFile.delete() && tempFile.exists()) {
             listener.getLogger().println(""[WARNING] temp file "" + tempFile + "" not deleted"");
@@ -1420,7 +1453,7 @@ private void deleteTempFile(File tempFile) {
     private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {
         File msg = null;
         try {
-            msg = File.createTempFile(""git-note"", ""txt"", workspace);
+            msg = createTempFile(""git-note"", "".txt"");
             FileUtils.writeStringToFile(msg,note);
             launchCommand(""notes"", ""--ref="" + namespace, command, ""-F"", msg.getAbsolutePath());
         } catch (IOException | GitException e) {
@@ -1561,7 +1594,7 @@ private String launchCommandWithCredentials(ArgumentListBuilder args, File workD
     }
 
     private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {
-        File key = File.createTempFile(""ssh"", ""key"");
+        File key = createTempFile(""ssh"", "".key"");
         try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {
             List<String> privateKeys = sshUser.getPrivateKeys();
             for (String s : privateKeys) {
@@ -1597,7 +1630,7 @@ private String quoteUnixCredentials(String str) {
     }
 
     private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {
-        File ssh = File.createTempFile(""pass"", "".bat"");
+        File ssh = createTempFile(""pass"", "".bat"");
         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
             // avoid echoing command as part of the password
             w.println(""@echo off"");
@@ -1610,7 +1643,7 @@ private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOExcepti
     }
 
     private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {
-        File ssh = File.createTempFile(""pass"", "".sh"");
+        File ssh = createTempFile(""pass"", "".sh"");
         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
             w.println(""#!/bin/sh"");
             w.println(""echo '"" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + ""'"");
@@ -1621,7 +1654,7 @@ private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException
 
     /* Package protected for testability */
     File createWindowsBatFile(String userName, String password) throws IOException {
-        File askpass = File.createTempFile(""pass"", "".bat"");
+        File askpass = createTempFile(""pass"", "".bat"");
         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {
             w.println(""@set arg=%~1"");
             w.println(""@if (%arg:~0,8%)==(Username) echo "" + escapeWindowsCharsForUnquotedString(userName));
@@ -1636,7 +1669,7 @@ private File createWindowsStandardAskpass(StandardUsernamePasswordCredentials cr
     }
 
     private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {
-        File askpass = File.createTempFile(""pass"", "".sh"");
+        File askpass = createTempFile(""pass"", "".sh"");
         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {
             w.println(""#!/bin/sh"");
             w.println(""case \""$1\"" in"");
@@ -1766,7 +1799,7 @@ private File getSSHExeFromGitExeParentDir(String userGitExe) {
     }
 
     private File createWindowsGitSSH(File key, String user) throws IOException {
-        File ssh = File.createTempFile(""ssh"", "".bat"");
+        File ssh = createTempFile(""ssh"", "".bat"");
 
         File sshexe = getSSHExecutable();
 
@@ -1779,7 +1812,7 @@ private File createWindowsGitSSH(File key, String user) throws IOException {
     }
 
     private File createUnixGitSSH(File key, String user) throws IOException {
-        File ssh = File.createTempFile(""ssh"", "".sh"");
+        File ssh = createTempFile(""ssh"", "".sh"");
         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
             w.println(""#!/bin/sh"");
             // ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set
@@ -2383,7 +2416,7 @@ public void branch(String name) throws GitException, InterruptedException {
     public void commit(String message) throws GitException, InterruptedException {
         File f = null;
         try {
-            f = File.createTempFile(""gitcommit"", "".txt"");
+            f = createTempFile(""gitcommit"", "".txt"");
             try (OutputStream out = Files.newOutputStream(f.toPath())) {
                 out.write(message.getBytes(Charset.defaultCharset().toString()));
             }"
GHSA-gxg6-rc6c-v673,"From 1ccc66bb693d4e46a34a904db8eeff07808d2ced Mon Sep 17 00:00:00 2001
From: Stian Soiland-Reyes <soiland-reyes@cs.manchester.ac.uk>
Date: Mon, 1 Feb 2016 13:44:12 +0000
Subject: [PATCH] Avoid (de)serialization of XThis.Handler

---
 src/bsh/XThis.java                            | 67 +++++++++----------
 .../src/bsh/BshSerializationTest.java         | 16 +++++
 2 files changed, 48 insertions(+), 35 deletions(-)

diff --git a/src/bsh/XThis.java b/src/bsh/XThis.java
index 48bc38e77..6f68b431c 100644
--- a/src/bsh/XThis.java
+++ b/src/bsh/XThis.java
@@ -34,9 +34,9 @@
 import java.util.Hashtable;
 
 /**
-	XThis is a dynamically loaded extension which extends This.java and adds 
-	support for the generalized interface proxy mechanism introduced in 
-	JDK1.3.  XThis allows bsh scripted objects to implement arbitrary 
+	XThis is a dynamically loaded extension which extends This.java and adds
+	support for the generalized interface proxy mechanism introduced in
+	JDK1.3.  XThis allows bsh scripted objects to implement arbitrary
 	interfaces (be arbitrary event listener types).
 
 	Note: This module relies on new features of JDK1.3 and will not compile
@@ -47,11 +47,11 @@ support for the generalized interface proxy mechanism introduced in
 	we will maintain This without requiring support for the proxy mechanism.
 
 	XThis stands for ""eXtended This"" (I had to call it something).
-	
+
 	@see JThis	 See also JThis with explicit JFC support for compatibility.
-	@see This	
+	@see This
 */
-public class XThis extends This 
+public class XThis extends This
 	{
 	/**
 		A cache of proxy interface handlers.
@@ -59,10 +59,10 @@ public class XThis extends This
 	*/
 	Hashtable interfaces;
 
-	InvocationHandler invocationHandler = new Handler();
+	transient InvocationHandler invocationHandler = new Handler();
 
-	public XThis( NameSpace namespace, Interpreter declaringInterp ) { 
-		super( namespace, declaringInterp ); 
+	public XThis( NameSpace namespace, Interpreter declaringInterp ) {
+		super( namespace, declaringInterp );
 	}
 
 	public String toString() {
@@ -72,7 +72,7 @@ public String toString() {
 	/**
 		Get dynamic proxy for interface, caching those it creates.
 	*/
-	public Object getInterface( Class clas ) 
+	public Object getInterface( Class clas )
 	{
 		return getInterface( new Class[] { clas } );
 	}
@@ -80,7 +80,7 @@ public Object getInterface( Class clas )
 	/**
 		Get dynamic proxy for interface, caching those it creates.
 	*/
-	public Object getInterface( Class [] ca ) 
+	public Object getInterface( Class [] ca )
 	{
 		if ( interfaces == null )
 			interfaces = new Hashtable();
@@ -93,10 +93,10 @@ public Object getInterface( Class [] ca )
 
 		Object interf = interfaces.get( hashKey );
 
-		if ( interf == null ) 
+		if ( interf == null )
 		{
 			ClassLoader classLoader = ca[0].getClassLoader(); // ?
-			interf = Proxy.newProxyInstance( 
+			interf = Proxy.newProxyInstance(
 				classLoader, ca, invocationHandler );
 			interfaces.put( hashKey, interf );
 		}
@@ -110,51 +110,51 @@ public Object getInterface( Class [] ca )
 
 		Notes:
 		Inner class for the invocation handler seems to shield this unavailable
-		interface from JDK1.2 VM...  
-		
+		interface from JDK1.2 VM...
+
 		I don't understand this.  JThis works just fine even if those
 		classes aren't there (doesn't it?)  This class shouldn't be loaded
 		if an XThis isn't instantiated in NameSpace.java, should it?
 	*/
-	class Handler implements InvocationHandler, java.io.Serializable 
+	class Handler implements InvocationHandler
 	{
-		public Object invoke( Object proxy, Method method, Object[] args ) 
+		public Object invoke( Object proxy, Method method, Object[] args )
 			throws Throwable
 		{
-			try { 
+			try {
 				return invokeImpl( proxy, method, args );
 			} catch ( TargetError te ) {
-				// Unwrap target exception.  If the interface declares that 
-				// it throws the ex it will be delivered.  If not it will be 
+				// Unwrap target exception.  If the interface declares that
+				// it throws the ex it will be delivered.  If not it will be
 				// wrapped in an UndeclaredThrowable
 				throw te.getTarget();
 			} catch ( EvalError ee ) {
 				// Ease debugging...
 				// XThis.this refers to the enclosing class instance
-				if ( Interpreter.DEBUG ) 
+				if ( Interpreter.DEBUG )
 					Interpreter.debug( ""EvalError in scripted interface: ""
 					+ XThis.this.toString() + "": ""+ ee );
 				throw ee;
 			}
 		}
 
-		public Object invokeImpl( Object proxy, Method method, Object[] args ) 
-			throws EvalError 
+		public Object invokeImpl( Object proxy, Method method, Object[] args )
+			throws EvalError
 		{
 			String methodName = method.getName();
 			CallStack callstack = new CallStack( namespace );
 
 			/*
-				If equals() is not explicitly defined we must override the 
+				If equals() is not explicitly defined we must override the
 				default implemented by the This object protocol for scripted
-				object.  To support XThis equals() must test for equality with 
+				object.  To support XThis equals() must test for equality with
 				the generated proxy object, not the scripted bsh This object;
-				otherwise callers from outside in Java will not see a the 
+				otherwise callers from outside in Java will not see a the
 				proxy object as equal to itself.
 			*/
 			BshMethod equalsMethod = null;
 			try {
-				equalsMethod = namespace.getMethod( 
+				equalsMethod = namespace.getMethod(
 					""equals"", new Class [] { Object.class } );
 			} catch ( UtilEvalError e ) {/*leave null*/ }
 			if ( methodName.equals(""equals"" ) && equalsMethod == null ) {
@@ -163,12 +163,12 @@ object.  To support XThis equals() must test for equality with
 			}
 
 			/*
-				If toString() is not explicitly defined override the default 
+				If toString() is not explicitly defined override the default
 				to show the proxy interfaces.
 			*/
 			BshMethod toStringMethod = null;
 			try {
-				toStringMethod = 
+				toStringMethod =
 					namespace.getMethod( ""toString"", new Class [] { } );
 			} catch ( UtilEvalError e ) {/*leave null*/ }
 
@@ -176,20 +176,17 @@ If toString() is not explicitly defined override the default
 			{
 				Class [] ints = proxy.getClass().getInterfaces();
 				// XThis.this refers to the enclosing class instance
-				StringBuffer sb = new StringBuffer( 
+				StringBuffer sb = new StringBuffer(
 					XThis.this.toString() + ""\nimplements:"" );
 				for(int i=0; i<ints.length; i++)
-					sb.append( "" ""+ ints[i].getName() 
+					sb.append( "" ""+ ints[i].getName()
 						+ ((ints.length > 1)?"","":"""") );
 				return sb.toString();
 			}
 
 			Class [] paramTypes = method.getParameterTypes();
-			return Primitive.unwrap( 
+			return Primitive.unwrap(
 				invokeMethod( methodName, Primitive.wrap(args, paramTypes) ) );
 		}
 	};
 }
-
-
-
diff --git a/tests/junitTests/src/bsh/BshSerializationTest.java b/tests/junitTests/src/bsh/BshSerializationTest.java
index fe7665b62..111ecb8f1 100644
--- a/tests/junitTests/src/bsh/BshSerializationTest.java
+++ b/tests/junitTests/src/bsh/BshSerializationTest.java
@@ -58,4 +58,20 @@ public void testSpecialNullSerialization() throws Exception {
         final Interpreter deserInterpreter = TestUtil.serDeser(originalInterpreter);
         Assert.assertTrue((Boolean) deserInterpreter.eval(""myNull == null""));
     }
+
+
+    /**
+     * Tests that a declared method can be serialized (but not exploited)
+     *
+     * @throws Exception in case of failure
+     */
+    @Test
+    public void testMethodSerialization() throws Exception {
+        final Interpreter origInterpreter = new Interpreter();
+        origInterpreter.eval(""int method() { return 1337; }"");
+        Assert.assertEquals(1337, origInterpreter.eval(""method()""));
+        final Interpreter deserInterpreter = TestUtil.serDeser(origInterpreter);
+        Assert.assertEquals(1337, deserInterpreter.eval(""method()""));
+    }
+
 }"
CVE-2020-5242,"From 4c4cb664f2e2c3866aadf117d22fb54aa8dd0031 Mon Sep 17 00:00:00 2001
From: J-N-K <J-N-K@users.noreply.github.com>
Date: Wed, 19 Feb 2020 19:34:16 +0100
Subject: [PATCH] Merge pull request from GHSA-w698-693g-23hv

* fix arbitrary code execution vulnerability

Signed-off-by: Jan N. Klug <jan.n.klug@rub.de>

* Update bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java

Co-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>

* address review comments

Signed-off-by: Jan N. Klug <jan.n.klug@rub.de>

Co-authored-by: Christoph Weitkamp <github@christophweitkamp.de>
---
 bundles/org.openhab.binding.exec/README.md    |  13 +-
 .../exec/internal/ExecBindingConstants.java   |   7 +-
 .../exec/internal/ExecHandlerFactory.java     |  24 +-
 .../internal/ExecWhitelistWatchService.java   |  81 +++++
 .../exec/internal/handler/ExecHandler.java    | 327 +++++++++---------
 bundles/org.openhab.transform.exec/README.md  |  14 +-
 .../internal/ExecTransformationService.java   |  22 +-
 ...ecTransformationWhitelistWatchService.java |  81 +++++
 .../profiles/ExecTransformationProfile.java   |  23 +-
 9 files changed, 397 insertions(+), 195 deletions(-)
 create mode 100644 bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecWhitelistWatchService.java
 create mode 100644 bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationWhitelistWatchService.java

diff --git a/bundles/org.openhab.binding.exec/README.md b/bundles/org.openhab.binding.exec/README.md
index 489ff5901f4a5..dc8ccfc92a3fc 100644
--- a/bundles/org.openhab.binding.exec/README.md
+++ b/bundles/org.openhab.binding.exec/README.md
@@ -8,8 +8,17 @@ Currently, the binding supports a single type of Thing, being the `command` Thin
 
 ## Binding Configuration
 
-The binding does not require any specific configuration.
+For security reasons all commands need to be whitelisted.
+Allowed commands need to be added to the `misc/exec.whitelist` file in the configuration directory.
+Every command needs to be on a separate line.
 
+Example:
+
+```shell
+/bin/echo ""Hello world!""
+/usr/local/bin/apcaccess status
+php ./configurations/scripts/script.php %2$s
+```
 
 **Linux:**
 Note that the commands are executed in the context and with the privileges of the process running the Java Virtual Machine.
@@ -27,7 +36,6 @@ It is not advised to run the virtual machine as superuser/root.
 The ""command"" Thing requires the command to execute on the shell.
 Optionally one can specify:
 
-
 - `transform` - A [transformation](https://www.openhab.org/docs/configuration/transformations.html) to apply on the execution result string.
 - `interval` - An interval, in seconds, the command will be repeatedly executed. Default is 60 seconds, set to 0 to avoid automatic repetition.
 - `timeout` - A time-out, in seconds, the execution of the command will time out, and lastly,
@@ -39,7 +47,6 @@ For each shell command, a separate Thing has to be defined.
 Thing exec:command:uniquename [command=""/command/to/execute here"", interval=15, timeout=5, autorun=false]
 ```
 
-
 The `command` itself can be enhanced using the well known syntax of the [Java formatter class syntax](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax).
 The following parameters are automatically added:
 
diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBindingConstants.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBindingConstants.java
index f58b177c8736f..83c6ed98389cd 100644
--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBindingConstants.java
+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBindingConstants.java
@@ -13,17 +13,19 @@
 package org.openhab.binding.exec.internal;
 
 import org.eclipse.jdt.annotation.NonNullByDefault;
+import org.eclipse.smarthome.config.core.ConfigConstants;
 import org.eclipse.smarthome.core.thing.ThingTypeUID;
 
+import java.io.File;
+
 /**
- * The {@link ExecBinding} class defines common constants, which are
+ * The {@link ExecBindingConstants} class defines common constants, which are
  * used across the whole binding.
  *
  * @author Karel Goderis - Initial contribution
  */
 @NonNullByDefault
 public class ExecBindingConstants {
-
     public static final String BINDING_ID = ""exec"";
 
     // List of all Thing Type UIDs
@@ -35,5 +37,4 @@ public class ExecBindingConstants {
     public static final String EXIT = ""exit"";
     public static final String RUN = ""run"";
     public static final String LAST_EXECUTION = ""lastexecution"";
-
 }
diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecHandlerFactory.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecHandlerFactory.java
index a98a0c1112d67..6bd853a3c5794 100644
--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecHandlerFactory.java
+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecHandlerFactory.java
@@ -12,11 +12,6 @@
  */
 package org.openhab.binding.exec.internal;
 
-import static org.openhab.binding.exec.internal.ExecBindingConstants.THING_COMMAND;
-
-import java.util.Collections;
-import java.util.Set;
-
 import org.eclipse.jdt.annotation.NonNullByDefault;
 import org.eclipse.jdt.annotation.Nullable;
 import org.eclipse.smarthome.core.thing.Thing;
@@ -25,7 +20,16 @@
 import org.eclipse.smarthome.core.thing.binding.ThingHandler;
 import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;
 import org.openhab.binding.exec.internal.handler.ExecHandler;
+import org.osgi.service.component.annotations.Activate;
 import org.osgi.service.component.annotations.Component;
+import org.osgi.service.component.annotations.Reference;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Collections;
+import java.util.Set;
+
+import static org.openhab.binding.exec.internal.ExecBindingConstants.THING_COMMAND;
 
 /**
  * The {@link ExecHandlerFactory} is responsible for creating things and thing
@@ -36,8 +40,14 @@
 @NonNullByDefault
 @Component(service = ThingHandlerFactory.class, configurationPid = ""binding.exec"")
 public class ExecHandlerFactory extends BaseThingHandlerFactory {
-
     private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_COMMAND);
+    private final Logger logger = LoggerFactory.getLogger(ExecHandlerFactory.class);
+    private final ExecWhitelistWatchService execWhitelistWatchService;
+
+    @Activate
+    public ExecHandlerFactory(@Reference ExecWhitelistWatchService execWhitelistWatchService) {
+        this.execWhitelistWatchService = execWhitelistWatchService;
+    }
 
     @Override
     public boolean supportsThingType(ThingTypeUID thingTypeUID) {
@@ -49,7 +59,7 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {
         ThingTypeUID thingTypeUID = thing.getThingTypeUID();
 
         if (thingTypeUID.equals(THING_COMMAND)) {
-            return new ExecHandler(thing);
+            return new ExecHandler(thing, execWhitelistWatchService);
         }
 
         return null;
diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecWhitelistWatchService.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecWhitelistWatchService.java
new file mode 100644
index 0000000000000..4a2ff8c22c892
--- /dev/null
+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecWhitelistWatchService.java
@@ -0,0 +1,81 @@
+/**
+ * Copyright (c) 2010-2020 Contributors to the openHAB project
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ */
+package org.openhab.binding.exec.internal;
+
+import org.eclipse.jdt.annotation.NonNullByDefault;
+import org.eclipse.jdt.annotation.Nullable;
+import org.eclipse.smarthome.config.core.ConfigConstants;
+import org.eclipse.smarthome.core.service.AbstractWatchService;
+import org.osgi.service.component.annotations.Activate;
+import org.osgi.service.component.annotations.Component;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.WatchEvent;
+import java.util.HashSet;
+import java.util.Set;
+
+import static java.nio.file.StandardWatchEventKinds.*;
+
+/**
+ * The {@link ExecWhitelistWatchService} provides a whitelist check for exec commands
+ *
+ * @author Jan N. Klug - Initial contribution
+ */
+@Component(service = ExecWhitelistWatchService.class)
+@NonNullByDefault
+public class ExecWhitelistWatchService extends AbstractWatchService {
+    private static final String COMMAND_WHITELIST_PATH = ConfigConstants.getConfigFolder() + File.separator + ""misc"";
+    private static final String COMMAND_WHITELIST_FILE = ""exec.whitelist"";
+    private final Set<String> commandWhitelist = new HashSet<>();
+
+    @Activate
+    public ExecWhitelistWatchService() {
+        super(COMMAND_WHITELIST_PATH);
+    }
+
+    @Override
+    protected boolean watchSubDirectories() {
+        return false;
+    }
+
+    @Override
+    protected WatchEvent.Kind<?>[] getWatchEventKinds(@Nullable Path directory) {
+        return new WatchEvent.Kind<?>[] { ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY };
+    }
+
+    @Override
+    protected void processWatchEvent(@Nullable WatchEvent<?> event,  WatchEvent.@Nullable Kind<?> kind, @Nullable Path path) {
+        if (path.endsWith(COMMAND_WHITELIST_FILE)) {
+            commandWhitelist.clear();
+            try  {
+                Files.lines(path).forEach(commandWhitelist::add);
+                logger.debug(""Updated command whitelist: {}"", commandWhitelist);
+            } catch (IOException e) {
+                logger.warn(""Cannot read whitelist file, exec binding commands won't be processed: {}"", e.getMessage());
+            }
+        }
+    }
+
+    /**
+     * Check if a command is whitelisted
+     *
+     * @param command the command to check alias
+     * @return true if whitelisted, false if not
+     */
+    public boolean isWhitelisted(String command) {
+        return commandWhitelist.contains(command);
+    }
+}
diff --git a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java
index fca7fb05e6a0c..2c43f64e3e455 100644
--- a/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java
+++ b/bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java
@@ -12,22 +12,6 @@
  */
 package org.openhab.binding.exec.internal.handler;
 
-import static org.openhab.binding.exec.internal.ExecBindingConstants.*;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.math.BigDecimal;
-import java.time.ZonedDateTime;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.IllegalFormatException;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.regex.PatternSyntaxException;
-
 import org.apache.commons.lang.StringUtils;
 import org.eclipse.jdt.annotation.NonNullByDefault;
 import org.eclipse.jdt.annotation.Nullable;
@@ -44,17 +28,35 @@
 import org.eclipse.smarthome.core.transform.TransformationService;
 import org.eclipse.smarthome.core.types.Command;
 import org.eclipse.smarthome.core.types.RefreshType;
+import org.openhab.binding.exec.internal.ExecWhitelistWatchService;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.FrameworkUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.math.BigDecimal;
+import java.time.ZonedDateTime;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.IllegalFormatException;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.regex.PatternSyntaxException;
+
+import static org.openhab.binding.exec.internal.ExecBindingConstants.*;
+
 /**
  * The {@link ExecHandler} is responsible for handling commands, which are
  * sent to one of the channels.
  *
  * @author Karel Goderis - Initial contribution
  * @author Constantin Piber - Added better argument support (delimiter and pass to shell)
+ * @author Jan N. Klug - Add command whitelist check
  */
 @NonNullByDefault
 public class ExecHandler extends BaseThingHandler {
@@ -68,6 +70,7 @@ public class ExecHandler extends BaseThingHandler {
      */
     public static final String[] SHELL_WINDOWS = new String[] { ""cmd"" };
     public static final String[] SHELL_NIX = new String[] { ""sh"", ""bash"", ""zsh"", ""csh"" };
+    private final ExecWhitelistWatchService execWhitelistWatchService;
 
     private Logger logger = LoggerFactory.getLogger(ExecHandler.class);
 
@@ -88,9 +91,10 @@ public class ExecHandler extends BaseThingHandler {
 
     private static Runtime rt = Runtime.getRuntime();
 
-    public ExecHandler(Thing thing) {
+    public ExecHandler(Thing thing, ExecWhitelistWatchService execWhitelistWatchService) {
         super(thing);
         this.bundleContext = FrameworkUtil.getBundle(ExecHandler.class).getBundleContext();
+        this.execWhitelistWatchService = execWhitelistWatchService;
     }
 
     @Override
@@ -101,7 +105,7 @@ public void handleCommand(ChannelUID channelUID, Command command) {
             if (channelUID.getId().equals(RUN)) {
                 if (command instanceof OnOffType) {
                     if (command == OnOffType.ON) {
-                        scheduler.schedule(periodicExecutionRunnable, 0, TimeUnit.SECONDS);
+                        scheduler.schedule(this::execute, 0, TimeUnit.SECONDS);
                     }
                 }
             } else if (channelUID.getId().equals(INPUT)) {
@@ -109,10 +113,10 @@ public void handleCommand(ChannelUID channelUID, Command command) {
                     String previousInput = lastInput;
                     lastInput = command.toString();
                     if (lastInput != null && !lastInput.equals(previousInput)) {
-                        if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN)).booleanValue()) {
+                        if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN))) {
                             logger.trace(""Executing command '{}' after a change of the input channel to '{}'"",
                                     getConfig().get(COMMAND), lastInput);
-                            scheduler.schedule(periodicExecutionRunnable, 0, TimeUnit.SECONDS);
+                            scheduler.schedule(this::execute, 0, TimeUnit.SECONDS);
                         }
                     }
                 }
@@ -123,11 +127,10 @@ public void handleCommand(ChannelUID channelUID, Command command) {
     @Override
     public void initialize() {
         if (executionJob == null || executionJob.isCancelled()) {
-            if (((BigDecimal) getConfig().get(INTERVAL)) != null
-                    && ((BigDecimal) getConfig().get(INTERVAL)).intValue() > 0) {
+            if ((getConfig().get(INTERVAL)) != null && ((BigDecimal) getConfig().get(INTERVAL))
+                    .intValue() > 0) {
                 int pollingInterval = ((BigDecimal) getConfig().get(INTERVAL)).intValue();
-                executionJob = scheduler.scheduleWithFixedDelay(periodicExecutionRunnable, 0, pollingInterval,
-                        TimeUnit.SECONDS);
+                executionJob = scheduler.scheduleWithFixedDelay(this::execute, 0, pollingInterval, TimeUnit.SECONDS);
             }
         }
 
@@ -142,166 +145,161 @@ public void dispose() {
         }
     }
 
-    protected Runnable periodicExecutionRunnable = new Runnable() {
+    public void execute() {
+        String commandLine = (String) getConfig().get(COMMAND);
+        if (!execWhitelistWatchService.isWhitelisted(commandLine)) {
+            logger.warn(""Tried to execute '{}', but it is not contained in whitelist."", commandLine);
+            return;
+        }
 
-        @Override
-        public void run() {
-            String commandLine = (String) getConfig().get(COMMAND);
+        int timeOut = 60000;
+        if ((getConfig().get(TIME_OUT)) != null) {
+            timeOut = ((BigDecimal) getConfig().get(TIME_OUT)).intValue() * 1000;
+        }
 
-            int timeOut = 60000;
-            if (((BigDecimal) getConfig().get(TIME_OUT)) != null) {
-                timeOut = ((BigDecimal) getConfig().get(TIME_OUT)).intValue() * 1000;
-            }
+        if (commandLine != null && !commandLine.isEmpty()) {
+            updateState(RUN, OnOffType.ON);
 
-            if (commandLine != null && !commandLine.isEmpty()) {
-                updateState(RUN, OnOffType.ON);
+            // For some obscure reason, when using Apache Common Exec, or using a straight implementation of
+            // Runtime.Exec(), on Mac OS X (Yosemite and El Capitan), there seems to be a lock race condition
+            // randomly appearing (on UNIXProcess) *when* one tries to gobble up the stdout and sterr output of the
+            // subprocess in separate threads. It seems to be common ""wisdom"" to do that in separate threads, but
+            // only when keeping everything between .exec() and .waitfor() in the same thread, this lock race
+            // condition seems to go away. This approach of not reading the outputs in separate threads *might* be a
+            // problem for external commands that generate a lot of output, but this will be dependent on the limits
+            // of the underlying operating system.
 
-                // For some obscure reason, when using Apache Common Exec, or using a straight implementation of
-                // Runtime.Exec(), on Mac OS X (Yosemite and El Capitan), there seems to be a lock race condition
-                // randomly appearing (on UNIXProcess) *when* one tries to gobble up the stdout and sterr output of the
-                // subprocess in separate threads. It seems to be common ""wisdom"" to do that in separate threads, but
-                // only when keeping everything between .exec() and .waitfor() in the same thread, this lock race
-                // condition seems to go away. This approach of not reading the outputs in separate threads *might* be a
-                // problem for external commands that generate a lot of output, but this will be dependent on the limits
-                // of the underlying operating system.
+            try {
+                if (lastInput != null) {
+                    commandLine = String.format(commandLine, Calendar.getInstance().getTime(), lastInput);
+                } else {
+                    commandLine = String.format(commandLine, Calendar.getInstance().getTime());
+                }
+            } catch (IllegalFormatException e) {
+                logger.warn(
+                        ""An exception occurred while formatting the command line with the current time and input values : '{}'"",
+                        e.getMessage());
+                updateState(RUN, OnOffType.OFF);
+                updateState(OUTPUT, new StringType(e.getMessage()));
+                return;
+            }
 
+            String[] cmdArray;
+            String[] shell;
+            if (commandLine.contains(CMD_LINE_DELIMITER)) {
+                logger.debug(""Splitting by '{}'"", CMD_LINE_DELIMITER);
                 try {
-                    if (lastInput != null) {
-                        commandLine = String.format(commandLine, Calendar.getInstance().getTime(), lastInput);
-                    } else {
-                        commandLine = String.format(commandLine, Calendar.getInstance().getTime());
-                    }
-                } catch (IllegalFormatException e) {
-                    logger.warn(
-                            ""An exception occurred while formatting the command line with the current time and input values : '{}'"",
-                            e.getMessage());
+                    cmdArray = commandLine.split(CMD_LINE_DELIMITER);
+                } catch (PatternSyntaxException e) {
+                    logger.warn(""An exception occurred while splitting '{}' : '{}'"", commandLine, e.getMessage());
                     updateState(RUN, OnOffType.OFF);
+                    updateState(OUTPUT, new StringType(e.getMessage()));
                     return;
                 }
-
-                String[] cmdArray;
-                String[] shell;
-                if (commandLine.contains(CMD_LINE_DELIMITER)) {
-                    logger.debug(""Splitting by '{}'"", CMD_LINE_DELIMITER);
-                    try {
-                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);
-                    } catch (PatternSyntaxException e) {
-                        logger.warn(""An exception occurred while splitting '{}' : '{}'"", commandLine, e.getMessage());
+            } else {
+                // Invoke shell with 'c' option and pass string
+                logger.debug(""Passing to shell for parsing command."");
+                switch (getOperatingSystemType()) {
+                    case WINDOWS:
+                        shell = SHELL_WINDOWS;
+                        logger.debug(""OS: WINDOWS ({})"", getOperatingSystemName());
+                        cmdArray = createCmdArray(shell, ""/c"", commandLine);
+                        break;
+                    case LINUX:
+                    case MAC:
+                    case SOLARIS:
+                        // assume sh is present, should all be POSIX-compliant
+                        shell = SHELL_NIX;
+                        logger.debug(""OS: *NIX ({})"", getOperatingSystemName());
+                        cmdArray = createCmdArray(shell, ""-c"", commandLine);
+                        break;
+                    default:
+                        logger.debug(""OS: Unknown ({})"", getOperatingSystemName());
+                        logger.warn(""OS {} not supported, please manually split commands!"", getOperatingSystemName());
                         updateState(RUN, OnOffType.OFF);
-                        updateState(OUTPUT, new StringType(e.getMessage()));
+                        updateState(OUTPUT, new StringType(""OS not supported, please manually split commands!""));
                         return;
-                    }
-                } else {
-                    // Invoke shell with 'c' option and pass string
-                    logger.debug(""Passing to shell for parsing command."");
-                    switch (getOperatingSystemType()) {
-                        case WINDOWS:
-                            shell = SHELL_WINDOWS;
-                            logger.debug(""OS: WINDOWS ({})"", getOperatingSystemName());
-                            cmdArray = createCmdArray(shell, ""/c"", commandLine);
-                            break;
-
-                        case LINUX:
-                        case MAC:
-                        case SOLARIS:
-                            // assume sh is present, should all be POSIX-compliant
-                            shell = SHELL_NIX;
-                            logger.debug(""OS: *NIX ({})"", getOperatingSystemName());
-                            cmdArray = createCmdArray(shell, ""-c"", commandLine);
-
-                        default:
-                            logger.debug(""OS: Unknown ({})"", getOperatingSystemName());
-                            logger.warn(""OS {} not supported, please manually split commands!"",
-                                    getOperatingSystemName());
-                            updateState(RUN, OnOffType.OFF);
-                            updateState(OUTPUT, new StringType(""OS not supported, please manually split commands!""));
-                            return;
-                    }
                 }
+            }
 
-                if (cmdArray.length == 0) {
-                    logger.trace(""Empty command received, not executing"");
-                    return;
-                }
+            if (cmdArray.length == 0) {
+                logger.trace(""Empty command received, not executing"");
+                return;
+            }
 
-                logger.trace(""The command to be executed will be '{}'"", Arrays.asList(cmdArray));
+            logger.trace(""The command to be executed will be '{}'"", Arrays.asList(cmdArray));
 
-                Process proc = null;
-                try {
-                    proc = rt.exec(cmdArray);
-                } catch (Exception e) {
-                    logger.warn(""An exception occurred while executing '{}' : '{}'"", Arrays.asList(cmdArray),
-                            e.getMessage());
-                    updateState(RUN, OnOffType.OFF);
-                    updateState(OUTPUT, new StringType(e.getMessage()));
-                    return;
-                }
+            Process proc;
+            try {
+                proc = rt.exec(cmdArray);
+            } catch (Exception e) {
+                logger.warn(""An exception occurred while executing '{}' : '{}'"", Arrays.asList(cmdArray),
+                        e.getMessage());
+                updateState(RUN, OnOffType.OFF);
+                updateState(OUTPUT, new StringType(e.getMessage()));
+                return;
+            }
 
-                StringBuilder outputBuilder = new StringBuilder();
-                StringBuilder errorBuilder = new StringBuilder();
+            StringBuilder outputBuilder = new StringBuilder();
+            StringBuilder errorBuilder = new StringBuilder();
 
-                try (InputStreamReader isr = new InputStreamReader(proc.getInputStream());
-                        BufferedReader br = new BufferedReader(isr)) {
-                    String line = null;
-                    while ((line = br.readLine()) != null) {
-                        outputBuilder.append(line).append(""\n"");
-                        logger.debug(""Exec [{}]: '{}'"", ""OUTPUT"", line);
-                    }
-                    isr.close();
-                } catch (IOException e) {
-                    logger.warn(""An exception occurred while reading the stdout when executing '{}' : '{}'"",
-                            commandLine, e.getMessage());
+            try (InputStreamReader isr = new InputStreamReader(proc.getInputStream());
+                    BufferedReader br = new BufferedReader(isr)) {
+                String line;
+                while ((line = br.readLine()) != null) {
+                    outputBuilder.append(line).append(""\n"");
+                    logger.debug(""Exec [{}]: '{}'"", ""OUTPUT"", line);
                 }
+            } catch (IOException e) {
+                logger.warn(""An exception occurred while reading the stdout when executing '{}' : '{}'"", commandLine,
+                        e.getMessage());
+            }
 
-                try (InputStreamReader isr = new InputStreamReader(proc.getErrorStream());
-                        BufferedReader br = new BufferedReader(isr)) {
-                    String line = null;
-                    while ((line = br.readLine()) != null) {
-                        errorBuilder.append(line).append(""\n"");
-                        logger.debug(""Exec [{}]: '{}'"", ""ERROR"", line);
-                    }
-                    isr.close();
-                } catch (IOException e) {
-                    logger.warn(""An exception occurred while reading the stderr when executing '{}' : '{}'"",
-                            commandLine, e.getMessage());
+            try (InputStreamReader isr = new InputStreamReader(proc.getErrorStream());
+                    BufferedReader br = new BufferedReader(isr)) {
+                String line;
+                while ((line = br.readLine()) != null) {
+                    errorBuilder.append(line).append(""\n"");
+                    logger.debug(""Exec [{}]: '{}'"", ""ERROR"", line);
                 }
+            } catch (IOException e) {
+                logger.warn(""An exception occurred while reading the stderr when executing '{}' : '{}'"", commandLine,
+                        e.getMessage());
+            }
 
-                boolean exitVal = false;
-                try {
-                    exitVal = proc.waitFor(timeOut, TimeUnit.MILLISECONDS);
-                } catch (InterruptedException e) {
-                    logger.warn(""An exception occurred while waiting for the process ('{}') to finish : '{}'"",
-                            commandLine, e.getMessage());
-                }
+            boolean exitVal = false;
+            try {
+                exitVal = proc.waitFor(timeOut, TimeUnit.MILLISECONDS);
+            } catch (InterruptedException e) {
+                logger.warn(""An exception occurred while waiting for the process ('{}') to finish : '{}'"", commandLine,
+                        e.getMessage());
+            }
 
-                if (!exitVal) {
-                    logger.warn(""Forcibly termininating the process ('{}') after a timeout of {} ms"", commandLine,
-                            timeOut);
-                    proc.destroyForcibly();
-                }
+            if (!exitVal) {
+                logger.warn(""Forcibly termininating the process ('{}') after a timeout of {} ms"", commandLine, timeOut);
+                proc.destroyForcibly();
+            }
 
-                updateState(RUN, OnOffType.OFF);
-                updateState(EXIT, new DecimalType(proc.exitValue()));
+            updateState(RUN, OnOffType.OFF);
+            updateState(EXIT, new DecimalType(proc.exitValue()));
 
-                outputBuilder.append(errorBuilder.toString());
+            outputBuilder.append(errorBuilder.toString());
 
-                outputBuilder.append(errorBuilder.toString());
+            outputBuilder.append(errorBuilder.toString());
 
-                String transformedResponse = StringUtils.chomp(outputBuilder.toString());
-                String transformation = (String) getConfig().get(TRANSFORM);
+            String transformedResponse = StringUtils.chomp(outputBuilder.toString());
+            String transformation = (String) getConfig().get(TRANSFORM);
 
-                if (transformation != null && transformation.length() > 0) {
-                    transformedResponse = transformResponse(transformedResponse, transformation);
-                }
+            if (transformation != null && transformation.length() > 0) {
+                transformedResponse = transformResponse(transformedResponse, transformation);
+            }
 
-                updateState(OUTPUT, new StringType(transformedResponse));
+            updateState(OUTPUT, new StringType(transformedResponse));
 
-                DateTimeType stampType = new DateTimeType(ZonedDateTime.now());
-                updateState(LAST_EXECUTION, stampType);
-            }
+            DateTimeType stampType = new DateTimeType(ZonedDateTime.now());
+            updateState(LAST_EXECUTION, stampType);
         }
-
-    };
+    }
 
     protected @Nullable String transformResponse(String response, String transformation) {
         String transformedResponse;
@@ -311,8 +309,8 @@ public void run() {
             String transformationType = parts[0];
             String transformationFunction = parts[1];
 
-            TransformationService transformationService = TransformationHelper.getTransformationService(bundleContext,
-                    transformationType);
+            TransformationService transformationService = TransformationHelper
+                    .getTransformationService(bundleContext, transformationType);
             if (transformationService != null) {
                 transformedResponse = transformationService.transform(transformationFunction, response);
             } else {
@@ -343,8 +341,8 @@ protected String[] splitTransformationConfig(String transformation) {
         Matcher matcher = EXTRACT_FUNCTION_PATTERN.matcher(transformation);
 
         if (!matcher.matches()) {
-            throw new IllegalArgumentException(""given transformation function '"" + transformation
-                    + ""' does not follow the expected pattern '<function>(<pattern>)'"");
+            throw new IllegalArgumentException(
+                    ""given transformation function '"" + transformation + ""' does not follow the expected pattern '<function>(<pattern>)'"");
         }
         matcher.reset();
 
@@ -361,8 +359,8 @@ protected String[] splitTransformationConfig(String transformation) {
      * or (if command already starts with one of the shells) splits by space.
      *
      * @param shell (path), picks to first one to execute the command
-     * @param ""c""-option string
-     * @param command to execute
+     * @param cOption ""c""-option string
+     * @param commandLine to execute
      * @return command array
      */
     protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {
@@ -396,13 +394,8 @@ protected String[] createCmdArray(String[] shell, String cOption, String command
      * @author Constantin Piber (for Memin) - Initial contribution
      */
     public enum OS {
-        WINDOWS,
-        LINUX,
-        MAC,
-        SOLARIS,
-        UNKNOWN,
-        NOT_SET
-    };
+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET
+    }
 
     private static OS os = OS.NOT_SET;
 
diff --git a/bundles/org.openhab.transform.exec/README.md b/bundles/org.openhab.transform.exec/README.md
index 41b76eed8ca25..7fdeceb370f18 100644
--- a/bundles/org.openhab.transform.exec/README.md
+++ b/bundles/org.openhab.transform.exec/README.md
@@ -7,6 +7,18 @@ In the given command line the placeholder `%s` is substituted with the input val
 
 The external program must either be in the executable search path of the server process, or an absolute path has to be used.
 
+For security reasons all commands need to be whitelisted.
+Allowed commands need to be added to the `misc/exec.whitelist` file in the configuration directory.
+Every command needs to be on a separate line.
+
+Example:
+
+```shell
+/bin/date -v1d -v+1m -v-1d -v-%s
+numfmt --to=iec-i --suffix=B --padding=7 %s
+
+```
+
 ## Examples
 
 ### General Setup
@@ -51,7 +63,7 @@ Or replace it with
 numfmt --to=iec-i --suffix=B --padding=7 %s
 ```
 
-When the input argument for `%s` is 1234567 it will return the bytes formated in a better readable form
+When the input argument for `%s` is 1234567 it will return the bytes formatted in a better readable form
 
 ```shell
 1.2MiB
diff --git a/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationService.java b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationService.java
index ed778b5d6d777..bcc6a70c37846 100644
--- a/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationService.java
+++ b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationService.java
@@ -17,7 +17,9 @@
 import org.eclipse.smarthome.core.transform.TransformationException;
 import org.eclipse.smarthome.core.transform.TransformationService;
 import org.eclipse.smarthome.io.net.exec.ExecUtil;
+import org.osgi.service.component.annotations.Activate;
 import org.osgi.service.component.annotations.Component;
+import org.osgi.service.component.annotations.Reference;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -25,20 +27,25 @@
  * The implementation of {@link TransformationService} which transforms the
  * input by command line.
  *
- * @author Pauli Anttila
+ * @author Pauli Anttila - Initial contribution
+ * @author Jan N. Klug - added command whitelist service
  */
 @NonNullByDefault
 @Component(immediate = true, property = { ""smarthome.transform=EXEC"" })
 public class ExecTransformationService implements TransformationService {
-
     private final Logger logger = LoggerFactory.getLogger(ExecTransformationService.class);
+    private final ExecTransformationWhitelistWatchService execTransformationWhitelistWatchService;
+
+    @Activate
+    public ExecTransformationService(
+            @Reference ExecTransformationWhitelistWatchService execTransformationWhitelistWatchService) {
+        this.execTransformationWhitelistWatchService = execTransformationWhitelistWatchService; }
 
     /**
      * Transforms the input <code>source</code> by the command line.
      *
-     * @param commandLine the command to execute. Command line should contain %s string,
-     *                        which will be replaced by the input data.
-     * @param source      the input to transform
+     * @param commandLine the command to execute. Command line should contain %s string, which will be replaced by the input data.
+     * @param source the input to transform
      */
     @Override
     public @Nullable String transform(String commandLine, String source) throws TransformationException {
@@ -46,6 +53,10 @@ public class ExecTransformationService implements TransformationService {
             throw new TransformationException(""the given parameters 'commandLine' and 'source' must not be null"");
         }
 
+        if (!execTransformationWhitelistWatchService.isWhitelisted(commandLine)) {
+            logger.warn(""Tried to execute '{}', but it is not contained in whitelist."", commandLine);
+            return null;
+        }
         logger.debug(""about to transform '{}' by the commandline '{}'"", source, commandLine);
 
         long startTime = System.currentTimeMillis();
@@ -56,5 +67,4 @@ public class ExecTransformationService implements TransformationService {
 
         return result;
     }
-
 }
diff --git a/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationWhitelistWatchService.java b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationWhitelistWatchService.java
new file mode 100644
index 0000000000000..4981579f48816
--- /dev/null
+++ b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/ExecTransformationWhitelistWatchService.java
@@ -0,0 +1,81 @@
+/**
+ * Copyright (c) 2010-2020 Contributors to the openHAB project
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ */
+package org.openhab.transform.exec.internal;
+
+import org.eclipse.jdt.annotation.NonNullByDefault;
+import org.eclipse.jdt.annotation.Nullable;
+import org.eclipse.smarthome.config.core.ConfigConstants;
+import org.eclipse.smarthome.core.service.AbstractWatchService;
+import org.osgi.service.component.annotations.Activate;
+import org.osgi.service.component.annotations.Component;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.WatchEvent;
+import java.util.HashSet;
+import java.util.Set;
+
+import static java.nio.file.StandardWatchEventKinds.*;
+
+/**
+ * The {@link ExecTransformationWhitelistWatchService} provides a whitelist check for exec commands
+ *
+ * @author Jan N. Klug - Initial contribution
+ */
+@Component(service = ExecTransformationWhitelistWatchService.class)
+@NonNullByDefault
+public class ExecTransformationWhitelistWatchService extends AbstractWatchService {
+    private static final String COMMAND_WHITELIST_PATH = ConfigConstants.getConfigFolder() + File.separator + ""misc"";
+    private static final String COMMAND_WHITELIST_FILE = ""exec.whitelist"";
+    private final Set<String> commandWhitelist = new HashSet<>();
+
+    @Activate
+    public ExecTransformationWhitelistWatchService() {
+        super(COMMAND_WHITELIST_PATH);
+    }
+
+    @Override
+    protected boolean watchSubDirectories() {
+        return false;
+    }
+
+    @Override
+    protected WatchEvent.Kind<?>[] getWatchEventKinds(@Nullable Path directory) {
+        return new WatchEvent.Kind<?>[] { ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY };
+    }
+
+    @Override
+    protected void processWatchEvent(@Nullable WatchEvent<?> event,  WatchEvent.@Nullable Kind<?> kind, @Nullable Path path) {
+        if (path.endsWith(COMMAND_WHITELIST_FILE)) {
+            commandWhitelist.clear();
+            try  {
+                Files.lines(path).forEach(commandWhitelist::add);
+                logger.debug(""Updated command whitelist: {}"", commandWhitelist);
+            } catch (IOException e) {
+                logger.warn(""Cannot read whitelist file, exec transformations won't be processed: {}"", e.getMessage());
+            }
+        }
+    }
+
+    /**
+     * Check if a command is whitelisted
+     *
+     * @param command the command to check alias
+     * @return true if whitelisted, false if not
+     */
+    public boolean isWhitelisted(String command) {
+        return commandWhitelist.contains(command);
+    }
+}
diff --git a/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/profiles/ExecTransformationProfile.java b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/profiles/ExecTransformationProfile.java
index 3648c769d45f3..b2d8fd7446056 100644
--- a/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/profiles/ExecTransformationProfile.java
+++ b/bundles/org.openhab.transform.exec/src/main/java/org/openhab/transform/exec/internal/profiles/ExecTransformationProfile.java
@@ -13,6 +13,7 @@
 package org.openhab.transform.exec.internal.profiles;
 
 import org.eclipse.jdt.annotation.NonNullByDefault;
+import org.eclipse.jdt.annotation.Nullable;
 import org.eclipse.smarthome.core.library.types.StringType;
 import org.eclipse.smarthome.core.thing.profiles.ProfileCallback;
 import org.eclipse.smarthome.core.thing.profiles.ProfileContext;
@@ -31,7 +32,6 @@
  * Profile to offer the ExecTransformationservice on a ItemChannelLink
  *
  * @author Stefan Triller - initial contribution
- *
  */
 @NonNullByDefault
 public class ExecTransformationProfile implements StateProfile {
@@ -47,10 +47,8 @@ public class ExecTransformationProfile implements StateProfile {
     private static final String FUNCTION_PARAM = ""function"";
     private static final String SOURCE_FORMAT_PARAM = ""sourceFormat"";
 
-    @NonNullByDefault({})
-    private final String function;
-    @NonNullByDefault({})
-    private final String sourceFormat;
+    private @Nullable String function;
+    private @Nullable String sourceFormat;
 
     public ExecTransformationProfile(ProfileCallback callback, ProfileContext context, TransformationService service) {
         this.service = service;
@@ -61,6 +59,7 @@ public ExecTransformationProfile(ProfileCallback callback, ProfileContext contex
 
         logger.debug(""Profile configured with '{}'='{}', '{}'={}"", FUNCTION_PARAM, paramFunction, SOURCE_FORMAT_PARAM,
                 paramSource);
+
         // SOURCE_FORMAT_PARAM is an advanced parameter and we assume ""%s"" if it is not set
         if (paramSource == null) {
             paramSource = ""%s"";
@@ -117,11 +116,19 @@ public void onStateUpdateFromHandler(State state) {
 
     private Type transformState(Type state) {
         String result = state.toFullString();
-        try {
-            result = TransformationHelper.transform(service, function, sourceFormat, state.toFullString());
-        } catch (TransformationException e) {
+        String function = this.function;
+        String sourceFormat = this.sourceFormat;
+
+        if (function == null || sourceFormat == null) {
             logger.warn(""Could not transform state '{}' with function '{}' and format '{}'"", state, function,
                     sourceFormat);
+        } else {
+            try {
+                result = TransformationHelper.transform(service, function, sourceFormat, state.toFullString());
+            } catch (TransformationException e) {
+                logger.warn(""Could not transform state '{}' with function '{}' and format '{}'"", state, function,
+                        sourceFormat);
+            }
         }
         StringType resultType = new StringType(result);
         logger.debug(""Transformed '{}' into '{}'"", state, resultType);"
GHSA-rv87-vcv4-fjvr,"From aec43e370550b26636aa9cab0f23a5cbcffdc44f Mon Sep 17 00:00:00 2001
From: Tony Noble <tony.noble@gmail.com>
Date: Tue, 29 May 2018 22:33:01 +0100
Subject: [PATCH] Given that the URL is polled, may be valid at poll-time but
 not at configuration-time and may contain environment variables that could
 change the URL at poll-time, validating it during configuration is pointless.

---
 .../plugins/urltrigger/URLTrigger.java          | 17 ++---------------
 1 file changed, 2 insertions(+), 15 deletions(-)

diff --git a/src/main/java/org/jenkinsci/plugins/urltrigger/URLTrigger.java b/src/main/java/org/jenkinsci/plugins/urltrigger/URLTrigger.java
index 6e18590..90e9b5b 100755
--- a/src/main/java/org/jenkinsci/plugins/urltrigger/URLTrigger.java
+++ b/src/main/java/org/jenkinsci/plugins/urltrigger/URLTrigger.java
@@ -743,21 +743,8 @@ public FormValidation doCheckURL(@QueryParameter String value) {
             if ( value.contains( ""$"" ) ) {
             	return FormValidation.warning( ""URL is parameterised and cannot be fully validated"" ) ;
             }
-
-            try {
-                URI uri = new URI(value);
-                if (uri.getScheme().equals(""ftp"")) {
-                    FTPClient ftpClient = getFTPClientObject(value, null, null);
-                    ftpClient.getModificationTime(uri.getPath());
-                } else {
-                    ClientConfig cc = new DefaultClientConfig();
-                    Client client = Client.create(cc);
-                    client.resource(value).get(ClientResponse.class);
-                }
-                return FormValidation.ok();
-            } catch (Exception e) {
-                return FormValidation.error(e.getMessage());
-            }
+            
+            return FormValidation.ok();
         }
 
         public FormValidation doCheckTimeout(@QueryParameter String value) {"
GHSA-grpf-gg7v-5g5h,"From fb7912c6bdda06a233f4b3e18e71a87d3e4a8951 Mon Sep 17 00:00:00 2001
From: yangy <root@jcod3r.com>
Date: Fri, 26 Jun 2020 10:08:10 +0800
Subject: [PATCH] fix fuzzy query sql injection (#4970)

---
 .../server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java  | 3 ++-
 .../storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java      | 6 ++++--
 .../server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java  | 3 ++-
 .../storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java       | 3 ++-
 4 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
index 0f4ff85086be..ddba6f7bbd1f 100644
--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java
@@ -61,7 +61,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         }
 
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append("" and "").append(AlarmRecord.ALARM_MESSAGE).append("" like '%"").append(keyword).append(""%' "");
+            sql.append("" and "").append(AlarmRecord.ALARM_MESSAGE).append("" like concat('%',?,'%') "");
+            parameters.add(keyword);
         }
         sql.append("" order by "").append(AlarmRecord.START_TIME).append("" desc "");
 
diff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
index 2566ab2b5e38..a22b14cd2e3c 100644
--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java
@@ -125,7 +125,8 @@ public List<Service> searchServices(long startTimestamp, long endTimestamp, Stri
         sql.append(ServiceTraffic.NODE_TYPE).append(""=?"");
         condition.add(NodeType.Normal.value());
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append("" and "").append(ServiceTraffic.NAME).append("" like \""%"").append(keyword).append(""%\"""");
+            sql.append("" and "").append(ServiceTraffic.NAME).append("" like concat('%',?,'%')"");
+            condition.add(keyword);
         }
         sql.append("" limit "").append(metadataQueryMaxSize);
 
@@ -175,7 +176,8 @@ public List<Endpoint> searchEndpoint(String keyword, String serviceId, int limit
         sql.append(EndpointTraffic.SERVICE_ID).append(""=?"");
         condition.add(serviceId);
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append("" and "").append(EndpointTraffic.NAME).append("" like '%"").append(keyword).append(""%' "");
+            sql.append("" and "").append(EndpointTraffic.NAME).append("" like concat('%',?,'%') "");
+            condition.add(keyword);
         }
         sql.append("" limit "").append(limit);
 
diff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
index 1928ef398e9d..d3ee41941688 100644
--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java
@@ -82,7 +82,8 @@ public TraceBrief queryBasicTraces(long startSecondTB,
             }
         }
         if (!Strings.isNullOrEmpty(endpointName)) {
-            sql.append("" and "").append(SegmentRecord.ENDPOINT_NAME).append("" like '%"" + endpointName + ""%'"");
+            sql.append("" and "").append(SegmentRecord.ENDPOINT_NAME).append("" like concat('%',?,'%')"");
+            parameters.add(endpointName);
         }
         if (StringUtil.isNotEmpty(serviceId)) {
             sql.append("" and "").append(SegmentRecord.SERVICE_ID).append("" = ?"");
diff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
index aea77c845d6b..6de9425c99f4 100644
--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java
@@ -61,7 +61,8 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, lon
         }
 
         if (!Strings.isNullOrEmpty(keyword)) {
-            sql.append("" and "").append(AlarmRecord.ALARM_MESSAGE).append("" like '%"").append(keyword).append(""%' "");
+            sql.append("" and "").append(AlarmRecord.ALARM_MESSAGE).append("" like concat('%',?,'%') "");
+            parameters.add(keyword);
         }
         sql.append("" order by "").append(AlarmRecord.START_TIME).append("" desc "");"
GHSA-44cw-p2hm-gpf6,"From 4225bf90af74557deaf8fb6b80b0705c9621acfc Mon Sep 17 00:00:00 2001
From: Lars Kiesow <lkiesow@uos.de>
Date: Tue, 17 Nov 2020 18:03:36 +0100
Subject: [PATCH] Re-Enable Hostname Verification

This patch is a minimal change to re-enable HTTPS hostname verification
of Opencast's HTTP client used for a large portion its HTTP requests.

Hostname verification is an important part when using HTTPS to ensure
that the presented certificate is valid for the host. Disabling it can
allow for man-in-the-middle attacks.
---
 .../kernel/http/impl/HttpClientImpl.java      | 137 +-----------------
 1 file changed, 1 insertion(+), 136 deletions(-)

diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java b/modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java
index 213ead25023..9e48ba99553 100644
--- a/modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java
+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java
@@ -27,28 +27,12 @@
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.conn.ClientConnectionManager;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-import org.apache.http.conn.ssl.X509HostnameVerifier;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.params.HttpParams;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.security.KeyManagementException;
-import java.security.NoSuchAlgorithmException;
-import java.security.SecureRandom;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLException;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.X509TrustManager;
 
 /** Implementation of HttpClient that makes http requests. */
 public class HttpClientImpl implements HttpClient {
@@ -57,7 +41,7 @@ public class HttpClientImpl implements HttpClient {
   private static final Logger logger = LoggerFactory.getLogger(HttpClientImpl.class);
 
   /** client used for all http requests. */
-  private DefaultHttpClient defaultHttpClient = makeHttpClient();
+  private DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
 
   /** See org.opencastproject.kernel.http.api.HttpClient */
   @Override
@@ -83,123 +67,4 @@ public ClientConnectionManager getConnectionManager() {
     return defaultHttpClient.getConnectionManager();
   }
 
-  /**
-   * Creates a new client that can deal with all kinds of oddities with regards to http/https connections.
-   *
-   * @return the client
-   */
-  private DefaultHttpClient makeHttpClient() {
-
-    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
-    try {
-      logger.debug(""Installing forgiving hostname verifier and trust managers"");
-      X509TrustManager trustManager = createTrustManager();
-      X509HostnameVerifier hostNameVerifier = createHostNameVerifier();
-      SSLContext sslContext = SSLContext.getInstance(""TLS"");
-      sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());
-      SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);
-      ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();
-      SchemeRegistry sr = ccm.getSchemeRegistry();
-      sr.register(new Scheme(""https"", 443, ssf));
-    } catch (NoSuchAlgorithmException e) {
-      logger.error(""Error creating context to handle TLS connections: {}"", e.getMessage());
-    } catch (KeyManagementException e) {
-      logger.error(""Error creating context to handle TLS connections: {}"", e.getMessage());
-    }
-
-    return defaultHttpClient;
-  }
-
-  /**
-   * Returns a new trust manager which will be in charge of checking the SSL certificates that are being presented by
-   * SSL enabled hosts.
-   *
-   * @return the trust manager
-   */
-  private X509TrustManager createTrustManager() {
-    X509TrustManager trustManager = new X509TrustManager() {
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)
-       */
-      public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {
-        logger.trace(""Skipping trust check on client certificate {}"", string);
-      }
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)
-       */
-      public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {
-        logger.trace(""Skipping trust check on server certificate {}"", string);
-      }
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()
-       */
-      public X509Certificate[] getAcceptedIssuers() {
-        logger.trace(""Returning empty list of accepted issuers"");
-        return null;
-      }
-
-    };
-
-    return trustManager;
-  }
-
-  /**
-   * Creates a host name verifier that will make sure the SSL host's name matches the name in the SSL certificate.
-   *
-   * @return the host name verifier
-   */
-  private X509HostnameVerifier createHostNameVerifier() {
-    X509HostnameVerifier verifier = new X509HostnameVerifier() {
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSocket)
-       */
-      public void verify(String host, SSLSocket ssl) throws IOException {
-        logger.trace(""Skipping SSL host name check on {}"", host);
-      }
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.security.cert.X509Certificate)
-       */
-      public void verify(String host, X509Certificate xc) throws SSLException {
-        logger.trace(""Skipping X509 certificate host name check on {}"", host);
-      }
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.lang.String[],
-       *      java.lang.String[])
-       */
-      public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {
-        logger.trace(""Skipping DNS host name check on {}"", host);
-      }
-
-      /**
-       * {@InheritDoc}
-       *
-       * @see javax.net.ssl.HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSession)
-       */
-      public boolean verify(String host, SSLSession ssl) {
-        logger.trace(""Skipping SSL session host name check on {}"", host);
-        return true;
-      }
-    };
-
-    return verifier;
-  }
-
 }"
GHSA-x646-m7x2-gcp7,"From 5cf0a77d44310523b763698f67d645c1f2427f30 Mon Sep 17 00:00:00 2001
From: Wadeck Follonier <wadeck.follonier@gmail.com>
Date: Wed, 25 Apr 2018 23:42:19 +0200
Subject: [PATCH] [SECURITY-788]

---
 core/src/main/java/hudson/FilePath.java       |  19 ++-
 .../main/java/jenkins/SoloFilePathFilter.java |  20 ++-
 core/src/test/java/hudson/FilePathTest.java   |   4 +-
 .../security/s2m/AdminFilePathFilterTest.java | 145 ++++++++++++++++++
 4 files changed, 175 insertions(+), 13 deletions(-)

diff --git a/core/src/main/java/hudson/FilePath.java b/core/src/main/java/hudson/FilePath.java
index cd3fa60451c2..8f112f1886f8 100644
--- a/core/src/main/java/hudson/FilePath.java
+++ b/core/src/main/java/hudson/FilePath.java
@@ -214,9 +214,14 @@ public final class FilePath implements Serializable {
      * This is used to determine whether we are running on the master or the agent.
      */
     private transient VirtualChannel channel;
-
-    // since the platform of the agent might be different, can't use java.io.File
-    private final String remote;
+    
+    /**
+     * Represent the path to the file in the master or the agent
+     * Since the platform of the agent might be different, can't use java.io.File
+     *
+     * The field could not be final since it's modified in {@link #readResolve()}
+     */
+    private /*final*/ String remote;
 
     /**
      * If this {@link FilePath} is deserialized to handle file access request from a remote computer,
@@ -264,6 +269,11 @@ public FilePath(@Nonnull FilePath base, @Nonnull String rel) {
         this.remote = normalize(resolvePathIfRelative(base, rel));
     }
 
+    private Object readResolve() {
+        this.remote = normalize(this.remote);
+        return this;
+    }
+
     private String resolvePathIfRelative(@Nonnull FilePath base, @Nonnull String rel) {
         if(isAbsolute(rel)) return rel;
         if(base.isUnix()) {
@@ -291,7 +301,8 @@ private static boolean isAbsolute(@Nonnull String rel) {
      * {@link File#getParent()} etc cannot handle "".."" and ""."" in the path component very well,
      * so remove them.
      */
-    private static String normalize(@Nonnull String path) {
+    @Restricted(NoExternalUse.class)
+    public static String normalize(@Nonnull String path) {
         StringBuilder buf = new StringBuilder();
         // Check for prefix designating absolute path
         Matcher m = ABSOLUTE_PREFIX_PATTERN.matcher(path);
diff --git a/core/src/main/java/jenkins/SoloFilePathFilter.java b/core/src/main/java/jenkins/SoloFilePathFilter.java
index ce1357598244..aa0ebbefc859 100644
--- a/core/src/main/java/jenkins/SoloFilePathFilter.java
+++ b/core/src/main/java/jenkins/SoloFilePathFilter.java
@@ -1,5 +1,7 @@
 package jenkins;
 
+import hudson.FilePath;
+
 import javax.annotation.Nullable;
 import java.io.File;
 
@@ -31,39 +33,43 @@ private boolean noFalse(String op, File f, boolean b) {
             throw new SecurityException(""agent may not "" + op + "" "" + f+""\nSee https://jenkins.io/redirect/security-144 for more details"");
         return true;
     }
+    
+    private File normalize(File file){
+        return new File(FilePath.normalize(file.getAbsolutePath()));
+    }
 
     @Override
     public boolean read(File f) throws SecurityException {
-        return noFalse(""read"",f,base.read(f));
+        return noFalse(""read"",f,base.read(normalize(f)));
     }
 
     @Override
     public boolean write(File f) throws SecurityException {
-        return noFalse(""write"",f,base.write(f));
+        return noFalse(""write"",f,base.write(normalize(f)));
     }
 
     @Override
     public boolean symlink(File f) throws SecurityException {
-        return noFalse(""symlink"",f,base.write(f));
+        return noFalse(""symlink"",f,base.write(normalize(f)));
     }
 
     @Override
     public boolean mkdirs(File f) throws SecurityException {
-        return noFalse(""mkdirs"",f,base.mkdirs(f));
+        return noFalse(""mkdirs"",f,base.mkdirs(normalize(f)));
     }
 
     @Override
     public boolean create(File f) throws SecurityException {
-        return noFalse(""create"",f,base.create(f));
+        return noFalse(""create"",f,base.create(normalize(f)));
     }
 
     @Override
     public boolean delete(File f) throws SecurityException {
-        return noFalse(""delete"",f,base.delete(f));
+        return noFalse(""delete"",f,base.delete(normalize(f)));
     }
 
     @Override
     public boolean stat(File f) throws SecurityException {
-        return noFalse(""stat"",f,base.stat(f));
+        return noFalse(""stat"",f,base.stat(normalize(f)));
     }
 }
diff --git a/core/src/test/java/hudson/FilePathTest.java b/core/src/test/java/hudson/FilePathTest.java
index 3608318286b7..257f10d32cab 100644
--- a/core/src/test/java/hudson/FilePathTest.java
+++ b/core/src/test/java/hudson/FilePathTest.java
@@ -599,7 +599,7 @@ public void testValidateCaseSensitivity() throws Exception {
             when(con.getResponseCode())
                 .thenReturn(HttpURLConnection.HTTP_NOT_MODIFIED);
 
-            assertFalse(d.installIfNecessaryFrom(url, null, null));
+            assertFalse(d.installIfNecessaryFrom(url, null, ""message if failed""));
 
             verify(con).setIfModifiedSince(123000);
     }
@@ -618,7 +618,7 @@ public void testValidateCaseSensitivity() throws Exception {
             when(con.getInputStream())
               .thenReturn(someZippedContent());
 
-            assertTrue(d.installIfNecessaryFrom(url, null, null));
+            assertTrue(d.installIfNecessaryFrom(url, null, ""message if failed""));
     }
 
     @Issue(""JENKINS-26196"")
diff --git a/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java b/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
index 80d137d6a264..37af2825c02f 100644
--- a/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
+++ b/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
@@ -25,8 +25,17 @@
 package jenkins.security.s2m;
 
 import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.Field;
 import javax.inject.Inject;
 import static org.junit.Assert.*;
+
+import hudson.FilePath;
+import hudson.model.Slave;
+import hudson.remoting.Callable;
+import org.jenkinsci.remoting.RoleChecker;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -57,5 +66,141 @@ public void matchBuildDir() throws Exception {
         assertFalse(rule.checkFileAccess(""write"", new File(buildDir, ""program.dat"")));
         assertFalse(rule.checkFileAccess(""write"", new File(buildDir, ""workflow/23.xml"")));
     }
+    
+    @Test
+    public void slaveCannotReadFileFromSecrets_butCanFromUserContent() throws Exception {
+        Slave s = r.createOnlineSlave();
+        FilePath root = r.jenkins.getRootPath();
+        
+        { // agent can read userContent folder
+            FilePath rootUserContentFolder = root.child(""userContent"");
+            FilePath rootTargetPublic = rootUserContentFolder.child(""target_public.txt"");
+            rootTargetPublic.write(""target_public"", null);
+            checkSlave_can_readFile(s, rootTargetPublic);
+        }
+        
+        { // agent cannot read files inside secrets
+            FilePath rootSecretFolder = root.child(""secrets"");
+            FilePath rootTargetPrivate = rootSecretFolder.child(""target_private.txt"");
+            rootTargetPrivate.write(""target_private"", null);
+            
+            checkSlave_cannot_readFile(s, rootTargetPrivate);
+        }
+        
+        rule.setMasterKillSwitch(true);
+    
+        { // with the master kill switch activated, agent can read files inside secrets
+            FilePath rootSecretFolder = root.child(""secrets"");
+            FilePath rootTargetPrivate = rootSecretFolder.child(""target_private.txt"");
+        
+            checkSlave_can_readFile(s, rootTargetPrivate);
+        }
+    }
+    
+    private static class ReadFileS2MCallable implements Callable<String,Exception> {
+        private final FilePath p;
+        ReadFileS2MCallable(FilePath p) {
+            this.p = p;
+        }
+        @Override
+        public String call() throws Exception {
+            assertTrue(p.isRemote());
+            return p.readToString();
+        }
+        @Override
+        public void checkRoles(RoleChecker checker) throws SecurityException {
+            // simulate legacy Callable impls
+            throw new NoSuchMethodError();
+        }
+    }
+    
+    @Test
+    @Issue(""SECURITY-788"")
+    public void slaveCannotUse_dotDotSlashStuff_toBypassRestriction() throws Exception {
+        Slave s = r.createOnlineSlave();
+        FilePath root = r.jenkins.getRootPath();
+    
+        { // use ../ to access a non-restricted folder
+            FilePath rootUserContentFolder = root.child(""userContent"");
+            FilePath rootTargetPublic = rootUserContentFolder.child(""target_public.txt"");
+            rootTargetPublic.write(""target_public"", null);
+
+            FilePath dotDotSlashTargetPublic = root.child(""logs/target_public.txt"");
+            replaceRemote(dotDotSlashTargetPublic, ""logs"", ""logs/../userContent"");
 
+            checkSlave_can_readFile(s, dotDotSlashTargetPublic);
+        }
+        
+        { // use ../ to try to bypass the rules
+            FilePath rootSecretFolder = root.child(""secrets"");
+            FilePath rootTargetPrivate = rootSecretFolder.child(""target_private.txt"");
+            rootTargetPrivate.write(""target_private"", null);
+            
+            FilePath dotDotSlashTargetPrivate = root.child(""userContent/target_private.txt"");
+            replaceRemote(dotDotSlashTargetPrivate, ""userContent"", ""userContent/../secrets"");
+        
+            checkSlave_cannot_readFile(s, dotDotSlashTargetPrivate);
+        }
+    }
+    
+    @Test
+    @Issue(""SECURITY-788"")
+    public void slaveCannotUse_encodedCharacters_toBypassRestriction() throws Exception {
+        Slave s = r.createOnlineSlave();
+        FilePath root = r.jenkins.getRootPath();
+        
+        // \u002e is the Unicode of . and is interpreted directly by Java as .
+        
+        { // use ../ to access a non-restricted folder
+            FilePath rootUserContentFolder = root.child(""userContent"");
+            FilePath rootTargetPublic = rootUserContentFolder.child(""target_public.txt"");
+            rootTargetPublic.write(""target_public"", null);
+            
+            FilePath dotDotSlashTargetPublic = root.child(""logs/target_public.txt"");
+            replaceRemote(dotDotSlashTargetPublic, ""logs"", ""logs/\u002e\u002e/userContent"");
+            
+            checkSlave_can_readFile(s, dotDotSlashTargetPublic);
+        }
+        
+        { // use ../ to try to bypass the rules
+            FilePath rootSecretFolder = root.child(""secrets"");
+            FilePath rootTargetPrivate = rootSecretFolder.child(""target_private.txt"");
+            rootTargetPrivate.write(""target_private"", null);
+            
+            FilePath dotDotSlashTargetPrivate = root.child(""userContent/target_private.txt"");
+            replaceRemote(dotDotSlashTargetPrivate, ""userContent"", ""userContent/\u002e\u002e/secrets"");
+            
+            checkSlave_cannot_readFile(s, dotDotSlashTargetPrivate);
+        }
+    }
+    
+    private void checkSlave_can_readFile(Slave s, FilePath target) throws Exception {
+        // slave can read file from userContent
+        String content = s.getChannel().call(new ReadFileS2MCallable(target));
+        // and the master can directly reach it
+        assertEquals(target.readToString(), content);
+    }
+    
+    private void checkSlave_cannot_readFile(Slave s, FilePath target) throws Exception {
+        try {
+            s.getChannel().call(new ReadFileS2MCallable(target));
+            fail(""Slave should not be able to read file in "" + target.getRemote());
+        } catch (IOException e){
+            Throwable t = e.getCause();
+            assertTrue(t instanceof SecurityException);
+            SecurityException se = (SecurityException) t;
+            StringWriter sw = new StringWriter();
+            se.printStackTrace(new PrintWriter(sw));
+            assertTrue(sw.toString().contains(""agent may not read""));
+        }
+    }
+    
+    // to bypass the normalization done in constructor
+    private void replaceRemote(FilePath p, String before, String after) throws Exception {
+        Field field = FilePath.class.getDeclaredField(""remote"");
+        field.setAccessible(true);
+        String currentRemote = (String) field.get(p);
+        String newRemote = currentRemote.replace(before, after);
+        field.set(p, newRemote);
+    }
 }"
GHSA-6cpj-3g83-q2j4,"From 0d21b900975b7048d2e925d852aeacb9bdc6766c Mon Sep 17 00:00:00 2001
From: Uwe Schindler <uschindler@apache.org>
Date: Thu, 27 Sep 2012 13:15:24 +0000
Subject: [PATCH] SOLR-3895, SOLR-3614: Fix javadocs

git-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1390991 13f79535-47bb-0310-9956-ffa450edef68
---
 .../core/src/java/org/apache/solr/util/EmptyEntityResolver.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java b/solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java
index c9ff143c2fe..86e27a4bb76 100644
--- a/solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java
+++ b/solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java
@@ -67,7 +67,7 @@ private static void trySetSAXFeature(SAXParserFactory saxFactory, String feature
   }
   
   /** Configures the given {@link SAXParserFactory} to do secure XML processing of untrusted sources.
-   * It is required to also set {@link #SAX_INSTANCE} on the created {@link XMLReader}.
+   * It is required to also set {@link #SAX_INSTANCE} on the created {@link org.xml.sax.XMLReader}.
    * @see #SAX_INSTANCE
    */
   public static void configureSAXParserFactory(SAXParserFactory saxFactory) {"
GHSA-cwcf-5m5w-mq2w,"From 18b3121fa94a174064447d637dc11539e33b3a76 Mon Sep 17 00:00:00 2001
From: Wadeck Follonier <wadeck.follonier@gmail.com>
Date: Fri, 15 Jun 2018 13:01:13 +0200
Subject: [PATCH] [SECURITY-440]

---
 pom.xml                                       |  12 +-
 .../impl/BasicSSHUserPrivateKey.java          | 108 ++++++------------
 .../sshcredentials/impl/Messages.properties   |   4 +-
 .../impl/Messages_de.properties               |   4 +-
 .../impl/Messages_ja.properties               |   4 +-
 .../impl/BasicSSHUserPrivateKeyTest.java      |  18 ---
 .../BasicSSHUserPrivateKeyTest_SEC440.java    |  63 ++++++++++
 .../updateJob/update_folder.xml               |  41 +++++++
 8 files changed, 150 insertions(+), 104 deletions(-)
 create mode 100644 src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440.java
 create mode 100644 src/test/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440/updateJob/update_folder.xml

diff --git a/pom.xml b/pom.xml
index 996f4cd..9dcc395 100644
--- a/pom.xml
+++ b/pom.xml
@@ -66,8 +66,8 @@
   </scm>
 
   <properties>
-    <jenkins.version>1.609</jenkins.version>
-    <java.level>6</java.level>
+    <jenkins.version>1.625</jenkins.version>
+    <java.level>7</java.level>
   </properties>
 
   <repositories>
@@ -95,10 +95,16 @@
     <dependency>
       <groupId>org.jenkins-ci.plugins</groupId>
       <artifactId>credentials</artifactId>
-      <version>2.1.0</version>
+      <version>2.1.17</version>
     </dependency>
     <!-- jenkins dependencies -->
     <!-- test dependencies -->
+    <dependency>
+      <groupId>org.jenkins-ci.plugins</groupId>
+      <artifactId>cloudbees-folder</artifactId>
+      <version>6.4</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
 </project>
diff --git a/src/main/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKey.java b/src/main/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKey.java
index 7a278f1..cc7bb8d 100644
--- a/src/main/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKey.java
+++ b/src/main/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKey.java
@@ -26,13 +26,13 @@
 import com.cloudbees.jenkins.plugins.sshcredentials.SSHUserPrivateKey;
 import com.cloudbees.plugins.credentials.CredentialsProvider;
 import com.cloudbees.plugins.credentials.CredentialsScope;
-import com.cloudbees.plugins.credentials.CredentialsSnapshotTaker;
 import edu.umd.cs.findbugs.annotations.CheckForNull;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import hudson.DescriptorExtensionList;
 import hudson.Extension;
 import hudson.model.AbstractDescribableImpl;
 import hudson.model.Descriptor;
+import hudson.model.Items;
 import hudson.remoting.Channel;
 import hudson.util.Secret;
 import java.io.File;
@@ -40,6 +40,8 @@
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.io.StringReader;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -47,6 +49,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import hudson.util.XStream2;
 import jenkins.model.Jenkins;
 import net.jcip.annotations.GuardedBy;
 import org.apache.commons.io.FileUtils;
@@ -148,16 +152,6 @@ private synchronized Object readResolve() throws ObjectStreamException {
         return this;
     }
 
-    private Object writeReplace() {
-        if (/* XStream */Channel.current() == null) {
-            return this;
-        }
-        if (privateKeySource == null || privateKeySource.isSnapshotSource()) {
-            return this;
-        }
-        return CredentialsProvider.snapshot(this);
-    }
-
     /**
      * {@inheritDoc}
      */
@@ -290,7 +284,9 @@ public long getPrivateKeysLastModified() {
          *
          * @return {@code true} if and only if the source is self contained.
          * @since 1.7
+         * @deprecated no more used since FileOnMaster- and Users- PrivateKeySource are deprecated too
          */
+        @Deprecated
         public boolean isSnapshotSource() {
             return false;
         }
@@ -371,7 +367,9 @@ public String getDisplayName() {
 
     /**
      * Let the user reference a file on the disk.
+     * @deprecated This approach has security vulnerability and should be migrated to {@link DirectEntryPrivateKeySource}
      */
+    @Deprecated
     public static class FileOnMasterPrivateKeySource extends PrivateKeySource {
 
         /**
@@ -394,8 +392,6 @@ public static class FileOnMasterPrivateKeySource extends PrivateKeySource {
          */
         private transient volatile long nextCheckLastModified;
 
-
-        @DataBoundConstructor
         public FileOnMasterPrivateKeySource(String privateKeyFile) {
             this.privateKeyFile = privateKeyFile;
         }
@@ -436,7 +432,12 @@ private Object readResolve() {
                 // this is a borked upgrade, not actually the file name but is actually the key contents
                 return new DirectEntryPrivateKeySource(privateKeyFile);
             }
-            return this;
+
+            Jenkins.getActiveInstance().checkPermission(Jenkins.RUN_SCRIPTS);
+
+            LOGGER.log(Level.INFO, ""SECURITY-440: Migrating FileOnMasterPrivateKeySource to DirectEntryPrivateKeySource"");
+            // read the content of the file and then migrate to Direct
+            return new DirectEntryPrivateKeySource(getPrivateKeys());
         }
 
         @Override
@@ -453,26 +454,13 @@ public long getPrivateKeysLastModified() {
             }
             return lastModified;
         }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Extension
-        public static class DescriptorImpl extends PrivateKeySourceDescriptor {
-
-            /**
-             * {@inheritDoc}
-             */
-            @Override
-            public String getDisplayName() {
-                return Messages.BasicSSHUserPrivateKey_FileOnMasterPrivateKeySourceDisplayName();
-            }
-        }
     }
 
     /**
      * Let the user
+     * @deprecated This approach has security vulnerability and should be migrated to {@link DirectEntryPrivateKeySource}
      */
+    @Deprecated
     public static class UsersPrivateKeySource extends PrivateKeySource {
 
         /**
@@ -490,10 +478,6 @@ public static class UsersPrivateKeySource extends PrivateKeySource {
          */
         private transient volatile long nextCheckLastModified;
 
-        @DataBoundConstructor
-        public UsersPrivateKeySource() {
-        }
-
         private List<File> files() {
             List<File> files = new ArrayList<File>();
             File sshHome = new File(new File(System.getProperty(""user.home"")), "".ssh"");
@@ -535,51 +519,27 @@ public long getPrivateKeysLastModified() {
             return lastModified;
         }
 
-        /**
-         * {@inheritDoc}
-         */
-        @Extension
-        public static class DescriptorImpl extends PrivateKeySourceDescriptor {
+        private Object readResolve() {
+            Jenkins.getActiveInstance().checkPermission(Jenkins.RUN_SCRIPTS);
 
-            /**
-             * {@inheritDoc}
-             */
-            @Override
-            public String getDisplayName() {
-                return Messages.BasicSSHUserPrivateKey_UsersPrivateKeySourceDisplayName();
-            }
+            LOGGER.log(Level.INFO, ""SECURITY-440: Migrating UsersPrivateKeySource to DirectEntryPrivateKeySource"");
+            // read the content of the file and then migrate to Direct
+            return new DirectEntryPrivateKeySource(getPrivateKeys());
         }
     }
 
-    /**
-     * @since 1.7
-     */
-    @Extension
-    public static class CredentialsSnapshotTakerImpl extends CredentialsSnapshotTaker<SSHUserPrivateKey> {
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public Class<SSHUserPrivateKey> type() {
-            return SSHUserPrivateKey.class;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public SSHUserPrivateKey snapshot(SSHUserPrivateKey credentials) {
-            if (credentials instanceof BasicSSHUserPrivateKey) {
-                final PrivateKeySource keySource = ((BasicSSHUserPrivateKey) credentials).getPrivateKeySource();
-                if (keySource.isSnapshotSource()) {
-                    return credentials;
-                }
-            }
-            final Secret passphrase = credentials.getPassphrase();
-            return new BasicSSHUserPrivateKey(credentials.getScope(), credentials.getId(), credentials.getUsername(),
-                    new DirectEntryPrivateKeySource(credentials.getPrivateKeys()),
-                    passphrase == null ? null : passphrase.getEncryptedValue(), credentials.getDescription());
+    static {
+        try {
+            // the critical field allow the permission check to make the XML read to fail completely in case of violation
+            // TODO: Remove reflection once baseline is updated past 2.85.
+            Method m = XStream2.class.getMethod(""addCriticalField"", Class.class, String.class);
+            m.invoke(Items.XSTREAM2, BasicSSHUserPrivateKey.class, ""privateKeySource"");
+        } catch (IllegalAccessException e) {
+            throw new ExceptionInInitializerError(e);
+        } catch (InvocationTargetException e) {
+            throw new ExceptionInInitializerError(e);
+        } catch (NoSuchMethodException e) {
+            throw new ExceptionInInitializerError(e);
         }
     }
 }
diff --git a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages.properties b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages.properties
index c7d9186..25f0fec 100644
--- a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages.properties
+++ b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages.properties
@@ -22,6 +22,4 @@
 # THE SOFTWARE.
 #
 BasicSSHUserPrivateKey.DirectEntryPrivateKeySourceDisplayName=Enter directly
-BasicSSHUserPrivateKey.FileOnMasterPrivateKeySourceDisplayName=From a file on Jenkins master
-BasicSSHUserPrivateKey.UsersPrivateKeySourceDisplayName=From the Jenkins master ~/.ssh
-BasicSSHUserPrivateKey.DisplayName=SSH Username with private key
\ No newline at end of file
+BasicSSHUserPrivateKey.DisplayName=SSH Username with private key
diff --git a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_de.properties b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_de.properties
index 23a52ff..46881d7 100644
--- a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_de.properties
+++ b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_de.properties
@@ -22,6 +22,4 @@
 # THE SOFTWARE.
 #
 BasicSSHUserPrivateKey.DirectEntryPrivateKeySourceDisplayName=Direkt eingeben
-BasicSSHUserPrivateKey.FileOnMasterPrivateKeySourceDisplayName=Aus einer Datei auf dem Jenkins Master
-BasicSSHUserPrivateKey.UsersPrivateKeySourceDisplayName=Aus ~/.ssh des Jenkins Masters
-BasicSSHUserPrivateKey.DisplayName=SSH Benutzername und privater Schl\u00fcssel
\ No newline at end of file
+BasicSSHUserPrivateKey.DisplayName=SSH Benutzername und privater Schl\u00fcssel
diff --git a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_ja.properties b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_ja.properties
index 33123c1..fc9721c 100644
--- a/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_ja.properties
+++ b/src/main/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/Messages_ja.properties
@@ -22,6 +22,4 @@
 # THE SOFTWARE.
 #
 BasicSSHUserPrivateKey.DirectEntryPrivateKeySourceDisplayName=\u76f4\u63a5\u5165\u529b
-BasicSSHUserPrivateKey.FileOnMasterPrivateKeySourceDisplayName=Jenkins\u30de\u30b9\u30bf\u30fc\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089
-BasicSSHUserPrivateKey.UsersPrivateKeySourceDisplayName=Jenkins\u30de\u30b9\u30bf\u30fc\u4e0a\u306e~/.ssh\u304b\u3089
-BasicSSHUserPrivateKey.DisplayName=SSH \u30e6\u30fc\u30b6\u30fc\u540d\u3068\u79d8\u5bc6\u9375
\ No newline at end of file
+BasicSSHUserPrivateKey.DisplayName=SSH \u30e6\u30fc\u30b6\u30fc\u540d\u3068\u79d8\u5bc6\u9375
diff --git a/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest.java b/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest.java
index 8a0007b..aac473a 100644
--- a/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest.java
+++ b/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest.java
@@ -51,24 +51,6 @@ public class BasicSSHUserPrivateKeyTest {
 
     @Rule public JenkinsRule r = new JenkinsRule();
 
-    @Test public void masterKeysOnSlave() throws Exception {
-        FilePath keyfile = r.jenkins.getRootPath().child(""key"");
-        keyfile.write(""stuff"", null);
-        SSHUserPrivateKey key = new BasicSSHUserPrivateKey(CredentialsScope.SYSTEM, ""mycreds"", ""git"", new BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource(keyfile.getRemote()), null, null);
-        assertEquals(""[stuff]"", key.getPrivateKeys().toString());
-        // TODO would be more interesting to use a Docker fixture to demonstrate that the file load is happening only from the master side
-        assertEquals(""[stuff]"", r.createOnlineSlave().getChannel().call(new LoadPrivateKeys(key)));
-    }
-    private static class LoadPrivateKeys extends MasterToSlaveCallable<String,Exception> {
-        private final SSHUserPrivateKey key;
-        LoadPrivateKeys(SSHUserPrivateKey key) {
-            this.key = key;
-        }
-        @Override public String call() throws Exception {
-            return key.getPrivateKeys().toString();
-        }
-    }
-
     @LocalData
     @Test
     public void readOldCredentials() throws Exception {
diff --git a/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440.java b/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440.java
new file mode 100644
index 0000000..e12e723
--- /dev/null
+++ b/src/test/java/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440.java
@@ -0,0 +1,63 @@
+package com.cloudbees.jenkins.plugins.sshcredentials.impl;
+
+import com.cloudbees.hudson.plugins.folder.Folder;
+import hudson.FilePath;
+import hudson.cli.CLICommandInvoker;
+import hudson.cli.UpdateJobCommand;
+import hudson.model.Job;
+import jenkins.model.Jenkins;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.Issue;
+import org.jvnet.hudson.test.JenkinsRule;
+import org.jvnet.hudson.test.recipes.LocalData;
+
+import static hudson.cli.CLICommandInvoker.Matcher.failedWith;
+import static hudson.cli.CLICommandInvoker.Matcher.succeeded;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.not;
+
+//TODO merge it into BasicSSHUserPrivateKeyTest after security patch
+public class BasicSSHUserPrivateKeyTest_SEC440 {
+    
+    @Rule
+    public JenkinsRule r = new JenkinsRule();
+    
+    {r.timeout = 0;}
+    
+    @Test
+    @Issue(""SECURITY-440"")
+    @LocalData(""updateJob"")
+    public void userWithoutRunScripts_cannotMigrateDangerousPrivateKeySource() throws Exception {
+        Folder folder = r.jenkins.createProject(Folder.class, ""folder1"");
+        
+        FilePath updateFolder = r.jenkins.getRootPath().child(""update_folder.xml"");
+        
+        { // as user with just configure, you cannot migrate
+            CLICommandInvoker.Result result = new CLICommandInvoker(r, new UpdateJobCommand())
+                    .authorizedTo(Jenkins.READ, Job.READ, Job.CONFIGURE)
+                    .withStdin(updateFolder.read())
+                    .invokeWithArgs(""folder1"");
+            
+            assertThat(result.stderr(), containsString(""user is missing the Overall/RunScripts permission""));
+            assertThat(result, failedWith(-1));
+            
+            // config file not touched
+            String configFileContent = folder.getConfigFile().asString();
+            assertThat(configFileContent, not(containsString(""FileOnMasterPrivateKeySource"")));
+            assertThat(configFileContent, not(containsString(""BasicSSHUserPrivateKey"")));
+        }
+        { // but as admin with RUN_SCRIPTS, you can
+            CLICommandInvoker.Result result = new CLICommandInvoker(r, new UpdateJobCommand())
+                    .authorizedTo(Jenkins.ADMINISTER)
+                    .withStdin(updateFolder.read())
+                    .invokeWithArgs(""folder1"");
+            
+            assertThat(result, succeeded());
+            String configFileContent = folder.getConfigFile().asString();
+            assertThat(configFileContent, containsString(""BasicSSHUserPrivateKey""));
+            assertThat(configFileContent, not(containsString(""FileOnMasterPrivateKeySource"")));
+        }
+    }
+}
diff --git a/src/test/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440/updateJob/update_folder.xml b/src/test/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440/updateJob/update_folder.xml
new file mode 100644
index 0000000..b30e0a1
--- /dev/null
+++ b/src/test/resources/com/cloudbees/jenkins/plugins/sshcredentials/impl/BasicSSHUserPrivateKeyTest_SEC440/updateJob/update_folder.xml
@@ -0,0 +1,41 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<com.cloudbees.hudson.plugins.folder.Folder plugin=""cloudbees-folder@6.4"">
+  <actions/>
+  <description></description>
+  <properties>
+    <com.cloudbees.hudson.plugins.folder.properties.FolderCredentialsProvider_-FolderCredentialsProperty>
+      <domainCredentialsMap class=""hudson.util.CopyOnWriteMap$Hash"">
+        <entry>
+          <com.cloudbees.plugins.credentials.domains.Domain plugin=""credentials@2.1.16"">
+            <specifications/>
+          </com.cloudbees.plugins.credentials.domains.Domain>
+          <java.util.concurrent.CopyOnWriteArrayList>
+            <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin=""ssh-credentials@1.13"">
+              <id>From SSH</id>
+              <username>from_ssh</username>
+              <privateKeySource class=""com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$UsersPrivateKeySource""/>
+            </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
+          </java.util.concurrent.CopyOnWriteArrayList>
+        </entry>
+      </domainCredentialsMap>
+    </com.cloudbees.hudson.plugins.folder.properties.FolderCredentialsProvider_-FolderCredentialsProperty>
+  </properties>
+  <folderViews class=""com.cloudbees.hudson.plugins.folder.views.DefaultFolderViewHolder"">
+    <views>
+      <hudson.model.AllView>
+        <owner class=""com.cloudbees.hudson.plugins.folder.Folder"" reference=""../../../..""/>
+        <name>All</name>
+        <filterExecutors>false</filterExecutors>
+        <filterQueue>false</filterQueue>
+        <properties class=""hudson.model.View$PropertyList""/>
+      </hudson.model.AllView>
+    </views>
+    <tabBar class=""hudson.views.DefaultViewsTabBar""/>
+  </folderViews>
+  <healthMetrics>
+    <com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
+      <nonRecursive>false</nonRecursive>
+    </com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
+  </healthMetrics>
+  <icon class=""com.cloudbees.hudson.plugins.folder.icons.StockFolderIcon""/>
+</com.cloudbees.hudson.plugins.folder.Folder>
\ No newline at end of file"
GHSA-4h47-h3cr-23wh,"From 01157a699f611ca7492e872103ac01526a982cf2 Mon Sep 17 00:00:00 2001
From: Daniel Beck <daniel-beck@users.noreply.github.com>
Date: Thu, 27 Sep 2018 11:18:42 +0200
Subject: [PATCH] [SECURITY-1128]

---
 .../main/java/hudson/security/HudsonPrivateSecurityRealm.java  | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
index 01b3233108ca..e877ee6291a2 100644
--- a/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
+++ b/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java
@@ -475,8 +475,9 @@ public List<User> getAllUsers() {
      * This is to map users under the security realm URL.
      * This in turn helps us set up the right navigation breadcrumb.
      */
+    @Restricted(NoExternalUse.class)
     public User getUser(String id) {
-        return User.getById(id, true);
+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));
     }
 
     // TODO"
GHSA-h362-m8f2-5x7c,"From 32bfbe5f78e214e2d589f92050228b91d704758e Mon Sep 17 00:00:00 2001
From: Lars Kiesow <lkiesow@uos.de>
Date: Wed, 8 Jan 2020 00:06:24 +0100
Subject: [PATCH] Replace MD5 with bcrypt for password hashing

User passwords are stored in the database using the rather outdated and
cryptographically insecure MD5 hash algorithm. Furthermore, the hashes
are salted using the username instead of a random salt, causing hashes
for users with the same username and password to collide which is
problematic especially for popular users like the default admin user.

This essentially means that for an attacker, it might be feasible to
reconstruct a user's password given access to these hashes.

Note that attackers needing access to the hashes means that they must
gain access to the database in which these are stored first to be able
to start cracking the passwords.
Patches

The patch makes Opencast now uses the modern and much stronger bcrypt
password hashing algorithm for storing passwords.  Note, that old hashes
remain MD5 until the password is updated.

For a list of users whose password hashes are stored using MD5, the REST endpoint `/user-utils/users/md5.json` is added.
---
 etc/security/mh_default_org.xml               |  8 +-
 .../security/impl/jpa/JpaUser.java            |  2 +
 .../opencastproject/util/PasswordEncoder.java | 54 -----------
 .../security/CustomPasswordEncoder.java       | 96 +++++++++++++++++++
 .../userdirectory/JpaUserAndRoleProvider.java | 61 +++++++++++-
 .../userdirectory/endpoint/UserEndpoint.java  | 20 ++++
 .../userdirectory/JpaUserProviderTest.java    |  9 +-
 7 files changed, 188 insertions(+), 62 deletions(-)
 delete mode 100644 modules/common/src/main/java/org/opencastproject/util/PasswordEncoder.java
 create mode 100644 modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java

diff --git a/etc/security/mh_default_org.xml b/etc/security/mh_default_org.xml
index a4daa972eea..86b760da293 100644
--- a/etc/security/mh_default_org.xml
+++ b/etc/security/mh_default_org.xml
@@ -529,16 +529,22 @@
   <osgi:reference id=""ltiLaunchAuthenticationHandler"" cardinality=""1..1""
                   interface=""org.springframework.security.oauth.provider.OAuthAuthenticationHandler"" />
 
+
   <!-- ############################# -->
   <!-- # Spring Security Internals # -->
   <!-- ############################# -->
 
+  <bean id=""passwordEncoder"" class=""org.opencastproject.kernel.security.CustomPasswordEncoder"" />
+
   <!-- The JPA user directory stores md5 hashed, salted passwords, so we must use a username-salted md5 password encoder. -->
   <sec:authentication-manager alias=""authenticationManager"">
     <!-- Uncomment this if using Shibboleth authentication -->
     <!--sec:authentication-provider ref=""preauthAuthProvider"" /-->
     <sec:authentication-provider user-service-ref=""userDetailsService"">
-      <sec:password-encoder hash=""md5""><sec:salt-source user-property=""username"" /></sec:password-encoder>
+      <sec:password-encoder ref=""passwordEncoder"">
+        <!-- This salt is used only for decoding legacy MD5 hased passwords -->
+        <sec:salt-source user-property=""username"" />
+      </sec:password-encoder>
     </sec:authentication-provider>
   </sec:authentication-manager>
 
diff --git a/modules/common-jpa-impl/src/main/java/org/opencastproject/security/impl/jpa/JpaUser.java b/modules/common-jpa-impl/src/main/java/org/opencastproject/security/impl/jpa/JpaUser.java
index 0feeb8868c7..2cf5991e546 100644
--- a/modules/common-jpa-impl/src/main/java/org/opencastproject/security/impl/jpa/JpaUser.java
+++ b/modules/common-jpa-impl/src/main/java/org/opencastproject/security/impl/jpa/JpaUser.java
@@ -59,6 +59,8 @@
   @NamedQuery(name = ""User.findByIdAndOrg"", query = ""select u from JpaUser u where u.id=:id and u.organization.id = :org""),
   @NamedQuery(name = ""User.findByUsername"", query = ""select u from JpaUser u where u.username=:u and u.organization.id = :org""),
   @NamedQuery(name = ""User.findAll"", query = ""select u from JpaUser u where u.organization.id = :org""),
+  @NamedQuery(name = ""User.findInsecureHash"",
+              query = ""select u from JpaUser u where length(u.password) = 32 and u.organization.id = :org""),
   @NamedQuery(name = ""User.findAllByUserNames"", query = ""select u from JpaUser u where u.organization.id = :org AND u.username IN :names""),
   @NamedQuery(name = ""User.countAll"", query = ""select COUNT(u) from JpaUser u where u.organization.id = :org"") })
 public class JpaUser implements User {
diff --git a/modules/common/src/main/java/org/opencastproject/util/PasswordEncoder.java b/modules/common/src/main/java/org/opencastproject/util/PasswordEncoder.java
deleted file mode 100644
index 28f1364ba65..00000000000
--- a/modules/common/src/main/java/org/opencastproject/util/PasswordEncoder.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * Licensed to The Apereo Foundation under one or more contributor license
- * agreements. See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- *
- * The Apereo Foundation licenses this file to you under the Educational
- * Community License, Version 2.0 (the ""License""); you may not use this file
- * except in compliance with the License. You may obtain a copy of the License
- * at:
- *
- *   http://opensource.org/licenses/ecl2.txt
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
- * License for the specific language governing permissions and limitations under
- * the License.
- *
- */
-
-package org.opencastproject.util;
-
-import org.apache.commons.codec.digest.DigestUtils;
-
-/**
- * A password encoder that md5 hashes a password with a salt.
- */
-public final class PasswordEncoder {
-
-  /**
-   * Private constructor to disallow construction of this utility class.
-   */
-  private PasswordEncoder() {
-  }
-
-  /**
-   * Encode a clear text password.
-   *
-   * @param clearText
-   *          the password
-   * @param salt
-   *          the salt. See http://en.wikipedia.org/wiki/Salt_%28cryptography%29
-   * @return the encoded password
-   * @throws IllegalArgumentException
-   *           if clearText or salt are null
-   */
-  public static String encode(String clearText, Object salt) throws IllegalArgumentException {
-    if (clearText == null || salt == null)
-      throw new IllegalArgumentException(""clearText and salt must not be null"");
-    return DigestUtils.md5Hex(clearText + ""{"" + salt.toString() + ""}"");
-  }
-
-}
diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java
new file mode 100644
index 00000000000..567f7d70695
--- /dev/null
+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/security/CustomPasswordEncoder.java
@@ -0,0 +1,96 @@
+/**
+ * Licensed to The Apereo Foundation under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ *
+ * The Apereo Foundation licenses this file to you under the Educational
+ * Community License, Version 2.0 (the ""License""); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License
+ * at:
+ *
+ *   http://opensource.org/licenses/ecl2.txt
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ */
+
+package org.opencastproject.kernel.security;
+
+import org.apache.commons.codec.digest.DigestUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.authentication.encoding.PasswordEncoder;
+import org.springframework.security.crypto.bcrypt.BCrypt;
+
+/**
+ *
+ */
+public class CustomPasswordEncoder implements PasswordEncoder {
+  private Logger logger = LoggerFactory.getLogger(CustomPasswordEncoder.class);
+
+  /**
+   * Encode the raw password for storage using BCrypt.
+   * @param rawPassword raw password to encrypt/hash
+   * @return hashed password
+   */
+  public String encodePassword(final String rawPassword) {
+    return encodePassword(rawPassword, null);
+  }
+
+  /**
+   * Encode the raw password for storage using BCrypt.
+   * @param rawPassword raw password to encrypt/hash
+   * @param ignored This parameter will not be used. A random salt is generated by BCrypt.
+   * @return hashed password
+   */
+  @Override
+  public String encodePassword(final String rawPassword, final Object ignored) {
+    return BCrypt.hashpw(rawPassword, BCrypt.gensalt());
+  }
+
+  /**
+   * Verify the encoded password obtained from storage matches the submitted raw
+   * password after it too is encoded. Returns true if the passwords match, false if
+   * they do not. The stored password itself is never decoded.
+   *
+   * @param rawPassword the raw password to encode and match
+   * @param encodedPassword the encoded password from storage to compare with
+   * @return true if the raw password, after encoding, matches the encoded password from storage
+   */
+  @Override
+  public boolean isPasswordValid(String encodedPassword, String rawPassword, Object salt) {
+    // Test MD5 encoded hash
+    if (encodedPassword.length() == 32) {
+      final String hash = md5Encode(rawPassword, salt);
+      logger.debug(""Checking md5 hashed password '{}' against encoded password '{}'"", hash, encodedPassword);
+      return hash.equals(encodedPassword);
+    }
+
+    // Test BCrypt encoded hash
+    logger.debug(""Verifying BCrypt hash {}"", encodedPassword);
+    return BCrypt.checkpw(rawPassword, encodedPassword);
+  }
+
+  /**
+   * Encode a clear text password using Opencast's legacy MD5 based hashing with salt.
+   * The username was used as salt for this.
+   *
+   * @param clearText
+   *          the password
+   * @param salt
+   *          the salt
+   * @return the hashed password
+   * @throws IllegalArgumentException
+   *           if clearText or salt are null
+   */
+  public static String md5Encode(String clearText, Object salt) throws IllegalArgumentException {
+    if (clearText == null || salt == null)
+      throw new IllegalArgumentException(""clearText and salt must not be null"");
+    return DigestUtils.md5Hex(clearText + ""{"" + salt.toString() + ""}"");
+  }
+}
diff --git a/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/JpaUserAndRoleProvider.java b/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/JpaUserAndRoleProvider.java
index 021fa543efa..befa1c93fe3 100644
--- a/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/JpaUserAndRoleProvider.java
+++ b/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/JpaUserAndRoleProvider.java
@@ -21,6 +21,7 @@
 
 package org.opencastproject.userdirectory;
 
+import org.opencastproject.kernel.security.CustomPasswordEncoder;
 import org.opencastproject.security.api.Group;
 import org.opencastproject.security.api.Role;
 import org.opencastproject.security.api.RoleProvider;
@@ -33,7 +34,6 @@
 import org.opencastproject.security.impl.jpa.JpaUser;
 import org.opencastproject.userdirectory.utils.UserDirectoryUtils;
 import org.opencastproject.util.NotFoundException;
-import org.opencastproject.util.PasswordEncoder;
 import org.opencastproject.util.data.Monadics;
 import org.opencastproject.util.data.Option;
 
@@ -57,6 +57,7 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
 import javax.persistence.EntityTransaction;
+import javax.persistence.TypedQuery;
 
 /**
  * Manages and locates users using JPA.
@@ -95,6 +96,9 @@ public class JpaUserAndRoleProvider implements UserProvider, RoleProvider {
   /** A token to store in the miss cache */
   protected Object nullToken = new Object();
 
+  /** Password encoder for storing user passwords */
+  private CustomPasswordEncoder passwordEncoder = new CustomPasswordEncoder();
+
   /** OSGi DI */
   void setEntityManagerFactory(EntityManagerFactory emf) {
     this.emf = emf;
@@ -176,6 +180,23 @@ public Iterator<User> findUsers(Collection<String> userNames) {
     return Monadics.mlist(users).map(addProviderName).iterator();
   }
 
+  /**
+   * List all users with insecure password hashes
+   */
+  public List<User> findInsecurePasswordHashes() {
+    final String orgId = securityService.getOrganization().getId();
+    EntityManager em = null;
+    try {
+      em = emf.createEntityManager();
+      TypedQuery<User> q = em.createNamedQuery(""User.findInsecureHash"", User.class);
+      q.setParameter(""org"", orgId);
+      return q.getResultList();
+    } finally {
+      if (em != null)
+        em.close();
+    }
+  }
+
   /**
    * {@inheritDoc}
    *
@@ -271,11 +292,26 @@ public User loadUser(long userId, String organization) {
    *          if the user is not allowed to create other user with the given roles
    */
   public void addUser(JpaUser user) throws UnauthorizedException {
+    addUser(user, false);
+  }
+
+  /**
+   * Adds a user to the persistence
+   *
+   * @param user
+   *          the user to add
+   * @param passwordEncoded
+   *          if the password is already encoded or should be encoded
+   *
+   * @throws org.opencastproject.security.api.UnauthorizedException
+   *          if the user is not allowed to create other user with the given roles
+   */
+  public void addUser(JpaUser user, final boolean passwordEncoded) throws UnauthorizedException {
     if (!UserDirectoryUtils.isCurrentUserAuthorizedHandleRoles(securityService, user.getRoles()))
       throw new UnauthorizedException(""The user is not allowed to set the admin role on other users"");
 
     // Create a JPA user with an encoded password.
-    String encodedPassword = PasswordEncoder.encode(user.getPassword(), user.getUsername());
+    String encodedPassword = passwordEncoded ? user.getPassword() : passwordEncoder.encodePassword(user.getPassword());
 
     // Only save internal roles
     Set<JpaRole> roles = UserDirectoryPersistenceUtil.saveRoles(filterRoles(user.getRoles()), emf);
@@ -317,6 +353,21 @@ public void addUser(JpaUser user) throws UnauthorizedException {
    *          if the current user is not allowed to update user with the given roles
    */
   public User updateUser(JpaUser user) throws NotFoundException, UnauthorizedException {
+    return updateUser(user, false);
+  }
+
+  /**
+   * Updates a user to the persistence
+   *
+   * @param user
+   *          the user to save
+   * @param passwordEncoded
+   *          if the password is already encoded or should be encoded
+   * @throws NotFoundException
+   * @throws org.opencastproject.security.api.UnauthorizedException
+   *          if the current user is not allowed to update user with the given roles
+   */
+  public User updateUser(JpaUser user, final boolean passwordEncoded) throws NotFoundException, UnauthorizedException {
     if (!UserDirectoryUtils.isCurrentUserAuthorizedHandleRoles(securityService, user.getRoles()))
       throw new UnauthorizedException(""The user is not allowed to set the admin role on other users"");
 
@@ -336,7 +387,11 @@ public User updateUser(JpaUser user) throws NotFoundException, UnauthorizedExcep
       encodedPassword = updateUser.getPassword();
     } else  {
       // Update an JPA user with an encoded password.
-      encodedPassword = PasswordEncoder.encode(user.getPassword(), user.getUsername());
+      if (passwordEncoded) {
+        encodedPassword = user.getPassword();
+      } else {
+        encodedPassword = passwordEncoder.encodePassword(user.getPassword());
+      }
     }
 
     // Only save internal roles
diff --git a/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/endpoint/UserEndpoint.java b/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/endpoint/UserEndpoint.java
index a9e141a3544..39d133310c6 100644
--- a/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/endpoint/UserEndpoint.java
+++ b/modules/userdirectory/src/main/java/org/opencastproject/userdirectory/endpoint/UserEndpoint.java
@@ -186,6 +186,26 @@ public Response getUserAsJson(@PathParam(""username"") String username) throws Not
     return Response.ok(JaxbUser.fromUser(user)).build();
   }
 
+  @GET
+  @Path(""users/md5.json"")
+  @Produces(MediaType.APPLICATION_JSON)
+  @RestQuery(
+      name = ""users-with-insecure-hashing"",
+      description = ""Returns a list of users which passwords are stored using MD5 hashes"",
+      returnDescription = ""Returns a JSON representation of the list of matching user accounts"",
+      reponses = {
+      @RestResponse(
+          responseCode = SC_OK,
+          description = ""The user accounts."")
+  })
+  public JaxbUserList getUserWithInsecurePasswordHashingAsJson() {
+    JaxbUserList userList = new JaxbUserList();
+    for (User user: jpaUserAndRoleProvider.findInsecurePasswordHashes()) {
+      userList.add(user);
+    }
+    return userList;
+  }
+
   @POST
   @Path(""/"")
   @RestQuery(
diff --git a/modules/userdirectory/src/test/java/org/opencastproject/userdirectory/JpaUserProviderTest.java b/modules/userdirectory/src/test/java/org/opencastproject/userdirectory/JpaUserProviderTest.java
index 036399271b6..1140de41058 100644
--- a/modules/userdirectory/src/test/java/org/opencastproject/userdirectory/JpaUserProviderTest.java
+++ b/modules/userdirectory/src/test/java/org/opencastproject/userdirectory/JpaUserProviderTest.java
@@ -29,6 +29,7 @@
 import static org.opencastproject.util.data.Collections.set;
 import static org.opencastproject.util.persistence.PersistenceUtil.newTestEntityManagerFactory;
 
+import org.opencastproject.kernel.security.CustomPasswordEncoder;
 import org.opencastproject.security.api.Role;
 import org.opencastproject.security.api.SecurityConstants;
 import org.opencastproject.security.api.SecurityService;
@@ -38,7 +39,6 @@
 import org.opencastproject.security.impl.jpa.JpaRole;
 import org.opencastproject.security.impl.jpa.JpaUser;
 import org.opencastproject.util.NotFoundException;
-import org.opencastproject.util.PasswordEncoder;
 import org.opencastproject.util.data.Collections;
 
 import org.apache.commons.collections4.IteratorUtils;
@@ -56,6 +56,7 @@ public class JpaUserProviderTest {
   private JpaUserAndRoleProvider provider = null;
   private JpaOrganization org1 = null;
   private JpaOrganization org2 = null;
+  private CustomPasswordEncoder passwordEncoder = new CustomPasswordEncoder();
 
   @Before
   public void setUp() throws Exception {
@@ -83,7 +84,7 @@ public void testAddAndGetUser() throws Exception {
     assertNotNull(loadUser);
 
     assertEquals(user.getUsername(), loadUser.getUsername());
-    assertEquals(PasswordEncoder.encode(user.getPassword(), user.getUsername()), loadUser.getPassword());
+    assertTrue(passwordEncoder.isPasswordValid(loadUser.getPassword(), user.getPassword(), null));
     assertEquals(user.getOrganization(), loadUser.getOrganization());
     assertEquals(user.getRoles(), loadUser.getRoles());
 
@@ -94,7 +95,7 @@ public void testAddAndGetUser() throws Exception {
     assertNotNull(loadUser);
 
     assertEquals(user.getUsername(), loadUser.getUsername());
-    assertEquals(PasswordEncoder.encode(user.getPassword(), user.getUsername()), loadUser.getPassword());
+    assertTrue(passwordEncoder.isPasswordValid(loadUser.getPassword(), user.getPassword(), null));
     assertEquals(user.getOrganization(), loadUser.getOrganization());
     assertEquals(user.getRoles(), loadUser.getRoles());
   }
@@ -227,7 +228,7 @@ public void testUpdateUser() throws Exception {
 
     assertNotNull(loadUpdatedUser);
     assertEquals(user.getUsername(), loadUpdatedUser.getUsername());
-    assertEquals(PasswordEncoder.encode(newPassword, user.getUsername()), loadUpdatedUser.getPassword());
+    assertTrue(passwordEncoder.isPasswordValid(loadUpdatedUser.getPassword(), newPassword, null));
     assertEquals(authorities.size(), loadUpdatedUser.getRoles().size());
 
     updateUser = new JpaUser(""unknown"", newPassword, org1, provider.getName(), true, authorities);"
GHSA-3wfj-vh84-732p,"From 00921f22ff9a8792d7663ef8fadd4823402a6324 Mon Sep 17 00:00:00 2001
From: Timothy Bish <tabish121@gmail.com>
Date: Wed, 13 Aug 2014 11:15:29 -0400
Subject: [PATCH] Remove unused ConnectionControl handling.

---
 .../java/org/apache/activemq/broker/TransportConnection.java  | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
index 22a63b8cf9b..5bb7ec1ec0b 100755
--- a/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
+++ b/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java
@@ -1534,10 +1534,6 @@ public int getProtocolVersion() {
 
     @Override
     public Response processControlCommand(ControlCommand command) throws Exception {
-        String control = command.getCommand();
-        if (control != null && control.equals(""shutdown"")) {
-            System.exit(0);
-        }
         return null;
     }"
GHSA-vp37-2f9p-3vr3,"From 32e273507da0e964b58c50fd8a4c94c9d9363af0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sebasti=C3=A1n=20Passaro?= <sebastian.passaro@owasp.org>
Date: Sat, 9 Apr 2022 18:47:07 -0300
Subject: [PATCH] Fix child node removal on style tag processing

---
 .../owasp/validator/html/scan/AntiSamyDOMScanner.java  | 10 ++++------
 .../org/owasp/validator/html/test/AntiSamyTest.java    |  4 ++++
 2 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java b/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java
index dc991c46..53747cb2 100644
--- a/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java
+++ b/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java
@@ -407,7 +407,8 @@ private boolean processStyleTag(Element ele, Node parentNode) {
         CssScanner styleScanner = new CssScanner(policy, messages, policy.isEmbedStyleSheets());
 
         try {
-            if (ele.getChildNodes().getLength() > 0) {
+            int childNodesCount = ele.getChildNodes().getLength();
+            if (childNodesCount > 0) {
                 StringBuffer toScan = new StringBuffer();
 
                 for (int i = 0; i < ele.getChildNodes().getLength(); i++) {
@@ -428,7 +429,6 @@ private boolean processStyleTag(Element ele, Node parentNode) {
                  * would normally be left with an empty style tag and
                  * break all CSS. To prevent that, we have this check.
                  */
-
                 String cleanHTML = cr.getCleanHTML();
                 cleanHTML = cleanHTML == null || cleanHTML.equals("""") ? ""/* */"" : cleanHTML;
 
@@ -436,21 +436,19 @@ private boolean processStyleTag(Element ele, Node parentNode) {
                 /*
                  * Remove every other node after cleaning CSS, there will
                  * be only one node in the end, as it always should have.
+                 * Starting from the end due to list updating on the fly.
                  */
-                for (int i = 1; i < ele.getChildNodes().getLength(); i++) {
+                for (int i = childNodesCount - 1; i >= 1; i--) {
                     Node childNode = ele.getChildNodes().item(i);
                     ele.removeChild(childNode);
                 }
             }
-
         } catch (DOMException | ScanException | ParseException | NumberFormatException e) {
-
             /*
              * ParseException shouldn't be possible anymore, but we'll leave it
              * here because I (Arshan) am hilariously dumb sometimes.
              * Batik can throw NumberFormatExceptions (see bug #48).
              */
-
             addError(ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED, new Object[]{HTMLEntityEncoder.htmlEntityEncode(ele.getFirstChild().getNodeValue())});
             parentNode.removeChild(ele);
             return true;
diff --git a/src/test/java/org/owasp/validator/html/test/AntiSamyTest.java b/src/test/java/org/owasp/validator/html/test/AntiSamyTest.java
index e251acb5..d8b9cfdd 100644
--- a/src/test/java/org/owasp/validator/html/test/AntiSamyTest.java
+++ b/src/test/java/org/owasp/validator/html/test/AntiSamyTest.java
@@ -1713,10 +1713,14 @@ public void testSmuggledTagsInStyleContent() throws ScanException, PolicyExcepti
         Policy revised = policy.cloneWithDirective(Policy.USE_XHTML,""true"");
         assertThat(as.scan(""<style/>b<![cdata[</style><a href=javascript:alert(1)>test"", revised, AntiSamy.DOM).getCleanHTML(), not(containsString(""javascript"")));
         assertThat(as.scan(""<style/>b<![cdata[</style><a href=javascript:alert(1)>test"", revised, AntiSamy.SAX).getCleanHTML(), not(containsString(""javascript"")));
+        assertThat(as.scan(""<select<style/>k<input<</>input/onfocus=alert(1)>"", revised, AntiSamy.DOM).getCleanHTML(), not(containsString(""input"")));
+        assertThat(as.scan(""<select<style/>k<input<</>input/onfocus=alert(1)>"", revised, AntiSamy.SAX).getCleanHTML(), not(containsString(""input"")));
 
         Policy revised2 = policy.cloneWithDirective(Policy.USE_XHTML,""false"");
         assertThat(as.scan(""<select<style/>W<xmp<script>alert(1)</script>"", revised2, AntiSamy.DOM).getCleanHTML(), not(containsString(""script"")));
         assertThat(as.scan(""<select<style/>W<xmp<script>alert(1)</script>"", revised2, AntiSamy.SAX).getCleanHTML(), not(containsString(""script"")));
+        assertThat(as.scan(""<select<style/>k<input<</>input/onfocus=alert(1)>"", revised2, AntiSamy.DOM).getCleanHTML(), not(containsString(""input"")));
+        assertThat(as.scan(""<select<style/>k<input<</>input/onfocus=alert(1)>"", revised2, AntiSamy.SAX).getCleanHTML(), not(containsString(""input"")));
     }
 
     @Test(timeout = 3000)"
CVE-2021-21266,"From 81935b0ab126e6d9aebd2f6c3fc67d82bb7e8b86 Mon Sep 17 00:00:00 2001
From: Kai Kreuzer <kai@openhab.org>
Date: Sun, 24 Jan 2021 15:06:00 +0100
Subject: [PATCH] Fix XXE vulnerabilities in multiple add-ons

Signed-off-by: Kai Kreuzer <kai@openhab.org>
---
 .../hardware/callbacks/FritzAhaUpdateCallback.java |  7 +++++--
 .../callbacks/FritzAhaUpdateTemplatesCallback.java |  7 +++++--
 .../binding/avmfritz/internal/util/JAXBUtils.java  |  9 +++++++++
 .../internal/XMLResponseProcessor.java             |  1 +
 .../connector/http/DenonMarantzHttpConnector.java  |  2 ++
 .../internal/handler/DenonMarantzHandler.java      |  9 ++++++++-
 .../internal/DLinkHNAPCommunication.java           |  9 ++++++++-
 .../binding/enigma2/internal/Enigma2Client.java    | 14 ++++++++++++--
 .../binding/fmiweather/internal/client/Client.java |  6 ++++++
 .../radio/FrontierSiliconRadioApiResult.java       |  6 ++++++
 .../gce/internal/model/StatusFileInterpreter.java  |  9 ++++++++-
 .../communicator/message/XmlRpcResponse.java       |  3 +++
 .../hpprinter/internal/api/HPWebServerClient.java  | 12 +++++++++---
 .../internal/ws/projectfile/ProjectFileUtils.java  |  6 ++++++
 .../insteon/internal/device/DeviceTypeLoader.java  |  6 ++++++
 .../internal/device/FeatureTemplateLoader.java     |  6 ++++++
 .../insteon/internal/message/XMLMessageReader.java |  6 ++++++
 .../onkyo/internal/handler/OnkyoHandler.java       |  6 ++++++
 .../samsungtv/internal/service/SamsungTvUtils.java |  6 ++++++
 .../binding/sonos/internal/SonosXMLParser.java     |  1 +
 .../internal/live/TelldusLiveDeviceController.java |  2 ++
 .../internal/handler/VitotronicBridgeHandler.java  |  1 +
 .../discovery/WemoLinkDiscoveryService.java        |  7 +++++++
 .../wemo/internal/handler/WemoCoffeeHandler.java   |  7 +++++++
 .../wemo/internal/handler/WemoHolmesHandler.java   |  7 +++++++
 .../wemo/internal/handler/WemoMakerHandler.java    |  7 +++++++
 .../internal/protocol/xml/XMLUtils.java            |  8 +++++++-
 .../xpath/internal/XPathTransformationService.java |  6 ++++++
 28 files changed, 163 insertions(+), 13 deletions(-)

diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateCallback.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateCallback.java
index e07702f507b6f..89d7cd7af72d8 100644
--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateCallback.java
+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateCallback.java
@@ -18,6 +18,8 @@
 
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
 
 import org.eclipse.jdt.annotation.NonNullByDefault;
 import org.eclipse.smarthome.core.thing.ThingStatus;
@@ -62,15 +64,16 @@ public void execute(int status, String response) {
         logger.trace(""Received State response {}"", response);
         if (isValidRequest()) {
             try {
+                XMLStreamReader xsr = JAXBUtils.XMLINPUTFACTORY.createXMLStreamReader(new StringReader(response));
                 Unmarshaller unmarshaller = JAXBUtils.JAXBCONTEXT_DEVICES.createUnmarshaller();
-                DeviceListModel model = (DeviceListModel) unmarshaller.unmarshal(new StringReader(response));
+                DeviceListModel model = (DeviceListModel) unmarshaller.unmarshal(xsr);
                 if (model != null) {
                     handler.onDeviceListAdded(model.getDevicelist());
                 } else {
                     logger.debug(""no model in response"");
                 }
                 handler.setStatusInfo(ThingStatus.ONLINE, ThingStatusDetail.NONE, null);
-            } catch (JAXBException e) {
+            } catch (JAXBException | XMLStreamException e) {
                 logger.error(""Exception creating Unmarshaller: {}"", e.getLocalizedMessage(), e);
                 handler.setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,
                         e.getLocalizedMessage());
diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateTemplatesCallback.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateTemplatesCallback.java
index cb950a2a8e1e6..eada3ce9c8415 100644
--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateTemplatesCallback.java
+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/hardware/callbacks/FritzAhaUpdateTemplatesCallback.java
@@ -18,6 +18,8 @@
 
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
 
 import org.eclipse.jdt.annotation.NonNullByDefault;
 import org.openhab.binding.avmfritz.internal.dto.templates.TemplateListModel;
@@ -58,14 +60,15 @@ public void execute(int status, String response) {
         logger.trace(""Received response '{}'"", response);
         if (isValidRequest()) {
             try {
+                XMLStreamReader xsr = JAXBUtils.XMLINPUTFACTORY.createXMLStreamReader(new StringReader(response));
                 Unmarshaller unmarshaller = JAXBUtils.JAXBCONTEXT_TEMPLATES.createUnmarshaller();
-                TemplateListModel model = (TemplateListModel) unmarshaller.unmarshal(new StringReader(response));
+                TemplateListModel model = (TemplateListModel) unmarshaller.unmarshal(xsr);
                 if (model != null) {
                     handler.addTemplateList(model.getTemplates());
                 } else {
                     logger.debug(""no template in response"");
                 }
-            } catch (JAXBException e) {
+            } catch (JAXBException | XMLStreamException e) {
                 logger.error(""Exception creating Unmarshaller: {}"", e.getLocalizedMessage(), e);
             }
         } else {
diff --git a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/util/JAXBUtils.java b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/util/JAXBUtils.java
index e1316cf8d0c35..9d702fce0d95f 100644
--- a/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/util/JAXBUtils.java
+++ b/bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/util/JAXBUtils.java
@@ -14,6 +14,7 @@
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
+import javax.xml.stream.XMLInputFactory;
 
 import org.eclipse.jdt.annotation.NonNullByDefault;
 import org.eclipse.jdt.annotation.Nullable;
@@ -34,6 +35,7 @@ public class JAXBUtils {
 
     public static final @Nullable JAXBContext JAXBCONTEXT_DEVICES = initJAXBContextDevices();
     public static final @Nullable JAXBContext JAXBCONTEXT_TEMPLATES = initJAXBContextTemplates();
+    public static final XMLInputFactory XMLINPUTFACTORY = initXMLInputFactory();
 
     private static @Nullable JAXBContext initJAXBContextDevices() {
         try {
@@ -52,4 +54,11 @@ public class JAXBUtils {
             return null;
         }
     }
+
+    private static XMLInputFactory initXMLInputFactory() {
+        XMLInputFactory xif = XMLInputFactory.newInstance();
+        xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
+        xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);
+        return xif;
+    }
 }
diff --git a/bundles/org.openhab.binding.bosesoundtouch/src/main/java/org/openhab/binding/bosesoundtouch/internal/XMLResponseProcessor.java b/bundles/org.openhab.binding.bosesoundtouch/src/main/java/org/openhab/binding/bosesoundtouch/internal/XMLResponseProcessor.java
index 6ab91903f6a9a..a63be96642dc2 100644
--- a/bundles/org.openhab.binding.bosesoundtouch/src/main/java/org/openhab/binding/bosesoundtouch/internal/XMLResponseProcessor.java
+++ b/bundles/org.openhab.binding.bosesoundtouch/src/main/java/org/openhab/binding/bosesoundtouch/internal/XMLResponseProcessor.java
@@ -41,6 +41,7 @@ public XMLResponseProcessor(BoseSoundTouchHandler handler) {
 
     public void handleMessage(String msg) throws SAXException, IOException {
         XMLReader reader = XMLReaderFactory.createXMLReader();
+        reader.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
         reader.setContentHandler(new XMLResponseHandler(handler, stateSwitchingMap));
         reader.parse(new InputSource(new StringReader(msg)));
     }
diff --git a/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/connector/http/DenonMarantzHttpConnector.java b/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/connector/http/DenonMarantzHttpConnector.java
index 250276c9f0ef5..683a4dd502fe9 100644
--- a/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/connector/http/DenonMarantzHttpConnector.java
+++ b/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/connector/http/DenonMarantzHttpConnector.java
@@ -309,6 +309,8 @@ private <T> T getDocument(String uri, Class<T> response) throws IOException {
             if (StringUtils.isNotBlank(result)) {
                 JAXBContext jc = JAXBContext.newInstance(response);
                 XMLInputFactory xif = XMLInputFactory.newInstance();
+                xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
+                xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);
                 XMLStreamReader xsr = xif.createXMLStreamReader(IOUtils.toInputStream(result));
                 xsr = new PropertyRenamerDelegate(xsr);
 
diff --git a/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/handler/DenonMarantzHandler.java b/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/handler/DenonMarantzHandler.java
index aeaea54599576..b3ae59f873f9d 100644
--- a/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/handler/DenonMarantzHandler.java
+++ b/bundles/org.openhab.binding.denonmarantz/src/main/java/org/openhab/binding/denonmarantz/internal/handler/DenonMarantzHandler.java
@@ -261,8 +261,15 @@ private void autoConfigure() {
 
                 if (status == HttpURLConnection.HTTP_OK && response != null) {
                     DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-                    DocumentBuilder builder;
                     try {
+                        // see
+                        // https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+                        domFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+                        domFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+                        domFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+                        domFactory.setXIncludeAware(false);
+                        domFactory.setExpandEntityReferences(false);
+                        DocumentBuilder builder;
                         builder = domFactory.newDocumentBuilder();
                         Document dDoc = builder.parse(new InputSource(new StringReader(response.getContentAsString())));
                         XPath xPath = XPathFactory.newInstance().newXPath();
diff --git a/bundles/org.openhab.binding.dlinksmarthome/src/main/java/org/openhab/binding/dlinksmarthome/internal/DLinkHNAPCommunication.java b/bundles/org.openhab.binding.dlinksmarthome/src/main/java/org/openhab/binding/dlinksmarthome/internal/DLinkHNAPCommunication.java
index 42b1fc7fb1407..8842ea856ff42 100644
--- a/bundles/org.openhab.binding.dlinksmarthome/src/main/java/org/openhab/binding/dlinksmarthome/internal/DLinkHNAPCommunication.java
+++ b/bundles/org.openhab.binding.dlinksmarthome/src/main/java/org/openhab/binding/dlinksmarthome/internal/DLinkHNAPCommunication.java
@@ -155,7 +155,14 @@ public DLinkHNAPCommunication(final String ipAddress, final String pin) {
             uri = new URI(""http://"" + ipAddress + ""/HNAP1"");
             httpClient.start();
 
-            parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            dbf.setXIncludeAware(false);
+            dbf.setExpandEntityReferences(false);
+            parser = dbf.newDocumentBuilder();
 
             final MessageFactory messageFactory = MessageFactory.newInstance();
             requestAction = messageFactory.createMessage();
diff --git a/bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java b/bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java
index 24df68b6bdb3d..779c01c4b1b49 100644
--- a/bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java
+++ b/bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java
@@ -82,8 +82,18 @@ public class Enigma2Client {
     private final DocumentBuilderFactory factory;
 
     public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {
-        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);
-        this.factory = DocumentBuilderFactory.newInstance();
+        enigma2HttpClient = new Enigma2HttpClient(requestTimeout);
+        factory = DocumentBuilderFactory.newInstance();
+        // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+        try {
+            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            factory.setXIncludeAware(false);
+            factory.setExpandEntityReferences(false);
+        } catch (ParserConfigurationException e) {
+            logger.warn(""Failed setting parser features against XXE attacks!"", e);
+        }
         if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {
             this.host = ""http://"" + user + "":"" + password + ""@"" + host;
         } else {
diff --git a/bundles/org.openhab.binding.fmiweather/src/main/java/org/openhab/binding/fmiweather/internal/client/Client.java b/bundles/org.openhab.binding.fmiweather/src/main/java/org/openhab/binding/fmiweather/internal/client/Client.java
index f398bb89371f4..3db6b03ff43a6 100644
--- a/bundles/org.openhab.binding.fmiweather/src/main/java/org/openhab/binding/fmiweather/internal/client/Client.java
+++ b/bundles/org.openhab.binding.fmiweather/src/main/java/org/openhab/binding/fmiweather/internal/client/Client.java
@@ -105,6 +105,12 @@ public String getNamespaceURI(@Nullable String prefix) {
     public Client() {
         documentBuilderFactory.setNamespaceAware(true);
         try {
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            documentBuilderFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            documentBuilderFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            documentBuilderFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            documentBuilderFactory.setXIncludeAware(false);
+            documentBuilderFactory.setExpandEntityReferences(false);
             documentBuilder = documentBuilderFactory.newDocumentBuilder();
         } catch (ParserConfigurationException e) {
             throw new IllegalStateException(e);
diff --git a/bundles/org.openhab.binding.fsinternetradio/src/main/java/org/openhab/binding/fsinternetradio/internal/radio/FrontierSiliconRadioApiResult.java b/bundles/org.openhab.binding.fsinternetradio/src/main/java/org/openhab/binding/fsinternetradio/internal/radio/FrontierSiliconRadioApiResult.java
index 687b23565e9e8..c7bb0f56fd2f8 100644
--- a/bundles/org.openhab.binding.fsinternetradio/src/main/java/org/openhab/binding/fsinternetradio/internal/radio/FrontierSiliconRadioApiResult.java
+++ b/bundles/org.openhab.binding.fsinternetradio/src/main/java/org/openhab/binding/fsinternetradio/internal/radio/FrontierSiliconRadioApiResult.java
@@ -209,6 +209,12 @@ public String getSessionId() {
     private Document getXmlDocFromString(String xmlString)
             throws ParserConfigurationException, SAXException, IOException {
         final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+        factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+        factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+        factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+        factory.setXIncludeAware(false);
+        factory.setExpandEntityReferences(false);
         final DocumentBuilder builder = factory.newDocumentBuilder();
         final Document xmlDocument = builder.parse(new InputSource(new StringReader(xmlString)));
         return xmlDocument;
diff --git a/bundles/org.openhab.binding.gce/src/main/java/org/openhab/binding/gce/internal/model/StatusFileInterpreter.java b/bundles/org.openhab.binding.gce/src/main/java/org/openhab/binding/gce/internal/model/StatusFileInterpreter.java
index 07a5aa7032ab1..35a66002938b4 100644
--- a/bundles/org.openhab.binding.gce/src/main/java/org/openhab/binding/gce/internal/model/StatusFileInterpreter.java
+++ b/bundles/org.openhab.binding.gce/src/main/java/org/openhab/binding/gce/internal/model/StatusFileInterpreter.java
@@ -61,7 +61,14 @@ public StatusFileInterpreter(String hostname, Ipx800EventListener listener) {
 
     public void read() {
         try {
-            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            factory.setXIncludeAware(false);
+            factory.setExpandEntityReferences(false);
+            DocumentBuilder builder = factory.newDocumentBuilder();
             String statusPage = HttpUtil.executeUrl(""GET"", String.format(URL_TEMPLATE, hostname), 5000);
             InputStream inputStream = new ByteArrayInputStream(statusPage.getBytes());
             Document document = builder.parse(inputStream);
diff --git a/bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/message/XmlRpcResponse.java b/bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/message/XmlRpcResponse.java
index 1a526fd27482d..f8d378c7531f3 100644
--- a/bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/message/XmlRpcResponse.java
+++ b/bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/message/XmlRpcResponse.java
@@ -47,6 +47,9 @@ public XmlRpcResponse(InputStream is, String encoding)
             throws SAXException, ParserConfigurationException, IOException {
         SAXParserFactory factory = SAXParserFactory.newInstance();
         SAXParser saxParser = factory.newSAXParser();
+        factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+        saxParser.getXMLReader().setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+        factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
         InputSource inputSource = new InputSource(is);
         inputSource.setEncoding(encoding);
         saxParser.parse(inputSource, new XmlRpcHandler());
diff --git a/bundles/org.openhab.binding.hpprinter/src/main/java/org/openhab/binding/hpprinter/internal/api/HPWebServerClient.java b/bundles/org.openhab.binding.hpprinter/src/main/java/org/openhab/binding/hpprinter/internal/api/HPWebServerClient.java
index fdfb9ac8d922e..49102be3e0f3a 100644
--- a/bundles/org.openhab.binding.hpprinter/src/main/java/org/openhab/binding/hpprinter/internal/api/HPWebServerClient.java
+++ b/bundles/org.openhab.binding.hpprinter/src/main/java/org/openhab/binding/hpprinter/internal/api/HPWebServerClient.java
@@ -50,7 +50,7 @@ public class HPWebServerClient {
 
     /**
      * Creates a new HP Web Server Client object.
-     * 
+     *
      * @param httpClient {HttpClient} The HttpClient to use for HTTP requests.
      * @param address The address for the Embedded Web Server.
      */
@@ -63,7 +63,7 @@ public HPWebServerClient(HttpClient httpClient, String address) {
 
     /**
      * Gets the Status information from the Embedded Web Server.
-     * 
+     *
      * @return The status information.
      */
     public HPServerResult<HPStatus> getStatus() {
@@ -84,7 +84,7 @@ public HPServerResult<HPScannerStatusFeatures> getScannerFeatures() {
 
     /**
      * Gets the Usage information from the Embedded Web Server.
-     * 
+     *
      * @return The usage information.
      */
     public HPServerResult<HPUsage> getUsage() {
@@ -120,6 +120,12 @@ private <T> HPServerResult<T> fetchData(String endpoint, Function<Document, T> f
 
     private synchronized Document getDocument(String contentAsString)
             throws ParserConfigurationException, SAXException, IOException {
+        // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+        factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+        factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+        factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+        factory.setXIncludeAware(false);
+        factory.setExpandEntityReferences(false);
         DocumentBuilder builder = factory.newDocumentBuilder();
         InputSource source = new InputSource(new StringReader(contentAsString));
         return builder.parse(source);
diff --git a/bundles/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/ws/projectfile/ProjectFileUtils.java b/bundles/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/ws/projectfile/ProjectFileUtils.java
index 2585972347e5b..348f45f62e3b5 100644
--- a/bundles/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/ws/projectfile/ProjectFileUtils.java
+++ b/bundles/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/ws/projectfile/ProjectFileUtils.java
@@ -53,6 +53,12 @@ public static Document readFromFile(String filePath) throws IhcExecption {
         File fXmlFile = new File(filePath);
         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
         try {
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            dbFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            dbFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            dbFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            dbFactory.setXIncludeAware(false);
+            dbFactory.setExpandEntityReferences(false);
             DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
             Document doc = dBuilder.parse(fXmlFile);
             return doc;
diff --git a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/DeviceTypeLoader.java b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/DeviceTypeLoader.java
index 295985a1c3416..79c9898aa1821 100644
--- a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/DeviceTypeLoader.java
+++ b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/DeviceTypeLoader.java
@@ -78,6 +78,12 @@ public HashMap<String, DeviceType> getDeviceTypes() {
      */
     public void loadDeviceTypesXML(InputStream in) throws ParserConfigurationException, SAXException, IOException {
         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+        // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+        dbFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+        dbFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+        dbFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+        dbFactory.setXIncludeAware(false);
+        dbFactory.setExpandEntityReferences(false);
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(in);
         doc.getDocumentElement().normalize();
diff --git a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/FeatureTemplateLoader.java b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/FeatureTemplateLoader.java
index 7740c05ab9037..308e937152923 100644
--- a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/FeatureTemplateLoader.java
+++ b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/FeatureTemplateLoader.java
@@ -52,6 +52,12 @@ public static List<FeatureTemplate> readTemplates(InputStream input) throws IOEx
         List<FeatureTemplate> features = new ArrayList<>();
         try {
             DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            dbFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            dbFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            dbFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            dbFactory.setXIncludeAware(false);
+            dbFactory.setExpandEntityReferences(false);
             DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
             // Parse it!
             Document doc = dBuilder.parse(input);
diff --git a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/XMLMessageReader.java b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/XMLMessageReader.java
index c23a18cc5c6aa..6ce587141f1dd 100644
--- a/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/XMLMessageReader.java
+++ b/bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/XMLMessageReader.java
@@ -56,6 +56,12 @@ public static HashMap<String, Msg> readMessageDefinitions(InputStream input)
         HashMap<String, Msg> messageMap = new HashMap<>();
         try {
             DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            dbFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            dbFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            dbFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            dbFactory.setXIncludeAware(false);
+            dbFactory.setExpandEntityReferences(false);
             DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
             // Parse it!
             Document doc = dBuilder.parse(input);
diff --git a/bundles/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/handler/OnkyoHandler.java b/bundles/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/handler/OnkyoHandler.java
index 7608eeb44f149..c08b0cee462f0 100644
--- a/bundles/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/handler/OnkyoHandler.java
+++ b/bundles/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/handler/OnkyoHandler.java
@@ -498,6 +498,12 @@ public void statusUpdateReceived(String ip, EiscpMessage data) {
     private void processInfo(String infoXML) {
         try {
             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            factory.setXIncludeAware(false);
+            factory.setExpandEntityReferences(false);
             DocumentBuilder builder = factory.newDocumentBuilder();
             try (StringReader sr = new StringReader(infoXML)) {
                 InputSource is = new InputSource(sr);
diff --git a/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/service/SamsungTvUtils.java b/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/service/SamsungTvUtils.java
index de5afaa6040d9..c87dafac501ef 100644
--- a/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/service/SamsungTvUtils.java
+++ b/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/service/SamsungTvUtils.java
@@ -81,6 +81,12 @@ public static HashMap<String, String> buildHashMap(String... data) {
     public static @Nullable Document loadXMLFromString(String xml) {
         try {
             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            factory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            factory.setXIncludeAware(false);
+            factory.setExpandEntityReferences(false);
             DocumentBuilder builder = factory.newDocumentBuilder();
             InputSource is = new InputSource(new StringReader(xml));
             return builder.parse(is);
diff --git a/bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java b/bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
index ce04c67f50939..665e2fbf1c580 100644
--- a/bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
+++ b/bundles/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
@@ -134,6 +134,7 @@ public static List<SonosEntry> getEntriesFromString(String xml) {
      */
     public static @Nullable SonosResourceMetaData getResourceMetaData(String xml) throws SAXException {
         XMLReader reader = XMLReaderFactory.createXMLReader();
+        reader.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
         ResourceMetaDataHandler handler = new ResourceMetaDataHandler();
         reader.setContentHandler(handler);
         try {
diff --git a/bundles/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/live/TelldusLiveDeviceController.java b/bundles/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/live/TelldusLiveDeviceController.java
index 03b9d6a20fdcd..c69475abbfa5c 100644
--- a/bundles/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/live/TelldusLiveDeviceController.java
+++ b/bundles/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/live/TelldusLiveDeviceController.java
@@ -309,6 +309,8 @@ private <T> T innerCallRest(String uri, Class<T> response) throws InterruptedExc
         // TelldusLiveHandler.logger.info(""Devices"" + resp.getResponseBody());
         JAXBContext jc = JAXBContext.newInstance(response);
         XMLInputFactory xif = XMLInputFactory.newInstance();
+        xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
+        xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);
         XMLStreamReader xsr = xif.createXMLStreamReader(resp.getResponseBodyAsStream());
         // xsr = new PropertyRenamerDelegate(xsr);
 
diff --git a/bundles/org.openhab.binding.vitotronic/src/main/java/org/openhab/binding/vitotronic/internal/handler/VitotronicBridgeHandler.java b/bundles/org.openhab.binding.vitotronic/src/main/java/org/openhab/binding/vitotronic/internal/handler/VitotronicBridgeHandler.java
index 08ded28fdd7bb..829c417bb35d3 100644
--- a/bundles/org.openhab.binding.vitotronic/src/main/java/org/openhab/binding/vitotronic/internal/handler/VitotronicBridgeHandler.java
+++ b/bundles/org.openhab.binding.vitotronic/src/main/java/org/openhab/binding/vitotronic/internal/handler/VitotronicBridgeHandler.java
@@ -250,6 +250,7 @@ private void openSocket() {
         logger.trace(""Start Background Thread for recieving data from adapter"");
         try {
             XMLReader xmlReader = XMLReaderFactory.createXMLReader();
+            xmlReader.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
             xmlReader.setContentHandler(new XmlHandler());
             logger.trace(""Start Parser for optolink adapter"");
             xmlReader.parse(new InputSource(inStream));
diff --git a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/discovery/WemoLinkDiscoveryService.java b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/discovery/WemoLinkDiscoveryService.java
index 15f09d2970a6f..c25ae598f9b65 100644
--- a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/discovery/WemoLinkDiscoveryService.java
+++ b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/discovery/WemoLinkDiscoveryService.java
@@ -156,6 +156,13 @@ public void startScan() {
 
                         // Build parser for received <DeviceList>
                         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+                        // see
+                        // https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+                        dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+                        dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+                        dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+                        dbf.setXIncludeAware(false);
+                        dbf.setExpandEntityReferences(false);
                         DocumentBuilder db = dbf.newDocumentBuilder();
                         InputSource is = new InputSource();
                         is.setCharacterStream(new StringReader(stringParser));
diff --git a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoCoffeeHandler.java b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoCoffeeHandler.java
index 5444ff4b8dc8e..bfa8a0fa717b6 100644
--- a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoCoffeeHandler.java
+++ b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoCoffeeHandler.java
@@ -290,6 +290,13 @@ protected void updateWemoState() {
                         stringParser = ""<data>"" + stringParser + ""</data>"";
 
                         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+                        // see
+                        // https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+                        dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+                        dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+                        dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+                        dbf.setXIncludeAware(false);
+                        dbf.setExpandEntityReferences(false);
                         DocumentBuilder db = dbf.newDocumentBuilder();
                         InputSource is = new InputSource();
                         is.setCharacterStream(new StringReader(stringParser));
diff --git a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoHolmesHandler.java b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoHolmesHandler.java
index 86539584422b4..51870fce69303 100644
--- a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoHolmesHandler.java
+++ b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoHolmesHandler.java
@@ -359,6 +359,13 @@ protected void updateWemoState() {
                     stringParser = ""<data>"" + stringParser + ""</data>"";
 
                     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+                    // see
+                    // https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+                    dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+                    dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+                    dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+                    dbf.setXIncludeAware(false);
+                    dbf.setExpandEntityReferences(false);
                     DocumentBuilder db = dbf.newDocumentBuilder();
                     InputSource is = new InputSource();
                     is.setCharacterStream(new StringReader(stringParser));
diff --git a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoMakerHandler.java b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoMakerHandler.java
index 7becbdc4a985f..19d94cd8bd780 100644
--- a/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoMakerHandler.java
+++ b/bundles/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/handler/WemoMakerHandler.java
@@ -222,6 +222,13 @@ protected void updateWemoState() {
                         stringParser = ""<data>"" + stringParser + ""</data>"";
 
                         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+                        // see
+                        // https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+                        dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+                        dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+                        dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+                        dbf.setXIncludeAware(false);
+                        dbf.setExpandEntityReferences(false);
                         DocumentBuilder db = dbf.newDocumentBuilder();
                         InputSource is = new InputSource();
                         is.setCharacterStream(new StringReader(stringParser));
diff --git a/bundles/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/protocol/xml/XMLUtils.java b/bundles/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/protocol/xml/XMLUtils.java
index f673e96c42609..ad5346ee81412 100644
--- a/bundles/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/protocol/xml/XMLUtils.java
+++ b/bundles/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/protocol/xml/XMLUtils.java
@@ -173,7 +173,13 @@ public static Document xml(String message) throws IOException, ReceivedMessagePa
                 : ""<?xml version=\""1.0\"" encoding=\""utf-8\""?>"" + message;
 
         try {
-            return XMLUtils.dbf.newDocumentBuilder().parse(new InputSource(new StringReader(response)));
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            dbf.setXIncludeAware(false);
+            dbf.setExpandEntityReferences(false);
+            return dbf.newDocumentBuilder().parse(new InputSource(new StringReader(response)));
         } catch (SAXException | ParserConfigurationException e) {
             throw new ReceivedMessageParseException(e);
         }
diff --git a/bundles/org.openhab.transform.xpath/src/main/java/org/openhab/transform/xpath/internal/XPathTransformationService.java b/bundles/org.openhab.transform.xpath/src/main/java/org/openhab/transform/xpath/internal/XPathTransformationService.java
index 6128c642f440e..96524936b092f 100644
--- a/bundles/org.openhab.transform.xpath/src/main/java/org/openhab/transform/xpath/internal/XPathTransformationService.java
+++ b/bundles/org.openhab.transform.xpath/src/main/java/org/openhab/transform/xpath/internal/XPathTransformationService.java
@@ -55,6 +55,12 @@ public class XPathTransformationService implements TransformationService {
 
         try {
             DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+            // see https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
+            domFactory.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+            domFactory.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+            domFactory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+            domFactory.setXIncludeAware(false);
+            domFactory.setExpandEntityReferences(false);
             domFactory.setNamespaceAware(true);
             domFactory.setValidating(false);
             DocumentBuilder builder = domFactory.newDocumentBuilder();"
GHSA-54fx-gm74-q676,"From fb0def6f61c09a2a80c9145e4ec6521225cd0b99 Mon Sep 17 00:00:00 2001
From: Darran Lofthouse <darran.lofthouse@jboss.com>
Date: Fri, 14 Feb 2020 14:43:26 +0000
Subject: [PATCH] [CVE-2020-1729] Ensure utility methods wrapping doPrivileged
 calls are not publicly available.

Additionally a doPrivileged is not necessary if no SecurityManager is installed.
---
 .../io/smallrye/config/SecuritySupport.java   | 26 +++++-----
 .../config/inject/ConfigProducer.java         |  2 +-
 .../config/inject/SecuritySupport.java        | 49 +++++++++++++++++++
 3 files changed, 65 insertions(+), 12 deletions(-)
 create mode 100644 implementation/src/main/java/io/smallrye/config/inject/SecuritySupport.java

diff --git a/implementation/src/main/java/io/smallrye/config/SecuritySupport.java b/implementation/src/main/java/io/smallrye/config/SecuritySupport.java
index c3bfe66dd..0f9e1e436 100644
--- a/implementation/src/main/java/io/smallrye/config/SecuritySupport.java
+++ b/implementation/src/main/java/io/smallrye/config/SecuritySupport.java
@@ -24,22 +24,26 @@
 /**
  * @author <a href=""http://jmesnil.net/"">Jeff Mesnil</a> (c) 2018 Red Hat inc.
  */
-public class SecuritySupport {
+class SecuritySupport {
     private static final Logger LOG = Logger.getLogger(""io.smallrye.config"");
 
     private SecuritySupport() {
     }
 
-    public static ClassLoader getContextClassLoader() {
-        return AccessController.doPrivileged((PrivilegedAction<ClassLoader>) () -> {
-            ClassLoader tccl = null;
-            try {
-                tccl = Thread.currentThread().getContextClassLoader();
-            } catch (SecurityException ex) {
-                LOG.warn(""Unable to get context classloader instance."", ex);
-            }
-            return tccl;
-        });
+    static ClassLoader getContextClassLoader() {
+        if (System.getSecurityManager() == null) {
+            return Thread.currentThread().getContextClassLoader();
+        } else {
+            return AccessController.doPrivileged((PrivilegedAction<ClassLoader>) () -> {
+                ClassLoader tccl = null;
+                try {
+                    tccl = Thread.currentThread().getContextClassLoader();
+                } catch (SecurityException ex) {
+                    LOG.warn(""Unable to get context classloader instance."", ex);
+                }
+                return tccl;
+            });
+        }
     }
 
 }
diff --git a/implementation/src/main/java/io/smallrye/config/inject/ConfigProducer.java b/implementation/src/main/java/io/smallrye/config/inject/ConfigProducer.java
index 7fe216b89..aedf0ea67 100644
--- a/implementation/src/main/java/io/smallrye/config/inject/ConfigProducer.java
+++ b/implementation/src/main/java/io/smallrye/config/inject/ConfigProducer.java
@@ -16,7 +16,7 @@
 
 package io.smallrye.config.inject;
 
-import static io.smallrye.config.SecuritySupport.getContextClassLoader;
+import static io.smallrye.config.inject.SecuritySupport.getContextClassLoader;
 
 import java.io.Serializable;
 import java.util.*;
diff --git a/implementation/src/main/java/io/smallrye/config/inject/SecuritySupport.java b/implementation/src/main/java/io/smallrye/config/inject/SecuritySupport.java
new file mode 100644
index 000000000..70334ee43
--- /dev/null
+++ b/implementation/src/main/java/io/smallrye/config/inject/SecuritySupport.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2018 Red Hat, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.smallrye.config.inject;
+
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+import org.jboss.logging.Logger;
+
+/**
+ * @author <a href=""http://jmesnil.net/"">Jeff Mesnil</a> (c) 2018 Red Hat inc.
+ */
+class SecuritySupport {
+    private static final Logger LOG = Logger.getLogger(""io.smallrye.config"");
+
+    private SecuritySupport() {
+    }
+
+    static ClassLoader getContextClassLoader() {
+        if (System.getSecurityManager() == null) {
+            return Thread.currentThread().getContextClassLoader();
+        } else {
+            return AccessController.doPrivileged((PrivilegedAction<ClassLoader>) () -> {
+                ClassLoader tccl = null;
+                try {
+                    tccl = Thread.currentThread().getContextClassLoader();
+                } catch (SecurityException ex) {
+                    LOG.warn(""Unable to get context classloader instance."", ex);
+                }
+                return tccl;
+            });
+        }
+    }
+
+}"
CVE-2021-21243,"From 9637fc8fa461c5777282a0021c3deb1e7a48f137 Mon Sep 17 00:00:00 2001
From: Robin Shen <robin@onedev.io>
Date: Thu, 19 Nov 2020 12:09:04 +0800
Subject: [PATCH] Do not deserialize data from job nodes in Kubernetes resource
 to avoid security vulnerability

---
 pom.xml                                          |  4 ++--
 server-core/pom.xml                              |  2 +-
 server-plugin/pom.xml                            |  2 +-
 server-plugin/server-plugin-archetype/pom.xml    |  2 +-
 .../server-plugin-authenticator-ldap/pom.xml     |  2 +-
 .../server-plugin-buildspec-gradle/pom.xml       |  2 +-
 .../server-plugin-buildspec-maven/pom.xml        |  2 +-
 .../server-plugin-buildspec-node/pom.xml         |  2 +-
 .../server-plugin-executor-docker/pom.xml        |  2 +-
 .../server-plugin-executor-kubernetes/pom.xml    |  2 +-
 .../executor/kubernetes/KubernetesResource.java  | 16 ++++++++--------
 server-plugin/server-plugin-report-html/pom.xml  |  2 +-
 .../server-plugin-report-markdown/pom.xml        |  2 +-
 server-plugin/server-plugin-sso-openid/pom.xml   |  2 +-
 server-product/pom.xml                           |  2 +-
 15 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/pom.xml b/pom.xml
index 74c3a1ef06..78dd663ae5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,7 +9,7 @@
 		<version>1.0.5</version>
 	</parent>
 	<artifactId>server</artifactId>
-	<version>4.0.0</version>
+	<version>4.0.1</version>
 	<packaging>pom</packaging>
 	<build>
 		<finalName>${project.groupId}.${project.artifactId}-${project.version}</finalName>
@@ -574,7 +574,7 @@
 	</repositories>
 	<properties>
 		<commons.version>1.1.21</commons.version>
-		<k8shelper.version>1.0.20</k8shelper.version>
+		<k8shelper.version>1.0.21</k8shelper.version>
 		<slf4j.version>1.7.5</slf4j.version>
 		<logback.version>1.0.11</logback.version>
 		<antlr.version>4.7.2</antlr.version>
diff --git a/server-core/pom.xml b/server-core/pom.xml
index d2658ebcf3..d6afca5912 100644
--- a/server-core/pom.xml
+++ b/server-core/pom.xml
@@ -7,7 +7,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<build>
 		<plugins>
diff --git a/server-plugin/pom.xml b/server-plugin/pom.xml
index fea6340305..4a905e16ad 100644
--- a/server-plugin/pom.xml
+++ b/server-plugin/pom.xml
@@ -6,7 +6,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<dependencies>
 		<dependency>
diff --git a/server-plugin/server-plugin-archetype/pom.xml b/server-plugin/server-plugin-archetype/pom.xml
index 271b0e4a6f..2c2042024a 100644
--- a/server-plugin/server-plugin-archetype/pom.xml
+++ b/server-plugin/server-plugin-archetype/pom.xml
@@ -6,7 +6,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<build>
 		<resources>
diff --git a/server-plugin/server-plugin-authenticator-ldap/pom.xml b/server-plugin/server-plugin-authenticator-ldap/pom.xml
index 76cc188fde..4ccb1c1310 100644
--- a/server-plugin/server-plugin-authenticator-ldap/pom.xml
+++ b/server-plugin/server-plugin-authenticator-ldap/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.authenticator.ldap.LdapModule</moduleClass>
diff --git a/server-plugin/server-plugin-buildspec-gradle/pom.xml b/server-plugin/server-plugin-buildspec-gradle/pom.xml
index 5d5e5372da..01063b2c0d 100644
--- a/server-plugin/server-plugin-buildspec-gradle/pom.xml
+++ b/server-plugin/server-plugin-buildspec-gradle/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<dependencies>
 		<dependency>
diff --git a/server-plugin/server-plugin-buildspec-maven/pom.xml b/server-plugin/server-plugin-buildspec-maven/pom.xml
index 41083dc061..e907cf6b4c 100644
--- a/server-plugin/server-plugin-buildspec-maven/pom.xml
+++ b/server-plugin/server-plugin-buildspec-maven/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.buildspec.maven.MavenModule</moduleClass>
diff --git a/server-plugin/server-plugin-buildspec-node/pom.xml b/server-plugin/server-plugin-buildspec-node/pom.xml
index 734f4fb954..43e6921257 100644
--- a/server-plugin/server-plugin-buildspec-node/pom.xml
+++ b/server-plugin/server-plugin-buildspec-node/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.buildspec.node.NodePluginModule</moduleClass>
diff --git a/server-plugin/server-plugin-executor-docker/pom.xml b/server-plugin/server-plugin-executor-docker/pom.xml
index 131cdc320c..3e9c721529 100644
--- a/server-plugin/server-plugin-executor-docker/pom.xml
+++ b/server-plugin/server-plugin-executor-docker/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.docker.DockerModule</moduleClass>
diff --git a/server-plugin/server-plugin-executor-kubernetes/pom.xml b/server-plugin/server-plugin-executor-kubernetes/pom.xml
index 1ad33b7b4a..de0de3d470 100644
--- a/server-plugin/server-plugin-executor-kubernetes/pom.xml
+++ b/server-plugin/server-plugin-executor-kubernetes/pom.xml
@@ -6,7 +6,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.executor.kubernetes.KubernetesModule</moduleClass>
diff --git a/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java b/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
index c1271a2024..840c4460a7 100644
--- a/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
+++ b/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
@@ -25,6 +25,7 @@
 
 import org.apache.commons.lang.SerializationUtils;
 
+import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 
 import io.onedev.commons.utils.TarUtils;
@@ -73,20 +74,19 @@ public byte[] getJobContext() {
 	@Consumes(MediaType.APPLICATION_OCTET_STREAM)
 	@Produces(MediaType.APPLICATION_OCTET_STREAM)
     @POST
-    public byte[] allocateJobCaches(byte[] cacheAllocationRequestBytes) {
-		CacheAllocationRequest allocationRequest = (CacheAllocationRequest) SerializationUtils
-				.deserialize(cacheAllocationRequestBytes);
+    public byte[] allocateJobCaches(String cacheAllocationRequestString) {
+		CacheAllocationRequest cacheAllocationRequest = CacheAllocationRequest.fromString(cacheAllocationRequestString);
 		return SerializationUtils.serialize((Serializable) jobManager.allocateJobCaches(
-				getJobToken(), allocationRequest.getCurrentTime(), allocationRequest.getInstances()));
+				getJobToken(), cacheAllocationRequest.getCurrentTime(), cacheAllocationRequest.getInstances()));
     }
 	
 	@Path(""/report-job-caches"")
 	@Consumes(MediaType.APPLICATION_OCTET_STREAM)
 	@POST
-	public void reportJobCaches(byte[] cacheInstanceBytes) {
-		@SuppressWarnings(""unchecked"")
-		Collection<CacheInstance> cacheInstances = (Collection<CacheInstance>) SerializationUtils
-				.deserialize(cacheInstanceBytes);
+	public void reportJobCaches(String cacheInstancesString) {
+		Collection<CacheInstance> cacheInstances = new ArrayList<>();
+		for (String field: Splitter.on(';').omitEmptyStrings().split(cacheInstancesString))
+			cacheInstances.add(CacheInstance.fromString(field));
 		jobManager.reportJobCaches(getJobToken(), cacheInstances);
 	}
 	
diff --git a/server-plugin/server-plugin-report-html/pom.xml b/server-plugin/server-plugin-report-html/pom.xml
index 29d04e02c0..c8744f45b9 100644
--- a/server-plugin/server-plugin-report-html/pom.xml
+++ b/server-plugin/server-plugin-report-html/pom.xml
@@ -6,7 +6,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.report.html.HtmlReportModule</moduleClass>
diff --git a/server-plugin/server-plugin-report-markdown/pom.xml b/server-plugin/server-plugin-report-markdown/pom.xml
index 786a4e675c..8021bed869 100644
--- a/server-plugin/server-plugin-report-markdown/pom.xml
+++ b/server-plugin/server-plugin-report-markdown/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<properties>
 		<moduleClass>io.onedev.server.plugin.report.markdown.MarkdownReportModule</moduleClass>
diff --git a/server-plugin/server-plugin-sso-openid/pom.xml b/server-plugin/server-plugin-sso-openid/pom.xml
index 50e567a80f..90a99cacc3 100644
--- a/server-plugin/server-plugin-sso-openid/pom.xml
+++ b/server-plugin/server-plugin-sso-openid/pom.xml
@@ -6,7 +6,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server-plugin</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<dependencies>
 		<dependency>
diff --git a/server-product/pom.xml b/server-product/pom.xml
index 88aa453714..f9df4216fa 100644
--- a/server-product/pom.xml
+++ b/server-product/pom.xml
@@ -7,7 +7,7 @@
 	<parent>
 		<groupId>io.onedev</groupId>
 		<artifactId>server</artifactId>
-		<version>4.0.0</version>
+		<version>4.0.1</version>
 	</parent>
 	<dependencies>
 		<dependency>"
GHSA-p566-wpxx-574m,"From 4638cf0e56caf839eadfdf0fab545abd2a9ac65e Mon Sep 17 00:00:00 2001
From: Carroll Chiou <cchiou@cloudbees.com>
Date: Mon, 9 May 2022 10:31:55 +0100
Subject: [PATCH] [SECURITY-2604]

---
 README.adoc                                   |  12 +-
 docs/troubleshooting.adoc                     |  30 ----
 pom.xml                                       |   8 +-
 .../ManagedWindowsServiceLauncher.java        |  37 -----
 .../os/windows/WindowsRemoteFileSystem.java   |  65 --------
 .../os/windows/WindowsRemoteLauncher.java     | 140 ------------------
 6 files changed, 6 insertions(+), 286 deletions(-)
 delete mode 100644 src/main/java/hudson/os/windows/WindowsRemoteFileSystem.java
 delete mode 100644 src/main/java/hudson/os/windows/WindowsRemoteLauncher.java

diff --git a/README.adoc b/README.adoc
index f97437e..f347b27 100644
--- a/README.adoc
+++ b/README.adoc
@@ -18,7 +18,10 @@ image:docs/images/configuration.png[]
 
 This section goes into the details of how the managed Windows agent launcher actually works.
 
-This launcher uses several protocols that has been around for a quite some time.
+Jenkins uses multiple protocols to install the actual agent as a Windows service and then start it. These protocols have been around for a quite some time.
+
+IMPORTANT: The installation process assumes that the JRE is installed and accessible on the agent. Please see link:docs/troubleshooting.adoc[Troubleshooting WMI Windows Agents] if you need further help.
+
 
 * It first uses http://en.wikipedia.org/wiki/Server_Message_Block[CIFS] (also known as ""Windows file share protocol"") to push files into the
 agent. 
@@ -29,13 +32,6 @@ http://en.wikipedia.org/wiki/Distributed_Component_Object_Model[DCOM] to
 talk to
 http://en.wikipedia.org/wiki/Windows_Management_Instrumentation[WMI] to
 install and start a service remotely.
-* Jenkins uses two services, one is called
-https://github.com/jenkinsci/lib-windows-remote-command[Remote Communication Service] and this provides a general-purpose remote command execution capability. 
-Jenkins uses this to check if Java is available and if not install it. 
-A failure to do this is not fatal problem, as Jenkins will proceed by assuming that Java is available in a reasonable place.
-This service is destroyed after it is used so as not to cause any harm to the security. 
-The communication between Jenkins controller and this service happens over a named pipe, which itself is protected by access control.
-* Jenkins then installs the actual agent as a Windows service, by using the WMI over DCOM, then it starts this service.
 
 == Troubleshooting
 
diff --git a/docs/troubleshooting.adoc b/docs/troubleshooting.adoc
index 489c5c6..eae395e 100644
--- a/docs/troubleshooting.adoc
+++ b/docs/troubleshooting.adoc
@@ -169,36 +169,6 @@ NAT is not security damn it!
 
 == Windows registry related issues
 
-=== Remote Communication Service
-
-The Remote Communication Service ""RemComSvc"" must be running in order to launch commands remotely. 
-If not started, Jenkins will try to (remotely) start this service, assuming it is well configured. 
-If not, you may get an error like :
-
-```
-....
-Checking if Java exists
-ERROR: Failed to prepare Java
-java.lang.reflect.UndeclaredThrowableException
-....
-```
-
-In some cases (especially Windows 2008 R2) this can be caused by the lack of the Visual C++ runtime libraries needed by the service. 
-If this is the case you will see an error in the windows event log similar to:
-
-```
-....
-Activation context generation failed for ""C:\Windows\RemComSvc.exe"".
-Dependent Assembly Microsoft.VC90.CRT,processorArchitecture=""x86"",publicKeyToken=""1fc8b3b9a1e18e3b"",type=""win32"",version=""9.0.21022.8"" could not be found.
-Please use sxstrace.exe for detailed diagnosis.
-....
-```
-
-To solve this issue install the http://www.microsoft.com/download/en/details.aspx?id=5582[Visual C++ 2008 x86] libraries.
-
-The Remote Communication Service source code is a
-https://github.com/jenkinsci/lib-windows-remote-command[part of Jenkins].
-
 === Remote Registry Service
 
 The Remote Registry service must be running in order to install the Jenkins service, but it may be stopped on your computer.  
diff --git a/pom.xml b/pom.xml
index 76e8bda..76fc2a3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -60,8 +60,8 @@
     <dependencies>
         <dependency>
             <groupId>org.jenkins-ci</groupId>
-            <artifactId>windows-remote-command</artifactId>
-            <version>1.4</version>
+            <artifactId>jinterop-wmi</artifactId>
+            <version>1.1</version>
             <exclusions>
                 <exclusion>
                     <groupId>org.jvnet</groupId>
@@ -69,10 +69,6 @@
                 </exclusion>
             </exclusions>
         </dependency>
-        <dependency>
-            <groupId>org.jenkins-ci.plugins</groupId>
-            <artifactId>jdk-tool</artifactId>
-        </dependency>
         <dependency>
             <groupId>io.jenkins</groupId>
             <artifactId>configuration-as-code</artifactId>
diff --git a/src/main/java/hudson/os/windows/ManagedWindowsServiceLauncher.java b/src/main/java/hudson/os/windows/ManagedWindowsServiceLauncher.java
index 5881f5e..6b27c2a 100644
--- a/src/main/java/hudson/os/windows/ManagedWindowsServiceLauncher.java
+++ b/src/main/java/hudson/os/windows/ManagedWindowsServiceLauncher.java
@@ -37,9 +37,6 @@
 import hudson.remoting.Channel.Listener;
 import hudson.remoting.SocketChannelStream;
 import hudson.slaves.*;
-import hudson.tools.JDKInstaller;
-import hudson.tools.JDKInstaller.CPU;
-import hudson.tools.JDKInstaller.Platform;
 import hudson.util.DescribableList;
 import hudson.util.Secret;
 import hudson.util.jna.DotNet;
@@ -48,7 +45,6 @@
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Socket;
-import java.net.URL;
 import java.net.UnknownHostException;
 import java.util.Date;
 import java.util.logging.Level;
@@ -67,7 +63,6 @@
 import org.jinterop.dcom.common.JIDefaultAuthInfoImpl;
 import org.jinterop.dcom.common.JIException;
 import org.jinterop.dcom.core.JISession;
-import org.jvnet.hudson.remcom.WindowsRemoteProcessLauncher;
 import org.jvnet.hudson.wmi.SWbemServices;
 import org.jvnet.hudson.wmi.WMI;
 import org.jvnet.hudson.wmi.Win32Service;
@@ -221,38 +216,6 @@ public void launch(final SlaveComputer computer, final TaskListener listener) th
 
             String java = resolveJava(computer);
 
-            try {// does Java exist?
-                logger.println(""Checking if Java exists"");
-                WindowsRemoteProcessLauncher wrpl = new WindowsRemoteProcessLauncher(name, auth);
-                Process proc = wrpl.launch(""\"""" + java + ""\"" -version"", ""c:\\"");
-                proc.getOutputStream().close();
-                StringWriter console = new StringWriter();
-                IOUtils.copy(proc.getInputStream(), console);
-                proc.getInputStream().close();
-                int exitCode = proc.waitFor();
-                if (exitCode == 1) {// we'll get this error code if Java is not found
-                    logger.println(""No Java found. Downloading JDK"");
-                    JDKInstaller jdki = new JDKInstaller(""jdk-6u16-oth-JPR@CDS-CDS_Developer"", true);
-                    URL jdk = jdki.locate(listener, Platform.WINDOWS, CPU.i386);
-
-                    listener.getLogger().println(""Installing JDK"");
-                    copyStreamAndClose(jdk.openStream(), new SmbFile(remoteRoot, ""jdk.exe"").getOutputStream());
-
-                    String javaDir = path + ""\\jdk""; // this is where we install Java to
-
-                    WindowsRemoteFileSystem fs = new WindowsRemoteFileSystem(name, createSmbAuth());
-                    fs.mkdirs(javaDir);
-
-                    jdki.install(new WindowsRemoteLauncher(listener, wrpl), Platform.WINDOWS,
-                            fs, listener, javaDir, path + ""\\jdk.exe"");
-                } else {
-                    checkJavaVersion(logger, java, new BufferedReader(new StringReader(console.toString())));
-                }
-            } catch (Exception e) {
-                e.printStackTrace(listener.error(""Failed to prepare Java""));
-                return;
-            }
-
 // this just doesn't work --- trying to obtain the type or check the existence of smb://server/C$/ results in ""access denied""
 //            {// check if the administrative share exists
 //                String fullpath = remoteRoot.getPath();
diff --git a/src/main/java/hudson/os/windows/WindowsRemoteFileSystem.java b/src/main/java/hudson/os/windows/WindowsRemoteFileSystem.java
deleted file mode 100644
index 920e225..0000000
--- a/src/main/java/hudson/os/windows/WindowsRemoteFileSystem.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package hudson.os.windows;
-
-import hudson.tools.JDKInstaller.FileSystem;
-import jcifs.smb.NtlmPasswordAuthentication;
-import jcifs.smb.SmbFile;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.MalformedURLException;
-import java.util.List;
-
-import static java.util.Arrays.asList;
-
-/**
- * {@link FileSystem} implementation for remote Windows system.
- *
- * @author Kohsuke Kawaguchi
- */
-public class WindowsRemoteFileSystem implements FileSystem {
-    private final String hostName;
-    private final NtlmPasswordAuthentication auth;
-
-    public WindowsRemoteFileSystem(String hostName, NtlmPasswordAuthentication auth) {
-        this.hostName = hostName;
-        this.auth = auth;
-    }
-
-    private SmbFile $(String path) throws MalformedURLException {
-        return new SmbFile(""smb://"" + hostName + ""/"" + path.replace('\\', '/').replace(':', '$') + ""/"", auth);
-    }
-
-    @Override
-    public void delete(String file) throws IOException, InterruptedException {
-        $(file).delete();
-    }
-
-    @Override
-    public void chmod(String file, int mode) throws IOException, InterruptedException {
-        // no-op on Windows
-    }
-
-    @Override
-    public InputStream read(String file) throws IOException {
-        return $(file).getInputStream();
-    }
-
-    @Override
-    public List<String> listSubDirectories(String dir) throws IOException, InterruptedException {
-        return asList($(dir).list());
-    }
-
-    @Override
-    public void pullUp(String from, String to) throws IOException, InterruptedException {
-        SmbFile src = $(from);
-        SmbFile dst = $(to);
-        for (SmbFile e : src.listFiles()) {
-            e.renameTo(new SmbFile(dst, e.getName()));
-        }
-        src.delete();
-    }
-
-    public void mkdirs(String path) throws IOException {
-        $(path).mkdirs();
-    }
-}
diff --git a/src/main/java/hudson/os/windows/WindowsRemoteLauncher.java b/src/main/java/hudson/os/windows/WindowsRemoteLauncher.java
deleted file mode 100644
index 9633a98..0000000
--- a/src/main/java/hudson/os/windows/WindowsRemoteLauncher.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package hudson.os.windows;
-
-import hudson.FilePath;
-import hudson.Launcher;
-import hudson.Proc;
-import hudson.Util;
-import hudson.model.Computer;
-import hudson.model.TaskListener;
-import hudson.remoting.Channel;
-import hudson.remoting.ChannelBuilder;
-import hudson.util.StreamCopyThread;
-import org.jinterop.dcom.common.JIException;
-import org.jvnet.hudson.remcom.WindowsRemoteProcessLauncher;
-
-import java.io.BufferedOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Map;
-
-import static java.util.Arrays.asList;
-
-/**
- * Pseudo-{@link Launcher} implementation that uses {@link WindowsRemoteProcessLauncher}
- *
- * @author Kohsuke Kawaguchi
- */
-public class WindowsRemoteLauncher extends Launcher {
-    private final WindowsRemoteProcessLauncher launcher;
-
-    public WindowsRemoteLauncher(TaskListener listener, WindowsRemoteProcessLauncher launcher) {
-        super(listener, null);
-        this.launcher = launcher;
-    }
-
-    private String buildCommandLine(ProcStarter ps) {
-        StringBuilder b = new StringBuilder();
-        for (String cmd : ps.cmds()) {
-            if (b.length() > 0) b.append(' ');
-            if (cmd.indexOf(' ') >= 0)
-                b.append('""').append(cmd).append('""');
-            else
-                b.append(cmd);
-        }
-        return b.toString();
-    }
-
-    @Override
-    public Proc launch(ProcStarter ps) throws IOException {
-        FilePath pwd = ps.pwd();
-        if (pwd == null) {
-            throw new IOException(""Cannot access the process location."");
-        }
-        maskedPrintCommandLine(ps.cmds(), ps.masks(), pwd);
-
-        // TODO: environment variable handling
-
-        String name = ps.cmds().toString();
-
-        final Process proc;
-        try {
-            proc = launcher.launch(buildCommandLine(ps), pwd.getRemote());
-        } catch (JIException | InterruptedException e) {
-            throw new IOException(e);
-        }
-        final Thread t1 = new StreamCopyThread(""stdout copier: "" + name, proc.getInputStream(), ps.stdout(), false);
-        t1.start();
-        final Thread t2 = new StreamCopyThread(""stdin copier: "" + name, ps.stdin(), proc.getOutputStream(), true);
-        t2.start();
-
-        return new Proc() {
-
-            @Override
-            public boolean isAlive() throws IOException, InterruptedException {
-                try {
-                    proc.exitValue();
-                    return false;
-                } catch (IllegalThreadStateException e) {
-                    return true;
-                }
-            }
-
-            @Override
-            public void kill() throws IOException, InterruptedException {
-                t1.interrupt();
-                t2.interrupt();
-                proc.destroy();
-            }
-
-            @Override
-            public int join() throws IOException, InterruptedException {
-                try {
-                    t1.join();
-                    t2.join();
-                    return proc.waitFor();
-                } finally {
-                    proc.destroy();
-                }
-            }
-
-            @Override
-            public InputStream getStdout() {
-                throw new UnsupportedOperationException();
-            }
-
-            @Override
-            public InputStream getStderr() {
-                throw new UnsupportedOperationException();
-            }
-
-            @Override
-            public OutputStream getStdin() {
-                throw new UnsupportedOperationException();
-            }
-        };
-    }
-
-    @Override
-    public Channel launchChannel(String[] cmd, OutputStream out, FilePath _workDir, Map<String, String> envVars) throws IOException, InterruptedException {
-        if (_workDir == null) {
-            throw new IOException(""Cannot access local process workdir."");
-        }
-        printCommandLine(cmd, _workDir);
-
-        try {
-            Process proc = launcher.launch(Util.join(asList(cmd), "" ""), _workDir.getRemote());
-
-            return new ChannelBuilder(""channel over named pipe to "" + launcher.getHostName(), Computer.threadPoolForRemoting)
-                    .withMode(Channel.Mode.BINARY)
-                    .build(proc.getInputStream(), new BufferedOutputStream(proc.getOutputStream()));
-        } catch (JIException e) {
-            throw new IOException(e);
-        }
-    }
-
-    @Override
-    public void kill(Map<String, String> modelEnvVars) throws IOException, InterruptedException {
-        // no way to do this
-    }
-}"
GHSA-cf2j-vf36-c6w8,"From 0de9680781ea52a26f99be0656618bc073ca8dab Mon Sep 17 00:00:00 2001
From: Andrea Bollini <andrea.bollini@4science.it>
Date: Mon, 25 Oct 2021 16:55:24 +0200
Subject: [PATCH 1/3] Add tests against permission escalation

---
 .../app/rest/GroupRestRepositoryIT.java       | 126 ++++++++++++++++++
 1 file changed, 126 insertions(+)

diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
index f0cee34e40fd..70ba83937883 100644
--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
@@ -53,6 +53,7 @@
 import org.dspace.builder.CommunityBuilder;
 import org.dspace.builder.EPersonBuilder;
 import org.dspace.builder.GroupBuilder;
+import org.dspace.builder.ResourcePolicyBuilder;
 import org.dspace.content.Collection;
 import org.dspace.content.Community;
 import org.dspace.content.factory.ContentServiceFactory;
@@ -3025,4 +3026,129 @@ public void findByMetadataPaginationTest() throws Exception {
 
     }
 
+    @Test
+    public void commAdminAndColAdminCannotExploitItemReadGroupTest() throws Exception {
+
+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();
+
+        context.turnOffAuthorisationSystem();
+
+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)
+                .withNameInMetadata(""Oliver"", ""Rossi"")
+                .withEmail(""adminChild1@example.com"")
+                .withPassword(password)
+                .build();
+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)
+                .withNameInMetadata(""James"", ""Rossi"")
+                .withEmail(""adminCol1@example.com"")
+                .withPassword(password)
+                .build();
+
+        parentCommunity = CommunityBuilder.createCommunity(context)
+                                          .withName(""Parent Community"")
+                                          .build();
+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)
+                                           .withName(""Sub Community"")
+                                           .withAdminGroup(adminChild1)
+                                           .build();
+
+        Collection col1 = CollectionBuilder.createCollection(context, child1)
+                                           .withName(""Collection 1"")
+                                           .withAdminGroup(adminCol1)
+                                           .withSubmitterGroup(eperson)
+                                           .build();
+
+        Group adminGroup = groupService.findByName(context, Group.ADMIN);
+        ResourcePolicyBuilder.createResourcePolicy(context).withAction(Constants.DEFAULT_ITEM_READ)
+                .withGroup(adminGroup).withDspaceObject(child1).build();
+        ResourcePolicyBuilder.createResourcePolicy(context).withAction(Constants.DEFAULT_ITEM_READ)
+                .withGroup(adminGroup).withDspaceObject(col1).build();
+        context.restoreAuthSystemState();
+
+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);
+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);
+
+        assertFalse(groupService.isMember(context, adminChild1, adminGroup));
+        assertFalse(groupService.isMember(context, adminCol1, adminGroup));
+
+        getClient(tokenAdminCol)
+                .perform(post(""/api/eperson/groups/"" + adminGroup.getID() + ""/epersons"")
+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))
+                        .content(REST_SERVER_URL + ""eperson/groups/"" + adminCol1.getID()))
+                .andExpect(status().isForbidden());
+
+        assertFalse(groupService.isMember(context, adminCol1, adminGroup));
+
+        getClient(tokenAdminComm)
+                .perform(post(""/api/eperson/groups/"" + adminGroup.getID() + ""/epersons"")
+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))
+                        .content(REST_SERVER_URL + ""eperson/groups/"" + adminChild1.getID()))
+                .andExpect(status().isForbidden());
+
+        assertFalse(groupService.isMember(context, adminChild1, adminGroup));
+
+    }
+
+    @Test
+    public void commAdminAndColAdminCannotExpoloitBitstreamReadGroupTest() throws Exception {
+
+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();
+
+        context.turnOffAuthorisationSystem();
+
+        EPerson adminChild1 = EPersonBuilder.createEPerson(context)
+                .withNameInMetadata(""Oliver"", ""Rossi"")
+                .withEmail(""adminChild1@example.com"")
+                .withPassword(password)
+                .build();
+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)
+                .withNameInMetadata(""James"", ""Rossi"")
+                .withEmail(""adminCol1@example.com"")
+                .withPassword(password)
+                .build();
+
+        parentCommunity = CommunityBuilder.createCommunity(context)
+                                          .withName(""Parent Community"")
+                                          .build();
+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)
+                                           .withName(""Sub Community"")
+                                           .withAdminGroup(adminChild1)
+                                           .build();
+
+        Collection col1 = CollectionBuilder.createCollection(context, child1)
+                                           .withName(""Collection 1"")
+                                           .withAdminGroup(adminCol1)
+                                           .withSubmitterGroup(eperson)
+                                           .build();
+
+        Group adminGroup = groupService.findByName(context, Group.ADMIN);
+        ResourcePolicyBuilder.createResourcePolicy(context).withAction(Constants.DEFAULT_BITSTREAM_READ)
+                .withGroup(adminGroup).withDspaceObject(child1).build();
+        ResourcePolicyBuilder.createResourcePolicy(context).withAction(Constants.DEFAULT_BITSTREAM_READ)
+                .withGroup(adminGroup).withDspaceObject(col1).build();
+        context.restoreAuthSystemState();
+
+        String tokenAdminComm = getAuthToken(adminChild1.getEmail(), password);
+        String tokenAdminCol = getAuthToken(adminChild1.getEmail(), password);
+
+        assertFalse(groupService.isMember(context, adminChild1, adminGroup));
+        assertFalse(groupService.isMember(context, adminCol1, adminGroup));
+
+        getClient(tokenAdminCol)
+                .perform(post(""/api/eperson/groups/"" + adminGroup.getID() + ""/epersons"")
+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))
+                        .content(REST_SERVER_URL + ""eperson/groups/"" + adminCol1.getID()))
+                .andExpect(status().isForbidden());
+
+        assertFalse(groupService.isMember(context, adminCol1, adminGroup));
+
+        getClient(tokenAdminComm)
+                .perform(post(""/api/eperson/groups/"" + adminGroup.getID() + ""/epersons"")
+                        .contentType(parseMediaType(TEXT_URI_LIST_VALUE))
+                        .content(REST_SERVER_URL + ""eperson/groups/"" + adminChild1.getID()))
+                .andExpect(status().isForbidden());
+
+        assertFalse(groupService.isMember(context, adminChild1, adminGroup));
+    }
+
 }

From 277b499a5cd3a4f5eb2370513a1b7e4ec2a6e041 Mon Sep 17 00:00:00 2001
From: Andrea Bollini <andrea.bollini@4science.it>
Date: Mon, 25 Oct 2021 19:01:36 +0200
Subject: [PATCH 2/3] Fix for GHSA-cf2j-vf36-c6w8

---
 .../dspace/content/CollectionServiceImpl.java |  9 +++++++--
 .../content/service/CollectionService.java    | 10 ++++++++++
 .../org/dspace/eperson/GroupServiceImpl.java  | 20 +++++++++++++++----
 3 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java b/dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java
index 58085ef0d830..de29b8026a22 100644
--- a/dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java
+++ b/dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java
@@ -920,8 +920,7 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri
                                         int defaultRead)
         throws SQLException, AuthorizeException {
         Group role = groupService.create(context);
-        groupService.setName(role, ""COLLECTION_"" + collection.getID().toString() + ""_"" + typeOfGroupString +
-            ""_DEFAULT_READ"");
+        groupService.setName(role, getDefaultReadGroupName(collection, typeOfGroupString));
 
         // Remove existing privileges from the anonymous group.
         authorizeService.removePoliciesActionFilter(context, collection, defaultRead);
@@ -932,6 +931,12 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri
         return role;
     }
 
+    @Override
+    public String getDefaultReadGroupName(Collection collection, String typeOfGroupString) {
+        return ""COLLECTION_"" + collection.getID().toString() + ""_"" + typeOfGroupString +
+            ""_DEFAULT_READ"";
+    }
+
     @Override
     public List<Collection> findCollectionsWithSubmit(String q, Context context, Community community,
         int offset, int limit) throws SQLException, SearchServiceException {
diff --git a/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java b/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
index 3a4806579595..83bf9cf57afb 100644
--- a/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
+++ b/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
@@ -360,6 +360,16 @@ public List<Collection> findAuthorized(Context context, Community community, int
     Group createDefaultReadGroup(Context context, Collection collection, String typeOfGroupString, int defaultRead)
         throws SQLException, AuthorizeException;
 
+    /**
+     * This method will return the name to give to the group created by the
+     * {@link #createDefaultReadGroup(Context, Collection, String, int)} method
+     * 
+     * @param collection        The DSpace collection to use in the name generation
+     * @param typeOfGroupString The type of group to use in the name generation
+     * @return the name to give to the group that hold default read for the collection
+     */
+    String getDefaultReadGroupName(Collection collection, String typeOfGroupString);
+
     /**
      * Returns Collections for which the current user has 'submit' privileges.
      * NOTE: for better performance, this method retrieves its results from an
diff --git a/dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java b/dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java
index 4c98ed20c8ac..be81cd9bd8a3 100644
--- a/dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java
+++ b/dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java
@@ -15,6 +15,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 
@@ -735,13 +736,24 @@ public DSpaceObject getParentObject(Context context, Group group) throws SQLExce
                             groups.add(group);
                             List<ResourcePolicy> policies = resourcePolicyService.find(context, null, groups,
                                                             Constants.DEFAULT_ITEM_READ, Constants.COLLECTION);
-                            if (policies.size() > 0) {
-                                return policies.get(0).getdSpaceObject();
+
+                            Optional<ResourcePolicy> defaultPolicy = policies.stream().filter(p -> StringUtils.equals(
+                                    collectionService.getDefaultReadGroupName((Collection) p.getdSpaceObject(), ""ITEM""),
+                                    group.getName())).findFirst();
+
+                            if (defaultPolicy.isPresent()) {
+                                return defaultPolicy.get().getdSpaceObject();
                             }
                             policies = resourcePolicyService.find(context, null, groups,
                                                              Constants.DEFAULT_BITSTREAM_READ, Constants.COLLECTION);
-                            if (policies.size() > 0) {
-                                return policies.get(0).getdSpaceObject();
+
+                            defaultPolicy = policies.stream()
+                                    .filter(p -> StringUtils.equals(collectionService.getDefaultReadGroupName(
+                                            (Collection) p.getdSpaceObject(), ""BITSTREAM""), group.getName()))
+                                    .findFirst();
+
+                            if (defaultPolicy.isPresent()) {
+                                return defaultPolicy.get().getdSpaceObject();
                             }
                         }
                     }

From 16cf19bed05617af3f92d7ed7b809f4b6196e094 Mon Sep 17 00:00:00 2001
From: Andrea Bollini <andrea.bollini@4science.it>
Date: Mon, 25 Oct 2021 19:03:57 +0200
Subject: [PATCH 3/3] IT to proof that DSpace/DSpace#7928 is solved

---
 .../content/service/CollectionService.java    |  2 +-
 .../app/rest/GroupRestRepositoryIT.java       | 35 +++++++++++++++++++
 2 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java b/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
index 83bf9cf57afb..522bdac22480 100644
--- a/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
+++ b/dspace-api/src/main/java/org/dspace/content/service/CollectionService.java
@@ -363,7 +363,7 @@ Group createDefaultReadGroup(Context context, Collection collection, String type
     /**
      * This method will return the name to give to the group created by the
      * {@link #createDefaultReadGroup(Context, Collection, String, int)} method
-     * 
+     *
      * @param collection        The DSpace collection to use in the name generation
      * @param typeOfGroupString The type of group to use in the name generation
      * @return the name to give to the group that hold default read for the collection
diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
index 70ba83937883..7121e11953a8 100644
--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java
@@ -3151,4 +3151,39 @@ public void commAdminAndColAdminCannotExpoloitBitstreamReadGroupTest() throws Ex
         assertFalse(groupService.isMember(context, adminChild1, adminGroup));
     }
 
+    @Test
+    /**
+     * Test for bug https://github.com/DSpace/DSpace/issues/7928
+     * @throws Exception
+     */
+    public void anonymousGroupParentObjectTest() throws Exception {
+
+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();
+        Group anonGroup = groupService.findByName(context, Group.ANONYMOUS);
+        context.turnOffAuthorisationSystem();
+
+        parentCommunity = CommunityBuilder.createCommunity(context)
+                                          .withName(""Parent Community"")
+                                          .build();
+
+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)
+                                           .withName(""Collection 1"")
+                                           .build();
+        context.restoreAuthSystemState();
+
+        String tokenAdmin = getAuthToken(admin.getEmail(), password);
+
+        getClient(tokenAdmin).perform(get(""/api/eperson/groups/"" + anonGroup.getID().toString())
+                .param(""projection"", ""full""))
+                   .andExpect(status().isOk())
+                   .andExpect(content().contentType(contentType))
+                   .andExpect(jsonPath(""$"", GroupMatcher.matchFullEmbeds()))
+                   .andExpect(jsonPath(""$"", GroupMatcher.matchLinks(anonGroup.getID())))
+                   .andExpect(jsonPath(""$"", Matchers.is(
+                       GroupMatcher.matchGroupEntry(anonGroup.getID(), anonGroup.getName())
+                   )))
+                   .andExpect(jsonPath(""$._embedded.object"").doesNotExist())
+        ;
+    }
+
 }"
GHSA-mh8g-hprg-8363,"From 1a7172c95af8d542a77ae5b153e4c834dd4788a6 Mon Sep 17 00:00:00 2001
From: Lars Kiesow <lkiesow@uos.de>
Date: Mon, 13 Jan 2020 20:33:34 +0100
Subject: [PATCH] Fix Remember-Me Cookie
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The security configuration in etc/security/mh_default_org.xml enables a
remember-me cookie based on a hash created from the username, password,
and an additional system key. Opencast has hard-coded this system key in
the large XML file and never mentions to change this, basically ensuring
that all systems use the same key:

    <sec:remember-me key=""opencast"" user-service-ref=""userDetailsService"" />

This means that an attacker getting access to a remember-me token for
one server can get access to all servers which allow log-in using the
same credentials without ever needing the credentials. For example, a
remember-me token obtained from develop.opencast.org can be used on
stable.opencast.org without actually knowing the log-in credentials.

Such an attack will usually not work on different installations –
assuming that safe, unique passwords are used – but it is basically
guaranteed to work to get access to all machines of one cluster if a
token from one machine is compromised.

This patch now makes Opencast automatically generate a safe key based on
unique system properties, creating a safe, zero-configuration variant of
the remember-me token.

This patch additionally switches from using MD5 for the tokens to using
SHA-512 instead to also be more resilient against brute-force attacks in
case an attacker gets access to such a token.
---
 etc/security/mh_default_org.xml               |  11 +-
 .../SystemTokenBasedRememberMeService.java    | 136 ++++++++++++++++++
 2 files changed, 146 insertions(+), 1 deletion(-)
 create mode 100644 modules/kernel/src/main/java/org/opencastproject/kernel/security/SystemTokenBasedRememberMeService.java

diff --git a/etc/security/mh_default_org.xml b/etc/security/mh_default_org.xml
index 48be9892b71..e1f03ad938f 100644
--- a/etc/security/mh_default_org.xml
+++ b/etc/security/mh_default_org.xml
@@ -326,7 +326,7 @@
     -->
 
     <!-- Enables ""remember me"" functionality -->
-    <sec:remember-me key=""opencast"" user-service-ref=""userDetailsService"" />
+    <sec:remember-me services-ref=""rememberMeServices"" />
 
     <!-- Set the request cache -->
     <sec:request-cache ref=""requestCache"" />
@@ -344,6 +344,15 @@
 
   </sec:http>
 
+  <bean id=""rememberMeServices"" class=""org.opencastproject.kernel.security.SystemTokenBasedRememberMeService"">
+    <property name=""userDetailsService"" ref=""userDetailsService""/>
+    <!-- All following settings are optional -->
+    <property name=""tokenValiditySeconds"" value=""1209600""/>
+    <property name=""cookieName"" value=""oc-remember-me""/>
+    <!-- The following key will be augmented by system properties. Thus, leaving this untouched is okay -->
+    <property name=""key"" value=""opencast""/>
+  </bean>
+
   <!-- ############################# -->
   <!-- # Authentication Filters    # -->
   <!-- ############################# -->
diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/security/SystemTokenBasedRememberMeService.java b/modules/kernel/src/main/java/org/opencastproject/kernel/security/SystemTokenBasedRememberMeService.java
new file mode 100644
index 00000000000..94654c792c8
--- /dev/null
+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/security/SystemTokenBasedRememberMeService.java
@@ -0,0 +1,136 @@
+/**
+ * Licensed to The Apereo Foundation under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ *
+ * The Apereo Foundation licenses this file to you under the Educational
+ * Community License, Version 2.0 (the ""License""); you may not use this file
+ * except in compliance with the License. You may obtain a copy of the License
+ * at:
+ *
+ *   http://opensource.org/licenses/ecl2.txt
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ *
+ */
+
+package org.opencastproject.kernel.security;
+
+import org.apache.commons.io.IOUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.crypto.codec.Hex;
+import org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
+import java.util.Objects;
+
+/**
+ * This implements a zero-configuration version Spring Security's token based remember-me service. While the key can
+ * still be augmented by configuration, it is generally generated based on seldom changing but unique system
+ * properties like hostname, IP address, file system information and Linux kernel.
+ */
+public class SystemTokenBasedRememberMeService extends TokenBasedRememberMeServices {
+  private Logger logger = LoggerFactory.getLogger(SystemTokenBasedRememberMeService.class);
+  private String key;
+
+  @Deprecated
+  public SystemTokenBasedRememberMeService() {
+    super();
+    setKey(null);
+  }
+
+  public SystemTokenBasedRememberMeService(String key, UserDetailsService userDetailsService) {
+    super(key, userDetailsService);
+    setKey(key);
+  }
+
+  /**
+   * Set a new key to be used when generating remember-me tokens.
+   *
+   * Note that the key passed to this method will be augmented by seldom changing but generally unique system
+   * properties like hostname, IP address, file system information and Linux kernel. Hence, even setting no custom
+   * key should be save.
+   */
+  @Override
+  public void setKey(String key) {
+    // Start with a user key if provided
+    StringBuilder keyBuilder = new StringBuilder(Objects.toString(key, """"));
+
+    // This will give us the hostname and IP address as something which should be unique per system.
+    // For example: lk.elan-ev.de/10.10.10.31
+    try {
+      keyBuilder.append(InetAddress.getLocalHost());
+    } catch (UnknownHostException e) {
+      // silently ignore this
+    }
+
+    // Gather additional system properties as key
+    // This requires a proc-fs which should generally be available under Linux.
+    // But even without, we have fallbacks above and below.
+    for (String procFile: Arrays.asList(""/proc/version"", ""/proc/partitions"")) {
+      try (FileInputStream fileInputStream = new FileInputStream(new File(procFile))) {
+        keyBuilder.append(IOUtils.toString(fileInputStream, StandardCharsets.UTF_8));
+      } catch (IOException e) {
+        // ignore this
+      }
+    }
+
+    // If we still have no proper key, just generate a random one.
+    // This will work just fine with the single drawback that restarting Opencast invalidates all remember-me tokens.
+    // But it should be a sufficiently good fallback.
+    key = keyBuilder.toString();
+    if (key.isEmpty()) {
+      logger.warn(""Could not generate semi-persistent remember-me key. Will generate a non-persistent random one."");
+      key = Double.toString(Math.random());
+    }
+    logger.debug(""Remember me key before hashing: {}"", key);
+
+    // Use a SHA-512 hash as key to have a more sane key.
+    try {
+      MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
+      key = new String(Hex.encode(digest.digest(key.getBytes())));
+    } catch (NoSuchAlgorithmException e) {
+      logger.warn(""No SHA-512 algorithm available!"");
+    }
+    logger.debug(""Calculated remember me key: {}"", key);
+    this.key = key;
+    super.setKey(key);
+  }
+
+  @Override
+  public String getKey() {
+    return this.key;
+  }
+
+  /**
+   * Calculates the digital signature to be put in the cookie. Default value is
+   * SHA-512 (""username:tokenExpiryTime:password:key"")
+   */
+  @Override
+  protected String makeTokenSignature(long tokenExpiryTime, String username, String password) {
+    String data = username + "":"" + tokenExpiryTime + "":"" + password + "":"" + getKey();
+    MessageDigest digest;
+    try {
+      digest = MessageDigest.getInstance(""SHA-512"");
+    } catch (NoSuchAlgorithmException e) {
+      throw new IllegalStateException(""No SHA-512 algorithm available!"");
+    }
+
+    return new String(Hex.encode(digest.digest(data.getBytes())));
+  }
+}"
GHSA-vmm6-w4cf-7f3x,"From b157e1fb3b35991ca7bf59f0730329fbe7ce82e8 Mon Sep 17 00:00:00 2001
From: Lars Kiesow <lkiesow@uos.de>
Date: Mon, 13 Jan 2020 23:55:50 +0100
Subject: [PATCH] Authentication Bypass For Endpoints With Anonymous Access

Using a remember-me cookie with an arbitrary username can cause Opencast
to assume proper authentication for that user even if the remember-me
cookie was incorrect given that the attacked endpoint also allows
anonymous access.

This way, an attacker can, for example, fake a remember-me token, assume
the identity of the global system administrator and request non-public
content from the search service without ever providing any proper
authentication.

The reason for this problem is that using a remember-me cookie will
always cause the user in the request context to be populated, even if
the cookie is invalid by now. This is usually no problem, except in
combination with anonymous access where anonymous authentication is
granted and the request may continue.

In such a case, Opencast's security service would just check that a user
existed in the request context and assume proper authentication of this
user, never checking if it's actually anonymous authentication.

This patch adds this additional check, falling back to the anonymous
user in case of anonymous authentication.
---
 .../security/SecurityServiceSpringImpl.java      | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/modules/kernel/src/main/java/org/opencastproject/kernel/security/SecurityServiceSpringImpl.java b/modules/kernel/src/main/java/org/opencastproject/kernel/security/SecurityServiceSpringImpl.java
index d6b9dbc5f31..3b643d4f5e4 100644
--- a/modules/kernel/src/main/java/org/opencastproject/kernel/security/SecurityServiceSpringImpl.java
+++ b/modules/kernel/src/main/java/org/opencastproject/kernel/security/SecurityServiceSpringImpl.java
@@ -32,6 +32,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.security.authentication.AnonymousAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.context.SecurityContextHolder;
@@ -94,15 +95,19 @@ public User getUser() throws IllegalStateException {
 
     User delegatedUser = delegatedUserHolder.get();
 
+    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+    if (auth instanceof AnonymousAuthenticationToken) {
+      return SecurityUtil.createAnonymousUser(org);
+    }
+
     if (delegatedUser != null) {
       return delegatedUser;
     }
 
-    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
     JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);
     if (auth != null) {
       Object principal = auth.getPrincipal();
-      if ((principal != null) && (principal instanceof UserDetails)) {
+      if ((principal instanceof UserDetails)) {
         UserDetails userDetails = (UserDetails) principal;
 
         User user = null;
@@ -111,16 +116,15 @@ public User getUser() throws IllegalStateException {
         if (userDirectory != null) {
           user = userDirectory.loadUser(userDetails.getUsername());
           if (user == null) {
-            logger.debug(
-                    ""Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway..."",
-                    userDetails.getUsername());
+            logger.debug(""Authenticated user '{}' could not be found in any of the current UserProviders. ""
+                + ""Continuing anyway..."", userDetails.getUsername());
           }
         } else {
           logger.debug(""No UserDirectory was found when trying to search for user '{}'"", userDetails.getUsername());
         }
 
         // Add the roles (authorities) in the security context
-        Set<JaxbRole> roles = new HashSet<JaxbRole>();
+        Set<JaxbRole> roles = new HashSet<>();
         Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
         if (authorities != null) {
           for (GrantedAuthority ga : authorities) {"
GHSA-694p-xrhg-x3wm,"From 9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1 Mon Sep 17 00:00:00 2001
From: jameskleeh <james.kleeh@gmail.com>
Date: Mon, 9 Mar 2020 14:20:28 -0400
Subject: [PATCH] Validate client headers

---
 .../src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java b/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
index 97956bef102..35d6a191d31 100644
--- a/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
+++ b/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
@@ -53,7 +53,7 @@ public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, Co
      * Default constructor.
      */
     public NettyHttpHeaders() {
-        this.nettyHeaders = new DefaultHttpHeaders(false);
+        this.nettyHeaders = new DefaultHttpHeaders();
         this.conversionService = ConversionService.SHARED;
     }"
GHSA-8gf7-w3cp-gfh3,"From 5d83f1e8482ca304db8be726cad89554c88f136a Mon Sep 17 00:00:00 2001
From: John Bauer <horatio@gmail.com>
Date: Thu, 7 Oct 2021 12:38:42 -0700
Subject: [PATCH] Attempt to prevent external document attacks by wrapping
 DocumentBuilderFactory with a bunch of attribute changes

---
 src/edu/stanford/nlp/time/XMLUtils.java |  5 ++--
 src/edu/stanford/nlp/util/XMLUtils.java | 31 +++++++++++++++++++------
 2 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/src/edu/stanford/nlp/time/XMLUtils.java b/src/edu/stanford/nlp/time/XMLUtils.java
index 2efa170671..9a52e9eb35 100644
--- a/src/edu/stanford/nlp/time/XMLUtils.java
+++ b/src/edu/stanford/nlp/time/XMLUtils.java
@@ -1,6 +1,7 @@
 package edu.stanford.nlp.time;
 
 import edu.stanford.nlp.io.StringOutputStream;
+import static edu.stanford.nlp.util.XMLUtils.safeDocumentBuilderFactory;
 import org.w3c.dom.*;
 
 import javax.xml.parsers.DocumentBuilder;
@@ -63,7 +64,7 @@ public static void printNode(OutputStream out, Node node, boolean prettyPrint, b
 
   public static Document createDocument() {
     try {
-      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbFactory = safeDocumentBuilderFactory();
       DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
       Document doc = docBuilder.newDocument();
       return doc;
@@ -82,7 +83,7 @@ public static Element createElement(String tag) {
 
   public static Element parseElement(String xml) {
     try {
-      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbFactory = safeDocumentBuilderFactory();
       DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
       Document doc = docBuilder.parse(new ByteArrayInputStream(xml.getBytes()));
       return doc.getDocumentElement();
diff --git a/src/edu/stanford/nlp/util/XMLUtils.java b/src/edu/stanford/nlp/util/XMLUtils.java
index a1556f34f5..520990477b 100644
--- a/src/edu/stanford/nlp/util/XMLUtils.java
+++ b/src/edu/stanford/nlp/util/XMLUtils.java
@@ -39,6 +39,22 @@ public class XMLUtils  {
 
   private XMLUtils() {} // only static methods
 
+  public static DocumentBuilderFactory safeDocumentBuilderFactory() {
+    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+    try {
+      dbf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
+      dbf.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
+      dbf.setFeature(""http://xml.org/sax/features/external-general-entities"", false);
+      dbf.setFeature(""http://xml.org/sax/features/external-parameter-entities"", false);
+      dbf.setFeature(""http://apache.org/xml/features/dom/create-entity-ref-nodes"", false);
+      dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+    } catch (ParserConfigurationException e) {
+      log.warn(e);
+    }
+    return dbf;
+  }
+    
+
   /**
    * Returns the text content of all nodes in the given file with the given tag.
    *
@@ -68,7 +84,7 @@ private static List<String> getTextContentFromTagsFromFileSAXException(
           File f, String tag) throws SAXException {
     List<String> sents = Generics.newArrayList();
     try {
-      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbf = safeDocumentBuilderFactory();
       DocumentBuilder db = dbf.newDocumentBuilder();
       Document doc = db.parse(f);
       doc.getDocumentElement().normalize();
@@ -129,7 +145,7 @@ private static List<Element> getTagElementsFromFileSAXException(
           File f, String tag) throws SAXException {
     List<Element> sents = Generics.newArrayList();
     try {
-      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbf = safeDocumentBuilderFactory();
       DocumentBuilder db = dbf.newDocumentBuilder();
       Document doc = db.parse(f);
       doc.getDocumentElement().normalize();
@@ -207,7 +223,7 @@ public static List<Triple<String, Element, String>> getTagElementTriplesFromFile
       File f, String tag, int numIncludedSiblings) throws SAXException {
     List<Triple<String, Element, String>> sents = Generics.newArrayList();
     try {
-      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbf = safeDocumentBuilderFactory();
       DocumentBuilder db = dbf.newDocumentBuilder();
       Document doc = db.parse(f);
       doc.getDocumentElement().normalize();
@@ -251,7 +267,7 @@ public static List<Triple<String, Element, String>> getTagElementTriplesFromFile
   public static DocumentBuilder getXmlParser() {
     DocumentBuilder db = null;
     try {
-      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbf = safeDocumentBuilderFactory();
       dbf.setValidating(false);
 
       //Disable DTD loading and validation
@@ -283,7 +299,7 @@ public static DocumentBuilder getXmlParser() {
   public static DocumentBuilder getValidatingXmlParser(File schemaFile) {
     DocumentBuilder db = null;
     try {
-      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+      DocumentBuilderFactory dbf = safeDocumentBuilderFactory();
 
       SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
       Schema schema = factory.newSchema(schemaFile);
@@ -1206,7 +1222,8 @@ public static XMLTag parseTag(String tagString) {
 
   public static Document readDocumentFromFile(String filename) throws Exception {
     InputSource in = new InputSource(new FileReader(filename));
-    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+    DocumentBuilderFactory factory = safeDocumentBuilderFactory();
+
     factory.setNamespaceAware(false);
     DocumentBuilder db = factory.newDocumentBuilder();
     db.setErrorHandler(new SAXErrorHandler());
@@ -1256,7 +1273,7 @@ public void fatalError(SAXParseException ex) throws SAXParseException {
 
   public static Document readDocumentFromString(String s) throws Exception {
     InputSource in = new InputSource(new StringReader(s));
-    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+    DocumentBuilderFactory factory = safeDocumentBuilderFactory();
     factory.setNamespaceAware(false);
     return factory.newDocumentBuilder().parse(in);
   }"
GHSA-ffgg-vphh-v273,"From 37419d5de23b7e4732c409daa637d899bd6c7052 Mon Sep 17 00:00:00 2001
From: Jesse Glick <jglick@cloudbees.com>
Date: Fri, 9 Dec 2016 10:06:35 -0500
Subject: [PATCH] [SECURITY-358] Restrict access to metadata used by
 WorkflowRun.

---
 .../jenkins/security/s2m/filepath-filter.conf |  3 +
 .../security/s2m/AdminFilePathFilterTest.java | 60 +++++++++++++++++++
 .../{ => s2m}/DefaultFilePathFilterTest.java  | 12 +---
 3 files changed, 64 insertions(+), 11 deletions(-)
 create mode 100644 test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
 rename test/src/test/java/jenkins/security/{ => s2m}/DefaultFilePathFilterTest.java (89%)

diff --git a/core/src/main/resources/jenkins/security/s2m/filepath-filter.conf b/core/src/main/resources/jenkins/security/s2m/filepath-filter.conf
index faa7cffa1623..7e4f5308c99a 100644
--- a/core/src/main/resources/jenkins/security/s2m/filepath-filter.conf
+++ b/core/src/main/resources/jenkins/security/s2m/filepath-filter.conf
@@ -23,6 +23,9 @@ allow read,stat <JENKINS_HOME>/userContent($|/.*)
 # In the next rule we grant general access under build directories, so first we protect
 # the actual build record that Jenkins core reads, which nothing should be touching.
 deny all <BUILDDIR>/build.xml
+# Similarly for Pipeline build (WorkflowRun) metadata:
+deny all <BUILDDIR>/program.dat
+deny all <BUILDDIR>/workflow($|/.*)
 
 # Various plugins read/write files under build directories, so allow them all.
 # - git 1.x writes changelog.xml from the slave (2.x writes from the master so need not be listed)
diff --git a/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java b/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
new file mode 100644
index 000000000000..4df4df76ca18
--- /dev/null
+++ b/test/src/test/java/jenkins/security/s2m/AdminFilePathFilterTest.java
@@ -0,0 +1,60 @@
+/*
+ * The MIT License
+ *
+ * Copyright 2016 CloudBees, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the ""Software""), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package jenkins.security.s2m;
+
+import java.io.File;
+import javax.inject.Inject;
+import static org.junit.Assert.*;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.jvnet.hudson.test.JenkinsRule;
+
+public class AdminFilePathFilterTest {
+
+    @Rule
+    public JenkinsRule r = new JenkinsRule();
+
+    @Inject
+    AdminWhitelistRule rule;
+
+    @Before
+    public void setUp() {
+        r.jenkins.getInjector().injectMembers(this);
+        rule.setMasterKillSwitch(false);
+    }
+
+    // TODO in master when using a version taking a String[]: @Issue({""JENKINS-27055"", ""SECURITY-358""})
+    @Test
+    public void matchBuildDir() throws Exception {
+        File buildDir = r.buildAndAssertSuccess(r.createFreeStyleProject()).getRootDir();
+        assertTrue(rule.checkFileAccess(""write"", new File(buildDir, ""whatever"")));
+        assertFalse(rule.checkFileAccess(""write"", new File(buildDir, ""build.xml"")));
+        // WorkflowRun:
+        assertFalse(rule.checkFileAccess(""write"", new File(buildDir, ""program.dat"")));
+        assertFalse(rule.checkFileAccess(""write"", new File(buildDir, ""workflow/23.xml"")));
+    }
+
+}
diff --git a/test/src/test/java/jenkins/security/DefaultFilePathFilterTest.java b/test/src/test/java/jenkins/security/s2m/DefaultFilePathFilterTest.java
similarity index 89%
rename from test/src/test/java/jenkins/security/DefaultFilePathFilterTest.java
rename to test/src/test/java/jenkins/security/s2m/DefaultFilePathFilterTest.java
index 6a91ec7db5fd..8dd83964cdeb 100644
--- a/test/src/test/java/jenkins/security/DefaultFilePathFilterTest.java
+++ b/test/src/test/java/jenkins/security/s2m/DefaultFilePathFilterTest.java
@@ -22,7 +22,7 @@
  * THE SOFTWARE.
  */
 
-package jenkins.security;
+package jenkins.security.s2m;
 
 import hudson.FilePath;
 import hudson.model.Slave;
@@ -31,8 +31,6 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
-import jenkins.security.s2m.AdminWhitelistRule;
-import jenkins.security.s2m.DefaultFilePathFilter;
 import org.jenkinsci.remoting.RoleChecker;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,7 +39,6 @@
 import org.jvnet.hudson.test.JenkinsRule;
 
 import javax.inject.Inject;
-import org.jvnet.hudson.test.Issue;
 
 public class DefaultFilePathFilterTest {
 
@@ -112,11 +109,4 @@ public void checkRoles(RoleChecker checker) throws SecurityException {
         }
     }
 
-    @Issue(""JENKINS-27055"")
-    @Test public void matchBuildDir() throws Exception {
-        File f = new File(r.buildAndAssertSuccess(r.createFreeStyleProject()).getRootDir(), ""whatever"");
-        rule.setMasterKillSwitch(false);
-        assertTrue(rule.checkFileAccess(""write"", f));
-    }
-
 }"
GHSA-fmj2-7wx8-qj4v,"From 57393912eb87b994c7fed39ddf30fb778a275183 Mon Sep 17 00:00:00 2001
From: Simon Steiner <ssteiner@apache.org>
Date: Tue, 2 Jun 2020 13:18:41 +0000
Subject: [PATCH] XGC-122: Dont load DTDs in XMP

git-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@1878394 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/xmlgraphics/xmp/XMPParser.java |  3 +++
 .../xmlgraphics/xmp/XMPParserTestCase.java    | 19 +++++++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java b/src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java
index 5e7d8b63..e907e898 100644
--- a/src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java
+++ b/src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java
@@ -21,6 +21,7 @@
 
 import java.net.URL;
 
+import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerException;
@@ -54,6 +55,8 @@ public static Metadata parseXMP(URL url) throws TransformerException {
      */
     public static Metadata parseXMP(Source src) throws TransformerException {
         TransformerFactory tFactory = TransformerFactory.newInstance();
+        tFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, """");
+        tFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, """");
         Transformer transformer = tFactory.newTransformer();
         XMPHandler handler = createXMPHandler();
         SAXResult res = new SAXResult(handler);
diff --git a/src/test/java/org/apache/xmlgraphics/xmp/XMPParserTestCase.java b/src/test/java/org/apache/xmlgraphics/xmp/XMPParserTestCase.java
index 6519de6e..3250d083 100644
--- a/src/test/java/org/apache/xmlgraphics/xmp/XMPParserTestCase.java
+++ b/src/test/java/org/apache/xmlgraphics/xmp/XMPParserTestCase.java
@@ -19,16 +19,21 @@
 
 package org.apache.xmlgraphics.xmp;
 
+import java.io.StringReader;
 import java.net.URL;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.TimeZone;
 
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.stream.StreamSource;
+
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 import org.apache.xmlgraphics.xmp.schemas.DublinCoreAdapter;
 import org.apache.xmlgraphics.xmp.schemas.DublinCoreSchema;
@@ -189,4 +194,18 @@ public void testParseEmptyValues() throws Exception {
         assertNull(title); //Empty value treated same as not existant
     }
 
+    @Test
+    public void testExternalDTD() {
+        String payload = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>""
+                + ""<!DOCTYPE root [\n<!ENTITY % remote SYSTEM \""http://127.0.0.1:9999/eval.xml\"">\n%remote;]>\n""
+                + ""<root></root>"";
+        StreamSource streamSource = new StreamSource(new StringReader(payload));
+        String msg = """";
+        try {
+            XMPParser.parseXMP(streamSource);
+        } catch (TransformerException e) {
+            msg = e.getMessage();
+        }
+        assertTrue(msg, msg.contains(""access is not allowed""));
+    }
 }"
CVE-2022-29184,"From 37d35115db2ada2190173f9413cfe1bc6c295ecb Mon Sep 17 00:00:00 2001
From: Chad Wilson <chadw@thoughtworks.com>
Date: Fri, 4 Mar 2022 18:21:03 +0800
Subject: [PATCH] Improve escaping of arguments when constructing Hg command
 calls

---
 .../materials/mercurial/HgCommandTest.java    | 64 ++++++++++++++----
 .../domain/materials/mercurial/HgCommand.java | 66 ++++++++++---------
 2 files changed, 86 insertions(+), 44 deletions(-)

diff --git a/common/src/test/java/com/thoughtworks/go/domain/materials/mercurial/HgCommandTest.java b/common/src/test/java/com/thoughtworks/go/domain/materials/mercurial/HgCommandTest.java
index be9a5d62d26..6c8ac66f998 100644
--- a/common/src/test/java/com/thoughtworks/go/domain/materials/mercurial/HgCommandTest.java
+++ b/common/src/test/java/com/thoughtworks/go/domain/materials/mercurial/HgCommandTest.java
@@ -35,10 +35,14 @@
 import static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 
 public class HgCommandTest {
+
+    private static final String REVISION_0 = ""b61d12de515d82d3a377ae3aae6e8abe516a2651"";
+    private static final String REVISION_1 = ""35ff2159f303ecf986b3650fc4299a6ffe5a14e1"";
+    private static final String REVISION_2 = ""ca3ebb67f527c0ad7ed26b789056823d8b9af23f"";
+
     private File serverRepo;
     private File clientRepo;
 
@@ -46,16 +50,13 @@ public class HgCommandTest {
 
     private InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();
     private File workingDirectory;
-    private static final String REVISION_0 = ""b61d12de515d82d3a377ae3aae6e8abe516a2651"";
-    private static final String REVISION_1 = ""35ff2159f303ecf986b3650fc4299a6ffe5a14e1"";
-    private static final String REVISION_2 = ""ca3ebb67f527c0ad7ed26b789056823d8b9af23f"";
     private File secondBranchWorkingCopy;
 
     @BeforeEach
     public void setUp(@TempDir Path tempDir) throws IOException {
         serverRepo = TempDirUtils.createTempDirectoryIn(tempDir, ""testHgServerRepo"").toFile();
-        clientRepo =  TempDirUtils.createTempDirectoryIn(tempDir, ""testHgClientRepo"").toFile();
-        secondBranchWorkingCopy =  TempDirUtils.createTempDirectoryIn(tempDir, ""second"").toFile();
+        clientRepo = TempDirUtils.createTempDirectoryIn(tempDir, ""testHgClientRepo"").toFile();
+        secondBranchWorkingCopy = TempDirUtils.createTempDirectoryIn(tempDir, ""second"").toFile();
 
         setUpServerRepoFromHgBundle(serverRepo, new File(""../common/src/test/resources/data/hgrepo.hgbundle""));
         workingDirectory = new File(clientRepo.getPath());
@@ -65,11 +66,32 @@ public void setUp(@TempDir Path tempDir) throws IOException {
 
     @Test
     public void shouldCloneFromRemoteRepo() {
-        assertThat(clientRepo.listFiles().length > 0, is(true));
+        assertThat(clientRepo.listFiles().length, is(2));
+    }
+
+    @Test
+    public void shouldCloneWithEscapedRepoUrl() {
+        hgCommand.clone(outputStreamConsumer, new UrlArgument(echoingAliasFor(""clone"")));
+        assertNoUnescapedEcho();
     }
 
     @Test
-    public void shouldGetLatestModifications() throws Exception {
+    public void shouldCloneWithEscapedBranch() {
+        hgCommand = new HgCommand(null, workingDirectory, echoingAliasFor(""clone""), serverRepo.getAbsolutePath(), null);
+        hgCommand.clone(outputStreamConsumer, new UrlArgument(serverRepo.getAbsolutePath()));
+        assertNoUnescapedEcho();
+    }
+
+    private String echoingAliasFor(String command) {
+        return String.format(""--config=alias.%s=!echo hello world"", command);
+    }
+
+    private void assertNoUnescapedEcho() {
+        assertThat(outputStreamConsumer.getAllOutput(), not(containsString(""\nhello world\n"")));
+    }
+
+    @Test
+    public void shouldGetLatestModifications() {
         List<Modification> actual = hgCommand.latestOneModificationAsModifications();
         assertThat(actual.size(), is(1));
         final Modification modification = actual.get(0);
@@ -79,7 +101,7 @@ public void shouldGetLatestModifications() throws Exception {
     }
 
     @Test
-    public void shouldNotIncludeCommitFromAnotherBranchInGetLatestModifications() throws Exception {
+    public void shouldNotIncludeCommitFromAnotherBranchInGetLatestModifications() {
         Modification lastCommit = hgCommand.latestOneModificationAsModifications().get(0);
 
         makeACommitToSecondBranch();
@@ -98,7 +120,7 @@ public void shouldGetModifications() throws Exception {
     }
 
     @Test
-    public void shouldNotGetModificationsFromOtherBranches() throws Exception {
+    public void shouldNotGetModificationsFromOtherBranches() {
         makeACommitToSecondBranch();
         hg(workingDirectory, ""pull"").runOrBomb(null);
 
@@ -131,7 +153,7 @@ public void shouldUpdateToSpecificRevisionOnGivenBranch() {
     }
 
     @Test
-    public void shouldThrowExceptionIfUpdateFails() throws Exception {
+    public void shouldThrowExceptionIfUpdateFails() {
         InMemoryStreamConsumer output =
                 ProcessOutputStreamConsumer.inMemoryConsumer();
 
@@ -140,7 +162,8 @@ public void shouldThrowExceptionIfUpdateFails() throws Exception {
 
         // now hg pull will fail and throw an exception
         assertThatThrownBy(() -> hgCommand.updateTo(new StringRevision(""tip""), output))
-                .isExactlyInstanceOf(RuntimeException.class);
+                .isExactlyInstanceOf(RuntimeException.class)
+                .hasMessageContaining(""Unable to update to revision [StringRevision[tip]]"");
     }
 
     @Test
@@ -151,7 +174,20 @@ public void shouldGetWorkingUrl() {
     }
 
     @Test
-    public void shouldThrowExceptionForBadConnection() throws Exception {
+    public void shouldCheckConnection() {
+        hgCommand.checkConnection(new UrlArgument(serverRepo.getAbsolutePath()));
+    }
+
+    @Test
+    public void shouldCheckConnectionWithEscapedRepoUrl() {
+        assertThatThrownBy(() -> hgCommand.checkConnection(new UrlArgument(echoingAliasFor(""id""))))
+                .isExactlyInstanceOf(CommandLineException.class)
+                .hasMessageContaining(""repository --config"")
+                .hasMessageContaining(""not found"");
+    }
+
+    @Test
+    public void shouldThrowExceptionForBadConnection() {
         String url = ""http://not-exists"";
         HgCommand hgCommand = new HgCommand(null, null, null, null, null);
 
diff --git a/domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgCommand.java b/domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgCommand.java
index bf92af253b1..a4e614c5e8c 100644
--- a/domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgCommand.java
+++ b/domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgCommand.java
@@ -24,8 +24,8 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
-import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -52,27 +52,31 @@ public HgCommand(String materialFingerprint, File workingDir, String branch, Str
         this.secrets = secrets != null ? secrets : new ArrayList<>();
     }
 
-
-    private boolean pull(ConsoleOutputStreamConsumer outputStreamConsumer) {
-        CommandLine hg = hg(""pull"", ""-b"", branch, ""--config"", String.format(""paths.default=%s"", url));
-        return execute(hg, outputStreamConsumer) == 0;
-    }
-
     public HgVersion version() {
-        CommandLine hg = createCommandLine(""hg"").withArgs(""version"").withEncoding(""utf-8"");
+        CommandLine hg = createCommandLine(""hg"").withArgs(""version"").withEncoding(""UTF-8"");
         String hgOut = execute(hg, new NamedProcessTag(""hg version check"")).outputAsString();
         return HgVersion.parse(hgOut);
     }
 
-
     public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, UrlArgument repositoryUrl) {
-        CommandLine hg = createCommandLine(""hg"").withArgs(""clone"").withArg(""-b"").withArg(branch).withArg(repositoryUrl)
-                .withArg(workingDir.getAbsolutePath()).withNonArgSecrets(secrets).withEncoding(""utf-8"");
+        CommandLine hg = createCommandLine(""hg"")
+                .withArgs(""clone"")
+                .withArg(branchArg())
+                .withArg(""--"")
+                .withArg(repositoryUrl)
+                .withArg(workingDir.getAbsolutePath())
+                .withNonArgSecrets(secrets)
+                .withEncoding(""UTF-8"");
         return execute(hg, outputStreamConsumer);
     }
 
     public void checkConnection(UrlArgument repositoryURL) {
-        execute(createCommandLine(""hg"").withArgs(""id"", ""--id"").withArg(repositoryURL).withNonArgSecrets(secrets).withEncoding(""utf-8""), new NamedProcessTag(repositoryURL.forDisplay()));
+        CommandLine hg = createCommandLine(""hg"")
+                .withArgs(""id"", ""--id"", ""--"")
+                .withArg(repositoryURL)
+                .withNonArgSecrets(secrets)
+                .withEncoding(""UTF-8"");
+        execute(hg, new NamedProcessTag(repositoryURL.forDisplay()));
     }
 
     public void updateTo(Revision revision, ConsoleOutputStreamConsumer outputStreamConsumer) {
@@ -81,6 +85,11 @@ public void updateTo(Revision revision, ConsoleOutputStreamConsumer outputStream
         }
     }
 
+    private boolean pull(ConsoleOutputStreamConsumer outputStreamConsumer) {
+        CommandLine hg = hg(""pull"", branchArg(), ""--config"", String.format(""paths.default=%s"", url));
+        return execute(hg, outputStreamConsumer) == 0;
+    }
+
     private boolean update(Revision revision, ConsoleOutputStreamConsumer outputStreamConsumer) {
         CommandLine hg = hg(""update"", ""--clean"", ""-r"", revision.getRevision());
         return execute(hg, outputStreamConsumer) == 0;
@@ -105,36 +114,29 @@ public List<Modification> latestOneModificationAsModifications() {
         return findRecentModifications(1);
     }
 
-    private String templatePath() {
-        if (templatePath == null) {
-            String file = HgCommand.class.getResource(""/hg.template"").getFile();
-            try {
-                templatePath = URLDecoder.decode(new File(file).getAbsolutePath(), ""UTF-8"");
-            } catch (UnsupportedEncodingException e) {
-                templatePath = URLDecoder.decode(new File(file).getAbsolutePath());
-            }
-        }
-        return templatePath;
-    }
-
-    List<Modification> findRecentModifications(int count) {
+    private List<Modification> findRecentModifications(int count) {
         // Currently impossible to check modifications on a remote repository.
         InMemoryStreamConsumer consumer = inMemoryConsumer();
         bombUnless(pull(consumer), ""Failed to run hg pull command: "" + consumer.getAllOutput());
-        CommandLine hg = hg(""log"", ""--limit"", String.valueOf(count), ""-b"", branch, ""--style"", templatePath());
+        CommandLine hg = hg(""log"", ""--limit"", String.valueOf(count), branchArg(), ""--style"", templatePath());
         return new HgModificationSplitter(execute(hg)).modifications();
     }
 
     public List<Modification> modificationsSince(Revision revision) {
         InMemoryStreamConsumer consumer = inMemoryConsumer();
         bombUnless(pull(consumer), ""Failed to run hg pull command: "" + consumer.getAllOutput());
-        CommandLine hg = hg(""log"",
-                ""-r"", ""tip:"" + revision.getRevision(),
-                ""-b"", branch,
-                ""--style"", templatePath());
+        CommandLine hg = hg(""log"", ""-r"", ""tip:"" + revision.getRevision(), branchArg(), ""--style"", templatePath());
         return new HgModificationSplitter(execute(hg)).filterOutRevision(revision);
     }
 
+    private String templatePath() {
+        if (templatePath == null) {
+            String file = HgCommand.class.getResource(""/hg.template"").getFile();
+            templatePath = URLDecoder.decode(new File(file).getAbsolutePath(), StandardCharsets.UTF_8);
+        }
+        return templatePath;
+    }
+
     public ConsoleResult workingRepositoryUrl() {
         CommandLine hg = hg(""showconfig"", ""paths.default"");
 
@@ -144,6 +146,10 @@ public ConsoleResult workingRepositoryUrl() {
         return result;
     }
 
+    private String branchArg() {
+        return ""--branch="" + branch;
+    }
+
     private CommandLine hg(String... arguments) {
         return createCommandLine(""hg"").withArgs(arguments).withNonArgSecrets(secrets).withWorkingDir(workingDir).withEncoding(""UTF-8"");
     }"
CVE-2013-0158,"From c3d8e05a1b3d58b6c4dcff97394cb3a79608b4b2 Mon Sep 17 00:00:00 2001
From: Kohsuke Kawaguchi <kk@kohsuke.org>
Date: Sat, 5 Jan 2013 14:28:57 -0800
Subject: [PATCH] [SECURITY-49] Backing off from @Extension-based discovery.

This is because we discovered some plugins that use Secret early on in
the initialization.
---
 .../jenkins/security/ConfidentialStore.java   | 42 +++++++++++++++++--
 .../security/DefaultConfidentialStore.java    |  3 +-
 2 files changed, 40 insertions(+), 5 deletions(-)

diff --git a/core/src/main/java/jenkins/security/ConfidentialStore.java b/core/src/main/java/jenkins/security/ConfidentialStore.java
index 0c768f0af79c..de82437653ae 100644
--- a/core/src/main/java/jenkins/security/ConfidentialStore.java
+++ b/core/src/main/java/jenkins/security/ConfidentialStore.java
@@ -1,12 +1,20 @@
 package jenkins.security;
 
 import hudson.Extension;
+import hudson.Lookup;
+import hudson.init.InitMilestone;
+import hudson.util.Secret;
+import hudson.util.Service;
 import jenkins.model.Jenkins;
+import org.kohsuke.MetaInfServices;
 
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 import java.io.IOException;
 import java.security.SecureRandom;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * The actual storage for the data held by {@link ConfidentialKey}s, and the holder
@@ -18,8 +26,11 @@
  *
  * <p>
  * OEM distributions of Jenkins can provide a custom {@link ConfidentialStore} implementation
- * by writing a subclass, mark it with {@link Extension} annotation, package it as a Jenkins module,
- * and bundling it with the war file.
+ * by writing a subclass, mark it with {@link MetaInfServices} annotation, package it as a Jenkins module,
+ * and bundling it with the war file. This doesn't use {@link Extension} because some plugins
+ * have been found to use {@link Secret} before we get to {@link InitMilestone#PLUGINS_PREPARED}, and
+ * therefore {@link Extension}s aren't loaded yet. (Similarly, it's conceivable that some future
+ * core code might need this early on during the boot sequence.)
  *
  * @author Kohsuke Kawaguchi
  * @since 1.498
@@ -51,11 +62,36 @@ public abstract class ConfidentialStore {
      */
     public static @Nonnull ConfidentialStore get() {
         if (TEST!=null) return TEST.get();
-        return Jenkins.getInstance().getExtensionList(ConfidentialStore.class).get(0);
+
+        Lookup lookup = Jenkins.getInstance().lookup;
+        ConfidentialStore cs = lookup.get(ConfidentialStore.class);
+        if (cs==null) {
+            try {
+                List<ConfidentialStore> r = (List) Service.loadInstances(ConfidentialStore.class.getClassLoader(), ConfidentialStore.class);
+                if (!r.isEmpty())
+                    cs = r.get(0);
+            } catch (IOException e) {
+                LOGGER.log(Level.WARNING, ""Failed to list up ConfidentialStore implementations"",e);
+                // fall through
+            }
+
+            if (cs==null)
+                try {
+                    cs = new DefaultConfidentialStore();
+                } catch (Exception e) {
+                    // if it's still null, bail out
+                    throw new Error(e);
+                }
+
+            cs = lookup.setIfNull(ConfidentialStore.class,cs);
+        }
+        return cs;
     }
 
     /**
      * Testing only. Used for testing {@link ConfidentialKey} without {@link Jenkins}
      */
     /*package*/ static ThreadLocal<ConfidentialStore> TEST = null;
+
+    private static final Logger LOGGER = Logger.getLogger(ConfidentialStore.class.getName());
 }
diff --git a/core/src/main/java/jenkins/security/DefaultConfidentialStore.java b/core/src/main/java/jenkins/security/DefaultConfidentialStore.java
index 23e42c4d5c66..476f437f9f0d 100644
--- a/core/src/main/java/jenkins/security/DefaultConfidentialStore.java
+++ b/core/src/main/java/jenkins/security/DefaultConfidentialStore.java
@@ -1,6 +1,5 @@
 package jenkins.security;
 
-import hudson.Extension;
 import hudson.FilePath;
 import hudson.Util;
 import hudson.util.IOException2;
@@ -28,7 +27,7 @@
  *
  * @author Kohsuke Kawaguchi
  */
-@Extension(ordinal=-99999) // small ordinal value to allow other higher ones to take over
+// @MetaInfServices --- not annotated because this is the fallback implementation
 public class DefaultConfidentialStore extends ConfidentialStore {
     private final SecureRandom sr = new SecureRandom();"
GHSA-8rmh-55h4-93h5,"From 56e76049185bbd87c994128a9d77735ad7af0199 Mon Sep 17 00:00:00 2001
From: Kim Shepherd <kim@shepherd.nz>
Date: Fri, 14 Jan 2022 13:37:25 +1300
Subject: [PATCH] [DS-4131] Better path handling in ItemImport zips

---
 .../org/dspace/app/itemimport/ItemImport.java | 36 +++++++++++++++----
 1 file changed, 30 insertions(+), 6 deletions(-)

diff --git a/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImport.java b/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImport.java
index 6ddc994a65e5..24ec2af16ba0 100644
--- a/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImport.java
+++ b/dspace-api/src/main/java/org/dspace/app/itemimport/ItemImport.java
@@ -2003,12 +2003,14 @@ public static String unzip(File zipfile, String destDir) throws IOException {
         if (destinationDir == null){
         	destinationDir = tempWorkDir;
         }
+        log.debug(""Using directory "" + destinationDir + "" for zip extraction. (destDir arg is "" + destDir +
+                "", tempWorkDir is "" + tempWorkDir + "")"");
 
         File tempdir = new File(destinationDir);
         if (!tempdir.isDirectory())
         {
-            log.error(""'"" + ConfigurationManager.getProperty(""org.dspace.app.itemexport.work.dir"") +
-                    ""' as defined by the key 'org.dspace.app.itemexport.work.dir' in dspace.cfg "" +
+            log.error(""'"" + ConfigurationManager.getProperty(""org.dspace.app.batchitemimport.work.dir"") +
+                    ""' as defined by the key 'org.dspace.app.batchitemimport.work.dir' in dspace.cfg "" +
                     ""is not a valid directory"");
         }
 
@@ -2016,9 +2018,15 @@ public static String unzip(File zipfile, String destDir) throws IOException {
         {
             log.error(""Unable to create temporary directory: "" + tempdir.getAbsolutePath());
         }
-        String sourcedir = destinationDir + System.getProperty(""file.separator"") + zipfile.getName();
-        String zipDir = destinationDir + System.getProperty(""file.separator"") + zipfile.getName() + System.getProperty(""file.separator"");
 
+        if(!destinationDir.endsWith(System.getProperty(""file.separator""))) {
+            destinationDir += System.getProperty(""file.separator"");
+        }
+
+        String sourcedir = destinationDir + zipfile.getName();
+        String zipDir = destinationDir + zipfile.getName() + System.getProperty(""file.separator"");
+
+        log.debug(""zip directory to use is "" + zipDir);
 
         // 3
         String sourceDirForZip = sourcedir;
@@ -2028,11 +2036,26 @@ public static String unzip(File zipfile, String destDir) throws IOException {
         while (entries.hasMoreElements())
         {
             entry = entries.nextElement();
+            // Check that the true path to extract files is never outside allowed temp directories
+            // without creating any actual files on disk
+            log.debug(""Inspecting entry name: "" + entry.getName() + "" for path traversal security"");
+            File potentialExtract = new File(zipDir + entry.getName());
+            String canonicalPath = potentialExtract.getCanonicalPath();
+            log.debug(""Canonical path to potential File is "" + canonicalPath);
+            if(!canonicalPath.startsWith(zipDir)) {
+                log.error(""Rejecting zip file: "" + zipfile.getName() + "" as it contains an entry that would be extracted "" +
+                        ""outside the temporary unzip directory: "" + canonicalPath);
+                throw new IOException(""Error extracting "" + zipfile + "": Canonical path of zip entry: "" +
+                        entry.getName() + "" ("" + canonicalPath + "") does not start with permissible temp "" +
+                        ""unzip directory ("" + destinationDir + "")"");
+            }
             if (entry.isDirectory())
             {
-                if (!new File(zipDir + entry.getName()).mkdir())
-                {
+                // Log error and throw IOException if a directory entry could not be created
+                File newDir = new File(zipDir + entry.getName());
+                if (!newDir.mkdirs()) {
                     log.error(""Unable to create contents directory: "" + zipDir + entry.getName());
+                    throw new IOException(""Unable to create contents directory: "" + zipDir + entry.getName());
                 }
             }
             else
@@ -2074,6 +2097,7 @@ public static String unzip(File zipfile, String destDir) throws IOException {
                 byte[] buffer = new byte[1024];
                 int len;
                 InputStream in = zf.getInputStream(entry);
+                log.debug(""Reading "" + zipDir + entry.getName() + "" into InputStream"");
                 BufferedOutputStream out = new BufferedOutputStream(
                         new FileOutputStream(zipDir + entry.getName()));
                 while((len = in.read(buffer)) >= 0)"
OSV-2021-1338,"From cc2363e4501e086b6ba628ececb7716cfad87796 Mon Sep 17 00:00:00 2001
From: Jonathan Hedley <jonathan@hedley.net>
Date: Tue, 21 Sep 2021 14:26:54 +1000
Subject: [PATCH] Scan ancestor chain with less GC

---
 src/main/java/org/jsoup/nodes/Element.java          |  2 +-
 src/main/java/org/jsoup/parser/HtmlTreeBuilder.java | 10 +++++-----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index 230790d4ea..fb295208ef 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -258,7 +258,7 @@ public Map<String, String> dataset() {
         return attributes().dataset();
     }
 
-    @Override
+    @Override @Nullable
     public final Element parent() {
         return (Element) parentNode;
     }
diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
index 1b382bb654..2748e3c4a6 100644
--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
@@ -138,13 +138,13 @@ List<Node> parseFragment(String inputFragment, @Nullable Element context, String
 
             // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated
             // with form correctly
-            Elements contextChain = context.parents();
-            contextChain.add(0, context);
-            for (Element parent: contextChain) {
-                if (parent instanceof FormElement) {
-                    formElement = (FormElement) parent;
+            Element formSearch = context;
+            while (formSearch != null) {
+                if (formSearch instanceof FormElement) {
+                    formElement = (FormElement) formSearch;
                     break;
                 }
+                formSearch = formSearch.parent();
             }
         }"
