vuln_id,code_diff
CVE-2010-5332,"From 0926f91083f34d047abc74f1ca4fa6a9c161f7db Mon Sep 17 00:00:00 2001
From: Eli Cohen <eli@dev.mellanox.co.il>
Date: Mon, 25 Oct 2010 02:56:47 +0000
Subject: [PATCH] mlx4_en: Fix out of bounds array access

When searching for a free entry in either mlx4_register_vlan() or
mlx4_register_mac(), and there is no free entry, the loop terminates without
updating the local variable free thus causing out of array bounds access. Fix
this by adding a proper check outside the loop.

Signed-off-by: Eli Cohen <eli@mellanox.co.il>
Signed-off-by: David S. Miller <davem@davemloft.net>
---
 drivers/net/mlx4/port.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/drivers/net/mlx4/port.c b/drivers/net/mlx4/port.c
index 606aa58afdead9..8674ad5764c4a7 100644
--- a/drivers/net/mlx4/port.c
+++ b/drivers/net/mlx4/port.c
@@ -111,6 +111,12 @@ int mlx4_register_mac(struct mlx4_dev *dev, u8 port, u64 mac, int *index)
 			goto out;
 		}
 	}
+
+	if (free < 0) {
+		err = -ENOMEM;
+		goto out;
+	}
+
 	mlx4_dbg(dev, ""Free MAC index is %d\n"", free);
 
 	if (table->total == table->max) {
@@ -205,6 +211,11 @@ int mlx4_register_vlan(struct mlx4_dev *dev, u8 port, u16 vlan, int *index)
 		}
 	}
 
+	if (free < 0) {
+		err = -ENOMEM;
+		goto out;
+	}
+
 	if (table->total == table->max) {
 		/* No free vlan entries */
 		err = -ENOSPC;"
CVE-2010-4250,"From a2ae4cc9a16e211c8a128ba10d22a85431f093ab Mon Sep 17 00:00:00 2001
From: Eric Paris <eparis@redhat.com>
Date: Tue, 23 Nov 2010 18:18:37 -0500
Subject: [PATCH] inotify: stop kernel memory leak on file creation failure

If inotify_init is unable to allocate a new file for the new inotify
group we leak the new group.  This patch drops the reference on the
group on file allocation failure.

Reported-by: Vegard Nossum <vegard.nossum@gmail.com>
cc: stable@kernel.org
Signed-off-by: Eric Paris <eparis@redhat.com>
---
 fs/notify/inotify/inotify_user.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/fs/notify/inotify/inotify_user.c b/fs/notify/inotify/inotify_user.c
index 444c305a468c53..4cd5d5d78f9fa2 100644
--- a/fs/notify/inotify/inotify_user.c
+++ b/fs/notify/inotify/inotify_user.c
@@ -752,6 +752,7 @@ SYSCALL_DEFINE1(inotify_init1, int, flags)
 	if (ret >= 0)
 		return ret;
 
+	fsnotify_put_group(group);
 	atomic_dec(&user->inotify_devs);
 out_free_uid:
 	free_uid(user);"
CVE-2010-5313,"From fc3a9157d3148ab91039c75423da8ef97be3e105 Mon Sep 17 00:00:00 2001
From: Joerg Roedel <joerg.roedel@amd.com>
Date: Mon, 29 Nov 2010 17:51:49 +0100
Subject: [PATCH] KVM: X86: Don't report L2 emulation failures to user-space

This patch prevents that emulation failures which result
from emulating an instruction for an L2-Guest results in
being reported to userspace.
Without this patch a malicious L2-Guest would be able to
kill the L1 by triggering a race-condition between an vmexit
and the instruction emulator.
With this patch the L2 will most likely only kill itself in
this situation.

Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>
Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
---
 arch/x86/kvm/x86.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 47e5a41cc40e5f..8b4d5fc0801250 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -4314,13 +4314,19 @@ EXPORT_SYMBOL_GPL(kvm_inject_realmode_interrupt);
 
 static int handle_emulation_failure(struct kvm_vcpu *vcpu)
 {
+	int r = EMULATE_DONE;
+
 	++vcpu->stat.insn_emulation_fail;
 	trace_kvm_emulate_insn_failed(vcpu);
-	vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
-	vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
-	vcpu->run->internal.ndata = 0;
+	if (!is_guest_mode(vcpu)) {
+		vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
+		vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
+		vcpu->run->internal.ndata = 0;
+		r = EMULATE_FAIL;
+	}
 	kvm_queue_exception(vcpu, UD_VECTOR);
-	return EMULATE_FAIL;
+
+	return r;
 }
 
 static bool reexecute_instruction(struct kvm_vcpu *vcpu, gva_t gva)"
CVE-2010-3696,"From 4dc7800b866f889a1247685bbaa6dd4238a56279 Mon Sep 17 00:00:00 2001
From: ""Alan T. DeKok"" <aland@freeradius.org>
Date: Sat, 29 May 2010 11:26:56 +0200
Subject: [PATCH] Fix endless loop when there are multiple DHCP options

---
 src/lib/dhcp.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/lib/dhcp.c b/src/lib/dhcp.c
index d90ae2c728ee3..2a8859453e19f 100644
--- a/src/lib/dhcp.c
+++ b/src/lib/dhcp.c
@@ -714,7 +714,7 @@ int fr_dhcp_decode(RADIUS_PACKET *packet)
 			}
 
 			*tail = vp;
-			while (*tail) tail = &vp->next;
+			while (*tail) tail = &(*tail)->next;
 			p += alen;
 		} /* loop over array entries */
 	} /* loop over the entire packet */"
CVE-2010-5142,"From c3bb41f727fbe00e5de719d687757b24c8dcdfc8 Mon Sep 17 00:00:00 2001
From: Ian Meyer <ianmmeyer@gmail.com>
Date: Thu, 10 Jun 2010 12:49:45 -0400
Subject: [PATCH] CHEF-1289 API does not check for admin rights for user
 management

---
 chef-server-api/app/controllers/users.rb | 1 +
 1 file changed, 1 insertion(+)

diff --git a/chef-server-api/app/controllers/users.rb b/chef-server-api/app/controllers/users.rb
index 494039fd5ef..a336f04f03f 100644
--- a/chef-server-api/app/controllers/users.rb
+++ b/chef-server-api/app/controllers/users.rb
@@ -22,6 +22,7 @@ class Users < Application
   provides :json
 
   before :authenticate_every
+  before :is_admin, :only => [ :create, :destroy, :update ]
 
   # GET to /users
   def index"
CVE-2010-4254,"From cf1ec146f7c6acdc6697032b3aaafc68ffacdcac Mon Sep 17 00:00:00 2001
From: Rodrigo Kumpera <kumpera@gmail.com>
Date: Thu, 25 Nov 2010 14:23:31 -0200
Subject: [PATCH] Handle invalid instantiation of generic methods.

	* verify.c: Add new function to internal verifier API to check
	method instantiations.

	* reflection.c (mono_reflection_bind_generic_method_parameters):
	Check the instantiation before returning it.

	Fixes #655847
---
 mono/metadata/reflection.c       |  3 +++
 mono/metadata/verify-internals.h |  1 +
 mono/metadata/verify.c           | 15 +++++++++++++++
 3 files changed, 19 insertions(+)

diff --git a/mono/metadata/reflection.c b/mono/metadata/reflection.c
index d43ad089027c..15e649681aef 100644
--- a/mono/metadata/reflection.c
+++ b/mono/metadata/reflection.c
@@ -10605,6 +10605,9 @@ mono_reflection_bind_generic_method_parameters (MonoReflectionMethod *rmethod, M
 		mono_g_hash_table_insert (image->generic_def_objects, imethod, rmethod);
 		mono_loader_unlock ();
 	}
+
+	if (!mono_verifier_is_method_valid_generic_instantiation (inflated))
+		mono_raise_exception (mono_get_exception_argument (""typeArguments"", ""Invalid generic arguments""));
 	
 	return mono_method_get_object (mono_object_domain (rmethod), inflated, NULL);
 }
diff --git a/mono/metadata/verify-internals.h b/mono/metadata/verify-internals.h
index 1d0fb75f4505..e01325ef8375 100644
--- a/mono/metadata/verify-internals.h
+++ b/mono/metadata/verify-internals.h
@@ -22,6 +22,7 @@ gboolean mono_verifier_is_enabled_for_class (MonoClass *klass) MONO_INTERNAL;
 gboolean mono_verifier_is_method_full_trust (MonoMethod *method) MONO_INTERNAL;
 gboolean mono_verifier_is_class_full_trust (MonoClass *klass) MONO_INTERNAL;
 gboolean mono_verifier_class_is_valid_generic_instantiation (MonoClass *class) MONO_INTERNAL;
+gboolean mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method) MONO_INTERNAL;
 
 gboolean mono_verifier_verify_class (MonoClass *klass) MONO_INTERNAL;
 
diff --git a/mono/metadata/verify.c b/mono/metadata/verify.c
index a1d5bcf88e26..81eb1effbca0 100644
--- a/mono/metadata/verify.c
+++ b/mono/metadata/verify.c
@@ -6042,6 +6042,14 @@ mono_verifier_class_is_valid_generic_instantiation (MonoClass *class)
 	return mono_class_is_valid_generic_instantiation (NULL, class);
 }
 
+gboolean
+mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method)
+{
+	if (!method->is_inflated)
+		return TRUE;
+	return mono_method_is_valid_generic_instantiation (NULL, method);
+}
+
 #else
 
 gboolean
@@ -6113,5 +6121,12 @@ mono_verifier_class_is_valid_generic_instantiation (MonoClass *class)
 	return TRUE;
 }
 
+gboolean
+mono_verifier_is_method_valid_generic_instantiation (MonoMethod *method)
+{
+	return TRUE;
+}
+
+
 
 #endif"
CVE-2010-2060,"From 2e8e8c6387ecdf5923dfc4d7718d18eba1b0873d Mon Sep 17 00:00:00 2001
From: Keith Rarick <kr@xph.us>
Date: Sun, 23 May 2010 00:13:28 -0700
Subject: [PATCH] Discard job body bytes if the job is too big.

Previously, a malicious user could craft a job payload and inject
beanstalk commands without the client application knowing. (An
extra-careful client library could check the size of the job body before
sending the put command, but most libraries do not do this, nor should
they have to.)

Reported by Graham Barr.
---
 check-one.sh              | 2 +-
 prot.c                    | 3 ++-
 sh-tests/too-big.commands | 3 +++
 sh-tests/too-big.expected | 1 +
 4 files changed, 7 insertions(+), 2 deletions(-)
 create mode 100644 sh-tests/too-big.commands
 create mode 100644 sh-tests/too-big.expected

diff --git a/check-one.sh b/check-one.sh
index 709993f4..bcfb7d4b 100755
--- a/check-one.sh
+++ b/check-one.sh
@@ -34,7 +34,7 @@ if [ ! -x ./beanstalkd ]; then
   exit 2
 fi
 
-start_beanstalkd
+start_beanstalkd '' '-z 10'
 
 # Run the test
 fgrep -v ""#"" $commands | $nc $server $port > ""$tmpf""
diff --git a/prot.c b/prot.c
index 93fe8cec..481b0ede 100644
--- a/prot.c
+++ b/prot.c
@@ -1196,7 +1196,8 @@ dispatch_cmd(conn c)
         if (errno) return reply_msg(c, MSG_BAD_FORMAT);
 
         if (body_size > job_data_size_limit) {
-            return reply_msg(c, MSG_JOB_TOO_BIG);
+            /* throw away the job body and respond with JOB_TOO_BIG */
+            return skip(c, body_size + 2, MSG_JOB_TOO_BIG);
         }
 
         /* don't allow trailing garbage */
diff --git a/sh-tests/too-big.commands b/sh-tests/too-big.commands
new file mode 100644
index 00000000..d85cd399
--- /dev/null
+++ b/sh-tests/too-big.commands
@@ -0,0 +1,3 @@
+put 0 0 0 11
+delete 9999
+quit
diff --git a/sh-tests/too-big.expected b/sh-tests/too-big.expected
new file mode 100644
index 00000000..88448bcd
--- /dev/null
+++ b/sh-tests/too-big.expected
@@ -0,0 +1 @@
+JOB_TOO_BIG"
