{
  "schema":{
    "fields":[
      {
        "name":"index",
        "type":"integer"
      },
      {
        "name":"vuln_id",
        "type":"string"
      },
      {
        "name":"cwe_id",
        "type":"string"
      },
      {
        "name":"score",
        "type":"number"
      },
      {
        "name":"chain",
        "type":"string"
      },
      {
        "name":"dataset",
        "type":"string"
      },
      {
        "name":"summary",
        "type":"string"
      },
      {
        "name":"published_date",
        "type":"string"
      },
      {
        "name":"chain_len",
        "type":"integer"
      },
      {
        "name":"project",
        "type":"string"
      },
      {
        "name":"commit_href",
        "type":"string"
      },
      {
        "name":"commit_sha",
        "type":"string"
      },
      {
        "name":"patch",
        "type":"string"
      },
      {
        "name":"chain_ord",
        "type":"string"
      },
      {
        "name":"before_first_fix_commit",
        "type":"string"
      },
      {
        "name":"last_fix_commit",
        "type":"string"
      },
      {
        "name":"chain_ord_pos",
        "type":"number"
      },
      {
        "name":"commit_datetime",
        "type":"string"
      },
      {
        "name":"message",
        "type":"string"
      },
      {
        "name":"author",
        "type":"string"
      },
      {
        "name":"comments",
        "type":"string"
      },
      {
        "name":"stats",
        "type":"string"
      },
      {
        "name":"files",
        "type":"string"
      },
      {
        "name":"message_norm",
        "type":"string"
      },
      {
        "name":"language",
        "type":"string"
      },
      {
        "name":"entities",
        "type":"string"
      },
      {
        "name":"classification_level_1",
        "type":"string"
      },
      {
        "name":"classification_level_2",
        "type":"string"
      },
      {
        "name":"list_files",
        "type":"string"
      },
      {
        "name":"num_files",
        "type":"number"
      },
      {
        "name":"patch_content",
        "type":"string"
      },
      {
        "name":"code_diff",
        "type":"string"
      }
    ],
    "primaryKey":[
      "index"
    ],
    "pandas_version":"1.4.0"
  },
  "data":[
    {
      "index":0,
      "vuln_id":"GHSA-2h63-qp69-fwvw",
      "cwe_id":"{'CWE-918', 'CWE-20'}",
      "score":8.2,
      "chain":"{'https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6'}",
      "dataset":"osv",
      "summary":"Server-side request forgery (SSRF) in Apache Batik Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",
      "published_date":"2022-01-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/apache\/xmlgraphics-batik",
      "commit_href":"https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6",
      "commit_sha":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "patch":"SINGLE",
      "chain_ord":"['0ef5b661a1f77772d1110877ea9e0287987098f6']",
      "before_first_fix_commit":"{'f16e092d0c2ccee07360446e0d4adaa4be5daa1b'}",
      "last_fix_commit":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/02\/2020, 13:59:37",
      "message":"BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "author":"Simon Steiner",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/xmlgraphics-batik\/raw\/0ef5b661a1f77772d1110877ea9e0287987098f6\/batik-svgbrowser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbatik%2Fapps%2Fsvgbrowser%2FNodePickerPanel.java', 'patch': '@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\\n         Document doc = null;\\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n         try {\\n-            javax.xml.parsers.DocumentBuilder parser = factory\\n-                    .newDocumentBuilder();\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\\n             parser.setErrorHandler(new ErrorHandler() {\\n                 public void error(SAXParseException exception)\\n                         throws SAXException {'}}",
      "message_norm":"batik-1284: dont load dtds in nodepickerpanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "language":"da",
      "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java'])",
      "num_files":1.0,
      "patch_content":"From 0ef5b661a1f77772d1110877ea9e0287987098f6 Mon Sep 17 00:00:00 2001\nFrom: Simon Steiner <ssteiner@apache.org>\nDate: Tue, 2 Jun 2020 13:59:37 +0000\nSubject: [PATCH] BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68\n---\n ...\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java   | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\nindex 2a93e95a43..a5ad8e8b11 100644\n--- a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n+++ b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {",
      "code_diff":"@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {"
    },
    {
      "index":1,
      "vuln_id":"GHSA-7q4h-pj78-j7vg",
      "cwe_id":"{'CWE-400', 'CWE-918'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286'}",
      "dataset":"osv",
      "summary":"Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
      "published_date":"2021-05-13",
      "chain_len":2,
      "project":"https:\/\/github.com\/apache\/cxf",
      "commit_href":"https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "commit_sha":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "patch":"MULTI",
      "chain_ord":"['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
      "before_first_fix_commit":"{'40503a53914758759894f704bbf139ae89ace286'}",
      "last_fix_commit":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "chain_ord_pos":2.0,
      "commit_datetime":"01\/06\/2021, 10:38:21",
      "message":"Make sure both a request + request_uri can't be specified",
      "author":"Colm O hEigeartaigh",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
      "files":"{'rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/cxf\/raw\/aa789c5c4686597a7bdef2443909ab491fc2bc04\/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -21,9 +21,11 @@\\n import java.security.cert.X509Certificate;\\n import java.util.List;\\n import java.util.Map;\\n+import java.util.logging.Logger;\\n \\n import javax.ws.rs.core.MultivaluedMap;\\n \\n+import org.apache.cxf.common.logging.LogUtils;\\n import org.apache.cxf.helpers.CastUtils;\\n import org.apache.cxf.jaxrs.client.WebClient;\\n import org.apache.cxf.jaxrs.impl.MetadataMap;\\n@@ -42,23 +44,31 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n+\\n     private boolean verifyWithClientCertificates;\\n     private String issuer;\\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\\n+\\n     @Override\\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\\n                                                   UserSubject endUser,\\n                                                   Client client) {\\n         String requestToken = params.getFirst(REQUEST_PARAM);\\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n+\\n         if (requestToken == null) {\\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n+        } else if (requestUri != null) {\\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\\n+            throw new SecurityException();\\n         }\\n+\\n         if (requestToken != null) {\\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);'}}",
      "message_norm":"make sure both a request + request_uri can't be specified",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java'])",
      "num_files":1.0,
      "patch_content":"From aa789c5c4686597a7bdef2443909ab491fc2bc04 Mon Sep 17 00:00:00 2001\nFrom: Colm O hEigeartaigh <coheigea@apache.org>\nDate: Wed, 6 Jan 2021 10:38:21 +0000\nSubject: [PATCH] Make sure both a request + request_uri can't be specified\n\n---\n ...\/oauth2\/grants\/code\/JwtRequestCodeFilter.java     | 12 +++++++++++-\n 1 file changed, 11 insertions(+), 1 deletion(-)\n\ndiff --git a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\nindex 29ac00020d4..15fe40b0a74 100644\n--- a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n+++ b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n@@ -21,9 +21,11 @@\n import java.security.cert.X509Certificate;\n import java.util.List;\n import java.util.Map;\n+import java.util.logging.Logger;\n \n import javax.ws.rs.core.MultivaluedMap;\n \n+import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -42,23 +44,31 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n+\n     private boolean verifyWithClientCertificates;\n     private String issuer;\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\n+\n     @Override\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\n                                                   UserSubject endUser,\n                                                   Client client) {\n         String requestToken = params.getFirst(REQUEST_PARAM);\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\n+\n         if (requestToken == null) {\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n+        } else if (requestUri != null) {\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\n+            throw new SecurityException();\n         }\n+\n         if (requestToken != null) {\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);",
      "code_diff":"@@ -21,9 +21,11 @@\n import java.security.cert.X509Certificate;\n import java.util.List;\n import java.util.Map;\n+import java.util.logging.Logger;\n \n import javax.ws.rs.core.MultivaluedMap;\n \n+import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -42,23 +44,31 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n+\n     private boolean verifyWithClientCertificates;\n     private String issuer;\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\n+\n     @Override\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\n                                                   UserSubject endUser,\n                                                   Client client) {\n         String requestToken = params.getFirst(REQUEST_PARAM);\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\n+\n         if (requestToken == null) {\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n+        } else if (requestUri != null) {\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\n+            throw new SecurityException();\n         }\n+\n         if (requestToken != null) {\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);"
    },
    {
      "index":2,
      "vuln_id":"GHSA-4wpp-w5r4-7v5v",
      "cwe_id":"{'CWE-918'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3'}",
      "dataset":"osv",
      "summary":"Server-Side Request Forgery in charm We've discovered a vulnerability in which attackers could forge HTTP requests to manipulate the `charm` data directory to access or delete anything on the server. This has been patched in https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3 and is available in release [v0.12.1](https:\/\/github.com\/charmbracelet\/charm\/releases\/tag\/v0.12.1). We recommend that all users running self-hosted `charm` instances update immediately.\n\nThis vulnerability was found in-house and we haven't been notified of any potential exploiters.\n\n### Additional notes\n\n* Encrypted user data uploaded to the Charm server is safe as Charm servers cannot decrypt user data. This includes filenames, paths, and all key-value data.\n* Users running the official Charm [Docker images](https:\/\/github.com\/charmbracelet\/charm\/blob\/main\/docker.md) are at minimal risk because the exploit is limited to the containerized filesystem.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open a [discussion](https:\/\/github.com\/charmbracelet\/charm\/discussions)\n* Email us at [vt100@charm.sh](mailto:vt100@charm.sh)\n* Chat with us on [Slack](https:\/\/charm.sh\/slack)\n\n* * *\n\n<a href=\"https:\/\/charm.sh\/\"><img alt=\"the Charm logo\" src=\"https:\/\/stuff.charm.sh\/charm-badge.jpg\" width=\"400\"><\/a>\n\nCharm\u70ed\u7231\u5f00\u6e90 \u2022 Charm loves open source",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/charmbracelet\/charm",
      "commit_href":"https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3",
      "commit_sha":"3c90668f955c7ce5ef721e4fc9faee7053232fd3",
      "patch":"SINGLE",
      "chain_ord":"['3c90668f955c7ce5ef721e4fc9faee7053232fd3']",
      "before_first_fix_commit":"{'9c620ae07e7f7d7f3c0f6e52166b8b5f899d55d1'}",
      "last_fix_commit":"3c90668f955c7ce5ef721e4fc9faee7053232fd3",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/06\/2022, 01:23:14",
      "message":"fix: clean path before accessing file store",
      "author":"Christian Muehlhaeuser",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
      "files":"{'server\/http.go': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/charmbracelet\/charm\/raw\/3c90668f955c7ce5ef721e4fc9faee7053232fd3\/server%2Fhttp.go', 'patch': '@@ -10,6 +10,7 @@ import (\\n \\t\"io\/ioutil\"\\n \\t\"log\"\\n \\t\"net\/http\"\\n+\\t\"path\/filepath\"\\n \\t\"strconv\"\\n \\t\"strings\"\\n \\n@@ -279,7 +280,7 @@ func (s *HTTPServer) handlePostSeq(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\tms := r.URL.Query().Get(\"mode\")\\n \\tm, err := strconv.ParseUint(ms, 10, 32)\\n \\tif err != nil {\\n@@ -316,7 +317,7 @@ func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\tf, err := s.cfg.FileStore.Get(u.CharmID, path)\\n \\tif errors.Is(err, fs.ErrNotExist) {\\n \\t\\ts.renderCustomError(w, \"file not found\", http.StatusNotFound)\\n@@ -353,7 +354,7 @@ func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handleDeleteFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\terr := s.cfg.FileStore.Delete(u.CharmID, path)\\n \\tif err != nil {\\n \\t\\tlog.Printf(\"cannot delete file: %s\", err)'}}",
      "message_norm":"fix: clean path before accessing file store",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['server\/http.go'])",
      "num_files":1.0,
      "patch_content":"From 3c90668f955c7ce5ef721e4fc9faee7053232fd3 Mon Sep 17 00:00:00 2001\nFrom: Christian Muehlhaeuser <muesli@gmail.com>\nDate: Fri, 6 May 2022 03:23:14 +0200\nSubject: [PATCH] fix: clean path before accessing file store\n\n---\n server\/http.go | 7 ++++---\n 1 file changed, 4 insertions(+), 3 deletions(-)\n\ndiff --git a\/server\/http.go b\/server\/http.go\nindex ea6e0e53..73ae4590 100644\n--- a\/server\/http.go\n+++ b\/server\/http.go\n@@ -10,6 +10,7 @@ import (\n \t\"io\/ioutil\"\n \t\"log\"\n \t\"net\/http\"\n+\t\"path\/filepath\"\n \t\"strconv\"\n \t\"strings\"\n \n@@ -279,7 +280,7 @@ func (s *HTTPServer) handlePostSeq(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \tms := r.URL.Query().Get(\"mode\")\n \tm, err := strconv.ParseUint(ms, 10, 32)\n \tif err != nil {\n@@ -316,7 +317,7 @@ func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \tf, err := s.cfg.FileStore.Get(u.CharmID, path)\n \tif errors.Is(err, fs.ErrNotExist) {\n \t\ts.renderCustomError(w, \"file not found\", http.StatusNotFound)\n@@ -353,7 +354,7 @@ func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handleDeleteFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \terr := s.cfg.FileStore.Delete(u.CharmID, path)\n \tif err != nil {\n \t\tlog.Printf(\"cannot delete file: %s\", err)",
      "code_diff":"@@ -10,6 +10,7 @@ import (\n \t\"io\/ioutil\"\n \t\"log\"\n \t\"net\/http\"\n+\t\"path\/filepath\"\n \t\"strconv\"\n \t\"strings\"\n \n@@ -279,7 +280,7 @@ func (s *HTTPServer) handlePostSeq(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \tms := r.URL.Query().Get(\"mode\")\n \tm, err := strconv.ParseUint(ms, 10, 32)\n \tif err != nil {\n@@ -316,7 +317,7 @@ func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \tf, err := s.cfg.FileStore.Get(u.CharmID, path)\n \tif errors.Is(err, fs.ErrNotExist) {\n \t\ts.renderCustomError(w, \"file not found\", http.StatusNotFound)\n@@ -353,7 +354,7 @@ func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\n \n func (s *HTTPServer) handleDeleteFile(w http.ResponseWriter, r *http.Request) {\n \tu := s.charmUserFromRequest(w, r)\n-\tpath := pattern.Path(r.Context())\n+\tpath := filepath.Clean(pattern.Path(r.Context()))\n \terr := s.cfg.FileStore.Delete(u.CharmID, path)\n \tif err != nil {\n \t\tlog.Printf(\"cannot delete file: %s\", err)"
    },
    {
      "index":3,
      "vuln_id":"GHSA-7q4h-pj78-j7vg",
      "cwe_id":"{'CWE-400', 'CWE-918'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286'}",
      "dataset":"osv",
      "summary":"Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
      "published_date":"2021-05-13",
      "chain_len":2,
      "project":"https:\/\/github.com\/apache\/cxf",
      "commit_href":"https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286",
      "commit_sha":"40503a53914758759894f704bbf139ae89ace286",
      "patch":"MULTI",
      "chain_ord":"['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
      "before_first_fix_commit":"{'40503a53914758759894f704bbf139ae89ace286'}",
      "last_fix_commit":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/06\/2021, 09:30:08",
      "message":"Disallow OAuth2 request_uri by default",
      "author":"Colm O hEigeartaigh",
      "comments":null,
      "stats":"{'additions': 13, 'deletions': 4, 'total': 17}",
      "files":"{'rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/cxf\/raw\/40503a53914758759894f704bbf139ae89ace286\/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -42,6 +42,7 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n     private boolean verifyWithClientCertificates;\\n@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         if (requestToken == null) {\\n             String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n-                requestToken = WebClient.create(requestUri).get(String.class);\\n+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n         }\\n         if (requestToken != null) {\\n@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         }\\n         return params;\\n     }\\n-    private boolean isRequestUriValid(Client client, String requestUri) {\\n-        \/\/TODO: consider restricting to specific hosts\\n-        return requestUri != null && requestUri.startsWith(\"https:\/\/\");\\n+\\n+    \/**\\n+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,\\n+     * as otherwise it could lead to a security problem\\n+     * (https:\/\/tools.ietf.org\/html\/draft-ietf-oauth-jwsreq-30#section-10.4)\\n+     * @param client the Client object\\n+     * @param requestUri the request_uri parameter to validate\\n+     * @return whether the requestUri is permitted or not\\n+     *\/\\n+    protected boolean isRequestUriValid(Client client, String requestUri) {\\n+        return false;\\n     }\\n     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {\\n         if (verifyWithClientCertificates) {'}}",
      "message_norm":"disallow oauth2 request_uri by default",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java'])",
      "num_files":1.0,
      "patch_content":"From 40503a53914758759894f704bbf139ae89ace286 Mon Sep 17 00:00:00 2001\nFrom: Colm O hEigeartaigh <coheigea@apache.org>\nDate: Wed, 6 Jan 2021 09:30:08 +0000\nSubject: [PATCH] Disallow OAuth2 request_uri by default\n\n---\n ...\/grants\/code\/JwtRequestCodeFilter.java       | 17 +++++++++++++----\n 1 file changed, 13 insertions(+), 4 deletions(-)\n\ndiff --git a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\nindex 4ef8dc96439..29ac00020d4 100644\n--- a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n+++ b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n@@ -42,6 +42,7 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n     private boolean verifyWithClientCertificates;\n@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\n         if (requestToken == null) {\n             String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n-                requestToken = WebClient.create(requestUri).get(String.class);\n+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n         }\n         if (requestToken != null) {\n@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\n         }\n         return params;\n     }\n-    private boolean isRequestUriValid(Client client, String requestUri) {\n-        \/\/TODO: consider restricting to specific hosts\n-        return requestUri != null && requestUri.startsWith(\"https:\/\/\");\n+\n+    \/**\n+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,\n+     * as otherwise it could lead to a security problem\n+     * (https:\/\/tools.ietf.org\/html\/draft-ietf-oauth-jwsreq-30#section-10.4)\n+     * @param client the Client object\n+     * @param requestUri the request_uri parameter to validate\n+     * @return whether the requestUri is permitted or not\n+     *\/\n+    protected boolean isRequestUriValid(Client client, String requestUri) {\n+        return false;\n     }\n     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {\n         if (verifyWithClientCertificates) {",
      "code_diff":"@@ -42,6 +42,7 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n     private boolean verifyWithClientCertificates;\n@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\n         if (requestToken == null) {\n             String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n-                requestToken = WebClient.create(requestUri).get(String.class);\n+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n         }\n         if (requestToken != null) {\n@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\n         }\n         return params;\n     }\n-    private boolean isRequestUriValid(Client client, String requestUri) {\n-        \/\/TODO: consider restricting to specific hosts\n-        return requestUri != null && requestUri.startsWith(\"https:\/\/\");\n+\n+    \/**\n+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,\n+     * as otherwise it could lead to a security problem\n+     * (https:\/\/tools.ietf.org\/html\/draft-ietf-oauth-jwsreq-30#section-10.4)\n+     * @param client the Client object\n+     * @param requestUri the request_uri parameter to validate\n+     * @return whether the requestUri is permitted or not\n+     *\/\n+    protected boolean isRequestUriValid(Client client, String requestUri) {\n+        return false;\n     }\n     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {\n         if (verifyWithClientCertificates) {"
    },
    {
      "index":4,
      "vuln_id":"GHSA-rv87-vcv4-fjvr",
      "cwe_id":"{'CWE-918'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/jenkinsci\/urltrigger-plugin\/commit\/aec43e370550b26636aa9cab0f23a5cbcffdc44f', 'https:\/\/github.com\/jenkinsci\/urltrigger-plugin\/commit\/46220e69c220bacf8eb23911c8feba9dd68d1a26'}",
      "dataset":"osv",
      "summary":"URLTrigger Plugin server-side request forgery vulnerability A server-side request forgery vulnerability exists in Jenkins URLTrigger Plugin 0.41 and earlier in URLTrigger.java that allows attackers with Overall\/Read access to cause Jenkins to send a GET request to a specified URL. As of version 0.43, this form validation method no longer connects to a user provided URL.",
      "published_date":"2022-05-14",
      "chain_len":2,
      "project":"https:\/\/github.com\/jenkinsci\/urltrigger-plugin",
      "commit_href":"https:\/\/github.com\/jenkinsci\/urltrigger-plugin\/commit\/aec43e370550b26636aa9cab0f23a5cbcffdc44f",
      "commit_sha":"aec43e370550b26636aa9cab0f23a5cbcffdc44f",
      "patch":"MULTI",
      "chain_ord":"['46220e69c220bacf8eb23911c8feba9dd68d1a26', 'aec43e370550b26636aa9cab0f23a5cbcffdc44f']",
      "before_first_fix_commit":"{'46220e69c220bacf8eb23911c8feba9dd68d1a26'}",
      "last_fix_commit":"aec43e370550b26636aa9cab0f23a5cbcffdc44f",
      "chain_ord_pos":2.0,
      "commit_datetime":"05\/29\/2018, 21:33:01",
      "message":"Given that the URL is polled, may be valid at poll-time but not at\nconfiguration-time and may contain environment variables that could\nchange the URL at poll-time, validating it during configuration is\npointless.",
      "author":"Tony Noble",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 15, 'total': 17}",
      "files":"{'src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java': {'additions': 2, 'deletions': 15, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/urltrigger-plugin\/raw\/aec43e370550b26636aa9cab0f23a5cbcffdc44f\/src%2Fmain%2Fjava%2Forg%2Fjenkinsci%2Fplugins%2Furltrigger%2FURLTrigger.java', 'patch': '@@ -743,21 +743,8 @@ public FormValidation doCheckURL(@QueryParameter String value) {\\n             if ( value.contains( \"$\" ) ) {\\n             \\treturn FormValidation.warning( \"URL is parameterised and cannot be fully validated\" ) ;\\n             }\\n-\\n-            try {\\n-                URI uri = new URI(value);\\n-                if (uri.getScheme().equals(\"ftp\")) {\\n-                    FTPClient ftpClient = getFTPClientObject(value, null, null);\\n-                    ftpClient.getModificationTime(uri.getPath());\\n-                } else {\\n-                    ClientConfig cc = new DefaultClientConfig();\\n-                    Client client = Client.create(cc);\\n-                    client.resource(value).get(ClientResponse.class);\\n-                }\\n-                return FormValidation.ok();\\n-            } catch (Exception e) {\\n-                return FormValidation.error(e.getMessage());\\n-            }\\n+            \\n+            return FormValidation.ok();\\n         }\\n \\n         public FormValidation doCheckTimeout(@QueryParameter String value) {'}}",
      "message_norm":"given that the url is polled, may be valid at poll-time but not at\nconfiguration-time and may contain environment variables that could\nchange the url at poll-time, validating it during configuration is\npointless.",
      "language":"en",
      "entities":"[('change', 'ACTION', ''), ('validating', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java'])",
      "num_files":1.0,
      "patch_content":"From aec43e370550b26636aa9cab0f23a5cbcffdc44f Mon Sep 17 00:00:00 2001\nFrom: Tony Noble <tony.noble@gmail.com>\nDate: Tue, 29 May 2018 22:33:01 +0100\nSubject: [PATCH] Given that the URL is polled, may be valid at poll-time but\n not at configuration-time and may contain environment variables that could\n change the URL at poll-time, validating it during configuration is pointless.\n\n---\n ...\/plugins\/urltrigger\/URLTrigger.java          | 17 ++---------------\n 1 file changed, 2 insertions(+), 15 deletions(-)\n\ndiff --git a\/src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java b\/src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java\nindex 6e18590..90e9b5b 100755\n--- a\/src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java\n+++ b\/src\/main\/java\/org\/jenkinsci\/plugins\/urltrigger\/URLTrigger.java\n@@ -743,21 +743,8 @@ public FormValidation doCheckURL(@QueryParameter String value) {\n             if ( value.contains( \"$\" ) ) {\n             \treturn FormValidation.warning( \"URL is parameterised and cannot be fully validated\" ) ;\n             }\n-\n-            try {\n-                URI uri = new URI(value);\n-                if (uri.getScheme().equals(\"ftp\")) {\n-                    FTPClient ftpClient = getFTPClientObject(value, null, null);\n-                    ftpClient.getModificationTime(uri.getPath());\n-                } else {\n-                    ClientConfig cc = new DefaultClientConfig();\n-                    Client client = Client.create(cc);\n-                    client.resource(value).get(ClientResponse.class);\n-                }\n-                return FormValidation.ok();\n-            } catch (Exception e) {\n-                return FormValidation.error(e.getMessage());\n-            }\n+            \n+            return FormValidation.ok();\n         }\n \n         public FormValidation doCheckTimeout(@QueryParameter String value) {",
      "code_diff":"@@ -743,21 +743,8 @@ public FormValidation doCheckURL(@QueryParameter String value) {\n             if ( value.contains( \"$\" ) ) {\n             \treturn FormValidation.warning( \"URL is parameterised and cannot be fully validated\" ) ;\n             }\n-\n-            try {\n-                URI uri = new URI(value);\n-                if (uri.getScheme().equals(\"ftp\")) {\n-                    FTPClient ftpClient = getFTPClientObject(value, null, null);\n-                    ftpClient.getModificationTime(uri.getPath());\n-                } else {\n-                    ClientConfig cc = new DefaultClientConfig();\n-                    Client client = Client.create(cc);\n-                    client.resource(value).get(ClientResponse.class);\n-                }\n-                return FormValidation.ok();\n-            } catch (Exception e) {\n-                return FormValidation.error(e.getMessage());\n-            }\n+            \n+            return FormValidation.ok();\n         }\n \n         public FormValidation doCheckTimeout(@QueryParameter String value) {"
    },
    {
      "index":5,
      "vuln_id":"GHSA-wc9w-wvq2-ffm9",
      "cwe_id":"{'CWE-918'}",
      "score":5.4,
      "chain":"{'https:\/\/github.com\/grafana\/grafana\/commit\/ba953be95f0302c2ea80d23f1e5f2c1847365192'}",
      "dataset":"osv",
      "summary":"Server Side Request Forgery in Grafana The avatar feature in Grafana 3.0.1 through 7.0.1 has an SSRF Incorrect Access Control issue that allows remote code execution. This vulnerability allows any unauthenticated user\/client to make Grafana send HTTP requests to any URL and return its result to the user\/client. This can be used to gain information about the network that Grafana is running on.",
      "published_date":"2022-02-15",
      "chain_len":1,
      "project":"https:\/\/github.com\/grafana\/grafana",
      "commit_href":"https:\/\/github.com\/grafana\/grafana\/commit\/ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "commit_sha":"ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "patch":"SINGLE",
      "chain_ord":"['ba953be95f0302c2ea80d23f1e5f2c1847365192']",
      "before_first_fix_commit":"{'e5414f44aa2728cce0dbbc7698fddb514fa8193a'}",
      "last_fix_commit":"ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/03\/2020, 13:56:13",
      "message":"Only allow 32 hexadecimal digits for the avatar hash (#25322)\n\n(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)",
      "author":"Marcus Efraimsson",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 5, 'total': 16}",
      "files":"{'pkg\/api\/avatar\/avatar.go': {'additions': 11, 'deletions': 5, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/grafana\/grafana\/raw\/ba953be95f0302c2ea80d23f1e5f2c1847365192\/pkg%2Fapi%2Favatar%2Favatar.go', 'patch': '@@ -15,14 +15,14 @@ import (\\n \\t\"net\/http\"\\n \\t\"net\/url\"\\n \\t\"path\/filepath\"\\n+\\t\"regexp\"\\n \\t\"strconv\"\\n-\\t\"strings\"\\n \\t\"sync\"\\n \\t\"time\"\\n \\n \\t\"github.com\/grafana\/grafana\/pkg\/infra\/log\"\\n+\\t\"github.com\/grafana\/grafana\/pkg\/models\"\\n \\t\"github.com\/grafana\/grafana\/pkg\/setting\"\\n-\\t\"gopkg.in\/macaron.v1\"\\n \\n \\tgocache \"github.com\/patrickmn\/go-cache\"\\n )\\n@@ -73,9 +73,15 @@ type CacheServer struct {\\n \\tcache    *gocache.Cache\\n }\\n \\n-func (this *CacheServer) Handler(ctx *macaron.Context) {\\n-\\turlPath := ctx.Req.URL.Path\\n-\\thash := urlPath[strings.LastIndex(urlPath, \"\/\")+1:]\\n+var validMD5 = regexp.MustCompile(\"^[a-fA-F0-9]{32}$\")\\n+\\n+func (this *CacheServer) Handler(ctx *models.ReqContext) {\\n+\\thash := ctx.Params(\"hash\")\\n+\\n+\\tif len(hash) != 32 || !validMD5.MatchString(hash) {\\n+\\t\\tctx.JsonApiErr(404, \"Avatar not found\", nil)\\n+\\t\\treturn\\n+\\t}\\n \\n \\tvar avatar *Avatar\\n \\tobj, exists := this.cache.Get(hash)'}}",
      "message_norm":"only allow 32 hexadecimal digits for the avatar hash (#25322)\n\n(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)",
      "language":"en",
      "entities":"[('hash', 'SECWORD', ''), ('#25322', 'ISSUE', ''), ('commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509', 'SHA', 'prefix_colon_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['pkg\/api\/avatar\/avatar.go'])",
      "num_files":1.0,
      "patch_content":"From ba953be95f0302c2ea80d23f1e5f2c1847365192 Mon Sep 17 00:00:00 2001\nFrom: Marcus Efraimsson <marcus.efraimsson@gmail.com>\nDate: Wed, 3 Jun 2020 15:56:13 +0200\nSubject: [PATCH] Only allow 32 hexadecimal digits for the avatar hash (#25322)\n\n(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)\n---\n pkg\/api\/avatar\/avatar.go | 16 +++++++++++-----\n 1 file changed, 11 insertions(+), 5 deletions(-)\n\ndiff --git a\/pkg\/api\/avatar\/avatar.go b\/pkg\/api\/avatar\/avatar.go\nindex d2d33df144bb..6768f9807ccf 100644\n--- a\/pkg\/api\/avatar\/avatar.go\n+++ b\/pkg\/api\/avatar\/avatar.go\n@@ -15,14 +15,14 @@ import (\n \t\"net\/http\"\n \t\"net\/url\"\n \t\"path\/filepath\"\n+\t\"regexp\"\n \t\"strconv\"\n-\t\"strings\"\n \t\"sync\"\n \t\"time\"\n \n \t\"github.com\/grafana\/grafana\/pkg\/infra\/log\"\n+\t\"github.com\/grafana\/grafana\/pkg\/models\"\n \t\"github.com\/grafana\/grafana\/pkg\/setting\"\n-\t\"gopkg.in\/macaron.v1\"\n \n \tgocache \"github.com\/patrickmn\/go-cache\"\n )\n@@ -73,9 +73,15 @@ type CacheServer struct {\n \tcache    *gocache.Cache\n }\n \n-func (this *CacheServer) Handler(ctx *macaron.Context) {\n-\turlPath := ctx.Req.URL.Path\n-\thash := urlPath[strings.LastIndex(urlPath, \"\/\")+1:]\n+var validMD5 = regexp.MustCompile(\"^[a-fA-F0-9]{32}$\")\n+\n+func (this *CacheServer) Handler(ctx *models.ReqContext) {\n+\thash := ctx.Params(\"hash\")\n+\n+\tif len(hash) != 32 || !validMD5.MatchString(hash) {\n+\t\tctx.JsonApiErr(404, \"Avatar not found\", nil)\n+\t\treturn\n+\t}\n \n \tvar avatar *Avatar\n \tobj, exists := this.cache.Get(hash)",
      "code_diff":"@@ -15,14 +15,14 @@ import (\n \t\"net\/http\"\n \t\"net\/url\"\n \t\"path\/filepath\"\n+\t\"regexp\"\n \t\"strconv\"\n-\t\"strings\"\n \t\"sync\"\n \t\"time\"\n \n \t\"github.com\/grafana\/grafana\/pkg\/infra\/log\"\n+\t\"github.com\/grafana\/grafana\/pkg\/models\"\n \t\"github.com\/grafana\/grafana\/pkg\/setting\"\n-\t\"gopkg.in\/macaron.v1\"\n \n \tgocache \"github.com\/patrickmn\/go-cache\"\n )\n@@ -73,9 +73,15 @@ type CacheServer struct {\n \tcache    *gocache.Cache\n }\n \n-func (this *CacheServer) Handler(ctx *macaron.Context) {\n-\turlPath := ctx.Req.URL.Path\n-\thash := urlPath[strings.LastIndex(urlPath, \"\/\")+1:]\n+var validMD5 = regexp.MustCompile(\"^[a-fA-F0-9]{32}$\")\n+\n+func (this *CacheServer) Handler(ctx *models.ReqContext) {\n+\thash := ctx.Params(\"hash\")\n+\n+\tif len(hash) != 32 || !validMD5.MatchString(hash) {\n+\t\tctx.JsonApiErr(404, \"Avatar not found\", nil)\n+\t\treturn\n+\t}\n \n \tvar avatar *Avatar\n \tobj, exists := this.cache.Get(hash)"
    },
    {
      "index":6,
      "vuln_id":"GHSA-hhr9-7xvh-8xgc",
      "cwe_id":"{'CWE-918'}",
      "score":7.7,
      "chain":"{'https:\/\/github.com\/livehelperchat\/livehelperchat\/commit\/abc9599ee7aded466ca216741dcaea533c908111'}",
      "dataset":"osv",
      "summary":"Server side request forgery in LiveHelperChat SSRF filter bypass port 80, 433 in LiveHelperChat prior to v3.67. An attacker could make the application perform arbitrary requests, bypass CVE-2022-1191",
      "published_date":"2022-04-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/livehelperchat\/livehelperchat",
      "commit_href":"https:\/\/github.com\/livehelperchat\/livehelperchat\/commit\/abc9599ee7aded466ca216741dcaea533c908111",
      "commit_sha":"abc9599ee7aded466ca216741dcaea533c908111",
      "patch":"SINGLE",
      "chain_ord":"['abc9599ee7aded466ca216741dcaea533c908111']",
      "before_first_fix_commit":"{'a583f4c60a98779938766e242991e637c0d938f0'}",
      "last_fix_commit":"abc9599ee7aded466ca216741dcaea533c908111",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/03\/2022, 19:37:19",
      "message":"fix #1752",
      "author":"Remigijus Kiminas",
      "comments":null,
      "stats":"{'additions': 8, 'deletions': 2, 'total': 10}",
      "files":"{'lhc_web\/modules\/lhcobrowse\/proxycss.php': {'additions': 8, 'deletions': 2, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/LiveHelperChat\/livehelperchat\/raw\/abc9599ee7aded466ca216741dcaea533c908111\/lhc_web%2Fmodules%2Flhcobrowse%2Fproxycss.php', 'patch': \"@@ -15,7 +15,13 @@\\n     $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\\r\\n }\\r\\n \\r\\n-$url = parse_url($_GET['base']);\\r\\n+$base = trim($_GET['base']);\\r\\n+\\r\\n+if (!filter_var($base, FILTER_VALIDATE_URL)) {\\r\\n+    exit;\\r\\n+}\\r\\n+\\r\\n+$url = parse_url($base);\\r\\n \\r\\n \/\/ Only http\/https supported\\r\\n if (!in_array($url['scheme'],['http','https']) || (isset($url['port']) && !in_array($url['port'],[80,443]))) {\\r\\n@@ -42,7 +48,7 @@\\n         }\\r\\n     } else {\\r\\n \\r\\n-        if (!in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\\r\\n+        if (!filter_var($_GET['css'], FILTER_VALIDATE_URL) || !in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\\r\\n             exit;\\r\\n         }\"}}",
      "message_norm":"fix #1752",
      "language":"ca",
      "entities":"[('fix', 'ACTION', ''), ('#1752', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lhc_web\/modules\/lhcobrowse\/proxycss.php'])",
      "num_files":1.0,
      "patch_content":"From abc9599ee7aded466ca216741dcaea533c908111 Mon Sep 17 00:00:00 2001\nFrom: Remigijus Kiminas <remdex@gmail.com>\nDate: Sun, 3 Apr 2022 15:37:19 -0400\nSubject: [PATCH] fix #1752\n\n---\n lhc_web\/modules\/lhcobrowse\/proxycss.php | 10 ++++++++--\n 1 file changed, 8 insertions(+), 2 deletions(-)\n\ndiff --git a\/lhc_web\/modules\/lhcobrowse\/proxycss.php b\/lhc_web\/modules\/lhcobrowse\/proxycss.php\nindex 7838aa53fd..89097ca00c 100644\n--- a\/lhc_web\/modules\/lhcobrowse\/proxycss.php\n+++ b\/lhc_web\/modules\/lhcobrowse\/proxycss.php\n@@ -15,7 +15,13 @@\n     $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n }\r\n \r\n-$url = parse_url($_GET['base']);\r\n+$base = trim($_GET['base']);\r\n+\r\n+if (!filter_var($base, FILTER_VALIDATE_URL)) {\r\n+    exit;\r\n+}\r\n+\r\n+$url = parse_url($base);\r\n \r\n \/\/ Only http\/https supported\r\n if (!in_array($url['scheme'],['http','https']) || (isset($url['port']) && !in_array($url['port'],[80,443]))) {\r\n@@ -42,7 +48,7 @@\n         }\r\n     } else {\r\n \r\n-        if (!in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\r\n+        if (!filter_var($_GET['css'], FILTER_VALIDATE_URL) || !in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\r\n             exit;\r\n         }",
      "code_diff":"@@ -15,7 +15,13 @@\n     $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\n }\n \n-$url = parse_url($_GET['base']);\n+$base = trim($_GET['base']);\n+\n+if (!filter_var($base, FILTER_VALIDATE_URL)) {\n+    exit;\n+}\n+\n+$url = parse_url($base);\n \n \/\/ Only http\/https supported\n if (!in_array($url['scheme'],['http','https']) || (isset($url['port']) && !in_array($url['port'],[80,443]))) {\n@@ -42,7 +48,7 @@\n         }\n     } else {\n \n-        if (!in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\n+        if (!filter_var($_GET['css'], FILTER_VALIDATE_URL) || !in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\n             exit;\n         }"
    },
    {
      "index":7,
      "vuln_id":"GHSA-2647-c639-qv2j",
      "cwe_id":"{'CWE-918'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8'}",
      "dataset":"osv",
      "summary":"Server-Side Request Forgery in calibreweb calibreweb prior to version 0.6.17 is vulnerable to server-side request forgery (SSRF). This is due to an incomplete fix for [CVE-2022-0339](https:\/\/github.com\/advisories\/GHSA-4w8p-x6g8-fv64). The blacklist does not check for `0.0.0.0`, which would result in a payload of `0.0.0.0` resolving to `localhost`.",
      "published_date":"2022-03-08",
      "chain_len":1,
      "project":"https:\/\/github.com\/janeczku\/calibre-web",
      "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8",
      "commit_sha":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
      "patch":"SINGLE",
      "chain_ord":"['965352c8d96c9eae7a6867ff76b0db137d04b0b8']",
      "before_first_fix_commit":"{'8007e450b3178f517b83b0989744c6df38867932'}",
      "last_fix_commit":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/26\/2022, 07:05:35",
      "message":"Don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
      "author":"Ozzie Isaacs",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
      "files":"{'cps\/helper.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/965352c8d96c9eae7a6867ff76b0db137d04b0b8\/cps%2Fhelper.py', 'patch': '@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):\\n         if not cli.allow_localhost:\\n             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]\\n             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]\\n-            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\":\\n+            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":\\n                 log.error(\"Localhost was accessed for cover upload\")\\n                 return False, _(\"You are not allowed to access localhost for cover uploads\")\\n-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling\\n+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling\\n         img.raise_for_status()\\n         return save_cover(img, book_path)\\n     except (socket.gaierror,'}}",
      "message_norm":"don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
      "language":"en",
      "entities":null,
      "classification_level_1":"POORLY_DOCUMENTED",
      "classification_level_2":"REDUNDANT_MESSAGE",
      "list_files":"dict_keys(['cps\/helper.py'])",
      "num_files":1.0,
      "patch_content":"From 965352c8d96c9eae7a6867ff76b0db137d04b0b8 Mon Sep 17 00:00:00 2001\nFrom: Ozzie Isaacs <ozzie.fernandez.isaacs@googlemail.com>\nDate: Sat, 26 Feb 2022 08:05:35 +0100\nSubject: [PATCH] Don't allow redirects on cover uploads, catch more addresses\n which resolve to localhost\n\n---\n cps\/helper.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a\/cps\/helper.py b\/cps\/helper.py\nindex b5495930bd..c162f7eefc 100644\n--- a\/cps\/helper.py\n+++ b\/cps\/helper.py\n@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):\n         if not cli.allow_localhost:\n             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]\n             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]\n-            if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\":\n+            if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":\n                 log.error(\"Localhost was accessed for cover upload\")\n                 return False, _(\"You are not allowed to access localhost for cover uploads\")\n-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling\n+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling\n         img.raise_for_status()\n         return save_cover(img, book_path)\n     except (socket.gaierror,",
      "code_diff":"@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):\n         if not cli.allow_localhost:\n             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]\n             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]\n-            if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\":\n+            if ip.startswith(\"127.\") or ip.startswith('::ffff:7f') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":\n                 log.error(\"Localhost was accessed for cover upload\")\n                 return False, _(\"You are not allowed to access localhost for cover uploads\")\n-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling\n+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling\n         img.raise_for_status()\n         return save_cover(img, book_path)\n     except (socket.gaierror,"
    },
    {
      "index":8,
      "vuln_id":"GHSA-38rv-5jqc-m2cv",
      "cwe_id":"{'CWE-918'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/recurly\/recurly-client-python\/commit\/049c74699ce93cf126feff06d632ea63fba36742'}",
      "dataset":"osv",
      "summary":"High severity vulnerability that affects recurly The Recurly Client Python Library before 2.0.5, 2.1.16, 2.2.22, 2.3.1, 2.4.5, 2.5.1, 2.6.2 is vulnerable to a Server-Side Request Forgery vulnerability in the \"Resource.get\" method that could result in compromise of API keys or other critical resources.",
      "published_date":"2019-01-04",
      "chain_len":1,
      "project":"https:\/\/github.com\/recurly\/recurly-client-python",
      "commit_href":"https:\/\/github.com\/recurly\/recurly-client-python\/commit\/049c74699ce93cf126feff06d632ea63fba36742",
      "commit_sha":"049c74699ce93cf126feff06d632ea63fba36742",
      "patch":"SINGLE",
      "chain_ord":"['049c74699ce93cf126feff06d632ea63fba36742']",
      "before_first_fix_commit":"{'9db2d1a0268201571a567d73481d0d16c6fbc5e1'}",
      "last_fix_commit":"049c74699ce93cf126feff06d632ea63fba36742",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/09\/2017, 00:45:28",
      "message":"Fix SSRF: do not use urljoin, quote uuids",
      "author":"Benjamin Eckel",
      "comments":null,
      "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
      "files":"{'recurly\/resource.py': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/recurly\/recurly-client-python\/raw\/049c74699ce93cf126feff06d632ea63fba36742\/recurly%2Fresource.py', 'patch': '@@ -12,8 +12,7 @@\\n import recurly.errors\\n from recurly.link_header import parse_link_value\\n from six.moves import http_client\\n-from six.moves.urllib.parse import urlencode, urljoin, urlsplit\\n-\\n+from six.moves.urllib.parse import urlencode, urlsplit, quote\\n \\n class Money(object):\\n \\n@@ -338,7 +337,8 @@ def get(cls, uuid):\\n         can be directly requested with this method.\\n \\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.member_path % (uuid,))\\n+        uuid = quote(str(uuid))\\n+        url = recurly.base_uri() + (cls.member_path % (uuid,))\\n         resp, elem = cls.element_for_url(url)\\n         return cls.from_element(elem)\\n \\n@@ -606,7 +606,7 @@ def all(cls, **kwargs):\\n         parameters.\\n \\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\\n+        url = recurly.base_uri() + cls.collection_path\\n         if kwargs:\\n             url = \\'%s?%s\\' % (url, urlencode(kwargs))\\n         return Page.page_for_url(url)\\n@@ -616,7 +616,7 @@ def count(cls, **kwargs):\\n         \"\"\"Return a count of server side resources given\\n         filtering arguments in kwargs.\\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\\n+        url = recurly.base_uri() + cls.collection_path\\n         if kwargs:\\n             url = \\'%s?%s\\' % (url, urlencode(kwargs))\\n         return Page.count_for_url(url)\\n@@ -638,7 +638,7 @@ def _update(self):\\n         return self.put(self._url)\\n \\n     def _create(self):\\n-        url = urljoin(recurly.base_uri(), self.collection_path)\\n+        url = recurly.base_uri() + self.collection_path\\n         return self.post(url)\\n \\n     def put(self, url):'}}",
      "message_norm":"fix ssrf: do not use urljoin, quote uuids",
      "language":"fr",
      "entities":"[('fix', 'ACTION', ''), ('ssrf', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['recurly\/resource.py'])",
      "num_files":1.0,
      "patch_content":"From 049c74699ce93cf126feff06d632ea63fba36742 Mon Sep 17 00:00:00 2001\nFrom: Benjamin Eckel <bhelx@simst.im>\nDate: Wed, 8 Nov 2017 18:45:28 -0600\nSubject: [PATCH] Fix SSRF: do not use urljoin, quote uuids\n\n---\n recurly\/resource.py | 12 ++++++------\n 1 file changed, 6 insertions(+), 6 deletions(-)\n\ndiff --git a\/recurly\/resource.py b\/recurly\/resource.py\nindex 51fbf961..b0d214ae 100644\n--- a\/recurly\/resource.py\n+++ b\/recurly\/resource.py\n@@ -12,8 +12,7 @@\n import recurly.errors\n from recurly.link_header import parse_link_value\n from six.moves import http_client\n-from six.moves.urllib.parse import urlencode, urljoin, urlsplit\n-\n+from six.moves.urllib.parse import urlencode, urlsplit, quote\n \n class Money(object):\n \n@@ -338,7 +337,8 @@ def get(cls, uuid):\n         can be directly requested with this method.\n \n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.member_path % (uuid,))\n+        uuid = quote(str(uuid))\n+        url = recurly.base_uri() + (cls.member_path % (uuid,))\n         resp, elem = cls.element_for_url(url)\n         return cls.from_element(elem)\n \n@@ -606,7 +606,7 @@ def all(cls, **kwargs):\n         parameters.\n \n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\n+        url = recurly.base_uri() + cls.collection_path\n         if kwargs:\n             url = '%s?%s' % (url, urlencode(kwargs))\n         return Page.page_for_url(url)\n@@ -616,7 +616,7 @@ def count(cls, **kwargs):\n         \"\"\"Return a count of server side resources given\n         filtering arguments in kwargs.\n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\n+        url = recurly.base_uri() + cls.collection_path\n         if kwargs:\n             url = '%s?%s' % (url, urlencode(kwargs))\n         return Page.count_for_url(url)\n@@ -638,7 +638,7 @@ def _update(self):\n         return self.put(self._url)\n \n     def _create(self):\n-        url = urljoin(recurly.base_uri(), self.collection_path)\n+        url = recurly.base_uri() + self.collection_path\n         return self.post(url)\n \n     def put(self, url):",
      "code_diff":"@@ -12,8 +12,7 @@\n import recurly.errors\n from recurly.link_header import parse_link_value\n from six.moves import http_client\n-from six.moves.urllib.parse import urlencode, urljoin, urlsplit\n-\n+from six.moves.urllib.parse import urlencode, urlsplit, quote\n \n class Money(object):\n \n@@ -338,7 +337,8 @@ def get(cls, uuid):\n         can be directly requested with this method.\n \n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.member_path % (uuid,))\n+        uuid = quote(str(uuid))\n+        url = recurly.base_uri() + (cls.member_path % (uuid,))\n         resp, elem = cls.element_for_url(url)\n         return cls.from_element(elem)\n \n@@ -606,7 +606,7 @@ def all(cls, **kwargs):\n         parameters.\n \n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\n+        url = recurly.base_uri() + cls.collection_path\n         if kwargs:\n             url = '%s?%s' % (url, urlencode(kwargs))\n         return Page.page_for_url(url)\n@@ -616,7 +616,7 @@ def count(cls, **kwargs):\n         \"\"\"Return a count of server side resources given\n         filtering arguments in kwargs.\n         \"\"\"\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\n+        url = recurly.base_uri() + cls.collection_path\n         if kwargs:\n             url = '%s?%s' % (url, urlencode(kwargs))\n         return Page.count_for_url(url)\n@@ -638,7 +638,7 @@ def _update(self):\n         return self.put(self._url)\n \n     def _create(self):\n-        url = urljoin(recurly.base_uri(), self.collection_path)\n+        url = recurly.base_uri() + self.collection_path\n         return self.post(url)\n \n     def put(self, url):"
    }
  ]
}