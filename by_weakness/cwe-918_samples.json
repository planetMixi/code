{
  "schema":{
    "fields":[
      {
        "name":"index",
        "type":"integer"
      },
      {
        "name":"vuln_id",
        "type":"string"
      },
      {
        "name":"cwe_id",
        "type":"string"
      },
      {
        "name":"score",
        "type":"number"
      },
      {
        "name":"chain",
        "type":"string"
      },
      {
        "name":"dataset",
        "type":"string"
      },
      {
        "name":"summary",
        "type":"string"
      },
      {
        "name":"published_date",
        "type":"string"
      },
      {
        "name":"chain_len",
        "type":"integer"
      },
      {
        "name":"project",
        "type":"string"
      },
      {
        "name":"commit_href",
        "type":"string"
      },
      {
        "name":"commit_sha",
        "type":"string"
      },
      {
        "name":"patch",
        "type":"string"
      },
      {
        "name":"chain_ord",
        "type":"string"
      },
      {
        "name":"before_first_fix_commit",
        "type":"string"
      },
      {
        "name":"last_fix_commit",
        "type":"string"
      },
      {
        "name":"chain_ord_pos",
        "type":"number"
      },
      {
        "name":"commit_datetime",
        "type":"string"
      },
      {
        "name":"message",
        "type":"string"
      },
      {
        "name":"author",
        "type":"string"
      },
      {
        "name":"comments",
        "type":"string"
      },
      {
        "name":"stats",
        "type":"string"
      },
      {
        "name":"files",
        "type":"string"
      },
      {
        "name":"message_norm",
        "type":"string"
      },
      {
        "name":"language",
        "type":"string"
      },
      {
        "name":"entities",
        "type":"string"
      },
      {
        "name":"classification_level_1",
        "type":"string"
      },
      {
        "name":"classification_level_2",
        "type":"string"
      },
      {
        "name":"list_files",
        "type":"string"
      },
      {
        "name":"num_files",
        "type":"number"
      },
      {
        "name":"patch_content",
        "type":"string"
      },
      {
        "name":"code_diff",
        "type":"string"
      }
    ],
    "primaryKey":[
      "index"
    ],
    "pandas_version":"1.4.0"
  },
  "data":[
    {
      "index":0,
      "vuln_id":"GHSA-6mv9-hcx5-7mhh",
      "cwe_id":"{'CWE-918'}",
      "score":5.3,
      "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/2d16b459205730d85e51499c2457109b234ca9d9'}",
      "dataset":"osv",
      "summary":"Server-Side Request Forgery in Jenkins An improper authorization vulnerability exists in Jenkins versions 2.106 and earlier, and LTS 2.89.3 and earlier, that allows an attacker to have Jenkins submit HTTP GET requests and get limited information about the response.",
      "published_date":"2022-05-13",
      "chain_len":1,
      "project":"https:\/\/github.com\/jenkinsci\/jenkins",
      "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/2d16b459205730d85e51499c2457109b234ca9d9",
      "commit_sha":"2d16b459205730d85e51499c2457109b234ca9d9",
      "patch":"SINGLE",
      "chain_ord":"['2d16b459205730d85e51499c2457109b234ca9d9']",
      "before_first_fix_commit":"{'ccc374a7176d7704941fb494589790b7673efe2e'}",
      "last_fix_commit":"2d16b459205730d85e51499c2457109b234ca9d9",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/30\/2018, 17:15:48",
      "message":"[SECURITY-506] Require admin permission to validate proxy config.",
      "author":"Jesse Glick",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'core\/src\/main\/java\/hudson\/ProxyConfiguration.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/2d16b459205730d85e51499c2457109b234ca9d9\/core%2Fsrc%2Fmain%2Fjava%2Fhudson%2FProxyConfiguration.java', 'patch': '@@ -341,6 +341,8 @@ public FormValidation doValidateProxy(\\n                 @QueryParameter(\"userName\") String userName, @QueryParameter(\"password\") String password,\\n                 @QueryParameter(\"noProxyHost\") String noProxyHost) {\\n \\n+            Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\\n+\\n             if (Util.fixEmptyAndTrim(testUrl) == null) {\\n                 return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\\n             }'}}",
      "message_norm":"[security-506] require admin permission to validate proxy config.",
      "language":"en",
      "entities":"[('security-506', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('permission', 'SECWORD', ''), ('validate', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['core\/src\/main\/java\/hudson\/ProxyConfiguration.java'])",
      "num_files":1.0,
      "patch_content":"From 2d16b459205730d85e51499c2457109b234ca9d9 Mon Sep 17 00:00:00 2001\nFrom: Jesse Glick <jglick@cloudbees.com>\nDate: Tue, 30 Jan 2018 12:15:48 -0500\nSubject: [PATCH] [SECURITY-506] Require admin permission to validate proxy\n config.\n\n---\n core\/src\/main\/java\/hudson\/ProxyConfiguration.java | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/core\/src\/main\/java\/hudson\/ProxyConfiguration.java b\/core\/src\/main\/java\/hudson\/ProxyConfiguration.java\nindex 7c2809c53f5a..408d5e9c4fb5 100644\n--- a\/core\/src\/main\/java\/hudson\/ProxyConfiguration.java\n+++ b\/core\/src\/main\/java\/hudson\/ProxyConfiguration.java\n@@ -341,6 +341,8 @@ public FormValidation doValidateProxy(\n                 @QueryParameter(\"userName\") String userName, @QueryParameter(\"password\") String password,\n                 @QueryParameter(\"noProxyHost\") String noProxyHost) {\n \n+            Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n+\n             if (Util.fixEmptyAndTrim(testUrl) == null) {\n                 return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n             }",
      "code_diff":"@@ -341,6 +341,8 @@ public FormValidation doValidateProxy(\n                 @QueryParameter(\"userName\") String userName, @QueryParameter(\"password\") String password,\n                 @QueryParameter(\"noProxyHost\") String noProxyHost) {\n \n+            Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n+\n             if (Util.fixEmptyAndTrim(testUrl) == null) {\n                 return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n             }"
    },
    {
      "index":1,
      "vuln_id":"GHSA-2h63-qp69-fwvw",
      "cwe_id":"{'CWE-918', 'CWE-20'}",
      "score":8.2,
      "chain":"{'https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6'}",
      "dataset":"osv",
      "summary":"Server-side request forgery (SSRF) in Apache Batik Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",
      "published_date":"2022-01-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/apache\/xmlgraphics-batik",
      "commit_href":"https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6",
      "commit_sha":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "patch":"SINGLE",
      "chain_ord":"['0ef5b661a1f77772d1110877ea9e0287987098f6']",
      "before_first_fix_commit":"{'f16e092d0c2ccee07360446e0d4adaa4be5daa1b'}",
      "last_fix_commit":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/02\/2020, 13:59:37",
      "message":"BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "author":"Simon Steiner",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/xmlgraphics-batik\/raw\/0ef5b661a1f77772d1110877ea9e0287987098f6\/batik-svgbrowser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbatik%2Fapps%2Fsvgbrowser%2FNodePickerPanel.java', 'patch': '@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\\n         Document doc = null;\\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n         try {\\n-            javax.xml.parsers.DocumentBuilder parser = factory\\n-                    .newDocumentBuilder();\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\\n             parser.setErrorHandler(new ErrorHandler() {\\n                 public void error(SAXParseException exception)\\n                         throws SAXException {'}}",
      "message_norm":"batik-1284: dont load dtds in nodepickerpanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "language":"da",
      "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java'])",
      "num_files":1.0,
      "patch_content":"From 0ef5b661a1f77772d1110877ea9e0287987098f6 Mon Sep 17 00:00:00 2001\nFrom: Simon Steiner <ssteiner@apache.org>\nDate: Tue, 2 Jun 2020 13:59:37 +0000\nSubject: [PATCH] BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68\n---\n ...\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java   | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\nindex 2a93e95a43..a5ad8e8b11 100644\n--- a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n+++ b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {",
      "code_diff":"@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {"
    },
    {
      "index":2,
      "vuln_id":"GHSA-7q4h-pj78-j7vg",
      "cwe_id":"{'CWE-400', 'CWE-918'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286'}",
      "dataset":"osv",
      "summary":"Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
      "published_date":"2021-05-13",
      "chain_len":2,
      "project":"https:\/\/github.com\/apache\/cxf",
      "commit_href":"https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "commit_sha":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "patch":"MULTI",
      "chain_ord":"['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
      "before_first_fix_commit":"{'40503a53914758759894f704bbf139ae89ace286'}",
      "last_fix_commit":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "chain_ord_pos":2.0,
      "commit_datetime":"01\/06\/2021, 10:38:21",
      "message":"Make sure both a request + request_uri can't be specified",
      "author":"Colm O hEigeartaigh",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
      "files":"{'rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/cxf\/raw\/aa789c5c4686597a7bdef2443909ab491fc2bc04\/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -21,9 +21,11 @@\\n import java.security.cert.X509Certificate;\\n import java.util.List;\\n import java.util.Map;\\n+import java.util.logging.Logger;\\n \\n import javax.ws.rs.core.MultivaluedMap;\\n \\n+import org.apache.cxf.common.logging.LogUtils;\\n import org.apache.cxf.helpers.CastUtils;\\n import org.apache.cxf.jaxrs.client.WebClient;\\n import org.apache.cxf.jaxrs.impl.MetadataMap;\\n@@ -42,23 +44,31 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n+\\n     private boolean verifyWithClientCertificates;\\n     private String issuer;\\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\\n+\\n     @Override\\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\\n                                                   UserSubject endUser,\\n                                                   Client client) {\\n         String requestToken = params.getFirst(REQUEST_PARAM);\\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n+\\n         if (requestToken == null) {\\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n+        } else if (requestUri != null) {\\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\\n+            throw new SecurityException();\\n         }\\n+\\n         if (requestToken != null) {\\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);'}}",
      "message_norm":"make sure both a request + request_uri can't be specified",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java'])",
      "num_files":1.0,
      "patch_content":"From aa789c5c4686597a7bdef2443909ab491fc2bc04 Mon Sep 17 00:00:00 2001\nFrom: Colm O hEigeartaigh <coheigea@apache.org>\nDate: Wed, 6 Jan 2021 10:38:21 +0000\nSubject: [PATCH] Make sure both a request + request_uri can't be specified\n\n---\n ...\/oauth2\/grants\/code\/JwtRequestCodeFilter.java     | 12 +++++++++++-\n 1 file changed, 11 insertions(+), 1 deletion(-)\n\ndiff --git a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\nindex 29ac00020d4..15fe40b0a74 100644\n--- a\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n+++ b\/rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java\n@@ -21,9 +21,11 @@\n import java.security.cert.X509Certificate;\n import java.util.List;\n import java.util.Map;\n+import java.util.logging.Logger;\n \n import javax.ws.rs.core.MultivaluedMap;\n \n+import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -42,23 +44,31 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n+\n     private boolean verifyWithClientCertificates;\n     private String issuer;\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\n+\n     @Override\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\n                                                   UserSubject endUser,\n                                                   Client client) {\n         String requestToken = params.getFirst(REQUEST_PARAM);\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\n+\n         if (requestToken == null) {\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n+        } else if (requestUri != null) {\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\n+            throw new SecurityException();\n         }\n+\n         if (requestToken != null) {\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);",
      "code_diff":"@@ -21,9 +21,11 @@\n import java.security.cert.X509Certificate;\n import java.util.List;\n import java.util.Map;\n+import java.util.logging.Logger;\n \n import javax.ws.rs.core.MultivaluedMap;\n \n+import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -42,23 +44,31 @@\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\n \n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\n     private static final String REQUEST_PARAM = \"request\";\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\n+\n     private boolean verifyWithClientCertificates;\n     private String issuer;\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\n+\n     @Override\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\n                                                   UserSubject endUser,\n                                                   Client client) {\n         String requestToken = params.getFirst(REQUEST_PARAM);\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\n+\n         if (requestToken == null) {\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\n             if (isRequestUriValid(client, requestUri)) {\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\n             }\n+        } else if (requestUri != null) {\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\n+            throw new SecurityException();\n         }\n+\n         if (requestToken != null) {\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);"
    }
  ]
}