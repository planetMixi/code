{
  "schema":{
    "fields":[
      {
        "name":"index",
        "type":"integer"
      },
      {
        "name":"vuln_id",
        "type":"string"
      },
      {
        "name":"cwe_id",
        "type":"string"
      },
      {
        "name":"score",
        "type":"number"
      },
      {
        "name":"chain",
        "type":"string"
      },
      {
        "name":"dataset",
        "type":"string"
      },
      {
        "name":"summary",
        "type":"string"
      },
      {
        "name":"published_date",
        "type":"string"
      },
      {
        "name":"chain_len",
        "type":"integer"
      },
      {
        "name":"project",
        "type":"string"
      },
      {
        "name":"commit_href",
        "type":"string"
      },
      {
        "name":"commit_sha",
        "type":"string"
      },
      {
        "name":"patch",
        "type":"string"
      },
      {
        "name":"chain_ord",
        "type":"string"
      },
      {
        "name":"before_first_fix_commit",
        "type":"string"
      },
      {
        "name":"last_fix_commit",
        "type":"string"
      },
      {
        "name":"chain_ord_pos",
        "type":"number"
      },
      {
        "name":"commit_datetime",
        "type":"string"
      },
      {
        "name":"message",
        "type":"string"
      },
      {
        "name":"author",
        "type":"string"
      },
      {
        "name":"comments",
        "type":"string"
      },
      {
        "name":"stats",
        "type":"string"
      },
      {
        "name":"files",
        "type":"string"
      },
      {
        "name":"message_norm",
        "type":"string"
      },
      {
        "name":"language",
        "type":"string"
      },
      {
        "name":"entities",
        "type":"string"
      },
      {
        "name":"classification_level_1",
        "type":"string"
      },
      {
        "name":"classification_level_2",
        "type":"string"
      },
      {
        "name":"list_files",
        "type":"string"
      },
      {
        "name":"num_files",
        "type":"number"
      },
      {
        "name":"patch_content",
        "type":"string"
      },
      {
        "name":"code_diff",
        "type":"string"
      }
    ],
    "primaryKey":[
      "index"
    ],
    "pandas_version":"1.4.0"
  },
  "data":[
    {
      "index":0,
      "vuln_id":"GHSA-h2fw-93qx-vrcq",
      "cwe_id":"{'CWE-89'}",
      "score":8.8,
      "chain":"{'https:\/\/github.com\/moodle\/moodle\/commit\/c2794752ea3cdda2d64a0651da08b2cdf730d9f1'}",
      "dataset":"osv",
      "summary":"SQL Injection in Moodle An SQL injection risk was identified in Badges code relating to configuring criteria. Access to the relevant capability was limited to teachers and managers by default.",
      "published_date":"2022-03-26",
      "chain_len":1,
      "project":"https:\/\/github.com\/moodle\/moodle",
      "commit_href":"https:\/\/github.com\/moodle\/moodle\/commit\/c2794752ea3cdda2d64a0651da08b2cdf730d9f1",
      "commit_sha":"c2794752ea3cdda2d64a0651da08b2cdf730d9f1",
      "patch":"SINGLE",
      "chain_ord":"['c2794752ea3cdda2d64a0651da08b2cdf730d9f1']",
      "before_first_fix_commit":"{'addd4f894d8173ec8ff0ae2212d51a1977e7bcad'}",
      "last_fix_commit":"c2794752ea3cdda2d64a0651da08b2cdf730d9f1",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/03\/2022, 18:02:15",
      "message":"MDL-74074 badges: Ensure profile criteria exists before completion check",
      "author":"Michael Hawkins",
      "comments":null,
      "stats":"{'additions': 23, 'deletions': 6, 'total': 29}",
      "files":"{'badges\/criteria\/award_criteria_profile.php': {'additions': 23, 'deletions': 6, 'changes': 29, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moodle\/moodle\/raw\/c2794752ea3cdda2d64a0651da08b2cdf730d9f1\/badges%2Fcriteria%2Faward_criteria_profile.php', 'patch': '@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {\\n     public $required_param = \\'field\\';\\n     public $optional_params = array();\\n \\n+    \/* @var array The default profile fields allowed to be used as award criteria.\\n+     *\\n+     * Note: This is used instead of user_get_default_fields(), because it is not possible to\\n+     * determine which fields the user can modify.\\n+     *\/\\n+    protected $allowed_default_fields = [\\n+        \\'firstname\\',\\n+        \\'lastname\\',\\n+        \\'email\\',\\n+        \\'address\\',\\n+        \\'phone1\\',\\n+        \\'phone2\\',\\n+        \\'department\\',\\n+        \\'institution\\',\\n+        \\'description\\',\\n+        \\'picture\\',\\n+        \\'city\\',\\n+        \\'country\\',\\n+    ];\\n+\\n     \/**\\n      * Add appropriate new criteria options to the form\\n      *\\n@@ -50,10 +70,7 @@ public function get_options(&$mform) {\\n         $none = true;\\n         $existing = array();\\n         $missing = array();\\n-\\n-        \/\/ Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.\\n-        $dfields = array(\\'firstname\\', \\'lastname\\', \\'email\\', \\'address\\', \\'phone1\\', \\'phone2\\',\\n-                         \\'department\\', \\'institution\\', \\'description\\', \\'picture\\', \\'city\\', \\'country\\');\\n+        $dfields = $this->allowed_default_fields;\\n \\n         \/\/ Get custom fields.\\n         $cfields = array_filter(profile_get_custom_fields(), function($field) {\\n@@ -230,8 +247,8 @@ public function get_completed_criteria_sql() {\\n                 $join .= \" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} \";\\n                 $params[\"fieldid{$idx}\"] = $param[\\'field\\'];\\n                 $whereparts[] = \"uid{$idx}.id IS NOT NULL\";\\n-            } else {\\n-                \/\/ This is a field from {user} table.\\n+            } else if (in_array($param[\\'field\\'], $this->allowed_default_fields)) {\\n+                \/\/ This is a valid field from {user} table.\\n                 if ($param[\\'field\\'] == \\'picture\\') {\\n                     \/\/ The picture field is numeric and requires special handling.\\n                     $whereparts[] = \"u.{$param[\\'field\\']} != 0\";'}}",
      "message_norm":"mdl-74074 badges: ensure profile criteria exists before completion check",
      "language":"en",
      "entities":"[('ensure', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['badges\/criteria\/award_criteria_profile.php'])",
      "num_files":1.0,
      "patch_content":"From c2794752ea3cdda2d64a0651da08b2cdf730d9f1 Mon Sep 17 00:00:00 2001\nFrom: Michael Hawkins <michaelh@moodle.com>\nDate: Fri, 4 Mar 2022 02:02:15 +0800\nSubject: [PATCH] MDL-74074 badges: Ensure profile criteria exists before\n completion check\n\n---\n badges\/criteria\/award_criteria_profile.php | 29 +++++++++++++++++-----\n 1 file changed, 23 insertions(+), 6 deletions(-)\n\ndiff --git a\/badges\/criteria\/award_criteria_profile.php b\/badges\/criteria\/award_criteria_profile.php\nindex b014cf5a92b00..d3ac2f25556f8 100644\n--- a\/badges\/criteria\/award_criteria_profile.php\n+++ b\/badges\/criteria\/award_criteria_profile.php\n@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {\n     public $required_param = 'field';\n     public $optional_params = array();\n \n+    \/* @var array The default profile fields allowed to be used as award criteria.\n+     *\n+     * Note: This is used instead of user_get_default_fields(), because it is not possible to\n+     * determine which fields the user can modify.\n+     *\/\n+    protected $allowed_default_fields = [\n+        'firstname',\n+        'lastname',\n+        'email',\n+        'address',\n+        'phone1',\n+        'phone2',\n+        'department',\n+        'institution',\n+        'description',\n+        'picture',\n+        'city',\n+        'country',\n+    ];\n+\n     \/**\n      * Add appropriate new criteria options to the form\n      *\n@@ -50,10 +70,7 @@ public function get_options(&$mform) {\n         $none = true;\n         $existing = array();\n         $missing = array();\n-\n-        \/\/ Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.\n-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',\n-                         'department', 'institution', 'description', 'picture', 'city', 'country');\n+        $dfields = $this->allowed_default_fields;\n \n         \/\/ Get custom fields.\n         $cfields = array_filter(profile_get_custom_fields(), function($field) {\n@@ -230,8 +247,8 @@ public function get_completed_criteria_sql() {\n                 $join .= \" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} \";\n                 $params[\"fieldid{$idx}\"] = $param['field'];\n                 $whereparts[] = \"uid{$idx}.id IS NOT NULL\";\n-            } else {\n-                \/\/ This is a field from {user} table.\n+            } else if (in_array($param['field'], $this->allowed_default_fields)) {\n+                \/\/ This is a valid field from {user} table.\n                 if ($param['field'] == 'picture') {\n                     \/\/ The picture field is numeric and requires special handling.\n                     $whereparts[] = \"u.{$param['field']} != 0\";",
      "code_diff":"@@ -39,6 +39,26 @@ class award_criteria_profile extends award_criteria {\n     public $required_param = 'field';\n     public $optional_params = array();\n \n+    \/* @var array The default profile fields allowed to be used as award criteria.\n+     *\n+     * Note: This is used instead of user_get_default_fields(), because it is not possible to\n+     * determine which fields the user can modify.\n+     *\/\n+    protected $allowed_default_fields = [\n+        'firstname',\n+        'lastname',\n+        'email',\n+        'address',\n+        'phone1',\n+        'phone2',\n+        'department',\n+        'institution',\n+        'description',\n+        'picture',\n+        'city',\n+        'country',\n+    ];\n+\n     \/**\n      * Add appropriate new criteria options to the form\n      *\n@@ -50,10 +70,7 @@ public function get_options(&$mform) {\n         $none = true;\n         $existing = array();\n         $missing = array();\n-\n-        \/\/ Note: cannot use user_get_default_fields() here because it is not possible to decide which fields user can modify.\n-        $dfields = array('firstname', 'lastname', 'email', 'address', 'phone1', 'phone2',\n-                         'department', 'institution', 'description', 'picture', 'city', 'country');\n+        $dfields = $this->allowed_default_fields;\n \n         \/\/ Get custom fields.\n         $cfields = array_filter(profile_get_custom_fields(), function($field) {\n@@ -230,8 +247,8 @@ public function get_completed_criteria_sql() {\n                 $join .= \" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} \";\n                 $params[\"fieldid{$idx}\"] = $param['field'];\n                 $whereparts[] = \"uid{$idx}.id IS NOT NULL\";\n-            } else {\n-                \/\/ This is a field from {user} table.\n+            } else if (in_array($param['field'], $this->allowed_default_fields)) {\n+                \/\/ This is a valid field from {user} table.\n                 if ($param['field'] == 'picture') {\n                     \/\/ The picture field is numeric and requires special handling.\n                     $whereparts[] = \"u.{$param['field']} != 0\";"
    },
    {
      "index":1,
      "vuln_id":"GHSA-rr8m-29g8-8cgc",
      "cwe_id":"{'CWE-89'}",
      "score":8.8,
      "chain":"{'https:\/\/github.com\/forkcms\/forkcms\/commit\/6aca30e10b4181534f73f96d6e2ebeb45ec15069'}",
      "dataset":"osv",
      "summary":"SQL Injection in Fork CMS Fork CMS is vulnerable to SQL injection through marking blog comments on bulk as spam in versions prior to 5.11.1.",
      "published_date":"2022-03-26",
      "chain_len":1,
      "project":"https:\/\/github.com\/forkcms\/forkcms",
      "commit_href":"https:\/\/github.com\/forkcms\/forkcms\/commit\/6aca30e10b4181534f73f96d6e2ebeb45ec15069",
      "commit_sha":"6aca30e10b4181534f73f96d6e2ebeb45ec15069",
      "patch":"SINGLE",
      "chain_ord":"['6aca30e10b4181534f73f96d6e2ebeb45ec15069']",
      "before_first_fix_commit":"{'1b38e33a98992793e998a937b717355212346993'}",
      "last_fix_commit":"6aca30e10b4181534f73f96d6e2ebeb45ec15069",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/23\/2022, 12:21:47",
      "message":"Prevent sql injection through the ids of the blog comments",
      "author":"Jelmer Prins",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'src\/Backend\/Modules\/Blog\/Engine\/Model.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/forkcms\/forkcms\/raw\/6aca30e10b4181534f73f96d6e2ebeb45ec15069\/src%2FBackend%2FModules%2FBlog%2FEngine%2FModel.php', 'patch': \"@@ -501,7 +501,7 @@ public static function getComments(array $ids): array\\n             'SELECT *\\n              FROM blog_comments AS i\\n              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',\\n-            $ids\\n+            array_map('intval', $ids)\\n         );\\n     }\"}}",
      "message_norm":"prevent sql injection through the ids of the blog comments",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('sql injection', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Backend\/Modules\/Blog\/Engine\/Model.php'])",
      "num_files":1.0,
      "patch_content":"From 6aca30e10b4181534f73f96d6e2ebeb45ec15069 Mon Sep 17 00:00:00 2001\nFrom: Jelmer Prins <jelmer@pageon.be>\nDate: Wed, 23 Mar 2022 13:21:47 +0100\nSubject: [PATCH] Prevent sql injection through the ids of the blog comments\n\n---\n src\/Backend\/Modules\/Blog\/Engine\/Model.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/src\/Backend\/Modules\/Blog\/Engine\/Model.php b\/src\/Backend\/Modules\/Blog\/Engine\/Model.php\nindex 6ee1dce527..129cfdf55a 100644\n--- a\/src\/Backend\/Modules\/Blog\/Engine\/Model.php\n+++ b\/src\/Backend\/Modules\/Blog\/Engine\/Model.php\n@@ -501,7 +501,7 @@ public static function getComments(array $ids): array\n             'SELECT *\n              FROM blog_comments AS i\n              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',\n-            $ids\n+            array_map('intval', $ids)\n         );\n     }",
      "code_diff":"@@ -501,7 +501,7 @@ public static function getComments(array $ids): array\n             'SELECT *\n              FROM blog_comments AS i\n              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',\n-            $ids\n+            array_map('intval', $ids)\n         );\n     }"
    },
    {
      "index":2,
      "vuln_id":"GHSA-gvmf-wcx6-p974",
      "cwe_id":"{'CWE-89'}",
      "score":8.1,
      "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549'}",
      "dataset":"osv",
      "summary":"Improper quoting of columns when using setOrderBy() or setGroupBy() on listing classes in Pimcore ### Impact\nPimcore offers developers listing classes to make querying data easier. This listing classes also allow to order or group the results based on one or more columns which should be quoted by default. \nThe actual issue is that quoting is not done properly in both cases, so there's the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and  so relies on the auto-quoting being done by the listing classes. \n\n##### Example: \n```php\n\/\/ request url: https:\/\/example.com\/foo?groupBy=o_id`; SELECT SLEEP(20);--\n\n$list = new DataObject\\Car\\Listing();\n$list->setOrderKey($request->get('orderBy'));\n$list->setGroupBy($request->get('groupBy'));\n$list->load();\n```\n\n### Patches\nUpgrade to >= 10.4.4 or apply the following patch manually: \nhttps:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### Workarounds\nApply this patch manually: \nhttps:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### References\nhttps:\/\/github.com\/pimcore\/pimcore\/pull\/12444",
      "published_date":"2022-06-22",
      "chain_len":1,
      "project":"https:\/\/github.com\/pimcore\/pimcore",
      "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "commit_sha":"21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "patch":"SINGLE",
      "chain_ord":"['21559c6bf0e4e828d33ff7af6e88caecb5ac6549']",
      "before_first_fix_commit":"{'4c66ac7305ee0a5027ade88020d811761555148b'}",
      "last_fix_commit":"21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/20\/2022, 13:37:31",
      "message":"[Security] SQL Injection in Data Hub GraphQL (#12444)\n\n* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)\r\n\r\n* Update lib\/Model\/Listing\/AbstractListing.php\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\n\r\n* Update lib\/Model\/Listing\/AbstractListing.php\r\n\r\nCo-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\nCo-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>",
      "author":"mcop1",
      "comments":null,
      "stats":"{'additions': 16, 'deletions': 3, 'total': 19}",
      "files":"{'lib\/Model\/Listing\/AbstractListing.php': {'additions': 16, 'deletions': 3, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549\/lib%2FModel%2FListing%2FAbstractListing.php', 'patch': '@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)\\n                 if ($quote === false) {\\n                     $this->orderKey[] = $o;\\n                 } elseif ($this->isValidOrderKey($o)) {\\n-                    $this->orderKey[] = \\'`\\' . $o . \\'`\\';\\n+                    $this->orderKey[] = $this->quoteIdentifier($o);\\n                 }\\n             }\\n         }\\n@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)\\n         if ($groupBy) {\\n             $this->groupBy = $groupBy;\\n \\n-            if ($qoute && strpos($groupBy, \\'`\\') !== 0) {\\n-                $this->groupBy = \\'`\\' . $this->groupBy . \\'`\\';\\n+          if ($qoute) {\\n+                $quotedParts = [];\\n+                $parts = explode(\",\", trim($groupBy, \\'`\\'));\\n+                foreach($parts as $part) {\\n+                    $quotedParts[] = $this->quoteIdentifier(trim($part));\\n+                }\\n+\\n+                $this->groupBy = implode(\", \", $quotedParts);\\n             }\\n         }\\n \\n@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)\\n         return $this;\\n     }\\n \\n+    public function quoteIdentifier(string $value): string\\n+    {\\n+        $db = Db::get();\\n+\\n+        return $db->quoteIdentifier($value);\\n+    }\\n+\\n     \/**\\n      * @param mixed $value\\n      * @param int|null $type'}}",
      "message_norm":"[security] sql injection in data hub graphql (#12444)\n\n* [security] sql injection in data hub graphql (abstractlisting)\r\n\r\n* update lib\/model\/listing\/abstractlisting.php\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\n\r\n* update lib\/model\/listing\/abstractlisting.php\r\n\r\nco-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\nco-authored-by: bernhard rusch <brusch@users.noreply.github.com>",
      "language":"en",
      "entities":"[('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('#12444', 'ISSUE', ''), ('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/Model\/Listing\/AbstractListing.php'])",
      "num_files":1.0,
      "patch_content":"From 21559c6bf0e4e828d33ff7af6e88caecb5ac6549 Mon Sep 17 00:00:00 2001\nFrom: mcop1 <89011527+mcop1@users.noreply.github.com>\nDate: Mon, 20 Jun 2022 15:37:31 +0200\nSubject: [PATCH] [Security] SQL Injection in Data Hub GraphQL (#12444)\n\n* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)\n\n* Update lib\/Model\/Listing\/AbstractListing.php\n\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\n\n* Update lib\/Model\/Listing\/AbstractListing.php\n\nCo-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\n\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\nCo-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>\n---\n lib\/Model\/Listing\/AbstractListing.php | 19 ++++++++++++++++---\n 1 file changed, 16 insertions(+), 3 deletions(-)\n\ndiff --git a\/lib\/Model\/Listing\/AbstractListing.php b\/lib\/Model\/Listing\/AbstractListing.php\nindex 1683a2e2734..66a4728635f 100644\n--- a\/lib\/Model\/Listing\/AbstractListing.php\n+++ b\/lib\/Model\/Listing\/AbstractListing.php\n@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)\n                 if ($quote === false) {\n                     $this->orderKey[] = $o;\n                 } elseif ($this->isValidOrderKey($o)) {\n-                    $this->orderKey[] = '`' . $o . '`';\n+                    $this->orderKey[] = $this->quoteIdentifier($o);\n                 }\n             }\n         }\n@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)\n         if ($groupBy) {\n             $this->groupBy = $groupBy;\n \n-            if ($qoute && strpos($groupBy, '`') !== 0) {\n-                $this->groupBy = '`' . $this->groupBy . '`';\n+          if ($qoute) {\n+                $quotedParts = [];\n+                $parts = explode(\",\", trim($groupBy, '`'));\n+                foreach($parts as $part) {\n+                    $quotedParts[] = $this->quoteIdentifier(trim($part));\n+                }\n+\n+                $this->groupBy = implode(\", \", $quotedParts);\n             }\n         }\n \n@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)\n         return $this;\n     }\n \n+    public function quoteIdentifier(string $value): string\n+    {\n+        $db = Db::get();\n+\n+        return $db->quoteIdentifier($value);\n+    }\n+\n     \/**\n      * @param mixed $value\n      * @param int|null $type",
      "code_diff":"@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)\n                 if ($quote === false) {\n                     $this->orderKey[] = $o;\n                 } elseif ($this->isValidOrderKey($o)) {\n-                    $this->orderKey[] = '`' . $o . '`';\n+                    $this->orderKey[] = $this->quoteIdentifier($o);\n                 }\n             }\n         }\n@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)\n         if ($groupBy) {\n             $this->groupBy = $groupBy;\n \n-            if ($qoute && strpos($groupBy, '`') !== 0) {\n-                $this->groupBy = '`' . $this->groupBy . '`';\n+          if ($qoute) {\n+                $quotedParts = [];\n+                $parts = explode(\",\", trim($groupBy, '`'));\n+                foreach($parts as $part) {\n+                    $quotedParts[] = $this->quoteIdentifier(trim($part));\n+                }\n+\n+                $this->groupBy = implode(\", \", $quotedParts);\n             }\n         }\n \n@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)\n         return $this;\n     }\n \n+    public function quoteIdentifier(string $value): string\n+    {\n+        $db = Db::get();\n+\n+        return $db->quoteIdentifier($value);\n+    }\n+\n     \/**\n      * @param mixed $value\n      * @param int|null $type"
    },
    {
      "index":3,
      "vuln_id":"GHSA-hrgx-p36p-89q4",
      "cwe_id":"{'CWE-89', 'CWE-95'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804'}",
      "dataset":"osv",
      "summary":"PrestaShop eval injection possible if shop vulnerable to SQL injection ### Impact\nEval injection possible if the shop is vulnerable to an SQL injection.\n\n### Patches\nThe problem is fixed in version 1.7.8.7\n\n### Workarounds\nDelete the MySQL Smarty cache feature by removing these lines in the file `config\/smarty.config.inc.php` lines 43-46 (PrestaShop 1.7) or 40-43 (PrestaShop 1.6):\n```php\nif (Configuration::get('PS_SMARTY_CACHING_TYPE') == 'mysql') {\n    include _PS_CLASS_DIR_.'Smarty\/SmartyCacheResourceMysql.php';\n    $smarty->caching_type = 'mysql';\n}\n```",
      "published_date":"2022-07-29",
      "chain_len":1,
      "project":"https:\/\/github.com\/PrestaShop\/PrestaShop",
      "commit_href":"https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
      "commit_sha":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
      "patch":"SINGLE",
      "chain_ord":"['b6d96e7c2a4e35a44e96ffbcdfd34439b56af804']",
      "before_first_fix_commit":"{'dc8dc1faef7185ad30fc8dcb0653524d9bfb7c82', 'f342765697f5f980e4c6bb537f6575bf5e657077'}",
      "last_fix_commit":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/25\/2022, 08:51:31",
      "message":"Merge pull request from GHSA-hrgx-p36p-89q4\n\nCrypt\/decrypt smarty cache in DB",
      "author":"atomiix",
      "comments":null,
      "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
      "files":"{'classes\/Smarty\/SmartyCacheResourceMysql.php': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/PrestaShop\/raw\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804\/classes%2FSmarty%2FSmartyCacheResourceMysql.php', 'patch': '@@ -25,6 +25,14 @@\\n  *\/\\n class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom\\n {\\n+    \/** @var PhpEncryption *\/\\n+    private $phpEncryption;\\n+\\n+    public function __construct()\\n+    {\\n+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);\\n+    }\\n+\\n     \/**\\n      * fetch cached content and its modification time from data source.\\n      *\\n@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)\\n     {\\n         $row = Db::getInstance()->getRow(\\'SELECT modified, content FROM \\' . _DB_PREFIX_ . \\'smarty_cache WHERE id_smarty_cache = \"\\' . pSQL($id, true) . \\'\"\\');\\n         if ($row) {\\n-            $content = $row[\\'content\\'];\\n+            $content = $this->phpEncryption->decrypt($row[\\'content\\']);\\n             $mtime = strtotime($row[\\'modified\\']);\\n         } else {\\n             $content = null;\\n@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)\\n \\t\\t\\t\"\\' . pSQL($id, true) . \\'\",\\n \\t\\t\\t\"\\' . pSQL(sha1($name)) . \\'\",\\n \\t\\t\\t\"\\' . pSQL($cache_id, true) . \\'\",\\n-\\t\\t\\t\"\\' . pSQL($content, true) . \\'\"\\n+\\t\\t\\t\"\\' . $this->phpEncryption->encrypt($content) . \\'\"\\n \\t\\t)\\');\\n \\n         return (bool) Db::getInstance()->Affected_Rows();'}}",
      "message_norm":"merge pull request from ghsa-hrgx-p36p-89q4\n\ncrypt\/decrypt smarty cache in db",
      "language":"en",
      "entities":"[('ghsa-hrgx-p36p-89q4', 'VULNID', 'GHSA'), ('crypt', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['classes\/Smarty\/SmartyCacheResourceMysql.php'])",
      "num_files":1.0,
      "patch_content":"From f342765697f5f980e4c6bb537f6575bf5e657077 Mon Sep 17 00:00:00 2001\nFrom: atomiix <thomas.baccelli@prestashop.com>\nDate: Wed, 20 Jul 2022 12:44:20 +0200\nSubject: [PATCH] Crypt\/decrypt smarty cache in DB\n\n---\n classes\/Smarty\/SmartyCacheResourceMysql.php | 12 ++++++++++--\n 1 file changed, 10 insertions(+), 2 deletions(-)\n\ndiff --git a\/classes\/Smarty\/SmartyCacheResourceMysql.php b\/classes\/Smarty\/SmartyCacheResourceMysql.php\nindex d3f684624649b..b4f928d485109 100644\n--- a\/classes\/Smarty\/SmartyCacheResourceMysql.php\n+++ b\/classes\/Smarty\/SmartyCacheResourceMysql.php\n@@ -25,6 +25,14 @@\n  *\/\n class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom\n {\n+    \/** @var PhpEncryption *\/\n+    private $phpEncryption;\n+\n+    public function __construct()\n+    {\n+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);\n+    }\n+\n     \/**\n      * fetch cached content and its modification time from data source.\n      *\n@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)\n     {\n         $row = Db::getInstance()->getRow('SELECT modified, content FROM ' . _DB_PREFIX_ . 'smarty_cache WHERE id_smarty_cache = \"' . pSQL($id, true) . '\"');\n         if ($row) {\n-            $content = $row['content'];\n+            $content = $this->phpEncryption->decrypt($row['content']);\n             $mtime = strtotime($row['modified']);\n         } else {\n             $content = null;\n@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)\n \t\t\t\"' . pSQL($id, true) . '\",\n \t\t\t\"' . pSQL(sha1($name)) . '\",\n \t\t\t\"' . pSQL($cache_id, true) . '\",\n-\t\t\t\"' . pSQL($content, true) . '\"\n+\t\t\t\"' . $this->phpEncryption->encrypt($content) . '\"\n \t\t)');\n \n         return (bool) Db::getInstance()->Affected_Rows();",
      "code_diff":"@@ -25,6 +25,14 @@\n  *\/\n class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom\n {\n+    \/** @var PhpEncryption *\/\n+    private $phpEncryption;\n+\n+    public function __construct()\n+    {\n+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);\n+    }\n+\n     \/**\n      * fetch cached content and its modification time from data source.\n      *\n@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)\n     {\n         $row = Db::getInstance()->getRow('SELECT modified, content FROM ' . _DB_PREFIX_ . 'smarty_cache WHERE id_smarty_cache = \"' . pSQL($id, true) . '\"');\n         if ($row) {\n-            $content = $row['content'];\n+            $content = $this->phpEncryption->decrypt($row['content']);\n             $mtime = strtotime($row['modified']);\n         } else {\n             $content = null;\n@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)\n \t\t\t\"' . pSQL($id, true) . '\",\n \t\t\t\"' . pSQL(sha1($name)) . '\",\n \t\t\t\"' . pSQL($cache_id, true) . '\",\n-\t\t\t\"' . pSQL($content, true) . '\"\n+\t\t\t\"' . $this->phpEncryption->encrypt($content) . '\"\n \t\t)');\n \n         return (bool) Db::getInstance()->Affected_Rows();"
    },
    {
      "index":4,
      "vuln_id":"GHSA-7hmh-8gwv-mfvq",
      "cwe_id":"{'CWE-89'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/apache\/kylin\/commit\/e373c64c96a54a7abfe4bccb82e8feb60db04749'}",
      "dataset":"osv",
      "summary":"SQL Injection in Kylin Kylin has some restful apis which will concatenate SQLs with the user input string, a user is likely to be able to run malicious database queries.",
      "published_date":"2020-07-27",
      "chain_len":1,
      "project":"https:\/\/github.com\/apache\/kylin",
      "commit_href":"https:\/\/github.com\/apache\/kylin\/commit\/e373c64c96a54a7abfe4bccb82e8feb60db04749",
      "commit_sha":"e373c64c96a54a7abfe4bccb82e8feb60db04749",
      "patch":"SINGLE",
      "chain_ord":"['e373c64c96a54a7abfe4bccb82e8feb60db04749']",
      "before_first_fix_commit":"{'ebfc745dd681d7e0c129ded50bd50ff509d2a393'}",
      "last_fix_commit":"e373c64c96a54a7abfe4bccb82e8feb60db04749",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/07\/2020, 12:22:59",
      "message":"Fix sql injection issue",
      "author":"nichunen",
      "comments":null,
      "stats":"{'additions': 51, 'deletions': 30, 'total': 81}",
      "files":"{'server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java': {'additions': 51, 'deletions': 30, 'changes': 81, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/kylin\/raw\/e373c64c96a54a7abfe4bccb82e8feb60db04749\/server-base%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fkylin%2Frest%2Fservice%2FCubeService.java', 'patch': '@@ -71,6 +71,7 @@\\n import org.apache.kylin.metadata.project.RealizationEntry;\\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\\n import org.apache.kylin.metadata.realization.RealizationType;\\n+import org.apache.kylin.metrics.MetricsManager;\\n import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\\n import org.apache.kylin.rest.constant.Constant;\\n import org.apache.kylin.rest.exception.BadRequestException;\\n@@ -79,6 +80,7 @@\\n import org.apache.kylin.rest.msg.Message;\\n import org.apache.kylin.rest.msg.MsgPicker;\\n import org.apache.kylin.rest.request.MetricsRequest;\\n+import org.apache.kylin.rest.request.PrepareSqlRequest;\\n import org.apache.kylin.rest.response.CubeInstanceResponse;\\n import org.apache.kylin.rest.response.CuboidTreeResponse;\\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\\n@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE\\n \\n         hr = new HBaseResponse();\\n         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);\\n-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\\n+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE\\n+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\\n             try {\\n                 logger.debug(\"Loading HTable info \" + cubeName + \", \" + tableName);\\n \\n@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept\\n             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());\\n             for (CubeSegment seg : toRemoveSegs) {\\n                 toDropHTables.add(seg.getStorageLocationIdentifier());\\n-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));\\n+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),\\n+                        seg.getLastBuildJobID()));\\n             }\\n \\n             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);\\n@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {\\n     }\\n \\n     \/\/Don\\'t merge the job that has been discarded manually before\\n-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {\\n+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,\\n+            SegmentRange offsets) {\\n         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);\\n         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());\\n-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));\\n+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,\\n+                EnumSet.of(ExecutableState.DISCARDED));\\n         for (CubingJob cubingJob : jobInstanceList) {\\n             if (cubingJob.getSegmentName().equals(segmentName)) {\\n                 logger.debug(\"Merge job {} has been discarded before, will not merge.\", segmentName);\\n@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube\\n         return false;\\n     }\\n \\n-\\n     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {\\n         Message msg = MsgPicker.getMsg();\\n \\n@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {\\n         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), \"cube\");\\n     }\\n \\n-    private class HTableInfoSyncListener extends Broadcaster.Listener {\\n-        @Override\\n-        public void onClearAll(Broadcaster broadcaster) throws IOException {\\n-            htableInfoCache.invalidateAll();\\n-        }\\n-\\n-        @Override\\n-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\\n-                throws IOException {\\n-            String cubeName = cacheKey;\\n-            String keyPrefix = cubeName + \"\/\";\\n-            for (String k : htableInfoCache.asMap().keySet()) {\\n-                if (k.startsWith(keyPrefix))\\n-                    htableInfoCache.invalidate(k);\\n-            }\\n-        }\\n-    }\\n-\\n     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {\\n         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));\\n     }\\n@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\\n         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L\\n                 : queryMatchMap.get(cuboidId);\\n         boolean ifExist = currentCuboidSet.contains(cuboidId);\\n-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);\\n+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);\\n \\n         NodeInfo node = new NodeInfo();\\n         node.setId(cuboidId);\\n@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo\\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\\n         String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" \/\/\\n                 + \" from \" + table\/\/\\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = \\'\" + cubeName + \"\\'\" \/\/\\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\\n                 + \" group by \" + cuboidColumn;\\n-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();\\n+\\n+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);\\n         return formatQueryCount(orgHitFrequency);\\n     }\\n \\n@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub\\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\\n         String sql = \"select \" + cuboidSource + \", \" + cuboidTgt + \", avg(\" + aggCount + \"), avg(\" + returnCount + \")\"\/\/\\n                 + \" from \" + table \/\/\\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = \\'\" + cubeName + \"\\' \" \/\/\\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\\n                 + \" group by \" + cuboidSource + \", \" + cuboidTgt;\\n-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();\\n+\\n+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);\\n         return formatRollingUpStats(orgRollingUpCount);\\n     }\\n \\n@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\\n         String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" \/\/\\n                 + \" from \" + table \/\/\\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = \\'\" + cubeName + \"\\'\" \/\/\\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\\n                 + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" \/\/\\n                 + \" group by \" + cuboidSource;\\n-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();\\n+\\n+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);\\n         return formatQueryCount(orgMatchHitFrequency);\\n     }\\n \\n+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {\\n+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();\\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\\n+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];\\n+        params[0] = new PrepareSqlRequest.StateParam();\\n+        params[0].setClassName(\"java.lang.String\");\\n+        params[0].setValue(cubeName);\\n+        sqlRequest.setParams(params);\\n+        sqlRequest.setSql(sql);\\n+\\n+        return queryService.doQueryWithCache(sqlRequest, false).getResults();\\n+    }\\n+\\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\\n             + \" or hasPermission(#cube, \\'ADMINISTRATION\\') or hasPermission(#cube, \\'MANAGEMENT\\')\")\\n     public void migrateCube(CubeInstance cube, String projectName) {\\n@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {\\n             throw new InternalErrorException(\"Failed to perform one-click migrating\", e);\\n         }\\n     }\\n+\\n+    private class HTableInfoSyncListener extends Broadcaster.Listener {\\n+        @Override\\n+        public void onClearAll(Broadcaster broadcaster) throws IOException {\\n+            htableInfoCache.invalidateAll();\\n+        }\\n+\\n+        @Override\\n+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\\n+                throws IOException {\\n+            String cubeName = cacheKey;\\n+            String keyPrefix = cubeName + \"\/\";\\n+            for (String k : htableInfoCache.asMap().keySet()) {\\n+                if (k.startsWith(keyPrefix))\\n+                    htableInfoCache.invalidate(k);\\n+            }\\n+        }\\n+    }\\n }'}}",
      "message_norm":"fix sql injection issue",
      "language":"fr",
      "entities":"[('fix', 'ACTION', ''), ('sql injection', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java'])",
      "num_files":1.0,
      "patch_content":"From e373c64c96a54a7abfe4bccb82e8feb60db04749 Mon Sep 17 00:00:00 2001\nFrom: nichunen <nic@apache.org>\nDate: Fri, 7 Feb 2020 20:22:59 +0800\nSubject: [PATCH] Fix sql injection issue\n\n---\n ...\/kylin\/rest\/service\/CubeService.java       | 81 ++++++++++++-------\n 1 file changed, 51 insertions(+), 30 deletions(-)\n\ndiff --git a\/server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java b\/server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java\nindex 4fb258029cc..11b06a119f4 100644\n--- a\/server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java\n+++ b\/server-base\/src\/main\/java\/org\/apache\/kylin\/rest\/service\/CubeService.java\n@@ -71,6 +71,7 @@\n import org.apache.kylin.metadata.project.RealizationEntry;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n import org.apache.kylin.metadata.realization.RealizationType;\n+import org.apache.kylin.metrics.MetricsManager;\n import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.constant.Constant;\n import org.apache.kylin.rest.exception.BadRequestException;\n@@ -79,6 +80,7 @@\n import org.apache.kylin.rest.msg.Message;\n import org.apache.kylin.rest.msg.MsgPicker;\n import org.apache.kylin.rest.request.MetricsRequest;\n+import org.apache.kylin.rest.request.PrepareSqlRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\n@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE\n \n         hr = new HBaseResponse();\n         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);\n-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE\n+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n             try {\n                 logger.debug(\"Loading HTable info \" + cubeName + \", \" + tableName);\n \n@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept\n             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());\n             for (CubeSegment seg : toRemoveSegs) {\n                 toDropHTables.add(seg.getStorageLocationIdentifier());\n-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));\n+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),\n+                        seg.getLastBuildJobID()));\n             }\n \n             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);\n@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {\n     }\n \n     \/\/Don't merge the job that has been discarded manually before\n-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {\n+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,\n+            SegmentRange offsets) {\n         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);\n         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());\n-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));\n+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,\n+                EnumSet.of(ExecutableState.DISCARDED));\n         for (CubingJob cubingJob : jobInstanceList) {\n             if (cubingJob.getSegmentName().equals(segmentName)) {\n                 logger.debug(\"Merge job {} has been discarded before, will not merge.\", segmentName);\n@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube\n         return false;\n     }\n \n-\n     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {\n         Message msg = MsgPicker.getMsg();\n \n@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {\n         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), \"cube\");\n     }\n \n-    private class HTableInfoSyncListener extends Broadcaster.Listener {\n-        @Override\n-        public void onClearAll(Broadcaster broadcaster) throws IOException {\n-            htableInfoCache.invalidateAll();\n-        }\n-\n-        @Override\n-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n-                throws IOException {\n-            String cubeName = cacheKey;\n-            String keyPrefix = cubeName + \"\/\";\n-            for (String k : htableInfoCache.asMap().keySet()) {\n-                if (k.startsWith(keyPrefix))\n-                    htableInfoCache.invalidate(k);\n-            }\n-        }\n-    }\n-\n     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {\n         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));\n     }\n@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\n         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L\n                 : queryMatchMap.get(cuboidId);\n         boolean ifExist = currentCuboidSet.contains(cuboidId);\n-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);\n+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);\n \n         NodeInfo node = new NodeInfo();\n         node.setId(cuboidId);\n@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" \/\/\n                 + \" from \" + table\/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" group by \" + cuboidColumn;\n-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgHitFrequency);\n     }\n \n@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", \" + cuboidTgt + \", avg(\" + aggCount + \"), avg(\" + returnCount + \")\"\/\/\n                 + \" from \" + table \/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" group by \" + cuboidSource + \", \" + cuboidTgt;\n-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);\n         return formatRollingUpStats(orgRollingUpCount);\n     }\n \n@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" \/\/\n                 + \" from \" + table \/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" \/\/\n                 + \" group by \" + cuboidSource;\n-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgMatchHitFrequency);\n     }\n \n+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {\n+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];\n+        params[0] = new PrepareSqlRequest.StateParam();\n+        params[0].setClassName(\"java.lang.String\");\n+        params[0].setValue(cubeName);\n+        sqlRequest.setParams(params);\n+        sqlRequest.setSql(sql);\n+\n+        return queryService.doQueryWithCache(sqlRequest, false).getResults();\n+    }\n+\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public void migrateCube(CubeInstance cube, String projectName) {\n@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {\n             throw new InternalErrorException(\"Failed to perform one-click migrating\", e);\n         }\n     }\n+\n+    private class HTableInfoSyncListener extends Broadcaster.Listener {\n+        @Override\n+        public void onClearAll(Broadcaster broadcaster) throws IOException {\n+            htableInfoCache.invalidateAll();\n+        }\n+\n+        @Override\n+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n+                throws IOException {\n+            String cubeName = cacheKey;\n+            String keyPrefix = cubeName + \"\/\";\n+            for (String k : htableInfoCache.asMap().keySet()) {\n+                if (k.startsWith(keyPrefix))\n+                    htableInfoCache.invalidate(k);\n+            }\n+        }\n+    }\n }",
      "code_diff":"@@ -71,6 +71,7 @@\n import org.apache.kylin.metadata.project.RealizationEntry;\n import org.apache.kylin.metadata.realization.RealizationStatusEnum;\n import org.apache.kylin.metadata.realization.RealizationType;\n+import org.apache.kylin.metrics.MetricsManager;\n import org.apache.kylin.metrics.property.QueryCubePropertyEnum;\n import org.apache.kylin.rest.constant.Constant;\n import org.apache.kylin.rest.exception.BadRequestException;\n@@ -79,6 +80,7 @@\n import org.apache.kylin.rest.msg.Message;\n import org.apache.kylin.rest.msg.MsgPicker;\n import org.apache.kylin.rest.request.MetricsRequest;\n+import org.apache.kylin.rest.request.PrepareSqlRequest;\n import org.apache.kylin.rest.response.CubeInstanceResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse;\n import org.apache.kylin.rest.response.CuboidTreeResponse.NodeInfo;\n@@ -544,7 +546,8 @@ public HBaseResponse getHTableInfo(String cubeName, String tableName) throws IOE\n \n         hr = new HBaseResponse();\n         CubeInstance cube = CubeManager.getInstance(getConfig()).getCube(cubeName);\n-        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n+        if (cube.getStorageType() == IStorageAware.ID_HBASE || cube.getStorageType() == IStorageAware.ID_SHARDED_HBASE\n+                || cube.getStorageType() == IStorageAware.ID_REALTIME_AND_HBASE) {\n             try {\n                 logger.debug(\"Loading HTable info \" + cubeName + \", \" + tableName);\n \n@@ -633,7 +636,8 @@ private void cleanSegmentStorage(List<CubeSegment> toRemoveSegs) throws IOExcept\n             List<String> toDelHDFSPaths = Lists.newArrayListWithCapacity(toRemoveSegs.size());\n             for (CubeSegment seg : toRemoveSegs) {\n                 toDropHTables.add(seg.getStorageLocationIdentifier());\n-                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(), seg.getLastBuildJobID()));\n+                toDelHDFSPaths.add(JobBuilderSupport.getJobWorkingDir(seg.getConfig().getHdfsWorkingDirectory(),\n+                        seg.getLastBuildJobID()));\n             }\n \n             StorageCleanUtil.dropHTables(new HBaseAdmin(HBaseConnection.getCurrentHBaseConfiguration()), toDropHTables);\n@@ -763,10 +767,12 @@ public String mergeCubeSegment(String cubeName) {\n     }\n \n     \/\/Don't merge the job that has been discarded manually before\n-    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName, SegmentRange offsets) {\n+    private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cubeName, String projectName,\n+            SegmentRange offsets) {\n         SegmentRange.TSRange tsRange = new SegmentRange.TSRange((Long) offsets.start.v, (Long) offsets.end.v);\n         String segmentName = CubeSegment.makeSegmentName(tsRange, null, cubeInstance.getModel());\n-        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName, EnumSet.of(ExecutableState.DISCARDED));\n+        final List<CubingJob> jobInstanceList = jobService.listJobsByRealizationName(cubeName, projectName,\n+                EnumSet.of(ExecutableState.DISCARDED));\n         for (CubingJob cubingJob : jobInstanceList) {\n             if (cubingJob.getSegmentName().equals(segmentName)) {\n                 logger.debug(\"Merge job {} has been discarded before, will not merge.\", segmentName);\n@@ -777,7 +783,6 @@ private boolean isMergingJobBeenDiscarded(CubeInstance cubeInstance, String cube\n         return false;\n     }\n \n-\n     public void validateCubeDesc(CubeDesc desc, boolean isDraft) {\n         Message msg = MsgPicker.getMsg();\n \n@@ -931,24 +936,6 @@ public void afterPropertiesSet() throws Exception {\n         Broadcaster.getInstance(getConfig()).registerStaticListener(new HTableInfoSyncListener(), \"cube\");\n     }\n \n-    private class HTableInfoSyncListener extends Broadcaster.Listener {\n-        @Override\n-        public void onClearAll(Broadcaster broadcaster) throws IOException {\n-            htableInfoCache.invalidateAll();\n-        }\n-\n-        @Override\n-        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n-                throws IOException {\n-            String cubeName = cacheKey;\n-            String keyPrefix = cubeName + \"\/\";\n-            for (String k : htableInfoCache.asMap().keySet()) {\n-                if (k.startsWith(keyPrefix))\n-                    htableInfoCache.invalidate(k);\n-            }\n-        }\n-    }\n-\n     public CubeInstanceResponse createCubeInstanceResponse(CubeInstance cube) {\n         return new CubeInstanceResponse(cube, projectService.getProjectOfCube(cube.getName()));\n     }\n@@ -995,7 +982,7 @@ private NodeInfo generateNodeInfo(long cuboidId, int dimensionCount, long cubeQu\n         long queryExactlyMatchCount = queryMatchMap == null || queryMatchMap.get(cuboidId) == null ? 0L\n                 : queryMatchMap.get(cuboidId);\n         boolean ifExist = currentCuboidSet.contains(cuboidId);\n-        long rowCount = rowCountMap == null ? 0L : rowCountMap.get(cuboidId);\n+        long rowCount = (rowCountMap == null || rowCountMap.size() == 0) ? 0L : rowCountMap.get(cuboidId);\n \n         NodeInfo node = new NodeInfo();\n         node.setId(cuboidId);\n@@ -1044,9 +1031,10 @@ public Map<Long, Long> getCuboidHitFrequency(String cubeName, boolean isCuboidSo\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidColumn + \", sum(\" + hitMeasure + \")\" \/\/\n                 + \" from \" + table\/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" group by \" + cuboidColumn;\n-        List<List<String>> orgHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgHitFrequency);\n     }\n \n@@ -1058,9 +1046,10 @@ public Map<Long, Map<Long, Pair<Long, Long>>> getCuboidRollingUpStats(String cub\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", \" + cuboidTgt + \", avg(\" + aggCount + \"), avg(\" + returnCount + \")\"\/\/\n                 + \" from \" + table \/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"' \" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" group by \" + cuboidSource + \", \" + cuboidTgt;\n-        List<List<String>> orgRollingUpCount = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgRollingUpCount = getPrepareQueryResult(cubeName, sql);\n         return formatRollingUpStats(orgRollingUpCount);\n     }\n \n@@ -1070,13 +1059,27 @@ public Map<Long, Long> getCuboidQueryMatchCount(String cubeName) {\n         String table = getMetricsManager().getSystemTableFromSubject(getConfig().getKylinMetricsSubjectQueryCube());\n         String sql = \"select \" + cuboidSource + \", sum(\" + hitMeasure + \")\" \/\/\n                 + \" from \" + table \/\/\n-                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = '\" + cubeName + \"'\" \/\/\n+                + \" where \" + QueryCubePropertyEnum.CUBE.toString() + \" = ?\" \/\/\n                 + \" and \" + QueryCubePropertyEnum.IF_MATCH.toString() + \" = true\" \/\/\n                 + \" group by \" + cuboidSource;\n-        List<List<String>> orgMatchHitFrequency = queryService.querySystemCube(sql).getResults();\n+\n+        List<List<String>> orgMatchHitFrequency = getPrepareQueryResult(cubeName, sql);\n         return formatQueryCount(orgMatchHitFrequency);\n     }\n \n+    private List<List<String>> getPrepareQueryResult(String cubeName, String sql) {\n+        PrepareSqlRequest sqlRequest = new PrepareSqlRequest();\n+        sqlRequest.setProject(MetricsManager.SYSTEM_PROJECT);\n+        PrepareSqlRequest.StateParam[] params = new PrepareSqlRequest.StateParam[1];\n+        params[0] = new PrepareSqlRequest.StateParam();\n+        params[0].setClassName(\"java.lang.String\");\n+        params[0].setValue(cubeName);\n+        sqlRequest.setParams(params);\n+        sqlRequest.setSql(sql);\n+\n+        return queryService.doQueryWithCache(sqlRequest, false).getResults();\n+    }\n+\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public void migrateCube(CubeInstance cube, String projectName) {\n@@ -1114,4 +1117,22 @@ public void migrateCube(CubeInstance cube, String projectName) {\n             throw new InternalErrorException(\"Failed to perform one-click migrating\", e);\n         }\n     }\n+\n+    private class HTableInfoSyncListener extends Broadcaster.Listener {\n+        @Override\n+        public void onClearAll(Broadcaster broadcaster) throws IOException {\n+            htableInfoCache.invalidateAll();\n+        }\n+\n+        @Override\n+        public void onEntityChange(Broadcaster broadcaster, String entity, Broadcaster.Event event, String cacheKey)\n+                throws IOException {\n+            String cubeName = cacheKey;\n+            String keyPrefix = cubeName + \"\/\";\n+            for (String k : htableInfoCache.asMap().keySet()) {\n+                if (k.startsWith(keyPrefix))\n+                    htableInfoCache.invalidate(k);\n+            }\n+        }\n+    }\n }"
    },
    {
      "index":5,
      "vuln_id":"GHSA-q9p4-qfc8-fvpp",
      "cwe_id":"{'CWE-89'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/catfan\/Medoo\/commit\/659864b393961bf224bba1efc03b7dcbed7de533'}",
      "dataset":"osv",
      "summary":"SQL Injection in medoo columnQuote in medoo before 1.7.5 allows remote attackers to perform a SQL Injection due to improper escaping.",
      "published_date":"2021-10-12",
      "chain_len":1,
      "project":"https:\/\/github.com\/catfan\/Medoo",
      "commit_href":"https:\/\/github.com\/catfan\/Medoo\/commit\/659864b393961bf224bba1efc03b7dcbed7de533",
      "commit_sha":"659864b393961bf224bba1efc03b7dcbed7de533",
      "patch":"SINGLE",
      "chain_ord":"['659864b393961bf224bba1efc03b7dcbed7de533']",
      "before_first_fix_commit":"{'b3f05edf256d63ec3cfd31d6a078c564daf9863d'}",
      "last_fix_commit":"659864b393961bf224bba1efc03b7dcbed7de533",
      "chain_ord_pos":1.0,
      "commit_datetime":"10\/11\/2019, 15:50:40",
      "message":"[fix] Fix columnQuote for \bsecurity issue reported by Snyk",
      "author":"Angel Lai",
      "comments":"{'com_1': {'author': 'jfcherng', 'datetime': '10\/12\/2019, 11:57:36', 'body': \"It's perfect valid to use `_` in a column name and I believe it's used quite often. This change would make `v1.7.4` literally unusable for most of people.\\r\\n\\r\\nNot sure about other SQL standard. For MySQL, it's valid to use some of UTF-8 chars as the column name.\\r\\nhttps:\/\/dev.mysql.com\/doc\/refman\/8.0\/en\/identifiers.html\"}, 'com_2': {'author': 'catfan', 'datetime': '10\/12\/2019, 13:18:09', 'body': \"Thanks for this great spot. The `_` should be added. Although it's possible to use UTF-8 chars for column name, it may have some problem for some databases. Using `a-zA-Z0-9_` is enough for most case.\"}}",
      "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
      "files":"{'src\/Medoo.php': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/catfan\/Medoo\/raw\/659864b393961bf224bba1efc03b7dcbed7de533\/src%2FMedoo.php', 'patch': '@@ -500,6 +500,11 @@ protected function typeMap($value, $type)\\n \\n \\tprotected function columnQuote($string)\\n \\t{\\n+\\t\\tif (!preg_match(\\'\/^[a-zA-Z0-9]+(\\\\.?[a-zA-Z0-9]+)?$\/i\\', $string))\\n+\\t\\t{\\n+\\t\\t\\tthrow new InvalidArgumentException(\"Incorrect column name \\\\\"$string\\\\\"\");\\n+\\t\\t}\\n+\\n \\t\\tif (strpos($string, \\'.\\') !== false)\\n \\t\\t{\\n \\t\\t\\treturn \\'\"\\' . $this->prefix . str_replace(\\'.\\', \\'\".\"\\', $string) . \\'\"\\';'}}",
      "message_norm":"[fix] fix columnquote for \bsecurity issue reported by snyk",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('fix', 'ACTION', ''), ('\\x08security', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Medoo.php'])",
      "num_files":1.0,
      "patch_content":"From 659864b393961bf224bba1efc03b7dcbed7de533 Mon Sep 17 00:00:00 2001\nFrom: Angel Lai <catfan.me@gmail.com>\nDate: Fri, 11 Oct 2019 23:50:40 +0800\nSubject: [PATCH] [fix] Fix columnQuote for \bsecurity issue reported by Snyk\n\n---\n src\/Medoo.php | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a\/src\/Medoo.php b\/src\/Medoo.php\nindex 6d68f4c2..478e0a87 100644\n--- a\/src\/Medoo.php\n+++ b\/src\/Medoo.php\n@@ -500,6 +500,11 @@ protected function typeMap($value, $type)\n \n \tprotected function columnQuote($string)\n \t{\n+\t\tif (!preg_match('\/^[a-zA-Z0-9]+(\\.?[a-zA-Z0-9]+)?$\/i', $string))\n+\t\t{\n+\t\t\tthrow new InvalidArgumentException(\"Incorrect column name \\\"$string\\\"\");\n+\t\t}\n+\n \t\tif (strpos($string, '.') !== false)\n \t\t{\n \t\t\treturn '\"' . $this->prefix . str_replace('.', '\".\"', $string) . '\"';",
      "code_diff":"@@ -500,6 +500,11 @@ protected function typeMap($value, $type)\n \n \tprotected function columnQuote($string)\n \t{\n+\t\tif (!preg_match('\/^[a-zA-Z0-9]+(\\.?[a-zA-Z0-9]+)?$\/i', $string))\n+\t\t{\n+\t\t\tthrow new InvalidArgumentException(\"Incorrect column name \\\"$string\\\"\");\n+\t\t}\n+\n \t\tif (strpos($string, '.') !== false)\n \t\t{\n \t\t\treturn '\"' . $this->prefix . str_replace('.', '\".\"', $string) . '\"';"
    },
    {
      "index":6,
      "vuln_id":"GHSA-x92h-wmg2-6hp7",
      "cwe_id":"{'CWE-89', 'CWE-79'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/symfony\/symfony\/commit\/944e60f083c3bffbc6a0b5112db127a10a66a8ec'}",
      "dataset":"osv",
      "summary":"Invalid HTTP method overrides allow possible XSS or other attacks in Symfony In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony\/http-foundation.",
      "published_date":"2019-12-02",
      "chain_len":1,
      "project":"https:\/\/github.com\/symfony\/symfony",
      "commit_href":"https:\/\/github.com\/symfony\/symfony\/commit\/944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "commit_sha":"944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "patch":"SINGLE",
      "chain_ord":"['944e60f083c3bffbc6a0b5112db127a10a66a8ec']",
      "before_first_fix_commit":"{'b7bdf2ce435b0aeb8edb8349f0456f7ca3d21035'}",
      "last_fix_commit":"944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/02\/2019, 16:28:16",
      "message":"[HttpFoundation] reject invalid method override",
      "author":"Nicolas Grekas",
      "comments":"{'com_1': {'author': 'jirayutza1', 'datetime': '12\/04\/2019, 20:11:46', 'body': '944e60f'}}",
      "stats":"{'additions': 29, 'deletions': 14, 'total': 43}",
      "files":"{'src\/Symfony\/Component\/HttpFoundation\/Request.php': {'additions': 29, 'deletions': 14, 'changes': 43, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/symfony\/symfony\/raw\/944e60f083c3bffbc6a0b5112db127a10a66a8ec\/src%2FSymfony%2FComponent%2FHttpFoundation%2FRequest.php', 'patch': '@@ -1346,22 +1346,37 @@ public function setMethod($method)\\n      *\/\\n     public function getMethod()\\n     {\\n-        if (null === $this->method) {\\n-            $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n-\\n-            if (\\'POST\\' === $this->method) {\\n-                if ($method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\')) {\\n-                    $this->method = strtoupper($method);\\n-                } elseif (self::$httpMethodParameterOverride) {\\n-                    $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n-                    if (\\\\is_string($method)) {\\n-                        $this->method = strtoupper($method);\\n-                    }\\n-                }\\n-            }\\n+        if (null !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n+\\n+        if (\\'POST\\' !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\');\\n+\\n+        if (!$method && self::$httpMethodParameterOverride) {\\n+            $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n+        }\\n+\\n+        if (!\\\\is_string($method)) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = strtoupper($method);\\n+\\n+        if (\\\\in_array($method, [\\'GET\\', \\'HEAD\\', \\'POST\\', \\'PUT\\', \\'DELETE\\', \\'CONNECT\\', \\'OPTIONS\\', \\'PATCH\\', \\'PURGE\\', \\'TRACE\\'], true)) {\\n+            return $this->method = $method;\\n+        }\\n+\\n+        if (!preg_match(\\'\/^[A-Z]++$\/D\\', $method)) {\\n+            throw new SuspiciousOperationException(sprintf(\\'Invalid method override \"%s\".\\', $method));\\n         }\\n \\n-        return $this->method;\\n+        return $this->method = $method;\\n     }\\n \\n     \/**'}}",
      "message_norm":"[httpfoundation] reject invalid method override",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Symfony\/Component\/HttpFoundation\/Request.php'])",
      "num_files":1.0,
      "patch_content":"From 944e60f083c3bffbc6a0b5112db127a10a66a8ec Mon Sep 17 00:00:00 2001\nFrom: Nicolas Grekas <nicolas.grekas@gmail.com>\nDate: Tue, 2 Apr 2019 18:28:16 +0200\nSubject: [PATCH] [HttpFoundation] reject invalid method override\n\n---\n ...\/Component\/HttpFoundation\/Request.php      | 43 +++++++++++++------\n 1 file changed, 29 insertions(+), 14 deletions(-)\n\ndiff --git a\/src\/Symfony\/Component\/HttpFoundation\/Request.php b\/src\/Symfony\/Component\/HttpFoundation\/Request.php\nindex fe1a33a597a3e..ae3f51b1724fc 100644\n--- a\/src\/Symfony\/Component\/HttpFoundation\/Request.php\n+++ b\/src\/Symfony\/Component\/HttpFoundation\/Request.php\n@@ -1346,22 +1346,37 @@ public function setMethod($method)\n      *\/\n     public function getMethod()\n     {\n-        if (null === $this->method) {\n-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));\n-\n-            if ('POST' === $this->method) {\n-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {\n-                    $this->method = strtoupper($method);\n-                } elseif (self::$httpMethodParameterOverride) {\n-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));\n-                    if (\\is_string($method)) {\n-                        $this->method = strtoupper($method);\n-                    }\n-                }\n-            }\n+        if (null !== $this->method) {\n+            return $this->method;\n+        }\n+\n+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));\n+\n+        if ('POST' !== $this->method) {\n+            return $this->method;\n+        }\n+\n+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');\n+\n+        if (!$method && self::$httpMethodParameterOverride) {\n+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));\n+        }\n+\n+        if (!\\is_string($method)) {\n+            return $this->method;\n+        }\n+\n+        $method = strtoupper($method);\n+\n+        if (\\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {\n+            return $this->method = $method;\n+        }\n+\n+        if (!preg_match('\/^[A-Z]++$\/D', $method)) {\n+            throw new SuspiciousOperationException(sprintf('Invalid method override \"%s\".', $method));\n         }\n \n-        return $this->method;\n+        return $this->method = $method;\n     }\n \n     \/**",
      "code_diff":"@@ -1346,22 +1346,37 @@ public function setMethod($method)\n      *\/\n     public function getMethod()\n     {\n-        if (null === $this->method) {\n-            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));\n-\n-            if ('POST' === $this->method) {\n-                if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {\n-                    $this->method = strtoupper($method);\n-                } elseif (self::$httpMethodParameterOverride) {\n-                    $method = $this->request->get('_method', $this->query->get('_method', 'POST'));\n-                    if (\\is_string($method)) {\n-                        $this->method = strtoupper($method);\n-                    }\n-                }\n-            }\n+        if (null !== $this->method) {\n+            return $this->method;\n+        }\n+\n+        $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));\n+\n+        if ('POST' !== $this->method) {\n+            return $this->method;\n+        }\n+\n+        $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');\n+\n+        if (!$method && self::$httpMethodParameterOverride) {\n+            $method = $this->request->get('_method', $this->query->get('_method', 'POST'));\n+        }\n+\n+        if (!\\is_string($method)) {\n+            return $this->method;\n+        }\n+\n+        $method = strtoupper($method);\n+\n+        if (\\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {\n+            return $this->method = $method;\n+        }\n+\n+        if (!preg_match('\/^[A-Z]++$\/D', $method)) {\n+            throw new SuspiciousOperationException(sprintf('Invalid method override \"%s\".', $method));\n         }\n \n-        return $this->method;\n+        return $this->method = $method;\n     }\n \n     \/**"
    },
    {
      "index":7,
      "vuln_id":"GHSA-9cq5-xgg4-x477",
      "cwe_id":"{'CWE-89'}",
      "score":6.7,
      "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/2b34e267e4186125f99bfa420140634ad45801fb'}",
      "dataset":"osv",
      "summary":"SQL Injection in showdoc Showdoc verions 2.10.2 and prior is vulnerable to SQL injection. A patch is available in the `master` branch of the repository.",
      "published_date":"2022-01-27",
      "chain_len":1,
      "project":"https:\/\/github.com\/star7th\/showdoc",
      "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/2b34e267e4186125f99bfa420140634ad45801fb",
      "commit_sha":"2b34e267e4186125f99bfa420140634ad45801fb",
      "patch":"SINGLE",
      "chain_ord":"['2b34e267e4186125f99bfa420140634ad45801fb']",
      "before_first_fix_commit":"{'409c8a1208bbb847046a9496303192980f2e6219'}",
      "last_fix_commit":"2b34e267e4186125f99bfa420140634ad45801fb",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/25\/2022, 12:34:52",
      "message":"bug",
      "author":"star7th",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'server\/Application\/Api\/Controller\/AdminUserController.class.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/2b34e267e4186125f99bfa420140634ad45801fb\/server%2FApplication%2FApi%2FController%2FAdminUserController.class.php', 'patch': '@@ -76,7 +76,7 @@ public function addUser(){\\n         $this->checkAdmin();\\n         $username = I(\"post.username\");\\n         $password = I(\"post.password\");\\n-        $uid = I(\"post.uid\");\\n+        $uid = I(\"post.uid\/d\");\\n         $name = I(\"post.name\");\\n         if(!$username){\\n             $this->sendError(10101,\\'\u7528\u6237\u540d\u4e0d\u5141\u8bb8\u4e3a\u7a7a\\');'}}",
      "message_norm":"bug",
      "language":"id",
      "entities":"[('bug', 'FLAW', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['server\/Application\/Api\/Controller\/AdminUserController.class.php'])",
      "num_files":1.0,
      "patch_content":"From 2b34e267e4186125f99bfa420140634ad45801fb Mon Sep 17 00:00:00 2001\nFrom: star7th <xing7th@gmail.com>\nDate: Tue, 25 Jan 2022 20:34:52 +0800\nSubject: [PATCH] bug\n\n---\n server\/Application\/Api\/Controller\/AdminUserController.class.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/server\/Application\/Api\/Controller\/AdminUserController.class.php b\/server\/Application\/Api\/Controller\/AdminUserController.class.php\nindex edf0f559c..9e966b8cd 100644\n--- a\/server\/Application\/Api\/Controller\/AdminUserController.class.php\n+++ b\/server\/Application\/Api\/Controller\/AdminUserController.class.php\n@@ -76,7 +76,7 @@ public function addUser(){\n         $this->checkAdmin();\n         $username = I(\"post.username\");\n         $password = I(\"post.password\");\n-        $uid = I(\"post.uid\");\n+        $uid = I(\"post.uid\/d\");\n         $name = I(\"post.name\");\n         if(!$username){\n             $this->sendError(10101,'\u7528\u6237\u540d\u4e0d\u5141\u8bb8\u4e3a\u7a7a');",
      "code_diff":"@@ -76,7 +76,7 @@ public function addUser(){\n         $this->checkAdmin();\n         $username = I(\"post.username\");\n         $password = I(\"post.password\");\n-        $uid = I(\"post.uid\");\n+        $uid = I(\"post.uid\/d\");\n         $name = I(\"post.name\");\n         if(!$username){\n             $this->sendError(10101,'\u7528\u6237\u540d\u4e0d\u5141\u8bb8\u4e3a\u7a7a');"
    },
    {
      "index":8,
      "vuln_id":"GHSA-2598-2f59-rmhq",
      "cwe_id":"{'CWE-89'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/sequelize\/sequelize\/commit\/ee4017379db0059566ecb5424274ad4e2d66bc68'}",
      "dataset":"osv",
      "summary":"SQL Injection in sequelize Versions of `sequelize` prior to 3.35.1 are vulnerable to SQL Injection. The package fails to sanitize JSON path keys in the Postgres dialect,  which may allow attackers to inject SQL statements and execute arbitrary SQL queries.\n\n\n## Recommendation\n\nUpgrade to version 3.35.1 or later.",
      "published_date":"2019-11-08",
      "chain_len":1,
      "project":"https:\/\/github.com\/sequelize\/sequelize",
      "commit_href":"https:\/\/github.com\/sequelize\/sequelize\/commit\/ee4017379db0059566ecb5424274ad4e2d66bc68",
      "commit_sha":"ee4017379db0059566ecb5424274ad4e2d66bc68",
      "patch":"SINGLE",
      "chain_ord":"['ee4017379db0059566ecb5424274ad4e2d66bc68']",
      "before_first_fix_commit":"{'75c1fdbc676d73a28a5e0bca49b2a6d4a9f8708c'}",
      "last_fix_commit":"ee4017379db0059566ecb5424274ad4e2d66bc68",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/20\/2019, 05:26:22",
      "message":"fix(postgres): json path key quoting (#11088)",
      "author":"Sushant",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
      "files":"{'lib\/dialects\/abstract\/query-generator.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sequelize\/sequelize\/raw\/ee4017379db0059566ecb5424274ad4e2d66bc68\/lib%2Fdialects%2Fabstract%2Fquery-generator.js', 'patch': \"@@ -2198,7 +2198,8 @@ var QueryGenerator = {\\n             path[path.length - 1] = $tmp[0];\\n           }\\n \\n-          $baseKey = self.quoteIdentifier(key)+'#>>\\\\'{'+path.join(', ')+'}\\\\'';\\n+          var pathKey = self.escape('{' + path.join(', ') + '}');\\n+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;\\n \\n           if (options.prefix) {\\n             if (options.prefix instanceof Utils.literal) {\"}}",
      "message_norm":"fix(postgres): json path key quoting (#11088)",
      "language":"en",
      "entities":"[('fix(postgres', 'ACTION', ''), ('key', 'SECWORD', ''), ('#11088', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/dialects\/abstract\/query-generator.js'])",
      "num_files":1.0,
      "patch_content":"From ee4017379db0059566ecb5424274ad4e2d66bc68 Mon Sep 17 00:00:00 2001\nFrom: Sushant <sushantdhiman@outlook.com>\nDate: Thu, 20 Jun 2019 10:56:22 +0530\nSubject: [PATCH] fix(postgres): json path key quoting (#11088)\n\n---\n lib\/dialects\/abstract\/query-generator.js | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a\/lib\/dialects\/abstract\/query-generator.js b\/lib\/dialects\/abstract\/query-generator.js\nindex 0298381093eb..392e962021ab 100644\n--- a\/lib\/dialects\/abstract\/query-generator.js\n+++ b\/lib\/dialects\/abstract\/query-generator.js\n@@ -2198,7 +2198,8 @@ var QueryGenerator = {\n             path[path.length - 1] = $tmp[0];\n           }\n \n-          $baseKey = self.quoteIdentifier(key)+'#>>\\'{'+path.join(', ')+'}\\'';\n+          var pathKey = self.escape('{' + path.join(', ') + '}');\n+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;\n \n           if (options.prefix) {\n             if (options.prefix instanceof Utils.literal) {",
      "code_diff":"@@ -2198,7 +2198,8 @@ var QueryGenerator = {\n             path[path.length - 1] = $tmp[0];\n           }\n \n-          $baseKey = self.quoteIdentifier(key)+'#>>\\'{'+path.join(', ')+'}\\'';\n+          var pathKey = self.escape('{' + path.join(', ') + '}');\n+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;\n \n           if (options.prefix) {\n             if (options.prefix instanceof Utils.literal) {"
    },
    {
      "index":9,
      "vuln_id":"GHSA-x2jc-pwfj-h9p3",
      "cwe_id":"{'CWE-89'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d'}",
      "dataset":"osv",
      "summary":"SQL Injection in sequelize Affected versions of `sequelize` use MySQL's backslash-based escape syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's escape syntax, which can result in a SQL Injection vulnerability.\n\n\n## Recommendation\n\nUpdate to version 1.7.0-alpha3 or later.",
      "published_date":"2019-02-18",
      "chain_len":1,
      "project":"https:\/\/github.com\/sequelize\/sequelize",
      "commit_href":"https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "commit_sha":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "patch":"SINGLE",
      "chain_ord":"['c876192aa6ce1f67e22b26a4d175b8478615f42d']",
      "before_first_fix_commit":"{'7dc35e3889e3fa0859b96be41092717444cc2a38'}",
      "last_fix_commit":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/15\/2013, 03:24:59",
      "message":"Fix string escaping for sqlite\n\nSQLite was defaulting to the MySQL backslash-escaped style, but it uses\npostgres-style escaping. This is a SQL-injection vulnerability, and\nshouldn't be taken lightly (although SQLite is mostly for testing).",
      "author":"Benjamin Woodruff",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
      "files":"{'lib\/sql-string.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sequelize\/sequelize\/raw\/c876192aa6ce1f67e22b26a4d175b8478615f42d\/lib%2Fsql-string.js', 'patch': '@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\\n     }\\n   }\\n \\n-  if (dialect == \"postgres\") {\\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\\n     \/\/ http:\/\/www.postgresql.org\/docs\/8.2\/static\/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\\n+    \/\/ http:\/\/stackoverflow.com\/q\/603572\/130598\\n     val = val.replace(\/\\'\/g, \"\\'\\'\");\\n   } else {\\n     val = val.replace(\/[\\\\0\\\\n\\\\r\\\\b\\\\t\\\\\\\\\\\\\\'\\\\\"\\\\x1a]\/g, function(s) {'}}",
      "message_norm":"fix string escaping for sqlite\n\nsqlite was defaulting to the mysql backslash-escaped style, but it uses\npostgres-style escaping. this is a sql-injection vulnerability, and\nshouldn't be taken lightly (although sqlite is mostly for testing).",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/sql-string.js'])",
      "num_files":1.0,
      "patch_content":"From c876192aa6ce1f67e22b26a4d175b8478615f42d Mon Sep 17 00:00:00 2001\nFrom: Benjamin Woodruff <benjaminwoodruff@ufl.edu>\nDate: Fri, 14 Jun 2013 23:24:59 -0400\nSubject: [PATCH] Fix string escaping for sqlite\n\nSQLite was defaulting to the MySQL backslash-escaped style, but it uses\npostgres-style escaping. This is a SQL-injection vulnerability, and\nshouldn't be taken lightly (although SQLite is mostly for testing).\n---\n lib\/sql-string.js | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a\/lib\/sql-string.js b\/lib\/sql-string.js\nindex 96be2c7e6ae4..160dfa428d4d 100644\n--- a\/lib\/sql-string.js\n+++ b\/lib\/sql-string.js\n@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\n     }\n   }\n \n-  if (dialect == \"postgres\") {\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\n     \/\/ http:\/\/www.postgresql.org\/docs\/8.2\/static\/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n+    \/\/ http:\/\/stackoverflow.com\/q\/603572\/130598\n     val = val.replace(\/'\/g, \"''\");\n   } else {\n     val = val.replace(\/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]\/g, function(s) {",
      "code_diff":"@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\n     }\n   }\n \n-  if (dialect == \"postgres\") {\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\n     \/\/ http:\/\/www.postgresql.org\/docs\/8.2\/static\/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n+    \/\/ http:\/\/stackoverflow.com\/q\/603572\/130598\n     val = val.replace(\/'\/g, \"''\");\n   } else {\n     val = val.replace(\/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]\/g, function(s) {"
    },
    {
      "index":10,
      "vuln_id":"GHSA-2v7p-f4qm-r5pc",
      "cwe_id":"{'CWE-89'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/523a735ab94f004459b84ffdfd3db784586bbd82'}",
      "dataset":"osv",
      "summary":"SQL Injection found in Pimcore Pimcore is an open source data & experience management platform. A SQL injection was discovered in GridHelperService.php in GitHub repository pimcore\/pimcore prior to 10.3.6.",
      "published_date":"2022-04-23",
      "chain_len":1,
      "project":"https:\/\/github.com\/pimcore\/pimcore",
      "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/523a735ab94f004459b84ffdfd3db784586bbd82",
      "commit_sha":"523a735ab94f004459b84ffdfd3db784586bbd82",
      "patch":"SINGLE",
      "chain_ord":"['523a735ab94f004459b84ffdfd3db784586bbd82']",
      "before_first_fix_commit":"{'f29d3b2f305865c6e9884c460fb35bcf21bcf29f'}",
      "last_fix_commit":"523a735ab94f004459b84ffdfd3db784586bbd82",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/22\/2022, 09:05:32",
      "message":"Fixed column quoting in GridHelperService",
      "author":"Bernhard Rusch",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 2, 'total': 7}",
      "files":"{'bundles\/AdminBundle\/Helper\/GridHelperService.php': {'additions': 5, 'deletions': 2, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/523a735ab94f004459b84ffdfd3db784586bbd82\/bundles%2FAdminBundle%2FHelper%2FGridHelperService.php', 'patch': \"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr\\n                         } elseif ($filterField == 'id') {\\n                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\\n                         } else {\\n+                            $filterField = $db->quoteIdentifier('o_' . $filterField);\\n                             if ($filter['type'] == 'date' && $operator == '=') {\\n                                 \/\/if the equal operator is chosen with the date type, condition has to be changed\\n                                 $maxTime = $filter['value'] + (86400 - 1); \/\/specifies the top point of the range used in the condition\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n                             } else {\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\\n+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\\n                             }\\n                         }\\n                     }\\n@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)\\n \\n                 if ($filterField == 'fullpath') {\\n                     $filterField = 'CONCAT(path,filename)';\\n+                }else {\\n+                    $filterField = $db->quoteIdentifier($filterField);\\n                 }\\n \\n                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {\"}}",
      "message_norm":"fixed column quoting in gridhelperservice",
      "language":"en",
      "entities":"[('fixed', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['bundles\/AdminBundle\/Helper\/GridHelperService.php'])",
      "num_files":1.0,
      "patch_content":"From 523a735ab94f004459b84ffdfd3db784586bbd82 Mon Sep 17 00:00:00 2001\nFrom: Bernhard Rusch <bernhard.rusch@elements.at>\nDate: Fri, 22 Apr 2022 11:05:32 +0200\nSubject: [PATCH] Fixed column quoting in GridHelperService\n\n---\n bundles\/AdminBundle\/Helper\/GridHelperService.php | 7 +++++--\n 1 file changed, 5 insertions(+), 2 deletions(-)\n\ndiff --git a\/bundles\/AdminBundle\/Helper\/GridHelperService.php b\/bundles\/AdminBundle\/Helper\/GridHelperService.php\nindex 13b6541eced..1ccfe6407fb 100644\n--- a\/bundles\/AdminBundle\/Helper\/GridHelperService.php\n+++ b\/bundles\/AdminBundle\/Helper\/GridHelperService.php\n@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr\n                         } elseif ($filterField == 'id') {\n                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\n                         } else {\n+                            $filterField = $db->quoteIdentifier('o_' . $filterField);\n                             if ($filter['type'] == 'date' && $operator == '=') {\n                                 \/\/if the equal operator is chosen with the date type, condition has to be changed\n                                 $maxTime = $filter['value'] + (86400 - 1); \/\/specifies the top point of the range used in the condition\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                             } else {\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\n+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\n                             }\n                         }\n                     }\n@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)\n \n                 if ($filterField == 'fullpath') {\n                     $filterField = 'CONCAT(path,filename)';\n+                }else {\n+                    $filterField = $db->quoteIdentifier($filterField);\n                 }\n \n                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {",
      "code_diff":"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr\n                         } elseif ($filterField == 'id') {\n                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\n                         } else {\n+                            $filterField = $db->quoteIdentifier('o_' . $filterField);\n                             if ($filter['type'] == 'date' && $operator == '=') {\n                                 \/\/if the equal operator is chosen with the date type, condition has to be changed\n                                 $maxTime = $filter['value'] + (86400 - 1); \/\/specifies the top point of the range used in the condition\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                             } else {\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\n+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\n                             }\n                         }\n                     }\n@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)\n \n                 if ($filterField == 'fullpath') {\n                     $filterField = 'CONCAT(path,filename)';\n+                }else {\n+                    $filterField = $db->quoteIdentifier($filterField);\n                 }\n \n                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {"
    },
    {
      "index":11,
      "vuln_id":"GHSA-2jx3-5j9v-prpp",
      "cwe_id":"{'CWE-89'}",
      "score":8.1,
      "chain":"{'https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084'}",
      "dataset":"osv",
      "summary":"BlockWishList SQL Injection vulnerability ### Impact\nAn authenticated customer can perform SQL injection\n\n### Patches\nIssue is fixed in 2.1.1",
      "published_date":"2022-06-25",
      "chain_len":1,
      "project":"https:\/\/github.com\/PrestaShop\/blockwishlist",
      "commit_href":"https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084",
      "commit_sha":"b3ec4b85af5fd73f74d55390b226d221298ca084",
      "patch":"SINGLE",
      "chain_ord":"['b3ec4b85af5fd73f74d55390b226d221298ca084']",
      "before_first_fix_commit":"{'13e64b2709544354fd116927b80bc3fa249bc5b4', 'be79516175d564f60a657627482b0a60c3da353e'}",
      "last_fix_commit":"b3ec4b85af5fd73f74d55390b226d221298ca084",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/24\/2022, 08:04:52",
      "message":"Merge pull request from GHSA-2jx3-5j9v-prpp\n\nValidate order by and order way",
      "author":"atomiix",
      "comments":"{'com_1': {'author': 'doekia', 'datetime': '07\/22\/2022, 17:26:35', 'body': \"So apparently there is unfiltered value returned by toLegacyOrderWay() (I'm doubt full of it see below)\\r\\nIf this is the case CHANGE the function, not simply one module otherwise it is an open door for other modules.\\r\\n\\r\\nWhy I'm doubtfull ? Because toLegacyOrderWay() calls getDirection() which return $this->direction. $this->direction is set by setDirection() (during construct) and tests are done against values asc, desc, random otherwise exception. How can this lead to sql injection\"}, 'com_2': {'author': 'infiniweb', 'datetime': '07\/22\/2022, 21:40:39', 'body': '@doekia this issue is not with `toLegacyOrderWay`. The SQL injection can be reproduced because of the usage of `toLegacyOrderBy` (not `toLegacyOrderWay`) combined with a wrong usage of `getLegacyPrefix`. I can confirm the exploit. The usage of `Validate::isOrderBy($sortOrder)` is fixing the issue.'}, 'com_3': {'author': 'doekia', 'datetime': '07\/25\/2022, 18:07:12', 'body': 'Therefore I repeat, the function that need to be patched SHOULD BE toLegacyOrderBy() that should implement the Validate::isOrderBy() before returning values.\\r\\nSuch way will protect ANY modules that use the framework function toLegacyOrderBy()'}, 'com_4': {'author': 'Pilypas', 'datetime': '07\/27\/2022, 11:25:43', 'body': 'Can you tell me if the vulnerability in the module is also in Prestashop 1.6.1.24 version of blockwishlist 1.3.2 ?'}, 'com_5': {'author': 'infiniweb', 'datetime': '07\/27\/2022, 11:27:28', 'body': \"@Pilypas . No it's not. Please refer to https:\/\/github.com\/PrestaShop\/blockwishlist\/security\/advisories\/GHSA-2jx3-5j9v-prpp\"}}",
      "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
      "files":"{'src\/Search\/WishListProductSearchProvider.php': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/blockwishlist\/raw\/b3ec4b85af5fd73f74d55390b226d221298ca084\/src%2FSearch%2FWishListProductSearchProvider.php', 'patch': \"@@ -35,6 +35,7 @@\\n use Product;\\n use Shop;\\n use Symfony\\\\Component\\\\Translation\\\\TranslatorInterface;\\n+use Validate;\\n use WishList;\\n \\n \/**\\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\\n \\n         if ('products' === $type) {\\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\\n+            }\\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\\n             $products = $this->db->executeS($querySearch);\"}}",
      "message_norm":"merge pull request from ghsa-2jx3-5j9v-prpp\n\nvalidate order by and order way",
      "language":"no",
      "entities":"[('ghsa-2jx3-5j9v-prpp', 'VULNID', 'GHSA')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Search\/WishListProductSearchProvider.php'])",
      "num_files":1.0,
      "patch_content":"From be79516175d564f60a657627482b0a60c3da353e Mon Sep 17 00:00:00 2001\nFrom: Thomas BACCELLI <thomas.baccelli@prestashop.com>\nDate: Tue, 21 Jun 2022 18:34:22 +0200\nSubject: [PATCH] Validate order by and order way\n\n---\n src\/Search\/WishListProductSearchProvider.php | 6 +++++-\n 1 file changed, 5 insertions(+), 1 deletion(-)\n\ndiff --git a\/src\/Search\/WishListProductSearchProvider.php b\/src\/Search\/WishListProductSearchProvider.php\nindex efab3b30..5e2d1e7b 100644\n--- a\/src\/Search\/WishListProductSearchProvider.php\n+++ b\/src\/Search\/WishListProductSearchProvider.php\n@@ -35,6 +35,7 @@\n use Product;\n use Shop;\n use Symfony\\Component\\Translation\\TranslatorInterface;\n+use Validate;\n use WishList;\n \n \/**\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\n \n         if ('products' === $type) {\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\n+            }\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\n             $products = $this->db->executeS($querySearch);",
      "code_diff":"@@ -35,6 +35,7 @@\n use Product;\n use Shop;\n use Symfony\\Component\\Translation\\TranslatorInterface;\n+use Validate;\n use WishList;\n \n \/**\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\n \n         if ('products' === $type) {\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\n+            }\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\n             $products = $this->db->executeS($querySearch);"
    },
    {
      "index":12,
      "vuln_id":"GHSA-79mg-4w23-4fqc",
      "cwe_id":"{'CWE-89', 'CWE-287'}",
      "score":8.1,
      "chain":"{'https:\/\/github.com\/fiveai\/Cachet\/commit\/27bca8280419966ba80c6fa283d985ddffa84bb6'}",
      "dataset":"osv",
      "summary":"Unauthenticated SQL Injection in Cachet ### Impact\nIn Cachet versions through 2.3.18, there is a SQL injection which is in the `SearchableTrait#scopeSearch()`. Attackers without authentication can utilize this vulnerability to exfiltrate sensitive data from the database such as administrator's password and session.\n\n### Patches\n\nThe original repository of [https:\/\/github.com\/CachetHQ\/Cachet](https:\/\/github.com\/CachetHQ\/Cachet) is not active, the stable version 2.3.18 and it's developing 2.4 branch is affected. \n\nUpdate to version 2.5 or later in the [https:\/\/github.com\/fiveai\/Cachet fork](https:\/\/github.com\/fiveai\/Cachet) to fix this vulnerability.",
      "published_date":"2021-08-30",
      "chain_len":1,
      "project":"https:\/\/github.com\/fiveai\/Cachet",
      "commit_href":"https:\/\/github.com\/fiveai\/Cachet\/commit\/27bca8280419966ba80c6fa283d985ddffa84bb6",
      "commit_sha":"27bca8280419966ba80c6fa283d985ddffa84bb6",
      "patch":"SINGLE",
      "chain_ord":"['27bca8280419966ba80c6fa283d985ddffa84bb6']",
      "before_first_fix_commit":"{'8c1a2c27d4a46777a78bceefa7f3fee297ebe7be'}",
      "last_fix_commit":"27bca8280419966ba80c6fa283d985ddffa84bb6",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/15\/2021, 14:17:35",
      "message":"Ensure only allowed searchable columns are used in DB Query",
      "author":"Seb Dangerfield",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
      "files":"{'app\/Models\/Traits\/SearchableTrait.php': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fiveai\/Cachet\/raw\/27bca8280419966ba80c6fa283d985ddffa84bb6\/app%2FModels%2FTraits%2FSearchableTrait.php', 'patch': '@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])\\n             return $query;\\n         }\\n \\n-        if (!array_intersect(array_keys($search), $this->searchable)) {\\n+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));\\n+        if (! $allowed_search) {\\n             return $query;\\n         }\\n \\n-        return $query->where($search);\\n+        return $query->where($allowed_search);\\n     }\\n }'}}",
      "message_norm":"ensure only allowed searchable columns are used in db query",
      "language":"en",
      "entities":"[('ensure', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['app\/Models\/Traits\/SearchableTrait.php'])",
      "num_files":1.0,
      "patch_content":"From 27bca8280419966ba80c6fa283d985ddffa84bb6 Mon Sep 17 00:00:00 2001\nFrom: Seb Dangerfield <1449113+sedan07@users.noreply.github.com>\nDate: Fri, 15 Jan 2021 14:17:35 +0000\nSubject: [PATCH] Ensure only allowed searchable columns are used in DB Query\n\n---\n app\/Models\/Traits\/SearchableTrait.php | 5 +++--\n 1 file changed, 3 insertions(+), 2 deletions(-)\n\ndiff --git a\/app\/Models\/Traits\/SearchableTrait.php b\/app\/Models\/Traits\/SearchableTrait.php\nindex 8038b47aae83..8db2300e6212 100644\n--- a\/app\/Models\/Traits\/SearchableTrait.php\n+++ b\/app\/Models\/Traits\/SearchableTrait.php\n@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])\n             return $query;\n         }\n \n-        if (!array_intersect(array_keys($search), $this->searchable)) {\n+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));\n+        if (! $allowed_search) {\n             return $query;\n         }\n \n-        return $query->where($search);\n+        return $query->where($allowed_search);\n     }\n }",
      "code_diff":"@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])\n             return $query;\n         }\n \n-        if (!array_intersect(array_keys($search), $this->searchable)) {\n+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));\n+        if (! $allowed_search) {\n             return $query;\n         }\n \n-        return $query->where($search);\n+        return $query->where($allowed_search);\n     }\n }"
    },
    {
      "index":13,
      "vuln_id":"GHSA-v3mr-gp7j-pw5w",
      "cwe_id":"{'CWE-89'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/terminal42\/contao-tablelookupwizard\/commit\/a5e723a28f110b7df8ffc4175cef9b061d3cc717'}",
      "dataset":"osv",
      "summary":"Possible SQL injection in tablelookupwizard Contao Extension ### Impact\nThe currently selected widget values were not correctly sanitized before passing it to the database, leading to an SQL injection possibility.\n\n### Patches\nThe issue has been patched in `tablelookupwizard` version 3.3.5 and version 4.0.0.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in https:\/\/github.com\/terminal42\/contao-tablelookupwizard\n* Email us at [info@terminal42.ch](mailto:info@terminal42.ch)",
      "published_date":"2022-02-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/terminal42\/contao-tablelookupwizard",
      "commit_href":"https:\/\/github.com\/terminal42\/contao-tablelookupwizard\/commit\/a5e723a28f110b7df8ffc4175cef9b061d3cc717",
      "commit_sha":"a5e723a28f110b7df8ffc4175cef9b061d3cc717",
      "patch":"SINGLE",
      "chain_ord":"['a5e723a28f110b7df8ffc4175cef9b061d3cc717']",
      "before_first_fix_commit":"{'ae6c82f10b0f1e87226079ebaa78ac630b05279a'}",
      "last_fix_commit":"a5e723a28f110b7df8ffc4175cef9b061d3cc717",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/04\/2022, 07:13:15",
      "message":"Fixed SQL query for current field value",
      "author":"Andreas Schempp",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
      "files":"{'TableLookupWizard.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/terminal42\/contao-tablelookupwizard\/raw\/a5e723a28f110b7df8ffc4175cef9b061d3cc717\/TableLookupWizard.php', 'patch': '@@ -407,9 +407,9 @@ protected function prepareWhere()\\n \\n         \/\/ Filter those that have already been chosen\\n         if (\\'checkbox\\' === $this->fieldType && \\\\is_array($varData) && !empty($varData)) {\\n-            $this->arrWhereProcedure[] = $this->foreignTable.\\'.id NOT IN (\\'.implode(\\',\\', $varData).\\')\\';\\n+            $this->arrWhereProcedure[] = $this->foreignTable.\\'.id NOT IN (\\'.implode(\\',\\', array_map(\\'intval\\', $varData)).\\')\\';\\n         } elseif (\\'radio\\' === $this->fieldType && \\'\\' !== $varData) {\\n-            $this->arrWhereProcedure[] = \"{$this->foreignTable}.id!=\\'$varData\\'\";\\n+            $this->arrWhereProcedure[] = $this->foreignTable.\\'.id!=\\'.(int) $varData;\\n         }\\n \\n         \/\/ If custom WHERE is set, add it to the statement'}}",
      "message_norm":"fixed sql query for current field value",
      "language":"ca",
      "entities":"[('fixed', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['TableLookupWizard.php'])",
      "num_files":1.0,
      "patch_content":"From a5e723a28f110b7df8ffc4175cef9b061d3cc717 Mon Sep 17 00:00:00 2001\nFrom: Andreas Schempp <andreas.schempp@terminal42.ch>\nDate: Fri, 4 Feb 2022 08:13:15 +0100\nSubject: [PATCH] Fixed SQL query for current field value\n\n---\n TableLookupWizard.php | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a\/TableLookupWizard.php b\/TableLookupWizard.php\nindex 8b1529d..92aa645 100644\n--- a\/TableLookupWizard.php\n+++ b\/TableLookupWizard.php\n@@ -407,9 +407,9 @@ protected function prepareWhere()\n \n         \/\/ Filter those that have already been chosen\n         if ('checkbox' === $this->fieldType && \\is_array($varData) && !empty($varData)) {\n-            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', $varData).')';\n+            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', array_map('intval', $varData)).')';\n         } elseif ('radio' === $this->fieldType && '' !== $varData) {\n-            $this->arrWhereProcedure[] = \"{$this->foreignTable}.id!='$varData'\";\n+            $this->arrWhereProcedure[] = $this->foreignTable.'.id!='.(int) $varData;\n         }\n \n         \/\/ If custom WHERE is set, add it to the statement",
      "code_diff":"@@ -407,9 +407,9 @@ protected function prepareWhere()\n \n         \/\/ Filter those that have already been chosen\n         if ('checkbox' === $this->fieldType && \\is_array($varData) && !empty($varData)) {\n-            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', $varData).')';\n+            $this->arrWhereProcedure[] = $this->foreignTable.'.id NOT IN ('.implode(',', array_map('intval', $varData)).')';\n         } elseif ('radio' === $this->fieldType && '' !== $varData) {\n-            $this->arrWhereProcedure[] = \"{$this->foreignTable}.id!='$varData'\";\n+            $this->arrWhereProcedure[] = $this->foreignTable.'.id!='.(int) $varData;\n         }\n \n         \/\/ If custom WHERE is set, add it to the statement"
    },
    {
      "index":14,
      "vuln_id":"GHSA-vj9x-w7ch-f46p",
      "cwe_id":"{'CWE-89'}",
      "score":8.3,
      "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/66281c12479dc01a06258d8533eaddfb1770d5bd'}",
      "dataset":"osv",
      "summary":"pimcore is vulnerable to SQL Injection pimcore is vulnerable to Improper Neutralization of Special Elements used in an SQL Command",
      "published_date":"2022-01-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/pimcore\/pimcore",
      "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/66281c12479dc01a06258d8533eaddfb1770d5bd",
      "commit_sha":"66281c12479dc01a06258d8533eaddfb1770d5bd",
      "patch":"SINGLE",
      "chain_ord":"['66281c12479dc01a06258d8533eaddfb1770d5bd']",
      "before_first_fix_commit":"{'d8377fc752dc3a42ca72cb49650481191f14ec63'}",
      "last_fix_commit":"66281c12479dc01a06258d8533eaddfb1770d5bd",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/17\/2022, 14:39:43",
      "message":"[Data Object] Classification Store quote filtering",
      "author":"Bernhard Rusch",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/66281c12479dc01a06258d8533eaddfb1770d5bd\/bundles%2FAdminBundle%2FController%2FAdmin%2FDataObject%2FClassificationstoreController.php', 'patch': \"@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)\\n         }\\n \\n         if ($storeId) {\\n-            $conditionParts[] = '(storeId = ' . $storeId . ')';\\n+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';\\n         }\\n \\n         if ($request->get('filter')) {\"}}",
      "message_norm":"[data object] classification store quote filtering",
      "language":"it",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php'])",
      "num_files":1.0,
      "patch_content":"From 66281c12479dc01a06258d8533eaddfb1770d5bd Mon Sep 17 00:00:00 2001\nFrom: Bernhard Rusch <bernhard.rusch@elements.at>\nDate: Mon, 17 Jan 2022 15:39:43 +0100\nSubject: [PATCH] [Data Object] Classification Store quote filtering\n\n---\n ...\/Admin\/DataObject\/ClassificationstoreController.php          | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php b\/bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php\nindex 1f536f3a9d7..c1605533730 100644\n--- a\/bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php\n+++ b\/bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassificationstoreController.php\n@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)\n         }\n \n         if ($storeId) {\n-            $conditionParts[] = '(storeId = ' . $storeId . ')';\n+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';\n         }\n \n         if ($request->get('filter')) {",
      "code_diff":"@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)\n         }\n \n         if ($storeId) {\n-            $conditionParts[] = '(storeId = ' . $storeId . ')';\n+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';\n         }\n \n         if ($request->get('filter')) {"
    },
    {
      "index":15,
      "vuln_id":"GHSA-6gm7-j668-w6h9",
      "cwe_id":"{'CWE-89'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/a697830359df06246acca502ee2455614de68017'}",
      "dataset":"osv",
      "summary":"SQL Injection in Pimcore Pimcore prior to version 10.3.5 is vulnerable SQL injection in RecyclebinController.php. This vulnerability affects data confidentiality.",
      "published_date":"2022-04-09",
      "chain_len":1,
      "project":"https:\/\/github.com\/pimcore\/pimcore",
      "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/a697830359df06246acca502ee2455614de68017",
      "commit_sha":"a697830359df06246acca502ee2455614de68017",
      "patch":"SINGLE",
      "chain_ord":"['a697830359df06246acca502ee2455614de68017']",
      "before_first_fix_commit":"{'e649598b4d2892c0bef9dea24cdf8f7006dc1ef1'}",
      "last_fix_commit":"a697830359df06246acca502ee2455614de68017",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/04\/2022, 08:59:41",
      "message":"[Recyclebin] Quote condition filter",
      "author":"dpahuja",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/a697830359df06246acca502ee2455614de68017\/bundles%2FAdminBundle%2FController%2FAdmin%2FRecyclebinController.php', 'patch': '@@ -119,7 +119,7 @@ public function listAction(Request $request)\\n                         $condition = $field . \\' BETWEEN \\' . $db->quote($value) . \\' AND \\' . $db->quote($maxTime);\\n                         $conditionFilters[] = $condition;\\n                     } else {\\n-                        $conditionFilters[] = $field . $operator . \" \\'\" . $value . \"\\' \";\\n+                        $conditionFilters[] = $field . $operator . \\' \\' . $db->quote($value);\\n                     }\\n                 }\\n             }'}}",
      "message_norm":"[recyclebin] quote condition filter",
      "language":"it",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php'])",
      "num_files":1.0,
      "patch_content":"From a697830359df06246acca502ee2455614de68017 Mon Sep 17 00:00:00 2001\nFrom: dpahuja <divesh.pahuja@gmail.com>\nDate: Mon, 4 Apr 2022 10:59:41 +0200\nSubject: [PATCH] [Recyclebin] Quote condition filter\n\n---\n bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php b\/bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php\nindex 550a34bdc49..d5d273aefb9 100644\n--- a\/bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php\n+++ b\/bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php\n@@ -119,7 +119,7 @@ public function listAction(Request $request)\n                         $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                         $conditionFilters[] = $condition;\n                     } else {\n-                        $conditionFilters[] = $field . $operator . \" '\" . $value . \"' \";\n+                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);\n                     }\n                 }\n             }",
      "code_diff":"@@ -119,7 +119,7 @@ public function listAction(Request $request)\n                         $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                         $conditionFilters[] = $condition;\n                     } else {\n-                        $conditionFilters[] = $field . $operator . \" '\" . $value . \"' \";\n+                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);\n                     }\n                 }\n             }"
    },
    {
      "index":16,
      "vuln_id":"GHSA-864j-6qpp-cmrr",
      "cwe_id":"{'CWE-89'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/alexreisner\/geocoder\/commit\/dcdc3d8675411edce3965941a2ca7c441ca48613'}",
      "dataset":"osv",
      "summary":"SQL Injection in Geocoder sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data.",
      "published_date":"2020-06-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/alexreisner\/geocoder",
      "commit_href":"https:\/\/github.com\/alexreisner\/geocoder\/commit\/dcdc3d8675411edce3965941a2ca7c441ca48613",
      "commit_sha":"dcdc3d8675411edce3965941a2ca7c441ca48613",
      "patch":"SINGLE",
      "chain_ord":"['dcdc3d8675411edce3965941a2ca7c441ca48613']",
      "before_first_fix_commit":"{'1ff64c47b6fc21d9c5ce30a6549d9eaa67c81a9e'}",
      "last_fix_commit":"dcdc3d8675411edce3965941a2ca7c441ca48613",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/23\/2020, 16:08:45",
      "message":"Sanitize lat\/lon for SQL query.",
      "author":"Alex Reisner",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
      "files":"{'lib\/geocoder\/sql.rb': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alexreisner\/geocoder\/raw\/dcdc3d8675411edce3965941a2ca7c441ca48613\/lib%2Fgeocoder%2Fsql.rb', 'patch': '@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\\n     end\\n \\n     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\\n-      spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"\\n+      spans = \"#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND \"\\n       # handle box that spans 180 longitude\\n       if sw_lng.to_f > ne_lng.to_f\\n-        spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +\\n-        \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"\\n+        spans + \"(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR \" +\\n+        \"#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})\"\\n       else\\n-        spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\"\\n+        spans + \"#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}\"\\n       end\\n     end'}}",
      "message_norm":"sanitize lat\/lon for sql query.",
      "language":"fr",
      "entities":"[('sanitize', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/geocoder\/sql.rb'])",
      "num_files":1.0,
      "patch_content":"From dcdc3d8675411edce3965941a2ca7c441ca48613 Mon Sep 17 00:00:00 2001\nFrom: Alex Reisner <alex@alexreisner.com>\nDate: Thu, 23 Jan 2020 09:08:45 -0700\nSubject: [PATCH] Sanitize lat\/lon for SQL query.\n\n---\n lib\/geocoder\/sql.rb | 8 ++++----\n 1 file changed, 4 insertions(+), 4 deletions(-)\n\ndiff --git a\/lib\/geocoder\/sql.rb b\/lib\/geocoder\/sql.rb\nindex 71ea96f8a..6bca8a65a 100644\n--- a\/lib\/geocoder\/sql.rb\n+++ b\/lib\/geocoder\/sql.rb\n@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n     end\n \n     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\n-      spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"\n+      spans = \"#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND \"\n       # handle box that spans 180 longitude\n       if sw_lng.to_f > ne_lng.to_f\n-        spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +\n-        \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"\n+        spans + \"(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR \" +\n+        \"#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})\"\n       else\n-        spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\"\n+        spans + \"#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}\"\n       end\n     end",
      "code_diff":"@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n     end\n \n     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\n-      spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"\n+      spans = \"#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND \"\n       # handle box that spans 180 longitude\n       if sw_lng.to_f > ne_lng.to_f\n-        spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +\n-        \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"\n+        spans + \"(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR \" +\n+        \"#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})\"\n       else\n-        spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\"\n+        spans + \"#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}\"\n       end\n     end"
    }
  ]
}