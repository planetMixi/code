{
  "schema":{
    "fields":[
      {
        "name":"index",
        "type":"integer"
      },
      {
        "name":"vuln_id",
        "type":"string"
      },
      {
        "name":"cwe_id",
        "type":"string"
      },
      {
        "name":"score",
        "type":"number"
      },
      {
        "name":"chain",
        "type":"string"
      },
      {
        "name":"dataset",
        "type":"string"
      },
      {
        "name":"summary",
        "type":"string"
      },
      {
        "name":"published_date",
        "type":"string"
      },
      {
        "name":"chain_len",
        "type":"integer"
      },
      {
        "name":"project",
        "type":"string"
      },
      {
        "name":"commit_href",
        "type":"string"
      },
      {
        "name":"commit_sha",
        "type":"string"
      },
      {
        "name":"patch",
        "type":"string"
      },
      {
        "name":"chain_ord",
        "type":"string"
      },
      {
        "name":"before_first_fix_commit",
        "type":"string"
      },
      {
        "name":"last_fix_commit",
        "type":"string"
      },
      {
        "name":"chain_ord_pos",
        "type":"number"
      },
      {
        "name":"commit_datetime",
        "type":"string"
      },
      {
        "name":"message",
        "type":"string"
      },
      {
        "name":"author",
        "type":"string"
      },
      {
        "name":"comments",
        "type":"string"
      },
      {
        "name":"stats",
        "type":"string"
      },
      {
        "name":"files",
        "type":"string"
      },
      {
        "name":"message_norm",
        "type":"string"
      },
      {
        "name":"language",
        "type":"string"
      },
      {
        "name":"entities",
        "type":"string"
      },
      {
        "name":"classification_level_1",
        "type":"string"
      },
      {
        "name":"classification_level_2",
        "type":"string"
      },
      {
        "name":"list_files",
        "type":"string"
      },
      {
        "name":"num_files",
        "type":"number"
      },
      {
        "name":"patch_content",
        "type":"string"
      },
      {
        "name":"code_diff",
        "type":"string"
      }
    ],
    "primaryKey":[
      "index"
    ],
    "pandas_version":"1.4.0"
  },
  "data":[
    {
      "index":0,
      "vuln_id":"GHSA-fq86-3f29-px2c",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082'}",
      "dataset":"osv",
      "summary":"`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-07",
      "chain_len":3,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6",
      "commit_sha":"240655511cd3e701155f944a972db71b6c0b1bb6",
      "patch":"MULTI",
      "chain_ord":"['ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', '1fb27733f943295d874417630edd3b38b34ce082', '240655511cd3e701155f944a972db71b6c0b1bb6']",
      "before_first_fix_commit":"{'1fb27733f943295d874417630edd3b38b34ce082'}",
      "last_fix_commit":"240655511cd3e701155f944a972db71b6c0b1bb6",
      "chain_ord_pos":3.0,
      "commit_datetime":"11\/11\/2021, 17:24:31",
      "message":"Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<invalid shape>)`\n\nPiperOrigin-RevId: 409166738\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/240655511cd3e701155f944a972db71b6c0b1bb6\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1741,14 +1741,16 @@ Status ConstantFolding::IsSimplifiableReshape(\\n       int32_t dim = outputs[0]->flat<int32>()(i);\\n       shp.push_back(dim);\\n     }\\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\\n+    if (!s.ok()) return s;\\n   } else {\\n     std::vector<int64_t> shp;\\n     for (int i = 0; i < outputs[0]->NumElements(); ++i) {\\n       int64_t dim = outputs[0]->flat<int64_t>()(i);\\n       shp.push_back(dim);\\n     }\\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\\n+    if (!s.ok()) return s;\\n   }\\n \\n   if (!shape.IsCompatibleWith(new_dims)) {'}}",
      "message_norm":"eliminate `check`-fails from `issimplifiablereshape` via `makeshape(<invalid shape>)`\n\npiperorigin-revid: 409166738\nchange-id: i7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf",
      "language":"en",
      "entities":"[('409166738', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
      "num_files":1.0,
      "patch_content":"From 240655511cd3e701155f944a972db71b6c0b1bb6 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 11 Nov 2021 09:24:31 -0800\nSubject: [PATCH] Eliminate `CHECK`-fails from `IsSimplifiableReshape` via\n `MakeShape(<invalid shape>)`\n\nPiperOrigin-RevId: 409166738\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf\n---\n tensorflow\/core\/grappler\/optimizers\/constant_folding.cc | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc b\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc\nindex a2050899f60726..d5fadb311a75cc 100644\n--- a\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc\n+++ b\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc\n@@ -1741,14 +1741,16 @@ Status ConstantFolding::IsSimplifiableReshape(\n       int32_t dim = outputs[0]->flat<int32>()(i);\n       shp.push_back(dim);\n     }\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\n+    if (!s.ok()) return s;\n   } else {\n     std::vector<int64_t> shp;\n     for (int i = 0; i < outputs[0]->NumElements(); ++i) {\n       int64_t dim = outputs[0]->flat<int64_t>()(i);\n       shp.push_back(dim);\n     }\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\n+    if (!s.ok()) return s;\n   }\n \n   if (!shape.IsCompatibleWith(new_dims)) {",
      "code_diff":"@@ -1741,14 +1741,16 @@ Status ConstantFolding::IsSimplifiableReshape(\n       int32_t dim = outputs[0]->flat<int32>()(i);\n       shp.push_back(dim);\n     }\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\n+    if (!s.ok()) return s;\n   } else {\n     std::vector<int64_t> shp;\n     for (int i = 0; i < outputs[0]->NumElements(); ++i) {\n       int64_t dim = outputs[0]->flat<int64_t>()(i);\n       shp.push_back(dim);\n     }\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\n+    if (!s.ok()) return s;\n   }\n \n   if (!shape.IsCompatibleWith(new_dims)) {"
    },
    {
      "index":1,
      "vuln_id":"GHSA-jhq9-wm9m-cf89",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe'}",
      "dataset":"osv",
      "summary":"CHECK-failure in `UnsortedSegmentJoin` ### Impact\nAn attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], dtype=tf.string)\nsegment_ids = tf.constant([], dtype=tf.int32)\nnum_segments = tf.constant([], dtype=tf.int32)\nseparator = ''\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=inputs, segment_ids=segment_ids,\n  num_segments=num_segments, separator=separator)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a2a607db15c7cd01d754d37e5448d72a13491bdb\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n```\n\nSince the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination.\n\n### Patches\nWe have patched the issue in GitHub commit [704866eabe03a9aeda044ec91a8d0c83fc1ebdbe](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
      "commit_sha":"704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
      "patch":"SINGLE",
      "chain_ord":"['704866eabe03a9aeda044ec91a8d0c83fc1ebdbe']",
      "before_first_fix_commit":"{'a2a607db15c7cd01d754d37e5448d72a13491bdb'}",
      "last_fix_commit":"704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/27\/2021, 21:41:40",
      "message":"Fix overflow CHECK issue with `tf.raw_ops.UnsortedSegmentJoin`.\n\nPiperOrigin-RevId: 370766155\nChange-Id: I33e7c6626224e1060a8a4ab51ad5d861c6d4c63e",
      "author":"Amit Patankar",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -90,6 +90,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n     const int32 segment_dims = segment_id_shape.dims();\\n \\n     const Tensor& num_segments_tensor = context->input(2);\\n+    OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\\n+                errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n     OP_REQUIRES(context, segment_dims != 0,'}}",
      "message_norm":"fix overflow check issue with `tf.raw_ops.unsortedsegmentjoin`.\n\npiperorigin-revid: 370766155\nchange-id: i33e7c6626224e1060a8a4ab51ad5d861c6d4c63e",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('370766155', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 704866eabe03a9aeda044ec91a8d0c83fc1ebdbe Mon Sep 17 00:00:00 2001\nFrom: Amit Patankar <amitpatankar@google.com>\nDate: Tue, 27 Apr 2021 14:41:40 -0700\nSubject: [PATCH] Fix overflow CHECK issue with\n `tf.raw_ops.UnsortedSegmentJoin`.\n\nPiperOrigin-RevId: 370766155\nChange-Id: I33e7c6626224e1060a8a4ab51ad5d861c6d4c63e\n---\n tensorflow\/core\/kernels\/unsorted_segment_join_op.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\nindex 7464e165e46c8b..9acfe7fb1e4952 100644\n--- a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n+++ b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n@@ -90,6 +90,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\n     const int32 segment_dims = segment_id_shape.dims();\n \n     const Tensor& num_segments_tensor = context->input(2);\n+    OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n+                errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n     OP_REQUIRES(context, segment_dims != 0,",
      "code_diff":"@@ -90,6 +90,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\n     const int32 segment_dims = segment_id_shape.dims();\n \n     const Tensor& num_segments_tensor = context->input(2);\n+    OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n+                errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n     OP_REQUIRES(context, segment_dims != 0,"
    },
    {
      "index":2,
      "vuln_id":"GHSA-27j5-4p9v-pp67",
      "cwe_id":"{'CWE-617'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2'}",
      "dataset":"osv",
      "summary":"`std::abort` raised from `TensorListReserve` ### Impact\nProviding a negative element to `num_elements` list argument of  `tf.raw_ops.TensorListReserve` causes the runtime to abort the process due to reallocating a `std::vector` to have a negative number of elements:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(\n  element_shape = tf.constant([1]),\n  num_elements=tf.constant([-1]),\n  element_dtype = tf.int32)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/list_kernels.cc#L312) calls `std::vector.resize()` with the new size controlled by input given by the user, without checking that this input is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [8a6e874437670045e6c7dc6154c7412b4a2135e2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date":"2021-08-25",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2",
      "commit_sha":"8a6e874437670045e6c7dc6154c7412b4a2135e2",
      "patch":"SINGLE",
      "chain_ord":"['8a6e874437670045e6c7dc6154c7412b4a2135e2']",
      "before_first_fix_commit":"{'3e23241a7f330f62c701f5ceb10f6594cd735f70'}",
      "last_fix_commit":"8a6e874437670045e6c7dc6154c7412b4a2135e2",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/10\/2021, 00:32:55",
      "message":"Validate num_elements input in tf.raw_ops.TensorListReserve\n\nPiperOrigin-RevId: 383954564\nChange-Id: I454bd78eff85bc4f16ddb7e608596971cca47f8f",
      "author":"Laura Pak",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'tensorflow\/core\/kernels\/list_kernels.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8a6e874437670045e6c7dc6154c7412b4a2135e2\/tensorflow%2Fcore%2Fkernels%2Flist_kernels.cc', 'patch': '@@ -302,6 +302,10 @@ class TensorListReserve : public OpKernel {\\n     PartialTensorShape element_shape;\\n     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(0), &element_shape));\\n     int32 num_elements = c->input(1).scalar<int32>()();\\n+    OP_REQUIRES(c, num_elements >= 0,\\n+                errors::InvalidArgument(\"The num_elements to reserve must be a \"\\n+                                        \"non negative number, but got \",\\n+                                        num_elements));\\n     TensorList output;\\n     output.element_shape = element_shape;\\n     output.element_dtype = element_dtype_;'}}",
      "message_norm":"validate num_elements input in tf.raw_ops.tensorlistreserve\n\npiperorigin-revid: 383954564\nchange-id: i454bd78eff85bc4f16ddb7e608596971cca47f8f",
      "language":"en",
      "entities":"[('validate', 'ACTION', ''), ('383954564', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/list_kernels.cc'])",
      "num_files":1.0,
      "patch_content":"From 8a6e874437670045e6c7dc6154c7412b4a2135e2 Mon Sep 17 00:00:00 2001\nFrom: Laura Pak <lpak@google.com>\nDate: Fri, 9 Jul 2021 17:32:55 -0700\nSubject: [PATCH] Validate num_elements input in tf.raw_ops.TensorListReserve\n\nPiperOrigin-RevId: 383954564\nChange-Id: I454bd78eff85bc4f16ddb7e608596971cca47f8f\n---\n tensorflow\/core\/kernels\/list_kernels.cc | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/list_kernels.cc b\/tensorflow\/core\/kernels\/list_kernels.cc\nindex 9a2f373f5ce0cf..488e02337f707b 100644\n--- a\/tensorflow\/core\/kernels\/list_kernels.cc\n+++ b\/tensorflow\/core\/kernels\/list_kernels.cc\n@@ -302,6 +302,10 @@ class TensorListReserve : public OpKernel {\n     PartialTensorShape element_shape;\n     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(0), &element_shape));\n     int32 num_elements = c->input(1).scalar<int32>()();\n+    OP_REQUIRES(c, num_elements >= 0,\n+                errors::InvalidArgument(\"The num_elements to reserve must be a \"\n+                                        \"non negative number, but got \",\n+                                        num_elements));\n     TensorList output;\n     output.element_shape = element_shape;\n     output.element_dtype = element_dtype_;",
      "code_diff":"@@ -302,6 +302,10 @@ class TensorListReserve : public OpKernel {\n     PartialTensorShape element_shape;\n     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(0), &element_shape));\n     int32 num_elements = c->input(1).scalar<int32>()();\n+    OP_REQUIRES(c, num_elements >= 0,\n+                errors::InvalidArgument(\"The num_elements to reserve must be a \"\n+                                        \"non negative number, but got \",\n+                                        num_elements));\n     TensorList output;\n     output.element_shape = element_shape;\n     output.element_dtype = element_dtype_;"
    },
    {
      "index":3,
      "vuln_id":"GHSA-j3mj-fhpq-qqjj",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3'}",
      "dataset":"osv",
      "summary":"Reachable Assertion in Tensorflow ### Impact\nWhen decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. \n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-09",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "commit_sha":"5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "patch":"SINGLE",
      "chain_ord":"['5b491cd5e41ad63735161cec9c2a568172c8b6a3']",
      "before_first_fix_commit":"{'9f3eb61a8033efa4ef45b1f291ef67d5beef8b0e'}",
      "last_fix_commit":"5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/08\/2021, 17:51:28",
      "message":"Validate `proto.dtype()` before calling `set_dtype()`.\n\nThis prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\nPiperOrigin-RevId: 408369083\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
      "files":"{'tensorflow\/core\/framework\/tensor.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5b491cd5e41ad63735161cec9c2a568172c8b6a3\/tensorflow%2Fcore%2Fframework%2Ftensor.cc', 'patch': '@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {\\n                          dtype_error = true, dtype_error = true);\\n     }\\n     if (dtype_error || p == nullptr) return false;\\n+  } else {\\n+    \/\/ Handle the case of empty tensors (N = 0) or tensors with incomplete shape\\n+    \/\/ (N = -1). All other values of `shape.num_elements()` should be invalid by\\n+    \/\/ construction.\\n+    \/\/ Here, we just need to validate that the `proto.dtype()` value is valid.\\n+    bool dtype_error = false;\\n+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,\\n+                       dtype_error = true);\\n+    if (dtype_error) return false;\\n   }\\n   shape_ = shape;\\n   set_dtype(proto.dtype());'}}",
      "message_norm":"validate `proto.dtype()` before calling `set_dtype()`.\n\nthis prevents a `dcheck`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\npiperorigin-revid: 408369083\nchange-id: ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
      "language":"en",
      "entities":"[('validate', 'ACTION', ''), ('prevents', 'ACTION', ''), ('408369083', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/framework\/tensor.cc'])",
      "num_files":1.0,
      "patch_content":"From 5b491cd5e41ad63735161cec9c2a568172c8b6a3 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Mon, 8 Nov 2021 09:51:28 -0800\nSubject: [PATCH] Validate `proto.dtype()` before calling `set_dtype()`.\n\nThis prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\nPiperOrigin-RevId: 408369083\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46\n---\n tensorflow\/core\/framework\/tensor.cc | 9 +++++++++\n 1 file changed, 9 insertions(+)\n\ndiff --git a\/tensorflow\/core\/framework\/tensor.cc b\/tensorflow\/core\/framework\/tensor.cc\nindex 8ae9fd0051652c..c7a08ee0808043 100644\n--- a\/tensorflow\/core\/framework\/tensor.cc\n+++ b\/tensorflow\/core\/framework\/tensor.cc\n@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {\n                          dtype_error = true, dtype_error = true);\n     }\n     if (dtype_error || p == nullptr) return false;\n+  } else {\n+    \/\/ Handle the case of empty tensors (N = 0) or tensors with incomplete shape\n+    \/\/ (N = -1). All other values of `shape.num_elements()` should be invalid by\n+    \/\/ construction.\n+    \/\/ Here, we just need to validate that the `proto.dtype()` value is valid.\n+    bool dtype_error = false;\n+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,\n+                       dtype_error = true);\n+    if (dtype_error) return false;\n   }\n   shape_ = shape;\n   set_dtype(proto.dtype());",
      "code_diff":"@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {\n                          dtype_error = true, dtype_error = true);\n     }\n     if (dtype_error || p == nullptr) return false;\n+  } else {\n+    \/\/ Handle the case of empty tensors (N = 0) or tensors with incomplete shape\n+    \/\/ (N = -1). All other values of `shape.num_elements()` should be invalid by\n+    \/\/ construction.\n+    \/\/ Here, we just need to validate that the `proto.dtype()` value is valid.\n+    bool dtype_error = false;\n+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,\n+                       dtype_error = true);\n+    if (dtype_error) return false;\n   }\n   shape_ = shape;\n   set_dtype(proto.dtype());"
    },
    {
      "index":4,
      "vuln_id":"GHSA-5f2r-qp73-37mr",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/92dba16749fae36c246bec3f9ba474d9ddeb7662'}",
      "dataset":"osv",
      "summary":"`CHECK`-failures during Grappler's `SafeToRemoveIdentity` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`SafeToRemoveIdentity`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc#L59-L98) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commit [92dba16749fae36c246bec3f9ba474d9ddeb7662](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/92dba16749fae36c246bec3f9ba474d9ddeb7662).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/92dba16749fae36c246bec3f9ba474d9ddeb7662",
      "commit_sha":"92dba16749fae36c246bec3f9ba474d9ddeb7662",
      "patch":"SINGLE",
      "chain_ord":"['92dba16749fae36c246bec3f9ba474d9ddeb7662']",
      "before_first_fix_commit":"{'1cda4d4a26acea3814d06e7d9525772ab357fc1c'}",
      "last_fix_commit":"92dba16749fae36c246bec3f9ba474d9ddeb7662",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/11\/2021, 18:43:29",
      "message":"Prevent a null-pointer dereference \/ `CHECK`-fail in grappler.\n\nPiperOrigin-RevId: 409187354\nChange-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/92dba16749fae36c246bec3f9ba474d9ddeb7662\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fdependency_optimizer.cc', 'patch': '@@ -75,8 +75,10 @@ bool DependencyOptimizer::SafeToRemoveIdentity(const NodeDef& node) const {\\n   }\\n \\n   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));\\n-  CHECK(input != nullptr) << \"node = \" << node.name()\\n-                          << \" input = \" << node.input(0);\\n+  if (input == nullptr) {\\n+    VLOG(1) << \"node = \" << node.name() << \" input = \" << node.input(0);\\n+    return false;\\n+  }\\n   \/\/ Don\\'t remove Identity nodes corresponding to Variable reads or following\\n   \/\/ Recv.\\n   if (IsVariable(*input) || IsRecv(*input)) {'}}",
      "message_norm":"prevent a null-pointer dereference \/ `check`-fail in grappler.\n\npiperorigin-revid: 409187354\nchange-id: i369c249cca32e6c56ec193f0ebbf2f2768fc7d43",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('null-pointer dereference', 'SECWORD', ''), ('409187354', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc'])",
      "num_files":1.0,
      "patch_content":"From 92dba16749fae36c246bec3f9ba474d9ddeb7662 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 11 Nov 2021 10:43:29 -0800\nSubject: [PATCH] Prevent a null-pointer dereference \/ `CHECK`-fail in\n grappler.\n\nPiperOrigin-RevId: 409187354\nChange-Id: I369c249cca32e6c56ec193f0ebbf2f2768fc7d43\n---\n tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc b\/tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc\nindex aadea833a4fc48..bfd98a58a77718 100644\n--- a\/tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc\n+++ b\/tensorflow\/core\/grappler\/optimizers\/dependency_optimizer.cc\n@@ -75,8 +75,10 @@ bool DependencyOptimizer::SafeToRemoveIdentity(const NodeDef& node) const {\n   }\n \n   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));\n-  CHECK(input != nullptr) << \"node = \" << node.name()\n-                          << \" input = \" << node.input(0);\n+  if (input == nullptr) {\n+    VLOG(1) << \"node = \" << node.name() << \" input = \" << node.input(0);\n+    return false;\n+  }\n   \/\/ Don't remove Identity nodes corresponding to Variable reads or following\n   \/\/ Recv.\n   if (IsVariable(*input) || IsRecv(*input)) {",
      "code_diff":"@@ -75,8 +75,10 @@ bool DependencyOptimizer::SafeToRemoveIdentity(const NodeDef& node) const {\n   }\n \n   const NodeDef* input = node_map_->GetNode(NodeName(node.input(0)));\n-  CHECK(input != nullptr) << \"node = \" << node.name()\n-                          << \" input = \" << node.input(0);\n+  if (input == nullptr) {\n+    VLOG(1) << \"node = \" << node.name() << \" input = \" << node.input(0);\n+    return false;\n+  }\n   \/\/ Don't remove Identity nodes corresponding to Variable reads or following\n   \/\/ Recv.\n   if (IsVariable(*input) || IsRecv(*input)) {"
    },
    {
      "index":5,
      "vuln_id":"GHSA-43jf-985q-588j",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
      "dataset":"osv",
      "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-09",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645",
      "commit_sha":"3d89911481ba6ebe8c88c1c0b595412121e6c645",
      "patch":"MULTI",
      "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
      "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
      "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/12\/2021, 16:12:05",
      "message":"Eliminate `CHECK`-fail from `function.cc`.\n\nPiperOrigin-RevId: 409414744\nChange-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
      "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3d89911481ba6ebe8c88c1c0b595412121e6c645\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\\n     DataTypeVector dtypes;\\n     TF_RETURN_IF_ERROR(\\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\\n-    CHECK_GE(dtypes.size(), size_t{1});\\n+    if (dtypes.size() < size_t{1}) {\\n+      return errors::Internal(\"Expected a list of at least one dtype\");\\n+    }\\n     int arg_index = result_.nodes.size();\\n     TF_RETURN_IF_ERROR(\\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));'}}",
      "message_norm":"eliminate `check`-fail from `function.cc`.\n\npiperorigin-revid: 409414744\nchange-id: ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
      "language":"it",
      "entities":"[('409414744', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
      "num_files":1.0,
      "patch_content":"From 3d89911481ba6ebe8c88c1c0b595412121e6c645 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Fri, 12 Nov 2021 08:12:05 -0800\nSubject: [PATCH] Eliminate `CHECK`-fail from `function.cc`.\n\nPiperOrigin-RevId: 409414744\nChange-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad\n---\n tensorflow\/core\/framework\/function.cc | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a\/tensorflow\/core\/framework\/function.cc b\/tensorflow\/core\/framework\/function.cc\nindex 41b8d446149694..492d9d54fe60eb 100644\n--- a\/tensorflow\/core\/framework\/function.cc\n+++ b\/tensorflow\/core\/framework\/function.cc\n@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\n     DataTypeVector dtypes;\n     TF_RETURN_IF_ERROR(\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\n-    CHECK_GE(dtypes.size(), size_t{1});\n+    if (dtypes.size() < size_t{1}) {\n+      return errors::Internal(\"Expected a list of at least one dtype\");\n+    }\n     int arg_index = result_.nodes.size();\n     TF_RETURN_IF_ERROR(\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));",
      "code_diff":"@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\n     DataTypeVector dtypes;\n     TF_RETURN_IF_ERROR(\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\n-    CHECK_GE(dtypes.size(), size_t{1});\n+    if (dtypes.size() < size_t{1}) {\n+      return errors::Internal(\"Expected a list of at least one dtype\");\n+    }\n     int arg_index = result_.nodes.size();\n     TF_RETURN_IF_ERROR(\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));"
    },
    {
      "index":6,
      "vuln_id":"GHSA-fphq-gw9m-ghrv",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2'}",
      "dataset":"osv",
      "summary":"CHECK-fail in `CTCGreedyDecoder` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)\n```\n  \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/1615440b17b364b875eb06f43d087381f1460a65\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.\n\n### Patches \nWe have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n                      \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        \n                      \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "commit_sha":"ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "patch":"SINGLE",
      "chain_ord":"['ea3b43e98c32c97b35d52b4c66f9107452ca8fb2']",
      "before_first_fix_commit":"{'1615440b17b364b875eb06f43d087381f1460a65'}",
      "last_fix_commit":"ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/22\/2021, 22:11:05",
      "message":"Fix `tf.raw_ops.CTCGreedyDecoder` CHECK failure.\n\nPiperOrigin-RevId: 369960465\nChange-Id: If0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
      "author":"Amit Patankar",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/ctc_decoder_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2\/tensorflow%2Fcore%2Fkernels%2Fctc_decoder_ops.cc', 'patch': '@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {\\n         int prev_indices = -1;\\n         for (int t = 0; t < seq_len_t(b); ++t) {\\n           int max_class_indices;\\n+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\\n+                      errors::InvalidArgument(\"Invalid input dimensions.\"));\\n           log_prob_t(b, 0) +=\\n               -RowMax<T>(input_list_t[t], b, &max_class_indices);\\n           if (max_class_indices != blank_index &&'}}",
      "message_norm":"fix `tf.raw_ops.ctcgreedydecoder` check failure.\n\npiperorigin-revid: 369960465\nchange-id: if0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('tf.raw_ops.ctcgreedydecoder', 'SECWORD', ''), ('369960465', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/ctc_decoder_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From ea3b43e98c32c97b35d52b4c66f9107452ca8fb2 Mon Sep 17 00:00:00 2001\nFrom: Amit Patankar <amitpatankar@google.com>\nDate: Thu, 22 Apr 2021 15:11:05 -0700\nSubject: [PATCH] Fix `tf.raw_ops.CTCGreedyDecoder` CHECK failure.\n\nPiperOrigin-RevId: 369960465\nChange-Id: If0b8b3264d5a47a24ac0970ed7b81ce6b4921fae\n---\n tensorflow\/core\/kernels\/ctc_decoder_ops.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc b\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc\nindex d62aef2d03b988..22681f97437f0c 100644\n--- a\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc\n+++ b\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc\n@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {\n         int prev_indices = -1;\n         for (int t = 0; t < seq_len_t(b); ++t) {\n           int max_class_indices;\n+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\n+                      errors::InvalidArgument(\"Invalid input dimensions.\"));\n           log_prob_t(b, 0) +=\n               -RowMax<T>(input_list_t[t], b, &max_class_indices);\n           if (max_class_indices != blank_index &&",
      "code_diff":"@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {\n         int prev_indices = -1;\n         for (int t = 0; t < seq_len_t(b); ++t) {\n           int max_class_indices;\n+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\n+                      errors::InvalidArgument(\"Invalid input dimensions.\"));\n           log_prob_t(b, 0) +=\n               -RowMax<T>(input_list_t[t], b, &max_class_indices);\n           if (max_class_indices != blank_index &&"
    },
    {
      "index":7,
      "vuln_id":"GHSA-36vm-xw34-x4pj",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2'}",
      "dataset":"osv",
      "summary":"CHECK-fail in `tf.raw_ops.IRFFT` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:\n    \n```python\nimport tensorflow as tf\n\nvalues = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)\n``` \n    \nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n\n### Patches\nWe have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2",
      "commit_sha":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
      "patch":"SINGLE",
      "chain_ord":"['1c56f53be0b722ca657cbc7df461ed676c8642a2']",
      "before_first_fix_commit":"{'8926cbdbbff8b9975d63a41569d51c50a9806d9d'}",
      "last_fix_commit":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/05\/2021, 00:11:46",
      "message":"Fix a check fail in Fast Fourier implementation\n\nPiperOrigin-RevId: 372026629\nChange-Id: Id05c3362aa575271bc3e06b16316c9037085fc11",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'tensorflow\/core\/kernels\/fft_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1c56f53be0b722ca657cbc7df461ed676c8642a2\/tensorflow%2Fcore%2Fkernels%2Ffft_ops.cc', 'patch': '@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\\n limitations under the License.\\n ==============================================================================*\/\\n \\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #define EIGEN_USE_THREADS\\n \\n \/\/ See docs in ..\/ops\/fft_ops.cc.\\n@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {\\n           i == FFTRank ? fft_shape[i - 1] \/ 2 + 1 : fft_shape[i - 1];\\n       full_fft_shape.AddDim(fft_shape[i - 1]);\\n     }\\n+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,\\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\\n+                                        full_fft_shape.DebugString()));\\n \\n     Tensor temp;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),'}}",
      "message_norm":"fix a check fail in fast fourier implementation\n\npiperorigin-revid: 372026629\nchange-id: id05c3362aa575271bc3e06b16316c9037085fc11",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('372026629', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/fft_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From 1c56f53be0b722ca657cbc7df461ed676c8642a2 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Tue, 4 May 2021 17:11:46 -0700\nSubject: [PATCH] Fix a check fail in Fast Fourier implementation\n\nPiperOrigin-RevId: 372026629\nChange-Id: Id05c3362aa575271bc3e06b16316c9037085fc11\n---\n tensorflow\/core\/kernels\/fft_ops.cc | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/fft_ops.cc b\/tensorflow\/core\/kernels\/fft_ops.cc\nindex c3235c1547ff0b..29ca0d2f546a08 100644\n--- a\/tensorflow\/core\/kernels\/fft_ops.cc\n+++ b\/tensorflow\/core\/kernels\/fft_ops.cc\n@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================*\/\n \n+#include \"tensorflow\/core\/platform\/errors.h\"\n #define EIGEN_USE_THREADS\n \n \/\/ See docs in ..\/ops\/fft_ops.cc.\n@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {\n           i == FFTRank ? fft_shape[i - 1] \/ 2 + 1 : fft_shape[i - 1];\n       full_fft_shape.AddDim(fft_shape[i - 1]);\n     }\n+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\n+                                        full_fft_shape.DebugString()));\n \n     Tensor temp;\n     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),",
      "code_diff":"@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================*\/\n \n+#include \"tensorflow\/core\/platform\/errors.h\"\n #define EIGEN_USE_THREADS\n \n \/\/ See docs in ..\/ops\/fft_ops.cc.\n@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {\n           i == FFTRank ? fft_shape[i - 1] \/ 2 + 1 : fft_shape[i - 1];\n       full_fft_shape.AddDim(fft_shape[i - 1]);\n     }\n+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\n+                                        full_fft_shape.DebugString()));\n \n     Tensor temp;\n     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),"
    },
    {
      "index":8,
      "vuln_id":"GHSA-ph87-fvjr-v33w",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/31bd5026304677faa8a0b77602c6154171b9aec1'}",
      "dataset":"osv",
      "summary":"CHECK-fail in `tf.raw_ops.RFFT` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`:\n    \n```python\nimport tensorflow as tf\n\ninputs = tf.constant([1], shape=[1], dtype=tf.float32)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.RFFT(input=inputs, fft_length=fft_length)\n```\n\nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n    \n### Patches\nWe have patched the issue in GitHub commit [31bd5026304677faa8a0b77602c6154171b9aec1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/31bd5026304677faa8a0b77602c6154171b9aec1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/31bd5026304677faa8a0b77602c6154171b9aec1",
      "commit_sha":"31bd5026304677faa8a0b77602c6154171b9aec1",
      "patch":"SINGLE",
      "chain_ord":"['31bd5026304677faa8a0b77602c6154171b9aec1']",
      "before_first_fix_commit":"{'1c56f53be0b722ca657cbc7df461ed676c8642a2'}",
      "last_fix_commit":"31bd5026304677faa8a0b77602c6154171b9aec1",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/05\/2021, 00:42:54",
      "message":"Prevent check fail in FFT\n\nPiperOrigin-RevId: 372031044\nChange-Id: I50994e3e8a5d1342d01bde80256f6bf2730ca299",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'tensorflow\/core\/kernels\/fft_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/31bd5026304677faa8a0b77602c6154171b9aec1\/tensorflow%2Fcore%2Fkernels%2Ffft_ops.cc', 'patch': '@@ -222,6 +222,9 @@ class FFTCPU : public FFTBase {\\n       input_slice_sizes[i] = fft_shape[i - 1];\\n       temp_shape.AddDim(fft_shape[i - 1]);\\n     }\\n+    OP_REQUIRES(ctx, temp_shape.num_elements() > 0,\\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\\n+                                        temp_shape.DebugString()));\\n \\n     auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();\\n     const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;'}}",
      "message_norm":"prevent check fail in fft\n\npiperorigin-revid: 372031044\nchange-id: i50994e3e8a5d1342d01bde80256f6bf2730ca299",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('372031044', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/fft_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From 31bd5026304677faa8a0b77602c6154171b9aec1 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Tue, 4 May 2021 17:42:54 -0700\nSubject: [PATCH] Prevent check fail in FFT\n\nPiperOrigin-RevId: 372031044\nChange-Id: I50994e3e8a5d1342d01bde80256f6bf2730ca299\n---\n tensorflow\/core\/kernels\/fft_ops.cc | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/fft_ops.cc b\/tensorflow\/core\/kernels\/fft_ops.cc\nindex 29ca0d2f546a08..fc29f49d223be3 100644\n--- a\/tensorflow\/core\/kernels\/fft_ops.cc\n+++ b\/tensorflow\/core\/kernels\/fft_ops.cc\n@@ -222,6 +222,9 @@ class FFTCPU : public FFTBase {\n       input_slice_sizes[i] = fft_shape[i - 1];\n       temp_shape.AddDim(fft_shape[i - 1]);\n     }\n+    OP_REQUIRES(ctx, temp_shape.num_elements() > 0,\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\n+                                        temp_shape.DebugString()));\n \n     auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();\n     const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;",
      "code_diff":"@@ -222,6 +222,9 @@ class FFTCPU : public FFTBase {\n       input_slice_sizes[i] = fft_shape[i - 1];\n       temp_shape.AddDim(fft_shape[i - 1]);\n     }\n+    OP_REQUIRES(ctx, temp_shape.num_elements() > 0,\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\n+                                        temp_shape.DebugString()));\n \n     auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();\n     const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;"
    },
    {
      "index":9,
      "vuln_id":"GHSA-4j82-5ccr-4r8v",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2426bba00a01de6913738df8fa78e0215fcce02'}",
      "dataset":"osv",
      "summary":"`CHECK`-failures in `TensorByteSize` in Tensorflow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [`TensorByteSize`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/attr_value_util.cc#L46-L50) would trigger `CHECK` failures.\n\n```cc\nint64_t TensorByteSize(const TensorProto& t) {\n  \/\/ num_elements returns -1 if shape is not fully defined.\n  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\n  return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());\n}\n```\n`TensorShape` constructor throws a `CHECK`-fail if shape is partial or has a number of elements that would overflow the size of an `int`. The `PartialTensorShape` constructor instead does not cause a `CHECK`-abort if the shape is partial, which is exactly what this function needs to be able to return `-1`.\n\n### Patches\nWe have patched the issue in GitHub commit [c2426bba00a01de6913738df8fa78e0215fcce02](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2426bba00a01de6913738df8fa78e0215fcce02).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2426bba00a01de6913738df8fa78e0215fcce02",
      "commit_sha":"c2426bba00a01de6913738df8fa78e0215fcce02",
      "patch":"SINGLE",
      "chain_ord":"['c2426bba00a01de6913738df8fa78e0215fcce02']",
      "before_first_fix_commit":"{'31d8f8035f559fc6f03516f18ca3afea652d69b0'}",
      "last_fix_commit":"c2426bba00a01de6913738df8fa78e0215fcce02",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/11\/2021, 19:50:53",
      "message":"Use `PartialTensorShape` instead of `TensorShape`.\n\n`TensorShape` constructor throws a CHECK-fail if shape is partial\/overflows which the other doesn't. We are only determining the number of elements in the shape and partial shape should be used as it returns negative number when needed.\n\nPiperOrigin-RevId: 409205384\nChange-Id: Ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'tensorflow\/core\/framework\/attr_value_util.cc': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c2426bba00a01de6913738df8fa78e0215fcce02\/tensorflow%2Fcore%2Fframework%2Fattr_value_util.cc', 'patch': '@@ -45,7 +45,7 @@ constexpr int kMaxTensorNestDepth = 100;\\n \/\/ not fully defined return -1.\\n int64_t TensorByteSize(const TensorProto& t) {\\n   \/\/ num_elements returns -1 if shape is not fully defined.\\n-  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\\n+  int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();\\n   return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());\\n }'}}",
      "message_norm":"use `partialtensorshape` instead of `tensorshape`.\n\n`tensorshape` constructor throws a check-fail if shape is partial\/overflows which the other doesn't. we are only determining the number of elements in the shape and partial shape should be used as it returns negative number when needed.\n\npiperorigin-revid: 409205384\nchange-id: ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b",
      "language":"en",
      "entities":"[('overflows', 'SECWORD', ''), ('409205384', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/framework\/attr_value_util.cc'])",
      "num_files":1.0,
      "patch_content":"From c2426bba00a01de6913738df8fa78e0215fcce02 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 11 Nov 2021 11:50:53 -0800\nSubject: [PATCH] Use `PartialTensorShape` instead of `TensorShape`.\n\n`TensorShape` constructor throws a CHECK-fail if shape is partial\/overflows which the other doesn't. We are only determining the number of elements in the shape and partial shape should be used as it returns negative number when needed.\n\nPiperOrigin-RevId: 409205384\nChange-Id: Ia56542ff9ec758f2c9ffc7e4dcc9fa7eecd86e7b\n---\n tensorflow\/core\/framework\/attr_value_util.cc | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/tensorflow\/core\/framework\/attr_value_util.cc b\/tensorflow\/core\/framework\/attr_value_util.cc\nindex 20f34cc46c8294..019063e22d3c62 100644\n--- a\/tensorflow\/core\/framework\/attr_value_util.cc\n+++ b\/tensorflow\/core\/framework\/attr_value_util.cc\n@@ -45,7 +45,7 @@ constexpr int kMaxTensorNestDepth = 100;\n \/\/ not fully defined return -1.\n int64_t TensorByteSize(const TensorProto& t) {\n   \/\/ num_elements returns -1 if shape is not fully defined.\n-  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\n+  int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();\n   return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());\n }",
      "code_diff":"@@ -45,7 +45,7 @@ constexpr int kMaxTensorNestDepth = 100;\n \/\/ not fully defined return -1.\n int64_t TensorByteSize(const TensorProto& t) {\n   \/\/ num_elements returns -1 if shape is not fully defined.\n-  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\n+  int64_t num_elems = PartialTensorShape(t.tensor_shape()).num_elements();\n   return num_elems < 0 ? -1 : num_elems * DataTypeSize(t.dtype());\n }"
    },
    {
      "index":10,
      "vuln_id":"GHSA-4v5p-v5h9-6xjx",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0'}",
      "dataset":"osv",
      "summary":"`CHECK`-failures in Tensorflow ### Impact\nAn attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated.\n\n### Patches\nWe have patched the issue in GitHub commit [c2b31ff2d3151acb230edc3f5b1832d2c713a9e0](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-09",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
      "commit_sha":"c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
      "patch":"SINGLE",
      "chain_ord":"['c2b31ff2d3151acb230edc3f5b1832d2c713a9e0']",
      "before_first_fix_commit":"{'41424fd983e23b11ed13bbd5a2b2be0e25ab4244'}",
      "last_fix_commit":"c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/08\/2021, 18:14:10",
      "message":"Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
      "files":"{'tensorflow\/core\/framework\/op_def_util.cc': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0\/tensorflow%2Fcore%2Fframework%2Fop_def_util.cc', 'patch': '@@ -821,9 +821,10 @@ bool RepeatedAttrDefEqual(\\n     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {\\n   std::unordered_map<string, const OpDef::AttrDef*> a1_set;\\n   for (const OpDef::AttrDef& def : a1) {\\n-    DCHECK(a1_set.find(def.name()) == a1_set.end())\\n-        << \"AttrDef names must be unique, but \\'\" << def.name()\\n-        << \"\\' appears more than once\";\\n+    if (a1_set.find(def.name()) != a1_set.end()) {\\n+      LOG(ERROR) << \"AttrDef names must be unique, but \\'\" << def.name()\\n+                 << \"\\' appears more than once\";\\n+    }\\n     a1_set[def.name()] = &def;\\n   }\\n   for (const OpDef::AttrDef& def : a2) {'}}",
      "message_norm":"remove a `dcheck`-fail, log an error instead.\n\n`dcheck` in debug mode results in crashes. tensorflow has had multiple vulnerabilities due to this.\n\noutside of debug mode, `dcheck` is a no-op.\n\na better alternative is to report an error to the log buffer and continue. this should happen both in debug mode and in prod mode.\n\npiperorigin-revid: 408375925\nchange-id: id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
      "language":"en",
      "entities":"[('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('vulnerabilities', 'SECWORD', ''), ('error', 'FLAW', ''), ('408375925', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/framework\/op_def_util.cc'])",
      "num_files":1.0,
      "patch_content":"From c2b31ff2d3151acb230edc3f5b1832d2c713a9e0 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Mon, 8 Nov 2021 10:14:10 -0800\nSubject: [PATCH] Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356\n---\n tensorflow\/core\/framework\/op_def_util.cc | 7 ++++---\n 1 file changed, 4 insertions(+), 3 deletions(-)\n\ndiff --git a\/tensorflow\/core\/framework\/op_def_util.cc b\/tensorflow\/core\/framework\/op_def_util.cc\nindex dcbe5f38ce88ea..6127913d9ba1f0 100644\n--- a\/tensorflow\/core\/framework\/op_def_util.cc\n+++ b\/tensorflow\/core\/framework\/op_def_util.cc\n@@ -821,9 +821,10 @@ bool RepeatedAttrDefEqual(\n     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {\n   std::unordered_map<string, const OpDef::AttrDef*> a1_set;\n   for (const OpDef::AttrDef& def : a1) {\n-    DCHECK(a1_set.find(def.name()) == a1_set.end())\n-        << \"AttrDef names must be unique, but '\" << def.name()\n-        << \"' appears more than once\";\n+    if (a1_set.find(def.name()) != a1_set.end()) {\n+      LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()\n+                 << \"' appears more than once\";\n+    }\n     a1_set[def.name()] = &def;\n   }\n   for (const OpDef::AttrDef& def : a2) {",
      "code_diff":"@@ -821,9 +821,10 @@ bool RepeatedAttrDefEqual(\n     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {\n   std::unordered_map<string, const OpDef::AttrDef*> a1_set;\n   for (const OpDef::AttrDef& def : a1) {\n-    DCHECK(a1_set.find(def.name()) == a1_set.end())\n-        << \"AttrDef names must be unique, but '\" << def.name()\n-        << \"' appears more than once\";\n+    if (a1_set.find(def.name()) != a1_set.end()) {\n+      LOG(ERROR) << \"AttrDef names must be unique, but '\" << def.name()\n+                 << \"' appears more than once\";\n+    }\n     a1_set[def.name()] = &def;\n   }\n   for (const OpDef::AttrDef& def : a2) {"
    },
    {
      "index":11,
      "vuln_id":"GHSA-wp3c-xw9g-gpcg",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7ae2af34087fb4b5c8915279efd03da3b81028bc'}",
      "dataset":"osv",
      "summary":"Lack of validation in `SparseDenseCwiseMul` ### Impact\nDue to lack of validation in `tf.raw_ops.SparseDenseCwiseMul`, an attacker can trigger denial of service via `CHECK`-fails or accesses to outside the bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[10, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\nshape = tf.constant([0, 0], shape=[2], dtype=tf.int64)\ndense = tf.constant([], shape=[0], dtype=tf.int64)\n  \ntf.raw_ops.SparseDenseCwiseMul(\n    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)\n```\n\nSince the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/38178a2f7a681a7835bb0912702a134bfe3b4d84\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc#L68-L80) only validates the rank of the input arguments but no [constraints between dimensions](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/raw_ops\/SparseDenseCwiseMul), an attacker can abuse them to trigger internal `CHECK` assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.\n\n### Patches\nWe have patched the issue in GitHub commit [7ae2af34087fb4b5c8915279efd03da3b81028bc](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7ae2af34087fb4b5c8915279efd03da3b81028bc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "commit_sha":"7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "patch":"SINGLE",
      "chain_ord":"['7ae2af34087fb4b5c8915279efd03da3b81028bc']",
      "before_first_fix_commit":"{'38178a2f7a681a7835bb0912702a134bfe3b4d84'}",
      "last_fix_commit":"7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/05\/2021, 04:30:50",
      "message":"Fix heap-buffer-overflow issue with `tf.raw_ops.SparseDenseCwiseMul`.\n\nPiperOrigin-RevId: 372054410\nChange-Id: Ifcce0491e2e3816838c87e73be30a1e61b65174d",
      "author":"Amit Patankar",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
      "files":"{'tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/7ae2af34087fb4b5c8915279efd03da3b81028bc\/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -78,6 +78,11 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n                     \"but received shapes: \",\\n                     values_t->shape().DebugString(), \" and \",\\n                     shape_t->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, values_t->dim_size(0) == indices_t->dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"The first dimension of values and indices should match. (\",\\n+            values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\\n \\n     const auto indices_mat = indices_t->matrix<int64>();\\n     const auto shape_vec = shape_t->vec<int64>();'}}",
      "message_norm":"fix heap-buffer-overflow issue with `tf.raw_ops.sparsedensecwisemul`.\n\npiperorigin-revid: 372054410\nchange-id: ifcce0491e2e3816838c87e73be30a1e61b65174d",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372054410', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc'])",
      "num_files":1.0,
      "patch_content":"From 7ae2af34087fb4b5c8915279efd03da3b81028bc Mon Sep 17 00:00:00 2001\nFrom: Amit Patankar <amitpatankar@google.com>\nDate: Tue, 4 May 2021 21:30:50 -0700\nSubject: [PATCH] Fix heap-buffer-overflow issue with\n `tf.raw_ops.SparseDenseCwiseMul`.\n\nPiperOrigin-RevId: 372054410\nChange-Id: Ifcce0491e2e3816838c87e73be30a1e61b65174d\n---\n tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc b\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc\nindex 3a5e66a0e73ea6..dac4a3d3e6bfcd 100644\n--- a\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc\n+++ b\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc\n@@ -78,6 +78,11 @@ class SparseDenseBinaryOpShared : public OpKernel {\n                     \"but received shapes: \",\n                     values_t->shape().DebugString(), \" and \",\n                     shape_t->shape().DebugString()));\n+    OP_REQUIRES(\n+        ctx, values_t->dim_size(0) == indices_t->dim_size(0),\n+        errors::InvalidArgument(\n+            \"The first dimension of values and indices should match. (\",\n+            values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\n \n     const auto indices_mat = indices_t->matrix<int64>();\n     const auto shape_vec = shape_t->vec<int64>();",
      "code_diff":"@@ -78,6 +78,11 @@ class SparseDenseBinaryOpShared : public OpKernel {\n                     \"but received shapes: \",\n                     values_t->shape().DebugString(), \" and \",\n                     shape_t->shape().DebugString()));\n+    OP_REQUIRES(\n+        ctx, values_t->dim_size(0) == indices_t->dim_size(0),\n+        errors::InvalidArgument(\n+            \"The first dimension of values and indices should match. (\",\n+            values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\n \n     const auto indices_mat = indices_t->matrix<int64>();\n     const auto shape_vec = shape_t->vec<int64>();"
    },
    {
      "index":12,
      "vuln_id":"GHSA-gvm4-h8j3-rjrq",
      "cwe_id":"{'CWE-617'}",
      "score":2.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4'}",
      "dataset":"osv",
      "summary":"CHECK-fail in `LoadAndRemapMatrix` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:\n    \n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/d94227d43aa125ad8b54115c03cece54f6a1977b\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.\n  \n```cc\nconst string& ckpt_path = ckpt_path_t->scalar<tstring>()();\n```\n\nHowever, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar<T>()()` to trigger and terminate the process.\n\n### Patches\nWe have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4",
      "commit_sha":"77dd114513d7796e1e2b8aece214a380af26fbf4",
      "patch":"SINGLE",
      "chain_ord":"['77dd114513d7796e1e2b8aece214a380af26fbf4']",
      "before_first_fix_commit":"{'faa76f39014ed3b5e2c158593b1335522e573c7f'}",
      "last_fix_commit":"77dd114513d7796e1e2b8aece214a380af26fbf4",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/04\/2021, 22:46:30",
      "message":"Fix a check fail\n\nPiperOrigin-RevId: 372011072\nChange-Id: I1062cfaed0aa16884e9a16312483794d188db76f",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
      "files":"{'tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/77dd114513d7796e1e2b8aece214a380af26fbf4\/tensorflow%2Fcore%2Fkernels%2Fload_and_remap_matrix_op.cc', 'patch': '@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {\\n     \/\/ Processes the checkpoint source and the provided Tensor name.\\n     const Tensor* ckpt_path_t;\\n     OP_REQUIRES_OK(context, context->input(\"ckpt_path\", &ckpt_path_t));\\n+    OP_REQUIRES(\\n+        context, ckpt_path_t->NumElements() == 1,\\n+        errors::InvalidArgument(\"The `ckpt_path` tensor must have exactly one \"\\n+                                \"element, got tensor of shape \",\\n+                                ckpt_path_t->shape().DebugString()));\\n     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();\\n     const Tensor* old_tensor_name_t;\\n     OP_REQUIRES_OK(context,'}}",
      "message_norm":"fix a check fail\n\npiperorigin-revid: 372011072\nchange-id: i1062cfaed0aa16884e9a16312483794d188db76f",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('372011072', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 77dd114513d7796e1e2b8aece214a380af26fbf4 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Tue, 4 May 2021 15:46:30 -0700\nSubject: [PATCH] Fix a check fail\n\nPiperOrigin-RevId: 372011072\nChange-Id: I1062cfaed0aa16884e9a16312483794d188db76f\n---\n tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc b\/tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc\nindex cb0245a9b61261..5ec28c70358132 100644\n--- a\/tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc\n+++ b\/tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc\n@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {\n     \/\/ Processes the checkpoint source and the provided Tensor name.\n     const Tensor* ckpt_path_t;\n     OP_REQUIRES_OK(context, context->input(\"ckpt_path\", &ckpt_path_t));\n+    OP_REQUIRES(\n+        context, ckpt_path_t->NumElements() == 1,\n+        errors::InvalidArgument(\"The `ckpt_path` tensor must have exactly one \"\n+                                \"element, got tensor of shape \",\n+                                ckpt_path_t->shape().DebugString()));\n     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();\n     const Tensor* old_tensor_name_t;\n     OP_REQUIRES_OK(context,",
      "code_diff":"@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {\n     \/\/ Processes the checkpoint source and the provided Tensor name.\n     const Tensor* ckpt_path_t;\n     OP_REQUIRES_OK(context, context->input(\"ckpt_path\", &ckpt_path_t));\n+    OP_REQUIRES(\n+        context, ckpt_path_t->NumElements() == 1,\n+        errors::InvalidArgument(\"The `ckpt_path` tensor must have exactly one \"\n+                                \"element, got tensor of shape \",\n+                                ckpt_path_t->shape().DebugString()));\n     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();\n     const Tensor* old_tensor_name_t;\n     OP_REQUIRES_OK(context,"
    },
    {
      "index":13,
      "vuln_id":"GHSA-43jf-985q-588j",
      "cwe_id":"{'CWE-617'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
      "dataset":"osv",
      "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2022-02-09",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
      "commit_sha":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
      "patch":"MULTI",
      "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
      "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
      "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
      "chain_ord_pos":2.0,
      "commit_datetime":"11\/12\/2021, 16:19:38",
      "message":"Eliminate debug `CHECK`-fail from `function.cc`\n\nPiperOrigin-RevId: 409416119\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
      "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {\\n     for (size_t i = 0; i < dtypes.size(); ++i) {\\n       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),\\n                                  {true, arg_index, 0, false, {dtypes[i]}}));\\n-      DCHECK_EQ(arg_index, result_.nodes.size());\\n+      if (arg_index != result_.nodes.size()) {\\n+        return errors::Internal(\\n+            \"Expected arg_index to be equal to the number of nodes in result.\",\\n+            \" Got \", arg_index, \" and \", result_.nodes.size());\\n+      }\\n       string name = arg_def.name();\\n       if (dtypes.size() > 1) {\\n         strings::StrAppend(&name, \"_\", i);'}}",
      "message_norm":"eliminate debug `check`-fail from `function.cc`\n\npiperorigin-revid: 409416119\nchange-id: i8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
      "language":"en",
      "entities":"[('409416119', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
      "num_files":1.0,
      "patch_content":"From dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Fri, 12 Nov 2021 08:19:38 -0800\nSubject: [PATCH] Eliminate debug `CHECK`-fail from `function.cc`\n\nPiperOrigin-RevId: 409416119\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe\n---\n tensorflow\/core\/framework\/function.cc | 6 +++++-\n 1 file changed, 5 insertions(+), 1 deletion(-)\n\ndiff --git a\/tensorflow\/core\/framework\/function.cc b\/tensorflow\/core\/framework\/function.cc\nindex 492d9d54fe60eb..b8318ef346ae08 100644\n--- a\/tensorflow\/core\/framework\/function.cc\n+++ b\/tensorflow\/core\/framework\/function.cc\n@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {\n     for (size_t i = 0; i < dtypes.size(); ++i) {\n       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),\n                                  {true, arg_index, 0, false, {dtypes[i]}}));\n-      DCHECK_EQ(arg_index, result_.nodes.size());\n+      if (arg_index != result_.nodes.size()) {\n+        return errors::Internal(\n+            \"Expected arg_index to be equal to the number of nodes in result.\",\n+            \" Got \", arg_index, \" and \", result_.nodes.size());\n+      }\n       string name = arg_def.name();\n       if (dtypes.size() > 1) {\n         strings::StrAppend(&name, \"_\", i);",
      "code_diff":"@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {\n     for (size_t i = 0; i < dtypes.size(); ++i) {\n       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),\n                                  {true, arg_index, 0, false, {dtypes[i]}}));\n-      DCHECK_EQ(arg_index, result_.nodes.size());\n+      if (arg_index != result_.nodes.size()) {\n+        return errors::Internal(\n+            \"Expected arg_index to be equal to the number of nodes in result.\",\n+            \" Got \", arg_index, \" and \", result_.nodes.size());\n+      }\n       string name = arg_def.name();\n       if (dtypes.size() > 1) {\n         strings::StrAppend(&name, \"_\", i);"
    }
  ]
}