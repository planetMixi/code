{
  "schema":{
    "fields":[
      {
        "name":"index",
        "type":"integer"
      },
      {
        "name":"vuln_id",
        "type":"string"
      },
      {
        "name":"cwe_id",
        "type":"string"
      },
      {
        "name":"score",
        "type":"number"
      },
      {
        "name":"chain",
        "type":"string"
      },
      {
        "name":"dataset",
        "type":"string"
      },
      {
        "name":"summary",
        "type":"string"
      },
      {
        "name":"published_date",
        "type":"string"
      },
      {
        "name":"chain_len",
        "type":"integer"
      },
      {
        "name":"project",
        "type":"string"
      },
      {
        "name":"commit_href",
        "type":"string"
      },
      {
        "name":"commit_sha",
        "type":"string"
      },
      {
        "name":"patch",
        "type":"string"
      },
      {
        "name":"chain_ord",
        "type":"string"
      },
      {
        "name":"before_first_fix_commit",
        "type":"string"
      },
      {
        "name":"last_fix_commit",
        "type":"string"
      },
      {
        "name":"chain_ord_pos",
        "type":"number"
      },
      {
        "name":"commit_datetime",
        "type":"string"
      },
      {
        "name":"message",
        "type":"string"
      },
      {
        "name":"author",
        "type":"string"
      },
      {
        "name":"comments",
        "type":"string"
      },
      {
        "name":"stats",
        "type":"string"
      },
      {
        "name":"files",
        "type":"string"
      },
      {
        "name":"message_norm",
        "type":"string"
      },
      {
        "name":"language",
        "type":"string"
      },
      {
        "name":"entities",
        "type":"string"
      },
      {
        "name":"classification_level_1",
        "type":"string"
      },
      {
        "name":"classification_level_2",
        "type":"string"
      },
      {
        "name":"list_files",
        "type":"string"
      },
      {
        "name":"num_files",
        "type":"number"
      },
      {
        "name":"patch_content",
        "type":"string"
      },
      {
        "name":"code_diff",
        "type":"string"
      }
    ],
    "primaryKey":[
      "index"
    ],
    "pandas_version":"1.4.0"
  },
  "data":[
    {
      "index":0,
      "vuln_id":"GHSA-9rpc-5v9q-5r7f",
      "cwe_id":"{'CWE-665', 'CWE-20'}",
      "score":3.6,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6'}",
      "dataset":"osv",
      "summary":"Incomplete validation in `SparseReshape` ### Impact\nIncomplete validation in `SparseReshape` results in a denial of service based on a `CHECK`-failure.\n\n```python\nimport tensorflow as tf\n\ninput_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)\ninput_shape = tf.zeros([11], dtype=tf.int64)\nnew_shape = tf.zeros([1], dtype=tf.int64)\n\ntf.raw_ops.SparseReshape(input_indices=input_indices,\n    input_shape=input_shape,\n    new_shape=new_shape)\n``` \n    \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e87b51ce05c3eb172065a6ea5f48415854223285\/tensorflow\/core\/kernels\/sparse_reshape_op.cc#L40) has no validation that the input arguments specify a valid sparse tensor.\n\n### Patches \nWe have patched the issue in GitHub commit [1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are the only affected versions.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date":"2021-05-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "commit_sha":"1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "patch":"SINGLE",
      "chain_ord":"['1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6']",
      "before_first_fix_commit":"{'8d78df9997a8537a2f389adc2cfdc36e71da0665'}",
      "last_fix_commit":"1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/29\/2021, 22:30:30",
      "message":"Fix heap-buffer-overflow issue with `tf.raw_ops.SparseReshape`.\n\nPiperOrigin-RevId: 371218558\nChange-Id: I6a6dc5bf15b50a1d05bdd95e9ba347cb39f40f45",
      "author":"Amit Patankar",
      "comments":null,
      "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
      "files":"{'tensorflow\/core\/kernels\/sparse_reshape_op.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6\/tensorflow%2Fcore%2Fkernels%2Fsparse_reshape_op.cc', 'patch': '@@ -26,6 +26,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/types.h\"\\n #include \"tensorflow\/core\/kernels\/reshape_util.h\"\\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -38,6 +39,17 @@ class SparseReshapeOp : public OpKernel {\\n   explicit SparseReshapeOp(OpKernelConstruction* context) : OpKernel(context) {}\\n \\n   void Compute(OpKernelContext* context) override {\\n+    const Tensor& input_indices_in = context->input(0);\\n+    const Tensor& input_shape_in = context->input(1);\\n+\\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices_in.shape()),\\n+                errors::InvalidArgument(\"Input must be a matrix.\"));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape_in.shape()),\\n+                errors::InvalidArgument(\"Input shape must be a vector.\"));\\n+    OP_REQUIRES(context,\\n+                input_indices_in.dim_size(1) == input_shape_in.dim_size(0),\\n+                errors::InvalidArgument(\\n+                    \"Input tensor rank must match input shape length.\"));\\n     ReshapeSparseTensor<Device>(context, context->input(0), context->input(1),\\n                                 context->input(2), 0 \/* output indices index *\/,\\n                                 1 \/* output shape index *\/);'}}",
      "message_norm":"fix heap-buffer-overflow issue with `tf.raw_ops.sparsereshape`.\n\npiperorigin-revid: 371218558\nchange-id: i6a6dc5bf15b50a1d05bdd95e9ba347cb39f40f45",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371218558', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_reshape_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6 Mon Sep 17 00:00:00 2001\nFrom: Amit Patankar <amitpatankar@google.com>\nDate: Thu, 29 Apr 2021 15:30:30 -0700\nSubject: [PATCH] Fix heap-buffer-overflow issue with\n `tf.raw_ops.SparseReshape`.\n\nPiperOrigin-RevId: 371218558\nChange-Id: I6a6dc5bf15b50a1d05bdd95e9ba347cb39f40f45\n---\n tensorflow\/core\/kernels\/sparse_reshape_op.cc | 12 ++++++++++++\n 1 file changed, 12 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/sparse_reshape_op.cc b\/tensorflow\/core\/kernels\/sparse_reshape_op.cc\nindex 13e9010dcbb243..d8120788db9bfe 100644\n--- a\/tensorflow\/core\/kernels\/sparse_reshape_op.cc\n+++ b\/tensorflow\/core\/kernels\/sparse_reshape_op.cc\n@@ -26,6 +26,7 @@ limitations under the License.\n #include \"tensorflow\/core\/framework\/types.h\"\n #include \"tensorflow\/core\/kernels\/reshape_util.h\"\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\n+#include \"tensorflow\/core\/platform\/errors.h\"\n \n namespace tensorflow {\n \n@@ -38,6 +39,17 @@ class SparseReshapeOp : public OpKernel {\n   explicit SparseReshapeOp(OpKernelConstruction* context) : OpKernel(context) {}\n \n   void Compute(OpKernelContext* context) override {\n+    const Tensor& input_indices_in = context->input(0);\n+    const Tensor& input_shape_in = context->input(1);\n+\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices_in.shape()),\n+                errors::InvalidArgument(\"Input must be a matrix.\"));\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape_in.shape()),\n+                errors::InvalidArgument(\"Input shape must be a vector.\"));\n+    OP_REQUIRES(context,\n+                input_indices_in.dim_size(1) == input_shape_in.dim_size(0),\n+                errors::InvalidArgument(\n+                    \"Input tensor rank must match input shape length.\"));\n     ReshapeSparseTensor<Device>(context, context->input(0), context->input(1),\n                                 context->input(2), 0 \/* output indices index *\/,\n                                 1 \/* output shape index *\/);",
      "code_diff":"@@ -26,6 +26,7 @@ limitations under the License.\n #include \"tensorflow\/core\/framework\/types.h\"\n #include \"tensorflow\/core\/kernels\/reshape_util.h\"\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\n+#include \"tensorflow\/core\/platform\/errors.h\"\n \n namespace tensorflow {\n \n@@ -38,6 +39,17 @@ class SparseReshapeOp : public OpKernel {\n   explicit SparseReshapeOp(OpKernelConstruction* context) : OpKernel(context) {}\n \n   void Compute(OpKernelContext* context) override {\n+    const Tensor& input_indices_in = context->input(0);\n+    const Tensor& input_shape_in = context->input(1);\n+\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices_in.shape()),\n+                errors::InvalidArgument(\"Input must be a matrix.\"));\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape_in.shape()),\n+                errors::InvalidArgument(\"Input shape must be a vector.\"));\n+    OP_REQUIRES(context,\n+                input_indices_in.dim_size(1) == input_shape_in.dim_size(0),\n+                errors::InvalidArgument(\n+                    \"Input tensor rank must match input shape length.\"));\n     ReshapeSparseTensor<Device>(context, context->input(0), context->input(1),\n                                 context->input(2), 0 \/* output indices index *\/,\n                                 1 \/* output shape index *\/);"
    },
    {
      "index":1,
      "vuln_id":"GHSA-3wcq-x3mq-6r9p",
      "cwe_id":"{'CWE-908', 'CWE-200'}",
      "score":7.7,
      "chain":"{'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d', 'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56'}",
      "dataset":"osv",
      "summary":"Potential memory exposure in dns-packet This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.",
      "published_date":"2021-05-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/mafintosh\/dns-packet",
      "commit_href":"https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d",
      "commit_sha":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
      "patch":"MULTI",
      "chain_ord":"['25f15dd0fedc53688b25fd053ebbdffe3d5c1c56', '0d0d593f8df4e2712c43957a6c62e95047f12b2d']",
      "before_first_fix_commit":"{'7f35bac5b4680d7bfbb34fbc475ecfdbf9d25092'}",
      "last_fix_commit":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
      "chain_ord_pos":2.0,
      "commit_datetime":"05\/25\/2021, 08:35:02",
      "message":"backport encodingLength fix to v1",
      "author":"Mathias Buus",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
      "files":"{'index.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/dns-packet\/raw\/0d0d593f8df4e2712c43957a6c62e95047f12b2d\/index.js', 'patch': \"@@ -74,7 +74,8 @@ name.decode = function (buf, offset) {\\n name.decode.bytes = 0\\n \\n name.encodingLength = function (n) {\\n-  return Buffer.byteLength(n) + 2\\n+  if (n === '.') return 1\\n+  return Buffer.byteLength(n.replace(\/^\\\\.|\\\\.$\/gm, '')) + 2\\n }\\n \\n var string = {}\"}}",
      "message_norm":"backport encodinglength fix to v1",
      "language":"en",
      "entities":"[('encodinglength', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 0d0d593f8df4e2712c43957a6c62e95047f12b2d Mon Sep 17 00:00:00 2001\nFrom: Mathias Buus <mathiasbuus@gmail.com>\nDate: Tue, 25 May 2021 10:35:02 +0200\nSubject: [PATCH] backport encodingLength fix to v1\n\n---\n index.js | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex 997466e..2321857 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -74,7 +74,8 @@ name.decode = function (buf, offset) {\n name.decode.bytes = 0\n \n name.encodingLength = function (n) {\n-  return Buffer.byteLength(n) + 2\n+  if (n === '.') return 1\n+  return Buffer.byteLength(n.replace(\/^\\.|\\.$\/gm, '')) + 2\n }\n \n var string = {}",
      "code_diff":"@@ -74,7 +74,8 @@ name.decode = function (buf, offset) {\n name.decode.bytes = 0\n \n name.encodingLength = function (n) {\n-  return Buffer.byteLength(n) + 2\n+  if (n === '.') return 1\n+  return Buffer.byteLength(n.replace(\/^\\.|\\.$\/gm, '')) + 2\n }\n \n var string = {}"
    },
    {
      "index":2,
      "vuln_id":"GHSA-cchx-mfrc-fwqr",
      "cwe_id":"{'CWE-200', 'CWE-287'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/symfony\/symfony\/commit\/a29ce2817cf43bb1850cf6af114004ac26c7a081'}",
      "dataset":"osv",
      "summary":"Improper authentication in Symfony In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, a vulnerability would allow an attacker to authenticate as a privileged user on sites with user registration and remember me login functionality enabled. This is related to symfony\/security.",
      "published_date":"2020-02-12",
      "chain_len":1,
      "project":"https:\/\/github.com\/symfony\/symfony",
      "commit_href":"https:\/\/github.com\/symfony\/symfony\/commit\/a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "commit_sha":"a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "patch":"SINGLE",
      "chain_ord":"['a29ce2817cf43bb1850cf6af114004ac26c7a081']",
      "before_first_fix_commit":"{'3e0b2354dbc8813a1f5ff91757e1dce40dfe31b4'}",
      "last_fix_commit":"a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/06\/2019, 10:40:18",
      "message":"[Security] Add a separator in the remember me cookie hash",
      "author":"Pascal Borreli",
      "comments":"{'com_1': {'author': 'simoheinonen', 'datetime': '06\/05\/2019, 12:10:12', 'body': 'This logs out all users with the old hash. \ud83d\ude10'}, 'com_2': {'author': 'stof', 'datetime': '06\/05\/2019, 12:18:28', 'body': '@simoheinonen which is better than allowing to spoof remember me cookies'}, 'com_3': {'author': 'simoheinonen', 'datetime': '06\/05\/2019, 12:24:05', 'body': 'Yeah but worth mentioning imo. Logging out thousands of users might cost a lot'}, 'com_4': {'author': 'stefanospetrakis', 'datetime': '06\/25\/2019, 16:29:42', 'body': \"One remark regarding this (a bit too late perhaps);\\r\\nI would like this a little bit shorter for readability\/redundancy\/etc., sth like that:\\r\\n`return hash_hmac('sha256', implode(self::COOKIE_DELIMITER, func_get_args()), $this->getSecret());`\\r\\n\\r\\nAny point to opening a follow-up issue for this?\"}, 'com_5': {'author': 'stof', 'datetime': '06\/25\/2019, 16:37:07', 'body': '@stefanospetrakis this code is less explicit about what gets included in the hash exactly, due to using `func_get_args` instead of the actual arguments. So to me, this actually makes it less readable.'}, 'com_6': {'author': 'stefanospetrakis', 'datetime': '06\/25\/2019, 19:53:54', 'body': '@stof Fair enough, how about the following:\\r\\n\\r\\n`implode(self::COOKIE_DELIMITER, [$class, $username, $expires, $password])`'}}",
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/symfony\/symfony\/raw\/a29ce2817cf43bb1850cf6af114004ac26c7a081\/src%2FSymfony%2FComponent%2FSecurity%2FHttp%2FRememberMe%2FTokenBasedRememberMeServices.php', 'patch': \"@@ -120,6 +120,6 @@ protected function generateCookieValue($class, $username, $expires, $password)\\n      *\/\\n     protected function generateCookieHash($class, $username, $expires, $password)\\n     {\\n-        return hash_hmac('sha256', $class.$username.$expires.$password, $this->getSecret());\\n+        return hash_hmac('sha256', $class.self::COOKIE_DELIMITER.$username.self::COOKIE_DELIMITER.$expires.self::COOKIE_DELIMITER.$password, $this->getSecret());\\n     }\\n }\"}}",
      "message_norm":"[security] add a separator in the remember me cookie hash",
      "language":"en",
      "entities":"[('security', 'SECWORD', ''), ('add', 'ACTION', ''), ('cookie', 'SECWORD', ''), ('hash', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php'])",
      "num_files":1.0,
      "patch_content":"From a29ce2817cf43bb1850cf6af114004ac26c7a081 Mon Sep 17 00:00:00 2001\nFrom: Pascal Borreli <pascal@borreli.com>\nDate: Sat, 6 Apr 2019 11:40:18 +0100\nSubject: [PATCH] [Security] Add a separator in the remember me cookie hash\n\n---\n ...\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php   | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php b\/src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php\nindex 48d88e5730b27..952211333930e 100644\n--- a\/src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php\n+++ b\/src\/Symfony\/Component\/Security\/Http\/RememberMe\/TokenBasedRememberMeServices.php\n@@ -120,6 +120,6 @@ protected function generateCookieValue($class, $username, $expires, $password)\n      *\/\n     protected function generateCookieHash($class, $username, $expires, $password)\n     {\n-        return hash_hmac('sha256', $class.$username.$expires.$password, $this->getSecret());\n+        return hash_hmac('sha256', $class.self::COOKIE_DELIMITER.$username.self::COOKIE_DELIMITER.$expires.self::COOKIE_DELIMITER.$password, $this->getSecret());\n     }\n }",
      "code_diff":"@@ -120,6 +120,6 @@ protected function generateCookieValue($class, $username, $expires, $password)\n      *\/\n     protected function generateCookieHash($class, $username, $expires, $password)\n     {\n-        return hash_hmac('sha256', $class.$username.$expires.$password, $this->getSecret());\n+        return hash_hmac('sha256', $class.self::COOKIE_DELIMITER.$username.self::COOKIE_DELIMITER.$expires.self::COOKIE_DELIMITER.$password, $this->getSecret());\n     }\n }"
    },
    {
      "index":3,
      "vuln_id":"GHSA-xc7v-wxcw-j472",
      "cwe_id":"{'CWE-200'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/request\/tunnel-agent\/commit\/9ca95ec7219daface8a6fc2674000653de0922c0'}",
      "dataset":"osv",
      "summary":"Memory Exposure in tunnel-agent Versions of `tunnel-agent` before 0.6.0 are vulnerable to memory exposure.\n\nThis is exploitable if user supplied input is provided to the auth value and is a number.\n\nProof-of-concept:\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http:\/\/www.example.com',\n  tunnel: true,\n  proxy:{\n    protocol: 'http:',\n    host:'127.0.0.1',\n    port:8080,\n    auth:USERSUPPLIEDINPUT \/\/ number\n  }\n});\n```\n\n\n## Recommendation\n\nUpdate to version 0.6.0 or later.",
      "published_date":"2019-06-03",
      "chain_len":1,
      "project":"https:\/\/github.com\/request\/tunnel-agent",
      "commit_href":"https:\/\/github.com\/request\/tunnel-agent\/commit\/9ca95ec7219daface8a6fc2674000653de0922c0",
      "commit_sha":"9ca95ec7219daface8a6fc2674000653de0922c0",
      "patch":"SINGLE",
      "chain_ord":"['9ca95ec7219daface8a6fc2674000653de0922c0']",
      "before_first_fix_commit":"{'8a7c86e6e2a1c3fa8577e5b0e14923d54c659552'}",
      "last_fix_commit":"9ca95ec7219daface8a6fc2674000653de0922c0",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/05\/2017, 00:29:52",
      "message":"Use .from",
      "author":"Mikeal Rogers",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/request\/tunnel-agent\/raw\/9ca95ec7219daface8a6fc2674000653de0922c0\/index.js', 'patch': \"@@ -128,7 +128,7 @@ TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\\n   if (connectOptions.proxyAuth) {\\n     connectOptions.headers = connectOptions.headers || {}\\n     connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\\n-        new Buffer(connectOptions.proxyAuth).toString('base64')\\n+        Buffer.from(connectOptions.proxyAuth).toString('base64')\\n   }\\n \\n   debug('making CONNECT request')\"}}",
      "message_norm":"use .from",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 9ca95ec7219daface8a6fc2674000653de0922c0 Mon Sep 17 00:00:00 2001\nFrom: Mikeal Rogers <mikeal.rogers@gmail.com>\nDate: Sat, 4 Mar 2017 16:29:52 -0800\nSubject: [PATCH] Use .from\n\n---\n index.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex cb63452..3ee9abc 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -128,7 +128,7 @@ TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n   if (connectOptions.proxyAuth) {\n     connectOptions.headers = connectOptions.headers || {}\n     connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n-        new Buffer(connectOptions.proxyAuth).toString('base64')\n+        Buffer.from(connectOptions.proxyAuth).toString('base64')\n   }\n \n   debug('making CONNECT request')",
      "code_diff":"@@ -128,7 +128,7 @@ TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n   if (connectOptions.proxyAuth) {\n     connectOptions.headers = connectOptions.headers || {}\n     connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n-        new Buffer(connectOptions.proxyAuth).toString('base64')\n+        Buffer.from(connectOptions.proxyAuth).toString('base64')\n   }\n \n   debug('making CONNECT request')"
    },
    {
      "index":4,
      "vuln_id":"GHSA-hxf9-7h4c-f5jv",
      "cwe_id":"{'CWE-200'}",
      "score":9.1,
      "chain":"{'https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b'}",
      "dataset":"osv",
      "summary":"Django-Anymail prone to a timing attack webhooks\/base.py in Anymail (aka django-anymail) before 1.2.1 is prone to a timing attack vulnerability on the WEBHOOK_AUTHORIZATION secret, which allows remote attackers to post arbitrary e-mail tracking events.",
      "published_date":"2018-07-12",
      "chain_len":2,
      "project":"https:\/\/github.com\/anymail\/django-anymail",
      "commit_href":"https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5",
      "commit_sha":"db586ede1fbb41dce21310ea28ae15a1cf1286c5",
      "patch":"MULTI",
      "chain_ord":"['db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'c07998304b4a31df4c61deddcb03d3607a04691b']",
      "before_first_fix_commit":"{'7029298b930620b1655dab2548f72d6640a5905e'}",
      "last_fix_commit":"c07998304b4a31df4c61deddcb03d3607a04691b",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/02\/2018, 19:41:14",
      "message":"Security: prevent timing attack on WEBHOOK_AUTHORIZATION secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
      "author":"medmunds",
      "comments":null,
      "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
      "files":"{'anymail\/webhooks\/base.py': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anymail\/django-anymail\/raw\/db586ede1fbb41dce21310ea28ae15a1cf1286c5\/anymail%2Fwebhooks%2Fbase.py', 'patch': '@@ -2,6 +2,7 @@\\n \\n import six\\n from django.http import HttpResponse\\n+from django.utils.crypto import constant_time_compare\\n from django.utils.decorators import method_decorator\\n from django.views.decorators.csrf import csrf_exempt\\n from django.views.generic import View\\n@@ -40,8 +41,13 @@ def __init__(self, **kwargs):\\n     def validate_request(self, request):\\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\\n         if self.basic_auth:\\n-            basic_auth = get_request_basic_auth(request)\\n-            if basic_auth is None or basic_auth not in self.basic_auth:\\n+            request_auth = get_request_basic_auth(request)\\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It\\'s OK that any()\\n+            # can terminate early: we\\'re not trying to protect how many auth strings are allowed,\\n+            # just the contents of each individual auth string.)\\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\\n+                          for allowed_auth in self.basic_auth)\\n+            if not auth_ok:\\n                 # noinspection PyUnresolvedReferences\\n                 raise AnymailWebhookValidationFailure(\\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\\n@@ -77,8 +83,11 @@ def validate_request(self, request):\\n         *All* definitions of this method in the class chain (including mixins)\\n         will be called. There is no need to chain to the superclass.\\n         (See self.run_validators and collect_all_methods.)\\n+\\n+        Security note: use django.utils.crypto.constant_time_compare for string\\n+        comparisons, to avoid exposing your validation to a timing attack.\\n         \"\"\"\\n-        # if request.POST[\\'signature\\'] != expected_signature:\\n+        # if not constant_time_compare(request.POST[\\'signature\\'], expected_signature):\\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\\n         # (else just do nothing)\\n         pass'}}",
      "message_norm":"security: prevent timing attack on webhook_authorization secret\n\nanymail's webhook validation was vulnerable to a timing attack.\nan attacker could have used this to recover your webhook_authorization\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nthere have not been any reports of attempted exploit in the wild. (the\nvulnerability was discovered through code review.) attempts would be\nvisible in http logs as a very large number of 400 responses on\nanymail's webhook urls, or in python error monitoring as a very large\nnumber of anymailwebhookvalidationfailure exceptions.\n\nif you are using anymail's webhooks, you should upgrade to this release.\nin addition, you may want to rotate to a new webhook_authorization\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
      "language":"en",
      "entities":"[('security', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attack', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attacker', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('error', 'FLAW', ''), ('upgrade', 'ACTION', ''), ('docs](http:\/\/anymail.readthedocs.io', 'URL', ''), ('exploit', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['anymail\/webhooks\/base.py'])",
      "num_files":1.0,
      "patch_content":"From db586ede1fbb41dce21310ea28ae15a1cf1286c5 Mon Sep 17 00:00:00 2001\nFrom: medmunds <medmunds@gmail.com>\nDate: Fri, 2 Feb 2018 11:41:14 -0800\nSubject: [PATCH] Security: prevent timing attack on WEBHOOK_AUTHORIZATION\n secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n---\n anymail\/webhooks\/base.py | 15 ++++++++++++---\n 1 file changed, 12 insertions(+), 3 deletions(-)\n\ndiff --git a\/anymail\/webhooks\/base.py b\/anymail\/webhooks\/base.py\nindex 28380311..2bfd36e0 100644\n--- a\/anymail\/webhooks\/base.py\n+++ b\/anymail\/webhooks\/base.py\n@@ -2,6 +2,7 @@\n \n import six\n from django.http import HttpResponse\n+from django.utils.crypto import constant_time_compare\n from django.utils.decorators import method_decorator\n from django.views.decorators.csrf import csrf_exempt\n from django.views.generic import View\n@@ -40,8 +41,13 @@ def __init__(self, **kwargs):\n     def validate_request(self, request):\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\n         if self.basic_auth:\n-            basic_auth = get_request_basic_auth(request)\n-            if basic_auth is None or basic_auth not in self.basic_auth:\n+            request_auth = get_request_basic_auth(request)\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It's OK that any()\n+            # can terminate early: we're not trying to protect how many auth strings are allowed,\n+            # just the contents of each individual auth string.)\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\n+                          for allowed_auth in self.basic_auth)\n+            if not auth_ok:\n                 # noinspection PyUnresolvedReferences\n                 raise AnymailWebhookValidationFailure(\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\n@@ -77,8 +83,11 @@ def validate_request(self, request):\n         *All* definitions of this method in the class chain (including mixins)\n         will be called. There is no need to chain to the superclass.\n         (See self.run_validators and collect_all_methods.)\n+\n+        Security note: use django.utils.crypto.constant_time_compare for string\n+        comparisons, to avoid exposing your validation to a timing attack.\n         \"\"\"\n-        # if request.POST['signature'] != expected_signature:\n+        # if not constant_time_compare(request.POST['signature'], expected_signature):\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\n         # (else just do nothing)\n         pass",
      "code_diff":"@@ -2,6 +2,7 @@\n \n import six\n from django.http import HttpResponse\n+from django.utils.crypto import constant_time_compare\n from django.utils.decorators import method_decorator\n from django.views.decorators.csrf import csrf_exempt\n from django.views.generic import View\n@@ -40,8 +41,13 @@ def __init__(self, **kwargs):\n     def validate_request(self, request):\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\n         if self.basic_auth:\n-            basic_auth = get_request_basic_auth(request)\n-            if basic_auth is None or basic_auth not in self.basic_auth:\n+            request_auth = get_request_basic_auth(request)\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It's OK that any()\n+            # can terminate early: we're not trying to protect how many auth strings are allowed,\n+            # just the contents of each individual auth string.)\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\n+                          for allowed_auth in self.basic_auth)\n+            if not auth_ok:\n                 # noinspection PyUnresolvedReferences\n                 raise AnymailWebhookValidationFailure(\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\n@@ -77,8 +83,11 @@ def validate_request(self, request):\n         *All* definitions of this method in the class chain (including mixins)\n         will be called. There is no need to chain to the superclass.\n         (See self.run_validators and collect_all_methods.)\n+\n+        Security note: use django.utils.crypto.constant_time_compare for string\n+        comparisons, to avoid exposing your validation to a timing attack.\n         \"\"\"\n-        # if request.POST['signature'] != expected_signature:\n+        # if not constant_time_compare(request.POST['signature'], expected_signature):\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\n         # (else just do nothing)\n         pass"
    },
    {
      "index":5,
      "vuln_id":"GHSA-434h-p4gx-jm89",
      "cwe_id":"{'CWE-203'}",
      "score":5.3,
      "chain":"{'https:\/\/github.com\/dpgaspar\/Flask-AppBuilder\/commit\/780bd0e8fbf2d36ada52edb769477e0a4edae580'}",
      "dataset":"osv",
      "summary":"Observable Response Discrepancy in Flask-AppBuilder ### Impact\nUser enumeration in database authentication in Flask-AppBuilder <= 3.2.3. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.\n\n### Patches\nUpgrade to 3.3.0\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Flask-AppBuilder](https:\/\/github.com\/dpgaspar\/Flask-AppBuilder)",
      "published_date":"2021-05-27",
      "chain_len":1,
      "project":"https:\/\/github.com\/dpgaspar\/Flask-AppBuilder",
      "commit_href":"https:\/\/github.com\/dpgaspar\/Flask-AppBuilder\/commit\/780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "commit_sha":"780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "patch":"SINGLE",
      "chain_ord":"['780bd0e8fbf2d36ada52edb769477e0a4edae580']",
      "before_first_fix_commit":"{'b60dea9cedf98b56c926ba41020c73f287d5826e'}",
      "last_fix_commit":"780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/10\/2021, 08:37:55",
      "message":"fix: auth balance (#1634)",
      "author":"Daniel Vaz Gaspar",
      "comments":null,
      "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
      "files":"{'flask_appbuilder\/security\/manager.py': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/dpgaspar\/Flask-AppBuilder\/raw\/780bd0e8fbf2d36ada52edb769477e0a4edae580\/flask_appbuilder%2Fsecurity%2Fmanager.py', 'patch': '@@ -833,6 +833,12 @@ def auth_user_db(self, username, password):\\n         if user is None:\\n             user = self.find_user(email=username)\\n         if user is None or (not user.is_active):\\n+            # Balance failure and success\\n+            check_password_hash(\\n+                \"pbkdf2:sha256:150000$Z3t6fmj2$22da622d94a1f8118\"\\n+                \"c0976a03d2f18f680bfff877c9a965db9eedc51bc0be87c\",\\n+                \"password\",\\n+            )\\n             log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(username))\\n             return None\\n         elif check_password_hash(user.password, password):'}}",
      "message_norm":"fix: auth balance (#1634)",
      "language":"en",
      "entities":"[('auth', 'SECWORD', ''), ('#1634', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['flask_appbuilder\/security\/manager.py'])",
      "num_files":1.0,
      "patch_content":"From 780bd0e8fbf2d36ada52edb769477e0a4edae580 Mon Sep 17 00:00:00 2001\nFrom: Daniel Vaz Gaspar <danielvazgaspar@gmail.com>\nDate: Mon, 10 May 2021 09:37:55 +0100\nSubject: [PATCH] fix: auth balance (#1634)\n\n---\n flask_appbuilder\/security\/manager.py | 6 ++++++\n 1 file changed, 6 insertions(+)\n\ndiff --git a\/flask_appbuilder\/security\/manager.py b\/flask_appbuilder\/security\/manager.py\nindex f837e5c43..7154dc50c 100644\n--- a\/flask_appbuilder\/security\/manager.py\n+++ b\/flask_appbuilder\/security\/manager.py\n@@ -833,6 +833,12 @@ def auth_user_db(self, username, password):\n         if user is None:\n             user = self.find_user(email=username)\n         if user is None or (not user.is_active):\n+            # Balance failure and success\n+            check_password_hash(\n+                \"pbkdf2:sha256:150000$Z3t6fmj2$22da622d94a1f8118\"\n+                \"c0976a03d2f18f680bfff877c9a965db9eedc51bc0be87c\",\n+                \"password\",\n+            )\n             log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(username))\n             return None\n         elif check_password_hash(user.password, password):",
      "code_diff":"@@ -833,6 +833,12 @@ def auth_user_db(self, username, password):\n         if user is None:\n             user = self.find_user(email=username)\n         if user is None or (not user.is_active):\n+            # Balance failure and success\n+            check_password_hash(\n+                \"pbkdf2:sha256:150000$Z3t6fmj2$22da622d94a1f8118\"\n+                \"c0976a03d2f18f680bfff877c9a965db9eedc51bc0be87c\",\n+                \"password\",\n+            )\n             log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(username))\n             return None\n         elif check_password_hash(user.password, password):"
    },
    {
      "index":6,
      "vuln_id":"GHSA-23cm-x6j7-6hq3",
      "cwe_id":"{'CWE-200'}",
      "score":5.9,
      "chain":"{'https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9'}",
      "dataset":"osv",
      "summary":"matrix-js-sdk can be tricked into disclosing E2EE room keys to a participating homeserver ### Impact\n\nA logic error in the room key sharing functionality of matrix-js-sdk before 12.4.1 allows a malicious Matrix homeserver\u2020 participating in an encrypted room to steal room encryption keys from affected Matrix clients participating in that room. This allows the homeserver to decrypt end-to-end encrypted messages sent by affected clients.\n\n\u2020 Or anyone with access to the account of the original recipient of an encrypted message.\n\nKnown clients affected (via their use of vulnerable versions of matrix-js-sdk):\n\n- Element Web (1.8.2 and earlier)\n- Element Desktop (1.8.2 and earlier)\n- SchildiChat Web (1.7.32-sc1 and earlier)\n- SchildiChat Desktop (1.7.32-sc1 and earlier)\n- Cinny (1.2.0 and earlier)\n\n### Patch\n\nThis was fixed in https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9.\n\n### Workarounds\nTo prevent a homeserver from being able to steal the room keys, vulnerable clients can be taken offline or signed out. If signing out, care should be taken to either set up Secure Backup or export E2E room keys in order to preserve access to past messages.",
      "published_date":"2021-09-14",
      "chain_len":1,
      "project":"https:\/\/github.com\/matrix-org\/matrix-js-sdk",
      "commit_href":"https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9",
      "commit_sha":"894c24880da0e1cc81818f51c0db80e3c9fb2be9",
      "patch":"SINGLE",
      "chain_ord":"['894c24880da0e1cc81818f51c0db80e3c9fb2be9']",
      "before_first_fix_commit":"{'f8186add92dd5f0ca2f6a1cda10bc0ece3730f86'}",
      "last_fix_commit":"894c24880da0e1cc81818f51c0db80e3c9fb2be9",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/13\/2021, 11:34:48",
      "message":"Verify target device key on reshare",
      "author":"RiotRobot",
      "comments":null,
      "stats":"{'additions': 29, 'deletions': 9, 'total': 38}",
      "files":"{'src\/crypto\/algorithms\/megolm.ts': {'additions': 29, 'deletions': 9, 'changes': 38, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/matrix-org\/matrix-js-sdk\/raw\/894c24880da0e1cc81818f51c0db80e3c9fb2be9\/src%2Fcrypto%2Falgorithms%2Fmegolm.ts', 'patch': '@@ -101,6 +101,13 @@ interface IPayload extends Partial<IMessage> {\\n }\\n \/* eslint-enable camelcase *\/\\n \\n+interface SharedWithData {\\n+    \/\/ The identity key of the device we shared with\\n+    deviceKey: string;\\n+    \/\/ The message index of the ratchet we shared with that device\\n+    messageIndex: number;\\n+}\\n+\\n \/**\\n  * @private\\n  * @constructor\\n@@ -115,12 +122,12 @@ interface IPayload extends Partial<IMessage> {\\n  *\\n  * @property {object} sharedWithDevices\\n  *    devices with which we have shared the session key\\n- *        userId -> {deviceId -> msgindex}\\n+ *        userId -> {deviceId -> SharedWithData}\\n  *\/\\n class OutboundSessionInfo {\\n     public useCount = 0;\\n     public creationTime: number;\\n-    public sharedWithDevices: Record<string, Record<string, number>> = {};\\n+    public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};\\n     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};\\n \\n     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {\\n@@ -150,11 +157,11 @@ class OutboundSessionInfo {\\n         return false;\\n     }\\n \\n-    public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {\\n+    public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {\\n         if (!this.sharedWithDevices[userId]) {\\n             this.sharedWithDevices[userId] = {};\\n         }\\n-        this.sharedWithDevices[userId][deviceId] = chainIndex;\\n+        this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };\\n     }\\n \\n     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {\\n@@ -572,6 +579,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n         payload: IPayload,\\n     ): Promise<void> {\\n         const contentMap = {};\\n+        const deviceInfoByDeviceId = new Map<string, DeviceInfo>();\\n \\n         const promises = [];\\n         for (let i = 0; i < userDeviceMap.length; i++) {\\n@@ -584,6 +592,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             const userId = val.userId;\\n             const deviceInfo = val.deviceInfo;\\n             const deviceId = deviceInfo.deviceId;\\n+            deviceInfoByDeviceId.set(deviceId, deviceInfo);\\n \\n             if (!contentMap[userId]) {\\n                 contentMap[userId] = {};\\n@@ -636,7 +645,10 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n                 for (const userId of Object.keys(contentMap)) {\\n                     for (const deviceId of Object.keys(contentMap[userId])) {\\n                         session.markSharedWithDevice(\\n-                            userId, deviceId, chainIndex,\\n+                            userId,\\n+                            deviceId,\\n+                            deviceInfoByDeviceId.get(deviceId).getIdentityKey(),\\n+                            chainIndex,\\n                         );\\n                     }\\n                 }\\n@@ -719,19 +731,27 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);\\n             return;\\n         }\\n-        const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];\\n-        if (sentChainIndex === undefined) {\\n+        const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];\\n+        if (sessionSharedData === undefined) {\\n             logger.debug(\\n                 \"megolm session ID \" + sessionId + \" never shared with device \" +\\n                 userId + \":\" + device.deviceId,\\n             );\\n             return;\\n         }\\n \\n+        if (sessionSharedData.deviceKey !== device.getIdentityKey()) {\\n+            logger.warn(\\n+                `Session has been shared with device ${device.deviceId} but with identity ` +\\n+                `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,\\n+            );\\n+            return;\\n+        }\\n+\\n         \/\/ get the key from the inbound session: the outbound one will already\\n         \/\/ have been ratcheted to the next chain index.\\n         const key = await this.olmDevice.getInboundGroupSessionKey(\\n-            this.roomId, senderKey, sessionId, sentChainIndex,\\n+            this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,\\n         );\\n \\n         if (!key) {\\n@@ -882,7 +902,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             const deviceId = deviceInfo.deviceId;\\n \\n             session.markSharedWithDevice(\\n-                userId, deviceId, key.chain_index,\\n+                userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,\\n             );\\n         }'}}",
      "message_norm":"verify target device key on reshare",
      "language":"en",
      "entities":"[('verify', 'ACTION', ''), ('key', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/crypto\/algorithms\/megolm.ts'])",
      "num_files":1.0,
      "patch_content":"From 894c24880da0e1cc81818f51c0db80e3c9fb2be9 Mon Sep 17 00:00:00 2001\nFrom: RiotRobot <releases@riot.im>\nDate: Mon, 13 Sep 2021 12:34:48 +0100\nSubject: [PATCH] Verify target device key on reshare\n\n---\n src\/crypto\/algorithms\/megolm.ts | 38 +++++++++++++++++++++++++--------\n 1 file changed, 29 insertions(+), 9 deletions(-)\n\ndiff --git a\/src\/crypto\/algorithms\/megolm.ts b\/src\/crypto\/algorithms\/megolm.ts\nindex 381f8518880..55a766620c2 100644\n--- a\/src\/crypto\/algorithms\/megolm.ts\n+++ b\/src\/crypto\/algorithms\/megolm.ts\n@@ -101,6 +101,13 @@ interface IPayload extends Partial<IMessage> {\n }\n \/* eslint-enable camelcase *\/\n \n+interface SharedWithData {\n+    \/\/ The identity key of the device we shared with\n+    deviceKey: string;\n+    \/\/ The message index of the ratchet we shared with that device\n+    messageIndex: number;\n+}\n+\n \/**\n  * @private\n  * @constructor\n@@ -115,12 +122,12 @@ interface IPayload extends Partial<IMessage> {\n  *\n  * @property {object} sharedWithDevices\n  *    devices with which we have shared the session key\n- *        userId -> {deviceId -> msgindex}\n+ *        userId -> {deviceId -> SharedWithData}\n  *\/\n class OutboundSessionInfo {\n     public useCount = 0;\n     public creationTime: number;\n-    public sharedWithDevices: Record<string, Record<string, number>> = {};\n+    public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};\n     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};\n \n     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {\n@@ -150,11 +157,11 @@ class OutboundSessionInfo {\n         return false;\n     }\n \n-    public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {\n+    public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {\n         if (!this.sharedWithDevices[userId]) {\n             this.sharedWithDevices[userId] = {};\n         }\n-        this.sharedWithDevices[userId][deviceId] = chainIndex;\n+        this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };\n     }\n \n     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {\n@@ -572,6 +579,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n         payload: IPayload,\n     ): Promise<void> {\n         const contentMap = {};\n+        const deviceInfoByDeviceId = new Map<string, DeviceInfo>();\n \n         const promises = [];\n         for (let i = 0; i < userDeviceMap.length; i++) {\n@@ -584,6 +592,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             const userId = val.userId;\n             const deviceInfo = val.deviceInfo;\n             const deviceId = deviceInfo.deviceId;\n+            deviceInfoByDeviceId.set(deviceId, deviceInfo);\n \n             if (!contentMap[userId]) {\n                 contentMap[userId] = {};\n@@ -636,7 +645,10 @@ class MegolmEncryption extends EncryptionAlgorithm {\n                 for (const userId of Object.keys(contentMap)) {\n                     for (const deviceId of Object.keys(contentMap[userId])) {\n                         session.markSharedWithDevice(\n-                            userId, deviceId, chainIndex,\n+                            userId,\n+                            deviceId,\n+                            deviceInfoByDeviceId.get(deviceId).getIdentityKey(),\n+                            chainIndex,\n                         );\n                     }\n                 }\n@@ -719,8 +731,8 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);\n             return;\n         }\n-        const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];\n-        if (sentChainIndex === undefined) {\n+        const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];\n+        if (sessionSharedData === undefined) {\n             logger.debug(\n                 \"megolm session ID \" + sessionId + \" never shared with device \" +\n                 userId + \":\" + device.deviceId,\n@@ -728,10 +740,18 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             return;\n         }\n \n+        if (sessionSharedData.deviceKey !== device.getIdentityKey()) {\n+            logger.warn(\n+                `Session has been shared with device ${device.deviceId} but with identity ` +\n+                `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,\n+            );\n+            return;\n+        }\n+\n         \/\/ get the key from the inbound session: the outbound one will already\n         \/\/ have been ratcheted to the next chain index.\n         const key = await this.olmDevice.getInboundGroupSessionKey(\n-            this.roomId, senderKey, sessionId, sentChainIndex,\n+            this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,\n         );\n \n         if (!key) {\n@@ -882,7 +902,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             const deviceId = deviceInfo.deviceId;\n \n             session.markSharedWithDevice(\n-                userId, deviceId, key.chain_index,\n+                userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,\n             );\n         }",
      "code_diff":"@@ -101,6 +101,13 @@ interface IPayload extends Partial<IMessage> {\n }\n \/* eslint-enable camelcase *\/\n \n+interface SharedWithData {\n+    \/\/ The identity key of the device we shared with\n+    deviceKey: string;\n+    \/\/ The message index of the ratchet we shared with that device\n+    messageIndex: number;\n+}\n+\n \/**\n  * @private\n  * @constructor\n@@ -115,12 +122,12 @@ interface IPayload extends Partial<IMessage> {\n  *\n  * @property {object} sharedWithDevices\n  *    devices with which we have shared the session key\n- *        userId -> {deviceId -> msgindex}\n+ *        userId -> {deviceId -> SharedWithData}\n  *\/\n class OutboundSessionInfo {\n     public useCount = 0;\n     public creationTime: number;\n-    public sharedWithDevices: Record<string, Record<string, number>> = {};\n+    public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};\n     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};\n \n     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {\n@@ -150,11 +157,11 @@ class OutboundSessionInfo {\n         return false;\n     }\n \n-    public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {\n+    public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {\n         if (!this.sharedWithDevices[userId]) {\n             this.sharedWithDevices[userId] = {};\n         }\n-        this.sharedWithDevices[userId][deviceId] = chainIndex;\n+        this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };\n     }\n \n     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {\n@@ -572,6 +579,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n         payload: IPayload,\n     ): Promise<void> {\n         const contentMap = {};\n+        const deviceInfoByDeviceId = new Map<string, DeviceInfo>();\n \n         const promises = [];\n         for (let i = 0; i < userDeviceMap.length; i++) {\n@@ -584,6 +592,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             const userId = val.userId;\n             const deviceInfo = val.deviceInfo;\n             const deviceId = deviceInfo.deviceId;\n+            deviceInfoByDeviceId.set(deviceId, deviceInfo);\n \n             if (!contentMap[userId]) {\n                 contentMap[userId] = {};\n@@ -636,7 +645,10 @@ class MegolmEncryption extends EncryptionAlgorithm {\n                 for (const userId of Object.keys(contentMap)) {\n                     for (const deviceId of Object.keys(contentMap[userId])) {\n                         session.markSharedWithDevice(\n-                            userId, deviceId, chainIndex,\n+                            userId,\n+                            deviceId,\n+                            deviceInfoByDeviceId.get(deviceId).getIdentityKey(),\n+                            chainIndex,\n                         );\n                     }\n                 }\n@@ -719,8 +731,8 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);\n             return;\n         }\n-        const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];\n-        if (sentChainIndex === undefined) {\n+        const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];\n+        if (sessionSharedData === undefined) {\n             logger.debug(\n                 \"megolm session ID \" + sessionId + \" never shared with device \" +\n                 userId + \":\" + device.deviceId,\n@@ -728,10 +740,18 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             return;\n         }\n \n+        if (sessionSharedData.deviceKey !== device.getIdentityKey()) {\n+            logger.warn(\n+                `Session has been shared with device ${device.deviceId} but with identity ` +\n+                `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,\n+            );\n+            return;\n+        }\n+\n         \/\/ get the key from the inbound session: the outbound one will already\n         \/\/ have been ratcheted to the next chain index.\n         const key = await this.olmDevice.getInboundGroupSessionKey(\n-            this.roomId, senderKey, sessionId, sentChainIndex,\n+            this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,\n         );\n \n         if (!key) {\n@@ -882,7 +902,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\n             const deviceId = deviceInfo.deviceId;\n \n             session.markSharedWithDevice(\n-                userId, deviceId, key.chain_index,\n+                userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,\n             );\n         }"
    },
    {
      "index":7,
      "vuln_id":"GHSA-pwwm-pwx2-2hw7",
      "cwe_id":"{'CWE-209'}",
      "score":5.3,
      "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/178e44095141ab805c282f563fb088df1a10b2e2'}",
      "dataset":"osv",
      "summary":"Generation of Error Message Containing Sensitive Information in Snipe-IT Snipe-IT prior to version 5.3.11 is vulnerable to Generation of Error Message Containing Sensitive Information.",
      "published_date":"2022-02-18",
      "chain_len":1,
      "project":"https:\/\/github.com\/snipe\/snipe-it",
      "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/178e44095141ab805c282f563fb088df1a10b2e2",
      "commit_sha":"178e44095141ab805c282f563fb088df1a10b2e2",
      "patch":"SINGLE",
      "chain_ord":"['178e44095141ab805c282f563fb088df1a10b2e2']",
      "before_first_fix_commit":"{'321be4733d3997fc738f0118e1b9af5905f95439'}",
      "last_fix_commit":"178e44095141ab805c282f563fb088df1a10b2e2",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/16\/2022, 02:09:58",
      "message":"Added usleep :(\n\nSigned-off-by: snipe <snipe@snipe.net>",
      "author":"snipe",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'app\/Http\/Controllers\/Auth\/ForgotPasswordController.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/178e44095141ab805c282f563fb088df1a10b2e2\/app%2FHttp%2FControllers%2FAuth%2FForgotPasswordController.php', 'patch': \"@@ -87,6 +87,8 @@ public function sendResetLinkEmail(Request $request)\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').'failed with exception: '.$e );\\n         }\\n \\n+        \/\/ Prevent timing attack to enumerate users.\\n+        usleep(500000 + random_int(0, 1500000));\\n \\n         if ($response === \\\\Password::RESET_LINK_SENT) {\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').' WAS found, password reset sent');\"}}",
      "message_norm":"added usleep :(\n\nsigned-off-by: snipe <snipe@snipe.net>",
      "language":"en",
      "entities":"[('added', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['app\/Http\/Controllers\/Auth\/ForgotPasswordController.php'])",
      "num_files":1.0,
      "patch_content":"From 178e44095141ab805c282f563fb088df1a10b2e2 Mon Sep 17 00:00:00 2001\nFrom: snipe <snipe@snipe.net>\nDate: Tue, 15 Feb 2022 18:09:58 -0800\nSubject: [PATCH] Added usleep :(\n\nSigned-off-by: snipe <snipe@snipe.net>\n---\n app\/Http\/Controllers\/Auth\/ForgotPasswordController.php | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/app\/Http\/Controllers\/Auth\/ForgotPasswordController.php b\/app\/Http\/Controllers\/Auth\/ForgotPasswordController.php\nindex 3619b4e5bfdd..62798745a791 100644\n--- a\/app\/Http\/Controllers\/Auth\/ForgotPasswordController.php\n+++ b\/app\/Http\/Controllers\/Auth\/ForgotPasswordController.php\n@@ -87,6 +87,8 @@ public function sendResetLinkEmail(Request $request)\n             \\Log::info('Password reset attempt: User '.$request->input('username').'failed with exception: '.$e );\n         }\n \n+        \/\/ Prevent timing attack to enumerate users.\n+        usleep(500000 + random_int(0, 1500000));\n \n         if ($response === \\Password::RESET_LINK_SENT) {\n             \\Log::info('Password reset attempt: User '.$request->input('username').' WAS found, password reset sent');",
      "code_diff":"@@ -87,6 +87,8 @@ public function sendResetLinkEmail(Request $request)\n             \\Log::info('Password reset attempt: User '.$request->input('username').'failed with exception: '.$e );\n         }\n \n+        \/\/ Prevent timing attack to enumerate users.\n+        usleep(500000 + random_int(0, 1500000));\n \n         if ($response === \\Password::RESET_LINK_SENT) {\n             \\Log::info('Password reset attempt: User '.$request->input('username').' WAS found, password reset sent');"
    },
    {
      "index":8,
      "vuln_id":"GHSA-7wv8-g97r-432h",
      "cwe_id":"{'CWE-200'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/e680e134a4215c979bfd2eaf58336be34c8fc6e6'}",
      "dataset":"osv",
      "summary":"Exposure of Sensitive Information to an Unauthorized Actor in microweber Exposure of Sensitive Information to an Unauthorized Actor in Packagist microweber\/microweber prior to 1.2.11.",
      "published_date":"2022-01-21",
      "chain_len":1,
      "project":"https:\/\/github.com\/microweber\/microweber",
      "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/e680e134a4215c979bfd2eaf58336be34c8fc6e6",
      "commit_sha":"e680e134a4215c979bfd2eaf58336be34c8fc6e6",
      "patch":"SINGLE",
      "chain_ord":"['e680e134a4215c979bfd2eaf58336be34c8fc6e6']",
      "before_first_fix_commit":"{'62aa09ed44ff63f5fffc5addbf000423d7c38e44'}",
      "last_fix_commit":"e680e134a4215c979bfd2eaf58336be34c8fc6e6",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/19\/2022, 09:35:10",
      "message":"search_authors only admins",
      "author":"Bozhidar Slaveykov",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
      "files":"{'src\/MicroweberPackages\/User\/helpers\/api_user.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/e680e134a4215c979bfd2eaf58336be34c8fc6e6\/src%2FMicroweberPackages%2FUser%2Fhelpers%2Fapi_user.php', 'patch': \"@@ -63,9 +63,9 @@\\n \\n });\\n \\n-api_expose('users\/search_authors', function ($params = false) {\\n+api_expose_admin('users\/search_authors', function ($params = false) {\\n \\n-    $return = array();\\n+    $return = array(); \\n \\n     $kw = false;\\n     if (isset($params['kw'])) {\"}}",
      "message_norm":"search_authors only admins",
      "language":"en",
      "entities":"[('admins', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/MicroweberPackages\/User\/helpers\/api_user.php'])",
      "num_files":1.0,
      "patch_content":"From e680e134a4215c979bfd2eaf58336be34c8fc6e6 Mon Sep 17 00:00:00 2001\nFrom: Bozhidar Slaveykov <bobi@microweber.com>\nDate: Wed, 19 Jan 2022 11:35:10 +0200\nSubject: [PATCH] search_authors only admins\n\n---\n src\/MicroweberPackages\/User\/helpers\/api_user.php | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a\/src\/MicroweberPackages\/User\/helpers\/api_user.php b\/src\/MicroweberPackages\/User\/helpers\/api_user.php\nindex 2278395c345..ad6bb9572b3 100644\n--- a\/src\/MicroweberPackages\/User\/helpers\/api_user.php\n+++ b\/src\/MicroweberPackages\/User\/helpers\/api_user.php\n@@ -63,9 +63,9 @@\n \n });\n \n-api_expose('users\/search_authors', function ($params = false) {\n+api_expose_admin('users\/search_authors', function ($params = false) {\n \n-    $return = array();\n+    $return = array(); \n \n     $kw = false;\n     if (isset($params['kw'])) {",
      "code_diff":"@@ -63,9 +63,9 @@\n \n });\n \n-api_expose('users\/search_authors', function ($params = false) {\n+api_expose_admin('users\/search_authors', function ($params = false) {\n \n-    $return = array();\n+    $return = array(); \n \n     $kw = false;\n     if (isset($params['kw'])) {"
    },
    {
      "index":9,
      "vuln_id":"GHSA-mr6r-82x4-f4jj",
      "cwe_id":"{'CWE-203'}",
      "score":7.4,
      "chain":"{'https:\/\/github.com\/simplito\/elliptic-php\/commit\/15652609aa55968d56685c2a9120535ccdc00fd9'}",
      "dataset":"osv",
      "summary":"Timing attacks might allow practical recovery of the long-term private key In elliptic-php versions priot to 1.0.6, Timing attacks might be possible which can result in practical recovery of the long-term private key generated by the library under certain conditions. Leakage of a bit-length of the scalar during scalar multiplication is possible on an elliptic curve which might allow practical recovery of the long-term private key.",
      "published_date":"2019-11-20",
      "chain_len":1,
      "project":"https:\/\/github.com\/simplito\/elliptic-php",
      "commit_href":"https:\/\/github.com\/simplito\/elliptic-php\/commit\/15652609aa55968d56685c2a9120535ccdc00fd9",
      "commit_sha":"15652609aa55968d56685c2a9120535ccdc00fd9",
      "patch":"SINGLE",
      "chain_ord":"['15652609aa55968d56685c2a9120535ccdc00fd9']",
      "before_first_fix_commit":"{'03a8dbc6514a1c8e6b00b967bca388d36ab73169'}",
      "last_fix_commit":"15652609aa55968d56685c2a9120535ccdc00fd9",
      "chain_ord_pos":1.0,
      "commit_datetime":"11\/14\/2019, 13:43:07",
      "message":"ecdsa: Apply nonce bit-length mitigation to stop timing leakage.\n\nPorted from elliptic-js: https:\/\/github.com\/indutny\/elliptic\/pull\/203",
      "author":"Sebastian Smyczy\u0144ski",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
      "files":"{'lib\/EC.php': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/simplito\/elliptic-php\/raw\/15652609aa55968d56685c2a9120535ccdc00fd9\/lib%2FEC.php', 'patch': \"@@ -136,7 +136,17 @@ public function sign($msg, $key, $enc = null, $options = null)\\n             if( $k->cmpn(1) <= 0 || $k->cmp($ns1) >= 0 )\\n                 continue;\\n \\n-            $kp = $this->g->mul($k);\\n+            \/\/ Fix the bit-length of the random nonce,\\n+            \/\/ so that it doesn't leak via timing.\\n+            \/\/ This does not change that ks = k mod k\\n+            $ks = $k->add($this->n);\\n+            $kt = $ks->add($this->n);\\n+            if ($ks->bitLength() === $this->n->bitLength()) {\\n+                $kp = $this->g->mul($kt);\\n+            } else {\\n+                $kp = $this->g->mul($ks);\\n+            }\\n+\\n             if( $kp->isInfinity() )\\n                 continue;\"}}",
      "message_norm":"ecdsa: apply nonce bit-length mitigation to stop timing leakage.\n\nported from elliptic-js: https:\/\/github.com\/indutny\/elliptic\/pull\/203",
      "language":"en",
      "entities":"[('ecdsa', 'SECWORD', ''), ('nonce', 'SECWORD', ''), ('timing leakage', 'SECWORD', ''), ('https:\/\/github.com\/indutny\/elliptic\/pull\/203', 'URL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/EC.php'])",
      "num_files":1.0,
      "patch_content":"From 15652609aa55968d56685c2a9120535ccdc00fd9 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Sebastian=20Smyczy=C5=84ski?= <s.smyczynski@simplito.com>\nDate: Thu, 14 Nov 2019 14:43:07 +0100\nSubject: [PATCH] ecdsa: Apply nonce bit-length mitigation to stop timing\n leakage.\n\nPorted from elliptic-js: https:\/\/github.com\/indutny\/elliptic\/pull\/203\n---\n lib\/EC.php | 12 +++++++++++-\n 1 file changed, 11 insertions(+), 1 deletion(-)\n\ndiff --git a\/lib\/EC.php b\/lib\/EC.php\nindex f8a6af7..286b72e 100644\n--- a\/lib\/EC.php\n+++ b\/lib\/EC.php\n@@ -136,7 +136,17 @@ public function sign($msg, $key, $enc = null, $options = null)\n             if( $k->cmpn(1) <= 0 || $k->cmp($ns1) >= 0 )\n                 continue;\n \n-            $kp = $this->g->mul($k);\n+            \/\/ Fix the bit-length of the random nonce,\n+            \/\/ so that it doesn't leak via timing.\n+            \/\/ This does not change that ks = k mod k\n+            $ks = $k->add($this->n);\n+            $kt = $ks->add($this->n);\n+            if ($ks->bitLength() === $this->n->bitLength()) {\n+                $kp = $this->g->mul($kt);\n+            } else {\n+                $kp = $this->g->mul($ks);\n+            }\n+\n             if( $kp->isInfinity() )\n                 continue;",
      "code_diff":"@@ -136,7 +136,17 @@ public function sign($msg, $key, $enc = null, $options = null)\n             if( $k->cmpn(1) <= 0 || $k->cmp($ns1) >= 0 )\n                 continue;\n \n-            $kp = $this->g->mul($k);\n+            \/\/ Fix the bit-length of the random nonce,\n+            \/\/ so that it doesn't leak via timing.\n+            \/\/ This does not change that ks = k mod k\n+            $ks = $k->add($this->n);\n+            $kt = $ks->add($this->n);\n+            if ($ks->bitLength() === $this->n->bitLength()) {\n+                $kp = $this->g->mul($kt);\n+            } else {\n+                $kp = $this->g->mul($ks);\n+            }\n+\n             if( $kp->isInfinity() )\n                 continue;"
    },
    {
      "index":10,
      "vuln_id":"GHSA-hhrj-wp42-32v3",
      "cwe_id":"{'CWE-209'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a'}",
      "dataset":"osv",
      "summary":"Generation of Error Message Containing Sensitive Information in microweber Generation of Error Message Containing Sensitive Information in Packagist microweber\/microweber prior to 1.2.11.",
      "published_date":"2022-02-19",
      "chain_len":1,
      "project":"https:\/\/github.com\/microweber\/microweber",
      "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
      "commit_sha":"2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
      "patch":"SINGLE",
      "chain_ord":"['2417bd2eda2aa2868c1dad1abf62341f22bfc20a']",
      "before_first_fix_commit":"{'8adc9da7307c89d7cb7b309f69d0c2922a56aa2e'}",
      "last_fix_commit":"2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/17\/2022, 09:15:14",
      "message":"Update Comment.php",
      "author":"Bozhidar Slaveykov",
      "comments":null,
      "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
      "files":"{'src\/MicroweberPackages\/Comment\/Models\/Comment.php': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a\/src%2FMicroweberPackages%2FComment%2FModels%2FComment.php', 'patch': \"@@ -5,10 +5,12 @@\\n use EloquentFilter\\\\Filterable;\\n use Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n use MicroweberPackages\\\\Content\\\\Models\\\\ModelFilters\\\\ContentFilter;\\n+use MicroweberPackages\\\\Core\\\\Models\\\\HasSearchableTrait;\\n \\n class Comment extends Model\\n {\\n     use Filterable;\\n+    use HasSearchableTrait;\\n \\n     public $table = 'comments';\\n \\n@@ -21,6 +23,13 @@ class Comment extends Model\\n         'comment_body',\\n     ];\\n \\n+    protected $searchable = [\\n+        'comment_name',\\n+        'comment_email',\\n+        'comment_website',\\n+        'comment_body',\\n+    ];\\n+\\n     public function modelFilter()\\n     {\\n         return $this->provideFilter(ContentFilter::class);\"}}",
      "message_norm":"update comment.php",
      "language":"fr",
      "entities":"[('update', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/MicroweberPackages\/Comment\/Models\/Comment.php'])",
      "num_files":1.0,
      "patch_content":"From 2417bd2eda2aa2868c1dad1abf62341f22bfc20a Mon Sep 17 00:00:00 2001\nFrom: Bozhidar Slaveykov <bobi@microweber.com>\nDate: Thu, 17 Feb 2022 11:15:14 +0200\nSubject: [PATCH] Update Comment.php\n\n---\n src\/MicroweberPackages\/Comment\/Models\/Comment.php | 9 +++++++++\n 1 file changed, 9 insertions(+)\n\ndiff --git a\/src\/MicroweberPackages\/Comment\/Models\/Comment.php b\/src\/MicroweberPackages\/Comment\/Models\/Comment.php\nindex fa76a64345f..6e543a876fd 100644\n--- a\/src\/MicroweberPackages\/Comment\/Models\/Comment.php\n+++ b\/src\/MicroweberPackages\/Comment\/Models\/Comment.php\n@@ -5,10 +5,12 @@\n use EloquentFilter\\Filterable;\n use Illuminate\\Database\\Eloquent\\Model;\n use MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\n+use MicroweberPackages\\Core\\Models\\HasSearchableTrait;\n \n class Comment extends Model\n {\n     use Filterable;\n+    use HasSearchableTrait;\n \n     public $table = 'comments';\n \n@@ -21,6 +23,13 @@ class Comment extends Model\n         'comment_body',\n     ];\n \n+    protected $searchable = [\n+        'comment_name',\n+        'comment_email',\n+        'comment_website',\n+        'comment_body',\n+    ];\n+\n     public function modelFilter()\n     {\n         return $this->provideFilter(ContentFilter::class);",
      "code_diff":"@@ -5,10 +5,12 @@\n use EloquentFilter\\Filterable;\n use Illuminate\\Database\\Eloquent\\Model;\n use MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\n+use MicroweberPackages\\Core\\Models\\HasSearchableTrait;\n \n class Comment extends Model\n {\n     use Filterable;\n+    use HasSearchableTrait;\n \n     public $table = 'comments';\n \n@@ -21,6 +23,13 @@ class Comment extends Model\n         'comment_body',\n     ];\n \n+    protected $searchable = [\n+        'comment_name',\n+        'comment_email',\n+        'comment_website',\n+        'comment_body',\n+    ];\n+\n     public function modelFilter()\n     {\n         return $this->provideFilter(ContentFilter::class);"
    },
    {
      "index":11,
      "vuln_id":"GHSA-3p92-886g-qxpq",
      "cwe_id":"{'CWE-201'}",
      "score":5.1,
      "chain":"{'https:\/\/github.com\/soldair\/node-floody\/commit\/6c44722312131f4ac8a1af40f0f861c85efe01b0'}",
      "dataset":"osv",
      "summary":"Remote Memory Exposure in floody Versions of `floody` before 0.1.1 are vulnerable to remote memory exposure.\n\n.write(number)` in the affected `floody` versions passes a number to Buffer constructor, appending a chunk of uninitialized memory.\n\nProof of Concept: \n\n```\nvar f = require('floody')(process.stdout); \nf.write(USERSUPPLIEDINPUT); \n'f.stop();\n\n\n## Recommendation\n\nUpdate to version 0.1.1 or later.",
      "published_date":"2019-06-04",
      "chain_len":1,
      "project":"https:\/\/github.com\/soldair\/node-floody",
      "commit_href":"https:\/\/github.com\/soldair\/node-floody\/commit\/6c44722312131f4ac8a1af40f0f861c85efe01b0",
      "commit_sha":"6c44722312131f4ac8a1af40f0f861c85efe01b0",
      "patch":"SINGLE",
      "chain_ord":"['6c44722312131f4ac8a1af40f0f861c85efe01b0']",
      "before_first_fix_commit":"{'2a150c5552b8ce2f2a12ae4a3fd33882d5827afd'}",
      "last_fix_commit":"6c44722312131f4ac8a1af40f0f861c85efe01b0",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/15\/2016, 13:27:13",
      "message":"adding fix for exposing uninitalized memory found by @chalker",
      "author":"Ryan Day",
      "comments":"{'com_1': {'author': 'ChALkeR', 'datetime': '01\/15\/2016, 20:42:58', 'body': \"POC: `var f = require('floody')(process.stdout); f.write(1000); f.stop();`.\"}}",
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/soldair\/node-floody\/raw\/6c44722312131f4ac8a1af40f0f861c85efe01b0\/index.js', 'patch': \"@@ -28,7 +28,7 @@ module.exports = function(options){\\n \\n     if(writes.length > windowSize) writes.shift();\\n \\n-    data = data instanceof Buffer ? data : new Buffer(data);\\n+    data = data instanceof Buffer ? data : new Buffer(data+'');\\n     bufLen += data.length;\\n \\n     buf.push(data);\"}}",
      "message_norm":"adding fix for exposing uninitalized memory found by @chalker",
      "language":"en",
      "entities":"[('adding', 'ACTION', ''), ('uninitalized memory', 'SECWORD', ''), ('found', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 6c44722312131f4ac8a1af40f0f861c85efe01b0 Mon Sep 17 00:00:00 2001\nFrom: Ryan Day <soldair@gmail.com>\nDate: Fri, 15 Jan 2016 05:27:13 -0800\nSubject: [PATCH] adding fix for exposing uninitalized memory found by @chalker\n\n---\n index.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex 83ba366..eb22e84 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -28,7 +28,7 @@ module.exports = function(options){\n \n     if(writes.length > windowSize) writes.shift();\n \n-    data = data instanceof Buffer ? data : new Buffer(data);\n+    data = data instanceof Buffer ? data : new Buffer(data+'');\n     bufLen += data.length;\n \n     buf.push(data);",
      "code_diff":"@@ -28,7 +28,7 @@ module.exports = function(options){\n \n     if(writes.length > windowSize) writes.shift();\n \n-    data = data instanceof Buffer ? data : new Buffer(data);\n+    data = data instanceof Buffer ? data : new Buffer(data+'');\n     bufLen += data.length;\n \n     buf.push(data);"
    },
    {
      "index":12,
      "vuln_id":"GHSA-f7f4-hqp2-7prc",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
      "published_date":"2020-07-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
      "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e",
      "commit_sha":"ff02114eaec090ee51db48435cc32d451662606e",
      "patch":"MULTI",
      "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
      "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
      "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/23\/2018, 21:18:38",
      "message":"Define req.path for socket requests.",
      "author":"Mike McNeil",
      "comments":"{'com_1': {'author': 'mikermcneil', 'datetime': '10\/01\/2018, 15:34:06', 'body': 'Thanks Ali!'}}",
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/ff02114eaec090ee51db48435cc32d451662606e\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -3,6 +3,7 @@\\n  *\/\\n \\n var util = require('util');\\n+var url = require('url');\\n var _ = require('@sailshq\/lodash');\\n var semver = require('semver');\\n var parseSdkMetadata = require('.\/parse-sdk-metadata');\\n@@ -105,6 +106,8 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+\\n       method  : options.eventName,\\n \\n       \/\/ Attached data becomes simulated HTTP body (`req.body`)\"}}",
      "message_norm":"define req.path for socket requests.",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
      "num_files":1.0,
      "patch_content":"From ff02114eaec090ee51db48435cc32d451662606e Mon Sep 17 00:00:00 2001\nFrom: Mike McNeil <git+mikermcneil@sailsjs.com>\nDate: Sun, 23 Sep 2018 16:18:38 -0500\nSubject: [PATCH] Define req.path for socket requests.\n\n---\n lib\/receive-incoming-sails-io-msg.js | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/lib\/receive-incoming-sails-io-msg.js b\/lib\/receive-incoming-sails-io-msg.js\nindex 2ddca3b..5be5704 100644\n--- a\/lib\/receive-incoming-sails-io-msg.js\n+++ b\/lib\/receive-incoming-sails-io-msg.js\n@@ -3,6 +3,7 @@\n  *\/\n \n var util = require('util');\n+var url = require('url');\n var _ = require('@sailshq\/lodash');\n var semver = require('semver');\n var parseSdkMetadata = require('.\/parse-sdk-metadata');\n@@ -105,6 +106,8 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\n \n       url     : options.incomingSailsIOMsg.url,\n \n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\n+\n       method  : options.eventName,\n \n       \/\/ Attached data becomes simulated HTTP body (`req.body`)",
      "code_diff":"@@ -3,6 +3,7 @@\n  *\/\n \n var util = require('util');\n+var url = require('url');\n var _ = require('@sailshq\/lodash');\n var semver = require('semver');\n var parseSdkMetadata = require('.\/parse-sdk-metadata');\n@@ -105,6 +106,8 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\n \n       url     : options.incomingSailsIOMsg.url,\n \n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\n+\n       method  : options.eventName,\n \n       \/\/ Attached data becomes simulated HTTP body (`req.body`)"
    },
    {
      "index":13,
      "vuln_id":"GHSA-hrg5-737c-2p56",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400'}",
      "dataset":"osv",
      "summary":"Missing validation causes denial of service via `UnsortedSegmentJoin` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))\n``` \n  \nThe code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nOP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n            errors::InvalidArgument(\"Number of segments cannot be empty.\"));\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "commit_sha":"13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "patch":"SINGLE",
      "chain_ord":"['13d38a07ce9143e044aa737cfd7bb759d0e9b400']",
      "before_first_fix_commit":"{'fa57990ccca1fb2b9a1f296183985931746914d3'}",
      "last_fix_commit":"13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/28\/2022, 18:37:31",
      "message":"Fix tf.raw_ops.UnsortedSegmentJoin vulnerability with invalid num_segments.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445206880",
      "author":"Alan Liu",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/13d38a07ce9143e044aa737cfd7bb759d0e9b400\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -92,6 +92,9 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n     const Tensor& num_segments_tensor = context->input(2);\\n     OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n+    OP_REQUIRES(context,\\n+                TensorShapeUtils::IsScalar(num_segments_tensor.shape()),\\n+                errors::InvalidArgument(\"Number of segments must be a scalar\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n     OP_REQUIRES('}}",
      "message_norm":"fix tf.raw_ops.unsortedsegmentjoin vulnerability with invalid num_segments.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445206880",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('445206880', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 13d38a07ce9143e044aa737cfd7bb759d0e9b400 Mon Sep 17 00:00:00 2001\nFrom: Alan Liu <liualan@google.com>\nDate: Thu, 28 Apr 2022 11:37:31 -0700\nSubject: [PATCH] Fix tf.raw_ops.UnsortedSegmentJoin vulnerability with invalid\n num_segments.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445206880\n---\n tensorflow\/core\/kernels\/unsorted_segment_join_op.cc | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\nindex c8445ca4c4c596..9529c6e8b74ea9 100644\n--- a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n+++ b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n@@ -92,6 +92,9 @@ class UnsortedSegmentJoinOp : public OpKernel {\n     const Tensor& num_segments_tensor = context->input(2);\n     OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n+    OP_REQUIRES(context,\n+                TensorShapeUtils::IsScalar(num_segments_tensor.shape()),\n+                errors::InvalidArgument(\"Number of segments must be a scalar\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n     OP_REQUIRES(",
      "code_diff":"@@ -92,6 +92,9 @@ class UnsortedSegmentJoinOp : public OpKernel {\n     const Tensor& num_segments_tensor = context->input(2);\n     OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n+    OP_REQUIRES(context,\n+                TensorShapeUtils::IsScalar(num_segments_tensor.shape()),\n+                errors::InvalidArgument(\"Number of segments must be a scalar\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n     OP_REQUIRES("
    },
    {
      "index":14,
      "vuln_id":"GHSA-h5g4-ppwx-48q2",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cff267650c6a1b266e4b4500f69fbc49cdd773c5'}",
      "dataset":"osv",
      "summary":"Missing validation causes denial of service via `DeleteSessionTensor` ### Impact\nThe implementation of [`tf.raw_ops.DeleteSessionTensor`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/session_ops.cc#L128-L144) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.DeleteSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cff267650c6a1b266e4b4500f69fbc49cdd773c5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cff267650c6a1b266e4b4500f69fbc49cdd773c5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cff267650c6a1b266e4b4500f69fbc49cdd773c5",
      "commit_sha":"cff267650c6a1b266e4b4500f69fbc49cdd773c5",
      "patch":"SINGLE",
      "chain_ord":"['cff267650c6a1b266e4b4500f69fbc49cdd773c5']",
      "before_first_fix_commit":"{'339d5de981acaa8580da62c5de8c0da64ae88ad4'}",
      "last_fix_commit":"cff267650c6a1b266e4b4500f69fbc49cdd773c5",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/28\/2022, 20:08:57",
      "message":"Fix tf.raw_ops.DeleteSessionTensor vulnerability with invalid `handle`.\n\nCheck that `handle` input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445228994",
      "author":"Alan Liu",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/session_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/cff267650c6a1b266e4b4500f69fbc49cdd773c5\/tensorflow%2Fcore%2Fkernels%2Fsession_ops.cc', 'patch': '@@ -134,6 +134,8 @@ class DeleteSessionTensorOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& handle = ctx->input(0);\\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\\n+                errors::InvalidArgument(\"`handle` must be scalar\"));\\n     const string& name = handle.scalar<tstring>()();\\n     auto session_state = ctx->session_state();\\n     OP_REQUIRES(ctx, session_state != nullptr,'}}",
      "message_norm":"fix tf.raw_ops.deletesessiontensor vulnerability with invalid `handle`.\n\ncheck that `handle` input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445228994",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('445228994', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/session_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From cff267650c6a1b266e4b4500f69fbc49cdd773c5 Mon Sep 17 00:00:00 2001\nFrom: Alan Liu <liualan@google.com>\nDate: Thu, 28 Apr 2022 13:08:57 -0700\nSubject: [PATCH] Fix tf.raw_ops.DeleteSessionTensor vulnerability with invalid\n `handle`.\n\nCheck that `handle` input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445228994\n---\n tensorflow\/core\/kernels\/session_ops.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/session_ops.cc b\/tensorflow\/core\/kernels\/session_ops.cc\nindex bb47288b1575ad..2feb79a24e329e 100644\n--- a\/tensorflow\/core\/kernels\/session_ops.cc\n+++ b\/tensorflow\/core\/kernels\/session_ops.cc\n@@ -134,6 +134,8 @@ class DeleteSessionTensorOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& handle = ctx->input(0);\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\n+                errors::InvalidArgument(\"`handle` must be scalar\"));\n     const string& name = handle.scalar<tstring>()();\n     auto session_state = ctx->session_state();\n     OP_REQUIRES(ctx, session_state != nullptr,",
      "code_diff":"@@ -134,6 +134,8 @@ class DeleteSessionTensorOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& handle = ctx->input(0);\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\n+                errors::InvalidArgument(\"`handle` must be scalar\"));\n     const string& name = handle.scalar<tstring>()();\n     auto session_state = ctx->session_state();\n     OP_REQUIRES(ctx, session_state != nullptr,"
    },
    {
      "index":15,
      "vuln_id":"GHSA-g25h-jr74-qp5j",
      "cwe_id":"{'CWE-20'}",
      "score":7.8,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708'}",
      "dataset":"osv",
      "summary":"Incomplete validation in `QuantizeV2` ### Impact                                                                                                                                                                                                                                                                                \nDue to incomplete validation in `tf.raw_ops.QuantizeV2`, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeV2(\n  input=[1,2,3],\n  min_range=[1,2],\n  max_range=[],\n  T=tf.qint32,\n  mode='SCALED',\n  round_mode='HALF_AWAY_FROM_ZERO',\n  narrow_range=False,\n  axis=1,\n  ensure_minimum_range=3)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/quantize_op.cc#L59) has some validation but does not check that `min_range` and `max_range` both have the same non-zero number of elements. If `axis` is provided (i.e., not `-1`), then validation should check that it is a value in range for the rank of `input` tensor and then the lengths of `min_range` and `max_range` inputs match the `axis` dimension of the `input` tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [6da6620efad397c85493b8f8667b821403516708](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date":"2021-08-25",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708",
      "commit_sha":"6da6620efad397c85493b8f8667b821403516708",
      "patch":"SINGLE",
      "chain_ord":"['6da6620efad397c85493b8f8667b821403516708']",
      "before_first_fix_commit":"{'eb921122119a6b6e470ee98b89e65d721663179d'}",
      "last_fix_commit":"6da6620efad397c85493b8f8667b821403516708",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/28\/2021, 00:19:57",
      "message":"Secure tf.raw_ops.QuantizeV2\n\nValidate size and shape of min_range and max_range\nEnsure axis is within input dims limits\n\nPiperOrigin-RevId: 387232799\nChange-Id: I36975281f7b5758e9e31a8dcc73fe610ef456318",
      "author":"Laura Pak",
      "comments":null,
      "stats":"{'additions': 43, 'deletions': 0, 'total': 43}",
      "files":"{'tensorflow\/core\/kernels\/quantize_op.cc': {'additions': 43, 'deletions': 0, 'changes': 43, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6da6620efad397c85493b8f8667b821403516708\/tensorflow%2Fcore%2Fkernels%2Fquantize_op.cc', 'patch': '@@ -113,7 +113,50 @@ class QuantizeV2Op : public OpKernel {\\n \\n     int num_slices = 1;\\n     if (axis_ > -1) {\\n+      OP_REQUIRES(\\n+          ctx, input.dims() > axis_,\\n+          errors::InvalidArgument(\\n+              \"Axis is on a zero-based index, so its value must always be less \"\\n+              \"than number of input\\'s dims, but given axis value was \",\\n+              axis_, \" and input\\'s dims was \", input.dims()));\\n       num_slices = input.dim_size(axis_);\\n+      OP_REQUIRES(ctx, input_min_range.dims() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but min_range dims are \",\\n+                      input_min_range.dims()));\\n+      OP_REQUIRES(ctx, input_min_range.dim_size(0) == num_slices,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but min_range is a 1-D tensor of size \",\\n+                      input_min_range.dim_size(0),\\n+                      \" and input\\'s axis dimension is of size \", num_slices));\\n+      OP_REQUIRES(ctx, input_max_range.dims() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but max_range dims are \",\\n+                      input_max_range.dims()));\\n+      OP_REQUIRES(ctx, input_max_range.dim_size(0) == num_slices,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but max_range is a 1-D tensor of size \",\\n+                      input_max_range.dim_size(0),\\n+                      \" and input\\'s axis dimension is of size \", num_slices));\\n+    } else {\\n+      OP_REQUIRES(ctx, input_min_range.NumElements() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is not specified, min_range must contain a \"\\n+                      \"single float element, but it contains \",\\n+                      input_min_range.NumElements(), \" elements\"));\\n+      OP_REQUIRES(ctx, input_max_range.NumElements() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is not specified, max_range must contain a \"\\n+                      \"single float element, but it contains \",\\n+                      input_max_range.NumElements(), \" elements\"));\\n     }\\n \\n     const TensorShape& minmax_shape = ctx->input(1).shape();'}}",
      "message_norm":"secure tf.raw_ops.quantizev2\n\nvalidate size and shape of min_range and max_range\nensure axis is within input dims limits\n\npiperorigin-revid: 387232799\nchange-id: i36975281f7b5758e9e31a8dcc73fe610ef456318",
      "language":"en",
      "entities":"[('secure', 'SECWORD', ''), ('validate', 'ACTION', ''), ('ensure', 'ACTION', ''), ('387232799', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantize_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 6da6620efad397c85493b8f8667b821403516708 Mon Sep 17 00:00:00 2001\nFrom: Laura Pak <lpak@google.com>\nDate: Tue, 27 Jul 2021 17:19:57 -0700\nSubject: [PATCH] Secure tf.raw_ops.QuantizeV2\n\nValidate size and shape of min_range and max_range\nEnsure axis is within input dims limits\n\nPiperOrigin-RevId: 387232799\nChange-Id: I36975281f7b5758e9e31a8dcc73fe610ef456318\n---\n tensorflow\/core\/kernels\/quantize_op.cc | 43 ++++++++++++++++++++++++++\n 1 file changed, 43 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/quantize_op.cc b\/tensorflow\/core\/kernels\/quantize_op.cc\nindex f64a2188fa9547..be73d4f8291f7b 100644\n--- a\/tensorflow\/core\/kernels\/quantize_op.cc\n+++ b\/tensorflow\/core\/kernels\/quantize_op.cc\n@@ -113,7 +113,50 @@ class QuantizeV2Op : public OpKernel {\n \n     int num_slices = 1;\n     if (axis_ > -1) {\n+      OP_REQUIRES(\n+          ctx, input.dims() > axis_,\n+          errors::InvalidArgument(\n+              \"Axis is on a zero-based index, so its value must always be less \"\n+              \"than number of input's dims, but given axis value was \",\n+              axis_, \" and input's dims was \", input.dims()));\n       num_slices = input.dim_size(axis_);\n+      OP_REQUIRES(ctx, input_min_range.dims() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but min_range dims are \",\n+                      input_min_range.dims()));\n+      OP_REQUIRES(ctx, input_min_range.dim_size(0) == num_slices,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but min_range is a 1-D tensor of size \",\n+                      input_min_range.dim_size(0),\n+                      \" and input's axis dimension is of size \", num_slices));\n+      OP_REQUIRES(ctx, input_max_range.dims() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but max_range dims are \",\n+                      input_max_range.dims()));\n+      OP_REQUIRES(ctx, input_max_range.dim_size(0) == num_slices,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but max_range is a 1-D tensor of size \",\n+                      input_max_range.dim_size(0),\n+                      \" and input's axis dimension is of size \", num_slices));\n+    } else {\n+      OP_REQUIRES(ctx, input_min_range.NumElements() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is not specified, min_range must contain a \"\n+                      \"single float element, but it contains \",\n+                      input_min_range.NumElements(), \" elements\"));\n+      OP_REQUIRES(ctx, input_max_range.NumElements() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is not specified, max_range must contain a \"\n+                      \"single float element, but it contains \",\n+                      input_max_range.NumElements(), \" elements\"));\n     }\n \n     const TensorShape& minmax_shape = ctx->input(1).shape();",
      "code_diff":"@@ -113,7 +113,50 @@ class QuantizeV2Op : public OpKernel {\n \n     int num_slices = 1;\n     if (axis_ > -1) {\n+      OP_REQUIRES(\n+          ctx, input.dims() > axis_,\n+          errors::InvalidArgument(\n+              \"Axis is on a zero-based index, so its value must always be less \"\n+              \"than number of input's dims, but given axis value was \",\n+              axis_, \" and input's dims was \", input.dims()));\n       num_slices = input.dim_size(axis_);\n+      OP_REQUIRES(ctx, input_min_range.dims() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but min_range dims are \",\n+                      input_min_range.dims()));\n+      OP_REQUIRES(ctx, input_min_range.dim_size(0) == num_slices,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but min_range is a 1-D tensor of size \",\n+                      input_min_range.dim_size(0),\n+                      \" and input's axis dimension is of size \", num_slices));\n+      OP_REQUIRES(ctx, input_max_range.dims() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but max_range dims are \",\n+                      input_max_range.dims()));\n+      OP_REQUIRES(ctx, input_max_range.dim_size(0) == num_slices,\n+                  errors::InvalidArgument(\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\n+                      \"whose size matches the axis dimension of the input and \"\n+                      \"output tensors, but max_range is a 1-D tensor of size \",\n+                      input_max_range.dim_size(0),\n+                      \" and input's axis dimension is of size \", num_slices));\n+    } else {\n+      OP_REQUIRES(ctx, input_min_range.NumElements() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is not specified, min_range must contain a \"\n+                      \"single float element, but it contains \",\n+                      input_min_range.NumElements(), \" elements\"));\n+      OP_REQUIRES(ctx, input_max_range.NumElements() == 1,\n+                  errors::InvalidArgument(\n+                      \"If axis is not specified, max_range must contain a \"\n+                      \"single float element, but it contains \",\n+                      input_max_range.NumElements(), \" elements\"));\n     }\n \n     const TensorShape& minmax_shape = ctx->input(1).shape();"
    },
    {
      "index":16,
      "vuln_id":"GHSA-f5fj-7265-jxhj",
      "cwe_id":"{'CWE-200'}",
      "score":5.3,
      "chain":"{'https:\/\/github.com\/go-gitea\/gitea\/commit\/194a11eb110cd98fc2ba52861abf7770db6885a3'}",
      "dataset":"osv",
      "summary":"Information Exposure Gitea version prior to version 1.5.1 contains a CWE-200 vulnerability that can result in Exposure of users private email addresses. This attack appear to be exploitable via Watch a repository to receive email notifications. Emails received contain the other recipients even if they have the email set as private. This vulnerability appears to have been fixed in 1.5.1.",
      "published_date":"2022-02-15",
      "chain_len":1,
      "project":"https:\/\/github.com\/go-gitea\/gitea",
      "commit_href":"https:\/\/github.com\/go-gitea\/gitea\/commit\/194a11eb110cd98fc2ba52861abf7770db6885a3",
      "commit_sha":"194a11eb110cd98fc2ba52861abf7770db6885a3",
      "patch":"SINGLE",
      "chain_ord":"['194a11eb110cd98fc2ba52861abf7770db6885a3']",
      "before_first_fix_commit":"{'912953e82a851492c7fd1f2e9c10d3a1955b625c'}",
      "last_fix_commit":"194a11eb110cd98fc2ba52861abf7770db6885a3",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/24\/2018, 04:41:26",
      "message":"Don't disclose emails of all users when sending out emails (#4664)",
      "author":"techknowlogick",
      "comments":null,
      "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
      "files":"{'models\/issue_mail.go': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/go-gitea\/gitea\/raw\/194a11eb110cd98fc2ba52861abf7770db6885a3\/models%2Fissue_mail.go', 'patch': '@@ -1,4 +1,5 @@\\n \/\/ Copyright 2016 The Gogs Authors. All rights reserved.\\n+\/\/ Copyright 2018 The Gitea Authors. All rights reserved.\\n \/\/ Use of this source code is governed by a MIT-style\\n \/\/ license that can be found in the LICENSE file.\\n \\n@@ -87,7 +88,9 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\t\\tnames = append(names, participants[i].Name)\\n \\t}\\n \\n-\\tSendIssueCommentMail(issue, doer, content, comment, tos)\\n+\\tfor _, to := range tos {\\n+\\t\\tSendIssueCommentMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\t\/\/ Mail mentioned people and exclude watchers.\\n \\tnames = append(names, doer.Name)\\n@@ -99,7 +102,12 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\n \\t\\ttos = append(tos, mentions[i])\\n \\t}\\n-\\tSendIssueMentionMail(issue, doer, content, comment, getUserEmailsByNames(e, tos))\\n+\\n+\\temails := getUserEmailsByNames(e, tos)\\n+\\n+\\tfor _, to := range emails {\\n+\\t\\tSendIssueMentionMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\treturn nil\\n }'}}",
      "message_norm":"don't disclose emails of all users when sending out emails (#4664)",
      "language":"en",
      "entities":"[('disclose', 'SECWORD', ''), ('#4664', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['models\/issue_mail.go'])",
      "num_files":1.0,
      "patch_content":"From 194a11eb110cd98fc2ba52861abf7770db6885a3 Mon Sep 17 00:00:00 2001\nFrom: techknowlogick <techknowlogick@users.noreply.github.com>\nDate: Fri, 24 Aug 2018 00:41:26 -0400\nSubject: [PATCH] Don't disclose emails of all users when sending out emails\n (#4664)\n\n---\n models\/issue_mail.go | 12 ++++++++++--\n 1 file changed, 10 insertions(+), 2 deletions(-)\n\ndiff --git a\/models\/issue_mail.go b\/models\/issue_mail.go\nindex 179bb6527b549..b78da6d79a5bd 100644\n--- a\/models\/issue_mail.go\n+++ b\/models\/issue_mail.go\n@@ -1,4 +1,5 @@\n \/\/ Copyright 2016 The Gogs Authors. All rights reserved.\n+\/\/ Copyright 2018 The Gitea Authors. All rights reserved.\n \/\/ Use of this source code is governed by a MIT-style\n \/\/ license that can be found in the LICENSE file.\n \n@@ -87,7 +88,9 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\n \t\tnames = append(names, participants[i].Name)\n \t}\n \n-\tSendIssueCommentMail(issue, doer, content, comment, tos)\n+\tfor _, to := range tos {\n+\t\tSendIssueCommentMail(issue, doer, content, comment, []string{to})\n+\t}\n \n \t\/\/ Mail mentioned people and exclude watchers.\n \tnames = append(names, doer.Name)\n@@ -99,7 +102,12 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\n \n \t\ttos = append(tos, mentions[i])\n \t}\n-\tSendIssueMentionMail(issue, doer, content, comment, getUserEmailsByNames(e, tos))\n+\n+\temails := getUserEmailsByNames(e, tos)\n+\n+\tfor _, to := range emails {\n+\t\tSendIssueMentionMail(issue, doer, content, comment, []string{to})\n+\t}\n \n \treturn nil\n }",
      "code_diff":"@@ -1,4 +1,5 @@\n \/\/ Copyright 2016 The Gogs Authors. All rights reserved.\n+\/\/ Copyright 2018 The Gitea Authors. All rights reserved.\n \/\/ Use of this source code is governed by a MIT-style\n \/\/ license that can be found in the LICENSE file.\n \n@@ -87,7 +88,9 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\n \t\tnames = append(names, participants[i].Name)\n \t}\n \n-\tSendIssueCommentMail(issue, doer, content, comment, tos)\n+\tfor _, to := range tos {\n+\t\tSendIssueCommentMail(issue, doer, content, comment, []string{to})\n+\t}\n \n \t\/\/ Mail mentioned people and exclude watchers.\n \tnames = append(names, doer.Name)\n@@ -99,7 +102,12 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\n \n \t\ttos = append(tos, mentions[i])\n \t}\n-\tSendIssueMentionMail(issue, doer, content, comment, getUserEmailsByNames(e, tos))\n+\n+\temails := getUserEmailsByNames(e, tos)\n+\n+\tfor _, to := range emails {\n+\t\tSendIssueMentionMail(issue, doer, content, comment, []string{to})\n+\t}\n \n \treturn nil\n }"
    },
    {
      "index":17,
      "vuln_id":"GHSA-66rh-8fw6-59q6",
      "cwe_id":"{'CWE-915', 'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c', 'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/90bf1c551d05940898168d04066bbf15060f50cc'}",
      "dataset":"osv",
      "summary":"assign-deep Vulnerable to Prototype Pollution Versions of `assign-deep` prior to 1.0.1 and 0.4.8 are vulnerable to Prototype Pollution. The `assign` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n## Recommendation\n\nUpgrade to versions 1.0.1, 0.4.8, or later.",
      "published_date":"2019-08-21",
      "chain_len":2,
      "project":"https:\/\/github.com\/jonschlinkert\/assign-deep",
      "commit_href":"https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c",
      "commit_sha":"8e3cc4a34246733672c71e96532105384937e56c",
      "patch":"MULTI",
      "chain_ord":"['90bf1c551d05940898168d04066bbf15060f50cc', '8e3cc4a34246733672c71e96532105384937e56c']",
      "before_first_fix_commit":"{'24412bd2b59bc128437819c4a4518a7b7148d81a'}",
      "last_fix_commit":"8e3cc4a34246733672c71e96532105384937e56c",
      "chain_ord_pos":2.0,
      "commit_datetime":"06\/25\/2019, 17:46:37",
      "message":"ensure keys are valid",
      "author":"doowb",
      "comments":null,
      "stats":"{'additions': 9, 'deletions': 1, 'total': 10}",
      "files":"{'index.js': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/assign-deep\/raw\/8e3cc4a34246733672c71e96532105384937e56c\/index.js', 'patch': \"@@ -37,7 +37,7 @@ function extend(target, obj) {\\n   assignSymbols(target, obj);\\n \\n   for (var key in obj) {\\n-    if (key !== '__proto__' && hasOwn(obj, key)) {\\n+    if (isValidKey(key) && hasOwn(obj, key)) {\\n       var val = obj[key];\\n       if (isObject(val)) {\\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\\n@@ -68,6 +68,14 @@ function hasOwn(obj, key) {\\n   return Object.prototype.hasOwnProperty.call(obj, key);\\n }\\n \\n+\/**\\n+ * Returns true if the given `key` is a valid key that can be used for assigning properties.\\n+ *\/\\n+\\n+function isValidKey(key) {\\n+  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\\n+}\\n+\\n \/**\\n  * Expose `assign`\\n  *\/\"}}",
      "message_norm":"ensure keys are valid",
      "language":"af",
      "entities":"[('ensure', 'ACTION', ''), ('keys', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 8e3cc4a34246733672c71e96532105384937e56c Mon Sep 17 00:00:00 2001\nFrom: doowb <brian.woodward@gmail.com>\nDate: Tue, 25 Jun 2019 13:46:37 -0400\nSubject: [PATCH] ensure keys are valid\n\n---\n index.js | 10 +++++++++-\n 1 file changed, 9 insertions(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex c5dc494..7b45f0c 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -37,7 +37,7 @@ function extend(target, obj) {\n   assignSymbols(target, obj);\n \n   for (var key in obj) {\n-    if (key !== '__proto__' && hasOwn(obj, key)) {\n+    if (isValidKey(key) && hasOwn(obj, key)) {\n       var val = obj[key];\n       if (isObject(val)) {\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\n@@ -68,6 +68,14 @@ function hasOwn(obj, key) {\n   return Object.prototype.hasOwnProperty.call(obj, key);\n }\n \n+\/**\n+ * Returns true if the given `key` is a valid key that can be used for assigning properties.\n+ *\/\n+\n+function isValidKey(key) {\n+  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n+}\n+\n \/**\n  * Expose `assign`\n  *\/",
      "code_diff":"@@ -37,7 +37,7 @@ function extend(target, obj) {\n   assignSymbols(target, obj);\n \n   for (var key in obj) {\n-    if (key !== '__proto__' && hasOwn(obj, key)) {\n+    if (isValidKey(key) && hasOwn(obj, key)) {\n       var val = obj[key];\n       if (isObject(val)) {\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\n@@ -68,6 +68,14 @@ function hasOwn(obj, key) {\n   return Object.prototype.hasOwnProperty.call(obj, key);\n }\n \n+\/**\n+ * Returns true if the given `key` is a valid key that can be used for assigning properties.\n+ *\/\n+\n+function isValidKey(key) {\n+  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n+}\n+\n \/**\n  * Expose `assign`\n  *\/"
    },
    {
      "index":18,
      "vuln_id":"GHSA-9m95-8hx6-7p9v",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57'}",
      "dataset":"osv",
      "summary":"Improper input validation in umoci ### Impact\n\numoci 0.4.6 and earlier can be tricked into modifying host files by\ncreating a malicious layer that has a symlink with the name \".\" (or\n\"\/\"). Because umoci deletes inodes if they change types, this results in\nthe rootfs directory being replaced with an attacker-controlled symlink.\nSubsequent image layers will then be applied on top of the target of the\nsymlink (which could be any directory on the host filesystem the user\nrunning umoci has access to).\n\nWhile umoci does have defences against symlink-based attacks, they are\nall implemented by resolving things relative to the rootfs directory --\nif the rootfs itself is a symlink, umoci resolves it first.\n\nThis vulnerability affects both \"umoci unpack\" and \"umoci raw unpack\".\n\n### Patches\nThis issue has been patched in umoci 0.4.7, see the references section\nfor the specific commit which fixed this vulnerability.\n\n### Workarounds\nNote that if you use umoci as an unprivileged user (using the --rootless\nflag) then umoci will not be able to overwrite any files that your user\ndoesn't have access to. Other possible mitigations are to run umoci\nunder an LSM profile such as AppArmor or SELinux to restrict the level\nof access it has outside of container image directories.\n\n### References\n* [oss-security public disclosure](https:\/\/www.openwall.com\/lists\/oss-security\/2021\/04\/06\/2)\n* [patch](https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57)\n\n### Credits\nThanks to Robin Peraglie from Cure53 for discovering and reporting this\nvulnerability.\n\n### For more information\n\nIf you have any questions or comments about this advisory\n* Open an issue in <https:\/\/github.com\/opencontainers\/umoci>.\n* Email us at <security@opencontainers.org>.",
      "published_date":"2022-02-15",
      "chain_len":1,
      "project":"https:\/\/github.com\/opencontainers\/umoci",
      "commit_href":"https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
      "commit_sha":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
      "patch":"SINGLE",
      "chain_ord":"['d9efc31daf2206f7d3fdb839863cf7a576a2eb57']",
      "before_first_fix_commit":"{'07fa845e5b068dee64dcbf391b456a564a6fcfa6'}",
      "last_fix_commit":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/23\/2021, 13:17:06",
      "message":"layer: don't permit \/ type to be changed on extraction\n\nIf users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. This is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nFixes: CVE-2021-29136\nReported-by: Robin Peraglie <robin@cure53.de>\nTested-by: Daniel Dao <dqminh89@gmail.com>\nReviewed-by: Tycho Andersen <tycho@tycho.pizza>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
      "author":"Aleksa Sarai",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
      "files":"{'oci\/layer\/tar_extract.go': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencontainers\/umoci\/raw\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57\/oci%2Flayer%2Ftar_extract.go', 'patch': '@@ -404,6 +404,11 @@ func (te *TarExtractor) UnpackEntry(root string, hdr *tar.Header, r io.Reader) (\\n \\tif filepath.Join(\"\/\", hdr.Name) == \"\/\" {\\n \\t\\t\/\/ If we got an entry for the root, then unsafeDir is the full path.\\n \\t\\tunsafeDir, file = hdr.Name, \".\"\\n+\\t\\t\/\/ If we\\'re being asked to change the root type, bail because they may\\n+\\t\\t\/\/ change it to a symlink which we could inadvertently follow.\\n+\\t\\tif hdr.Typeflag != tar.TypeDir {\\n+\\t\\t\\treturn errors.New(\"malicious tar entry -- refusing to change type of root directory\")\\n+\\t\\t}\\n \\t}\\n \\tdir, err := securejoin.SecureJoinVFS(root, unsafeDir, te.fsEval)\\n \\tif err != nil {'}}",
      "message_norm":"layer: don't permit \/ type to be changed on extraction\n\nif users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. this is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nfixes: cve-2021-29136\nreported-by: robin peraglie <robin@cure53.de>\ntested-by: daniel dao <dqminh89@gmail.com>\nreviewed-by: tycho andersen <tycho@tycho.pizza>\nsigned-off-by: aleksa sarai <cyphar@cyphar.com>",
      "language":"en",
      "entities":"[('changed', 'ACTION', ''), ('change', 'ACTION', ''), ('symlink', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('changed', 'ACTION', ''), ('fixes', 'ACTION', ''), ('cve-2021-29136', 'VULNID', 'CVE'), ('robin@cure53.de', 'EMAIL', ''), ('dqminh89@gmail.com', 'EMAIL', ''), ('cyphar@cyphar.com', 'EMAIL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['oci\/layer\/tar_extract.go'])",
      "num_files":1.0,
      "patch_content":"From d9efc31daf2206f7d3fdb839863cf7a576a2eb57 Mon Sep 17 00:00:00 2001\nFrom: Aleksa Sarai <cyphar@cyphar.com>\nDate: Wed, 24 Mar 2021 00:17:06 +1100\nSubject: [PATCH] layer: don't permit \/ type to be changed on extraction\n\nIf users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. This is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nFixes: CVE-2021-29136\nReported-by: Robin Peraglie <robin@cure53.de>\nTested-by: Daniel Dao <dqminh89@gmail.com>\nReviewed-by: Tycho Andersen <tycho@tycho.pizza>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>\n---\n oci\/layer\/tar_extract.go | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a\/oci\/layer\/tar_extract.go b\/oci\/layer\/tar_extract.go\nindex 1b8c3d67c..d74141051 100644\n--- a\/oci\/layer\/tar_extract.go\n+++ b\/oci\/layer\/tar_extract.go\n@@ -404,6 +404,11 @@ func (te *TarExtractor) UnpackEntry(root string, hdr *tar.Header, r io.Reader) (\n \tif filepath.Join(\"\/\", hdr.Name) == \"\/\" {\n \t\t\/\/ If we got an entry for the root, then unsafeDir is the full path.\n \t\tunsafeDir, file = hdr.Name, \".\"\n+\t\t\/\/ If we're being asked to change the root type, bail because they may\n+\t\t\/\/ change it to a symlink which we could inadvertently follow.\n+\t\tif hdr.Typeflag != tar.TypeDir {\n+\t\t\treturn errors.New(\"malicious tar entry -- refusing to change type of root directory\")\n+\t\t}\n \t}\n \tdir, err := securejoin.SecureJoinVFS(root, unsafeDir, te.fsEval)\n \tif err != nil {",
      "code_diff":"@@ -404,6 +404,11 @@ func (te *TarExtractor) UnpackEntry(root string, hdr *tar.Header, r io.Reader) (\n \tif filepath.Join(\"\/\", hdr.Name) == \"\/\" {\n \t\t\/\/ If we got an entry for the root, then unsafeDir is the full path.\n \t\tunsafeDir, file = hdr.Name, \".\"\n+\t\t\/\/ If we're being asked to change the root type, bail because they may\n+\t\t\/\/ change it to a symlink which we could inadvertently follow.\n+\t\tif hdr.Typeflag != tar.TypeDir {\n+\t\t\treturn errors.New(\"malicious tar entry -- refusing to change type of root directory\")\n+\t\t}\n \t}\n \tdir, err := securejoin.SecureJoinVFS(root, unsafeDir, te.fsEval)\n \tif err != nil {"
    },
    {
      "index":19,
      "vuln_id":"GHSA-5r2v-6gm6-vpvh",
      "cwe_id":"{'CWE-200'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945'}",
      "dataset":"osv",
      "summary":"Insecure Permissions in Gogs routes\/api\/v1\/api.go in Gogs 0.11.86 lacks permission checks for routes: deploy keys, collaborators, and hooks.",
      "published_date":"2021-05-18",
      "chain_len":1,
      "project":"https:\/\/github.com\/gogs\/gogs",
      "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
      "commit_sha":"c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
      "patch":"SINGLE",
      "chain_ord":"['c3af3ff1d0484de3bd789ee6c6e47f35d590e945']",
      "before_first_fix_commit":"{'1592e578ed3ac7190baed6165b093002b931520c'}",
      "last_fix_commit":"c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/02\/2019, 01:36:05",
      "message":"routes\/api: fix permission checks for routes\n\nReported by @ManassehZhou #5764",
      "author":"unknwon",
      "comments":null,
      "stats":"{'additions': 14, 'deletions': 5, 'total': 19}",
      "files":"{'routes\/api\/v1\/api.go': {'additions': 14, 'deletions': 5, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945\/routes%2Fapi%2Fv1%2Fapi.go', 'patch': '@@ -112,6 +112,15 @@ func reqRepoWriter() macaron.Handler {\\n \\t}\\n }\\n \\n+func reqRepoAdmin() macaron.Handler {\\n+\\treturn func(c *context.Context) {\\n+\\t\\tif !c.Repo.IsAdmin() {\\n+\\t\\t\\tc.Error(http.StatusForbidden)\\n+\\t\\t\\treturn\\n+\\t\\t}\\n+\\t}\\n+}\\n+\\n func orgAssignment(args ...bool) macaron.Handler {\\n \\tvar (\\n \\t\\tassignOrg  bool\\n@@ -236,12 +245,12 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tPost(bind(api.CreateHookOption{}), repo.CreateHook)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:id\").Patch(bind(api.EditHookOption{}), repo.EditHook).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteHook)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Group(\"\/collaborators\", func() {\\n \\t\\t\\t\\t\\tm.Get(\"\", repo.ListCollaborators)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:collaborator\").Get(repo.IsCollaborator).Put(bind(api.AddCollaboratorOption{}), repo.AddCollaborator).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteCollaborator)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Get(\"\/raw\/*\", context.RepoRef(), repo.GetRawFile)\\n \\t\\t\\t\\tm.Get(\"\/archive\/*\", repo.GetArchive)\\n \\t\\t\\t\\tm.Get(\"\/forks\", repo.ListForks)\\n@@ -260,7 +269,7 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tPost(bind(api.CreateKeyOption{}), repo.CreateDeployKey)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:id\").Get(repo.GetDeployKey).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteDeploykey)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Group(\"\/issues\", func() {\\n \\t\\t\\t\\t\\tm.Combo(\"\").Get(repo.ListIssues).Post(bind(api.CreateIssueOption{}), repo.CreateIssue)\\n \\t\\t\\t\\t\\tm.Group(\"\/comments\", func() {\\n@@ -300,8 +309,8 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tDelete(reqRepoWriter(), repo.DeleteMilestone)\\n \\t\\t\\t\\t})\\n \\n-\\t\\t\\t\\tm.Patch(\"\/issue-tracker\", bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\\n-\\t\\t\\t\\tm.Post(\"\/mirror-sync\", repo.MirrorSync)\\n+\\t\\t\\t\\tm.Patch(\"\/issue-tracker\", reqRepoWriter(), bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\\n+\\t\\t\\t\\tm.Post(\"\/mirror-sync\", reqRepoWriter(), repo.MirrorSync)\\n \\t\\t\\t\\tm.Get(\"\/editorconfig\/:filename\", context.RepoRef(), repo.GetEditorconfig)\\n \\t\\t\\t}, repoAssignment())\\n \\t\\t}, reqToken())'}}",
      "message_norm":"routes\/api: fix permission checks for routes\n\nreported by @manassehzhou #5764",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('permission', 'SECWORD', ''), ('#5764', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['routes\/api\/v1\/api.go'])",
      "num_files":1.0,
      "patch_content":"From c3af3ff1d0484de3bd789ee6c6e47f35d590e945 Mon Sep 17 00:00:00 2001\nFrom: unknwon <u@gogs.io>\nDate: Thu, 1 Aug 2019 18:36:05 -0700\nSubject: [PATCH] routes\/api: fix permission checks for routes\n\nReported by @ManassehZhou #5764\n---\n routes\/api\/v1\/api.go | 19 ++++++++++++++-----\n 1 file changed, 14 insertions(+), 5 deletions(-)\n\ndiff --git a\/routes\/api\/v1\/api.go b\/routes\/api\/v1\/api.go\nindex 54f7e7efe7b..7b58b4eb14b 100644\n--- a\/routes\/api\/v1\/api.go\n+++ b\/routes\/api\/v1\/api.go\n@@ -112,6 +112,15 @@ func reqRepoWriter() macaron.Handler {\n \t}\n }\n \n+func reqRepoAdmin() macaron.Handler {\n+\treturn func(c *context.Context) {\n+\t\tif !c.Repo.IsAdmin() {\n+\t\t\tc.Error(http.StatusForbidden)\n+\t\t\treturn\n+\t\t}\n+\t}\n+}\n+\n func orgAssignment(args ...bool) macaron.Handler {\n \tvar (\n \t\tassignOrg  bool\n@@ -236,12 +245,12 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tPost(bind(api.CreateHookOption{}), repo.CreateHook)\n \t\t\t\t\tm.Combo(\"\/:id\").Patch(bind(api.EditHookOption{}), repo.EditHook).\n \t\t\t\t\t\tDelete(repo.DeleteHook)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Group(\"\/collaborators\", func() {\n \t\t\t\t\tm.Get(\"\", repo.ListCollaborators)\n \t\t\t\t\tm.Combo(\"\/:collaborator\").Get(repo.IsCollaborator).Put(bind(api.AddCollaboratorOption{}), repo.AddCollaborator).\n \t\t\t\t\t\tDelete(repo.DeleteCollaborator)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Get(\"\/raw\/*\", context.RepoRef(), repo.GetRawFile)\n \t\t\t\tm.Get(\"\/archive\/*\", repo.GetArchive)\n \t\t\t\tm.Get(\"\/forks\", repo.ListForks)\n@@ -260,7 +269,7 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tPost(bind(api.CreateKeyOption{}), repo.CreateDeployKey)\n \t\t\t\t\tm.Combo(\"\/:id\").Get(repo.GetDeployKey).\n \t\t\t\t\t\tDelete(repo.DeleteDeploykey)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Group(\"\/issues\", func() {\n \t\t\t\t\tm.Combo(\"\").Get(repo.ListIssues).Post(bind(api.CreateIssueOption{}), repo.CreateIssue)\n \t\t\t\t\tm.Group(\"\/comments\", func() {\n@@ -300,8 +309,8 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tDelete(reqRepoWriter(), repo.DeleteMilestone)\n \t\t\t\t})\n \n-\t\t\t\tm.Patch(\"\/issue-tracker\", bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\n-\t\t\t\tm.Post(\"\/mirror-sync\", repo.MirrorSync)\n+\t\t\t\tm.Patch(\"\/issue-tracker\", reqRepoWriter(), bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\n+\t\t\t\tm.Post(\"\/mirror-sync\", reqRepoWriter(), repo.MirrorSync)\n \t\t\t\tm.Get(\"\/editorconfig\/:filename\", context.RepoRef(), repo.GetEditorconfig)\n \t\t\t}, repoAssignment())\n \t\t}, reqToken())",
      "code_diff":"@@ -112,6 +112,15 @@ func reqRepoWriter() macaron.Handler {\n \t}\n }\n \n+func reqRepoAdmin() macaron.Handler {\n+\treturn func(c *context.Context) {\n+\t\tif !c.Repo.IsAdmin() {\n+\t\t\tc.Error(http.StatusForbidden)\n+\t\t\treturn\n+\t\t}\n+\t}\n+}\n+\n func orgAssignment(args ...bool) macaron.Handler {\n \tvar (\n \t\tassignOrg  bool\n@@ -236,12 +245,12 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tPost(bind(api.CreateHookOption{}), repo.CreateHook)\n \t\t\t\t\tm.Combo(\"\/:id\").Patch(bind(api.EditHookOption{}), repo.EditHook).\n \t\t\t\t\t\tDelete(repo.DeleteHook)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Group(\"\/collaborators\", func() {\n \t\t\t\t\tm.Get(\"\", repo.ListCollaborators)\n \t\t\t\t\tm.Combo(\"\/:collaborator\").Get(repo.IsCollaborator).Put(bind(api.AddCollaboratorOption{}), repo.AddCollaborator).\n \t\t\t\t\t\tDelete(repo.DeleteCollaborator)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Get(\"\/raw\/*\", context.RepoRef(), repo.GetRawFile)\n \t\t\t\tm.Get(\"\/archive\/*\", repo.GetArchive)\n \t\t\t\tm.Get(\"\/forks\", repo.ListForks)\n@@ -260,7 +269,7 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tPost(bind(api.CreateKeyOption{}), repo.CreateDeployKey)\n \t\t\t\t\tm.Combo(\"\/:id\").Get(repo.GetDeployKey).\n \t\t\t\t\t\tDelete(repo.DeleteDeploykey)\n-\t\t\t\t}, reqAdmin())\n+\t\t\t\t}, reqRepoAdmin())\n \t\t\t\tm.Group(\"\/issues\", func() {\n \t\t\t\t\tm.Combo(\"\").Get(repo.ListIssues).Post(bind(api.CreateIssueOption{}), repo.CreateIssue)\n \t\t\t\t\tm.Group(\"\/comments\", func() {\n@@ -300,8 +309,8 @@ func RegisterRoutes(m *macaron.Macaron) {\n \t\t\t\t\t\tDelete(reqRepoWriter(), repo.DeleteMilestone)\n \t\t\t\t})\n \n-\t\t\t\tm.Patch(\"\/issue-tracker\", bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\n-\t\t\t\tm.Post(\"\/mirror-sync\", repo.MirrorSync)\n+\t\t\t\tm.Patch(\"\/issue-tracker\", reqRepoWriter(), bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\n+\t\t\t\tm.Post(\"\/mirror-sync\", reqRepoWriter(), repo.MirrorSync)\n \t\t\t\tm.Get(\"\/editorconfig\/:filename\", context.RepoRef(), repo.GetEditorconfig)\n \t\t\t}, repoAssignment())\n \t\t}, reqToken())"
    },
    {
      "index":20,
      "vuln_id":"GHSA-v82p-hv3v-p6qp",
      "cwe_id":"{'CWE-20'}",
      "score":7.8,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69'}",
      "dataset":"osv",
      "summary":"Incomplete validation in MKL requantization ### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date":"2021-08-25",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9",
      "commit_sha":"203214568f5bc237603dbab6e1fd389f1572f5c9",
      "patch":"MULTI",
      "chain_ord":"['9e62869465573cb2d9b5053f1fa02a81fce21d69', '203214568f5bc237603dbab6e1fd389f1572f5c9']",
      "before_first_fix_commit":"{'aff0d5b2883ea3de9b52f9e7cd996a34b299bf06'}",
      "last_fix_commit":"203214568f5bc237603dbab6e1fd389f1572f5c9",
      "chain_ord_pos":2.0,
      "commit_datetime":"07\/30\/2021, 23:06:23",
      "message":"Reorganize and add more validation to MKL requantization\n\nPiperOrigin-RevId: 387901341\nChange-Id: I2515b9034c64e113db0bcec8337d30643ab0a0f1",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 25, 'deletions': 15, 'total': 40}",
      "files":"{'tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc': {'additions': 25, 'deletions': 15, 'changes': 40, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/203214568f5bc237603dbab6e1fd389f1572f5c9\/tensorflow%2Fcore%2Fkernels%2Fmkl%2Fmkl_requantize_per_channel_op.cc', 'patch': '@@ -49,35 +49,45 @@ class MklRequantizePerChannelOp : public OpKernel {\\n   void Compute(OpKernelContext* ctx) override {\\n     try {\\n       const Tensor& input = ctx->input(kInputTensorIndex);\\n+      OP_REQUIRES(\\n+          ctx, input.dims() == 4,\\n+          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n+                                  \"supports 4D tensors only.\"));\\n+\\n       const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);\\n+      size_t depth = input_min_vec.NumElements();\\n       float* input_min_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_min_vec.flat<float>().data()));\\n+\\n       const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_max_vec.NumElements() == depth,\\n+          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n+                                  depth, \" was \", input_max_vec.NumElements()));\\n       float* input_max_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_max_vec.flat<float>().data()));\\n \\n       const Tensor& input_requested_min = ctx->input(this->kRequestMinIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_min must be a scalar\"));\\n       const float input_requested_min_float =\\n           input_requested_min.flat<float>()(0);\\n+\\n       const Tensor& input_requested_max = ctx->input(this->kRequestMaxIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_max must be a scalar\"));\\n       const float input_requested_max_float =\\n           input_requested_max.flat<float>()(0);\\n \\n-      size_t depth = input_min_vec.NumElements();\\n-      OP_REQUIRES(\\n-          ctx, input.dims() == 4,\\n-          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n-                                  \"supports 4D tensors only.\"));\\n-      OP_REQUIRES(\\n-          ctx, input_min_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_min has incorrect size, expected \",\\n-                                  depth, \" was \", input_min_vec.dim_size(0)));\\n-      OP_REQUIRES(\\n-          ctx, input_max_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n-                                  depth, \" was \", input_max_vec.dim_size(0)));\\n-\\n-      if (out_type_ == DT_QINT8) DCHECK(input_requested_min_float < 0.0f);\\n+      if (out_type_ == DT_QINT8) {\\n+        OP_REQUIRES(ctx, input_requested_min_float < 0.0f,\\n+                    errors::InvalidArgument(\\n+                        \"If out_type is QINT8, requested_output_max must be \"\\n+                        \"non negative, got \",\\n+                        input_requested_min_float));\\n+      }\\n \\n       const float factor = (out_type_ == DT_QINT8) ? 127.0f : 255.0f;\\n       const float requested_min_max ='}}",
      "message_norm":"reorganize and add more validation to mkl requantization\n\npiperorigin-revid: 387901341\nchange-id: i2515b9034c64e113db0bcec8337d30643ab0a0f1",
      "language":"en",
      "entities":"[('add', 'ACTION', ''), ('387901341', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 203214568f5bc237603dbab6e1fd389f1572f5c9 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Fri, 30 Jul 2021 16:06:23 -0700\nSubject: [PATCH] Reorganize and add more validation to MKL requantization\n\nPiperOrigin-RevId: 387901341\nChange-Id: I2515b9034c64e113db0bcec8337d30643ab0a0f1\n---\n ...\/mkl\/mkl_requantize_per_channel_op.cc      | 40 ++++++++++++-------\n 1 file changed, 25 insertions(+), 15 deletions(-)\n\ndiff --git a\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc b\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc\nindex c0f9845cd4b084..6ffbd09b44f543 100644\n--- a\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc\n+++ b\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc\n@@ -49,35 +49,45 @@ class MklRequantizePerChannelOp : public OpKernel {\n   void Compute(OpKernelContext* ctx) override {\n     try {\n       const Tensor& input = ctx->input(kInputTensorIndex);\n+      OP_REQUIRES(\n+          ctx, input.dims() == 4,\n+          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\n+                                  \"supports 4D tensors only.\"));\n+\n       const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);\n+      size_t depth = input_min_vec.NumElements();\n       float* input_min_vec_data = (float*)const_cast<void*>(\n           static_cast<const void*>(input_min_vec.flat<float>().data()));\n+\n       const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);\n+      OP_REQUIRES(\n+          ctx, input_max_vec.NumElements() == depth,\n+          errors::InvalidArgument(\"input_max has incorrect size, expected \",\n+                                  depth, \" was \", input_max_vec.NumElements()));\n       float* input_max_vec_data = (float*)const_cast<void*>(\n           static_cast<const void*>(input_max_vec.flat<float>().data()));\n \n       const Tensor& input_requested_min = ctx->input(this->kRequestMinIndex);\n+      OP_REQUIRES(\n+          ctx, input_requested_min.NumElements() == 1,\n+          errors::InvalidArgument(\"requested_output_min must be a scalar\"));\n       const float input_requested_min_float =\n           input_requested_min.flat<float>()(0);\n+\n       const Tensor& input_requested_max = ctx->input(this->kRequestMaxIndex);\n+      OP_REQUIRES(\n+          ctx, input_requested_min.NumElements() == 1,\n+          errors::InvalidArgument(\"requested_output_max must be a scalar\"));\n       const float input_requested_max_float =\n           input_requested_max.flat<float>()(0);\n \n-      size_t depth = input_min_vec.NumElements();\n-      OP_REQUIRES(\n-          ctx, input.dims() == 4,\n-          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\n-                                  \"supports 4D tensors only.\"));\n-      OP_REQUIRES(\n-          ctx, input_min_vec.dim_size(0) == depth,\n-          errors::InvalidArgument(\"input_min has incorrect size, expected \",\n-                                  depth, \" was \", input_min_vec.dim_size(0)));\n-      OP_REQUIRES(\n-          ctx, input_max_vec.dim_size(0) == depth,\n-          errors::InvalidArgument(\"input_max has incorrect size, expected \",\n-                                  depth, \" was \", input_max_vec.dim_size(0)));\n-\n-      if (out_type_ == DT_QINT8) DCHECK(input_requested_min_float < 0.0f);\n+      if (out_type_ == DT_QINT8) {\n+        OP_REQUIRES(ctx, input_requested_min_float < 0.0f,\n+                    errors::InvalidArgument(\n+                        \"If out_type is QINT8, requested_output_max must be \"\n+                        \"non negative, got \",\n+                        input_requested_min_float));\n+      }\n \n       const float factor = (out_type_ == DT_QINT8) ? 127.0f : 255.0f;\n       const float requested_min_max =",
      "code_diff":"@@ -49,35 +49,45 @@ class MklRequantizePerChannelOp : public OpKernel {\n   void Compute(OpKernelContext* ctx) override {\n     try {\n       const Tensor& input = ctx->input(kInputTensorIndex);\n+      OP_REQUIRES(\n+          ctx, input.dims() == 4,\n+          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\n+                                  \"supports 4D tensors only.\"));\n+\n       const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);\n+      size_t depth = input_min_vec.NumElements();\n       float* input_min_vec_data = (float*)const_cast<void*>(\n           static_cast<const void*>(input_min_vec.flat<float>().data()));\n+\n       const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);\n+      OP_REQUIRES(\n+          ctx, input_max_vec.NumElements() == depth,\n+          errors::InvalidArgument(\"input_max has incorrect size, expected \",\n+                                  depth, \" was \", input_max_vec.NumElements()));\n       float* input_max_vec_data = (float*)const_cast<void*>(\n           static_cast<const void*>(input_max_vec.flat<float>().data()));\n \n       const Tensor& input_requested_min = ctx->input(this->kRequestMinIndex);\n+      OP_REQUIRES(\n+          ctx, input_requested_min.NumElements() == 1,\n+          errors::InvalidArgument(\"requested_output_min must be a scalar\"));\n       const float input_requested_min_float =\n           input_requested_min.flat<float>()(0);\n+\n       const Tensor& input_requested_max = ctx->input(this->kRequestMaxIndex);\n+      OP_REQUIRES(\n+          ctx, input_requested_min.NumElements() == 1,\n+          errors::InvalidArgument(\"requested_output_max must be a scalar\"));\n       const float input_requested_max_float =\n           input_requested_max.flat<float>()(0);\n \n-      size_t depth = input_min_vec.NumElements();\n-      OP_REQUIRES(\n-          ctx, input.dims() == 4,\n-          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\n-                                  \"supports 4D tensors only.\"));\n-      OP_REQUIRES(\n-          ctx, input_min_vec.dim_size(0) == depth,\n-          errors::InvalidArgument(\"input_min has incorrect size, expected \",\n-                                  depth, \" was \", input_min_vec.dim_size(0)));\n-      OP_REQUIRES(\n-          ctx, input_max_vec.dim_size(0) == depth,\n-          errors::InvalidArgument(\"input_max has incorrect size, expected \",\n-                                  depth, \" was \", input_max_vec.dim_size(0)));\n-\n-      if (out_type_ == DT_QINT8) DCHECK(input_requested_min_float < 0.0f);\n+      if (out_type_ == DT_QINT8) {\n+        OP_REQUIRES(ctx, input_requested_min_float < 0.0f,\n+                    errors::InvalidArgument(\n+                        \"If out_type is QINT8, requested_output_max must be \"\n+                        \"non negative, got \",\n+                        input_requested_min_float));\n+      }\n \n       const float factor = (out_type_ == DT_QINT8) ? 127.0f : 255.0f;\n       const float requested_min_max ="
    },
    {
      "index":21,
      "vuln_id":"GHSA-2p9q-h29j-3f5v",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7'}",
      "dataset":"osv",
      "summary":"Missing validation causes `TensorSummaryV2` to crash ### Impact\nThe implementation of [`tf.raw_ops.TensorSummaryV2`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array('test'),\n  tensor=np.array(3),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))\n```\n\nThe code assumes `axis` is a scalar but there is no validation for this.\n\n```cc\n    const Tensor& serialized_summary_metadata_tensor = c->input(2);\n    \/\/ ...\n    ParseFromTString(serialized_summary_metadata_tensor.scalar<tstring>()(),\n                     v->mutable_metadata());\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University.",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "commit_sha":"290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "patch":"SINGLE",
      "chain_ord":"['290bb05c80c327ed74fae1d089f1001b1e2a4ef7']",
      "before_first_fix_commit":"{'263ad6ad211921b34c5fa5c3460e177d855d1101'}",
      "last_fix_commit":"290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/28\/2022, 18:02:25",
      "message":"Fix tf.raw_ops.TensorSummaryV2 vulnerability with invalid serialized_summary_metadata.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445197183",
      "author":"Alan Liu",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'tensorflow\/core\/kernels\/summary_tensor_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7\/tensorflow%2Fcore%2Fkernels%2Fsummary_tensor_op.cc', 'patch': '@@ -36,6 +36,10 @@ class SummaryTensorOpV2 : public OpKernel {\\n                 errors::InvalidArgument(\"tag must be scalar\"));\\n     const Tensor& tensor = c->input(1);\\n     const Tensor& serialized_summary_metadata_tensor = c->input(2);\\n+    OP_REQUIRES(\\n+        c,\\n+        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\\n+        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\\n \\n     Summary s;\\n     Summary::Value* v = s.add_value();'}}",
      "message_norm":"fix tf.raw_ops.tensorsummaryv2 vulnerability with invalid serialized_summary_metadata.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445197183",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('serialized_summary_metadata', 'SECWORD', ''), ('445197183', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/summary_tensor_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 290bb05c80c327ed74fae1d089f1001b1e2a4ef7 Mon Sep 17 00:00:00 2001\nFrom: Alan Liu <liualan@google.com>\nDate: Thu, 28 Apr 2022 11:02:25 -0700\nSubject: [PATCH] Fix tf.raw_ops.TensorSummaryV2 vulnerability with invalid\n serialized_summary_metadata.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445197183\n---\n tensorflow\/core\/kernels\/summary_tensor_op.cc | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/summary_tensor_op.cc b\/tensorflow\/core\/kernels\/summary_tensor_op.cc\nindex e367045b02ab48..730ef6f38e5d62 100644\n--- a\/tensorflow\/core\/kernels\/summary_tensor_op.cc\n+++ b\/tensorflow\/core\/kernels\/summary_tensor_op.cc\n@@ -36,6 +36,10 @@ class SummaryTensorOpV2 : public OpKernel {\n                 errors::InvalidArgument(\"tag must be scalar\"));\n     const Tensor& tensor = c->input(1);\n     const Tensor& serialized_summary_metadata_tensor = c->input(2);\n+    OP_REQUIRES(\n+        c,\n+        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\n+        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\n \n     Summary s;\n     Summary::Value* v = s.add_value();",
      "code_diff":"@@ -36,6 +36,10 @@ class SummaryTensorOpV2 : public OpKernel {\n                 errors::InvalidArgument(\"tag must be scalar\"));\n     const Tensor& tensor = c->input(1);\n     const Tensor& serialized_summary_metadata_tensor = c->input(2);\n+    OP_REQUIRES(\n+        c,\n+        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\n+        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\n \n     Summary s;\n     Summary::Value* v = s.add_value();"
    },
    {
      "index":22,
      "vuln_id":"GHSA-hm37-9xh2-q499",
      "cwe_id":"{'CWE-209'}",
      "score":7.7,
      "chain":"{'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/d5b53b4b7e76c5b666fc657019dbf864fb04076c', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/274447f91b4037b7050ae634879b657554523b39'}",
      "dataset":"osv",
      "summary":"Possible leak of key's raw field if declared length is incorrect ### Impact\nIf a field of a key is shorter than it is declared to be, the parser raises an error with a message containing the raw field value. An attacker able to modify the declared length of a key's sensitive field can thus expose the raw value of that field.\n\n### Patches\nUpgrade to version 0.0.6, which no longer includes the raw field value in the error message.\n\n### Workarounds\nN\/A\n\n### References\nN\/A\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [openssh_key_parser](https:\/\/github.com\/scottcwang\/openssh_key_parser)",
      "published_date":"2022-07-06",
      "chain_len":3,
      "project":"https:\/\/github.com\/scottcwang\/openssh_key_parser",
      "commit_href":"https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/d5b53b4b7e76c5b666fc657019dbf864fb04076c",
      "commit_sha":"d5b53b4b7e76c5b666fc657019dbf864fb04076c",
      "patch":"MULTI",
      "chain_ord":"['26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'd5b53b4b7e76c5b666fc657019dbf864fb04076c', '274447f91b4037b7050ae634879b657554523b39']",
      "before_first_fix_commit":"{'ae4d131d1cd8fe06325bfd6b749305aca60873bf', '69fe5b7addc21d3f39626ae93c6961811aea9d4c'}",
      "last_fix_commit":"274447f91b4037b7050ae634879b657554523b39",
      "chain_ord_pos":2.0,
      "commit_datetime":"06\/22\/2022, 14:59:49",
      "message":"Improved error handling to prevent unhandled exceptions in calling code.",
      "author":"Michael Doyle",
      "comments":null,
      "stats":"{'additions': 95, 'deletions': 86, 'total': 181}",
      "files":"{'openssh_key\/private_key_list.py': {'additions': 95, 'deletions': 86, 'changes': 181, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/raw\/d5b53b4b7e76c5b666fc657019dbf864fb04076c\/openssh_key%2Fprivate_key_list.py', 'patch': '@@ -221,118 +221,127 @@ def from_bytes(\\n \\n         Raises:\\n             ValueError: The provided byte string is not an ``openssh-key-v1``\\n-                key list or the declared key count is negative.\\n+                key list, when the declared key count is negative, or when an\\n+                EOF is found while parsing the key.\\n+\\n             UserWarning: The check numbers in the decrypted private byte string\\n                 do not match (likely due to an incorrect passphrase), the key\\n                 type or parameter values of a private key do not match that of\\n                 the corresponding public key in the list, or the padding bytes\\n                 at the end of the decrypted private byte string are not as\\n                 expected.\\n         \"\"\"\\n-        byte_stream = PascalStyleByteStream(byte_string)\\n+        try:\\n+            byte_stream = PascalStyleByteStream(byte_string)\\n \\n-        header = byte_stream.read_from_format_instructions_dict(\\n-            cls.HEADER_FORMAT_INSTRUCTIONS_DICT\\n-        )\\n+            header = byte_stream.read_from_format_instructions_dict(\\n+                cls.HEADER_FORMAT_INSTRUCTIONS_DICT\\n+            )\\n+\\n+            if header[\\'auth_magic\\'] != b\\'openssh-key-v1\\\\x00\\':\\n+                raise ValueError(\\'Not an openssh-key-v1 key\\')\\n \\n-        if header[\\'auth_magic\\'] != b\\'openssh-key-v1\\\\x00\\':\\n-            raise ValueError(\\'Not an openssh-key-v1 key\\')\\n+            num_keys = header[\\'num_keys\\']\\n \\n-        num_keys = header[\\'num_keys\\']\\n+            if num_keys < 0:\\n+                raise ValueError(\\'Cannot parse negative number of keys\\')\\n \\n-        if num_keys < 0:\\n-            raise ValueError(\\'Cannot parse negative number of keys\\')\\n+            public_key_list = []\\n+            for i in range(num_keys):\\n+                public_key_bytes = byte_stream.read_from_format_instruction(\\n+                    PascalStyleFormatInstruction.BYTES\\n+                )\\n+                public_key_list.append(\\n+                    PublicKey.from_bytes(public_key_bytes)\\n+                )\\n \\n-        public_key_list = []\\n-        for i in range(num_keys):\\n-            public_key_bytes = byte_stream.read_from_format_instruction(\\n+            cipher_bytes = byte_stream.read_from_format_instruction(\\n                 PascalStyleFormatInstruction.BYTES\\n             )\\n-            public_key_list.append(\\n-                PublicKey.from_bytes(public_key_bytes)\\n-            )\\n \\n-        cipher_bytes = byte_stream.read_from_format_instruction(\\n-            PascalStyleFormatInstruction.BYTES\\n-        )\\n-\\n-        kdf_class = get_kdf_options_class(header[\\'kdf\\'])\\n-        kdf_options = kdf_class(\\n-            PascalStyleByteStream(\\n-                header[\\'kdf_options\\']\\n-            ).read_from_format_instructions_dict(\\n-                kdf_class.FORMAT_INSTRUCTIONS_DICT\\n+            kdf_class = get_kdf_options_class(header[\\'kdf\\'])\\n+            kdf_options = kdf_class(\\n+                PascalStyleByteStream(\\n+                    header[\\'kdf_options\\']\\n+                ).read_from_format_instructions_dict(\\n+                    kdf_class.FORMAT_INSTRUCTIONS_DICT\\n+                )\\n             )\\n-        )\\n \\n-        cipher_class = get_cipher_class(header[\\'cipher\\'])\\n+            cipher_class = get_cipher_class(header[\\'cipher\\'])\\n \\n-        if kdf_class == NoneKDFOptions:\\n-            passphrase = \\'\\'\\n-        elif passphrase is None:\\n-            passphrase = getpass.getpass(\\'Key passphrase: \\')\\n+            if kdf_class == NoneKDFOptions:\\n+                passphrase = \\'\\'\\n+            elif passphrase is None:\\n+                passphrase = getpass.getpass(\\'Key passphrase: \\')\\n \\n-        if issubclass(cipher_class, ConfidentialityIntegrityCipher):\\n-            cipher_bytes += byte_stream.read_fixed_bytes(\\n-                cipher_class.TAG_LENGTH\\n-            )\\n-\\n-        decipher_bytes = cipher_class.decrypt(\\n-            kdf_class(kdf_options),\\n-            passphrase,\\n-            cipher_bytes\\n-        )\\n-\\n-        decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\\n+            if issubclass(cipher_class, ConfidentialityIntegrityCipher):\\n+                cipher_bytes += byte_stream.read_fixed_bytes(\\n+                    cipher_class.TAG_LENGTH\\n+                )\\n \\n-        decipher_bytes_header = \\\\\\n-            decipher_byte_stream.read_from_format_instructions_dict(\\n-                cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\\n+            decipher_bytes = cipher_class.decrypt(\\n+                kdf_class(kdf_options),\\n+                passphrase,\\n+                cipher_bytes\\n             )\\n \\n-        if decipher_bytes_header[\\'check_int_1\\'] \\\\\\n-                != decipher_bytes_header[\\'check_int_2\\']:\\n-            warnings.warn(\\'Cipher header check numbers do not match\\')\\n+            decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\\n \\n-        initlist = []\\n-        for i in range(num_keys):\\n-            initlist.append(\\n-                PublicPrivateKeyPair(\\n-                    public_key_list[i],\\n-                    PrivateKey.from_byte_stream(decipher_byte_stream)\\n-                )\\n-            )\\n-            if initlist[i].public.header[\\'key_type\\'] \\\\\\n-                    != initlist[i].private.header[\\'key_type\\']:\\n-                warnings.warn(\\n-                    f\\'Inconsistency between private and public \\'\\n-                    f\\'key types for key {i}\\'\\n+            decipher_bytes_header = \\\\\\n+                decipher_byte_stream.read_from_format_instructions_dict(\\n+                    cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\\n                 )\\n-            if not all(\\n-                (\\n-                    initlist[i].public.params[k] ==\\n-                    initlist[i].private.params[k]\\n-                ) for k in (\\n-                    initlist[i].public.params.keys() &\\n-                    initlist[i].private.params.keys()\\n+\\n+            if decipher_bytes_header[\\'check_int_1\\'] \\\\\\n+                    != decipher_bytes_header[\\'check_int_2\\']:\\n+                warnings.warn(\\'Cipher header check numbers do not match\\')\\n+\\n+            initlist = []\\n+            for i in range(num_keys):\\n+                initlist.append(\\n+                    PublicPrivateKeyPair(\\n+                        public_key_list[i],\\n+                        PrivateKey.from_byte_stream(decipher_byte_stream)\\n+                    )\\n                 )\\n+                if initlist[i].public.header[\\'key_type\\'] \\\\\\n+                        != initlist[i].private.header[\\'key_type\\']:\\n+                    warnings.warn(\\n+                        f\\'Inconsistency between private and public \\'\\n+                        f\\'key types for key {i}\\'\\n+                    )\\n+                if not all(\\n+                    (\\n+                        initlist[i].public.params[k] ==\\n+                        initlist[i].private.params[k]\\n+                    ) for k in (\\n+                        initlist[i].public.params.keys() &\\n+                        initlist[i].private.params.keys()\\n+                    )\\n+                ):\\n+                    warnings.warn(\\n+                        f\\'Inconsistency between private and public \\'\\n+                        f\\'values for key {i}\\'\\n+                    )\\n+\\n+            decipher_padding = decipher_byte_stream.read()\\n+\\n+            if (\\n+                len(decipher_byte_stream.getvalue()) %\\n+                    cipher_class.BLOCK_SIZE != 0\\n+            ) or not (\\n+                bytes(\\n+                    range(1, 1 + cipher_class.BLOCK_SIZE)\\n+                ).startswith(decipher_padding)\\n             ):\\n-                warnings.warn(\\n-                    f\\'Inconsistency between private and public \\'\\n-                    f\\'values for key {i}\\'\\n-                )\\n-\\n-        decipher_padding = decipher_byte_stream.read()\\n-\\n-        if (\\n-            len(decipher_byte_stream.getvalue()) %\\n-                cipher_class.BLOCK_SIZE != 0\\n-        ) or not (\\n-            bytes(\\n-                range(1, 1 + cipher_class.BLOCK_SIZE)\\n-            ).startswith(decipher_padding)\\n-        ):\\n-            warnings.warn(\\'Incorrect padding at end of ciphertext\\')\\n+                warnings.warn(\\'Incorrect padding at end of ciphertext\\')\\n+        except ValueError as e:\\n+            raise e\\n+        except EOFError as e:\\n+            raise ValueError(\\'Premature EOF detected while parsing key.\\')\\n+        except e:\\n+            raise ValueError(\\'Unexpected error condition reached.\\')\\n \\n         return cls(\\n             initlist,'}}",
      "message_norm":"improved error handling to prevent unhandled exceptions in calling code.",
      "language":"en",
      "entities":"[('improved', 'ACTION', ''), ('error handling', 'SECWORD', ''), ('prevent', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['openssh_key\/private_key_list.py'])",
      "num_files":1.0,
      "patch_content":"From d5b53b4b7e76c5b666fc657019dbf864fb04076c Mon Sep 17 00:00:00 2001\nFrom: Michael Doyle <mike@arnica.io>\nDate: Wed, 22 Jun 2022 10:59:49 -0400\nSubject: [PATCH] Improved error handling to prevent unhandled exceptions in\n calling code.\n\n---\n openssh_key\/private_key_list.py | 181 +++++++++++++++++---------------\n 1 file changed, 95 insertions(+), 86 deletions(-)\n\ndiff --git a\/openssh_key\/private_key_list.py b\/openssh_key\/private_key_list.py\nindex 72613ae..0899378 100644\n--- a\/openssh_key\/private_key_list.py\n+++ b\/openssh_key\/private_key_list.py\n@@ -221,7 +221,9 @@ def from_bytes(\n \n         Raises:\n             ValueError: The provided byte string is not an ``openssh-key-v1``\n-                key list or the declared key count is negative.\n+                key list, when the declared key count is negative, or when an\n+                EOF is found while parsing the key.\n+\n             UserWarning: The check numbers in the decrypted private byte string\n                 do not match (likely due to an incorrect passphrase), the key\n                 type or parameter values of a private key do not match that of\n@@ -229,110 +231,117 @@ def from_bytes(\n                 at the end of the decrypted private byte string are not as\n                 expected.\n         \"\"\"\n-        byte_stream = PascalStyleByteStream(byte_string)\n+        try:\n+            byte_stream = PascalStyleByteStream(byte_string)\n \n-        header = byte_stream.read_from_format_instructions_dict(\n-            cls.HEADER_FORMAT_INSTRUCTIONS_DICT\n-        )\n+            header = byte_stream.read_from_format_instructions_dict(\n+                cls.HEADER_FORMAT_INSTRUCTIONS_DICT\n+            )\n+\n+            if header['auth_magic'] != b'openssh-key-v1\\x00':\n+                raise ValueError('Not an openssh-key-v1 key')\n \n-        if header['auth_magic'] != b'openssh-key-v1\\x00':\n-            raise ValueError('Not an openssh-key-v1 key')\n+            num_keys = header['num_keys']\n \n-        num_keys = header['num_keys']\n+            if num_keys < 0:\n+                raise ValueError('Cannot parse negative number of keys')\n \n-        if num_keys < 0:\n-            raise ValueError('Cannot parse negative number of keys')\n+            public_key_list = []\n+            for i in range(num_keys):\n+                public_key_bytes = byte_stream.read_from_format_instruction(\n+                    PascalStyleFormatInstruction.BYTES\n+                )\n+                public_key_list.append(\n+                    PublicKey.from_bytes(public_key_bytes)\n+                )\n \n-        public_key_list = []\n-        for i in range(num_keys):\n-            public_key_bytes = byte_stream.read_from_format_instruction(\n+            cipher_bytes = byte_stream.read_from_format_instruction(\n                 PascalStyleFormatInstruction.BYTES\n             )\n-            public_key_list.append(\n-                PublicKey.from_bytes(public_key_bytes)\n-            )\n \n-        cipher_bytes = byte_stream.read_from_format_instruction(\n-            PascalStyleFormatInstruction.BYTES\n-        )\n-\n-        kdf_class = get_kdf_options_class(header['kdf'])\n-        kdf_options = kdf_class(\n-            PascalStyleByteStream(\n-                header['kdf_options']\n-            ).read_from_format_instructions_dict(\n-                kdf_class.FORMAT_INSTRUCTIONS_DICT\n+            kdf_class = get_kdf_options_class(header['kdf'])\n+            kdf_options = kdf_class(\n+                PascalStyleByteStream(\n+                    header['kdf_options']\n+                ).read_from_format_instructions_dict(\n+                    kdf_class.FORMAT_INSTRUCTIONS_DICT\n+                )\n             )\n-        )\n \n-        cipher_class = get_cipher_class(header['cipher'])\n+            cipher_class = get_cipher_class(header['cipher'])\n \n-        if kdf_class == NoneKDFOptions:\n-            passphrase = ''\n-        elif passphrase is None:\n-            passphrase = getpass.getpass('Key passphrase: ')\n+            if kdf_class == NoneKDFOptions:\n+                passphrase = ''\n+            elif passphrase is None:\n+                passphrase = getpass.getpass('Key passphrase: ')\n \n-        if issubclass(cipher_class, ConfidentialityIntegrityCipher):\n-            cipher_bytes += byte_stream.read_fixed_bytes(\n-                cipher_class.TAG_LENGTH\n-            )\n-\n-        decipher_bytes = cipher_class.decrypt(\n-            kdf_class(kdf_options),\n-            passphrase,\n-            cipher_bytes\n-        )\n-\n-        decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\n+            if issubclass(cipher_class, ConfidentialityIntegrityCipher):\n+                cipher_bytes += byte_stream.read_fixed_bytes(\n+                    cipher_class.TAG_LENGTH\n+                )\n \n-        decipher_bytes_header = \\\n-            decipher_byte_stream.read_from_format_instructions_dict(\n-                cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\n+            decipher_bytes = cipher_class.decrypt(\n+                kdf_class(kdf_options),\n+                passphrase,\n+                cipher_bytes\n             )\n \n-        if decipher_bytes_header['check_int_1'] \\\n-                != decipher_bytes_header['check_int_2']:\n-            warnings.warn('Cipher header check numbers do not match')\n+            decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\n \n-        initlist = []\n-        for i in range(num_keys):\n-            initlist.append(\n-                PublicPrivateKeyPair(\n-                    public_key_list[i],\n-                    PrivateKey.from_byte_stream(decipher_byte_stream)\n-                )\n-            )\n-            if initlist[i].public.header['key_type'] \\\n-                    != initlist[i].private.header['key_type']:\n-                warnings.warn(\n-                    f'Inconsistency between private and public '\n-                    f'key types for key {i}'\n+            decipher_bytes_header = \\\n+                decipher_byte_stream.read_from_format_instructions_dict(\n+                    cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\n                 )\n-            if not all(\n-                (\n-                    initlist[i].public.params[k] ==\n-                    initlist[i].private.params[k]\n-                ) for k in (\n-                    initlist[i].public.params.keys() &\n-                    initlist[i].private.params.keys()\n+\n+            if decipher_bytes_header['check_int_1'] \\\n+                    != decipher_bytes_header['check_int_2']:\n+                warnings.warn('Cipher header check numbers do not match')\n+\n+            initlist = []\n+            for i in range(num_keys):\n+                initlist.append(\n+                    PublicPrivateKeyPair(\n+                        public_key_list[i],\n+                        PrivateKey.from_byte_stream(decipher_byte_stream)\n+                    )\n                 )\n+                if initlist[i].public.header['key_type'] \\\n+                        != initlist[i].private.header['key_type']:\n+                    warnings.warn(\n+                        f'Inconsistency between private and public '\n+                        f'key types for key {i}'\n+                    )\n+                if not all(\n+                    (\n+                        initlist[i].public.params[k] ==\n+                        initlist[i].private.params[k]\n+                    ) for k in (\n+                        initlist[i].public.params.keys() &\n+                        initlist[i].private.params.keys()\n+                    )\n+                ):\n+                    warnings.warn(\n+                        f'Inconsistency between private and public '\n+                        f'values for key {i}'\n+                    )\n+\n+            decipher_padding = decipher_byte_stream.read()\n+\n+            if (\n+                len(decipher_byte_stream.getvalue()) %\n+                    cipher_class.BLOCK_SIZE != 0\n+            ) or not (\n+                bytes(\n+                    range(1, 1 + cipher_class.BLOCK_SIZE)\n+                ).startswith(decipher_padding)\n             ):\n-                warnings.warn(\n-                    f'Inconsistency between private and public '\n-                    f'values for key {i}'\n-                )\n-\n-        decipher_padding = decipher_byte_stream.read()\n-\n-        if (\n-            len(decipher_byte_stream.getvalue()) %\n-                cipher_class.BLOCK_SIZE != 0\n-        ) or not (\n-            bytes(\n-                range(1, 1 + cipher_class.BLOCK_SIZE)\n-            ).startswith(decipher_padding)\n-        ):\n-            warnings.warn('Incorrect padding at end of ciphertext')\n+                warnings.warn('Incorrect padding at end of ciphertext')\n+        except ValueError as e:\n+            raise e\n+        except EOFError as e:\n+            raise ValueError('Premature EOF detected while parsing key.')\n+        except e:\n+            raise ValueError('Unexpected error condition reached.')\n \n         return cls(\n             initlist,",
      "code_diff":"@@ -221,7 +221,9 @@ def from_bytes(\n \n         Raises:\n             ValueError: The provided byte string is not an ``openssh-key-v1``\n-                key list or the declared key count is negative.\n+                key list, when the declared key count is negative, or when an\n+                EOF is found while parsing the key.\n+\n             UserWarning: The check numbers in the decrypted private byte string\n                 do not match (likely due to an incorrect passphrase), the key\n                 type or parameter values of a private key do not match that of\n@@ -229,110 +231,117 @@ def from_bytes(\n                 at the end of the decrypted private byte string are not as\n                 expected.\n         \"\"\"\n-        byte_stream = PascalStyleByteStream(byte_string)\n+        try:\n+            byte_stream = PascalStyleByteStream(byte_string)\n \n-        header = byte_stream.read_from_format_instructions_dict(\n-            cls.HEADER_FORMAT_INSTRUCTIONS_DICT\n-        )\n+            header = byte_stream.read_from_format_instructions_dict(\n+                cls.HEADER_FORMAT_INSTRUCTIONS_DICT\n+            )\n+\n+            if header['auth_magic'] != b'openssh-key-v1\\x00':\n+                raise ValueError('Not an openssh-key-v1 key')\n \n-        if header['auth_magic'] != b'openssh-key-v1\\x00':\n-            raise ValueError('Not an openssh-key-v1 key')\n+            num_keys = header['num_keys']\n \n-        num_keys = header['num_keys']\n+            if num_keys < 0:\n+                raise ValueError('Cannot parse negative number of keys')\n \n-        if num_keys < 0:\n-            raise ValueError('Cannot parse negative number of keys')\n+            public_key_list = []\n+            for i in range(num_keys):\n+                public_key_bytes = byte_stream.read_from_format_instruction(\n+                    PascalStyleFormatInstruction.BYTES\n+                )\n+                public_key_list.append(\n+                    PublicKey.from_bytes(public_key_bytes)\n+                )\n \n-        public_key_list = []\n-        for i in range(num_keys):\n-            public_key_bytes = byte_stream.read_from_format_instruction(\n+            cipher_bytes = byte_stream.read_from_format_instruction(\n                 PascalStyleFormatInstruction.BYTES\n             )\n-            public_key_list.append(\n-                PublicKey.from_bytes(public_key_bytes)\n-            )\n \n-        cipher_bytes = byte_stream.read_from_format_instruction(\n-            PascalStyleFormatInstruction.BYTES\n-        )\n-\n-        kdf_class = get_kdf_options_class(header['kdf'])\n-        kdf_options = kdf_class(\n-            PascalStyleByteStream(\n-                header['kdf_options']\n-            ).read_from_format_instructions_dict(\n-                kdf_class.FORMAT_INSTRUCTIONS_DICT\n+            kdf_class = get_kdf_options_class(header['kdf'])\n+            kdf_options = kdf_class(\n+                PascalStyleByteStream(\n+                    header['kdf_options']\n+                ).read_from_format_instructions_dict(\n+                    kdf_class.FORMAT_INSTRUCTIONS_DICT\n+                )\n             )\n-        )\n \n-        cipher_class = get_cipher_class(header['cipher'])\n+            cipher_class = get_cipher_class(header['cipher'])\n \n-        if kdf_class == NoneKDFOptions:\n-            passphrase = ''\n-        elif passphrase is None:\n-            passphrase = getpass.getpass('Key passphrase: ')\n+            if kdf_class == NoneKDFOptions:\n+                passphrase = ''\n+            elif passphrase is None:\n+                passphrase = getpass.getpass('Key passphrase: ')\n \n-        if issubclass(cipher_class, ConfidentialityIntegrityCipher):\n-            cipher_bytes += byte_stream.read_fixed_bytes(\n-                cipher_class.TAG_LENGTH\n-            )\n-\n-        decipher_bytes = cipher_class.decrypt(\n-            kdf_class(kdf_options),\n-            passphrase,\n-            cipher_bytes\n-        )\n-\n-        decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\n+            if issubclass(cipher_class, ConfidentialityIntegrityCipher):\n+                cipher_bytes += byte_stream.read_fixed_bytes(\n+                    cipher_class.TAG_LENGTH\n+                )\n \n-        decipher_bytes_header = \\\n-            decipher_byte_stream.read_from_format_instructions_dict(\n-                cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\n+            decipher_bytes = cipher_class.decrypt(\n+                kdf_class(kdf_options),\n+                passphrase,\n+                cipher_bytes\n             )\n \n-        if decipher_bytes_header['check_int_1'] \\\n-                != decipher_bytes_header['check_int_2']:\n-            warnings.warn('Cipher header check numbers do not match')\n+            decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\n \n-        initlist = []\n-        for i in range(num_keys):\n-            initlist.append(\n-                PublicPrivateKeyPair(\n-                    public_key_list[i],\n-                    PrivateKey.from_byte_stream(decipher_byte_stream)\n-                )\n-            )\n-            if initlist[i].public.header['key_type'] \\\n-                    != initlist[i].private.header['key_type']:\n-                warnings.warn(\n-                    f'Inconsistency between private and public '\n-                    f'key types for key {i}'\n+            decipher_bytes_header = \\\n+                decipher_byte_stream.read_from_format_instructions_dict(\n+                    cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\n                 )\n-            if not all(\n-                (\n-                    initlist[i].public.params[k] ==\n-                    initlist[i].private.params[k]\n-                ) for k in (\n-                    initlist[i].public.params.keys() &\n-                    initlist[i].private.params.keys()\n+\n+            if decipher_bytes_header['check_int_1'] \\\n+                    != decipher_bytes_header['check_int_2']:\n+                warnings.warn('Cipher header check numbers do not match')\n+\n+            initlist = []\n+            for i in range(num_keys):\n+                initlist.append(\n+                    PublicPrivateKeyPair(\n+                        public_key_list[i],\n+                        PrivateKey.from_byte_stream(decipher_byte_stream)\n+                    )\n                 )\n+                if initlist[i].public.header['key_type'] \\\n+                        != initlist[i].private.header['key_type']:\n+                    warnings.warn(\n+                        f'Inconsistency between private and public '\n+                        f'key types for key {i}'\n+                    )\n+                if not all(\n+                    (\n+                        initlist[i].public.params[k] ==\n+                        initlist[i].private.params[k]\n+                    ) for k in (\n+                        initlist[i].public.params.keys() &\n+                        initlist[i].private.params.keys()\n+                    )\n+                ):\n+                    warnings.warn(\n+                        f'Inconsistency between private and public '\n+                        f'values for key {i}'\n+                    )\n+\n+            decipher_padding = decipher_byte_stream.read()\n+\n+            if (\n+                len(decipher_byte_stream.getvalue()) %\n+                    cipher_class.BLOCK_SIZE != 0\n+            ) or not (\n+                bytes(\n+                    range(1, 1 + cipher_class.BLOCK_SIZE)\n+                ).startswith(decipher_padding)\n             ):\n-                warnings.warn(\n-                    f'Inconsistency between private and public '\n-                    f'values for key {i}'\n-                )\n-\n-        decipher_padding = decipher_byte_stream.read()\n-\n-        if (\n-            len(decipher_byte_stream.getvalue()) %\n-                cipher_class.BLOCK_SIZE != 0\n-        ) or not (\n-            bytes(\n-                range(1, 1 + cipher_class.BLOCK_SIZE)\n-            ).startswith(decipher_padding)\n-        ):\n-            warnings.warn('Incorrect padding at end of ciphertext')\n+                warnings.warn('Incorrect padding at end of ciphertext')\n+        except ValueError as e:\n+            raise e\n+        except EOFError as e:\n+            raise ValueError('Premature EOF detected while parsing key.')\n+        except e:\n+            raise ValueError('Unexpected error condition reached.')\n \n         return cls(\n             initlist,"
    },
    {
      "index":23,
      "vuln_id":"GHSA-fcxw-hhxq-48wx",
      "cwe_id":"{'CWE-200'}",
      "score":3.3,
      "chain":"{'https:\/\/github.com\/jenkinsci\/git-client-plugin\/commit\/75ea3fe05650fc6ca09046a72493e2b3f066fb98'}",
      "dataset":"osv",
      "summary":"Insecure temporary file usage in Jenkins Git Client Plugin Jenkins Git Client Plugin 2.4.2 and earlier creates temporary file with insecure permissions resulting in information disclosure",
      "published_date":"2022-05-17",
      "chain_len":1,
      "project":"https:\/\/github.com\/jenkinsci\/git-client-plugin",
      "commit_href":"https:\/\/github.com\/jenkinsci\/git-client-plugin\/commit\/75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "commit_sha":"75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "patch":"SINGLE",
      "chain_ord":"['75ea3fe05650fc6ca09046a72493e2b3f066fb98']",
      "before_first_fix_commit":"{'716e3ff56074c018c76cb35826269b976540e7e7'}",
      "last_fix_commit":"75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/13\/2017, 04:38:54",
      "message":"[Fix SECURITY-445] better protect temporary files\n\nTemporary files were previously written to the system temporary directory\nwith default permissions.  A malicious actor could have captured sensitive\ninformation by reading files from the temporary directory.  The temporary\nfiles typically are only on the file system for the duration of a single\ncommand line git invocation, but cloning a large git repo could require\nan extended time with those sensitive files in the temporary directory.\n\nThis change sets permissions on the temporary files to be readable only by\nthe file owner. If a workspace is available, a temporary directory adjacent\nto the workspace is used instead of the system temporary directory.",
      "author":"Mark Waite",
      "comments":null,
      "stats":"{'additions': 42, 'deletions': 9, 'total': 51}",
      "files":"{'src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java': {'additions': 42, 'deletions': 9, 'changes': 51, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/git-client-plugin\/raw\/75ea3fe05650fc6ca09046a72493e2b3f066fb98\/src%2Fmain%2Fjava%2Forg%2Fjenkinsci%2Fplugins%2Fgitclient%2FCliGitAPIImpl.java', 'patch': '@@ -42,6 +42,11 @@\\n import java.net.URISyntaxException;\\n import java.nio.charset.Charset;\\n import java.nio.file.Files;\\n+import java.nio.file.Path;\\n+import java.nio.file.Paths;\\n+import java.nio.file.attribute.FileAttribute;\\n+import java.nio.file.attribute.PosixFilePermission;\\n+import java.nio.file.attribute.PosixFilePermissions;\\n import java.text.MessageFormat;\\n import java.util.ArrayList;\\n import java.util.Arrays;\\n@@ -1411,6 +1416,34 @@ public void addNote(String note, String namespace ) throws GitException, Interru\\n         createNote(note,namespace,\"add\");\\n     }\\n \\n+    private File createTempFileInSystemDir(String prefix, String suffix) throws IOException {\\n+        if (isWindows()) {\\n+            return Files.createTempFile(prefix, suffix).toFile();\\n+        }\\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\\n+        return Files.createTempFile(prefix, suffix, fileAttribute).toFile();\\n+    }\\n+\\n+    private File createTempFile(String prefix, String suffix) throws IOException {\\n+        if (workspace == null) {\\n+            return createTempFileInSystemDir(prefix, suffix);\\n+        }\\n+        File workspaceTmp = new File(workspace.getAbsolutePath() + \"@tmp\");\\n+        if (!workspaceTmp.isDirectory() && !workspaceTmp.mkdirs()) {\\n+            if (!workspaceTmp.isDirectory()) {\\n+                return createTempFileInSystemDir(prefix, suffix);\\n+            }\\n+        }\\n+        Path tmpPath = Paths.get(workspaceTmp.getAbsolutePath());\\n+        if (isWindows()) {\\n+            return Files.createTempFile(tmpPath, prefix, suffix).toFile();\\n+        }\\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\\n+        return Files.createTempFile(tmpPath, prefix, suffix, fileAttribute).toFile();\\n+    }\\n+\\n     private void deleteTempFile(File tempFile) {\\n         if (tempFile != null && !tempFile.delete() && tempFile.exists()) {\\n             listener.getLogger().println(\"[WARNING] temp file \" + tempFile + \" not deleted\");\\n@@ -1420,7 +1453,7 @@ private void deleteTempFile(File tempFile) {\\n     private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {\\n         File msg = null;\\n         try {\\n-            msg = File.createTempFile(\"git-note\", \"txt\", workspace);\\n+            msg = createTempFile(\"git-note\", \".txt\");\\n             FileUtils.writeStringToFile(msg,note);\\n             launchCommand(\"notes\", \"--ref=\" + namespace, command, \"-F\", msg.getAbsolutePath());\\n         } catch (IOException | GitException e) {\\n@@ -1561,7 +1594,7 @@ private String launchCommandWithCredentials(ArgumentListBuilder args, File workD\\n     }\\n \\n     private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {\\n-        File key = File.createTempFile(\"ssh\", \"key\");\\n+        File key = createTempFile(\"ssh\", \".key\");\\n         try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {\\n             List<String> privateKeys = sshUser.getPrivateKeys();\\n             for (String s : privateKeys) {\\n@@ -1597,7 +1630,7 @@ private String quoteUnixCredentials(String str) {\\n     }\\n \\n     private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\\n-        File ssh = File.createTempFile(\"pass\", \".bat\");\\n+        File ssh = createTempFile(\"pass\", \".bat\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             \/\/ avoid echoing command as part of the password\\n             w.println(\"@echo off\");\\n@@ -1610,7 +1643,7 @@ private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOExcepti\\n     }\\n \\n     private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\\n-        File ssh = File.createTempFile(\"pass\", \".sh\");\\n+        File ssh = createTempFile(\"pass\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             w.println(\"#!\/bin\/sh\");\\n             w.println(\"echo \\'\" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + \"\\'\");\\n@@ -1621,7 +1654,7 @@ private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException\\n \\n     \/* Package protected for testability *\/\\n     File createWindowsBatFile(String userName, String password) throws IOException {\\n-        File askpass = File.createTempFile(\"pass\", \".bat\");\\n+        File askpass = createTempFile(\"pass\", \".bat\");\\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\\n             w.println(\"@set arg=%~1\");\\n             w.println(\"@if (%arg:~0,8%)==(Username) echo \" + escapeWindowsCharsForUnquotedString(userName));\\n@@ -1636,7 +1669,7 @@ private File createWindowsStandardAskpass(StandardUsernamePasswordCredentials cr\\n     }\\n \\n     private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {\\n-        File askpass = File.createTempFile(\"pass\", \".sh\");\\n+        File askpass = createTempFile(\"pass\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\\n             w.println(\"#!\/bin\/sh\");\\n             w.println(\"case \\\\\"$1\\\\\" in\");\\n@@ -1766,7 +1799,7 @@ private File getSSHExeFromGitExeParentDir(String userGitExe) {\\n     }\\n \\n     private File createWindowsGitSSH(File key, String user) throws IOException {\\n-        File ssh = File.createTempFile(\"ssh\", \".bat\");\\n+        File ssh = createTempFile(\"ssh\", \".bat\");\\n \\n         File sshexe = getSSHExecutable();\\n \\n@@ -1779,7 +1812,7 @@ private File createWindowsGitSSH(File key, String user) throws IOException {\\n     }\\n \\n     private File createUnixGitSSH(File key, String user) throws IOException {\\n-        File ssh = File.createTempFile(\"ssh\", \".sh\");\\n+        File ssh = createTempFile(\"ssh\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             w.println(\"#!\/bin\/sh\");\\n             \/\/ ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set\\n@@ -2383,7 +2416,7 @@ public void branch(String name) throws GitException, InterruptedException {\\n     public void commit(String message) throws GitException, InterruptedException {\\n         File f = null;\\n         try {\\n-            f = File.createTempFile(\"gitcommit\", \".txt\");\\n+            f = createTempFile(\"gitcommit\", \".txt\");\\n             try (OutputStream out = Files.newOutputStream(f.toPath())) {\\n                 out.write(message.getBytes(Charset.defaultCharset().toString()));\\n             }'}}",
      "message_norm":"[fix security-445] better protect temporary files\n\ntemporary files were previously written to the system temporary directory\nwith default permissions.  a malicious actor could have captured sensitive\ninformation by reading files from the temporary directory.  the temporary\nfiles typically are only on the file system for the duration of a single\ncommand line git invocation, but cloning a large git repo could require\nan extended time with those sensitive files in the temporary directory.\n\nthis change sets permissions on the temporary files to be readable only by\nthe file owner. if a workspace is available, a temporary directory adjacent\nto the workspace is used instead of the system temporary directory.",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('security-445', 'SECWORD', ''), ('protect', 'SECWORD', ''), ('permissions', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('permissions', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java'])",
      "num_files":1.0,
      "patch_content":"From 75ea3fe05650fc6ca09046a72493e2b3f066fb98 Mon Sep 17 00:00:00 2001\nFrom: Mark Waite <mark.earl.waite@gmail.com>\nDate: Wed, 12 Apr 2017 22:38:54 -0600\nSubject: [PATCH] [Fix SECURITY-445] better protect temporary files\n\nTemporary files were previously written to the system temporary directory\nwith default permissions.  A malicious actor could have captured sensitive\ninformation by reading files from the temporary directory.  The temporary\nfiles typically are only on the file system for the duration of a single\ncommand line git invocation, but cloning a large git repo could require\nan extended time with those sensitive files in the temporary directory.\n\nThis change sets permissions on the temporary files to be readable only by\nthe file owner. If a workspace is available, a temporary directory adjacent\nto the workspace is used instead of the system temporary directory.\n---\n ...\/plugins\/gitclient\/CliGitAPIImpl.java      | 51 +++++++++++++++----\n 1 file changed, 42 insertions(+), 9 deletions(-)\n\ndiff --git a\/src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java b\/src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java\nindex 3994f2a8e1..31e5a72119 100644\n--- a\/src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java\n+++ b\/src\/main\/java\/org\/jenkinsci\/plugins\/gitclient\/CliGitAPIImpl.java\n@@ -42,6 +42,11 @@\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -1411,6 +1416,34 @@ public void addNote(String note, String namespace ) throws GitException, Interru\n         createNote(note,namespace,\"add\");\n     }\n \n+    private File createTempFileInSystemDir(String prefix, String suffix) throws IOException {\n+        if (isWindows()) {\n+            return Files.createTempFile(prefix, suffix).toFile();\n+        }\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\n+        return Files.createTempFile(prefix, suffix, fileAttribute).toFile();\n+    }\n+\n+    private File createTempFile(String prefix, String suffix) throws IOException {\n+        if (workspace == null) {\n+            return createTempFileInSystemDir(prefix, suffix);\n+        }\n+        File workspaceTmp = new File(workspace.getAbsolutePath() + \"@tmp\");\n+        if (!workspaceTmp.isDirectory() && !workspaceTmp.mkdirs()) {\n+            if (!workspaceTmp.isDirectory()) {\n+                return createTempFileInSystemDir(prefix, suffix);\n+            }\n+        }\n+        Path tmpPath = Paths.get(workspaceTmp.getAbsolutePath());\n+        if (isWindows()) {\n+            return Files.createTempFile(tmpPath, prefix, suffix).toFile();\n+        }\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\n+        return Files.createTempFile(tmpPath, prefix, suffix, fileAttribute).toFile();\n+    }\n+\n     private void deleteTempFile(File tempFile) {\n         if (tempFile != null && !tempFile.delete() && tempFile.exists()) {\n             listener.getLogger().println(\"[WARNING] temp file \" + tempFile + \" not deleted\");\n@@ -1420,7 +1453,7 @@ private void deleteTempFile(File tempFile) {\n     private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {\n         File msg = null;\n         try {\n-            msg = File.createTempFile(\"git-note\", \"txt\", workspace);\n+            msg = createTempFile(\"git-note\", \".txt\");\n             FileUtils.writeStringToFile(msg,note);\n             launchCommand(\"notes\", \"--ref=\" + namespace, command, \"-F\", msg.getAbsolutePath());\n         } catch (IOException | GitException e) {\n@@ -1561,7 +1594,7 @@ private String launchCommandWithCredentials(ArgumentListBuilder args, File workD\n     }\n \n     private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {\n-        File key = File.createTempFile(\"ssh\", \"key\");\n+        File key = createTempFile(\"ssh\", \".key\");\n         try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {\n             List<String> privateKeys = sshUser.getPrivateKeys();\n             for (String s : privateKeys) {\n@@ -1597,7 +1630,7 @@ private String quoteUnixCredentials(String str) {\n     }\n \n     private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\n-        File ssh = File.createTempFile(\"pass\", \".bat\");\n+        File ssh = createTempFile(\"pass\", \".bat\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             \/\/ avoid echoing command as part of the password\n             w.println(\"@echo off\");\n@@ -1610,7 +1643,7 @@ private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOExcepti\n     }\n \n     private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\n-        File ssh = File.createTempFile(\"pass\", \".sh\");\n+        File ssh = createTempFile(\"pass\", \".sh\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             w.println(\"echo '\" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + \"'\");\n@@ -1621,7 +1654,7 @@ private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException\n \n     \/* Package protected for testability *\/\n     File createWindowsBatFile(String userName, String password) throws IOException {\n-        File askpass = File.createTempFile(\"pass\", \".bat\");\n+        File askpass = createTempFile(\"pass\", \".bat\");\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\n             w.println(\"@set arg=%~1\");\n             w.println(\"@if (%arg:~0,8%)==(Username) echo \" + escapeWindowsCharsForUnquotedString(userName));\n@@ -1636,7 +1669,7 @@ private File createWindowsStandardAskpass(StandardUsernamePasswordCredentials cr\n     }\n \n     private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {\n-        File askpass = File.createTempFile(\"pass\", \".sh\");\n+        File askpass = createTempFile(\"pass\", \".sh\");\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             w.println(\"case \\\"$1\\\" in\");\n@@ -1766,7 +1799,7 @@ private File getSSHExeFromGitExeParentDir(String userGitExe) {\n     }\n \n     private File createWindowsGitSSH(File key, String user) throws IOException {\n-        File ssh = File.createTempFile(\"ssh\", \".bat\");\n+        File ssh = createTempFile(\"ssh\", \".bat\");\n \n         File sshexe = getSSHExecutable();\n \n@@ -1779,7 +1812,7 @@ private File createWindowsGitSSH(File key, String user) throws IOException {\n     }\n \n     private File createUnixGitSSH(File key, String user) throws IOException {\n-        File ssh = File.createTempFile(\"ssh\", \".sh\");\n+        File ssh = createTempFile(\"ssh\", \".sh\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             \/\/ ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set\n@@ -2383,7 +2416,7 @@ public void branch(String name) throws GitException, InterruptedException {\n     public void commit(String message) throws GitException, InterruptedException {\n         File f = null;\n         try {\n-            f = File.createTempFile(\"gitcommit\", \".txt\");\n+            f = createTempFile(\"gitcommit\", \".txt\");\n             try (OutputStream out = Files.newOutputStream(f.toPath())) {\n                 out.write(message.getBytes(Charset.defaultCharset().toString()));\n             }",
      "code_diff":"@@ -42,6 +42,11 @@\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -1411,6 +1416,34 @@ public void addNote(String note, String namespace ) throws GitException, Interru\n         createNote(note,namespace,\"add\");\n     }\n \n+    private File createTempFileInSystemDir(String prefix, String suffix) throws IOException {\n+        if (isWindows()) {\n+            return Files.createTempFile(prefix, suffix).toFile();\n+        }\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\n+        return Files.createTempFile(prefix, suffix, fileAttribute).toFile();\n+    }\n+\n+    private File createTempFile(String prefix, String suffix) throws IOException {\n+        if (workspace == null) {\n+            return createTempFileInSystemDir(prefix, suffix);\n+        }\n+        File workspaceTmp = new File(workspace.getAbsolutePath() + \"@tmp\");\n+        if (!workspaceTmp.isDirectory() && !workspaceTmp.mkdirs()) {\n+            if (!workspaceTmp.isDirectory()) {\n+                return createTempFileInSystemDir(prefix, suffix);\n+            }\n+        }\n+        Path tmpPath = Paths.get(workspaceTmp.getAbsolutePath());\n+        if (isWindows()) {\n+            return Files.createTempFile(tmpPath, prefix, suffix).toFile();\n+        }\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\n+        return Files.createTempFile(tmpPath, prefix, suffix, fileAttribute).toFile();\n+    }\n+\n     private void deleteTempFile(File tempFile) {\n         if (tempFile != null && !tempFile.delete() && tempFile.exists()) {\n             listener.getLogger().println(\"[WARNING] temp file \" + tempFile + \" not deleted\");\n@@ -1420,7 +1453,7 @@ private void deleteTempFile(File tempFile) {\n     private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {\n         File msg = null;\n         try {\n-            msg = File.createTempFile(\"git-note\", \"txt\", workspace);\n+            msg = createTempFile(\"git-note\", \".txt\");\n             FileUtils.writeStringToFile(msg,note);\n             launchCommand(\"notes\", \"--ref=\" + namespace, command, \"-F\", msg.getAbsolutePath());\n         } catch (IOException | GitException e) {\n@@ -1561,7 +1594,7 @@ private String launchCommandWithCredentials(ArgumentListBuilder args, File workD\n     }\n \n     private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {\n-        File key = File.createTempFile(\"ssh\", \"key\");\n+        File key = createTempFile(\"ssh\", \".key\");\n         try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {\n             List<String> privateKeys = sshUser.getPrivateKeys();\n             for (String s : privateKeys) {\n@@ -1597,7 +1630,7 @@ private String quoteUnixCredentials(String str) {\n     }\n \n     private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\n-        File ssh = File.createTempFile(\"pass\", \".bat\");\n+        File ssh = createTempFile(\"pass\", \".bat\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             \/\/ avoid echoing command as part of the password\n             w.println(\"@echo off\");\n@@ -1610,7 +1643,7 @@ private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOExcepti\n     }\n \n     private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\n-        File ssh = File.createTempFile(\"pass\", \".sh\");\n+        File ssh = createTempFile(\"pass\", \".sh\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             w.println(\"echo '\" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + \"'\");\n@@ -1621,7 +1654,7 @@ private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException\n \n     \/* Package protected for testability *\/\n     File createWindowsBatFile(String userName, String password) throws IOException {\n-        File askpass = File.createTempFile(\"pass\", \".bat\");\n+        File askpass = createTempFile(\"pass\", \".bat\");\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\n             w.println(\"@set arg=%~1\");\n             w.println(\"@if (%arg:~0,8%)==(Username) echo \" + escapeWindowsCharsForUnquotedString(userName));\n@@ -1636,7 +1669,7 @@ private File createWindowsStandardAskpass(StandardUsernamePasswordCredentials cr\n     }\n \n     private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {\n-        File askpass = File.createTempFile(\"pass\", \".sh\");\n+        File askpass = createTempFile(\"pass\", \".sh\");\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             w.println(\"case \\\"$1\\\" in\");\n@@ -1766,7 +1799,7 @@ private File getSSHExeFromGitExeParentDir(String userGitExe) {\n     }\n \n     private File createWindowsGitSSH(File key, String user) throws IOException {\n-        File ssh = File.createTempFile(\"ssh\", \".bat\");\n+        File ssh = createTempFile(\"ssh\", \".bat\");\n \n         File sshexe = getSSHExecutable();\n \n@@ -1779,7 +1812,7 @@ private File createWindowsGitSSH(File key, String user) throws IOException {\n     }\n \n     private File createUnixGitSSH(File key, String user) throws IOException {\n-        File ssh = File.createTempFile(\"ssh\", \".sh\");\n+        File ssh = createTempFile(\"ssh\", \".sh\");\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\n             w.println(\"#!\/bin\/sh\");\n             \/\/ ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set\n@@ -2383,7 +2416,7 @@ public void branch(String name) throws GitException, InterruptedException {\n     public void commit(String message) throws GitException, InterruptedException {\n         File f = null;\n         try {\n-            f = File.createTempFile(\"gitcommit\", \".txt\");\n+            f = createTempFile(\"gitcommit\", \".txt\");\n             try (OutputStream out = Files.newOutputStream(f.toPath())) {\n                 out.write(message.getBytes(Charset.defaultCharset().toString()));\n             }"
    },
    {
      "index":24,
      "vuln_id":"GHSA-25xj-89g5-fm6h",
      "cwe_id":"{'CWE-532', 'CWE-200'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/hashicorp\/vault\/commit\/87f47c216cf1a28f4054b80cff40de8c9e00e36c', 'https:\/\/github.com\/hashicorp\/vault\/commit\/e52f34772affb69f3239b2cdf6523cb7cfd67a92'}",
      "dataset":"osv",
      "summary":"Information Disclosure in HashiCorp Vault HashiCorp Vault and Vault Enterprise before 1.3.6, and 1.4.2 before 1.4.2, insert Sensitive Information into a Log File.",
      "published_date":"2021-05-18",
      "chain_len":2,
      "project":"https:\/\/github.com\/hashicorp\/vault",
      "commit_href":"https:\/\/github.com\/hashicorp\/vault\/commit\/e52f34772affb69f3239b2cdf6523cb7cfd67a92",
      "commit_sha":"e52f34772affb69f3239b2cdf6523cb7cfd67a92",
      "patch":"MULTI",
      "chain_ord":"['e52f34772affb69f3239b2cdf6523cb7cfd67a92', '87f47c216cf1a28f4054b80cff40de8c9e00e36c']",
      "before_first_fix_commit":"{'01a682aa48ede581e12813314e64a75e314e500e'}",
      "last_fix_commit":"87f47c216cf1a28f4054b80cff40de8c9e00e36c",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/19\/2020, 14:07:46",
      "message":"Don't include username or password of proxy env vars when logging them. (#9022)",
      "author":"ncabatoff",
      "comments":null,
      "stats":"{'additions': 27, 'deletions': 7, 'total': 34}",
      "files":"{'command\/server.go': {'additions': 27, 'deletions': 7, 'changes': 34, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hashicorp\/vault\/raw\/e52f34772affb69f3239b2cdf6523cb7cfd67a92\/command%2Fserver.go', 'patch': '@@ -445,9 +445,7 @@ func (c *ServerCommand) runRecoveryMode() int {\\n \\t\\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\\n \\t}\\n \\n-\\tproxyCfg := httpproxy.FromEnvironment()\\n-\\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\\n-\\t\\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\\n+\\tlogProxyEnvironmentVariables(c.logger)\\n \\n \\t\/\/ Initialize the storage backend\\n \\tfactory, exists := c.PhysicalBackends[config.Storage.Type]\\n@@ -684,6 +682,31 @@ func (c *ServerCommand) runRecoveryMode() int {\\n \\treturn 0\\n }\\n \\n+func logProxyEnvironmentVariables(logger hclog.Logger) {\\n+\\tproxyCfg := httpproxy.FromEnvironment()\\n+\\tcfgMap := map[string]string{\\n+\\t\\t\"http_proxy\":  proxyCfg.HTTPProxy,\\n+\\t\\t\"https_proxy\": proxyCfg.HTTPSProxy,\\n+\\t\\t\"no_proxy\":    proxyCfg.NoProxy,\\n+\\t}\\n+\\tfor k, v := range cfgMap {\\n+\\t\\tu, err := url.Parse(v)\\n+\\t\\tif err != nil {\\n+\\t\\t\\t\/\/ Env vars may contain URLs or host:port values.  We only care\\n+\\t\\t\\t\/\/ about the former.\\n+\\t\\t\\tcontinue\\n+\\t\\t}\\n+\\t\\tif _, ok := u.User.Password(); ok {\\n+\\t\\t\\tu.User = url.UserPassword(\"redacted-username\", \"redacted-password\")\\n+\\t\\t} else if user := u.User.Username(); user != \"\" {\\n+\\t\\t\\tu.User = url.User(\"redacted-username\")\\n+\\t\\t}\\n+\\t\\tcfgMap[k] = u.String()\\n+\\t}\\n+\\tlogger.Info(\"proxy environment\", \"http_proxy\", cfgMap[\"http_proxy\"],\\n+\\t\\t\"https_proxy\", cfgMap[\"https_proxy\"], \"no_proxy\", cfgMap[\"no_proxy\"])\\n+}\\n+\\n func (c *ServerCommand) adjustLogLevel(config *server.Config, logLevelWasNotSet bool) (string, error) {\\n \\tvar logLevelString string\\n \\tif config.LogLevel != \"\" && logLevelWasNotSet {\\n@@ -894,10 +917,7 @@ func (c *ServerCommand) Run(args []string) int {\\n \\t\\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\\n \\t}\\n \\n-\\t\/\/ log proxy settings\\n-\\tproxyCfg := httpproxy.FromEnvironment()\\n-\\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\\n-\\t\\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\\n+\\tlogProxyEnvironmentVariables(c.logger)\\n \\n \\t\/\/ If mlockall(2) isn\\'t supported, show a warning. We disable this in dev\\n \\t\/\/ because it is quite scary to see when first using Vault. We also disable'}}",
      "message_norm":"don't include username or password of proxy env vars when logging them. (#9022)",
      "language":"en",
      "entities":"[('password', 'SECWORD', ''), ('#9022', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['command\/server.go'])",
      "num_files":1.0,
      "patch_content":"From e52f34772affb69f3239b2cdf6523cb7cfd67a92 Mon Sep 17 00:00:00 2001\nFrom: ncabatoff <ncabatoff@hashicorp.com>\nDate: Tue, 19 May 2020 10:07:46 -0400\nSubject: [PATCH] Don't include username or password of proxy env vars when\n logging them. (#9022)\n\n---\n command\/server.go | 34 +++++++++++++++++++++++++++-------\n 1 file changed, 27 insertions(+), 7 deletions(-)\n\ndiff --git a\/command\/server.go b\/command\/server.go\nindex 54a5090a3012..0cf866053602 100644\n--- a\/command\/server.go\n+++ b\/command\/server.go\n@@ -445,9 +445,7 @@ func (c *ServerCommand) runRecoveryMode() int {\n \t\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\n \t}\n \n-\tproxyCfg := httpproxy.FromEnvironment()\n-\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\n-\t\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\n+\tlogProxyEnvironmentVariables(c.logger)\n \n \t\/\/ Initialize the storage backend\n \tfactory, exists := c.PhysicalBackends[config.Storage.Type]\n@@ -684,6 +682,31 @@ func (c *ServerCommand) runRecoveryMode() int {\n \treturn 0\n }\n \n+func logProxyEnvironmentVariables(logger hclog.Logger) {\n+\tproxyCfg := httpproxy.FromEnvironment()\n+\tcfgMap := map[string]string{\n+\t\t\"http_proxy\":  proxyCfg.HTTPProxy,\n+\t\t\"https_proxy\": proxyCfg.HTTPSProxy,\n+\t\t\"no_proxy\":    proxyCfg.NoProxy,\n+\t}\n+\tfor k, v := range cfgMap {\n+\t\tu, err := url.Parse(v)\n+\t\tif err != nil {\n+\t\t\t\/\/ Env vars may contain URLs or host:port values.  We only care\n+\t\t\t\/\/ about the former.\n+\t\t\tcontinue\n+\t\t}\n+\t\tif _, ok := u.User.Password(); ok {\n+\t\t\tu.User = url.UserPassword(\"redacted-username\", \"redacted-password\")\n+\t\t} else if user := u.User.Username(); user != \"\" {\n+\t\t\tu.User = url.User(\"redacted-username\")\n+\t\t}\n+\t\tcfgMap[k] = u.String()\n+\t}\n+\tlogger.Info(\"proxy environment\", \"http_proxy\", cfgMap[\"http_proxy\"],\n+\t\t\"https_proxy\", cfgMap[\"https_proxy\"], \"no_proxy\", cfgMap[\"no_proxy\"])\n+}\n+\n func (c *ServerCommand) adjustLogLevel(config *server.Config, logLevelWasNotSet bool) (string, error) {\n \tvar logLevelString string\n \tif config.LogLevel != \"\" && logLevelWasNotSet {\n@@ -894,10 +917,7 @@ func (c *ServerCommand) Run(args []string) int {\n \t\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\n \t}\n \n-\t\/\/ log proxy settings\n-\tproxyCfg := httpproxy.FromEnvironment()\n-\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\n-\t\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\n+\tlogProxyEnvironmentVariables(c.logger)\n \n \t\/\/ If mlockall(2) isn't supported, show a warning. We disable this in dev\n \t\/\/ because it is quite scary to see when first using Vault. We also disable",
      "code_diff":"@@ -445,9 +445,7 @@ func (c *ServerCommand) runRecoveryMode() int {\n \t\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\n \t}\n \n-\tproxyCfg := httpproxy.FromEnvironment()\n-\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\n-\t\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\n+\tlogProxyEnvironmentVariables(c.logger)\n \n \t\/\/ Initialize the storage backend\n \tfactory, exists := c.PhysicalBackends[config.Storage.Type]\n@@ -684,6 +682,31 @@ func (c *ServerCommand) runRecoveryMode() int {\n \treturn 0\n }\n \n+func logProxyEnvironmentVariables(logger hclog.Logger) {\n+\tproxyCfg := httpproxy.FromEnvironment()\n+\tcfgMap := map[string]string{\n+\t\t\"http_proxy\":  proxyCfg.HTTPProxy,\n+\t\t\"https_proxy\": proxyCfg.HTTPSProxy,\n+\t\t\"no_proxy\":    proxyCfg.NoProxy,\n+\t}\n+\tfor k, v := range cfgMap {\n+\t\tu, err := url.Parse(v)\n+\t\tif err != nil {\n+\t\t\t\/\/ Env vars may contain URLs or host:port values.  We only care\n+\t\t\t\/\/ about the former.\n+\t\t\tcontinue\n+\t\t}\n+\t\tif _, ok := u.User.Password(); ok {\n+\t\t\tu.User = url.UserPassword(\"redacted-username\", \"redacted-password\")\n+\t\t} else if user := u.User.Username(); user != \"\" {\n+\t\t\tu.User = url.User(\"redacted-username\")\n+\t\t}\n+\t\tcfgMap[k] = u.String()\n+\t}\n+\tlogger.Info(\"proxy environment\", \"http_proxy\", cfgMap[\"http_proxy\"],\n+\t\t\"https_proxy\", cfgMap[\"https_proxy\"], \"no_proxy\", cfgMap[\"no_proxy\"])\n+}\n+\n func (c *ServerCommand) adjustLogLevel(config *server.Config, logLevelWasNotSet bool) (string, error) {\n \tvar logLevelString string\n \tif config.LogLevel != \"\" && logLevelWasNotSet {\n@@ -894,10 +917,7 @@ func (c *ServerCommand) Run(args []string) int {\n \t\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\n \t}\n \n-\t\/\/ log proxy settings\n-\tproxyCfg := httpproxy.FromEnvironment()\n-\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\n-\t\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\n+\tlogProxyEnvironmentVariables(c.logger)\n \n \t\/\/ If mlockall(2) isn't supported, show a warning. We disable this in dev\n \t\/\/ because it is quite scary to see when first using Vault. We also disable"
    },
    {
      "index":25,
      "vuln_id":"GHSA-w8rc-pgxq-x2cj",
      "cwe_id":"{'CWE-20'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/shopizer-ecommerce\/shopizer\/commit\/929ca0839a80c6f4dad087e0259089908787ad2a'}",
      "dataset":"osv",
      "summary":"Negative charge in shopping cart in Shopizer ### Impact\nUsing API or Controller based versions negative quantity is not adequately validated hence creating incorrect shopping cart and order total. \n\n### Patches\nAdding a back-end verification to check that quantity parameter isn't negative. If so, it is set to 1. Patched in 2.11.0\n\n### Workarounds\nWithout uprading, it's possible to just apply the fixes in the same files it's done for the patch. Or you use javax constraint validation on the quantity parameter.\n\n### References\n[Input Validation](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/Input_Validation_Cheat_Sheet.html)\n[Using bean validation constraint](https:\/\/javaee.github.io\/tutorial\/bean-validation002.html)\n[Commits with fixes](https:\/\/github.com\/shopizer-ecommerce\/shopizer\/commit\/929ca0839a80c6f4dad087e0259089908787ad2a)\nCVE Details below : \n[Mitre](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2020-11007)\n[NVD](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-11007)\n\n### Credits\nFound and solved by Yannick Gosset from Aix-Marseille University cybersecurity\nmaster program supervised by Yassine Ilmi",
      "published_date":"2020-04-22",
      "chain_len":1,
      "project":"https:\/\/github.com\/shopizer-ecommerce\/shopizer",
      "commit_href":"https:\/\/github.com\/shopizer-ecommerce\/shopizer\/commit\/929ca0839a80c6f4dad087e0259089908787ad2a",
      "commit_sha":"929ca0839a80c6f4dad087e0259089908787ad2a",
      "patch":"SINGLE",
      "chain_ord":"['929ca0839a80c6f4dad087e0259089908787ad2a']",
      "before_first_fix_commit":"{'de8a8e3183f8c5fed4695f889e309a6fff70adae', '6858049b39bdc51b71e6419b7c4bba1347737cb7'}",
      "last_fix_commit":"929ca0839a80c6f4dad087e0259089908787ad2a",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/10\/2020, 13:35:12",
      "message":"Merge pull request from GHSA-w8rc-pgxq-x2cj\n\nFixing negative charge vulnerability",
      "author":"Shopizer",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 7, 'total': 12}",
      "files":"{'sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java': {'additions': 5, 'deletions': 7, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/shopizer-ecommerce\/shopizer\/raw\/929ca0839a80c6f4dad087e0259089908787ad2a\/sm-shop%2Fsrc%2Fmain%2Fjava%2Fcom%2Fsalesmanager%2Fshop%2Fstore%2Fcontroller%2FshoppingCart%2Ffacade%2FShoppingCartFacadeImpl.java', 'patch': '@@ -108,7 +108,7 @@ public ShoppingCartData addItemsToShoppingCart( final ShoppingCartData shoppingC\\n     {\\n \\n         ShoppingCart cartModel = null;\\n-        \\n+        if(item.getQuantity() < 1) item.setQuantity(1);\\n         \/**\\n          * Sometimes a user logs in and a shopping cart is present in db (shoppingCartData\\n          * but ui has no cookie with shopping cart code so the cart code will have\\n@@ -216,7 +216,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\\n         }\\n         \\t\\n         for(ProductAvailability availability : availabilities) {\\n-        \\tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\\n+        \\tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\\n         \\t}\\n         }\\n@@ -288,7 +288,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\\n         }\\n         \\t\\n         for(ProductAvailability availability : availabilities) {\\n-        \\tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\\n+        \\tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\\n         \\t}\\n         }\\n@@ -554,8 +554,7 @@ public ShoppingCartData updateCartItem( final Long itemID, final String cartId,\\n         return null;\\n     }\\n     \\n-    @SuppressWarnings(\"unchecked\")\\n-\\t@Override\\n+    @Override\\n     public ShoppingCartData updateCartItems( final List<ShoppingCartItem> shoppingCartItems, final MerchantStore store, final Language language )\\n             throws Exception\\n         {\\n@@ -720,7 +719,6 @@ public ReadableShoppingCart addToCart(PersistableShoppingCartItem item, Merchant\\n \\t}\\n \\t\\n \\n-\\t@SuppressWarnings(\"unchecked\")\\n \\t@Override\\n \\tpublic void removeShoppingCartItem(String cartCode, Long productId,\\n \\t      MerchantStore merchant, Language language) throws Exception {\\n@@ -914,7 +912,7 @@ public ReadableShoppingCart addToCart(Customer customer, PersistableShoppingCart\\n \\t\\t\\n \\t\\tValidate.notNull(customer,\"Customer cannot be null\");\\n \\t\\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\\n-\\t\\t\\n+\\t\\tif(item.getQuantity() < 1) item.setQuantity(1);\\n \\t\\t\/\/Check if customer has an existing shopping cart\\n \\t\\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);'}}",
      "message_norm":"merge pull request from ghsa-w8rc-pgxq-x2cj\n\nfixing negative charge vulnerability",
      "language":"en",
      "entities":"[('ghsa-w8rc-pgxq-x2cj', 'VULNID', 'GHSA'), ('fixing', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java'])",
      "num_files":1.0,
      "patch_content":"From 5fe561634c1d06b56b87cbda3e27ca2ed6c120f9 Mon Sep 17 00:00:00 2001\nFrom: \"yannick.gosset\" <yannick.gosset@etu.univ-amu.fr>\nDate: Thu, 9 Apr 2020 00:25:45 +0200\nSubject: [PATCH 1\/2] Checking that quantity isn't negative. If so it sets\n quantity to 1.\n\n---\n ...\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java    | 10 ++++------\n 1 file changed, 4 insertions(+), 6 deletions(-)\n\ndiff --git a\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java b\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\nindex 09b20c2a9b..768e8f2e86 100755\n--- a\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\n+++ b\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\n@@ -108,7 +108,7 @@ public ShoppingCartData addItemsToShoppingCart( final ShoppingCartData shoppingC\n     {\n \n         ShoppingCart cartModel = null;\n-        \n+        if(item.getQuantity() < 1) item.setQuantity(1);\n         \/**\n          * Sometimes a user logs in and a shopping cart is present in db (shoppingCartData\n          * but ui has no cookie with shopping cart code so the cart code will have\n@@ -216,7 +216,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\n         }\n         \t\n         for(ProductAvailability availability : availabilities) {\n-        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n+        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n         \t}\n         }\n@@ -288,7 +288,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\n         }\n         \t\n         for(ProductAvailability availability : availabilities) {\n-        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n+        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n         \t}\n         }\n@@ -554,8 +554,7 @@ public ShoppingCartData updateCartItem( final Long itemID, final String cartId,\n         return null;\n     }\n     \n-    @SuppressWarnings(\"unchecked\")\n-\t@Override\n+    @Override\n     public ShoppingCartData updateCartItems( final List<ShoppingCartItem> shoppingCartItems, final MerchantStore store, final Language language )\n             throws Exception\n         {\n@@ -720,7 +719,6 @@ public ReadableShoppingCart addToCart(PersistableShoppingCartItem item, Merchant\n \t}\n \t\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic void removeShoppingCartItem(String cartCode, Long productId,\n \t      MerchantStore merchant, Language language) throws Exception {\n\nFrom 6858049b39bdc51b71e6419b7c4bba1347737cb7 Mon Sep 17 00:00:00 2001\nFrom: \"yannick.gosset\" <yannick.gosset@etu.univ-amu.fr>\nDate: Thu, 9 Apr 2020 18:36:48 +0200\nSubject: [PATCH 2\/2] Adding quantity verification to another function that\n uses PersitableShoppingCartItem\n\n---\n ...\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java  | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java b\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\nindex 768e8f2e86..ee9d1e8b86 100755\n--- a\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\n+++ b\/sm-shop\/src\/main\/java\/com\/salesmanager\/shop\/store\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java\n@@ -912,7 +912,7 @@ public ReadableShoppingCart addToCart(Customer customer, PersistableShoppingCart\n \t\t\n \t\tValidate.notNull(customer,\"Customer cannot be null\");\n \t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n-\t\t\n+\t\tif(item.getQuantity() < 1) item.setQuantity(1);\n \t\t\/\/Check if customer has an existing shopping cart\n \t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);",
      "code_diff":"@@ -108,7 +108,7 @@ public ShoppingCartData addItemsToShoppingCart( final ShoppingCartData shoppingC\n     {\n \n         ShoppingCart cartModel = null;\n-        \n+        if(item.getQuantity() < 1) item.setQuantity(1);\n         \/**\n          * Sometimes a user logs in and a shopping cart is present in db (shoppingCartData\n          * but ui has no cookie with shopping cart code so the cart code will have\n@@ -216,7 +216,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\n         }\n         \t\n         for(ProductAvailability availability : availabilities) {\n-        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n+        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n         \t}\n         }\n@@ -288,7 +288,7 @@ private com.salesmanager.core.model.shoppingcart.ShoppingCartItem createCartItem\n         }\n         \t\n         for(ProductAvailability availability : availabilities) {\n-        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() ==0) {\n+        \tif(availability.getProductQuantity() == null || availability.getProductQuantity().intValue() <= 0) {\n                 throw new Exception( \"Item with id \" + product.getId() + \" is not available\");\n         \t}\n         }\n@@ -554,8 +554,7 @@ public ShoppingCartData updateCartItem( final Long itemID, final String cartId,\n         return null;\n     }\n     \n-    @SuppressWarnings(\"unchecked\")\n-\t@Override\n+    @Override\n     public ShoppingCartData updateCartItems( final List<ShoppingCartItem> shoppingCartItems, final MerchantStore store, final Language language )\n             throws Exception\n         {\n@@ -720,7 +719,6 @@ public ReadableShoppingCart addToCart(PersistableShoppingCartItem item, Merchant\n \t}\n \t\n \n-\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic void removeShoppingCartItem(String cartCode, Long productId,\n \t      MerchantStore merchant, Language language) throws Exception {\n\nFrom: \"yannick.gosset\" <yannick.gosset@etu.univ-amu.fr>\n uses PersitableShoppingCartItem\n\n ...\/controller\/shoppingCart\/facade\/ShoppingCartFacadeImpl.java  | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n@@ -912,7 +912,7 @@ public ReadableShoppingCart addToCart(Customer customer, PersistableShoppingCart\n \t\t\n \t\tValidate.notNull(customer,\"Customer cannot be null\");\n \t\tValidate.notNull(customer.getId(),\"Customer.id cannot be null or empty\");\n-\t\t\n+\t\tif(item.getQuantity() < 1) item.setQuantity(1);\n \t\t\/\/Check if customer has an existing shopping cart\n \t\tShoppingCart cartModel = shoppingCartService.getByCustomer(customer);"
    },
    {
      "index":26,
      "vuln_id":"GHSA-v6wr-fch2-vm5w",
      "cwe_id":"{'CWE-200'}",
      "score":5.9,
      "chain":"{'https:\/\/github.com\/orientechnologies\/orientdb\/commit\/668ece96be210e742a4e2820a3085b215cf55104'}",
      "dataset":"osv",
      "summary":"Moderate severity vulnerability that affects com.orientechnologies:orientdb-studio server\/network\/protocol\/http\/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.",
      "published_date":"2018-10-18",
      "chain_len":1,
      "project":"https:\/\/github.com\/orientechnologies\/orientdb",
      "commit_href":"https:\/\/github.com\/orientechnologies\/orientdb\/commit\/668ece96be210e742a4e2820a3085b215cf55104",
      "commit_sha":"668ece96be210e742a4e2820a3085b215cf55104",
      "patch":"SINGLE",
      "chain_ord":"['668ece96be210e742a4e2820a3085b215cf55104']",
      "before_first_fix_commit":"{'41fd20ab022e22bce32d62372dbe279693322086'}",
      "last_fix_commit":"668ece96be210e742a4e2820a3085b215cf55104",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/04\/2015, 14:45:12",
      "message":"Adopted SecureRandom to avoid predicable random numbers in session",
      "author":"lvca",
      "comments":null,
      "stats":"{'additions': 136, 'deletions': 135, 'total': 271}",
      "files":"{'server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java': {'additions': 136, 'deletions': 135, 'changes': 271, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/orientechnologies\/orientdb\/raw\/668ece96be210e742a4e2820a3085b215cf55104\/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Forientechnologies%2Forient%2Fserver%2Fnetwork%2Fprotocol%2Fhttp%2FOHttpSessionManager.java', 'patch': '@@ -1,141 +1,142 @@\\n \/*\\r\\n-    *\\r\\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n-    *  *\\r\\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n-    *  *  you may not use this file except in compliance with the License.\\r\\n-    *  *  You may obtain a copy of the License at\\r\\n-    *  *\\r\\n-    *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\\r\\n-    *  *\\r\\n-    *  *  Unless required by applicable law or agreed to in writing, software\\r\\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n-    *  *  See the License for the specific language governing permissions and\\r\\n-    *  *  limitations under the License.\\r\\n-    *  *\\r\\n-    *  * For more information: http:\/\/www.orientechnologies.com\\r\\n-    *\\r\\n-    *\/\\r\\n+ *\\r\\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n+ *  *\\r\\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n+ *  *  you may not use this file except in compliance with the License.\\r\\n+ *  *  You may obtain a copy of the License at\\r\\n+ *  *\\r\\n+ *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\\r\\n+ *  *\\r\\n+ *  *  Unless required by applicable law or agreed to in writing, software\\r\\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n+ *  *  See the License for the specific language governing permissions and\\r\\n+ *  *  limitations under the License.\\r\\n+ *  *\\r\\n+ *  * For more information: http:\/\/www.orientechnologies.com\\r\\n+ *\\r\\n+ *\/\\r\\n package com.orientechnologies.orient.server.network.protocol.http;\\r\\n \\r\\n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\\r\\n- import com.orientechnologies.common.log.OLogManager;\\r\\n- import com.orientechnologies.orient.core.Orient;\\r\\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n-\\r\\n- import java.util.HashMap;\\r\\n- import java.util.Iterator;\\r\\n- import java.util.Map;\\r\\n- import java.util.Map.Entry;\\r\\n- import java.util.Random;\\r\\n- import java.util.TimerTask;\\r\\n+import com.orientechnologies.common.log.OLogManager;\\r\\n+import com.orientechnologies.orient.core.Orient;\\r\\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n+\\r\\n+import java.security.SecureRandom;\\r\\n+import java.util.HashMap;\\r\\n+import java.util.Iterator;\\r\\n+import java.util.Map;\\r\\n+import java.util.Map.Entry;\\r\\n+import java.util.Random;\\r\\n+import java.util.TimerTask;\\r\\n \\r\\n \/**\\r\\n-  * Handles the HTTP sessions such as a real HTTP Server.\\r\\n-  *\\r\\n-  * @author Luca Garulli\\r\\n-  *\/\\r\\n- public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n-   private int                              expirationTime;\\r\\n-   private Random                           random   = new Random();\\r\\n-\\r\\n-   protected OHttpSessionManager() {\\r\\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n-\\r\\n-     Orient.instance().scheduleTask(new TimerTask() {\\r\\n-       @Override\\r\\n-       public void run() {\\r\\n-         final int expired = checkSessionsValidity();\\r\\n-         if (expired > 0)\\r\\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n-       }\\r\\n-     }, expirationTime, expirationTime);\\r\\n-   }\\r\\n-\\r\\n-   public int checkSessionsValidity() {\\r\\n-     int expired = 0;\\r\\n-\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final long now = System.currentTimeMillis();\\r\\n-\\r\\n-       Entry<String, OHttpSession> s;\\r\\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n-         s = it.next();\\r\\n-\\r\\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n-           \/\/ REMOVE THE SESSION\\r\\n-           it.remove();\\r\\n-           expired++;\\r\\n-         }\\r\\n-       }\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-\\r\\n-     return expired;\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession[] getSessions() {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession getSession(final String iId) {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       final OHttpSession sess = sessions.get(iId);\\r\\n-       if (sess != null)\\r\\n-         sess.updateLastUpdatedOn();\\r\\n-       return sess;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n-       return id;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession removeSession(final String iSessionId) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       return sessions.remove(iSessionId);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public int getExpirationTime() {\\r\\n-     return expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public void setExpirationTime(int expirationTime) {\\r\\n-     this.expirationTime = expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public static OHttpSessionManager getInstance() {\\r\\n-     return instance;\\r\\n-   }\\r\\n- }\\r\\n+ * Handles the HTTP sessions such as a real HTTP Server.\\r\\n+ *\\r\\n+ * @author Luca Garulli\\r\\n+ *\/\\r\\n+public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n+  private int                              expirationTime;\\r\\n+  private Random                           random   = new SecureRandom();\\r\\n+\\r\\n+  protected OHttpSessionManager() {\\r\\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n+\\r\\n+    Orient.instance().scheduleTask(new TimerTask() {\\r\\n+      @Override\\r\\n+      public void run() {\\r\\n+        final int expired = checkSessionsValidity();\\r\\n+        if (expired > 0)\\r\\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n+      }\\r\\n+    }, expirationTime, expirationTime);\\r\\n+  }\\r\\n+\\r\\n+  public int checkSessionsValidity() {\\r\\n+    int expired = 0;\\r\\n+\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final long now = System.currentTimeMillis();\\r\\n+\\r\\n+      Entry<String, OHttpSession> s;\\r\\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n+        s = it.next();\\r\\n+\\r\\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n+          \/\/ REMOVE THE SESSION\\r\\n+          it.remove();\\r\\n+          expired++;\\r\\n+        }\\r\\n+      }\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+\\r\\n+    return expired;\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession[] getSessions() {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession getSession(final String iId) {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      final OHttpSession sess = sessions.get(iId);\\r\\n+      if (sess != null)\\r\\n+        sess.updateLastUpdatedOn();\\r\\n+      return sess;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n+      return id;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession removeSession(final String iSessionId) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      return sessions.remove(iSessionId);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public int getExpirationTime() {\\r\\n+    return expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public void setExpirationTime(int expirationTime) {\\r\\n+    this.expirationTime = expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public static OHttpSessionManager getInstance() {\\r\\n+    return instance;\\r\\n+  }\\r\\n+}'}}",
      "message_norm":"adopted securerandom to avoid predicable random numbers in session",
      "language":"en",
      "entities":"[('securerandom', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java'])",
      "num_files":1.0,
      "patch_content":"From 668ece96be210e742a4e2820a3085b215cf55104 Mon Sep 17 00:00:00 2001\nFrom: lvca <l.garulli@gmail.com>\nDate: Sat, 4 Apr 2015 11:45:12 -0300\nSubject: [PATCH] Adopted SecureRandom to avoid predicable random numbers in\n session\n\n---\n ...\/protocol\/http\/OHttpSessionManager.java    | 271 +++++++++---------\n 1 file changed, 136 insertions(+), 135 deletions(-)\n\ndiff --git a\/server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java b\/server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java\nindex bcc581a06d6..51a16a4349e 100755\n--- a\/server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java\n+++ b\/server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java\n@@ -1,141 +1,142 @@\n \/*\r\n-    *\r\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\r\n-    *  *\r\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n-    *  *  you may not use this file except in compliance with the License.\r\n-    *  *  You may obtain a copy of the License at\r\n-    *  *\r\n-    *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\r\n-    *  *\r\n-    *  *  Unless required by applicable law or agreed to in writing, software\r\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n-    *  *  See the License for the specific language governing permissions and\r\n-    *  *  limitations under the License.\r\n-    *  *\r\n-    *  * For more information: http:\/\/www.orientechnologies.com\r\n-    *\r\n-    *\/\r\n+ *\r\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\r\n+ *  *\r\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  *  you may not use this file except in compliance with the License.\r\n+ *  *  You may obtain a copy of the License at\r\n+ *  *\r\n+ *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\r\n+ *  *\r\n+ *  *  Unless required by applicable law or agreed to in writing, software\r\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  *  See the License for the specific language governing permissions and\r\n+ *  *  limitations under the License.\r\n+ *  *\r\n+ *  * For more information: http:\/\/www.orientechnologies.com\r\n+ *\r\n+ *\/\r\n package com.orientechnologies.orient.server.network.protocol.http;\r\n \r\n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\r\n- import com.orientechnologies.common.log.OLogManager;\r\n- import com.orientechnologies.orient.core.Orient;\r\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\r\n-\r\n- import java.util.HashMap;\r\n- import java.util.Iterator;\r\n- import java.util.Map;\r\n- import java.util.Map.Entry;\r\n- import java.util.Random;\r\n- import java.util.TimerTask;\r\n+import com.orientechnologies.common.log.OLogManager;\r\n+import com.orientechnologies.orient.core.Orient;\r\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\r\n+\r\n+import java.security.SecureRandom;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Random;\r\n+import java.util.TimerTask;\r\n \r\n \/**\r\n-  * Handles the HTTP sessions such as a real HTTP Server.\r\n-  *\r\n-  * @author Luca Garulli\r\n-  *\/\r\n- public class OHttpSessionManager extends OSharedResourceAbstract {\r\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\r\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\r\n-   private int                              expirationTime;\r\n-   private Random                           random   = new Random();\r\n-\r\n-   protected OHttpSessionManager() {\r\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\r\n-\r\n-     Orient.instance().scheduleTask(new TimerTask() {\r\n-       @Override\r\n-       public void run() {\r\n-         final int expired = checkSessionsValidity();\r\n-         if (expired > 0)\r\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\r\n-       }\r\n-     }, expirationTime, expirationTime);\r\n-   }\r\n-\r\n-   public int checkSessionsValidity() {\r\n-     int expired = 0;\r\n-\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       final long now = System.currentTimeMillis();\r\n-\r\n-       Entry<String, OHttpSession> s;\r\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\r\n-         s = it.next();\r\n-\r\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\r\n-           \/\/ REMOVE THE SESSION\r\n-           it.remove();\r\n-           expired++;\r\n-         }\r\n-       }\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-\r\n-     return expired;\r\n-   }\r\n-\r\n-   public OHttpSession[] getSessions() {\r\n-     acquireSharedLock();\r\n-     try {\r\n-\r\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\r\n-\r\n-     } finally {\r\n-       releaseSharedLock();\r\n-     }\r\n-   }\r\n-\r\n-   public OHttpSession getSession(final String iId) {\r\n-     acquireSharedLock();\r\n-     try {\r\n-\r\n-       final OHttpSession sess = sessions.get(iId);\r\n-       if (sess != null)\r\n-         sess.updateLastUpdatedOn();\r\n-       return sess;\r\n-\r\n-     } finally {\r\n-       releaseSharedLock();\r\n-     }\r\n-   }\r\n-\r\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\r\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\r\n-       return id;\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-   }\r\n-\r\n-   public OHttpSession removeSession(final String iSessionId) {\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       return sessions.remove(iSessionId);\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-   }\r\n-\r\n-   public int getExpirationTime() {\r\n-     return expirationTime;\r\n-   }\r\n-\r\n-   public void setExpirationTime(int expirationTime) {\r\n-     this.expirationTime = expirationTime;\r\n-   }\r\n-\r\n-   public static OHttpSessionManager getInstance() {\r\n-     return instance;\r\n-   }\r\n- }\r\n+ * Handles the HTTP sessions such as a real HTTP Server.\r\n+ *\r\n+ * @author Luca Garulli\r\n+ *\/\r\n+public class OHttpSessionManager extends OSharedResourceAbstract {\r\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\r\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\r\n+  private int                              expirationTime;\r\n+  private Random                           random   = new SecureRandom();\r\n+\r\n+  protected OHttpSessionManager() {\r\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\r\n+\r\n+    Orient.instance().scheduleTask(new TimerTask() {\r\n+      @Override\r\n+      public void run() {\r\n+        final int expired = checkSessionsValidity();\r\n+        if (expired > 0)\r\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\r\n+      }\r\n+    }, expirationTime, expirationTime);\r\n+  }\r\n+\r\n+  public int checkSessionsValidity() {\r\n+    int expired = 0;\r\n+\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      final long now = System.currentTimeMillis();\r\n+\r\n+      Entry<String, OHttpSession> s;\r\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\r\n+        s = it.next();\r\n+\r\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\r\n+          \/\/ REMOVE THE SESSION\r\n+          it.remove();\r\n+          expired++;\r\n+        }\r\n+      }\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+\r\n+    return expired;\r\n+  }\r\n+\r\n+  public OHttpSession[] getSessions() {\r\n+    acquireSharedLock();\r\n+    try {\r\n+\r\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\r\n+\r\n+    } finally {\r\n+      releaseSharedLock();\r\n+    }\r\n+  }\r\n+\r\n+  public OHttpSession getSession(final String iId) {\r\n+    acquireSharedLock();\r\n+    try {\r\n+\r\n+      final OHttpSession sess = sessions.get(iId);\r\n+      if (sess != null)\r\n+        sess.updateLastUpdatedOn();\r\n+      return sess;\r\n+\r\n+    } finally {\r\n+      releaseSharedLock();\r\n+    }\r\n+  }\r\n+\r\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\r\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\r\n+      return id;\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+  }\r\n+\r\n+  public OHttpSession removeSession(final String iSessionId) {\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      return sessions.remove(iSessionId);\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+  }\r\n+\r\n+  public int getExpirationTime() {\r\n+    return expirationTime;\r\n+  }\r\n+\r\n+  public void setExpirationTime(int expirationTime) {\r\n+    this.expirationTime = expirationTime;\r\n+  }\r\n+\r\n+  public static OHttpSessionManager getInstance() {\r\n+    return instance;\r\n+  }\r\n+}",
      "code_diff":"@@ -1,141 +1,142 @@\n \/*\n-    *\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\n-    *  *\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n-    *  *  you may not use this file except in compliance with the License.\n-    *  *  You may obtain a copy of the License at\n-    *  *\n-    *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n-    *  *\n-    *  *  Unless required by applicable law or agreed to in writing, software\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-    *  *  See the License for the specific language governing permissions and\n-    *  *  limitations under the License.\n-    *  *\n-    *  * For more information: http:\/\/www.orientechnologies.com\n-    *\n-    *\/\n+ *\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\n+ *  *\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  *  you may not use this file except in compliance with the License.\n+ *  *  You may obtain a copy of the License at\n+ *  *\n+ *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *  *\n+ *  *  Unless required by applicable law or agreed to in writing, software\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  *  See the License for the specific language governing permissions and\n+ *  *  limitations under the License.\n+ *  *\n+ *  * For more information: http:\/\/www.orientechnologies.com\n+ *\n+ *\/\n package com.orientechnologies.orient.server.network.protocol.http;\n \n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\n- import com.orientechnologies.common.log.OLogManager;\n- import com.orientechnologies.orient.core.Orient;\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\n-\n- import java.util.HashMap;\n- import java.util.Iterator;\n- import java.util.Map;\n- import java.util.Map.Entry;\n- import java.util.Random;\n- import java.util.TimerTask;\n+import com.orientechnologies.common.log.OLogManager;\n+import com.orientechnologies.orient.core.Orient;\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\n+\n+import java.security.SecureRandom;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Random;\n+import java.util.TimerTask;\n \n \/**\n-  * Handles the HTTP sessions such as a real HTTP Server.\n-  *\n-  * @author Luca Garulli\n-  *\/\n- public class OHttpSessionManager extends OSharedResourceAbstract {\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\n-   private int                              expirationTime;\n-   private Random                           random   = new Random();\n-\n-   protected OHttpSessionManager() {\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\n-\n-     Orient.instance().scheduleTask(new TimerTask() {\n-       @Override\n-       public void run() {\n-         final int expired = checkSessionsValidity();\n-         if (expired > 0)\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\n-       }\n-     }, expirationTime, expirationTime);\n-   }\n-\n-   public int checkSessionsValidity() {\n-     int expired = 0;\n-\n-     acquireExclusiveLock();\n-     try {\n-       final long now = System.currentTimeMillis();\n-\n-       Entry<String, OHttpSession> s;\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\n-         s = it.next();\n-\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\n-           \/\/ REMOVE THE SESSION\n-           it.remove();\n-           expired++;\n-         }\n-       }\n-\n-     } finally {\n-       releaseExclusiveLock();\n-     }\n-\n-     return expired;\n-   }\n-\n-   public OHttpSession[] getSessions() {\n-     acquireSharedLock();\n-     try {\n-\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\n-\n-     } finally {\n-       releaseSharedLock();\n-     }\n-   }\n-\n-   public OHttpSession getSession(final String iId) {\n-     acquireSharedLock();\n-     try {\n-\n-       final OHttpSession sess = sessions.get(iId);\n-       if (sess != null)\n-         sess.updateLastUpdatedOn();\n-       return sess;\n-\n-     } finally {\n-       releaseSharedLock();\n-     }\n-   }\n-\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\n-     acquireExclusiveLock();\n-     try {\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\n-       return id;\n-\n-     } finally {\n-       releaseExclusiveLock();\n-     }\n-   }\n-\n-   public OHttpSession removeSession(final String iSessionId) {\n-     acquireExclusiveLock();\n-     try {\n-       return sessions.remove(iSessionId);\n-\n-     } finally {\n-       releaseExclusiveLock();\n-     }\n-   }\n-\n-   public int getExpirationTime() {\n-     return expirationTime;\n-   }\n-\n-   public void setExpirationTime(int expirationTime) {\n-     this.expirationTime = expirationTime;\n-   }\n-\n-   public static OHttpSessionManager getInstance() {\n-     return instance;\n-   }\n- }\n+ * Handles the HTTP sessions such as a real HTTP Server.\n+ *\n+ * @author Luca Garulli\n+ *\/\n+public class OHttpSessionManager extends OSharedResourceAbstract {\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\n+  private int                              expirationTime;\n+  private Random                           random   = new SecureRandom();\n+\n+  protected OHttpSessionManager() {\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\n+\n+    Orient.instance().scheduleTask(new TimerTask() {\n+      @Override\n+      public void run() {\n+        final int expired = checkSessionsValidity();\n+        if (expired > 0)\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\n+      }\n+    }, expirationTime, expirationTime);\n+  }\n+\n+  public int checkSessionsValidity() {\n+    int expired = 0;\n+\n+    acquireExclusiveLock();\n+    try {\n+      final long now = System.currentTimeMillis();\n+\n+      Entry<String, OHttpSession> s;\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\n+        s = it.next();\n+\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\n+          \/\/ REMOVE THE SESSION\n+          it.remove();\n+          expired++;\n+        }\n+      }\n+\n+    } finally {\n+      releaseExclusiveLock();\n+    }\n+\n+    return expired;\n+  }\n+\n+  public OHttpSession[] getSessions() {\n+    acquireSharedLock();\n+    try {\n+\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\n+\n+    } finally {\n+      releaseSharedLock();\n+    }\n+  }\n+\n+  public OHttpSession getSession(final String iId) {\n+    acquireSharedLock();\n+    try {\n+\n+      final OHttpSession sess = sessions.get(iId);\n+      if (sess != null)\n+        sess.updateLastUpdatedOn();\n+      return sess;\n+\n+    } finally {\n+      releaseSharedLock();\n+    }\n+  }\n+\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\n+    acquireExclusiveLock();\n+    try {\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\n+      return id;\n+\n+    } finally {\n+      releaseExclusiveLock();\n+    }\n+  }\n+\n+  public OHttpSession removeSession(final String iSessionId) {\n+    acquireExclusiveLock();\n+    try {\n+      return sessions.remove(iSessionId);\n+\n+    } finally {\n+      releaseExclusiveLock();\n+    }\n+  }\n+\n+  public int getExpirationTime() {\n+    return expirationTime;\n+  }\n+\n+  public void setExpirationTime(int expirationTime) {\n+    this.expirationTime = expirationTime;\n+  }\n+\n+  public static OHttpSessionManager getInstance() {\n+    return instance;\n+  }\n+}"
    },
    {
      "index":27,
      "vuln_id":"GHSA-jjcx-999m-35hc",
      "cwe_id":"{'CWE-20'}",
      "score":3.3,
      "chain":"{'https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/e80d616ef4397e6e764f6b7b7a5b30121244933c'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in Firefly III Firefly III 4.7.17.3 is vulnerable to local file enumeration. An attacker can enumerate local files due to the lack of protocol scheme sanitization, such as for file:\/\/\/ URLs. This is related to fints_url to import\/job\/configuration, and import\/create\/fints.",
      "published_date":"2021-09-08",
      "chain_len":1,
      "project":"https:\/\/github.com\/firefly-iii\/firefly-iii",
      "commit_href":"https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/e80d616ef4397e6e764f6b7b7a5b30121244933c",
      "commit_sha":"e80d616ef4397e6e764f6b7b7a5b30121244933c",
      "patch":"SINGLE",
      "chain_ord":"['e80d616ef4397e6e764f6b7b7a5b30121244933c']",
      "before_first_fix_commit":"{'2ddf48f15cbdbb475221c299872420f625c3bc3f'}",
      "last_fix_commit":"e80d616ef4397e6e764f6b7b7a5b30121244933c",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/02\/2019, 15:05:54",
      "message":"Fix #2367",
      "author":"James Cole",
      "comments":null,
      "stats":"{'additions': 20, 'deletions': 0, 'total': 20}",
      "files":"{'app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php': {'additions': 20, 'deletions': 0, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/firefly-iii\/firefly-iii\/raw\/e80d616ef4397e6e764f6b7b7a5b30121244933c\/app%2FSupport%2FImport%2FJobConfiguration%2FFinTS%2FNewFinTSJobHandler.php', 'patch': \"@@ -60,6 +60,9 @@ public function configureJob(array $data): MessageBag\\n         $config['fints_password']  = (string)(Crypt::encrypt($data['fints_password']) ?? '');\\n         $config['apply-rules']     = 1 === (int)$data['apply_rules'];\\n \\n+        \/\/ sanitize FinTS URL.\\n+        $config['fints_url'] = $this->validURI($config['fints_url']) ? $config['fints_url'] : '';\\n+\\n         $this->repository->setConfiguration($this->importJob, $config);\\n \\n \\n@@ -108,4 +111,21 @@ public function setImportJob(ImportJob $importJob): void\\n         $this->repository->setUser($importJob->user);\\n     }\\n \\n+    \/**\\n+     * @param string $fints_url\\n+     *\\n+     * @return bool\\n+     *\/\\n+    private function validURI(string $fintsUri): bool\\n+    {\\n+        $res = filter_var($fintsUri, FILTER_VALIDATE_URL);\\n+        if (false === $res) {\\n+            return false;\\n+        }\\n+        $scheme = parse_url($fintsUri, PHP_URL_SCHEME);\\n+\\n+        return 'https' === $scheme;\\n+    }\\n+\\n+\\n }\"}}",
      "message_norm":"fix #2367",
      "language":"ca",
      "entities":"[('fix', 'ACTION', ''), ('#2367', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php'])",
      "num_files":1.0,
      "patch_content":"From e80d616ef4397e6e764f6b7b7a5b30121244933c Mon Sep 17 00:00:00 2001\nFrom: James Cole <thegrumpydictator@gmail.com>\nDate: Fri, 2 Aug 2019 17:05:54 +0200\nSubject: [PATCH] Fix #2367\n\n---\n ...\/FinTS\/NewFinTSJobHandler.php              | 20 +++++++++++++++++++\n 1 file changed, 20 insertions(+)\n\ndiff --git a\/app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php b\/app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php\nindex 2c688158e0a..51da2ed0f02 100644\n--- a\/app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php\n+++ b\/app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php\n@@ -60,6 +60,9 @@ public function configureJob(array $data): MessageBag\n         $config['fints_password']  = (string)(Crypt::encrypt($data['fints_password']) ?? '');\n         $config['apply-rules']     = 1 === (int)$data['apply_rules'];\n \n+        \/\/ sanitize FinTS URL.\n+        $config['fints_url'] = $this->validURI($config['fints_url']) ? $config['fints_url'] : '';\n+\n         $this->repository->setConfiguration($this->importJob, $config);\n \n \n@@ -108,4 +111,21 @@ public function setImportJob(ImportJob $importJob): void\n         $this->repository->setUser($importJob->user);\n     }\n \n+    \/**\n+     * @param string $fints_url\n+     *\n+     * @return bool\n+     *\/\n+    private function validURI(string $fintsUri): bool\n+    {\n+        $res = filter_var($fintsUri, FILTER_VALIDATE_URL);\n+        if (false === $res) {\n+            return false;\n+        }\n+        $scheme = parse_url($fintsUri, PHP_URL_SCHEME);\n+\n+        return 'https' === $scheme;\n+    }\n+\n+\n }",
      "code_diff":"@@ -60,6 +60,9 @@ public function configureJob(array $data): MessageBag\n         $config['fints_password']  = (string)(Crypt::encrypt($data['fints_password']) ?? '');\n         $config['apply-rules']     = 1 === (int)$data['apply_rules'];\n \n+        \/\/ sanitize FinTS URL.\n+        $config['fints_url'] = $this->validURI($config['fints_url']) ? $config['fints_url'] : '';\n+\n         $this->repository->setConfiguration($this->importJob, $config);\n \n \n@@ -108,4 +111,21 @@ public function setImportJob(ImportJob $importJob): void\n         $this->repository->setUser($importJob->user);\n     }\n \n+    \/**\n+     * @param string $fints_url\n+     *\n+     * @return bool\n+     *\/\n+    private function validURI(string $fintsUri): bool\n+    {\n+        $res = filter_var($fintsUri, FILTER_VALIDATE_URL);\n+        if (false === $res) {\n+            return false;\n+        }\n+        $scheme = parse_url($fintsUri, PHP_URL_SCHEME);\n+\n+        return 'https' === $scheme;\n+    }\n+\n+\n }"
    },
    {
      "index":28,
      "vuln_id":"GHSA-8687-vv9j-hgph",
      "cwe_id":"{'CWE-20'}",
      "score":9.1,
      "chain":"{'https:\/\/github.com\/Automattic\/mongoose\/commit\/f3eca5b94d822225c04e96cbeed9f095afb3c31c'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in Automattic Mongoose Automattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a _bsontype attribute is ignored. For example, adding \"_bsontype\":\"a\" can sometimes interfere with a query filter. NOTE: this CVE is about Mongoose's failure to work around this _bsontype special case that exists in older versions of the bson parser (aka the mongodb\/js-bson project).",
      "published_date":"2019-10-22",
      "chain_len":1,
      "project":"https:\/\/github.com\/Automattic\/mongoose",
      "commit_href":"https:\/\/github.com\/Automattic\/mongoose\/commit\/f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "commit_sha":"f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "patch":"SINGLE",
      "chain_ord":"['f3eca5b94d822225c04e96cbeed9f095afb3c31c']",
      "before_first_fix_commit":"{'cc10e0dc441f469330c1af2822d171fcd6fa8f89'}",
      "last_fix_commit":"f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "chain_ord_pos":1.0,
      "commit_datetime":"10\/09\/2019, 22:41:25",
      "message":"fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries\n\nFix #8222",
      "author":"Valeri Karpov",
      "comments":null,
      "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
      "files":"{'lib\/cast.js': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Automattic\/mongoose\/raw\/f3eca5b94d822225c04e96cbeed9f095afb3c31c\/lib%2Fcast.js', 'patch': \"@@ -27,6 +27,12 @@ module.exports = function cast(schema, obj, options, context) {\\n     throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\\n   }\\n \\n+  \/\/ bson 1.x has the unfortunate tendency to remove filters that have a top-level\\n+  \/\/ `_bsontype` property. Should remove this when we upgrade to bson 4.x. See gh-8222\\n+  if (obj.hasOwnProperty('_bsontype')) {\\n+    delete obj._bsontype;\\n+  }\\n+\\n   const paths = Object.keys(obj);\\n   let i = paths.length;\\n   let _keys;\"}}",
      "message_norm":"fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries\n\nfix #8222",
      "language":"fr",
      "entities":"[('fix(query', 'ACTION', ''), ('prevent', 'ACTION', ''), ('fix', 'ACTION', ''), ('#8222', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/cast.js'])",
      "num_files":1.0,
      "patch_content":"From f3eca5b94d822225c04e96cbeed9f095afb3c31c Mon Sep 17 00:00:00 2001\nFrom: Valeri Karpov <val@karpov.io>\nDate: Wed, 9 Oct 2019 18:41:25 -0400\nSubject: [PATCH] fix(query): delete top-level `_bsontype` property in queries\n to prevent silent empty queries\n\nFix #8222\n---\n lib\/cast.js | 6 ++++++\n 1 file changed, 6 insertions(+)\n\ndiff --git a\/lib\/cast.js b\/lib\/cast.js\nindex 928fe9d1ba4..3dfd651acd2 100644\n--- a\/lib\/cast.js\n+++ b\/lib\/cast.js\n@@ -27,6 +27,12 @@ module.exports = function cast(schema, obj, options, context) {\n     throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n   }\n \n+  \/\/ bson 1.x has the unfortunate tendency to remove filters that have a top-level\n+  \/\/ `_bsontype` property. Should remove this when we upgrade to bson 4.x. See gh-8222\n+  if (obj.hasOwnProperty('_bsontype')) {\n+    delete obj._bsontype;\n+  }\n+\n   const paths = Object.keys(obj);\n   let i = paths.length;\n   let _keys;",
      "code_diff":"@@ -27,6 +27,12 @@ module.exports = function cast(schema, obj, options, context) {\n     throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n   }\n \n+  \/\/ bson 1.x has the unfortunate tendency to remove filters that have a top-level\n+  \/\/ `_bsontype` property. Should remove this when we upgrade to bson 4.x. See gh-8222\n+  if (obj.hasOwnProperty('_bsontype')) {\n+    delete obj._bsontype;\n+  }\n+\n   const paths = Object.keys(obj);\n   let i = paths.length;\n   let _keys;"
    },
    {
      "index":29,
      "vuln_id":"GHSA-xrp2-fhq4-4q3w",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e57fd691c7b0fd00ea3bfe43444f30c1969748b5'}",
      "dataset":"osv",
      "summary":"Segfault if `tf.histogram_fixed_width` is called with NaN values in TensorFlow ### Impact\nThe implementation of [`tf.histogram_fixed_width`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/histogram_op.cc) is vulnerable to a crash when the values array contain `NaN` elements:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.histogram_fixed_width(values=np.nan, value_range=[1,2])\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/histogram_op.cc#L35-L74) assumes that all floating point operations are defined and then converts a floating point result to an integer index:\n\n```cc\nindex_to_bin.device(d) =\n    ((values.cwiseMax(value_range(0)) - values.constant(value_range(0)))\n         .template cast<double>() \/\n     step)\n        .cwiseMin(nbins_minus_1)\n        .template cast<int32>();\n```\n\nIf `values` contains `NaN` then the result of the division is still `NaN` and the cast to `int32` would result in a crash.\n\nThis only occurs on the CPU implementation.\n\n### Patches\nWe have patched the issue in GitHub commit [e57fd691c7b0fd00ea3bfe43444f30c1969748b5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e57fd691c7b0fd00ea3bfe43444f30c1969748b5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/45770).",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e57fd691c7b0fd00ea3bfe43444f30c1969748b5",
      "commit_sha":"e57fd691c7b0fd00ea3bfe43444f30c1969748b5",
      "patch":"SINGLE",
      "chain_ord":"['e57fd691c7b0fd00ea3bfe43444f30c1969748b5']",
      "before_first_fix_commit":"{'484b5e8836454dbc93380176ae5eeeab02cc63c0'}",
      "last_fix_commit":"e57fd691c7b0fd00ea3bfe43444f30c1969748b5",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/20\/2022, 18:35:47",
      "message":"Prevent crash when histogram is called with NaN values.\n\nFixes #45770\n\nPiperOrigin-RevId: 443149951",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 2, 'total': 13}",
      "files":"{'tensorflow\/core\/kernels\/histogram_op.cc': {'additions': 11, 'deletions': 2, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e57fd691c7b0fd00ea3bfe43444f30c1969748b5\/tensorflow%2Fcore%2Fkernels%2Fhistogram_op.cc', 'patch': '@@ -50,6 +50,15 @@ struct HistogramFixedWidthFunctor<CPUDevice, T, Tout> {\\n                         static_cast<double>(nbins);\\n     const double nbins_minus_1 = static_cast<double>(nbins - 1);\\n \\n+    \/\/ We cannot handle NANs in the algorithm below (due to the case to int32)\\n+    const Eigen::Tensor<int32, 1, 1> nans_tensor =\\n+        values.isnan().template cast<int32>();\\n+    const Eigen::Tensor<int32, 0, 1> reduced_tensor = nans_tensor.sum();\\n+    const int num_nans = reduced_tensor(0);\\n+    if (num_nans > 0) {\\n+      return errors::InvalidArgument(\"Histogram values must not contain NaN\");\\n+    }\\n+\\n     \/\/ The calculation is done by finding the slot of each value in `values`.\\n     \/\/ With [a, b]:\\n     \/\/   step = (b - a) \/ nbins\\n@@ -98,12 +107,12 @@ class HistogramFixedWidthOp : public OpKernel {\\n     const auto nbins = nbins_tensor.scalar<int32>()();\\n \\n     OP_REQUIRES(\\n-        ctx, (value_range(0) < value_range(1)),\\n+        ctx, value_range(0) < value_range(1),\\n         errors::InvalidArgument(\"value_range should satisfy value_range[0] < \"\\n                                 \"value_range[1], but got \\'[\",\\n                                 value_range(0), \", \", value_range(1), \"]\\'\"));\\n     OP_REQUIRES(\\n-        ctx, (nbins > 0),\\n+        ctx, nbins > 0,\\n         errors::InvalidArgument(\"nbins should be a positive number, but got \\'\",\\n                                 nbins, \"\\'\"));'}}",
      "message_norm":"prevent crash when histogram is called with nan values.\n\nfixes #45770\n\npiperorigin-revid: 443149951",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('fixes', 'ACTION', ''), ('#45770', 'ISSUE', ''), ('443149951', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/histogram_op.cc'])",
      "num_files":1.0,
      "patch_content":"From e57fd691c7b0fd00ea3bfe43444f30c1969748b5 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Wed, 20 Apr 2022 11:35:47 -0700\nSubject: [PATCH] Prevent crash when histogram is called with NaN values.\n\nFixes #45770\n\nPiperOrigin-RevId: 443149951\n---\n tensorflow\/core\/kernels\/histogram_op.cc | 13 +++++++++++--\n 1 file changed, 11 insertions(+), 2 deletions(-)\n\ndiff --git a\/tensorflow\/core\/kernels\/histogram_op.cc b\/tensorflow\/core\/kernels\/histogram_op.cc\nindex 8e1b53de6ee409..8ba9bccc9fbecd 100644\n--- a\/tensorflow\/core\/kernels\/histogram_op.cc\n+++ b\/tensorflow\/core\/kernels\/histogram_op.cc\n@@ -50,6 +50,15 @@ struct HistogramFixedWidthFunctor<CPUDevice, T, Tout> {\n                         static_cast<double>(nbins);\n     const double nbins_minus_1 = static_cast<double>(nbins - 1);\n \n+    \/\/ We cannot handle NANs in the algorithm below (due to the case to int32)\n+    const Eigen::Tensor<int32, 1, 1> nans_tensor =\n+        values.isnan().template cast<int32>();\n+    const Eigen::Tensor<int32, 0, 1> reduced_tensor = nans_tensor.sum();\n+    const int num_nans = reduced_tensor(0);\n+    if (num_nans > 0) {\n+      return errors::InvalidArgument(\"Histogram values must not contain NaN\");\n+    }\n+\n     \/\/ The calculation is done by finding the slot of each value in `values`.\n     \/\/ With [a, b]:\n     \/\/   step = (b - a) \/ nbins\n@@ -98,12 +107,12 @@ class HistogramFixedWidthOp : public OpKernel {\n     const auto nbins = nbins_tensor.scalar<int32>()();\n \n     OP_REQUIRES(\n-        ctx, (value_range(0) < value_range(1)),\n+        ctx, value_range(0) < value_range(1),\n         errors::InvalidArgument(\"value_range should satisfy value_range[0] < \"\n                                 \"value_range[1], but got '[\",\n                                 value_range(0), \", \", value_range(1), \"]'\"));\n     OP_REQUIRES(\n-        ctx, (nbins > 0),\n+        ctx, nbins > 0,\n         errors::InvalidArgument(\"nbins should be a positive number, but got '\",\n                                 nbins, \"'\"));",
      "code_diff":"@@ -50,6 +50,15 @@ struct HistogramFixedWidthFunctor<CPUDevice, T, Tout> {\n                         static_cast<double>(nbins);\n     const double nbins_minus_1 = static_cast<double>(nbins - 1);\n \n+    \/\/ We cannot handle NANs in the algorithm below (due to the case to int32)\n+    const Eigen::Tensor<int32, 1, 1> nans_tensor =\n+        values.isnan().template cast<int32>();\n+    const Eigen::Tensor<int32, 0, 1> reduced_tensor = nans_tensor.sum();\n+    const int num_nans = reduced_tensor(0);\n+    if (num_nans > 0) {\n+      return errors::InvalidArgument(\"Histogram values must not contain NaN\");\n+    }\n+\n     \/\/ The calculation is done by finding the slot of each value in `values`.\n     \/\/ With [a, b]:\n     \/\/   step = (b - a) \/ nbins\n@@ -98,12 +107,12 @@ class HistogramFixedWidthOp : public OpKernel {\n     const auto nbins = nbins_tensor.scalar<int32>()();\n \n     OP_REQUIRES(\n-        ctx, (value_range(0) < value_range(1)),\n+        ctx, value_range(0) < value_range(1),\n         errors::InvalidArgument(\"value_range should satisfy value_range[0] < \"\n                                 \"value_range[1], but got '[\",\n                                 value_range(0), \", \", value_range(1), \"]'\"));\n     OP_REQUIRES(\n-        ctx, (nbins > 0),\n+        ctx, nbins > 0,\n         errors::InvalidArgument(\"nbins should be a positive number, but got '\",\n                                 nbins, \"'\"));"
    },
    {
      "index":30,
      "vuln_id":"GHSA-2h63-qp69-fwvw",
      "cwe_id":"{'CWE-918', 'CWE-20'}",
      "score":8.2,
      "chain":"{'https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6'}",
      "dataset":"osv",
      "summary":"Server-side request forgery (SSRF) in Apache Batik Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",
      "published_date":"2022-01-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/apache\/xmlgraphics-batik",
      "commit_href":"https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6",
      "commit_sha":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "patch":"SINGLE",
      "chain_ord":"['0ef5b661a1f77772d1110877ea9e0287987098f6']",
      "before_first_fix_commit":"{'f16e092d0c2ccee07360446e0d4adaa4be5daa1b'}",
      "last_fix_commit":"0ef5b661a1f77772d1110877ea9e0287987098f6",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/02\/2020, 13:59:37",
      "message":"BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "author":"Simon Steiner",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/xmlgraphics-batik\/raw\/0ef5b661a1f77772d1110877ea9e0287987098f6\/batik-svgbrowser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbatik%2Fapps%2Fsvgbrowser%2FNodePickerPanel.java', 'patch': '@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\\n         Document doc = null;\\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n         try {\\n-            javax.xml.parsers.DocumentBuilder parser = factory\\n-                    .newDocumentBuilder();\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\\n             parser.setErrorHandler(new ErrorHandler() {\\n                 public void error(SAXParseException exception)\\n                         throws SAXException {'}}",
      "message_norm":"batik-1284: dont load dtds in nodepickerpanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "language":"da",
      "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java'])",
      "num_files":1.0,
      "patch_content":"From 0ef5b661a1f77772d1110877ea9e0287987098f6 Mon Sep 17 00:00:00 2001\nFrom: Simon Steiner <ssteiner@apache.org>\nDate: Tue, 2 Jun 2020 13:59:37 +0000\nSubject: [PATCH] BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68\n---\n ...\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java   | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\nindex 2a93e95a43..a5ad8e8b11 100644\n--- a\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n+++ b\/batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java\n@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {",
      "code_diff":"@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\n         Document doc = null;\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         try {\n-            javax.xml.parsers.DocumentBuilder parser = factory\n-                    .newDocumentBuilder();\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\n             parser.setErrorHandler(new ErrorHandler() {\n                 public void error(SAXParseException exception)\n                         throws SAXException {"
    },
    {
      "index":31,
      "vuln_id":"GHSA-h8pj-cxx2-jfg2",
      "cwe_id":"{'CWE-20'}",
      "score":9.1,
      "chain":"{'https:\/\/github.com\/encode\/httpx\/pull\/2185\/commits\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in httpx Encode OSS httpx <=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`.",
      "published_date":"2022-04-29",
      "chain_len":1,
      "project":"https:\/\/github.com\/encode\/httpx",
      "commit_href":"https:\/\/github.com\/encode\/httpx\/pull\/2185\/commits\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
      "commit_sha":"e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
      "patch":"SINGLE",
      "chain_ord":"['e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1']",
      "before_first_fix_commit":"{'b07fe7b0745e62be5ef9bce1bee9e7d7a8878552'}",
      "last_fix_commit":"e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/21\/2022, 06:22:38",
      "message":"Patch `copy_with`",
      "author":"lebr0nli",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
      "files":"{'httpx\/_urls.py': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/encode\/httpx\/raw\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1\/httpx%2F_urls.py', 'patch': '@@ -484,7 +484,11 @@ def copy_with(self, **kwargs: typing.Any) -> \"URL\":\\n         #  \\\\_\/   \\\\______________\/\\\\_________\/ \\\\_________\/ \\\\__\/\\n         #   |           |            |            |        |\\n         # scheme     authority       path        query   fragment\\n-        return URL(self._uri_reference.copy_with(**kwargs).unsplit())\\n+        new_url = URL(self)\\n+        new_url._uri_reference = self._uri_reference.copy_with(**kwargs)\\n+        if new_url.is_absolute_url:\\n+            new_url._uri_reference = new_url._uri_reference.normalize()\\n+        return URL(new_url)\\n \\n     def copy_set_param(self, key: str, value: typing.Any = None) -> \"URL\":\\n         return self.copy_with(params=self.params.set(key, value))'}}",
      "message_norm":"patch `copy_with`",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['httpx\/_urls.py'])",
      "num_files":1.0,
      "patch_content":"From e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1 Mon Sep 17 00:00:00 2001\nFrom: lebr0nli <alan.li.tw@gmail.com>\nDate: Thu, 21 Apr 2022 14:22:38 +0800\nSubject: [PATCH] Patch `copy_with`\n\n---\n httpx\/_urls.py | 6 +++++-\n 1 file changed, 5 insertions(+), 1 deletion(-)\n\ndiff --git a\/httpx\/_urls.py b\/httpx\/_urls.py\nindex 70486bc9e4..f6788e5568 100644\n--- a\/httpx\/_urls.py\n+++ b\/httpx\/_urls.py\n@@ -484,7 +484,11 @@ def copy_with(self, **kwargs: typing.Any) -> \"URL\":\n         #  \\_\/   \\______________\/\\_________\/ \\_________\/ \\__\/\n         #   |           |            |            |        |\n         # scheme     authority       path        query   fragment\n-        return URL(self._uri_reference.copy_with(**kwargs).unsplit())\n+        new_url = URL(self)\n+        new_url._uri_reference = self._uri_reference.copy_with(**kwargs)\n+        if new_url.is_absolute_url:\n+            new_url._uri_reference = new_url._uri_reference.normalize()\n+        return URL(new_url)\n \n     def copy_set_param(self, key: str, value: typing.Any = None) -> \"URL\":\n         return self.copy_with(params=self.params.set(key, value))",
      "code_diff":"@@ -484,7 +484,11 @@ def copy_with(self, **kwargs: typing.Any) -> \"URL\":\n         #  \\_\/   \\______________\/\\_________\/ \\_________\/ \\__\/\n         #   |           |            |            |        |\n         # scheme     authority       path        query   fragment\n-        return URL(self._uri_reference.copy_with(**kwargs).unsplit())\n+        new_url = URL(self)\n+        new_url._uri_reference = self._uri_reference.copy_with(**kwargs)\n+        if new_url.is_absolute_url:\n+            new_url._uri_reference = new_url._uri_reference.normalize()\n+        return URL(new_url)\n \n     def copy_set_param(self, key: str, value: typing.Any = None) -> \"URL\":\n         return self.copy_with(params=self.params.set(key, value))"
    },
    {
      "index":32,
      "vuln_id":"GHSA-qpv2-jxc7-3638",
      "cwe_id":"{'CWE-200'}",
      "score":4.3,
      "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/05c0819776b07425b2831cd31a8a0f4e7ac30c09'}",
      "dataset":"osv",
      "summary":"Exposure of Sensitive Information in snipe\/snipe-it Snipe-IT prior to v5.3.10 is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor.",
      "published_date":"2022-02-15",
      "chain_len":1,
      "project":"https:\/\/github.com\/snipe\/snipe-it",
      "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "commit_sha":"05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "patch":"SINGLE",
      "chain_ord":"['05c0819776b07425b2831cd31a8a0f4e7ac30c09']",
      "before_first_fix_commit":"{'16f963fa3d7c4875e9bccf6926629efe3530d00e'}",
      "last_fix_commit":"05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/11\/2022, 23:55:42",
      "message":"Updated language string\n\nSigned-off-by: snipe <snipe@snipe.net>",
      "author":"snipe",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'resources\/lang\/en\/passwords.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/05c0819776b07425b2831cd31a8a0f4e7ac30c09\/resources%2Flang%2Fen%2Fpasswords.php', 'patch': \"@@ -1,6 +1,6 @@\\n <?php\\n \\n return [\\n-    'sent'\\t        => 'Your password link has been sent!',\\n+    'sent'\\t        => 'Success: If that email address exists in our system, a password recovery email has been sent.',\\n     'user'\\t\\t\\t=> 'No matching active user found with that email.',\\n ];\"}}",
      "message_norm":"updated language string\n\nsigned-off-by: snipe <snipe@snipe.net>",
      "language":"en",
      "entities":"[('updated', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['resources\/lang\/en\/passwords.php'])",
      "num_files":1.0,
      "patch_content":"From 05c0819776b07425b2831cd31a8a0f4e7ac30c09 Mon Sep 17 00:00:00 2001\nFrom: snipe <snipe@snipe.net>\nDate: Fri, 11 Feb 2022 15:55:42 -0800\nSubject: [PATCH] Updated language string\n\nSigned-off-by: snipe <snipe@snipe.net>\n---\n resources\/lang\/en\/passwords.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/resources\/lang\/en\/passwords.php b\/resources\/lang\/en\/passwords.php\nindex 6205ef774d92..4772940015a5 100644\n--- a\/resources\/lang\/en\/passwords.php\n+++ b\/resources\/lang\/en\/passwords.php\n@@ -1,6 +1,6 @@\n <?php\n \n return [\n-    'sent'\t        => 'Your password link has been sent!',\n+    'sent'\t        => 'Success: If that email address exists in our system, a password recovery email has been sent.',\n     'user'\t\t\t=> 'No matching active user found with that email.',\n ];",
      "code_diff":"@@ -1,6 +1,6 @@\n <?php\n \n return [\n-    'sent'\t        => 'Your password link has been sent!',\n+    'sent'\t        => 'Success: If that email address exists in our system, a password recovery email has been sent.',\n     'user'\t\t\t=> 'No matching active user found with that email.',\n ];"
    },
    {
      "index":33,
      "vuln_id":"GHSA-xm9f-vxmx-4m58",
      "cwe_id":"{'CWE-20'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/OpenMage\/magento-lts\/commit\/34709ac642d554aa1824892059186dd329db744b'}",
      "dataset":"osv",
      "summary":"Data Flow Sanitation Issue Fix  ### Impact\nDue to missing sanitation in data flow it was possible for admin users to upload arbitrary executable files to the server.",
      "published_date":"2021-08-30",
      "chain_len":1,
      "project":"https:\/\/github.com\/OpenMage\/magento-lts",
      "commit_href":"https:\/\/github.com\/OpenMage\/magento-lts\/commit\/34709ac642d554aa1824892059186dd329db744b",
      "commit_sha":"34709ac642d554aa1824892059186dd329db744b",
      "patch":"SINGLE",
      "chain_ord":"['34709ac642d554aa1824892059186dd329db744b']",
      "before_first_fix_commit":"{'b99307d00b59c4a226a1e3e4083f02cf2fc8fce7'}",
      "last_fix_commit":"34709ac642d554aa1824892059186dd329db744b",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/26\/2021, 01:13:20",
      "message":"Merge pull request from GHSA-xm9f-vxmx-4m58\n\nCo-authored-by: Mark Lewis <markwlewis@Marks-MacBook-Pro.local>",
      "author":"Mark Lewis",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/OpenMage\/magento-lts\/raw\/34709ac642d554aa1824892059186dd329db744b\/app%2Fcode%2Fcore%2FMage%2FDataflow%2FModel%2FConvert%2FAdapter%2FIo.php', 'patch': \"@@ -49,7 +49,7 @@ public function getResource($forWrite = false)\\n             $isError = false;\\n \\n             $ioConfig = $this->getVars();\\n-            switch ($this->getVar('type', 'file')) {\\n+            switch (strtolower($this->getVar('type', 'file'))) {\\n                 case 'file':\\n                     \/\/validate export\/import path\\n                     $path = rtrim($ioConfig['path'], '\\\\\\\\\/')\"}}",
      "message_norm":"merge pull request from ghsa-xm9f-vxmx-4m58\n\nco-authored-by: mark lewis <markwlewis@marks-macbook-pro.local>",
      "language":"en",
      "entities":"[('ghsa-xm9f-vxmx-4m58', 'VULNID', 'GHSA')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php'])",
      "num_files":1.0,
      "patch_content":"From 34709ac642d554aa1824892059186dd329db744b Mon Sep 17 00:00:00 2001\nFrom: Mark Lewis <mark@netalico.com>\nDate: Wed, 25 Aug 2021 18:13:20 -0700\nSubject: [PATCH] Merge pull request from GHSA-xm9f-vxmx-4m58\n\nCo-authored-by: Mark Lewis <markwlewis@Marks-MacBook-Pro.local>\n---\n app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php b\/app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php\nindex 60cdb9c98bc..32a33805053 100644\n--- a\/app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php\n+++ b\/app\/code\/core\/Mage\/Dataflow\/Model\/Convert\/Adapter\/Io.php\n@@ -49,7 +49,7 @@ public function getResource($forWrite = false)\n             $isError = false;\n \n             $ioConfig = $this->getVars();\n-            switch ($this->getVar('type', 'file')) {\n+            switch (strtolower($this->getVar('type', 'file'))) {\n                 case 'file':\n                     \/\/validate export\/import path\n                     $path = rtrim($ioConfig['path'], '\\\\\/')",
      "code_diff":"@@ -49,7 +49,7 @@ public function getResource($forWrite = false)\n             $isError = false;\n \n             $ioConfig = $this->getVars();\n-            switch ($this->getVar('type', 'file')) {\n+            switch (strtolower($this->getVar('type', 'file'))) {\n                 case 'file':\n                     \/\/validate export\/import path\n                     $path = rtrim($ioConfig['path'], '\\\\\/')"
    },
    {
      "index":34,
      "vuln_id":"GHSA-4h44-w6fm-548g",
      "cwe_id":"{'CWE-325', 'CWE-200', 'CWE-502', 'CWE-20'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/FriendsOfTYPO3\/mediace\/commit\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75'}",
      "dataset":"osv",
      "summary":"Potential Remote Code Execution in TYPO3 with mediace extension > ### Meta\n> * CVSS: `CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (9.1)\n> * CWE-325, CWE-20, CWE-200, CWE-502\n\n### Problem\nIt has been discovered that an internal verification mechanism can be used to generate arbitrary checksums. This allows to inject arbitrary data having a valid cryptographic message authentication code (HMAC-SHA1) and can lead to various attack chains as described below.\n\n* [TYPO3-CORE-SA-2020-007](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2020-007), [CVE-2020-15099](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-15099): Potential Privilege Escalation\n  + the database server used for a TYPO3 installation must be accessible for an attacker (either via internet or shared hosting network)\n  + `CVSS:3.1\/AV:N\/AC:H\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (7.5, high)\n* [TYPO3-CORE-SA-2016-013](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2016-013), [CVE-2016-5091](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2016-5091): Insecure Deserialization & Remote Code Execution\n  + an attacker must have access to at least one Extbase plugin or module action in a TYPO3 installation\n  + `CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (9.1, critical)\n\nThe overall severity of this vulnerability is critical (9.1) based on mentioned attack chains and the fact it does not require any privileges.\n\n### Solution\nIn case the extension is not used and required at all, it is suggested to uninstall and remove it from the system completely. Otherwise, an updated version 7.6.5 is available from the TYPO3 extension manager, Packagist and the TYPO3 extension repository:\n\n* https:\/\/extensions.typo3.org\/extension\/download\/mediace\/7.6.5\/zip\/\n* https:\/\/packagist.org\/packages\/friendsoftypo3\/mediace#7.6.5\n\nAs a precautionary measure it is advised to change `encryptionKey` and database credentials in `typo3conf\/LocalConfiguration.php`.\n\n### Credits\nThanks to TYPO3 security team member Oliver Hader who reported and fixed the issue.\n\n### References\n* [TYPO3-EXT-SA-2020-014](https:\/\/typo3.org\/security\/advisory\/typo3-ext-sa-2020-014)",
      "published_date":"2020-07-29",
      "chain_len":1,
      "project":"https:\/\/github.com\/FriendsOfTYPO3\/mediace",
      "commit_href":"https:\/\/github.com\/FriendsOfTYPO3\/mediace\/commit\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "commit_sha":"fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "patch":"SINGLE",
      "chain_ord":"['fa29ffd3e8b275782a8600d2406e1b1e5e16ae75']",
      "before_first_fix_commit":"{'a06c3fdf310ea4d53e193f21a23e630a3cd9f608'}",
      "last_fix_commit":"fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/29\/2020, 13:39:55",
      "message":"[SECURITY] Restrict file validation hash generation\n\nSecurity-References: CVE-2020-15086",
      "author":"Oliver Hader",
      "comments":null,
      "stats":"{'additions': 7, 'deletions': 2, 'total': 9}",
      "files":"{'Resources\/PHP\/ValidateHashEID.php': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FriendsOfTYPO3\/mediace\/raw\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75\/Resources%2FPHP%2FValidateHashEID.php', 'patch': \"@@ -14,10 +14,15 @@\\n \\n call_user_func(function() {\\n     $value = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('value');\\n-    $addition = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('addition');\\n     $scope = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('scope');\\n \\n-    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, $addition);\\n+    if (!is_string($value) || empty($value)) {\\n+        \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::setResponseCodeAndExit(\\n+            \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::HTTP_STATUS_400\\n+        );\\n+    }\\n+\\n+    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, 'flashvars');\\n \\n     if ($scope === 'flashvars') {\\n         header('Content-type: application\/x-www-form-urlencoded');\"}}",
      "message_norm":"[security] restrict file validation hash generation\n\nsecurity-references: cve-2020-15086",
      "language":"en",
      "entities":"[('security', 'SECWORD', ''), ('hash', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cve-2020-15086', 'VULNID', 'CVE')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['Resources\/PHP\/ValidateHashEID.php'])",
      "num_files":1.0,
      "patch_content":"From fa29ffd3e8b275782a8600d2406e1b1e5e16ae75 Mon Sep 17 00:00:00 2001\nFrom: Oliver Hader <oliver@typo3.org>\nDate: Mon, 29 Jun 2020 15:39:55 +0200\nSubject: [PATCH] [SECURITY] Restrict file validation hash generation\n\nSecurity-References: CVE-2020-15086\n---\n Resources\/PHP\/ValidateHashEID.php | 9 +++++++--\n 1 file changed, 7 insertions(+), 2 deletions(-)\n\ndiff --git a\/Resources\/PHP\/ValidateHashEID.php b\/Resources\/PHP\/ValidateHashEID.php\nindex e2ee58b..71f1481 100644\n--- a\/Resources\/PHP\/ValidateHashEID.php\n+++ b\/Resources\/PHP\/ValidateHashEID.php\n@@ -14,10 +14,15 @@\n \n call_user_func(function() {\n     $value = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('value');\n-    $addition = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('addition');\n     $scope = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('scope');\n \n-    $content = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::hmac($value, $addition);\n+    if (!is_string($value) || empty($value)) {\n+        \\TYPO3\\CMS\\Core\\Utility\\HttpUtility::setResponseCodeAndExit(\n+            \\TYPO3\\CMS\\Core\\Utility\\HttpUtility::HTTP_STATUS_400\n+        );\n+    }\n+\n+    $content = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::hmac($value, 'flashvars');\n \n     if ($scope === 'flashvars') {\n         header('Content-type: application\/x-www-form-urlencoded');",
      "code_diff":"@@ -14,10 +14,15 @@\n \n call_user_func(function() {\n     $value = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('value');\n-    $addition = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('addition');\n     $scope = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::_GET('scope');\n \n-    $content = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::hmac($value, $addition);\n+    if (!is_string($value) || empty($value)) {\n+        \\TYPO3\\CMS\\Core\\Utility\\HttpUtility::setResponseCodeAndExit(\n+            \\TYPO3\\CMS\\Core\\Utility\\HttpUtility::HTTP_STATUS_400\n+        );\n+    }\n+\n+    $content = \\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::hmac($value, 'flashvars');\n \n     if ($scope === 'flashvars') {\n         header('Content-type: application\/x-www-form-urlencoded');"
    },
    {
      "index":35,
      "vuln_id":"GHSA-832h-xg76-4gv6",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/juliangruber\/brace-expansion\/pull\/35\/commits\/b13381281cead487cbdbfd6a69fb097ea5e456c3'}",
      "dataset":"osv",
      "summary":"ReDoS in brace-expansion Affected versions of `brace-expansion` are vulnerable to a regular expression denial of service condition.\n\n## Proof of Concept\n\n```\nvar expand = require('brace-expansion');\nexpand('{,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\n}');\n```\n\n\n## Recommendation\n\nUpdate to version 1.1.7 or later.",
      "published_date":"2018-01-29",
      "chain_len":1,
      "project":"https:\/\/github.com\/juliangruber\/brace-expansion",
      "commit_href":"https:\/\/github.com\/juliangruber\/brace-expansion\/pull\/35\/commits\/b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "commit_sha":"b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "patch":"SINGLE",
      "chain_ord":"['b13381281cead487cbdbfd6a69fb097ea5e456c3']",
      "before_first_fix_commit":"{'265f6cd6586383eebebbfc3c45da2eaa153d9e63'}",
      "last_fix_commit":"b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/07\/2017, 02:32:55",
      "message":"fix bug in https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33",
      "author":"mengyuan.ymy",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/juliangruber\/brace-expansion\/raw\/b13381281cead487cbdbfd6a69fb097ea5e456c3\/index.js', 'patch': \"@@ -106,7 +106,7 @@ function expand(str, isTop) {\\n   var isNumericSequence = \/^-?\\\\d+\\\\.\\\\.-?\\\\d+(?:\\\\.\\\\.-?\\\\d+)?$\/.test(m.body);\\n   var isAlphaSequence = \/^[a-zA-Z]\\\\.\\\\.[a-zA-Z](?:\\\\.\\\\.-?\\\\d+)?$\/.test(m.body);\\n   var isSequence = isNumericSequence || isAlphaSequence;\\n-  var isOptions = \/^(.*,)+(.+)?$\/.test(m.body);\\n+  var isOptions = m.body.indexOf(',') >= 0;\\n   if (!isSequence && !isOptions) {\\n     \/\/ {a},b}\\n     if (m.post.match(\/,.*\\\\}\/)) {\"}}",
      "message_norm":"fix bug in https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33', 'FLAW', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From b13381281cead487cbdbfd6a69fb097ea5e456c3 Mon Sep 17 00:00:00 2001\nFrom: \"mengyuan.ymy\" <mengyuan.ymy@alibaba-inc.com>\nDate: Fri, 7 Apr 2017 10:32:55 +0800\nSubject: [PATCH] fix bug in\n https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33\n\n---\n index.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex 955f27c..0478be8 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -106,7 +106,7 @@ function expand(str, isTop) {\n   var isNumericSequence = \/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$\/.test(m.body);\n   var isAlphaSequence = \/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$\/.test(m.body);\n   var isSequence = isNumericSequence || isAlphaSequence;\n-  var isOptions = \/^(.*,)+(.+)?$\/.test(m.body);\n+  var isOptions = m.body.indexOf(',') >= 0;\n   if (!isSequence && !isOptions) {\n     \/\/ {a},b}\n     if (m.post.match(\/,.*\\}\/)) {",
      "code_diff":"@@ -106,7 +106,7 @@ function expand(str, isTop) {\n   var isNumericSequence = \/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$\/.test(m.body);\n   var isAlphaSequence = \/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$\/.test(m.body);\n   var isSequence = isNumericSequence || isAlphaSequence;\n-  var isOptions = \/^(.*,)+(.+)?$\/.test(m.body);\n+  var isOptions = m.body.indexOf(',') >= 0;\n   if (!isSequence && !isOptions) {\n     \/\/ {a},b}\n     if (m.post.match(\/,.*\\}\/)) {"
    },
    {
      "index":36,
      "vuln_id":"GHSA-qr2j-wrhx-4829",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/ethereum\/go-ethereum\/commit\/106d196ec4a6451efedc60ab15957f231fa85639'}",
      "dataset":"osv",
      "summary":"Improper Input Validation In Go Ethereum (aka geth) before 1.8.14, TraceChain in eth\/api_tracer.go does not verify that the end block is after the start block.",
      "published_date":"2021-05-18",
      "chain_len":1,
      "project":"https:\/\/github.com\/ethereum\/go-ethereum",
      "commit_href":"https:\/\/github.com\/ethereum\/go-ethereum\/commit\/106d196ec4a6451efedc60ab15957f231fa85639",
      "commit_sha":"106d196ec4a6451efedc60ab15957f231fa85639",
      "patch":"SINGLE",
      "chain_ord":"['106d196ec4a6451efedc60ab15957f231fa85639']",
      "before_first_fix_commit":"{'6d1e292eefa70b5cb76cd03ff61fc6c4550d7c36'}",
      "last_fix_commit":"106d196ec4a6451efedc60ab15957f231fa85639",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/21\/2018, 07:48:53",
      "message":"eth: ensure from<to when tracing chain (credits Chen Nan via bugbounty)",
      "author":"Martin Holst Swende",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'eth\/api_tracer.go': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ethereum\/go-ethereum\/raw\/106d196ec4a6451efedc60ab15957f231fa85639\/eth%2Fapi_tracer.go', 'patch': '@@ -119,6 +119,9 @@ func (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.Block\\n \\tif to == nil {\\n \\t\\treturn nil, fmt.Errorf(\"end block #%d not found\", end)\\n \\t}\\n+\\tif from.Number().Cmp(to.Number()) >= 0 {\\n+\\t\\treturn nil, fmt.Errorf(\"end block (#%d) needs to come after start block (#%d)\", end, start)\\n+\\t}\\n \\treturn api.traceChain(ctx, from, to, config)\\n }'}}",
      "message_norm":"eth: ensure from<to when tracing chain (credits chen nan via bugbounty)",
      "language":"en",
      "entities":"[('ensure', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['eth\/api_tracer.go'])",
      "num_files":1.0,
      "patch_content":"From 106d196ec4a6451efedc60ab15957f231fa85639 Mon Sep 17 00:00:00 2001\nFrom: Martin Holst Swende <martin@swende.se>\nDate: Tue, 21 Aug 2018 09:48:53 +0200\nSubject: [PATCH] eth: ensure from<to when tracing chain (credits Chen Nan via\n bugbounty)\n\n---\n eth\/api_tracer.go | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/eth\/api_tracer.go b\/eth\/api_tracer.go\nindex 722e2a6e329c..704a6cdbaa30 100644\n--- a\/eth\/api_tracer.go\n+++ b\/eth\/api_tracer.go\n@@ -119,6 +119,9 @@ func (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.Block\n \tif to == nil {\n \t\treturn nil, fmt.Errorf(\"end block #%d not found\", end)\n \t}\n+\tif from.Number().Cmp(to.Number()) >= 0 {\n+\t\treturn nil, fmt.Errorf(\"end block (#%d) needs to come after start block (#%d)\", end, start)\n+\t}\n \treturn api.traceChain(ctx, from, to, config)\n }",
      "code_diff":"@@ -119,6 +119,9 @@ func (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.Block\n \tif to == nil {\n \t\treturn nil, fmt.Errorf(\"end block #%d not found\", end)\n \t}\n+\tif from.Number().Cmp(to.Number()) >= 0 {\n+\t\treturn nil, fmt.Errorf(\"end block (#%d) needs to come after start block (#%d)\", end, start)\n+\t}\n \treturn api.traceChain(ctx, from, to, config)\n }"
    },
    {
      "index":37,
      "vuln_id":"GHSA-2hjr-fg6c-v2h6",
      "cwe_id":"{'CWE-200'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/HubSpot\/jinjava\/pull\/435\/commits\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165', 'https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b'}",
      "dataset":"osv",
      "summary":"Unauthorized access to Class instance in Jinjava Jinjava before 2.5.4 allow access to arbitrary classes by calling Java methods on objects passed into a Jinjava context. This could allow for abuse of the application class loader, including Arbitrary File Disclosure.",
      "published_date":"2022-02-09",
      "chain_len":2,
      "project":"https:\/\/github.com\/HubSpot\/jinjava",
      "commit_href":"https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b",
      "commit_sha":"5dfa5b87318744a4d020b66d5f7747acc36b213b",
      "patch":"MULTI",
      "chain_ord":"['5dfa5b87318744a4d020b66d5f7747acc36b213b', '1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165']",
      "before_first_fix_commit":"{'bfc6ecde3a98db02a00c87a3b905a0af907188f0'}",
      "last_fix_commit":"1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/13\/2020, 17:49:08",
      "message":"add method to blacklist",
      "author":"Matt Coley",
      "comments":null,
      "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
      "files":"{'src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/HubSpot\/jinjava\/raw\/5dfa5b87318744a4d020b66d5f7747acc36b213b\/src%2Fmain%2Fjava%2Fcom%2Fhubspot%2Fjinjava%2Fel%2Fext%2FJinjavaBeanELResolver.java', 'patch': '@@ -2,6 +2,7 @@\\n \\n import com.google.common.base.CaseFormat;\\n import com.google.common.collect.ImmutableSet;\\n+import java.lang.reflect.Method;\\n import java.util.Set;\\n import javax.el.BeanELResolver;\\n import javax.el.ELContext;\\n@@ -111,7 +112,12 @@ private String transformPropertyName(Object property) {\\n   }\\n \\n   private void checkRestrictedClass(Object o, Object method) {\\n-    if (o instanceof Class || o instanceof ClassLoader || o instanceof Thread) {\\n+    if (\\n+      o instanceof Class ||\\n+      o instanceof ClassLoader ||\\n+      o instanceof Thread ||\\n+      o instanceof Method\\n+    ) {\\n       throw new MethodNotFoundException(\\n         \"Cannot find method \\'\" + method + \"\\' in \" + o.getClass()\\n       );'}}",
      "message_norm":"add method to blacklist",
      "language":"cy",
      "entities":"[('add', 'ACTION', ''), ('blacklist', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java'])",
      "num_files":1.0,
      "patch_content":"From 5dfa5b87318744a4d020b66d5f7747acc36b213b Mon Sep 17 00:00:00 2001\nFrom: Matt Coley <mcoley@hubspot.com>\nDate: Mon, 13 Apr 2020 13:49:08 -0400\nSubject: [PATCH] add method to blacklist\n\n---\n ...\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java | 8 +++++++-\n 1 file changed, 7 insertions(+), 1 deletion(-)\n\ndiff --git a\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java b\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\nindex a2f541af6..958f2b3bd 100644\n--- a\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\n+++ b\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\n@@ -2,6 +2,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Method;\n import java.util.Set;\n import javax.el.BeanELResolver;\n import javax.el.ELContext;\n@@ -111,7 +112,12 @@ private String transformPropertyName(Object property) {\n   }\n \n   private void checkRestrictedClass(Object o, Object method) {\n-    if (o instanceof Class || o instanceof ClassLoader || o instanceof Thread) {\n+    if (\n+      o instanceof Class ||\n+      o instanceof ClassLoader ||\n+      o instanceof Thread ||\n+      o instanceof Method\n+    ) {\n       throw new MethodNotFoundException(\n         \"Cannot find method '\" + method + \"' in \" + o.getClass()\n       );",
      "code_diff":"@@ -2,6 +2,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Method;\n import java.util.Set;\n import javax.el.BeanELResolver;\n import javax.el.ELContext;\n@@ -111,7 +112,12 @@ private String transformPropertyName(Object property) {\n   }\n \n   private void checkRestrictedClass(Object o, Object method) {\n-    if (o instanceof Class || o instanceof ClassLoader || o instanceof Thread) {\n+    if (\n+      o instanceof Class ||\n+      o instanceof ClassLoader ||\n+      o instanceof Thread ||\n+      o instanceof Method\n+    ) {\n       throw new MethodNotFoundException(\n         \"Cannot find method '\" + method + \"' in \" + o.getClass()\n       );"
    },
    {
      "index":38,
      "vuln_id":"GHSA-24m3-w8g9-jwpq",
      "cwe_id":"{'CWE-178', 'CWE-200'}",
      "score":3.0,
      "chain":"{'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/47968d26a2fd3ed52da70dc09210921d612ce44e'}",
      "dataset":"osv",
      "summary":"Information disclosure of source code in SimpleSAMLphp ### Background\n\nThe module controller in `SimpleSAML\\Module` that processes requests for pages\nhosted by modules, has code to identify paths ending with `.php` and process\nthose as PHP code. If no other suitable way of handling the given path exists it\npresents the file to the browser.\n\n### Description\n\nThe check to identify paths ending with `.php` does not account for uppercase\nletters. If someone requests a path ending with e.g. `.PHP` and the server is\nserving the code from a case-insensitive file system, such as on Windows, the\nprocessing of the PHP code does not occur, and the source code is instead\npresented to the browser.\n\n### Affected versions\n\nSimpleSAMLphp versions **1.18.5 and older**.\n\n### Impact\n\nAn attacker may use this issue to gain access to the source code in third-party\nmodules that is meant to be private, or even sensitive. However, the attack\nsurface is considered small, as the attack will only work when SimpleSAMLphp\nserves such content from a file system that is not case-sensitive, such as on\nWindows.\n\n### Resolution\n\nUpgrade the SimpleSAMLphp installation to version **1.18.6**.\n\n### Credit\n\nThis vulnerability was discovered and reported by S\u0142awek Naczy\u0144ski.",
      "published_date":"2020-04-22",
      "chain_len":1,
      "project":"https:\/\/github.com\/simplesamlphp\/simplesamlphp",
      "commit_href":"https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/47968d26a2fd3ed52da70dc09210921d612ce44e",
      "commit_sha":"47968d26a2fd3ed52da70dc09210921d612ce44e",
      "patch":"SINGLE",
      "chain_ord":"['47968d26a2fd3ed52da70dc09210921d612ce44e']",
      "before_first_fix_commit":"{'228e4f2287fd5d73727178b87de7a9652bf1c5b0'}",
      "last_fix_commit":"47968d26a2fd3ed52da70dc09210921d612ce44e",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/16\/2020, 12:17:24",
      "message":"Fix source code disclosure on case-insensitive file systems\n\nIf the file system containing the PHP code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the PHP file to the browser instead of executing it.\n\nE.g. a request for this URL will return the source code:\n\n  https:\/sp.example.org\/simplesaml\/module.php\/core\/frontpage_welcome.PHP\n\nFix that by converting the path to lowercase before checking the file\nextension.\n\nSee the following page for details:\n\n  https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/GHSA-24m3-w8g9-jwpq",
      "author":"Olav Morken",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'lib\/SimpleSAML\/Module.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/raw\/47968d26a2fd3ed52da70dc09210921d612ce44e\/lib%2FSimpleSAML%2FModule.php', 'patch': \"@@ -259,7 +259,7 @@ function ($val) {\\n             throw new Error\\\\NotFound('The URL wasn\\\\'t found in the module.');\\n         }\\n \\n-        if (substr($path, -4) === '.php') {\\n+        if (mb_strtolower(substr($path, -4), 'UTF-8') === '.php') {\\n             \/\/ PHP file - attempt to run it\\n \\n             \/* In some environments, $_SERVER['SCRIPT_NAME'] is already set with $_SERVER['PATH_INFO']. Check for that\"}}",
      "message_norm":"fix source code disclosure on case-insensitive file systems\n\nif the file system containing the php code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the php file to the browser instead of executing it.\n\ne.g. a request for this url will return the source code:\n\n  https:\/sp.example.org\/simplesaml\/module.php\/core\/frontpage_welcome.php\n\nfix that by converting the path to lowercase before checking the file\nextension.\n\nsee the following page for details:\n\n  https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/ghsa-24m3-w8g9-jwpq",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('disclosure', 'SECWORD', ''), ('https:\/sp.example.org', 'URL', ''), ('https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/ghsa-24m3-w8g9-jwpq', 'URL', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/SimpleSAML\/Module.php'])",
      "num_files":1.0,
      "patch_content":"From 47968d26a2fd3ed52da70dc09210921d612ce44e Mon Sep 17 00:00:00 2001\nFrom: Olav Morken <olav.morken@uninett.no>\nDate: Thu, 16 Apr 2020 14:17:24 +0200\nSubject: [PATCH] Fix source code disclosure on case-insensitive file systems\n\nIf the file system containing the PHP code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the PHP file to the browser instead of executing it.\n\nE.g. a request for this URL will return the source code:\n\n  https:\/sp.example.org\/simplesaml\/module.php\/core\/frontpage_welcome.PHP\n\nFix that by converting the path to lowercase before checking the file\nextension.\n\nSee the following page for details:\n\n  https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/GHSA-24m3-w8g9-jwpq\n---\n lib\/SimpleSAML\/Module.php | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/lib\/SimpleSAML\/Module.php b\/lib\/SimpleSAML\/Module.php\nindex d6f5c79cad..dfe056a38f 100644\n--- a\/lib\/SimpleSAML\/Module.php\n+++ b\/lib\/SimpleSAML\/Module.php\n@@ -259,7 +259,7 @@ function ($val) {\n             throw new Error\\NotFound('The URL wasn\\'t found in the module.');\n         }\n \n-        if (substr($path, -4) === '.php') {\n+        if (mb_strtolower(substr($path, -4), 'UTF-8') === '.php') {\n             \/\/ PHP file - attempt to run it\n \n             \/* In some environments, $_SERVER['SCRIPT_NAME'] is already set with $_SERVER['PATH_INFO']. Check for that",
      "code_diff":"@@ -259,7 +259,7 @@ function ($val) {\n             throw new Error\\NotFound('The URL wasn\\'t found in the module.');\n         }\n \n-        if (substr($path, -4) === '.php') {\n+        if (mb_strtolower(substr($path, -4), 'UTF-8') === '.php') {\n             \/\/ PHP file - attempt to run it\n \n             \/* In some environments, $_SERVER['SCRIPT_NAME'] is already set with $_SERVER['PATH_INFO']. Check for that"
    },
    {
      "index":39,
      "vuln_id":"GHSA-f2rp-4rv7-fc95",
      "cwe_id":"{'CWE-200'}",
      "score":7.8,
      "chain":"{'https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/pull\/184\/commits\/b7e910bf61563f5d447c71b1b41e2a373a794d7b'}",
      "dataset":"osv",
      "summary":"Exposure of Sensitive Information to an Unauthorized Actor in foreman_fog_proxmox A flaw was found in the Foreman project. The Proxmox compute resource exposes the password through the API to an authenticated local attacker with view_hosts permission. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability. Versions before foreman_fog_proxmox 0.13.1 are affected",
      "published_date":"2021-06-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/theforeman\/foreman_fog_proxmox",
      "commit_href":"https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/pull\/184\/commits\/b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "commit_sha":"b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "patch":"SINGLE",
      "chain_ord":"['b7e910bf61563f5d447c71b1b41e2a373a794d7b']",
      "before_first_fix_commit":"{'f131382d265944cda85bb5765a6dc5b0b2715f61'}",
      "last_fix_commit":"b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/23\/2021, 21:00:19",
      "message":"Fix clean API result",
      "author":"Markus Bucher",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/raw\/b7e910bf61563f5d447c71b1b41e2a373a794d7b\/app%2Fviews%2Fapi%2Fv2%2Fcompute_resources%2Fproxmox.json.rabl', 'patch': '@@ -1,3 +1,3 @@\\n # frozen_string_literal: true\\n \\n-attributes :url, :user, :password, :ssl_verify_peer, :ssl_certs, :renew\\n+attributes :url, :user, :ssl_verify_peer, :ssl_certs, :renew'}}",
      "message_norm":"fix clean api result",
      "language":"ro",
      "entities":"[('fix', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl'])",
      "num_files":1.0,
      "patch_content":"From b7e910bf61563f5d447c71b1b41e2a373a794d7b Mon Sep 17 00:00:00 2001\nFrom: Markus Bucher <bucher@atix.de>\nDate: Tue, 23 Feb 2021 22:00:19 +0100\nSubject: [PATCH] Fix clean API result\n\n---\n app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl b\/app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl\nindex 9de2e523f..043421707 100644\n--- a\/app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl\n+++ b\/app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl\n@@ -1,3 +1,3 @@\n # frozen_string_literal: true\n \n-attributes :url, :user, :password, :ssl_verify_peer, :ssl_certs, :renew\n+attributes :url, :user, :ssl_verify_peer, :ssl_certs, :renew",
      "code_diff":"@@ -1,3 +1,3 @@\n # frozen_string_literal: true\n \n-attributes :url, :user, :password, :ssl_verify_peer, :ssl_certs, :renew\n+attributes :url, :user, :ssl_verify_peer, :ssl_certs, :renew"
    },
    {
      "index":40,
      "vuln_id":"GHSA-v82p-hv3v-p6qp",
      "cwe_id":"{'CWE-20'}",
      "score":7.8,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69'}",
      "dataset":"osv",
      "summary":"Incomplete validation in MKL requantization ### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date":"2021-08-25",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69",
      "commit_sha":"9e62869465573cb2d9b5053f1fa02a81fce21d69",
      "patch":"MULTI",
      "chain_ord":"['9e62869465573cb2d9b5053f1fa02a81fce21d69', '203214568f5bc237603dbab6e1fd389f1572f5c9']",
      "before_first_fix_commit":"{'aff0d5b2883ea3de9b52f9e7cd996a34b299bf06'}",
      "last_fix_commit":"203214568f5bc237603dbab6e1fd389f1572f5c9",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/29\/2021, 23:29:20",
      "message":"Add more validation to `RequantizationRangePerChannel`.\n\nPiperOrigin-RevId: 387693946\nChange-Id: Ife8dcbdb021bec4787eef6a4361dd08f17c14bd6",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
      "files":"{'tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/9e62869465573cb2d9b5053f1fa02a81fce21d69\/tensorflow%2Fcore%2Fkernels%2Fmkl%2Fmkl_requantization_range_per_channel_op.cc', 'patch': '@@ -57,6 +57,20 @@ class MklRequantizationRangePerChannelOp : public OpKernel {\\n         ctx, input_max.dim_size(0) == depth,\\n         errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n                                 depth, \" was \", input_max.dim_size(0)));\\n+    OP_REQUIRES(\\n+        ctx, input_min.NumElements() == depth,\\n+        errors::InvalidArgument(\"input_min must have the same number of \"\\n+                                \"elements as input_max, got \",\\n+                                input_min.NumElements(), \" and \", depth));\\n+    OP_REQUIRES(ctx, input.NumElements() > 0,\\n+                errors::InvalidArgument(\"input must not be empty\"));\\n+    OP_REQUIRES(ctx, input.dims() == 4,\\n+                errors::InvalidArgument(\"input must be in NHWC format\"));\\n+    OP_REQUIRES(\\n+        ctx, input.dim_size(3) == depth,\\n+        errors::InvalidArgument(\\n+            \"input must have same number of channels as length of input_min: \",\\n+            input.dim_size(3), \" vs \", depth));\\n \\n     const float* input_min_data = input_min.flat<float>().data();\\n     const float* input_max_data = input_max.flat<float>().data();'}}",
      "message_norm":"add more validation to `requantizationrangeperchannel`.\n\npiperorigin-revid: 387693946\nchange-id: ife8dcbdb021bec4787eef6a4361dd08f17c14bd6",
      "language":"en",
      "entities":"[('add', 'ACTION', ''), ('387693946', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 9e62869465573cb2d9b5053f1fa02a81fce21d69 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 29 Jul 2021 16:29:20 -0700\nSubject: [PATCH] Add more validation to `RequantizationRangePerChannel`.\n\nPiperOrigin-RevId: 387693946\nChange-Id: Ife8dcbdb021bec4787eef6a4361dd08f17c14bd6\n---\n ...\/mkl\/mkl_requantization_range_per_channel_op.cc | 14 ++++++++++++++\n 1 file changed, 14 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc b\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc\nindex 24dabb07ca067a..a38df2450d1942 100644\n--- a\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc\n+++ b\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc\n@@ -57,6 +57,20 @@ class MklRequantizationRangePerChannelOp : public OpKernel {\n         ctx, input_max.dim_size(0) == depth,\n         errors::InvalidArgument(\"input_max has incorrect size, expected \",\n                                 depth, \" was \", input_max.dim_size(0)));\n+    OP_REQUIRES(\n+        ctx, input_min.NumElements() == depth,\n+        errors::InvalidArgument(\"input_min must have the same number of \"\n+                                \"elements as input_max, got \",\n+                                input_min.NumElements(), \" and \", depth));\n+    OP_REQUIRES(ctx, input.NumElements() > 0,\n+                errors::InvalidArgument(\"input must not be empty\"));\n+    OP_REQUIRES(ctx, input.dims() == 4,\n+                errors::InvalidArgument(\"input must be in NHWC format\"));\n+    OP_REQUIRES(\n+        ctx, input.dim_size(3) == depth,\n+        errors::InvalidArgument(\n+            \"input must have same number of channels as length of input_min: \",\n+            input.dim_size(3), \" vs \", depth));\n \n     const float* input_min_data = input_min.flat<float>().data();\n     const float* input_max_data = input_max.flat<float>().data();",
      "code_diff":"@@ -57,6 +57,20 @@ class MklRequantizationRangePerChannelOp : public OpKernel {\n         ctx, input_max.dim_size(0) == depth,\n         errors::InvalidArgument(\"input_max has incorrect size, expected \",\n                                 depth, \" was \", input_max.dim_size(0)));\n+    OP_REQUIRES(\n+        ctx, input_min.NumElements() == depth,\n+        errors::InvalidArgument(\"input_min must have the same number of \"\n+                                \"elements as input_max, got \",\n+                                input_min.NumElements(), \" and \", depth));\n+    OP_REQUIRES(ctx, input.NumElements() > 0,\n+                errors::InvalidArgument(\"input must not be empty\"));\n+    OP_REQUIRES(ctx, input.dims() == 4,\n+                errors::InvalidArgument(\"input must be in NHWC format\"));\n+    OP_REQUIRES(\n+        ctx, input.dim_size(3) == depth,\n+        errors::InvalidArgument(\n+            \"input must have same number of channels as length of input_min: \",\n+            input.dim_size(3), \" vs \", depth));\n \n     const float* input_min_data = input_min.flat<float>().data();\n     const float* input_max_data = input_max.flat<float>().data();"
    },
    {
      "index":41,
      "vuln_id":"GHSA-pm9p-9926-w68m",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/71ce93988ead4b561a8592168c72143907189f01'}",
      "dataset":"osv",
      "summary":"Denial of Service in ecstatic `ecstatic`, a simple static file server middleware, is vulnerable to denial of service. If a payload with a large number of null bytes (`%00`) is provided by an attacker it can crash ecstatic by running it out of memory.\n\n\n[Results from the original advisory](https:\/\/www.checkmarx.com\/advisories\/denial-of-service-dos-vulnerability-in-ecstatic-npm-package\/)\n\n```\nA payload of 22kB caused a lag of 1 second,\nA payload of 35kB caused a lag of 3 seconds,\nA payload of 86kB caused the server to crash\n```\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later.",
      "published_date":"2017-12-28",
      "chain_len":1,
      "project":"https:\/\/github.com\/jfhbrook\/node-ecstatic",
      "commit_href":"https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/71ce93988ead4b561a8592168c72143907189f01",
      "commit_sha":"71ce93988ead4b561a8592168c72143907189f01",
      "patch":"SINGLE",
      "chain_ord":"['71ce93988ead4b561a8592168c72143907189f01']",
      "before_first_fix_commit":"{'2fceb40fb9eeaaba29f5d2c3b63583fefb04a130'}",
      "last_fix_commit":"71ce93988ead4b561a8592168c72143907189f01",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/09\/2016, 16:37:39",
      "message":"Remove stripping of null bytes\n\nThis was at one point necessary because of an old bug in url.parse\n\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n\nBut this opens up a regex dos attack vector! D:\n\nBased on some research (ie asking #node-dev if this is still an issue),\nit's *probably* not an issue. :)",
      "author":"Joshua Holbrook",
      "comments":null,
      "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
      "files":"{'lib\/ecstatic.js': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jfhbrook\/node-ecstatic\/raw\/71ce93988ead4b561a8592168c72143907189f01\/lib%2Fecstatic.js', 'patch': \"@@ -52,9 +52,21 @@ var ecstatic = module.exports = function (dir, options) {\\n   return function middleware (req, res, next) {\\n \\n     \/\/ Strip any null bytes from the url\\n+    \/\/ This was at one point necessary because of an old bug in url.parse\\n+    \/\/\\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\\n+    \/\/\\n+    \/\/ But this opens up a regex dos attack vector! D:\\n+    \/\/\\n+    \/\/ Based on some research (ie asking #node-dev if this is still an issue),\\n+    \/\/ it's *probably* not an issue. :)\\n+    \/*\\n     while(req.url.indexOf('%00') !== -1) {\\n       req.url = req.url.replace(\/\\\\%00\/g, '');\\n     }\\n+    *\/\\n+\\n     \/\/ Figure out the path for the file from the given url\\n     var parsed = url.parse(req.url);\\n     try {\"}}",
      "message_norm":"remove stripping of null bytes\n\nthis was at one point necessary because of an old bug in url.parse\n\nsee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\nsee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n\nbut this opens up a regex dos attack vector! d:\n\nbased on some research (ie asking #node-dev if this is still an issue),\nit's *probably* not an issue. :)",
      "language":"en",
      "entities":"[('remove', 'ACTION', ''), ('bug', 'FLAW', ''), ('https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914', 'FLAW', ''), ('https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4', 'SHA', 'github_url_sha'), ('dos', 'SECWORD', ''), ('attack vector', 'SECWORD', ''), ('issue', 'FLAW', ''), ('issue', 'FLAW', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/ecstatic.js'])",
      "num_files":1.0,
      "patch_content":"From 71ce93988ead4b561a8592168c72143907189f01 Mon Sep 17 00:00:00 2001\nFrom: Joshua Holbrook <josh.holbrook@gmail.com>\nDate: Tue, 9 Aug 2016 12:37:39 -0400\nSubject: [PATCH] Remove stripping of null bytes\n\nThis was at one point necessary because of an old bug in url.parse\n\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n\nBut this opens up a regex dos attack vector! D:\n\nBased on some research (ie asking #node-dev if this is still an issue),\nit's *probably* not an issue. :)\n---\n lib\/ecstatic.js | 12 ++++++++++++\n 1 file changed, 12 insertions(+)\n\ndiff --git a\/lib\/ecstatic.js b\/lib\/ecstatic.js\nindex 115de99..efc333e 100755\n--- a\/lib\/ecstatic.js\n+++ b\/lib\/ecstatic.js\n@@ -52,9 +52,21 @@ var ecstatic = module.exports = function (dir, options) {\n   return function middleware (req, res, next) {\n \n     \/\/ Strip any null bytes from the url\n+    \/\/ This was at one point necessary because of an old bug in url.parse\n+    \/\/\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n+    \/\/\n+    \/\/ But this opens up a regex dos attack vector! D:\n+    \/\/\n+    \/\/ Based on some research (ie asking #node-dev if this is still an issue),\n+    \/\/ it's *probably* not an issue. :)\n+    \/*\n     while(req.url.indexOf('%00') !== -1) {\n       req.url = req.url.replace(\/\\%00\/g, '');\n     }\n+    *\/\n+\n     \/\/ Figure out the path for the file from the given url\n     var parsed = url.parse(req.url);\n     try {",
      "code_diff":"@@ -52,9 +52,21 @@ var ecstatic = module.exports = function (dir, options) {\n   return function middleware (req, res, next) {\n \n     \/\/ Strip any null bytes from the url\n+    \/\/ This was at one point necessary because of an old bug in url.parse\n+    \/\/\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n+    \/\/\n+    \/\/ But this opens up a regex dos attack vector! D:\n+    \/\/\n+    \/\/ Based on some research (ie asking #node-dev if this is still an issue),\n+    \/\/ it's *probably* not an issue. :)\n+    \/*\n     while(req.url.indexOf('%00') !== -1) {\n       req.url = req.url.replace(\/\\%00\/g, '');\n     }\n+    *\/\n+\n     \/\/ Figure out the path for the file from the given url\n     var parsed = url.parse(req.url);\n     try {"
    },
    {
      "index":42,
      "vuln_id":"GHSA-cwpm-f78v-7m5c",
      "cwe_id":"{'CWE-400', 'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e'}",
      "dataset":"osv",
      "summary":"Denial of service in `tf.ragged.constant` due to lack of validation ### Impact\nThe implementation of [`tf.ragged.constant`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:\n\n```python\nimport tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55199).",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e",
      "commit_sha":"bd4d5583ff9c8df26d47a23e508208844297310e",
      "patch":"SINGLE",
      "chain_ord":"['bd4d5583ff9c8df26d47a23e508208844297310e']",
      "before_first_fix_commit":"{'e74ef072ecd54ca54f3940ce9b98af796ded2a1a'}",
      "last_fix_commit":"bd4d5583ff9c8df26d47a23e508208844297310e",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/15\/2022, 16:11:43",
      "message":"Prevent denial of service in `tf.ragged.constant`\n\nFixes #55199\n\nPiperOrigin-RevId: 442029525",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/bd4d5583ff9c8df26d47a23e508208844297310e\/tensorflow%2Fpython%2Fops%2Fragged%2Fragged_factory_ops.py', 'patch': '@@ -188,6 +188,9 @@ def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,\\n     if max_depth > scalar_depth:\\n       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"\\n                        \"than scalar value nesting\" % pylist)\\n+    if ragged_rank is not None and max_depth < ragged_rank:\\n+      raise ValueError(f\"Invalid pylist={pylist}, max depth smaller than \"\\n+                       f\"ragged_rank={ragged_rank}\")\\n \\n   # If both inner_shape and ragged_rank were specified, then check that\\n   # they are compatible with pylist.'}}",
      "message_norm":"prevent denial of service in `tf.ragged.constant`\n\nfixes #55199\n\npiperorigin-revid: 442029525",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#55199', 'ISSUE', ''), ('442029525', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py'])",
      "num_files":1.0,
      "patch_content":"From bd4d5583ff9c8df26d47a23e508208844297310e Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Fri, 15 Apr 2022 09:11:43 -0700\nSubject: [PATCH] Prevent denial of service in `tf.ragged.constant`\n\nFixes #55199\n\nPiperOrigin-RevId: 442029525\n---\n tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py b\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py\nindex a1906c469beb46..457b3a04618a81 100644\n--- a\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py\n+++ b\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py\n@@ -188,6 +188,9 @@ def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,\n     if max_depth > scalar_depth:\n       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"\n                        \"than scalar value nesting\" % pylist)\n+    if ragged_rank is not None and max_depth < ragged_rank:\n+      raise ValueError(f\"Invalid pylist={pylist}, max depth smaller than \"\n+                       f\"ragged_rank={ragged_rank}\")\n \n   # If both inner_shape and ragged_rank were specified, then check that\n   # they are compatible with pylist.",
      "code_diff":"@@ -188,6 +188,9 @@ def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,\n     if max_depth > scalar_depth:\n       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"\n                        \"than scalar value nesting\" % pylist)\n+    if ragged_rank is not None and max_depth < ragged_rank:\n+      raise ValueError(f\"Invalid pylist={pylist}, max depth smaller than \"\n+                       f\"ragged_rank={ragged_rank}\")\n \n   # If both inner_shape and ragged_rank were specified, then check that\n   # they are compatible with pylist."
    },
    {
      "index":43,
      "vuln_id":"GHSA-j259-6c58-9m58",
      "cwe_id":"{'CWE-20'}",
      "score":9.3,
      "chain":"{'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5'}",
      "dataset":"osv",
      "summary":"loopback-connector-postgresql Vulnerable to Improper Sanitization of `contains` Filter Improper input validation on the `contains` LoopBack filter may allow for arbitrary SQL injection.\n\n### Impact\n\nWhen the extended filter property `contains` is permitted to be interpreted by the Postgres connector, it is possible to inject arbitrary SQL which may affect the confidentiality and integrity of data stored on the connected database.\n\nThis affects users who does any of the following:\n\n- Connect to the database via the DataSource with `allowExtendedProperties: true` setting OR\n- Uses the connector's CRUD methods directly OR\n- Uses the connector's other methods to interpret the LoopBack filter.\n\n### Patches\n\nPatch release `loopback-connector-postgresql@5.5.1` has been published of which resolves this issue.\n\n### Workarounds\n\nUsers who are unable to upgrade should do the following if applicable:\n\n- Remove `allowExtendedProperties: true` DataSource setting\n- Add `allowExtendedProperties: false` DataSource setting\n- When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand.",
      "published_date":"2022-08-11",
      "chain_len":1,
      "project":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql",
      "commit_href":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5",
      "commit_sha":"d57406c6737692a3a106b58a35406290cddb23e5",
      "patch":"SINGLE",
      "chain_ord":"['d57406c6737692a3a106b58a35406290cddb23e5']",
      "before_first_fix_commit":"{'1a863f3df332f1732e8fec519f1d686561313a3e'}",
      "last_fix_commit":"d57406c6737692a3a106b58a35406290cddb23e5",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/04\/2022, 11:27:20",
      "message":"fix: improve filter sanitisation\n\nAdd sanitisation of user-input for `contains` LoopBack filter which may allow for arbitrary SQL injection.\n\nSigned-off-by: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>",
      "author":"Rifa Achrinza",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
      "files":"{'lib\/postgresql.js': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/raw\/d57406c6737692a3a106b58a35406290cddb23e5\/lib%2Fpostgresql.js', 'patch': \"@@ -545,10 +545,11 @@ PostgreSQL.prototype.buildExpression = function(columnName, operator,\\n       return new ParameterizedSQL(columnName + regexOperator,\\n         [operatorValue.source]);\\n     case 'contains':\\n-      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map((v) => `'${v}'`) + ']::'\\n-        + propertyDefinition.postgresql.dataType);\\n+      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map(() => '?') + ']::'\\n+        + propertyDefinition.postgresql.dataType,\\n+        operatorValue);\\n     case 'match':\\n-      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery('${operatorValue}')`);\\n+      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery(?)`, [operatorValue]);\\n     default:\\n       \/\/ invoke the base implementation of `buildExpression`\\n       return this.invokeSuper('buildExpression', columnName, operator,\"}}",
      "message_norm":"fix: improve filter sanitisation\n\nadd sanitisation of user-input for `contains` loopback filter which may allow for arbitrary sql injection.\n\nsigned-off-by: rifa achrinza <25147899+achrinza@users.noreply.github.com>",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('add', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('sql injection', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/postgresql.js'])",
      "num_files":1.0,
      "patch_content":"From d57406c6737692a3a106b58a35406290cddb23e5 Mon Sep 17 00:00:00 2001\nFrom: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>\nDate: Thu, 4 Aug 2022 19:27:20 +0800\nSubject: [PATCH] fix: improve filter sanitisation\n\nAdd sanitisation of user-input for `contains` LoopBack filter which may allow for arbitrary SQL injection.\n\nSigned-off-by: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>\n---\n lib\/postgresql.js | 7 ++++---\n 1 file changed, 4 insertions(+), 3 deletions(-)\n\ndiff --git a\/lib\/postgresql.js b\/lib\/postgresql.js\nindex 8ba9724e..8cb28a72 100644\n--- a\/lib\/postgresql.js\n+++ b\/lib\/postgresql.js\n@@ -545,10 +545,11 @@ PostgreSQL.prototype.buildExpression = function(columnName, operator,\n       return new ParameterizedSQL(columnName + regexOperator,\n         [operatorValue.source]);\n     case 'contains':\n-      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map((v) => `'${v}'`) + ']::'\n-        + propertyDefinition.postgresql.dataType);\n+      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map(() => '?') + ']::'\n+        + propertyDefinition.postgresql.dataType,\n+        operatorValue);\n     case 'match':\n-      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery('${operatorValue}')`);\n+      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery(?)`, [operatorValue]);\n     default:\n       \/\/ invoke the base implementation of `buildExpression`\n       return this.invokeSuper('buildExpression', columnName, operator,",
      "code_diff":"@@ -545,10 +545,11 @@ PostgreSQL.prototype.buildExpression = function(columnName, operator,\n       return new ParameterizedSQL(columnName + regexOperator,\n         [operatorValue.source]);\n     case 'contains':\n-      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map((v) => `'${v}'`) + ']::'\n-        + propertyDefinition.postgresql.dataType);\n+      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map(() => '?') + ']::'\n+        + propertyDefinition.postgresql.dataType,\n+        operatorValue);\n     case 'match':\n-      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery('${operatorValue}')`);\n+      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery(?)`, [operatorValue]);\n     default:\n       \/\/ invoke the base implementation of `buildExpression`\n       return this.invokeSuper('buildExpression', columnName, operator,"
    },
    {
      "index":44,
      "vuln_id":"GHSA-hm3x-jwwf-jpr9",
      "cwe_id":"{'CWE-200', 'CWE-668'}",
      "score":4.3,
      "chain":"{'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/160936df134a471cfd245bd60964046027a571ea', 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515'}",
      "dataset":"osv",
      "summary":"Exposure of Sensitive Information to an Unauthorized Actor in OpenStack tripleo-heat-templates An information exposure flaw in openstack-tripleo-heat-templates allows an external user to discover the internal IP or hostname. An attacker could exploit this by checking the `www_authenticate_uri parameter` (which is visible to all end users) in configuration files. This would give sensitive information which may aid in additional system exploitation. A patch is available on the `master` branch and anticipated to be part of version 11.6.1.",
      "published_date":"2022-03-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/openstack\/tripleo-heat-templates",
      "commit_href":"https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
      "commit_sha":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
      "patch":"MULTI",
      "chain_ord":"['160936df134a471cfd245bd60964046027a571ea', '2b9461e97fc5c4ceb0848d1cc4484f656bb85515']",
      "before_first_fix_commit":"{'ea4d002dde779e84c25c983aa3534cf62fe9386f'}",
      "last_fix_commit":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
      "chain_ord_pos":2.0,
      "commit_datetime":"01\/06\/2022, 01:32:48",
      "message":"Fix remaining usage of internal url for www_authenticate_uri\n\nThis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nRelated-Bug: #1955397\nChange-Id: Ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
      "author":"Takashi Kajinami",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'deployment\/ironic\/ironic-api-container-puppet.yaml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/raw\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515\/deployment%2Fironic%2Fironic-api-container-puppet.yaml', 'patch': \"@@ -163,7 +163,7 @@ outputs:\\n             ironic::api::authtoken::user_domain_name: 'Default'\\n             ironic::api::authtoken::project_domain_name: 'Default'\\n             ironic::api::authtoken::username: 'ironic'\\n-            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n+            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix]}\\n             ironic::api::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n             ironic::api::authtoken::region_name: {get_param: KeystoneRegion}\\n             ironic::api::authtoken::interface: 'internal'\"}}",
      "message_norm":"fix remaining usage of internal url for www_authenticate_uri\n\nthis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nrelated-bug: #1955397\nchange-id: ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('160936df134a471cfd245bd60964046027a571ea', 'SHA', 'generic_sha'), ('fixes', 'ACTION', ''), ('keystone_authtoken', 'SECWORD', ''), ('bug', 'FLAW', ''), ('#1955397', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['deployment\/ironic\/ironic-api-container-puppet.yaml'])",
      "num_files":1.0,
      "patch_content":"From 2b9461e97fc5c4ceb0848d1cc4484f656bb85515 Mon Sep 17 00:00:00 2001\nFrom: Takashi Kajinami <tkajinam@redhat.com>\nDate: Thu, 6 Jan 2022 10:32:48 +0900\nSubject: [PATCH] Fix remaining usage of internal url for www_authenticate_uri\n\nThis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nRelated-Bug: #1955397\nChange-Id: Ib2ee7295c7fcda276e4fcf011a9e427e041f4848\n---\n deployment\/ironic\/ironic-api-container-puppet.yaml | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/deployment\/ironic\/ironic-api-container-puppet.yaml b\/deployment\/ironic\/ironic-api-container-puppet.yaml\nindex eb7eeffaab..ae0039c3b9 100644\n--- a\/deployment\/ironic\/ironic-api-container-puppet.yaml\n+++ b\/deployment\/ironic\/ironic-api-container-puppet.yaml\n@@ -163,7 +163,7 @@ outputs:\n             ironic::api::authtoken::user_domain_name: 'Default'\n             ironic::api::authtoken::project_domain_name: 'Default'\n             ironic::api::authtoken::username: 'ironic'\n-            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\n+            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix]}\n             ironic::api::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\n             ironic::api::authtoken::region_name: {get_param: KeystoneRegion}\n             ironic::api::authtoken::interface: 'internal'",
      "code_diff":"@@ -163,7 +163,7 @@ outputs:\n             ironic::api::authtoken::user_domain_name: 'Default'\n             ironic::api::authtoken::project_domain_name: 'Default'\n             ironic::api::authtoken::username: 'ironic'\n-            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\n+            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix]}\n             ironic::api::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\n             ironic::api::authtoken::region_name: {get_param: KeystoneRegion}\n             ironic::api::authtoken::interface: 'internal'"
    },
    {
      "index":45,
      "vuln_id":"GHSA-wh98-p28r-vrc9",
      "cwe_id":"{'CWE-200'}",
      "score":7.4,
      "chain":"{'https:\/\/github.com\/rails\/rails\/commit\/f9a2ad03943d5c2ba54e1d45f155442b519c75da'}",
      "dataset":"osv",
      "summary":"Exposure of information in Action Pack ### Impact\n\nUnder certain circumstances response bodies will not be closed, for example a [bug in a webserver](https:\/\/github.com\/puma\/puma\/pull\/2812) or a bug in a Rack middleware.  In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request.  This can lead to data being leaked to subsequent requests, especially when interacting with `ActiveSupport::CurrentAttributes`.\n\nUpgrading to the FIXED versions of Rails will ensure mitigation of this issue even in the context of a buggy webserver or middleware implementation.\n\n### Patches\n\nThis has been fixed in Rails 7.0.2.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\n### Workarounds\n\nUpgrading is highly recommended, but to work around this problem the following middleware can be used:\n\n```ruby\nclass GuardedExecutor < ActionDispatch::Executor\n  def call(env)\n    ensure_completed!\n    super\n  end\n\n  private\n\n    def ensure_completed!\n      @executor.new.complete! if @executor.active?\n    end\nend\n\n# Ensure the guard is inserted before ActionDispatch::Executor\nRails.application.configure do\n  config.middleware.swap ActionDispatch::Executor, GuardedExecutor, executor\nend\n```",
      "published_date":"2022-02-11",
      "chain_len":1,
      "project":"https:\/\/github.com\/rails\/rails",
      "commit_href":"https:\/\/github.com\/rails\/rails\/commit\/f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "commit_sha":"f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "patch":"SINGLE",
      "chain_ord":"['f9a2ad03943d5c2ba54e1d45f155442b519c75da']",
      "before_first_fix_commit":"{'761a2e25520566d932c41c740b8a5c513d839de8'}",
      "last_fix_commit":"f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "chain_ord_pos":1.0,
      "commit_datetime":"02\/11\/2022, 19:23:01",
      "message":"Fix reloader to work with new Executor signature\n\nThis is a follow up to [CVE-2022-23633].",
      "author":"Aaron Patterson",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'activesupport\/lib\/active_support\/reloader.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rails\/rails\/raw\/f9a2ad03943d5c2ba54e1d45f155442b519c75da\/activesupport%2Flib%2Factive_support%2Freloader.rb', 'patch': '@@ -58,7 +58,7 @@ def self.reload!\\n       prepare!\\n     end\\n \\n-    def self.run! # :nodoc:\\n+    def self.run!(reset: false) # :nodoc:\\n       if check!\\n         super\\n       else'}}",
      "message_norm":"fix reloader to work with new executor signature\n\nthis is a follow up to [cve-2022-23633].",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('signature', 'SECWORD', ''), ('cve-2022-23633', 'VULNID', 'CVE')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['activesupport\/lib\/active_support\/reloader.rb'])",
      "num_files":1.0,
      "patch_content":"From f9a2ad03943d5c2ba54e1d45f155442b519c75da Mon Sep 17 00:00:00 2001\nFrom: Aaron Patterson <aaron@rubyonrails.org>\nDate: Fri, 11 Feb 2022 11:23:01 -0800\nSubject: [PATCH] Fix reloader to work with new Executor signature\n\nThis is a follow up to [CVE-2022-23633].\n---\n activesupport\/lib\/active_support\/reloader.rb | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/activesupport\/lib\/active_support\/reloader.rb b\/activesupport\/lib\/active_support\/reloader.rb\nindex 2f81cd4f80b8b..e751866a270f8 100644\n--- a\/activesupport\/lib\/active_support\/reloader.rb\n+++ b\/activesupport\/lib\/active_support\/reloader.rb\n@@ -58,7 +58,7 @@ def self.reload!\n       prepare!\n     end\n \n-    def self.run! # :nodoc:\n+    def self.run!(reset: false) # :nodoc:\n       if check!\n         super\n       else",
      "code_diff":"@@ -58,7 +58,7 @@ def self.reload!\n       prepare!\n     end\n \n-    def self.run! # :nodoc:\n+    def self.run!(reset: false) # :nodoc:\n       if check!\n         super\n       else"
    },
    {
      "index":46,
      "vuln_id":"GHSA-cv3f-px9r-54hm",
      "cwe_id":"{'CWE-200'}",
      "score":4.7,
      "chain":"{'https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf'}",
      "dataset":"osv",
      "summary":"Phusion Passenger information disclosure In agent\/Core\/SpawningKit\/Spawner.h in Phusion Passenger 5.1.10 (fixed in Passenger Open Source 5.1.11 and Passenger Enterprise 5.1.10), if Passenger is running as root, it is possible to list the contents of arbitrary files on a system by symlinking a file named REVISION from the application root folder to a file of choice and querying passenger-status --show=xml.",
      "published_date":"2022-05-13",
      "chain_len":1,
      "project":"https:\/\/github.com\/phusion\/passenger",
      "commit_href":"https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf",
      "commit_sha":"4043718264095cde6623c2cbe8c644541036d7bf",
      "patch":"SINGLE",
      "chain_ord":"['4043718264095cde6623c2cbe8c644541036d7bf']",
      "before_first_fix_commit":"{'a63f1e9cd8148dfaac08b00d74ef2b59bc2c9dd4'}",
      "last_fix_commit":"4043718264095cde6623c2cbe8c644541036d7bf",
      "chain_ord_pos":1.0,
      "commit_datetime":"10\/11\/2017, 13:55:07",
      "message":"Disable unused feature.",
      "author":"Daniel Knoppel (Phusion)",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
      "files":"{'src\/agent\/Core\/SpawningKit\/Spawner.h': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/phusion\/passenger\/raw\/4043718264095cde6623c2cbe8c644541036d7bf\/src%2Fagent%2FCore%2FSpawningKit%2FSpawner.h', 'patch': '@@ -721,7 +721,6 @@ class Spawner {\\n \\t\\tprepareChroot(info, options);\\n \\t\\tinfo.userSwitching = prepareUserSwitching(options);\\n \\t\\tprepareSwitchingWorkingDirectory(info, options);\\n-\\t\\tinferApplicationInfo(info);\\n \\t\\treturn info;\\n \\t}\\n \\n@@ -775,6 +774,7 @@ class Spawner {\\n \\t\\tassert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);\\n \\t}\\n \\n+#ifdef false\\n \\tvoid inferApplicationInfo(SpawnPreparationInfo &info) const {\\n \\t\\tinfo.codeRevision = readFromRevisionFile(info);\\n \\t\\tif (info.codeRevision.empty()) {\\n@@ -817,6 +817,7 @@ class Spawner {\\n \\t\\t\\treturn string();\\n \\t\\t}\\n \\t}\\n+#endif\\n \\n \\tbool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {\\n \\t\\tif (options.loadShellEnvvars) {'}}",
      "message_norm":"disable unused feature.",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/agent\/Core\/SpawningKit\/Spawner.h'])",
      "num_files":1.0,
      "patch_content":"From 4043718264095cde6623c2cbe8c644541036d7bf Mon Sep 17 00:00:00 2001\nFrom: \"Daniel Knoppel (Phusion)\" <daniel@phusion.nl>\nDate: Wed, 11 Oct 2017 15:55:07 +0200\nSubject: [PATCH] Disable unused feature.\n\n---\n src\/agent\/Core\/SpawningKit\/Spawner.h | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a\/src\/agent\/Core\/SpawningKit\/Spawner.h b\/src\/agent\/Core\/SpawningKit\/Spawner.h\nindex e65034ae91..99dedb852f 100644\n--- a\/src\/agent\/Core\/SpawningKit\/Spawner.h\n+++ b\/src\/agent\/Core\/SpawningKit\/Spawner.h\n@@ -721,7 +721,6 @@ class Spawner {\n \t\tprepareChroot(info, options);\n \t\tinfo.userSwitching = prepareUserSwitching(options);\n \t\tprepareSwitchingWorkingDirectory(info, options);\n-\t\tinferApplicationInfo(info);\n \t\treturn info;\n \t}\n \n@@ -775,6 +774,7 @@ class Spawner {\n \t\tassert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);\n \t}\n \n+#ifdef false\n \tvoid inferApplicationInfo(SpawnPreparationInfo &info) const {\n \t\tinfo.codeRevision = readFromRevisionFile(info);\n \t\tif (info.codeRevision.empty()) {\n@@ -817,6 +817,7 @@ class Spawner {\n \t\t\treturn string();\n \t\t}\n \t}\n+#endif\n \n \tbool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {\n \t\tif (options.loadShellEnvvars) {",
      "code_diff":"@@ -721,7 +721,6 @@ class Spawner {\n \t\tprepareChroot(info, options);\n \t\tinfo.userSwitching = prepareUserSwitching(options);\n \t\tprepareSwitchingWorkingDirectory(info, options);\n-\t\tinferApplicationInfo(info);\n \t\treturn info;\n \t}\n \n@@ -775,6 +774,7 @@ class Spawner {\n \t\tassert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);\n \t}\n \n+#ifdef false\n \tvoid inferApplicationInfo(SpawnPreparationInfo &info) const {\n \t\tinfo.codeRevision = readFromRevisionFile(info);\n \t\tif (info.codeRevision.empty()) {\n@@ -817,6 +817,7 @@ class Spawner {\n \t\t\treturn string();\n \t\t}\n \t}\n+#endif\n \n \tbool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {\n \t\tif (options.loadShellEnvvars) {"
    },
    {
      "index":47,
      "vuln_id":"GHSA-g6ww-v8xp-vmwg",
      "cwe_id":"{'CWE-1321', 'CWE-20'}",
      "score":7.2,
      "chain":"{'https:\/\/github.com\/chaijs\/pathval\/pull\/58\/commits\/21a9046cfa0c2697cb41990f3b4316db410e6c8a'}",
      "dataset":"osv",
      "summary":"Prototype pollution in pathval A prototype pollution vulnerability affects all versions of package pathval under 1.1.1.",
      "published_date":"2022-02-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/chaijs\/pathval",
      "commit_href":"https:\/\/github.com\/chaijs\/pathval\/pull\/58\/commits\/21a9046cfa0c2697cb41990f3b4316db410e6c8a",
      "commit_sha":"21a9046cfa0c2697cb41990f3b4316db410e6c8a",
      "patch":"SINGLE",
      "chain_ord":"['21a9046cfa0c2697cb41990f3b4316db410e6c8a']",
      "before_first_fix_commit":"{'a1230184a33a18f4eb3a92817e9b7492e8082903'}",
      "last_fix_commit":"21a9046cfa0c2697cb41990f3b4316db410e6c8a",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/25\/2020, 12:37:44",
      "message":"fix: \ud83d\udc1b fix prototype pollution",
      "author":"Adam Gold",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'index.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chaijs\/pathval\/raw\/21a9046cfa0c2697cb41990f3b4316db410e6c8a\/index.js', 'patch': '@@ -76,6 +76,9 @@ function parsePath(path) {\\n   var str = path.replace(\/([^\\\\\\\\])\\\\[\/g, \\'$1.[\\');\\n   var parts = str.match(\/(\\\\\\\\\\\\.|[^.]+?)+\/g);\\n   return parts.map(function mapMatches(value) {\\n+    if (value === \"constructor\" || value === \"__proto__\" || value === \"prototype\") {\\n+      return {}\\n+    }\\n     var regexp = \/^\\\\[(\\\\d+)\\\\]$\/;\\n     var mArr = regexp.exec(value);\\n     var parsed = null;'}}",
      "message_norm":"fix: \ud83d\udc1b fix prototype pollution",
      "language":"fr",
      "entities":"[('fix', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 21a9046cfa0c2697cb41990f3b4316db410e6c8a Mon Sep 17 00:00:00 2001\nFrom: Adam Gold <adamgold7@gmail.com>\nDate: Tue, 25 Aug 2020 15:37:44 +0300\nSubject: [PATCH] =?UTF-8?q?fix:=20=F0=9F=90=9B=20fix=20prototype=20polluti?=\n =?UTF-8?q?on?=\nMIME-Version: 1.0\nContent-Type: text\/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\n---\n index.js | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/index.js b\/index.js\nindex 1ec2148..a5b46c3 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -76,6 +76,9 @@ function parsePath(path) {\n   var str = path.replace(\/([^\\\\])\\[\/g, '$1.[');\n   var parts = str.match(\/(\\\\\\.|[^.]+?)+\/g);\n   return parts.map(function mapMatches(value) {\n+    if (value === \"constructor\" || value === \"__proto__\" || value === \"prototype\") {\n+      return {}\n+    }\n     var regexp = \/^\\[(\\d+)\\]$\/;\n     var mArr = regexp.exec(value);\n     var parsed = null;",
      "code_diff":"@@ -76,6 +76,9 @@ function parsePath(path) {\n   var str = path.replace(\/([^\\\\])\\[\/g, '$1.[');\n   var parts = str.match(\/(\\\\\\.|[^.]+?)+\/g);\n   return parts.map(function mapMatches(value) {\n+    if (value === \"constructor\" || value === \"__proto__\" || value === \"prototype\") {\n+      return {}\n+    }\n     var regexp = \/^\\[(\\d+)\\]$\/;\n     var mArr = regexp.exec(value);\n     var parsed = null;"
    },
    {
      "index":48,
      "vuln_id":"GHSA-hx9q-2mx4-m4pg",
      "cwe_id":"{'CWE-191', 'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943'}",
      "dataset":"osv",
      "summary":"Missing validation causes denial of service via `Conv3DBackpropFilterV2` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n\/\/ ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55305).",
      "published_date":"2022-05-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147",
      "commit_sha":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
      "patch":"MULTI",
      "chain_ord":"['84563f265f28b3c36a15335c8b005d405260e943', '20cb18724b0bf6c09071a3f53434c4eec53cc147']",
      "before_first_fix_commit":"{'3f30e4965889b1b86b1d56392e437ccc08907f65'}",
      "last_fix_commit":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
      "chain_ord_pos":2.0,
      "commit_datetime":"04\/20\/2022, 19:05:26",
      "message":"Allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nRelated to the fix for #55305\n\nPiperOrigin-RevId: 443157549",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
      "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/20cb18724b0bf6c09071a3f53434c4eec53cc147\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -94,8 +94,10 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n-    OP_REQUIRES(context, num_segments > 0,\\n-                errors::InvalidArgument(\"Number of segments must be positive\"));\\n+    OP_REQUIRES(\\n+        context, num_segments >= 0,\\n+        errors::InvalidArgument(\\n+            \"Number of segments must be non-negative but got \", num_segments));\\n     OP_REQUIRES(context, segment_dims != 0,\\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));'}}",
      "message_norm":"allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nrelated to the fix for #55305\n\npiperorigin-revid: 443157549",
      "language":"en",
      "entities":"[('#55305', 'ISSUE', ''), ('443157549', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 20cb18724b0bf6c09071a3f53434c4eec53cc147 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Wed, 20 Apr 2022 12:05:26 -0700\nSubject: [PATCH] Allow 0 for number of segments in\n `unsorted_segment_join_op.cc`\n\nRelated to the fix for #55305\n\nPiperOrigin-RevId: 443157549\n---\n tensorflow\/core\/kernels\/unsorted_segment_join_op.cc | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\nindex 860cec8010042c..c8445ca4c4c596 100644\n--- a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n+++ b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n@@ -94,8 +94,10 @@ class UnsortedSegmentJoinOp : public OpKernel {\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n-    OP_REQUIRES(context, num_segments > 0,\n-                errors::InvalidArgument(\"Number of segments must be positive\"));\n+    OP_REQUIRES(\n+        context, num_segments >= 0,\n+        errors::InvalidArgument(\n+            \"Number of segments must be non-negative but got \", num_segments));\n     OP_REQUIRES(context, segment_dims != 0,\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));",
      "code_diff":"@@ -94,8 +94,10 @@ class UnsortedSegmentJoinOp : public OpKernel {\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n-    OP_REQUIRES(context, num_segments > 0,\n-                errors::InvalidArgument(\"Number of segments must be positive\"));\n+    OP_REQUIRES(\n+        context, num_segments >= 0,\n+        errors::InvalidArgument(\n+            \"Number of segments must be non-negative but got \", num_segments));\n     OP_REQUIRES(context, segment_dims != 0,\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));"
    },
    {
      "index":49,
      "vuln_id":"GHSA-hxf9-7h4c-f5jv",
      "cwe_id":"{'CWE-200'}",
      "score":9.1,
      "chain":"{'https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b'}",
      "dataset":"osv",
      "summary":"Django-Anymail prone to a timing attack webhooks\/base.py in Anymail (aka django-anymail) before 1.2.1 is prone to a timing attack vulnerability on the WEBHOOK_AUTHORIZATION secret, which allows remote attackers to post arbitrary e-mail tracking events.",
      "published_date":"2018-07-12",
      "chain_len":2,
      "project":"https:\/\/github.com\/anymail\/django-anymail",
      "commit_href":"https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b",
      "commit_sha":"c07998304b4a31df4c61deddcb03d3607a04691b",
      "patch":"MULTI",
      "chain_ord":"['db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'c07998304b4a31df4c61deddcb03d3607a04691b']",
      "before_first_fix_commit":"{'7029298b930620b1655dab2548f72d6640a5905e'}",
      "last_fix_commit":"c07998304b4a31df4c61deddcb03d3607a04691b",
      "chain_ord_pos":2.0,
      "commit_datetime":"02\/02\/2018, 19:41:14",
      "message":"Security: prevent timing attack on WEBHOOK_AUTHORIZATION secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n\n(cherry picked from commit db586ede1fbb41dce21310ea28ae15a1cf1286c5)",
      "author":"medmunds",
      "comments":null,
      "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
      "files":"{'anymail\/webhooks\/base.py': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anymail\/django-anymail\/raw\/c07998304b4a31df4c61deddcb03d3607a04691b\/anymail%2Fwebhooks%2Fbase.py', 'patch': '@@ -3,6 +3,7 @@\\n \\n import six\\n from django.http import HttpResponse\\n+from django.utils.crypto import constant_time_compare\\n from django.utils.decorators import method_decorator\\n from django.views.decorators.csrf import csrf_exempt\\n from django.views.generic import View\\n@@ -41,8 +42,13 @@ def __init__(self, **kwargs):\\n     def validate_request(self, request):\\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\\n         if self.basic_auth:\\n-            basic_auth = get_request_basic_auth(request)\\n-            if basic_auth is None or basic_auth not in self.basic_auth:\\n+            request_auth = get_request_basic_auth(request)\\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It\\'s OK that any()\\n+            # can terminate early: we\\'re not trying to protect how many auth strings are allowed,\\n+            # just the contents of each individual auth string.)\\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\\n+                          for allowed_auth in self.basic_auth)\\n+            if not auth_ok:\\n                 # noinspection PyUnresolvedReferences\\n                 raise AnymailWebhookValidationFailure(\\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\\n@@ -78,8 +84,11 @@ def validate_request(self, request):\\n         *All* definitions of this method in the class chain (including mixins)\\n         will be called. There is no need to chain to the superclass.\\n         (See self.run_validators and collect_all_methods.)\\n+\\n+        Security note: use django.utils.crypto.constant_time_compare for string\\n+        comparisons, to avoid exposing your validation to a timing attack.\\n         \"\"\"\\n-        # if request.POST[\\'signature\\'] != expected_signature:\\n+        # if not constant_time_compare(request.POST[\\'signature\\'], expected_signature):\\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\\n         # (else just do nothing)\\n         pass'}}",
      "message_norm":"security: prevent timing attack on webhook_authorization secret\n\nanymail's webhook validation was vulnerable to a timing attack.\nan attacker could have used this to recover your webhook_authorization\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nthere have not been any reports of attempted exploit in the wild. (the\nvulnerability was discovered through code review.) attempts would be\nvisible in http logs as a very large number of 400 responses on\nanymail's webhook urls, or in python error monitoring as a very large\nnumber of anymailwebhookvalidationfailure exceptions.\n\nif you are using anymail's webhooks, you should upgrade to this release.\nin addition, you may want to rotate to a new webhook_authorization\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n\n(cherry picked from commit db586ede1fbb41dce21310ea28ae15a1cf1286c5)",
      "language":"en",
      "entities":"[('security', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attack', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attacker', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('error', 'FLAW', ''), ('upgrade', 'ACTION', ''), ('docs](http:\/\/anymail.readthedocs.io', 'URL', ''), ('exploit', 'SECWORD', ''), ('commit db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'SHA', 'prefix_colon_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['anymail\/webhooks\/base.py'])",
      "num_files":1.0,
      "patch_content":"From c07998304b4a31df4c61deddcb03d3607a04691b Mon Sep 17 00:00:00 2001\nFrom: medmunds <medmunds@gmail.com>\nDate: Fri, 2 Feb 2018 11:41:14 -0800\nSubject: [PATCH] Security: prevent timing attack on WEBHOOK_AUTHORIZATION\n secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n\n(cherry picked from commit db586ede1fbb41dce21310ea28ae15a1cf1286c5)\n---\n anymail\/webhooks\/base.py | 15 ++++++++++++---\n 1 file changed, 12 insertions(+), 3 deletions(-)\n\ndiff --git a\/anymail\/webhooks\/base.py b\/anymail\/webhooks\/base.py\nindex 1f98bc66..c54bfc96 100644\n--- a\/anymail\/webhooks\/base.py\n+++ b\/anymail\/webhooks\/base.py\n@@ -3,6 +3,7 @@\n \n import six\n from django.http import HttpResponse\n+from django.utils.crypto import constant_time_compare\n from django.utils.decorators import method_decorator\n from django.views.decorators.csrf import csrf_exempt\n from django.views.generic import View\n@@ -41,8 +42,13 @@ def __init__(self, **kwargs):\n     def validate_request(self, request):\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\n         if self.basic_auth:\n-            basic_auth = get_request_basic_auth(request)\n-            if basic_auth is None or basic_auth not in self.basic_auth:\n+            request_auth = get_request_basic_auth(request)\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It's OK that any()\n+            # can terminate early: we're not trying to protect how many auth strings are allowed,\n+            # just the contents of each individual auth string.)\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\n+                          for allowed_auth in self.basic_auth)\n+            if not auth_ok:\n                 # noinspection PyUnresolvedReferences\n                 raise AnymailWebhookValidationFailure(\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\n@@ -78,8 +84,11 @@ def validate_request(self, request):\n         *All* definitions of this method in the class chain (including mixins)\n         will be called. There is no need to chain to the superclass.\n         (See self.run_validators and collect_all_methods.)\n+\n+        Security note: use django.utils.crypto.constant_time_compare for string\n+        comparisons, to avoid exposing your validation to a timing attack.\n         \"\"\"\n-        # if request.POST['signature'] != expected_signature:\n+        # if not constant_time_compare(request.POST['signature'], expected_signature):\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\n         # (else just do nothing)\n         pass",
      "code_diff":"@@ -3,6 +3,7 @@\n \n import six\n from django.http import HttpResponse\n+from django.utils.crypto import constant_time_compare\n from django.utils.decorators import method_decorator\n from django.views.decorators.csrf import csrf_exempt\n from django.views.generic import View\n@@ -41,8 +42,13 @@ def __init__(self, **kwargs):\n     def validate_request(self, request):\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\n         if self.basic_auth:\n-            basic_auth = get_request_basic_auth(request)\n-            if basic_auth is None or basic_auth not in self.basic_auth:\n+            request_auth = get_request_basic_auth(request)\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It's OK that any()\n+            # can terminate early: we're not trying to protect how many auth strings are allowed,\n+            # just the contents of each individual auth string.)\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\n+                          for allowed_auth in self.basic_auth)\n+            if not auth_ok:\n                 # noinspection PyUnresolvedReferences\n                 raise AnymailWebhookValidationFailure(\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\n@@ -78,8 +84,11 @@ def validate_request(self, request):\n         *All* definitions of this method in the class chain (including mixins)\n         will be called. There is no need to chain to the superclass.\n         (See self.run_validators and collect_all_methods.)\n+\n+        Security note: use django.utils.crypto.constant_time_compare for string\n+        comparisons, to avoid exposing your validation to a timing attack.\n         \"\"\"\n-        # if request.POST['signature'] != expected_signature:\n+        # if not constant_time_compare(request.POST['signature'], expected_signature):\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\n         # (else just do nothing)\n         pass"
    },
    {
      "index":50,
      "vuln_id":"GHSA-8948-ffc6-jg52",
      "cwe_id":"{'CWE-20'}",
      "score":4.2,
      "chain":"{'https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516'}",
      "dataset":"osv",
      "summary":"Insecure Default Configuration in redbird Versions of `redbird` prior to 0.9.1 have a vulnerable default configuration of allowing TLS 1.0 connections on `lib\/proxy.js`. The package does not provide an option to disable TLS 1.0 which is deprecated and vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 0.9.1 or later.",
      "published_date":"2019-06-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/OptimalBits\/redbird",
      "commit_href":"https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516",
      "commit_sha":"39c7a2da84a2ddddfe046ea80e98800518920516",
      "patch":"SINGLE",
      "chain_ord":"['39c7a2da84a2ddddfe046ea80e98800518920516']",
      "before_first_fix_commit":"{'b0ba23a53e881204e4bca4cef75305edb4f9e8b4'}",
      "last_fix_commit":"39c7a2da84a2ddddfe046ea80e98800518920516",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/17\/2019, 16:07:54",
      "message":"Adding option to disable older SSL\/TLS versions\n\nSimply pass in \"secureOptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
      "author":"James Thomas",
      "comments":null,
      "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
      "files":"{'lib\/proxy.js': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/OptimalBits\/redbird\/raw\/39c7a2da84a2ddddfe046ea80e98800518920516\/lib%2Fproxy.js', 'patch': '@@ -252,6 +252,11 @@ ReverseProxy.prototype.setupHttpsProxy = function (proxy, websocketsUpgrade, log\\n     key: getCertData(sslOpts.key),\\n     cert: getCertData(sslOpts.cert)\\n   };\\n+  \\n+  \/\/ Allows the option to disable older SSL\/TLS versions\\n+  if(sslOpts.secureOptions) {\\n+    ssl.secureOptions = sslOpts.secureOptions;\\n+  }\\n \\n   if (sslOpts.ca) {\\n     ssl.ca = getCertData(sslOpts.ca, true);'}}",
      "message_norm":"adding option to disable older ssl\/tls versions\n\nsimply pass in \"secureoptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
      "language":"en",
      "entities":"[('adding', 'ACTION', ''), ('ssl', 'SECWORD', ''), ('tls', 'SECWORD', ''), ('secureoptions', 'SECWORD', ''), ('https proxy', 'SECWORD', ''), ('server', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/proxy.js'])",
      "num_files":1.0,
      "patch_content":"From 39c7a2da84a2ddddfe046ea80e98800518920516 Mon Sep 17 00:00:00 2001\nFrom: James Thomas <james9074@gmail.com>\nDate: Wed, 17 Apr 2019 12:07:54 -0400\nSubject: [PATCH] Adding option to disable older SSL\/TLS versions\n\nSimply pass in \"secureOptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.\n---\n lib\/proxy.js | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a\/lib\/proxy.js b\/lib\/proxy.js\nindex 7227f59..5980458 100755\n--- a\/lib\/proxy.js\n+++ b\/lib\/proxy.js\n@@ -252,6 +252,11 @@ ReverseProxy.prototype.setupHttpsProxy = function (proxy, websocketsUpgrade, log\n     key: getCertData(sslOpts.key),\n     cert: getCertData(sslOpts.cert)\n   };\n+  \n+  \/\/ Allows the option to disable older SSL\/TLS versions\n+  if(sslOpts.secureOptions) {\n+    ssl.secureOptions = sslOpts.secureOptions;\n+  }\n \n   if (sslOpts.ca) {\n     ssl.ca = getCertData(sslOpts.ca, true);",
      "code_diff":"@@ -252,6 +252,11 @@ ReverseProxy.prototype.setupHttpsProxy = function (proxy, websocketsUpgrade, log\n     key: getCertData(sslOpts.key),\n     cert: getCertData(sslOpts.cert)\n   };\n+  \n+  \/\/ Allows the option to disable older SSL\/TLS versions\n+  if(sslOpts.secureOptions) {\n+    ssl.secureOptions = sslOpts.secureOptions;\n+  }\n \n   if (sslOpts.ca) {\n     ssl.ca = getCertData(sslOpts.ca, true);"
    },
    {
      "index":51,
      "vuln_id":"GHSA-5wpj-c6f7-24x8",
      "cwe_id":"{'CWE-475', 'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a5b89cd68c02329d793356bda85d079e9e69b4e7', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dbdd98c37bc25249e8f288bd30d01e118a7b4498'}",
      "dataset":"osv",
      "summary":"Undefined behavior when users supply invalid resource handles ### Impact\nMultiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QueueIsClosedV2(handle=[])\n```\n\n```python\nimport tensorflow as tf\n\ntf.summary.flush(writer=())\n```\n  \nIn graph mode, it would have been impossible to perform these API calls, but migration to TF 2.x eager mode opened up this vulnerability. If the resource handle is empty, then a reference is bound to a null pointer inside TensorFlow codebase (various codepaths). This is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [a5b89cd68c02329d793356bda85d079e9e69b4e7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a5b89cd68c02329d793356bda85d079e9e69b4e7) and GitHub commit [dbdd98c37bc25249e8f288bd30d01e118a7b4498](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dbdd98c37bc25249e8f288bd30d01e118a7b4498).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Hong Jin from Singapore Management University.",
      "published_date":"2022-05-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a5b89cd68c02329d793356bda85d079e9e69b4e7",
      "commit_sha":"a5b89cd68c02329d793356bda85d079e9e69b4e7",
      "patch":"MULTI",
      "chain_ord":"['dbdd98c37bc25249e8f288bd30d01e118a7b4498', 'a5b89cd68c02329d793356bda85d079e9e69b4e7']",
      "before_first_fix_commit":"{'c2ce4c72fdc9658e23dd9d42cb9ed30bdd60c2a6'}",
      "last_fix_commit":"a5b89cd68c02329d793356bda85d079e9e69b4e7",
      "chain_ord_pos":2.0,
      "commit_datetime":"04\/30\/2022, 04:07:06",
      "message":"Fix empty resource handle vulnerability.\n\nSome ops that attempt to extract a resource handle from user input\ncan lead to nullptr dereferences.  This returns an error in such\na case.\n\nPiperOrigin-RevId: 445571938",
      "author":"Antonio Sanchez",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
      "files":"{'tensorflow\/core\/common_runtime\/eager\/execute.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a5b89cd68c02329d793356bda85d079e9e69b4e7\/tensorflow%2Fcore%2Fcommon_runtime%2Feager%2Fexecute.cc', 'patch': '@@ -304,6 +304,9 @@ Status GetDeviceForInput(const EagerOperation& op, const EagerContext& ctx,\\n     const Tensor* tensor;\\n     \/\/ TODO(fishx): Avoid blocking here.\\n     TF_RETURN_IF_ERROR(tensor_handle->Tensor(&tensor));\\n+    if (tensor->NumElements() == 0) {\\n+      return errors::InvalidArgument(\"Empty resource handle\");\\n+    }\\n     const ResourceHandle& handle = tensor->flat<ResourceHandle>()(0);\\n     device_name = handle.device();'}}",
      "message_norm":"fix empty resource handle vulnerability.\n\nsome ops that attempt to extract a resource handle from user input\ncan lead to nullptr dereferences.  this returns an error in such\na case.\n\npiperorigin-revid: 445571938",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('error', 'FLAW', ''), ('445571938', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/eager\/execute.cc'])",
      "num_files":1.0,
      "patch_content":"From a5b89cd68c02329d793356bda85d079e9e69b4e7 Mon Sep 17 00:00:00 2001\nFrom: Antonio Sanchez <cantonios@google.com>\nDate: Fri, 29 Apr 2022 21:07:06 -0700\nSubject: [PATCH] Fix empty resource handle vulnerability.\n\nSome ops that attempt to extract a resource handle from user input\ncan lead to nullptr dereferences.  This returns an error in such\na case.\n\nPiperOrigin-RevId: 445571938\n---\n tensorflow\/core\/common_runtime\/eager\/execute.cc | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a\/tensorflow\/core\/common_runtime\/eager\/execute.cc b\/tensorflow\/core\/common_runtime\/eager\/execute.cc\nindex dd64174a4ddeff..904996c7e64652 100644\n--- a\/tensorflow\/core\/common_runtime\/eager\/execute.cc\n+++ b\/tensorflow\/core\/common_runtime\/eager\/execute.cc\n@@ -304,6 +304,9 @@ Status GetDeviceForInput(const EagerOperation& op, const EagerContext& ctx,\n     const Tensor* tensor;\n     \/\/ TODO(fishx): Avoid blocking here.\n     TF_RETURN_IF_ERROR(tensor_handle->Tensor(&tensor));\n+    if (tensor->NumElements() == 0) {\n+      return errors::InvalidArgument(\"Empty resource handle\");\n+    }\n     const ResourceHandle& handle = tensor->flat<ResourceHandle>()(0);\n     device_name = handle.device();",
      "code_diff":"@@ -304,6 +304,9 @@ Status GetDeviceForInput(const EagerOperation& op, const EagerContext& ctx,\n     const Tensor* tensor;\n     \/\/ TODO(fishx): Avoid blocking here.\n     TF_RETURN_IF_ERROR(tensor_handle->Tensor(&tensor));\n+    if (tensor->NumElements() == 0) {\n+      return errors::InvalidArgument(\"Empty resource handle\");\n+    }\n     const ResourceHandle& handle = tensor->flat<ResourceHandle>()(0);\n     device_name = handle.device();"
    },
    {
      "index":52,
      "vuln_id":"GHSA-qfpc-5pjr-mh26",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764'}",
      "dataset":"osv",
      "summary":"Missing validation in shape inference for `Dequantize` ### Impact\nThe shape inference code for `tf.raw_ops.Dequantize` has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Dequantize(\n  input_tensor = tf.constant(-10.0, dtype=tf.float32),\n  input_tensor = tf.cast(input_tensor, dtype=tf.quint8),\n  min_range = tf.constant([], shape=[0], dtype=tf.float32),\n  max_range = tf.constant([], shape=[0], dtype=tf.float32),\n  mode  = 'MIN_COMBINED',\n  narrow_range=False,\n  axis=-10,\n  dtype=tf.dtypes.float32)\n```\n\nThe shape inference [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/ops\/array_ops.cc#L2999-L3014) uses `axis` to select between two different values for `minmax_rank` which is then used to retrieve tensor dimensions. However, code assumes that `axis` can be either `-1` or a value greater than `-1`, with no validation for the other values.\n\n### Patches\nWe have patched the issue in GitHub commit [da857cfa0fde8f79ad0afdbc94e88b5d4bbec764](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date":"2021-08-25",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764",
      "commit_sha":"da857cfa0fde8f79ad0afdbc94e88b5d4bbec764",
      "patch":"SINGLE",
      "chain_ord":"['da857cfa0fde8f79ad0afdbc94e88b5d4bbec764']",
      "before_first_fix_commit":"{'8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4'}",
      "last_fix_commit":"da857cfa0fde8f79ad0afdbc94e88b5d4bbec764",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/30\/2021, 01:24:18",
      "message":"Fix a shape inference issue leading to nullptr deref.\n\nPiperOrigin-RevId: 387712259\nChange-Id: I7e670772b259c068a501a187cd89f18773bb95a1",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'tensorflow\/core\/ops\/array_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764\/tensorflow%2Fcore%2Fops%2Farray_ops.cc', 'patch': '@@ -2990,6 +2990,10 @@ REGISTER_OP(\"Dequantize\")\\n       if (!s.ok() && s.code() != error::NOT_FOUND) {\\n         return s;\\n       }\\n+      if (axis < -1) {\\n+        return errors::InvalidArgument(\"axis should be at least -1, got \",\\n+                                       axis);\\n+      }\\n       const int minmax_rank = (axis == -1) ? 0 : 1;\\n       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\\n       ShapeHandle minmax;'}}",
      "message_norm":"fix a shape inference issue leading to nullptr deref.\n\npiperorigin-revid: 387712259\nchange-id: i7e670772b259c068a501a187cd89f18773bb95a1",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('nullptr', 'SECWORD', ''), ('387712259', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/ops\/array_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From da857cfa0fde8f79ad0afdbc94e88b5d4bbec764 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 29 Jul 2021 18:24:18 -0700\nSubject: [PATCH] Fix a shape inference issue leading to nullptr deref.\n\nPiperOrigin-RevId: 387712259\nChange-Id: I7e670772b259c068a501a187cd89f18773bb95a1\n---\n tensorflow\/core\/ops\/array_ops.cc | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/tensorflow\/core\/ops\/array_ops.cc b\/tensorflow\/core\/ops\/array_ops.cc\nindex 626afd58603705..3bd6f8a1038721 100644\n--- a\/tensorflow\/core\/ops\/array_ops.cc\n+++ b\/tensorflow\/core\/ops\/array_ops.cc\n@@ -2990,6 +2990,10 @@ REGISTER_OP(\"Dequantize\")\n       if (!s.ok() && s.code() != error::NOT_FOUND) {\n         return s;\n       }\n+      if (axis < -1) {\n+        return errors::InvalidArgument(\"axis should be at least -1, got \",\n+                                       axis);\n+      }\n       const int minmax_rank = (axis == -1) ? 0 : 1;\n       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n       ShapeHandle minmax;",
      "code_diff":"@@ -2990,6 +2990,10 @@ REGISTER_OP(\"Dequantize\")\n       if (!s.ok() && s.code() != error::NOT_FOUND) {\n         return s;\n       }\n+      if (axis < -1) {\n+        return errors::InvalidArgument(\"axis should be at least -1, got \",\n+                                       axis);\n+      }\n       const int minmax_rank = (axis == -1) ? 0 : 1;\n       TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n       ShapeHandle minmax;"
    },
    {
      "index":53,
      "vuln_id":"GHSA-2hjr-fg6c-v2h6",
      "cwe_id":"{'CWE-200'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/HubSpot\/jinjava\/pull\/435\/commits\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165', 'https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b'}",
      "dataset":"osv",
      "summary":"Unauthorized access to Class instance in Jinjava Jinjava before 2.5.4 allow access to arbitrary classes by calling Java methods on objects passed into a Jinjava context. This could allow for abuse of the application class loader, including Arbitrary File Disclosure.",
      "published_date":"2022-02-09",
      "chain_len":2,
      "project":"https:\/\/github.com\/HubSpot\/jinjava",
      "commit_href":"https:\/\/github.com\/HubSpot\/jinjava\/pull\/435\/commits\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
      "commit_sha":"1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
      "patch":"MULTI",
      "chain_ord":"['5dfa5b87318744a4d020b66d5f7747acc36b213b', '1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165']",
      "before_first_fix_commit":"{'bfc6ecde3a98db02a00c87a3b905a0af907188f0'}",
      "last_fix_commit":"1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
      "chain_ord_pos":2.0,
      "commit_datetime":"04\/28\/2020, 18:20:50",
      "message":"Add interpreter to blacklist",
      "author":"Matt Coley",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
      "files":"{'src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/HubSpot\/jinjava\/raw\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165\/src%2Fmain%2Fjava%2Fcom%2Fhubspot%2Fjinjava%2Fel%2Fext%2FJinjavaBeanELResolver.java', 'patch': '@@ -2,6 +2,7 @@\\n \\n import com.google.common.base.CaseFormat;\\n import com.google.common.collect.ImmutableSet;\\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\\n import java.lang.reflect.Constructor;\\n import java.lang.reflect.Field;\\n import java.lang.reflect.Method;\\n@@ -136,7 +137,8 @@ protected boolean isRestrictedClass(Object o) {\\n       o instanceof Thread ||\\n       o instanceof Method ||\\n       o instanceof Field ||\\n-      o instanceof Constructor\\n+      o instanceof Constructor ||\\n+      o instanceof JinjavaInterpreter\\n     );\\n   }\\n }'}}",
      "message_norm":"add interpreter to blacklist",
      "language":"sv",
      "entities":"[('add', 'ACTION', ''), ('blacklist', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java'])",
      "num_files":1.0,
      "patch_content":"From 1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165 Mon Sep 17 00:00:00 2001\nFrom: Matt Coley <mcoley@hubspot.com>\nDate: Tue, 28 Apr 2020 14:20:50 -0400\nSubject: [PATCH] Add interpreter to blacklist\n\n---\n ...\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java     | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java b\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\nindex 967afb0c4..30549acc9 100644\n--- a\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\n+++ b\/src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java\n@@ -2,6 +2,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.collect.ImmutableSet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n@@ -136,7 +137,8 @@ protected boolean isRestrictedClass(Object o) {\n       o instanceof Thread ||\n       o instanceof Method ||\n       o instanceof Field ||\n-      o instanceof Constructor\n+      o instanceof Constructor ||\n+      o instanceof JinjavaInterpreter\n     );\n   }\n }",
      "code_diff":"@@ -2,6 +2,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.collect.ImmutableSet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n@@ -136,7 +137,8 @@ protected boolean isRestrictedClass(Object o) {\n       o instanceof Thread ||\n       o instanceof Method ||\n       o instanceof Field ||\n-      o instanceof Constructor\n+      o instanceof Constructor ||\n+      o instanceof JinjavaInterpreter\n     );\n   }\n }"
    },
    {
      "index":54,
      "vuln_id":"GHSA-gxg6-rc6c-v673",
      "cwe_id":"{'CWE-20'}",
      "score":8.1,
      "chain":"{'https:\/\/github.com\/beanshell\/beanshell\/commit\/7c68fde2d6fc65e362f20863d868c112a90a9b49', 'https:\/\/github.com\/beanshell\/beanshell\/commit\/1ccc66bb693d4e46a34a904db8eeff07808d2ced'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in BeanShell BeanShell (bsh) before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler.",
      "published_date":"2022-05-13",
      "chain_len":2,
      "project":"https:\/\/github.com\/beanshell\/beanshell",
      "commit_href":"https:\/\/github.com\/beanshell\/beanshell\/commit\/7c68fde2d6fc65e362f20863d868c112a90a9b49",
      "commit_sha":"7c68fde2d6fc65e362f20863d868c112a90a9b49",
      "patch":"MULTI",
      "chain_ord":"['1ccc66bb693d4e46a34a904db8eeff07808d2ced', '7c68fde2d6fc65e362f20863d868c112a90a9b49']",
      "before_first_fix_commit":"{'1ccc66bb693d4e46a34a904db8eeff07808d2ced'}",
      "last_fix_commit":"7c68fde2d6fc65e362f20863d868c112a90a9b49",
      "chain_ord_pos":2.0,
      "commit_datetime":"02\/03\/2016, 01:03:20",
      "message":"Prevent deserialization of Handler",
      "author":"Stian Soiland-Reyes",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'src\/bsh\/XThis.java': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/beanshell\/beanshell\/raw\/7c68fde2d6fc65e362f20863d868c112a90a9b49\/src%2Fbsh%2FXThis.java', 'patch': '@@ -118,6 +118,10 @@ interface from JDK1.2 VM...\\n \\t*\/\\n \\tclass Handler implements InvocationHandler\\n \\t{\\n+\\t\\tprivate Object readResolve() throws ObjectStreamException {\\n+\\t\\t\\tthrow new NotSerializableException();\\n+\\t\\t}\\n+\\n \\t\\tpublic Object invoke( Object proxy, Method method, Object[] args )\\n \\t\\t\\tthrows Throwable\\n \\t\\t{'}}",
      "message_norm":"prevent deserialization of handler",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('deserialization', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/bsh\/XThis.java'])",
      "num_files":1.0,
      "patch_content":"From 7c68fde2d6fc65e362f20863d868c112a90a9b49 Mon Sep 17 00:00:00 2001\nFrom: Stian Soiland-Reyes <soiland-reyes@cs.manchester.ac.uk>\nDate: Wed, 3 Feb 2016 01:03:20 +0000\nSubject: [PATCH] Prevent deserialization of Handler\n\n---\n src\/bsh\/XThis.java | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/src\/bsh\/XThis.java b\/src\/bsh\/XThis.java\nindex 6f68b431c..f169fdc21 100644\n--- a\/src\/bsh\/XThis.java\n+++ b\/src\/bsh\/XThis.java\n@@ -118,6 +118,10 @@ interface from JDK1.2 VM...\n \t*\/\n \tclass Handler implements InvocationHandler\n \t{\n+\t\tprivate Object readResolve() throws ObjectStreamException {\n+\t\t\tthrow new NotSerializableException();\n+\t\t}\n+\n \t\tpublic Object invoke( Object proxy, Method method, Object[] args )\n \t\t\tthrows Throwable\n \t\t{",
      "code_diff":"@@ -118,6 +118,10 @@ interface from JDK1.2 VM...\n \t*\/\n \tclass Handler implements InvocationHandler\n \t{\n+\t\tprivate Object readResolve() throws ObjectStreamException {\n+\t\t\tthrow new NotSerializableException();\n+\t\t}\n+\n \t\tpublic Object invoke( Object proxy, Method method, Object[] args )\n \t\t\tthrows Throwable\n \t\t{"
    },
    {
      "index":55,
      "vuln_id":"GHSA-m648-33qf-v3gp",
      "cwe_id":"{'CWE-20'}",
      "score":4.4,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3'}",
      "dataset":"osv",
      "summary":"CHECK-fail in LSTM with zero-length input in TensorFlow ### Impact\nRunning an LSTM\/GRU model where the LSTM\/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.\n\nThis can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.\n\n### Patches\nWe have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date":"2020-12-10",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3",
      "commit_sha":"14755416e364f17fb1870882fa778c7fec7f16e3",
      "patch":"SINGLE",
      "chain_ord":"['14755416e364f17fb1870882fa778c7fec7f16e3']",
      "before_first_fix_commit":"{'042a6923d7f9ff05e7514bf6011e4ca30be70113'}",
      "last_fix_commit":"14755416e364f17fb1870882fa778c7fec7f16e3",
      "chain_ord_pos":1.0,
      "commit_datetime":"12\/08\/2020, 04:31:31",
      "message":"Prevent CHECK-fail in LSTM\/GRU with zero-length input.\n\nPiperOrigin-RevId: 346239181\nChange-Id: I5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
      "files":"{'tensorflow\/stream_executor\/cuda\/cuda_dnn.cc': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/14755416e364f17fb1870882fa778c7fec7f16e3\/tensorflow%2Fstream_executor%2Fcuda%2Fcuda_dnn.cc', 'patch': '@@ -1468,7 +1468,9 @@ class CudnnRnnSequenceTensorDescriptor\\n   static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();\\n@@ -1486,7 +1488,9 @@ class CudnnRnnSequenceTensorDescriptor\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       const absl::Span<const int>& seq_lengths, bool time_major,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();'}}",
      "message_norm":"prevent check-fail in lstm\/gru with zero-length input.\n\npiperorigin-revid: 346239181\nchange-id: i5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('346239181', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/stream_executor\/cuda\/cuda_dnn.cc'])",
      "num_files":1.0,
      "patch_content":"From 14755416e364f17fb1870882fa778c7fec7f16e3 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Mon, 7 Dec 2020 20:31:31 -0800\nSubject: [PATCH] Prevent CHECK-fail in LSTM\/GRU with zero-length input.\n\nPiperOrigin-RevId: 346239181\nChange-Id: I5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f\n---\n tensorflow\/stream_executor\/cuda\/cuda_dnn.cc | 8 ++++++--\n 1 file changed, 6 insertions(+), 2 deletions(-)\n\ndiff --git a\/tensorflow\/stream_executor\/cuda\/cuda_dnn.cc b\/tensorflow\/stream_executor\/cuda\/cuda_dnn.cc\nindex c03eb0a57e99cf..e4e9914adf0feb 100644\n--- a\/tensorflow\/stream_executor\/cuda\/cuda_dnn.cc\n+++ b\/tensorflow\/stream_executor\/cuda\/cuda_dnn.cc\n@@ -1468,7 +1468,9 @@ class CudnnRnnSequenceTensorDescriptor\n   static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\n       cudnnDataType_t data_type) {\n-    CHECK_GT(max_seq_length, 0);\n+    if (max_seq_length <= 0) {\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\n+    }\n     int dims[] = {batch_size, data_size, 1};\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();\n@@ -1486,7 +1488,9 @@ class CudnnRnnSequenceTensorDescriptor\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\n       const absl::Span<const int>& seq_lengths, bool time_major,\n       cudnnDataType_t data_type) {\n-    CHECK_GT(max_seq_length, 0);\n+    if (max_seq_length <= 0) {\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\n+    }\n     int dims[] = {batch_size, data_size, 1};\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();",
      "code_diff":"@@ -1468,7 +1468,9 @@ class CudnnRnnSequenceTensorDescriptor\n   static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\n       cudnnDataType_t data_type) {\n-    CHECK_GT(max_seq_length, 0);\n+    if (max_seq_length <= 0) {\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\n+    }\n     int dims[] = {batch_size, data_size, 1};\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();\n@@ -1486,7 +1488,9 @@ class CudnnRnnSequenceTensorDescriptor\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\n       const absl::Span<const int>& seq_lengths, bool time_major,\n       cudnnDataType_t data_type) {\n-    CHECK_GT(max_seq_length, 0);\n+    if (max_seq_length <= 0) {\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\n+    }\n     int dims[] = {batch_size, data_size, 1};\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();"
    },
    {
      "index":56,
      "vuln_id":"GHSA-hm37-9xh2-q499",
      "cwe_id":"{'CWE-209'}",
      "score":7.7,
      "chain":"{'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/d5b53b4b7e76c5b666fc657019dbf864fb04076c', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/274447f91b4037b7050ae634879b657554523b39'}",
      "dataset":"osv",
      "summary":"Possible leak of key's raw field if declared length is incorrect ### Impact\nIf a field of a key is shorter than it is declared to be, the parser raises an error with a message containing the raw field value. An attacker able to modify the declared length of a key's sensitive field can thus expose the raw value of that field.\n\n### Patches\nUpgrade to version 0.0.6, which no longer includes the raw field value in the error message.\n\n### Workarounds\nN\/A\n\n### References\nN\/A\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [openssh_key_parser](https:\/\/github.com\/scottcwang\/openssh_key_parser)",
      "published_date":"2022-07-06",
      "chain_len":3,
      "project":"https:\/\/github.com\/scottcwang\/openssh_key_parser",
      "commit_href":"https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3",
      "commit_sha":"26e0a471e9fdb23e635bc3014cf4cbd2323a08d3",
      "patch":"MULTI",
      "chain_ord":"['26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'd5b53b4b7e76c5b666fc657019dbf864fb04076c', '274447f91b4037b7050ae634879b657554523b39']",
      "before_first_fix_commit":"{'ae4d131d1cd8fe06325bfd6b749305aca60873bf', '69fe5b7addc21d3f39626ae93c6961811aea9d4c'}",
      "last_fix_commit":"274447f91b4037b7050ae634879b657554523b39",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/22\/2022, 14:49:37",
      "message":"Changed an exception message to prevent possible disclosures of keying material.",
      "author":"Michael Doyle",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
      "files":"{'openssh_key\/pascal_style_byte_stream.py': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/raw\/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3\/openssh_key%2Fpascal_style_byte_stream.py', 'patch': '@@ -236,7 +236,8 @@ def read_fixed_bytes(self, num_bytes: int) -> bytes:\\n         \"\"\"\\n         read_bytes = self.read(num_bytes)\\n         if len(read_bytes) < num_bytes:\\n-            raise EOFError(read_bytes)\\n+            raise EOFError(\"Fewer than \\'num_bytes\\' bytes remaining in the \"\\n+                    \"underlying bytestream\")\\n         return read_bytes\\n \\n     def read_pascal_bytes(self, string_length_size: int) -> bytes:'}}",
      "message_norm":"changed an exception message to prevent possible disclosures of keying material.",
      "language":"en",
      "entities":"[('changed', 'ACTION', ''), ('prevent', 'ACTION', ''), ('keying', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['openssh_key\/pascal_style_byte_stream.py'])",
      "num_files":1.0,
      "patch_content":"From 26e0a471e9fdb23e635bc3014cf4cbd2323a08d3 Mon Sep 17 00:00:00 2001\nFrom: Michael Doyle <mike@arnica.io>\nDate: Wed, 22 Jun 2022 10:49:37 -0400\nSubject: [PATCH] Changed an exception message to prevent possible disclosures\n of keying material.\n\n---\n openssh_key\/pascal_style_byte_stream.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a\/openssh_key\/pascal_style_byte_stream.py b\/openssh_key\/pascal_style_byte_stream.py\nindex e6d4003..f8fefa6 100644\n--- a\/openssh_key\/pascal_style_byte_stream.py\n+++ b\/openssh_key\/pascal_style_byte_stream.py\n@@ -236,7 +236,8 @@ def read_fixed_bytes(self, num_bytes: int) -> bytes:\n         \"\"\"\n         read_bytes = self.read(num_bytes)\n         if len(read_bytes) < num_bytes:\n-            raise EOFError(read_bytes)\n+            raise EOFError(\"Fewer than 'num_bytes' bytes remaining in the \"\n+                    \"underlying bytestream\")\n         return read_bytes\n \n     def read_pascal_bytes(self, string_length_size: int) -> bytes:",
      "code_diff":"@@ -236,7 +236,8 @@ def read_fixed_bytes(self, num_bytes: int) -> bytes:\n         \"\"\"\n         read_bytes = self.read(num_bytes)\n         if len(read_bytes) < num_bytes:\n-            raise EOFError(read_bytes)\n+            raise EOFError(\"Fewer than 'num_bytes' bytes remaining in the \"\n+                    \"underlying bytestream\")\n         return read_bytes\n \n     def read_pascal_bytes(self, string_length_size: int) -> bytes:"
    },
    {
      "index":57,
      "vuln_id":"GHSA-f522-ffg8-j8r6",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/eca4beb21e61877d76fdf6bea771f72f39544d9b', 'https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/b3051b277f7caa08cd2edc6f74f50aeda65d2976'}",
      "dataset":"osv",
      "summary":"Regular Expression Denial of Service in is-my-json-valid Version of `is-my-json-valid` before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.\n\n\n## Recommendation\n\nUpdate to version 1.4.1, 2.17.2 or later.",
      "published_date":"2017-10-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/mafintosh\/is-my-json-valid",
      "commit_href":"https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/eca4beb21e61877d76fdf6bea771f72f39544d9b",
      "commit_sha":"eca4beb21e61877d76fdf6bea771f72f39544d9b",
      "patch":"MULTI",
      "chain_ord":"['eca4beb21e61877d76fdf6bea771f72f39544d9b', 'b3051b277f7caa08cd2edc6f74f50aeda65d2976']",
      "before_first_fix_commit":"{'5c6a43dedebf975508465b375af98e9afde2f49c', '767c6c0ee5e55c506ccd49141e7f31cb1910c47f'}",
      "last_fix_commit":"b3051b277f7caa08cd2edc6f74f50aeda65d2976",
      "chain_ord_pos":1.0,
      "commit_datetime":"01\/17\/2016, 21:55:32",
      "message":"fix utc-millisec regex to avoid a ddos attack",
      "author":"Mathias Buus",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'formats.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/is-my-json-valid\/raw\/eca4beb21e61877d76fdf6bea771f72f39544d9b\/formats.js', 'patch': \"@@ -11,4 +11,4 @@ exports['alpha'] = \/^[a-zA-Z]+$\/\\n exports['alphanumeric'] = \/^[a-zA-Z0-9]+$\/\\n exports['style'] = \/\\\\s*(.+?):\\\\s*([^;]+);?\/g\\n exports['phone'] = \/^\\\\+(?:[0-9] ?){6,14}[0-9]$\/\\n-exports['utc-millisec'] = \/^[0-9]+(\\\\.?[0-9]+)?$\/\\n+exports['utc-millisec'] = \/^[0-9]{1,15}\\\\.?[0-9]{0,15}$\/\"}}",
      "message_norm":"fix utc-millisec regex to avoid a ddos attack",
      "language":"en",
      "entities":"[('fix', 'ACTION', ''), ('ddos', 'SECWORD', ''), ('attack', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['formats.js'])",
      "num_files":1.0,
      "patch_content":"From eca4beb21e61877d76fdf6bea771f72f39544d9b Mon Sep 17 00:00:00 2001\nFrom: Mathias Buus <mathiasbuus@gmail.com>\nDate: Sun, 17 Jan 2016 22:55:32 +0100\nSubject: [PATCH] fix utc-millisec regex to avoid a ddos attack\n\n---\n formats.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/formats.js b\/formats.js\nindex 3038dae..9cb8380 100644\n--- a\/formats.js\n+++ b\/formats.js\n@@ -11,4 +11,4 @@ exports['alpha'] = \/^[a-zA-Z]+$\/\n exports['alphanumeric'] = \/^[a-zA-Z0-9]+$\/\n exports['style'] = \/\\s*(.+?):\\s*([^;]+);?\/g\n exports['phone'] = \/^\\+(?:[0-9] ?){6,14}[0-9]$\/\n-exports['utc-millisec'] = \/^[0-9]+(\\.?[0-9]+)?$\/\n+exports['utc-millisec'] = \/^[0-9]{1,15}\\.?[0-9]{0,15}$\/",
      "code_diff":"@@ -11,4 +11,4 @@ exports['alpha'] = \/^[a-zA-Z]+$\/\n exports['alphanumeric'] = \/^[a-zA-Z0-9]+$\/\n exports['style'] = \/\\s*(.+?):\\s*([^;]+);?\/g\n exports['phone'] = \/^\\+(?:[0-9] ?){6,14}[0-9]$\/\n-exports['utc-millisec'] = \/^[0-9]+(\\.?[0-9]+)?$\/\n+exports['utc-millisec'] = \/^[0-9]{1,15}\\.?[0-9]{0,15}$\/"
    },
    {
      "index":58,
      "vuln_id":"GHSA-5gjh-5j4f-cpwv",
      "cwe_id":"{'CWE-434', 'CWE-20'}",
      "score":8.8,
      "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/0fef3c9082269e9a4e817274942a5d7c50617284'}",
      "dataset":"osv",
      "summary":"Unrestricted Upload of File with Dangerous Type in Gogs ### Impact\n\nThe malicious user is able to upload a crafted `config` file into repository's `.git` directory with to gain SSH access to the server. All installations with [repository upload enabled (default)](https:\/\/github.com\/gogs\/gogs\/blob\/f36eeedbf89328ee70cc3a2e239f6314f9021f58\/conf\/app.ini#L127-L129) are affected.\n\n### Patches\n\nRepository file uploads are prohibited to its `.git` directory. Users should upgrade to 0.12.6 or the latest 0.13.0+dev.\n\n### Workarounds\n\n[Disable repository files upload](https:\/\/github.com\/gogs\/gogs\/blob\/f36eeedbf89328ee70cc3a2e239f6314f9021f58\/conf\/app.ini#L128-L129).\n\n### References\n\nhttps:\/\/huntr.dev\/bounties\/b4928cfe-4110-462f-a180-6d5673797902\/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on #6833.",
      "published_date":"2022-03-28",
      "chain_len":1,
      "project":"https:\/\/github.com\/gogs\/gogs",
      "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/0fef3c9082269e9a4e817274942a5d7c50617284",
      "commit_sha":"0fef3c9082269e9a4e817274942a5d7c50617284",
      "patch":"SINGLE",
      "chain_ord":"['0fef3c9082269e9a4e817274942a5d7c50617284']",
      "before_first_fix_commit":"{'5aca56d2ddafad347dd670f4004ebf367c2c84ef'}",
      "last_fix_commit":"0fef3c9082269e9a4e817274942a5d7c50617284",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/13\/2022, 14:18:56",
      "message":"repo_editor: check upload `TreePath` and file name (#6838)",
      "author":"Joe Chen",
      "comments":null,
      "stats":"{'additions': 13, 'deletions': 4, 'total': 17}",
      "files":"{'internal\/db\/repo_editor.go': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/0fef3c9082269e9a4e817274942a5d7c50617284\/internal%2Fdb%2Frepo_editor.go', 'patch': '@@ -16,16 +16,18 @@ import (\\n \\t\"strings\"\\n \\t\"time\"\\n \\n+\\t\"github.com\/pkg\/errors\"\\n \\tgouuid \"github.com\/satori\/go.uuid\"\\n \\t\"github.com\/unknwon\/com\"\\n \\n \\t\"github.com\/gogs\/git-module\"\\n \\n \\t\"gogs.io\/gogs\/internal\/conf\"\\n \\t\"gogs.io\/gogs\/internal\/cryptoutil\"\\n-\\t\"gogs.io\/gogs\/internal\/db\/errors\"\\n+\\tdberrors \"gogs.io\/gogs\/internal\/db\/errors\"\\n \\t\"gogs.io\/gogs\/internal\/gitutil\"\\n \\t\"gogs.io\/gogs\/internal\/osutil\"\\n+\\t\"gogs.io\/gogs\/internal\/pathutil\"\\n \\t\"gogs.io\/gogs\/internal\/process\"\\n \\t\"gogs.io\/gogs\/internal\/tool\"\\n )\\n@@ -134,7 +136,7 @@ func (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (\\n \\tif opts.OldBranch != opts.NewBranch {\\n \\t\\t\/\/ Directly return error if new branch already exists in the server\\n \\t\\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\\n-\\t\\t\\treturn errors.BranchAlreadyExists{Name: opts.NewBranch}\\n+\\t\\t\\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\\n \\t\\t}\\n \\n \\t\\t\/\/ Otherwise, delete branch from local copy in case out of sync\\n@@ -449,11 +451,16 @@ func isRepositoryGitPath(path string) bool {\\n \\treturn strings.HasSuffix(path, \".git\") || strings.Contains(path, \".git\"+string(os.PathSeparator))\\n }\\n \\n-func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) (err error) {\\n+func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\\n \\tif len(opts.Files) == 0 {\\n \\t\\treturn nil\\n \\t}\\n \\n+\\t\/\/ Prevent uploading files into the \".git\" directory\\n+\\tif isRepositoryGitPath(opts.TreePath) {\\n+\\t\\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\\n+\\t}\\n+\\n \\tuploads, err := GetUploadsByUUIDs(opts.Files)\\n \\tif err != nil {\\n \\t\\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\\n@@ -487,7 +494,9 @@ func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions)\\n \\t\\t\\tcontinue\\n \\t\\t}\\n \\n-\\t\\t\/\/ Prevent copying files into .git directory, see https:\/\/gogs.io\/gogs\/issues\/5558.\\n+\\t\\tupload.Name = pathutil.Clean(upload.Name)\\n+\\n+\\t\\t\/\/ Prevent uploading files into the \".git\" directory\\n \\t\\tif isRepositoryGitPath(upload.Name) {\\n \\t\\t\\tcontinue\\n \\t\\t}'}}",
      "message_norm":"repo_editor: check upload `treepath` and file name (#6838)",
      "language":"en",
      "entities":"[('#6838', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['internal\/db\/repo_editor.go'])",
      "num_files":1.0,
      "patch_content":"From 0fef3c9082269e9a4e817274942a5d7c50617284 Mon Sep 17 00:00:00 2001\nFrom: Joe Chen <jc@unknwon.io>\nDate: Sun, 13 Mar 2022 22:18:56 +0800\nSubject: [PATCH] repo_editor: check upload `TreePath` and file name (#6838)\n\n---\n internal\/db\/repo_editor.go | 17 +++++++++++++----\n 1 file changed, 13 insertions(+), 4 deletions(-)\n\ndiff --git a\/internal\/db\/repo_editor.go b\/internal\/db\/repo_editor.go\nindex 652d6944b7e..99f982abcb1 100644\n--- a\/internal\/db\/repo_editor.go\n+++ b\/internal\/db\/repo_editor.go\n@@ -16,6 +16,7 @@ import (\n \t\"strings\"\n \t\"time\"\n \n+\t\"github.com\/pkg\/errors\"\n \tgouuid \"github.com\/satori\/go.uuid\"\n \t\"github.com\/unknwon\/com\"\n \n@@ -23,9 +24,10 @@ import (\n \n \t\"gogs.io\/gogs\/internal\/conf\"\n \t\"gogs.io\/gogs\/internal\/cryptoutil\"\n-\t\"gogs.io\/gogs\/internal\/db\/errors\"\n+\tdberrors \"gogs.io\/gogs\/internal\/db\/errors\"\n \t\"gogs.io\/gogs\/internal\/gitutil\"\n \t\"gogs.io\/gogs\/internal\/osutil\"\n+\t\"gogs.io\/gogs\/internal\/pathutil\"\n \t\"gogs.io\/gogs\/internal\/process\"\n \t\"gogs.io\/gogs\/internal\/tool\"\n )\n@@ -134,7 +136,7 @@ func (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (\n \tif opts.OldBranch != opts.NewBranch {\n \t\t\/\/ Directly return error if new branch already exists in the server\n \t\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\n-\t\t\treturn errors.BranchAlreadyExists{Name: opts.NewBranch}\n+\t\t\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\n \t\t}\n \n \t\t\/\/ Otherwise, delete branch from local copy in case out of sync\n@@ -449,11 +451,16 @@ func isRepositoryGitPath(path string) bool {\n \treturn strings.HasSuffix(path, \".git\") || strings.Contains(path, \".git\"+string(os.PathSeparator))\n }\n \n-func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) (err error) {\n+func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\n \tif len(opts.Files) == 0 {\n \t\treturn nil\n \t}\n \n+\t\/\/ Prevent uploading files into the \".git\" directory\n+\tif isRepositoryGitPath(opts.TreePath) {\n+\t\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\n+\t}\n+\n \tuploads, err := GetUploadsByUUIDs(opts.Files)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\n@@ -487,7 +494,9 @@ func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions)\n \t\t\tcontinue\n \t\t}\n \n-\t\t\/\/ Prevent copying files into .git directory, see https:\/\/gogs.io\/gogs\/issues\/5558.\n+\t\tupload.Name = pathutil.Clean(upload.Name)\n+\n+\t\t\/\/ Prevent uploading files into the \".git\" directory\n \t\tif isRepositoryGitPath(upload.Name) {\n \t\t\tcontinue\n \t\t}",
      "code_diff":"@@ -16,6 +16,7 @@ import (\n \t\"strings\"\n \t\"time\"\n \n+\t\"github.com\/pkg\/errors\"\n \tgouuid \"github.com\/satori\/go.uuid\"\n \t\"github.com\/unknwon\/com\"\n \n@@ -23,9 +24,10 @@ import (\n \n \t\"gogs.io\/gogs\/internal\/conf\"\n \t\"gogs.io\/gogs\/internal\/cryptoutil\"\n-\t\"gogs.io\/gogs\/internal\/db\/errors\"\n+\tdberrors \"gogs.io\/gogs\/internal\/db\/errors\"\n \t\"gogs.io\/gogs\/internal\/gitutil\"\n \t\"gogs.io\/gogs\/internal\/osutil\"\n+\t\"gogs.io\/gogs\/internal\/pathutil\"\n \t\"gogs.io\/gogs\/internal\/process\"\n \t\"gogs.io\/gogs\/internal\/tool\"\n )\n@@ -134,7 +136,7 @@ func (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (\n \tif opts.OldBranch != opts.NewBranch {\n \t\t\/\/ Directly return error if new branch already exists in the server\n \t\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\n-\t\t\treturn errors.BranchAlreadyExists{Name: opts.NewBranch}\n+\t\t\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\n \t\t}\n \n \t\t\/\/ Otherwise, delete branch from local copy in case out of sync\n@@ -449,11 +451,16 @@ func isRepositoryGitPath(path string) bool {\n \treturn strings.HasSuffix(path, \".git\") || strings.Contains(path, \".git\"+string(os.PathSeparator))\n }\n \n-func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) (err error) {\n+func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\n \tif len(opts.Files) == 0 {\n \t\treturn nil\n \t}\n \n+\t\/\/ Prevent uploading files into the \".git\" directory\n+\tif isRepositoryGitPath(opts.TreePath) {\n+\t\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\n+\t}\n+\n \tuploads, err := GetUploadsByUUIDs(opts.Files)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\n@@ -487,7 +494,9 @@ func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions)\n \t\t\tcontinue\n \t\t}\n \n-\t\t\/\/ Prevent copying files into .git directory, see https:\/\/gogs.io\/gogs\/issues\/5558.\n+\t\tupload.Name = pathutil.Clean(upload.Name)\n+\n+\t\t\/\/ Prevent uploading files into the \".git\" directory\n \t\tif isRepositoryGitPath(upload.Name) {\n \t\t\tcontinue\n \t\t}"
    },
    {
      "index":59,
      "vuln_id":"GHSA-f7f4-hqp2-7prc",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
      "published_date":"2020-07-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
      "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "commit_sha":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "patch":"MULTI",
      "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
      "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
      "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "chain_ord_pos":2.0,
      "commit_datetime":"09\/23\/2018, 21:38:55",
      "message":"Follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
      "author":"Mike McNeil",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
      "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/0533a4864b1920fd8fbb5287bc0889193c5faf44\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '\/',\\n+      \/\/ ^^ Uses || '\/' because otherwise url.parse returns `null`,\\n+      \/\/ which is not a string and thus bad when you try to check\\n+      \/\/ .match() of it.\\n \\n       method  : options.eventName,\"}}",
      "message_norm":"follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
      "language":"en",
      "entities":"[('ff02114eaec090ee51db48435cc32d451662606e', 'SHA', 'generic_sha'), ('ensure', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
      "num_files":1.0,
      "patch_content":"From 0533a4864b1920fd8fbb5287bc0889193c5faf44 Mon Sep 17 00:00:00 2001\nFrom: Mike McNeil <git+mikermcneil@sailsjs.com>\nDate: Sun, 23 Sep 2018 16:38:55 -0500\nSubject: [PATCH] Follow up to ff02114eaec090ee51db48435cc32d451662606e to\n ensure req.path is good and stringy.\n\n---\n lib\/receive-incoming-sails-io-msg.js | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a\/lib\/receive-incoming-sails-io-msg.js b\/lib\/receive-incoming-sails-io-msg.js\nindex 5be5704..39ebccd 100644\n--- a\/lib\/receive-incoming-sails-io-msg.js\n+++ b\/lib\/receive-incoming-sails-io-msg.js\n@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\n \n       url     : options.incomingSailsIOMsg.url,\n \n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '\/',\n+      \/\/ ^^ Uses || '\/' because otherwise url.parse returns `null`,\n+      \/\/ which is not a string and thus bad when you try to check\n+      \/\/ .match() of it.\n \n       method  : options.eventName,",
      "code_diff":"@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\n \n       url     : options.incomingSailsIOMsg.url,\n \n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '\/',\n+      \/\/ ^^ Uses || '\/' because otherwise url.parse returns `null`,\n+      \/\/ which is not a string and thus bad when you try to check\n+      \/\/ .match() of it.\n \n       method  : options.eventName,"
    },
    {
      "index":60,
      "vuln_id":"GHSA-x2mc-8fgj-3wmr",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/mafintosh\/tar-fs\/commit\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in tar-fs A vulnerability was found in tar-fs before 1.16.2. An Arbitrary File Overwrite issue exists when extracting a tarball containing a hardlink to a file that already exists on the system, in conjunction with a later plain file with the same name as the hardlink. This plain file content replaces the existing file content.",
      "published_date":"2019-05-01",
      "chain_len":1,
      "project":"https:\/\/github.com\/mafintosh\/tar-fs",
      "commit_href":"https:\/\/github.com\/mafintosh\/tar-fs\/commit\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
      "commit_sha":"06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
      "patch":"SINGLE",
      "chain_ord":"['06672828e6fa29ac8551b1b6f36c852a9a3c58a2']",
      "before_first_fix_commit":"{'7b4ab17e950832cfd3e67421e48898fdb50318fc'}",
      "last_fix_commit":"06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/30\/2018, 11:20:56",
      "message":"force hardlink targets to be in the tar",
      "author":"Mathias Buus",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/tar-fs\/raw\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2\/index.js', 'patch': \"@@ -261,7 +261,7 @@ exports.extract = function (cwd, opts) {\\n     var onlink = function () {\\n       if (win32) return next() \/\/ skip links on win for now before it can be tested\\n       xfs.unlink(name, function () {\\n-        var srcpath = path.resolve(cwd, header.linkname)\\n+        var srcpath = path.join(cwd, path.join('\/', header.linkname))\\n \\n         xfs.link(srcpath, name, function (err) {\\n           if (err && err.code === 'EPERM' && opts.hardlinkAsFilesFallback) {\"}}",
      "message_norm":"force hardlink targets to be in the tar",
      "language":"en",
      "entities":null,
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 06672828e6fa29ac8551b1b6f36c852a9a3c58a2 Mon Sep 17 00:00:00 2001\nFrom: Mathias Buus <mathiasbuus@gmail.com>\nDate: Mon, 30 Apr 2018 13:20:56 +0200\nSubject: [PATCH] force hardlink targets to be in the tar\n\n---\n index.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex 2e1ae6d..4d67485 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -261,7 +261,7 @@ exports.extract = function (cwd, opts) {\n     var onlink = function () {\n       if (win32) return next() \/\/ skip links on win for now before it can be tested\n       xfs.unlink(name, function () {\n-        var srcpath = path.resolve(cwd, header.linkname)\n+        var srcpath = path.join(cwd, path.join('\/', header.linkname))\n \n         xfs.link(srcpath, name, function (err) {\n           if (err && err.code === 'EPERM' && opts.hardlinkAsFilesFallback) {",
      "code_diff":"@@ -261,7 +261,7 @@ exports.extract = function (cwd, opts) {\n     var onlink = function () {\n       if (win32) return next() \/\/ skip links on win for now before it can be tested\n       xfs.unlink(name, function () {\n-        var srcpath = path.resolve(cwd, header.linkname)\n+        var srcpath = path.join(cwd, path.join('\/', header.linkname))\n \n         xfs.link(srcpath, name, function (err) {\n           if (err && err.code === 'EPERM' && opts.hardlinkAsFilesFallback) {"
    },
    {
      "index":61,
      "vuln_id":"GHSA-hx9q-2mx4-m4pg",
      "cwe_id":"{'CWE-191', 'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943'}",
      "dataset":"osv",
      "summary":"Missing validation causes denial of service via `Conv3DBackpropFilterV2` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n\/\/ ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55305).",
      "published_date":"2022-05-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943",
      "commit_sha":"84563f265f28b3c36a15335c8b005d405260e943",
      "patch":"MULTI",
      "chain_ord":"['84563f265f28b3c36a15335c8b005d405260e943', '20cb18724b0bf6c09071a3f53434c4eec53cc147']",
      "before_first_fix_commit":"{'3f30e4965889b1b86b1d56392e437ccc08907f65'}",
      "last_fix_commit":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/15\/2022, 17:34:16",
      "message":"Validate `num_segments > 0` in `unsorted_segment_join`\n\nFixes #55305\n\nPiperOrigin-RevId: 442047005",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/84563f265f28b3c36a15335c8b005d405260e943\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -94,6 +94,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n+    OP_REQUIRES(context, num_segments > 0,\\n+                errors::InvalidArgument(\"Number of segments must be positive\"));\\n     OP_REQUIRES(context, segment_dims != 0,\\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));'}}",
      "message_norm":"validate `num_segments > 0` in `unsorted_segment_join`\n\nfixes #55305\n\npiperorigin-revid: 442047005",
      "language":"ca",
      "entities":"[('validate', 'ACTION', ''), ('fixes', 'ACTION', ''), ('#55305', 'ISSUE', ''), ('442047005', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
      "num_files":1.0,
      "patch_content":"From 84563f265f28b3c36a15335c8b005d405260e943 Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Fri, 15 Apr 2022 10:34:16 -0700\nSubject: [PATCH] Validate `num_segments > 0` in `unsorted_segment_join`\n\nFixes #55305\n\nPiperOrigin-RevId: 442047005\n---\n tensorflow\/core\/kernels\/unsorted_segment_join_op.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\nindex 2406f9b0d7c5bd..860cec8010042c 100644\n--- a\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n+++ b\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc\n@@ -94,6 +94,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n+    OP_REQUIRES(context, num_segments > 0,\n+                errors::InvalidArgument(\"Number of segments must be positive\"));\n     OP_REQUIRES(context, segment_dims != 0,\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));",
      "code_diff":"@@ -94,6 +94,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n \n+    OP_REQUIRES(context, num_segments > 0,\n+                errors::InvalidArgument(\"Number of segments must be positive\"));\n     OP_REQUIRES(context, segment_dims != 0,\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));"
    },
    {
      "index":62,
      "vuln_id":"GHSA-m884-279h-32v2",
      "cwe_id":"{'CWE-209'}",
      "score":4.6,
      "chain":"{'https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db', 'https:\/\/github.com\/symfony\/symfony\/commit\/cf80224589ac05402d4f72f5ddf80900ec94d5ad'}",
      "dataset":"osv",
      "summary":"Exceptions displayed in non-debug configurations in Symfony Description\n-----------\n\nWhen `ErrorHandler` renders an exception HTML page, it uses un-escaped properties from the related Exception class to render the stacktrace. The security issue comes from the fact that the stacktraces were also displayed in non-`debug` environments.\n\nResolution\n----------\n\nThe `ErrorHandler` class now escapes all properties coming from the related Exception, and the stacktrace is not displayed anymore in non-`debug` environments.\n\nThe patches for this issue are available [here](https:\/\/github.com\/symfony\/symfony\/commit\/cf80224589ac05402d4f72f5ddf80900ec94d5ad) and [here](https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db) for branch 4.4.\n\nCredits\n-------\n\nI would like to thank Luka Sikic for reporting & Yonel Ceruto and J\u00e9r\u00e9my Deruss\u00e9 for fixing the issue.",
      "published_date":"2020-03-30",
      "chain_len":2,
      "project":"https:\/\/github.com\/symfony\/symfony",
      "commit_href":"https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
      "commit_sha":"629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
      "patch":"MULTI",
      "chain_ord":"['cf80224589ac05402d4f72f5ddf80900ec94d5ad', '629d21b800a15dc649fb0ae9ed7cd9211e7e45db']",
      "before_first_fix_commit":"{'3ee39e7468f1cd0b5a88b89aad72d61214e950f4'}",
      "last_fix_commit":"629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
      "chain_ord_pos":2.0,
      "commit_datetime":"02\/04\/2020, 09:49:52",
      "message":"Escape variable in Exception Template",
      "author":"J\u00e9r\u00e9my Deruss\u00e9",
      "comments":null,
      "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
      "files":"{'src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/symfony\/symfony\/raw\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db\/src%2FSymfony%2FComponent%2FErrorHandler%2FResources%2Fviews%2Ftraces_text.html.php', 'patch': '@@ -20,15 +20,15 @@\\n                 <?php if ($exception[\\'trace\\']) { ?>\\n                 <pre class=\"stacktrace\">\\n <?php\\n-                    echo $exception[\\'class\\'].\":\\\\n\";\\n+                    echo $this->escape($exception[\\'class\\']).\":\\\\n\";\\n                     if ($exception[\\'message\\']) {\\n-                        echo $exception[\\'message\\'].\"\\\\n\";\\n+                        echo $this->escape($exception[\\'message\\']).\"\\\\n\";\\n                     }\\n \\n                     foreach ($exception[\\'trace\\'] as $trace) {\\n                         echo \"\\\\n  \";\\n                         if ($trace[\\'function\\']) {\\n-                            echo \\'at \\'.$trace[\\'class\\'].$trace[\\'type\\'].$trace[\\'function\\'].\\'(\\'.(isset($trace[\\'args\\']) ? $this->formatArgsAsText($trace[\\'args\\']) : \\'\\').\\')\\';\\n+                            echo $this->escape(\\'at \\'.$trace[\\'class\\'].$trace[\\'type\\'].$trace[\\'function\\']).\\'(\\'.(isset($trace[\\'args\\']) ? $this->formatArgsAsText($trace[\\'args\\']) : \\'\\').\\')\\';\\n                         }\\n                         if ($trace[\\'file\\'] && $trace[\\'line\\']) {\\n                             echo($trace[\\'function\\'] ? \"\\\\n     (\" : \\'at \\').strtr(strip_tags($this->formatFile($trace[\\'file\\'], $trace[\\'line\\'])), [\\' at line \\'.$trace[\\'line\\'] => \\'\\']).\\':\\'.$trace[\\'line\\'].($trace[\\'function\\'] ? \\')\\' : \\'\\');'}}",
      "message_norm":"escape variable in exception template",
      "language":"ro",
      "entities":"[('escape', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php'])",
      "num_files":1.0,
      "patch_content":"From 629d21b800a15dc649fb0ae9ed7cd9211e7e45db Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?J=C3=A9r=C3=A9my=20Deruss=C3=A9?= <jeremy@derusse.com>\nDate: Tue, 4 Feb 2020 10:49:52 +0100\nSubject: [PATCH] Escape variable in Exception Template\n\n---\n ...\/ErrorHandler\/Resources\/views\/traces_text.html.php       | 6 +++---\n 1 file changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a\/src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php b\/src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php\nindex e178fe0fcd413..a7090fbe8909e 100644\n--- a\/src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php\n+++ b\/src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php\n@@ -20,15 +20,15 @@\n                 <?php if ($exception['trace']) { ?>\n                 <pre class=\"stacktrace\">\n <?php\n-                    echo $exception['class'].\":\\n\";\n+                    echo $this->escape($exception['class']).\":\\n\";\n                     if ($exception['message']) {\n-                        echo $exception['message'].\"\\n\";\n+                        echo $this->escape($exception['message']).\"\\n\";\n                     }\n \n                     foreach ($exception['trace'] as $trace) {\n                         echo \"\\n  \";\n                         if ($trace['function']) {\n-                            echo 'at '.$trace['class'].$trace['type'].$trace['function'].'('.(isset($trace['args']) ? $this->formatArgsAsText($trace['args']) : '').')';\n+                            echo $this->escape('at '.$trace['class'].$trace['type'].$trace['function']).'('.(isset($trace['args']) ? $this->formatArgsAsText($trace['args']) : '').')';\n                         }\n                         if ($trace['file'] && $trace['line']) {\n                             echo($trace['function'] ? \"\\n     (\" : 'at ').strtr(strip_tags($this->formatFile($trace['file'], $trace['line'])), [' at line '.$trace['line'] => '']).':'.$trace['line'].($trace['function'] ? ')' : '');",
      "code_diff":"@@ -20,15 +20,15 @@\n                 <?php if ($exception['trace']) { ?>\n                 <pre class=\"stacktrace\">\n <?php\n-                    echo $exception['class'].\":\\n\";\n+                    echo $this->escape($exception['class']).\":\\n\";\n                     if ($exception['message']) {\n-                        echo $exception['message'].\"\\n\";\n+                        echo $this->escape($exception['message']).\"\\n\";\n                     }\n \n                     foreach ($exception['trace'] as $trace) {\n                         echo \"\\n  \";\n                         if ($trace['function']) {\n-                            echo 'at '.$trace['class'].$trace['type'].$trace['function'].'('.(isset($trace['args']) ? $this->formatArgsAsText($trace['args']) : '').')';\n+                            echo $this->escape('at '.$trace['class'].$trace['type'].$trace['function']).'('.(isset($trace['args']) ? $this->formatArgsAsText($trace['args']) : '').')';\n                         }\n                         if ($trace['file'] && $trace['line']) {\n                             echo($trace['function'] ? \"\\n     (\" : 'at ').strtr(strip_tags($this->formatFile($trace['file'], $trace['line'])), [' at line '.$trace['line'] => '']).':'.$trace['line'].($trace['function'] ? ')' : '');"
    },
    {
      "index":63,
      "vuln_id":"GHSA-f98m-q3hr-p5wq",
      "cwe_id":"{'CWE-915', 'CWE-20'}",
      "score":9.8,
      "chain":"{'https:\/\/github.com\/locutusjs\/locutus\/commit\/0eb16d8541838e80f3c2340a9ef93ded7c97290f'}",
      "dataset":"osv",
      "summary":"Prototype Pollution in locutus All versions of package locutus prior to version 2.0.12 are vulnerable to Prototype Pollution via the php.strings.parse_str function.",
      "published_date":"2021-05-06",
      "chain_len":1,
      "project":"https:\/\/github.com\/locutusjs\/locutus",
      "commit_href":"https:\/\/github.com\/locutusjs\/locutus\/commit\/0eb16d8541838e80f3c2340a9ef93ded7c97290f",
      "commit_sha":"0eb16d8541838e80f3c2340a9ef93ded7c97290f",
      "patch":"SINGLE",
      "chain_ord":"['0eb16d8541838e80f3c2340a9ef93ded7c97290f']",
      "before_first_fix_commit":"{'3f14dc5d142f5dcbdf36b4271c21a850a4a259da'}",
      "last_fix_commit":"0eb16d8541838e80f3c2340a9ef93ded7c97290f",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/25\/2020, 14:48:03",
      "message":"fixed prototype pollution",
      "author":"Asjid Kalam",
      "comments":null,
      "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
      "files":"{'src\/php\/strings\/parse_str.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/locutusjs\/locutus\/raw\/0eb16d8541838e80f3c2340a9ef93ded7c97290f\/src%2Fphp%2Fstrings%2Fparse_str.js', 'patch': \"@@ -74,6 +74,10 @@ module.exports = function parse_str (str, array) { \/\/ eslint-disable-line camelc\\n     key = _fixStr(tmp[0])\\n     value = (tmp.length < 2) ? '' : _fixStr(tmp[1])\\n \\n+    if (key.includes('__proto__') || key.includes('constructor') || key.includes('prototype')) {\\n+      break;\\n+    }\\n+\\n     while (key.charAt(0) === ' ') {\\n       key = key.slice(1)\\n     }\"}}",
      "message_norm":"fixed prototype pollution",
      "language":"en",
      "entities":"[('fixed', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/php\/strings\/parse_str.js'])",
      "num_files":1.0,
      "patch_content":"From 0eb16d8541838e80f3c2340a9ef93ded7c97290f Mon Sep 17 00:00:00 2001\nFrom: Asjid Kalam <asjid.kalam@gmail.com>\nDate: Tue, 25 Aug 2020 20:18:03 +0530\nSubject: [PATCH] fixed prototype pollution\n\n---\n src\/php\/strings\/parse_str.js | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a\/src\/php\/strings\/parse_str.js b\/src\/php\/strings\/parse_str.js\nindex db14a01262..d711008c35 100644\n--- a\/src\/php\/strings\/parse_str.js\n+++ b\/src\/php\/strings\/parse_str.js\n@@ -74,6 +74,10 @@ module.exports = function parse_str (str, array) { \/\/ eslint-disable-line camelc\n     key = _fixStr(tmp[0])\n     value = (tmp.length < 2) ? '' : _fixStr(tmp[1])\n \n+    if (key.includes('__proto__') || key.includes('constructor') || key.includes('prototype')) {\n+      break;\n+    }\n+\n     while (key.charAt(0) === ' ') {\n       key = key.slice(1)\n     }",
      "code_diff":"@@ -74,6 +74,10 @@ module.exports = function parse_str (str, array) { \/\/ eslint-disable-line camelc\n     key = _fixStr(tmp[0])\n     value = (tmp.length < 2) ? '' : _fixStr(tmp[1])\n \n+    if (key.includes('__proto__') || key.includes('constructor') || key.includes('prototype')) {\n+      break;\n+    }\n+\n     while (key.charAt(0) === ' ') {\n       key = key.slice(1)\n     }"
    },
    {
      "index":64,
      "vuln_id":"GHSA-278g-rq84-9hmg",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d'}",
      "dataset":"osv",
      "summary":"`CHECK`-fail in `MapStage` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.MapStage`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapStage(\n  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),\n  indices=tf.constant((0), dtype=tf.int32),\n  values=[tf.constant((0), dtype=tf.int32)],\n  dtypes=[tf.int32,\n  tf.int64],\n  capacity=0,\n  memory_limit=0,\n  container='',\n  shared_name='')\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/map_stage_op.cc#L513) does not check that the `key` input is a valid non-empty tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [d7de67733925de196ec8863a33445b73f9562d1d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date":"2021-08-25",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d",
      "commit_sha":"d7de67733925de196ec8863a33445b73f9562d1d",
      "patch":"SINGLE",
      "chain_ord":"['d7de67733925de196ec8863a33445b73f9562d1d']",
      "before_first_fix_commit":"{'102cacf28ad5a9e7f00b5a195d1995ead8870006'}",
      "last_fix_commit":"d7de67733925de196ec8863a33445b73f9562d1d",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/30\/2021, 05:23:46",
      "message":"Prevent a CHECK-fail due to empty tensor input in `map_stage_op.cc`\n\nPiperOrigin-RevId: 387737906\nChange-Id: Idc52df0c71c7ed6e2dd633b651a581932f277c8a",
      "author":"Mihai Maruseac",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/map_stage_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d7de67733925de196ec8863a33445b73f9562d1d\/tensorflow%2Fcore%2Fkernels%2Fmap_stage_op.cc', 'patch': '@@ -527,6 +527,8 @@ class MapStageOp : public OpKernel {\\n     OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\\n     OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\\n     OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\\n+    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\\n+                errors::InvalidArgument(\"key must not be empty\"));\\n \\n     \/\/ Create copy for insertion into Staging Area\\n     Tensor key(*key_tensor);'}}",
      "message_norm":"prevent a check-fail due to empty tensor input in `map_stage_op.cc`\n\npiperorigin-revid: 387737906\nchange-id: idc52df0c71c7ed6e2dd633b651a581932f277c8a",
      "language":"en",
      "entities":"[('prevent', 'ACTION', ''), ('387737906', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/map_stage_op.cc'])",
      "num_files":1.0,
      "patch_content":"From d7de67733925de196ec8863a33445b73f9562d1d Mon Sep 17 00:00:00 2001\nFrom: Mihai Maruseac <mihaimaruseac@google.com>\nDate: Thu, 29 Jul 2021 22:23:46 -0700\nSubject: [PATCH] Prevent a CHECK-fail due to empty tensor input in\n `map_stage_op.cc`\n\nPiperOrigin-RevId: 387737906\nChange-Id: Idc52df0c71c7ed6e2dd633b651a581932f277c8a\n---\n tensorflow\/core\/kernels\/map_stage_op.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/map_stage_op.cc b\/tensorflow\/core\/kernels\/map_stage_op.cc\nindex b575c2d3862e0c..9411792762baab 100644\n--- a\/tensorflow\/core\/kernels\/map_stage_op.cc\n+++ b\/tensorflow\/core\/kernels\/map_stage_op.cc\n@@ -527,6 +527,8 @@ class MapStageOp : public OpKernel {\n     OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n     OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n     OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\n+    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\n+                errors::InvalidArgument(\"key must not be empty\"));\n \n     \/\/ Create copy for insertion into Staging Area\n     Tensor key(*key_tensor);",
      "code_diff":"@@ -527,6 +527,8 @@ class MapStageOp : public OpKernel {\n     OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n     OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n     OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\n+    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\n+                errors::InvalidArgument(\"key must not be empty\"));\n \n     \/\/ Create copy for insertion into Staging Area\n     Tensor key(*key_tensor);"
    },
    {
      "index":65,
      "vuln_id":"GHSA-j7c4-2xj8-wm7r",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/latchset\/kdcproxy\/commit\/f274aa6787cb8b3ec1cc12c440a56665b7231882'}",
      "dataset":"osv",
      "summary":"Moderate severity vulnerability that affects kdcproxy python-kdcproxy before 0.3.2 allows remote attackers to cause a denial of service via a large POST request.",
      "published_date":"2018-11-01",
      "chain_len":1,
      "project":"https:\/\/github.com\/latchset\/kdcproxy",
      "commit_href":"https:\/\/github.com\/latchset\/kdcproxy\/commit\/f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "commit_sha":"f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "patch":"SINGLE",
      "chain_ord":"['f274aa6787cb8b3ec1cc12c440a56665b7231882']",
      "before_first_fix_commit":"{'e4a71193099cd395578bcf32f4eb8beaa7da3e43'}",
      "last_fix_commit":"f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "chain_ord_pos":1.0,
      "commit_datetime":"08\/03\/2015, 18:38:49",
      "message":"Enforce a maximum packet length\n\nPermanently fixes CVE-2015-5159 for all applications.",
      "author":"Nathaniel McCallum",
      "comments":null,
      "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
      "files":"{'kdcproxy\/__init__.py': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/latchset\/kdcproxy\/raw\/f274aa6787cb8b3ec1cc12c440a56665b7231882\/kdcproxy%2F__init__.py', 'patch': '@@ -61,6 +61,7 @@ def __str__(self):\\n \\n \\n class Application:\\n+    MAX_LENGTH = 128 * 1024\\n     SOCKTYPES = {\\n         \"tcp\": socket.SOCK_STREAM,\\n         \"udp\": socket.SOCK_DGRAM,\\n@@ -180,7 +181,11 @@ def __call__(self, env, start_response):\\n             try:\\n                 length = int(env[\"CONTENT_LENGTH\"])\\n             except AttributeError:\\n-                length = -1\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length < 0:\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length > self.MAX_LENGTH:\\n+                raise HTTPException(413, \"Request entity too large.\")\\n             try:\\n                 pr = codec.decode(env[\"wsgi.input\"].read(length))\\n             except codec.ParsingError as e:'}}",
      "message_norm":"enforce a maximum packet length\n\npermanently fixes cve-2015-5159 for all applications.",
      "language":"en",
      "entities":"[('fixes', 'ACTION', ''), ('cve-2015-5159', 'VULNID', 'CVE')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['kdcproxy\/__init__.py'])",
      "num_files":1.0,
      "patch_content":"From f274aa6787cb8b3ec1cc12c440a56665b7231882 Mon Sep 17 00:00:00 2001\nFrom: Nathaniel McCallum <npmccallum@redhat.com>\nDate: Mon, 3 Aug 2015 14:38:49 -0400\nSubject: [PATCH] Enforce a maximum packet length\n\nPermanently fixes CVE-2015-5159 for all applications.\n---\n kdcproxy\/__init__.py | 7 ++++++-\n 1 file changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a\/kdcproxy\/__init__.py b\/kdcproxy\/__init__.py\nindex 865abac..9fc1418 100644\n--- a\/kdcproxy\/__init__.py\n+++ b\/kdcproxy\/__init__.py\n@@ -61,6 +61,7 @@ def __str__(self):\n \n \n class Application:\n+    MAX_LENGTH = 128 * 1024\n     SOCKTYPES = {\n         \"tcp\": socket.SOCK_STREAM,\n         \"udp\": socket.SOCK_DGRAM,\n@@ -180,7 +181,11 @@ def __call__(self, env, start_response):\n             try:\n                 length = int(env[\"CONTENT_LENGTH\"])\n             except AttributeError:\n-                length = -1\n+                raise HTTPException(411, \"Length required.\")\n+            if length < 0:\n+                raise HTTPException(411, \"Length required.\")\n+            if length > self.MAX_LENGTH:\n+                raise HTTPException(413, \"Request entity too large.\")\n             try:\n                 pr = codec.decode(env[\"wsgi.input\"].read(length))\n             except codec.ParsingError as e:",
      "code_diff":"@@ -61,6 +61,7 @@ def __str__(self):\n \n \n class Application:\n+    MAX_LENGTH = 128 * 1024\n     SOCKTYPES = {\n         \"tcp\": socket.SOCK_STREAM,\n         \"udp\": socket.SOCK_DGRAM,\n@@ -180,7 +181,11 @@ def __call__(self, env, start_response):\n             try:\n                 length = int(env[\"CONTENT_LENGTH\"])\n             except AttributeError:\n-                length = -1\n+                raise HTTPException(411, \"Length required.\")\n+            if length < 0:\n+                raise HTTPException(411, \"Length required.\")\n+            if length > self.MAX_LENGTH:\n+                raise HTTPException(413, \"Request entity too large.\")\n             try:\n                 pr = codec.decode(env[\"wsgi.input\"].read(length))\n             except codec.ParsingError as e:"
    },
    {
      "index":66,
      "vuln_id":"GHSA-37q6-576q-vgr7",
      "cwe_id":"{'CWE-200'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/parcel-bundler\/parcel\/commit\/066e0bf6bd26b15c78bd47df023452e4b20073e4'}",
      "dataset":"osv",
      "summary":"Missing Origin Validation in parcel-bundler Versions of `parcel-bundler` before 1.10.0 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.\n\n\n## Recommendation\n\nUpdate to version 1.10.0 or later.",
      "published_date":"2018-10-30",
      "chain_len":1,
      "project":"https:\/\/github.com\/parcel-bundler\/parcel",
      "commit_href":"https:\/\/github.com\/parcel-bundler\/parcel\/commit\/066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "commit_sha":"066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "patch":"SINGLE",
      "chain_ord":"['066e0bf6bd26b15c78bd47df023452e4b20073e4']",
      "before_first_fix_commit":"{'948159b99adbc74857b380576e1e104a9097f259'}",
      "last_fix_commit":"066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/25\/2018, 03:49:56",
      "message":"fix security vuln (#1794)",
      "author":"Jasper De Moor",
      "comments":null,
      "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
      "files":"{'packages\/core\/parcel-bundler\/src\/HMRServer.js': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/parcel-bundler\/parcel\/raw\/066e0bf6bd26b15c78bd47df023452e4b20073e4\/packages%2Fcore%2Fparcel-bundler%2Fsrc%2FHMRServer.js', 'patch': \"@@ -17,7 +17,17 @@ class HMRServer {\\n         this.server = https.createServer(await getCertificate(options.https));\\n       }\\n \\n-      this.wss = new WebSocket.Server({server: this.server});\\n+      let websocketOptions = {\\n+        server: this.server\\n+      };\\n+\\n+      if (options.hmrHostname) {\\n+        websocketOptions.origin = `${options.https ? 'https' : 'http'}:\/\/${\\n+          options.hmrHostname\\n+        }`;\\n+      }\\n+\\n+      this.wss = new WebSocket.Server(websocketOptions);\\n       this.server.listen(options.hmrPort, resolve);\\n     });\"}}",
      "message_norm":"fix security vuln (#1794)",
      "language":"ro",
      "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('#1794', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['packages\/core\/parcel-bundler\/src\/HMRServer.js'])",
      "num_files":1.0,
      "patch_content":"From 066e0bf6bd26b15c78bd47df023452e4b20073e4 Mon Sep 17 00:00:00 2001\nFrom: Jasper De Moor <jasperdemoor@gmail.com>\nDate: Mon, 24 Sep 2018 20:49:56 -0700\nSubject: [PATCH] fix security vuln (#1794)\n\n---\n packages\/core\/parcel-bundler\/src\/HMRServer.js | 12 +++++++++++-\n 1 file changed, 11 insertions(+), 1 deletion(-)\n\ndiff --git a\/packages\/core\/parcel-bundler\/src\/HMRServer.js b\/packages\/core\/parcel-bundler\/src\/HMRServer.js\nindex 45176385e90..286d7bb5014 100644\n--- a\/packages\/core\/parcel-bundler\/src\/HMRServer.js\n+++ b\/packages\/core\/parcel-bundler\/src\/HMRServer.js\n@@ -17,7 +17,17 @@ class HMRServer {\n         this.server = https.createServer(await getCertificate(options.https));\n       }\n \n-      this.wss = new WebSocket.Server({server: this.server});\n+      let websocketOptions = {\n+        server: this.server\n+      };\n+\n+      if (options.hmrHostname) {\n+        websocketOptions.origin = `${options.https ? 'https' : 'http'}:\/\/${\n+          options.hmrHostname\n+        }`;\n+      }\n+\n+      this.wss = new WebSocket.Server(websocketOptions);\n       this.server.listen(options.hmrPort, resolve);\n     });",
      "code_diff":"@@ -17,7 +17,17 @@ class HMRServer {\n         this.server = https.createServer(await getCertificate(options.https));\n       }\n \n-      this.wss = new WebSocket.Server({server: this.server});\n+      let websocketOptions = {\n+        server: this.server\n+      };\n+\n+      if (options.hmrHostname) {\n+        websocketOptions.origin = `${options.https ? 'https' : 'http'}:\/\/${\n+          options.hmrHostname\n+        }`;\n+      }\n+\n+      this.wss = new WebSocket.Server(websocketOptions);\n       this.server.listen(options.hmrPort, resolve);\n     });"
    },
    {
      "index":67,
      "vuln_id":"GHSA-c9g6-9335-x697",
      "cwe_id":"{'CWE-20'}",
      "score":5.3,
      "chain":"{'https:\/\/github.com\/sockjs\/sockjs-node\/commit\/dd7e642cd69ee74385825816d30642c43e051d16'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in SocksJS-Node Incorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.",
      "published_date":"2021-04-13",
      "chain_len":1,
      "project":"https:\/\/github.com\/sockjs\/sockjs-node",
      "commit_href":"https:\/\/github.com\/sockjs\/sockjs-node\/commit\/dd7e642cd69ee74385825816d30642c43e051d16",
      "commit_sha":"dd7e642cd69ee74385825816d30642c43e051d16",
      "patch":"SINGLE",
      "chain_ord":"['dd7e642cd69ee74385825816d30642c43e051d16']",
      "before_first_fix_commit":"{'3e975c69cce21092c2ac9aa7a2f9dc40446f5ccd', '68e8fd7a92e0e73cac6894a282b6d84f33e879b3'}",
      "last_fix_commit":"dd7e642cd69ee74385825816d30642c43e051d16",
      "chain_ord_pos":1.0,
      "commit_datetime":"03\/09\/2020, 01:36:12",
      "message":"Merge pull request #266 from cakoose\/backport-writeHead-fix\n\nwriteHead: Don't end() response",
      "author":"Bryce Kahle",
      "comments":null,
      "stats":"{'additions': 0, 'deletions': 3, 'total': 3}",
      "files":"{'src\/webjs.coffee': {'additions': 0, 'deletions': 3, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sockjs\/sockjs-node\/raw\/dd7e642cd69ee74385825816d30642c43e051d16\/src%2Fwebjs.coffee', 'patch': \"@@ -45,9 +45,6 @@ fake_response = (req, res) ->\\n             try\\n                 res.write(r.join('\\\\r\\\\n'))\\n             catch x\\n-            try\\n-                res.end()\\n-            catch x\\n         res.setHeader = (k, v) -> headers[k] = v\"}}",
      "message_norm":"merge pull request #266 from cakoose\/backport-writehead-fix\n\nwritehead: don't end() response",
      "language":"en",
      "entities":"[('#266', 'ISSUE', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/webjs.coffee'])",
      "num_files":1.0,
      "patch_content":"From 3e975c69cce21092c2ac9aa7a2f9dc40446f5ccd Mon Sep 17 00:00:00 2001\nFrom: Kannan Goundan <kannan@cakoose.com>\nDate: Tue, 3 Dec 2019 20:28:40 -0800\nSubject: [PATCH] writeHead: Don't end() response\n\nBackport of #265\n---\n src\/webjs.coffee | 3 ---\n 1 file changed, 3 deletions(-)\n\ndiff --git a\/src\/webjs.coffee b\/src\/webjs.coffee\nindex 42361c52..41cc5c87 100644\n--- a\/src\/webjs.coffee\n+++ b\/src\/webjs.coffee\n@@ -45,9 +45,6 @@ fake_response = (req, res) ->\n             try\n                 res.write(r.join('\\r\\n'))\n             catch x\n-            try\n-                res.end()\n-            catch x\n         res.setHeader = (k, v) -> headers[k] = v",
      "code_diff":"@@ -45,9 +45,6 @@ fake_response = (req, res) ->\n             try\n                 res.write(r.join('\\r\\n'))\n             catch x\n-            try\n-                res.end()\n-            catch x\n         res.setHeader = (k, v) -> headers[k] = v"
    },
    {
      "index":68,
      "vuln_id":"GHSA-fv25-wrff-wf86",
      "cwe_id":"{'CWE-20'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/48305e8ffe5246d67570b64096a96f8e315a7281'}",
      "dataset":"osv",
      "summary":"Missing validation causes denial of service via `GetSessionTensor` ### Impact\nThe implementation of [`tf.raw_ops.GetSessionTensor`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/session_ops.cc#L94-L112) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.GetSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [48305e8ffe5246d67570b64096a96f8e315a7281](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/48305e8ffe5246d67570b64096a96f8e315a7281).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
      "published_date":"2022-05-24",
      "chain_len":1,
      "project":"https:\/\/github.com\/tensorflow\/tensorflow",
      "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/48305e8ffe5246d67570b64096a96f8e315a7281",
      "commit_sha":"48305e8ffe5246d67570b64096a96f8e315a7281",
      "patch":"SINGLE",
      "chain_ord":"['48305e8ffe5246d67570b64096a96f8e315a7281']",
      "before_first_fix_commit":"{'13d38a07ce9143e044aa737cfd7bb759d0e9b400'}",
      "last_fix_commit":"48305e8ffe5246d67570b64096a96f8e315a7281",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/28\/2022, 19:25:03",
      "message":"Fix tf.raw_ops.GetSessionTensor vulnerability with invalid handle.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445218701",
      "author":"Alan Liu",
      "comments":null,
      "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
      "files":"{'tensorflow\/core\/kernels\/session_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/48305e8ffe5246d67570b64096a96f8e315a7281\/tensorflow%2Fcore%2Fkernels%2Fsession_ops.cc', 'patch': '@@ -98,6 +98,8 @@ class GetSessionTensorOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& handle = ctx->input(0);\\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\\n+                errors::InvalidArgument(\"handle must be scalar\"));\\n     const string& name = handle.scalar<tstring>()();\\n     Tensor val;\\n     auto session_state = ctx->session_state();'}}",
      "message_norm":"fix tf.raw_ops.getsessiontensor vulnerability with invalid handle.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445218701",
      "language":"en",
      "entities":"[('vulnerability', 'SECWORD', ''), ('445218701', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['tensorflow\/core\/kernels\/session_ops.cc'])",
      "num_files":1.0,
      "patch_content":"From 48305e8ffe5246d67570b64096a96f8e315a7281 Mon Sep 17 00:00:00 2001\nFrom: Alan Liu <liualan@google.com>\nDate: Thu, 28 Apr 2022 12:25:03 -0700\nSubject: [PATCH] Fix tf.raw_ops.GetSessionTensor vulnerability with invalid\n handle.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445218701\n---\n tensorflow\/core\/kernels\/session_ops.cc | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a\/tensorflow\/core\/kernels\/session_ops.cc b\/tensorflow\/core\/kernels\/session_ops.cc\nindex 11f991e1ba34fe..bb47288b1575ad 100644\n--- a\/tensorflow\/core\/kernels\/session_ops.cc\n+++ b\/tensorflow\/core\/kernels\/session_ops.cc\n@@ -98,6 +98,8 @@ class GetSessionTensorOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& handle = ctx->input(0);\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\n+                errors::InvalidArgument(\"handle must be scalar\"));\n     const string& name = handle.scalar<tstring>()();\n     Tensor val;\n     auto session_state = ctx->session_state();",
      "code_diff":"@@ -98,6 +98,8 @@ class GetSessionTensorOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& handle = ctx->input(0);\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(handle.shape()),\n+                errors::InvalidArgument(\"handle must be scalar\"));\n     const string& name = handle.scalar<tstring>()();\n     Tensor val;\n     auto session_state = ctx->session_state();"
    },
    {
      "index":69,
      "vuln_id":"GHSA-x9rg-q5fx-fx66",
      "cwe_id":"{'CWE-20'}",
      "score":6.5,
      "chain":"{'https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in libpam4j It was found that libpam4j prior to 1.10 did not properly validate user accounts when authenticating. A user with a valid password for a disabled account would be able to bypass security restrictions and possibly access sensitive information.",
      "published_date":"2022-05-13",
      "chain_len":1,
      "project":"https:\/\/github.com\/kohsuke\/libpam4j",
      "commit_href":"https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21",
      "commit_sha":"02ffdff218283629ba4a902e7fe2fd44646abc21",
      "patch":"SINGLE",
      "chain_ord":"['02ffdff218283629ba4a902e7fe2fd44646abc21']",
      "before_first_fix_commit":"{'f49e2838cb195b2dce1448393d8c88174ad80652'}",
      "last_fix_commit":"02ffdff218283629ba4a902e7fe2fd44646abc21",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/29\/2018, 18:11:55",
      "message":"call pam_acct_mgmt to verify whether the user account is valid.\n\nThis fixes issue #18 and thus CVE-2017-12197",
      "author":"Kohsuke Kawaguchi",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'src\/main\/java\/org\/jvnet\/libpam\/PAM.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kohsuke\/libpam4j\/raw\/02ffdff218283629ba4a902e7fe2fd44646abc21\/src%2Fmain%2Fjava%2Forg%2Fjvnet%2Flibpam%2FPAM.java', 'patch': '@@ -124,7 +124,7 @@ public UnixUser authenticate(String username, String password) throws PAMExcepti\\n             check(libpam.pam_authenticate(pht,0),\"pam_authenticate failed\");\\n             check(libpam.pam_setcred(pht,0),\"pam_setcred failed\");\\n             \/\/ several different error code seem to be used to represent authentication failures\\n-\/\/            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n+            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n \\n             PointerByReference r = new PointerByReference();\\n             check(libpam.pam_get_item(pht,PAM_USER,r),\"pam_get_item failed\");'}}",
      "message_norm":"call pam_acct_mgmt to verify whether the user account is valid.\n\nthis fixes issue #18 and thus cve-2017-12197",
      "language":"en",
      "entities":"[('verify', 'ACTION', ''), ('user account', 'SECWORD', ''), ('#18', 'ISSUE', ''), ('cve-2017-12197', 'VULNID', 'CVE')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['src\/main\/java\/org\/jvnet\/libpam\/PAM.java'])",
      "num_files":1.0,
      "patch_content":"From 02ffdff218283629ba4a902e7fe2fd44646abc21 Mon Sep 17 00:00:00 2001\nFrom: Kohsuke Kawaguchi <kk@kohsuke.org>\nDate: Tue, 29 May 2018 11:11:55 -0700\nSubject: [PATCH] call pam_acct_mgmt to verify whether the user account is\n valid.\n\nThis fixes issue #18 and thus CVE-2017-12197\n---\n src\/main\/java\/org\/jvnet\/libpam\/PAM.java | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/src\/main\/java\/org\/jvnet\/libpam\/PAM.java b\/src\/main\/java\/org\/jvnet\/libpam\/PAM.java\nindex 9367552..658b6b8 100644\n--- a\/src\/main\/java\/org\/jvnet\/libpam\/PAM.java\n+++ b\/src\/main\/java\/org\/jvnet\/libpam\/PAM.java\n@@ -124,7 +124,7 @@ public UnixUser authenticate(String username, String password) throws PAMExcepti\n             check(libpam.pam_authenticate(pht,0),\"pam_authenticate failed\");\n             check(libpam.pam_setcred(pht,0),\"pam_setcred failed\");\n             \/\/ several different error code seem to be used to represent authentication failures\n-\/\/            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\n+            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\n \n             PointerByReference r = new PointerByReference();\n             check(libpam.pam_get_item(pht,PAM_USER,r),\"pam_get_item failed\");",
      "code_diff":"@@ -124,7 +124,7 @@ public UnixUser authenticate(String username, String password) throws PAMExcepti\n             check(libpam.pam_authenticate(pht,0),\"pam_authenticate failed\");\n             check(libpam.pam_setcred(pht,0),\"pam_setcred failed\");\n             \/\/ several different error code seem to be used to represent authentication failures\n-\/\/            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\n+            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\n \n             PointerByReference r = new PointerByReference();\n             check(libpam.pam_get_item(pht,PAM_USER,r),\"pam_get_item failed\");"
    },
    {
      "index":70,
      "vuln_id":"GHSA-f7f6-xrwc-9c57",
      "cwe_id":"{'CWE-20'}",
      "score":7.5,
      "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier bundled a version of the commons-fileupload library with the denial-of-service vulnerability known as CVE-2016-3092. The fix for that vulnerability has been backported to the version of the library bundled with Jenkins.",
      "published_date":"2022-05-14",
      "chain_len":1,
      "project":"https:\/\/github.com\/jenkinsci\/jenkins",
      "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
      "commit_sha":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
      "patch":"SINGLE",
      "chain_ord":"['ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b']",
      "before_first_fix_commit":"{'fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0'}",
      "last_fix_commit":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/29\/2017, 13:41:00",
      "message":"[SECURITY-490] Patch Commons File Upload 1.3.x.",
      "author":"Jesse Glick",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'core\/pom.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b\/core%2Fpom.xml', 'patch': '@@ -588,7 +588,7 @@ THE SOFTWARE.\\n     <dependency>\\n       <groupId>commons-fileupload<\/groupId>\\n       <artifactId>commons-fileupload<\/artifactId>\\n-      <version>1.3.1-jenkins-1<\/version>\\n+      <version>1.3.1-jenkins-2<\/version> \\n     <\/dependency>\\n \\n     <!-- offline profiler API to put in the classpath if we need it -->'}}",
      "message_norm":"[security-490] patch commons file upload 1.3.x.",
      "language":"en",
      "entities":"[('security-490', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['core\/pom.xml'])",
      "num_files":1.0,
      "patch_content":"From ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b Mon Sep 17 00:00:00 2001\nFrom: Jesse Glick <jglick@cloudbees.com>\nDate: Fri, 29 Sep 2017 09:41:00 -0400\nSubject: [PATCH] [SECURITY-490] Patch Commons File Upload 1.3.x.\n\n---\n core\/pom.xml | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/core\/pom.xml b\/core\/pom.xml\nindex 54c7ad407818..93237c04e065 100644\n--- a\/core\/pom.xml\n+++ b\/core\/pom.xml\n@@ -588,7 +588,7 @@ THE SOFTWARE.\n     <dependency>\n       <groupId>commons-fileupload<\/groupId>\n       <artifactId>commons-fileupload<\/artifactId>\n-      <version>1.3.1-jenkins-1<\/version>\n+      <version>1.3.1-jenkins-2<\/version> \n     <\/dependency>\n \n     <!-- offline profiler API to put in the classpath if we need it -->",
      "code_diff":"@@ -588,7 +588,7 @@ THE SOFTWARE.\n     <dependency>\n       <groupId>commons-fileupload<\/groupId>\n       <artifactId>commons-fileupload<\/artifactId>\n-      <version>1.3.1-jenkins-1<\/version>\n+      <version>1.3.1-jenkins-2<\/version> \n     <\/dependency>\n \n     <!-- offline profiler API to put in the classpath if we need it -->"
    },
    {
      "index":71,
      "vuln_id":"GHSA-23c7-6444-399m",
      "cwe_id":"{'CWE-284', 'CWE-20'}",
      "score":7.6,
      "chain":"{'https:\/\/github.com\/MirahezeBots\/sopel-channelmgnt\/commit\/643388365f28c5cc682254ab913c401f0e53260a', 'https:\/\/github.com\/MirahezeBots\/sopel-channelmgnt\/commit\/7c96d400358221e59135f0a0be0744f3fad73856'}",
      "dataset":"osv",
      "summary":"Improper Input Validation in sopel-plugins.channelmgnt ### Impact\nOn some IRC servers, restrictions around the removal of the bot using the kick\/kickban command could be bypassed when kicking multiple users at once.\nWe also believe it may have been possible to remove users from other channels but due to the wonder that is IRC and following RfCs, We have no POC for that.\n\nFreenode is not affected.\n\n### Patches\nUpgrade to 2.0.1 or higher\n\n### Workarounds\nDo not use this plugin on networks where TARGMAX > 1.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue on [phab](https:\/\/phab.mirahezebots.org\/maniphest\/task\/edit\/form\/1\/).\n* Email us at [staff(at)mirahezebots(dot)org](mailto:staff@mirahezebots.org)",
      "published_date":"2021-04-09",
      "chain_len":2,
      "project":"https:\/\/github.com\/MirahezeBots\/sopel-channelmgnt",
      "commit_href":"https:\/\/github.com\/MirahezeBots\/sopel-channelmgnt\/commit\/643388365f28c5cc682254ab913c401f0e53260a",
      "commit_sha":"643388365f28c5cc682254ab913c401f0e53260a",
      "patch":"MULTI",
      "chain_ord":"['643388365f28c5cc682254ab913c401f0e53260a', '7c96d400358221e59135f0a0be0744f3fad73856']",
      "before_first_fix_commit":"{'2f191af1a14fd5fbea7cba6b4ff078af253d3a05'}",
      "last_fix_commit":"7c96d400358221e59135f0a0be0744f3fad73856",
      "chain_ord_pos":1.0,
      "commit_datetime":"04\/08\/2021, 17:08:28",
      "message":"Merge pull request from GHSA-23c7-6444-399m\n\n* ban use of , & # when kicking\n\n* Update __init__.py",
      "author":"RhinosF1",
      "comments":null,
      "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
      "files":"{'sopel_channelmgnt\/channelmgnt\/__init__.py': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FOSSBots\/sopel-channelmgnt\/raw\/643388365f28c5cc682254ab913c401f0e53260a\/sopel_channelmgnt%2Fchannelmgnt%2F__init__.py', 'patch': '@@ -216,6 +216,10 @@ def kick(bot, trigger):\\n             return\\n         nick = Identifier(text[1])\\n         reason = \\' \\'.join(text[2:])\\n+        if \\',\\' in str(nick):\\n+            return bot.reply(\\'Unable to kick. Kicking multiple users is not allowed.\\') \\n+        if \\'#\\' in str(nick):\\n+            return bot.reply(\\'Unable to kick. Use of # when kicking is not expected.\\')\\n         if nick != bot.config.core.nick and trigger.account in chanops:\\n             bot.write([\\'KICK\\', trigger.sender, nick, \\':\\' + reason])\\n             if dodeop:\\n@@ -263,6 +267,10 @@ def parse_host_mask(text):\\n @example(\\'.ban nick\\')\\n def ban(bot, trigger):\\n     \"\"\"Ban a user from the channel. The bot must be a channel operator for this command to work.\"\"\"\\n+    if \\',\\' in str(nick):\\n+        return bot.reply(\\'Unable to ban. Banning multiple users is not allowed.\\') \\n+    if \\'#\\' in str(nick):\\n+        return bot.reply(\\'Unable to ban. Use of # when banning is not expected.\\')\\n     makemodechange(bot, trigger, \\'+b\\', isbqmode=True)\\n \\n \\n@@ -312,6 +320,10 @@ def kickban(bot, trigger):\\n                 deopbot(trigger.sender, bot)\\n             return\\n         nick = Identifier(text[1])\\n+        if \\',\\' in str(nick):\\n+            return bot.reply(\\'Unable to kickban. Kickbanning multiple users is not allowed.\\') \\n+        if \\'#\\' in str(nick):\\n+            return bot.reply(\\'Unable to kickban. Use of # when kickbanning is not expected.\\')\\n         mask = text[2] if any(s in text[2] for s in \\'!@*\\') else \\'\\'\\n         reasonidx = 3 if mask != \\'\\' else 2\\n         reason = \\' \\'.join(text[reasonidx:])'}}",
      "message_norm":"merge pull request from ghsa-23c7-6444-399m\n\n* ban use of , & # when kicking\n\n* update __init__.py",
      "language":"en",
      "entities":"[('ghsa-23c7-6444-399m', 'VULNID', 'GHSA')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['sopel_channelmgnt\/channelmgnt\/__init__.py'])",
      "num_files":1.0,
      "patch_content":"From 643388365f28c5cc682254ab913c401f0e53260a Mon Sep 17 00:00:00 2001\nFrom: RhinosF1 <rhinosf1@gmail.com>\nDate: Thu, 8 Apr 2021 18:08:28 +0100\nSubject: [PATCH] Merge pull request from GHSA-23c7-6444-399m\n\n* ban use of , & # when kicking\n\n* Update __init__.py\n---\n sopel_channelmgnt\/channelmgnt\/__init__.py | 12 ++++++++++++\n 1 file changed, 12 insertions(+)\n\ndiff --git a\/sopel_channelmgnt\/channelmgnt\/__init__.py b\/sopel_channelmgnt\/channelmgnt\/__init__.py\nindex 4c8a3f0..9705bd5 100644\n--- a\/sopel_channelmgnt\/channelmgnt\/__init__.py\n+++ b\/sopel_channelmgnt\/channelmgnt\/__init__.py\n@@ -216,6 +216,10 @@ def kick(bot, trigger):\n             return\n         nick = Identifier(text[1])\n         reason = ' '.join(text[2:])\n+        if ',' in str(nick):\n+            return bot.reply('Unable to kick. Kicking multiple users is not allowed.') \n+        if '#' in str(nick):\n+            return bot.reply('Unable to kick. Use of # when kicking is not expected.')\n         if nick != bot.config.core.nick and trigger.account in chanops:\n             bot.write(['KICK', trigger.sender, nick, ':' + reason])\n             if dodeop:\n@@ -263,6 +267,10 @@ def parse_host_mask(text):\n @example('.ban nick')\n def ban(bot, trigger):\n     \"\"\"Ban a user from the channel. The bot must be a channel operator for this command to work.\"\"\"\n+    if ',' in str(nick):\n+        return bot.reply('Unable to ban. Banning multiple users is not allowed.') \n+    if '#' in str(nick):\n+        return bot.reply('Unable to ban. Use of # when banning is not expected.')\n     makemodechange(bot, trigger, '+b', isbqmode=True)\n \n \n@@ -312,6 +320,10 @@ def kickban(bot, trigger):\n                 deopbot(trigger.sender, bot)\n             return\n         nick = Identifier(text[1])\n+        if ',' in str(nick):\n+            return bot.reply('Unable to kickban. Kickbanning multiple users is not allowed.') \n+        if '#' in str(nick):\n+            return bot.reply('Unable to kickban. Use of # when kickbanning is not expected.')\n         mask = text[2] if any(s in text[2] for s in '!@*') else ''\n         reasonidx = 3 if mask != '' else 2\n         reason = ' '.join(text[reasonidx:])",
      "code_diff":"@@ -216,6 +216,10 @@ def kick(bot, trigger):\n             return\n         nick = Identifier(text[1])\n         reason = ' '.join(text[2:])\n+        if ',' in str(nick):\n+            return bot.reply('Unable to kick. Kicking multiple users is not allowed.') \n+        if '#' in str(nick):\n+            return bot.reply('Unable to kick. Use of # when kicking is not expected.')\n         if nick != bot.config.core.nick and trigger.account in chanops:\n             bot.write(['KICK', trigger.sender, nick, ':' + reason])\n             if dodeop:\n@@ -263,6 +267,10 @@ def parse_host_mask(text):\n @example('.ban nick')\n def ban(bot, trigger):\n     \"\"\"Ban a user from the channel. The bot must be a channel operator for this command to work.\"\"\"\n+    if ',' in str(nick):\n+        return bot.reply('Unable to ban. Banning multiple users is not allowed.') \n+    if '#' in str(nick):\n+        return bot.reply('Unable to ban. Use of # when banning is not expected.')\n     makemodechange(bot, trigger, '+b', isbqmode=True)\n \n \n@@ -312,6 +320,10 @@ def kickban(bot, trigger):\n                 deopbot(trigger.sender, bot)\n             return\n         nick = Identifier(text[1])\n+        if ',' in str(nick):\n+            return bot.reply('Unable to kickban. Kickbanning multiple users is not allowed.') \n+        if '#' in str(nick):\n+            return bot.reply('Unable to kickban. Use of # when kickbanning is not expected.')\n         mask = text[2] if any(s in text[2] for s in '!@*') else ''\n         reasonidx = 3 if mask != '' else 2\n         reason = ' '.join(text[reasonidx:])"
    },
    {
      "index":72,
      "vuln_id":"GHSA-rp7r-79rm-2758",
      "cwe_id":"{'CWE-200'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/apache\/derby\/commit\/fd24a7590ff5426bac68303fbeca07dbc5067412', 'https:\/\/github.com\/apache\/derby\/commit\/09a7325f75a4f96a7735e46c9723930f88ea2613', 'https:\/\/github.com\/apache\/derby\/commit\/82d721fd53e30dbb86d6d742c085030985091968'}",
      "dataset":"osv",
      "summary":"Apache Derby exposes user and password attributes Apache Derby before 10.1.2.1 exposes the (1) user and (2) password attributes in cleartext via (a) the RDBNAM parameter of the ACCSEC command and (b) the output of the DatabaseMetaData.getURL function, which allows context-dependent attackers to obtain sensitive information.",
      "published_date":"2022-05-01",
      "chain_len":3,
      "project":"https:\/\/github.com\/apache\/derby",
      "commit_href":"https:\/\/github.com\/apache\/derby\/commit\/09a7325f75a4f96a7735e46c9723930f88ea2613",
      "commit_sha":"09a7325f75a4f96a7735e46c9723930f88ea2613",
      "patch":"MULTI",
      "chain_ord":"['09a7325f75a4f96a7735e46c9723930f88ea2613', '82d721fd53e30dbb86d6d742c085030985091968', 'fd24a7590ff5426bac68303fbeca07dbc5067412']",
      "before_first_fix_commit":"{'90f16141b17352af5c934f3cf8bdbbb90c40624e'}",
      "last_fix_commit":"fd24a7590ff5426bac68303fbeca07dbc5067412",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/09\/2005, 19:50:58",
      "message":"DERBY-561 - Embedded driver jdbcCompliant() method should return true\nTest will be checked in as part of tess for DERBY-530\n\n\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860 13f79535-47bb-0310-9956-ffa450edef68",
      "author":"Katherine Marsden",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/derby\/raw\/09a7325f75a4f96a7735e46c9723930f88ea2613\/java%2Fengine%2Forg%2Fapache%2Fderby%2Fjdbc%2FInternalDriver.java', 'patch': '@@ -209,7 +209,7 @@ public int getMinorVersion() {\\n \\t}\\r\\n \\r\\n \\tpublic boolean jdbcCompliant() {\\r\\n-\\t\\treturn false;\\r\\n+\\t\\treturn true;\\r\\n \\t}\\r\\n \\r\\n \\t\/*'}}",
      "message_norm":"derby-561 - embedded driver jdbccompliant() method should return true\ntest will be checked in as part of tess for derby-530\n\n\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860 13f79535-47bb-0310-9956-ffa450edef68",
      "language":"en",
      "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java'])",
      "num_files":1.0,
      "patch_content":"From 09a7325f75a4f96a7735e46c9723930f88ea2613 Mon Sep 17 00:00:00 2001\nFrom: Katherine Marsden <kmarsden@apache.org>\nDate: Fri, 9 Sep 2005 19:50:58 +0000\nSubject: [PATCH] DERBY-561 - Embedded driver jdbcCompliant() method should\n return true Test will be checked in as part of tess for DERBY-530\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860 13f79535-47bb-0310-9956-ffa450edef68\n---\n java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java b\/java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java\nindex c8ecf04e6c..b0e90643f4 100644\n--- a\/java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java\n+++ b\/java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java\n@@ -209,7 +209,7 @@ public int getMinorVersion() {\n \t}\r\n \r\n \tpublic boolean jdbcCompliant() {\r\n-\t\treturn false;\r\n+\t\treturn true;\r\n \t}\r\n \r\n \t\/*",
      "code_diff":"@@ -209,7 +209,7 @@ public int getMinorVersion() {\n \t}\n \n \tpublic boolean jdbcCompliant() {\n-\t\treturn false;\n+\t\treturn true;\n \t}\n \n \t\/*"
    },
    {
      "index":73,
      "vuln_id":"GHSA-wwgf-3xp7-cxj4",
      "cwe_id":"{'CWE-200'}",
      "score":5.9,
      "chain":"{'https:\/\/github.com\/FriendsOfPHP\/security-advisories\/commit\/942fd37245cb724ba8cc8d6f11f075a1bd53b338'}",
      "dataset":"osv",
      "summary":"Potentially sensitive data exposure in Symfony Web Socket Bundle ### Impact\nInside `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::onPublish()`, messages are arbitrarily broadcasted to the related Topic if `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::dispatch()` does not succeed.  The `dispatch()` method can be considered to not succeed if (depending on the version of the bundle) the callback defined on a topic route is misconfigured, a `Gos\\Bundle\\WebSocketBundle\\Topic\\TopicInterface` implementation is not found for the callback, a topic which also implements `Gos\\Bundle\\WebSocketBundle\\Topic\\SecuredTopicInterface` rejects the connection, or an Exception is unhandled.  This can result in an unintended broadcast to the websocket server potentially with data that should be considered sensitive.\n\n### Patches\nIn 1.10.4, 2.6.1, and 3.3.0, `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::onPublish()` has been changed to no longer broadcast an event's data if `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::dispatch()` fails.\n\n### Workarounds\nUpgrade to 1.10.4, 2.6.1, and 3.3.0\n\nNote, the 1.x branch is considered end of support as of July 1, 2020.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [this repository](https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle)",
      "published_date":"2020-07-07",
      "chain_len":1,
      "project":"https:\/\/github.com\/FriendsOfPHP\/security-advisories",
      "commit_href":"https:\/\/github.com\/FriendsOfPHP\/security-advisories\/commit\/942fd37245cb724ba8cc8d6f11f075a1bd53b338",
      "commit_sha":"942fd37245cb724ba8cc8d6f11f075a1bd53b338",
      "patch":"SINGLE",
      "chain_ord":"['942fd37245cb724ba8cc8d6f11f075a1bd53b338']",
      "before_first_fix_commit":"{'c6fc7221e152c3a73fed562ad9c815ccf258a476'}",
      "last_fix_commit":"942fd37245cb724ba8cc8d6f11f075a1bd53b338",
      "chain_ord_pos":1.0,
      "commit_datetime":"07\/06\/2020, 14:36:56",
      "message":"Add gos\/web-socket-bundle advisory",
      "author":"Michael Babker",
      "comments":null,
      "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
      "files":"{'gos\/web-socket-bundle\/2020-07-06-1.yaml': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'added', 'raw_url': 'https:\/\/github.com\/FriendsOfPHP\/security-advisories\/raw\/942fd37245cb724ba8cc8d6f11f075a1bd53b338\/gos%2Fweb-socket-bundle%2F2020-07-06-1.yaml', 'patch': \"@@ -0,0 +1,13 @@\\n+title:     Potentially sensitive data exposure\\n+link:      https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle\/security\/advisories\/GHSA-wwgf-3xp7-cxj4\\n+branches:\\n+    1.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['<1.10.4']\\n+    3.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['>=2.0.0', '<2.6.1']\\n+    3.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['>=3.0.0', '<3.3.0']\\n+reference: composer:\/\/gos\/web-socket-bundle\"}}",
      "message_norm":"add gos\/web-socket-bundle advisory",
      "language":"en",
      "entities":"[('add', 'ACTION', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['gos\/web-socket-bundle\/2020-07-06-1.yaml'])",
      "num_files":1.0,
      "patch_content":"From 942fd37245cb724ba8cc8d6f11f075a1bd53b338 Mon Sep 17 00:00:00 2001\nFrom: Michael Babker <michael.babker@gmail.com>\nDate: Mon, 6 Jul 2020 09:36:56 -0500\nSubject: [PATCH] Add gos\/web-socket-bundle advisory\n\n---\n gos\/web-socket-bundle\/2020-07-06-1.yaml | 13 +++++++++++++\n 1 file changed, 13 insertions(+)\n create mode 100644 gos\/web-socket-bundle\/2020-07-06-1.yaml\n\ndiff --git a\/gos\/web-socket-bundle\/2020-07-06-1.yaml b\/gos\/web-socket-bundle\/2020-07-06-1.yaml\nnew file mode 100644\nindex 000000000..f57e29676\n--- \/dev\/null\n+++ b\/gos\/web-socket-bundle\/2020-07-06-1.yaml\n@@ -0,0 +1,13 @@\n+title:     Potentially sensitive data exposure\n+link:      https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle\/security\/advisories\/GHSA-wwgf-3xp7-cxj4\n+branches:\n+    1.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['<1.10.4']\n+    3.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['>=2.0.0', '<2.6.1']\n+    3.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['>=3.0.0', '<3.3.0']\n+reference: composer:\/\/gos\/web-socket-bundle",
      "code_diff":"new file mode 100644\n@@ -0,0 +1,13 @@\n+title:     Potentially sensitive data exposure\n+link:      https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle\/security\/advisories\/GHSA-wwgf-3xp7-cxj4\n+branches:\n+    1.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['<1.10.4']\n+    3.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['>=2.0.0', '<2.6.1']\n+    3.x:\n+        time:       2020-07-06 14:08:35\n+        versions:   ['>=3.0.0', '<3.3.0']\n+reference: composer:\/\/gos\/web-socket-bundle"
    },
    {
      "index":74,
      "vuln_id":"GHSA-m2q3-53fq-7h66",
      "cwe_id":"{'CWE-200'}",
      "score":0.0,
      "chain":"{'https:\/\/github.com\/gollum\/gollum\/commit\/ce68a88293ce3b18c261312392ad33a88bb69ea1'}",
      "dataset":"osv",
      "summary":"Moderate severity vulnerability that affects gollum The Precious module in gollum before 4.0.1 allows remote attackers to read arbitrary files by leveraging the lack of a certain temporary-file check.",
      "published_date":"2018-08-28",
      "chain_len":1,
      "project":"https:\/\/github.com\/gollum\/gollum",
      "commit_href":"https:\/\/github.com\/gollum\/gollum\/commit\/ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "commit_sha":"ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "patch":"SINGLE",
      "chain_ord":"['ce68a88293ce3b18c261312392ad33a88bb69ea1']",
      "before_first_fix_commit":"{'288f75929d57bff1753b47aa860066ce674d5229'}",
      "last_fix_commit":"ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "chain_ord_pos":1.0,
      "commit_datetime":"09\/20\/2015, 11:53:02",
      "message":"Added security check.",
      "author":"Bart Kamphorst",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
      "files":"{'lib\/gollum\/app.rb': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gollum\/gollum\/raw\/ce68a88293ce3b18c261312392ad33a88bb69ea1\/lib%2Fgollum%2Fapp.rb', 'patch': \"@@ -176,6 +176,7 @@ def wiki_new\\n         fullname = params[:file][:filename]\\n         tempfile = params[:file][:tempfile]\\n       end\\n+      halt 500 unless tempfile.is_a? Tempfile\\n \\n       # Remove page file dir prefix from upload path if necessary -- committer handles this itself\\n       dir      = wiki.per_page_uploads ? params[:upload_dest].match(\/^(#{wiki.page_file_dir}\\\\\/+)?(.*)\/)[2] : 'uploads'\"}}",
      "message_norm":"added security check.",
      "language":"en",
      "entities":"[('added', 'ACTION', ''), ('security', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/gollum\/app.rb'])",
      "num_files":1.0,
      "patch_content":"From ce68a88293ce3b18c261312392ad33a88bb69ea1 Mon Sep 17 00:00:00 2001\nFrom: Bart Kamphorst <bart@kamphorst.com>\nDate: Sun, 20 Sep 2015 13:53:02 +0200\nSubject: [PATCH] Added security check.\n\n---\n lib\/gollum\/app.rb | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a\/lib\/gollum\/app.rb b\/lib\/gollum\/app.rb\nindex 12e47541a..3fde8bf27 100644\n--- a\/lib\/gollum\/app.rb\n+++ b\/lib\/gollum\/app.rb\n@@ -176,6 +176,7 @@ def wiki_new\n         fullname = params[:file][:filename]\n         tempfile = params[:file][:tempfile]\n       end\n+      halt 500 unless tempfile.is_a? Tempfile\n \n       # Remove page file dir prefix from upload path if necessary -- committer handles this itself\n       dir      = wiki.per_page_uploads ? params[:upload_dest].match(\/^(#{wiki.page_file_dir}\\\/+)?(.*)\/)[2] : 'uploads'",
      "code_diff":"@@ -176,6 +176,7 @@ def wiki_new\n         fullname = params[:file][:filename]\n         tempfile = params[:file][:tempfile]\n       end\n+      halt 500 unless tempfile.is_a? Tempfile\n \n       # Remove page file dir prefix from upload path if necessary -- committer handles this itself\n       dir      = wiki.per_page_uploads ? params[:upload_dest].match(\/^(#{wiki.page_file_dir}\\\/+)?(.*)\/)[2] : 'uploads'"
    },
    {
      "index":75,
      "vuln_id":"GHSA-3wcq-x3mq-6r9p",
      "cwe_id":"{'CWE-908', 'CWE-200'}",
      "score":7.7,
      "chain":"{'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d', 'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56'}",
      "dataset":"osv",
      "summary":"Potential memory exposure in dns-packet This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.",
      "published_date":"2021-05-24",
      "chain_len":2,
      "project":"https:\/\/github.com\/mafintosh\/dns-packet",
      "commit_href":"https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
      "commit_sha":"25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
      "patch":"MULTI",
      "chain_ord":"['25f15dd0fedc53688b25fd053ebbdffe3d5c1c56', '0d0d593f8df4e2712c43957a6c62e95047f12b2d']",
      "before_first_fix_commit":"{'7f35bac5b4680d7bfbb34fbc475ecfdbf9d25092'}",
      "last_fix_commit":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
      "chain_ord_pos":1.0,
      "commit_datetime":"05\/19\/2021, 17:59:39",
      "message":"do trim on encodingLength as well",
      "author":"Mathias Buus",
      "comments":null,
      "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
      "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/dns-packet\/raw\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56\/index.js', 'patch': \"@@ -78,7 +78,7 @@ name.decode.bytes = 0\\n \\n name.encodingLength = function (n) {\\n   if (n === '.') return 1\\n-  return Buffer.byteLength(n) + 2\\n+  return Buffer.byteLength(n.replace(\/^\\\\.|\\\\.$\/gm, '')) + 2\\n }\\n \\n const string = {}\"}}",
      "message_norm":"do trim on encodinglength as well",
      "language":"en",
      "entities":"[('encodinglength', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['index.js'])",
      "num_files":1.0,
      "patch_content":"From 25f15dd0fedc53688b25fd053ebbdffe3d5c1c56 Mon Sep 17 00:00:00 2001\nFrom: Mathias Buus <mathiasbuus@gmail.com>\nDate: Wed, 19 May 2021 19:59:39 +0200\nSubject: [PATCH] do trim on encodingLength as well\n\n---\n index.js | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/index.js b\/index.js\nindex b6a52c6..9b9b4de 100644\n--- a\/index.js\n+++ b\/index.js\n@@ -78,7 +78,7 @@ name.decode.bytes = 0\n \n name.encodingLength = function (n) {\n   if (n === '.') return 1\n-  return Buffer.byteLength(n) + 2\n+  return Buffer.byteLength(n.replace(\/^\\.|\\.$\/gm, '')) + 2\n }\n \n const string = {}",
      "code_diff":"@@ -78,7 +78,7 @@ name.decode.bytes = 0\n \n name.encodingLength = function (n) {\n   if (n === '.') return 1\n-  return Buffer.byteLength(n) + 2\n+  return Buffer.byteLength(n.replace(\/^\\.|\\.$\/gm, '')) + 2\n }\n \n const string = {}"
    },
    {
      "index":76,
      "vuln_id":"GHSA-4r65-35qq-ch8j",
      "cwe_id":"{'CWE-209'}",
      "score":5.5,
      "chain":"{'https:\/\/github.com\/ansible\/ansible\/commit\/fe28767970c8ec62aabe493c46b53a5de1e5fac0'}",
      "dataset":"osv",
      "summary":"Ansible discloses sensitive information in traceback error message Ansible is an IT automation system that handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration. A flaw was found in Ansible Engine's ansible-connection module where sensitive information, such as the Ansible user credentials, is disclosed by default in the traceback error message when Ansible receives an unexpected response from `set_options`. The highest threat from this vulnerability is confidentiality.",
      "published_date":"2022-03-04",
      "chain_len":1,
      "project":"https:\/\/github.com\/ansible\/ansible",
      "commit_href":"https:\/\/github.com\/ansible\/ansible\/commit\/fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "commit_sha":"fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "patch":"SINGLE",
      "chain_ord":"['fe28767970c8ec62aabe493c46b53a5de1e5fac0']",
      "before_first_fix_commit":"{'6d2398db280f145eed70a6618282c9db630a380a'}",
      "last_fix_commit":"fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "chain_ord_pos":1.0,
      "commit_datetime":"06\/07\/2021, 20:43:11",
      "message":"Fixed exposed credentials in exception\n\nUnder certain conditions, sensitive connection parameters are shown in tracebacks when Ansible receives an unexpected response (in my case `None`) from `set_options` in ansible-connection. This patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
      "author":"dalrrard",
      "comments":null,
      "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
      "files":"{'lib\/ansible\/module_utils\/connection.py': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ansible\/ansible\/raw\/fe28767970c8ec62aabe493c46b53a5de1e5fac0\/lib%2Fansible%2Fmodule_utils%2Fconnection.py', 'patch': '@@ -38,10 +38,13 @@\\n import uuid\\n \\n from functools import partial\\n+from ansible import constants as C\\n from ansible.module_utils._text import to_bytes, to_text\\n from ansible.module_utils.common.json import AnsibleJSONEncoder\\n+from ansible.module_utils.common.parameters import remove_values\\n from ansible.module_utils.six import iteritems\\n from ansible.module_utils.six.moves import cPickle\\n+from ansible.utils.helpers import deduplicate_list\\n \\n \\n def write_to_file_descriptor(fd, obj):\\n@@ -163,12 +166,26 @@ def _exec_jsonrpc(self, name, *args, **kwargs):\\n         try:\\n             response = json.loads(out)\\n         except ValueError:\\n-            params = [repr(arg) for arg in args] + [\\'{0}={1!r}\\'.format(k, v) for k, v in iteritems(kwargs)]\\n+            sensitive_keys = list(\\n+                    C.MAGIC_VARIABLE_MAPPING[\"password\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"private_key_file\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"become_pass\"]\\n+            )\\n+            sensitive_values = [\\n+                v2 \\n+                for k, v in iteritems(kwargs) \\n+                for k2, v2 in iteritems(v) \\n+                if k2 in sensitive_keys\\n+            ]\\n+            params = [repr(remove_values(arg, sensitive_values)) for arg in args] + [\\n+                \"{0}={1!r}\".format(k, remove_values(v, sensitive_values)) \\n+                for k, v in iteritems(kwargs)]\\n             params = \\', \\'.join(params)\\n             raise ConnectionError(\\n                 \"Unable to decode JSON from response to {0}({1}). Received \\'{2}\\'.\".format(name, params, out)\\n             )\\n \\n+\\n         if response[\\'id\\'] != reqid:\\n             raise ConnectionError(\\'invalid json-rpc id received\\')\\n         if \"result_type\" in response:'}}",
      "message_norm":"fixed exposed credentials in exception\n\nunder certain conditions, sensitive connection parameters are shown in tracebacks when ansible receives an unexpected response (in my case `none`) from `set_options` in ansible-connection. this patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
      "language":"en",
      "entities":"[('fixed', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('sensitive', 'SECWORD', '')]",
      "classification_level_1":null,
      "classification_level_2":null,
      "list_files":"dict_keys(['lib\/ansible\/module_utils\/connection.py'])",
      "num_files":1.0,
      "patch_content":"From fe28767970c8ec62aabe493c46b53a5de1e5fac0 Mon Sep 17 00:00:00 2001\nFrom: dalrrard <8892319+dalrrard@users.noreply.github.com>\nDate: Mon, 7 Jun 2021 15:43:11 -0500\nSubject: [PATCH] Fixed exposed credentials in exception\n\nUnder certain conditions, sensitive connection parameters are shown in tracebacks when Ansible receives an unexpected response (in my case `None`) from `set_options` in ansible-connection. This patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.\n---\n lib\/ansible\/module_utils\/connection.py | 19 ++++++++++++++++++-\n 1 file changed, 18 insertions(+), 1 deletion(-)\n\ndiff --git a\/lib\/ansible\/module_utils\/connection.py b\/lib\/ansible\/module_utils\/connection.py\nindex a76fdb6bcc3c21..f828860f963ff0 100644\n--- a\/lib\/ansible\/module_utils\/connection.py\n+++ b\/lib\/ansible\/module_utils\/connection.py\n@@ -38,10 +38,13 @@\n import uuid\n \n from functools import partial\n+from ansible import constants as C\n from ansible.module_utils._text import to_bytes, to_text\n from ansible.module_utils.common.json import AnsibleJSONEncoder\n+from ansible.module_utils.common.parameters import remove_values\n from ansible.module_utils.six import iteritems\n from ansible.module_utils.six.moves import cPickle\n+from ansible.utils.helpers import deduplicate_list\n \n \n def write_to_file_descriptor(fd, obj):\n@@ -163,12 +166,26 @@ def _exec_jsonrpc(self, name, *args, **kwargs):\n         try:\n             response = json.loads(out)\n         except ValueError:\n-            params = [repr(arg) for arg in args] + ['{0}={1!r}'.format(k, v) for k, v in iteritems(kwargs)]\n+            sensitive_keys = list(\n+                    C.MAGIC_VARIABLE_MAPPING[\"password\"]\n+                    + C.MAGIC_VARIABLE_MAPPING[\"private_key_file\"]\n+                    + C.MAGIC_VARIABLE_MAPPING[\"become_pass\"]\n+            )\n+            sensitive_values = [\n+                v2 \n+                for k, v in iteritems(kwargs) \n+                for k2, v2 in iteritems(v) \n+                if k2 in sensitive_keys\n+            ]\n+            params = [repr(remove_values(arg, sensitive_values)) for arg in args] + [\n+                \"{0}={1!r}\".format(k, remove_values(v, sensitive_values)) \n+                for k, v in iteritems(kwargs)]\n             params = ', '.join(params)\n             raise ConnectionError(\n                 \"Unable to decode JSON from response to {0}({1}). Received '{2}'.\".format(name, params, out)\n             )\n \n+\n         if response['id'] != reqid:\n             raise ConnectionError('invalid json-rpc id received')\n         if \"result_type\" in response:",
      "code_diff":"@@ -38,10 +38,13 @@\n import uuid\n \n from functools import partial\n+from ansible import constants as C\n from ansible.module_utils._text import to_bytes, to_text\n from ansible.module_utils.common.json import AnsibleJSONEncoder\n+from ansible.module_utils.common.parameters import remove_values\n from ansible.module_utils.six import iteritems\n from ansible.module_utils.six.moves import cPickle\n+from ansible.utils.helpers import deduplicate_list\n \n \n def write_to_file_descriptor(fd, obj):\n@@ -163,12 +166,26 @@ def _exec_jsonrpc(self, name, *args, **kwargs):\n         try:\n             response = json.loads(out)\n         except ValueError:\n-            params = [repr(arg) for arg in args] + ['{0}={1!r}'.format(k, v) for k, v in iteritems(kwargs)]\n+            sensitive_keys = list(\n+                    C.MAGIC_VARIABLE_MAPPING[\"password\"]\n+                    + C.MAGIC_VARIABLE_MAPPING[\"private_key_file\"]\n+                    + C.MAGIC_VARIABLE_MAPPING[\"become_pass\"]\n+            )\n+            sensitive_values = [\n+                v2 \n+                for k, v in iteritems(kwargs) \n+                for k2, v2 in iteritems(v) \n+                if k2 in sensitive_keys\n+            ]\n+            params = [repr(remove_values(arg, sensitive_values)) for arg in args] + [\n+                \"{0}={1!r}\".format(k, remove_values(v, sensitive_values)) \n+                for k, v in iteritems(kwargs)]\n             params = ', '.join(params)\n             raise ConnectionError(\n                 \"Unable to decode JSON from response to {0}({1}). Received '{2}'.\".format(name, params, out)\n             )\n \n+\n         if response['id'] != reqid:\n             raise ConnectionError('invalid json-rpc id received')\n         if \"result_type\" in response:"
    }
  ]
}