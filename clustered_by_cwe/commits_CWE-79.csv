vuln_id,code_diff,cwe_id
PYSEC-2020-72,"From f3809fc8a97ee305d721662a75f788f9e9d21938 Mon Sep 17 00:00:00 2001
From: Joshua Sangmeister <joshua.sangmeister@gmail.com>
Date: Fri, 20 Nov 2020 13:38:37 +0100
Subject: [PATCH] Fixed HTML attribute validation

---
 server/openslides/utils/validate.py | 38 +++++++++++++++++++++++++----
 1 file changed, 33 insertions(+), 5 deletions(-)

diff --git a/server/openslides/utils/validate.py b/server/openslides/utils/validate.py
index 14dacee5dc..1aa61edb62 100644
--- a/server/openslides/utils/validate.py
+++ b/server/openslides/utils/validate.py
@@ -43,12 +43,40 @@
     ""video"",
 ]
 
+allowed_attributes = [
+    ""align"",
+    ""alt"",
+    ""autoplay"",
+    ""background"",
+    ""bgcolor"",
+    ""border"",
+    ""class"",
+    ""colspan"",
+    ""controls"",
+    ""dir"",
+    ""height"",
+    ""hidden"",
+    ""href"",
+    ""hreflang"",
+    ""id"",
+    ""lang"",
+    ""loop"",
+    ""muted"",
+    ""poster"",
+    ""preload"",
+    ""rel"",
+    ""rowspan"",
+    ""scope"",
+    ""sizes"",
+    ""src"",
+    ""srcset"",
+    ""start"",
+    ""style"",
+    ""target"",
+    ""title"",
+    ""width"",
+]
 
-def allow_all(tag: str, name: str, value: str) -> bool:
-    return True
-
-
-allowed_attributes = allow_all
 allowed_styles = [
     ""color"",
     ""background-color"",",CWE-79
CVE-2020-19626,"From 76a2168b6a5e30144f5c06da4ff264f4eca577ff Mon Sep 17 00:00:00 2001
From: Brad Bell <brad@pixelandtonic.com>
Date: Thu, 27 Jun 2019 09:41:17 -0700
Subject: [PATCH] Fixed an XSS vulnerability.

---
 CHANGELOG-v3.md                            | 5 +++++
 src/templates/settings/sections/_edit.html | 2 +-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/CHANGELOG-v3.md b/CHANGELOG-v3.md
index 56d5fb19e7a..78aaaafc862 100644
--- a/CHANGELOG-v3.md
+++ b/CHANGELOG-v3.md
@@ -1,5 +1,10 @@
 # Release Notes for Craft CMS 3.x
 
+## Unreleased
+
+### Security
+- Fixed an XSS vulnerability.
+
 ## 3.1.32.1 - 2019-06-25
 
 ### Fixed
diff --git a/src/templates/settings/sections/_edit.html b/src/templates/settings/sections/_edit.html
index e7f0c12c4e4..e28fdb1ec34 100644
--- a/src/templates/settings/sections/_edit.html
+++ b/src/templates/settings/sections/_edit.html
@@ -68,7 +68,7 @@
         {% endif %}
         {% set siteRows = siteRows|merge({
             (site.handle): {
-                heading: site.name|t('site'),
+                heading: site.name|t('site')|e,
                 enabled: include('_includes/forms/lightswitch', {
                     name: 'sites['~site.handle~'][enabled]',
                     on: brandNewSection or siteSettings,",CWE-79
CVE-2018-7260,"From d2886a3e8745e8845633ae8a0054b5ee4d8babd5 Mon Sep 17 00:00:00 2001
From: Madhura Jayaratne <madhura.cj@gmail.com>
Date: Thu, 8 Feb 2018 00:05:57 +1100
Subject: [PATCH] Fix XSS vulnerability in central columns feature

Signed-off-by: Madhura Jayaratne <madhura.cj@gmail.com>
---
 ChangeLog              | 1 +
 db_central_columns.php | 4 +++-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 3463cc969b49..41e359620f54 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -5,6 +5,7 @@ phpMyAdmin - ChangeLog
 - issue #13914 Fixed resetting default setting values.
 - issue #13758 Fixed fallback value for collation connection.
 - issue #13938 Fixed error handling in PHP 7.2
+- issue        [security] Fix XSS in Central Columns Feature, See PMASA-2018-01
 
 4.7.7 (2017-12-23)
 - issue #13865 Fixed displaying of formatted numeric values for some locales
diff --git a/db_central_columns.php b/db_central_columns.php
index 321b4e9b8261..c3f9e7891b4c 100644
--- a/db_central_columns.php
+++ b/db_central_columns.php
@@ -90,7 +90,9 @@
     parse_str($_POST['col_name'], $col_name);
     $tmp_msg = PMA_deleteColumnsFromList($col_name['selected_fld'], false);
 }
-if (isset($_REQUEST['total_rows']) && $_REQUEST['total_rows']) {
+if (!empty($_REQUEST['total_rows'])
+    && PMA_isValid($_REQUEST['total_rows'], 'integer')
+) {
     $total_rows = $_REQUEST['total_rows'];
 } else {
     $total_rows = PMA_getCentralColumnsCount($db);",CWE-79
CVE-2014-9269,"From 511564ccfce59ec9a7c5b456d8c0ba184c5fa3b4 Mon Sep 17 00:00:00 2001
From: Damien Regad <dregad@mantisbt.org>
Date: Sat, 15 Nov 2014 14:57:45 +0100
Subject: [PATCH] Fix #17890: XSS in extended project browser

Extended project browser allows projects to be passed in as A;B.
helper_get_current_project() and helper_get_current_project_trace() then
explodes the string by ';' and don't check that A is an int (a project /
sub-project id).  Finally, print_extended_project_browser() prints the
result of the split into a javascript array.

Paul Richards discovered the issue and wrote the original patch for it.
His code was modified to remove a redudant typecast as well as an
unnecessary foreach loop in helper_get_current_project(), replacing it
with a single type cast.
---
 core/helper_api.php | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/core/helper_api.php b/core/helper_api.php
index 8579212533..b24ddec4b3 100644
--- a/core/helper_api.php
+++ b/core/helper_api.php
@@ -232,13 +232,13 @@ function helper_get_current_project() {
 			$t_project_id = $t_pref->default_project;
 		} else {
 			$t_project_id = explode( ';', $t_project_id );
-			$t_project_id = $t_project_id[count( $t_project_id ) - 1];
+			$t_project_id = (int)$t_project_id[count( $t_project_id ) - 1];
 		}
 
 		if( !project_exists( $t_project_id ) || ( 0 == project_get_field( $t_project_id, 'enabled' ) ) || !access_has_project_level( VIEWER, $t_project_id ) ) {
 			$t_project_id = ALL_PROJECTS;
 		}
-		$g_cache_current_project = (int) $t_project_id;
+		$g_cache_current_project = $t_project_id;
 	}
 	return $g_cache_current_project;
 }
@@ -272,6 +272,9 @@ function helper_get_current_project_trace() {
 
 	} else {
 		$t_project_id = explode( ';', $t_project_id );
+		foreach( $t_project_id as $t_key => $t_id ) {
+			$t_project_id[$t_key] = (int)$t_id;
+		}
 		$t_bottom = $t_project_id[count( $t_project_id ) - 1];
 	}",CWE-79
CVE-2014-5273,"From 3ffc967fb60cf2910cc2f571017e977558c67821 Mon Sep 17 00:00:00 2001
From: Madhura Jayaratne <madhura.cj@gmail.com>
Date: Sun, 17 Aug 2014 08:54:05 -0400
Subject: [PATCH] bug #4517 [security] XSS in relation view

Signed-off-by: Marc Delisle <marc@infomarc.info>
---
 ChangeLog                      | 1 +
 libraries/tbl_relation.lib.php | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index eea09d6158aa..1edd1858bcea 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -7,6 +7,7 @@ phpMyAdmin - ChangeLog
 - bug #4503 [security] Self-XSSes in monitor
 - bug #4504 [security] Self-XSS in query charts
 - bug #4505 [security] XSS in view operations page
+- bug #4517 [security] XSS in relation view
 
 4.2.7.0 (2014-07-31)
 - bug       Broken links on home page
diff --git a/libraries/tbl_relation.lib.php b/libraries/tbl_relation.lib.php
index 0e1bc3d8020d..60b020ed47b9 100644
--- a/libraries/tbl_relation.lib.php
+++ b/libraries/tbl_relation.lib.php
@@ -554,7 +554,7 @@ function PMA_getHtmlForForeignKey($save_row, $i, $existrel_foreign, $myfield, $d
         $html_output .= __('Constraint name');
         $html_output .= '<input type=""text"" name=""constraint_name['
             . $myfield_md5 . ']""'
-            . ' value=""' . $constraint_name . '""/>';
+            . ' value=""' . htmlspecialchars($constraint_name) . '""/>';
         $html_output .= '</span>' . ""\n"";
 
         $html_output .= '<span class=""formelement clearfloat"">';",CWE-79
CVE-2017-1000491,"From e8a65b0f81eb04903eedd29500d7e1bedf249eab Mon Sep 17 00:00:00 2001
From: rhysd <lin90162@yahoo.co.jp>
Date: Wed, 29 Nov 2017 01:34:37 +0900
Subject: [PATCH] improve marked renderer

---
 package.json                 |   3 +-
 renderer/markdown-preview.ts |   5 +-
 renderer/marked.d.ts         | 166 -----------------------------------
 renderer/tsconfig.json       |   1 -
 4 files changed, 6 insertions(+), 169 deletions(-)
 delete mode 100644 renderer/marked.d.ts

diff --git a/package.json b/package.json
index 733f8da9..a489bf58 100644
--- a/package.json
+++ b/package.json
@@ -51,9 +51,10 @@
     ""@types/empower"": ""^1.2.30"",
     ""@types/es6-promise"": ""0.0.33"",
     ""@types/he"": ""^0.5.29"",
-    ""@types/highlight.js"": ""^9.12.1"",
+    ""@types/highlight.js"": ""^9.12.2"",
     ""@types/js-yaml"": ""^3.9.1"",
     ""@types/katex"": ""0.5.0"",
+    ""@types/marked"": ""^0.3.0"",
     ""@types/mocha"": ""^2.2.44"",
     ""@types/mousetrap"": ""^1.5.34"",
     ""@types/node"": ""8.0.53"",
diff --git a/renderer/markdown-preview.ts b/renderer/markdown-preview.ts
index 48a86769..55569dc4 100644
--- a/renderer/markdown-preview.ts
+++ b/renderer/markdown-preview.ts
@@ -41,9 +41,12 @@ marked.setOptions({
         }
     },
 
+    // @ts-ignore: emoji is a dedicated method added by my fork
     emoji(name: string) {
         return emoji_replacer.replaceOne(name);
     },
+
+    sanitize: 1,
 });
 
 const REGEX_CHECKED_LISTITEM = /^\[x]\s+/;
@@ -51,7 +54,7 @@ const REGEX_UNCHECKED_LISTITEM = /^\[ ]\s+/;
 
 class MarkdownRenderer {
     public outline: Heading[];
-    private renderer: MarkedRenderer;
+    private renderer: marked.Renderer;
     private link_id: number;
     private tooltips: string;
 
diff --git a/renderer/marked.d.ts b/renderer/marked.d.ts
deleted file mode 100644
index 2ebf0e7e..00000000
--- a/renderer/marked.d.ts
+++ /dev/null
@@ -1,166 +0,0 @@
-// Generated by typings
-// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/9cfdb11648f823b889287c770254b85b78a7a4a4/marked/marked.d.ts
-interface MarkedStatic {
-    Renderer: {
-        new(): MarkedRenderer;
-    };
-
-    Parser: {
-        new(options: MarkedOptions): MarkedParser;
-    };
-
-    /**
-     * Compiles markdown to HTML.
-     *
-     * @param src String of markdown source to be compiled
-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting
-     * @return String of compiled HTML
-     */
-    (src: string, callback: (...args: any[]) => void): string;
-
-    /**
-     * Compiles markdown to HTML.
-     *
-     * @param src String of markdown source to be compiled
-     * @param options Hash of options
-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting
-     * @return String of compiled HTML
-     */
-    (src: string, options?: MarkedOptions, callback?: (...args: any[]) => void): string;
-
-    /**
-     * @param src String of markdown source to be compiled
-     * @param options Hash of options
-     */
-    lexer(src: string, options?: MarkedOptions): any[];
-
-    /**
-     * Compiles markdown to HTML.
-     *
-     * @param src String of markdown source to be compiled
-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting
-     * @return String of compiled HTML
-     */
-    parse(src: string, callback: (...args: any[]) => void): string;
-
-    /**
-     * Compiles markdown to HTML.
-     *
-     * @param src String of markdown source to be compiled
-     * @param options Hash of options
-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting
-     * @return String of compiled HTML
-     */
-    parse(src: string, options?: MarkedOptions, callback?: (...args: any[]) => void): string;
-
-    /**
-     * @param options Hash of options
-     */
-    parser(src: any[], options?: MarkedOptions): string;
-
-    /**
-     * Sets the default options.
-     *
-     * @param options Hash of options
-     */
-    setOptions(options: MarkedOptions): MarkedStatic;
-}
-
-interface MarkedRenderer {
-    code(code: string, language: string): string;
-    blockquote(quote: string): string;
-    html(html: string): string;
-    heading(text: string, level: number, raw: string): string;
-    hr(): string;
-    list(body: string, ordered: boolean): string;
-    listitem(text: string): string;
-    paragraph(text: string): string;
-    table(header: string, body: string): string;
-    tablerow(content: string): string;
-    tablecell(content: string, flags: {
-        header: boolean,
-        align: string
-    }): string;
-    strong(text: string): string;
-    em(text: string): string;
-    codespan(code: string): string;
-    br(): string;
-    del(text: string): string;
-    link(href: string, title: string, text: string): string;
-    image(href: string, title: string, text: string): string;
-    text(text: string): string;
-}
-
-interface MarkedParser {
-    parse(source: any[]): string;
-}
-
-interface MarkedOptions {
-    /**
-     * Type: object Default: new Renderer()
-     *
-     * An object containing functions to render tokens to HTML.
-     */
-    renderer?: MarkedRenderer;
-
-    /**
-     * Enable GitHub flavored markdown.
-     */
-    gfm?: boolean;
-
-    /**
-     * Enable GFM tables. This option requires the gfm option to be true.
-     */
-    tables?: boolean;
-
-    /**
-     * Enable GFM line breaks. This option requires the gfm option to be true.
-     */
-    breaks?: boolean;
-
-    /**
-     * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.
-     */
-    pedantic?: boolean;
-
-    /**
-     * Sanitize the output. Ignore any HTML that has been input.
-     */
-    sanitize?: boolean;
-
-    /**
-     * Use smarter list behavior than the original markdown. May eventually be default with the old behavior moved into pedantic.
-     */
-    smartLists?: boolean;
-
-    /**
-     * Shows an HTML error message when rendering fails.
-     */
-    silent?: boolean;
-
-    /**
-     * A function to highlight code blocks. The function takes three arguments: code, lang, and callback.
-     */
-    highlight?: (code: string, lang: string, callback?: (...args: any[]) => void) => string;
-
-    /**
-     * Set the prefix for code block classes.
-     */
-    langPrefix?: string;
-
-    /**
-     * Use 'smart' typograhic punctuation for things like quotes and dashes.
-     */
-    smartypants?: boolean;
-
-    /**
-     * Forked 'emoji' inline images
-     */
-    emoji?: (name: string) => string;
-}
-
-declare module 'marked' {
-    const marked: MarkedStatic;
-    export = marked;
-}
-
diff --git a/renderer/tsconfig.json b/renderer/tsconfig.json
index 647bd351..db757105 100644
--- a/renderer/tsconfig.json
+++ b/renderer/tsconfig.json
@@ -18,7 +18,6 @@
     ""index.ts"",
     ""keyboard.ts"",
     ""lib.d.ts"",
-    ""marked.d.ts"",
     ""lint-message.ts"",
     ""lint-panel.ts"",
     ""markdown-preview.ts"",",CWE-79
GHSA-f7q6-xxph-mfm8,"From 3ae96b9d41c117aafa45873ad10077d4b873a3cb Mon Sep 17 00:00:00 2001
From: Divesh <divesh.pahuja@pimcore.com>
Date: Tue, 25 Jan 2022 12:20:25 +0100
Subject: [PATCH] disallow html entity names on import - follow up to #11217

---
 models/DataObject/ClassDefinition/Service.php | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/models/DataObject/ClassDefinition/Service.php b/models/DataObject/ClassDefinition/Service.php
index 46ba9941366..4208f1e09f8 100644
--- a/models/DataObject/ClassDefinition/Service.php
+++ b/models/DataObject/ClassDefinition/Service.php
@@ -315,11 +315,11 @@ public static function generateLayoutTreeFromArray($array, $throwException = fal
     {
         if (is_array($array) && count($array) > 0) {
             if ($name = $array['name'] ?? false) {
-                $sanitizedName = htmlentities($name);
-                if ($sanitizedName !== $name) {
+                if (preg_match('/<.+?>/', $name)) {
                     throw new \Exception('not a valid name:' . htmlentities($name));
                 }
             }
+
             /** @var LoaderInterface $loader */
             $loader = \Pimcore::getContainer()->get('pimcore.implementation_loader.object.' . $array['datatype']);",CWE-79
PYSEC-2014-78,"From 77a68c03cd619a0996f3f37337b8c39ca6643d6e Mon Sep 17 00:00:00 2001
From: Christian Hammond <chipx86@chipx86.com>
Date: Fri, 6 Jun 2014 01:28:03 -0700
Subject: [PATCH] Fix a XSS vulnerability with bad input to json_dumps.

Django's JSON serialization does not handle escaping of any characters
to make them safe for injecting into HTML. This allows an attacker who
can provide part of a JSON-serializable object to craft a string that
can break out of a <script> tag and create its own, injecting a custom
script.

To fix this, we escape '<', '>', and '&' characters in the resulting
string, preventing a </script> from executing.
---
 djblets/util/templatetags/djblets_js.py |  9 ++++++++-
 djblets/util/templatetags/tests.py      | 19 +++++++++++++++++++
 2 files changed, 27 insertions(+), 1 deletion(-)
 create mode 100644 djblets/util/templatetags/tests.py

diff --git a/djblets/util/templatetags/djblets_js.py b/djblets/util/templatetags/djblets_js.py
index 5cb5449b..ae9bff85 100644
--- a/djblets/util/templatetags/djblets_js.py
+++ b/djblets/util/templatetags/djblets_js.py
@@ -31,6 +31,7 @@
 from django.core.serializers import serialize
 from django.db.models.query import QuerySet
 from django.utils import six
+from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
 from djblets.util.serializers import DjbletsJSONEncoder
@@ -38,6 +39,12 @@
 
 register = template.Library()
 
+_safe_js_escapes = {
+    ord('&'): '\\u0026',
+    ord('<'): '\\u003C',
+    ord('>'): '\\u003E',
+}
+
 
 @register.simple_tag
 def form_dialog_fields(form):
@@ -75,7 +82,7 @@ def json_dumps(value, indent=None):
     else:
         result = json.dumps(value, indent=indent, cls=DjbletsJSONEncoder)
 
-    return mark_safe(result)
+    return mark_safe(force_text(result).translate(_safe_js_escapes))
 
 
 @register.filter
diff --git a/djblets/util/templatetags/tests.py b/djblets/util/templatetags/tests.py
new file mode 100644
index 00000000..e5281f97
--- /dev/null
+++ b/djblets/util/templatetags/tests.py
@@ -0,0 +1,19 @@
+from __future__ import unicode_literals
+
+from djblets.testing.testcases import TestCase
+from djblets.util.templatetags.djblets_js import json_dumps
+
+
+class JSTagTests(TestCase):
+    """"""Unit tests for djblets_js template tags.""""""
+    def test_json_dumps_xss(self):
+        """"""Testing json_dumps doesn't allow XSS injection""""""
+        # This is bug 3406.
+        obj = {
+            'xss': '</script><script>alert(1);</script>'
+        }
+
+        self.assertEqual(
+            json_dumps(obj),
+            '{""xss"": ""\\u003C/script\\u003E\\u003Cscript\\u003E'
+            'alert(1);\\u003C/script\\u003E""}')",CWE-79
CVE-2018-20962,"From 8b6bd0a2d489a4690f6b1d7ace67e2f07f5f0cc6 Mon Sep 17 00:00:00 2001
From: Cristian Tabacitu <cristitabacitu@gmail.com>
Date: Thu, 10 May 2018 05:19:48 +0000
Subject: [PATCH] fixes #1297 - possible xss vulnerability in select field type

---
 CHANGELOG.md                                 | 1 +
 src/resources/views/columns/select.blade.php | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1d225eba0a..5235a31447 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -24,6 +24,7 @@ All Notable changes to `Backpack CRUD` will be documented in this file
 
 ## Fixed
 - #1378 - when a custom default page length is specified, it should show up in the page length menu;
+- #1297 - possible XSS vulnerability in ```select``` field type; now using ```e()``` to escape the attribute;
 
 
 ## [3.4.8] - 2018-05-07
diff --git a/src/resources/views/columns/select.blade.php b/src/resources/views/columns/select.blade.php
index f0a50c6a30..82b0aedf1f 100644
--- a/src/resources/views/columns/select.blade.php
+++ b/src/resources/views/columns/select.blade.php
@@ -3,7 +3,7 @@
     <?php
         $attributes = $crud->getModelAttributeFromRelation($entry, $column['entity'], $column['attribute']);
         if (count($attributes)) {
-            echo implode(', ', $attributes);
+            echo e(implode(', ', $attributes));
         } else {
             echo '-';
         }",CWE-79
CVE-2019-14667,"From 15d4d185bbedf2bb9db4a8fa2ccf9fc359a06194 Mon Sep 17 00:00:00 2001
From: James Cole <thegrumpydictator@gmail.com>
Date: Fri, 2 Aug 2019 20:57:36 +0200
Subject: [PATCH] Fix #2363

---
 resources/views/v1/transactions/convert.twig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/resources/views/v1/transactions/convert.twig b/resources/views/v1/transactions/convert.twig
index 051f843a40f..6c591337fa4 100644
--- a/resources/views/v1/transactions/convert.twig
+++ b/resources/views/v1/transactions/convert.twig
@@ -17,7 +17,7 @@
                     </div>
                     <div class=""box-body"">
                         {{ ExpandedForm.staticText('type', sourceType.type|_) }}
-                        {{ ExpandedForm.staticText('description', '<a href=""'~route('transactions.show', journal.id)~'"">'~journal.description~'</a>') }}
+                        {{ ExpandedForm.staticText('description', '<a href=""'~route('transactions.show', journal.id)~'"">'~journal.description|escape~'</a>') }}
                         {{ ExpandedForm.staticText('date', journal.date.formatLocalized(monthAndDayFormat)) }}
 
                         {# in case of withdrawal #}",CWE-79
CVE-2018-25045,"From 4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8 Mon Sep 17 00:00:00 2001
From: ""Yury V. Zaytsev"" <yury@shurup.com>
Date: Wed, 16 Jan 2019 13:36:25 +0100
Subject: [PATCH] Fix XSS caused by disabled autoescaping in the default DRF
 Browsable API view templates (#6330)

* Add test that verifies that HTML is correctly escaped in Browsable API views

* Fix `urlize_quoted_links` tag to avoid double escaping in autoescape mode

* Fix XSS in default DRF Browsable API template by re-enabling autoescape
---
 .../templates/rest_framework/base.html        |  4 +--
 rest_framework/templatetags/rest_framework.py | 26 +++++++++----------
 tests/test_templatetags.py                    | 13 ++++++++--
 3 files changed, 26 insertions(+), 17 deletions(-)

diff --git a/rest_framework/templates/rest_framework/base.html b/rest_framework/templates/rest_framework/base.html
index 26395e1fdc..688fd23104 100644
--- a/rest_framework/templates/rest_framework/base.html
+++ b/rest_framework/templates/rest_framework/base.html
@@ -171,10 +171,10 @@ <h1>{{ name }}</h1>
               </div>
 
               <div class=""response-info"" aria-label=""{% trans ""response info"" %}"">
-                <pre class=""prettyprint""><span class=""meta nocode""><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% autoescape off %}{% for key, val in response_headers|items %}
+                <pre class=""prettyprint""><span class=""meta nocode""><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% for key, val in response_headers|items %}
 <b>{{ key }}:</b> <span class=""lit"">{{ val|break_long_headers|urlize_quoted_links }}</span>{% endfor %}
 
-</span>{{ content|urlize_quoted_links }}</pre>{% endautoescape %}
+</span>{{ content|urlize_quoted_links }}</pre>
               </div>
             </div>
 
diff --git a/rest_framework/templatetags/rest_framework.py b/rest_framework/templatetags/rest_framework.py
index 3923389737..f48675d5eb 100644
--- a/rest_framework/templatetags/rest_framework.py
+++ b/rest_framework/templatetags/rest_framework.py
@@ -336,6 +336,12 @@ def trim_url(x, limit=trim_url_limit):
         return limit is not None and (len(x) > limit and ('%s...' % x[:max(0, limit - 3)])) or x
 
     safe_input = isinstance(text, SafeData)
+
+    # Unfortunately, Django built-in cannot be used here, because escaping
+    # is to be performed on words, which have been forcibly coerced to text
+    def conditional_escape(text):
+        return escape(text) if autoescape and not safe_input else text
+
     words = word_split_re.split(force_text(text))
     for i, word in enumerate(words):
         if '.' in word or '@' in word or ':' in word:
@@ -376,21 +382,15 @@ def trim_url(x, limit=trim_url_limit):
             # Make link.
             if url:
                 trimmed = trim_url(middle)
-                if autoescape and not safe_input:
-                    lead, trail = escape(lead), escape(trail)
-                    url, trimmed = escape(url), escape(trimmed)
+                lead, trail = conditional_escape(lead), conditional_escape(trail)
+                url, trimmed = conditional_escape(url), conditional_escape(trimmed)
                 middle = '<a href=""%s""%s>%s</a>' % (url, nofollow_attr, trimmed)
-                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
+                words[i] = '%s%s%s' % (lead, middle, trail)
             else:
-                if safe_input:
-                    words[i] = mark_safe(word)
-                elif autoescape:
-                    words[i] = escape(word)
-        elif safe_input:
-            words[i] = mark_safe(word)
-        elif autoescape:
-            words[i] = escape(word)
-    return ''.join(words)
+                words[i] = conditional_escape(word)
+        else:
+            words[i] = conditional_escape(word)
+    return mark_safe(''.join(words))
 
 
 @register.filter
diff --git a/tests/test_templatetags.py b/tests/test_templatetags.py
index 5d4f6a4e3d..45bfd4aeb7 100644
--- a/tests/test_templatetags.py
+++ b/tests/test_templatetags.py
@@ -305,6 +305,15 @@ def test_json_with_url(self):
             '&quot;foo_set&quot;: [\n    &quot;<a href=""http://api/foos/1/"">http://api/foos/1/</a>&quot;\n], '
         self._urlize_dict_check(data)
 
+    def test_template_render_with_autoescape(self):
+        """"""
+        Test that HTML is correctly escaped in Browsable API views.
+        """"""
+        template = Template(""{% load rest_framework %}{{ content|urlize_quoted_links }}"")
+        rendered = template.render(Context({'content': '<script>alert()</script> http://example.com'}))
+        assert rendered == '&lt;script&gt;alert()&lt;/script&gt;' \
+                           ' <a href=""http://example.com"" rel=""nofollow"">http://example.com</a>'
+
     def test_template_render_with_noautoescape(self):
         """"""
         Test if the autoescape value is getting passed to urlize_quoted_links filter.
@@ -312,8 +321,8 @@ def test_template_render_with_noautoescape(self):
         template = Template(""{% load rest_framework %}""
                             ""{% autoescape off %}{{ content|urlize_quoted_links }}""
                             ""{% endautoescape %}"")
-        rendered = template.render(Context({'content': '""http://example.com""'}))
-        assert rendered == '""<a href=""http://example.com"" rel=""nofollow"">http://example.com</a>""'
+        rendered = template.render(Context({'content': '<b> ""http://example.com"" </b>'}))
+        assert rendered == '<b> ""<a href=""http://example.com"" rel=""nofollow"">http://example.com</a>"" </b>'
 
 
 @unittest.skipUnless(coreapi, 'coreapi is not installed')",CWE-79
