vuln_id,code_diff,cwe_id
CVE-2013-7262,"From 3a10f6b829297dae63492a8c63385044bc6953ed Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@mines-paris.org>
Date: Tue, 31 Dec 2013 13:54:40 +0100
Subject: [PATCH] Fix potential SQL Injection with postgis TIME filters (#4834)

---
 mappostgis.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/mappostgis.c b/mappostgis.c
index 1f4c64eba1..f24d9697a3 100644
--- a/mappostgis.c
+++ b/mappostgis.c
@@ -3212,6 +3212,11 @@ int msPostGISLayerSetTimeFilter(layerObj *lp, const char *timestring, const char
   if (!lp || !timestring || !timefield)
     return MS_FALSE;
 
+  if( strchr(timestring,'\'') || strchr(timestring, '\\') ) {
+     msSetError(MS_MISCERR, ""Invalid time filter."", ""msPostGISLayerSetTimeFilter()"");
+     return MS_FALSE;
+  }
+
   /* discrete time */
   if (strstr(timestring, "","") == NULL &&
       strstr(timestring, ""/"") == NULL) { /* discrete time */",CWE-89
CVE-2016-5843,"From 3700f75c67f6ed1d39bc213445c6d12a458e1af9 Mon Sep 17 00:00:00 2001
From: Carlos Rodriguez <carlos.rodriguez@otrs.com>
Date: Mon, 27 Jun 2016 16:28:09 -0500
Subject: [PATCH] Fixed issue with not correctly quoted search parameters.

---
 CHANGES-FAQ.md                          |  1 +
 FAQ.sopm                                |  1 +
 Kernel/System/FAQSearch.pm              | 73 +++++++++++++++++-----
 doc/en/FAQ.xml                          |  2 +-
 scripts/test/FAQSearch.t                | 59 ++++++++++++++++--
 scripts/test/FAQSearch/InConditionGet.t | 80 +++++++++++++++++++++++++
 6 files changed, 194 insertions(+), 22 deletions(-)
 create mode 100644 scripts/test/FAQSearch/InConditionGet.t

diff --git a/CHANGES-FAQ.md b/CHANGES-FAQ.md
index 2bb621b5e..ce7ae0142 100644
--- a/CHANGES-FAQ.md
+++ b/CHANGES-FAQ.md
@@ -1,4 +1,5 @@
 #4.0.4 - 2015-??-??
+- 2016-06-27 Fixed issue with not correctly quoted search parameters.
 
 #4.0.3 - 2015-12-01
  - 2015-11-24 Fixed bug#[11687](http://bugs.otrs.org/show_bug.cgi?id=11687) - XSS injection vulnerability in modules AgentFAQSearch and AgentFAQSearchSmall on parameter profile.
diff --git a/FAQ.sopm b/FAQ.sopm
index 58d48d8a0..bb81c0cd5 100644
--- a/FAQ.sopm
+++ b/FAQ.sopm
@@ -117,6 +117,7 @@
         <File Permission=""644"" Location=""Kernel/System/FAQSearch.pm""/>
         <File Permission=""644"" Location=""Kernel/System/LinkObject/FAQ.pm""/>
         <File Permission=""644"" Location=""Kernel/System/Stats/Static/FAQAccess.pm""/>
+        <File Permission=""644"" Location=""scripts/test/FAQSearch/InConditionGet.t""/>
         <File Permission=""644"" Location=""scripts/test/FAQ.t""/>
         <File Permission=""644"" Location=""scripts/test/FAQSearch.t""/>
         <File Permission=""644"" Location=""scripts/test/sample/FAQ-Test1.doc""/>
diff --git a/Kernel/System/FAQSearch.pm b/Kernel/System/FAQSearch.pm
index 8317e1f09..3f1f314e6 100644
--- a/Kernel/System/FAQSearch.pm
+++ b/Kernel/System/FAQSearch.pm
@@ -218,6 +218,43 @@ sub FAQSearch {
         Result => 'vrate',
     );
 
+    # check types of given arguments
+    ARGUMENT:
+    for my $Key (qw(LanguageIDs CategoryIDs ValidIDs CreatedUserIDs LastChangedUserIDs)) {
+
+        next ARGUMENT if !$Param{$Key};
+        next ARGUMENT if ref $Param{$Key} eq 'ARRAY' && @{ $Param{$Key} };
+
+        # log error
+        $Kernel::OM->Get('Kernel::System::Log')->Log(
+            Priority => 'error',
+            Message  => ""The given param '$Key' is invalid or an empty array reference!"",
+        );
+        return;
+    }
+
+    # get database object
+    my $DBObject = $Kernel::OM->Get('Kernel::System::DB');
+
+    # quote id array elements
+    ARGUMENT:
+    for my $Key (qw(LanguageIDs CategoryIDs ValidIDs CreatedUserIDs LastChangedUserIDs)) {
+        next ARGUMENT if !$Param{$Key};
+
+        # quote elements
+        for my $Element ( @{ $Param{$Key} } ) {
+            if ( !defined $DBObject->Quote( $Element, 'Integer' ) ) {
+
+                # log error
+                $Kernel::OM->Get('Kernel::System::Log')->Log(
+                    Priority => 'error',
+                    Message  => ""The given param '$Element' in '$Key' is invalid!"",
+                );
+                return;
+            }
+        }
+    }
+
     my $FAQDynamicFields = [];
     my %ValidDynamicFieldParams;
     my %FAQDynamicFieldName2Config;
@@ -298,7 +335,6 @@ sub FAQSearch {
     my $Ext = '';
 
     # get needed objects
-    my $DBObject     = $Kernel::OM->Get('Kernel::System::DB');
     my $ConfigObject = $Kernel::OM->Get('Kernel::Config');
 
     # full-text search
@@ -442,7 +478,9 @@ sub FAQSearch {
     # search for states
     if ( $Param{States} && ref $Param{States} eq 'HASH' && %{ $Param{States} } ) {
 
-        my @States = map {$_} keys %{ $Param{States} };
+        my @States = map { $DBObject->Quote( $_, 'Integer' ) } keys %{ $Param{States} };
+
+        return if scalar @States != keys $Param{States};
 
         my $InString = $Self->_InConditionGet(
             TableColumn => 's.type_id',
@@ -1019,16 +1057,20 @@ condition string from an array.
 sub _InConditionGet {
     my ( $Self, %Param ) = @_;
 
-    # check needed stuff
-    for my $Key (qw(TableColumn IDRef)) {
-        if ( !$Param{$Key} ) {
-            $Kernel::OM->Get('Kernel::System::Log')->Log(
-                Priority => 'error',
-                Message  => ""Need $Key!"",
-            );
+    if ( !$Param{TableColumn} ) {
+        $Kernel::OM->Get('Kernel::System::Log')->Log(
+            Priority => 'error',
+            Message  => ""Need TableColumn!"",
+        );
+        return;
+    }
 
-            return;
-        }
+    if ( !$Param{IDRef} || ref $Param{IDRef} ne 'ARRAY' || !@{ $Param{IDRef} } ) {
+        $Kernel::OM->Get('Kernel::System::Log')->Log(
+            Priority => 'error',
+            Message  => ""Need IDRef!"",
+        );
+        return;
     }
 
     # sort ids to cache the SQL query
@@ -1037,10 +1079,9 @@ sub _InConditionGet {
     # get database object
     my $DBObject = $Kernel::OM->Get('Kernel::System::DB');
 
-    # quote values
-    for my $Value (@SortedIDs) {
-        $DBObject->Quote( $Value, 'Integer' );
-    }
+    # Error out if some values were not integers.
+    @SortedIDs = map { $Kernel::OM->Get('Kernel::System::DB')->Quote( $_, 'Integer' ) } @SortedIDs;
+    return if scalar @SortedIDs != scalar @{ $Param{IDRef} };
 
     # split IN statement with more than 900 elements in more statements combined with OR
     # because Oracle doesn't support more than 1000 elements in one IN statement.
@@ -1050,7 +1091,7 @@ sub _InConditionGet {
 
         my @SortedIDsPart = splice @SortedIDs, 0, 900;
 
-        my $IDString = join ',', @SortedIDsPart;
+        my $IDString = join ', ', @SortedIDsPart;
 
         push @SQLStrings, "" $Param{TableColumn} IN ($IDString) "";
     }
diff --git a/doc/en/FAQ.xml b/doc/en/FAQ.xml
index a818a6b9e..aad39a963 100644
--- a/doc/en/FAQ.xml
+++ b/doc/en/FAQ.xml
@@ -1561,7 +1561,7 @@ shell> bin/otrs.PackageManager.pl -a install -p /path/to/$Name-$Version.opm
             command on the command line:
         </para>
         <screen>
-shell> perl bin/otrs.UnitTest.pl -n FAQ:FAQSearch:GenericInterface/FAQConnector
+shell> perl bin/otrs.UnitTest.pl -n FAQ:FAQSearch:FAQSearch/InConditionGet:GenericInterface/FAQConnector
         </screen>
         <para>Run all available unit tests</para>
         <para>
diff --git a/scripts/test/FAQSearch.t b/scripts/test/FAQSearch.t
index e64f52d8a..bc1b1a90f 100644
--- a/scripts/test/FAQSearch.t
+++ b/scripts/test/FAQSearch.t
@@ -479,6 +479,58 @@ for my $Test (@Tests) {
     );
 }
 
+# other tests
+@Tests = (
+    {
+        Name   => 'States Hash Correct IDs',
+        Config => {
+            %SearchConfigTemplate,
+            States => {
+                1 => 'Internal',
+                2 => 'External',
+                3 => 'Public',
+            },
+        },
+        ExpectedResults => [ $AddedFAQs[0], $AddedFAQs[1] ],
+    },
+    {
+        Name   => 'States Hash Incorrect IDs (Float)',
+        Config => {
+            %SearchConfigTemplate,
+            States => {
+                1.1 => 'Internal',
+                2.2 => 'External',
+                3.3 => 'Public',
+            },
+        },
+        ExpectedResults => [],
+    },
+    {
+        Name   => 'States Hash Incorrect IDs (String)',
+        Config => {
+            %SearchConfigTemplate,
+            States => {
+                'Internal' => 'Internal',
+                'External' => 'External',
+                'Public'   => 'Public',
+            },
+        },
+        ExpectedResults => [],
+    },
+
+);
+
+# execute the tests
+for my $Test (@Tests) {
+    my @FAQIDs = $FAQObject->FAQSearch( %{ $Test->{Config} } );
+
+    $Self->IsDeeply(
+        \@FAQIDs,
+        $Test->{ExpectedResults},
+        ""$Test->{Name} FAQSearch()"",
+    );
+}
+
 # time based tests
 
 # update FAQs
@@ -749,12 +801,9 @@ for my $Test (@Tests) {
         Name   => 'Wrong LastChangedUserIDs Format',
         Config => {
             %SearchConfigTemplate,
-            CreatedUserIDs => $AddedUsers[2],
+            LastChangedUserIDs => $AddedUsers[2],
         },
-        ExpectedResults => [
-            $AddedFAQs[0],
-            $AddedFAQs[1],
-        ],
+        ExpectedResults => [],
     },
 );
 
diff --git a/scripts/test/FAQSearch/InConditionGet.t b/scripts/test/FAQSearch/InConditionGet.t
new file mode 100644
index 000000000..cd791f405
--- /dev/null
+++ b/scripts/test/FAQSearch/InConditionGet.t
@@ -0,0 +1,80 @@
+# --
+# Copyright (C) 2001-2016 OTRS AG, http://otrs.com/
+# --
+# This software comes with ABSOLUTELY NO WARRANTY. For details, see
+# the enclosed file COPYING for license information (AGPL). If you
+# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
+# --
+
+## no critic (Modules::RequireExplicitPackage)
+use strict;
+use warnings;
+use utf8;
+
+use vars (qw($Self));
+
+# get helper object
+$Kernel::OM->ObjectParamAdd(
+    'Kernel::System::UnitTest::Helper' => {
+        RestoreDatabase => 1,
+    },
+);
+my $Helper = $Kernel::OM->Get('Kernel::System::UnitTest::Helper');
+
+my @Tests = (
+    {
+        Name   => 'No array',
+        Params => {
+            TableColumn => 'test.table',
+            IDRef       => 1,
+        },
+        Result => undef,
+    },
+    {
+        Name   => 'Single Integer',
+        Params => {
+            TableColumn => 'test.table',
+            IDRef       => [1],
+        },
+        Result => ' (  test.table IN (1)  ) ',
+    },
+    {
+        Name   => 'Sorted values',
+        Params => {
+            TableColumn => 'test.table',
+            IDRef       => [ 2, 1, -1, 0 ],
+        },
+        Result => ' (  test.table IN (-1, 0, 1, 2)  ) ',
+    },
+    {
+        Name   => 'Invalid value',
+        Params => {
+            TableColumn => 'test.table',
+            IDRef       => [1.1],
+        },
+        Result => undef,
+    },
+    {
+        Name   => 'Mix of valid and invalid values',
+        Params => {
+            TableColumn => 'test.table',
+            IDRef       => [ 1, 1.1 ],
+        },
+        Result => undef,
+    },
+);
+
+# get FAQ object
+my $FAQObject = $Kernel::OM->Get('Kernel::System::FAQ');
+
+for my $Test (@Tests) {
+    $Self->Is(
+        scalar $FAQObject->_InConditionGet( %{ $Test->{Params} } ),
+        $Test->{Result},
+        ""$Test->{Name} _InConditionGet()""
+    );
+}
+
+# cleanup is done by RestoreDatabase.
+
+1;",CWE-89
