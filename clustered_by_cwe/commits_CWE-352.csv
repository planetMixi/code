vuln_id,code_diff,cwe_id
PYSEC-2020-213,"From 1c36307463b1e8affae100bf9386948e6c1b2308 Mon Sep 17 00:00:00 2001
From: Ben Darnell <ben@bendarnell.com>
Date: Mon, 26 May 2014 15:44:58 -0400
Subject: [PATCH] Change the xsrf cookie format to be masked with a random
 salt.

This protects against the BREACH attack.
---
 tornado/test/web_test.py       |  6 ++--
 tornado/test/websocket_test.py |  3 +-
 tornado/util.py                | 43 +++++++++++++++++++++++++
 tornado/web.py                 | 59 +++++++++++++++++++++++++++++-----
 tornado/websocket.py           | 43 +------------------------
 5 files changed, 101 insertions(+), 53 deletions(-)

diff --git a/tornado/test/web_test.py b/tornado/test/web_test.py
index 7e4fa3133c..2c85bfb01f 100644
--- a/tornado/test/web_test.py
+++ b/tornado/test/web_test.py
@@ -2004,16 +2004,18 @@ def test_cross_user(self):
 
     def test_refresh_token(self):
         token = self.xsrf_token
+        tokens_seen = set([token])
         # A user's token is stable over time.  Refreshing the page in one tab
         # might update the cookie while an older tab still has the old cookie
         # in its DOM.  Simulate this scenario by passing a constant token
         # in the body and re-querying for the token.
         for i in range(5):
             token = self.get_token(token)
-            # Implementation detail: the same token is returned each time
-            self.assertEqual(token, self.xsrf_token)
+            # Tokens are encoded uniquely each time
+            tokens_seen.add(token)
             response = self.fetch(
                 ""/"", method=""POST"",
                 body=urllib_parse.urlencode(dict(_xsrf=self.xsrf_token)),
                 headers=self.cookie_headers(token))
             self.assertEqual(response.code, 200)
+        self.assertEqual(len(tokens_seen), 6)
diff --git a/tornado/test/websocket_test.py b/tornado/test/websocket_test.py
index 01fee72b28..3233e59df8 100644
--- a/tornado/test/websocket_test.py
+++ b/tornado/test/websocket_test.py
@@ -11,6 +11,7 @@
 
 try:
     import tornado.websocket
+    from tornado.util import _websocket_mask_python
 except ImportError:
     # The unittest module presents misleading errors on ImportError
     # (it acts as if websocket_test could not be found, hiding the underlying
@@ -19,7 +20,7 @@
     traceback.print_exc()
     raise
 
-from tornado.websocket import WebSocketHandler, websocket_connect, WebSocketError, _websocket_mask_python
+from tornado.websocket import WebSocketHandler, websocket_connect, WebSocketError
 
 try:
     from tornado import speedups
diff --git a/tornado/util.py b/tornado/util.py
index a2fba779ca..05ac4e5fa7 100644
--- a/tornado/util.py
+++ b/tornado/util.py
@@ -12,11 +12,19 @@
 
 from __future__ import absolute_import, division, print_function, with_statement
 
+import array
 import inspect
+import os
 import sys
 import zlib
 
 
+try:
+    xrange  # py2
+except NameError:
+    xrange = range  # py3
+
+
 class ObjectDict(dict):
     """"""Makes a dictionary behave like an object, with attribute-style access.
     """"""
@@ -265,6 +273,41 @@ def replace(self, new_value, args, kwargs):
         return old_value, args, kwargs
 
 
+def _websocket_mask_python(mask, data):
+    """"""Websocket masking function.
+
+    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.
+    Returns a `bytes` object of the same length as `data` with the mask applied
+    as specified in section 5.3 of RFC 6455.
+
+    This pure-python implementation may be replaced by an optimized version when available.
+    """"""
+    mask = array.array(""B"", mask)
+    unmasked = array.array(""B"", data)
+    for i in xrange(len(data)):
+        unmasked[i] = unmasked[i] ^ mask[i % 4]
+    if hasattr(unmasked, 'tobytes'):
+        # tostring was deprecated in py32.  It hasn't been removed,
+        # but since we turn on deprecation warnings in our tests
+        # we need to use the right one.
+        return unmasked.tobytes()
+    else:
+        return unmasked.tostring()
+
+if (os.environ.get('TORNADO_NO_EXTENSION') or
+    os.environ.get('TORNADO_EXTENSION') == '0'):
+    # These environment variables exist to make it easier to do performance
+    # comparisons; they are not guaranteed to remain supported in the future.
+    _websocket_mask = _websocket_mask_python
+else:
+    try:
+        from tornado.speedups import websocket_mask as _websocket_mask
+    except ImportError:
+        if os.environ.get('TORNADO_EXTENSION') == '1':
+            raise
+        _websocket_mask = _websocket_mask_python
+
+
 def doctests():
     import doctest
     return doctest.DocTestSuite()
diff --git a/tornado/web.py b/tornado/web.py
index 1b618a70b7..ed8148e16d 100644
--- a/tornado/web.py
+++ b/tornado/web.py
@@ -72,7 +72,6 @@ def get(self):
 import tornado
 import traceback
 import types
-import uuid
 
 from tornado.concurrent import Future
 from tornado import escape
@@ -82,7 +81,7 @@ def get(self):
 from tornado import stack_context
 from tornado import template
 from tornado.escape import utf8, _unicode
-from tornado.util import bytes_type, import_object, ObjectDict, raise_exc_info, unicode_type
+from tornado.util import bytes_type, import_object, ObjectDict, raise_exc_info, unicode_type, _websocket_mask
 
 try:
     from io import BytesIO  # python 3
@@ -1071,14 +1070,56 @@ def xsrf_token(self):
         See http://en.wikipedia.org/wiki/Cross-site_request_forgery
         """"""
         if not hasattr(self, ""_xsrf_token""):
-            token = self.get_cookie(""_xsrf"")
-            if not token:
-                token = binascii.b2a_hex(os.urandom(16))
+            version, token, timestamp = self._get_raw_xsrf_token()
+            mask = os.urandom(4)
+            self._xsrf_token = b""|"".join([
+                b""2"",
+                binascii.b2a_hex(mask),
+                binascii.b2a_hex(_websocket_mask(mask, token)),
+                utf8(str(int(timestamp)))])
+            if version is None or version != 2:
                 expires_days = 30 if self.current_user else None
-                self.set_cookie(""_xsrf"", token, expires_days=expires_days)
-            self._xsrf_token = token
+                self.set_cookie(""_xsrf"", self._xsrf_token,
+                                expires_days=expires_days)
         return self._xsrf_token
 
+    def _get_raw_xsrf_token(self):
+        if not hasattr(self, '_raw_xsrf_token'):
+            cookie = self.get_cookie(""_xsrf"")
+            if cookie:
+                version, token, timestamp = self._decode_xsrf_token(cookie)
+            else:
+                version, token, timestamp = None, None, None
+            if token is None:
+                version = None
+                token = os.urandom(16)
+                timestamp = time.time()
+            self._raw_xsrf_token = (version, token, timestamp)
+        return self._raw_xsrf_token
+
+    def _decode_xsrf_token(self, cookie):
+        m = _signed_value_version_re.match(utf8(cookie))
+        if m:
+            version = int(m.group(1))
+            if version == 2:
+                _, mask, masked_token, timestamp = cookie.split(""|"")
+                mask = binascii.a2b_hex(utf8(mask))
+                token = _websocket_mask(
+                    mask, binascii.a2b_hex(utf8(masked_token)))
+                timestamp = int(timestamp)
+                return version, token, timestamp
+            else:
+                # Treat unknown versions as not present instead of failing.
+                return None, None, None
+        elif len(cookie) == 32:
+            version = 1
+            token = binascii.a2b_hex(cookie)
+            # We don't have a usable timestamp in older versions.
+            timestamp = int(time.time())
+            return (version, token, timestamp)
+        else:
+            return None, None, None
+
     def check_xsrf_cookie(self):
         """"""Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
 
@@ -1105,7 +1146,9 @@ def check_xsrf_cookie(self):
                  self.request.headers.get(""X-Csrftoken""))
         if not token:
             raise HTTPError(403, ""'_xsrf' argument missing from POST"")
-        if not _time_independent_equals(utf8(self.xsrf_token), utf8(token)):
+        _, token, _ = self._decode_xsrf_token(token)
+        _, expected_token, _ = self._get_raw_xsrf_token()
+        if not _time_independent_equals(utf8(token), utf8(expected_token)):
             raise HTTPError(403, ""XSRF cookie does not match POST argument"")
 
     def xsrf_form_html(self):
diff --git a/tornado/websocket.py b/tornado/websocket.py
index fda231d0c2..ff78552ce8 100644
--- a/tornado/websocket.py
+++ b/tornado/websocket.py
@@ -20,7 +20,6 @@
 from __future__ import absolute_import, division, print_function, with_statement
 # Author: Jacob Kristhammar, 2010
 
-import array
 import base64
 import collections
 import functools
@@ -39,12 +38,7 @@
 from tornado.log import gen_log, app_log
 from tornado.netutil import Resolver
 from tornado import simple_httpclient
-from tornado.util import bytes_type, unicode_type
-
-try:
-    xrange  # py2
-except NameError:
-    xrange = range  # py3
+from tornado.util import bytes_type, unicode_type, _websocket_mask
 
 
 class WebSocketError(Exception):
@@ -890,38 +884,3 @@ def websocket_connect(url, io_loop=None, callback=None, connect_timeout=None):
     if callback is not None:
         io_loop.add_future(conn.connect_future, callback)
     return conn.connect_future
-
-
-def _websocket_mask_python(mask, data):
-    """"""Websocket masking function.
-
-    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.
-    Returns a `bytes` object of the same length as `data` with the mask applied
-    as specified in section 5.3 of RFC 6455.
-
-    This pure-python implementation may be replaced by an optimized version when available.
-    """"""
-    mask = array.array(""B"", mask)
-    unmasked = array.array(""B"", data)
-    for i in xrange(len(data)):
-        unmasked[i] = unmasked[i] ^ mask[i % 4]
-    if hasattr(unmasked, 'tobytes'):
-        # tostring was deprecated in py32.  It hasn't been removed,
-        # but since we turn on deprecation warnings in our tests
-        # we need to use the right one.
-        return unmasked.tobytes()
-    else:
-        return unmasked.tostring()
-
-if (os.environ.get('TORNADO_NO_EXTENSION') or
-    os.environ.get('TORNADO_EXTENSION') == '0'):
-    # These environment variables exist to make it easier to do performance
-    # comparisons; they are not guaranteed to remain supported in the future.
-    _websocket_mask = _websocket_mask_python
-else:
-    try:
-        from tornado.speedups import websocket_mask as _websocket_mask
-    except ImportError:
-        if os.environ.get('TORNADO_EXTENSION') == '1':
-            raise
-        _websocket_mask = _websocket_mask_python",CWE-352
GHSA-h5q8-5697-9p9h,"From cd3ba1bc609c2f2946bfbc7ee2fccf3483eb71fb Mon Sep 17 00:00:00 2001
From: Mark Moffat <mark@Marks-MacBook-Pro-2.local>
Date: Sun, 23 Feb 2020 14:10:35 +1030
Subject: [PATCH] Fixes for CSRF

---
 package-lock.json           | 55 +++++++++++++++++++++++++++++++++++
 package.json                |  1 +
 public/javascripts/admin.js |  6 ++++
 routes/admin.js             | 58 +++++++++++++++++++++++++------------
 test/helper.js              |  5 ++++
 test/specs/discounts.js     |  4 +++
 views/layouts/layout.hbs    |  1 +
 7 files changed, 111 insertions(+), 19 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 45573db4..3a39c1af 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -2508,6 +2508,16 @@
       ""integrity"": ""sha1-ojD2T1aDEOFJgAmUB5DsmVRbyn4="",
       ""dev"": true
     },
+    ""csrf"": {
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/csrf/-/csrf-3.1.0.tgz"",
+      ""integrity"": ""sha512-uTqEnCvWRk042asU6JtapDTcJeeailFy4ydOQS28bj1hcLnYRiqi8SsD2jS412AY1I/4qdOwWZun774iqywf9w=="",
+      ""requires"": {
+        ""rndm"": ""1.2.0"",
+        ""tsscmp"": ""1.0.6"",
+        ""uid-safe"": ""2.1.5""
+      }
+    },
     ""css-select"": {
       ""version"": ""1.2.0"",
       ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
@@ -2524,6 +2534,41 @@
       ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
       ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
     },
+    ""csurf"": {
+      ""version"": ""1.11.0"",
+      ""resolved"": ""https://registry.npmjs.org/csurf/-/csurf-1.11.0.tgz"",
+      ""integrity"": ""sha512-UCtehyEExKTxgiu8UHdGvHj4tnpE/Qctue03Giq5gPgMQ9cg/ciod5blZQ5a4uCEenNQjxyGuzygLdKUmee/bQ=="",
+      ""requires"": {
+        ""cookie"": ""0.4.0"",
+        ""cookie-signature"": ""1.0.6"",
+        ""csrf"": ""3.1.0"",
+        ""http-errors"": ""1.7.3""
+      },
+      ""dependencies"": {
+        ""cookie"": {
+          ""version"": ""0.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz"",
+          ""integrity"": ""sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg==""
+        },
+        ""http-errors"": {
+          ""version"": ""1.7.3"",
+          ""resolved"": ""https://registry.npmjs.org/http-errors/-/http-errors-1.7.3.tgz"",
+          ""integrity"": ""sha512-ZTTX0MWrsQ2ZAhA1cejAwDLycFsd7I7nVtnkT3Ol0aqodaKW+0CTZDQ1uBv5whptCnc8e8HeRRJxRs0kmm/Qfw=="",
+          ""requires"": {
+            ""depd"": ""1.1.2"",
+            ""inherits"": ""2.0.4"",
+            ""setprototypeof"": ""1.1.1"",
+            ""statuses"": ""1.5.0"",
+            ""toidentifier"": ""1.0.0""
+          }
+        },
+        ""inherits"": {
+          ""version"": ""2.0.4"",
+          ""resolved"": ""https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz"",
+          ""integrity"": ""sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==""
+        }
+      }
+    },
     ""currently-unhandled"": {
       ""version"": ""0.4.1"",
       ""resolved"": ""https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz"",
@@ -9667,6 +9712,11 @@
         ""glob"": ""7.1.5""
       }
     },
+    ""rndm"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/rndm/-/rndm-1.2.0.tgz"",
+      ""integrity"": ""sha1-8z/pz7Urv9UgqhgyO8ZdsRCht2w=""
+    },
     ""run-async"": {
       ""version"": ""2.3.0"",
       ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz"",
@@ -10758,6 +10808,11 @@
       ""integrity"": ""sha512-qOebF53frne81cf0S9B41ByenJ3/IuH8yJKngAX35CmiZySA0khhkovshKK+jGCaMnVomla7gVlIcc3EvKPbTQ=="",
       ""dev"": true
     },
+    ""tsscmp"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/tsscmp/-/tsscmp-1.0.6.tgz"",
+      ""integrity"": ""sha512-LxhtAkPDTkVCMQjt2h6eBVY28KCjikZqZfMcC15YBeNjkgUpdCfBu5HoiOTDu86v6smE8yOjyEktJ8hlbANHQA==""
+    },
     ""tunnel-agent"": {
       ""version"": ""0.6.0"",
       ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
diff --git a/package.json b/package.json
index 0d286f55..08e05424 100644
--- a/package.json
+++ b/package.json
@@ -37,6 +37,7 @@
     ""connect-mongodb-session"": ""^2.2.0"",
     ""cookie-parser"": ""^1.4.4"",
     ""countries-list"": ""^2.5.0"",
+    ""csurf"": ""^1.11.0"",
     ""dotenv"": ""^8.2.0"",
     ""express"": ""^4.17.1"",
     ""express-handlebars"": ""^3.1.0"",
diff --git a/public/javascripts/admin.js b/public/javascripts/admin.js
index 2ad5d8d2..34999034 100644
--- a/public/javascripts/admin.js
+++ b/public/javascripts/admin.js
@@ -1,6 +1,12 @@
 /* eslint-disable prefer-arrow-callback, no-var, no-tabs */
 /* globals showNotification, slugify, numeral, moment, feather */
 $(document).ready(function (){
+    $.ajaxSetup({
+        headers: {
+            'csrf-token': $('meta[name=""csrfToken""]').attr('content')
+        }
+    });
+
     $(document).on('click', '#btnGenerateAPIkey', function(e){
         e.preventDefault();
         $.ajax({
diff --git a/routes/admin.js b/routes/admin.js
index 16fccc43..d8df3d74 100644
--- a/routes/admin.js
+++ b/routes/admin.js
@@ -9,9 +9,11 @@ const fs = require('fs');
 const path = require('path');
 const multer = require('multer');
 const mime = require('mime-type/with-db');
+const csrf = require('csurf');
 const { validateJson } = require('../lib/schema');
 const ObjectId = require('mongodb').ObjectID;
 const router = express.Router();
+const csrfProtection = csrf({ cookie: true });
 
 // Regex
 const emailRegex = /\S+@\S+\.\S+/;
@@ -30,6 +32,15 @@ router.get('/admin/logout', (req, res) => {
     res.redirect('/');
 });
 
+// Used for tests only
+if(process.env.NODE_ENV === 'test'){
+    router.get('/admin/csrf', csrfProtection, (req, res, next) => {
+        res.json({
+            csrf: req.csrfToken()
+        });
+    });
+}
+
 // login form
 router.get('/admin/login', async (req, res) => {
     const db = req.app.db;
@@ -134,7 +145,7 @@ router.post('/admin/setup_action', async (req, res) => {
 });
 
 // dashboard
-router.get('/admin/dashboard', restrict, async (req, res) => {
+router.get('/admin/dashboard', csrfProtection, restrict, async (req, res) => {
     const db = req.app.db;
 
     // Collate data for dashboard
@@ -183,12 +194,13 @@ router.get('/admin/dashboard', restrict, async (req, res) => {
         message: common.clearSessionValue(req.session, 'message'),
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
-        config: req.app.config
+        config: req.app.config,
+        csrfToken: req.csrfToken()
     });
 });
 
 // settings
-router.get('/admin/settings', restrict, (req, res) => {
+router.get('/admin/settings', csrfProtection, restrict, (req, res) => {
     res.render('settings', {
         title: 'Cart settings',
         session: req.session,
@@ -199,7 +211,8 @@ router.get('/admin/settings', restrict, (req, res) => {
         helpers: req.handlebars.helpers,
         config: req.app.config,
         footerHtml: typeof req.app.config.footerHtml !== 'undefined' ? escape.decode(req.app.config.footerHtml) : null,
-        googleAnalytics: typeof req.app.config.googleAnalytics !== 'undefined' ? escape.decode(req.app.config.googleAnalytics) : null
+        googleAnalytics: typeof req.app.config.googleAnalytics !== 'undefined' ? escape.decode(req.app.config.googleAnalytics) : null,
+        csrfToken: req.csrfToken()
     });
 });
 
@@ -236,7 +249,7 @@ router.post('/admin/settings/update', restrict, checkAccess, (req, res) => {
 });
 
 // settings menu
-router.get('/admin/settings/menu', restrict, async (req, res) => {
+router.get('/admin/settings/menu', csrfProtection, restrict, async (req, res) => {
     const db = req.app.db;
     res.render('settings-menu', {
         title: 'Cart menu',
@@ -246,12 +259,13 @@ router.get('/admin/settings/menu', restrict, async (req, res) => {
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
         config: req.app.config,
-        menu: common.sortMenu(await common.getMenu(db))
+        menu: common.sortMenu(await common.getMenu(db)),
+        csrfToken: req.csrfToken()
     });
 });
 
 // page list
-router.get('/admin/settings/pages', restrict, async (req, res) => {
+router.get('/admin/settings/pages', csrfProtection, restrict, async (req, res) => {
     const db = req.app.db;
     const pages = await db.pages.find({}).toArray();
 
@@ -264,12 +278,13 @@ router.get('/admin/settings/pages', restrict, async (req, res) => {
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
         config: req.app.config,
-        menu: common.sortMenu(await common.getMenu(db))
+        menu: common.sortMenu(await common.getMenu(db)),
+        csrfToken: req.csrfToken()
     });
 });
 
 // pages new
-router.get('/admin/settings/pages/new', restrict, checkAccess, async (req, res) => {
+router.get('/admin/settings/pages/new', csrfProtection, restrict, checkAccess, async (req, res) => {
     const db = req.app.db;
 
     res.render('settings-page', {
@@ -281,12 +296,13 @@ router.get('/admin/settings/pages/new', restrict, checkAccess, async (req, res)
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
         config: req.app.config,
-        menu: common.sortMenu(await common.getMenu(db))
+        menu: common.sortMenu(await common.getMenu(db)),
+        csrfToken: req.csrfToken()
     });
 });
 
 // pages editor
-router.get('/admin/settings/pages/edit/:page', restrict, checkAccess, async (req, res) => {
+router.get('/admin/settings/pages/edit/:page', csrfProtection, restrict, checkAccess, async (req, res) => {
     const db = req.app.db;
     const page = await db.pages.findOne({ _id: common.getId(req.params.page) });
     const menu = common.sortMenu(await common.getMenu(db));
@@ -312,7 +328,8 @@ router.get('/admin/settings/pages/edit/:page', restrict, checkAccess, async (req
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
         config: req.app.config,
-        menu
+        menu,
+        csrfToken: req.csrfToken()
     });
 });
 
@@ -434,7 +451,7 @@ router.post('/admin/validatePermalink', async (req, res) => {
 });
 
 // Discount codes
-router.get('/admin/settings/discounts', restrict, checkAccess, async (req, res) => {
+router.get('/admin/settings/discounts', csrfProtection, restrict, checkAccess, async (req, res) => {
     const db = req.app.db;
 
     const discounts = await db.discounts.find({}).toArray();
@@ -447,12 +464,13 @@ router.get('/admin/settings/discounts', restrict, checkAccess, async (req, res)
         admin: true,
         message: common.clearSessionValue(req.session, 'message'),
         messageType: common.clearSessionValue(req.session, 'messageType'),
-        helpers: req.handlebars.helpers
+        helpers: req.handlebars.helpers,
+        csrfToken: req.csrfToken()
     });
 });
 
 // Edit a discount code
-router.get('/admin/settings/discount/edit/:id', restrict, checkAccess, async (req, res) => {
+router.get('/admin/settings/discount/edit/:id', csrfProtection, restrict, checkAccess, async (req, res) => {
     const db = req.app.db;
 
     const discount = await db.discounts.findOne({ _id: common.getId(req.params.id) });
@@ -465,7 +483,8 @@ router.get('/admin/settings/discount/edit/:id', restrict, checkAccess, async (re
         message: common.clearSessionValue(req.session, 'message'),
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
-        config: req.app.config
+        config: req.app.config,
+        csrfToken: req.csrfToken()
     });
 });
 
@@ -524,7 +543,7 @@ router.post('/admin/settings/discount/update', restrict, checkAccess, async (req
 });
 
 // Create a discount code
-router.get('/admin/settings/discount/new', restrict, checkAccess, async (req, res) => {
+router.get('/admin/settings/discount/new', csrfProtection, restrict, checkAccess, async (req, res) => {
     res.render('settings-discount-new', {
         title: 'Discount code create',
         session: req.session,
@@ -532,12 +551,13 @@ router.get('/admin/settings/discount/new', restrict, checkAccess, async (req, re
         message: common.clearSessionValue(req.session, 'message'),
         messageType: common.clearSessionValue(req.session, 'messageType'),
         helpers: req.handlebars.helpers,
-        config: req.app.config
+        config: req.app.config,
+        csrfToken: req.csrfToken()
     });
 });
 
 // Create a discount code
-router.post('/admin/settings/discount/create', restrict, checkAccess, async (req, res) => {
+router.post('/admin/settings/discount/create', csrfProtection, restrict, checkAccess, async (req, res) => {
     const db = req.app.db;
 
     // Doc to insert
diff --git a/test/helper.js b/test/helper.js
index ade51469..717cd79d 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -76,6 +76,11 @@ const runBefore = async () => {
                 await g.db.orders.insertOne(order);
             });
 
+            // Get csrf token
+            const csrf = await g.request
+            .get('/admin/csrf');
+            g.csrf = csrf.body.csrf;
+
             // Index everything
             await runIndexing(app);
 
diff --git a/test/specs/discounts.js b/test/specs/discounts.js
index e89bcc38..6f9d72b9 100644
--- a/test/specs/discounts.js
+++ b/test/specs/discounts.js
@@ -139,6 +139,7 @@ test('[Fail] Add a bogus code', async t => {
         .send({
             discountCode: 'some_bogus_code'
         })
+        .set('csrf-token', g.csrf)
         .expect(400);
 
     t.deepEqual(res.body.message, 'Discount code is invalid or expired');
@@ -156,6 +157,7 @@ test('[Success] Create a new discount code', async t => {
             end: moment().add(7, 'days').format('DD/MM/YYYY HH:mm')
         })
         .set('apiKey', g.users[0].apiKey)
+        .set('csrf-token', g.csrf)
         .expect(200);
 
     t.deepEqual(res.body.message, 'Discount code created successfully');
@@ -173,6 +175,7 @@ test('[Fail] Create a new discount code with invalid type', async t => {
             end: moment().add(7, 'days').format('DD/MM/YYYY HH:mm')
         })
         .set('apiKey', g.users[0].apiKey)
+        .set('csrf-token', g.csrf)
         .expect(400);
 
     t.deepEqual(res.body[0].message, 'should be equal to one of the allowed values');
@@ -190,6 +193,7 @@ test('[Fail] Create a new discount code with existing code', async t => {
             end: moment().add(7, 'days').format('DD/MM/YYYY HH:mm')
         })
         .set('apiKey', g.users[0].apiKey)
+        .set('csrf-token', g.csrf)
         .expect(400);
 
     t.deepEqual(res.body.message, 'Discount code already exists');
diff --git a/views/layouts/layout.hbs b/views/layouts/layout.hbs
index 507a735d..cd80b03b 100644
--- a/views/layouts/layout.hbs
+++ b/views/layouts/layout.hbs
@@ -22,6 +22,7 @@
         <meta name=""description"" content=""{{snip config.cartDescription}}"">
         {{/if}}
         {{/if}}
+        <meta name=""csrfToken"" content=""{{csrfToken}}"">
 		<meta name=""keywords"" content=""{{config.cartTitle}}"">
         <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css"" integrity=""sha256-L/W5Wfqfa0sdBNIKN9cG6QA5F2qx4qICmU2VgLruv9Y="" crossorigin=""anonymous"" />
         <link rel=""stylesheet"" href=""/stylesheets/pushy{{config.env}}.css"">",CWE-352
