{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":3027,
            "vuln_id":"GHSA-rxch-gp62-574w",
            "cwe_id":"{'CWE-79'}",
            "score":6.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2'}",
            "dataset":"osv",
            "summary":"snipe-it is vulnerable to Cross-site Scripting snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-12-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2",
            "commit_sha":"9d5d1a9f9aae2c8baee48551185da5de0cdb62c2",
            "patch":"SINGLE",
            "chain_ord":"['9d5d1a9f9aae2c8baee48551185da5de0cdb62c2']",
            "before_first_fix_commit":"{'3a7cef15bd7578f93104011137222512d4c95f4e'}",
            "last_fix_commit":"9d5d1a9f9aae2c8baee48551185da5de0cdb62c2",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/13\/2021, 20:03:03",
            "message":"Added escape to assigned_to API response\n\nSigned-off-by: snipe <snipe@snipe.net>",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Transformers\/AssetsTransformer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2\/app%2FHttp%2FTransformers%2FAssetsTransformer.php', 'patch': \"@@ -170,7 +170,7 @@ public function transformAssignedTo($asset)\\n         }\\n         return $asset->assigned ? [\\n             'id' => $asset->assigned->id,\\n-            'name' => $asset->assigned->display_name,\\n+            'name' => e($asset->assigned->display_name),\\n             'type' => $asset->assignedType()\\n         ] : null;\\n     }\"}}",
            "message_norm":"added escape to assigned_to api response\n\nsigned-off-by: snipe <snipe@snipe.net>",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('escape', 'SECWORD', ''), ('snipe@snipe.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Transformers\/AssetsTransformer.php'])",
            "num_files":1.0
        },
        {
            "index":3118,
            "vuln_id":"GHSA-vh5c-jqfg-mhrh",
            "cwe_id":"{'CWE-352'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/69548c0320cbd772540cf4668743e69f879812cf', 'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/f0440dfcbba705e03f7565cd88893dde57ca3fa8'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery in xwiki-platform ### Impact\nIt's possible to know if a user has or not an account in a wiki related to an email address, and which username(s) is actually tight to that email by forging a request to the Forgot username page. Note that since this page does not have a CSRF check it's quite easy to perform a lot of those requests.\n\n### Patches\nThis issue has been patched in XWiki 12.10.5 and 13.2RC1. Two different patches are provided:\n  - a first one to fix the CSRF problem\n  - a more complex one that now relies on sending an email for the Forgot username process.\n\n### Workarounds\nIt's possible to fix the problem without uprading by editing the ForgotUsername page in version below 13.x, to use the following code: https:\/\/github.com\/xwiki\/xwiki-platform\/blob\/69548c0320cbd772540cf4668743e69f879812cf\/xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml#L39-L123\n\nIn version after 13.x it's also possible to edit manually the forgotusername.vm file, but it's really encouraged to upgrade the version here.\n\n### References\n  * https:\/\/jira.xwiki.org\/browse\/XWIKI-18384\n  * https:\/\/jira.xwiki.org\/browse\/XWIKI-18408\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Jira XWiki](https:\/\/jira.xwiki.org)\n* Email us at [security ML](mailto:security@xwiki.org)",
            "published_date":"2022-02-10",
            "chain_len":2,
            "project":"https:\/\/github.com\/xwiki\/xwiki-platform",
            "commit_href":"https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/69548c0320cbd772540cf4668743e69f879812cf",
            "commit_sha":"69548c0320cbd772540cf4668743e69f879812cf",
            "patch":"MULTI",
            "chain_ord":"['f0440dfcbba705e03f7565cd88893dde57ca3fa8', '69548c0320cbd772540cf4668743e69f879812cf']",
            "before_first_fix_commit":"{'dfa1479abcdbc3a3b906fdab62841c22f5c13e38'}",
            "last_fix_commit":"69548c0320cbd772540cf4668743e69f879812cf",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/09\/2021, 12:23:38",
            "message":"XWIKI-18408: Wrong check in forgot username",
            "author":"Simon Urli",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 2, 'total': 11}",
            "files":"{'xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml': {'additions': 9, 'deletions': 2, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/xwiki\/xwiki-platform\/raw\/69548c0320cbd772540cf4668743e69f879812cf\/xwiki-platform-core%2Fxwiki-platform-administration%2Fxwiki-platform-administration-ui%2Fsrc%2Fmain%2Fresources%2FXWiki%2FForgotUsername.xml', 'patch': '@@ -38,12 +38,19 @@\\n   <hidden>true<\/hidden>\\n   <content>{{velocity}}\\n #set($email = \"$!request.get(\\'e\\')\")\\n-#if($email == \\'\\')\\n+#if($email == \\'\\' || !$services.csrf.isTokenValid($request.form_token))\\n {{translation key=\"xe.admin.forgotUsername.instructions\"\/}}\\n \\n {{html}}\\n   &lt;form method=\"post\" action=\"$doc.getURL()\" class=\"xformInline\"&gt;\\n-    &lt;div&gt;&lt;label for=\"e\"&gt;$services.localization.render(\\'xe.admin.forgotUsername.email.label\\')&lt;\/label&gt; &lt;input type=\"text\" id=\"e\" name=\"e\"\/&gt; &lt;span class=\"buttonwrapper\"&gt;&lt;input type=\"submit\" value=\"$services.localization.render(\\'xe.admin.forgotUsername.submit\\')\" class=\"button\"\/&gt;&lt;\/span&gt;&lt;\/div&gt;\\n+    &lt;div&gt;\\n+      &lt;label for=\"e\"&gt;$services.localization.render(\\'xe.admin.forgotUsername.email.label\\')&lt;\/label&gt;\\n+      &lt;input type=\"text\" id=\"e\" name=\"e\"\/&gt;\\n+      &lt;input type=\"hidden\" name=\"form_token\" value=\"$services.csrf.getToken()\"\/&gt;\\n+      &lt;span class=\"buttonwrapper\"&gt;\\n+        &lt;input type=\"submit\" value=\"$services.localization.render(\\'xe.admin.forgotUsername.submit\\')\" class=\"button\"\/&gt;\\n+      &lt;\/span&gt;\\n+    &lt;\/div&gt;\\n   &lt;\/form&gt;\\n {{\/html}}'}}",
            "message_norm":"xwiki-18408: wrong check in forgot username",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml'])",
            "num_files":1.0
        },
        {
            "index":223,
            "vuln_id":"GHSA-38m9-3vg4-rwvp",
            "cwe_id":"{'CWE-79'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber microweber prior to version 1.2.11 is vulnerable to cross-site scripting.",
            "published_date":"2022-02-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8",
            "commit_sha":"2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8",
            "patch":"SINGLE",
            "chain_ord":"['2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8']",
            "before_first_fix_commit":"{'93e1e59185d1fdf921d89a887887bca988b12085'}",
            "last_fix_commit":"2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/18\/2022, 10:09:45",
            "message":"Update UrlManager.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/MicroweberPackages\/Helper\/UrlManager.php': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/2b8fa5aac31e51e2aca83c7ef5d1281ba2e755f8\/src%2FMicroweberPackages%2FHelper%2FUrlManager.php', 'patch': '@@ -114,6 +114,9 @@ public function redirect($url)\\n         $redirectUrl = str_replace(\"\\\\r\", \"\", $redirectUrl);\\n         $redirectUrl = str_replace(\"\\\\n\", \"\", $redirectUrl);\\n \\n+        $clearInput = new HTMLClean();\\n+        $redirectUrl = $clearInput->clean($redirectUrl);\\n+\\n         if (headers_sent()) {\\n             echo \\'<meta http-equiv=\"refresh\" content=\"0;url=\\' . $redirectUrl . \\'\">\\';\\n         } else {'}}",
            "message_norm":"update urlmanager.php",
            "language":"sv",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SUBMIT_CENTERED",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Helper\/UrlManager.php'])",
            "num_files":1.0
        },
        {
            "index":2780,
            "vuln_id":"GHSA-qm6v-cg9v-53j3",
            "cwe_id":"{'CWE-287'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/opencast\/opencast\/commit\/8d5ec1614eed109b812bc27b0c6d3214e456d4e7'}",
            "dataset":"osv",
            "summary":"Limited Authentication Bypass for Media Files Prior to Opencast 10.14 and 11.7, users could pass along URLs for files belonging to organizations other than the user's own, which Opencast would then import into the current organization, bypassing organizational barriers.\n\n### Impact\n\nThe vulnerability allows attackers to bypass organizational barriers. Attackers must have full access to Opencast's ingest REST interface, and also know internal links to resources in another organization of the same Opencast cluster.\n\nIf you do not run a multi-tenant cluster, you are not affected by this issue.\n\n### Patches\n\nThis issue is fixed in Opencast 10.14 and 11.7.\n\n### References\n\n- [Patch fixing the issue](https:\/\/github.com\/opencast\/opencast\/commit\/8d5ec1614eed109b812bc27b0c6d3214e456d4e7)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [our issue tracker](https:\/\/github.com\/opencast\/opencast\/issues)\n* Email us at [security@opencast.org](mailto:security@opencast.org)",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencast\/opencast",
            "commit_href":"https:\/\/github.com\/opencast\/opencast\/commit\/8d5ec1614eed109b812bc27b0c6d3214e456d4e7",
            "commit_sha":"8d5ec1614eed109b812bc27b0c6d3214e456d4e7",
            "patch":"SINGLE",
            "chain_ord":"['8d5ec1614eed109b812bc27b0c6d3214e456d4e7']",
            "before_first_fix_commit":"{'eee0c26fe33afc0709373fcbd7c6870bee8e2bed'}",
            "last_fix_commit":"8d5ec1614eed109b812bc27b0c6d3214e456d4e7",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/18\/2022, 10:43:56",
            "message":"Merge pull request from GHSA-qm6v-cg9v-53j3\n\nThis patch fixes the issue that users can pass URLs from other tenants\nto the ingest service which will check only against the other\norganization but not against the one currently active. This allows users\nto easily ingest media from other tenants.",
            "author":"Lars Kiesow",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 12, 'total': 13}",
            "files":"{'modules\/ingest-service-impl\/src\/main\/java\/org\/opencastproject\/ingest\/impl\/IngestServiceImpl.java': {'additions': 1, 'deletions': 12, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencast\/opencast\/raw\/8d5ec1614eed109b812bc27b0c6d3214e456d4e7\/modules%2Fingest-service-impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fopencastproject%2Fingest%2Fimpl%2FIngestServiceImpl.java', 'patch': '@@ -129,15 +129,13 @@\\n import java.util.Dictionary;\\n import java.util.HashMap;\\n import java.util.HashSet;\\n-import java.util.LinkedList;\\n import java.util.List;\\n import java.util.Map;\\n import java.util.Map.Entry;\\n import java.util.Objects;\\n import java.util.Set;\\n import java.util.UUID;\\n import java.util.concurrent.TimeUnit;\\n-import java.util.stream.Collectors;\\n \\n import javax.management.ObjectInstance;\\n \\n@@ -1568,16 +1566,7 @@ protected URI addContentToRepo(MediaPackage mp, String elementId, URI uri) throw\\n     try {\\n       if (uri.toString().startsWith(\"http\")) {\\n         HttpGet get = new HttpGet(uri);\\n-        List<String> clusterUrls = new LinkedList<>();\\n-        try {\\n-          \/\/ Note that we are not checking ports here.\\n-          clusterUrls = organizationDirectoryService.getOrganization(uri.toURL()).getServers()\\n-                          .keySet()\\n-                          .stream()\\n-                          .collect(Collectors.toUnmodifiableList());\\n-        } catch (NotFoundException e) {\\n-          logger.warn(\"Unable to determine cluster members, will not be able to authenticate any downloads from them\", e);\\n-        }\\n+        var clusterUrls = securityService.getOrganization().getServers().keySet();\\n \\n         if (uri.toString().matches(downloadSource)) {\\n           \/\/NB: We\\'re creating a new client here with *different* auth than the system auth creds'}}",
            "message_norm":"merge pull request from ghsa-qm6v-cg9v-53j3\n\nthis patch fixes the issue that users can pass urls from other tenants\nto the ingest service which will check only against the other\norganization but not against the one currently active. this allows users\nto easily ingest media from other tenants.",
            "language":"en",
            "entities":"[('ghsa-qm6v-cg9v-53j3', 'VULNID', 'GHSA'), ('fixes', 'ACTION', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/ingest-service-impl\/src\/main\/java\/org\/opencastproject\/ingest\/impl\/IngestServiceImpl.java'])",
            "num_files":1.0
        },
        {
            "index":1632,
            "vuln_id":"GHSA-cx2r-mf6x-55rx",
            "cwe_id":"{'CWE-79'}",
            "score":4.1,
            "chain":"{'https:\/\/github.com\/PrestaShop\/ps_linklist\/commit\/83e6e0bdda2287f4d6e64127cb90c41d26b5ad82'}",
            "dataset":"osv",
            "summary":"Stored XSS with custom URLs in PrestaShop module ps_linklist ### Impact\nStored XSS when using custom URLs.\n\n### Patches\nThe problem is fixed in 3.1.0\n\n### References\n[Cross-site Scripting (XSS) - Stored (CWE-79)](https:\/\/cwe.mitre.org\/data\/definitions\/79.html)",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/ps_linklist",
            "commit_href":"https:\/\/github.com\/PrestaShop\/ps_linklist\/commit\/83e6e0bdda2287f4d6e64127cb90c41d26b5ad82",
            "commit_sha":"83e6e0bdda2287f4d6e64127cb90c41d26b5ad82",
            "patch":"SINGLE",
            "chain_ord":"['83e6e0bdda2287f4d6e64127cb90c41d26b5ad82']",
            "before_first_fix_commit":"{'b90005c2cfed949ab564228b277a728e0a62a876', '632e61961553a5cdd4c12ad7218e914455dbaa6b'}",
            "last_fix_commit":"83e6e0bdda2287f4d6e64127cb90c41d26b5ad82",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2020, 14:16:34",
            "message":"Merge pull request from GHSA-cx2r-mf6x-55rx\n\nThe custom url field must be a valid url",
            "author":"GoT",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'src\/Form\/Type\/CustomUrlType.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/ps_linklist\/raw\/83e6e0bdda2287f4d6e64127cb90c41d26b5ad82\/src%2FForm%2FType%2FCustomUrlType.php', 'patch': \"@@ -29,6 +29,7 @@\\n use PrestaShopBundle\\\\Form\\\\Admin\\\\Type\\\\TranslatorAwareType;\\n use Symfony\\\\Component\\\\Form\\\\Extension\\\\Core\\\\Type\\\\TextType;\\n use Symfony\\\\Component\\\\Form\\\\FormBuilderInterface;\\n+use Symfony\\\\Component\\\\Validator\\\\Constraints as Assert;\\n \\n class CustomUrlType extends TranslatorAwareType\\n {\\n@@ -45,6 +46,7 @@ public function buildForm(FormBuilderInterface $builder, array $options)\\n             ->add('url', TextType::class, [\\n                 'label' => $this->trans('URL', 'Modules.Linklist.Admin'),\\n                 'required' => true,\\n+                'constraints' => [new Assert\\\\Url()],\\n             ])\\n         ;\\n     }\"}}",
            "message_norm":"merge pull request from ghsa-cx2r-mf6x-55rx\n\nthe custom url field must be a valid url",
            "language":"en",
            "entities":"[('ghsa-cx2r-mf6x-55rx', 'VULNID', 'GHSA')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Form\/Type\/CustomUrlType.php'])",
            "num_files":1.0
        },
        {
            "index":3414,
            "vuln_id":"GHSA-xcvv-84j5-jw9h",
            "cwe_id":"{'CWE-471'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/19953a8c089b0328c470acaaaf6accdfcb34da11'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in assign-deep Versions of `assign-deep` before 0.4.7 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 0.4.7 or later.",
            "published_date":"2018-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/assign-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/19953a8c089b0328c470acaaaf6accdfcb34da11",
            "commit_sha":"19953a8c089b0328c470acaaaf6accdfcb34da11",
            "patch":"SINGLE",
            "chain_ord":"['19953a8c089b0328c470acaaaf6accdfcb34da11']",
            "before_first_fix_commit":"{'f6cba02d11a1d293593be0e942aff60bfd5a5711'}",
            "last_fix_commit":"19953a8c089b0328c470acaaaf6accdfcb34da11",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2018, 16:20:22",
            "message":"exclude __proto__",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/assign-deep\/raw\/19953a8c089b0328c470acaaaf6accdfcb34da11\/index.js', 'patch': \"@@ -37,7 +37,7 @@ function extend(target, obj) {\\n   assignSymbols(target, obj);\\n \\n   for (var key in obj) {\\n-    if (hasOwn(obj, key)) {\\n+    if (key !== '__proto__' && hasOwn(obj, key)) {\\n       var val = obj[key];\\n       if (isObject(val)) {\\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\"}}",
            "message_norm":"exclude __proto__",
            "language":"pt",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":299,
            "vuln_id":"GHSA-3q55-66g3-p8xq",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber File upload filter bypass leading to stored XSS in GitHub repository microweber\/microweber prior to 1.2.12.",
            "published_date":"2022-03-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120",
            "commit_sha":"89200cfcc2cfefe5554721e7fa3cf52f6a2a9120",
            "patch":"SINGLE",
            "chain_ord":"['89200cfcc2cfefe5554721e7fa3cf52f6a2a9120']",
            "before_first_fix_commit":"{'077b1e2d5dda0c6611b65bce849a18a5620c5c98'}",
            "last_fix_commit":"89200cfcc2cfefe5554721e7fa3cf52f6a2a9120",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/11\/2022, 10:04:52",
            "message":"Update Files.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 254, 'deletions': 2, 'total': 256}",
            "files":"{'src\/MicroweberPackages\/Utils\/System\/Files.php': {'additions': 254, 'deletions': 2, 'changes': 256, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120\/src%2FMicroweberPackages%2FUtils%2FSystem%2FFiles.php', 'patch': \"@@ -834,10 +834,262 @@ function get_dangerous_files_extentions()\\n             'xqt',        \/\/    SuperCalc Macro File',\\n             'xys',        \/\/    XYplorer Script File',\\n             'zl9',        \/\/    ZoneAlarm Quarantined EXE File\\n-\\n-\\n             'swf',        \/\/    Flash File\\n \\n+            'key',\\n+            'asax',\\n+            'btapp',\\n+            'xd',\\n+            'fwtemplate',\\n+            'crdownload',\\n+            'whtt',\\n+            'ssp',\\n+            'fmp',\\n+            'jspa',\\n+            'obml16',\\n+            'a5w',\\n+            'crt',\\n+            'vrt',\\n+            'website',\\n+            'p7c',\\n+            'dll',\\n+            'php',\\n+            'mjs',\\n+            'dhtml',\\n+            'xul',\\n+            'bml',\\n+            'download',\\n+            'cshtml',\\n+            'vsdisco',\\n+            'codasite',\\n+            'webbookmark',\\n+            'rjs',\\n+            'wsdl',\\n+            'dml',\\n+            'aro',\\n+            'dcr',\\n+            'shtml',\\n+            'dochtml',\\n+            'dwt',\\n+            'spc',\\n+            'a4p',\\n+            'htaccess',\\n+            'ascx',\\n+            'pac',\\n+            'p7b',\\n+            'xhtm',\\n+            'oam',\\n+            'site',\\n+            'kit',\\n+            'aspx',\\n+            'zul',\\n+            'tpl',\\n+            'htm',\\n+            'seam',\\n+            'svr',\\n+            'pem',\\n+            'url',\\n+            'dap',\\n+            'appcache',\\n+            'chm',\\n+            'wbs',\\n+            'htc',\\n+            'ewp',\\n+            'gsp',\\n+            'asr',\\n+            'der',\\n+            'master',\\n+            'stc',\\n+            'ap',\\n+            'html',\\n+            'p12',\\n+            'xpd',\\n+            'fwp',\\n+            'epibrw',\\n+            'strm',\\n+            'xss',\\n+            'node',\\n+            'disco',\\n+            'gsp',\\n+            'pro',\\n+            'rss',\\n+            'gne',\\n+            'sdb',\\n+            'compressed',\\n+            'asp',\\n+            'browser',\\n+            'php2',\\n+            'sites2',\\n+            'dothtml',\\n+            'bok',\\n+            'axd',\\n+            'nzb',\\n+            'vdw',\\n+            'obml',\\n+            'mhtml',\\n+            'ashx',\\n+            'con',\\n+            'rhtml',\\n+            'alx',\\n+            'opml',\\n+            'web',\\n+            'chat',\\n+            'csr',\\n+            'do',\\n+            'sht',\\n+            'asa',\\n+            'cha',\\n+            'h5p',\\n+            'qf',\\n+            'olp',\\n+            'hyperesources',\\n+            'sparkle',\\n+            'razor',\\n+            'php4',\\n+            'cms',\\n+            'mml',\\n+            'jnlp',\\n+            'har',\\n+            'br',\\n+            'webloc',\\n+            'srf',\\n+            'cer',\\n+            'uhtml',\\n+            'pptmhtml',\\n+            'phtml',\\n+            'xbel',\\n+            'cfm',\\n+            'fwtemplateb',\\n+            'jspx',\\n+            'jsp',\\n+            'xfdl',\\n+            'zhtml',\\n+            'stml',\\n+            'jsonl',\\n+            'maff',\\n+            'dbm',\\n+            'aex',\\n+            'crl',\\n+            'mht',\\n+            'wml',\\n+            'sass',\\n+            'xht',\\n+            'awm',\\n+            'page',\\n+            'hdml',\\n+            'webmanifest',\\n+            'itms',\\n+            'sitemap',\\n+            'shtm',\\n+            'wpp',\\n+            'jss',\\n+            'oth',\\n+            'ucf',\\n+            'prf',\\n+            'freeway',\\n+            'edge',\\n+            'iqy',\\n+            'vrml',\\n+            'mvc',\\n+            'wdgt',\\n+            'discomap',\\n+            'psp',\\n+            'hxs',\\n+            'adr',\\n+            'hype',\\n+            'csp',\\n+            'xhtml',\\n+            'webarchive',\\n+            'qbo',\\n+            'jhtml',\\n+            'svc',\\n+            'phtm',\\n+            'rw3',\\n+            'tpl',\\n+            'stl',\\n+            'wbxml',\\n+            'p7',\\n+            'ndjson',\\n+            'ognc',\\n+            'fwtb',\\n+            'muse',\\n+            'vbd',\\n+            'sites',\\n+            'rt',\\n+            'esproj',\\n+            'private',\\n+            'srl',\\n+            'zhtml',\\n+            'vbhtml', \\n+            'hypetemplate',\\n+            'obml15',\\n+            'hypesymbol',\\n+            'pub',\\n+            'ece',\\n+            'mspx',\\n+            'docmhtml',\\n+            'xws',\\n+            'wgp',\\n+            'tvpi',\\n+            'woa',\\n+            'asmx',\\n+            'xbl',\\n+            'webhistory',\\n+            'idc',\\n+            'jws',\\n+            'lbc',\\n+            'att',\\n+            'tvvi',\\n+            'zvz',\\n+            'php3',\\n+            'webarchivexml',\\n+            'widget',\\n+            'swz',\\n+            'qrm',\\n+            'bwp',\\n+            'atom',\\n+            'cdf',\\n+            'map',\\n+            'hdm',\\n+            'php5',\\n+            'rwsw',\\n+            'wgt',\\n+            'nod',\\n+            'rflw',\\n+            'htx',\\n+            'mvr',\\n+            'an',\\n+            'rwp',\\n+            'lasso',\\n+            'vlp',\\n+            'stp',\\n+            'nxg',\\n+            'faces',\\n+            'kcmsf',\\n+            'ptw',\\n+            'less',\\n+            'saveddeck',\\n+            'ccbjs',\\n+            'wn',\\n+            'ppthtml',\\n+            'jcz',\\n+            'jvs',\\n+            'rwtheme',\\n+            'jst',\\n+            'mapx',\\n+            'cpg',\\n+            'wpx',\\n+            'qbx',\\n+            'suck',\\n+            'iwdgt',\\n+            'public',\\n+            'cphd',\\n+            'moz',\\n+            'zfo',\\n+            'stm',\\n+            'fcgi',\\n+            'itpc',\\n+            'cfml'\\n         );\"}}",
            "message_norm":"update files.php",
            "language":"fr",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Utils\/System\/Files.php'])",
            "num_files":1.0
        },
        {
            "index":1754,
            "vuln_id":"GHSA-fpcp-9h7m-ffpx",
            "cwe_id":"{'CWE-476'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e21af685e1828f7ca65038307df5cc06de4479e8'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TensorFlow  ### Impact\nWhen [building an XLA compilation cache](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/274df9b02330b790aa8de1cee164b70f72b9b244\/tensorflow\/compiler\/jit\/xla_platform_info.cc#L43-L104), if default settings are used, TensorFlow triggers a null pointer dereference:\n\n```cc \n  string allowed_gpus =\n      flr->config_proto()->gpu_options().visible_device_list();\n``` \n    \nIn the default scenario, all devices are allowed, so `flr->config_proto` is `nullptr`.\n    \n### Patches\nWe have patched the issue in GitHub commit [e21af685e1828f7ca65038307df5cc06de4479e8](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e21af685e1828f7ca65038307df5cc06de4479e8).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e21af685e1828f7ca65038307df5cc06de4479e8",
            "commit_sha":"e21af685e1828f7ca65038307df5cc06de4479e8",
            "patch":"SINGLE",
            "chain_ord":"['e21af685e1828f7ca65038307df5cc06de4479e8']",
            "before_first_fix_commit":"{'30f8e5c460629a9f8dbb04dc562c7b579c07f11b'}",
            "last_fix_commit":"e21af685e1828f7ca65038307df5cc06de4479e8",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/08\/2022, 00:20:27",
            "message":"Fix Null-pointer dereference in BuildXlaCompilationCache\n\nIf ConfigProto is not used, then use the default settings which is to allow all devices.\n\nPiperOrigin-RevId: 420391800\nChange-Id: I88161ad7042990aef678e77b597a2fb2c8f815be",
            "author":"Smit Hinsu",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 5, 'total': 12}",
            "files":"{'tensorflow\/compiler\/jit\/xla_platform_info.cc': {'additions': 7, 'deletions': 5, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e21af685e1828f7ca65038307df5cc06de4479e8\/tensorflow%2Fcompiler%2Fjit%2Fxla_platform_info.cc', 'patch': '@@ -82,11 +82,13 @@ Status BuildXlaCompilationCache(DeviceBase* device, FunctionLibraryRuntime* flr,\\n   client_options.set_intra_op_parallelism_threads(\\n       device->tensorflow_cpu_worker_threads()->num_threads);\\n \\n-  string allowed_gpus =\\n-      flr->config_proto()->gpu_options().visible_device_list();\\n-  TF_ASSIGN_OR_RETURN(absl::optional<std::set<int>> gpu_ids,\\n-                      ParseVisibleDeviceList(allowed_gpus));\\n-  client_options.set_allowed_devices(gpu_ids);\\n+  if (flr->config_proto()) {\\n+    string allowed_gpus =\\n+        flr->config_proto()->gpu_options().visible_device_list();\\n+    TF_ASSIGN_OR_RETURN(absl::optional<std::set<int>> gpu_ids,\\n+                        ParseVisibleDeviceList(allowed_gpus));\\n+    client_options.set_allowed_devices(gpu_ids);\\n+  }\\n \\n   auto client = xla::ClientLibrary::GetOrCreateLocalClient(client_options);\\n   if (!client.ok()) {'}}",
            "message_norm":"fix null-pointer dereference in buildxlacompilationcache\n\nif configproto is not used, then use the default settings which is to allow all devices.\n\npiperorigin-revid: 420391800\nchange-id: i88161ad7042990aef678e77b597a2fb2c8f815be",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('null-pointer dereference', 'SECWORD', ''), ('420391800', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/compiler\/jit\/xla_platform_info.cc'])",
            "num_files":1.0
        },
        {
            "index":394,
            "vuln_id":"GHSA-49qr-xh3w-h436",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/jupyter\/notebook\/commit\/107a89fce5f413fb5728c1c5d2c7788e1fb17491'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects notebook Jupyter Notebook before 5.7.1 allows XSS via an untrusted notebook because nbconvert responses are considered to have the same origin as the notebook server. In other words, nbconvert endpoints can execute JavaScript with access to the server API. In notebook\/nbconvert\/handlers.py, NbconvertFileHandler and NbconvertPostHandler do not set a Content Security Policy to prevent this.",
            "published_date":"2018-11-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/jupyter\/notebook",
            "commit_href":"https:\/\/github.com\/jupyter\/notebook\/commit\/107a89fce5f413fb5728c1c5d2c7788e1fb17491",
            "commit_sha":"107a89fce5f413fb5728c1c5d2c7788e1fb17491",
            "patch":"SINGLE",
            "chain_ord":"['107a89fce5f413fb5728c1c5d2c7788e1fb17491']",
            "before_first_fix_commit":"{'04a686dbaf9dfe553324a03cb9e6f778cf1e3da1'}",
            "last_fix_commit":"107a89fce5f413fb5728c1c5d2c7788e1fb17491",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/22\/2018, 13:52:36",
            "message":"Apply CSP sandboxing for nbconvert responses\n\nThese may contain untrusted content, so they should be treated as being\nfrom a different domain to the notebook server.",
            "author":"Thomas Kluyver",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'notebook\/nbconvert\/handlers.py': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyter\/notebook\/raw\/107a89fce5f413fb5728c1c5d2c7788e1fb17491\/notebook%2Fnbconvert%2Fhandlers.py', 'patch': '@@ -78,6 +78,13 @@ class NbconvertFileHandler(IPythonHandler):\\n \\n     SUPPORTED_METHODS = (\\'GET\\',)\\n \\n+    @property\\n+    def content_security_policy(self):\\n+        # In case we\\'re serving HTML\/SVG, confine any Javascript to a unique\\n+        # origin so it can\\'t interact with the notebook server.\\n+        return super(NbconvertFileHandler, self).content_security_policy + \\\\\\n+               \"; sandbox allow-scripts\"\\n+\\n     @web.authenticated\\n     def get(self, format, path):\\n \\n@@ -145,6 +152,13 @@ def get(self, format, path):\\n class NbconvertPostHandler(IPythonHandler):\\n     SUPPORTED_METHODS = (\\'POST\\',)\\n \\n+    @property\\n+    def content_security_policy(self):\\n+        # In case we\\'re serving HTML\/SVG, confine any Javascript to a unique\\n+        # origin so it can\\'t interact with the notebook server.\\n+        return super(NbconvertPostHandler, self).content_security_policy + \\\\\\n+               \"; sandbox allow-scripts\"\\n+\\n     @web.authenticated\\n     def post(self, format):\\n         exporter = get_exporter(format, config=self.config)'}}",
            "message_norm":"apply csp sandboxing for nbconvert responses\n\nthese may contain untrusted content, so they should be treated as being\nfrom a different domain to the notebook server.",
            "language":"en",
            "entities":"[('untrusted', 'SECWORD', ''), ('server', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['notebook\/nbconvert\/handlers.py'])",
            "num_files":1.0
        },
        {
            "index":763,
            "vuln_id":"GHSA-66gw-5xpf-gfp5",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/ipython\/ipython\/commit\/c2078a53543ed502efd968649fee1125e0eb549c', 'https:\/\/github.com\/ipython\/ipython\/commit\/7222bd53ad089a65fd610fab4626f9d0ab47dfce'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Input During Web Page Generation in IPython Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the \/api\/notebooks path.",
            "published_date":"2022-05-13",
            "chain_len":2,
            "project":"https:\/\/github.com\/ipython\/ipython",
            "commit_href":"https:\/\/github.com\/ipython\/ipython\/commit\/c2078a53543ed502efd968649fee1125e0eb549c",
            "commit_sha":"c2078a53543ed502efd968649fee1125e0eb549c",
            "patch":"MULTI",
            "chain_ord":"['7222bd53ad089a65fd610fab4626f9d0ab47dfce', 'c2078a53543ed502efd968649fee1125e0eb549c']",
            "before_first_fix_commit":"{'64966ea2ae0d44a9c059efcb299db66cbc66ef04'}",
            "last_fix_commit":"c2078a53543ed502efd968649fee1125e0eb549c",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/22\/2015, 04:12:34",
            "message":"Set content type in json_error to application\/json",
            "author":"Kyle Kelley",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'IPython\/html\/base\/handlers.py': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ipython\/ipython\/raw\/c2078a53543ed502efd968649fee1125e0eb549c\/IPython%2Fhtml%2Fbase%2Fhandlers.py', 'patch': '@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):\\n             message = e.log_message\\n             self.log.warn(message)\\n             self.set_status(e.status_code)\\n+            self.set_header(\\'Content-Type\\', \\'application\/json\\')\\n             self.finish(json.dumps(dict(message=message)))\\n         except Exception:\\n             self.log.error(\"Unhandled error in API request\", exc_info=True)\\n@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):\\n             self.set_status(status)\\n             tb_text = \\'\\'.join(traceback.format_exception(t, value, tb))\\n             reply = dict(message=message, traceback=tb_text)\\n+            self.set_header(\\'Content-Type\\', \\'application\/json\\')\\n             self.finish(json.dumps(reply))\\n         else:\\n             return result'}}",
            "message_norm":"set content type in json_error to application\/json",
            "language":"en",
            "entities":"[('json_error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['IPython\/html\/base\/handlers.py'])",
            "num_files":1.0
        },
        {
            "index":2187,
            "vuln_id":"GHSA-j4f2-536g-r55m",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/socketio\/engine.io\/commit\/734f9d1268840722c41219e69eb58318e0b2ac6b'}",
            "dataset":"osv",
            "summary":"Resource exhaustion in engine.io  Engine.IO before 4.0.0 and 3.6.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/socketio\/engine.io",
            "commit_href":"https:\/\/github.com\/socketio\/engine.io\/commit\/734f9d1268840722c41219e69eb58318e0b2ac6b",
            "commit_sha":"734f9d1268840722c41219e69eb58318e0b2ac6b",
            "patch":"SINGLE",
            "chain_ord":"['734f9d1268840722c41219e69eb58318e0b2ac6b']",
            "before_first_fix_commit":"{'61b949259ed966ef6fc8bfd61f14d1a2ef06d319'}",
            "last_fix_commit":"734f9d1268840722c41219e69eb58318e0b2ac6b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2020, 06:57:29",
            "message":"feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
            "author":"Damien Arrachequesne",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '01\/08\/2021, 09:14:06', 'body': '[CVE-2020-36048](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-36048) was assigned to this commit.'}, 'com_2': {'author': 'ixevix', 'datetime': '05\/11\/2022, 18:37:43', 'body': 'Any luck getting this into an official release on some version of engine.io that socket.io v2.4.x depends on?'}, 'com_3': {'author': 'darrachequesne', 'datetime': '06\/27\/2022, 05:35:10', 'body': '@ixevix here we go:\\r\\n\\r\\n- https:\/\/github.com\/socketio\/engine.io\/releases\/tag\/3.6.0\\r\\n- https:\/\/github.com\/socketio\/socket.io\/releases\/tag\/2.5.0'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/server.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/socketio\/engine.io\/raw\/734f9d1268840722c41219e69eb58318e0b2ac6b\/lib%2Fserver.js', 'patch': '@@ -26,7 +26,7 @@ class Server extends EventEmitter {\\n         pingTimeout: 5000,\\n         pingInterval: 25000,\\n         upgradeTimeout: 10000,\\n-        maxHttpBufferSize: 10e7,\\n+        maxHttpBufferSize: 1e6,\\n         transports: Object.keys(transports),\\n         allowUpgrades: true,\\n         perMessageDeflate: {'}}",
            "message_norm":"feat: decrease the default value of maxhttpbuffersize\n\nthis change reduces the default value from 100 mb to a more sane 1 mb.\n\nthis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
            "language":"en",
            "entities":"[('protect', 'SECWORD', ''), ('server', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('malicious', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/server.js'])",
            "num_files":1.0
        },
        {
            "index":2511,
            "vuln_id":"GHSA-p55x-7x9v-q8m4",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/miekg\/dns\/commit\/43913f2f4fbd7dcff930b8a809e709591e4dd79e'}",
            "dataset":"osv",
            "summary":"Denial of Service in miekg-dns A denial of service flaw was found in miekg-dns before 1.0.4. A remote attacker could use carefully timed TCP packets to block the DNS server from accepting new connections.",
            "published_date":"2021-06-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/miekg\/dns",
            "commit_href":"https:\/\/github.com\/miekg\/dns\/commit\/43913f2f4fbd7dcff930b8a809e709591e4dd79e",
            "commit_sha":"43913f2f4fbd7dcff930b8a809e709591e4dd79e",
            "patch":"SINGLE",
            "chain_ord":"['43913f2f4fbd7dcff930b8a809e709591e4dd79e']",
            "before_first_fix_commit":"{'862243b3b1e77ca9f73771fc95a7148d11cebb55'}",
            "last_fix_commit":"43913f2f4fbd7dcff930b8a809e709591e4dd79e",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/25\/2018, 10:36:19",
            "message":"Fix for CVE-2017-15133 TCP DOS (#631)\n\nserveTCP calls reader.ReadTCP in the accept loop rather than in\r\nthe per-connection goroutine. If an attacker opens a connection\r\nand leaves it idle, this will block the accept loop until the\r\nconnection times out (2s by default). During this time no other\r\nincoming connections will succeed, preventing legitimate queries\r\nfrom being answered.\r\n\r\nThis commit moves the call to reader.ReadTCP into the per-connection\r\ngoroutine. It also adds a missing call to Close whose absence allowed\r\nfile-descirptors to leak in select cases.\r\n\r\nThis attack and fix have no impact on serving UDP queries.",
            "author":"Miek Gieben",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 5, 'total': 13}",
            "files":"{'server.go': {'additions': 8, 'deletions': 5, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/miekg\/dns\/raw\/43913f2f4fbd7dcff930b8a809e709591e4dd79e\/server.go', 'patch': '@@ -472,11 +472,14 @@ func (srv *Server) serveTCP(l net.Listener) error {\\n \\t\\t\\t}\\n \\t\\t\\treturn err\\n \\t\\t}\\n-\\t\\tm, err := reader.ReadTCP(rw, rtimeout)\\n-\\t\\tif err != nil {\\n-\\t\\t\\tcontinue\\n-\\t\\t}\\n-\\t\\tgo srv.serve(rw.RemoteAddr(), handler, m, nil, nil, rw)\\n+\\t\\tgo func() {\\n+\\t\\t\\tm, err := reader.ReadTCP(rw, rtimeout)\\n+\\t\\t\\tif err != nil {\\n+\\t\\t\\t\\trw.Close()\\n+\\t\\t\\t\\treturn\\n+\\t\\t\\t}\\n+\\t\\t\\tsrv.serve(rw.RemoteAddr(), handler, m, nil, nil, rw)\\n+\\t\\t}()\\n \\t}\\n }'}}",
            "message_norm":"fix for cve-2017-15133 tcp dos (#631)\n\nservetcp calls reader.readtcp in the accept loop rather than in\r\nthe per-connection goroutine. if an attacker opens a connection\r\nand leaves it idle, this will block the accept loop until the\r\nconnection times out (2s by default). during this time no other\r\nincoming connections will succeed, preventing legitimate queries\r\nfrom being answered.\r\n\r\nthis commit moves the call to reader.readtcp into the per-connection\r\ngoroutine. it also adds a missing call to close whose absence allowed\r\nfile-descirptors to leak in select cases.\r\n\r\nthis attack and fix have no impact on serving udp queries.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('cve-2017-15133', 'VULNID', 'CVE'), ('dos', 'SECWORD', ''), ('#631', 'ISSUE', ''), ('attacker', 'SECWORD', ''), ('preventing', 'ACTION', ''), ('adds', 'ACTION', ''), ('leak', 'SECWORD', ''), ('attack', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server.go'])",
            "num_files":1.0
        },
        {
            "index":399,
            "vuln_id":"GHSA-49x3-8228-3w3m",
            "cwe_id":"{'CWE-1333'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/cdr\/code-server\/commit\/ca617df135e78833f93c8320cb2d2cf8bba809f5'}",
            "dataset":"osv",
            "summary":"Inefficient Regular Expression Complexity in code-server code-server is vulnerable to Inefficient Regular Expression Complexity",
            "published_date":"2021-09-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/cdr\/code-server",
            "commit_href":"https:\/\/github.com\/cdr\/code-server\/commit\/ca617df135e78833f93c8320cb2d2cf8bba809f5",
            "commit_sha":"ca617df135e78833f93c8320cb2d2cf8bba809f5",
            "patch":"SINGLE",
            "chain_ord":"['ca617df135e78833f93c8320cb2d2cf8bba809f5']",
            "before_first_fix_commit":"{'bc3acb071e5393944627e16b2b54dc296a17d2d6'}",
            "last_fix_commit":"ca617df135e78833f93c8320cb2d2cf8bba809f5",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/11\/2021, 13:10:47",
            "message":"[Security] Fix ReDoS\n\nFix potential ReDoS",
            "author":"ready-research",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/node\/util.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/coder\/code-server\/raw\/ca617df135e78833f93c8320cb2d2cf8bba809f5\/src%2Fnode%2Futil.ts', 'patch': '@@ -20,7 +20,7 @@ export interface Paths {\\n \\n \/\/ From https:\/\/github.com\/chalk\/ansi-regex\\n const pattern = [\\n-  \"[\\\\\\\\u001B\\\\\\\\u009B][[\\\\\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\\\\\d]*(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]*)*)?\\\\\\\\u0007)\",\\n+  \"[\\\\\\\\u001B\\\\\\\\u009B][[\\\\\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\\\\\d]+(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]*)*)?\\\\\\\\u0007)\",\\n   \"(?:(?:\\\\\\\\d{1,4}(?:;\\\\\\\\d{0,4})*)?[\\\\\\\\dA-PR-TZcf-ntqry=><~]))\",\\n ].join(\"|\")\\n const re = new RegExp(pattern, \"g\")'}}",
            "message_norm":"[security] fix redos\n\nfix potential redos",
            "language":"es",
            "entities":"[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/node\/util.ts'])",
            "num_files":1.0
        },
        {
            "index":1321,
            "vuln_id":"GHSA-95hx-62rh-gg96",
            "cwe_id":"{'CWE-79'}",
            "score":8.0,
            "chain":"{'https:\/\/github.com\/PrestaShop\/contactform\/commit\/ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09'}",
            "dataset":"osv",
            "summary":"Potential XSS injection In PrestaShop contactform ### Impact\nAn attacker is able to inject javascript while using the contact form. \n\n### Patches\nThe problem is fixed in v4.3.0\n\n### References\n[Cross-site Scripting (XSS) - Stored (CWE-79)](https:\/\/cwe.mitre.org\/data\/definitions\/79.html)",
            "published_date":"2020-09-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/contactform",
            "commit_href":"https:\/\/github.com\/PrestaShop\/contactform\/commit\/ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09",
            "commit_sha":"ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09",
            "patch":"SINGLE",
            "chain_ord":"['ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09']",
            "before_first_fix_commit":"{'a883e56240357b4aaaf594ade573bb596e518078', 'aa3c77923734854bb7168f30db43544e42638202'}",
            "last_fix_commit":"ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/15\/2020, 08:03:00",
            "message":"Merge pull request from GHSA-95hx-62rh-gg96\n\nDo not unescape form message data",
            "author":"GoT",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 8, 'total': 17}",
            "files":"{'contactform.php': {'additions': 9, 'deletions': 8, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/contactform\/raw\/ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09\/contactform.php', 'patch': \"@@ -317,7 +317,7 @@ public function getWidgetVariables($hookName = null, array $configuration = [])\\n             }\\n         }\\n         $this->contact['contacts'] = $this->getTemplateVarContact();\\n-        $this->contact['message'] = html_entity_decode(Tools::getValue('message'));\\n+        $this->contact['message'] = Tools::getValue('message');\\n         $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');\\n \\n         if (!(bool)Configuration::isCatalogMode()) {\\n@@ -388,9 +388,10 @@ public function getTemplateVarOrders()\\n     {\\n         $orders = [];\\n \\n-        if (!isset($this->customer_thread['id_order'])\\n+        if (empty($this->customer_thread['id_order'])\\n             && isset($this->context->customer)\\n-            && $this->context->customer->isLogged()) {\\n+            && $this->context->customer->isLogged()\\n+        ) {\\n             $customer_orders = Order::getCustomerOrders($this->context->customer->id);\\n \\n             foreach ($customer_orders as $customer_order) {\\n@@ -401,7 +402,7 @@ public function getTemplateVarOrders()\\n                     $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();\\n                 }\\n             }\\n-        } elseif (isset($this->customer_thread['id_order']) && (int)$this->customer_thread['id_order'] > 0) {\\n+        } elseif (isset($this->customer_thread['id_order']) && (int) $this->customer_thread['id_order'] > 0) {\\n             $myOrder = new Order($this->customer_thread['id_order']);\\n \\n             if (Validate::isLoadedObject($myOrder)) {\\n@@ -411,13 +412,13 @@ public function getTemplateVarOrders()\\n             }\\n         }\\n \\n-        if (isset($this->customer_thread['id_product'])) {\\n+        if (!empty($this->customer_thread['id_product'])) {\\n             $id_order = isset($this->customer_thread['id_order']) ?\\n-                      (int)$this->customer_thread['id_order'] :\\n+                      (int) $this->customer_thread['id_order'] :\\n                       0;\\n \\n             $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(\\n-                new Product((int)$this->customer_thread['id_product'])\\n+                new Product((int) $this->customer_thread['id_product'])\\n             );\\n         }\\n \\n@@ -586,7 +587,7 @@ public function sendMessage()\\n                     '{lastname}' => '',\\n                     '{order_name}' => '-',\\n                     '{attached_file}' => '-',\\n-                    '{message}' => Tools::nl2br(Tools::stripslashes($message)),\\n+                    '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::stripslashes($message))),\\n                     '{email}' =>  $from,\\n                     '{product_name}' => '',\\n                 ];\"}}",
            "message_norm":"merge pull request from ghsa-95hx-62rh-gg96\n\ndo not unescape form message data",
            "language":"fr",
            "entities":"[('ghsa-95hx-62rh-gg96', 'VULNID', 'GHSA'), ('unescape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['contactform.php'])",
            "num_files":1.0
        },
        {
            "index":1204,
            "vuln_id":"GHSA-8fvr-5rqf-3wwh",
            "cwe_id":"{'CWE-285'}",
            "score":8.4,
            "chain":"{'https:\/\/github.com\/moby\/moby\/commit\/545b440a80f676a506e5837678dd4c4f65e78660'}",
            "dataset":"osv",
            "summary":"Information Exposure in Docker Engine Docker Engine before 1.6.1 uses weak permissions for (1) \/proc\/asound, (2) \/proc\/timer_stats, (3) \/proc\/latency_stats, and (4) \/proc\/fs, which allows local users to modify the host, obtain sensitive information, and perform protocol downgrade attacks via a crafted image.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/moby\/moby",
            "commit_href":"https:\/\/github.com\/moby\/moby\/commit\/545b440a80f676a506e5837678dd4c4f65e78660",
            "commit_sha":"545b440a80f676a506e5837678dd4c4f65e78660",
            "patch":"SINGLE",
            "chain_ord":"['545b440a80f676a506e5837678dd4c4f65e78660']",
            "before_first_fix_commit":"{'3162024e28c401750388da3417a44a552c6d5011'}",
            "last_fix_commit":"545b440a80f676a506e5837678dd4c4f65e78660",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2015, 20:33:51",
            "message":"Mount \/proc\/fs as readonly\n\nSigned-off-by: Michael Crosby <crosbymichael@gmail.com>",
            "author":"Michael Crosby",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'daemon\/execdriver\/native\/template\/default_template.go': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moby\/moby\/raw\/545b440a80f676a506e5837678dd4c4f65e78660\/daemon%2Fexecdriver%2Fnative%2Ftemplate%2Fdefault_template.go', 'patch': '@@ -86,6 +86,7 @@ func New() *configs.Config {\\n \\t\\tReadonlyPaths: []string{\\n \\t\\t\\t\"\/proc\/asound\",\\n \\t\\t\\t\"\/proc\/bus\",\\n+\\t\\t\\t\"\/proc\/fs\",\\n \\t\\t\\t\"\/proc\/irq\",\\n \\t\\t\\t\"\/proc\/sys\",\\n \\t\\t\\t\"\/proc\/sysrq-trigger\",'}}",
            "message_norm":"mount \/proc\/fs as readonly\n\nsigned-off-by: michael crosby <crosbymichael@gmail.com>",
            "language":"en",
            "entities":"[('crosbymichael@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['daemon\/execdriver\/native\/template\/default_template.go'])",
            "num_files":1.0
        },
        {
            "index":367,
            "vuln_id":"GHSA-465w-gg5p-85c9",
            "cwe_id":"{'CWE-613', 'CWE-384', 'CWE-295'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/kiali\/kiali\/commit\/93f5cd0b6698e8fe8772afb8f35816f6c086aef1', 'https:\/\/github.com\/kiali\/kiali\/commit\/c91a0949683976f621cca213c1193831d63b381c'}",
            "dataset":"osv",
            "summary":"Insufficient Session Expiration in Kiali An insufficient JWT validation vulnerability was found in Kiali versions 0.4.0 to 1.15.0 and was fixed in Kiali version 1.15.1, wherein a remote attacker could abuse this flaw by stealing a valid JWT cookie and using that to spoof a user session, possibly gaining privileges to view and alter the Istio configuration.",
            "published_date":"2021-05-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/kiali\/kiali",
            "commit_href":"https:\/\/github.com\/kiali\/kiali\/commit\/c91a0949683976f621cca213c1193831d63b381c",
            "commit_sha":"c91a0949683976f621cca213c1193831d63b381c",
            "patch":"MULTI",
            "chain_ord":"['c91a0949683976f621cca213c1193831d63b381c', '93f5cd0b6698e8fe8772afb8f35816f6c086aef1']",
            "before_first_fix_commit":"{'a660a80b2add1fd2fcfb5662c63824ca1dff95b9'}",
            "last_fix_commit":"93f5cd0b6698e8fe8772afb8f35816f6c086aef1",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2020, 18:05:17",
            "message":"Fix security issues around 'token' strategy\n\n* Require presence of sid claim",
            "author":"Edgar Hern\u00e1ndez",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'handlers\/authentication.go': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kiali\/kiali\/raw\/c91a0949683976f621cca213c1193831d63b381c\/handlers%2Fauthentication.go', 'patch': '@@ -425,6 +425,12 @@ func checkTokenSession(w http.ResponseWriter, r *http.Request) (int, string) {\\n \\tif claims, err := config.GetTokenClaimsIfValid(tokenString); err != nil {\\n \\t\\tlog.Warningf(\"Token is invalid: %s\", err.Error())\\n \\t} else {\\n+\\t\\t\/\/ Session ID claim must be present\\n+\\t\\tif len(claims.SessionId) == 0 {\\n+\\t\\t\\tlog.Warning(\"Token is invalid: sid claim is required\")\\n+\\t\\t\\treturn http.StatusUnauthorized, \"\"\\n+\\t\\t}\\n+\\n \\t\\tbusiness, err := business.Get(claims.SessionId)\\n \\t\\tif err != nil {\\n \\t\\t\\tlog.Warning(\"Could not get the business layer : \", err)'}}",
            "message_norm":"fix security issues around 'token' strategy\n\n* require presence of sid claim",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issues', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['handlers\/authentication.go'])",
            "num_files":1.0
        },
        {
            "index":1798,
            "vuln_id":"GHSA-fxqh-cfjm-fp93",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Reverse` ### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`:\n\n```python\nimport tensorflow as tf\n\ntensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)\ndims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)\n\ntf.raw_ops.Reverse(tensor=tensor_input, dims=dims)\n``` \n    \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/36229ea9e9451dac14a8b1f4711c435a1d84a594\/tensorflow\/core\/kernels\/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument:\n    \n```cc\nconst int64 N = input.dim_size(0);\nconst int64 cost_per_unit = input.NumElements() \/ N;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [4071d8e2f6c45c1955a811fee757ca2adbe462c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "commit_sha":"4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "patch":"SINGLE",
            "chain_ord":"['4071d8e2f6c45c1955a811fee757ca2adbe462c1']",
            "before_first_fix_commit":"{'36229ea9e9451dac14a8b1f4711c435a1d84a594'}",
            "last_fix_commit":"4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 19:24:18",
            "message":"Fix FPE issue with `tf.raw_ops.Reverse`.\n\nPiperOrigin-RevId: 371176973\nChange-Id: Ic6d483bfc95313ec2299c2d1c956cfe96c96626c",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/reverse_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4071d8e2f6c45c1955a811fee757ca2adbe462c1\/tensorflow%2Fcore%2Fkernels%2Freverse_op.cc', 'patch': '@@ -155,6 +155,12 @@ class ReverseOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     const Tensor& input = context->input(0);\\n+    \/\/ If input is provided, check to make sure the first dimension is valid.\\n+    if (input.dims() > 0) {\\n+      OP_REQUIRES(\\n+          context, input.dim_size(0) != 0,\\n+          errors::InvalidArgument(\"Invalid input first dimension. Found 0.\"));\\n+    }\\n     const Tensor& dims = context->input(1);\\n \\n     if (TensorShapeUtils::IsScalar(input.shape())) {'}}",
            "message_norm":"fix fpe issue with `tf.raw_ops.reverse`.\n\npiperorigin-revid: 371176973\nchange-id: ic6d483bfc95313ec2299c2d1c956cfe96c96626c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371176973', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/reverse_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2551,
            "vuln_id":"GHSA-pc5p-h8pf-mvwp",
            "cwe_id":"{'CWE-300'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/commit\/36d8cf509f877fa44f4404fce57ebaf9410fe51b'}",
            "dataset":"osv",
            "summary":"Machine-In-The-Middle in https-proxy-agent Versions of `https-proxy-agent` prior to 2.2.3 are vulnerable to Machine-In-The-Middle. The package fails to enforce TLS on the socket if the proxy server responds the to the request with a HTTP status different than 200. This allows an attacker with access to the proxy server to intercept unencrypted communications, which may include sensitive information such as credentials.\n\n\n## Recommendation\n\nUpgrade to version 3.0.0 or 2.2.3.",
            "published_date":"2020-04-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/TooTallNate\/node-https-proxy-agent",
            "commit_href":"https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/commit\/36d8cf509f877fa44f4404fce57ebaf9410fe51b",
            "commit_sha":"36d8cf509f877fa44f4404fce57ebaf9410fe51b",
            "patch":"SINGLE",
            "chain_ord":"['36d8cf509f877fa44f4404fce57ebaf9410fe51b']",
            "before_first_fix_commit":"{'5252bb9355ad12802d7e0846e5e7cf4ced54fc63'}",
            "last_fix_commit":"36d8cf509f877fa44f4404fce57ebaf9410fe51b",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/07\/2019, 19:53:24",
            "message":"Use an `EventEmitter` to replay failed proxy connect HTTP requests (#77)\n\n* Use an `EventEmitter` to replay failed proxy connect HTTP requests\r\n\r\nThis is a fix for https:\/\/hackerone.com\/reports\/541502.\r\n\r\nAborts the upstream proxy connection and instead uses a vanilla\r\n`EventEmitter` instance to replay the \"data\" events on to. This way,\r\nthe node core `http` Client doesn't attempt to write the HTTP request\r\nthat is intended to go to the destination server to the proxy server.\r\n\r\nCloses #76.\r\n\r\n* Adjust comment",
            "author":"Nathan Rajlich",
            "comments":"{'com_1': {'author': 'jaimeborjas', 'datetime': '04\/17\/2020, 01:17:19', 'body': 'Security fixes'}, 'com_2': {'author': 'donurukiran', 'datetime': '04\/17\/2020, 13:18:32', 'body': 'done with few security issues'}}",
            "stats":"{'additions': 15, 'deletions': 3, 'total': 18}",
            "files":"{'index.js': {'additions': 15, 'deletions': 3, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/raw\/36d8cf509f877fa44f4404fce57ebaf9410fe51b\/index.js', 'patch': '@@ -5,6 +5,7 @@\\n var net = require(\\'net\\');\\n var tls = require(\\'tls\\');\\n var url = require(\\'url\\');\\n+var events = require(\\'events\\');\\n var Agent = require(\\'agent-base\\');\\n var inherits = require(\\'util\\').inherits;\\n var debug = require(\\'debug\\')(\\'https-proxy-agent\\');\\n@@ -154,20 +155,32 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\\n       fn(null, sock);\\n     } else {\\n       \/\/ some other status code that\\'s not 200... need to re-play the HTTP header\\n-      \/\/ \"data\" events onto the socket once the HTTP machinery is attached so that\\n-      \/\/ the user can parse and handle the error status code\\n+      \/\/ \"data\" events onto the socket once the HTTP machinery is attached so\\n+      \/\/ that the node core `http` can parse and handle the error status code\\n       cleanup();\\n \\n+      \/\/ the original socket is closed, and a \"fake socket\" EventEmitter is\\n+      \/\/ returned instead, so that the proxy doesn\\'t get the HTTP request\\n+      \/\/ written to it (which may contain `Authorization` headers or other\\n+      \/\/ sensitive data).\\n+      \/\/\\n+      \/\/ See: https:\/\/hackerone.com\/reports\/541502\\n+      socket.destroy();\\n+      socket = new events.EventEmitter();\\n+\\n       \/\/ save a reference to the concat\\'d Buffer for the `onsocket` callback\\n       buffers = buffered;\\n \\n       \/\/ need to wait for the \"socket\" event to re-play the \"data\" events\\n       req.once(\\'socket\\', onsocket);\\n+\\n       fn(null, socket);\\n     }\\n   }\\n \\n   function onsocket(socket) {\\n+    debug(\\'replaying proxy buffer for failed request\\');\\n+\\n     \/\/ replay the \"buffers\" Buffer onto the `socket`, since at this point\\n     \/\/ the HTTP module machinery has been hooked up for the user\\n     if (socket.listenerCount(\\'data\\') > 0) {\\n@@ -177,7 +190,6 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\\n       throw new Error(\\'should not happen...\\');\\n     }\\n \\n-    socket.resume();\\n     \/\/ nullify the cached Buffer instance\\n     buffers = null;\\n   }'}}",
            "message_norm":"use an `eventemitter` to replay failed proxy connect http requests (#77)\n\n* use an `eventemitter` to replay failed proxy connect http requests\r\n\r\nthis is a fix for https:\/\/hackerone.com\/reports\/541502.\r\n\r\naborts the upstream proxy connection and instead uses a vanilla\r\n`eventemitter` instance to replay the \"data\" events on to. this way,\r\nthe node core `http` client doesn't attempt to write the http request\r\nthat is intended to go to the destination server to the proxy server.\r\n\r\ncloses #76.\r\n\r\n* adjust comment",
            "language":"en",
            "entities":"[('#77', 'ISSUE', ''), ('https:\/\/hackerone.com\/reports\/541502', 'URL', ''), ('server', 'SECWORD', ''), ('server', 'SECWORD', ''), ('#76', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":3113,
            "vuln_id":"GHSA-vgmw-9cww-qq99",
            "cwe_id":"{'CWE-284', 'CWE-863'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/0c0313f375bed7b035c8c0482bbb09599e16bfcf'}",
            "dataset":"osv",
            "summary":"Incorrect Authorization in calibreweb calibreweb prior to version 0.6.16 contains an Incorrect Authorization vulnerability.",
            "published_date":"2022-01-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/janeczku\/calibre-web",
            "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "commit_sha":"0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "patch":"SINGLE",
            "chain_ord":"['0c0313f375bed7b035c8c0482bbb09599e16bfcf']",
            "before_first_fix_commit":"{'6bf07539788004513c3692c074ebc7ba4ce005e1'}",
            "last_fix_commit":"0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/18\/2022, 16:55:10",
            "message":"Prevent creating a public shelf without permission",
            "author":"Ozzie Isaacs",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'cps\/shelf.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/0c0313f375bed7b035c8c0482bbb09599e16bfcf\/cps%2Fshelf.py', 'patch': '@@ -248,7 +248,7 @@ def create_edit_shelf(shelf, page_title, page, shelf_id=False):\\n         if not current_user.role_edit_shelfs() and to_save.get(\"is_public\") == \"on\":\\n             flash(_(u\"Sorry you are not allowed to create a public shelf\"), category=\"error\")\\n             return redirect(url_for(\\'web.index\\'))\\n-        is_public = 1 if to_save.get(\"is_public\") else 0\\n+        is_public = 1 if to_save.get(\"is_public\") == \"on\" else 0\\n         if config.config_kobo_sync:\\n             shelf.kobo_sync = True if to_save.get(\"kobo_sync\") else False\\n             if shelf.kobo_sync:'}}",
            "message_norm":"prevent creating a public shelf without permission",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('permission', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['cps\/shelf.py'])",
            "num_files":1.0
        },
        {
            "index":200,
            "vuln_id":"GHSA-35g4-qx3c-vjhx",
            "cwe_id":"{'CWE-306'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/matrix-org\/matrix-appservice-bridge\/commit\/b69e745584a34fcfd858df33e4631e420da07b9f'}",
            "dataset":"osv",
            "summary":"Automatic room upgrade handling can be used maliciously to bridge a room non-consentually  ### Impact\n\nIf a bridge has room upgrade handling turned on in the configuration (the `roomUpgradeOpts` key when instantiating a new `Bridge` instance.), any `m.room.tombstone` event it encounters will be used to unbridge the current room and bridge into the target room. However, the target room `m.room.create` event is not checked to verify if the `predecessor` field contains the previous room. This means that any mailcious admin of a bridged room can repoint the traffic to a different room without the new room being aware.\n\n\n### Patches\n\nVersions 2.6.1 and greater are patched.\n\n### Workarounds\n\nDisabling the automatic room upgrade handling can be done by removing the `roomUpgradeOpts` key from the `Bridge` class options. \n\n### References\n\nThe issue is patched by https:\/\/github.com\/matrix-org\/matrix-appservice-bridge\/pull\/330\n\n### For more information]\n\nIf you have any questions or comments about this advisory, email us at security@matrix.org.",
            "published_date":"2021-06-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/matrix-org\/matrix-appservice-bridge",
            "commit_href":"https:\/\/github.com\/matrix-org\/matrix-appservice-bridge\/commit\/b69e745584a34fcfd858df33e4631e420da07b9f",
            "commit_sha":"b69e745584a34fcfd858df33e4631e420da07b9f",
            "patch":"SINGLE",
            "chain_ord":"['b69e745584a34fcfd858df33e4631e420da07b9f']",
            "before_first_fix_commit":"{'1b587e2455cbd30779f5052d2d2d46d58463a3e2'}",
            "last_fix_commit":"b69e745584a34fcfd858df33e4631e420da07b9f",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/28\/2021, 09:32:25",
            "message":"Check m.room.create event on room upgrade",
            "author":"Will Hunt",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 0, 'total': 7}",
            "files":"{'src\/components\/room-upgrade-handler.ts': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/matrix-org\/matrix-appservice-bridge\/raw\/b69e745584a34fcfd858df33e4631e420da07b9f\/src%2Fcomponents%2Froom-upgrade-handler.ts', 'patch': \"@@ -145,6 +145,13 @@ export class RoomUpgradeHandler {\\n     private async onJoinedNewRoom(oldRoomId: string, newRoomId: string) {\\n         log.debug(`Joined ${newRoomId}`);\\n         const intent = this.bridge.getIntent();\\n+        const { predecessor } = await intent.getStateEvent(newRoomId, 'm.room.create');\\n+        if (predecessor.room_id !== oldRoomId) {\\n+            log.error(\\n+    `Room doesn't have a matching predecessor (expected: ${oldRoomId}, got: ${predecessor.room_id}), not bridging.`\\n+            );\\n+            return false;\\n+        }\\n         const asBot = this.bridge.getBot();\\n         if (this.opts.migrateStoreEntries) {\\n             const success = await this.migrateStoreEntries(oldRoomId, newRoomId);\"}}",
            "message_norm":"check m.room.create event on room upgrade",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/components\/room-upgrade-handler.ts'])",
            "num_files":1.0
        },
        {
            "index":3204,
            "vuln_id":"GHSA-w32p-76xr-88pc",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/90f67afac6362828c750f3bccbcc1c360caf29e4', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/3d6226cc2d1077537220361c82e34a362c6c76ee'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0989, CVE-2019-0991, CVE-2019-0992, CVE-2019-0993, CVE-2019-1002, CVE-2019-1024, CVE-2019-1051, CVE-2019-1052.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/90f67afac6362828c750f3bccbcc1c360caf29e4",
            "commit_sha":"90f67afac6362828c750f3bccbcc1c360caf29e4",
            "patch":"MULTI",
            "chain_ord":"['90f67afac6362828c750f3bccbcc1c360caf29e4', '3d6226cc2d1077537220361c82e34a362c6c76ee']",
            "before_first_fix_commit":"{'d797e3f00e34c12c8c0ae52f56344325439dccd7', 'eabf77ad17010f220639e5261798da9ac14e43e3'}",
            "last_fix_commit":"3d6226cc2d1077537220361c82e34a362c6c76ee",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/15\/2019, 22:37:38",
            "message":"CVE-2019-1003",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'lib\/Runtime\/Library\/JavascriptProxy.cpp': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/90f67afac6362828c750f3bccbcc1c360caf29e4\/lib%2FRuntime%2FLibrary%2FJavascriptProxy.cpp', 'patch': '@@ -392,6 +392,8 @@ namespace Js\\n         }\\n         propertyDescriptor->SetValue(getGetResult);\\n \\n+        threadContext->AddImplicitCallFlags(Js::ImplicitCall_External);\\n+\\n         return TRUE;\\n     }\\n \\n@@ -1907,6 +1909,9 @@ namespace Js\\n                 }\\n             }\\n         }\\n+\\n+        threadContext->AddImplicitCallFlags(Js::ImplicitCall_External);\\n+\\n         return TRUE;\\n \\n     }'}}",
            "message_norm":"cve-2019-1003",
            "language":"ro",
            "entities":"[('cve-2019-1003', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Runtime\/Library\/JavascriptProxy.cpp'])",
            "num_files":1.0
        },
        {
            "index":2748,
            "vuln_id":"GHSA-qg48-85hg-mqc5",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da5ff2daf618591f64b2b62d9d9803951b945e9f'}",
            "dataset":"osv",
            "summary":"Division by 0 in `DenseCountSparseOutput` ### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.DenseCountSparseOutput`:\n\n```python\nimport tensorflow as tf\n\nvalues = tf.constant([], shape=[0, 0], dtype=tf.int64)\nweights = tf.constant([])\n\ntf.raw_ops.DenseCountSparseOutput(\n  values=values, weights=weights,\n  minlength=-1, maxlength=58, binary_output=True)\n```\n  \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/efff014f3b2d8ef6141da30c806faf141297eca1\/tensorflow\/core\/kernels\/count_ops.cc#L123-L127) computes a divisor value from user data but does not check that the result is 0 before doing the division:\n\n```cc\nint num_batch_elements = 1;\nfor (int i = 0; i < num_batch_dimensions; ++i) {\n  num_batch_elements *= data.shape().dim_size(i);\n}\nint num_value_elements = data.shape().num_elements() \/ num_batch_elements;\n```\n\nSince `data` is given by the `values` argument, `num_batch_elements` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [da5ff2daf618591f64b2b62d9d9803951b945e9f](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da5ff2daf618591f64b2b62d9d9803951b945e9f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, and TensorFlow 2.3.3, as these are also affected.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da5ff2daf618591f64b2b62d9d9803951b945e9f",
            "commit_sha":"da5ff2daf618591f64b2b62d9d9803951b945e9f",
            "patch":"SINGLE",
            "chain_ord":"['da5ff2daf618591f64b2b62d9d9803951b945e9f']",
            "before_first_fix_commit":"{'efff014f3b2d8ef6141da30c806faf141297eca1'}",
            "last_fix_commit":"da5ff2daf618591f64b2b62d9d9803951b945e9f",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 18:24:45",
            "message":"Fix FPE issue with `tf.raw_ops.DenseCountSparseOutput`.\n\nPiperOrigin-RevId: 370946862\nChange-Id: I3752584ad04aaecb327ff6793a9640ac56acfe7a",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/count_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/da5ff2daf618591f64b2b62d9d9803951b945e9f\/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -122,6 +122,9 @@ class DenseCount : public OpKernel {\\n \\n     int num_batch_elements = 1;\\n     for (int i = 0; i < num_batch_dimensions; ++i) {\\n+      OP_REQUIRES(context, data.shape().dim_size(i) != 0,\\n+                  errors::InvalidArgument(\\n+                      \"Invalid input: Shapes dimension cannot be 0.\"));\\n       num_batch_elements *= data.shape().dim_size(i);\\n     }\\n     int num_value_elements = data.shape().num_elements() \/ num_batch_elements;'}}",
            "message_norm":"fix fpe issue with `tf.raw_ops.densecountsparseoutput`.\n\npiperorigin-revid: 370946862\nchange-id: i3752584ad04aaecb327ff6793a9640ac56acfe7a",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('issue', 'FLAW', ''), ('370946862', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/count_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2486,
            "vuln_id":"GHSA-mxvc-fwgx-j778",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/benbusby\/whoogle-search\/commit\/abc30d7da3b5c67be7ce84d4699f327442d44606'}",
            "dataset":"osv",
            "summary":"Whoogle Search Cross-site Scripting via string parameter The package whoogle-search before 0.7.2 is vulnerable to Cross-site Scripting (XSS) via the query string parameter q. In the case where it does not contain the http string, it is used to build the error_message that is then rendered in the error.html template, using the [flask.render_template](https:\/\/flask.palletsprojects.com\/en\/2.1.x\/api\/flask.render_template) function. However, the error_message is rendered using the [| safe filter](https:\/\/jinja.palletsprojects.com\/en\/3.1.x\/templates\/working-with-automatic-escaping), meaning the user input is not escaped.",
            "published_date":"2022-07-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/benbusby\/whoogle-search",
            "commit_href":"https:\/\/github.com\/benbusby\/whoogle-search\/commit\/abc30d7da3b5c67be7ce84d4699f327442d44606",
            "commit_sha":"abc30d7da3b5c67be7ce84d4699f327442d44606",
            "patch":"SINGLE",
            "chain_ord":"['abc30d7da3b5c67be7ce84d4699f327442d44606']",
            "before_first_fix_commit":"{'d62ceb84239ee0df677851f46eb885c40e98211f'}",
            "last_fix_commit":"abc30d7da3b5c67be7ce84d4699f327442d44606",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2022, 15:28:05",
            "message":"Render error message w\/o `safe` filter\n\nThe error message shown in the error template does not need to be\nrendered using the safe filter, and furthermore opens up an XSS\nvulnerability.",
            "author":"Ben Busby",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/templates\/error.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/benbusby\/whoogle-search\/raw\/abc30d7da3b5c67be7ce84d4699f327442d44606\/app%2Ftemplates%2Ferror.html', 'patch': '@@ -16,7 +16,7 @@\\n <div>\\n     <h1>Error<\/h1>\\n     <p>\\n-        {{ error_message|safe }}\\n+        {{ error_message }}\\n     <\/p>\\n     <hr>\\n     <p>'}}",
            "message_norm":"render error message w\/o `safe` filter\n\nthe error message shown in the error template does not need to be\nrendered using the safe filter, and furthermore opens up an xss\nvulnerability.",
            "language":"en",
            "entities":"[('error', 'FLAW', ''), ('safe', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('safe', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/templates\/error.html'])",
            "num_files":1.0
        },
        {
            "index":3405,
            "vuln_id":"GHSA-x9rg-q5fx-fx66",
            "cwe_id":"{'CWE-20'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in libpam4j It was found that libpam4j prior to 1.10 did not properly validate user accounts when authenticating. A user with a valid password for a disabled account would be able to bypass security restrictions and possibly access sensitive information.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/kohsuke\/libpam4j",
            "commit_href":"https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21",
            "commit_sha":"02ffdff218283629ba4a902e7fe2fd44646abc21",
            "patch":"SINGLE",
            "chain_ord":"['02ffdff218283629ba4a902e7fe2fd44646abc21']",
            "before_first_fix_commit":"{'f49e2838cb195b2dce1448393d8c88174ad80652'}",
            "last_fix_commit":"02ffdff218283629ba4a902e7fe2fd44646abc21",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/29\/2018, 18:11:55",
            "message":"call pam_acct_mgmt to verify whether the user account is valid.\n\nThis fixes issue #18 and thus CVE-2017-12197",
            "author":"Kohsuke Kawaguchi",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/main\/java\/org\/jvnet\/libpam\/PAM.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kohsuke\/libpam4j\/raw\/02ffdff218283629ba4a902e7fe2fd44646abc21\/src%2Fmain%2Fjava%2Forg%2Fjvnet%2Flibpam%2FPAM.java', 'patch': '@@ -124,7 +124,7 @@ public UnixUser authenticate(String username, String password) throws PAMExcepti\\n             check(libpam.pam_authenticate(pht,0),\"pam_authenticate failed\");\\n             check(libpam.pam_setcred(pht,0),\"pam_setcred failed\");\\n             \/\/ several different error code seem to be used to represent authentication failures\\n-\/\/            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n+            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n \\n             PointerByReference r = new PointerByReference();\\n             check(libpam.pam_get_item(pht,PAM_USER,r),\"pam_get_item failed\");'}}",
            "message_norm":"call pam_acct_mgmt to verify whether the user account is valid.\n\nthis fixes issue #18 and thus cve-2017-12197",
            "language":"en",
            "entities":"[('verify', 'ACTION', ''), ('user account', 'SECWORD', ''), ('#18', 'ISSUE', ''), ('cve-2017-12197', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/org\/jvnet\/libpam\/PAM.java'])",
            "num_files":1.0
        },
        {
            "index":2398,
            "vuln_id":"GHSA-m9m5-cg5h-r582",
            "cwe_id":"{'CWE-338'}",
            "score":5.1,
            "chain":"{'https:\/\/github.com\/Absolucy\/nanorand-rs\/commit\/5ba218ac29df4786b002d7d12b47fa0c04a331f2'}",
            "dataset":"osv",
            "summary":"Improper random number generation in nanorand An issue was discovered in the nanorand crate before 0.5.1 for Rust. It caused any random number generator (even ChaCha) to return all zeroes because integer truncation was mishandled.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/Absolucy\/nanorand-rs",
            "commit_href":"https:\/\/github.com\/Absolucy\/nanorand-rs\/commit\/5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "commit_sha":"5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "patch":"SINGLE",
            "chain_ord":"['5ba218ac29df4786b002d7d12b47fa0c04a331f2']",
            "before_first_fix_commit":"{'7bf49ecbb254991585c04dd4f4d2a23cb16a1240'}",
            "last_fix_commit":"5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/07\/2020, 12:33:01",
            "message":"fix: Fix random number generation",
            "author":"aspen",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 7, 'total': 14}",
            "files":"{'nanorand\/src\/gen.rs': {'additions': 7, 'deletions': 7, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Absolucy\/nanorand-rs\/raw\/5ba218ac29df4786b002d7d12b47fa0c04a331f2\/nanorand%2Fsrc%2Fgen.rs', 'patch': '@@ -101,44 +101,44 @@ impl<R: RNG> RandomRange<R> for usize {\\n \\n impl<R: RNG> RandomGen<R> for u32 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 32) as u32\\n+\\t\\tr.generate::<u64>() as u32\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u32 {\\n \\tfn random_range(r: &mut R, lower: u32, upper: u32) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 32) as u32\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u32\\n \\t}\\n }\\n \\n impl<R: RNG> RandomGen<R> for u16 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 16) as u16\\n+\\t\\tr.generate::<u64>() as u16\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u16 {\\n \\tfn random_range(r: &mut R, lower: u16, upper: u16) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 16) as u16\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u16\\n \\t}\\n }\\n \\n impl<R: RNG> RandomGen<R> for u8 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 8) as u8\\n+\\t\\tr.generate::<u64>() as u8\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u8 {\\n \\tfn random_range(r: &mut R, lower: u8, upper: u8) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 8) as u8\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u8\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for char {\\n \\tfn random_range(r: &mut R, lower: char, upper: char) -> Self {\\n \\t\\tloop {\\n-\\t\\t\\tlet ret = (r.generate_range::<u64>(lower as u64, upper as u64) >> 32) as u32;\\n+\\t\\t\\tlet ret = r.generate_range::<u64>(lower as u64, upper as u64) as u32;\\n \\t\\t\\tif let Some(c) = core::char::from_u32(ret) {\\n \\t\\t\\t\\tbreak c;\\n \\t\\t\\t}'}}",
            "message_norm":"fix: fix random number generation",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['nanorand\/src\/gen.rs'])",
            "num_files":1.0
        },
        {
            "index":1339,
            "vuln_id":"GHSA-98gj-wwxm-cj3h",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/lepture\/mistune\/commit\/5f06d724bc05580e7f203db2d4a4905fc1127f98'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects mistune Cross-site scripting (XSS) vulnerability in the _keyify function in mistune.py in Mistune before 0.8.1 allows remote attackers to inject arbitrary web script or HTML by leveraging failure to escape the \"key\" argument.",
            "published_date":"2019-01-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/lepture\/mistune",
            "commit_href":"https:\/\/github.com\/lepture\/mistune\/commit\/5f06d724bc05580e7f203db2d4a4905fc1127f98",
            "commit_sha":"5f06d724bc05580e7f203db2d4a4905fc1127f98",
            "patch":"SINGLE",
            "chain_ord":"['5f06d724bc05580e7f203db2d4a4905fc1127f98']",
            "before_first_fix_commit":"{'7f7f106a717e6cf58012304e56b41d6fb2b98e5f'}",
            "last_fix_commit":"5f06d724bc05580e7f203db2d4a4905fc1127f98",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/20\/2017, 15:15:09",
            "message":"Fix CVE-2017-16876",
            "author":"Hsiaoming Yang",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 3, 'total': 8}",
            "files":"{'mistune.py': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/lepture\/mistune\/raw\/5f06d724bc05580e7f203db2d4a4905fc1127f98\/mistune.py', 'patch': \"@@ -11,7 +11,7 @@\\n import re\\n import inspect\\n \\n-__version__ = '0.8'\\n+__version__ = '0.8.1'\\n __author__ = 'Hsiaoming Yang <me@lepture.com>'\\n __all__ = [\\n     'BlockGrammar', 'BlockLexer',\\n@@ -48,7 +48,8 @@ def _pure_pattern(regex):\\n \\n \\n def _keyify(key):\\n-    return _key_pattern.sub(' ', key.lower())\\n+    key = escape(key.lower(), quote=True)\\n+    return _key_pattern.sub(' ', key)\\n \\n \\n def escape(text, quote=False, smart_amp=True):\\n@@ -445,7 +446,8 @@ class InlineGrammar(object):\\n     inline_html = re.compile(\\n         r'^(?:%s|%s|%s)' % (\\n             r'<!--[\\\\s\\\\S]*?-->',\\n-            r'<(\\\\w+%s)((?:%s)*?)\\\\s*>([\\\\s\\\\S]*?)<\\\\\/\\\\1>' % (_valid_end, _valid_attr),\\n+            r'<(\\\\w+%s)((?:%s)*?)\\\\s*>([\\\\s\\\\S]*?)<\\\\\/\\\\1>' % (\\n+                _valid_end, _valid_attr),\\n             r'<\\\\w+%s(?:%s)*?\\\\s*\\\\\/?>' % (_valid_end, _valid_attr),\\n         )\\n     )\"}}",
            "message_norm":"fix cve-2017-16876",
            "language":"fr",
            "entities":"[('fix', 'ACTION', ''), ('cve-2017-16876', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mistune.py'])",
            "num_files":1.0
        },
        {
            "index":401,
            "vuln_id":"GHSA-4c4g-crqm-xrxw",
            "cwe_id":"{'CWE-908'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887'}",
            "dataset":"osv",
            "summary":"Use of unitialized value in TFLite ### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/lite\/kernels\/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast<TfLiteAffineQuantization*>(\n            filter->quantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538",
            "commit_sha":"8933b8a21280696ab119b63263babdb54c298538",
            "patch":"MULTI",
            "chain_ord":"['537bc7c723439b9194a358f64d871dd326c18887', '4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', '8933b8a21280696ab119b63263babdb54c298538']",
            "before_first_fix_commit":"{'e35be978351a8578549d30b6f483825d36dc0f8b'}",
            "last_fix_commit":"8933b8a21280696ab119b63263babdb54c298538",
            "chain_ord_pos":3.0,
            "commit_datetime":"07\/16\/2021, 17:22:37",
            "message":"Fix a null pointer exception caused by branching on uninitialized data.\n\nThis is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\n\nPiperOrigin-RevId: 385173491\nChange-Id: I8fc476c4b274fdb21ba741caa0fbc6d1b8840663",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/depthwise_conv.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8933b8a21280696ab119b63263babdb54c298538\/tensorflow%2Flite%2Fkernels%2Fdepthwise_conv.cc', 'patch': '@@ -176,6 +176,7 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n   if (data_type != kTfLiteFloat32) {\\n     TF_LITE_ENSURE_EQ(context, filter->quantization.type,\\n                       kTfLiteAffineQuantization);\\n+    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);\\n     const auto* affine_quantization =\\n         reinterpret_cast<TfLiteAffineQuantization*>(\\n             filter->quantization.params);\\n@@ -195,6 +196,7 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n   }\\n \\n   if (is_hybrid) {\\n+    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);\\n     const auto* affine_quantization =\\n         reinterpret_cast<TfLiteAffineQuantization*>(\\n             filter->quantization.params);\\n@@ -495,6 +497,7 @@ TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,\\n   op_params.weights_offset = 0;\\n   op_params.float_activation_min = output_activation_min;\\n   op_params.float_activation_max = output_activation_max;\\n+  TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);\\n   const auto* affine_quantization =\\n       reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\\n   if (kernel_type == kReference) {'}}",
            "message_norm":"fix a null pointer exception caused by branching on uninitialized data.\n\nthis is due to not checking that the params for the quantization exists. if there is no quantization, we should not access the `.params` field.\n\npiperorigin-revid: 385173491\nchange-id: i8fc476c4b274fdb21ba741caa0fbc6d1b8840663",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('uninitialized', 'SECWORD', ''), ('385173491', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/depthwise_conv.cc'])",
            "num_files":1.0
        },
        {
            "index":2341,
            "vuln_id":"GHSA-m3xv-x3ph-mq22",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469'}",
            "dataset":"osv",
            "summary":"Server-side Template Injection in nystudio107\/craft-seomatic A Server-side Template Injection (SSTI) vulnerability exists in Nystudio107 Seomatic prior to 3.4.12 in src\/helpers\/UrlHelper.php via the host header.",
            "published_date":"2022-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/nystudio107\/craft-seomatic",
            "commit_href":"https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
            "commit_sha":"0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
            "patch":"SINGLE",
            "chain_ord":"['0c5c0c0e0cb61000d12ec55ebf174745a5bf6469']",
            "before_first_fix_commit":"{'1a47702db9d2df3fa3e12b1c4be09b55d2b6166f'}",
            "last_fix_commit":"0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/25\/2021, 04:44:33",
            "message":"Sanitize all URLs\n\nSigned-off-by: Andrew Welch <andrew@nystudio107.com>",
            "author":"Andrew Welch",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/helpers\/UrlHelper.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nystudio107\/craft-seomatic\/raw\/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469\/src%2Fhelpers%2FUrlHelper.php', 'patch': \"@@ -56,7 +56,7 @@ public static function siteUrl(string $path = '', $params = null, string $scheme\\n             return $url;\\n         }\\n \\n-        return parent::siteUrl($path, $params, $scheme, $siteId);\\n+        return DynamicMeta::sanitizeUrl(parent::siteUrl($path, $params, $scheme, $siteId));\\n     }\\n \\n     \/**\\n@@ -130,7 +130,7 @@ public static function absoluteUrlWithProtocol($url): string\\n             $url = rtrim($url, '\/');\\n         }\\n \\n-        return $url;\\n+        return DynamicMeta::sanitizeUrl($url);\\n     }\\n \\n     \/**\"}}",
            "message_norm":"sanitize all urls\n\nsigned-off-by: andrew welch <andrew@nystudio107.com>",
            "language":"en",
            "entities":"[('sanitize', 'SECWORD', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/UrlHelper.php'])",
            "num_files":1.0
        },
        {
            "index":1472,
            "vuln_id":"GHSA-c442-3278-rhrg",
            "cwe_id":"{'CWE-434'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/49b992d4c548c8c615a92b6efe8a50c8f1083abf'}",
            "dataset":"osv",
            "summary":"Unrestricted File Upload in ShowDoc v2.9.5 Unrestricted File Upload in ShowDoc v2.9.5 allows remote attackers to execute arbitrary code via the 'file_url' parameter in the component AdminUpdateController.class.php'.",
            "published_date":"2021-09-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/49b992d4c548c8c615a92b6efe8a50c8f1083abf",
            "commit_sha":"49b992d4c548c8c615a92b6efe8a50c8f1083abf",
            "patch":"SINGLE",
            "chain_ord":"['49b992d4c548c8c615a92b6efe8a50c8f1083abf']",
            "before_first_fix_commit":"{'8db2d13196df7067fdf2e37cf1e5e2d7aba3d748'}",
            "last_fix_commit":"49b992d4c548c8c615a92b6efe8a50c8f1083abf",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/24\/2021, 15:25:43",
            "message":"Fix security vulnerabilities",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'server\/Application\/Api\/Controller\/AdminUpdateController.class.php': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/49b992d4c548c8c615a92b6efe8a50c8f1083abf\/server%2FApplication%2FApi%2FController%2FAdminUpdateController.class.php', 'patch': '@@ -24,6 +24,8 @@ public function checkUpdate(){\\n \\n     \/\/ \u4e0b\u8f7d\u66f4\u65b0\u4ee3\u7801\u5305\\n     public function download(){\\n+        $this->checkLogin();\\n+        $this->checkAdmin();\\n         set_time_limit(1000);\\n         ini_set(\\'memory_limit\\',\\'500M\\');\\n         $new_version = I(\"new_version\") ;\\n@@ -78,6 +80,8 @@ public function download(){\\n \\n     \/\/ \u6267\u884c\u5347\u7ea7\u64cd\u4f5c\uff0c\u5347\u7ea7\u8986\u76d6\u6587\u4ef6\\n     public function updateFiles(){\\n+        $this->checkLogin();\\n+        $this->checkAdmin();\\n         set_time_limit(1000);\\n         ini_set(\\'memory_limit\\',\\'500M\\');'}}",
            "message_norm":"fix security vulnerabilities",
            "language":"ro",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Controller\/AdminUpdateController.class.php'])",
            "num_files":1.0
        },
        {
            "index":269,
            "vuln_id":"GHSA-3j9m-hcv9-rpj8",
            "cwe_id":"{'CWE-79'}",
            "score":6.9,
            "chain":"{'https:\/\/github.com\/grafana\/grafana\/commit\/3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'https:\/\/github.com\/grafana\/grafana\/commit\/fb85ed691290d211a5baa44d9a641ab137f0de88', 'https:\/\/github.com\/grafana\/grafana\/commit\/31b78d51c693d828720a5b285107a50e6024c912'}",
            "dataset":"osv",
            "summary":"XSS vulnerability allowing arbitrary JavaScript execution Today we are releasing Grafana 8.2.3. This patch release includes an important security fix for an issue that affects all Grafana versions from 8.0.0-beta1.\n\n[Grafana Cloud](https:\/\/grafana.com\/cloud) instances have already been patched and an audit did not find any usage of this attack vector. [Grafana Enterprise](https:\/\/grafana.com\/products\/enterprise) customers were provided with updated binaries under embargo.\n\n## CVE-2021-41174 XSS vulnerability on unauthenticated pages\n\n### Summary\n\nCVSS Score: 6.9 Medium\nCVSS:[CVSS:3.0\/AV:N\/AC:H\/PR:N\/UI:R\/S:C\/C:L\/I:H\/A:N\/E:U\/RL:O\/RC:R\/CR:L\/MAV:N\/MAC:H\/MPR:N\/MUI:R\/MS:C\/MC:N\/MI:H\/MA:L](https:\/\/www.first.org\/cvss\/calculator\/3.0#CVSS:3.0\/AV:N\/AC:H\/PR:N\/UI:R\/S:C\/C:L\/I:H\/A:N\/E:U\/RL:O\/RC:R\/CR:L\/MAV:N\/MAC:H\/MPR:N\/MUI:R\/MS:C\/MC:N\/MI:H\/MA:L)\n\nWe received a security report to security@grafana.com on 2021-10-21 about a vulnerability in Grafana regarding the XSS vulnerability.\n\nIt was later identified as affecting Grafana versions from 8.0.0-beta1 to 8.2.2. [CVE-2021-41174](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2021-41174) has been assigned to this vulnerability.\n\n### Impact\n\nIf an attacker is able to convince a victim to visit a URL referencing a vulnerable page, arbitrary JavaScript content may be executed within the context of the victim's browser.\n\nThe user visiting the malicious link must be unauthenticated and the link must be for a page that contains the login button in the menu bar.\n\nThere are two ways an unauthenticated user can open a page in Grafana that contains the login button:\n- Anonymous authentication is enabled. This means all pages in Grafana would be open for the attack.\n- The link is to an unauthenticated page. The following pages are vulnerable:\n  - `\/dashboard-solo\/snapshot\/*`\n  - `\/dashboard\/snapshot\/*`\n  - `\/invite\/:code`\n\nThe url has to be crafted to exploit AngularJS rendering and contain the interpolation binding for AngularJS expressions. AngularJS uses double curly braces for interpolation binding: {{ }} \n\nAn example of an expression would be: `{{constructor.constructor(\u2018alert(1)\u2019)()}}`. This can be included in the link URL like this: \n\nhttps:\/\/play.grafana.org\/dashboard\/snapshot\/%7B%7Bconstructor.constructor('alert(1)')()%7D%7D?orgId=1\n\nWhen the user follows the link and the page renders, the login button will contain the original link with a query parameter to force a redirect to the login page. The URL is not validated and the AngularJS rendering engine will execute the JavaScript expression contained in the URL.\n\n### Attack audit\n\nWe can not guarantee that the below will identify all attacks, so if you find something using the audit process described below, you should consider doing a full assessment.\n\n#### Through reverse proxy\/load balancer logs\n\nTo determine if your Grafana installation has been exploited for this vulnerability, search through your reverse proxy\/load balancer access logs for instances where the path contains `{{` followed by something that would invoke JavaScript code. For example, this could be code that attempts to show a fake login page or to steal browser or session data. The [OWASP cheat sheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/XSS_Filter_Evasion_Cheat_Sheet.html) has several examples of XSS attacks.\n\n#### Through the Grafana Enterprise audit feature\n\nIf you enabled \u201cLog web requests\u201d in your configuration with `router_logging = true`, look for requests where `path` contains `{{` followed by something that would invoke JavaScript code.\n\n### Patched versions\n\nRelease 8.2.3:\n\n- [Download Grafana 8.2.3](https:\/\/grafana.com\/grafana\/download\/8.2.3)\n- [Release notes](https:\/\/grafana.com\/docs\/grafana\/latest\/release-notes\/release-notes-8-2-3\/)\n\n### Solutions and mitigations\n\nDownload and install the appropriate patch for your version of Grafana.\n\n[Grafana Cloud](https:\/\/grafana.com\/cloud) instances have already been patched, and [Grafana Enterprise](https:\/\/grafana.com\/products\/enterprise) customers were provided with updated binaries under embargo.\n\n### Workaround\n\nIf for some reason you cannot upgrade, you can use a reverse proxy or similar to block access to block the literal string `{{` in the path.\n\nExample of an Nginx rule to block the literal string `{{`:\n\n```\nlocation ~ \\{\\{ {\n    deny all;\n}\n```\n### Timeline and postmortem\n\nHere is a detailed timeline starting from when we originally learned of the issue. All times in UTC. \n\n* 2021-10-21 23:13: Security researcher sends the initial report about an XSS vulnerability.\n* 2021-10-21 23:13: Confirmed to be reproducible in at least versions 8.0.5 and 8.2.2.\n* 2021-10-22 02:02 MEDIUM severity declared.\n* 2021-10-22 09:22: it is discovered that Grafana instances with anonymous auth turned on are vulnerable. This includes https:\/\/play.grafana.org\/ .\n* 2021-10-22 09:50: Anonymous access disabled for all instances on Grafana Cloud as a mitigation measure.\n* 2021-10-22 11:15: Workaround deployed on Grafana Cloud that blocks malicious requests.\n* 2021-10-22 12:35: Enabled anonymous access for instances on Grafana Cloud. \n* 2021-10-22 12:51: All instances protected by the workaround. From this point forward, Grafana Cloud is no longer affected.\n* 2021-10-22 14:05 Grafana Cloud instances updated with a fix.\n* 2021-10-22 19:23 :Determination that no weekend work is needed as the issue is of MEDIUM severity and the root cause has been identified.\n* 2021-10-25 14:13: Audit of Grafana Cloud concluded, no evidence of exploitation.\n* 2021-10-27 12:00: Grafana Enterprise images released to customers under embargo.\n* 2021-11-03 12:00: Public release.\n\n## Reporting security issues\n\nIf you think you have found a security vulnerability, please send a report to [security@grafana.com](mailto:security@grafana.com). This address can be used for all of\nGrafana Labs' open source and commercial products (including but not limited to Grafana, Tempo, Loki, k6, Tanka, and  Grafana Cloud, Grafana Enterprise, and grafana.com). We only accept vulnerability reports at this address. We would prefer that you encrypt your message to us using our PGP key. The key fingerprint is:\n\nF988 7BEA 027A 049F AE8E  5CAA D125 8932 BE24 C5CA\n\nThe key is available from [ keyserver.ubuntu.com]( https:\/\/keyserver.ubuntu.com\/pks\/lookup?op=get&fingerprint=on&search=0xD1258932BE24C5CA) by searching for [security@grafana]( https:\/\/keyserver.ubuntu.com\/pks\/lookup?search=security@grafana&fingerprint=on&op=index).\n\n## Security announcements\n\nThere is a Security [category](https:\/\/grafana.com\/tags\/security\/) on the Grafana blog where we will post a summary, remediation, and mitigation details for any patch containing security fixes and you can subscribe to updates from our [Security Announcements RSS feed](https:\/\/grafana.com\/tags\/security\/index.xml).",
            "published_date":"2021-11-08",
            "chain_len":3,
            "project":"https:\/\/github.com\/grafana\/grafana",
            "commit_href":"https:\/\/github.com\/grafana\/grafana\/commit\/fb85ed691290d211a5baa44d9a641ab137f0de88",
            "commit_sha":"fb85ed691290d211a5baa44d9a641ab137f0de88",
            "patch":"MULTI",
            "chain_ord":"['31b78d51c693d828720a5b285107a50e6024c912', '3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'fb85ed691290d211a5baa44d9a641ab137f0de88']",
            "before_first_fix_commit":"{'3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'a3dc30546fce2e437d858c140f1ff307a04365d6'}",
            "last_fix_commit":"fb85ed691290d211a5baa44d9a641ab137f0de88",
            "chain_ord_pos":3.0,
            "commit_datetime":"10\/25\/2021, 07:45:05",
            "message":"Merge pull request #147 from grafana\/axelav\/sanitized-nav-links-8-2-3\n\nSanitized NavBar children links to remove angular interpolation v8.2.3",
            "author":"Oscar Kilhed",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 3, 'total': 8}",
            "files":"{'public\/app\/core\/components\/NavBar\/DropdownChild.tsx': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/grafana\/grafana\/raw\/fb85ed691290d211a5baa44d9a641ab137f0de88\/public%2Fapp%2Fcore%2Fcomponents%2FNavBar%2FDropdownChild.tsx', 'patch': '@@ -1,6 +1,6 @@\\n import React from \\'react\\';\\n import { css } from \\'@emotion\/css\\';\\n-import { GrafanaTheme2 } from \\'@grafana\/data\\';\\n+import { GrafanaTheme2, textUtil } from \\'@grafana\/data\\';\\n import { Icon, IconName, Link, useTheme2 } from \\'@grafana\/ui\\';\\n \\n export interface Props {\\n@@ -29,13 +29,15 @@ const DropdownChild = ({ isDivider = false, icon, onClick, target, text, url }:\\n     <\/button>\\n   );\\n   if (url) {\\n+    const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url);\\n+\\n     element =\\n       !target && url.startsWith(\\'\/\\') ? (\\n-        <Link className={styles.element} onClick={onClick} href={url}>\\n+        <Link className={styles.element} onClick={onClick} href={sanitizedUrl}>\\n           {linkContent}\\n         <\/Link>\\n       ) : (\\n-        <a className={styles.element} href={url} target={target} rel=\"noopener\" onClick={onClick}>\\n+        <a className={styles.element} href={sanitizedUrl} target={target} rel=\"noopener\" onClick={onClick}>\\n           {linkContent}\\n         <\/a>\\n       );'}}",
            "message_norm":"merge pull request #147 from grafana\/axelav\/sanitized-nav-links-8-2-3\n\nsanitized navbar children links to remove angular interpolation v8.2.3",
            "language":"en",
            "entities":"[('#147', 'ISSUE', ''), ('sanitized', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('remove', 'ACTION', ''), ('v8.2.3', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['public\/app\/core\/components\/NavBar\/DropdownChild.tsx'])",
            "num_files":1.0
        },
        {
            "index":1415,
            "vuln_id":"GHSA-9px9-73fg-3fqp",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/045deec1cbdebb27d817008ad5df94d96a08b1bf', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in Grappler's `IsConstant` ### Impact\nUnder certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):\n\nFirst, during [constant folding](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:\n\n```cc\n  NodeDef* mul_left_child = node_map_->GetNode(node->input(0));\n  NodeDef* mul_right_child = node_map_->GetNode(node->input(1));\n  \/\/ One child must be constant, and the second must be Conv op.\n  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\n  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);\n```\n\nIf a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.\n\nWe have a similar issue during [`IsIdentityConsumingSwitch`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/mutable_graph_view.cc#L59-L74):\n\n```cc\n  NodeDef* input_node = graph.GetNode(tensor_id.node());\n  return IsSwitch(*input_node);\n```\n\n### Patches\nWe have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/045deec1cbdebb27d817008ad5df94d96a08b1bf).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/045deec1cbdebb27d817008ad5df94d96a08b1bf",
            "commit_sha":"045deec1cbdebb27d817008ad5df94d96a08b1bf",
            "patch":"MULTI",
            "chain_ord":"['0a365c029e437be0349c31f8d4c9926b69fa3fa1', '045deec1cbdebb27d817008ad5df94d96a08b1bf']",
            "before_first_fix_commit":"{'0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
            "last_fix_commit":"045deec1cbdebb27d817008ad5df94d96a08b1bf",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/13\/2021, 18:12:22",
            "message":"Prevent null pointer dereference in `mutable_graph_view`\n\nPiperOrigin-RevId: 409684472\nChange-Id: I577eb9d9ac470fcec0501423171e739a4ec0cb5c",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/grappler\/mutable_graph_view.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/045deec1cbdebb27d817008ad5df94d96a08b1bf\/tensorflow%2Fcore%2Fgrappler%2Fmutable_graph_view.cc', 'patch': '@@ -68,6 +68,9 @@ bool IsIdentityConsumingSwitch(const MutableGraphView& graph,\\n     }\\n \\n     NodeDef* input_node = graph.GetNode(tensor_id.node());\\n+    if (input_node == nullptr) {\\n+      return false;\\n+    }\\n     return IsSwitch(*input_node);\\n   }\\n   return false;'}}",
            "message_norm":"prevent null pointer dereference in `mutable_graph_view`\n\npiperorigin-revid: 409684472\nchange-id: i577eb9d9ac470fcec0501423171e739a4ec0cb5c",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('409684472', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/mutable_graph_view.cc'])",
            "num_files":1.0
        },
        {
            "index":683,
            "vuln_id":"GHSA-5qw5-89mw-wcg2",
            "cwe_id":"{'CWE-787'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/97282c6d0d34476b6ba033f961590b783fa184cd'}",
            "dataset":"osv",
            "summary":"Out of bounds write in Tensorflow ### Impact\nTensorFlow is vulnerable to a heap OOB write in [Grappler](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/costs\/graph_properties.cc#L1132-L1141):\n\n```cc\nStatus SetUnknownShape(const NodeDef* node, int output_port) {\n  shape_inference::ShapeHandle shape = \n      GetUnknownOutputShape(node, output_port);\n  InferenceContext* ctx = GetContext(node);\n  if (ctx == nullptr) {\n    return errors::InvalidArgument(\"Missing context\");\n  }\n  ctx->set_output(output_port, shape);\n  return Status::OK();\n}\n```\n\nThe [`set_output`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/shape_inference.h#L394) function writes to an array at the specified index:\n\n```cc\nvoid set_output(int idx, ShapeHandle shape) { outputs_.at(idx) = shape; }\n```\n\nHence, this gives a malicious user a write primitive.\n\n### Patches\nWe have patched the issue in GitHub commit [97282c6d0d34476b6ba033f961590b783fa184cd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/97282c6d0d34476b6ba033f961590b783fa184cd).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/97282c6d0d34476b6ba033f961590b783fa184cd",
            "commit_sha":"97282c6d0d34476b6ba033f961590b783fa184cd",
            "patch":"SINGLE",
            "chain_ord":"['97282c6d0d34476b6ba033f961590b783fa184cd']",
            "before_first_fix_commit":"{'557a09455bc98108bc29b3b78e818f9d7dca920f'}",
            "last_fix_commit":"97282c6d0d34476b6ba033f961590b783fa184cd",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/08\/2021, 13:48:40",
            "message":"Prevent a crash due to heap OOB write in grappler.\n\nPiperOrigin-RevId: 408318417\nChange-Id: If095feb8c001e3a8ac4a85b7387b81e8309df47d",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'tensorflow\/core\/grappler\/costs\/graph_properties.cc': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/97282c6d0d34476b6ba033f961590b783fa184cd\/tensorflow%2Fcore%2Fgrappler%2Fcosts%2Fgraph_properties.cc', 'patch': '@@ -1134,7 +1134,12 @@ class SymbolicShapeRefiner {\\n         GetUnknownOutputShape(node, output_port);\\n     InferenceContext* ctx = GetContext(node);\\n     if (ctx == nullptr) {\\n-      return errors::InvalidArgument(\"Missing context\");\\n+      return errors::InvalidArgument(\"SetUnknownShape: Missing context\");\\n+    }\\n+    if (output_port < 0 || output_port >= ctx->num_outputs()) {\\n+      return errors::InvalidArgument(\\n+          \"SetUnknownShape: output_port must be in [0, \", ctx->num_outputs(),\\n+          \") but was \", output_port);\\n     }\\n     ctx->set_output(output_port, shape);\\n     return Status::OK();'}}",
            "message_norm":"prevent a crash due to heap oob write in grappler.\n\npiperorigin-revid: 408318417\nchange-id: if095feb8c001e3a8ac4a85b7387b81e8309df47d",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('408318417', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/costs\/graph_properties.cc'])",
            "num_files":1.0
        },
        {
            "index":309,
            "vuln_id":"GHSA-3r95-23jp-mhvg",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/TYPO3\/typo3\/commit\/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in TYPO3's Form Framework > ### Meta\n> * CVSS: `CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:R\/S:C\/C:L\/I:L\/A:N\/E:F\/RL:O\/RC:C` (4.9)\n\n### Problem\nIt has been discovered that the Form Designer backend module of the Form Framework is vulnerable to cross-site scripting. A valid backend user account with access to the form module is needed to exploit this vulnerability.\n\n### Solution\nUpdate to TYPO3 versions 8.7.47 ELTS, 9.5.35 ELTS, 10.4.29, 11.5.11 that fix the problem described above.\n\n### Credits\nThanks to Gabe Troyan who reported and fixed the issue.\n\n### References\n* [TYPO3-CORE-SA-2022-003](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2022-003)",
            "published_date":"2022-06-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/TYPO3\/typo3",
            "commit_href":"https:\/\/github.com\/TYPO3\/typo3\/commit\/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0",
            "commit_sha":"6f2554dc4ea0b670fd5599c54fd788d4db96c4a0",
            "patch":"SINGLE",
            "chain_ord":"['6f2554dc4ea0b670fd5599c54fd788d4db96c4a0']",
            "before_first_fix_commit":"{'c93ea692e7dfef03b7c50fe5437487545bee4d6a'}",
            "last_fix_commit":"6f2554dc4ea0b670fd5599c54fd788d4db96c4a0",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/14\/2022, 07:17:30",
            "message":"[SECURITY] Ensure text preview of multivalue items in form editor\n\nMultivalue items in the form editor user interface were previewed\nas HTML, but should be treated as scalar text only.\n\nResolves: #96743\nReleases: main, 11.5, 10.4\nChange-Id: I5e8dab26119490ecf19ac5d48c2bc7a5a00daaad\nSecurity-Bulletin: TYPO3-CORE-SA-2022-003\nSecurity-References: CVE-2022-31048\nReviewed-on: https:\/\/review.typo3.org\/c\/Packages\/TYPO3.CMS\/+\/73297\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
            "author":"Gabe Troyan",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'typo3\/sysext\/form\/Resources\/Public\/JavaScript\/backend\/form-editor\/stage-component.js': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TYPO3\/typo3\/raw\/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0\/typo3%2Fsysext%2Fform%2FResources%2FPublic%2FJavaScript%2Fbackend%2Fform-editor%2Fstage-component.js', 'patch': \"@@ -513,10 +513,10 @@ function factory($, Helper, Icons) {\\n      *\/\\n     function setStageHeadline(title) {\\n       if (getUtility().isUndefinedOrNull(title)) {\\n-        title = buildTitleByFormElement();\\n+        title = buildTitleByFormElement().text();\\n       }\\n \\n-      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).html(title);\\n+      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).text(title);\\n     };\\n \\n     \/**\\n@@ -981,10 +981,10 @@ function factory($, Helper, Icons) {\\n \\n       getHelper()\\n         .getTemplatePropertyDomElement('_type', template)\\n-        .append(getFormElementDefinition(formElement, 'label'));\\n+        .append(document.createTextNode(getFormElementDefinition(formElement, 'label')));\\n       getHelper()\\n         .getTemplatePropertyDomElement('_identifier', template)\\n-        .append(formElement.get('identifier'));\\n+        .append(document.createTextNode(formElement.get('identifier')));\\n     };\\n \\n     \/**\\n@@ -1029,7 +1029,7 @@ function factory($, Helper, Icons) {\\n \\n             getHelper()\\n               .getTemplatePropertyDomElement('_label', rowTemplate)\\n-              .append(collectionElementConfiguration['label']);\\n+              .append(document.createTextNode(collectionElementConfiguration['label']));\\n             $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))\\n               .append(rowTemplate.html());\\n           }\\n@@ -1089,7 +1089,7 @@ function factory($, Helper, Icons) {\\n           }\\n         }\\n \\n-        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(label);\\n+        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(document.createTextNode(label));\\n \\n         if (isPreselected) {\\n           getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(\"}}",
            "message_norm":"[security] ensure text preview of multivalue items in form editor\n\nmultivalue items in the form editor user interface were previewed\nas html, but should be treated as scalar text only.\n\nresolves: #96743\nreleases: main, 11.5, 10.4\nchange-id: i5e8dab26119490ecf19ac5d48c2bc7a5a00daaad\nsecurity-bulletin: typo3-core-sa-2022-003\nsecurity-references: cve-2022-31048\nreviewed-on: https:\/\/review.typo3.org\/c\/packages\/typo3.cms\/+\/73297\ntested-by: oliver hader <oliver.hader@typo3.org>\nreviewed-by: oliver hader <oliver.hader@typo3.org>",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('#96743', 'ISSUE', ''), ('security', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cve-2022-31048', 'VULNID', 'CVE'), ('https:\/\/review.typo3.org\/c\/packages\/typo3.cms\/+\/73297', 'URL', ''), ('oliver.hader@typo3.org', 'EMAIL', ''), ('oliver.hader@typo3.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['typo3\/sysext\/form\/Resources\/Public\/JavaScript\/backend\/form-editor\/stage-component.js'])",
            "num_files":1.0
        },
        {
            "index":927,
            "vuln_id":"GHSA-72p8-v4hg-v45p",
            "cwe_id":"{'CWE-330', 'CWE-338'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/sshnet\/SSH.NET\/commit\/03c6d60736b8f7b42e44d6989a53f9b644a091fb', 'https:\/\/github.com\/sshnet\/SSH.NET\/commit\/f1f273cf349532b9d41c1de51d3b83a9accedc88'}",
            "dataset":"osv",
            "summary":"Weak private key generation in SSH.NET During an **X25519** key exchange, the client\u2019s private is generated with [**System.Random**](https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.random):\n\n```cs\nvar rnd = new Random();\n_privateKey = new byte[MontgomeryCurve25519.PrivateKeySizeInBytes];\nrnd.NextBytes(_privateKey);\n```\n\nSource: [KeyExchangeECCurve25519.cs](https:\/\/github.com\/sshnet\/SSH.NET\/blob\/bc99ada7da3f05f50d9379f2644941d91d5bf05a\/src\/Renci.SshNet\/Security\/KeyExchangeECCurve25519.cs#L51)  \nSource commit: https:\/\/github.com\/sshnet\/SSH.NET\/commit\/b58a11c0da55da1f5bad46faad2e9b71b7cb35b3\n\n[**System.Random**](https:\/\/docs.microsoft.com\/en-us\/dotnet\/api\/system.random) is not a cryptographically secure random number generator, it must therefore not be used for cryptographic purposes.\n\n### Impact\nWhen establishing an SSH connection to a remote host, during the X25519 key exchange, the private key is generated with\na weak random number generator whose seed can be bruteforced. This allows an attacker able to eavesdrop the\ncommunications to decrypt them.\n\n### Workarounds\nTo ensure you're not affected by this vulnerability, you can disable support for `curve25519-sha256` and `curve25519-sha256@libssh.org` key exchange algorithms by invoking the following method before a connection is established:\n```cs\nprivate static void RemoveUnsecureKEX(BaseClient client)\n{\n    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(\"curve25519-sha256\");\n    client.ConnectionInfo.KeyExchangeAlgorithms.Remove(\"curve25519-sha256@libssh.org\");\n}\n```\n\n### Thanks\n\nThis issue was initially reported by **Siemens AG, Digital Industries**, shortly followed by @yaumn-synacktiv.",
            "published_date":"2022-06-01",
            "chain_len":2,
            "project":"https:\/\/github.com\/sshnet\/SSH.NET",
            "commit_href":"https:\/\/github.com\/sshnet\/SSH.NET\/commit\/03c6d60736b8f7b42e44d6989a53f9b644a091fb",
            "commit_sha":"03c6d60736b8f7b42e44d6989a53f9b644a091fb",
            "patch":"MULTI",
            "chain_ord":"['f1f273cf349532b9d41c1de51d3b83a9accedc88', '03c6d60736b8f7b42e44d6989a53f9b644a091fb']",
            "before_first_fix_commit":"{'cad943343b4c7ea55975a3033ef1cd0646b6b9d7'}",
            "last_fix_commit":"03c6d60736b8f7b42e44d6989a53f9b644a091fb",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/29\/2022, 14:58:07",
            "message":"Use cryptographically secure random number generator.\nFixes CVE-2022-29245.",
            "author":"drieseng",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 3, 'total': 4}",
            "files":"{'src\/Renci.SshNet\/Security\/KeyExchangeECCurve25519.cs': {'additions': 1, 'deletions': 3, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sshnet\/SSH.NET\/raw\/03c6d60736b8f7b42e44d6989a53f9b644a091fb\/src%2FRenci.SshNet%2FSecurity%2FKeyExchangeECCurve25519.cs', 'patch': '@@ -46,9 +46,7 @@ public override void Start(Session session, KeyExchangeInitMessage message)\\n             var basepoint = new byte[MontgomeryCurve25519.PublicKeySizeInBytes];\\n             basepoint[0] = 9;\\n \\n-            var rnd = new Random();\\n-            _privateKey = new byte[MontgomeryCurve25519.PrivateKeySizeInBytes];\\n-            rnd.NextBytes(_privateKey);\\n+            _privateKey = CryptoAbstraction.GenerateRandom(MontgomeryCurve25519.PrivateKeySizeInBytes);\\n \\n             _clientExchangeValue = new byte[MontgomeryCurve25519.PublicKeySizeInBytes];\\n             MontgomeryOperations.scalarmult(_clientExchangeValue, 0, _privateKey, 0, basepoint, 0);'}}",
            "message_norm":"use cryptographically secure random number generator.\nfixes cve-2022-29245.",
            "language":"en",
            "entities":"[('cryptographically', 'SECWORD', ''), ('secure', 'SECWORD', ''), ('cve-2022-29245', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Renci.SshNet\/Security\/KeyExchangeECCurve25519.cs'])",
            "num_files":1.0
        },
        {
            "index":2811,
            "vuln_id":"GHSA-qr82-2c78-4m8h",
            "cwe_id":"{'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in map operations ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  memory_limit=128)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac).\n                       \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac",
            "commit_sha":"532f5c5a547126c634fefd43bbad1dc6417678ac",
            "patch":"SINGLE",
            "chain_ord":"['532f5c5a547126c634fefd43bbad1dc6417678ac']",
            "before_first_fix_commit":"{'a4e138660270e7599793fa438cd7b2fc2ce215a6'}",
            "last_fix_commit":"532f5c5a547126c634fefd43bbad1dc6417678ac",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:24:39",
            "message":"Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/map_stage_op.cc': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/532f5c5a547126c634fefd43bbad1dc6417678ac\/tensorflow%2Fcore%2Fkernels%2Fmap_stage_op.cc', 'patch': '@@ -210,25 +210,28 @@ class StagingMap : public ResourceBase {\\n                                    const OptionalTuple& tuple)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (tuple[index].has_value()) {\\n-      return Status(errors::InvalidArgument(\\n+      return errors::InvalidArgument(\\n           \"The tensor for index \\'\", index, \"\\' for key \\'\", key.scalar<int64>()(),\\n-          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\"));\\n+          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\");\\n     }\\n \\n     return Status::OK();\\n   }\\n \\n   \/\/ Check that the indices are strictly ordered\\n   Status check_index_ordering(const Tensor& indices) {\\n+    if (indices.NumElements() == 0) {\\n+      return errors::InvalidArgument(\"Indices are empty\");\\n+    }\\n+\\n     auto findices = indices.flat<int>();\\n \\n     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {\\n       if (findices(i) < findices(i + 1)) {\\n         continue;\\n       }\\n \\n-      return Status(\\n-          errors::InvalidArgument(\"Indices are not strictly ordered\"));\\n+      return errors::InvalidArgument(\"Indices are not strictly ordered\");\\n     }\\n \\n     return Status::OK();\\n@@ -238,10 +241,10 @@ class StagingMap : public ResourceBase {\\n   Status check_memory_limit(std::size_t bytes)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (has_memory_limit() && bytes > memory_limit_) {\\n-      return Status(errors::ResourceExhausted(\\n+      return errors::ResourceExhausted(\\n           \"Attempted to insert tensors with combined size of \\'\", bytes,\\n           \"\\' bytes into Staging Area with a memory limit of \\'\", memory_limit_,\\n-          \"\\'.\"));\\n+          \"\\'.\");\\n     }\\n \\n     return Status::OK();'}}",
            "message_norm":"prevent nullptr deref in validation of indexes in map ops.\n\npiperorigin-revid: 387738023\nchange-id: i83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('387738023', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/map_stage_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1314,
            "vuln_id":"GHSA-94qw-r73x-j7hg",
            "cwe_id":"{'CWE-285'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/opencast\/opencast\/commit\/72fad0031d8a82c860e2bde0b27570c5042320ee'}",
            "dataset":"osv",
            "summary":"Users with ROLE_COURSE_ADMIN can create new users in Opencast ### Impact\n\nUsers with the role `ROLE_COURSE_ADMIN` can use the user-utils endpoint to create new users not including the role `ROLE_ADMIN`. For example:\n\n```bash\n# Use the admin to create a new user with ROLE_COURSE_ADMIN using the admin user.\n# We expect this to work.\n% curl -i -u admin:opencast 'https:\/\/example.opencast.org\/user-utils\/xy.json' -X PUT \\\n  --data 'password=f&roles=%5B%22ROLE_COURSE_ADMIN%22%5D'\nHTTP\/2 201\n\n# Use the new user to create more new users.\n# We don't exp\u00fcect a user with just role ROLE_COURSE_ADMIN to succeed.\n# But it does work\n% curl -i -u xy:f 'https:\/\/example.opencast.org\/user-utils\/ab.json' -X PUT \\\n  --data 'password=f&roles=%5B%22ROLE_COURSE_ADMIN%22%5D'\nHTTP\/2 201\n```\n`ROLE_COURSE_ADMIN` is a non-standard role in Opencast which is referenced neither in the documentation nor in any code (except for tests) but only in the security configuration. From the name \u2013 implying an admin for a specific course \u2013 users would never expect that this role allows user creation.\n\n### Patches\n\nThis issue is fixed in 7.6 and 8.1 which both ship a new default security configuration.\n\n### Workarounds\n\nYou can fix this issue by removing all instances of `ROLE_COURSE_ADMIN` in your organization's security configuration (`etc\/security\/mh_default_org.xml` by default).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open an issue in [opencast\/opencast](https:\/\/github.com\/opencast\/opencast\/issues)\n- For security-relevant information, email us at security@opencast.org",
            "published_date":"2020-01-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencast\/opencast",
            "commit_href":"https:\/\/github.com\/opencast\/opencast\/commit\/72fad0031d8a82c860e2bde0b27570c5042320ee",
            "commit_sha":"72fad0031d8a82c860e2bde0b27570c5042320ee",
            "patch":"SINGLE",
            "chain_ord":"['72fad0031d8a82c860e2bde0b27570c5042320ee']",
            "before_first_fix_commit":"{'b157e1fb3b35991ca7bf59f0730329fbe7ce82e8'}",
            "last_fix_commit":"72fad0031d8a82c860e2bde0b27570c5042320ee",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/16\/2020, 15:40:23",
            "message":"Remove ROLE_COURSE_ADMIN\n\nUsers with the role `ROLE_COURSE_ADMIN` can use the user-utils endpoint\nto create new users not including the role ROLE_ADMIN. For example:\n\n```sh\n% curl -i -u admin:opencast 'https:\/\/example.opencast.org\/user-utils\/xy.json' -X PUT \\\n  --data 'password=f&roles=%5B%22ROLE_COURSE_ADMIN%22%5D'\nHTTP\/2 201\n\n% curl -i -u xy:f 'https:\/\/example.opencast.org\/user-utils\/ab.json' -X PUT \\\n  --data 'password=f&roles=%5B%22ROLE_COURSE_ADMIN%22%5D'\nHTTP\/2 201\n```\n\n`ROLE_COURSE_ADMIN` is a non-standard role in Opencast which is\nreferenced neither in the documentation nor in any code (except for\ntests) but only in the security configuration. From the name \u2013 implying\nan admin for a specific course \u2013 users would never expect that this role\nallows user creation.\n\nThis patch fixes the problem by dropping the default access rules for\n`ROLE_COURSE_ADMIN`. Users which use and need this custom role can\neasily configure this specific to their needs. There is no reason to\nship this by default.",
            "author":"Lars Kiesow",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'etc\/security\/mh_default_org.xml': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencast\/opencast\/raw\/72fad0031d8a82c860e2bde0b27570c5042320ee\/etc%2Fsecurity%2Fmh_default_org.xml', 'patch': '@@ -297,11 +297,11 @@\\n     <sec:intercept-url pattern=\"\/transcripts\/watson\/results*\" method=\"POST\" access=\"ROLE_ANONYMOUS\" \/>\\n \\n     <!-- Everything else is for the admin users -->\\n-    <sec:intercept-url pattern=\"\/admin-ng\" method=\"GET\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI, ROLE_COURSE_ADMIN\" \/>\\n-    <sec:intercept-url pattern=\"\/admin-ng\/\" method=\"GET\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI, ROLE_COURSE_ADMIN\" \/>\\n-    <sec:intercept-url pattern=\"\/admin-ng\/index.html\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI, ROLE_COURSE_ADMIN\" \/>\\n-    <sec:intercept-url pattern=\"\/index.html\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI, ROLE_COURSE_ADMIN\" \/>\\n-    <sec:intercept-url pattern=\"\/**\" access=\"ROLE_ADMIN, ROLE_COURSE_ADMIN\" \/>\\n+    <sec:intercept-url pattern=\"\/admin-ng\" method=\"GET\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI\" \/>\\n+    <sec:intercept-url pattern=\"\/admin-ng\/\" method=\"GET\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI\" \/>\\n+    <sec:intercept-url pattern=\"\/admin-ng\/index.html\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI\" \/>\\n+    <sec:intercept-url pattern=\"\/index.html\" access=\"ROLE_ADMIN, ROLE_ADMIN_UI\" \/>\\n+    <sec:intercept-url pattern=\"\/**\" access=\"ROLE_ADMIN\" \/>\\n \\n     <!-- ############################# -->\\n     <!-- # LOGIN \/ LOGOUT MECHANISMS # -->'}}",
            "message_norm":"remove role_course_admin\n\nusers with the role `role_course_admin` can use the user-utils endpoint\nto create new users not including the role role_admin. for example:\n\n```sh\n% curl -i -u admin:opencast 'https:\/\/example.opencast.org\/user-utils\/xy.json' -x put \\\n  --data 'password=f&roles=%5b%22role_course_admin%22%5d'\nhttp\/2 201\n\n% curl -i -u xy:f 'https:\/\/example.opencast.org\/user-utils\/ab.json' -x put \\\n  --data 'password=f&roles=%5b%22role_course_admin%22%5d'\nhttp\/2 201\n```\n\n`role_course_admin` is a non-standard role in opencast which is\nreferenced neither in the documentation nor in any code (except for\ntests) but only in the security configuration. from the name \u2013 implying\nan admin for a specific course \u2013 users would never expect that this role\nallows user creation.\n\nthis patch fixes the problem by dropping the default access rules for\n`role_course_admin`. users which use and need this custom role can\neasily configure this specific to their needs. there is no reason to\nship this by default.",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('role_course_admin', 'SECWORD', ''), ('role_course_admin', 'SECWORD', ''), ('role_admin', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('https:\/\/example.opencast.org\/user-utils\/xy.json', 'URL', ''), ('password', 'SECWORD', ''), ('f&roles=%5b%22role_course_admin%22%5d', 'SECWORD', ''), ('https:\/\/example.opencast.org\/user-utils\/ab.json', 'URL', ''), ('password', 'SECWORD', ''), ('f&roles=%5b%22role_course_admin%22%5d', 'SECWORD', ''), ('role_course_admin', 'SECWORD', ''), ('security', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('problem', 'FLAW', ''), ('role_course_admin', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['etc\/security\/mh_default_org.xml'])",
            "num_files":1.0
        },
        {
            "index":2760,
            "vuln_id":"GHSA-qhmp-h54x-38qr",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/caronc\/apprise\/commit\/e20fce630d55e4ca9b0a1e325a5fea6997489831'}",
            "dataset":"osv",
            "summary":"CWE-730 Regex injection with IFTTT Plugin ### Impact\r\nAnyone _publicly_ hosting the Apprise library and granting them access to the IFTTT notification service.\r\n\r\n### Patches\r\nUpdate to Apprise v0.9.5.1\r\n   ```bash\r\n   # Install Apprise v0.9.5.1 from PyPI\r\n   pip install apprise==0.9.5.1\r\n   ```\r\n\r\nThe patch to the problem was performed [here](https:\/\/github.com\/caronc\/apprise\/pull\/436\/files).\r\n\r\n### Workarounds\r\nAlternatively, if upgrading is not an option, you can safely remove the following file:\r\n- `apprise\/plugins\/NotifyIFTTT.py` \r\n\r\nThe above will eliminate the ability to use IFTTT, but everything else will work smoothly.\r\n\r\n### For more information\r\nIf you have any questions or comments about this advisory:\r\n* Open an issue in [Apprise](https:\/\/github.com\/caronc\/apprise\/issues)\r\n* Email me at [lead2gold@gmail.com](mailto:lead2gold@gmail.com)\r\n\r\n### Additional Credit\r\nGithub would not allow me to additionally credit **Rasmus Petersen**, but I would like to put that here at the very least - thank you for finding and reporting this issue along with those already credited\r\n\r\n## Additional Notes:\r\n- Github would not allow me to add\/tag the 2 CWE's this issue is applicable to (only CWE-400).  The other is: CWE-730 (placed in the title)",
            "published_date":"2021-09-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/caronc\/apprise",
            "commit_href":"https:\/\/github.com\/caronc\/apprise\/commit\/e20fce630d55e4ca9b0a1e325a5fea6997489831",
            "commit_sha":"e20fce630d55e4ca9b0a1e325a5fea6997489831",
            "patch":"SINGLE",
            "chain_ord":"['e20fce630d55e4ca9b0a1e325a5fea6997489831']",
            "before_first_fix_commit":"{'81d1ea72bcee4441278a809a95fc0f91dc916402'}",
            "last_fix_commit":"e20fce630d55e4ca9b0a1e325a5fea6997489831",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/06\/2021, 17:51:32",
            "message":"Slight bulletproofing to IFTTT regex handling (#436)",
            "author":"Chris Caron",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'apprise\/plugins\/NotifyIFTTT.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/caronc\/apprise\/raw\/e20fce630d55e4ca9b0a1e325a5fea6997489831\/apprise%2Fplugins%2FNotifyIFTTT.py', 'patch': \"@@ -355,7 +355,7 @@ def parse_native_url(url):\\n         result = re.match(\\n             r'^https?:\/\/maker\\\\.ifttt\\\\.com\/use\/'\\n             r'(?P<webhook_id>[A-Z0-9_-]+)'\\n-            r'\/?(?P<events>([A-Z0-9_-]+\/?)+)?'\\n+            r'((?P<events>(\/[A-Z0-9_-]+)+))?'\\n             r'\/?(?P<params>\\\\?.+)?$', url, re.I)\\n \\n         if result:\"}}",
            "message_norm":"slight bulletproofing to ifttt regex handling (#436)",
            "language":"no",
            "entities":"[('#436', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['apprise\/plugins\/NotifyIFTTT.py'])",
            "num_files":1.0
        },
        {
            "index":1216,
            "vuln_id":"GHSA-8h4j-vm3r-vcq3",
            "cwe_id":"{'CWE-416'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3'}",
            "dataset":"osv",
            "summary":"Use after free in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via an Auxdata API use-after-free.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rusqlite\/rusqlite",
            "commit_href":"https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "commit_sha":"2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "patch":"SINGLE",
            "chain_ord":"['2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3']",
            "before_first_fix_commit":"{'71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0'}",
            "last_fix_commit":"2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2020, 02:41:01",
            "message":"Actually fix auxdata api...",
            "author":"Thom Chiovoloni",
            "comments":null,
            "stats":"{'additions': 54, 'deletions': 65, 'total': 119}",
            "files":"{'src\/functions.rs': {'additions': 54, 'deletions': 65, 'changes': 119, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rusqlite\/rusqlite\/raw\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3\/src%2Ffunctions.rs', 'patch': '@@ -12,6 +12,8 @@\\n \/\/! use regex::Regex;\\n \/\/! use rusqlite::functions::FunctionFlags;\\n \/\/! use rusqlite::{Connection, Error, Result, NO_PARAMS};\\n+\/\/! use std::sync::Arc;\\n+\/\/! type BoxError = Box<dyn std::error::Error + Send + Sync + \\'static>;\\n \/\/!\\n \/\/! fn add_regexp_function(db: &Connection) -> Result<()> {\\n \/\/!     db.create_scalar_function(\\n@@ -20,34 +22,19 @@\\n \/\/!         FunctionFlags::SQLITE_UTF8 | FunctionFlags::SQLITE_DETERMINISTIC,\\n \/\/!         move |ctx| {\\n \/\/!             assert_eq!(ctx.len(), 2, \"called with unexpected number of arguments\");\\n-\/\/!\\n-\/\/!             let saved_re: Option<&Regex> = ctx.get_aux(0)?;\\n-\/\/!             let new_re = match saved_re {\\n-\/\/!                 None => {\\n-\/\/!                     let s = ctx.get::<String>(0)?;\\n-\/\/!                     match Regex::new(&s) {\\n-\/\/!                         Ok(r) => Some(r),\\n-\/\/!                         Err(err) => return Err(Error::UserFunctionError(Box::new(err))),\\n-\/\/!                     }\\n-\/\/!                 }\\n-\/\/!                 Some(_) => None,\\n-\/\/!             };\\n-\/\/!\\n+\/\/!             let regexp: Arc<Regex> = ctx\\n+\/\/!                 .get_or_create_aux(0, |vr| -> Result<_, BoxError> {\\n+\/\/!                     Ok(Regex::new(vr.as_str()?)?)\\n+\/\/!                 })?;\\n \/\/!             let is_match = {\\n-\/\/!                 let re = saved_re.unwrap_or_else(|| new_re.as_ref().unwrap());\\n-\/\/!\\n \/\/!                 let text = ctx\\n \/\/!                     .get_raw(1)\\n \/\/!                     .as_str()\\n \/\/!                     .map_err(|e| Error::UserFunctionError(e.into()))?;\\n \/\/!\\n-\/\/!                 re.is_match(text)\\n+\/\/!                 regexp.is_match(text)\\n \/\/!             };\\n \/\/!\\n-\/\/!             if let Some(re) = new_re {\\n-\/\/!                 ctx.set_aux(0, re);\\n-\/\/!             }\\n-\/\/!\\n \/\/!             Ok(is_match)\\n \/\/!         },\\n \/\/!     )\\n@@ -67,11 +54,12 @@\\n \/\/!     Ok(())\\n \/\/! }\\n \/\/! ```\\n-use std::any::TypeId;\\n+use std::any::Any;\\n use std::os::raw::{c_int, c_void};\\n use std::panic::{catch_unwind, RefUnwindSafe, UnwindSafe};\\n use std::ptr;\\n use std::slice;\\n+use std::sync::Arc;\\n \\n use crate::ffi;\\n use crate::ffi::sqlite3_context;\\n@@ -121,6 +109,7 @@ unsafe extern \"C\" fn free_boxed_value<T>(p: *mut c_void) {\\n pub struct Context<\\'a> {\\n     ctx: *mut sqlite3_context,\\n     args: &\\'a [*mut sqlite3_value],\\n+    \/\/ conn: PhantomData<&\\'conn mut Connection>,\\n }\\n \\n impl Context<\\'_> {\\n@@ -174,47 +163,60 @@ impl Context<\\'_> {\\n         unsafe { ValueRef::from_value(arg) }\\n     }\\n \\n+    pub fn get_or_create_aux<T, E, F>(&self, arg: c_int, func: F) -> Result<Arc<T>>\\n+    where\\n+        T: Send + Sync + \\'static,\\n+        E: Into<Box<dyn std::error::Error + Send + Sync + \\'static>>,\\n+        F: FnOnce(ValueRef<\\'_>) -> Result<T, E>,\\n+    {\\n+        if let Some(v) = self.get_aux(arg)? {\\n+            Ok(v)\\n+        } else {\\n+            let vr = self.get_raw(arg as usize);\\n+            self.set_aux(\\n+                arg,\\n+                func(vr).map_err(|e| Error::UserFunctionError(e.into()))?,\\n+            )\\n+        }\\n+    }\\n+\\n     \/\/\/ Sets the auxilliary data associated with a particular parameter. See\\n     \/\/\/ https:\/\/www.sqlite.org\/c3ref\/get_auxdata.html for a discussion of\\n     \/\/\/ this feature, or the unit tests of this module for an example.\\n-    pub fn set_aux<T: \\'static>(&self, arg: c_int, value: T) {\\n-        let boxed = Box::into_raw(Box::new(AuxData {\\n-            id: TypeId::of::<T>(),\\n-            value,\\n-        }));\\n+    pub fn set_aux<T: Send + Sync + \\'static>(&self, arg: c_int, value: T) -> Result<Arc<T>> {\\n+        let orig: Arc<T> = Arc::new(value);\\n+        let inner: AuxInner = orig.clone();\\n+        let outer = Box::new(inner);\\n+        let raw: *mut AuxInner = Box::into_raw(outer);\\n         unsafe {\\n             ffi::sqlite3_set_auxdata(\\n                 self.ctx,\\n                 arg,\\n-                boxed as *mut c_void,\\n-                Some(free_boxed_value::<AuxData<T>>),\\n+                raw as *mut _,\\n+                Some(free_boxed_value::<AuxInner>),\\n             )\\n         };\\n+        Ok(orig)\\n     }\\n \\n-    \/\/\/ Gets the auxilliary data that was associated with a given parameter\\n-    \/\/\/ via `set_aux`. Returns `Ok(None)` if no data has been associated,\\n-    \/\/\/ and .\\n-    pub fn get_aux<T: \\'static>(&self, arg: c_int) -> Result<Option<&T>> {\\n-        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *const AuxData<T> };\\n+    \/\/\/ Gets the auxilliary data that was associated with a given parameter via\\n+    \/\/\/ `set_aux`. Returns `Ok(None)` if no data has been associated, and\\n+    \/\/\/ Ok(Some(v)) if it has. Returns an error if the requested type does not\\n+    \/\/\/ match.\\n+    pub fn get_aux<T: Send + Sync + \\'static>(&self, arg: c_int) -> Result<Option<Arc<T>>> {\\n+        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *const AuxInner };\\n         if p.is_null() {\\n             Ok(None)\\n         } else {\\n-            let id = unsafe { (*p).id };\\n-            if TypeId::of::<T>() != id {\\n-                Err(Error::GetAuxWrongType)\\n-            } else {\\n-                Ok(Some(unsafe { &(*p).value }))\\n-            }\\n+            let v: AuxInner = AuxInner::clone(unsafe { &*p });\\n+            v.downcast::<T>()\\n+                .map(Some)\\n+                .map_err(|_| Error::GetAuxWrongType)\\n         }\\n     }\\n }\\n \\n-#[repr(C)]\\n-struct AuxData<T: \\'static> {\\n-    id: TypeId,\\n-    value: T,\\n-}\\n+type AuxInner = Arc<dyn Any + Send + Sync + \\'static>;\\n \\n \/\/\/ `feature = \"functions\"` Aggregate is the callback interface for user-defined\\n \/\/\/ aggregate function.\\n@@ -776,34 +778,21 @@ mod test {\\n     \/\/ expression multiple times within one query.\\n     fn regexp_with_auxilliary(ctx: &Context<\\'_>) -> Result<bool> {\\n         assert_eq!(ctx.len(), 2, \"called with unexpected number of arguments\");\\n-\\n-        let saved_re: Option<&Regex> = ctx.get_aux(0)?;\\n-        let new_re = match saved_re {\\n-            None => {\\n-                let s = ctx.get::<String>(0)?;\\n-                match Regex::new(&s) {\\n-                    Ok(r) => Some(r),\\n-                    Err(err) => return Err(Error::UserFunctionError(Box::new(err))),\\n-                }\\n-            }\\n-            Some(_) => None,\\n-        };\\n+        type BoxError = Box<dyn std::error::Error + Send + Sync + \\'static>;\\n+        let regexp: std::sync::Arc<Regex> = ctx\\n+            .get_or_create_aux(0, |vr| -> Result<_, BoxError> {\\n+                Ok(Regex::new(vr.as_str()?)?)\\n+            })?;\\n \\n         let is_match = {\\n-            let re = saved_re.unwrap_or_else(|| new_re.as_ref().unwrap());\\n-\\n             let text = ctx\\n                 .get_raw(1)\\n                 .as_str()\\n                 .map_err(|e| Error::UserFunctionError(e.into()))?;\\n \\n-            re.is_match(text)\\n+            regexp.is_match(text)\\n         };\\n \\n-        if let Some(re) = new_re {\\n-            ctx.set_aux(0, re);\\n-        }\\n-\\n         Ok(is_match)\\n     }\\n \\n@@ -878,10 +867,10 @@ mod test {\\n         let db = Connection::open_in_memory().unwrap();\\n         db.create_scalar_function(\"example\", 2, FunctionFlags::default(), |ctx| {\\n             if !ctx.get::<bool>(1)? {\\n-                ctx.set_aux::<i64>(0, 100);\\n+                ctx.set_aux::<i64>(0, 100)?;\\n             } else {\\n                 assert_eq!(ctx.get_aux::<String>(0), Err(Error::GetAuxWrongType));\\n-                assert_eq!(ctx.get_aux::<i64>(0), Ok(Some(&100)));\\n+                assert_eq!(*ctx.get_aux::<i64>(0).unwrap().unwrap(), 100);\\n             }\\n             Ok(true)\\n         })'}}",
            "message_norm":"actually fix auxdata api...",
            "language":"ca",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/functions.rs'])",
            "num_files":1.0
        },
        {
            "index":2381,
            "vuln_id":"GHSA-m884-279h-32v2",
            "cwe_id":"{'CWE-209'}",
            "score":4.6,
            "chain":"{'https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db', 'https:\/\/github.com\/symfony\/symfony\/commit\/cf80224589ac05402d4f72f5ddf80900ec94d5ad'}",
            "dataset":"osv",
            "summary":"Exceptions displayed in non-debug configurations in Symfony Description\n-----------\n\nWhen `ErrorHandler` renders an exception HTML page, it uses un-escaped properties from the related Exception class to render the stacktrace. The security issue comes from the fact that the stacktraces were also displayed in non-`debug` environments.\n\nResolution\n----------\n\nThe `ErrorHandler` class now escapes all properties coming from the related Exception, and the stacktrace is not displayed anymore in non-`debug` environments.\n\nThe patches for this issue are available [here](https:\/\/github.com\/symfony\/symfony\/commit\/cf80224589ac05402d4f72f5ddf80900ec94d5ad) and [here](https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db) for branch 4.4.\n\nCredits\n-------\n\nI would like to thank Luka Sikic for reporting & Yonel Ceruto and J\u00e9r\u00e9my Deruss\u00e9 for fixing the issue.",
            "published_date":"2020-03-30",
            "chain_len":2,
            "project":"https:\/\/github.com\/symfony\/symfony",
            "commit_href":"https:\/\/github.com\/symfony\/symfony\/commit\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
            "commit_sha":"629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
            "patch":"MULTI",
            "chain_ord":"['cf80224589ac05402d4f72f5ddf80900ec94d5ad', '629d21b800a15dc649fb0ae9ed7cd9211e7e45db']",
            "before_first_fix_commit":"{'3ee39e7468f1cd0b5a88b89aad72d61214e950f4'}",
            "last_fix_commit":"629d21b800a15dc649fb0ae9ed7cd9211e7e45db",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/04\/2020, 09:49:52",
            "message":"Escape variable in Exception Template",
            "author":"J\u00e9r\u00e9my Deruss\u00e9",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/symfony\/symfony\/raw\/629d21b800a15dc649fb0ae9ed7cd9211e7e45db\/src%2FSymfony%2FComponent%2FErrorHandler%2FResources%2Fviews%2Ftraces_text.html.php', 'patch': '@@ -20,15 +20,15 @@\\n                 <?php if ($exception[\\'trace\\']) { ?>\\n                 <pre class=\"stacktrace\">\\n <?php\\n-                    echo $exception[\\'class\\'].\":\\\\n\";\\n+                    echo $this->escape($exception[\\'class\\']).\":\\\\n\";\\n                     if ($exception[\\'message\\']) {\\n-                        echo $exception[\\'message\\'].\"\\\\n\";\\n+                        echo $this->escape($exception[\\'message\\']).\"\\\\n\";\\n                     }\\n \\n                     foreach ($exception[\\'trace\\'] as $trace) {\\n                         echo \"\\\\n  \";\\n                         if ($trace[\\'function\\']) {\\n-                            echo \\'at \\'.$trace[\\'class\\'].$trace[\\'type\\'].$trace[\\'function\\'].\\'(\\'.(isset($trace[\\'args\\']) ? $this->formatArgsAsText($trace[\\'args\\']) : \\'\\').\\')\\';\\n+                            echo $this->escape(\\'at \\'.$trace[\\'class\\'].$trace[\\'type\\'].$trace[\\'function\\']).\\'(\\'.(isset($trace[\\'args\\']) ? $this->formatArgsAsText($trace[\\'args\\']) : \\'\\').\\')\\';\\n                         }\\n                         if ($trace[\\'file\\'] && $trace[\\'line\\']) {\\n                             echo($trace[\\'function\\'] ? \"\\\\n     (\" : \\'at \\').strtr(strip_tags($this->formatFile($trace[\\'file\\'], $trace[\\'line\\'])), [\\' at line \\'.$trace[\\'line\\'] => \\'\\']).\\':\\'.$trace[\\'line\\'].($trace[\\'function\\'] ? \\')\\' : \\'\\');'}}",
            "message_norm":"escape variable in exception template",
            "language":"ro",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Symfony\/Component\/ErrorHandler\/Resources\/views\/traces_text.html.php'])",
            "num_files":1.0
        },
        {
            "index":1928,
            "vuln_id":"GHSA-grmf-4fq6-2r79",
            "cwe_id":"{'CWE-119'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/aubio\/aubio\/commit\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5'}",
            "dataset":"osv",
            "summary":"Improper Restriction of Operations within the Bounds of a Memory Buffer in aubio aubio v0.4.0 to v0.4.8 has a Buffer Overflow in new_aubio_tempo.",
            "published_date":"2019-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/aubio\/aubio",
            "commit_href":"https:\/\/github.com\/aubio\/aubio\/commit\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "commit_sha":"b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "patch":"SINGLE",
            "chain_ord":"['b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5']",
            "before_first_fix_commit":"{'c4a8bc138e49de8b43fcd2221ef84dfa5073208f'}",
            "last_fix_commit":"b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2018, 16:17:29",
            "message":"[tempo] fix buffer overflow in method parser",
            "author":"Paul Brossier",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'src\/tempo\/tempo.c': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/aubio\/aubio\/raw\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5\/src%2Ftempo%2Ftempo.c', 'patch': '@@ -168,7 +168,7 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n     uint_t buf_size, uint_t hop_size, uint_t samplerate)\\n {\\n   aubio_tempo_t * o = AUBIO_NEW(aubio_tempo_t);\\n-  char_t specdesc_func[20];\\n+  char_t specdesc_func[PATH_MAX];\\n   o->samplerate = samplerate;\\n   \/\/ check parameters are valid\\n   if ((sint_t)hop_size < 1) {\\n@@ -203,9 +203,10 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n   o->pp       = new_aubio_peakpicker();\\n   aubio_peakpicker_set_threshold (o->pp, o->threshold);\\n   if ( strcmp(tempo_mode, \"default\") == 0 ) {\\n-    strcpy(specdesc_func, \"specflux\");\\n+    strncpy(specdesc_func, \"specflux\", PATH_MAX - 1);\\n   } else {\\n-    strcpy(specdesc_func, tempo_mode);\\n+    strncpy(specdesc_func, tempo_mode, PATH_MAX - 1);\\n+    specdesc_func[PATH_MAX - 1] = \\'\\\\0\\';\\n   }\\n   o->od       = new_aubio_specdesc(specdesc_func,buf_size);\\n   o->of       = new_fvec(1);'}}",
            "message_norm":"[tempo] fix buffer overflow in method parser",
            "language":"en",
            "entities":"[('buffer overflow', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/tempo\/tempo.c'])",
            "num_files":1.0
        },
        {
            "index":564,
            "vuln_id":"GHSA-566m-qj78-rww5",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/postcss\/postcss\/commit\/2b1d04c867995e55124e0a165b7c6622c1735956'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in postcss The package postcss versions before 7.0.36 or between 8.0.0 and 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib\/previous-map.js. The vulnerable regexes are caused mainly by the sub-pattern \\\/\\*\\s* sourceMappingURL=(.*).",
            "published_date":"2022-01-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/postcss\/postcss",
            "commit_href":"https:\/\/github.com\/postcss\/postcss\/commit\/2b1d04c867995e55124e0a165b7c6622c1735956",
            "commit_sha":"2b1d04c867995e55124e0a165b7c6622c1735956",
            "patch":"SINGLE",
            "chain_ord":"['2b1d04c867995e55124e0a165b7c6622c1735956']",
            "before_first_fix_commit":"{'dc6cff1d7f9e0d6cba440d1b4f797a0f57b13595', '2ad1ca9b965dde32223bee28dc259c339cbaaa05'}",
            "last_fix_commit":"2b1d04c867995e55124e0a165b7c6622c1735956",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2021, 12:08:17",
            "message":"Merge pull request #1567 from yetingli\/main\n\nFix ReDoS in previous-map",
            "author":"Andrey Sitnik",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '04\/27\/2021, 06:37:03', 'body': '[CVE-2021-23382](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2021-23382) was assigned to this commit.'}}",
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'lib\/previous-map.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/postcss\/postcss\/raw\/2b1d04c867995e55124e0a165b7c6622c1735956\/lib%2Fprevious-map.js', 'patch': '@@ -48,11 +48,11 @@ class PreviousMap {\\n   }\\n \\n   getAnnotationURL(sourceMapString) {\\n-    return sourceMapString.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=(.*)\\\\*\\\\\/\/)[1].trim()\\n+    return sourceMapString.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\\\*\\\\\/\/)[1].trim()\\n   }\\n \\n   loadAnnotation(css) {\\n-    let annotations = css.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=.*\\\\*\\\\\/\/gm)\\n+    let annotations = css.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\\\*\\\\\/\/gm)\\n \\n     if (annotations && annotations.length > 0) {\\n       \/\/ Locate the last sourceMappingURL to avoid picking up'}}",
            "message_norm":"merge pull request #1567 from yetingli\/main\n\nfix redos in previous-map",
            "language":"en",
            "entities":"[('#1567', 'ISSUE', ''), ('redos', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/previous-map.js'])",
            "num_files":1.0
        },
        {
            "index":1368,
            "vuln_id":"GHSA-9g3v-j3cr-6fc6",
            "cwe_id":"{'CWE-79'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in snipe-it snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2021-10-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c",
            "commit_sha":"bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c",
            "patch":"SINGLE",
            "chain_ord":"['bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c']",
            "before_first_fix_commit":"{'5d94b99035317cd23059c7af91ff5f38177f5968'}",
            "last_fix_commit":"bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/15\/2021, 16:50:52",
            "message":"Fixes possible XSS on all-file-types export\n\nSigned-off-by: snipe <snipe@snipe.net>",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'resources\/views\/partials\/bootstrap-table.blade.php': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c\/resources%2Fviews%2Fpartials%2Fbootstrap-table.blade.php', 'patch': '@@ -75,6 +75,10 @@ classes: \\'table table-responsive table-no-bordered\\',\\n                 export: \\'fa-download\\',\\n                 clearSearch: \\'fa-times\\'\\n             },\\n+            exportOptions: {\\n+                htmlContent: true,\\n+            },\\n+\\n             exportTypes: [\\'csv\\', \\'excel\\', \\'doc\\', \\'txt\\',\\'json\\', \\'xml\\', \\'pdf\\'],\\n             onLoadSuccess: function () {\\n                 $(\\'[data-toggle=\"tooltip\"]\\').tooltip(); \/\/ Needed to attach tooltips after ajax call'}}",
            "message_norm":"fixes possible xss on all-file-types export\n\nsigned-off-by: snipe <snipe@snipe.net>",
            "language":"en",
            "entities":"[('xss', 'SECWORD', ''), ('snipe@snipe.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['resources\/views\/partials\/bootstrap-table.blade.php'])",
            "num_files":1.0
        },
        {
            "index":2323,
            "vuln_id":"GHSA-jxwx-85vp-gvwm",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jquery-validation\/jquery-validation\/commit\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in jquery-validation The GitHub Security Lab team has identified potential security vulnerabilities in jquery.validation.\n\nThe project contains one or more regular expressions that are vulnerable to ReDoS (Regular Expression Denial of Service)\n\nThis issue was discovered and reported by GitHub team member @erik-krogh (Erik Krogh Kristensen).",
            "published_date":"2021-01-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/jquery-validation\/jquery-validation",
            "commit_href":"https:\/\/github.com\/jquery-validation\/jquery-validation\/commit\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "commit_sha":"5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "patch":"SINGLE",
            "chain_ord":"['5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d']",
            "before_first_fix_commit":"{'b8d6646ec67c73372dddfbc9aadff45571a96136'}",
            "last_fix_commit":"5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/09\/2021, 15:28:00",
            "message":"Core: fixed Regular Expression Denial of Service vulnerability (#2371)\n\nReDoS, or Regular Expression Denial of Service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nGHSL-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
            "author":"Markus Staab",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/core.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jquery-validation\/jquery-validation\/raw\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d\/src%2Fcore.js', 'patch': '@@ -1412,7 +1412,7 @@ $.extend( $.validator, {\\n \\t\\t\\t\/\/ https:\/\/gist.github.com\/dperini\/729294\\n \\t\\t\\t\/\/ see also https:\/\/mathiasbynens.be\/demo\/url-regex\\n \\t\\t\\t\/\/ modified to allow protocol-relative URLs\\n-\\t\\t\\treturn this.optional( element ) || \/^(?:(?:(?:https?|ftp):)?\\\\\/\\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})).?)(?::\\\\d{2,5})?(?:[\/?#]\\\\S*)?$\/i.test( value );\\n+\\t\\t\\treturn this.optional( element ) || \/^(?:(?:(?:https?|ftp):)?\\\\\/\\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?))(?::\\\\d{2,5})?(?:[\/?#]\\\\S*)?$\/i.test( value );\\n \\t\\t},\\n \\n \\t\\t\/\/ https:\/\/jqueryvalidation.org\/date-method\/'}}",
            "message_norm":"core: fixed regular expression denial of service vulnerability (#2371)\n\nredos, or regular expression denial of service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nghsl-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#2371', 'ISSUE', ''), ('redos', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/core.js'])",
            "num_files":1.0
        },
        {
            "index":824,
            "vuln_id":"GHSA-6fc8-4gx4-v693",
            "cwe_id":"{'CWE-400', 'CWE-345'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/websockets\/ws\/commit\/00c425ec77993773d823f018f64a5c44e17023ff'}",
            "dataset":"osv",
            "summary":"ReDoS in Sec-Websocket-Protocol header ### Impact\n\nA specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a ws server.\n\n### Proof of concept\n\n```js\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\n  const value = 'b' + ' '.repeat(length) + 'x';\n  const start = process.hrtime.bigint();\n\n  value.trim().split(\/ *, *\/);\n\n  const end = process.hrtime.bigint();\n\n  console.log('length = %d, time = %f ns', length, end - start);\n}\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@7.4.6 (https:\/\/github.com\/websockets\/ws\/commit\/00c425ec77993773d823f018f64a5c44e17023ff) and backported to ws@6.2.2 (https:\/\/github.com\/websockets\/ws\/commit\/78c676d2a1acefbc05292e9f7ea0a9457704bf1b) and ws@5.2.3 (https:\/\/github.com\/websockets\/ws\/commit\/76d47c1479002022a3e4357b3c9f0e23a68d4cd2).\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated by reducing the maximum allowed length of the request headers using the [`--max-http-header-size=size`](https:\/\/nodejs.org\/api\/cli.html#cli_max_http_header_size_size) and\/or the [`maxHeaderSize`](https:\/\/nodejs.org\/api\/http.html#http_http_createserver_options_requestlistener) options.\n\n### Credits\n\nThe vulnerability was responsibly disclosed along with a fix in private by [Robert McLaughlin](https:\/\/github.com\/robmcl4) from University of California, Santa Barbara.",
            "published_date":"2021-05-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/websockets\/ws",
            "commit_href":"https:\/\/github.com\/websockets\/ws\/commit\/00c425ec77993773d823f018f64a5c44e17023ff",
            "commit_sha":"00c425ec77993773d823f018f64a5c44e17023ff",
            "patch":"SINGLE",
            "chain_ord":"['00c425ec77993773d823f018f64a5c44e17023ff']",
            "before_first_fix_commit":"{'990306d1446faf346c76452409a4c11455690514'}",
            "last_fix_commit":"00c425ec77993773d823f018f64a5c44e17023ff",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/25\/2021, 09:00:58",
            "message":"[security] Fix ReDoS vulnerability\n\nA specially crafted value of the `Sec-Websocket-Protocol` header could\nbe used to significantly slow down a ws server.\n\nPoC and fix were sent privately by Robert McLaughlin from University of\nCalifornia, Santa Barbara.",
            "author":"Luigi Pinca",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 1, 'total': 14}",
            "files":"{'lib\/websocket-server.js': {'additions': 13, 'deletions': 1, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/websockets\/ws\/raw\/00c425ec77993773d823f018f64a5c44e17023ff\/lib%2Fwebsocket-server.js', 'patch': \"@@ -286,7 +286,7 @@ class WebSocketServer extends EventEmitter {\\n     let protocol = req.headers['sec-websocket-protocol'];\\n \\n     if (protocol) {\\n-      protocol = protocol.trim().split(\/ *, *\/);\\n+      protocol = protocol.split(',').map(trim);\\n \\n       \/\/\\n       \/\/ Optionally call external protocol selection handler.\\n@@ -404,3 +404,15 @@ function abortHandshake(socket, code, message, headers) {\\n   socket.removeListener('error', socketOnError);\\n   socket.destroy();\\n }\\n+\\n+\/**\\n+ * Remove whitespace characters from both ends of a string.\\n+ *\\n+ * @param {String} str The string\\n+ * @return {String} A new string representing `str` stripped of whitespace\\n+ *     characters from both its beginning and end\\n+ * @private\\n+ *\/\\n+function trim(str) {\\n+  return str.trim();\\n+}\"}}",
            "message_norm":"[security] fix redos vulnerability\n\na specially crafted value of the `sec-websocket-protocol` header could\nbe used to significantly slow down a ws server.\n\npoc and fix were sent privately by robert mclaughlin from university of\ncalifornia, santa barbara.",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('protocol', 'SECWORD', ''), ('server', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/websocket-server.js'])",
            "num_files":1.0
        },
        {
            "index":3091,
            "vuln_id":"GHSA-vc3x-gx6c-g99f",
            "cwe_id":"{'CWE-190'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/Bytom\/bytom\/commit\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42'}",
            "dataset":"osv",
            "summary":"Denial of Service in Bytom In the client in Bytom before 1.0.6, checkTopicRegister in p2p\/discover\/net.go does not prevent negative idx values, leading to a crash.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Bytom\/bytom",
            "commit_href":"https:\/\/github.com\/Bytom\/bytom\/commit\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "commit_sha":"1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "patch":"SINGLE",
            "chain_ord":"['1ac3c8ac4f2b1e1df9675228290bda6b9586ba42']",
            "before_first_fix_commit":"{'69b3d4c7cf41c6628efb34ed79ad35e9e22bbf82'}",
            "last_fix_commit":"1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/31\/2018, 05:48:40",
            "message":"p2p\/discv5: fix idx can be negative after uint convert to int(can cause crash) (#1307)",
            "author":"yahtoo",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'p2p\/discover\/net.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Bytom\/bytom\/raw\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42\/p2p%2Fdiscover%2Fnet.go', 'patch': '@@ -1221,7 +1221,7 @@ func (net *Network) checkTopicRegister(data *topicRegister) (*pong, error) {\\n \\tif hash != pongpkt.data.(*pong).TopicHash {\\n \\t\\treturn nil, errors.New(\"topic hash mismatch\")\\n \\t}\\n-\\tif data.Idx < 0 || int(data.Idx) >= len(data.Topics) {\\n+\\tif int(data.Idx) < 0 || int(data.Idx) >= len(data.Topics) {\\n \\t\\treturn nil, errors.New(\"topic index out of range\")\\n \\t}\\n \\treturn pongpkt.data.(*pong), nil'}}",
            "message_norm":"p2p\/discv5: fix idx can be negative after uint convert to int(can cause crash) (#1307)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#1307', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['p2p\/discover\/net.go'])",
            "num_files":1.0
        },
        {
            "index":2277,
            "vuln_id":"GHSA-jmgf-p46x-982h",
            "cwe_id":"{'CWE-352'}",
            "score":0.0,
            "chain":"{'http:\/\/github.com\/rails\/rails\/commit\/7282ed863ca7e6f928bae9162c9a63a98775a19d'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects rails CRLF injection vulnerability in Ruby on Rails before 2.0.5 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via a crafted URL to the redirect_to function.",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"http:\/\/github.com\/rails\/rails",
            "commit_href":"http:\/\/github.com\/rails\/rails\/commit\/7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "commit_sha":"7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "patch":"SINGLE",
            "chain_ord":"['7282ed863ca7e6f928bae9162c9a63a98775a19d']",
            "before_first_fix_commit":"{'e8577991dcc47bcb11f99fd6582ee2a3f8270498'}",
            "last_fix_commit":"7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/14\/2008, 09:47:27",
            "message":"Sanitize the URLs passed to redirect_to to prevent a potential response spli\n\nCGI.rb and mongrel don't do any sanitization of the contents of HTTP headers",
            "author":"Michael Koziarski",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'actionpack\/lib\/action_controller\/response.rb': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rails\/rails\/raw\/7282ed863ca7e6f928bae9162c9a63a98775a19d\/actionpack%2Flib%2Faction_controller%2Fresponse.rb', 'patch': '@@ -30,9 +30,9 @@ def charset\\n \\n     def redirect(to_url, response_status)\\n       self.headers[\"Status\"] = response_status\\n-      self.headers[\"Location\"] = to_url\\n+      self.headers[\"Location\"] = to_url.gsub(\/[\\\\r\\\\n]\/, \\'\\')\\n \\n-      self.body = \"<html><body>You are being <a href=\\\\\"#{to_url}\\\\\">redirected<\/a>.<\/body><\/html>\"\\n+      self.body = \"<html><body>You are being <a href=\\\\\"#{CGI.escapeHTML(to_url)}\\\\\">redirected<\/a>.<\/body><\/html>\"\\n     end\\n \\n     def prepare!'}}",
            "message_norm":"sanitize the urls passed to redirect_to to prevent a potential response spli\n\ncgi.rb and mongrel don't do any sanitization of the contents of http headers",
            "language":"en",
            "entities":"[('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('sanitization', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['actionpack\/lib\/action_controller\/response.rb'])",
            "num_files":1.0
        },
        {
            "index":2413,
            "vuln_id":"GHSA-mg5h-9rhq-4cqx",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/42c0d9813df3035728b36116a6ce9116e6fa8ed3'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in ShowDoc ShowDoc is vulnerable to stored cross-site scripting through file upload in versions 2.10.3 and prior. A patch is available and anticipated to be part of version 2.10.4.",
            "published_date":"2022-03-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/42c0d9813df3035728b36116a6ce9116e6fa8ed3",
            "commit_sha":"42c0d9813df3035728b36116a6ce9116e6fa8ed3",
            "patch":"SINGLE",
            "chain_ord":"['42c0d9813df3035728b36116a6ce9116e6fa8ed3']",
            "before_first_fix_commit":"{'818d7fe731f452acccacf731ce47ec27ad68049c'}",
            "last_fix_commit":"42c0d9813df3035728b36116a6ce9116e6fa8ed3",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/13\/2022, 02:27:22",
            "message":"file upload bug",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/42c0d9813df3035728b36116a6ce9116e6fa8ed3\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -300,6 +300,7 @@ public function isDangerFilename($filename){\\n \\t\\t\\t $isDangerStr($filename , \".php\")\\n \\t\\t\\t|| $isDangerStr($filename , \".svg\")\\n \\t\\t\\t|| $isDangerStr($filename , \".htm\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".shtm\")\\n \\t\\t\\t|| $isDangerStr($filename , \"%\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xml\")\\n \\t\\t) {'}}",
            "message_norm":"file upload bug",
            "language":"ro",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":328,
            "vuln_id":"GHSA-3xgx-r9j4-qw9w",
            "cwe_id":"{'CWE-1321'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/dexie\/Dexie.js\/commit\/1d655a69b9f28c3af6fae10cf5c61df387dc689b'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in Dexie Dexie is a minimalistic wrapper for IndexedDB. The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add\/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.",
            "published_date":"2022-05-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/dexie\/Dexie.js",
            "commit_href":"https:\/\/github.com\/dexie\/Dexie.js\/commit\/1d655a69b9f28c3af6fae10cf5c61df387dc689b",
            "commit_sha":"1d655a69b9f28c3af6fae10cf5c61df387dc689b",
            "patch":"SINGLE",
            "chain_ord":"['1d655a69b9f28c3af6fae10cf5c61df387dc689b']",
            "before_first_fix_commit":"{'b350b8cbc8a926b46c20f3a569555c4660a99ca4'}",
            "last_fix_commit":"1d655a69b9f28c3af6fae10cf5c61df387dc689b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/27\/2022, 10:26:44",
            "message":"Prohibit prototype pollution",
            "author":"dfahlander",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/functions\/utils.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/dexie\/Dexie.js\/raw\/1d655a69b9f28c3af6fae10cf5c61df387dc689b\/src%2Ffunctions%2Futils.ts', 'patch': '@@ -151,7 +151,7 @@ export function setByKeyPath(obj, keyPath, value) {\\n                 } else obj[currentKeyPath] = value;\\n             else {\\n                 var innerObj = obj[currentKeyPath];\\n-                if (!innerObj) innerObj = (obj[currentKeyPath] = {});\\n+                if (!innerObj || !hasOwn(obj, currentKeyPath)) innerObj = (obj[currentKeyPath] = {});\\n                 setByKeyPath(innerObj, remainingKeyPath, value);\\n             }\\n         } else {'}}",
            "message_norm":"prohibit prototype pollution",
            "language":"en",
            "entities":"[('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/functions\/utils.ts'])",
            "num_files":1.0
        },
        {
            "index":2335,
            "vuln_id":"GHSA-m34j-p8rj-wjxq",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67784700869470d65d5f2ef20aeb5e97c31673cb'}",
            "dataset":"osv",
            "summary":"Division by 0 in `QuantizedBiasAdd` ### Impact\nAn attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nbias = tf.constant([], shape=[0], dtype=tf.quint8)\nmin_input = tf.constant(-10.0, dtype=tf.float32)\nmax_input = tf.constant(-10.0, dtype=tf.float32)\nmin_bias = tf.constant(-10.0, dtype=tf.float32)\nmax_bias = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBiasAdd(input=input_tensor, bias=bias, min_input=min_input,\n                            max_input=max_input, min_bias=min_bias,\n                            max_bias=max_bias, out_type=tf.qint32)\n```\n\nThis is because the [implementation of the Eigen kernel](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd\/tensorflow\/core\/kernels\/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero:\n\n```cc\ntemplate <typename T1, typename T2, typename T3>\nvoid QuantizedAddUsingEigen(const Eigen::ThreadPoolDevice& device,\n                            const Tensor& input, float input_min,\n                            float input_max, const Tensor& smaller_input,\n                            float smaller_input_min, float smaller_input_max,\n                            Tensor* output, float* output_min,\n                            float* output_max) {\n  ...\n  const int64 input_element_count = input.NumElements();\n  const int64 smaller_input_element_count = smaller_input.NumElements();\n  ...\n  bcast[0] = input_element_count \/ smaller_input_element_count;\n  ...\n}\n```\n\nThis integral division by 0 is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [67784700869470d65d5f2ef20aeb5e97c31673cb](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67784700869470d65d5f2ef20aeb5e97c31673cb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67784700869470d65d5f2ef20aeb5e97c31673cb",
            "commit_sha":"67784700869470d65d5f2ef20aeb5e97c31673cb",
            "patch":"SINGLE",
            "chain_ord":"['67784700869470d65d5f2ef20aeb5e97c31673cb']",
            "before_first_fix_commit":"{'61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd'}",
            "last_fix_commit":"67784700869470d65d5f2ef20aeb5e97c31673cb",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2021, 18:11:39",
            "message":"Prevent division by 0 in `QuantizedBiasAdd`.\n\nPiperOrigin-RevId: 370117454\nChange-Id: I3804e2ac8dcc6d3afcc92e27853e2325a017ca4d",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/quantized_bias_add_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/67784700869470d65d5f2ef20aeb5e97c31673cb\/tensorflow%2Fcore%2Fkernels%2Fquantized_bias_add_op.cc', 'patch': '@@ -56,6 +56,8 @@ class QuantizedBiasAddOp : public OpKernel {\\n             \"Must provide as many biases as the last dimension \"\\n             \"of the input tensor: \",\\n             bias.shape().DebugString(), \" vs. \", input.shape().DebugString()));\\n+    OP_REQUIRES(context, bias.NumElements() > 0,\\n+                errors::InvalidArgument(\"Must provide at least 1 bias\"));\\n \\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"prevent division by 0 in `quantizedbiasadd`.\n\npiperorigin-revid: 370117454\nchange-id: i3804e2ac8dcc6d3afcc92e27853e2325a017ca4d",
            "language":"it",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370117454', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_bias_add_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1344,
            "vuln_id":"GHSA-98p5-x8x4-c9m5",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4'}",
            "dataset":"osv",
            "summary":"Integer overflow in TFLite ### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ca6f96b62ad84207fbec580404eaa7dd7403a550\/tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i < lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape->data.i32[i];\n    lookup_size *= dim;\n    output_shape->data[k] = dim;\n  }\n  for (int i = 1; i < embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape->data[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read\/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4",
            "commit_sha":"a4e401da71458d253b05e41f28637b65baf64be4",
            "patch":"MULTI",
            "chain_ord":"['f19be71717c497723ba0cea0379e84f061a75e01', '1de49725a5fc4e48f1a3b902ec3599ee99283043', 'a4e401da71458d253b05e41f28637b65baf64be4']",
            "before_first_fix_commit":"{'f435ae9dee673e83504618b77e1be8cddda73e74'}",
            "last_fix_commit":"a4e401da71458d253b05e41f28637b65baf64be4",
            "chain_ord_pos":3.0,
            "commit_datetime":"12\/21\/2021, 21:06:51",
            "message":"Prevent segfault in `embedding_lookup_sparse.cc`\n\nPrevious fixes missed one additional case.\n\nPiperOrigin-RevId: 417676944\nChange-Id: I8ab412155cf9b1e897448a6611d209eaa7ca9e66",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a4e401da71458d253b05e41f28637b65baf64be4\/tensorflow%2Flite%2Fkernels%2Fembedding_lookup_sparse.cc', 'patch': '@@ -159,6 +159,7 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));\\n   const TfLiteTensor* value;\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 4, &value));\\n+  const size_t values_size = NumElements(value);\\n \\n   const int lookup_rank = SizeOfDimension(indices, 1);\\n   const int embedding_rank = NumDimensions(value);\\n@@ -253,6 +254,11 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n     current_squares_weight += w * w;\\n     current_total_weight += w;\\n     for (int k = 0; k < embedding_size; k++) {\\n+      \/\/ only index if indices are valid\\n+      if (current_output_offset + k < 0) continue;\\n+      if (current_output_offset + k >= output_size) continue;\\n+      if (example_embedding_offset + k < 0) continue;\\n+      if (example_embedding_offset + k >= values_size) continue;\\n       output_ptr[current_output_offset + k] +=\\n           value_ptr[example_embedding_offset + k] * w;\\n     }'}}",
            "message_norm":"prevent segfault in `embedding_lookup_sparse.cc`\n\nprevious fixes missed one additional case.\n\npiperorigin-revid: 417676944\nchange-id: i8ab412155cf9b1e897448a6611d209eaa7ca9e66",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('417676944', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc'])",
            "num_files":1.0
        },
        {
            "index":400,
            "vuln_id":"GHSA-4c4g-crqm-xrxw",
            "cwe_id":"{'CWE-908'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887'}",
            "dataset":"osv",
            "summary":"Use of unitialized value in TFLite ### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/lite\/kernels\/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast<TfLiteAffineQuantization*>(\n            filter->quantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
            "commit_sha":"4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
            "patch":"MULTI",
            "chain_ord":"['537bc7c723439b9194a358f64d871dd326c18887', '4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', '8933b8a21280696ab119b63263babdb54c298538']",
            "before_first_fix_commit":"{'e35be978351a8578549d30b6f483825d36dc0f8b'}",
            "last_fix_commit":"8933b8a21280696ab119b63263babdb54c298538",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/16\/2021, 16:59:39",
            "message":"Fix a null pointer exception caused by branching on uninitialized data.\n\nThis is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\n\nPiperOrigin-RevId: 385168337\nChange-Id: I28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/lite\/kernels\/unidirectional_sequence_lstm.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5\/tensorflow%2Flite%2Fkernels%2Funidirectional_sequence_lstm.cc', 'patch': '@@ -62,8 +62,12 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       context,\\n       GetOutputSafe(context, node, lstm::full::kOutputTensor, &output_tensor));\\n \\n+  TF_LITE_ENSURE(context,\\n+                 cell_state->quantization.type != kTfLiteNoQuantization);\\n   auto* cell_state_params =\\n       static_cast<TfLiteAffineQuantization*>(cell_state->quantization.params);\\n+  TF_LITE_ENSURE(context,\\n+                 output_tensor->quantization.type != kTfLiteNoQuantization);\\n   auto* proj_params = static_cast<TfLiteAffineQuantization*>(\\n       output_tensor->quantization.params);\\n   if (cell_clip > 0.0) {\\n@@ -160,6 +164,8 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       TfLiteTensor* intermediate;\\n       TF_LITE_ENSURE_OK(context,\\n                         GetIntermediatesSafe(context, node, i, &intermediate));\\n+      TF_LITE_ENSURE(context,\\n+                     intermediate->quantization.type != kTfLiteNoQuantization);\\n       auto* params = static_cast<TfLiteAffineQuantization*>(\\n           intermediate->quantization.params);\\n       intermediate_scale.push_back(params->scale->data[0]);\\n@@ -174,6 +180,7 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n   \/\/ is ignored.\\n   TfLiteTensor* hidden;\\n   TF_LITE_ENSURE_OK(context, GetIntermediatesSafe(context, node, 4, &hidden));\\n+  TF_LITE_ENSURE(context, hidden->quantization.type != kTfLiteNoQuantization);\\n   auto* hidden_params =\\n       static_cast<TfLiteAffineQuantization*>(hidden->quantization.params);\\n   intermediate_scale.push_back(hidden_params->scale->data[0]);\\n@@ -760,6 +767,8 @@ TfLiteStatus PopulatePrecomputedZPTimesWeightsWithBias(TfLiteContext* context,\\n \\n   const TfLiteTensor* intermediate =\\n       &context->tensors[node->intermediates->data[4]];\\n+  TF_LITE_ENSURE(context,\\n+                 intermediate->quantization.type != kTfLiteNoQuantization);\\n   const auto* params =\\n       static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);\\n   const int32_t hidden_zp = params->zero_point->data[0];'}}",
            "message_norm":"fix a null pointer exception caused by branching on uninitialized data.\n\nthis is due to not checking that the params for the quantization exists. if there is no quantization, we should not access the `.params` field.\n\npiperorigin-revid: 385168337\nchange-id: i28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('uninitialized', 'SECWORD', ''), ('385168337', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/unidirectional_sequence_lstm.cc'])",
            "num_files":1.0
        },
        {
            "index":621,
            "vuln_id":"GHSA-5f9h-9pjv-v6j7",
            "cwe_id":"{'CWE-22', 'CWE-548'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/rack\/rack\/commit\/dddb7ad18ed79ca6ab06ccc417a169fde451246e'}",
            "dataset":"osv",
            "summary":"Directory traversal in Rack::Directory app bundled with Rack A directory traversal vulnerability exists in rack < 2.2.0 that allows an attacker perform directory traversal vulnerability in the Rack::Directory app that is bundled with Rack which could result in information disclosure.",
            "published_date":"2020-07-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/rack\/rack",
            "commit_href":"https:\/\/github.com\/rack\/rack\/commit\/dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "commit_sha":"dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "patch":"SINGLE",
            "chain_ord":"['dddb7ad18ed79ca6ab06ccc417a169fde451246e']",
            "before_first_fix_commit":"{'16a51d8e0b64964323c3719b8154106af5cc0feb'}",
            "last_fix_commit":"dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/12\/2020, 16:23:33",
            "message":"Use Dir.entries instead of Dir[glob] to prevent user-specified glob metacharacters\n\n[CVE-2020-8161]",
            "author":"Jack McCracken",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 2, 'total': 3}",
            "files":"{'lib\/rack\/directory.rb': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rack\/rack\/raw\/dddb7ad18ed79ca6ab06ccc417a169fde451246e\/lib%2Frack%2Fdirectory.rb', 'patch': \"@@ -106,13 +106,12 @@ def check_forbidden(path_info)\\n \\n     def list_directory(path_info, path, script_name)\\n       files = [['..\/', 'Parent Directory', '', '', '']]\\n-      glob = ::File.join(path, '*')\\n \\n       url_head = (script_name.split('\/') + path_info.split('\/')).map do |part|\\n         Rack::Utils.escape_path part\\n       end\\n \\n-      Dir[glob].sort.each do |node|\\n+      Dir.entries(path).reject { |e| e.start_with?('.') }.sort.each do |node|\\n         stat = stat(node)\\n         next unless stat\\n         basename = ::File.basename(node)\"}}",
            "message_norm":"use dir.entries instead of dir[glob] to prevent user-specified glob metacharacters\n\n[cve-2020-8161]",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('cve-2020-8161', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/rack\/directory.rb'])",
            "num_files":1.0
        },
        {
            "index":347,
            "vuln_id":"GHSA-43jf-985q-588j",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
            "dataset":"osv",
            "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "commit_sha":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "patch":"MULTI",
            "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
            "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
            "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/12\/2021, 16:19:38",
            "message":"Eliminate debug `CHECK`-fail from `function.cc`\n\nPiperOrigin-RevId: 409416119\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {\\n     for (size_t i = 0; i < dtypes.size(); ++i) {\\n       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),\\n                                  {true, arg_index, 0, false, {dtypes[i]}}));\\n-      DCHECK_EQ(arg_index, result_.nodes.size());\\n+      if (arg_index != result_.nodes.size()) {\\n+        return errors::Internal(\\n+            \"Expected arg_index to be equal to the number of nodes in result.\",\\n+            \" Got \", arg_index, \" and \", result_.nodes.size());\\n+      }\\n       string name = arg_def.name();\\n       if (dtypes.size() > 1) {\\n         strings::StrAppend(&name, \"_\", i);'}}",
            "message_norm":"eliminate debug `check`-fail from `function.cc`\n\npiperorigin-revid: 409416119\nchange-id: i8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
            "language":"en",
            "entities":"[('409416119', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
            "num_files":1.0
        },
        {
            "index":422,
            "vuln_id":"GHSA-4gp3-p7ph-x2jr",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/guybedford\/devcert\/commit\/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8'}",
            "dataset":"osv",
            "summary":"OS Command Injection in devcert-sanscache devcert-sanscache before 0.4.7 allows remote attackers to execute arbitrary code or cause a Command Injection via the exec function. The variable `commonName` controlled by user input is used as part of the `exec` function without any sanitization.",
            "published_date":"2020-04-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/guybedford\/devcert",
            "commit_href":"https:\/\/github.com\/guybedford\/devcert\/commit\/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
            "commit_sha":"571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
            "patch":"SINGLE",
            "chain_ord":"['571f4e6d077f7f21c6aed655ae380d85a7a5d3b8']",
            "before_first_fix_commit":"{'651bb8ebb97a029be13656c0476d48db85887451'}",
            "last_fix_commit":"571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/08\/2020, 01:35:58",
            "message":"common name sanitization",
            "author":"Guy Bedford",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/index.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/guybedford\/devcert\/raw\/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8\/src%2Findex.ts', 'patch': \"@@ -6,7 +6,7 @@ import fs = require('fs');\\n export default async function generateDevCert (commonName: string) {\\n   if (!commandExists.sync('openssl'))\\n     throw new Error('Unable to find openssl - make sure it is installed and available in your PATH');\\n-  if (!commonName.match(\/^(.|\\\\.){1,64}$\/))\\n+  if (!commonName.match(\/^(a-zA-Z0-9|\\\\.){1,64}$\/))\\n     throw new Error(`Invalid Common Name ${commonName}.`);\\n   try {\\n     const opensslConfPath = generateOpensslConf(commonName);\"}}",
            "message_norm":"common name sanitization",
            "language":"it",
            "entities":"[('sanitization', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.ts'])",
            "num_files":1.0
        },
        {
            "index":415,
            "vuln_id":"GHSA-4fg4-p75j-w5xj",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b'}",
            "dataset":"osv",
            "summary":"Heap out of bounds in `QuantizedBatchNormWithGlobalNormalization` ### Impact\nAn attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([1], shape=[1, 1, 1, 1], dtype=tf.quint8)\nt_min = tf.constant([], shape=[0], dtype=tf.float32)\nt_max = tf.constant([], shape=[0], dtype=tf.float32)\nm = tf.constant([1], shape=[1], dtype=tf.quint8)\nm_min = tf.constant([], shape=[0], dtype=tf.float32)\nm_max = tf.constant([], shape=[0], dtype=tf.float32)\nv = tf.constant([1], shape=[1], dtype=tf.quint8)\nv_min = tf.constant([], shape=[0], dtype=tf.float32)\nv_max = tf.constant([], shape=[0], dtype=tf.float32)\nbeta = tf.constant([1], shape=[1], dtype=tf.quint8)\nbeta_min = tf.constant([], shape=[0], dtype=tf.float32)\nbeta_max = tf.constant([], shape=[0], dtype=tf.float32)\ngamma = tf.constant([1], shape=[1], dtype=tf.quint8)\ngamma_min = tf.constant([], shape=[0], dtype=tf.float32)\ngamma_max = tf.constant([], shape=[0], dtype=tf.float32) \n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```                         \n                            \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f\/tensorflow\/core\/kernels\/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty: \n  \n```cc\nconst float input_min = context->input(1).flat<float>()(0);\nconst float input_max = context->input(2).flat<float>()(0);\n...\nconst float mean_min = context->input(4).flat<float>()(0);\nconst float mean_max = context->input(5).flat<float>()(0);\n...\nconst float var_min = context->input(7).flat<float>()(0);\nconst float var_max = context->input(8).flat<float>()(0);\n...\nconst float beta_min = context->input(10).flat<float>()(0);\nconst float beta_max = context->input(11).flat<float>()(0);\n...\nconst float gamma_min = context->input(13).flat<float>()(0);\nconst float gamma_max = context->input(14).flat<float>()(0);\n```\n\nIf any of these inputs is empty, `.flat<T>()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "commit_sha":"d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "patch":"SINGLE",
            "chain_ord":"['d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b']",
            "before_first_fix_commit":"{'55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f'}",
            "last_fix_commit":"d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2021, 18:40:06",
            "message":"Add missing validation in `QuantizedBatchNormWithGlobalNormalization`\n\nPiperOrigin-RevId: 370123451\nChange-Id: Id234d6dab1ec21230bb8e503dba30f899af87f33",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 67, 'deletions': 10, 'total': 77}",
            "files":"{'tensorflow\/core\/kernels\/quantized_batch_norm_op.cc': {'additions': 67, 'deletions': 10, 'changes': 77, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b\/tensorflow%2Fcore%2Fkernels%2Fquantized_batch_norm_op.cc', 'patch': '@@ -173,20 +173,50 @@ class QuantizedBatchNormOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     const Tensor& input = context->input(0);\\n-    const float input_min = context->input(1).flat<float>()(0);\\n-    const float input_max = context->input(2).flat<float>()(0);\\n+    const auto& input_min_tensor = context->input(1);\\n+    OP_REQUIRES(context, input_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"input_min must have 1 element\"));\\n+    const float input_min = input_min_tensor.flat<float>()(0);\\n+    const auto& input_max_tensor = context->input(2);\\n+    OP_REQUIRES(context, input_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"input_max must have 1 element\"));\\n+    const float input_max = input_max_tensor.flat<float>()(0);\\n     const Tensor& mean = context->input(3);\\n-    const float mean_min = context->input(4).flat<float>()(0);\\n-    const float mean_max = context->input(5).flat<float>()(0);\\n+    const auto& mean_min_tensor = context->input(4);\\n+    OP_REQUIRES(context, mean_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"mean_min must have 1 element\"));\\n+    const float mean_min = mean_min_tensor.flat<float>()(0);\\n+    const auto& mean_max_tensor = context->input(5);\\n+    OP_REQUIRES(context, mean_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"mean_max must have 1 element\"));\\n+    const float mean_max = mean_max_tensor.flat<float>()(0);\\n     const Tensor& var = context->input(6);\\n-    const float var_min = context->input(7).flat<float>()(0);\\n-    const float var_max = context->input(8).flat<float>()(0);\\n+    const auto& var_min_tensor = context->input(7);\\n+    OP_REQUIRES(context, var_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"var_min must have 1 element\"));\\n+    const float var_min = var_min_tensor.flat<float>()(0);\\n+    const auto& var_max_tensor = context->input(8);\\n+    OP_REQUIRES(context, var_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"var_max must have 1 element\"));\\n+    const float var_max = var_max_tensor.flat<float>()(0);\\n     const Tensor& beta = context->input(9);\\n-    const float beta_min = context->input(10).flat<float>()(0);\\n-    const float beta_max = context->input(11).flat<float>()(0);\\n+    const auto& beta_min_tensor = context->input(10);\\n+    OP_REQUIRES(context, beta_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"beta_min must have 1 element\"));\\n+    const float beta_min = beta_min_tensor.flat<float>()(0);\\n+    const auto& beta_max_tensor = context->input(11);\\n+    OP_REQUIRES(context, beta_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"beta_max must have 1 element\"));\\n+    const float beta_max = beta_max_tensor.flat<float>()(0);\\n     const Tensor& gamma = context->input(12);\\n-    const float gamma_min = context->input(13).flat<float>()(0);\\n-    const float gamma_max = context->input(14).flat<float>()(0);\\n+    const auto& gamma_min_tensor = context->input(13);\\n+    OP_REQUIRES(context, gamma_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"gamma_min must have 1 element\"));\\n+    const float gamma_min = gamma_min_tensor.flat<float>()(0);\\n+    const auto& gamma_max_tensor = context->input(14);\\n+    OP_REQUIRES(context, gamma_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"gamma_max must have 1 element\"));\\n+    const float gamma_max = gamma_max_tensor.flat<float>()(0);\\n \\n     OP_REQUIRES(context, input.dims() == 4,\\n                 errors::InvalidArgument(\"input must be 4-dimensional\",\\n@@ -203,6 +233,33 @@ class QuantizedBatchNormOp : public OpKernel {\\n     OP_REQUIRES(context, gamma.dims() == 1,\\n                 errors::InvalidArgument(\"gamma must be 1-dimensional\",\\n                                         gamma.shape().DebugString()));\\n+    OP_REQUIRES(context, mean.NumElements() > 1,\\n+                errors::InvalidArgument(\"Must have at least a mean value\",\\n+                                        gamma.shape().DebugString()));\\n+    OP_REQUIRES(context, mean.NumElements() > 1,\\n+                errors::InvalidArgument(\"Must have at least a mean value\"));\\n+    const auto last_dim = input.shape().dims() - 1;\\n+    OP_REQUIRES(context,\\n+                mean.shape().dim_size(0) == input.shape().dim_size(last_dim),\\n+                errors::InvalidArgument(\"Must provide as many means as the \"\\n+                                        \"last dimension of the input tensor: \",\\n+                                        mean.shape().DebugString(), \" vs. \",\\n+                                        input.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == var.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and variance tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", var.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == beta.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and beta tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", beta.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == gamma.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and gamma tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", gamma.shape().DebugString()));\\n \\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"add missing validation in `quantizedbatchnormwithglobalnormalization`\n\npiperorigin-revid: 370123451\nchange-id: id234d6dab1ec21230bb8e503dba30f899af87f33",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('370123451', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_batch_norm_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3126,
            "vuln_id":"GHSA-vhm6-gw82-6f8j",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/703745d0ed3948623153117d761ce48514e2f281'}",
            "dataset":"osv",
            "summary":"Cross site scripting in LibreNMS LibreNMS prior to version 22.2.2 is vulnerable to cross-site scripting.",
            "published_date":"2022-02-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/703745d0ed3948623153117d761ce48514e2f281",
            "commit_sha":"703745d0ed3948623153117d761ce48514e2f281",
            "patch":"SINGLE",
            "chain_ord":"['703745d0ed3948623153117d761ce48514e2f281']",
            "before_first_fix_commit":"{'09929bd6865e54034db591ea37f5548406f5e716'}",
            "last_fix_commit":"703745d0ed3948623153117d761ce48514e2f281",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 14:28:31",
            "message":"Resolved XSS issue from alert rule list modal (#13805)",
            "author":"Neil Lathwood",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'includes\/html\/modal\/alert_rule_list.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/703745d0ed3948623153117d761ce48514e2f281\/includes%2Fhtml%2Fmodal%2Falert_rule_list.inc.php', 'patch': '@@ -62,7 +62,7 @@\\n                             echo \"\\n                                 <tr>\\n                                     <td>{$rule[\\'name\\']}<\/td>\\n-                                    <td><i>\" . htmlentities($rule_display) . \"<\/i><\/td>\\n+                                    <td><i>\" . htmlentities(strip_tags($rule_display)) . \"<\/i><\/td>\\n                                     <td>{$rule[\\'severity\\']}<\/td>\\n                                     <td>{$rule[\\'id\\']}<\/td>\\n                                 <\/tr>'}}",
            "message_norm":"resolved xss issue from alert rule list modal (#13805)",
            "language":"no",
            "entities":"[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/modal\/alert_rule_list.inc.php'])",
            "num_files":1.0
        },
        {
            "index":2545,
            "vuln_id":"GHSA-p9pc-299p-vxgp",
            "cwe_id":"{'CWE-915'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/yargs\/yargs-parser\/commit\/63810ca1ae1a24b08293a4d971e70e058c7a41e2', 'https:\/\/github.com\/yargs\/yargs-parser\/commit\/1c417bd0b42b09c475ee881e36d292af4fa2cc36'}",
            "dataset":"osv",
            "summary":"yargs-parser Vulnerable to Prototype Pollution Affected versions of `yargs-parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs-parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.",
            "published_date":"2020-09-04",
            "chain_len":2,
            "project":"https:\/\/github.com\/yargs\/yargs-parser",
            "commit_href":"https:\/\/github.com\/yargs\/yargs-parser\/commit\/1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "commit_sha":"1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "patch":"MULTI",
            "chain_ord":"['63810ca1ae1a24b08293a4d971e70e058c7a41e2', '1c417bd0b42b09c475ee881e36d292af4fa2cc36']",
            "before_first_fix_commit":"{'e93a345e1e585ba5df97c1da438673e7f2e8909b'}",
            "last_fix_commit":"1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/10\/2021, 19:14:27",
            "message":"fix(security): address GHSA-p9pc-299p-vxgp (#362)\n\nUpdate release automation to allow for back ports.",
            "author":"Benjamin E. Coe",
            "comments":"{'com_1': {'author': 'kennethalegre19', 'datetime': '10\/19\/2021, 05:07:29', 'body': '`.github\/workflows\/release-please.yml'}}",
            "stats":"{'additions': 15, 'deletions': 0, 'total': 15}",
            "files":"{'.github\/workflows\/release-please.yml': {'additions': 15, 'deletions': 0, 'changes': 15, 'status': 'added', 'raw_url': 'https:\/\/github.com\/yargs\/yargs-parser\/raw\/1c417bd0b42b09c475ee881e36d292af4fa2cc36\/.github%2Fworkflows%2Frelease-please.yml', 'patch': '@@ -0,0 +1,15 @@\\n+on:\\n+   push:\\n+     branches:\\n+       - v5.x.x\\n+name: release-please\\n+jobs:\\n+  release-please:\\n+    runs-on: ubuntu-latest\\n+    steps:\\n+      - uses: google-github-actions\/release-please-action@v2\\n+        with:\\n+          token: ${{ secrets.GITHUB_TOKEN }}\\n+          release-type: node\\n+          package-name: yargs-parser\\n+          default-branch: v5.x.x'}}",
            "message_norm":"fix(security): address ghsa-p9pc-299p-vxgp (#362)\n\nupdate release automation to allow for back ports.",
            "language":"en",
            "entities":"[('fix(security', 'SECWORD', ''), ('ghsa-p9pc-299p-vxgp', 'VULNID', 'GHSA'), ('#362', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['.github\/workflows\/release-please.yml'])",
            "num_files":1.0
        },
        {
            "index":743,
            "vuln_id":"GHSA-6445-fm66-fvq2",
            "cwe_id":"{'CWE-190'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b51b82fe65ebace4475e3c54eb089c18a4403f1c', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a68f68061e263a88321c104a6c911fe5598050a8'}",
            "dataset":"osv",
            "summary":"Integer overflows in Tensorflow ### Impact \nThe [implementation of `AddManySparseToTensorsMap`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/sparse_tensors_map_ops.cc) is vulnerable to an integer overflow which results in a `CHECK`-fail when building new `TensorShape` objects (so, an assert failure based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices=[(0,0),(0,1),(0,2),(4,3),(5,0),(5,1)],\n    sparse_values=[1,1,1,1,1,1],\n    sparse_shape=[2**32,2**32],\n    container='',\n    shared_name='',\n    name=None)\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n### Patches\nWe have patched the issue in GitHub commits [b51b82fe65ebace4475e3c54eb089c18a4403f1c](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b51b82fe65ebace4475e3c54eb089c18a4403f1c) and [a68f68061e263a88321c104a6c911fe5598050a8](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a68f68061e263a88321c104a6c911fe5598050a8).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a68f68061e263a88321c104a6c911fe5598050a8",
            "commit_sha":"a68f68061e263a88321c104a6c911fe5598050a8",
            "patch":"MULTI",
            "chain_ord":"['b51b82fe65ebace4475e3c54eb089c18a4403f1c', 'a68f68061e263a88321c104a6c911fe5598050a8']",
            "before_first_fix_commit":"{'e8f4be7958736823b9f56090611ec2fb09824d51'}",
            "last_fix_commit":"a68f68061e263a88321c104a6c911fe5598050a8",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/10\/2021, 00:17:26",
            "message":"Replace faulty overflow check with a builder for `TensorShape`.\n\nPrevents an integer overflow that was not caught before.\n\nPiperOrigin-RevId: 415381595\nChange-Id: I76585ddedc912bd9f4a390aeafa8e2ced1a28863",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 15, 'total': 18}",
            "files":"{'tensorflow\/core\/kernels\/sparse_tensors_map_ops.cc': {'additions': 3, 'deletions': 15, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a68f68061e263a88321c104a6c911fe5598050a8\/tensorflow%2Fcore%2Fkernels%2Fsparse_tensors_map_ops.cc', 'patch': '@@ -263,22 +263,10 @@ class AddManySparseToTensorsMapOp : public SparseTensorAccessingOp {\\n             \"Rank of input SparseTensor should be > 1, but saw rank: \", rank));\\n \\n     auto input_shape_vec = input_shape->vec<int64_t>();\\n-    int new_num_elements = 1;\\n-    bool overflow_ocurred = false;\\n-    for (int i = 0; i < input_shape_vec.size(); i++) {\\n-      new_num_elements =\\n-          MultiplyWithoutOverflow(new_num_elements, input_shape_vec(i));\\n-      if (new_num_elements < 0) {\\n-        overflow_ocurred = true;\\n-        break;\\n-      }\\n-    }\\n-\\n-    OP_REQUIRES(\\n-        context, !overflow_ocurred,\\n-        errors::Internal(\"Encountered overflow from large input shape.\"));\\n \\n-    TensorShape tensor_input_shape(input_shape_vec);\\n+    TensorShape tensor_input_shape;\\n+    OP_REQUIRES_OK(context, TensorShape::BuildTensorShape(input_shape_vec,\\n+                                                          &tensor_input_shape));\\n     gtl::InlinedVector<int64_t, 8> std_order(rank);\\n     std::iota(std_order.begin(), std_order.end(), 0);\\n     SparseTensor input_st;'}}",
            "message_norm":"replace faulty overflow check with a builder for `tensorshape`.\n\nprevents an integer overflow that was not caught before.\n\npiperorigin-revid: 415381595\nchange-id: i76585ddedc912bd9f4a390aeafa8e2ced1a28863",
            "language":"en",
            "entities":"[('overflow', 'SECWORD', ''), ('prevents', 'ACTION', ''), ('integer overflow', 'SECWORD', ''), ('415381595', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_tensors_map_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":847,
            "vuln_id":"GHSA-6hfq-h8hq-87mf",
            "cwe_id":"{'CWE-444'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/hyperium\/hyper\/commit\/8f93123efef5c1361086688fe4f34c83c89cec02'}",
            "dataset":"osv",
            "summary":"HTTP Request Smuggling in hyper ### Summary\n\nhyper's HTTP server code had a flaw that incorrectly understands some requests with multiple transfer-encoding headers to have a chunked payload, when it should have been rejected as illegal. This combined with an upstream HTTP proxy that understands the request payload boundary differently can result in \"request smuggling\" or \"desync attacks\".\n\n### Vulnerability\n\nThe flaw was introduced in https:\/\/github.com\/hyperium\/hyper\/commit\/26417fc24a7d05df538e0f39239b373c5c3d61f6, released in v0.12.0.\n\nConsider this example request:\n\n```\nPOST \/yolo HTTP\/1.1\nTransfer-Encoding: chunked\nTransfer-Encoding: cow\n```\n\nThis request *should* be rejected, according to RFC 7230, since it has a `Transfer-Encoding` header, but after folding, it does not end in `chunked`. hyper would notice the `chunked` in the first line, and then check the second line, and thanks to a missing boolean assignment, *not* set the error condition. hyper would treat the payload as being `chunked`. By differing from the spec, it is possible to send requests like these to endpoints that have different HTTP implementations, with different interpretations of the payload semantics, and cause \"desync attacks\".\n\nThere are several parts of the spec that must also be checked, and hyper correctly handles all of those. Additionally, hyper's *client* does not allow sending requests with improper headers, so the misunderstanding cannot be propagated further.\n\nRead more about desync attacks: https:\/\/portswigger.net\/research\/http-desync-attacks-request-smuggling-reborn\n\n### Impact\n\nTo determine if vulnerable, all these things must be true:\n\n- **Using hyper as an HTTP *server*.** The client is not affected.\n- **Using HTTP\/1.1.** HTTP\/2 does not use `transfer-encoding`.\n- **Using a vulnerable HTTP proxy upstream to hyper.** If an upstream proxy correctly rejects the illegal transfer-encoding headers, the desync attack cannot succeed. If there is *no* proxy upstream of hyper, hyper cannot *start* the desync attack, as the client will repair the headers before forwarding.\n\n### Patches\n\nWe have released and backported the following patch versions:\n\n- v0.14.3\n- v0.13.10\n\n### Workarounds\n\nBesides upgrading hyper, you can take the following options:\n\n- Reject requests that contain a `transfer-encoding` header.\n- Ensure any upstream proxy handles `transfer-encoding` correctly.\n\n### Credits\n\nThis issue was initially reported by ZeddYu Lu From Qi An Xin Technology Research Institute.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/hyperium\/hyper",
            "commit_href":"https:\/\/github.com\/hyperium\/hyper\/commit\/8f93123efef5c1361086688fe4f34c83c89cec02",
            "commit_sha":"8f93123efef5c1361086688fe4f34c83c89cec02",
            "patch":"SINGLE",
            "chain_ord":"['8f93123efef5c1361086688fe4f34c83c89cec02']",
            "before_first_fix_commit":"{'4d2125c67c8087de863f74278a017c4caf37e6a9'}",
            "last_fix_commit":"8f93123efef5c1361086688fe4f34c83c89cec02",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/05\/2021, 21:27:30",
            "message":"fix(http1): fix server misinterpretting multiple Transfer-Encoding headers\n\nWhen a request arrived with multiple `Transfer-Encoding` headers, hyper\nwould check each if they ended with `chunked`. It should have only\nchecked if the *last* header ended with `chunked`.\n\nSee https:\/\/github.com\/hyperium\/hyper\/security\/advisories\/GHSA-6hfq-h8hq-87mf",
            "author":"Sean McArthur",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'src\/proto\/h1\/role.rs': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hyperium\/hyper\/raw\/8f93123efef5c1361086688fe4f34c83c89cec02\/src%2Fproto%2Fh1%2Frole.rs', 'patch': '@@ -213,6 +213,8 @@ impl Http1Transaction for Server {\\n                     if headers::is_chunked_(&value) {\\n                         is_te_chunked = true;\\n                         decoder = DecodedLength::CHUNKED;\\n+                    } else {\\n+                        is_te_chunked = false;\\n                     }\\n                 }\\n                 header::CONTENT_LENGTH => {\\n@@ -1444,6 +1446,16 @@ mod tests {\\n             \"transfer-encoding doesn\\'t end in chunked\",\\n         );\\n \\n+        parse_err(\\n+            \"\\\\\\n+             POST \/ HTTP\/1.1\\\\r\\\\n\\\\\\n+             transfer-encoding: chunked\\\\r\\\\n\\\\\\n+             transfer-encoding: afterlol\\\\r\\\\n\\\\\\n+             \\\\r\\\\n\\\\\\n+             \",\\n+            \"transfer-encoding multiple lines doesn\\'t end in chunked\",\\n+        );\\n+\\n         \/\/ http\/1.0\\n \\n         assert_eq!('}}",
            "message_norm":"fix(http1): fix server misinterpretting multiple transfer-encoding headers\n\nwhen a request arrived with multiple `transfer-encoding` headers, hyper\nwould check each if they ended with `chunked`. it should have only\nchecked if the *last* header ended with `chunked`.\n\nsee https:\/\/github.com\/hyperium\/hyper\/security\/advisories\/ghsa-6hfq-h8hq-87mf",
            "language":"en",
            "entities":"[('fix(http1', 'ACTION', ''), ('fix', 'ACTION', ''), ('server', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('https:\/\/github.com\/hyperium\/hyper\/security\/advisories\/ghsa-6hfq-h8hq-87mf', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/proto\/h1\/role.rs'])",
            "num_files":1.0
        },
        {
            "index":776,
            "vuln_id":"GHSA-67j9-c52g-w2q9",
            "cwe_id":"{'CWE-863'}",
            "score":4.9,
            "chain":"{'https:\/\/github.com\/spiral-project\/ihatemoney\/commit\/8d77cf5d5646e1d2d8ded13f0660638f57e98471'}",
            "dataset":"osv",
            "summary":"Authorization Bypass in I hate money ### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney\/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a\/ihatemoney\/models.py b\/ihatemoney\/models.py\nindex fe7b519..5691c75 100644\n--- a\/ihatemoney\/models.py\n+++ b\/ihatemoney\/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https:\/\/ihatemoney.readthedocs.io\/en\/latest\/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `\/api\/projects\/<project>\/members\/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http:\/\/$SERVER\/api\/projects\/attackerProject\/members\/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http:\/\/$SERVER\/attackerProject\/\n\n2) Editing a member through the web interface at `\/<project>\/members\/<personID>\/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http:\/\/$SERVER\/attackerProject\/members\/42\/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `\/api\/projects\/<project>\/members\/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http:\/\/$SERVER\/api\/projects\/attackerProject\/members\/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.",
            "published_date":"2020-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/spiral-project\/ihatemoney",
            "commit_href":"https:\/\/github.com\/spiral-project\/ihatemoney\/commit\/8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "commit_sha":"8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "patch":"SINGLE",
            "chain_ord":"['8d77cf5d5646e1d2d8ded13f0660638f57e98471']",
            "before_first_fix_commit":"{'040d76af83411fb58ab400dc4eac909191a3e5fa'}",
            "last_fix_commit":"8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/17\/2020, 15:43:33",
            "message":"Fix unauthorized access and modification of project data (CVE-2020-15120)\n\nAn authenticated member of one project can modify and delete members of\nanother project, without knowledge of this other project's private\ncode. This can be further exploited to access all bills of another project\nwithout knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new\nproject. An attacker can create a new project and then use it to become\nauthenticated and exploit this flaw. As such, the exposure is similar to\nan unauthenticated attack, because it is trivial to become authenticated.\n\nThis issue was caused by a wrong database queries in PersonQuery.\n\nFor more details, see https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/GHSA-67j9-c52g-w2q9",
            "author":"Baptiste Jonglez",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'ihatemoney\/models.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/spiral-project\/ihatemoney\/raw\/8d77cf5d5646e1d2d8ded13f0660638f57e98471\/ihatemoney%2Fmodels.py', 'patch': '@@ -380,7 +380,7 @@ class PersonQuery(BaseQuery):\\n         def get_by_name(self, name, project):\\n             return (\\n                 Person.query.filter(Person.name == name)\\n-                .filter(Project.id == project.id)\\n+                .filter(Person.project_id == project.id)\\n                 .one()\\n             )\\n \\n@@ -389,7 +389,7 @@ def get(self, id, project=None):\\n                 project = g.project\\n             return (\\n                 Person.query.filter(Person.id == id)\\n-                .filter(Project.id == project.id)\\n+                .filter(Person.project_id == project.id)\\n                 .one()\\n             )'}}",
            "message_norm":"fix unauthorized access and modification of project data (cve-2020-15120)\n\nan authenticated member of one project can modify and delete members of\nanother project, without knowledge of this other project's private\ncode. this can be further exploited to access all bills of another project\nwithout knowledge of this other project's private code.\n\nwith the default configuration, anybody is allowed to create a new\nproject. an attacker can create a new project and then use it to become\nauthenticated and exploit this flaw. as such, the exposure is similar to\nan unauthenticated attack, because it is trivial to become authenticated.\n\nthis issue was caused by a wrong database queries in personquery.\n\nfor more details, see https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/ghsa-67j9-c52g-w2q9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('cve-2020-15120', 'VULNID', 'CVE'), ('exploited', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('exploit', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('unauthenticated', 'SECWORD', ''), ('attack', 'FLAW', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/ghsa-67j9-c52g-w2q9', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ihatemoney\/models.py'])",
            "num_files":1.0
        },
        {
            "index":2881,
            "vuln_id":"GHSA-r6cm-wg48-rh2r",
            "cwe_id":"{'CWE-359', 'CWE-863'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/44af526a6fc5e898bc1e0132b2af9eb3a9b2c466'}",
            "dataset":"osv",
            "summary":"Exposure of Private Personal Information to an Unauthorized Actor in alextselegidis\/easyappointments The software is a booking management system that has a public form to place bookings, and a private area for the calendar and management of services, users, settings, etc. There is a backend API that allows data manipulation, including listing the appointments for a specific time range. This happens on this endpoint: \/index.php\/backend_api\/ajax_get_calendar_events Unfortunately, there is no authentication \/ permissions-check on that endpoint, the only required parameters in a POST request are \"startDate\", \"endDate\" and \"csrfToken\". Because the csrfToken can be obtained by any unauthenticated user just visiting the public form (and is valid for the backend as well), any attacker can query the backend API and obtain all sorts of private information about the appointment, in JSON format.",
            "published_date":"2022-03-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/alextselegidis\/easyappointments",
            "commit_href":"https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/44af526a6fc5e898bc1e0132b2af9eb3a9b2c466",
            "commit_sha":"44af526a6fc5e898bc1e0132b2af9eb3a9b2c466",
            "patch":"SINGLE",
            "chain_ord":"['44af526a6fc5e898bc1e0132b2af9eb3a9b2c466']",
            "before_first_fix_commit":"{'13e81c80b17dfe207b2bdddb395a1345217f2548'}",
            "last_fix_commit":"44af526a6fc5e898bc1e0132b2af9eb3a9b2c466",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/08\/2022, 17:27:15",
            "message":"Release v1.4.3",
            "author":"Alex Tselegidis",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'application\/config\/config.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alextselegidis\/easyappointments\/raw\/44af526a6fc5e898bc1e0132b2af9eb3a9b2c466\/application%2Fconfig%2Fconfig.php', 'patch': \"@@ -8,7 +8,7 @@\\n | Declare some of the global config values of Easy!Appointments.\\n |\\n *\/\\n-$config['version'] = '1.4.3-beta.1'; \/\/ This must be changed manually.\\n+$config['version'] = '1.4.3'; \/\/ This must be changed manually.\\n $config['release_label'] = ''; \/\/ Leave empty for no title or add Alpha, Beta etc ...\\n $config['debug'] = Config::DEBUG_MODE;\\n \\n@@ -314,7 +314,7 @@\\n | new release.\\n |\\n *\/\\n-$config['cache_busting_token'] = '8UC842';\\n+$config['cache_busting_token'] = '6398SW';\\n \\n \/*\\n |--------------------------------------------------------------------------\"}}",
            "message_norm":"release v1.4.3",
            "language":"sl",
            "entities":"[('v1.4.3', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['application\/config\/config.php'])",
            "num_files":1.0
        },
        {
            "index":1972,
            "vuln_id":"GHSA-h3fg-h5v3-vf8m",
            "cwe_id":"{'CWE-352'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/solidusio\/solidus\/commit\/a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6', 'https:\/\/github.com\/solidusio\/solidus\/commit\/4d17cacf066d9492fc04eb3a0b16084b47376d81'}",
            "dataset":"osv",
            "summary":"CSRF forgery protection bypass in solidus_frontend ### Impact\nCSRF vulnerability that allows a malicious site to add an item to the user's cart without their knowledge.\n\nAll `solidus_frontend` versions are affected. If you're using your own storefront, please, follow along to make sure you're not affected.\n\nTo reproduce the issue:\n\n- Pick the id for a variant with available stock. From the rails console:\n\n  ```ruby\n  Spree::Variant.in_stock.pluck(:id)\n  ```\n\n  Say we pick variant id `2`.\n\n- Launch your application, for instance, on `http:\/\/localhost:3000`:\n\n  ```bash\n  bin\/rails server\n  ```\n\n- Open your browser dev tools.\n\n- Click on whatever link in your store.\n\n- Copy the value of the `Cookie` request header sent for the previous request from your browser dev tools.\n\n- Execute the following, using your previously selected variant id and the value of the `Cookie` header (notice how it doesn't contain any authentication token):\n\n  ```bash\n  curl -X POST -d \"variant_id=2&quantity=1\" -H \"Cookie: guest_token=eyJfcmFpbHMiOnsibWVzc2FnZSI6IklrWlRVMWRQWnpKMVZVdFNXRzlPVW1aaWJHTjZZa0VpIiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUuZ3Vlc3RfdG9rZW4ifX0%3D--5006ba5d346f621c760a29b6a797bf351d17d1b8; _sandbox_session=vhutu5%2FL9NmWrUpGc3DxrFA%2FFsQD1dHn1cNsD7nvE84zcjWf17Af4%2F%2F2Vab3md71b6KTb9NP6WktdXktpwH4eU01jEGIBXG5%2BMzW5nL0nb4W269qk1io4LYljvoOg8%2BZVll7oJCVkJLKKh0sSoS0Kg8j%2FCHHs%2BsShohP%2BGnA%2Bfr9Ub8H6HofpSmloSpsfHHygmX0ho03fEgzHJ4DD5wJctaNKwg7NhVikHh5kgIPPHl84OGCgv3p2oe9jR19HTxOKq7BtyvDd7XZsecWhkcfS8BPnvDDUWZG6qpAEFI5kWo81KkpSJ%2Bp6Q1HOo8%3D--n3G2vgaDG7VS%2B%2FhF--ZTjxBAkfGG3hpr4GRQ2S1Q%3D%3D; __profilin=p%3Dt\" http:\/\/localhost:3000\/orders\/populate\n  ```\n\n- Reload your browser and look at how your cart got updated.\n\n### Patches\n\nPlease, upgrade `solidus` to versions `3.1.5`, `3.0.5` or `2.11.14`.\n\nAfter upgrading, make sure you read the \"Upgrade notes\"  section below.\n\n### Upgrade notes\n\nThe patch adds CSRF token verification to the \"Add to cart\" action. Adding forgery protection to a form that missed it can have some side effects.\n\n#### `InvalidAuthenticityToken` errors\n\nIf you're using the `:exception` strategy, it's likely that after upgrading, you'll see more `ActionController::InvalidAuthenticityToken` errors popping out in your logs. Due to browser-side cache, a form can be re-rendered and sent without any attached request cookie (for instance, when re-opening a mobile browser). That will cause an authentication error, as the sent token won't match with the one in the session (none in this case). That's a known problem in the Rails community (see https:\/\/github.com\/rails\/rails\/issues\/21948), and, at this point, there's no perfect solution.\n\nAny attempt to mitigate the issue should be seen at the application level. For an excellent survey of all the available options, take a look at https:\/\/github.com\/betagouv\/demarches-simplifiees.fr\/blob\/5b4f7f9ae9eaf0ac94008b62f7047e4714626cf9\/doc\/adr-csrf-forgery.md. The latter is a third-party link. As the information is relevant here, we're going to copy it below, but it should be clear that all the credit goes to @kemenaran:\n\n> # Protecting against request forgery using CRSF tokens\n> \n> ## Context\n> \n> Rails has CSRF protection enabled by default, to protect against POST-based CSRF attacks.\n> \n> To protect from this, Rails stores two copies of a random token (the so-named CSRF token) on each request:\n> - one copy embedded in each HTML page,\n> - another copy in the user session.\n> \n> When performing a POST request, Rails checks that the two copies match \u2013 and otherwise denies the request. This protects against an attacker that would generate a form secretly pointing to our website: the attacker can't read the token in the session, and so can't post a form with a valid token.\n> \n> The problem is that, much more often, this has false positives. There are several cases for that, including:\n> \n> 1. The web browser (often mobile) loads a page containing a form, then is closed by the user. Later, when the browser is re-opened, it restores the page from the cache. But the session cookie has expired, and so is not restored \u2013 so the copy of the CSRF token stored in the session is missing. When the user submits the form, they get an \"InvalidAuthenticityToken\" exception.\n> \n> 2. The user attempts to fill a form, and gets an error message (usually in response to a POST request). They close the browser. When the browser is re-opened, it attempts to restore the page. On Chrome this is blocked by the browser, because the browser denies retrying a (probably non-idempotent) POST request. Safari however happily retries the POST request \u2013 but without sending any cookies (in an attempt to avoid having unexpected side-effects). So the copy of the CSRF token in the session is missing (because no cookie was sent), and the user get an \"InvalidAuthenticityToken\" exception.\n> \n> ## Options considered\n> \n> ### Extend the session cookie duration\n> \n> We can configure the session cookie to be valid for a longer time (like 2 weeks).\n> \n> Pros:\n> - It solves 1., because when the browser restores the page, the session cookie is still valid.\n> \n> Cons:\n> - Users would be signed-in for a much longer time by default, which has unacceptable security implications.\n> - It doesn't solve 2. (because Safari doesn't send any cookie when restoring a page from a POST request)\n> \n> ### Change the cache parameters\n> \n> We can send a HTTP cache header stating 'Cache-Control: no-store, no-cache'. This instructs the browser to never keep any copy of the page, and to always make a request to the server to restore it.\n> \n> This solution was attempted during a year in production, and solved 1. \u2013 but also introduced another type of InvalidAuthenticityToken errors. In that scenario, the user attempts to fill a form, and gets an error message (usually in response to a POST request). They then navigate on another domain (like France Connect), then hit the \"Back\" button. Crossing back the domain boundary may cause the browser to either block the request or retry an invalid POST request.\n> \n> Pros:\n> - It solves 1., because on relaunch the browser requests a fresh page again (instead of serving it from its cache), thus retrieving a fresh session and a fresh matching CSRF token.\n> \n> Cons:\n> - It doesn't solve 2.\n> - It causes another type of InvalidAuthenticityToken errors.\n> \n> ### Using a null-session strategy\n> \n> We can change the default protect_from_forgery strategy to :null_session. This makes the current request use an empty session for the request duration.\n> \n> Pros:\n> - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted.\n> \n> Cons:\n> - The user is asked to sign-in only after filling and submitting the form, losing their time and data\n> - The user will not be redirected to their original page after signing-in\n> - It has potential security implications: as the (potentically malicious) request runs anyway, variables cached by a controller before the Null session is created may allow the form submission to succeed anyway (https:\/\/www.veracode.com\/blog\/managing-appsec\/when-rails-protectfromforgery-fails)\n> \n> ### Using a reset-session strategy\n> \n> We can change the default protect_from_forgery strategy to :reset_session. This clears the user session permanently, logging them out until they log in again.\n> \n> Pros: \n> - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted.\n> \n> Cons:\n> - A forgery error in a browser tab will disconnect the user in all its open tabs\n> - It has potential security implications: as the (potentically malicious) request runs anyway, variables cached by a controller before the Null session is created may allow the form submission to succeed anyway (https:\/\/www.veracode.com\/blog\/managing-appsec\/when-rails-protectfromforgery-fails)\n> - It allows an attacker to disconnect an user on demand, which is not only inconvenient, but also has security implication (the attacker could then log the user on it's own attacker account, pretending to be the user account)\n> \n> ### Redirect to login form\n> \n> When a forgery error occurs, we can instead redirect to the login form.\n> \n> Pros:\n> - It kind of solves 1., by redirecting to a \"Please sign-in\" page when a stale form is submitted (but the user data is lost).\n> - It kind of solves 2., by redirecting to a \"Please sign-in\" page when a previously POSTed form is reloaded.\n> \n> Cons:\n> - Not all forms require authentication \u2013 so for public forms there is no point redirecting to the login form. \n> - The user will not be redirected to their original page after signing-in (because setting the redirect path is a state-changing action, and it is dangerous to let an unauthorized request changing the state \u2013 an attacker could control the path where an user is automatically redirected to.)\n> - The implementation is finicky, and may introduce security errors. For instance, a naive implementation that catches the exception and redirect_to the sign-in page will prevent Devise from running a cleanup code \u2013 which means the user will still be logged, and the CSRF protection is bypassed. However a well-tested implementation that lets Devise code run should avoid these pittfalls.\n> \n> ### Using a long-lived cookie for CSRF tokens\n> \n> Instead of storing the CSRF token in the session cookie (which is deleted when the browser is closed), we can instead store it in a longer-lived cookie. For this we need to patch Rails.\n> \n> Pros:\n> - It solves 1., because when the user submits a stale form, even if the session cookie because stale, the long-lived CSRF cookie is still valid.\n> \n> Cons:\n> - It doesn't solve 2., because when Safari retries a POST request, it sends none of the cookies (not even long-lived ones).\n> - Patching Rails may introduce security issues (now or in the future)\n\n#### Broken behavior due to session expiration + template cache\n\nAlthough pretty unlikely, you should make sure that your current setup for cache\/session expiration is compatible. The upgrade can break the addition of products to the cart if both:\n\n- The \"Add to cart\" form is being cached (usually along with the variant information).\n\n- A user session is reset at every or every few requests.\n\nThe token validation depends on the issuing and consuming sessions being the same. If a product page is cached with the token in it, it can become stale on a subsequent rendering if the session changes.\n\nTo check that you're safe, after having upgraded locally, go through the following steps:\n\n- Enable cache on dev mode:\n\n  ```bash\n  bin\/rails dev:cache\n  ```\n\n- Visit the page for a variant with stock.\n\n- Reload that page several times.\n\n- Click on the \"Add to cart\"  button.\n\n- Remember to rerun `bin\/rails dev:cache` to turn off cache again.\n\nNo error or session reset should happen.\n\nOtherwise, you can try with:\n\n- Revisiting how your session gets expired.\n- Changing the caching strategy to exclude the token.\n\n#### Using weaker CSRF protection strategies\n\nIt's also important to understand that a complete fix will only be in place when using the `:exception` forgery protection strategy. The `solidus_frontend` engine can't do pretty much anything otherwise. Using weaker CSRF strategies should be an informed and limited decision made by the application team. After the upgrade:\n\n- An app using `:null_session` should also be safe, but there will be side effects. That strategy runs with a null object session. As such, no order and no user is found on it. A new `cart` state order is created in the database, associated with no user. Next time the user visits the site, they won't find any difference in its cart state.\n\n- An app using `:reset_session` is not entirely safe. That strategy resets the session. That means that registered users will be logged out. Next time a user visits, they'll see the cart with the items added during the CSRF attack, although it won't be associated with their account in the case of registered users.\n\n#### Reversing the update\n\nIf you still want to deploy the upgraded version before changing your application code (if the latter is needed), you can add the following workaround to your `config\/application.rb` (however, take into account that you'll keep being vulnerable):\n\n```ruby\nconfig.after_initialize do\n  Spree::OrdersController.skip_before_action :verify_authenticity_token, only: [:populate]\nend\n```\n\n### Workarounds\n\nIf an upgrade is not an option, you can work around the issue by adding the following to `config\/application.rb`:\n\n```ruby\nconfig.after_initialize do\n  Spree::OrdersController.protect_from_forgery with: ApplicationController.forgery_protection_strategy.name.demodulize.underscore.to_sym, only: [:populate]\nend\n```\n\nHowever, go through the same safety check detailed on \"Upgrade notes\" above.\n\n### References\n\n- [CSRF on the Rails guides](https:\/\/guides.rubyonrails.org\/security.html#cross-site-request-forgery-csrf)\n- [How CSRF tokens are generated and validated on Rails](https:\/\/medium.com\/rubyinside\/a-deep-dive-into-csrf-protection-in-rails-19fa0a42c0ef)\n- [Solidus security](https:\/\/solidus.io\/security\/)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an [issue](https:\/\/github.com\/solidusio\/solidus\/issues) or a [discussion](https:\/\/github.com\/solidusio\/solidus\/discussions) in Solidus.\n* Email us at [security@solidus.io](mailto:security@soliidus.io)\n* Contact the core team on [Slack](http:\/\/slack.solidus.io\/)",
            "published_date":"2022-01-06",
            "chain_len":2,
            "project":"https:\/\/github.com\/solidusio\/solidus",
            "commit_href":"https:\/\/github.com\/solidusio\/solidus\/commit\/a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6",
            "commit_sha":"a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6",
            "patch":"MULTI",
            "chain_ord":"['4d17cacf066d9492fc04eb3a0b16084b47376d81', 'a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6']",
            "before_first_fix_commit":"{'4d17cacf066d9492fc04eb3a0b16084b47376d81', 'c6b892696881f88d209efaedd8bb378e8261953f'}",
            "last_fix_commit":"a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/20\/2021, 08:25:33",
            "message":"Merge pull request from GHSA-h3fg-h5v3-vf8m\n\nProtect `Spree::OrdersController#populate` against CSRF attacks",
            "author":"Marc Busqu\u00e9",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 1, 'total': 1}",
            "files":"{'frontend\/app\/controllers\/spree\/orders_controller.rb': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/solidusio\/solidus\/raw\/a1b9bf7f24f9b8684fc4d943eacb02b1926c77c6\/frontend%2Fapp%2Fcontrollers%2Fspree%2Forders_controller.rb', 'patch': \"@@ -10,7 +10,6 @@ class OrdersController < Spree::StoreController\\n     before_action :assign_order, only: :update\\n     # note: do not lock the #edit action because that's where we redirect when we fail to acquire a lock\\n     around_action :lock_order, only: :update\\n-    skip_before_action :verify_authenticity_token, only: [:populate]\\n \\n     def show\\n       @order = Spree::Order.find_by!(number: params[:id])\"}}",
            "message_norm":"merge pull request from ghsa-h3fg-h5v3-vf8m\n\nprotect `spree::orderscontroller#populate` against csrf attacks",
            "language":"en",
            "entities":"[('ghsa-h3fg-h5v3-vf8m', 'VULNID', 'GHSA'), ('protect', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('attacks', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['frontend\/app\/controllers\/spree\/orders_controller.rb'])",
            "num_files":1.0
        },
        {
            "index":2007,
            "vuln_id":"GHSA-h6rj-8r3c-9gpj",
            "cwe_id":"{'CWE-400'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mongodb\/bson-ruby\/commit\/976da329ff03ecdfca3030eb6efe3c85e6db9999'}",
            "dataset":"osv",
            "summary":"bson is vulnerable to denial of service due to incorrect regex validation BSON injection vulnerability in the legal? function in BSON (bson-ruby) gem before 3.0.4 for Ruby allows remote attackers to cause a denial of service (resource consumption) or inject arbitrary data via a crafted string.",
            "published_date":"2018-03-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/mongodb\/bson-ruby",
            "commit_href":"https:\/\/github.com\/mongodb\/bson-ruby\/commit\/976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "commit_sha":"976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "patch":"SINGLE",
            "chain_ord":"['976da329ff03ecdfca3030eb6efe3c85e6db9999']",
            "before_first_fix_commit":"{'7446d7c6764dfda8dc4480ce16d5c023e74be5ca'}",
            "last_fix_commit":"976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/04\/2015, 04:19:42",
            "message":"Use \\A \\z for checking regex on legal",
            "author":"Durran Jordan",
            "comments":"{'com_1': {'author': 'judofyr', 'datetime': '06\/04\/2015, 16:53:06', 'body': 'Yay! Thanks for a quick patch.'}, 'com_2': {'author': 'cheald', 'datetime': '06\/04\/2015, 19:17:08', 'body': \"Is the 1.x series going to see a patch? Users who aren't using bson_ext (such as users on JRuby) are still vulnerable.\"}, 'com_3': {'author': 'estolfo', 'datetime': '06\/04\/2015, 19:19:06', 'body': 'Yes, it will be released this afternoon.'}, 'com_4': {'author': 'estolfo', 'datetime': '06\/04\/2015, 19:20:30', 'body': \"It's in master already.\"}, 'com_5': {'author': 'cheald', 'datetime': '06\/04\/2015, 19:21:58', 'body': 'Perfect, thanks. https:\/\/github.com\/mongodb\/mongo-ruby-driver\/blob\/1.x-stable\/lib\/bson\/types\/object_id.rb for anyone else who ends up here looking for it, like me. :)'}, 'com_6': {'author': 'estolfo', 'datetime': '06\/04\/2015, 20:44:37', 'body': 'mongo 1.12.3 and bson 1.12.3 are released with this fix.'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/bson\/object_id.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mongodb\/bson-ruby\/raw\/976da329ff03ecdfca3030eb6efe3c85e6db9999\/lib%2Fbson%2Fobject_id.rb', 'patch': '@@ -282,7 +282,7 @@ def from_time(time, options = {})\\n       #\\n       # @since 2.0.0\\n       def legal?(string)\\n-        string.to_s =~ \/^[0-9a-f]{24}$\/i ? true : false\\n+        string.to_s =~ \/\\\\A[0-9a-f]{24}\\\\z\/i ? true : false\\n       end\\n \\n       # Executes the provided block only if the size of the provided object is'}}",
            "message_norm":"use \\a \\z for checking regex on legal",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/bson\/object_id.rb'])",
            "num_files":1.0
        },
        {
            "index":3067,
            "vuln_id":"GHSA-v6wr-fch2-vm5w",
            "cwe_id":"{'CWE-200'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/orientechnologies\/orientdb\/commit\/668ece96be210e742a4e2820a3085b215cf55104'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects com.orientechnologies:orientdb-studio server\/network\/protocol\/http\/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.",
            "published_date":"2018-10-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/orientechnologies\/orientdb",
            "commit_href":"https:\/\/github.com\/orientechnologies\/orientdb\/commit\/668ece96be210e742a4e2820a3085b215cf55104",
            "commit_sha":"668ece96be210e742a4e2820a3085b215cf55104",
            "patch":"SINGLE",
            "chain_ord":"['668ece96be210e742a4e2820a3085b215cf55104']",
            "before_first_fix_commit":"{'41fd20ab022e22bce32d62372dbe279693322086'}",
            "last_fix_commit":"668ece96be210e742a4e2820a3085b215cf55104",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/04\/2015, 14:45:12",
            "message":"Adopted SecureRandom to avoid predicable random numbers in session",
            "author":"lvca",
            "comments":null,
            "stats":"{'additions': 136, 'deletions': 135, 'total': 271}",
            "files":"{'server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java': {'additions': 136, 'deletions': 135, 'changes': 271, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/orientechnologies\/orientdb\/raw\/668ece96be210e742a4e2820a3085b215cf55104\/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Forientechnologies%2Forient%2Fserver%2Fnetwork%2Fprotocol%2Fhttp%2FOHttpSessionManager.java', 'patch': '@@ -1,141 +1,142 @@\\n \/*\\r\\n-    *\\r\\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n-    *  *\\r\\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n-    *  *  you may not use this file except in compliance with the License.\\r\\n-    *  *  You may obtain a copy of the License at\\r\\n-    *  *\\r\\n-    *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\\r\\n-    *  *\\r\\n-    *  *  Unless required by applicable law or agreed to in writing, software\\r\\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n-    *  *  See the License for the specific language governing permissions and\\r\\n-    *  *  limitations under the License.\\r\\n-    *  *\\r\\n-    *  * For more information: http:\/\/www.orientechnologies.com\\r\\n-    *\\r\\n-    *\/\\r\\n+ *\\r\\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n+ *  *\\r\\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n+ *  *  you may not use this file except in compliance with the License.\\r\\n+ *  *  You may obtain a copy of the License at\\r\\n+ *  *\\r\\n+ *  *       http:\/\/www.apache.org\/licenses\/LICENSE-2.0\\r\\n+ *  *\\r\\n+ *  *  Unless required by applicable law or agreed to in writing, software\\r\\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n+ *  *  See the License for the specific language governing permissions and\\r\\n+ *  *  limitations under the License.\\r\\n+ *  *\\r\\n+ *  * For more information: http:\/\/www.orientechnologies.com\\r\\n+ *\\r\\n+ *\/\\r\\n package com.orientechnologies.orient.server.network.protocol.http;\\r\\n \\r\\n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\\r\\n- import com.orientechnologies.common.log.OLogManager;\\r\\n- import com.orientechnologies.orient.core.Orient;\\r\\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n-\\r\\n- import java.util.HashMap;\\r\\n- import java.util.Iterator;\\r\\n- import java.util.Map;\\r\\n- import java.util.Map.Entry;\\r\\n- import java.util.Random;\\r\\n- import java.util.TimerTask;\\r\\n+import com.orientechnologies.common.log.OLogManager;\\r\\n+import com.orientechnologies.orient.core.Orient;\\r\\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n+\\r\\n+import java.security.SecureRandom;\\r\\n+import java.util.HashMap;\\r\\n+import java.util.Iterator;\\r\\n+import java.util.Map;\\r\\n+import java.util.Map.Entry;\\r\\n+import java.util.Random;\\r\\n+import java.util.TimerTask;\\r\\n \\r\\n \/**\\r\\n-  * Handles the HTTP sessions such as a real HTTP Server.\\r\\n-  *\\r\\n-  * @author Luca Garulli\\r\\n-  *\/\\r\\n- public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n-   private int                              expirationTime;\\r\\n-   private Random                           random   = new Random();\\r\\n-\\r\\n-   protected OHttpSessionManager() {\\r\\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n-\\r\\n-     Orient.instance().scheduleTask(new TimerTask() {\\r\\n-       @Override\\r\\n-       public void run() {\\r\\n-         final int expired = checkSessionsValidity();\\r\\n-         if (expired > 0)\\r\\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n-       }\\r\\n-     }, expirationTime, expirationTime);\\r\\n-   }\\r\\n-\\r\\n-   public int checkSessionsValidity() {\\r\\n-     int expired = 0;\\r\\n-\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final long now = System.currentTimeMillis();\\r\\n-\\r\\n-       Entry<String, OHttpSession> s;\\r\\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n-         s = it.next();\\r\\n-\\r\\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n-           \/\/ REMOVE THE SESSION\\r\\n-           it.remove();\\r\\n-           expired++;\\r\\n-         }\\r\\n-       }\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-\\r\\n-     return expired;\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession[] getSessions() {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession getSession(final String iId) {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       final OHttpSession sess = sessions.get(iId);\\r\\n-       if (sess != null)\\r\\n-         sess.updateLastUpdatedOn();\\r\\n-       return sess;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n-       return id;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession removeSession(final String iSessionId) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       return sessions.remove(iSessionId);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public int getExpirationTime() {\\r\\n-     return expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public void setExpirationTime(int expirationTime) {\\r\\n-     this.expirationTime = expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public static OHttpSessionManager getInstance() {\\r\\n-     return instance;\\r\\n-   }\\r\\n- }\\r\\n+ * Handles the HTTP sessions such as a real HTTP Server.\\r\\n+ *\\r\\n+ * @author Luca Garulli\\r\\n+ *\/\\r\\n+public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n+  private int                              expirationTime;\\r\\n+  private Random                           random   = new SecureRandom();\\r\\n+\\r\\n+  protected OHttpSessionManager() {\\r\\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n+\\r\\n+    Orient.instance().scheduleTask(new TimerTask() {\\r\\n+      @Override\\r\\n+      public void run() {\\r\\n+        final int expired = checkSessionsValidity();\\r\\n+        if (expired > 0)\\r\\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n+      }\\r\\n+    }, expirationTime, expirationTime);\\r\\n+  }\\r\\n+\\r\\n+  public int checkSessionsValidity() {\\r\\n+    int expired = 0;\\r\\n+\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final long now = System.currentTimeMillis();\\r\\n+\\r\\n+      Entry<String, OHttpSession> s;\\r\\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n+        s = it.next();\\r\\n+\\r\\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n+          \/\/ REMOVE THE SESSION\\r\\n+          it.remove();\\r\\n+          expired++;\\r\\n+        }\\r\\n+      }\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+\\r\\n+    return expired;\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession[] getSessions() {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession getSession(final String iId) {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      final OHttpSession sess = sessions.get(iId);\\r\\n+      if (sess != null)\\r\\n+        sess.updateLastUpdatedOn();\\r\\n+      return sess;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n+      return id;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession removeSession(final String iSessionId) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      return sessions.remove(iSessionId);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public int getExpirationTime() {\\r\\n+    return expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public void setExpirationTime(int expirationTime) {\\r\\n+    this.expirationTime = expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public static OHttpSessionManager getInstance() {\\r\\n+    return instance;\\r\\n+  }\\r\\n+}'}}",
            "message_norm":"adopted securerandom to avoid predicable random numbers in session",
            "language":"en",
            "entities":"[('securerandom', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/src\/main\/java\/com\/orientechnologies\/orient\/server\/network\/protocol\/http\/OHttpSessionManager.java'])",
            "num_files":1.0
        },
        {
            "index":2603,
            "vuln_id":"GHSA-pm9p-9926-w68m",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/71ce93988ead4b561a8592168c72143907189f01'}",
            "dataset":"osv",
            "summary":"Denial of Service in ecstatic `ecstatic`, a simple static file server middleware, is vulnerable to denial of service. If a payload with a large number of null bytes (`%00`) is provided by an attacker it can crash ecstatic by running it out of memory.\n\n\n[Results from the original advisory](https:\/\/www.checkmarx.com\/advisories\/denial-of-service-dos-vulnerability-in-ecstatic-npm-package\/)\n\n```\nA payload of 22kB caused a lag of 1 second,\nA payload of 35kB caused a lag of 3 seconds,\nA payload of 86kB caused the server to crash\n```\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later.",
            "published_date":"2017-12-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/jfhbrook\/node-ecstatic",
            "commit_href":"https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/71ce93988ead4b561a8592168c72143907189f01",
            "commit_sha":"71ce93988ead4b561a8592168c72143907189f01",
            "patch":"SINGLE",
            "chain_ord":"['71ce93988ead4b561a8592168c72143907189f01']",
            "before_first_fix_commit":"{'2fceb40fb9eeaaba29f5d2c3b63583fefb04a130'}",
            "last_fix_commit":"71ce93988ead4b561a8592168c72143907189f01",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/09\/2016, 16:37:39",
            "message":"Remove stripping of null bytes\n\nThis was at one point necessary because of an old bug in url.parse\n\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\nSee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n\nBut this opens up a regex dos attack vector! D:\n\nBased on some research (ie asking #node-dev if this is still an issue),\nit's *probably* not an issue. :)",
            "author":"Joshua Holbrook",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'lib\/ecstatic.js': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jfhbrook\/node-ecstatic\/raw\/71ce93988ead4b561a8592168c72143907189f01\/lib%2Fecstatic.js', 'patch': \"@@ -52,9 +52,21 @@ var ecstatic = module.exports = function (dir, options) {\\n   return function middleware (req, res, next) {\\n \\n     \/\/ Strip any null bytes from the url\\n+    \/\/ This was at one point necessary because of an old bug in url.parse\\n+    \/\/\\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\\n+    \/\/ See: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\\n+    \/\/\\n+    \/\/ But this opens up a regex dos attack vector! D:\\n+    \/\/\\n+    \/\/ Based on some research (ie asking #node-dev if this is still an issue),\\n+    \/\/ it's *probably* not an issue. :)\\n+    \/*\\n     while(req.url.indexOf('%00') !== -1) {\\n       req.url = req.url.replace(\/\\\\%00\/g, '');\\n     }\\n+    *\/\\n+\\n     \/\/ Figure out the path for the file from the given url\\n     var parsed = url.parse(req.url);\\n     try {\"}}",
            "message_norm":"remove stripping of null bytes\n\nthis was at one point necessary because of an old bug in url.parse\n\nsee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914\nsee: https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4\n\nbut this opens up a regex dos attack vector! d:\n\nbased on some research (ie asking #node-dev if this is still an issue),\nit's *probably* not an issue. :)",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('bug', 'FLAW', ''), ('https:\/\/github.com\/jfhbrook\/node-ecstatic\/issues\/16#issuecomment-3039914', 'FLAW', ''), ('https:\/\/github.com\/jfhbrook\/node-ecstatic\/commit\/43f7e72a31524f88f47e367c3cc3af710e67c9f4', 'SHA', 'github_url_sha'), ('dos', 'SECWORD', ''), ('attack vector', 'SECWORD', ''), ('issue', 'FLAW', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ecstatic.js'])",
            "num_files":1.0
        },
        {
            "index":920,
            "vuln_id":"GHSA-7257-96vg-qf6x",
            "cwe_id":"{'CWE-74', 'CWE-94'}",
            "score":8.5,
            "chain":"{'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4183\/commits\/e269ea0d3bc88417163c18431b1df38a9be92bfc'}",
            "dataset":"osv",
            "summary":"Remote Code Execution in Red Discord Bot ### Impact\nA RCE exploit has been discovered in the Streams module: this exploit allows Discord users with specifically crafted \"going live\" messages to inject code into the Streams module's going live message. By abusing this exploit, it's possible to perform destructive actions and\/or access sensitive information.\n\n### Patches\nThis critical exploit has been fixed on version ``3.3.12`` & ``3.4``.\n\n### Workarounds\nUnloading the Streams module with ``unload streams`` can render this exploit not accessible. We still highly recommend updating to ``3.3.12`` or ``3.4`` to completely patch this issue.\n\n### References\n* https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4183\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators\/Red-DiscordBot](https:\/\/github.com\/Cog-Creators\/Red-DiscordBot)\n* Over on our [Discord server](https:\/\/discord.gg\/red)",
            "published_date":"2020-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot",
            "commit_href":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4183\/commits\/e269ea0d3bc88417163c18431b1df38a9be92bfc",
            "commit_sha":"e269ea0d3bc88417163c18431b1df38a9be92bfc",
            "patch":"SINGLE",
            "chain_ord":"['e269ea0d3bc88417163c18431b1df38a9be92bfc']",
            "before_first_fix_commit":"{'9798538438ceb37c0592aa358f6f0c5784878d71'}",
            "last_fix_commit":"e269ea0d3bc88417163c18431b1df38a9be92bfc",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/11\/2020, 22:40:06",
            "message":"Added consume all to streams.",
            "author":"Kowlin",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 9, 'total': 22}",
            "files":"{'redbot\/cogs\/streams\/streams.py': {'additions': 13, 'deletions': 9, 'changes': 22, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/raw\/e269ea0d3bc88417163c18431b1df38a9be92bfc\/redbot%2Fcogs%2Fstreams%2Fstreams.py', 'patch': '@@ -497,14 +497,13 @@ async def message(self, ctx: commands.Context):\\n \\n     @message.command(name=\"mention\")\\n     @commands.guild_only()\\n-    async def with_mention(self, ctx: commands.Context, message: str = None):\\n+    async def with_mention(self, ctx: commands.Context, *, message: str = None):\\n         \"\"\"Set stream alert message when mentions are enabled.\\n \\n         Use `{mention}` in the message to insert the selected mentions.\\n+        Use `{stream}` in the message to insert the channel or user name.\\n \\n-        Use `{stream.name}` in the message to insert the channel or user name.\\n-\\n-        For example: `[p]streamset message mention \"{mention}, {stream.name} is live!\"`\\n+        For example: `[p]streamset message mention \"{mention}, {stream} is live!\"`\\n         \"\"\"\\n         if message is not None:\\n             guild = ctx.guild\\n@@ -515,12 +514,12 @@ async def with_mention(self, ctx: commands.Context, message: str = None):\\n \\n     @message.command(name=\"nomention\")\\n     @commands.guild_only()\\n-    async def without_mention(self, ctx: commands.Context, message: str = None):\\n+    async def without_mention(self, ctx: commands.Context, *, message: str = None):\\n         \"\"\"Set stream alert message when mentions are disabled.\\n \\n-        Use `{stream.name}` in the message to insert the channel or user name.\\n+        Use `{stream}` in the message to insert the channel or user name.\\n \\n-        For example: `[p]streamset message nomention \"{stream.name} is live!\"`\\n+        For example: `[p]streamset message nomention \"{stream} is live!\"`\\n         \"\"\"\\n         if message is not None:\\n             guild = ctx.guild\\n@@ -720,7 +719,10 @@ async def check_streams(self):\\n                                 channel.guild\\n                             ).live_message_mention()\\n                             if alert_msg:\\n-                                content = alert_msg.format(mention=mention_str, stream=stream)\\n+                                content = alert_msg  # Stop bad things from happening here...\\n+                                content = content.replace(\"{stream.name}\", str(stream.name))  # Backwards compatability\\n+                                content = content.replace(\"{stream}\", str(stream.name))\\n+                                content = content.replace(\"{mention}\", mention_str)\\n                             else:\\n                                 content = _(\"{mention}, {stream} is live!\").format(\\n                                     mention=mention_str,\\n@@ -733,7 +735,9 @@ async def check_streams(self):\\n                                 channel.guild\\n                             ).live_message_nomention()\\n                             if alert_msg:\\n-                                content = alert_msg.format(stream=stream)\\n+                                content = alert_msg  # Stop bad things from happening here...\\n+                                content = content.replace(\"{stream.name}\", str(stream.name))  # Backwards compatability\\n+                                content = content.replace(\"{stream}\", str(stream.name))\\n                             else:\\n                                 content = _(\"{stream} is live!\").format(\\n                                     stream=escape('}}",
            "message_norm":"added consume all to streams.",
            "language":"en",
            "entities":"[('added', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['redbot\/cogs\/streams\/streams.py'])",
            "num_files":1.0
        },
        {
            "index":219,
            "vuln_id":"GHSA-3872-f48p-pxqj",
            "cwe_id":"{'CWE-88', 'CWE-77'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d83672a3e7415da1490334e2c9431e5da1966842', 'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/35d59f1f040541c358cece0a8d4a63183ca919b8'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Special Elements used in a Command ('Command Injection') in Weblate ### Impact\nWeblate didn't correctly sanitize some arguments passed to Git and Mercurial, which allowed changing their behavior in an unintended way.\n\n### Patches\n\nThe issues were fixed in the 4.11.1 release. The following commits are addressing it:\n\n* 35d59f1f040541c358cece0a8d4a63183ca919b8\n* d83672a3e7415da1490334e2c9431e5da1966842\n\n### Workarounds\n\nInstances in which untrusted users cannot create new components are not affected.\n\n### References\n* [SNYK-PYTHON-WEBLATE-2414088](https:\/\/security.snyk.io\/vuln\/SNYK-PYTHON-WEBLATE-2414088)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a topic in [discussions](https:\/\/github.com\/WeblateOrg\/weblate\/discussions)\n* Email us at [care@weblate.org](mailto:care@weblate.org)",
            "published_date":"2022-03-04",
            "chain_len":2,
            "project":"https:\/\/github.com\/WeblateOrg\/weblate",
            "commit_href":"https:\/\/github.com\/WeblateOrg\/weblate\/commit\/35d59f1f040541c358cece0a8d4a63183ca919b8",
            "commit_sha":"35d59f1f040541c358cece0a8d4a63183ca919b8",
            "patch":"MULTI",
            "chain_ord":"['35d59f1f040541c358cece0a8d4a63183ca919b8', 'd83672a3e7415da1490334e2c9431e5da1966842']",
            "before_first_fix_commit":"{'9a5a09781e5a19ab9a24878afb08c9fcafb21ca7'}",
            "last_fix_commit":"d83672a3e7415da1490334e2c9431e5da1966842",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/03\/2022, 07:25:01",
            "message":"vcs: Improve mercurial parameters handling\n\nMake sure that all user provided input is handled as expected.",
            "author":"Michal \u010ciha\u0159",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'weblate\/vcs\/mercurial.py': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WeblateOrg\/weblate\/raw\/35d59f1f040541c358cece0a8d4a63183ca919b8\/weblate%2Fvcs%2Fmercurial.py', 'patch': '@@ -70,7 +70,7 @@ def check_config(self):\\n     @classmethod\\n     def _clone(cls, source: str, target: str, branch: str):\\n         \"\"\"Clone repository.\"\"\"\\n-        cls._popen([\"clone\", \"--branch\", branch, source, target])\\n+        cls._popen([\"clone\", f\"--branch={branch}\", \"--\", source, target])\\n \\n     def get_config(self, path):\\n         \"\"\"Read entry from configuration.\"\"\"\\n@@ -323,7 +323,7 @@ def on_branch(self, branch):\\n     def configure_branch(self, branch):\\n         \"\"\"Configure repository branch.\"\"\"\\n         if not self.on_branch(branch):\\n-            self.execute([\"update\", branch])\\n+            self.execute([\"update\", \"--\", branch])\\n         self.branch = branch\\n \\n     def describe(self):\\n@@ -343,7 +343,7 @@ def describe(self):\\n     def push(self, branch):\\n         \"\"\"Push given branch to remote repository.\"\"\"\\n         try:\\n-            self.execute([\"push\", \"-b\", self.branch])\\n+            self.execute([\"push\", f\"--branch={self.branch}\"])\\n         except RepositoryException as error:\\n             if error.retcode == 1:\\n                 # No changes found\\n@@ -363,7 +363,7 @@ def cleanup(self):\\n \\n     def update_remote(self):\\n         \"\"\"Update remote repository.\"\"\"\\n-        self.execute([\"pull\", \"--branch\", self.branch])\\n+        self.execute([\"pull\", f\"--branch={self.branch}\"])\\n         self.clean_revision_cache()\\n \\n     def parse_changed_files(self, lines: List[str]) -> Iterator[str]:'}}",
            "message_norm":"vcs: improve mercurial parameters handling\n\nmake sure that all user provided input is handled as expected.",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('user provided input', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['weblate\/vcs\/mercurial.py'])",
            "num_files":1.0
        },
        {
            "index":1230,
            "vuln_id":"GHSA-8m9g-647g-5pxw",
            "cwe_id":"{'CWE-835'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/Yubico\/yubihsm-connector\/commit\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed'}",
            "dataset":"osv",
            "summary":"Infinite loop in Yubico yubihsm-connector An issue was discovered in the \/api\/connector endpoint handler in Yubico yubihsm-connector before 3.0.1 (in YubiHSM SDK before 2021.04). The handler did not validate the length of the request, which can lead to a state where yubihsm-connector becomes stuck in a loop waiting for the YubiHSM to send it data, preventing any further operations until the yubihsm-connector is restarted. An attacker can send 0, 1, or 2 bytes to trigger this.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Yubico\/yubihsm-connector",
            "commit_href":"https:\/\/github.com\/Yubico\/yubihsm-connector\/commit\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "commit_sha":"82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "patch":"SINGLE",
            "chain_ord":"['82bdf202c53460bac9106cc9b4b34a0a16cae0ed']",
            "before_first_fix_commit":"{'33e94e9034ffc52e29639386a191abd9b455d84b'}",
            "last_fix_commit":"82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/15\/2021, 13:00:39",
            "message":"Check content-length to avoid denial-of-service",
            "author":"Per Nilsson",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'api.go': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Yubico\/yubihsm-connector\/raw\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed\/api.go', 'patch': '@@ -177,19 +177,19 @@ func apiHandler(w http.ResponseWriter, r *http.Request, timeout time.Duration, s\\n \\t\\treturn\\n \\t}\\n \\n+\\tif r.ContentLength < 3 || r.ContentLength > 2048 {\\n+\\t\\thttp.Error(w, http.StatusText(http.StatusBadRequest),\\n+\\t\\t\\thttp.StatusBadRequest)\\n+\\t\\treturn\\n+\\t}\\n+\\n \\tif buf, err = ioutil.ReadAll(r.Body); err != nil {\\n \\t\\tclog.WithError(err).Error(\"failed reading incoming request\")\\n \\t\\thttp.Error(w, http.StatusText(http.StatusInternalServerError),\\n \\t\\t\\thttp.StatusInternalServerError)\\n \\t\\treturn\\n \\t}\\n \\n-\\tif len(buf) < 3 || len(buf) > 2048 {\\n-\\t\\thttp.Error(w, http.StatusText(http.StatusBadRequest),\\n-\\t\\t\\thttp.StatusBadRequest)\\n-\\t\\treturn\\n-\\t}\\n-\\n \\tif buf, err = usbProxy(buf, cid, timeout, serial); err != nil {\\n \\t\\tclog.WithError(err).Error(\"failed usb proxy\")\\n \\t\\thttp.Error(w, http.StatusText(http.StatusInternalServerError),'}}",
            "message_norm":"check content-length to avoid denial-of-service",
            "language":"en",
            "entities":"[('denial-of-service', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['api.go'])",
            "num_files":1.0
        },
        {
            "index":2288,
            "vuln_id":"GHSA-jpj5-hg26-6jgc",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/Xhofe\/alist\/commit\/6af17e2509a400979420f613fd7f2f9721fdcd6e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Alist Alist versions 2.0.10 through 2.1.0 were discovered to contain a cross-site scripting (XSS) vulnerability via \/i\/:data\/ipa.plist. This issue was fixed in version 2.1.1.",
            "published_date":"2022-03-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/Xhofe\/alist",
            "commit_href":"https:\/\/github.com\/Xhofe\/alist\/commit\/6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "commit_sha":"6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "patch":"SINGLE",
            "chain_ord":"['6af17e2509a400979420f613fd7f2f9721fdcd6e']",
            "before_first_fix_commit":"{'5193b2aa7df73231ebf68e90b3295f2a5c0916a2'}",
            "last_fix_commit":"6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/01\/2022, 12:09:25",
            "message":":lock: fix #645 xss vulnerability",
            "author":"Xhofe",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'server\/controllers\/other.go': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alist-org\/alist\/raw\/6af17e2509a400979420f613fd7f2f9721fdcd6e\/server%2Fcontrollers%2Fother.go', 'patch': '@@ -7,6 +7,7 @@ import (\\n \\t\"github.com\/Xhofe\/alist\/server\/common\"\\n \\t\"github.com\/Xhofe\/alist\/utils\"\\n \\t\"github.com\/gin-gonic\/gin\"\\n+\\t\"net\/url\"\\n \\t\"strings\"\\n )\\n \\n@@ -24,11 +25,19 @@ func Plist(c *gin.Context) {\\n \\t\\treturn\\n \\t}\\n \\tu := string(bytes)\\n+\\tuUrl, err := url.Parse(u)\\n+\\tif err != nil {\\n+\\t\\tcommon.ErrorResp(c, err, 500)\\n+\\t\\treturn\\n+\\t}\\n \\tname := utils.Base(u)\\n+\\tu = uUrl.String()\\n \\tipaIndex := strings.Index(name, \".ipa\")\\n \\tif ipaIndex != -1 {\\n \\t\\tname = name[:ipaIndex]\\n \\t}\\n+\\tname = strings.ReplaceAll(name, \"<\", \"[\")\\n+\\tname = strings.ReplaceAll(name, \">\", \"]\")\\n \\tplist := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\\n <plist version=\"1.0\">\\n     <dict>'}}",
            "message_norm":":lock: fix #645 xss vulnerability",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#645', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/controllers\/other.go'])",
            "num_files":1.0
        },
        {
            "index":3441,
            "vuln_id":"GHSA-xhp9-4947-rq78",
            "cwe_id":"{'CWE-755'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/bottlepy\/bottle\/commit\/a2b0ee6bb4ce88895429ec4aca856616244c4c4c', 'https:\/\/github.com\/bottlepy\/bottle\/commit\/e140e1b54da721a660f2eb9d58a106b7b3ff2f00'}",
            "dataset":"osv",
            "summary":"Denial of service in bottle Bottle before 0.12.20 mishandles errors during early request binding.",
            "published_date":"2022-06-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/bottlepy\/bottle",
            "commit_href":"https:\/\/github.com\/bottlepy\/bottle\/commit\/e140e1b54da721a660f2eb9d58a106b7b3ff2f00",
            "commit_sha":"e140e1b54da721a660f2eb9d58a106b7b3ff2f00",
            "patch":"MULTI",
            "chain_ord":"['e140e1b54da721a660f2eb9d58a106b7b3ff2f00', 'a2b0ee6bb4ce88895429ec4aca856616244c4c4c']",
            "before_first_fix_commit":"{'04b27f185412250f9389a6a14d1e1c516c87e13c'}",
            "last_fix_commit":"a2b0ee6bb4ce88895429ec4aca856616244c4c4c",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/26\/2022, 12:49:32",
            "message":"Gracefully handle errors during early request binding.",
            "author":"Marcel Hellkamp",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 7, 'total': 16}",
            "files":"{'bottle.py': {'additions': 9, 'deletions': 7, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bottlepy\/bottle\/raw\/e140e1b54da721a660f2eb9d58a106b7b3ff2f00\/bottle.py', 'patch': \"@@ -848,17 +848,19 @@ def default_error_handler(self, res):\\n         return tob(template(ERROR_PAGE_TEMPLATE, e=res))\\n \\n     def _handle(self, environ):\\n-        path = environ['bottle.raw_path'] = environ['PATH_INFO']\\n-        if py3k:\\n-            try:\\n-                environ['PATH_INFO'] = path.encode('latin1').decode('utf8')\\n-            except UnicodeError:\\n-                return HTTPError(400, 'Invalid path string. Expected UTF-8')\\n-\\n         try:\\n+\\n             environ['bottle.app'] = self\\n             request.bind(environ)\\n             response.bind()\\n+\\n+            path = environ['bottle.raw_path'] = environ['PATH_INFO']\\n+            if py3k:\\n+                try:\\n+                    environ['PATH_INFO'] = path.encode('latin1').decode('utf8')\\n+                except UnicodeError:\\n+                    return HTTPError(400, 'Invalid path string. Expected UTF-8')\\n+\\n             try:\\n                 self.trigger_hook('before_request')\\n                 route, args = self.router.match(environ)\"}}",
            "message_norm":"gracefully handle errors during early request binding.",
            "language":"en",
            "entities":"[('errors', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bottle.py'])",
            "num_files":1.0
        },
        {
            "index":3425,
            "vuln_id":"GHSA-xg6r-5gx4-qxjm",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/invoiceninja\/invoiceninja\/commit\/1186eaa82375692d01d5ef3369c5b7bc7315b55f'}",
            "dataset":"osv",
            "summary":"invoiceninja is vulnerable to Cross-site Scripting invoiceninja is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/invoiceninja\/invoiceninja",
            "commit_href":"https:\/\/github.com\/invoiceninja\/invoiceninja\/commit\/1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "commit_sha":"1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "patch":"SINGLE",
            "chain_ord":"['1186eaa82375692d01d5ef3369c5b7bc7315b55f']",
            "before_first_fix_commit":"{'ac194665de6728e4091f273ef2e01b4c48369fcd'}",
            "last_fix_commit":"1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/10\/2021, 03:00:22",
            "message":"Fixes for client password reset",
            "author":"David Bomba",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 6, 'total': 13}",
            "files":"{'app\/Http\/Controllers\/Auth\/ContactForgotPasswordController.php': {'additions': 7, 'deletions': 6, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/invoiceninja\/invoiceninja\/raw\/1186eaa82375692d01d5ef3369c5b7bc7315b55f\/app%2FHttp%2FControllers%2FAuth%2FContactForgotPasswordController.php', 'patch': \"@@ -93,14 +93,15 @@ public function broker()\\n \\n     public function sendResetLinkEmail(ContactPasswordResetRequest $request)\\n     {\\n-\\n-        if(Ninja::isHosted() && $request->session()->has('company_key'))\\n-            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));\\n+        if(Ninja::isHosted() && $request->has('company_key'))\\n+            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));\\n         \\n         $this->validateEmail($request);\\n \\n-        $company = Company::where('company_key', $request->session()->get('company_key'))->first();\\n-        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\\n+        \/\/ $company = Company::where('company_key', $request->input('company_key'))->first();\\n+        \/\/ $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\\n+\\n+        $contact = ClientContact::where(['email' => $request->input('email')])->first();\\n \\n         $response = false;\\n \\n@@ -117,7 +118,7 @@ public function sendResetLinkEmail(ContactPasswordResetRequest $request)\\n             return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);\\n \\n         \/\/ We will send the password reset link to this user. Once we have attempted\\n-        \/\/ to send the link, we will examine the response then see the message we\\n+        \/\/ to send the link, we will examine thuser@example.ce response then see the message we\\n         \/\/ need to show to the user. Finally, we'll send out a proper response.\\n         \/\/ $response = $this->broker()->sendResetLink(\\n         \/\/     $this->credentials($request)\"}}",
            "message_norm":"fixes for client password reset",
            "language":"en",
            "entities":"[('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Auth\/ContactForgotPasswordController.php'])",
            "num_files":1.0
        },
        {
            "index":2844,
            "vuln_id":"GHSA-r33q-22hv-j29q",
            "cwe_id":"{'CWE-400'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/ethereum\/go-ethereum\/commit\/bddd103a9f0af27ef533f04e06ea429cf76b6d46'}",
            "dataset":"osv",
            "summary":"Denial of service in github.com\/ethereum\/go-ethereum ### Impact\n\nA DoS vulnerability can make a LES server crash via malicious `GetProofsV2` request from a connected LES client.\n\n### Patches\n\nThe vulnerability was patched in https:\/\/github.com\/ethereum\/go-ethereum\/pull\/21896. \n\n### Workarounds\n\nThis vulnerability only concerns users explicitly enabling `les` server; disabling `les` prevents the exploit. \nIt can also be patched by manually applying the patch in https:\/\/github.com\/ethereum\/go-ethereum\/pull\/21896. \n\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [go-ethereum](https:\/\/github.com\/ethereum\/go-ethereum)\n* Email us at [security@ethereum.org](mailto:security@ethereum.org)",
            "published_date":"2021-06-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/ethereum\/go-ethereum",
            "commit_href":"https:\/\/github.com\/ethereum\/go-ethereum\/commit\/bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "commit_sha":"bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "patch":"SINGLE",
            "chain_ord":"['bddd103a9f0af27ef533f04e06ea429cf76b6d46']",
            "before_first_fix_commit":"{'6b5840961407960a06ed20cb5dd1b782080653ff'}",
            "last_fix_commit":"bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2020, 09:55:17",
            "message":"les: fix GetProofsV2 bug (#21896)",
            "author":"Felf\u00f6ldi Zsolt",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 4, 'total': 6}",
            "files":"{'les\/server_handler.go': {'additions': 2, 'deletions': 4, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ethereum\/go-ethereum\/raw\/bddd103a9f0af27ef533f04e06ea429cf76b6d46\/les%2Fserver_handler.go', 'patch': '@@ -610,6 +610,7 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\tvar (\\n \\t\\t\\tlastBHash common.Hash\\n \\t\\t\\troot      common.Hash\\n+\\t\\t\\theader    *types.Header\\n \\t\\t)\\n \\t\\treqCnt := len(req.Reqs)\\n \\t\\tif accept(req.ReqID, uint64(reqCnt), MaxProofsFetch) {\\n@@ -624,10 +625,6 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\t\\t\\t\\t\\treturn\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\/\/ Look up the root hash belonging to the request\\n-\\t\\t\\t\\t\\tvar (\\n-\\t\\t\\t\\t\\t\\theader *types.Header\\n-\\t\\t\\t\\t\\t\\ttrie   state.Trie\\n-\\t\\t\\t\\t\\t)\\n \\t\\t\\t\\t\\tif request.BHash != lastBHash {\\n \\t\\t\\t\\t\\t\\troot, lastBHash = common.Hash{}, request.BHash\\n \\n@@ -654,6 +651,7 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\t\\t\\t\\t\/\/ Open the account or storage trie for the request\\n \\t\\t\\t\\t\\tstatedb := h.blockchain.StateCache()\\n \\n+\\t\\t\\t\\t\\tvar trie state.Trie\\n \\t\\t\\t\\t\\tswitch len(request.AccKey) {\\n \\t\\t\\t\\t\\tcase 0:\\n \\t\\t\\t\\t\\t\\t\/\/ No account key specified, open an account trie'}}",
            "message_norm":"les: fix getproofsv2 bug (#21896)",
            "language":"af",
            "entities":"[('bug', 'FLAW', ''), ('#21896', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['les\/server_handler.go'])",
            "num_files":1.0
        },
        {
            "index":724,
            "vuln_id":"GHSA-5xvc-vgmp-jgc3",
            "cwe_id":"{'CWE-284'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/9e200d974e0cb85d828a6afedb8ab90a37878f28', 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "dataset":"osv",
            "summary":"Improper Access Control in jupyterhub-firstuseauthenticator ### Impact\n\nWhen JupyterHub is used with FirstUseAuthenticator, the vulnerability allows unauthorized access to any user's account if `create_users=True` and the username is known or guessed.\n\n### Patches\n\nUpgrade to jupyterhub-firstuseauthenticator to 1.0, or apply patch https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38.patch\n\n### Workarounds\n\nIf you cannot upgrade, there is no complete workaround, but it can be mitigated.\n\nIf you cannot upgrade yet, you can disable user creation with `c.FirstUseAuthenticator.create_users = False`, which will only allow login with fully normalized usernames for already existing users prior to jupyterhub-firstuserauthenticator 1.0. If any users have never logged in with their normalized username (i.e. lowercase), they will still be vulnerable until you can patch or upgrade.",
            "published_date":"2021-10-28",
            "chain_len":2,
            "project":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator",
            "commit_href":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/32b21898fb2b53b1a2e36270de6854ad70e9e9bf",
            "commit_sha":"32b21898fb2b53b1a2e36270de6854ad70e9e9bf",
            "patch":"MULTI",
            "chain_ord":"['32b21898fb2b53b1a2e36270de6854ad70e9e9bf', '9e200d974e0cb85d828a6afedb8ab90a37878f28']",
            "before_first_fix_commit":"{'32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "last_fix_commit":"9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/02\/2021, 20:23:22",
            "message":"lowercase username to lock password",
            "author":"George Hunt",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'firstuseauthenticator\/firstuseauthenticator.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/raw\/32b21898fb2b53b1a2e36270de6854ad70e9e9bf\/firstuseauthenticator%2Ffirstuseauthenticator.py', 'patch': \"@@ -138,7 +138,7 @@ def validate_username(self, name):\\n \\n     @gen.coroutine\\n     def authenticate(self, handler, data):\\n-        username = data['username']\\n+        username = data['username'].lower()\\n \\n         if not self.create_users:\\n             if not self._user_exists(username):\"}}",
            "message_norm":"lowercase username to lock password",
            "language":"en",
            "entities":"[('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['firstuseauthenticator\/firstuseauthenticator.py'])",
            "num_files":1.0
        },
        {
            "index":3050,
            "vuln_id":"GHSA-v52p-hfjf-wg88",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `SpaceToBatchNd` ### Impact\nThe implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8\/tensorflow\/lite\/kernels\/space_to_batch_nd.cc#L82-L83):\n\n```cc\nTF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\noutput_size->data[dim + 1] = final_dim_size \/ block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708",
            "commit_sha":"6d36ba65577006affb272335b7c1abd829010708",
            "patch":"SINGLE",
            "chain_ord":"['6d36ba65577006affb272335b7c1abd829010708']",
            "before_first_fix_commit":"{'412c7d9bb8f8a762c5b266c9e73bfa165f29aac8'}",
            "last_fix_commit":"6d36ba65577006affb272335b7c1abd829010708",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 21:22:30",
            "message":"Prevent division by 0\n\nPiperOrigin-RevId: 370984990\nChange-Id: Ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/space_to_batch_nd.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6d36ba65577006affb272335b7c1abd829010708\/tensorflow%2Flite%2Fkernels%2Fspace_to_batch_nd.cc', 'patch': '@@ -79,6 +79,7 @@ TfLiteStatus ResizeOutputTensor(TfLiteContext* context,\\n   for (int dim = 0; dim < spatial_dims_num; ++dim) {\\n     int final_dim_size = (input_size->data[dim + 1] + paddings_data[dim * 2] +\\n                           paddings_data[dim * 2 + 1]);\\n+    TF_LITE_ENSURE(context, block_shape[dim] != 0);\\n     TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\\n     output_size->data[dim + 1] = final_dim_size \/ block_shape[dim];\\n     output_batch_size *= block_shape[dim];'}}",
            "message_norm":"prevent division by 0\n\npiperorigin-revid: 370984990\nchange-id: ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370984990', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/space_to_batch_nd.cc'])",
            "num_files":1.0
        },
        {
            "index":169,
            "vuln_id":"GHSA-2xw8-j43j-5vxp",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/elgg\/elgg\/commit\/c30b17bf75256ed3fcc84e2083147cc3951423d0'}",
            "dataset":"osv",
            "summary":"elgg is vulnerable to Cross-site Scripting elgg is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/elgg\/elgg",
            "commit_href":"https:\/\/github.com\/elgg\/elgg\/commit\/c30b17bf75256ed3fcc84e2083147cc3951423d0",
            "commit_sha":"c30b17bf75256ed3fcc84e2083147cc3951423d0",
            "patch":"SINGLE",
            "chain_ord":"['c30b17bf75256ed3fcc84e2083147cc3951423d0']",
            "before_first_fix_commit":"{'ea72485b6a08f30f452b8e5425310f2b3546050c'}",
            "last_fix_commit":"c30b17bf75256ed3fcc84e2083147cc3951423d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/06\/2021, 14:39:10",
            "message":"fix(reported_content): sanitize report URLs",
            "author":"Jer\u00f4me Bakker",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'mod\/reportedcontent\/actions\/reportedcontent\/add.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Elgg\/Elgg\/raw\/c30b17bf75256ed3fcc84e2083147cc3951423d0\/mod%2Freportedcontent%2Factions%2Freportedcontent%2Fadd.php', 'patch': '@@ -18,7 +18,7 @@\\n $report = new ElggReportedContent();\\n $report->owner_guid = elgg_get_logged_in_user_guid();\\n $report->title = $title;\\n-$report->address = $address;\\n+$report->address = elgg_normalize_site_url($address);\\n $report->description = $description;\\n $report->access_id = $access;'}}",
            "message_norm":"fix(reported_content): sanitize report urls",
            "language":"ro",
            "entities":"[('fix(reported_content', 'ACTION', ''), ('sanitize', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mod\/reportedcontent\/actions\/reportedcontent\/add.php'])",
            "num_files":1.0
        },
        {
            "index":1409,
            "vuln_id":"GHSA-9p47-w5xp-f4xr",
            "cwe_id":"{'CWE-311'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/felixrieseberg\/windows-build-tools\/commit\/9835d33e68f2cb5e4d148e954bb3ed0221d98e90'}",
            "dataset":"osv",
            "summary":"Downloads Resources over HTTP in windows-build-tools Affected versions of `windows-build-tools` insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `windows-build-tools`.\n\n\n## Recommendation\n\nUpdate to version 1.0.0 or later.",
            "published_date":"2018-11-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/felixrieseberg\/windows-build-tools",
            "commit_href":"https:\/\/github.com\/felixrieseberg\/windows-build-tools\/commit\/9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
            "commit_sha":"9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
            "patch":"SINGLE",
            "chain_ord":"['9835d33e68f2cb5e4d148e954bb3ed0221d98e90']",
            "before_first_fix_commit":"{'3a97ea156d07aaccca101ed8f0a1606eea8dfc2d'}",
            "last_fix_commit":"9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/22\/2016, 17:19:25",
            "message":":wrench: Use HTTPS - Thanks to @grander",
            "author":"Felix Rieseberg",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/constants.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/felixrieseberg\/windows-build-tools\/raw\/9835d33e68f2cb5e4d148e954bb3ed0221d98e90\/src%2Fconstants.js', 'patch': \"@@ -2,7 +2,7 @@ var pythonMirror = process.env.npm_config_python_mirror || process.env.PYTHON_MI\\n \\n var buildTools = {\\n   installerName: 'BuildTools_Full.exe',\\n-  installerUrl: 'http:\/\/download.microsoft.com\/download\/5\/f\/7\/5f7acaeb-8363-451f-9425-68a90f98b238\/visualcppbuildtools_full.exe',\\n+  installerUrl: 'https:\/\/download.microsoft.com\/download\/5\/f\/7\/5f7acaeb-8363-451f-9425-68a90f98b238\/visualcppbuildtools_full.exe',\\n   logName: 'build-tools-log.txt'\\n }\"}}",
            "message_norm":":wrench: use https - thanks to @grander",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/constants.js'])",
            "num_files":1.0
        },
        {
            "index":1934,
            "vuln_id":"GHSA-gv26-jpj9-c8gq",
            "cwe_id":"{'CWE-754'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseSparseMinimum` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python \nimport tensorflow as tf\n\na_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    b_shape=b_shape)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches \nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2022-03-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "commit_sha":"f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "patch":"MULTI",
            "chain_ord":"['ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'f6fde895ef9c77d848061c0517f19d0ec2682f3a']",
            "before_first_fix_commit":"{'cae81a7ae3ca6207396d5c893e8163f4acb34037'}",
            "last_fix_commit":"f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/12\/2021, 01:32:03",
            "message":"Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373274848\nChange-Id: I3a665ac3a29dee9fb69bdf408a939330cb93ea75",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f6fde895ef9c77d848061c0517f19d0ec2682f3a\/tensorflow%2Fcore%2Fkernels%2Fsparse_sparse_binary_op_shared.cc', 'patch': '@@ -150,6 +150,7 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n \\n     const int64 a_nnz = a_indices_t->dim_size(0);\\n     const int64 b_nnz = b_indices_t->dim_size(0);\\n+\\n     const auto a_values = a_values_t->vec<T>();\\n     const auto b_values = b_values_t->vec<T>();\\n \\n@@ -166,6 +167,14 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n                     \"Input shapes should be a vector but received shapes \",\\n                     a_shape_t->shape().DebugString(), \" and \",\\n                     b_shape_t->shape().DebugString()));\\n+    const int num_dims = a_indices_t->dim_size(1);\\n+    OP_REQUIRES(\\n+        ctx, a_shape_t->NumElements() == num_dims,\\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\\n+                                \"a_shape must match, got \",\\n+                                num_dims, \" and \", a_shape_t->NumElements()));\\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Tensors must not be empty\"));\\n     OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),\\n                 errors::InvalidArgument(\\n                     \"Operands do not have the same ranks; got shapes: \",\\n@@ -180,12 +189,6 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n                                           \" for dimension \", i));\\n     }\\n \\n-    OP_REQUIRES(\\n-        ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),\\n-        errors::InvalidArgument(\\n-            \"Indices\\' dimensions do not match: got \", a_indices_t->dim_size(1),\\n-            \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));\\n-    const int num_dims = a_indices_t->dim_size(1);\\n     const auto a_indices_mat = a_indices_t->matrix<int64>();\\n     const auto b_indices_mat = b_indices_t->matrix<int64>();\\n     std::vector<T> a_augmented_values, b_augmented_values;'}}",
            "message_norm":"validate that a and b are proper sparse tensors\n\npiperorigin-revid: 373274848\nchange-id: i3a665ac3a29dee9fb69bdf408a939330cb93ea75",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('373274848', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":646,
            "vuln_id":"GHSA-5j3g-jfq3-7jwx",
            "cwe_id":"{'CWE-94'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/hapijs\/bassmaster\/commit\/b751602d8cb7194ee62a61e085069679525138c4'}",
            "dataset":"osv",
            "summary":"Arbitrary JavaScript Execution in bassmaster A vulnerability exists in bassmaster <= 1.5.1 that allows for an attacker to provide arbitrary JavaScript that is then executed server side via eval.\n\n\n## Recommendation\n\nUpdate to bassmaster version 1.5.2 or greater.",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/hapijs\/bassmaster",
            "commit_href":"https:\/\/github.com\/hapijs\/bassmaster\/commit\/b751602d8cb7194ee62a61e085069679525138c4",
            "commit_sha":"b751602d8cb7194ee62a61e085069679525138c4",
            "patch":"SINGLE",
            "chain_ord":"['b751602d8cb7194ee62a61e085069679525138c4']",
            "before_first_fix_commit":"{'83f02417beab924ce2fe6ee7d6fcfab11d2dafd5'}",
            "last_fix_commit":"b751602d8cb7194ee62a61e085069679525138c4",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/25\/2014, 23:06:07",
            "message":"Remove eval statement",
            "author":"nvcexploder",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 8, 'total': 10}",
            "files":"{'lib\/batch.js': {'additions': 2, 'deletions': 8, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/outmoded\/bassmaster\/raw\/b751602d8cb7194ee62a61e085069679525138c4\/lib%2Fbatch.js', 'patch': \"@@ -146,16 +146,10 @@ internals.batch = function (batchRequest, resultsData, pos, parts, callback) {\\n             var ref = resultsData.resultsMap[parts[i].index];\\n \\n             if (ref) {\\n-                var value = null;\\n-\\n-                try {\\n-                    eval('value = ref.' + parts[i].value + ';');\\n-                }\\n-                catch (e) {\\n-                    error = new Error(e.message);\\n-                }\\n+                var value = ref[parts[i].value]||null;\\n \\n                 if (value) {\\n+\\n                     if (value.match && value.match(\/^[\\\\w:]+$\/)) {\\n                         path += value;\\n                     }\"}}",
            "message_norm":"remove eval statement",
            "language":"sl",
            "entities":"[('remove', 'ACTION', ''), ('eval', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/batch.js'])",
            "num_files":1.0
        },
        {
            "index":1677,
            "vuln_id":"GHSA-f6px-w8rh-7r89",
            "cwe_id":"{'CWE-362', 'CWE-732'}",
            "score":4.7,
            "chain":"{'https:\/\/github.com\/beego\/beego\/pull\/3975\/commits\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd'}",
            "dataset":"osv",
            "summary":"Data race in Beego The File Session Manager in Beego 1.10.0 allows local users to read session files because there is a race condition involving file creation within a directory with weak permissions.",
            "published_date":"2021-08-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/beego\/beego",
            "commit_href":"https:\/\/github.com\/beego\/beego\/pull\/3975\/commits\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "commit_sha":"f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "patch":"SINGLE",
            "chain_ord":"['f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd']",
            "before_first_fix_commit":"{'8f3d1c5f42fce57e83e1c3f7d180477595db7cca'}",
            "last_fix_commit":"f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2020, 15:42:54",
            "message":"Change permission mask",
            "author":"Nico Waisman",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'session\/sess_file.go': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/beego\/beego\/raw\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd\/session%2Fsess_file.go', 'patch': '@@ -138,7 +138,7 @@ func (fp *FileProvider) SessionRead(sid string) (Store, error) {\\n \\tfilepder.lock.Lock()\\n \\tdefer filepder.lock.Unlock()\\n \\n-\\terr := os.MkdirAll(path.Join(fp.savePath, string(sid[0]), string(sid[1])), 0777)\\n+\\terr := os.MkdirAll(path.Join(fp.savePath, string(sid[0]), string(sid[1])), 0755)\\n \\tif err != nil {\\n \\t\\tSLogger.Println(err.Error())\\n \\t}\\n@@ -231,7 +231,7 @@ func (fp *FileProvider) SessionRegenerate(oldsid, sid string) (Store, error) {\\n \\t\\treturn nil, fmt.Errorf(\"newsid %s exist\", newSidFile)\\n \\t}\\n \\n-\\terr = os.MkdirAll(newPath, 0777)\\n+\\terr = os.MkdirAll(newPath, 0755)\\n \\tif err != nil {\\n \\t\\tSLogger.Println(err.Error())\\n \\t}'}}",
            "message_norm":"change permission mask",
            "language":"en",
            "entities":"[('change', 'ACTION', ''), ('permission', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['session\/sess_file.go'])",
            "num_files":1.0
        },
        {
            "index":378,
            "vuln_id":"GHSA-47vg-483w-hp3m",
            "cwe_id":"{'CWE-384'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/filegator\/filegator\/commit\/fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225'}",
            "dataset":"osv",
            "summary":"Improper user session handling in filegator FileGator prior to version 7.8.0 is vulnerable to session fixation.",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/filegator\/filegator",
            "commit_href":"https:\/\/github.com\/filegator\/filegator\/commit\/fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225",
            "commit_sha":"fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225",
            "patch":"SINGLE",
            "chain_ord":"['fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225']",
            "before_first_fix_commit":"{'6e2b68f17f48cdc1d6a4a93a2369d2069fe64989'}",
            "last_fix_commit":"fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/24\/2022, 11:08:43",
            "message":"regenerate session on user update",
            "author":"Milos Stojanovic",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'backend\/Services\/Auth\/Adapters\/JsonFile.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/filegator\/filegator\/raw\/fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225\/backend%2FServices%2FAuth%2FAdapters%2FJsonFile.php', 'patch': \"@@ -53,7 +53,7 @@ public function user(): ?User\\n \\n         if ($user) {\\n             foreach ($this->getUsers() as $u) {\\n-                if ($u['username'] == $user->getUsername() && $hash == $u['password']) {\\n+                if ($u['username'] == $user->getUsername() && $hash == $u['password'].$u['permissions'].$u['homedir'].$u['role']) {\\n                     return $user;\\n                 }\\n             }\\n@@ -70,7 +70,7 @@ public function authenticate($username, $password): bool\\n             if ($u['username'] == $username && $this->verifyPassword($password, $u['password'])) {\\n                 $user = $this->mapToUserObject($u);\\n                 $this->store($user);\\n-                $this->session->set(self::SESSION_HASH, $u['password']);\\n+                $this->session->set(self::SESSION_HASH, $u['password'].$u['permissions'].$u['homedir'].$u['role']);\\n \\n                 return true;\\n             }\"}}",
            "message_norm":"regenerate session on user update",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['backend\/Services\/Auth\/Adapters\/JsonFile.php'])",
            "num_files":1.0
        },
        {
            "index":3428,
            "vuln_id":"GHSA-xggc-qprg-x6mw",
            "cwe_id":"{'CWE-532', 'CWE-209', 'CWE-538', 'CWE-200'}",
            "score":9.0,
            "chain":"{'https:\/\/github.com\/weaveworks\/weave-gitops\/commit\/567356f471353fb5c676c77f5abc2a04631d50ca'}",
            "dataset":"osv",
            "summary":"Weave GitOps leaked cluster credentials into logs on connection errors ### Impact\nA vulnerability in the logging of Weave GitOps could allow an authenticated remote attacker to view sensitive cluster configurations, aka KubeConfg, of registered Kubernetes clusters, including the service account tokens in plain text from Weave GitOps's pod logs on the management cluster. An unauthorized remote attacker can also view these sensitive configurations from external log storage if enabled by the management cluster.\n\nThis vulnerability is due to the client factory dumping cluster configurations and their service account tokens when the cluster manager tries to connect to an API server of a registered cluster, and a connection error occurs. An attacker could exploit this vulnerability by either accessing logs of a pod of Weave GitOps, or from external log storage and obtaining all cluster configurations of registered clusters.\n\nA successful exploit could allow the attacker to use those cluster configurations to manage the registered Kubernetes clusters.\n\n### Patches\nThis vulnerability has been fixed by commit 567356f471353fb5c676c77f5abc2a04631d50ca. Users should upgrade to Weave GitOps core version >= v0.8.1-rc.6 released on 31\/05\/2022.\n\n### Workarounds\nThere is no workaround for this vulnerability.\n\n### References\nDisclosed by Stefan Prodan, Principal Engineer, Weaveworks.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Weave GitOps repository](https:\/\/github.com\/weaveworks\/weave-gitops)\n* Email us at [support@weave.works](mailto:support@weave.works)",
            "published_date":"2022-06-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/weaveworks\/weave-gitops",
            "commit_href":"https:\/\/github.com\/weaveworks\/weave-gitops\/commit\/567356f471353fb5c676c77f5abc2a04631d50ca",
            "commit_sha":"567356f471353fb5c676c77f5abc2a04631d50ca",
            "patch":"SINGLE",
            "chain_ord":"['567356f471353fb5c676c77f5abc2a04631d50ca']",
            "before_first_fix_commit":"{'a80bb361901d2e0e8f0e675303dfc3cbfcc9ab92'}",
            "last_fix_commit":"567356f471353fb5c676c77f5abc2a04631d50ca",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/28\/2022, 12:43:50",
            "message":"Fix logging on cluster connection error\nRemove the client config from the error log since the wrapped error already contains the cluster name for which the connection couldn't be established.\n\nSigned-off-by: Stefan Prodan <stefan.prodan@gmail.com>",
            "author":"Stefan Prodan",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'core\/clustersmngr\/factory.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/weaveworks\/weave-gitops\/raw\/567356f471353fb5c676c77f5abc2a04631d50ca\/core%2Fclustersmngr%2Ffactory.go', 'patch': '@@ -131,7 +131,7 @@ func (cf *clientsFactory) watchNamespaces(ctx context.Context) {\\n func (cf *clientsFactory) UpdateNamespaces(ctx context.Context) error {\\n \\tclients, err := clientsForClusters(cf.clusters.Get())\\n \\tif err != nil {\\n-\\t\\tcf.log.Error(err, \"failed to create clients for\", \"clusters\", cf.clusters.Get())\\n+\\t\\tcf.log.Error(err, \"failed to create client\")\\n \\t\\treturn err\\n \\t}'}}",
            "message_norm":"fix logging on cluster connection error\nremove the client config from the error log since the wrapped error already contains the cluster name for which the connection couldn't be established.\n\nsigned-off-by: stefan prodan <stefan.prodan@gmail.com>",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('error', 'FLAW', ''), ('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('stefan.prodan@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/clustersmngr\/factory.go'])",
            "num_files":1.0
        },
        {
            "index":428,
            "vuln_id":"GHSA-4h47-h3cr-23wh",
            "cwe_id":"{'CWE-285'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/01157a699f611ca7492e872103ac01526a982cf2'}",
            "dataset":"osv",
            "summary":"Improper Authorization in Jenkins A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core\/src\/main\/java\/hudson\/security\/HudsonPrivateSecurityRealm.java that allows attackers without Overall\/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/01157a699f611ca7492e872103ac01526a982cf2",
            "commit_sha":"01157a699f611ca7492e872103ac01526a982cf2",
            "patch":"SINGLE",
            "chain_ord":"['01157a699f611ca7492e872103ac01526a982cf2']",
            "before_first_fix_commit":"{'df87e12ddcfeafdba6e0de0e07b3e21f8473ece6'}",
            "last_fix_commit":"01157a699f611ca7492e872103ac01526a982cf2",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/27\/2018, 09:18:42",
            "message":"[SECURITY-1128]",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'core\/src\/main\/java\/hudson\/security\/HudsonPrivateSecurityRealm.java': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/01157a699f611ca7492e872103ac01526a982cf2\/core%2Fsrc%2Fmain%2Fjava%2Fhudson%2Fsecurity%2FHudsonPrivateSecurityRealm.java', 'patch': '@@ -475,8 +475,9 @@ public List<User> getAllUsers() {\\n      * This is to map users under the security realm URL.\\n      * This in turn helps us set up the right navigation breadcrumb.\\n      *\/\\n+    @Restricted(NoExternalUse.class)\\n     public User getUser(String id) {\\n-        return User.getById(id, true);\\n+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));\\n     }\\n \\n     \/\/ TODO'}}",
            "message_norm":"[security-1128]",
            "language":"en",
            "entities":"[('security-1128', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/hudson\/security\/HudsonPrivateSecurityRealm.java'])",
            "num_files":1.0
        },
        {
            "index":1416,
            "vuln_id":"GHSA-9px9-73fg-3fqp",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/045deec1cbdebb27d817008ad5df94d96a08b1bf', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in Grappler's `IsConstant` ### Impact\nUnder certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):\n\nFirst, during [constant folding](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:\n\n```cc\n  NodeDef* mul_left_child = node_map_->GetNode(node->input(0));\n  NodeDef* mul_right_child = node_map_->GetNode(node->input(1));\n  \/\/ One child must be constant, and the second must be Conv op.\n  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\n  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);\n```\n\nIf a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.\n\nWe have a similar issue during [`IsIdentityConsumingSwitch`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/mutable_graph_view.cc#L59-L74):\n\n```cc\n  NodeDef* input_node = graph.GetNode(tensor_id.node());\n  return IsSwitch(*input_node);\n```\n\n### Patches\nWe have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/045deec1cbdebb27d817008ad5df94d96a08b1bf).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0a365c029e437be0349c31f8d4c9926b69fa3fa1",
            "commit_sha":"0a365c029e437be0349c31f8d4c9926b69fa3fa1",
            "patch":"MULTI",
            "chain_ord":"['0a365c029e437be0349c31f8d4c9926b69fa3fa1', '045deec1cbdebb27d817008ad5df94d96a08b1bf']",
            "before_first_fix_commit":"{'0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
            "last_fix_commit":"045deec1cbdebb27d817008ad5df94d96a08b1bf",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2021, 18:05:59",
            "message":"Prevent null pointer dereference in constant folding.\n\nUnder certain conditions, an invalid protobuf saved model with invalid nodes would be loaded. During optimization phase, Grappler optimizer will then dereference a null pointer.\n\nPiperOrigin-RevId: 409683530\nChange-Id: I1f10340a7ec384bc9bc587300390f1078cf5caa0",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0a365c029e437be0349c31f8d4c9926b69fa3fa1\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -3505,6 +3505,9 @@ bool ConstantFolding::MulConvPushDown(GraphDef* optimized_graph, NodeDef* node,\\n \\n   NodeDef* mul_left_child = node_map_->GetNode(node->input(0));\\n   NodeDef* mul_right_child = node_map_->GetNode(node->input(1));\\n+  if (mul_left_child == nullptr || mul_right_child == nullptr) {\\n+    return false;\\n+  }\\n   \/\/ One child must be constant, and the second must be Conv op.\\n   const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\\n   const bool right_child_is_constant = IsReallyConstant(*mul_right_child);'}}",
            "message_norm":"prevent null pointer dereference in constant folding.\n\nunder certain conditions, an invalid protobuf saved model with invalid nodes would be loaded. during optimization phase, grappler optimizer will then dereference a null pointer.\n\npiperorigin-revid: 409683530\nchange-id: i1f10340a7ec384bc9bc587300390f1078cf5caa0",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('409683530', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":2088,
            "vuln_id":"GHSA-hjxc-462x-x77j",
            "cwe_id":"{'CWE-367'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/yarnpkg\/yarn\/commit\/0474b8c66a8ea298f5e4dedc67b2de464297ad1c'}",
            "dataset":"osv",
            "summary":"TOCTOU Race Condition in Yarn The package integrity validation in yarn &lt; 1.19.0 contains a TOCTOU vulnerability where the hash is computed before writing a package to cache. It&#39;s not computed again when reading from the cache. This may lead to a cache pollution attack. This issue is fixed in 1.19.0.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/yarnpkg\/yarn",
            "commit_href":"https:\/\/github.com\/yarnpkg\/yarn\/commit\/0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
            "commit_sha":"0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
            "patch":"SINGLE",
            "chain_ord":"['0474b8c66a8ea298f5e4dedc67b2de464297ad1c']",
            "before_first_fix_commit":"{'7f606ec3a31b53873056d48840e8acc647dca879'}",
            "last_fix_commit":"0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/28\/2019, 12:16:15",
            "message":"Prevents loading the cache if the stored integrity doesnt match",
            "author":"Ma\u00ebl Nison",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'src\/package-fetcher.js': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/yarnpkg\/yarn\/raw\/0474b8c66a8ea298f5e4dedc67b2de464297ad1c\/src%2Fpackage-fetcher.js', 'patch': \"@@ -9,8 +9,17 @@ import * as fetchers from '.\/fetchers\/index.js';\\n import * as fs from '.\/util\/fs.js';\\n import * as promise from '.\/util\/promise.js';\\n \\n-async function fetchCache(dest: string, fetcher: Fetchers, config: Config): Promise<FetchedMetadata> {\\n-  const {hash, package: pkg} = await config.readPackageMetadata(dest);\\n+const ssri = require('ssri');\\n+\\n+async function fetchCache(dest: string, fetcher: Fetchers, config: Config, integrity: ?string): Promise<FetchedMetadata> {\\n+  const {hash, package: pkg, remote} = await config.readPackageMetadata(dest);\\n+\\n+  if (integrity) {\\n+    if (!remote.integrity || !ssri.parse(integrity).match(remote.integrity)) {\\n+      throw new MessageError('Incorrect integrity when fetching from the cache');\\n+    }\\n+  }\\n+\\n   await fetcher.setupMirrorFromCache();\\n   return {\\n     package: pkg,\\n@@ -40,7 +49,7 @@ export async function fetchOneRemote(\\n \\n   const fetcher = new Fetcher(dest, remote, config);\\n   if (await config.isValidModuleDest(dest)) {\\n-    return fetchCache(dest, fetcher, config);\\n+      return fetchCache(dest, fetcher, config, remote.integrity);\\n   }\\n \\n   \/\/ remove as the module may be invalid\"}}",
            "message_norm":"prevents loading the cache if the stored integrity doesnt match",
            "language":"en",
            "entities":"[('prevents', 'ACTION', ''), ('integrity', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/package-fetcher.js'])",
            "num_files":1.0
        },
        {
            "index":2871,
            "vuln_id":"GHSA-r5jw-62xg-j433",
            "cwe_id":"{'CWE-79'}",
            "score":6.4,
            "chain":"{'https:\/\/github.com\/kaminari\/kaminari\/commit\/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in Kaminari ### Impact\nIn Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1.\n\n### Releases\nThe 1.2.1 gem including the patch has already been released.\nAll past released versions are affected by this vulnerability.\n\n### Workarounds\nApplication developers who can't update the gem can workaround by overriding the `PARAM_KEY_EXCEPT_LIST` constant.\n\n```ruby\nmodule Kaminari::Helpers\n  PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\nend\n```\n\n### Credits\nThanks to Daniel Mircea for finding the issue and sending a patch via GitHub. Also thanks to Aditya Prakash for reporting the vulnerability.",
            "published_date":"2020-05-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/kaminari\/kaminari",
            "commit_href":"https:\/\/github.com\/kaminari\/kaminari\/commit\/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
            "commit_sha":"8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
            "patch":"SINGLE",
            "chain_ord":"['8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8']",
            "before_first_fix_commit":"{'04d86ed3f2537aff620941413e5fca254e87aebe'}",
            "last_fix_commit":"8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2020, 21:02:59",
            "message":"Blacklist \"original_script_name\" get param",
            "author":"Daniel Mircea",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'kaminari-core\/lib\/kaminari\/helpers\/tags.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kaminari\/kaminari\/raw\/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8\/kaminari-core%2Flib%2Fkaminari%2Fhelpers%2Ftags.rb', 'patch': '@@ -2,7 +2,7 @@\\n \\n module Kaminari\\n   module Helpers\\n-    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze\\n+    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\\n \\n     # A tag stands for an HTML tag inside the paginator.\\n     # Basically, a tag has its own partial template file, so every tag can be'}}",
            "message_norm":"blacklist \"original_script_name\" get param",
            "language":"ca",
            "entities":"[('blacklist', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['kaminari-core\/lib\/kaminari\/helpers\/tags.rb'])",
            "num_files":1.0
        },
        {
            "index":648,
            "vuln_id":"GHSA-5jgj-h9wp-53fr",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/idno\/known\/commit\/80b716a8392fb71cfce84d03aaf7c045c62f6350'}",
            "dataset":"osv",
            "summary":"Known vulnerable to code execution via SVG file in v1.3.1 An issue in the isSVG() function of Known v1.3.1 allows attackers to execute arbitrary code via a crafted SVG file.\n\nThe researcher report indicates that versions 1.3.1 and prior are vulnerable. Version 1.2.2 is the last version tagged on GitHub and in Packagist, and development related to the 1.3.x branch is currently on the `dev` branch of the idno\/known repository.",
            "published_date":"2022-07-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/idno\/known",
            "commit_href":"https:\/\/github.com\/idno\/known\/commit\/80b716a8392fb71cfce84d03aaf7c045c62f6350",
            "commit_sha":"80b716a8392fb71cfce84d03aaf7c045c62f6350",
            "patch":"SINGLE",
            "chain_ord":"['80b716a8392fb71cfce84d03aaf7c045c62f6350']",
            "before_first_fix_commit":"{'e86e779cf1db93cd488ee578e92a16008132a114'}",
            "last_fix_commit":"80b716a8392fb71cfce84d03aaf7c045c62f6350",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/18\/2021, 15:44:26",
            "message":"Checking for script tags in GIFs etc (#3017)",
            "author":"Ben Werdmuller",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'Idno\/Entities\/File.php': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/idno\/known\/raw\/80b716a8392fb71cfce84d03aaf7c045c62f6350\/Idno%2FEntities%2FFile.php', 'patch': \"@@ -285,6 +285,20 @@ public static function isImage($file_path)\\n             return false;\\n         }\\n \\n+        \/**\\n+         * Detects whether the file contains PHP or script tags, eg to check for embedded code in GIFs\\n+         * @param $file_path\\n+         * @return bool\\n+         *\/\\n+        public static function isFileFreeFromScriptTags($file_path)\\n+        {\\n+            if ($contents = file_get_contents($file_path)) {\\n+                if (stripos($contents, '<script') || strpos($contents, '<?')) return false;\\n+                return true;\\n+            }\\n+            return false;\\n+        }\\n+\\n         \/**\\n          * Retrieve a file by ID\\n          *\"}}",
            "message_norm":"checking for script tags in gifs etc (#3017)",
            "language":"en",
            "entities":"[('#3017', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Idno\/Entities\/File.php'])",
            "num_files":1.0
        },
        {
            "index":301,
            "vuln_id":"GHSA-3q6g-vf58-7m4g",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/python-restx\/flask-restx\/commit\/bab31e085f355dd73858fd3715f7ed71849656da'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in flask-restx Flask RESTX contains a regular expression that is vulnerable to [ReDoS](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS) (Regular Expression Denial of Service) in `email_regex`.",
            "published_date":"2021-09-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/python-restx\/flask-restx",
            "commit_href":"https:\/\/github.com\/python-restx\/flask-restx\/commit\/bab31e085f355dd73858fd3715f7ed71849656da",
            "commit_sha":"bab31e085f355dd73858fd3715f7ed71849656da",
            "patch":"SINGLE",
            "chain_ord":"['bab31e085f355dd73858fd3715f7ed71849656da']",
            "before_first_fix_commit":"{'e1ab7e34a47fa8c2fd025402b9c65afbe24d5e98'}",
            "last_fix_commit":"bab31e085f355dd73858fd3715f7ed71849656da",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/01\/2021, 19:53:02",
            "message":"optimize email regex (credits: @kevinbackhouse, fix: #372)",
            "author":"ziirish",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'flask_restx\/inputs.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/python-restx\/flask-restx\/raw\/bab31e085f355dd73858fd3715f7ed71849656da\/flask_restx%2Finputs.py', 'patch': '@@ -48,7 +48,7 @@ def my_type(value):\\n \\n \\n email_regex = re.compile(\\n-    r\"^\" \"(?P<local>[^@]*[^@.])\" r\"@\" r\"(?P<server>[^@]+(?:\\\\.[^@]+)*)\" r\"$\",\\n+    r\"^\" \"(?P<local>[^@]*[^@.])\" r\"@\" r\"(?P<server>[^@\\\\.]+(?:\\\\.[^@\\\\.]+)*)\" r\"$\",\\n     re.IGNORECASE,\\n )'}}",
            "message_norm":"optimize email regex (credits: @kevinbackhouse, fix: #372)",
            "language":"en",
            "entities":"[('optimize', 'ACTION', ''), ('#372', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['flask_restx\/inputs.py'])",
            "num_files":1.0
        },
        {
            "index":2475,
            "vuln_id":"GHSA-mw6j-hh29-h379",
            "cwe_id":"{'CWE-190'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3796cc4fcd93ae55812a457abc96dcd55fbb854b'}",
            "dataset":"osv",
            "summary":"`CHECK` failure in depthwise ops via overflows ### Impact\nThe implementation of depthwise ops in TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) caused by overflowing the number of elements in a tensor:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\nfilter_sizes = tf.constant(1879048192, shape=[13], dtype=tf.int32)\nout_backprop = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\ntf.raw_ops.DepthwiseConv2dNativeBackpropFilter(\n    input=input, filter_sizes=filter_sizes, out_backprop=out_backprop, strides=[1, 1, 1, 1], padding=\"SAME\")\n```\n  \nThis is another instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197).\n  \n### Patches\nWe have patched the issue in GitHub commit [3796cc4fcd93ae55812a457abc96dcd55fbb854b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3796cc4fcd93ae55812a457abc96dcd55fbb854b).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3796cc4fcd93ae55812a457abc96dcd55fbb854b",
            "commit_sha":"3796cc4fcd93ae55812a457abc96dcd55fbb854b",
            "patch":"SINGLE",
            "chain_ord":"['3796cc4fcd93ae55812a457abc96dcd55fbb854b']",
            "before_first_fix_commit":"{'8f704c59219243ee66bdeb93cb3471e8e6af7d86'}",
            "last_fix_commit":"3796cc4fcd93ae55812a457abc96dcd55fbb854b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/27\/2022, 22:53:46",
            "message":"Fix tf.raw_ops.DepthwiseConv2dNativeBackpropInput vulnerability with large input sizes.\n\nUse AddDimWithStatus rather than AddDim in order to catch and report integer overflow gracefully.\n\nPiperOrigin-RevId: 444989983",
            "author":"Alan Liu",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/depthwise_conv_grad_op.cc': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3796cc4fcd93ae55812a457abc96dcd55fbb854b\/tensorflow%2Fcore%2Fkernels%2Fdepthwise_conv_grad_op.cc', 'patch': '@@ -625,7 +625,7 @@ class DepthwiseConv2dNativeBackpropInputOp : public OpKernel {\\n       OP_REQUIRES(context, in_sizes_data[i] >= 0,\\n                   errors::InvalidArgument(\"Dimension \", i,\\n                                           \" of input_sizes must be >= 0\"));\\n-      input_shape.AddDim(in_sizes_data[i]);\\n+      OP_REQUIRES_OK(context, input_shape.AddDimWithStatus(in_sizes_data[i]));\\n     }\\n     const TensorShape& filter_shape = filter.shape();\\n     EXTRACT_AND_VERIFY_DIMENSIONS(\"DepthwiseConv2DBackpropInput\");\\n@@ -1131,7 +1131,8 @@ class DepthwiseConv2dNativeBackpropFilterOp : public OpKernel {\\n       OP_REQUIRES(context, filter_sizes_data[i] >= 0,\\n                   errors::InvalidArgument(\"Dimension \", i,\\n                                           \" of filter_sizes must be >= 0\"));\\n-      filter_shape.AddDim(filter_sizes_data[i]);\\n+      OP_REQUIRES_OK(context,\\n+                     filter_shape.AddDimWithStatus(filter_sizes_data[i]));\\n     }\\n     const TensorShape& input_shape = input.shape();'}}",
            "message_norm":"fix tf.raw_ops.depthwiseconv2dnativebackpropinput vulnerability with large input sizes.\n\nuse adddimwithstatus rather than adddim in order to catch and report integer overflow gracefully.\n\npiperorigin-revid: 444989983",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('integer overflow', 'SECWORD', ''), ('444989983', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/depthwise_conv_grad_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2845,
            "vuln_id":"GHSA-r35g-4525-29fq",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1a2a87229d1d61e23a39373777c056161eb4084d'}",
            "dataset":"osv",
            "summary":"Division by 0 in `FusedBatchNorm` ### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.FusedBatchNorm`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n    x=x, scale=scale, offset=offset, mean=mean,\n    variance=variance, epsilon=epsilon,\n    exponential_avg_factor=exponential_avg_factor,\n    data_format=data_format, is_training=is_training)\n``` \n  \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/828f346274841fa7505f7020e88ca36c22e557ab\/tensorflow\/core\/kernels\/fused_batch_norm_op.cc#L295-L297) performs a division based on the last dimension of the `x` tensor:\n\n```cc \nconst int depth = x.dimension(3);\nconst int rest_size = size \/ depth;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [1a2a87229d1d61e23a39373777c056161eb4084d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1a2a87229d1d61e23a39373777c056161eb4084d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1a2a87229d1d61e23a39373777c056161eb4084d",
            "commit_sha":"1a2a87229d1d61e23a39373777c056161eb4084d",
            "patch":"SINGLE",
            "chain_ord":"['1a2a87229d1d61e23a39373777c056161eb4084d']",
            "before_first_fix_commit":"{'828f346274841fa7505f7020e88ca36c22e557ab'}",
            "last_fix_commit":"1a2a87229d1d61e23a39373777c056161eb4084d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 18:30:28",
            "message":"Fix FPE issue with `tf.raw_ops.FusedBatchNorm`.\n\nPiperOrigin-RevId: 370948185\nChange-Id: If0c8e0320062ed6363e94ff5fe38e6a301f69ac2",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/fused_batch_norm_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1a2a87229d1d61e23a39373777c056161eb4084d\/tensorflow%2Fcore%2Fkernels%2Ffused_batch_norm_op.cc', 'patch': '@@ -293,6 +293,9 @@ struct FusedBatchNorm<CPUDevice, T, U, \/* is_training= *\/ false> {\\n     const CPUDevice& d = context->eigen_device<CPUDevice>();\\n \\n     const int depth = x.dimension(3);\\n+    OP_REQUIRES(\\n+        context, depth != 0,\\n+        errors::Internal(\"The 4th element in the input shape cannot be 0.\"));\\n     const int size = x.size();\\n     const int rest_size = size \/ depth;\\n     Eigen::DSizes<Eigen::Index, 2> rest_by_depth(rest_size, depth);'}}",
            "message_norm":"fix fpe issue with `tf.raw_ops.fusedbatchnorm`.\n\npiperorigin-revid: 370948185\nchange-id: if0c8e0320062ed6363e94ff5fe38e6a301f69ac2",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('issue', 'FLAW', ''), ('370948185', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/fused_batch_norm_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2325,
            "vuln_id":"GHSA-m242-wc86-8768",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/fedora-infra\/python-fedora\/commit\/b27f38a67573f4c989710c9bfb726dd4c1eeb929'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects python-fedora python-fedora 0.8.0 and lower is vulnerable to an open redirect resulting in loss of CSRF protection",
            "published_date":"2018-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/fedora-infra\/python-fedora",
            "commit_href":"https:\/\/github.com\/fedora-infra\/python-fedora\/commit\/b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "commit_sha":"b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "patch":"SINGLE",
            "chain_ord":"['b27f38a67573f4c989710c9bfb726dd4c1eeb929']",
            "before_first_fix_commit":"{'6cf9094e12361a0aa306752e9d9fd8bfaaf51c85'}",
            "last_fix_commit":"b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/11\/2017, 13:52:01",
            "message":"Disable covert redirects and CSRF token leaking\n\nThis disallows the url() function from returning any remote URLs.\nThis prevents covert redirects, and also prevents us from leaking\nCSRF tokens to outside parties.\n\nSigned-off-by: Patrick Uiterwijk <puiterwijk@redhat.com>",
            "author":"Patrick Uiterwijk",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'fedora\/tg\/utils.py': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fedora-infra\/python-fedora\/raw\/b27f38a67573f4c989710c9bfb726dd4c1eeb929\/fedora%2Ftg%2Futils.py', 'patch': \"@@ -81,6 +81,11 @@ def url(tgpath, tgparams=None, **kwargs):\\n     '''\\n     if not isinstance(tgpath, six.string_types):\\n         tgpath = '\/'.join(list(tgpath))\\n+    if not tgpath.startswith('\/'):\\n+        # Do not allow the url() function to be used for external urls.\\n+        # This function is primarily used in redirect() calls, so this prevents\\n+        # covert redirects and thus CSRF leaking.\\n+        tgpath = '\/'\\n     if tgpath.startswith('\/'):\\n         webpath = (config.get('server.webpath') or '').rstrip('\/')\\n         if tg_util.request_available():\"}}",
            "message_norm":"disable covert redirects and csrf token leaking\n\nthis disallows the url() function from returning any remote urls.\nthis prevents covert redirects, and also prevents us from leaking\ncsrf tokens to outside parties.\n\nsigned-off-by: patrick uiterwijk <puiterwijk@redhat.com>",
            "language":"en",
            "entities":"[('csrf', 'SECWORD', ''), ('prevents', 'ACTION', ''), ('prevents', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('puiterwijk@redhat.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['fedora\/tg\/utils.py'])",
            "num_files":1.0
        },
        {
            "index":2047,
            "vuln_id":"GHSA-hf4q-52x6-4p57",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/d9bae9df873c2d2a13a2eb08d512019d49ebca68'}",
            "dataset":"osv",
            "summary":"Unrestricted file upload leads to stored cross-site scripting in Microweber Microweber prior to version 1.2.12 allows unrestricted file upload, which could lead to stored cross-site scripting.",
            "published_date":"2022-03-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/d9bae9df873c2d2a13a2eb08d512019d49ebca68",
            "commit_sha":"d9bae9df873c2d2a13a2eb08d512019d49ebca68",
            "patch":"SINGLE",
            "chain_ord":"['d9bae9df873c2d2a13a2eb08d512019d49ebca68']",
            "before_first_fix_commit":"{'8902c415144823c48b056f881aa00ceb1f5d350f'}",
            "last_fix_commit":"d9bae9df873c2d2a13a2eb08d512019d49ebca68",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/09\/2022, 14:55:02",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'src\/MicroweberPackages\/Utils\/System\/Files.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/d9bae9df873c2d2a13a2eb08d512019d49ebca68\/src%2FMicroweberPackages%2FUtils%2FSystem%2FFiles.php', 'patch': \"@@ -591,6 +591,7 @@ function get_dangerous_files_extentions()\\n             'py',\\n             'alfa',\\n             'asp',\\n+            'aspx',\\n             'htaccess',\\n             'exe',\\n             'msi',\"}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Utils\/System\/Files.php'])",
            "num_files":1.0
        },
        {
            "index":2100,
            "vuln_id":"GHSA-hp68-xhvj-x6j6",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc'}",
            "dataset":"osv",
            "summary":"jsx-slack insufficient patch for CVE-2021-43838 ReDoS We found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient to save from Regular Expression Denial of Service (ReDoS) attack.\n\nThis vulnerability affects to jsx-slack v4.5.1 and earlier versions.\n\n### Impact\n\nIf attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources.\n\n```javascript\n\/** @jsxImportSource jsx-slack *\/\nimport { Section } from 'jsx-slack'\n\nconsole.log(\n  <Section>\n    <blockquote>\n      {[...Array(40)].map(() => (\n        <p>\u4e9c<\/p>\n      ))}\n    <\/blockquote>\n  <\/Section>\n)\n```\n\nv4.5.1 has released by passing the test against ASCII characters but missed the case of multibyte characters.\nhttps:\/\/github.com\/yhatt\/jsx-slack\/security\/advisories\/GHSA-55xv-f85c-248q\n\n### Patches\n\njsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.\n\n### References\n\n- https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc\n\n### Credits\n\nThanks to @hieki for finding out this vulnerability.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/yhatt\/jsx-slack",
            "commit_href":"https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "commit_sha":"46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "patch":"SINGLE",
            "chain_ord":"['46bc88391d89d5fda4ce689e18ca080bcdd29ecc']",
            "before_first_fix_commit":"{'c3722705c8aadf544f922a974883578aa27dbea3'}",
            "last_fix_commit":"46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/18\/2021, 07:03:24",
            "message":"Prevent catastrophic backtracking in blockquote escape replacer",
            "author":"Yuki Hattori",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 6, 'total': 13}",
            "files":"{'src\/mrkdwn\/escape.ts': {'additions': 7, 'deletions': 6, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/yhatt\/jsx-slack\/raw\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc\/src%2Fmrkdwn%2Fescape.ts', 'patch': '@@ -1,20 +1,21 @@\\n \/\/ An internal HTML tag and emoji shorthand should not escape\\n const preventEscapeRegex =\\n-  \/(<.*?>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b\\'\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2fd5\\\\u3005\\\\u3041-\\\\u3096\\\\u30a0-\\\\u30ff\\\\u3130-\\\\u318f\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcb\\\\ua960-\\\\ua97f\\\\uac00-\\\\ud7ff\\\\uff10-\\\\uff19\\\\uff41-\\\\uff5a\\\\uff61-\\\\uff9f]+:)\/\\n+  \/(<[^>]*>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b\\'\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2fd5\\\\u3005\\\\u3041-\\\\u3096\\\\u30a0-\\\\u30ff\\\\u3130-\\\\u318f\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcb\\\\ua960-\\\\ua97f\\\\uac00-\\\\ud7ff\\\\uff10-\\\\uff19\\\\uff41-\\\\uff5a\\\\uff61-\\\\uff9f]+:)\/\\n \\n const generateReplacerForEscape = (fallback: string) => (matched: string) =>\\n   `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}<\/span>`\\n \\n export const escapeReplacers = {\\n   blockquote: (partial: string) =>\\n     partial\\n-      .replace(\/^((?:<.*?>)*)(.{4})\/gm, (matched, leading, character) =>\\n-        character === \\'&gt;\\' ? `${leading}\\\\u00ad&gt;` : matched\\n+      .replace(\\n+        \/^((?:<(?:[^>]|>(?=<))*>)?)(&gt;)\/gm,\\n+        (_, leadingTags, character) => `${leadingTags}\\\\u00ad${character}`\\n       )\\n       .replace(\\n-        \/^((?:<.*?>)*)(\uff1e)\/gm,\\n-        (_, leading, character) =>\\n-          `${leading}${generateReplacerForEscape(\\'\\\\u00ad\uff1e\\')(character)}`\\n+        \/^((?:<(?:[^>]|>(?=<))*>)?)(\uff1e)\/gm,\\n+        (_, leadingTags, character) =>\\n+          `${leadingTags}${generateReplacerForEscape(\\'\\\\u00ad\uff1e\\')(character)}`\\n       ),\\n   bold: (partial: string) =>\\n     partial'}}",
            "message_norm":"prevent catastrophic backtracking in blockquote escape replacer",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/mrkdwn\/escape.ts'])",
            "num_files":1.0
        },
        {
            "index":2771,
            "vuln_id":"GHSA-qjj8-32p7-h289",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11'}",
            "dataset":"osv",
            "summary":"Division by 0 in `ResourceGather` ### Impact\nAn attacker can trigger a crash via a floating point exception in `tf.raw_ops.ResourceGather`:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[]],shape=(0,1),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=1,\n  validate_indices=False)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/resource_variable_ops.cc#L725-L731) computes the value of a value, `batch_size`, and then divides by it without checking that this value is not 0. \n\n### Patches\nWe have patched the issue in GitHub commit  [ac117ee8a8ea57b73d34665cdf00ef3303bc0b11](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
            "commit_sha":"ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
            "patch":"SINGLE",
            "chain_ord":"['ac117ee8a8ea57b73d34665cdf00ef3303bc0b11']",
            "before_first_fix_commit":"{'3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d'}",
            "last_fix_commit":"ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 05:23:28",
            "message":"Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 2, 'total': 11}",
            "files":"{'tensorflow\/core\/kernels\/resource_variable_ops.cc': {'additions': 9, 'deletions': 2, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11\/tensorflow%2Fcore%2Fkernels%2Fresource_variable_ops.cc', 'patch': '@@ -710,7 +710,8 @@ class ResourceGatherOp : public OpKernel {\\n         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),\\n                      indices.flat<Index>());\\n \\n-        AddBatchOffsets(&tmp_indices, params);\\n+        AddBatchOffsets(c, &tmp_indices, params);\\n+        if (!c->status().ok()) return;\\n         op_indices = &tmp_indices;\\n       }\\n \\n@@ -742,11 +743,17 @@ class ResourceGatherOp : public OpKernel {\\n   \/\/ Example: batch_dims = 1, indices = [[0, 1, 2], [0, 1, 2]]\\n   \/\/ If indexing into a params dimension of size 4, then the indices will become\\n   \/\/ [0, 1, 2, 4, 5, 6]\\n-  void AddBatchOffsets(Tensor* indices, const Tensor& params) {\\n+  void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,\\n+                       const Tensor& params) {\\n     int64_t batch_size = 1;  \/\/ The size of all batch dimensions.\\n     for (int idx = 0; idx < batch_dims_; ++idx) {\\n       batch_size *= params.dim_size(idx);\\n     }\\n+    OP_REQUIRES(\\n+        ctx, batch_size != 0,\\n+        errors::InvalidArgument(\\n+            \"Inner size of indices would result in batch_size of 0 and a \",\\n+            \"division by 0 in the implementation. This is illegal\"));\\n \\n     auto indices_flat = indices->flat<Index>();\\n     int64_t const index_inner_size = indices->NumElements() \/ batch_size;'}}",
            "message_norm":"prevent division by 0 in `resource_variable_ops.cc`\n\npiperorigin-revid: 387939939\nchange-id: ib04902d63756633999959a70613f2eaa30c2c151",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('387939939', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/resource_variable_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3272,
            "vuln_id":"GHSA-wg4r-q74r-p7c8",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/4b6e6603c714aab1de346c5f5cb0bbb4c871be1f'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in ShowDoc ShowDoc is vulnerable to stored cross-site scripting due to unrestricted file upload in versions 2.10.3 and prior. A patch is available and anticipated to be part of version 2.10.4.",
            "published_date":"2022-03-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/4b6e6603c714aab1de346c5f5cb0bbb4c871be1f",
            "commit_sha":"4b6e6603c714aab1de346c5f5cb0bbb4c871be1f",
            "patch":"SINGLE",
            "chain_ord":"['4b6e6603c714aab1de346c5f5cb0bbb4c871be1f']",
            "before_first_fix_commit":"{'d4363f73fb50193c9701982b59642696edf834a1', '61a23da1925119454d8477e9cf884b6cba93364c'}",
            "last_fix_commit":"4b6e6603c714aab1de346c5f5cb0bbb4c871be1f",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/13\/2022, 12:16:25",
            "message":"Merge pull request #1630 from ajaysenr\/master\n\nUpdate AttachmentModel.class.php",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/4b6e6603c714aab1de346c5f5cb0bbb4c871be1f\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -305,6 +305,7 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \".xml\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xxhtml\")\\n \\t\\t\\t|| $isDangerStr($filename , \".asp\")\\t\\t\\t\\n+\\t\\t\\t|| $isDangerStr($filename , \".xsl\")\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
            "message_norm":"merge pull request #1630 from ajaysenr\/master\n\nupdate attachmentmodel.class.php",
            "language":"en",
            "entities":"[('#1630', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":898,
            "vuln_id":"GHSA-6rv4-4qv6-88g2",
            "cwe_id":"{'CWE-1321'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/IonicaBizau\/set-or-get.js\/commit\/82ede5cccb2e8d13e4f62599203a4389f6d8e936'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in set-or-get Prototype pollution vulnerability in \u2018set-or-get\u2019 version 1.0.0 through 1.2.10 allows an attacker to cause a denial of service and may lead to remote code execution.",
            "published_date":"2021-04-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/IonicaBizau\/set-or-get.js",
            "commit_href":"https:\/\/github.com\/IonicaBizau\/set-or-get.js\/commit\/82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "commit_sha":"82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "patch":"SINGLE",
            "chain_ord":"['82ede5cccb2e8d13e4f62599203a4389f6d8e936']",
            "before_first_fix_commit":"{'6a7767c49df4be3efd5e32a68a1ea1fa449cbd03'}",
            "last_fix_commit":"82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/17\/2020, 17:22:45",
            "message":"Security fix for Prototype Pollution",
            "author":"Arjun Shibu",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/IonicaBizau\/set-or-get.js\/raw\/82ede5cccb2e8d13e4f62599203a4389f6d8e936\/lib%2Findex.js', 'patch': '@@ -13,6 +13,8 @@ var Deffy = require(\"deffy\");\\n  * @return {Object|Array} The field value.\\n  *\/\\n function SetOrGet(input, field, def) {\\n+    if (field == \\'__proto__\\' || field == \\'constructor\\' || field == \\'prototype\\')\\n+        throw new Error(\\'Restricted setting magical attributes\\')\\n     return input[field] = Deffy(input[field], def);\\n }'}}",
            "message_norm":"security fix for prototype pollution",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2948,
            "vuln_id":"GHSA-rh4p-g7x6-8pqg",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/75162b7f2d8ac2b37d17564e9c979ba1bae707e8', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7f0d390ad77d838cbb81d4586c83ec822f384ce8'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1092, CVE-2019-1103, CVE-2019-1106, CVE-2019-1107.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7f0d390ad77d838cbb81d4586c83ec822f384ce8",
            "commit_sha":"7f0d390ad77d838cbb81d4586c83ec822f384ce8",
            "patch":"MULTI",
            "chain_ord":"['7f0d390ad77d838cbb81d4586c83ec822f384ce8', '75162b7f2d8ac2b37d17564e9c979ba1bae707e8']",
            "before_first_fix_commit":"{'12c31f0e83ddc511e57b9aa1e78533899199eb32', 'ba1f4455f921ce5f12091ff8a11c8028c6a64b17'}",
            "last_fix_commit":"75162b7f2d8ac2b37d17564e9c979ba1bae707e8",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/06\/2019, 18:38:26",
            "message":"[CVE-2019-1062] Chakra JIT Type Confusion",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 6, 'total': 11}",
            "files":"{'lib\/Backend\/Opnd.cpp': {'additions': 5, 'deletions': 6, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/7f0d390ad77d838cbb81d4586c83ec822f384ce8\/lib%2FBackend%2FOpnd.cpp', 'patch': \"@@ -962,7 +962,8 @@ PropertySymOpnd::IsObjectHeaderInlined() const\\n bool\\n PropertySymOpnd::ChangesObjectLayout() const\\n {\\n-    JITTypeHolder cachedType = this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n+    JITTypeHolder cachedType = this->HasInitialType() ? this->GetInitialType() : \\n+        this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n \\n     JITTypeHolder finalType = this->GetFinalType();\\n \\n@@ -987,13 +988,11 @@ PropertySymOpnd::ChangesObjectLayout() const\\n         \/\/ This is the case where the type transition actually occurs. (This is the only case that's detectable\\n         \/\/ during the loop pre-pass, since final types are not in place yet.)\\n \\n-        Assert(cachedType != nullptr && Js::DynamicType::Is(cachedType->GetTypeId()));\\n-\\n-        const JITTypeHandler * cachedTypeHandler = cachedType->GetTypeHandler();\\n         const JITTypeHandler * initialTypeHandler = initialType->GetTypeHandler();\\n \\n-        return cachedTypeHandler->GetInlineSlotCapacity() != initialTypeHandler->GetInlineSlotCapacity() ||\\n-            cachedTypeHandler->GetOffsetOfInlineSlots() != initialTypeHandler->GetOffsetOfInlineSlots();\\n+        \/\/ If no final type has been set in the forward pass, then we have no way of knowing how the object shape will evolve here.\\n+        \/\/ If the initial type is object-header-inlined, assume that the layout may change.\\n+        return initialTypeHandler->IsObjectHeaderInlinedTypeHandler();\\n     }\\n \\n     return false;\"}}",
            "message_norm":"[cve-2019-1062] chakra jit type confusion",
            "language":"en",
            "entities":"[('cve-2019-1062', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/Opnd.cpp'])",
            "num_files":1.0
        },
        {
            "index":1697,
            "vuln_id":"GHSA-f8h4-7rgh-q2gm",
            "cwe_id":"{'CWE-787', 'CWE-120'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e0b6e58c328059829c3eb968136f17aa72b6c876'}",
            "dataset":"osv",
            "summary":"Segfault and heap buffer overflow in `{Experimental,}DatasetToTFRecord` ### Impact\nThe implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\ndataset = tf.data.experimental.to_variant(dataset)\ntf.raw_ops.ExperimentalDatasetToTFRecord(\n  input_dataset=dataset,\n  filename='\/tmp\/output',\n  compression_type='')\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/data\/experimental\/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types.\n\n### Patches\nWe have patched the issue in GitHub commit [e0b6e58c328059829c3eb968136f17aa72b6c876](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e0b6e58c328059829c3eb968136f17aa72b6c876).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e0b6e58c328059829c3eb968136f17aa72b6c876",
            "commit_sha":"e0b6e58c328059829c3eb968136f17aa72b6c876",
            "patch":"SINGLE",
            "chain_ord":"['e0b6e58c328059829c3eb968136f17aa72b6c876']",
            "before_first_fix_commit":"{'b5b9ae94a68215d4498ea2b3d1072dc4b2bf5600'}",
            "last_fix_commit":"e0b6e58c328059829c3eb968136f17aa72b6c876",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/29\/2021, 21:58:43",
            "message":"Fix segfault\/heap buffer overflow in `{Experimental,}DatasetToTFRecord` where dataset is numeric.\n\nCode assumes only strings inputs and then interprets numbers as valid `tstring`s. Then, when trying to compute the CRC of the record this results in heap buffer overflow.\n\nPiperOrigin-RevId: 387675909\nChange-Id: I7396b9b8afc1ac744112af7c0b1cd7bb41e0f556",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 1, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/data\/experimental\/to_tf_record_op.cc': {'additions': 14, 'deletions': 1, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e0b6e58c328059829c3eb968136f17aa72b6c876\/tensorflow%2Fcore%2Fkernels%2Fdata%2Fexperimental%2Fto_tf_record_op.cc', 'patch': '@@ -18,6 +18,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/function_handle_cache.h\"\\n #include \"tensorflow\/core\/framework\/op_kernel.h\"\\n #include \"tensorflow\/core\/framework\/resource_mgr.h\"\\n+#include \"tensorflow\/core\/framework\/types.h\"\\n #include \"tensorflow\/core\/kernels\/ops_util.h\"\\n #include \"tensorflow\/core\/lib\/core\/threadpool.h\"\\n #include \"tensorflow\/core\/lib\/io\/record_writer.h\"\\n@@ -91,8 +92,20 @@ class ToTFRecordOp : public AsyncOpKernel {\\n     TF_RETURN_IF_ERROR(finalized_dataset->MakeIterator(\\n         &iter_ctx, \/*parent=*\/nullptr, \"ToTFRecordOpIterator\", &iterator));\\n \\n+    const int num_output_dtypes = finalized_dataset->output_dtypes().size();\\n+    if (num_output_dtypes != 1) {\\n+      return errors::InvalidArgument(\\n+          \"ToTFRecordOp currently only support datasets of 1 single column, \",\\n+          \"but got \", num_output_dtypes);\\n+    }\\n+    const DataType dt = finalized_dataset->output_dtypes()[0];\\n+    if (dt != DT_STRING) {\\n+      return errors::InvalidArgument(\\n+          \"ToTFRecordOp currently only supports DT_STRING dataypes, but got \",\\n+          DataTypeString(dt));\\n+    }\\n     std::vector<Tensor> components;\\n-    components.reserve(finalized_dataset->output_dtypes().size());\\n+    components.reserve(num_output_dtypes);\\n     bool end_of_sequence;\\n     do {\\n       TF_RETURN_IF_ERROR('}}",
            "message_norm":"fix segfault\/heap buffer overflow in `{experimental,}datasettotfrecord` where dataset is numeric.\n\ncode assumes only strings inputs and then interprets numbers as valid `tstring`s. then, when trying to compute the crc of the record this results in heap buffer overflow.\n\npiperorigin-revid: 387675909\nchange-id: i7396b9b8afc1ac744112af7c0b1cd7bb41e0f556",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('buffer overflow', 'SECWORD', ''), ('crc', 'SECWORD', ''), ('buffer overflow', 'SECWORD', ''), ('387675909', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/data\/experimental\/to_tf_record_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1331,
            "vuln_id":"GHSA-976r-qfjj-c24w",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/apache\/airflow\/commit\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8'}",
            "dataset":"osv",
            "summary":"Command injection via Celery broker in Apache Airflow An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attacker can connect to the broker (Redis, RabbitMQ) directly, it is possible to inject commands, resulting in the celery worker running arbitrary commands.",
            "published_date":"2020-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/airflow",
            "commit_href":"https:\/\/github.com\/apache\/airflow\/commit\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "commit_sha":"afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "patch":"SINGLE",
            "chain_ord":"['afa4b11fddfdbadb048f742cf66d5c21c675a5c8']",
            "before_first_fix_commit":"{'63260c9955d12a60d8c143a932432013dd05eebb'}",
            "last_fix_commit":"afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/27\/2019, 08:24:41",
            "message":"[AIRFLOW-6351] security - ui - Add Cross Site Scripting defence (#6913)",
            "author":"tooptoop4",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'airflow\/www_rbac\/views.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/airflow\/raw\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8\/airflow%2Fwww_rbac%2Fviews.py', 'patch': '@@ -321,7 +321,7 @@ def get_int_arg(value, default=0):\\n             num_dag_to=min(end, num_of_all_dags),\\n             num_of_all_dags=num_of_all_dags,\\n             paging=wwwutils.generate_pages(current_page, num_of_pages,\\n-                                           search=arg_search_query,\\n+                                           search=escape(arg_search_query) if arg_search_query else None,\\n                                            showPaused=not hide_paused),\\n             num_runs=num_runs,\\n             tags=tags)'}}",
            "message_norm":"[airflow-6351] security - ui - add cross site scripting defence (#6913)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('add', 'ACTION', ''), ('cross site scripting', 'SECWORD', ''), ('defence', 'SECWORD', ''), ('#6913', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['airflow\/www_rbac\/views.py'])",
            "num_files":1.0
        },
        {
            "index":3502,
            "vuln_id":"GHSA-xw79-hhv6-578c",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/zeit\/serve-handler\/commit\/65b4d4183a31a8076c78c40118acb0ca1b64f620'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in serve Versions of `serve` prior to 10.0.2 are vulnerable to Cross-Site Scripting (XSS). The package does not encode output, allowing attackers to execute arbitrary JavaScript in the victim's browser if user-supplied input is rendered.\n\n\n## Recommendation\n\nUpgrade to version 10.0.2 or later.",
            "published_date":"2020-09-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/zeit\/serve-handler",
            "commit_href":"https:\/\/github.com\/zeit\/serve-handler\/commit\/65b4d4183a31a8076c78c40118acb0ca1b64f620",
            "commit_sha":"65b4d4183a31a8076c78c40118acb0ca1b64f620",
            "patch":"SINGLE",
            "chain_ord":"['65b4d4183a31a8076c78c40118acb0ca1b64f620']",
            "before_first_fix_commit":"{'2b3be81a46e09fc5f8bc2c69a5311d439dac74af'}",
            "last_fix_commit":"65b4d4183a31a8076c78c40118acb0ca1b64f620",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/24\/2018, 17:05:10",
            "message":"Interpolate template variables correctly (#64)",
            "author":"Leo Lamprecht",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'src\/directory.jst': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/vercel\/serve-handler\/raw\/65b4d4183a31a8076c78c40118acb0ca1b64f620\/src%2Fdirectory.jst', 'patch': '@@ -4,7 +4,7 @@\\n     <meta charset=\"utf-8\">\\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n \\n-    <title>Files within {{=it.directory}}<\/title>\\n+    <title>Files within {{!it.directory}}<\/title>\\n \\n \\t<style>\\n \\t\\tbody {\\n@@ -187,7 +187,7 @@\\n           <i>Index of&nbsp;<\/i>\\n \\n           {{~it.paths :value:index}}\\n-            <a href=\"\/{{=value.url}}\">{{=value.name}}<\/a>\\n+            <a href=\"\/{{!value.url}}\">{{!value.name}}<\/a>\\n           {{~}}\\n         <\/h1>\\n \\n@@ -197,9 +197,9 @@\\n       <ul id=\"files\">\\n         {{~it.files :value:index}}\\n           <li>\\n-            <a href=\"{{=value.relative}}\" title=\"{{=value.title}}\" class=\"{{=value.ext}}\">{{=value.base}}<\/a>\\n+            <a href=\"{{!value.relative}}\" title=\"{{!value.title}}\" class=\"{{!value.ext}}\">{{!value.base}}<\/a>\\n \\t\\t\\t{{? value.size}}\\n-\\t\\t\\t\\t<i>{{=value.size}}<\/i>\\n+\\t\\t\\t\\t<i>{{!value.size}}<\/i>\\n \\t\\t\\t{{?}}\\n           <\/li>\\n         {{~}}'}}",
            "message_norm":"interpolate template variables correctly (#64)",
            "language":"en",
            "entities":"[('#64', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/directory.jst'])",
            "num_files":1.0
        },
        {
            "index":251,
            "vuln_id":"GHSA-3fw8-66wf-pr7m",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/senchalabs\/connect\/commit\/126187c4e12162e231b87350740045e5bb06e93a', 'https:\/\/github.com\/senchalabs\/connect\/commit\/277e5aad6a95d00f55571a9a0e11f2fa190d8135'}",
            "dataset":"osv",
            "summary":"methodOverride Middleware Reflected Cross-Site Scripting in connect Connect is a stack of middleware that is executed in order in each request.\n\nThe \"methodOverride\" middleware allows the http post to override the method of the request with the value of the \"_method\" post key or with the header \"x-http-method-override\".\n\nBecause the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the \"Cannot `[method]` `[url]`\" content. The method was not properly encoded for output in the browser.\n\n\n###Example:\n```\n~ curl \"localhost:3000\" -d \"_method=<script src=http:\/\/nodesecurity.io\/xss.js><\/script>\"\nCannot <SCRIPT SRC=HTTP:\/\/NODESECURITY.IO\/XSS.JS><\/SCRIPT> \/\n```\n\n## Recommendation\n\nUpdate to the newest version of Connect or disable methodOverride. It is not possible to avoid the vulnerability if you have enabled this middleware in the top of your stack.",
            "published_date":"2020-08-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/senchalabs\/connect",
            "commit_href":"https:\/\/github.com\/senchalabs\/connect\/commit\/277e5aad6a95d00f55571a9a0e11f2fa190d8135",
            "commit_sha":"277e5aad6a95d00f55571a9a0e11f2fa190d8135",
            "patch":"MULTI",
            "chain_ord":"['277e5aad6a95d00f55571a9a0e11f2fa190d8135', '126187c4e12162e231b87350740045e5bb06e93a']",
            "before_first_fix_commit":"{'b0df35bcf2e1b4e487a17889a8440ecf254ac3b4'}",
            "last_fix_commit":"126187c4e12162e231b87350740045e5bb06e93a",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/27\/2013, 15:31:23",
            "message":"fix: escape req.method in 404 response",
            "author":"TJ Holowaychuk",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'lib\/proto.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/senchalabs\/connect\/raw\/277e5aad6a95d00f55571a9a0e11f2fa190d8135\/lib%2Fproto.js', 'patch': \"@@ -152,7 +152,7 @@ app.handle = function(req, res, out) {\\n         res.statusCode = 404;\\n         res.setHeader('Content-Type', 'text\/plain');\\n         if ('HEAD' == req.method) return res.end();\\n-        res.end('Cannot ' + req.method + ' ' + utils.escape(req.originalUrl));\\n+        res.end('Cannot ' + utils.escape(req.method) + ' ' + utils.escape(req.originalUrl));\\n       }\\n       return;\\n     }\\n@@ -202,7 +202,7 @@ app.handle = function(req, res, out) {\\n  * Listen for connections.\\n  *\\n  * This method takes the same arguments\\n- * as node's `http.Server#listen()`.  \\n+ * as node's `http.Server#listen()`.\\n  *\\n  * HTTP and HTTPS:\\n  *\\n@@ -214,9 +214,9 @@ app.handle = function(req, res, out) {\\n  *      var connect = require('connect')\\n  *        , http = require('http')\\n  *        , https = require('https');\\n- *      \\n+ *\\n  *      var app = connect();\\n- *      \\n+ *\\n  *      http.createServer(app).listen(80);\\n  *      https.createServer(options, app).listen(443);\\n  *\"}}",
            "message_norm":"fix: escape req.method in 404 response",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/proto.js'])",
            "num_files":1.0
        }
    ]
}