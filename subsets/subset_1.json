{
  "schema": {
    "fields": [
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "vuln_id",
        "type": "string"
      },
      {
        "name": "cwe_id",
        "type": "string"
      },
      {
        "name": "score",
        "type": "number"
      },
      {
        "name": "chain",
        "type": "string"
      },
      {
        "name": "dataset",
        "type": "string"
      },
      {
        "name": "summary",
        "type": "string"
      },
      {
        "name": "published_date",
        "type": "string"
      },
      {
        "name": "chain_len",
        "type": "integer"
      },
      {
        "name": "project",
        "type": "string"
      },
      {
        "name": "commit_href",
        "type": "string"
      },
      {
        "name": "commit_sha",
        "type": "string"
      },
      {
        "name": "patch",
        "type": "string"
      },
      {
        "name": "chain_ord",
        "type": "string"
      },
      {
        "name": "before_first_fix_commit",
        "type": "string"
      },
      {
        "name": "last_fix_commit",
        "type": "string"
      },
      {
        "name": "chain_ord_pos",
        "type": "number"
      },
      {
        "name": "commit_datetime",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      },
      {
        "name": "author",
        "type": "string"
      },
      {
        "name": "comments",
        "type": "string"
      },
      {
        "name": "stats",
        "type": "string"
      },
      {
        "name": "files",
        "type": "string"
      },
      {
        "name": "message_norm",
        "type": "string"
      },
      {
        "name": "language",
        "type": "string"
      },
      {
        "name": "entities",
        "type": "string"
      },
      {
        "name": "classification_level_1",
        "type": "string"
      },
      {
        "name": "classification_level_2",
        "type": "string"
      },
      {
        "name": "list_files",
        "type": "string"
      },
      {
        "name": "num_files",
        "type": "number"
      }
    ],
    "primaryKey": [
      "index"
    ],
    "pandas_version": "1.4.0"
  },
  "data": [
    {
      "index": 852,
      "vuln_id": "GHSA-6j89-jhpr-849f",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/3fe5e24694729966a157dc613f5586a6c75f1e9b', 'https://github.com/chakra-core/ChakraCore/commit/cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1308, CVE-2019-1335, CVE-2019-1366.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/3fe5e24694729966a157dc613f5586a6c75f1e9b",
      "commit_sha": "3fe5e24694729966a157dc613f5586a6c75f1e9b",
      "patch": "MULTI",
      "chain_ord": "['3fe5e24694729966a157dc613f5586a6c75f1e9b', 'cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d']",
      "before_first_fix_commit": "{'7e9a2ee60baa95ceb4f48f522f823c812ca90c80', '5989c6e038d80f92dcd8e10d725cdf45396201bb'}",
      "last_fix_commit": "cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/03/2019, 19:26:32",
      "message": "CVE-2019-1307",
      "author": "Paul Leathers",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'lib/Backend/GlobOpt.h': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/3fe5e24694729966a157dc613f5586a6c75f1e9b/lib%2FBackend%2FGlobOpt.h', 'patch': '@@ -370,6 +370,7 @@ class JsArrayKills\\n             (valueType.IsArrayOrObjectWithArray() &&\\n              (\\n               (killsArraysWithNoMissingValues && valueType.HasNoMissingValues()) ||\\n+              (killsObjectArraysWithNoMissingValues && !valueType.IsArray() && valueType.HasNoMissingValues()) ||\\n               (killsNativeArrays && !valueType.HasVarElements())\\n              )\\n             );'}}",
      "message_norm": "cve-2019-1307",
      "language": "ro",
      "entities": "[('cve-2019-1307', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/GlobOpt.h'])",
      "num_files": 1.0
    },
    {
      "index": 1331,
      "vuln_id": "GHSA-976r-qfjj-c24w",
      "cwe_id": "{'CWE-78'}",
      "score": 9.8,
      "chain": "{'https://github.com/apache/airflow/commit/afa4b11fddfdbadb048f742cf66d5c21c675a5c8'}",
      "dataset": "osv",
      "summary": "Command injection via Celery broker in Apache Airflow An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attacker can connect to the broker (Redis, RabbitMQ) directly, it is possible to inject commands, resulting in the celery worker running arbitrary commands.",
      "published_date": "2020-07-27",
      "chain_len": 1,
      "project": "https://github.com/apache/airflow",
      "commit_href": "https://github.com/apache/airflow/commit/afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
      "commit_sha": "afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
      "patch": "SINGLE",
      "chain_ord": "['afa4b11fddfdbadb048f742cf66d5c21c675a5c8']",
      "before_first_fix_commit": "{'63260c9955d12a60d8c143a932432013dd05eebb'}",
      "last_fix_commit": "afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/27/2019, 08:24:41",
      "message": "[AIRFLOW-6351] security - ui - Add Cross Site Scripting defence (#6913)",
      "author": "tooptoop4",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'airflow/www_rbac/views.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/apache/airflow/raw/afa4b11fddfdbadb048f742cf66d5c21c675a5c8/airflow%2Fwww_rbac%2Fviews.py', 'patch': '@@ -321,7 +321,7 @@ def get_int_arg(value, default=0):\\n             num_dag_to=min(end, num_of_all_dags),\\n             num_of_all_dags=num_of_all_dags,\\n             paging=wwwutils.generate_pages(current_page, num_of_pages,\\n-                                           search=arg_search_query,\\n+                                           search=escape(arg_search_query) if arg_search_query else None,\\n                                            showPaused=not hide_paused),\\n             num_runs=num_runs,\\n             tags=tags)'}}",
      "message_norm": "[airflow-6351] security - ui - add cross site scripting defence (#6913)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('add', 'ACTION', ''), ('cross site scripting', 'SECWORD', ''), ('defence', 'SECWORD', ''), ('#6913', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['airflow/www_rbac/views.py'])",
      "num_files": 1.0
    },
    {
      "index": 2472,
      "vuln_id": "GHSA-mvqp-q37c-wf9j",
      "cwe_id": "{'CWE-74'}",
      "score": 7.5,
      "chain": "{'https://github.com/ratpack/ratpack/commit/c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae', 'https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects io.ratpack:ratpack-core ## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\n\nVersions of Ratpack 0.9.1 through and including 1.7.4 are vulnerable to [HTTP Response Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting), \nif untrusted and unsanitized data is used to populate the headers of an HTTP response.\nAn attacker can utilize this vulnerability to have the server issue any HTTP response they specify.\n\nIf your application uses arbitrary user input as the value of a response header it is vulnerable.\nIf your application does not use arbitrary values as response header values, it is not vulnerable.\n\nPreviously, Ratpack did not validate response header values.\nNow, adding a header value that contains the header value termination characters (CRLF) produces a runtime exception.\nSince there is no mechanism for escaping or encoding the termination characters in a String, a runtime exception is necessary.\n\nAs potentially dangerous values now cause runtime exceptions, it is a good idea to continue to validate and sanitize any user-supplied values being used as response headers.\n\nWe would like to thank [Jonathan Leitschuh](https://github.com/JLLeitschuh) for reporting this vulnerability.\n\n### Vulnerable Example\n\nThe following example server uses a query parameter value as a response header, without validating or sanitizing it.\n```java\nRatpackServer startedServer =  RatpackServer.start(server -> {\n    server.handlers(chain -> chain.all(ctx -> {\n        // User supplied query parameter\n        String header = ctx.getRequest().getQueryParams().get(\"header\");\n        // User supplied data used to populate a header value.\n        ctx.header(\"the-header\", header)\n            .render(\"OK!\");\n    }));\n});\n```\n\nSending a request to the server with the following value for the `header` query param would allow the execution of arbitrary Javascript.\n\n```\nContent-Type: text/html\nX-XSS-Protection: 0\n\n<script>alert(document.domain)</script>\n```\n\n### Impact\n\n- Cross-User Defacement\n- Cache Poisoning\n- Cross-Site Scripting\n- Page Hijacking\n\n### Patches\n\nThis vulnerability has been patched in Ratpack version 1.7.5.\n\n### Root Cause\n\nThe root cause was due to using the netty `DefaultHttpHeaders` object with verification disabled.\n\nhttps://github.com/ratpack/ratpack/blob/af1e8c8590f164d7dd84d4212886fad4ead99080/ratpack-core/src/main/java/ratpack/server/internal/NettyHandlerAdapter.java#L159\n\nThis vulnerability is now more clearly documented in the Netty documentation: https://github.com/netty/netty/pull/9646\n\n### Workarounds\n\nThe workaround for this vulnerability is to either not use arbitrary input as response header values or validate such values before being used to ensure they don't contain a carriage return and/or line feed characters.\n\n### References\n\n - [CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https://cwe.mitre.org/data/definitions/113.html)\n - Fix commit: https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d\n \n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [ratpack/ratpack](https://github.com/ratpack/ratpack/issues)\n* Ask in our [Slack channel](https://slack-signup.ratpack.io/)",
      "published_date": "2019-10-21",
      "chain_len": 2,
      "project": "https://github.com/ratpack/ratpack",
      "commit_href": "https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d",
      "commit_sha": "efb910d38a96494256f36675ef0e5061097dd77d",
      "patch": "MULTI",
      "chain_ord": "['efb910d38a96494256f36675ef0e5061097dd77d', 'c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae']",
      "before_first_fix_commit": "{'efb910d38a96494256f36675ef0e5061097dd77d'}",
      "last_fix_commit": "c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/08/2019, 23:24:24",
      "message": "Enable HTTP header validation",
      "author": "Luke Daley",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'ratpack-core/src/main/java/ratpack/server/internal/NettyHandlerAdapter.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/ratpack/ratpack/raw/efb910d38a96494256f36675ef0e5061097dd77d/ratpack-core%2Fsrc%2Fmain%2Fjava%2Fratpack%2Fserver%2Finternal%2FNettyHandlerAdapter.java', 'patch': '@@ -156,7 +156,7 @@ private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) thr\\n       channel.attr(CLIENT_CERT_KEY).get()\\n     );\\n \\n-    HttpHeaders nettyHeaders = new DefaultHttpHeaders(false);\\n+    HttpHeaders nettyHeaders = new DefaultHttpHeaders();\\n     MutableHeaders responseHeaders = new NettyHeadersBackedMutableHeaders(nettyHeaders);\\n     AtomicBoolean transmitted = new AtomicBoolean(false);'}}",
      "message_norm": "enable http header validation",
      "language": "nl",
      "entities": "[('header validation', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ratpack-core/src/main/java/ratpack/server/internal/NettyHandlerAdapter.java'])",
      "num_files": 1.0
    },
    {
      "index": 2364,
      "vuln_id": "GHSA-m648-33qf-v3gp",
      "cwe_id": "{'CWE-20'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3'}",
      "dataset": "osv",
      "summary": "CHECK-fail in LSTM with zero-length input in TensorFlow ### Impact\nRunning an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.\n\nThis can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.\n\n### Patches\nWe have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2020-12-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3",
      "commit_sha": "14755416e364f17fb1870882fa778c7fec7f16e3",
      "patch": "SINGLE",
      "chain_ord": "['14755416e364f17fb1870882fa778c7fec7f16e3']",
      "before_first_fix_commit": "{'042a6923d7f9ff05e7514bf6011e4ca30be70113'}",
      "last_fix_commit": "14755416e364f17fb1870882fa778c7fec7f16e3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/08/2020, 04:31:31",
      "message": "Prevent CHECK-fail in LSTM/GRU with zero-length input.\n\nPiperOrigin-RevId: 346239181\nChange-Id: I5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 2, 'total': 8}",
      "files": "{'tensorflow/stream_executor/cuda/cuda_dnn.cc': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/14755416e364f17fb1870882fa778c7fec7f16e3/tensorflow%2Fstream_executor%2Fcuda%2Fcuda_dnn.cc', 'patch': '@@ -1468,7 +1468,9 @@ class CudnnRnnSequenceTensorDescriptor\\n   static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();\\n@@ -1486,7 +1488,9 @@ class CudnnRnnSequenceTensorDescriptor\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       const absl::Span<const int>& seq_lengths, bool time_major,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();'}}",
      "message_norm": "prevent check-fail in lstm/gru with zero-length input.\n\npiperorigin-revid: 346239181\nchange-id: i5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('346239181', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/stream_executor/cuda/cuda_dnn.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1765,
      "vuln_id": "GHSA-fq86-3f29-px2c",
      "cwe_id": "{'CWE-617'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/240655511cd3e701155f944a972db71b6c0b1bb6', 'https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', 'https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082'}",
      "dataset": "osv",
      "summary": "`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https://github.com/tensorflow/tensorflow/commit/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-07",
      "chain_len": 3,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082",
      "commit_sha": "1fb27733f943295d874417630edd3b38b34ce082",
      "patch": "MULTI",
      "chain_ord": "['ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', '1fb27733f943295d874417630edd3b38b34ce082', '240655511cd3e701155f944a972db71b6c0b1bb6']",
      "before_first_fix_commit": "{'1fb27733f943295d874417630edd3b38b34ce082'}",
      "last_fix_commit": "240655511cd3e701155f944a972db71b6c0b1bb6",
      "chain_ord_pos": 2.0,
      "commit_datetime": "11/11/2021, 17:16:14",
      "message": "Remove `CHECK`-fails from `IsSimplifiableReshape`\n\nPiperOrigin-RevId: 409164987\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 2, 'total': 12}",
      "files": "{'tensorflow/core/grappler/optimizers/constant_folding.cc': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1fb27733f943295d874417630edd3b38b34ce082/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1689,7 +1689,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!IsReshape(node)) {\\n     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");\\n   }\\n-  CHECK_LE(2, node.input_size());\\n+  if (2 > node.input_size()) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have at most 2 inputs but has \",\\n+                            node.input_size());\\n+  }\\n   const NodeDef* new_shape = node_map_->GetNode(node.input(1));\\n   if (!IsReallyConstant(*new_shape)) {\\n     return errors::Internal(\"Node \", node.name(), \" has shape \",\\n@@ -1707,7 +1711,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!s.ok()) {\\n     return errors::Internal(\"Could not evaluate node \", node.name());\\n   }\\n-  CHECK_EQ(1, outputs.size());\\n+  if (outputs.size() != 1) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have exactly 1 output but has \",\\n+                            outputs.size());\\n+  }\\n \\n   const std::vector<OpInfo::TensorProperties>& props =\\n       properties.GetInputProperties(node.name());'}}",
      "message_norm": "remove `check`-fails from `issimplifiablereshape`\n\npiperorigin-revid: 409164987\nchange-id: i58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
      "language": "en",
      "entities": "[('remove', 'ACTION', ''), ('409164987', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/grappler/optimizers/constant_folding.cc'])",
      "num_files": 1.0
    },
    {
      "index": 884,
      "vuln_id": "GHSA-6qgm-fv6v-rfpv",
      "cwe_id": "{'CWE-120', 'CWE-119'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23'}",
      "dataset": "osv",
      "summary": "Overflow/denial of service in `tf.raw_ops.ReverseSequence` ### Impact\nThe implementation of `tf.raw_ops.ReverseSequence` allows for stack overflow and/or `CHECK`-fail based denial of service.\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1], dtype=tf.int32)\nseq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.ReverseSequence(\n    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/5b3b071975e01f0d250c928b2a8f901cd53b90a7/tensorflow/core/kernels/reverse_sequence_op.cc#L114-L118) fails to validate that `seq_dim` and `batch_dim` arguments are valid.\n  \nNegative values for `seq_dim` can result in stack overflow or `CHECK`-failure, depending on the version of Eigen code used to implement the operation. Similar behavior can be exhibited by invalid values of `batch_dim`.\n  \n### Patches\nWe have patched the issue in GitHub commit [ecf768cbe50cedc0a45ce1ee223146a3d3d26d23](https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23",
      "commit_sha": "ecf768cbe50cedc0a45ce1ee223146a3d3d26d23",
      "patch": "SINGLE",
      "chain_ord": "['ecf768cbe50cedc0a45ce1ee223146a3d3d26d23']",
      "before_first_fix_commit": "{'5b3b071975e01f0d250c928b2a8f901cd53b90a7'}",
      "last_fix_commit": "ecf768cbe50cedc0a45ce1ee223146a3d3d26d23",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 19:07:57",
      "message": "Add missing validations to reverse_sequence_op\n\nPiperOrigin-RevId: 372178683\nChange-Id: Iac97ebab5b342f1262c77a7d9bcb4267b305ce5b",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'tensorflow/core/kernels/reverse_sequence_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23/tensorflow%2Fcore%2Fkernels%2Freverse_sequence_op.cc', 'patch': '@@ -115,6 +115,10 @@ class ReverseSequenceOp : public OpKernel {\\n       : OpKernel(context) {\\n     OP_REQUIRES_OK(context, context->GetAttr(\"batch_dim\", &batch_dim_));\\n     OP_REQUIRES_OK(context, context->GetAttr(\"seq_dim\", &seq_dim_));\\n+    OP_REQUIRES(context, batch_dim_ >= 0,\\n+                errors::InvalidArgument(\"Invalid batch_dim \", batch_dim_));\\n+    OP_REQUIRES(context, seq_dim_ >= 0,\\n+                errors::InvalidArgument(\"Invalid seq_dim \", seq_dim_));\\n   }\\n \\n   void Compute(OpKernelContext* context) override {'}}",
      "message_norm": "add missing validations to reverse_sequence_op\n\npiperorigin-revid: 372178683\nchange-id: iac97ebab5b342f1262c77a7d9bcb4267b305ce5b",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('missing validations', 'SECWORD', ''), ('372178683', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/reverse_sequence_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2168,
      "vuln_id": "GHSA-hxp5-8pgq-mgv9",
      "cwe_id": "{'CWE-295'}",
      "score": 5.9,
      "chain": "{'https://github.com/apache/calcite/commit/43eeafcbac29d02c72bd520c003cdfc571de2d15'}",
      "dataset": "osv",
      "summary": "Missing Authentication for Critical Function in Apache Calcite \"HttpUtils#getURLConnection method disables explicitly hostname verification for HTTPS connections making clients vulnerable to man-in-the-middle attacks. Calcite uses this method internally to connect with Druid and Splunk so information leakage may happen when using the respective Calcite adapters. The method itself is in a utility class so people may use it to create vulnerable HTTPS connections for other applications. From Apache Calcite 1.26 onwards, the hostname verification will be performed using the default JVM truststore.\"",
      "published_date": "2021-04-22",
      "chain_len": 1,
      "project": "https://github.com/apache/calcite",
      "commit_href": "https://github.com/apache/calcite/commit/43eeafcbac29d02c72bd520c003cdfc571de2d15",
      "commit_sha": "43eeafcbac29d02c72bd520c003cdfc571de2d15",
      "patch": "SINGLE",
      "chain_ord": "['43eeafcbac29d02c72bd520c003cdfc571de2d15']",
      "before_first_fix_commit": "{'ab19f98172848fe303a18173946c2def0b0d0312'}",
      "last_fix_commit": "43eeafcbac29d02c72bd520c003cdfc571de2d15",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/22/2020, 21:42:06",
      "message": "[CALCITE-4298] Avoid disabling hostname verification on HTTPS connections",
      "author": "Stamatis Zampetakis",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 16, 'total': 17}",
      "files": "{'core/src/main/java/org/apache/calcite/runtime/HttpUtils.java': {'additions': 1, 'deletions': 16, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/apache/calcite/raw/43eeafcbac29d02c72bd520c003cdfc571de2d15/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcalcite%2Fruntime%2FHttpUtils.java', 'patch': \"@@ -23,11 +23,9 @@\\n import java.io.Writer;\\n import java.net.HttpURLConnection;\\n import java.net.URL;\\n-import java.net.URLConnection;\\n import java.net.URLEncoder;\\n import java.nio.charset.StandardCharsets;\\n import java.util.Map;\\n-import javax.net.ssl.HttpsURLConnection;\\n \\n /**\\n  * Utilities for connecting to REST services such as Splunk via HTTP.\\n@@ -37,20 +35,7 @@ private HttpUtils() {}\\n \\n   public static HttpURLConnection getURLConnection(String url)\\n       throws IOException {\\n-    URLConnection conn = new URL(url).openConnection();\\n-    final HttpURLConnection httpConn = (HttpURLConnection) conn;\\n-\\n-    // take care of https stuff - most of the time it's only needed to\\n-    // secure client/server comm\\n-    // not to establish the identity of the server\\n-    if (httpConn instanceof HttpsURLConnection) {\\n-      HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;\\n-      httpsConn.setSSLSocketFactory(\\n-          TrustAllSslSocketFactory.createSSLSocketFactory());\\n-      httpsConn.setHostnameVerifier((arg0, arg1) -> true);\\n-    }\\n-\\n-    return httpConn;\\n+    return (HttpURLConnection) new URL(url).openConnection();\\n   }\\n \\n   public static void appendURLEncodedArgs(\"}}",
      "message_norm": "[calcite-4298] avoid disabling hostname verification on https connections",
      "language": "en",
      "entities": "[('hostname', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/src/main/java/org/apache/calcite/runtime/HttpUtils.java'])",
      "num_files": 1.0
    },
    {
      "index": 1127,
      "vuln_id": "GHSA-84cm-v6jp-gjmr",
      "cwe_id": "{'CWE-78'}",
      "score": 9.8,
      "chain": "{'https://github.com/kellyselden/git-diff-apply/commit/106d61d3ae723b4257c2a13e67b95eb40a27e0b5'}",
      "dataset": "osv",
      "summary": "OS command injection in git-diff-apply In \"index.js\" file line 240, the run command executes the git command with a user controlled variable called remoteUrl. This affects git-diff-apply all versions prior to 0.22.2.",
      "published_date": "2020-02-14",
      "chain_len": 1,
      "project": "https://github.com/kellyselden/git-diff-apply",
      "commit_href": "https://github.com/kellyselden/git-diff-apply/commit/106d61d3ae723b4257c2a13e67b95eb40a27e0b5",
      "commit_sha": "106d61d3ae723b4257c2a13e67b95eb40a27e0b5",
      "patch": "SINGLE",
      "chain_ord": "['106d61d3ae723b4257c2a13e67b95eb40a27e0b5']",
      "before_first_fix_commit": "{'bfcc903a961d9f17bde1889cf49745a2dffefd73'}",
      "last_fix_commit": "106d61d3ae723b4257c2a13e67b95eb40a27e0b5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/06/2020, 12:05:14",
      "message": "spawn git clone\n\nto prevent injecting a command",
      "author": "Kelly Selden",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'src/index.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/kellyselden/git-diff-apply/raw/106d61d3ae723b4257c2a13e67b95eb40a27e0b5/src%2Findex.js', 'patch': \"@@ -18,6 +18,7 @@ const resolveConflicts = require('./resolve-conflicts');\\n const commitAndTag = require('./commit-and-tag');\\n const gitRemoveAll = require('./git-remove-all');\\n const createCustomRemote = require('./create-custom-remote');\\n+const { runWithSpawn } = require('./run');\\n \\n const { isGitClean } = gitStatus;\\n const { gitConfigInit } = gitInit;\\n@@ -222,7 +223,7 @@ module.exports = async function gitDiffApply({\\n     _tmpDir = await tmpDir();\\n     tmpWorkingDir = _tmpDir;\\n \\n-    await utils.run(`git clone ${remoteUrl} ${_tmpDir}`);\\n+    await runWithSpawn('git', ['clone', remoteUrl, _tmpDir]);\\n \\n     // needed because we are going to be committing in here\\n     await gitConfigInit({ cwd: _tmpDir });\"}}",
      "message_norm": "spawn git clone\n\nto prevent injecting a command",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('injecting a command', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.js'])",
      "num_files": 1.0
    },
    {
      "index": 2838,
      "vuln_id": "GHSA-r24h-634p-m72x",
      "cwe_id": "{'CWE-668'}",
      "score": 9.8,
      "chain": "{'https://github.com/Atinux/schema-inspector/commit/345a7b2eed11bb6128421150d65f4f83fdbb737d'}",
      "dataset": "osv",
      "summary": "Validation Bypass in schema-inspector In schema-inspector before 1.6.9, a maliciously crafted JavaScript object can bypass the `sanitize()` and the `validate()` function used within schema-inspector.",
      "published_date": "2020-06-10",
      "chain_len": 1,
      "project": "https://github.com/Atinux/schema-inspector",
      "commit_href": "https://github.com/Atinux/schema-inspector/commit/345a7b2eed11bb6128421150d65f4f83fdbb737d",
      "commit_sha": "345a7b2eed11bb6128421150d65f4f83fdbb737d",
      "patch": "SINGLE",
      "chain_ord": "['345a7b2eed11bb6128421150d65f4f83fdbb737d']",
      "before_first_fix_commit": "{'7f67b2a95f85ecb76d0dc5326d76d082a2b99e1f'}",
      "last_fix_commit": "345a7b2eed11bb6128421150d65f4f83fdbb737d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/20/2020, 15:01:42",
      "message": "fix: Issue #75",
      "author": "S\u00e9bastien Chopin",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'lib/schema-inspector.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/schema-inspector/schema-inspector/raw/345a7b2eed11bb6128421150d65f4f83fdbb737d/lib%2Fschema-inspector.js', 'patch': \"@@ -80,7 +80,7 @@\\n \\t\\tthis._custom = {};\\n \\t\\tif (custom != null) {\\n \\t\\t\\tfor (var key in custom) {\\n-\\t\\t\\t\\tif (custom.hasOwnProperty(key)){\\n+\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(custom, key)) {\\n \\t\\t\\t\\t\\tthis._custom['$' + key] = custom[key];\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n@@ -480,7 +480,7 @@\\n \\t\\t\\t}\\n \\t\\t\\telse {\\n \\t\\t\\t\\tfor (var key in candidate) {\\n-\\t\\t\\t\\t\\tif (candidate.hasOwnProperty(key)){\\n+\\t\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(candidate, key)) {\\n \\t\\t\\t\\t\\t\\tthis._deeperArray(key);\\n \\t\\t\\t\\t\\t\\tthis._validate(items, candidate[key]);\\n \\t\\t\\t\\t\\t\\tthis._back();\\n@@ -1011,7 +1011,7 @@\\n \\t\\t\\t}\\n \\t\\t\\telse {\\n \\t\\t\\t\\tfor (i in post) {\\n-\\t\\t\\t\\t\\tif(post.hasOwnProperty(i)){\\n+\\t\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(post, i)) {\\n \\t\\t\\t\\t\\t\\tthis._deeperArray(i);\\n \\t\\t\\t\\t\\t\\tpost[i] = this._sanitize(schema.items, post[i]);\\n \\t\\t\\t\\t\\t\\tthis._back();\\n@@ -1430,7 +1430,7 @@\\n \\t\\t\\tvar prop = schema.properties || {};\\n \\n \\t\\t\\tfor (var key in prop) {\\n-\\t\\t\\t\\tif (prop.hasOwnProperty(key)){\\n+\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(prop, key)) {\\n \\t\\t\\t\\t\\tif (prop[key].optional === true && _rand.bool() === true) {\\n \\t\\t\\t\\t\\t\\tcontinue;\\n \\t\\t\\t\\t\\t}\"}}",
      "message_norm": "fix: issue #75",
      "language": "fr",
      "entities": "[('#75', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/schema-inspector.js'])",
      "num_files": 1.0
    },
    {
      "index": 754,
      "vuln_id": "GHSA-65f3-3278-7m65",
      "cwe_id": "{'CWE-285', 'CWE-863'}",
      "score": 8.2,
      "chain": "{'https://github.com/gogs/gogs/commit/64102be2c90e1b47dbdd379873ba76c80d4b0e78'}",
      "dataset": "osv",
      "summary": "Improper Authorization in Gogs ### Impact\n\nExpired PAM accounts and accounts with expired passwords are continued to be seen as valid. Installations use PAM as authentication sources are affected.\n\n### Patches\n\nExpired PAM accounts and accounts with expired passwords are no longer being seen as valid. Users should upgrade to 0.12.5 or the latest 0.13.0+dev.\n\n### Workarounds\n\nIn addition to marking PAM accounts as expired, also disable/lock them. Running `usermod -L <username>` will add an exclamation mark to the password hash and would result in wrong passwords responses when trying to login. \n\n### References\n\nhttps://huntr.dev/bounties/ea82cfc9-b55c-41fe-ae58-0d0e0bd7ab62/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on https://github.com/gogs/gogs/issues/6810.",
      "published_date": "2022-03-12",
      "chain_len": 1,
      "project": "https://github.com/gogs/gogs",
      "commit_href": "https://github.com/gogs/gogs/commit/64102be2c90e1b47dbdd379873ba76c80d4b0e78",
      "commit_sha": "64102be2c90e1b47dbdd379873ba76c80d4b0e78",
      "patch": "SINGLE",
      "chain_ord": "['64102be2c90e1b47dbdd379873ba76c80d4b0e78']",
      "before_first_fix_commit": "{'91f2cde5e95f146bfe4765e837e7282df6c7cabb'}",
      "last_fix_commit": "64102be2c90e1b47dbdd379873ba76c80d4b0e78",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/08/2022, 12:02:01",
      "message": "security: fix improper PAM authorization handling (#6819)\n\nCo-authored-by: Joe Chen <jc@unknwon.io>\n# Conflicts:\n#\tCHANGELOG.md\n#\tinternal/auth/pam/pam.go",
      "author": "ysf",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'internal/auth/pam/pam.go': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/gogs/gogs/raw/64102be2c90e1b47dbdd379873ba76c80d4b0e78/internal%2Fauth%2Fpam%2Fpam.go', 'patch': '@@ -27,9 +27,9 @@ func PAMAuth(serviceName, userName, passwd string) error {\\n \\t\\treturn err\\n \\t}\\n \\n-\\tif err = t.Authenticate(0); err != nil {\\n+\\terr = t.Authenticate(0)\\n+\\tif err != nil {\\n \\t\\treturn err\\n \\t}\\n-\\n-\\treturn nil\\n+\\treturn t.AcctMgmt(0)\\n }'}}",
      "message_norm": "security: fix improper pam authorization handling (#6819)\n\nco-authored-by: joe chen <jc@unknwon.io>\n# conflicts:\n#\tchangelog.md\n#\tinternal/auth/pam/pam.go",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('#6819', 'ISSUE', ''), ('jc@unknwon.io', 'EMAIL', ''), ('auth', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['internal/auth/pam/pam.go'])",
      "num_files": 1.0
    },
    {
      "index": 3059,
      "vuln_id": "GHSA-v659-54cx-g4qr",
      "cwe_id": "{'CWE-1321'}",
      "score": 9.8,
      "chain": "{'https://github.com/ASaiAnudeep/deep-override/commit/2aced17651fb684959a6e04b1465a8329b3d5268'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in deep-override Prototype pollution vulnerability in 'deep-override' versions 1.0.0 through 1.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.",
      "published_date": "2021-05-17",
      "chain_len": 1,
      "project": "https://github.com/ASaiAnudeep/deep-override",
      "commit_href": "https://github.com/ASaiAnudeep/deep-override/commit/2aced17651fb684959a6e04b1465a8329b3d5268",
      "commit_sha": "2aced17651fb684959a6e04b1465a8329b3d5268",
      "patch": "SINGLE",
      "chain_ord": "['2aced17651fb684959a6e04b1465a8329b3d5268']",
      "before_first_fix_commit": "{'393135641fb0891409ac2a53783c553a7ed749a9'}",
      "last_fix_commit": "2aced17651fb684959a6e04b1465a8329b3d5268",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/17/2020, 17:01:18",
      "message": "Security fix for Prototype Pollution",
      "author": "Arjun Shibu",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'src/index.js': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/ASaiAnudeep/deep-override/raw/2aced17651fb684959a6e04b1465a8329b3d5268/src%2Findex.js', 'patch': \"@@ -46,6 +46,8 @@ function override(...rawArgs) {\\n       });\\n     } else {\\n       Object.keys(obj).forEach(key => {\\n+        if (key == '__proto__' || key == 'constructor' || key == 'prototype')\\n+          return\\n         src = target[key];\\n         val = obj[key];\\n         if (val === target) {\\n@@ -69,4 +71,4 @@ function override(...rawArgs) {\\n   return target;\\n }\\n \\n-module.exports = override;\\n\\\\ No newline at end of file\\n+module.exports = override;\"}}",
      "message_norm": "security fix for prototype pollution",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.js'])",
      "num_files": 1.0
    },
    {
      "index": 2050,
      "vuln_id": "GHSA-hf79-8hjp-rrvq",
      "cwe_id": "{'CWE-416'}",
      "score": 8.5,
      "chain": "{'https://github.com/bytecodealliance/lucet/commit/7c7757c772fb709c61b1442bcc1e1fbee97bf4a8'}",
      "dataset": "osv",
      "summary": "Use After Free in lucet ### Impact\nThere is a bug in the main branch of Lucet's `lucet-runtime` that allows a use-after-free in an `Instance` object that could result in memory corruption, data race, or other related issues.  This bug was introduced early in the development of Lucet and is present in all releases.  As a result of this bug, and dependent on the memory backing for the `Instance` objects, it is possible to trigger a use-after-free when the `Instance` is dropped.\n\n### Patches\nUsers should upgrade to the `main` branch of the Lucet repository. Lucet does not provide versioned releases on crates.io.\n\n### Workarounds\nThere is no way to remediate this vulnerability without upgrading.\n\n### Description\nLucet uses a \"pool\" allocator for new WebAssembly instances that are created. This pool allocator manages everything from the linear memory of the wasm instance, the runtime stack for async switching, as well as the memory behind the Instance itself. `Instances` are referred to via an `InstanceHandle` type which will, on drop, release the memory backing the Instance back to the pool.\n\nWhen an Instance is dropped, the fields of the `Instance` are destructed top-to-bottom, however when the `alloc: Alloc` field is destructed, the memory backing the `Instance` is released back to the pool before the destructors of the remaining fields are run. If another thread allocates the same memory from the pool while these destructors are still running, a race condition occurs that can lead to use-after-free errors.\n\nThe bug was corrected by changing how the `InstanceHandle` destructor operates to ensure that the memory backing an Instance is only returned to the pool once the `Instance` has been completely destroyed.\n\nThis security advisory has been assigned CVE-2021-43790.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [lucet repository](https://github.com/bytecodealliance/lucet)\n* Email [the lucet team](mailto:lucet@fastly.com)\n* See the [Bytecode Alliance security policy](https://bytecodealliance.org/security)",
      "published_date": "2021-11-30",
      "chain_len": 1,
      "project": "https://github.com/bytecodealliance/lucet",
      "commit_href": "https://github.com/bytecodealliance/lucet/commit/7c7757c772fb709c61b1442bcc1e1fbee97bf4a8",
      "commit_sha": "7c7757c772fb709c61b1442bcc1e1fbee97bf4a8",
      "patch": "SINGLE",
      "chain_ord": "['7c7757c772fb709c61b1442bcc1e1fbee97bf4a8']",
      "before_first_fix_commit": "{'8fb1fece339927e178f6cfef4eb67328b500237d'}",
      "last_fix_commit": "7c7757c772fb709c61b1442bcc1e1fbee97bf4a8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/29/2021, 23:00:02",
      "message": "Merge pull request from GHSA-hf79-8hjp-rrvq\n\n* Use manual drop\n\n* Add some comments to `ManuallyDrop` usage\n\n* rustfmt\n\nCo-authored-by: Aaron Turon <aturon@fastly.com>\nCo-authored-by: Alex Crichton <alex@alexcrichton.com>",
      "author": "Pat Hickey",
      "comments": null,
      "stats": "{'additions': 26, 'deletions': 13, 'total': 39}",
      "files": "{'lucet-runtime/lucet-runtime-internals/src/instance.rs': {'additions': 26, 'deletions': 13, 'changes': 39, 'status': 'modified', 'raw_url': 'https://github.com/bytecodealliance/lucet/raw/7c7757c772fb709c61b1442bcc1e1fbee97bf4a8/lucet-runtime%2Flucet-runtime-internals%2Fsrc%2Finstance.rs', 'patch': '@@ -14,7 +14,6 @@ use crate::error::Error;\\n #[cfg(feature = \"concurrent_testpoints\")]\\n use crate::lock_testpoints::LockTestpoints;\\n use crate::module::{self, FunctionHandle, Global, GlobalValue, Module, TrapCode};\\n-use crate::region::RegionInternal;\\n use crate::sysdeps::HOST_PAGE_SIZE_EXPECTED;\\n use crate::val::{UntypedRetVal, Val};\\n use crate::vmctx::Vmctx;\\n@@ -27,6 +26,7 @@ use std::cell::{BorrowError, BorrowMutError, Ref, RefCell, RefMut, UnsafeCell};\\n use std::convert::TryFrom;\\n use std::marker::PhantomData;\\n use std::mem;\\n+use std::mem::ManuallyDrop;\\n use std::ops::{Deref, DerefMut};\\n use std::ptr::{self, NonNull};\\n use std::sync::Arc;\\n@@ -147,20 +147,29 @@ impl Drop for InstanceHandle {\\n             unsafe {\\n                 let inst = self.inst.as_mut();\\n \\n-                // Grab a handle to the region to ensure it outlives `inst`.\\n+                // The `inst.alloc` field manages the memory of the instance\\n+                // itself. Note, though, that this field is in a `ManuallyDrop`\\n+                // so it won\\'t get dropped automatically in `drop_in_place`.\\n+                // This is the point where we take over that precise drop.\\n                 //\\n-                // This ensures that the region won\\'t be dropped by `inst` being\\n-                // dropped, which could result in `inst` being unmapped by the\\n-                // Region *during* drop of the Instance\\'s fields.\\n-                let region: Arc<dyn RegionInternal> = inst.alloc().region.clone();\\n+                // By using `take` here we\\'re basically calling `ptr::read`\\n+                // which \"duplicates\" the `alloc` since the `alloc` local\\n+                // variable here is the exact same as `inst.alloc`. All we do\\n+                // with `inst`, though, is call `drop_in_place`, which\\n+                // invalidates every other field in `inst`.\\n+                let alloc: Alloc = ManuallyDrop::take(&mut inst.alloc);\\n \\n                 // drop the actual instance\\n                 std::ptr::drop_in_place(inst);\\n \\n-                // and now we can drop what may be the last Arc<Region>. If it is\\n-                // it can safely do what it needs with memory; we\\'re not running\\n-                // destructors on it anymore.\\n-                mem::drop(region);\\n+                // Now that we\\'re 100% done with the instance, destructors and\\n+                // all, we can release the memory of the instance back to the\\n+                // original allocator from whence it came (be it mmap or uffd\\n+                // based). This will run the \"official\" destructor for `Alloc`\\n+                // which internally does the release. Note that after this\\n+                // operation the `inst` pointer is invalid and can no longer be\\n+                // used.\\n+                drop(alloc);\\n             }\\n         }\\n     }\\n@@ -233,8 +242,12 @@ pub struct Instance {\\n     /// Conditionally-present helpers to force permutations of possible races in testing.\\n     pub lock_testpoints: Arc<LockTestpoints>,\\n \\n-    /// The memory allocated for this instance\\n-    alloc: Alloc,\\n+    /// The memory allocated for this instance.\\n+    ///\\n+    /// Note that this is in a `ManuallyDrop` because this manages the memory of\\n+    /// this `Instance` itself. To have precise control over this memory we\\n+    /// handle this in `Drop for InstanceHandle`.\\n+    alloc: ManuallyDrop<Alloc>,\\n \\n     /// Handler run for signals that do not arise from a known WebAssembly trap, or that involve\\n     /// memory outside of the current instance.\\n@@ -1055,7 +1068,7 @@ impl Instance {\\n             kill_state,\\n             #[cfg(feature = \"concurrent_testpoints\")]\\n             lock_testpoints,\\n-            alloc,\\n+            alloc: ManuallyDrop::new(alloc),\\n             fatal_handler: default_fatal_handler,\\n             c_fatal_handler: None,\\n             signal_handler: Box::new(signal_handler_none) as Box<SignalHandler>,'}}",
      "message_norm": "merge pull request from ghsa-hf79-8hjp-rrvq\n\n* use manual drop\n\n* add some comments to `manuallydrop` usage\n\n* rustfmt\n\nco-authored-by: aaron turon <aturon@fastly.com>\nco-authored-by: alex crichton <alex@alexcrichton.com>",
      "language": "en",
      "entities": "[('ghsa-hf79-8hjp-rrvq', 'VULNID', 'GHSA'), ('add', 'ACTION', ''), ('aturon@fastly.com', 'EMAIL', ''), ('alex@alexcrichton.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lucet-runtime/lucet-runtime-internals/src/instance.rs'])",
      "num_files": 1.0
    },
    {
      "index": 2756,
      "vuln_id": "GHSA-qh9q-34h6-hcv9",
      "cwe_id": "{'CWE-12', 'CWE-22'}",
      "score": 7.5,
      "chain": "{'https://github.com/mkdocs/mkdocs/pull/2604/commits/cddc453c9d49298e60e7d56fb71130c151cbcbe5'}",
      "dataset": "osv",
      "summary": "Directory traversal in mkdocs The mkdocs 1.2.2 built-in dev-server allows directory traversal using the port 8000, enabling remote exploitation to obtain :sensitive information.",
      "published_date": "2021-10-12",
      "chain_len": 1,
      "project": "https://github.com/mkdocs/mkdocs",
      "commit_href": "https://github.com/mkdocs/mkdocs/pull/2604/commits/cddc453c9d49298e60e7d56fb71130c151cbcbe5",
      "commit_sha": "cddc453c9d49298e60e7d56fb71130c151cbcbe5",
      "patch": "SINGLE",
      "chain_ord": "['cddc453c9d49298e60e7d56fb71130c151cbcbe5']",
      "before_first_fix_commit": "{'c426455878556baa34cc829c579337236d335581'}",
      "last_fix_commit": "cddc453c9d49298e60e7d56fb71130c151cbcbe5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/10/2021, 08:52:05",
      "message": "Prevent directory traversal in the dev server",
      "author": "Oleh Prypin",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 1, 'total': 5}",
      "files": "{'mkdocs/livereload/__init__.py': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/mkdocs/mkdocs/raw/cddc453c9d49298e60e7d56fb71130c151cbcbe5/mkdocs%2Flivereload%2F__init__.py', 'patch': '@@ -4,6 +4,7 @@\\n import mimetypes\\n import os\\n import os.path\\n+import posixpath\\n import re\\n import socketserver\\n import threading\\n@@ -183,9 +184,11 @@ def condition():\\n         if path == \"/js/livereload.js\":\\n             file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"livereload.js\")\\n         elif path.startswith(self.mount_path):\\n-            rel_file_path = path[len(self.mount_path):].lstrip(\"/\")\\n+            rel_file_path = path[len(self.mount_path):]\\n             if path.endswith(\"/\"):\\n                 rel_file_path += \"index.html\"\\n+            # Prevent directory traversal - normalize the path.\\n+            rel_file_path = posixpath.normpath(\"/\" + rel_file_path).lstrip(\"/\")\\n             file_path = os.path.join(self.root, rel_file_path)\\n         elif path == \"/\":\\n             start_response(\"302 Found\", [(\"Location\", self.mount_path)])'}}",
      "message_norm": "prevent directory traversal in the dev server",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('directory traversal', 'SECWORD', ''), ('server', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['mkdocs/livereload/__init__.py'])",
      "num_files": 1.0
    },
    {
      "index": 2950,
      "vuln_id": "GHSA-rh9j-f5f8-rvgc",
      "cwe_id": "{'CWE-295', 'CWE-287'}",
      "score": 8.6,
      "chain": "{'https://github.com/parse-community/parse-server/commit/ba2b0a9cb9a568817a114b132a4c2e0911d76df1', 'https://github.com/parse-community/parse-server/pull/8054/commits/0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'https://github.com/parse-community/parse-server/pull/8054/commits/2084b7c569697a5230e42511799eeac9219db5a9'}",
      "dataset": "osv",
      "summary": "Authentication bypass vulnerability in Apple Game Center auth adapter  ### Impact\nThe certificate in Apple Game Center auth adapter not validated. As a result, authentication could potentially be bypassed by making a fake certificate accessible via certain Apple domains and providing the URL to that certificate in an authData object.\n\n### Patches\nTo prevent this, a new `rootCertificateUrl` property is introduced to the Parse Server Apple Game Center auth adapter which takes the URL to the root certificate of Apple's Game Center authentication certificate. If no value is set, the `rootCertificateUrl` property defaults to the URL of the [current root certificate](https://developer.apple.com/news/?id=stttq465) as of May 27, 2022.\n\nKeep in mind that the root certificate can change at any time (expected to be announced by Apple) and that it is the developer's responsibility to keep the root certificate URL up-to-date when using the Parse Server Apple Game Center auth adapter.\n\n### Workarounds\nNone.\n\n### References\n- https://github.com/parse-community/parse-server/security/advisories/GHSA-rh9j-f5f8-rvgc\n- https://developer.apple.com/news/?id=stttq465\n- https://github.com/parse-community/parse-server\n\n### More information\n* For questions or comments about this vulnerability visit our [community forum](http://community.parseplatform.org) or [community chat](http://chat.parseplatform.org)\n* Report other vulnerabilities at [report.parseplatform.org](https://report.parseplatform.org)",
      "published_date": "2022-06-17",
      "chain_len": 3,
      "project": "https://github.com/parse-community/parse-server",
      "commit_href": "https://github.com/parse-community/parse-server/pull/8054/commits/0cc299f82e367518f2fe7a53b99f3f801a338cf4",
      "commit_sha": "0cc299f82e367518f2fe7a53b99f3f801a338cf4",
      "patch": "MULTI",
      "chain_ord": "['2084b7c569697a5230e42511799eeac9219db5a9', '0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'ba2b0a9cb9a568817a114b132a4c2e0911d76df1']",
      "before_first_fix_commit": "{'a8aef820afa2c8d87683668c2961e523016bad9b'}",
      "last_fix_commit": "ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
      "chain_ord_pos": 2.0,
      "commit_datetime": "06/17/2022, 15:30:54",
      "message": "Update gcenter.js",
      "author": "Manuel Trezza",
      "comments": null,
      "stats": "{'additions': 17, 'deletions': 9, 'total': 26}",
      "files": "{'src/Adapters/Auth/gcenter.js': {'additions': 17, 'deletions': 9, 'changes': 26, 'status': 'modified', 'raw_url': 'https://github.com/parse-community/parse-server/raw/0cc299f82e367518f2fe7a53b99f3f801a338cf4/src%2FAdapters%2FAuth%2Fgcenter.js', 'patch': \"@@ -56,8 +56,9 @@ async function getAppleCertificate(publicKeyUrl) {\\n   const cert_headers = await new Promise((resolve, reject) =>\\n     https.get(headOptions, res => resolve(res.headers)).on('error', reject)\\n   );\\n+  const validContentTypes = ['application/x-x509-ca-cert', 'application/pkix-cert'];\\n   if (\\n-    cert_headers['content-type'] !== 'application/pkix-cert' ||\\n+    !validContentTypes.includes(cert_headers['content-type']) ||\\n     cert_headers['content-length'] == null ||\\n     cert_headers['content-length'] > 10000\\n   ) {\\n@@ -66,7 +67,7 @@ async function getAppleCertificate(publicKeyUrl) {\\n       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`\\n     );\\n   }\\n-  const {certificate, headers} = await getCertificate(publicKeyUrl);\\n+  const { certificate, headers } = await getCertificate(publicKeyUrl);\\n   if (headers['cache-control']) {\\n     const expire = headers['cache-control'].match(/max-age=([0-9]+)/);\\n     if (expire) {\\n@@ -90,15 +91,15 @@ function getCertificate(url, buffer) {\\n         });\\n         res.on('end', () => {\\n           if (buffer) {\\n-            resolve({certificate: Buffer.concat(data), headers: res.headers});\\n+            resolve({ certificate: Buffer.concat(data), headers: res.headers });\\n             return;\\n           }\\n           let cert = '';\\n           for (const chunk of data) {\\n             cert += chunk.toString('base64');\\n           }\\n           const certificate = convertX509CertToPEM(cert);\\n-          resolve({certificate, headers: res.headers});\\n+          resolve({ certificate, headers: res.headers });\\n         });\\n       })\\n       .on('error', reject);\\n@@ -132,7 +133,10 @@ function verifySignature(publicKey, authData) {\\n function verifyPublicKeyIssuer(cert, publicKeyUrl) {\\n   const publicKeyCert = pki.certificateFromPem(cert);\\n   if (!ca.cert) {\\n-    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');\\n+    throw new Parse.Error(\\n+      Parse.Error.OBJECT_NOT_FOUND,\\n+      'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'\\n+    );\\n   }\\n   try {\\n     if (!ca.cert.verify(publicKeyCert)) {\\n@@ -163,21 +167,25 @@ async function validateAuthData(authData) {\\n // Returns a promise that fulfills if this app id is valid.\\n async function validateAppId(appIds, authData, options = {}) {\\n   if (!options.rootCertificateUrl) {\\n-    options.rootCertificateUrl = 'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem'\\n+    options.rootCertificateUrl =\\n+      'https://cacerts.digicert.com/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';\\n   }\\n   if (ca.url === options.rootCertificateUrl) {\\n     return;\\n   }\\n-  const {certificate, headers} = await getCertificate(options.rootCertificateUrl, true);\\n+  const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);\\n   if (\\n     headers['content-type'] !== 'application/x-pem-file' ||\\n     headers['content-length'] == null ||\\n     headers['content-length'] > 10000\\n   ) {\\n-    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');\\n+    throw new Parse.Error(\\n+      Parse.Error.OBJECT_NOT_FOUND,\\n+      'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'\\n+    );\\n   }\\n   ca.cert = pki.certificateFromPem(certificate);\\n-  ca.url = options.rootCertificateUrl\\n+  ca.url = options.rootCertificateUrl;\\n }\\n \\n module.exports = {\"}}",
      "message_norm": "update gcenter.js",
      "language": "nl",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Adapters/Auth/gcenter.js'])",
      "num_files": 1.0
    },
    {
      "index": 3228,
      "vuln_id": "GHSA-w5cr-frph-hw7f",
      "cwe_id": "{'CWE-908'}",
      "score": 7.5,
      "chain": "{'https://github.com/djkoloski/rkyv/commit/f141b560523a20557db6540576d153010bd18712', 'https://github.com/djkoloski/rkyv/commit/9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e'}",
      "dataset": "osv",
      "summary": "Use of uninitialized buffer in rkyv An issue was discovered in the rkyv crate before 0.6.0 for Rust. When an archive is created via serialization, the archive content may contain uninitialized values of certain parts of a struct.",
      "published_date": "2021-08-25",
      "chain_len": 2,
      "project": "https://github.com/djkoloski/rkyv",
      "commit_href": "https://github.com/djkoloski/rkyv/commit/f141b560523a20557db6540576d153010bd18712",
      "commit_sha": "f141b560523a20557db6540576d153010bd18712",
      "patch": "MULTI",
      "chain_ord": "['f141b560523a20557db6540576d153010bd18712', '9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e']",
      "before_first_fix_commit": "{'f141b560523a20557db6540576d153010bd18712'}",
      "last_fix_commit": "9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 14:44:41",
      "message": "Zero aligned memory before resolving",
      "author": "David Koloski",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 5, 'total': 10}",
      "files": "{'rkyv/src/ser/serializers/std.rs': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/rkyv/rkyv/raw/f141b560523a20557db6540576d153010bd18712/rkyv%2Fsrc%2Fser%2Fserializers%2Fstd.rs', 'patch': '@@ -116,11 +116,11 @@ impl<A: Borrow<AlignedVec> + BorrowMut<AlignedVec>> Serializer for AlignedSerial\\n         let additional = mem::size_of::<T::Archived>();\\n         vec.reserve(additional);\\n         vec.set_len(vec.len() + additional);\\n-        value.resolve(\\n-            pos,\\n-            resolver,\\n-            &mut *vec.as_mut_ptr().add(pos).cast::<mem::MaybeUninit<T::Archived>>()\\n-        );\\n+\\n+        let ptr = vec.as_mut_ptr().add(pos).cast::<mem::MaybeUninit<T::Archived>>();\\n+        core::ptr::write_bytes(ptr, 0, 1);\\n+\\n+        value.resolve(pos, resolver, &mut *ptr);\\n         Ok(pos)\\n     }'}}",
      "message_norm": "zero aligned memory before resolving",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['rkyv/src/ser/serializers/std.rs'])",
      "num_files": 1.0
    },
    {
      "index": 218,
      "vuln_id": "GHSA-3872-f48p-pxqj",
      "cwe_id": "{'CWE-88', 'CWE-77'}",
      "score": 8.8,
      "chain": "{'https://github.com/WeblateOrg/weblate/commit/d83672a3e7415da1490334e2c9431e5da1966842', 'https://github.com/WeblateOrg/weblate/commit/35d59f1f040541c358cece0a8d4a63183ca919b8'}",
      "dataset": "osv",
      "summary": "Improper Neutralization of Special Elements used in a Command ('Command Injection') in Weblate ### Impact\nWeblate didn't correctly sanitize some arguments passed to Git and Mercurial, which allowed changing their behavior in an unintended way.\n\n### Patches\n\nThe issues were fixed in the 4.11.1 release. The following commits are addressing it:\n\n* 35d59f1f040541c358cece0a8d4a63183ca919b8\n* d83672a3e7415da1490334e2c9431e5da1966842\n\n### Workarounds\n\nInstances in which untrusted users cannot create new components are not affected.\n\n### References\n* [SNYK-PYTHON-WEBLATE-2414088](https://security.snyk.io/vuln/SNYK-PYTHON-WEBLATE-2414088)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a topic in [discussions](https://github.com/WeblateOrg/weblate/discussions)\n* Email us at [care@weblate.org](mailto:care@weblate.org)",
      "published_date": "2022-03-04",
      "chain_len": 2,
      "project": "https://github.com/WeblateOrg/weblate",
      "commit_href": "https://github.com/WeblateOrg/weblate/commit/d83672a3e7415da1490334e2c9431e5da1966842",
      "commit_sha": "d83672a3e7415da1490334e2c9431e5da1966842",
      "patch": "MULTI",
      "chain_ord": "['35d59f1f040541c358cece0a8d4a63183ca919b8', 'd83672a3e7415da1490334e2c9431e5da1966842']",
      "before_first_fix_commit": "{'9a5a09781e5a19ab9a24878afb08c9fcafb21ca7'}",
      "last_fix_commit": "d83672a3e7415da1490334e2c9431e5da1966842",
      "chain_ord_pos": 2.0,
      "commit_datetime": "03/03/2022, 07:45:16",
      "message": "vcs: Improve git parameters handling\n\nMake sure that all user provided input is handled as expected.",
      "author": "Michal \u010ciha\u0159",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 3, 'total': 8}",
      "files": "{'weblate/vcs/git.py': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/WeblateOrg/weblate/raw/d83672a3e7415da1490334e2c9431e5da1966842/weblate%2Fvcs%2Fgit.py', 'patch': '@@ -85,7 +85,7 @@ def get_remote_branch(cls, repo: str):\\n         if not repo:\\n             return super().get_remote_branch(repo)\\n         try:\\n-            result = cls._popen([\"ls-remote\", \"--symref\", repo, \"HEAD\"])\\n+            result = cls._popen([\"ls-remote\", \"--symref\", \"--\", repo, \"HEAD\"])\\n         except RepositoryException:\\n             report_error(cause=\"Listing remote branch\")\\n             return super().get_remote_branch(repo)\\n@@ -149,7 +149,9 @@ def get_depth():\\n     @classmethod\\n     def _clone(cls, source: str, target: str, branch: str):\\n         \"\"\"Clone repository.\"\"\"\\n-        cls._popen([\"clone\"] + cls.get_depth() + [\"--branch\", branch, source, target])\\n+        cls._popen(\\n+            [\"clone\"] + cls.get_depth() + [\"--branch\", branch, \"--\", source, target]\\n+        )\\n \\n     def get_config(self, path):\\n         \"\"\"Read entry from configuration.\"\"\"\\n@@ -572,7 +574,7 @@ def get_last_repo_revision(cls, url):\\n \\n     @classmethod\\n     def get_remote_args(cls, source, target):\\n-        result = [\"--prefix=origin/\", source, target]\\n+        result = [\"--prefix=origin/\", \"--\", source, target]\\n         if cls.is_stdlayout(source):\\n             result.insert(0, \"--stdlayout\")\\n             revision = cls.get_last_repo_revision(source + \"/trunk/\")'}}",
      "message_norm": "vcs: improve git parameters handling\n\nmake sure that all user provided input is handled as expected.",
      "language": "en",
      "entities": "[('improve', 'ACTION', ''), ('user provided input', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['weblate/vcs/git.py'])",
      "num_files": 1.0
    },
    {
      "index": 2783,
      "vuln_id": "GHSA-qmv4-jgp7-mf68",
      "cwe_id": "{'CWE-284'}",
      "score": 0.0,
      "chain": "{'https://github.com/balderdashy/sails/commit/0057123a0321be6758845abbeb4290bf418ce542'}",
      "dataset": "osv",
      "summary": "Sails before 0.12.7 vulnerable to Broken CORS Affected versions of `sails` have an issue with the CORS configuration where the value of the origin header is reflected as the value for the `Access-Control-Allow-Origin` header. This may allow an attacker to make AJAX requests to vulnerable hosts through cross-site scripting or a malicious HTML Document, effectively bypassing the Same Origin Policy. \n\n## Mitigating Factors\n\nThis is only an issue when `allRoutes` is set to `true` and `origin` is set to `*` or left commented out in the sails CORS config file. \n\nThe problem can be compounded when the cors `credentials` setting is not provided, because at that point authenticated cross domain requests are possible.\n\n\n## Recommendation\n\nUpdate to version 0.12.7 or later.\n\nAs this vulnerability is primarily a user error, the patch for the vulnerability will simply cause the application to write an error message to the console when a vulnerable configuration is used in a production environment.\n\nWriting a proper CORS configuration is still the responsibility of the user, so it is necessary to check for the error message after installing the patch. Be sure you are not using `allRoutes: true` with `origin:'*'`, and that you uncomment `origin` and set it to a reasonable value. Ensure that if `origin` is set to `*` that you truly mean for all other websites to be able to make cross-domain requests to your API.\n\nLikewise, ensure `credentials` is uncommented out and set to the appropriate value. Make sure to explicitly set which origins may request resources via CORS.",
      "published_date": "2019-02-18",
      "chain_len": 1,
      "project": "https://github.com/balderdashy/sails",
      "commit_href": "https://github.com/balderdashy/sails/commit/0057123a0321be6758845abbeb4290bf418ce542",
      "commit_sha": "0057123a0321be6758845abbeb4290bf418ce542",
      "patch": "SINGLE",
      "chain_ord": "['0057123a0321be6758845abbeb4290bf418ce542']",
      "before_first_fix_commit": "{'8d642f1ab3d46491cf7b73af1ec54941ff0eb84b'}",
      "last_fix_commit": "0057123a0321be6758845abbeb4290bf418ce542",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/05/2016, 23:16:26",
      "message": "Warn about overly-permissive CORS settings when lifting in production",
      "author": "Scott Gress",
      "comments": null,
      "stats": "{'additions': 48, 'deletions': 0, 'total': 48}",
      "files": "{'lib/hooks/cors/index.js': {'additions': 48, 'deletions': 0, 'changes': 48, 'status': 'modified', 'raw_url': 'https://github.com/balderdashy/sails/raw/0057123a0321be6758845abbeb4290bf418ce542/lib%2Fhooks%2Fcors%2Findex.js', 'patch': \"@@ -44,6 +44,9 @@ module.exports = function(sails) {\\n      */\\n     initialize: function(cb) {\\n \\n+      // Declare an array to hold info about unsafely-configured routes.\\n+      var unsafeRoutes = [];\\n+\\n       // Once it's time to bind shadow routes, get to bindin'.\\n       sails.on('router:before', function () {\\n         // (TODO: consider changing this ^^ to `sails.after()` for consistency)\\n@@ -112,10 +115,55 @@ module.exports = function(sails) {\\n               sails.log.warn('Invalid CORS settings for route '+route);\\n             }\\n \\n+            // If the global CORS defaults are not overly permissive, check this individual route's settings.\\n+            if (sails.config.cors.allRoutes === false || sails.config.cors.origin !== '*' || sails.config.cors.credentials === false) {\\n+              var routeCorsConfig = _.defaults(optionsRouteConfigs[path][verb || 'default'], sails.config.cors);\\n+              // If they are too permissive, add the route to a list of unsafe routes to warn the user about\\n+              // when running in the production environment.\\n+              if (routeCorsConfig.origin === '*' && routeCorsConfig.credentials === true) {\\n+                unsafeRoutes.push((verb ? (verb + ' ') : '') + path);\\n+              }\\n+            }\\n+\\n           }\\n \\n         });\\n \\n+        // Log a warning if your default CORS settings are super permissive in the production environment.\\n+        if (sails.config.environment === 'production') {\\n+          // If the global CORS defaults are permissive, log a warning about that.\\n+          if (\\n+            sails.config.cors.allRoutes === true &&\\n+            sails.config.cors.origin === '*' &&\\n+            sails.config.cors.credentials === true\\n+          ) {\\n+          sails.log.error('\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                         'WARNING: You currently have your default CORS settings configured to allow\\\\n' +\\n+                         'all requests from all origins, with credentials.  This may leave your app\\\\n' +\\n+                         'open to attack by third-party sites!  Consider making your `origins` setting\\\\n' +\\n+                         'more restrictive or setting `credentials` to false, or else make certain that\\\\n' +\\n+                         'none of your routes perform sensitive actions or reveal secure information.\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n');\\n+          }\\n+          // Otherwise log a warning mentioning the particular routes that are too permissive.\\n+          else if (unsafeRoutes.length) {\\n+            sails.log.error('\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                           'WARNING: You currently have CORS settings on the following routes configured\\\\n' +\\n+                           'to allow all requests from all origins, with credentials:\\\\n\\\\n' + unsafeRoutes.join('\\\\n') + '\\\\n\\\\n' +\\n+                           'This may leave these routes open to attack by third-party sites!  Consider\\\\n'+\\n+                           'making the `origins` settings more restrictive or setting `credentials` to\\\\n' +\\n+                           'false, or else make certain that none of these routes perform sensitive\\\\n' +\\n+                           'actions or reveal secure information.\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n'\\n+                           );\\n+          }\\n+        }\\n+\\n+\\n+\\n+\\n         _.each(optionsRouteConfigs, function(config, path) {\\n           sails.router.bind('options '+path, prepareSendHeaders(config, true), null, {_middlewareType: 'CORS HOOK: preflight'});\\n         });\"}}",
      "message_norm": "warn about overly-permissive cors settings when lifting in production",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/hooks/cors/index.js'])",
      "num_files": 1.0
    },
    {
      "index": 3247,
      "vuln_id": "GHSA-w89r-qch4-8jv5",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https://github.com/chakra-core/ChakraCore/commit/936a5af1c07e0fdec9aab85c05339dabe4aaeeb1'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0922, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0927, CVE-2019-0933, CVE-2019-0937.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/936a5af1c07e0fdec9aab85c05339dabe4aaeeb1",
      "commit_sha": "936a5af1c07e0fdec9aab85c05339dabe4aaeeb1",
      "patch": "MULTI",
      "chain_ord": "['936a5af1c07e0fdec9aab85c05339dabe4aaeeb1', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
      "before_first_fix_commit": "{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
      "last_fix_commit": "d797e3f00e34c12c8c0ae52f56344325439dccd7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/17/2019, 17:18:03",
      "message": "[CVE-2019-0912]",
      "author": "Michael Holman",
      "comments": null,
      "stats": "{'additions': 24, 'deletions': 7, 'total': 31}",
      "files": "{'lib/Backend/GlobOptFields.cpp': {'additions': 24, 'deletions': 7, 'changes': 31, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/936a5af1c07e0fdec9aab85c05339dabe4aaeeb1/lib%2FBackend%2FGlobOptFields.cpp', 'patch': '@@ -415,11 +415,19 @@ GlobOpt::ProcessFieldKills(IR::Instr *instr, BVSparse<JitArenaAllocator> *bv, bo\\n \\n     case Js::OpCode::InlineArrayPush:\\n     case Js::OpCode::InlineArrayPop:\\n-        KillLiveFields(this->lengthEquivBv, bv);\\n-        if (inGlobOpt)\\n+        if(instr->m_func->GetThisOrParentInlinerHasArguments())\\n         {\\n-            // Deleting an item, or pushing a property to a non-array, may change object layout\\n-            KillAllObjectTypes(bv);\\n+            this->KillAllFields(bv);\\n+            this->SetAnyPropertyMayBeWrittenTo();\\n+        }\\n+        else\\n+        {\\n+            KillLiveFields(this->lengthEquivBv, bv);\\n+            if (inGlobOpt)\\n+            {\\n+                // Deleting an item, or pushing a property to a non-array, may change object layout\\n+                KillAllObjectTypes(bv);\\n+            }\\n         }\\n         break;\\n \\n@@ -444,14 +452,23 @@ GlobOpt::ProcessFieldKills(IR::Instr *instr, BVSparse<JitArenaAllocator> *bv, bo\\n                 // Kill length field for built-ins that can update it.\\n                 if (nullptr != this->lengthEquivBv)\\n                 {\\n-                    KillLiveFields(this->lengthEquivBv, bv);\\n+                    // If has arguments, all fields are killed in fall through\\n+                    if (!instr->m_func->GetThisOrParentInlinerHasArguments())\\n+                    {\\n+                        KillLiveFields(this->lengthEquivBv, bv);\\n+                    }\\n                 }\\n                 // fall through\\n \\n             case IR::JnHelperMethod::HelperArray_Reverse:\\n-                // Deleting an item may change object layout\\n-                if (inGlobOpt)\\n+                if (instr->m_func->GetThisOrParentInlinerHasArguments())\\n+                {\\n+                    this->KillAllFields(bv);\\n+                    this->SetAnyPropertyMayBeWrittenTo();\\n+                }\\n+                else if (inGlobOpt)\\n                 {\\n+                    // Deleting an item may change object layout\\n                     KillAllObjectTypes(bv);\\n                 }\\n                 break;'}}",
      "message_norm": "[cve-2019-0912]",
      "language": "ro",
      "entities": "[('cve-2019-0912', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/GlobOptFields.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 2144,
      "vuln_id": "GHSA-hwj3-m3p6-hj38",
      "cwe_id": "{'CWE-611'}",
      "score": 9.8,
      "chain": "{'https://github.com/dom4j/dom4j/commit/1707bf3d898a8ada3b213acb0e3b38f16eaae73d', 'https://github.com/dom4j/dom4j/commit/a8228522a99a02146106672a34c104adbda5c658'}",
      "dataset": "osv",
      "summary": "dom4j allows External Entities by default which might enable XXE attacks dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.\n\nNote: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts.  To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",
      "published_date": "2020-06-05",
      "chain_len": 2,
      "project": "https://github.com/dom4j/dom4j",
      "commit_href": "https://github.com/dom4j/dom4j/commit/1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
      "commit_sha": "1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
      "patch": "MULTI",
      "chain_ord": "['a8228522a99a02146106672a34c104adbda5c658', '1707bf3d898a8ada3b213acb0e3b38f16eaae73d']",
      "before_first_fix_commit": "{'223ae0639d5d73a5a25fddec8b16c7071ee10e3d'}",
      "last_fix_commit": "1707bf3d898a8ada3b213acb0e3b38f16eaae73d",
      "chain_ord_pos": 2.0,
      "commit_datetime": "04/11/2020, 17:27:36",
      "message": "#28 Disable downloading external resources with DocumentHelper.parseText() helper.\n\n(cherry picked from commit 8f6a7f6001d679176c1079ac65871d4e493360db)",
      "author": "Filip Jirs\u00e1k",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'src/main/java/org/dom4j/DocumentHelper.java': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/dom4j/dom4j/raw/1707bf3d898a8ada3b213acb0e3b38f16eaae73d/src%2Fmain%2Fjava%2Forg%2Fdom4j%2FDocumentHelper.java', 'patch': '@@ -270,6 +270,14 @@ public static void sort(List<Node> list, String expression, boolean distinct) {\\n      */\\n     public static Document parseText(String text) throws DocumentException {\\n         SAXReader reader = new SAXReader();\\n+        try {\\n+            reader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\\n+            reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\\n+            reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\\n+        } catch (SAXException e) {\\n+            //Parse with external resources downloading allowed.\\n+        }\\n+\\n         String encoding = getEncoding(text);\\n \\n         InputSource source = new InputSource(new StringReader(text));'}}",
      "message_norm": "#28 disable downloading external resources with documenthelper.parsetext() helper.\n\n(cherry picked from commit 8f6a7f6001d679176c1079ac65871d4e493360db)",
      "language": "en",
      "entities": "[('#28', 'ISSUE', ''), ('commit 8f6a7f6001d679176c1079ac65871d4e493360db', 'SHA', 'prefix_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/org/dom4j/DocumentHelper.java'])",
      "num_files": 1.0
    },
    {
      "index": 848,
      "vuln_id": "GHSA-6hjc-m38h-7jhh",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/nystudio107/craft-seomatic/commit/4e46b792ce973ac0c652fb330055f41aca1981c8', 'https://github.com/nystudio107/craft-seomatic/commit/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in SEOmatic plugin A cross-site scripting (XSS) vulnerability in the SEOmatic plugin 3.4.10 for Craft CMS 3 allows remote attackers to inject arbitrary web script via a GET to /index.php?action=seomatic/file/seo-file-link with url parameter containing the base64 encoded URL of a malicious web page / file and fileName parameter containing an arbitrary filename with the intended content-type to be rendered in the user's browser as the extension.",
      "published_date": "2022-06-13",
      "chain_len": 2,
      "project": "https://github.com/nystudio107/craft-seomatic",
      "commit_href": "https://github.com/nystudio107/craft-seomatic/commit/4e46b792ce973ac0c652fb330055f41aca1981c8",
      "commit_sha": "4e46b792ce973ac0c652fb330055f41aca1981c8",
      "patch": "MULTI",
      "chain_ord": "['5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873', '4e46b792ce973ac0c652fb330055f41aca1981c8']",
      "before_first_fix_commit": "{'8c0dc48d026fd076cd0a8fae917bdadc8d67cfa6'}",
      "last_fix_commit": "4e46b792ce973ac0c652fb330055f41aca1981c8",
      "chain_ord_pos": 2.0,
      "commit_datetime": "09/24/2021, 15:01:54",
      "message": "Disallow SVGs",
      "author": "Andrew Welch",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/controllers/FileController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/nystudio107/craft-seomatic/raw/4e46b792ce973ac0c652fb330055f41aca1981c8/src%2Fcontrollers%2FFileController.php', 'patch': \"@@ -96,7 +96,7 @@ public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline =\\n             if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {\\n                 $ext = strtolower($ext);\\n             }\\n-            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {\\n+            if ($ext === '' || $ext === 'svg' || !in_array($ext, $allowedExtensions, true)) {\\n                 throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));\\n             }\\n             // Send the file as a stream, so it can exist anywhere\"}}",
      "message_norm": "disallow svgs",
      "language": "it",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/controllers/FileController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1948,
      "vuln_id": "GHSA-gwrj-88fp-5m36",
      "cwe_id": "{'CWE-94'}",
      "score": 8.5,
      "chain": "{'https://github.com/whiteleaf7/narou/commit/d07720e855293182563b749431dfbf6c2d1cdb42'}",
      "dataset": "osv",
      "summary": "Code injection in Narou Narou (aka Narou.rb) before 3.8.0 allows Ruby Code Injection via the title name or author name of a novel.",
      "published_date": "2021-07-02",
      "chain_len": 1,
      "project": "https://github.com/whiteleaf7/narou",
      "commit_href": "https://github.com/whiteleaf7/narou/commit/d07720e855293182563b749431dfbf6c2d1cdb42",
      "commit_sha": "d07720e855293182563b749431dfbf6c2d1cdb42",
      "patch": "SINGLE",
      "chain_ord": "['d07720e855293182563b749431dfbf6c2d1cdb42']",
      "before_first_fix_commit": "{'21f8d1b4cbfa42a80eae09d74bb5124fd6cde3f2'}",
      "last_fix_commit": "d07720e855293182563b749431dfbf6c2d1cdb42",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/27/2021, 13:49:19",
      "message": "prohibit embedding of novel information",
      "author": "whiteleaf7",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 8, 'total': 9}",
      "files": "{'template/converter.rb.erb': {'additions': 1, 'deletions': 8, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/whiteleaf7/narou/raw/d07720e855293182563b749431dfbf6c2d1cdb42/template%2Fconverter.rb.erb', 'patch': '@@ -1,14 +1,7 @@\\n # -*- coding: utf-8 -*-\\n <% Template.target_binary_version(1.0) -%>\\n \\n-=begin\\n-\u5bfe\u8c61\u5c0f\u8aac\u60c5\u5831\\n-\u30bf\u30a4\u30c8\u30eb: <%= @setting[\"title\"] %>\\n-\u4f5c\u8005: <%= @setting[\"author\"] %>\\n-URL: <%= @setting[\"toc_url\"] %>\\n-\\n-\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f http://bit.ly/1vTEH04 \u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\\n-=end\\n+# \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f http://bit.ly/1vTEH04 \u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\\n converter do\\n   # \u5404\u7a2e\u5909\u63db\u51e6\u7406\u304c\u3055\u308c\u308b\u300c\u524d\u300d\u306e\u751f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u5909\u63db\u51e6\u7406\u3092\u8a18\u8ff0\\n   def before(io, text_type)'}}",
      "message_norm": "prohibit embedding of novel information",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['template/converter.rb.erb'])",
      "num_files": 1.0
    },
    {
      "index": 1173,
      "vuln_id": "GHSA-896r-f27r-55mw",
      "cwe_id": "{'CWE-1321', 'CWE-915'}",
      "score": 9.8,
      "chain": "{'https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741', 'https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa'}",
      "dataset": "osv",
      "summary": "json-schema is vulnerable to Prototype Pollution json-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
      "published_date": "2021-11-19",
      "chain_len": 3,
      "project": "https://github.com/kriszyp/json-schema",
      "commit_href": "https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a",
      "commit_sha": "b62f1da1ff5442f23443d6be6a92d00e65cba93a",
      "patch": "MULTI",
      "chain_ord": "['22f146111f541d9737e832823699ad3528ca7741', 'b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa']",
      "before_first_fix_commit": "{'ef60987a9a14b9d9c739384460044ba53cd9b9a2'}",
      "last_fix_commit": "f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
      "chain_ord_pos": 2.0,
      "commit_datetime": "11/02/2021, 02:41:46",
      "message": "Protect against constructor modification, #84",
      "author": "Kris Zyp",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/validate.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/kriszyp/json-schema/raw/b62f1da1ff5442f23443d6be6a92d00e65cba93a/lib%2Fvalidate.js', 'patch': \"@@ -207,7 +207,7 @@ var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*O\\n \\t\\t\\t}\\n \\t\\t\\t\\n \\t\\t\\tfor(var i in objTypeDef){ \\n-\\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__'){\\n+\\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){\\n \\t\\t\\t\\t\\tvar value = instance[i];\\n \\t\\t\\t\\t\\t// skip _not_ specified properties\\n \\t\\t\\t\\t\\tif (value === undefined && options.existingOnly) continue;\"}}",
      "message_norm": "protect against constructor modification, #84",
      "language": "en",
      "entities": "[('protect', 'SECWORD', ''), ('#84', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/validate.js'])",
      "num_files": 1.0
    },
    {
      "index": 362,
      "vuln_id": "GHSA-4574-qv3w-fcmg",
      "cwe_id": "{'CWE-502'}",
      "score": 9.8,
      "chain": "{'https://github.com/Codeception/Codeception/commit/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71', 'https://github.com/Codeception/Codeception/commit/802a108057d250ee563120eaa5365a519afc0a71'}",
      "dataset": "osv",
      "summary": " Deserialization of Untrusted Data in codeception/codeception This affects the package codeception/codeception from 4.0.0 before 4.1.22 and before 3.1.3. The RunProcess class can be leveraged as a gadget to run arbitrary commands on a system that is deserializing user input without validation.",
      "published_date": "2021-09-01",
      "chain_len": 2,
      "project": "https://github.com/Codeception/Codeception",
      "commit_href": "https://github.com/Codeception/Codeception/commit/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71",
      "commit_sha": "cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71",
      "patch": "MULTI",
      "chain_ord": "['cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71', '802a108057d250ee563120eaa5365a519afc0a71']",
      "before_first_fix_commit": "{'5ea172de7b1b2e61dcdd50d73f8368886c549fb4'}",
      "last_fix_commit": "802a108057d250ee563120eaa5365a519afc0a71",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/06/2021, 07:46:35",
      "message": "Security: Disable deserialization of RunProcess class (#6241)",
      "author": "Gintautas Miselis",
      "comments": null,
      "stats": "{'additions': 22, 'deletions': 0, 'total': 22}",
      "files": "{'ext/RunProcess.php': {'additions': 22, 'deletions': 0, 'changes': 22, 'status': 'modified', 'raw_url': 'https://github.com/Codeception/Codeception/raw/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71/ext%2FRunProcess.php', 'patch': \"@@ -107,4 +107,26 @@ public function stopProcess()\\n         }\\n         $this->processes = [];\\n     }\\n+\\n+    /**\\n+     * Disable the deserialization of the class to prevent attacker executing\\n+     * code by leveraging the __destruct method.\\n+     *\\n+     * @see https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection\\n+     */\\n+    public function __sleep()\\n+    {\\n+        throw new \\\\BadMethodCallException('Cannot serialize ' . __CLASS__);\\n+    }\\n+\\n+    /**\\n+     * Disable the deserialization of the class to prevent attacker executing\\n+     * code by leveraging the __destruct method.\\n+     *\\n+     * @see https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection\\n+     */\\n+    public function __wakeup()\\n+    {\\n+        throw new \\\\BadMethodCallException('Cannot unserialize ' . __CLASS__);\\n+    }\\n }\"}}",
      "message_norm": "security: disable deserialization of runprocess class (#6241)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('deserialization', 'SECWORD', ''), ('#6241', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ext/RunProcess.php'])",
      "num_files": 1.0
    },
    {
      "index": 430,
      "vuln_id": "GHSA-4h66-vghf-xg5x",
      "cwe_id": "{'CWE-77'}",
      "score": 9.8,
      "chain": "{'https://github.com/hoperyy/get-npm-package-version/commit/49459d4a3ce68587d48ffa8dead86fc9ed58e965', 'https://github.com/hoperyy/get-npm-package-version/commit/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec'}",
      "dataset": "osv",
      "summary": "get-npm-package-version Command Injection vulnerability The package get-npm-package-version before 1.0.7 is vulnerable to Command Injection via the `main` function in index.js.",
      "published_date": "2022-08-03",
      "chain_len": 2,
      "project": "https://github.com/hoperyy/get-npm-package-version",
      "commit_href": "https://github.com/hoperyy/get-npm-package-version/commit/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
      "commit_sha": "40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
      "patch": "MULTI",
      "chain_ord": "['40b1cf31a0607ea66f9e30a0c3af1383b52b2dec', '49459d4a3ce68587d48ffa8dead86fc9ed58e965']",
      "before_first_fix_commit": "{'52797864df09049ea28d65d14620774257a965b0'}",
      "last_fix_commit": "49459d4a3ce68587d48ffa8dead86fc9ed58e965",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/26/2021, 03:48:05",
      "message": "feat: add defence to Command Injection\n\nadd defence to Command Injection",
      "author": "DuLinRain",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'index.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/hoperyy/get-npm-package-version/raw/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec/index.js', 'patch': \"@@ -1,5 +1,8 @@\\n module.exports = function (packageName, { registry = '', timeout = null } = {}) {\\n     try {\\n+        if (/[`$&{}[;|]/g.test(packageName) || /[`$&{}[;|]/g.test(registry)) {\\n+            return null\\n+        }\\n         let version;\\n \\n         const config = {\"}}",
      "message_norm": "feat: add defence to command injection\n\nadd defence to command injection",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', ''), ('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 1359,
      "vuln_id": "GHSA-9cq5-xgg4-x477",
      "cwe_id": "{'CWE-89'}",
      "score": 6.7,
      "chain": "{'https://github.com/star7th/showdoc/commit/2b34e267e4186125f99bfa420140634ad45801fb'}",
      "dataset": "osv",
      "summary": "SQL Injection in showdoc Showdoc verions 2.10.2 and prior is vulnerable to SQL injection. A patch is available in the `master` branch of the repository.",
      "published_date": "2022-01-27",
      "chain_len": 1,
      "project": "https://github.com/star7th/showdoc",
      "commit_href": "https://github.com/star7th/showdoc/commit/2b34e267e4186125f99bfa420140634ad45801fb",
      "commit_sha": "2b34e267e4186125f99bfa420140634ad45801fb",
      "patch": "SINGLE",
      "chain_ord": "['2b34e267e4186125f99bfa420140634ad45801fb']",
      "before_first_fix_commit": "{'409c8a1208bbb847046a9496303192980f2e6219'}",
      "last_fix_commit": "2b34e267e4186125f99bfa420140634ad45801fb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/25/2022, 12:34:52",
      "message": "bug",
      "author": "star7th",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'server/Application/Api/Controller/AdminUserController.class.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/star7th/showdoc/raw/2b34e267e4186125f99bfa420140634ad45801fb/server%2FApplication%2FApi%2FController%2FAdminUserController.class.php', 'patch': '@@ -76,7 +76,7 @@ public function addUser(){\\n         $this->checkAdmin();\\n         $username = I(\"post.username\");\\n         $password = I(\"post.password\");\\n-        $uid = I(\"post.uid\");\\n+        $uid = I(\"post.uid/d\");\\n         $name = I(\"post.name\");\\n         if(!$username){\\n             $this->sendError(10101,\\'\u7528\u6237\u540d\u4e0d\u5141\u8bb8\u4e3a\u7a7a\\');'}}",
      "message_norm": "bug",
      "language": "id",
      "entities": "[('bug', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/Application/Api/Controller/AdminUserController.class.php'])",
      "num_files": 1.0
    },
    {
      "index": 2928,
      "vuln_id": "GHSA-rf66-hmqf-q3fc",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/snipe/snipe-it/pull/6831/commits/5848d9a10c7d62c73ff6a3858edfae96a429402a'}",
      "dataset": "osv",
      "summary": "Improper Neutralization of Input During Web Page Generation in Select2 In Select2 through 4.0.5, as used in Snipe-IT and other products, rich selectlists allow XSS. This affects use cases with Ajax remote data loading when HTML templates are used to display listbox data.",
      "published_date": "2022-05-14",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/pull/6831/commits/5848d9a10c7d62c73ff6a3858edfae96a429402a",
      "commit_sha": "5848d9a10c7d62c73ff6a3858edfae96a429402a",
      "patch": "SINGLE",
      "chain_ord": "['5848d9a10c7d62c73ff6a3858edfae96a429402a']",
      "before_first_fix_commit": "{'bd8548325d6b4210015bd0ddeb144c61ae8949be'}",
      "last_fix_commit": "5848d9a10c7d62c73ff6a3858edfae96a429402a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/19/2019, 02:29:30",
      "message": "Janky fix for Select2 bug",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 1, 'total': 13}",
      "files": "{'resources/assets/js/snipeit.js': {'additions': 12, 'deletions': 1, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/5848d9a10c7d62c73ff6a3858edfae96a429402a/resources%2Fassets%2Fjs%2Fsnipeit.js', 'patch': '@@ -260,7 +260,18 @@ $(document).ready(function () {\\n     }\\n \\n     function formatDataSelection (datalist) {\\n-        return datalist.text;\\n+        // This a heinous workaround for a known bug in Select2.\\n+        // Without this, the rich selectlists are vulnerable to XSS.\\n+        // Many thanks to @uberbrady for this fix. It ain\\'t pretty,\\n+        // but it resolves the issue until Select2 addresses it on their end.\\n+        //\\n+        // Bug was reported in 2016 :{\\n+        // https://github.com/select2/select2/issues/4587\\n+\\n+        return datalist.text.replace(/>/g, \\'&gt;\\')\\n+            .replace(/</g, \\'&lt;\\')\\n+            .replace(/\"/g, \\'&quot;\\')\\n+            .replace(/\\'/g, \\'&#039;\\');\\n     }\\n \\n     // This handles the radio button selectors for the checkout-to-foo options'}}",
      "message_norm": "janky fix for select2 bug",
      "language": "en",
      "entities": "[('bug', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['resources/assets/js/snipeit.js'])",
      "num_files": 1.0
    },
    {
      "index": 1821,
      "vuln_id": "GHSA-g5fm-jp9v-2432",
      "cwe_id": "{'CWE-754'}",
      "score": 7.5,
      "chain": "{'https://github.com/nextauthjs/next-auth/commit/e498483b23273d1bfc81be68339607f88d411bd6', 'https://github.com/nextauthjs/next-auth/commit/25517b73153332d948114bacdff3b5908de91d85'}",
      "dataset": "osv",
      "summary": "Improper Handling of `callbackUrl` parameter in next-auth ### Impact\n\nAn attacker can send a request to an app using NextAuth.js with an invalid `callbackUrl` query parameter, which internally we convert to a `URL` object. The URL instantiation would fail due to a malformed URL being passed into the constructor, causing it to throw an unhandled error which led to our **API route handler timing out and logging in to fail**. This has been remedied in the following releases:\n\nnext-auth v3 users before version 3.29.5 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. See our [migration guide](https://next-auth.js.org/getting-started/upgrade-v4))\n\nnext-auth v4 users before version 4.5.0 are impacted.\n\n### Patches\n\nWe've released patches for this vulnerability in:\n  \n- v3 - `3.29.5`\n- v4 - `4.5.0`\n\nYou can do:\n\n```sh\nnpm i next-auth@latest\n```\n\nor\n\n```sh\nyarn add next-auth@latest\n```\n\nor\n\n```sh\npnpm add next-auth@latest\n```\n\n(This will update to the latest v4 version, but you can change  `latest` to `3` if you want to stay on v3. This is not recommended.)\n\n### Workarounds\n\nIf for some reason you cannot upgrade, the workaround requires you to rely on [Advanced Initialization](https://next-auth.js.org/configuration/initialization#advanced-initialization). Here is an example:\n\n**Before:**\n\n```js\n// pages/api/auth/[...nextauth].js\nimport NextAuth from \"next-auth\"\n\nexport default NextAuth(/* your config */)\n```\n\n**After:**\n\n```js\n// pages/api/auth/[...nextauth].js\nimport NextAuth from \"next-auth\"\n\nfunction isValidHttpUrl(url) {\n  try {\n    return /^https?:/.test(url).protocol\n  } catch {\n    return false;\n  }\n}\n\nexport default async function handler(req, res) {\n  if (\n    req.query.callbackUrl &&\n    !isValidHttpUrl(req.query.callbackUrl)\n  ) {\n   return res.status(500).send('');\n  }\n  \n  return await NextAuth(req, res, /* your config */)\n}\n```\n\n\n### References\n\nThis vulnerability was discovered not long after https://github.com/nextauthjs/next-auth/security/advisories/GHSA-q2mx-j4x2-2h74 was published and is very similar in nature.\n\nRelated documentation:\n\n- https://next-auth.js.org/getting-started/client#specifying-a-callbackurl\n- https://next-auth.js.org/configuration/callbacks#redirect-callback\n\nA test case has been added so this kind of issue will be checked before publishing. See: https://github.com/nextauthjs/next-auth/commit/e498483b23273d1bfc81be68339607f88d411bd6\n\n### For more information\n\nIf you have any concerns, we request responsible disclosure, outlined here: https://next-auth.js.org/security#reporting-a-vulnerability\n\n### Timeline\n\nThe issue was reported 2022 June 10th, a response was sent out to the reporter in less than 2 hours, and a patch was published within 3 hours.",
      "published_date": "2022-06-21",
      "chain_len": 2,
      "project": "https://github.com/nextauthjs/next-auth",
      "commit_href": "https://github.com/nextauthjs/next-auth/commit/e498483b23273d1bfc81be68339607f88d411bd6",
      "commit_sha": "e498483b23273d1bfc81be68339607f88d411bd6",
      "patch": "MULTI",
      "chain_ord": "['25517b73153332d948114bacdff3b5908de91d85', 'e498483b23273d1bfc81be68339607f88d411bd6']",
      "before_first_fix_commit": "{'7cf49566a6327ae99a3def6d20b28c3786c7368c'}",
      "last_fix_commit": "e498483b23273d1bfc81be68339607f88d411bd6",
      "chain_ord_pos": 2.0,
      "commit_datetime": "06/20/2022, 08:38:21",
      "message": "test: add test for invalid `callbackUrl` handling",
      "author": "Bal\u00e1zs Orb\u00e1n",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 0, 'total': 16}",
      "files": "{'packages/next-auth/tests/assert.test.ts': {'additions': 16, 'deletions': 0, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/nextauthjs/next-auth/raw/e498483b23273d1bfc81be68339607f88d411bd6/packages%2Fnext-auth%2Ftests%2Fassert.test.ts', 'patch': '@@ -13,6 +13,22 @@ it(\"Show error page if secret is not defined\", async () => {\\n   expect(log.error).toBeCalledWith(\"NO_SECRET\", expect.anything())\\n })\\n \\n+it(\"Should show configuration error page on invalid `callbackUrl`\", async () => {\\n+  const { res, log } = await handler(\\n+    { providers: [] },\\n+    { prod: true, params: { callbackUrl: \"invalid-callback\" } }\\n+  )\\n+\\n+  expect(res.status).toBe(500)\\n+  expect(res.html).toMatch(/there is a problem with the server configuration./i)\\n+  expect(res.html).toMatch(/check the server logs for more information./i)\\n+\\n+  expect(log.error).toBeCalledWith(\\n+    \"INVALID_CALLBACK_URL_ERROR\",\\n+    expect.anything()\\n+  )\\n+})\\n+\\n it(\"Allow relative `callbackUrl`\", async () => {\\n   const { res, log } = await handler(\\n     { providers: [] },'}}",
      "message_norm": "test: add test for invalid `callbackurl` handling",
      "language": "en",
      "entities": "[('add', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['packages/next-auth/tests/assert.test.ts'])",
      "num_files": 1.0
    },
    {
      "index": 308,
      "vuln_id": "GHSA-3r8j-pmch-5j2h",
      "cwe_id": "{'CWE-209'}",
      "score": 3.5,
      "chain": "{'https://github.com/Sylius/Sylius/commit/be245302dfc594d8690fe50dd47631d186aa945f'}",
      "dataset": "osv",
      "summary": "Internal exception message exposure for login action in Sylius ## Internal exception message exposure for login action\n\n### Impact\nException messages from internal exceptions (like database exception) are wrapped by `\\Symfony\\Component\\Security\\Core\\Exception\\AuthenticationServiceException` and propagated through the system to UI. Therefore, some internal system information may leak and be visible to the customer. \n\nA validation message with the exception details will be presented to the user when one will try to log into the shop. \n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\n### Workarounds\nThe `src/Sylius/Bundle/UiBundle/Resources/views/Security/_login.html.twig` file should be overridden and lines https://github.com/Sylius/Sylius/blob/1.4/src/Sylius/Bundle/UiBundle/Resources/views/Security/_login.html.twig#L13-L17 should be replaced with\n```twig\n        {% if last_error %}\n            <div class=\"ui left aligned basic segment\">\n                {{ messages.error(last_error.messageKey) }}\n            </div>\n        {% endif %}\n``` \n\nThe `messageKey` field should be used instead of the `message`.",
      "published_date": "2019-12-05",
      "chain_len": 1,
      "project": "https://github.com/Sylius/Sylius",
      "commit_href": "https://github.com/Sylius/Sylius/commit/be245302dfc594d8690fe50dd47631d186aa945f",
      "commit_sha": "be245302dfc594d8690fe50dd47631d186aa945f",
      "patch": "SINGLE",
      "chain_ord": "['be245302dfc594d8690fe50dd47631d186aa945f']",
      "before_first_fix_commit": "{'19b2fe4a6cdb2186489221ea8b5e5628c8223286'}",
      "last_fix_commit": "be245302dfc594d8690fe50dd47631d186aa945f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/04/2019, 12:59:26",
      "message": "Generate changelog for v1.3.14",
      "author": "Kamil Kokot",
      "comments": null,
      "stats": "{'additions': 17, 'deletions': 0, 'total': 17}",
      "files": "{'CHANGELOG-1.3.md': {'additions': 17, 'deletions': 0, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/Sylius/Sylius/raw/be245302dfc594d8690fe50dd47631d186aa945f/CHANGELOG-1.3.md', 'patch': '@@ -1,5 +1,22 @@\\n # CHANGELOG FOR `1.3.X`\\n \\n+## v1.3.14 (2019-12-03)\\n+\\n+### CVE-2019-16768: Internal exception message exposure in login action.\\n+\\n+#### Details\\n+\\n+Exception messages from internal exceptions (like database exception) are wrapped by \\n+`\\\\Symfony\\\\Component\\\\Security\\\\Core\\\\Exception\\\\AuthenticationServiceException` and propagated through the system to UI. \\n+Therefore, some internal system information may leak and be visible to the customer.\\n+\\n+A validation message with the exception details will be presented to the user when one will try to log into the shop.\\n+\\n+#### Workaround\\n+\\n+This release patches the reported vulnerability. The `src/Sylius/Bundle/UiBundle/Resources/views/Security/_login.html.twig` \\n+file from Sylius should be overridden and `{{ messages.error(last_error.message) }}` changed to `{{ messages.error(last_error.messageKey) }}`.\\n+\\n ## v1.3.13 (2019-05-29)\\n \\n #### Details'}}",
      "message_norm": "generate changelog for v1.3.14",
      "language": "da",
      "entities": "[('v1.3.14', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['CHANGELOG-1.3.md'])",
      "num_files": 1.0
    },
    {
      "index": 3172,
      "vuln_id": "GHSA-vvg4-vgrv-xfr7",
      "cwe_id": "{'CWE-665'}",
      "score": 6.3,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/4504a081af71514bb1828048363e6540f797005b', 'https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c'}",
      "dataset": "osv",
      "summary": "Incomplete validation in `tf.raw_ops.CTCLoss` ### Impact \nIncomplete validation in `tf.raw_ops.CTCLoss` allows an attacker to trigger an OOB read from heap:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[10, 16, 0], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[8, 0], dtype=tf.int64)\nlabels_values = tf.constant([-100] * 8, shape=[8], dtype=tf.int32)\nsequence_length = tf.constant([-100] * 16, shape=[16], dtype=tf.int32)\n  \ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=True, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=True)\n```   \n      \nAn attacker can also trigger a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[7, 2, 0], dtype=tf.float32)\nlabels_indices = tf.constant([-100, -100], shape=[2, 1], dtype=tf.int64)\nlabels_values = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\nFinally, an attacker can trigger a null pointer dereference:\n\n```python \nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\n### Patches\nWe have patched the issue in GitHub commit[14607c0707040d775e06b6817325640cb4b5864c](https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c) followed by GitHub commit [4504a081af71514bb1828048363e6540f797005b](https://github.com/tensorflow/tensorflow/commit/4504a081af71514bb1828048363e6540f797005b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c",
      "commit_sha": "14607c0707040d775e06b6817325640cb4b5864c",
      "patch": "MULTI",
      "chain_ord": "['4504a081af71514bb1828048363e6540f797005b', '14607c0707040d775e06b6817325640cb4b5864c']",
      "before_first_fix_commit": "{'8410ce671b48e96965a1e4a97017f8a5bbd03d3a'}",
      "last_fix_commit": "14607c0707040d775e06b6817325640cb4b5864c",
      "chain_ord_pos": 2.0,
      "commit_datetime": "05/06/2021, 04:09:21",
      "message": "Fix nullptr deref in `tf.raw_ops.CTCLoss`.\n\nPiperOrigin-RevId: 372266334\nChange-Id: Ic52c3e9f13a38f54482d670907eda1688450862b",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/kernels/ctc_loss_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/14607c0707040d775e06b6817325640cb4b5864c/tensorflow%2Fcore%2Fkernels%2Fctc_loss_op.cc', 'patch': '@@ -109,6 +109,9 @@ class CTCLossOp : public OpKernel {\\n \\n     const TensorShape& inputs_shape = inputs->shape();\\n     const int64 max_time = inputs_shape.dim_size(0);\\n+    OP_REQUIRES(ctx, max_time != 0,\\n+                errors::InvalidArgument(\\n+                    \"Max time or first dimension of input cannot be 0.\"));\\n     const int64 batch_size = inputs_shape.dim_size(1);\\n     const int64 num_classes_raw = inputs_shape.dim_size(2);\\n     OP_REQUIRES('}}",
      "message_norm": "fix nullptr deref in `tf.raw_ops.ctcloss`.\n\npiperorigin-revid: 372266334\nchange-id: ic52c3e9f13a38f54482d670907eda1688450862b",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('372266334', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ctc_loss_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 390,
      "vuln_id": "GHSA-49j7-qghp-5wj8",
      "cwe_id": "{'CWE-94'}",
      "score": 0.0,
      "chain": "{'https://github.com/fusesource/hawtjni/commit/92c266170ce98edc200c656bd034a237098b8aa5'}",
      "dataset": "osv",
      "summary": "Improper Control of Generation of Code in HawtJNI Race condition in hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java in HawtJNI before 1.8, when a custom library path is not specified, allows local users to execute arbitrary Java code by overwriting a temporary JAR file with a predictable name in /tmp.",
      "published_date": "2022-05-17",
      "chain_len": 1,
      "project": "https://github.com/fusesource/hawtjni",
      "commit_href": "https://github.com/fusesource/hawtjni/commit/92c266170ce98edc200c656bd034a237098b8aa5",
      "commit_sha": "92c266170ce98edc200c656bd034a237098b8aa5",
      "patch": "SINGLE",
      "chain_ord": "['92c266170ce98edc200c656bd034a237098b8aa5']",
      "before_first_fix_commit": "{'357bb279b0c8c67b7d357c1363efe86870ad9a81'}",
      "last_fix_commit": "92c266170ce98edc200c656bd034a237098b8aa5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/06/2013, 13:49:55",
      "message": "Simplify shared lib extraction.",
      "author": "Hiram Chirino",
      "comments": null,
      "stats": "{'additions': 29, 'deletions': 50, 'total': 79}",
      "files": "{'hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java': {'additions': 29, 'deletions': 50, 'changes': 79, 'status': 'modified', 'raw_url': 'https://github.com/fusesource/hawtjni/raw/92c266170ce98edc200c656bd034a237098b8aa5/hawtjni-runtime%2Fsrc%2Fmain%2Fjava%2Forg%2Ffusesource%2Fhawtjni%2Fruntime%2FLibrary.java', 'patch': '@@ -9,13 +9,11 @@\\n  *******************************************************************************/\\n package org.fusesource.hawtjni.runtime;\\n \\n-import java.io.File;\\n-import java.io.FileOutputStream;\\n-import java.io.IOException;\\n-import java.io.InputStream;\\n+import java.io.*;\\n import java.net.MalformedURLException;\\n import java.net.URL;\\n import java.util.ArrayList;\\n+import java.util.Random;\\n import java.util.regex.Pattern;\\n \\n /**\\n@@ -206,16 +204,19 @@ final public String getLibraryFileName() {\\n     private boolean exractAndLoad(ArrayList<String> errors, String version, String customPath, String resourcePath) {\\n         URL resource = classLoader.getResource(resourcePath);\\n         if( resource !=null ) {\\n-            \\n+\\n             String libName = name + \"-\" + getBitModel();\\n             if( version !=null) {\\n                 libName += \"-\" + version;\\n             }\\n-            \\n+            String []libNameParts = map(libName).split(\"\\\\\\\\.\");\\n+            String prefix = libNameParts[0]+\"-\";\\n+            String suffix = \".\"+libNameParts[1];\\n+\\n             if( customPath!=null ) {\\n                 // Try to extract it to the custom path...\\n-                File target = file(customPath, map(libName));\\n-                if( extract(errors, resource, target) ) {\\n+                File target = extract(errors, resource, prefix, suffix, file(customPath));\\n+                if( target!=null ) {\\n                     if( load(errors, target) ) {\\n                         return true;\\n                     }\\n@@ -224,8 +225,8 @@ private boolean exractAndLoad(ArrayList<String> errors, String version, String c\\n             \\n             // Fall back to extracting to the tmp dir\\n             customPath = System.getProperty(\"java.io.tmpdir\");\\n-            File target = file(customPath, map(libName));\\n-            if( extract(errors, resource, target) ) {\\n+            File target = extract(errors, resource, prefix, suffix, file(customPath));\\n+            if( target!=null ) {\\n                 if( load(errors, target) ) {\\n                     return true;\\n                 }\\n@@ -259,67 +260,45 @@ private String map(String libName) {\\n         return libName;\\n     }\\n \\n-    private boolean extract(ArrayList<String> errors, URL source, File target) {\\n-        FileOutputStream os = null;\\n-        InputStream is = null;\\n-        boolean extracting = false;\\n+    private File extract(ArrayList<String> errors, URL source, String prefix, String suffix, File directory) {\\n+        File target = null;\\n         try {\\n-            if (!target.exists() || isStale(source, target) ) {\\n+            FileOutputStream os = null;\\n+            InputStream is = null;\\n+            try {\\n+                target = File.createTempFile(prefix, suffix, directory);\\n                 is = source.openStream();\\n                 if (is != null) {\\n                     byte[] buffer = new byte[4096];\\n                     os = new FileOutputStream(target);\\n-                    extracting = true;\\n                     int read;\\n                     while ((read = is.read(buffer)) != -1) {\\n                         os.write(buffer, 0, read);\\n                     }\\n-                    os.close();\\n-                    is.close();\\n                     chmod(\"755\", target);\\n                 }\\n+                target.deleteOnExit();\\n+                return target;\\n+            } finally {\\n+                close(os);\\n+                close(is);\\n             }\\n         } catch (Throwable e) {\\n-            try {\\n-                if (os != null)\\n-                    os.close();\\n-            } catch (IOException e1) {\\n-            }\\n-            try {\\n-                if (is != null)\\n-                    is.close();\\n-            } catch (IOException e1) {\\n-            }\\n-            if (extracting && target.exists())\\n+            if( target!=null ) {\\n                 target.delete();\\n+            }\\n             errors.add(e.getMessage());\\n-            return false;\\n         }\\n-        return true;\\n+        return null;\\n     }\\n \\n-    private boolean isStale(URL source, File target) {\\n-        \\n-        if( source.getProtocol().equals(\"jar\") ) {\\n-            // unwrap the jar protocol...\\n+    static private void close(Closeable file) {\\n+        if(file!=null) {\\n             try {\\n-                String parts[] = source.getFile().split(Pattern.quote(\"!\"));\\n-                source = new URL(parts[0]);\\n-            } catch (MalformedURLException e) {\\n-                return false;\\n-            }\\n-        }\\n-        \\n-        File sourceFile=null;\\n-        if( source.getProtocol().equals(\"file\") ) {\\n-            sourceFile = new File(source.getFile());\\n-        }\\n-        if( sourceFile!=null && sourceFile.exists() ) {\\n-            if( sourceFile.lastModified() > target.lastModified() ) {\\n-                return true;\\n+                file.close();\\n+            } catch (Exception ignore) {\\n             }\\n         }\\n-        return false;\\n     }\\n \\n     private void chmod(String permision, File path) {'}}",
      "message_norm": "simplify shared lib extraction.",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java'])",
      "num_files": 1.0
    },
    {
      "index": 1183,
      "vuln_id": "GHSA-8c76-mxv5-w4g8",
      "cwe_id": "{'CWE-79'}",
      "score": 6.8,
      "chain": "{'https://github.com/microweber/microweber/commit/955471c27e671c49e4b012e3b120b004082ac3f7'}",
      "dataset": "osv",
      "summary": "Stored Cross-site Scripting in Microweber Microweber 1.2.11 and prior contains multiple stored cross-site scripting vulnerabilities in Shop's Other Settings, Shop's Autorespond E-mail Settings and Shops' Payments Methods.",
      "published_date": "2022-03-16",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/955471c27e671c49e4b012e3b120b004082ac3f7",
      "commit_sha": "955471c27e671c49e4b012e3b120b004082ac3f7",
      "patch": "SINGLE",
      "chain_ord": "['955471c27e671c49e4b012e3b120b004082ac3f7']",
      "before_first_fix_commit": "{'46e100a1b3e613f3e27b82942b00bdb0e69df4fa'}",
      "last_fix_commit": "955471c27e671c49e4b012e3b120b004082ac3f7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/14/2022, 10:14:14",
      "message": "Update SaveOptionApiController.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 19, 'deletions': 7, 'total': 26}",
      "files": "{'src/MicroweberPackages/Option/Http/Controllers/Api/SaveOptionApiController.php': {'additions': 19, 'deletions': 7, 'changes': 26, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/955471c27e671c49e4b012e3b120b004082ac3f7/src%2FMicroweberPackages%2FOption%2FHttp%2FControllers%2FApi%2FSaveOptionApiController.php', 'patch': \"@@ -6,18 +6,30 @@\\n \\n class SaveOptionApiController\\n {\\n-    public function saveOption(Request $request) {\\n+    public $whitelistedGroupKeys = [\\n+        'website' => [\\n+            'website_head',\\n+            'website_footer'\\n+        ]\\n+    ];\\n+\\n+    public function saveOption(Request $request)\\n+    {\\n \\n         $cleanFromXss = true;\\n         $option = $request->all();\\n \\n-        // Allow for this keys\\n+        // Allow for this keys and groups\\n         if (isset($option['option_key'])) {\\n-            if ($option['option_key'] == 'website_head') {\\n-                $cleanFromXss = false;\\n-            }\\n-            if ($option['option_key'] == 'website_footer') {\\n-                $cleanFromXss = false;\\n+            foreach ($this->whitelistedGroupKeys as $group => $keys) {\\n+                if ($option['option_group'] == $group) {\\n+                    foreach ($keys as $key) {\\n+                        if ($option['option_key'] == $key) {\\n+                            $cleanFromXss = false;\\n+                            break;\\n+                        }\\n+                    }\\n+                }\\n             }\\n         }\"}}",
      "message_norm": "update saveoptionapicontroller.php",
      "language": "it",
      "entities": null,
      "classification_level_1": "POORLY_DOCUMENTED",
      "classification_level_2": "SUBMIT_CENTERED",
      "list_files": "dict_keys(['src/MicroweberPackages/Option/Http/Controllers/Api/SaveOptionApiController.php'])",
      "num_files": 1.0
    },
    {
      "index": 3206,
      "vuln_id": "GHSA-w37f-pvvx-wcwm",
      "cwe_id": "{'CWE-682'}",
      "score": 9.8,
      "chain": "{'https://github.com/moodle/moodle/commit/59b5858da200f63ecb59a9113af2b99ef1496fe5'}",
      "dataset": "osv",
      "summary": "Incorrect Calculation in moodle A flaw was found in moodle where logic used to count failed login attempts could result in the account lockout threshold being bypassed.",
      "published_date": "2022-05-19",
      "chain_len": 1,
      "project": "https://github.com/moodle/moodle",
      "commit_href": "https://github.com/moodle/moodle/commit/59b5858da200f63ecb59a9113af2b99ef1496fe5",
      "commit_sha": "59b5858da200f63ecb59a9113af2b99ef1496fe5",
      "patch": "SINGLE",
      "chain_ord": "['59b5858da200f63ecb59a9113af2b99ef1496fe5']",
      "before_first_fix_commit": "{'a0f47c8bc4d6f5971025de7d63f22475701d2f86'}",
      "last_fix_commit": "59b5858da200f63ecb59a9113af2b99ef1496fe5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/26/2022, 08:52:20",
      "message": "MDL-73736 core_auth: Fix concurrency issue in login_attempt_failed()\n\nThis patch wraps the login_failed_count logic in a resource lock and\nforces a user preferences cache reload. Each thread must wait for the\nlock and must fetch the current count before incrementing it. This\nensures that login_failed_count is correct across threads and that the\nlockout threshold is correctly honoured.\n\nCo-Authored-By: Sujith Haridasan <sujith@moodle.com>",
      "author": "Jake Dallimore",
      "comments": null,
      "stats": "{'additions': 43, 'deletions': 19, 'total': 62}",
      "files": "{'lib/authlib.php': {'additions': 43, 'deletions': 19, 'changes': 62, 'status': 'modified', 'raw_url': 'https://github.com/moodle/moodle/raw/59b5858da200f63ecb59a9113af2b99ef1496fe5/lib%2Fauthlib.php', 'patch': \"@@ -877,6 +877,7 @@ function login_attempt_valid($user) {\\n /**\\n  * To be called after failed user login.\\n  * @param stdClass $user\\n+ * @throws moodle_exception\\n  */\\n function login_attempt_failed($user) {\\n     global $CFG;\\n@@ -888,30 +889,53 @@ function login_attempt_failed($user) {\\n         return;\\n     }\\n \\n-    $count = get_user_preferences('login_failed_count', 0, $user);\\n-    $last = get_user_preferences('login_failed_last', 0, $user);\\n-    $sincescuccess = get_user_preferences('login_failed_count_since_success', $count, $user);\\n-    $sincescuccess = $sincescuccess + 1;\\n-    set_user_preference('login_failed_count_since_success', $sincescuccess, $user);\\n+    // Force user preferences cache reload to ensure the most up-to-date login_failed_count is fetched.\\n+    // This is perhaps overzealous but is the documented way of reloading the cache, as per the test method\\n+    // 'test_check_user_preferences_loaded'.\\n+    unset($user->preference);\\n+\\n+    $resource = 'user:' . $user->id;\\n+    $lockfactory = \\\\core\\\\lock\\\\lock_config::get_lock_factory('core_failed_login_count_lock');\\n+\\n+    // Get a new lock for the resource, waiting for it for a maximum of 10 seconds.\\n+    if ($lock = $lockfactory->get_lock($resource, 10)) {\\n+        try {\\n+            $count = get_user_preferences('login_failed_count', 0, $user);\\n+            $last = get_user_preferences('login_failed_last', 0, $user);\\n+            $sincescuccess = get_user_preferences('login_failed_count_since_success', $count, $user);\\n+            $sincescuccess = $sincescuccess + 1;\\n+            set_user_preference('login_failed_count_since_success', $sincescuccess, $user);\\n+\\n+            if (empty($CFG->lockoutthreshold)) {\\n+                // No threshold means no lockout.\\n+                // Always unlock here, there might be some race conditions or leftovers when switching threshold.\\n+                login_unlock_account($user);\\n+                $lock->release();\\n+                return;\\n+            }\\n \\n-    if (empty($CFG->lockoutthreshold)) {\\n-        // No threshold means no lockout.\\n-        // Always unlock here, there might be some race conditions or leftovers when switching threshold.\\n-        login_unlock_account($user);\\n-        return;\\n-    }\\n+            if (!empty($CFG->lockoutwindow) and time() - $last > $CFG->lockoutwindow) {\\n+                $count = 0;\\n+            }\\n \\n-    if (!empty($CFG->lockoutwindow) and time() - $last > $CFG->lockoutwindow) {\\n-        $count = 0;\\n-    }\\n+            $count = $count + 1;\\n \\n-    $count = $count+1;\\n+            set_user_preference('login_failed_count', $count, $user);\\n+            set_user_preference('login_failed_last', time(), $user);\\n \\n-    set_user_preference('login_failed_count', $count, $user);\\n-    set_user_preference('login_failed_last', time(), $user);\\n+            if ($count >= $CFG->lockoutthreshold) {\\n+                login_lock_account($user);\\n+            }\\n \\n-    if ($count >= $CFG->lockoutthreshold) {\\n-        login_lock_account($user);\\n+            // Release locks when we're done.\\n+            $lock->release();\\n+        } catch (Exception $e) {\\n+            // Always release the lock on a failure.\\n+            $lock->release();\\n+        }\\n+    } else {\\n+        // We did not get access to the resource in time, give up.\\n+        throw new moodle_exception('locktimeout');\\n     }\\n }\"}}",
      "message_norm": "mdl-73736 core_auth: fix concurrency issue in login_attempt_failed()\n\nthis patch wraps the login_failed_count logic in a resource lock and\nforces a user preferences cache reload. each thread must wait for the\nlock and must fetch the current count before incrementing it. this\nensures that login_failed_count is correct across threads and that the\nlockout threshold is correctly honoured.\n\nco-authored-by: sujith haridasan <sujith@moodle.com>",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('ensures', 'ACTION', ''), ('sujith@moodle.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/authlib.php'])",
      "num_files": 1.0
    },
    {
      "index": 1415,
      "vuln_id": "GHSA-9px9-73fg-3fqp",
      "cwe_id": "{'CWE-476'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf', 'https://github.com/tensorflow/tensorflow/commit/0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in Grappler's `IsConstant` ### Impact\nUnder certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):\n\nFirst, during [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:\n\n```cc\n  NodeDef* mul_left_child = node_map_->GetNode(node->input(0));\n  NodeDef* mul_right_child = node_map_->GetNode(node->input(1));\n  // One child must be constant, and the second must be Conv op.\n  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\n  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);\n```\n\nIf a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.\n\nWe have a similar issue during [`IsIdentityConsumingSwitch`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/mutable_graph_view.cc#L59-L74):\n\n```cc\n  NodeDef* input_node = graph.GetNode(tensor_id.node());\n  return IsSwitch(*input_node);\n```\n\n### Patches\nWe have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https://github.com/tensorflow/tensorflow/commit/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf",
      "commit_sha": "045deec1cbdebb27d817008ad5df94d96a08b1bf",
      "patch": "MULTI",
      "chain_ord": "['0a365c029e437be0349c31f8d4c9926b69fa3fa1', '045deec1cbdebb27d817008ad5df94d96a08b1bf']",
      "before_first_fix_commit": "{'0a365c029e437be0349c31f8d4c9926b69fa3fa1'}",
      "last_fix_commit": "045deec1cbdebb27d817008ad5df94d96a08b1bf",
      "chain_ord_pos": 2.0,
      "commit_datetime": "11/13/2021, 18:12:22",
      "message": "Prevent null pointer dereference in `mutable_graph_view`\n\nPiperOrigin-RevId: 409684472\nChange-Id: I577eb9d9ac470fcec0501423171e739a4ec0cb5c",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/grappler/mutable_graph_view.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/045deec1cbdebb27d817008ad5df94d96a08b1bf/tensorflow%2Fcore%2Fgrappler%2Fmutable_graph_view.cc', 'patch': '@@ -68,6 +68,9 @@ bool IsIdentityConsumingSwitch(const MutableGraphView& graph,\\n     }\\n \\n     NodeDef* input_node = graph.GetNode(tensor_id.node());\\n+    if (input_node == nullptr) {\\n+      return false;\\n+    }\\n     return IsSwitch(*input_node);\\n   }\\n   return false;'}}",
      "message_norm": "prevent null pointer dereference in `mutable_graph_view`\n\npiperorigin-revid: 409684472\nchange-id: i577eb9d9ac470fcec0501423171e739a4ec0cb5c",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('409684472', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/grappler/mutable_graph_view.cc'])",
      "num_files": 1.0
    },
    {
      "index": 144,
      "vuln_id": "GHSA-2v7p-f4qm-r5pc",
      "cwe_id": "{'CWE-89'}",
      "score": 7.5,
      "chain": "{'https://github.com/pimcore/pimcore/commit/523a735ab94f004459b84ffdfd3db784586bbd82'}",
      "dataset": "osv",
      "summary": "SQL Injection found in Pimcore Pimcore is an open source data & experience management platform. A SQL injection was discovered in GridHelperService.php in GitHub repository pimcore/pimcore prior to 10.3.6.",
      "published_date": "2022-04-23",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/523a735ab94f004459b84ffdfd3db784586bbd82",
      "commit_sha": "523a735ab94f004459b84ffdfd3db784586bbd82",
      "patch": "SINGLE",
      "chain_ord": "['523a735ab94f004459b84ffdfd3db784586bbd82']",
      "before_first_fix_commit": "{'f29d3b2f305865c6e9884c460fb35bcf21bcf29f'}",
      "last_fix_commit": "523a735ab94f004459b84ffdfd3db784586bbd82",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/22/2022, 09:05:32",
      "message": "Fixed column quoting in GridHelperService",
      "author": "Bernhard Rusch",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 2, 'total': 7}",
      "files": "{'bundles/AdminBundle/Helper/GridHelperService.php': {'additions': 5, 'deletions': 2, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/523a735ab94f004459b84ffdfd3db784586bbd82/bundles%2FAdminBundle%2FHelper%2FGridHelperService.php', 'patch': \"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr\\n                         } elseif ($filterField == 'id') {\\n                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\\n                         } else {\\n+                            $filterField = $db->quoteIdentifier('o_' . $filterField);\\n                             if ($filter['type'] == 'date' && $operator == '=') {\\n                                 //if the equal operator is chosen with the date type, condition has to be changed\\n                                 $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n                             } else {\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\\n+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\\n                             }\\n                         }\\n                     }\\n@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)\\n \\n                 if ($filterField == 'fullpath') {\\n                     $filterField = 'CONCAT(path,filename)';\\n+                }else {\\n+                    $filterField = $db->quoteIdentifier($filterField);\\n                 }\\n \\n                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {\"}}",
      "message_norm": "fixed column quoting in gridhelperservice",
      "language": "en",
      "entities": "[('fixed', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Helper/GridHelperService.php'])",
      "num_files": 1.0
    },
    {
      "index": 1058,
      "vuln_id": "GHSA-7q4h-pj78-j7vg",
      "cwe_id": "{'CWE-400', 'CWE-918'}",
      "score": 7.5,
      "chain": "{'https://github.com/apache/cxf/commit/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https://github.com/apache/cxf/commit/40503a53914758759894f704bbf139ae89ace286'}",
      "dataset": "osv",
      "summary": "Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
      "published_date": "2021-05-13",
      "chain_len": 2,
      "project": "https://github.com/apache/cxf",
      "commit_href": "https://github.com/apache/cxf/commit/aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "commit_sha": "aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "patch": "MULTI",
      "chain_ord": "['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
      "before_first_fix_commit": "{'40503a53914758759894f704bbf139ae89ace286'}",
      "last_fix_commit": "aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "chain_ord_pos": 2.0,
      "commit_datetime": "01/06/2021, 10:38:21",
      "message": "Make sure both a request + request_uri can't be specified",
      "author": "Colm O hEigeartaigh",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 1, 'total': 12}",
      "files": "{'rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/JwtRequestCodeFilter.java': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/apache/cxf/raw/aa789c5c4686597a7bdef2443909ab491fc2bc04/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -21,9 +21,11 @@\\n import java.security.cert.X509Certificate;\\n import java.util.List;\\n import java.util.Map;\\n+import java.util.logging.Logger;\\n \\n import javax.ws.rs.core.MultivaluedMap;\\n \\n+import org.apache.cxf.common.logging.LogUtils;\\n import org.apache.cxf.helpers.CastUtils;\\n import org.apache.cxf.jaxrs.client.WebClient;\\n import org.apache.cxf.jaxrs.impl.MetadataMap;\\n@@ -42,23 +44,31 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    protected static final Logger LOG = LogUtils.getL7dLogger(JwtRequestCodeFilter.class);\\n     private static final String REQUEST_URI_CONTENT_TYPE = \"application/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n+\\n     private boolean verifyWithClientCertificates;\\n     private String issuer;\\n     private JsonMapObjectReaderWriter jsonHandler = new JsonMapObjectReaderWriter();\\n+\\n     @Override\\n     public MultivaluedMap<String, String> process(MultivaluedMap<String, String> params,\\n                                                   UserSubject endUser,\\n                                                   Client client) {\\n         String requestToken = params.getFirst(REQUEST_PARAM);\\n+        String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n+\\n         if (requestToken == null) {\\n-            String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n                 requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n+        } else if (requestUri != null) {\\n+            LOG.warning(\"It is not valid to specify both a request and request_uri value\");\\n+            throw new SecurityException();\\n         }\\n+\\n         if (requestToken != null) {\\n             JweDecryptionProvider theDecryptor = super.getInitializedDecryptionProvider(client.getClientSecret());\\n             JwsSignatureVerifier theSigVerifier = getInitializedSigVerifier(client);'}}",
      "message_norm": "make sure both a request + request_uri can't be specified",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/JwtRequestCodeFilter.java'])",
      "num_files": 1.0
    },
    {
      "index": 1497,
      "vuln_id": "GHSA-c697-r227-pq6h",
      "cwe_id": "{'CWE-434'}",
      "score": 7.8,
      "chain": "{'https://github.com/pimcore/pimcore/commit/35d1853baf64d6a1d90fd8803e52439da53a3911'}",
      "dataset": "osv",
      "summary": "Unrestricted Upload of File with Dangerous Type in pimcore Unrestricted Upload of File with Dangerous Type in Packagist pimcore/pimcore",
      "published_date": "2022-01-21",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/35d1853baf64d6a1d90fd8803e52439da53a3911",
      "commit_sha": "35d1853baf64d6a1d90fd8803e52439da53a3911",
      "patch": "SINGLE",
      "chain_ord": "['35d1853baf64d6a1d90fd8803e52439da53a3911']",
      "before_first_fix_commit": "{'d8377fc752dc3a42ca72cb49650481191f14ec63'}",
      "last_fix_commit": "35d1853baf64d6a1d90fd8803e52439da53a3911",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/17/2022, 15:52:05",
      "message": "[Settings] Validate SVG uploads for branding",
      "author": "Bernhard Rusch",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'bundles/AdminBundle/Controller/Admin/SettingsController.php': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/35d1853baf64d6a1d90fd8803e52439da53a3911/bundles%2FAdminBundle%2FController%2FAdmin%2FSettingsController.php', 'patch': \"@@ -109,6 +109,12 @@ public function uploadCustomLogoAction(Request $request)\\n             throw new \\\\Exception('Unsupported file format');\\n         }\\n \\n+        if($fileExt === 'svg') {\\n+            if(strpos(file_get_contents($_FILES['Filedata']['tmp_name']), '<script')) {\\n+                throw new \\\\Exception('Scripts in SVG files are not supported');\\n+            }\\n+        }\\n+\\n         $storage = Tool\\\\Storage::get('admin');\\n         $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($_FILES['Filedata']['tmp_name'], 'rb'));\"}}",
      "message_norm": "[settings] validate svg uploads for branding",
      "language": "sv",
      "entities": "[('validate', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Controller/Admin/SettingsController.php'])",
      "num_files": 1.0
    },
    {
      "index": 903,
      "vuln_id": "GHSA-6vqp-h455-42mr",
      "cwe_id": "{'CWE-789'}",
      "score": 5.5,
      "chain": "{'https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f'}",
      "dataset": "osv",
      "summary": "Uncontrolled Memory Allocation in Apache PDFBox A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
      "published_date": "2021-05-13",
      "chain_len": 1,
      "project": "https://github.com/apache/pdfbox",
      "commit_href": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
      "commit_sha": "8c47be1011c11dc47300faecffd8ab32fba3646f",
      "patch": "SINGLE",
      "chain_ord": "['8c47be1011c11dc47300faecffd8ab32fba3646f']",
      "before_first_fix_commit": "{'ef53b45f111c4e391faf1c331c4e81a21e24c0b8'}",
      "last_fix_commit": "8c47be1011c11dc47300faecffd8ab32fba3646f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/07/2021, 13:18:31",
      "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
      "author": "Andreas Lehmk\u00fchler",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/apache/pdfbox/raw/8c47be1011c11dc47300faecffd8ab32fba3646f/pdfbox%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fpdfbox%2Fpdfparser%2FPDFXrefStreamParser.java', 'patch': '@@ -19,6 +19,7 @@\\n import java.io.IOException;\\n import java.util.Arrays;\\n import java.util.Iterator;\\n+import java.util.NoSuchElementException;\\n \\n import org.apache.pdfbox.cos.COSArray;\\n import org.apache.pdfbox.cos.COSBase;\\n@@ -212,6 +213,10 @@ public boolean hasNext()\\n         @Override\\n         public Long next()\\n         {\\n+            if (currentNumber >= maxValue)\\n+            {\\n+                throw new NoSuchElementException();\\n+            }\\n             if (currentNumber < currentEnd)\\n             {\\n                 return currentNumber++;'}}",
      "message_norm": "pdfbox-5112: sonarcube fix, throw nosuchelementexception if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
      "language": "en",
      "entities": "[('sonarcube', 'DETECTION', ''), ('https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java'])",
      "num_files": 1.0
    },
    {
      "index": 2876,
      "vuln_id": "GHSA-r659-8xfp-j327",
      "cwe_id": "{'CWE-1321', 'CWE-915'}",
      "score": 9.8,
      "chain": "{'https://github.com/Vincit/objection.js/commit/46b842a6bc897198b83f41ac85c92864b991d7e9', 'https://github.com/vincit/objection.js/commit/b41aab8dcd78f426f7468dcda541a7aca18a66a6'}",
      "dataset": "osv",
      "summary": "objection.js Prototype Pollution vulnerability before v2.2.16 objection.js prior to version 2.2.16 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). This issue is patched in version 2.2.16.",
      "published_date": "2021-09-07",
      "chain_len": 2,
      "project": "https://github.com/Vincit/objection.js",
      "commit_href": "https://github.com/Vincit/objection.js/commit/46b842a6bc897198b83f41ac85c92864b991d7e9",
      "commit_sha": "46b842a6bc897198b83f41ac85c92864b991d7e9",
      "patch": "MULTI",
      "chain_ord": "['b41aab8dcd78f426f7468dcda541a7aca18a66a6', '46b842a6bc897198b83f41ac85c92864b991d7e9']",
      "before_first_fix_commit": "{'260b284a1cbfb044991894c5a3cf3dedc8ce7267'}",
      "last_fix_commit": "46b842a6bc897198b83f41ac85c92864b991d7e9",
      "chain_ord_pos": 2.0,
      "commit_datetime": "09/03/2021, 09:24:20",
      "message": "Security Fix for Prototype Pollution\n\nFix prototype pollution when path components are not strings",
      "author": "ready-research",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 1, 'total': 8}",
      "files": "{'lib/utils/objectUtils.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/Vincit/objection.js/raw/46b842a6bc897198b83f41ac85c92864b991d7e9/lib%2Futils%2FobjectUtils.js', 'patch': \"@@ -225,6 +225,9 @@ function set(obj, path, value) {\\n \\n   for (let i = 0, l = path.length - 1; i < l; ++i) {\\n     const key = path[i];\\n+    if (key === '__proto__') {\\n+      return false;\\n+    }\\n     let child = obj[key];\\n \\n     if (!isObject(child)) {\\n@@ -252,7 +255,10 @@ function set(obj, path, value) {\\n function zipObject(keys, values) {\\n   const out = {};\\n \\n-  for (let i = 0, l = keys.length; i < l; ++i) {\\n+  for (let i = 0, l = keys.length; i < l; ++i) {    \\n+    if (keys[i] === '__proto__') {\\n+      return false;\\n+    }\\n     out[keys[i]] = values[i];\\n   }\"}}",
      "message_norm": "security fix for prototype pollution\n\nfix prototype pollution when path components are not strings",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/utils/objectUtils.js'])",
      "num_files": 1.0
    },
    {
      "index": 513,
      "vuln_id": "GHSA-4w97-57v2-3w44",
      "cwe_id": "{'CWE-697'}",
      "score": 8.6,
      "chain": "{'https://github.com/simpleledger/slp-validate/commit/cde95c0c6470dceb4f023cd462f904135ebd73e7'}",
      "dataset": "osv",
      "summary": "False-negative validation results in MINT transactions with invalid baton ### Impact\nUsers could experience false-negative validation outcomes for [MINT](https://github.com/simpleledger/slp-specifications/blob/master/slp-token-type-1.md#mint---extended-minting-transaction) transaction operations.  A poorly implemented SLP wallet could allow spending of the affected tokens which would result in the destruction of a user's minting baton.\n\n### Patches\nnpm package [slp-validate](https://www.npmjs.com/package/slp-validate) has been patched and published as version 1.2.1.\n\n### Workarounds\nUpgrade to slp-validate 1.2.1.\n\n### References\n* slp-validate [commit](https://github.com/simpleledger/slp-validate/commit/cde95c0c6470dceb4f023cd462f904135ebd73e7)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [slp-validate](https://github.com/simpleledger/slp-validate/issues)",
      "published_date": "2020-05-12",
      "chain_len": 1,
      "project": "https://github.com/simpleledger/slp-validate",
      "commit_href": "https://github.com/simpleledger/slp-validate/commit/cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "commit_sha": "cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "patch": "SINGLE",
      "chain_ord": "['cde95c0c6470dceb4f023cd462f904135ebd73e7']",
      "before_first_fix_commit": "{'4ca5ea8556bfacdaa6c81f0c3151a23e728cb8b6'}",
      "last_fix_commit": "cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/29/2020, 13:52:56",
      "message": "fix false negative case for MINT transactions\n\nSee the newly added unit test case for this issue.\nCurrently there are 151 unit tests.",
      "author": "James Cramer",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 6, 'total': 16}",
      "files": "{'lib/validation.ts': {'additions': 10, 'deletions': 6, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/simpleledger/slp-validate.js/raw/cde95c0c6470dceb4f023cd462f904135ebd73e7/lib%2Fvalidation.ts', 'patch': '@@ -408,10 +408,10 @@ export class ValidatorType1 {\\n                     }\\n                 } catch (_) { }\\n             }\\n-            if (validation.parents.length !== 1) {\\n+            if (validation.parents.length < 1) {\\n                 validation.validity = false;\\n                 validation.waiting = false;\\n-                validation.invalidReason = \"MINT transaction must have 1 valid baton parent.\";\\n+                validation.invalidReason = \"MINT transaction must have at least 1 candidate baton parent input.\";\\n                 return validation.validity!;\\n             }\\n         } else if (slpmsg.transactionType === SlpTransactionType.SEND) {\\n@@ -468,10 +468,14 @@ export class ValidatorType1 {\\n         // Set validity validation-cache for parents, and handle MINT condition with no valid input\\n         // we don\\'t need to check proper token id since we only added parents with same ID in above steps.\\n         const parentTxids = [...new Set(validation.parents.map(p => p.txid))];\\n-        for (let i = 0; i < parentTxids.length; i++) {\\n-            const valid = await this.isValidSlpTxid({ txid: parentTxids[i] });\\n-            validation.parents.filter(p => p.txid === parentTxids[i]).map(p => p.valid = valid);\\n-            if (validation.details!.transactionType === SlpTransactionType.MINT && !valid) {\\n+        for (const id of parentTxids) {\\n+            const valid = await this.isValidSlpTxid({ txid: id });\\n+            validation.parents.filter(p => p.txid === id).map(p => p.valid = valid);\\n+        }\\n+\\n+        // Check MINT for exactly 1 valid MINT baton\\n+        if (validation.details!.transactionType === SlpTransactionType.MINT) {\\n+            if (validation.parents.filter(p => p.valid && p.inputQty === null).length !== 1) {\\n                 validation.validity = false;\\n                 validation.waiting = false;\\n                 validation.invalidReason = \"MINT transaction with invalid baton parent.\";'}}",
      "message_norm": "fix false negative case for mint transactions\n\nsee the newly added unit test case for this issue.\ncurrently there are 151 unit tests.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('added', 'ACTION', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/validation.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2075,
      "vuln_id": "GHSA-hhvc-g5hv-48c6",
      "cwe_id": "{'CWE-471'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7'}",
      "dataset": "osv",
      "summary": "Write to immutable memory region in TensorFlow ### Impact\nThe `tf.raw_ops.ImmutableConst` operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:\n\n```python\n>>> import tensorflow as tf\n>>> with open('/tmp/test.txt','w') as f: f.write('a'*128)\n>>> tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,\n                              memory_region_name='/tmp/test.txt')\n```\n\nIf the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault.\n\nThis is because the alocator used to return the buffer data is not marked as returning an opaque handle since the [needed virtual method](https://github.com/tensorflow/tensorflow/blob/c1e1fc899ad5f8c725dcbb6470069890b5060bc7/tensorflow/core/framework/typed_allocator.h#L78-L85) is [not overriden](https://github.com/tensorflow/tensorflow/blob/acdf3c04fcfa767ae8d109b9e1f727ef050dba4d/tensorflow/core/kernels/immutable_constant_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [c1e1fc899ad5f8c725dcbb6470069890b5060bc7](https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2020-12-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
      "commit_sha": "c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
      "patch": "SINGLE",
      "chain_ord": "['c1e1fc899ad5f8c725dcbb6470069890b5060bc7']",
      "before_first_fix_commit": "{'acdf3c04fcfa767ae8d109b9e1f727ef050dba4d'}",
      "last_fix_commit": "c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/05/2020, 01:06:23",
      "message": "Mark `MemmappedTensorAllocator` as returning opaque handle.\n\nThis allocator is used for `ImmutableConstantOp` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nFor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. This means writing to the buffer. However, in our case, the buffer is immutable and already contains the tensor data. Hence, writing to it is both destructive and causes a crash.\n\nPiperOrigin-RevId: 345786451\nChange-Id: I46369c50fa60b3431709ffe068a728d3061f49c4",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'tensorflow/core/kernels/immutable_constant_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c1e1fc899ad5f8c725dcbb6470069890b5060bc7/tensorflow%2Fcore%2Fkernels%2Fimmutable_constant_op.cc', 'patch': \"@@ -62,6 +62,12 @@ class MemmappedTensorAllocator : public Allocator {\\n \\n   void set_delete_on_deallocate() { delete_on_deallocate_ = true; }\\n \\n+  // Make sure tensors or complex types (strings, variants, resources) don't get\\n+  // their constructor called via a placement new since that would require\\n+  // writing to immutable data.\\n+  // See also: tensorflow/core/framework/typed_allocator.h\\n+  bool AllocatesOpaqueHandle() const override { return true; }\\n+\\n  private:\\n   std::unique_ptr<ReadOnlyMemoryRegion> memory_region_;\\n   // If there is an error during allocation we keep it in this status.\"}}",
      "message_norm": "mark `memmappedtensorallocator` as returning opaque handle.\n\nthis allocator is used for `immutableconstantop` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nfor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. this means writing to the buffer. however, in our case, the buffer is immutable and already contains the tensor data. hence, writing to it is both destructive and causes a crash.\n\npiperorigin-revid: 345786451\nchange-id: i46369c50fa60b3431709ffe068a728d3061f49c4",
      "language": "en",
      "entities": "[('initialize', 'SECWORD', ''), ('345786451', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/immutable_constant_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2750,
      "vuln_id": "GHSA-qgmg-gppg-76g5",
      "cwe_id": "{'CWE-1333'}",
      "score": 5.3,
      "chain": "{'https://github.com/validatorjs/validator.js/commit/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1'}",
      "dataset": "osv",
      "summary": "Inefficient Regular Expression Complexity in validator.js validator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity",
      "published_date": "2021-11-03",
      "chain_len": 1,
      "project": "https://github.com/validatorjs/validator.js",
      "commit_href": "https://github.com/validatorjs/validator.js/commit/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
      "commit_sha": "496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
      "patch": "SINGLE",
      "chain_ord": "['496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1']",
      "before_first_fix_commit": "{'45901ec4f1276d192da6d0eb10a60b64722356c1'}",
      "last_fix_commit": "496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/01/2021, 20:30:39",
      "message": "fix(rtrim): remove regex to prevent ReDOS attack (#1738)",
      "author": "Sarhan Aissi",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 3, 'total': 15}",
      "files": "{'src/lib/rtrim.js': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/validatorjs/validator.js/raw/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1/src%2Flib%2Frtrim.js', 'patch': \"@@ -2,7 +2,16 @@ import assertString from './util/assertString';\\n \\n export default function rtrim(str, chars) {\\n   assertString(str);\\n-  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\\n-  const pattern = chars ? new RegExp(`[${chars.replace(/[.*+?^${}()|[\\\\]\\\\\\\\]/g, '\\\\\\\\$&')}]+$`, 'g') : /(\\\\s)+$/g;\\n-  return str.replace(pattern, '');\\n+  if (chars) {\\n+    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\\n+    const pattern = new RegExp(`[${chars.replace(/[.*+?^${}()|[\\\\]\\\\\\\\]/g, '\\\\\\\\$&')}]+$`, 'g');\\n+    return str.replace(pattern, '');\\n+  }\\n+  // Use a faster and more safe than regex trim method https://blog.stevenlevithan.com/archives/faster-trim-javascript\\n+  let strIndex = str.length - 1;\\n+  while (/\\\\s/.test(str.charAt(strIndex))) {\\n+    strIndex -= 1;\\n+  }\\n+\\n+  return str.slice(0, strIndex + 1);\\n }\"}}",
      "message_norm": "fix(rtrim): remove regex to prevent redos attack (#1738)",
      "language": "en",
      "entities": "[('fix(rtrim', 'ACTION', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('redos', 'SECWORD', ''), ('attack', 'FLAW', ''), ('#1738', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib/rtrim.js'])",
      "num_files": 1.0
    },
    {
      "index": 1989,
      "vuln_id": "GHSA-h4pc-gx2w-f2xv",
      "cwe_id": "{'CWE-125'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412'}",
      "dataset": "osv",
      "summary": "Heap OOB read in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https://github.com/tensorflow/tensorflow/blob/c59c37e7b2d563967da813fa50fe20b21f4da683/tensorflow/lite/kernels/split_v.cc#L99):\n\n```cc\nconst int input_size = SizeOfDimension(input, axis_value);\n``` \n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:\n\n```cc\ninline int SizeOfDimension(const TfLiteTensor* t, int dim) {\n  return t->dims->data[dim];\n}\n```\n  \n### Patches \nWe have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
      "commit_sha": "ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
      "patch": "SINGLE",
      "chain_ord": "['ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412']",
      "before_first_fix_commit": "{'c59c37e7b2d563967da813fa50fe20b21f4da683'}",
      "last_fix_commit": "ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/29/2021, 01:12:15",
      "message": "Prevent array OOB read/write\n\nPiperOrigin-RevId: 371026165\nChange-Id: I26ac6372c87246e03c7eb8c94e84c84d86054b36",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'tensorflow/lite/kernels/split_v.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412/tensorflow%2Flite%2Fkernels%2Fsplit_v.cc', 'patch': '@@ -96,6 +96,8 @@ TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,\\n     }\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n   const int input_size = SizeOfDimension(input, axis_value);\\n \\n   if (minus_one_index != -1) {'}}",
      "message_norm": "prevent array oob read/write\n\npiperorigin-revid: 371026165\nchange-id: i26ac6372c87246e03c7eb8c94e84c84d86054b36",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('371026165', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/split_v.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3133,
      "vuln_id": "GHSA-vjj6-5m9f-wqjw",
      "cwe_id": "{'CWE-476'}",
      "score": 7.5,
      "chain": "{'https://github.com/hyperledger/fabric/pull/2838/commits/ebf94b10ecc86d3a91619b98befc52277b1e3474'}",
      "dataset": "osv",
      "summary": "NULL Pointer Dereference in HyperLedger Fabric A vulnerability has been detected in HyperLedger Fabric v1.4.0, v2.0.0, v2.1.0. This bug can be leveraged by constructing a message whose payload is nil and sending this message with the method 'forwardToLeader'. This bug has been admitted and fixed by the developers of Fabric. If leveraged, any leader node will crash.",
      "published_date": "2022-05-25",
      "chain_len": 1,
      "project": "https://github.com/hyperledger/fabric",
      "commit_href": "https://github.com/hyperledger/fabric/pull/2838/commits/ebf94b10ecc86d3a91619b98befc52277b1e3474",
      "commit_sha": "ebf94b10ecc86d3a91619b98befc52277b1e3474",
      "patch": "SINGLE",
      "chain_ord": "['ebf94b10ecc86d3a91619b98befc52277b1e3474']",
      "before_first_fix_commit": "{'bb8bada7b864d4135aafe1785674be31d6cc78cb'}",
      "last_fix_commit": "ebf94b10ecc86d3a91619b98befc52277b1e3474",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/18/2021, 14:18:10",
      "message": "FAB18529 added nil check in channel header parsing\n\nFuzz testing has reported SEGV while sending incomplete/null\nmessage request to orderer.\n\nSigned-off-by: Parameswaran Selvam <parselva@in.ibm.com>",
      "author": "Parameswaran Selvam",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'protoutil/commonutils.go': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/hyperledger/fabric/raw/ebf94b10ecc86d3a91619b98befc52277b1e3474/protoutil%2Fcommonutils.go', 'patch': '@@ -212,6 +212,10 @@ func IsConfigBlock(block *cb.Block) bool {\\n \\n // ChannelHeader returns the *cb.ChannelHeader for a given *cb.Envelope.\\n func ChannelHeader(env *cb.Envelope) (*cb.ChannelHeader, error) {\\n+\\tif env == nil {\\n+\\t\\treturn nil, errors.New(\"Invalid envelope payload. can\\'t be nil\")\\n+\\t}\\n+\\n \\tenvPayload, err := UnmarshalPayload(env.Payload)\\n \\tif err != nil {\\n \\t\\treturn nil, err'}}",
      "message_norm": "fab18529 added nil check in channel header parsing\n\nfuzz testing has reported segv while sending incomplete/null\nmessage request to orderer.\n\nsigned-off-by: parameswaran selvam <parselva@in.ibm.com>",
      "language": "en",
      "entities": "[('fab18529', 'SHA', 'generic_sha'), ('added', 'ACTION', ''), ('fuzz', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['protoutil/commonutils.go'])",
      "num_files": 1.0
    },
    {
      "index": 2304,
      "vuln_id": "GHSA-jv6v-fvvx-4932",
      "cwe_id": "{'CWE-610', 'CWE-73'}",
      "score": 6.2,
      "chain": "{'https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc'}",
      "dataset": "osv",
      "summary": "Arbitrary File Deletion vulnerability in OctoberCMS ### Impact\nAn attacker can exploit this vulnerability to delete arbitrary local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission.\n\n### Patches\nIssue has been patched in Build 466 (v1.0.466).\n\n### Workarounds\nApply https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc to your installation manually if unable to upgrade to Build 466.\n\n### References\nReported by [Sivanesh Ashok](https://stazot.com/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1241\" alt=\"Screen Shot 2020-03-31 at 12 16 53 PM\" src=\"https://user-images.githubusercontent.com/7253840/78060872-89354d00-7349-11ea-8c2b-5881b0a50736.png\">",
      "published_date": "2020-06-03",
      "chain_len": 1,
      "project": "https://github.com/octobercms/october",
      "commit_href": "https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
      "commit_sha": "2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
      "patch": "SINGLE",
      "chain_ord": "['2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc']",
      "before_first_fix_commit": "{'a9b4a5b2c77afe5ad974455bec69da620b443a5d'}",
      "last_fix_commit": "2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/31/2020, 09:37:31",
      "message": "Improve asset file path handling",
      "author": "Luke Towers",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 1, 'total': 9}",
      "files": "{'modules/cms/classes/Asset.php': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/octobercms/october/raw/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc/modules%2Fcms%2Fclasses%2FAsset.php', 'patch': \"@@ -285,7 +285,14 @@ public function getFilePath($fileName = null)\\n             $fileName = $this->fileName;\\n         }\\n \\n-        return $this->theme->getPath().'/'.$this->dirName.'/'.$fileName;\\n+        // Limit paths to those under the assets directory\\n+        $directory = $this->theme->getPath() . '/' . $this->dirName . '/';\\n+        $path = realpath($directory . $fileName);\\n+        if (!starts_with($path, $directory)) {\\n+            return false;\\n+        }\\n+\\n+        return $path;\\n     }\\n \\n     /**\"}}",
      "message_norm": "improve asset file path handling",
      "language": "en",
      "entities": "[('improve', 'ACTION', ''), ('asset', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/cms/classes/Asset.php'])",
      "num_files": 1.0
    },
    {
      "index": 791,
      "vuln_id": "GHSA-68wm-pfjf-wqp6",
      "cwe_id": "{'CWE-287'}",
      "score": 10.0,
      "chain": "{'https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda'}",
      "dataset": "osv",
      "summary": "Authentication bypassed with malformed request URI on nginx ### Impact\nThis affects uses who are using nginx ngx_http_auth_request_module with Authelia, it allows a malicious individual who crafts a malformed HTTP request to bypass the authentication mechanism. It additionally could theoretically affect other proxy servers, but all of the ones we officially support except nginx do not allow malformed URI paths.\n\n### Patches\nThe problem is rectified entirely in v4.29.3. As this patch is relatively straightforward we can back port this to any version upon request. Alternatively we are supplying a git patch to 4.25.1 which should be relatively straightforward to apply to any version, the git patches for specific versions can be found below.\n\n<details><summary>Patch for 4.25.1:</summary><p>\n\n```patch\nFrom ca22f3d2c44ca7bef043ffbeeb06d6659c1d550f Mon Sep 17 00:00:00 2001\nFrom: James Elliott <james-d-elliott@users.noreply.github.com>\nDate: Wed, 19 May 2021 12:10:13 +1000\nSubject: [PATCH] fix(handlers): verify returns 200 on malformed request\n\nThis is a git patch for commit at tag v4.25.1 to address a potential method to bypass authentication in proxies that forward malformed information to Authelia in the forward auth process. Instead of returning a 200 this ensures that Authelia returns a 401 when this occurs.\n---\n internal/handlers/handler_verify.go | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/internal/handlers/handler_verify.go b/internal/handlers/handler_verify.go\nindex 65c064ce..4dd9702d 100644\n--- a/internal/handlers/handler_verify.go\n+++ b/internal/handlers/handler_verify.go\n@@ -396,7 +396,9 @@ func VerifyGet(cfg schema.AuthenticationBackendConfiguration) middlewares.Reques\n \t\ttargetURL, err := getOriginalURL(ctx)\n \n \t\tif err != nil {\n-\t\t\tctx.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err), operationFailedMessage)\n+\t\t\tctx.Logger.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err))\n+\t\t\tctx.ReplyUnauthorized()\n+\n \t\t\treturn\n \t\t}\n \n-- \n2.31.1\n```\n\n</p></details>\n\n### Workarounds\nThe most relevant workaround is upgrading. **If you need assistance with an upgrade please contact us on [Matrix](https://riot.im/app/#/room/#authelia:matrix.org) or [Discord](https://discord.authelia.com).** Please just let us know you're needing help upgrading to above 4.29.2. \n\nYou can add an block which fails requests that contains a malformed URI in the internal location block. We have crafted one that should work in most instances, it basically checks no chars that are required to be URL-encoded for either the path or the query are in the URI. Basically this regex checks that the characters between the square braces are the only characters in the $request_uri header, if they exist, it returns a HTTP 401 status code. The characters in the regex match are tested to not cause a parsing error that would result in a failure, however they are not exhaustive since query strings seem to not always conform to the RFC.\n\n<details><summary>authelia.conf:</summary><p>\n\n```nginx\nlocation /authelia {\n    internal;\n    # **IMPORTANT**\n    # This block rejects requests with a 401 which contain characters that are unable to be parsed.\n    # It is necessary for security prior to v4.29.3 due to the fact we returned an invalid code in the event of a parser error.\n    # You may comment this section if you're using Authelia v4.29.3 or above. We strongly recommend upgrading.\n    # RFC3986: http://tools.ietf.org/html/rfc3986\n    # Commentary on RFC regarding Query Strings: https://www.456bereastreet.com/archive/201008/what_characters_are_allowed_unencoded_in_query_strings/\n    if ($request_uri ~ [^a-zA-Z0-9_+-=\\!@$%&*?~.:#'\\;\\(\\)\\[\\]]) {\n        return 401;\n    }\n\n    # Include the remainder of the block here. \n}\n````\n\n</p></details>\n\n### Discovery\n\nThis issue was discovered by:\n\nSiemens Energy\nCybersecurity Red Team\n\n- Silas Francisco\n- Ricardo Pesqueira\n\n\n### Identifying active exploitation of the vulnerability\n\nThe following regex should match log entries that are an indication of the vulnerability being exploited:\n```regex\nlevel=error msg=\"Unable to parse target URL: Unable to parse URL (extracted from X-Original-URL header)?.*?: parse.*?net/url:.*github\\.com/authelia/authelia/internal/handlers/handler_verify\\.go\n```\n\nExample log entry ***with*** X-Original-URL configured:\n```log\ntime=\"2021-05-21T16:31:15+10:00\" level=error msg=\"Unable to parse target URL: Unable to parse URL extracted from X-Original-URL header: parse \\\"https://example.com/\": net/url: invalid control character in URL\" method=GET path=/api/verify remote_ip=192.168.1.10 stack=\"github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\\nruntime/asm_amd64.s:1371                                                 goexit\"\n```\n\nExample log entry ***without*** X-Original-URL configured:\n```log\ntime=\"2021-05-21T16:30:17+10:00\" level=error msg=\"Unable to parse target URL: Unable to parse URL https://example.com/: parse \\\"https://example.com/\": net/url: invalid control character in URL\" method=GET path=/api/verify remote_ip=192.168.1.10 stack=\"github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\\nruntime/asm_amd64.s:1371                                                 goexit\"\n```\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue at [authelia](https://github.com/authelia/authelia/issues)\n* Email us at [security@authelia.com](mailto:security@authelia.com)",
      "published_date": "2021-12-20",
      "chain_len": 1,
      "project": "https://github.com/authelia/authelia",
      "commit_href": "https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda",
      "commit_sha": "c62dbd43d6e69ae81530e7c4f8763857f8ff1dda",
      "patch": "SINGLE",
      "chain_ord": "['c62dbd43d6e69ae81530e7c4f8763857f8ff1dda']",
      "before_first_fix_commit": "{'a56cffa129a0fedb830971855ab695a95cf96312'}",
      "last_fix_commit": "c62dbd43d6e69ae81530e7c4f8763857f8ff1dda",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/21/2021, 12:03:44",
      "message": "fix(handlers): align response status codes for the verify endpoint (#2016)\n\nThis aligns all response status codes on the /api/verify endpoint when an error occurs, making it impossible to determine the actual reason for the failure.",
      "author": "James Elliott",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'internal/handlers/handler_verify.go': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/authelia/authelia/raw/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda/internal%2Fhandlers%2Fhandler_verify.go', 'patch': '@@ -428,7 +428,9 @@ func VerifyGet(cfg schema.AuthenticationBackendConfiguration) middlewares.Reques\\n \\t\\ttargetURL, err := ctx.GetOriginalURL()\\n \\n \\t\\tif err != nil {\\n-\\t\\t\\tctx.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err), operationFailedMessage)\\n+\\t\\t\\tctx.Logger.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err))\\n+\\t\\t\\tctx.ReplyUnauthorized()\\n+\\n \\t\\t\\treturn\\n \\t\\t}'}}",
      "message_norm": "fix(handlers): align response status codes for the verify endpoint (#2016)\n\nthis aligns all response status codes on the /api/verify endpoint when an error occurs, making it impossible to determine the actual reason for the failure.",
      "language": "en",
      "entities": "[('fix(handlers', 'ACTION', ''), ('#2016', 'ISSUE', ''), ('verify', 'ACTION', ''), ('error', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['internal/handlers/handler_verify.go'])",
      "num_files": 1.0
    },
    {
      "index": 1109,
      "vuln_id": "GHSA-8278-88vv-x98r",
      "cwe_id": "{'CWE-502'}",
      "score": 0.0,
      "chain": "{'https://github.com/tenable/integration-jira-cloud/commit/f8c2095fd529e664e7fa25403a0a4a85bb3907d0'}",
      "dataset": "osv",
      "summary": "Execution of untrusted code through config file ### Impact\nIt is possible to run arbitrary commands through the yaml.load() method.  This could allow an attacker with local access to the host to run arbitrary code by running the application with a specially crafted YAML configuration file.\n\n### Workarounds\nManually adjust yaml.load() to yaml.safe_load()\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [tenable/integration-jira-cloud](https://github.com/tenable/integration-jira-cloud/issues)\n* Email us at [vulnreport@tenable.com](mailto:vulnreport@tenable.com)",
      "published_date": "2021-03-10",
      "chain_len": 1,
      "project": "https://github.com/tenable/integration-jira-cloud",
      "commit_href": "https://github.com/tenable/integration-jira-cloud/commit/f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
      "commit_sha": "f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
      "patch": "SINGLE",
      "chain_ord": "['f8c2095fd529e664e7fa25403a0a4a85bb3907d0']",
      "before_first_fix_commit": "{'fa838db45f1ae5581a47e1965f74919c12488cf5'}",
      "last_fix_commit": "f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/04/2021, 14:58:38",
      "message": "switched yaml.load() to yaml.safe_load() to not load serialized python objects.",
      "author": "Steve McGrath",
      "comments": "{'com_1': {'author': 'rabby28698869', 'datetime': '03/11/2021, 03:07:50', 'body': 'f8c2095'}, 'com_2': {'author': 'SteveMcGrath', 'datetime': '03/11/2021, 15:23:59', 'body': '?'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'tenable_jira/cli.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tenable/integration-jira-cloud/raw/f8c2095fd529e664e7fa25403a0a4a85bb3907d0/tenable_jira%2Fcli.py', 'patch': \"@@ -62,7 +62,7 @@ def cli(configfile, observed_since, setup_only=False, troubleshoot=False):\\n     '''\\n     # Load the config, but ensure that any additional fields are additive to the\\n     # basic field set.\\n-    config_from_file = yaml.load(configfile, Loader=yaml.Loader)\\n+    config_from_file = yaml.safe_load(configfile)\\n     fields = config_from_file.pop('custom_fields', list())\\n     config = dict_merge(base_config(), config_from_file)\\n     config['fields'] = config['fields'] + fields\"}}",
      "message_norm": "switched yaml.load() to yaml.safe_load() to not load serialized python objects.",
      "language": "en",
      "entities": "[('serialized', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tenable_jira/cli.py'])",
      "num_files": 1.0
    },
    {
      "index": 1675,
      "vuln_id": "GHSA-f655-xhvm-cwp4",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/jenkinsci/gitlab-plugin/commit/24e9a99d8151b5345109ef12cddc1ab323baa4ee'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Jenkins GitLab Plugin Jenkins GitLab Plugin 1.5.34 and earlier does not escape multiple fields inserted into the description of webhook-triggered builds, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers with Item/Configure permission.",
      "published_date": "2022-07-01",
      "chain_len": 1,
      "project": "https://github.com/jenkinsci/gitlab-plugin",
      "commit_href": "https://github.com/jenkinsci/gitlab-plugin/commit/24e9a99d8151b5345109ef12cddc1ab323baa4ee",
      "commit_sha": "24e9a99d8151b5345109ef12cddc1ab323baa4ee",
      "patch": "SINGLE",
      "chain_ord": "['24e9a99d8151b5345109ef12cddc1ab323baa4ee']",
      "before_first_fix_commit": "{'316f8aa1190c646e0cddf6614e3d881d1490be7f'}",
      "last_fix_commit": "24e9a99d8151b5345109ef12cddc1ab323baa4ee",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/29/2022, 15:15:16",
      "message": "[SECURITY-2316]",
      "author": "Daniel Beck",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'src/main/resources/com/dabsquared/gitlabjenkins/cause/GitLabWebHookCause/description.jelly': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/gitlab-plugin/raw/24e9a99d8151b5345109ef12cddc1ab323baa4ee/src%2Fmain%2Fresources%2Fcom%2Fdabsquared%2Fgitlabjenkins%2Fcause%2FGitLabWebHookCause%2Fdescription.jelly', 'patch': '@@ -1,4 +1,5 @@\\n <?jelly escape-by-default=\\'true\\'?>\\n <j:jelly xmlns:j=\"jelly:core\">\\n-  <span><j:out value=\"${it.shortDescription}\" /></span>\\n+  <!-- SECURITY-2316: This used to show the HTML-formatted it.shortDescription, but that does not properly neutralize user-provided input -->\\n+  <span>Triggered by GitLab Webhook</span>\\n </j:jelly>'}}",
      "message_norm": "[security-2316]",
      "language": "en",
      "entities": "[('security-2316', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/resources/com/dabsquared/gitlabjenkins/cause/GitLabWebHookCause/description.jelly'])",
      "num_files": 1.0
    },
    {
      "index": 2299,
      "vuln_id": "GHSA-jr9c-h74f-2v28",
      "cwe_id": "{'CWE-285', 'CWE-863'}",
      "score": 7.1,
      "chain": "{'https://github.com/go-gitea/gitea/commit/1314f38b59748397b3429fb9bc9f9d6bac85d2f2'}",
      "dataset": "osv",
      "summary": "Improper Authorization in Gitea Gitea 1.16.3 and prior is vulnerable to improper authorization. A patch is available and is anticipated to be part of the 1.16.4 release.",
      "published_date": "2022-03-11",
      "chain_len": 1,
      "project": "https://github.com/go-gitea/gitea",
      "commit_href": "https://github.com/go-gitea/gitea/commit/1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
      "commit_sha": "1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
      "patch": "SINGLE",
      "chain_ord": "['1314f38b59748397b3429fb9bc9f9d6bac85d2f2']",
      "before_first_fix_commit": "{'7443213707bde01ee8343d49b26824dc50e1ac18'}",
      "last_fix_commit": "1314f38b59748397b3429fb9bc9f9d6bac85d2f2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/10/2022, 02:00:05",
      "message": "fix pam authorization (#19040)\n\nhttps://huntr.dev/bounties/8d221f92-b2b1-4878-bc31-66ff272e5ceb/\r\n\r\nCo-authored-by: ysf <34326+ysf@users.noreply.github.com>",
      "author": "zeripath",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'modules/auth/pam/pam.go': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/go-gitea/gitea/raw/1314f38b59748397b3429fb9bc9f9d6bac85d2f2/modules%2Fauth%2Fpam%2Fpam.go', 'patch': '@@ -34,6 +34,10 @@ func Auth(serviceName, userName, passwd string) (string, error) {\\n \\tif err = t.Authenticate(0); err != nil {\\n \\t\\treturn \"\", err\\n \\t}\\n+\\t\\n+\\tif err = t.AcctMgmt(0); err != nil {\\n+\\t  return \"\", err\\n+  }\\n \\n \\t// PAM login names might suffer transformations in the PAM stack.\\n \\t// We should take whatever the PAM stack returns for it.'}}",
      "message_norm": "fix pam authorization (#19040)\n\nhttps://huntr.dev/bounties/8d221f92-b2b1-4878-bc31-66ff272e5ceb/\r\n\r\nco-authored-by: ysf <34326+ysf@users.noreply.github.com>",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('#19040', 'ISSUE', ''), ('https://huntr.dev/bounties/8d221f92-b2b1-4878-bc31-66ff272e5ceb/', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/auth/pam/pam.go'])",
      "num_files": 1.0
    },
    {
      "index": 2111,
      "vuln_id": "GHSA-hpx4-xjp7-m4vr",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/snipe/snipe-it/commit/f623d05d0c3487ae24c4f13907e4709484e5bf41'}",
      "dataset": "osv",
      "summary": "Stored cross-site scripting in Snipe-IT Snipe-IT prior to version 5.4.3 is vulnerable to stored cross-site scripting because the input to the `checked_out_to` parameter is not escaped. The vulnerability is capable of stealing a user's cookie.",
      "published_date": "2022-04-25",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/f623d05d0c3487ae24c4f13907e4709484e5bf41",
      "commit_sha": "f623d05d0c3487ae24c4f13907e4709484e5bf41",
      "patch": "SINGLE",
      "chain_ord": "['f623d05d0c3487ae24c4f13907e4709484e5bf41']",
      "before_first_fix_commit": "{'ef7f21e3ba01f13da2e656358343ba1236a122de'}",
      "last_fix_commit": "f623d05d0c3487ae24c4f13907e4709484e5bf41",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/24/2022, 14:27:11",
      "message": "Escape checkout target name\n\nSigned-off-by: snipe <snipe@snipe.net>",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'app/Http/Transformers/DepreciationReportTransformer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/f623d05d0c3487ae24c4f13907e4709484e5bf41/app%2FHttp%2FTransformers%2FDepreciationReportTransformer.php', 'patch': \"@@ -98,7 +98,7 @@ public function transformAsset(Asset $asset)\\n             'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),\\n             'book_value' => Helper::formatCurrencyOutput($depreciated_value),\\n             'monthly_depreciation' => $monthly_depreciation,\\n-            'checked_out_to' => $checkout_target,\\n+            'checked_out_to' => ($checkout_target) ? e($checkout_target) : null,\\n             'diff' =>  Helper::formatCurrencyOutput($diff),\\n             'number_of_months' =>  ($asset->model && $asset->model->depreciation) ? e($asset->model->depreciation->months) : null,\\n             'depreciation' => (($asset->model) && ($asset->model->depreciation)) ?  e($asset->model->depreciation->name) : null,\"}}",
      "message_norm": "escape checkout target name\n\nsigned-off-by: snipe <snipe@snipe.net>",
      "language": "en",
      "entities": "[('escape', 'SECWORD', ''), ('snipe@snipe.net', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Transformers/DepreciationReportTransformer.php'])",
      "num_files": 1.0
    },
    {
      "index": 525,
      "vuln_id": "GHSA-4xfp-4pfp-89wg",
      "cwe_id": "{'CWE-824'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece'}",
      "dataset": "osv",
      "summary": "Reference binding to nullptr in `RaggedTensorToSparse` ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToSparse`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToSparse(\n  rt_nested_splits=[[0, 38, 0]],\n  rt_dense_values=[])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order.\n\n### Patches\nWe have patched the issue in GitHub commit [1071f554dbd09f7e101324d366eec5f4fe5a3ece](https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece",
      "commit_sha": "1071f554dbd09f7e101324d366eec5f4fe5a3ece",
      "patch": "SINGLE",
      "chain_ord": "['1071f554dbd09f7e101324d366eec5f4fe5a3ece']",
      "before_first_fix_commit": "{'0f387ffa5cc7d30fa1574d12f875ffbb2d1826b4'}",
      "last_fix_commit": "1071f554dbd09f7e101324d366eec5f4fe5a3ece",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/30/2021, 01:23:29",
      "message": "Add missing validation to `RaggedTensorToSparse`.\n\nThere needs to be a check that the splits allow for valid ragged tensors.\n\nPiperOrigin-RevId: 387712169\nChange-Id: I2499175324b82b65d159a260c7f83b98ceb5cc7d",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 1, 'total': 12}",
      "files": "{'tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1071f554dbd09f7e101324d366eec5f4fe5a3ece/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_sparse_kernel.cc', 'patch': '@@ -21,6 +21,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/register_types.h\"\\n #include \"tensorflow/core/framework/tensor.h\"\\n #include \"tensorflow/core/framework/tensor_shape.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -38,7 +39,8 @@ class RaggedTensorToSparseOp : public OpKernel {\\n     OP_REQUIRES_OK(\\n         context, context->input_list(\"rt_nested_splits\", &rt_nested_splits_in));\\n     const int rt_nested_splits_len = rt_nested_splits_in.size();\\n-    DCHECK_GT(rt_nested_splits_len, 0);  // Enforced by REGISTER_OP.\\n+    OP_REQUIRES(context, rt_nested_splits_len > 0,\\n+                errors::InvalidArgument(\"rt_nested_splits must be non empty\"));\\n     std::vector<ConstFlatSplits> rt_nested_splits;\\n     rt_nested_splits.reserve(rt_nested_splits_len);\\n     for (int i = 0; i < rt_nested_splits_len; ++i) {\\n@@ -162,6 +164,14 @@ class RaggedTensorToSparseOp : public OpKernel {\\n       if (rt_nested_splits[i](0) != 0) {\\n         return InvalidArgument(\"First value of ragged splits must be 0.\");\\n       }\\n+      for (int j = 1; j < rt_nested_splits[i].size(); ++j) {\\n+        if (rt_nested_splits[i](j) < rt_nested_splits[i](j - 1)) {\\n+          return InvalidArgument(\\n+              \"Ragged splits should be non decreasing, but we got \",\\n+              rt_nested_splits[i](j - 1), \" followed by \",\\n+              rt_nested_splits[i](j));\\n+        }\\n+      }\\n       if (i > 0) {\\n         SPLITS_TYPE last_split =\\n             rt_nested_splits[i - 1](rt_nested_splits[i - 1].size() - 1);'}}",
      "message_norm": "add missing validation to `raggedtensortosparse`.\n\nthere needs to be a check that the splits allow for valid ragged tensors.\n\npiperorigin-revid: 387712169\nchange-id: i2499175324b82b65d159a260c7f83b98ceb5cc7d",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('387712169', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1485,
      "vuln_id": "GHSA-c558-5gfm-p2r8",
      "cwe_id": "{'CWE-79'}",
      "score": 7.1,
      "chain": "{'https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5', 'https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d', 'https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7', 'https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a'}",
      "dataset": "osv",
      "summary": "JSPUI spellcheck and autocomplete tools vulnerable to Cross Site Scripting ### Impact\nThe JSPUI spellcheck \"Did you mean\" HTML escapes the data-spell attribute in the link, but not the actual displayed text.  Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.4 via two commits: \n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7\n* 6.x patch files available (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d.patch\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7.patch\n\n_DSpace 5.x:_\n* Fixed in 5.11 via two commits: \n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5\n* 5.x patch files available (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a.patch\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5.patch\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs / configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered & reported by Hassan Bhuiyan (Brunel University London)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
      "published_date": "2022-08-06",
      "chain_len": 4,
      "project": "https://github.com/DSpace/DSpace",
      "commit_href": "https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d",
      "commit_sha": "ebb83a75234d3de9be129464013e998dc929b68d",
      "patch": "MULTI",
      "chain_ord": "['ebb83a75234d3de9be129464013e998dc929b68d', '35030a23e48b5946f5853332c797e1c4adea7bb7', 'c89e493e517b424dea6175caba54e91d3847fc3a', '6f75bb084ab1937d094208c55cd84340040bcbb5']",
      "before_first_fix_commit": "{'d1dd7d23329ef055069759df15cfa200c8e32e54'}",
      "last_fix_commit": "6f75bb084ab1937d094208c55cd84340040bcbb5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/08/2020, 00:55:36",
      "message": "[DS-4453] Fix XSS handling in JSPUI discovery spellcheck",
      "author": "Kim Shepherd",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'dspace-jspui/src/main/webapp/search/discovery.jsp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/DSpace/DSpace/raw/ebb83a75234d3de9be129464013e998dc929b68d/dspace-jspui%2Fsrc%2Fmain%2Fwebapp%2Fsearch%2Fdiscovery.jsp', 'patch': '@@ -209,7 +209,7 @@\\n         <input type=\"text\" size=\"50\" id=\"query\" name=\"query\" value=\"<%= (query==null ? \"\" : Utils.addEntities(query)) %>\"/>\\n         <input type=\"submit\" id=\"main-query-submit\" class=\"btn btn-primary\" value=\"<fmt:message key=\"jsp.general.go\"/>\" />\\n <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>\\n-\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= spellCheckQuery %></a></fmt:param></fmt:message></p>\\n+\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= Utils.addEntities(spellCheckQuery) %></a></fmt:param></fmt:message></p>\\n <% } %>                  \\n         <input type=\"hidden\" value=\"<%= rpp %>\" name=\"rpp\" />\\n         <input type=\"hidden\" value=\"<%= Utils.addEntities(sortedBy) %>\" name=\"sort_by\" />'}}",
      "message_norm": "[ds-4453] fix xss handling in jspui discovery spellcheck",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['dspace-jspui/src/main/webapp/search/discovery.jsp'])",
      "num_files": 1.0
    },
    {
      "index": 3090,
      "vuln_id": "GHSA-vc2p-r46x-m3vx",
      "cwe_id": "{'CWE-77'}",
      "score": 5.3,
      "chain": "{'https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b'}",
      "dataset": "osv",
      "summary": "Argument injection in lettre ### Impact\n\nAffected versions of lettre allowed argument injection to the sendmail command. It was possible, using forged to addresses, to pass arbitrary arguments to the sendmail executable.\n\nDepending on the implementation (original sendmail, postfix, exim, etc.) it could be possible in some cases to write email data into abritrary files (using sendmail's logging features).\n\n*NOTE*: This vulnerability only affects the sendmail transport. Others, including smtp, are not affected.\n\n### Fix\n\nThe flaw is corrected by modifying the executed command to stop parsing arguments before passing the destination addresses.\n\n### References\n\n* [RUSTSEC-2020-0069](https://rustsec.org/advisories/RUSTSEC-2020-0069.html)\n* [CVE-2020-28247](https://nvd.nist.gov/vuln/detail/CVE-2020-28247)",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/lettre/lettre",
      "commit_href": "https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
      "commit_sha": "bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
      "patch": "SINGLE",
      "chain_ord": "['bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b']",
      "before_first_fix_commit": "{'b187885e70af400d50e3200390306b9bd2109675'}",
      "last_fix_commit": "bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/11/2020, 15:43:09",
      "message": "fix(transport-sendmail): Stop argument parsing before destination addresses",
      "author": "Alexis Mousset",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'src/transport/sendmail/mod.rs': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/lettre/lettre/raw/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b/src%2Ftransport%2Fsendmail%2Fmod.rs', 'patch': '@@ -120,6 +120,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());\\n@@ -135,6 +136,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());\\n@@ -150,6 +152,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());'}}",
      "message_norm": "fix(transport-sendmail): stop argument parsing before destination addresses",
      "language": "fr",
      "entities": "[('fix(transport', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/transport/sendmail/mod.rs'])",
      "num_files": 1.0
    },
    {
      "index": 32,
      "vuln_id": "GHSA-25fx-mxc2-76g7",
      "cwe_id": "{'CWE-200'}",
      "score": 7.5,
      "chain": "{'https://github.com/Sylius/PayPalPlugin/commit/814923c2e9d97fe6279dcee866c34ced3d2fb7a7', 'https://github.com/Sylius/PayPalPlugin/commit/2adc46be2764ccee22b4247139b8056fb8d1afff'}",
      "dataset": "osv",
      "summary": "Unauthorized access to Credit card form exposing payer name and not requiring 3DS ### Impact\nURL to the payment page done after checkout was created with autoincremented payment id (`/pay-with-paypal/{id}`) and therefore it was easy to access for anyone, not even the order's customer. The problem was, the Credit card form has prefilled \"credit card holder\" field with the Customer's first and last name.\nAdditionally, the mentioned form did not require a 3D Secure authentication, as well as did not checked the result of the 3D Secure authentication.\n\n### Patches\nThe problem has been patched in Sylius/PayPalPlugin **1.2.4** and **1.3.1**\n\n### Workarounds\nOne can override a `sylius_paypal_plugin_pay_with_paypal_form` route and change its URL parameters to (for example) `{orderToken}/{paymentId}`, then override the `Sylius\\PayPalPlugin\\Controller\\PayWithPayPalFormAction` service, to operate on the payment taken from the repository by these 2 values. It would also require usage of custom repository method.\nAdditionally, one could override the `@SyliusPayPalPlugin/payWithPaypal.html.twig` template, to add `contingencies: ['SCA_ALWAYS']` line in `hostedFields.submit(...)` function call (line 421). It would then have to be handled in the function callback.\n\n### For more information\nIf you have any questions or comments about this advisory:\n- Open an issue in Sylius/PayPalPlugin issues\n- Email us at security at sylius dot com",
      "published_date": "2021-10-06",
      "chain_len": 2,
      "project": "https://github.com/Sylius/PayPalPlugin",
      "commit_href": "https://github.com/Sylius/PayPalPlugin/commit/2adc46be2764ccee22b4247139b8056fb8d1afff",
      "commit_sha": "2adc46be2764ccee22b4247139b8056fb8d1afff",
      "patch": "MULTI",
      "chain_ord": "['2adc46be2764ccee22b4247139b8056fb8d1afff', '814923c2e9d97fe6279dcee866c34ced3d2fb7a7']",
      "before_first_fix_commit": "{'2adc46be2764ccee22b4247139b8056fb8d1afff', 'a375013be7a740bef132927d74a1e03fd78a60ef'}",
      "last_fix_commit": "814923c2e9d97fe6279dcee866c34ced3d2fb7a7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/04/2021, 13:57:45",
      "message": "Require 3D Secure and process its response correctly",
      "author": "Mateusz Zalewski",
      "comments": "{'com_1': {'author': 'Maseeullahz', 'datetime': '01/29/2022, 00:49:58', 'body': 'IKSDKN'}}",
      "stats": "{'additions': 33, 'deletions': 13, 'total': 46}",
      "files": "{'src/Resources/views/payWithPaypal.html.twig': {'additions': 33, 'deletions': 13, 'changes': 46, 'status': 'modified', 'raw_url': 'https://github.com/Sylius/PayPalPlugin/raw/2adc46be2764ccee22b4247139b8056fb8d1afff/src%2FResources%2Fviews%2FpayWithPaypal.html.twig', 'patch': \"@@ -329,6 +329,8 @@\\n         });\\n \\n         if (paypal.HostedFields.isEligible() === true) {\\n+            let processingOrderId;\\n+\\n             paypal.HostedFields.render({\\n                 createOrder: function(data, actions) {\\n                     document.querySelector('#paypal-payment-container').classList.add('loading');\\n@@ -339,6 +341,8 @@\\n                     }).then(function(res) {\\n                         return res.json();\\n                     }).then(function(data) {\\n+                        processingOrderId = data.orderID;\\n+\\n                         return data.orderID;\\n                     });\\n                 },\\n@@ -419,6 +423,7 @@\\n \\n                     if (formValid) {\\n                         hostedFields.submit({\\n+                            contingencies: ['SCA_ALWAYS'],\\n                             cardholderName: document.getElementById('card-holder-name').value,\\n                             billingAddress: {\\n                                 streetAddress: document.getElementById('card-billing-address-street').value,\\n@@ -428,20 +433,35 @@\\n                                 countryCodeAlpha2: document.getElementById('card-billing-address-country').value\\n                             }\\n                         }).then(payload => {\\n-                            return fetch(completePayPalOrderUrl, {\\n-                                method: 'post'\\n-                            }).then(function(res) {\\n-                                return res.json();\\n+                            if (payload.authenticationReason == 'SUCCESSFUL' && payload.authenticationStatus == 'YES') {\\n+                                return fetch(completePayPalOrderUrl, {\\n+                                    method: 'post'\\n+                                }).then(function(res) {\\n+                                    return res.json();\\n+                                }).then(function(data) {\\n+                                    if (data.status == 'processing') {\\n+                                        return fetch(cancelPayPalPaymentUrl, {\\n+                                            method: 'post',\\n+                                            headers: { 'content-type': 'application/json' },\\n+                                            body: JSON.stringify({ payPalOrderId: data.orderID })\\n+                                        }).then(window.location.reload());\\n+                                    }\\n+\\n+                                    window.location.href = data.return_url;\\n+                                });\\n+                            }\\n+\\n+\\n+                            return fetch(errorPayPalPaymentUrl, {\\n+                                method: 'post',\\n+                                headers: { 'content-type': 'application/json' },\\n+                                body: JSON.stringify('Invalid 3D Secure authentication.')\\n                             }).then(function(data) {\\n-                                if (data.status == 'processing') {\\n-                                    return fetch(cancelPayPalPaymentUrl, {\\n-                                        method: 'post',\\n-                                        headers: { 'content-type': 'application/json' },\\n-                                        body: JSON.stringify({ payPalOrderId: data.orderID })\\n-                                    }).then(window.location.reload());\\n-                                }\\n-\\n-                                window.location.href = data.return_url;\\n+                                return fetch(cancelPayPalPaymentUrl, {\\n+                                    method: 'post',\\n+                                    headers: { 'content-type': 'application/json' },\\n+                                    body: JSON.stringify({ payPalOrderId: processingOrderId })\\n+                                }).then(window.location.reload());\\n                             });\\n                         });\\n                     } else {\"}}",
      "message_norm": "require 3d secure and process its response correctly",
      "language": "en",
      "entities": "[('secure', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Resources/views/payWithPaypal.html.twig'])",
      "num_files": 1.0
    },
    {
      "index": 1252,
      "vuln_id": "GHSA-8rmh-55h4-93h5",
      "cwe_id": "{'CWE-22'}",
      "score": 7.2,
      "chain": "{'https://github.com/DSpace/DSpace/commit/7af52a0883a9dbc475cf3001f04ed11b24c8a4c0', 'https://github.com/DSpace/DSpace/commit/56e76049185bbd87c994128a9d77735ad7af0199'}",
      "dataset": "osv",
      "summary": "DSpace ItemImportService API Vulnerable to Path Traversal in Simple Archive Format Package Import ### Impact\nItemImportServiceImpl is vulnerable to a path traversal vulnerability. This means a malicious SAF (simple archive format) package could cause a file/directory to be created anywhere the Tomcat/DSpace user can write to on the server.  However, this path traversal vulnerability is only possible by a user with special privileges (either Administrators or someone with command-line access to the server).  This vulnerability impacts the XMLUI, JSPUI and command-line.\n\n_This vulnerability does NOT impact 7.x._\n\n### Patches\n\n_DSpace 6.x:_ \n* Fixed in 6.4 via commit: https://github.com/DSpace/DSpace/commit/7af52a0883a9dbc475cf3001f04ed11b24c8a4c0\n* 6.x patch file: https://github.com/DSpace/DSpace/commit/7af52a0883a9dbc475cf3001f04ed11b24c8a4c0.patch (may be applied manually if an immediate upgrade to 6.4 or 7.x is not possible)\n\n_DSpace 5.x:_\n* Fixed in 5.11 via commit: https://github.com/DSpace/DSpace/commit/56e76049185bbd87c994128a9d77735ad7af0199\n* 5.x patch file: https://github.com/DSpace/DSpace/commit/56e76049185bbd87c994128a9d77735ad7af0199.patch (may be applied manually if an immediate upgrade to 5.11 or 6.4 or 7.x is not possible)\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs / configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### Workarounds\n\nAs a basic workaround, you may block all access to the following URL paths:\n* If you are using the XMLUI, block all access to `/admin/batchimport` path (this is the URL of the Admin Batch Import tool). Keep in mind, if your site uses the path \"/xmlui\", then you'd need to block access to `/xmlui/admin/batchimport`.\n* If you are using the JSPUI, block all access to `/dspace-admin/batchimport` path (this is the URL of the Admin Batch Import tool).  Keep in mind, if your site uses the path \"/jspui\", then you'd need to block access to `/jspui/dspace-admin/batchimport`.\n\nKeep in mind, only an Administrative user or a user with command-line access to the server is able to import/upload SAF packages. Therefore, assuming those users do not blindly upload untrusted SAF packages, then it is unlikely your site could be impacted by this vulnerability.\n\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
      "published_date": "2022-08-06",
      "chain_len": 2,
      "project": "https://github.com/DSpace/DSpace",
      "commit_href": "https://github.com/DSpace/DSpace/commit/7af52a0883a9dbc475cf3001f04ed11b24c8a4c0",
      "commit_sha": "7af52a0883a9dbc475cf3001f04ed11b24c8a4c0",
      "patch": "MULTI",
      "chain_ord": "['7af52a0883a9dbc475cf3001f04ed11b24c8a4c0', '56e76049185bbd87c994128a9d77735ad7af0199']",
      "before_first_fix_commit": "{'73cdff26fdc40bb022e21dcfdeefebf28057cde7'}",
      "last_fix_commit": "56e76049185bbd87c994128a9d77735ad7af0199",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/08/2020, 00:44:54",
      "message": "[DS-4131] Fix zip import handling to avoid path traversal exploit",
      "author": "Kim Shepherd",
      "comments": null,
      "stats": "{'additions': 36, 'deletions': 7, 'total': 43}",
      "files": "{'dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java': {'additions': 36, 'deletions': 7, 'changes': 43, 'status': 'modified', 'raw_url': 'https://github.com/DSpace/DSpace/raw/7af52a0883a9dbc475cf3001f04ed11b24c8a4c0/dspace-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fdspace%2Fapp%2Fitemimport%2FItemImportServiceImpl.java', 'patch': '@@ -55,6 +55,8 @@\\n import javax.xml.transform.TransformerException;\\n import java.io.*;\\n import java.net.URL;\\n+import java.nio.file.Path;\\n+import java.nio.file.Paths;\\n import java.sql.SQLException;\\n import java.text.SimpleDateFormat;\\n import java.util.*;\\n@@ -1630,26 +1632,36 @@ public String unzip(File zipfile, String destDir) throws IOException {\\n         {\\n             log.error(\"Zip file \\'\" + zipfile.getAbsolutePath() + \"\\' does not exist, or is not readable.\");\\n         }\\n+        log.debug(\"Extracting zip at \" + zipfile.getAbsolutePath());\\n \\n         String destinationDir = destDir;\\n         if (destinationDir == null){\\n         \\tdestinationDir = tempWorkDir;\\n         }\\n+        log.debug(\"Using directory \" + destinationDir + \" for zip extraction. (destDir arg is \" + destDir +\\n+                \", tempWorkDir is \" + tempWorkDir + \")\");\\n \\n         File tempdir = new File(destinationDir);\\n         if (!tempdir.isDirectory())\\n         {\\n-            log.error(\"\\'\" + ConfigurationManager.getProperty(\"org.dspace.app.itemexport.work.dir\") +\\n-                    \"\\' as defined by the key \\'org.dspace.app.itemexport.work.dir\\' in dspace.cfg \" +\\n+            log.error(\"\\'\" + ConfigurationManager.getProperty(\"org.dspace.app.batchitemexport.work.dir\") +\\n+                    \"\\' as defined by the key \\'org.dspace.app.batchitemexport.work.dir\\' in dspace.cfg \" +\\n                     \"is not a valid directory\");\\n         }\\n \\n         if (!tempdir.exists() && !tempdir.mkdirs())\\n         {\\n             log.error(\"Unable to create temporary directory: \" + tempdir.getAbsolutePath());\\n         }\\n-        String sourcedir = destinationDir + System.getProperty(\"file.separator\") + zipfile.getName();\\n-        String zipDir = destinationDir + System.getProperty(\"file.separator\") + zipfile.getName() + System.getProperty(\"file.separator\");\\n+\\n+        if(!destinationDir.endsWith(System.getProperty(\"file.separator\"))) {\\n+            destinationDir += System.getProperty(\"file.separator\");\\n+        }\\n+\\n+        String sourcedir = destinationDir + zipfile.getName();\\n+        String zipDir = destinationDir + zipfile.getName() + System.getProperty(\"file.separator\");\\n+\\n+        log.debug(\"zip directory to use is \" + zipDir);\\n \\n \\n         // 3\\n@@ -1660,11 +1672,27 @@ public String unzip(File zipfile, String destDir) throws IOException {\\n         while (entries.hasMoreElements())\\n         {\\n             entry = entries.nextElement();\\n+            // Check that the true path to extract files is never outside allowed temp directories\\n+            // without creating any actual files on disk\\n+            log.debug(\"Inspecting entry name: \" + entry.getName() + \" for path traversal security\");\\n+            File potentialExtract = new File(zipDir + entry.getName());\\n+            String canonicalPath = potentialExtract.getCanonicalPath();\\n+            log.debug(\"Canonical path to potential File is \" + canonicalPath);\\n+            if(!canonicalPath.startsWith(zipDir)) {\\n+                log.error(\"Rejecting zip file: \" + zipfile.getName() + \" as it contains an entry that would be extracted \" +\\n+                        \"outside the temporary unzip directory: \" + canonicalPath);\\n+                throw new IOException(\"Error extracting \" + zipfile + \": Canonical path of zip entry: \" +\\n+                        entry.getName() + \" (\" + canonicalPath + \") does not start with permissible temp unzip directory (\" + destinationDir +\\n+                        \")\");\\n+            }\\n+\\n             if (entry.isDirectory())\\n             {\\n-                if (!new File(zipDir + entry.getName()).mkdir())\\n-                {\\n+                // Log error and throw IOException if a directory entry could not be created\\n+                File newDir = new File(zipDir + entry.getName());\\n+                if (!newDir.mkdirs()) {\\n                     log.error(\"Unable to create contents directory: \" + zipDir + entry.getName());\\n+                    throw new IOException(\"Unable to create contents directory: \" + zipDir + entry.getName());\\n                 }\\n             }\\n             else\\n@@ -1673,6 +1701,7 @@ public String unzip(File zipfile, String destDir) throws IOException {\\n                 log.info(\"Extracting file: \" + entry.getName());\\n \\n                 int index = entry.getName().lastIndexOf(\\'/\\');\\n+                log.debug(\"Index of \" + entry.getName() + \" is \" + index);\\n                 if (index == -1)\\n                 {\\n                     // Was it created on Windows instead?\\n@@ -1701,11 +1730,11 @@ public String unzip(File zipfile, String destDir) throws IOException {\\n                         }\\n                     }\\n \\n-\\n                 }\\n                 byte[] buffer = new byte[1024];\\n                 int len;\\n                 InputStream in = zf.getInputStream(entry);\\n+                log.debug(\"Reading \" + zipDir + entry.getName() + \" into InputStream\");\\n                 BufferedOutputStream out = new BufferedOutputStream(\\n                         new FileOutputStream(zipDir + entry.getName()));\\n                 while((len = in.read(buffer)) >= 0)'}}",
      "message_norm": "[ds-4131] fix zip import handling to avoid path traversal exploit",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('exploit', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['dspace-api/src/main/java/org/dspace/app/itemimport/ItemImportServiceImpl.java'])",
      "num_files": 1.0
    },
    {
      "index": 1179,
      "vuln_id": "GHSA-89px-ww3j-g2mm",
      "cwe_id": "{'CWE-304', 'CWE-290'}",
      "score": 8.7,
      "chain": "{'https://github.com/labd/wagtail-2fa/commit/13b12995d35b566df08a17257a23863ab6efb0ca', 'https://github.com/labd/wagtail-2fa/commit/a6711b29711729005770ff481b22675b35ff5c81'}",
      "dataset": "osv",
      "summary": "2FA bypass in Wagtail through new device path ## 2FA bypass through new device path\n\n### Impact\nIf someone gains access to someone's Wagtail login credentials, they can log into the CMS and bypass the 2FA check by changing the URL. They can then add a new device and gain full access to the CMS.\n\n### Patches\nThis problem has been patched in version 1.3.0.\n\n### Workarounds\nThere is no workaround at the moment.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [github.com/labd/wagtail-2fa](https://github.com/labd/wagtail-2fa)\n* Email us at [security@labdigital.nl](mailto:security@labdigital.nl)",
      "published_date": "2019-11-29",
      "chain_len": 2,
      "project": "https://github.com/labd/wagtail-2fa",
      "commit_href": "https://github.com/labd/wagtail-2fa/commit/13b12995d35b566df08a17257a23863ab6efb0ca",
      "commit_sha": "13b12995d35b566df08a17257a23863ab6efb0ca",
      "patch": "MULTI",
      "chain_ord": "['a6711b29711729005770ff481b22675b35ff5c81', '13b12995d35b566df08a17257a23863ab6efb0ca']",
      "before_first_fix_commit": "{'bceef354b3ab885350e3bc79a793589c491f6037'}",
      "last_fix_commit": "13b12995d35b566df08a17257a23863ab6efb0ca",
      "chain_ord_pos": 2.0,
      "commit_datetime": "11/26/2019, 11:56:05",
      "message": "Update changelog for 1.3.0 release",
      "author": "Mike Dingjan",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'CHANGES': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/labd/wagtail-2fa/raw/13b12995d35b566df08a17257a23863ab6efb0ca/CHANGES', 'patch': '@@ -1,3 +1,11 @@\\n+1.3.0 (2019.11.26)\\n+==================\\n+ - Add OtpRequiredMixin to enforce OTP checks in views\\n+ - Resolve possible vulnerabilities:\\n+    - [CWE-290](http://cwe.mitre.org/data/definitions/290.html)\\n+    - [CWE-20](http://cwe.mitre.org/data/definitions/20.html)\\n+\\n+\\n 1.2.0 (2019-10-30)\\n ==================\\n  - Added missing deps for generation of the docs'}}",
      "message_norm": "update changelog for 1.3.0 release",
      "language": "en",
      "entities": "[('update', 'ACTION', ''), ('1.3.0', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['CHANGES'])",
      "num_files": 1.0
    },
    {
      "index": 2774,
      "vuln_id": "GHSA-qjw2-hr98-qgfh",
      "cwe_id": "{'CWE-502'}",
      "score": 8.1,
      "chain": "{'https://github.com/FasterXML/jackson-databind/commit/ad5a630174f08d279504bc51ebba8772fd71b86b', 'https://github.com/FasterXML/jackson-databind/commit/2118e71325486c68f089a9761c9d8a11b4ddd1cb'}",
      "dataset": "osv",
      "summary": "Unsafe Deserialization in jackson-databind FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
      "published_date": "2021-12-09",
      "chain_len": 2,
      "project": "https://github.com/FasterXML/jackson-databind",
      "commit_href": "https://github.com/FasterXML/jackson-databind/commit/ad5a630174f08d279504bc51ebba8772fd71b86b",
      "commit_sha": "ad5a630174f08d279504bc51ebba8772fd71b86b",
      "patch": "MULTI",
      "chain_ord": "['ad5a630174f08d279504bc51ebba8772fd71b86b', '2118e71325486c68f089a9761c9d8a11b4ddd1cb']",
      "before_first_fix_commit": "{'8069e46dd9c288d4a52911ebdc52192cd3d0e96c'}",
      "last_fix_commit": "2118e71325486c68f089a9761c9d8a11b4ddd1cb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/18/2020, 17:17:24",
      "message": "Add cve id for #2798",
      "author": "Tatu Saloranta",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'release-notes/VERSION-2.x': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/FasterXML/jackson-databind/raw/ad5a630174f08d279504bc51ebba8772fd71b86b/release-notes%2FVERSION-2.x', 'patch': '@@ -11,7 +11,7 @@ Project: jackson-databind\\n \\n 2.9.10.6 (24-Aug-2020)\\n \\n-#2798: Block one more gadget type (xxx, CVE-xxxx-xxx)\\n+#2798: Block one more gadget type (com.pastdev.httpcomponents, CVE-2020-24750)\\n  (reported by Al1ex@knownsec)\\n #2814: Block one more gadget type (Anteros-DBCP, CVE-2020-24616)\\n  (reported by ChenZhaojun)'}}",
      "message_norm": "add cve id for #2798",
      "language": "cy",
      "entities": "[('add', 'ACTION', ''), ('cve', 'SECWORD', ''), ('#2798', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['release-notes/VERSION-2.x'])",
      "num_files": 1.0
    },
    {
      "index": 339,
      "vuln_id": "GHSA-434h-p4gx-jm89",
      "cwe_id": "{'CWE-203'}",
      "score": 5.3,
      "chain": "{'https://github.com/dpgaspar/Flask-AppBuilder/commit/780bd0e8fbf2d36ada52edb769477e0a4edae580'}",
      "dataset": "osv",
      "summary": "Observable Response Discrepancy in Flask-AppBuilder ### Impact\nUser enumeration in database authentication in Flask-AppBuilder <= 3.2.3. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.\n\n### Patches\nUpgrade to 3.3.0\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Flask-AppBuilder](https://github.com/dpgaspar/Flask-AppBuilder)",
      "published_date": "2021-05-27",
      "chain_len": 1,
      "project": "https://github.com/dpgaspar/Flask-AppBuilder",
      "commit_href": "https://github.com/dpgaspar/Flask-AppBuilder/commit/780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "commit_sha": "780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "patch": "SINGLE",
      "chain_ord": "['780bd0e8fbf2d36ada52edb769477e0a4edae580']",
      "before_first_fix_commit": "{'b60dea9cedf98b56c926ba41020c73f287d5826e'}",
      "last_fix_commit": "780bd0e8fbf2d36ada52edb769477e0a4edae580",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/10/2021, 08:37:55",
      "message": "fix: auth balance (#1634)",
      "author": "Daniel Vaz Gaspar",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'flask_appbuilder/security/manager.py': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/dpgaspar/Flask-AppBuilder/raw/780bd0e8fbf2d36ada52edb769477e0a4edae580/flask_appbuilder%2Fsecurity%2Fmanager.py', 'patch': '@@ -833,6 +833,12 @@ def auth_user_db(self, username, password):\\n         if user is None:\\n             user = self.find_user(email=username)\\n         if user is None or (not user.is_active):\\n+            # Balance failure and success\\n+            check_password_hash(\\n+                \"pbkdf2:sha256:150000$Z3t6fmj2$22da622d94a1f8118\"\\n+                \"c0976a03d2f18f680bfff877c9a965db9eedc51bc0be87c\",\\n+                \"password\",\\n+            )\\n             log.info(LOGMSG_WAR_SEC_LOGIN_FAILED.format(username))\\n             return None\\n         elif check_password_hash(user.password, password):'}}",
      "message_norm": "fix: auth balance (#1634)",
      "language": "en",
      "entities": "[('auth', 'SECWORD', ''), ('#1634', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['flask_appbuilder/security/manager.py'])",
      "num_files": 1.0
    },
    {
      "index": 2059,
      "vuln_id": "GHSA-hgch-jjmr-gp7w",
      "cwe_id": "{'CWE-94'}",
      "score": 9.9,
      "chain": "{'https://github.com/commenthol/safer-eval/commit/1c29f6a6e304fb650c05056e217e457a0d2cc3c5'}",
      "dataset": "osv",
      "summary": "Sandbox Breakout / Arbitrary Code Execution in safer-eval Versions of `safer-eval` before 1.3.2 are vulnerable to Sandbox Escape leading to Remote Code Execution. A payload using constructor properties can escape the sandbox and execute arbitrary code.\n\n\n## Recommendation\n\nUpgrade to version 1.3.2.",
      "published_date": "2019-10-17",
      "chain_len": 1,
      "project": "https://github.com/commenthol/safer-eval",
      "commit_href": "https://github.com/commenthol/safer-eval/commit/1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
      "commit_sha": "1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
      "patch": "SINGLE",
      "chain_ord": "['1c29f6a6e304fb650c05056e217e457a0d2cc3c5']",
      "before_first_fix_commit": "{'74e5bb845c3cf1cab4f0a5a8dea08685c20970c7'}",
      "last_fix_commit": "1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/09/2019, 20:54:53",
      "message": "fix: disallow usage of Object.constructor",
      "author": "commenthol",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 1, 'total': 5}",
      "files": "{'src/index.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/commenthol/safer-eval/raw/1c29f6a6e304fb650c05056e217e457a0d2cc3c5/src%2Findex.js', 'patch': '@@ -40,8 +40,11 @@ class SaferEval {\\n     if (typeof code !== \\'string\\') {\\n       throw new TypeError(\\'not a string\\')\\n     }\\n+    let src = \\'Object.constructor = function () {};\\\\n\\'\\n+    src += \\'return \\' + code + \\';\\\\n\\'\\n+\\n     return vm.runInContext(\\n-      \\'(function () {\"use strict\"; return \\' + code + \\'})()\\',\\n+      \\'(function () {\"use strict\"; \\' + src + \\'})()\\',\\n       this._context,\\n       this._options\\n     )'}}",
      "message_norm": "fix: disallow usage of object.constructor",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.js'])",
      "num_files": 1.0
    },
    {
      "index": 2467,
      "vuln_id": "GHSA-mv78-g7wq-mhp4",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948'}",
      "dataset": "osv",
      "summary": "Division by zero in padding computation in TFLite ### Impact\nThe TFLite computation for size of output after padding, [`ComputeOutSize`](https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division.\n\n```cc\ninline int ComputeOutSize(TfLitePadding padding, int image_size,\n                          int filter_size, int stride, int dilation_rate = 1) {\n  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;\n  switch (padding) {\n    case kTfLitePaddingSame:\n      return (image_size + stride - 1) / stride;\n    case kTfLitePaddingValid:\n      return (image_size + stride - effective_filter_size) / stride;\n    default:\n      return 0;\n  }\n}\n```\n  \nUsers can craft special models such that `ComputeOutSize` is called with `stride` set to 0.\n\n### Patches\nWe have patched the issue in GitHub commit [49847ae69a4e1a97ae7f2db5e217c77721e37948](https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948",
      "commit_sha": "49847ae69a4e1a97ae7f2db5e217c77721e37948",
      "patch": "SINGLE",
      "chain_ord": "['49847ae69a4e1a97ae7f2db5e217c77721e37948']",
      "before_first_fix_commit": "{'b0e85b5b3859d060a42364c79fe664b07299a0e9'}",
      "last_fix_commit": "49847ae69a4e1a97ae7f2db5e217c77721e37948",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/27/2021, 22:37:08",
      "message": "Fix division by zero in TFLite padding.\n\nPiperOrigin-RevId: 370777494\nChange-Id: Ic1331e4a1603b9e4c8aa183012a6c8237410aa0f",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/lite/kernels/padding.h': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/49847ae69a4e1a97ae7f2db5e217c77721e37948/tensorflow%2Flite%2Fkernels%2Fpadding.h', 'patch': '@@ -44,6 +44,11 @@ inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,\\n inline int ComputeOutSize(TfLitePadding padding, int image_size,\\n                           int filter_size, int stride, int dilation_rate = 1) {\\n   int effective_filter_size = (filter_size - 1) * dilation_rate + 1;\\n+\\n+  // TODO(b/186448822): This uses 0 since the function has no other way to\\n+  // report error case\\n+  if (stride == 0) return 0;\\n+\\n   switch (padding) {\\n     case kTfLitePaddingSame:\\n       return (image_size + stride - 1) / stride;'}}",
      "message_norm": "fix division by zero in tflite padding.\n\npiperorigin-revid: 370777494\nchange-id: ic1331e4a1603b9e4c8aa183012a6c8237410aa0f",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('370777494', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/padding.h'])",
      "num_files": 1.0
    },
    {
      "index": 3022,
      "vuln_id": "GHSA-rwv8-jvff-jq28",
      "cwe_id": "{'CWE-22'}",
      "score": 0.0,
      "chain": "{'https://github.com/tnantoka/public/commit/eae8ad8017b260f8667ded5e12801bd72b877af2'}",
      "dataset": "osv",
      "summary": "Path Traversal in public Versions of `public` before 0.1.3 are vulnerable to path traversal. This is due to lack of file path sanitization which could lead to any file the parent process has access to on the server to be read by malicious user.\n\n\n## Recommendation\n\nUpdate to version 0.1.3 or later.",
      "published_date": "2018-07-18",
      "chain_len": 1,
      "project": "https://github.com/tnantoka/public",
      "commit_href": "https://github.com/tnantoka/public/commit/eae8ad8017b260f8667ded5e12801bd72b877af2",
      "commit_sha": "eae8ad8017b260f8667ded5e12801bd72b877af2",
      "patch": "SINGLE",
      "chain_ord": "['eae8ad8017b260f8667ded5e12801bd72b877af2']",
      "before_first_fix_commit": "{'c5c14107c00eb37c677eabcc5566938a0dee685c'}",
      "last_fix_commit": "eae8ad8017b260f8667ded5e12801bd72b877af2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/15/2018, 05:13:37",
      "message": "Fix path traversal",
      "author": "tnantoka",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'bin/public': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/tnantoka/public/raw/eae8ad8017b260f8667ded5e12801bd72b877af2/bin%2Fpublic', 'patch': \"@@ -67,6 +67,7 @@ switch (args[0]) {\\n       }\\n     }\\n }\\n+var root = path.resolve(dir);\\n \\n if (path) {\\n   http.createServer(function(req, res) {\\n@@ -75,6 +76,13 @@ if (path) {\\n     var base = filePath.replace(dir, ''); // Base path for browser link\\n     var abs = path.resolve(filePath); \\n     console.log(new Date().toString(), abs);\\n+\\n+    if (abs.indexOf(root) !== 0) {\\n+      res.writeHead(403, { 'Content-Type': 'text/plain' });\\n+      res.end('Forbidden\\\\n');\\n+      return;\\n+    }\\n+\\n     fs.readFile(filePath, function(err, data) {\\n       if (err) {\\n         res.writeHead(200, { 'Content-Type': 'text/html' });\"}}",
      "message_norm": "fix path traversal",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bin/public'])",
      "num_files": 1.0
    },
    {
      "index": 3323,
      "vuln_id": "GHSA-wvh5-78h5-gmgr",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/moodle/moodle/commit/6abe964bbac41b5e40a81b40962f7044b0dc201e'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in moodle A flaw was found in moodle where ID numbers displayed when bulk allocating markers to assignments required additional sanitizing to prevent a stored XSS risk.",
      "published_date": "2022-05-19",
      "chain_len": 1,
      "project": "https://github.com/moodle/moodle",
      "commit_href": "https://github.com/moodle/moodle/commit/6abe964bbac41b5e40a81b40962f7044b0dc201e",
      "commit_sha": "6abe964bbac41b5e40a81b40962f7044b0dc201e",
      "patch": "SINGLE",
      "chain_ord": "['6abe964bbac41b5e40a81b40962f7044b0dc201e']",
      "before_first_fix_commit": "{'11b2cc4cb5cf0693414f0e84cb790e487ae33a24'}",
      "last_fix_commit": "6abe964bbac41b5e40a81b40962f7044b0dc201e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/15/2022, 00:10:25",
      "message": "MDL-74204 mod_assign: escape identity fields in allocate marker form.",
      "author": "Paul Holden",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'mod/assign/classes/output/renderer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/moodle/moodle/raw/6abe964bbac41b5e40a81b40962f7044b0dc201e/mod%2Fassign%2Fclasses%2Foutput%2Frenderer.php', 'patch': \"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\\\\assign_user_summary $summary) {\\n             $fullname = fullname($summary->user, $summary->viewfullnames);\\n             $extrainfo = array();\\n             foreach ($summary->extrauserfields as $extrafield) {\\n-                $extrainfo[] = $summary->user->$extrafield;\\n+                $extrainfo[] = s($summary->user->$extrafield);\\n             }\\n             if (count($extrainfo)) {\\n                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';\"}}",
      "message_norm": "mdl-74204 mod_assign: escape identity fields in allocate marker form.",
      "language": "en",
      "entities": "[('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['mod/assign/classes/output/renderer.php'])",
      "num_files": 1.0
    },
    {
      "index": 3138,
      "vuln_id": "GHSA-vm37-j55j-8655",
      "cwe_id": "{'CWE-78'}",
      "score": 7.8,
      "chain": "{'https://github.com/microweber/microweber/commit/0a7e5f1d81de884861ca677ee1aaac31f188d632'}",
      "dataset": "osv",
      "summary": "OS Command Injection in Microweber Microweber is a content management system with drag and drop. Prior to version 1.2.11, Microweber is vulnerable to OS Command Injection.",
      "published_date": "2022-02-12",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/0a7e5f1d81de884861ca677ee1aaac31f188d632",
      "commit_sha": "0a7e5f1d81de884861ca677ee1aaac31f188d632",
      "patch": "SINGLE",
      "chain_ord": "['0a7e5f1d81de884861ca677ee1aaac31f188d632']",
      "before_first_fix_commit": "{'b66537fbd7792d10f07fa7870ead7aae293f1120'}",
      "last_fix_commit": "0a7e5f1d81de884861ca677ee1aaac31f188d632",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/10/2022, 08:27:09",
      "message": "Update plupload.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 2, 'total': 3}",
      "files": "{'src/MicroweberPackages/App/functions/plupload.php': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/0a7e5f1d81de884861ca677ee1aaac31f188d632/src%2FMicroweberPackages%2FApp%2Ffunctions%2Fplupload.php', 'patch': \"@@ -149,14 +149,13 @@\\n                             $is_ext = strtolower($is_ext);\\n \\n                             switch ($is_ext) {\\n-                                case 'php':\\n+                                case 'php': \\n                                 case 'php12':\\n                                 case 'php11':\\n                                 case 'php10':\\n                                 case 'php9':\\n                                 case 'php8':\\n                                 case 'php7':\\n-                                case 'php6':\\n                                 case 'php5':\\n                                 case 'php4':\\n                                 case 'php3':\"}}",
      "message_norm": "update plupload.php",
      "language": "ro",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/App/functions/plupload.php'])",
      "num_files": 1.0
    },
    {
      "index": 2935,
      "vuln_id": "GHSA-rfw2-x9f8-2f6m",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/linkedin/oncall/commit/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225'}",
      "dataset": "osv",
      "summary": "Cross-Site Scripting LinkedIn Oncall through 1.4.0 allows reflected XSS via /query because of mishandling of the \"No results found for\" message in the search bar.",
      "published_date": "2021-04-30",
      "chain_len": 1,
      "project": "https://github.com/linkedin/oncall",
      "commit_href": "https://github.com/linkedin/oncall/commit/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
      "commit_sha": "843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
      "patch": "SINGLE",
      "chain_ord": "['843bc106a1c1b1699e9e52b6b0d01c7efe1d6225']",
      "before_first_fix_commit": "{'605d10ef5d68181b2c516dc857fdc3c8575539cd'}",
      "last_fix_commit": "843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/05/2021, 23:30:43",
      "message": "prevent potential XSS from searchbar results (#342)\n\n* prevent potential XSS from searchbar results\r\n\r\n* use built in handlebars expression escaping\r\n\r\n* use handlebars encodeURIComponent",
      "author": "Diego Cepeda",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'src/oncall/ui/static/js/oncall.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/linkedin/oncall/raw/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225/src%2Foncall%2Fui%2Fstatic%2Fjs%2Foncall.js', 'patch': '@@ -579,11 +579,11 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (teamsCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + resp.query + \\'/teams\" data-navigo> See all \\' + teamsCt + \\' results for teams \u00bb</a></div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'/teams\" data-navigo> See all \\' + teamsCt + \\' results for teams \u00bb</a></div>\\';\\n                 }\\n               },\\n               empty: function(resp){\\n-                return \\'<h4> No results found for \"\\' + resp.query + \\'\" </h4>\\';\\n+                return \\'<h4> No results found for \"\\' + Handlebars.escapeExpression(resp.query) + \\'\" </h4>\\';\\n               }\\n             }\\n           },\\n@@ -604,7 +604,7 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (servicesCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + resp.query + \\'/services\" data-navigo> See all \\' + servicesCt + \\' results for services \u00bb</a></div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'/services\" data-navigo> See all \\' + servicesCt + \\' results for services \u00bb</a></div>\\';\\n                 }\\n               }\\n             }\\n@@ -626,7 +626,7 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (usersCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + resp.query + \\'/users\" data-navigo> See all \\' + usersCt + \\' results for users \u00bb</a></div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"/query/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'/users\" data-navigo> See all \\' + usersCt + \\' results for users \u00bb</a></div>\\';\\n                 }\\n               }\\n             }'}}",
      "message_norm": "prevent potential xss from searchbar results (#342)\n\n* prevent potential xss from searchbar results\r\n\r\n* use built in handlebars expression escaping\r\n\r\n* use handlebars encodeuricomponent",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('#342', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('encodeuricomponent', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/oncall/ui/static/js/oncall.js'])",
      "num_files": 1.0
    },
    {
      "index": 780,
      "vuln_id": "GHSA-686f-ch3r-xwmh",
      "cwe_id": "{'CWE-362', 'CWE-119'}",
      "score": 8.1,
      "chain": "{'https://github.com/udoprog/unicycle/commit/6a6c367a0c25f86f998fa315ea90c328f685b194', 'https://github.com/udoprog/unicycle/commit/92f40b4a2c671553dfa96feacff0265206c44ce5'}",
      "dataset": "osv",
      "summary": "Data races in unicycle Affected versions of this crate unconditionally implemented `Send` & `Sync` for types `PinSlab<T>` & `Unordered<T, S>`. This allows sending non-Send types to other threads and concurrently accessing non-Sync types from multiple threads.\n\nThis can result in a data race & memory corruption when types that provide internal mutability without synchronization are contained within `PinSlab<T>` or `Unordered<T, S>` and accessed concurrently from multiple threads.\n\nThe flaw was corrected in commits 92f40b4 & 6a6c367 by adding trait bound `T: Send` to `Send` impls for `PinSlab<T>` & `Unordered<T, S>` and adding `T: Sync` to `Sync` impls for `PinSlab<T>` & `Unordered<T, S>`.",
      "published_date": "2021-08-25",
      "chain_len": 2,
      "project": "https://github.com/udoprog/unicycle",
      "commit_href": "https://github.com/udoprog/unicycle/commit/6a6c367a0c25f86f998fa315ea90c328f685b194",
      "commit_sha": "6a6c367a0c25f86f998fa315ea90c328f685b194",
      "patch": "MULTI",
      "chain_ord": "['92f40b4a2c671553dfa96feacff0265206c44ce5', '6a6c367a0c25f86f998fa315ea90c328f685b194']",
      "before_first_fix_commit": "{'c6a1e1601e8ddfb33d2846abca3c3ddc50e0493c'}",
      "last_fix_commit": "6a6c367a0c25f86f998fa315ea90c328f685b194",
      "chain_ord_pos": 2.0,
      "commit_datetime": "01/24/2021, 03:29:54",
      "message": "Fix trait bounds in Send/Sync impl: Unordered<T,S>\nThis commit is a follow-up fix for the issue raised in\nhttps://github.com/udoprog/unicycle/issues/8#issuecomment-763780334 .",
      "author": "JOE1994",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'src/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/udoprog/unicycle/raw/6a6c367a0c25f86f998fa315ea90c328f685b194/src%2Flib.rs', 'patch': '@@ -377,8 +377,8 @@ where\\n     _marker: marker::PhantomData<S>,\\n }\\n \\n-unsafe impl<T, S> Send for Unordered<T, S> where S: Send + Sentinel {}\\n-unsafe impl<T, S> Sync for Unordered<T, S> where S: Sync + Sentinel {}\\n+unsafe impl<T: Send, S> Send for Unordered<T, S> where S: Sentinel {}\\n+unsafe impl<T: Sync, S> Sync for Unordered<T, S> where S: Sentinel {}\\n \\n impl<T, S> Unpin for Unordered<T, S> where S: Sentinel {}'}}",
      "message_norm": "fix trait bounds in send/sync impl: unordered<t,s>\nthis commit is a follow-up fix for the issue raised in\nhttps://github.com/udoprog/unicycle/issues/8#issuecomment-763780334 .",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https://github.com/udoprog/unicycle/issues/8#issuecomment-763780334', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 2958,
      "vuln_id": "GHSA-rhrq-64mq-hf9h",
      "cwe_id": "{'CWE-369'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28'}",
      "dataset": "osv",
      "summary": "FPE in TFLite division operations ### Impact\nThe implementation of division in TFLite is [vulnerable to a division by 0 error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc)\n\nThere is no check that the divisor tensor does not contain zero elements.\n\n### Patches\nWe have patched the issue in GitHub commit [1e206baedf8bef0334cca3eb92bab134ef525a28](https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28",
      "commit_sha": "1e206baedf8bef0334cca3eb92bab134ef525a28",
      "patch": "SINGLE",
      "chain_ord": "['1e206baedf8bef0334cca3eb92bab134ef525a28']",
      "before_first_fix_commit": "{'9579070c3fe96b4ed3b07c1b294c7a402250fb43'}",
      "last_fix_commit": "1e206baedf8bef0334cca3eb92bab134ef525a28",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/16/2021, 21:23:21",
      "message": "Prevent a division by 0 in division ops.\n\nPiperOrigin-RevId: 385223169\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 1, 'total': 17}",
      "files": "{'tensorflow/lite/kernels/div.cc': {'additions': 16, 'deletions': 1, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1e206baedf8bef0334cca3eb92bab134ef525a28/tensorflow%2Flite%2Fkernels%2Fdiv.cc', 'patch': \"@@ -216,9 +216,23 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context,\\n                     GetOutputSafe(context, node, kOutputTensor, &output));\\n \\n-  if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {\\n+  // TODO(b/193904910): This can written with C++ templates\\n+#define TF_LITE_CHECK_DIV_NON_ZERO(data_type)                       \\\\\\n+  const auto* input2_data = GetTensorData<data_type>(input2);       \\\\\\n+  const size_t input2_elements = input2->bytes / sizeof(data_type); \\\\\\n+  for (size_t i = 0; i < input2_elements; i++) {                    \\\\\\n+    TF_LITE_ENSURE(context, input2_data[i] != 0);                   \\\\\\n+  }\\n+\\n+  if (output->type == kTfLiteFloat32) {\\n+    // Div by zero seems ok in this case, just like in TF case infinities are\\n+    // returned. So we don't do a check at this point.\\n+    EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);\\n+  } else if (output->type == kTfLiteInt32) {\\n+    TF_LITE_CHECK_DIV_NON_ZERO(int32_t);\\n     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);\\n   } else if (output->type == kTfLiteUInt8) {\\n+    TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);\\n     TF_LITE_ENSURE_OK(\\n         context, EvalQuantized<kernel_type>(context, node, params, data, input1,\\n                                             input2, output));\\n@@ -229,6 +243,7 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n         output->type);\\n     return kTfLiteError;\\n   }\\n+#undef TF_LITE_CHECK_DIV_NON_ZERO\\n \\n   return kTfLiteOk;\\n }\"}}",
      "message_norm": "prevent a division by 0 in division ops.\n\npiperorigin-revid: 385223169\nchange-id: ia4228960b5d2aa44480385f74bdd70d21a3613c3",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('385223169', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/div.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1898,
      "vuln_id": "GHSA-gmh3-x5w7-jg5m",
      "cwe_id": "{'CWE-79'}",
      "score": 6.3,
      "chain": "{'https://github.com/microweber/microweber/commit/79c6914bab8c9da07ac950fda17648d08c68b130'}",
      "dataset": "osv",
      "summary": "Microweber before v1.2.20 vulnerable to cross-site scripting Prior to Microweber v1.2.20, due to improper neutralization of input, an attacker can steal tokens to perform cross-site request forgery (CSRF), fetch contents from same-site and redirect a user.",
      "published_date": "2022-07-10",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/79c6914bab8c9da07ac950fda17648d08c68b130",
      "commit_sha": "79c6914bab8c9da07ac950fda17648d08c68b130",
      "patch": "SINGLE",
      "chain_ord": "['79c6914bab8c9da07ac950fda17648d08c68b130']",
      "before_first_fix_commit": "{'d35e691e72d358430abc8e99f5ba9eb374423b9f'}",
      "last_fix_commit": "79c6914bab8c9da07ac950fda17648d08c68b130",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/08/2022, 17:31:13",
      "message": "update",
      "author": "Peter Ivanov",
      "comments": null,
      "stats": "{'additions': 14, 'deletions': 2, 'total': 16}",
      "files": "{'userfiles/modules/microweber/toolbar/editor_tools/module_settings/index.php': {'additions': 14, 'deletions': 2, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/79c6914bab8c9da07ac950fda17648d08c68b130/userfiles%2Fmodules%2Fmicroweber%2Ftoolbar%2Feditor_tools%2Fmodule_settings%2Findex.php', 'patch': '@@ -87,14 +87,24 @@\\n     if (isset($_GET[\\'autosize\\'])) {\\n         $autoSize = $_GET[\\'autosize\\'];\\n     }\\n-    $autoSize = xss_clean($autoSize);\\n+    $autoSize = intval($autoSize);\\n \\n     $type = \\'\\';\\n     if (isset($_GET[\\'type\\'])) {\\n         $type = $_GET[\\'type\\'];\\n     }\\n     $type = xss_clean($type);\\n \\n+            $other = [\\n+                \\';\\',\\n+                \\'\\\\\\'\\',\\n+                \\'//\\',\\n+                \\'`\\',\\n+                \\'\\\\\\\\\\',\\n+\\n+            ];\\n+    $type = str_replace($other, \\'\\', $type);\\n+\\n     $mod_id = $mod_orig_id = false;\\n     $is_linked_mod = false;\\n \\n@@ -108,6 +118,8 @@\\n     if ($mod_id != $mod_orig_id) {\\n         $is_linked_mod = true;\\n     }\\n+\\n+\\n     ?>\\n \\n     <script type=\"text/javascript\">\\n@@ -124,7 +136,7 @@\\n         addIcon();\\n \\n         autoSize = <?php  print $autoSize; ?>;\\n-        settingsType = \\'<?php print $type; ?>\\';\\n+        settingsType = \\'<?php print htmlentities($type); ?>\\';\\n \\n         window.onbeforeunload = function () {\\n             $(document.body).addClass(\"mw-external-loading\")'}}",
      "message_norm": "update",
      "language": "ro",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['userfiles/modules/microweber/toolbar/editor_tools/module_settings/index.php'])",
      "num_files": 1.0
    },
    {
      "index": 1724,
      "vuln_id": "GHSA-ffhg-7mh4-33c4",
      "cwe_id": "{'CWE-347'}",
      "score": 7.5,
      "chain": "{'https://github.com/golang/crypto/commit/bac4c82f69751a6dd76e702d54b3ceb88adab236'}",
      "dataset": "osv",
      "summary": "Improper Verification of Cryptographic Signature in golang.org/x/crypto golang.org/x/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org/x/crypto/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.",
      "published_date": "2021-05-18",
      "chain_len": 1,
      "project": "https://github.com/golang/crypto",
      "commit_href": "https://github.com/golang/crypto/commit/bac4c82f69751a6dd76e702d54b3ceb88adab236",
      "commit_sha": "bac4c82f69751a6dd76e702d54b3ceb88adab236",
      "patch": "SINGLE",
      "chain_ord": "['bac4c82f69751a6dd76e702d54b3ceb88adab236']",
      "before_first_fix_commit": "{'1ad67e1f0ef495d4014b6ffd8f2cf80f91fffbce'}",
      "last_fix_commit": "bac4c82f69751a6dd76e702d54b3ceb88adab236",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/11/2020, 23:53:37",
      "message": "ssh: return an error for malformed ed25519 public keys rather than panic\n\nAn attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. Clients can deliver such a public key and signature\nto any golang.org/x/crypto/ssh server with a PublicKeyCallback, and\nservers can deliver them to any golang.org/x/crypto/ssh client.\n\nThis issue was discovered and reported by Alex Gaynor, Fish in a Barrel,\nand is tracked as CVE-2020-9283.\n\nChange-Id: Ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nReviewed-on: https://go-review.googlesource.com/c/crypto/+/220357\nRun-TryBot: Filippo Valsorda <filippo@golang.org>\nReviewed-by: Katie Hockman <katie@golang.org>\nTryBot-Result: Gobot Gobot <gobot@golang.org>",
      "author": "Filippo Valsorda",
      "comments": null,
      "stats": "{'additions': 20, 'deletions': 8, 'total': 28}",
      "files": "{'ssh/keys.go': {'additions': 20, 'deletions': 8, 'changes': 28, 'status': 'modified', 'raw_url': 'https://github.com/golang/crypto/raw/bac4c82f69751a6dd76e702d54b3ceb88adab236/ssh%2Fkeys.go', 'patch': '@@ -562,9 +562,11 @@ func parseED25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n-\\tkey := ed25519.PublicKey(w.KeyBytes)\\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\treturn (ed25519PublicKey)(key), w.Rest, nil\\n+\\treturn ed25519PublicKey(w.KeyBytes), w.Rest, nil\\n }\\n \\n func (k ed25519PublicKey) Marshal() []byte {\\n@@ -582,9 +584,11 @@ func (k ed25519PublicKey) Verify(b []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\tedKey := (ed25519.PublicKey)(k)\\n-\\tif ok := ed25519.Verify(edKey, b, sig.Blob); !ok {\\n+\\tif ok := ed25519.Verify(ed25519.PublicKey(k), b, sig.Blob); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -838,6 +842,10 @@ func parseSKEd25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n+\\n \\tkey := new(skEd25519PublicKey)\\n \\tkey.application = w.Application\\n \\tkey.PublicKey = ed25519.PublicKey(w.KeyBytes)\\n@@ -862,6 +870,9 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k.PublicKey); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n \\th := sha256.New()\\n \\th.Write([]byte(k.application))\\n@@ -898,8 +909,7 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\n \\toriginal := Marshal(blob)\\n \\n-\\tedKey := (ed25519.PublicKey)(k.PublicKey)\\n-\\tif ok := ed25519.Verify(edKey, original, edSig.Signature); !ok {\\n+\\tif ok := ed25519.Verify(k.PublicKey, original, edSig.Signature); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -1051,7 +1061,10 @@ func NewPublicKey(key interface{}) (PublicKey, error) {\\n \\tcase *dsa.PublicKey:\\n \\t\\treturn (*dsaPublicKey)(key), nil\\n \\tcase ed25519.PublicKey:\\n-\\t\\treturn (ed25519PublicKey)(key), nil\\n+\\t\\tif l := len(key); l != ed25519.PublicKeySize {\\n+\\t\\t\\treturn nil, fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t\\t}\\n+\\t\\treturn ed25519PublicKey(key), nil\\n \\tdefault:\\n \\t\\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)\\n \\t}\\n@@ -1304,7 +1317,6 @@ func parseOpenSSHPrivateKey(key []byte, decrypt openSSHDecryptFunc) (crypto.Priv\\n \\t\\treturn nil, errors.New(\"ssh: malformed OpenSSH key\")\\n \\t}\\n \\n-\\t// we only handle ed25519 and rsa keys currently\\n \\tswitch pk1.Keytype {\\n \\tcase KeyAlgoRSA:\\n \\t\\t// https://github.com/openssh/openssh-portable/blob/master/sshkey.c#L2760-L2773'}}",
      "message_norm": "ssh: return an error for malformed ed25519 public keys rather than panic\n\nan attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. clients can deliver such a public key and signature\nto any golang.org/x/crypto/ssh server with a publickeycallback, and\nservers can deliver them to any golang.org/x/crypto/ssh client.\n\nthis issue was discovered and reported by alex gaynor, fish in a barrel,\nand is tracked as cve-2020-9283.\n\nchange-id: ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nreviewed-on: https://go-review.googlesource.com/c/crypto/+/220357\nrun-trybot: filippo valsorda <filippo@golang.org>\nreviewed-by: katie hockman <katie@golang.org>\ntrybot-result: gobot gobot <gobot@golang.org>",
      "language": "en",
      "entities": "[('ssh', 'SECWORD', ''), ('error', 'FLAW', ''), ('ed25519', 'SHA', 'generic_sha'), ('public keys', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('ssh', 'SECWORD', ''), ('ed25519', 'SHA', 'generic_sha'), ('public key', 'SECWORD', ''), ('verify', 'ACTION', ''), ('signature', 'SECWORD', ''), ('public key', 'SECWORD', ''), ('signature', 'SECWORD', ''), ('golang.org/x/crypto/ssh', 'SECWORD', ''), ('server', 'SECWORD', ''), ('publickeycallback', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('golang.org/x/crypto/ssh', 'SECWORD', ''), ('issue', 'FLAW', ''), ('cve-2020-9283', 'VULNID', 'CVE'), ('https://go-review.googlesource.com/c/crypto/+/220357', 'SECWORD', ''), ('filippo@golang.org', 'EMAIL', ''), ('katie@golang.org', 'EMAIL', ''), ('gobot@golang.org', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ssh/keys.go'])",
      "num_files": 1.0
    },
    {
      "index": 2009,
      "vuln_id": "GHSA-h6wm-mr85-4h9g",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/neorazorx/facturascripts/commit/73a6595ca85984d65f656c6356fabb23d1936c54'}",
      "dataset": "osv",
      "summary": "Cross site scripting in facturascripts A Cross-site Scripting (XSS) vulnerability exists in the fsNick parameter in facturascripts prior to version 2022.06",
      "published_date": "2022-06-14",
      "chain_len": 1,
      "project": "https://github.com/neorazorx/facturascripts",
      "commit_href": "https://github.com/neorazorx/facturascripts/commit/73a6595ca85984d65f656c6356fabb23d1936c54",
      "commit_sha": "73a6595ca85984d65f656c6356fabb23d1936c54",
      "patch": "SINGLE",
      "chain_ord": "['73a6595ca85984d65f656c6356fabb23d1936c54']",
      "before_first_fix_commit": "{'298eb4b1a94c5898fde5a21e412955fc77a3ef93'}",
      "last_fix_commit": "73a6595ca85984d65f656c6356fabb23d1936c54",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2022, 09:29:31",
      "message": "Sanitized username when showing user not found message.\n------\nSaneado nombre de usuario al mostrar el mensaje de usuario no encontrado.",
      "author": "Carlos Garcia Gomez",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'Core/App/AppController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/NeoRazorX/facturascripts/raw/73a6595ca85984d65f656c6356fabb23d1936c54/Core%2FApp%2FAppController.php', 'patch': \"@@ -287,7 +287,7 @@ private function userAuth()\\n         }\\n \\n         $this->ipWarning();\\n-        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => $nick]);\\n+        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);\\n         return false;\\n     }\"}}",
      "message_norm": "sanitized username when showing user not found message.\n------\nsaneado nombre de usuario al mostrar el mensaje de usuario no encontrado.",
      "language": "en",
      "entities": "[('sanitized', 'SECWORD', ''), ('found', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['Core/App/AppController.php'])",
      "num_files": 1.0
    },
    {
      "index": 357,
      "vuln_id": "GHSA-44qp-9wwf-734r",
      "cwe_id": "{'CWE-787', 'CWE-120'}",
      "score": 7.6,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3'}",
      "dataset": "osv",
      "summary": "Heap overflow in Tensorflow ### Impact \nThe [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) is vulnerable to a heap overflow:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[-1,-1]],\n  values=[2],\n  dense_shape=[1, 1],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
      "published_date": "2022-02-09",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a",
      "commit_sha": "2b7100d6cdff36aa21010a82269bc05a6d1cc74a",
      "patch": "MULTI",
      "chain_ord": "['2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'adbbabdb0d3abb3cdeac69e38a96de1d678b24b3']",
      "before_first_fix_commit": "{'2b7100d6cdff36aa21010a82269bc05a6d1cc74a'}",
      "last_fix_commit": "adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/08/2021, 03:36:18",
      "message": "Cleanup and remove duplicate validation in `SparseCount`.\n\nWe have valdiation that is duplicated, checking different conditions, in different formats and failing to capture all cases. This should fix all the previous bugs.\n\nPiperOrigin-RevId: 414886981\nChange-Id: Ibf0bba0beb057b76d505324bb9487565daf95f01",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 21, 'deletions': 27, 'total': 48}",
      "files": "{'tensorflow/core/kernels/count_ops.cc': {'additions': 21, 'deletions': 27, 'changes': 48, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/2b7100d6cdff36aa21010a82269bc05a6d1cc74a/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -185,6 +185,27 @@ class SparseCount : public OpKernel {\\n                 errors::InvalidArgument(\\n                     \"Input indices must be a 2-dimensional tensor. Got: \",\\n                     indices.shape().DebugString()));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(values.shape()),\\n+                errors::InvalidArgument(\"Input values must be a vector. Got: \",\\n+                                        values.shape().DebugString()));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(shape.shape()),\\n+                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\\n+                                        shape.shape().DebugString()));\\n+    OP_REQUIRES(context,\\n+                values.shape().dim_size(0) == indices.shape().dim_size(0),\\n+                errors::InvalidArgument(\\n+                    \"Number of values must match first dimension of indices.\",\\n+                    \"Got \", values.shape().dim_size(0),\\n+                    \" values, indices shape: \", indices.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, shape.shape().dim_size(0) == indices.shape().dim_size(1),\\n+        errors::InvalidArgument(\\n+            \"Number of dimensions must match second dimension of indices.\",\\n+            \"Got \", shape.shape().dim_size(0),\\n+            \" dimensions, indices shape: \", indices.shape().DebugString()));\\n+    OP_REQUIRES(context, shape.NumElements() > 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n \\n     if (use_weights) {\\n       OP_REQUIRES(\\n@@ -195,28 +216,11 @@ class SparseCount : public OpKernel {\\n               \"; values shape: \", values.shape().DebugString()));\\n     }\\n \\n-    OP_REQUIRES(context, shape.NumElements() != 0,\\n-                errors::InvalidArgument(\\n-                    \"The shape argument requires at least one element.\"));\\n-\\n     bool is_1d = shape.NumElements() == 1;\\n     auto shape_vector = shape.flat<int64_t>();\\n     int num_batches = is_1d ? 1 : shape_vector(0);\\n     int num_values = values.NumElements();\\n \\n-    for (int b = 0; b < shape_vector.size(); b++) {\\n-      OP_REQUIRES(context, shape_vector(b) >= 0,\\n-                  errors::InvalidArgument(\\n-                      \"Elements in dense_shape must be >= 0. Instead got:\",\\n-                      shape.DebugString()));\\n-    }\\n-\\n-    OP_REQUIRES(context, num_values == indices.shape().dim_size(0),\\n-                errors::InvalidArgument(\\n-                    \"Number of values must match first dimension of indices.\",\\n-                    \"Got \", num_values,\\n-                    \" values, indices shape: \", indices.shape().DebugString()));\\n-\\n     const auto indices_values = indices.matrix<int64_t>();\\n     const auto values_values = values.flat<T>();\\n     const auto weight_values = weights.flat<W>();\\n@@ -225,16 +229,6 @@ class SparseCount : public OpKernel {\\n \\n     T max_value = 0;\\n \\n-    OP_REQUIRES(context, num_values <= indices.shape().dim_size(0),\\n-                errors::InvalidArgument(\\n-                    \"The first dimension of indices must be equal to or \"\\n-                    \"greather than number of values. ( \",\\n-                    indices.shape().dim_size(0), \" vs. \", num_values, \" )\"));\\n-    OP_REQUIRES(context, indices.shape().dim_size(1) > 0,\\n-                errors::InvalidArgument(\"The second dimension of indices must \"\\n-                                        \"be greater than 0. Received: \",\\n-                                        indices.shape().dim_size(1)));\\n-\\n     for (int idx = 0; idx < num_values; ++idx) {\\n       int batch = is_1d ? 0 : indices_values(idx, 0);\\n       if (batch >= num_batches) {'}}",
      "message_norm": "cleanup and remove duplicate validation in `sparsecount`.\n\nwe have valdiation that is duplicated, checking different conditions, in different formats and failing to capture all cases. this should fix all the previous bugs.\n\npiperorigin-revid: 414886981\nchange-id: ibf0bba0beb057b76d505324bb9487565daf95f01",
      "language": "en",
      "entities": "[('remove', 'ACTION', ''), ('duplicate validation', 'SECWORD', ''), ('fix', 'ACTION', ''), ('bugs', 'FLAW', ''), ('414886981', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/count_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2350,
      "vuln_id": "GHSA-m52x-29pq-w3vv",
      "cwe_id": "{'CWE-79'}",
      "score": 4.8,
      "chain": "{'https://github.com/mpetroff/pannellum/commit/cc2f3d99953de59db908e0c6efd1c2c17f7c6914'}",
      "dataset": "osv",
      "summary": "Pannellum Cross-Site Scripting due to data not being sanitized for URIs or vbscript Versions of `pannellum` prior to 2.5.6 are vulnerable to Cross-Site Scripting (XSS). The package fails to sanitize URLs for data URIs, which may allow attackers to execute arbitrary code in a victim's browser. \n\n\n## Recommendation\n\nUpgrade to version 2.5.6 or later.",
      "published_date": "2019-11-22",
      "chain_len": 1,
      "project": "https://github.com/mpetroff/pannellum",
      "commit_href": "https://github.com/mpetroff/pannellum/commit/cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
      "commit_sha": "cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
      "patch": "SINGLE",
      "chain_ord": "['cc2f3d99953de59db908e0c6efd1c2c17f7c6914']",
      "before_first_fix_commit": "{'40111b237e763821437f501c94d8511022274dc3', 'f42e80facb41bb97321a0e2056d9ef5a4779e627'}",
      "last_fix_commit": "cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/22/2019, 01:35:45",
      "message": "Merge pull request from GHSA-m52x-29pq-w3vv\n\nFix potential XSS vulnerability",
      "author": "Matthew Petroff",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 6, 'total': 19}",
      "files": "{'src/js/pannellum.js': {'additions': 13, 'deletions': 6, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/mpetroff/pannellum/raw/cc2f3d99953de59db908e0c6efd1c2c17f7c6914/src%2Fjs%2Fpannellum.js', 'patch': \"@@ -1719,7 +1719,7 @@ function createHotSpot(hs) {\\n         if (config.basePath && !absoluteURL(imgp))\\n             imgp = config.basePath + imgp;\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);\\n+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);\\n         a.target = '_blank';\\n         span.appendChild(a);\\n         var image = document.createElement('img');\\n@@ -1731,7 +1731,7 @@ function createHotSpot(hs) {\\n         span.style.maxWidth = 'initial';\\n     } else if (hs.URL) {\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL);\\n+        a.href = sanitizeURL(hs.URL, true);\\n         if (hs.attributes) {\\n             for (var key in hs.attributes) {\\n                 a.setAttribute(key, hs.attributes[key]);\\n@@ -2005,7 +2005,7 @@ function processOptions(isPreview) {\\n                 var authorText = escapeHTML(config[key]);\\n                 if (config.authorURL) {\\n                     var authorLink = document.createElement('a');\\n-                    authorLink.href = sanitizeURL(config['authorURL']);\\n+                    authorLink.href = sanitizeURL(config['authorURL'], true);\\n                     authorLink.target = '_blank';\\n                     authorLink.innerHTML = escapeHTML(config[key]);\\n                     authorText = authorLink.outerHTML;\\n@@ -2016,7 +2016,7 @@ function processOptions(isPreview) {\\n             \\n             case 'fallback':\\n                 var link = document.createElement('a');\\n-                link.href = sanitizeURL(config[key]);\\n+                link.href = sanitizeURL(config[key], true);\\n                 link.target = '_blank';\\n                 link.textContent = 'Click here to view this panorama in an alternative viewer.';\\n                 var message = document.createElement('p');\\n@@ -2378,10 +2378,17 @@ function escapeHTML(s) {\\n  * The URL cannot be of protocol 'javascript'.\\n  * @private\\n  * @param {string} url - URL to sanitize\\n+ * @param {boolean} href - True if URL is for link (blocks data URIs)\\n  * @returns {string} Sanitized URL\\n  */\\n-function sanitizeURL(url) {\\n-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {\\n+function sanitizeURL(url, href) {\\n+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||\\n+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {\\n+        console.log('Script URL removed.');\\n+        return 'about:blank';\\n+    }\\n+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {\\n+        console.log('Data URI removed from link.');\\n         return 'about:blank';\\n     }\\n     return url;\"}}",
      "message_norm": "merge pull request from ghsa-m52x-29pq-w3vv\n\nfix potential xss vulnerability",
      "language": "ca",
      "entities": "[('ghsa-m52x-29pq-w3vv', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/js/pannellum.js'])",
      "num_files": 1.0
    },
    {
      "index": 10,
      "vuln_id": "GHSA-23f2-vgr6-fwv7",
      "cwe_id": "{'CWE-74'}",
      "score": 0.0,
      "chain": "{'https://github.com/librenms/librenms/commit/8b82341cb742e7bd4966964b399012f7ba017e0b'}",
      "dataset": "osv",
      "summary": "Command injection in librenms LibreNMS v22.3.0 was discovered to contain multiple command injection vulnerabilities via the service_ip, hostname, and service_param parameters.",
      "published_date": "2022-06-03",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/commit/8b82341cb742e7bd4966964b399012f7ba017e0b",
      "commit_sha": "8b82341cb742e7bd4966964b399012f7ba017e0b",
      "patch": "SINGLE",
      "chain_ord": "['8b82341cb742e7bd4966964b399012f7ba017e0b']",
      "before_first_fix_commit": "{'3d0e095eb777845c39ed11d0981e0cef143d9f66'}",
      "last_fix_commit": "8b82341cb742e7bd4966964b399012f7ba017e0b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/21/2022, 02:32:36",
      "message": "Fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* Clean more variables\r\n\r\n* Update services.inc.php\r\n\r\n* Update services.inc.php",
      "author": "Tony Murray",
      "comments": "{'com_1': {'author': 'bakerds', 'datetime': '04/22/2022, 11:25:17', 'body': 'Hey @murrant, it looks like this breaks using IPv6 literals in the IP field of a service'}}",
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'includes/services.inc.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/8b82341cb742e7bd4966964b399012f7ba017e0b/includes%2Fservices.inc.php', 'patch': \"@@ -4,6 +4,7 @@\\n use LibreNMS\\\\Alert\\\\AlertRules;\\n use LibreNMS\\\\Config;\\n use LibreNMS\\\\RRD\\\\RrdDefinition;\\n+use LibreNMS\\\\Util\\\\Clean;\\n \\n function get_service_status($device = null)\\n {\\n@@ -120,6 +121,10 @@ function poll_service($service)\\n {\\n     $update = [];\\n     $old_status = $service['service_status'];\\n+    $service['service_type'] = Clean::fileName($service['service_type']);\\n+    $service['service_ip'] = Clean::fileName($service['service_ip']);\\n+    $service['hostname'] = Clean::fileName($service['hostname']);\\n+    $service['overwrite_ip'] = Clean::fileName($service['overwrite_ip']);\\n     $check_cmd = '';\\n \\n     // if we have a script for this check, use it.\\n@@ -130,7 +135,7 @@ function poll_service($service)\\n \\n     // If we do not have a cmd from the check script, build one.\\n     if ($check_cmd == '') {\\n-        $check_cmd = Config::get('nagios_plugins') . '/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ? $service['service_ip'] : $service['hostname']);\\n+        $check_cmd = Config::get('nagios_plugins') . '/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ?: $service['hostname']);\\n         $check_cmd .= ' ' . $service['service_param'];\\n     }\"}}",
      "message_norm": "fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* clean more variables\r\n\r\n* update services.inc.php\r\n\r\n* update services.inc.php",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('command injection', 'SECWORD', ''), ('#13932', 'ISSUE', ''), ('command injection', 'SECWORD', ''), ('update', 'ACTION', ''), ('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['includes/services.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 1175,
      "vuln_id": "GHSA-896r-f27r-55mw",
      "cwe_id": "{'CWE-1321', 'CWE-915'}",
      "score": 9.8,
      "chain": "{'https://github.com/kriszyp/json-schema/commit/b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741', 'https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa'}",
      "dataset": "osv",
      "summary": "json-schema is vulnerable to Prototype Pollution json-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
      "published_date": "2021-11-19",
      "chain_len": 3,
      "project": "https://github.com/kriszyp/json-schema",
      "commit_href": "https://github.com/kriszyp/json-schema/commit/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
      "commit_sha": "f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
      "patch": "MULTI",
      "chain_ord": "['22f146111f541d9737e832823699ad3528ca7741', 'b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa']",
      "before_first_fix_commit": "{'ef60987a9a14b9d9c739384460044ba53cd9b9a2'}",
      "last_fix_commit": "f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
      "chain_ord_pos": 3.0,
      "commit_datetime": "11/02/2021, 02:47:49",
      "message": "Use a little more robust method of checking instances",
      "author": "Kris Zyp",
      "comments": "{'com_1': {'author': 'JamieSlome', 'datetime': '11/02/2021, 10:48:47', 'body': '@kriszyp - just to confirm, does this fix the report submitted by the researcher [here](https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9/)?'}, 'com_2': {'author': 'kriszyp', 'datetime': '11/02/2021, 11:20:36', 'body': '> does this fix the report submitted by the researcher here?\\r\\n\\r\\nYes, along with https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741, that is intended to fix that security issue.'}, 'com_3': {'author': 'JamieSlome', 'datetime': '11/02/2021, 12:10:20', 'body': '@kriszyp - thanks for the heads up! Are you able to confirm this on the report, and we can go ahead and publish a CVE / make the report public?\\r\\n\\r\\n(cc @yoshino-s)'}, 'com_4': {'author': 'kriszyp', 'datetime': '11/09/2021, 02:04:23', 'body': 'Yes, I have published the updated version with the fix.'}, 'com_5': {'author': 'JamieSlome', 'datetime': '11/09/2021, 07:55:24', 'body': '@kriszyp - could you update this on the report: https://huntr.dev/bounties/bb6ccd63-f505-4e3a-b55f-cd2662c261a9/\\r\\n\\r\\nYou can also decide if you would like to keep the bounty for yourself or return it to the prize pot \ud83d\udc4c'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/validate.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/kriszyp/json-schema/raw/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa/lib%2Fvalidate.js', 'patch': \"@@ -208,7 +208,7 @@ var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*O\\n \\t\\t\\t\\n \\t\\t\\tfor(var i in objTypeDef){ \\n \\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){\\n-\\t\\t\\t\\t\\tvar value = instance[i];\\n+\\t\\t\\t\\t\\tvar value = instance.hasOwnProperty(i) ? instance[i] : undefined;\\n \\t\\t\\t\\t\\t// skip _not_ specified properties\\n \\t\\t\\t\\t\\tif (value === undefined && options.existingOnly) continue;\\n \\t\\t\\t\\t\\tvar propDef = objTypeDef[i];\"}}",
      "message_norm": "use a little more robust method of checking instances",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/validate.js'])",
      "num_files": 1.0
    },
    {
      "index": 1150,
      "vuln_id": "GHSA-8687-vv9j-hgph",
      "cwe_id": "{'CWE-20'}",
      "score": 9.1,
      "chain": "{'https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c'}",
      "dataset": "osv",
      "summary": "Improper Input Validation in Automattic Mongoose Automattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a _bsontype attribute is ignored. For example, adding \"_bsontype\":\"a\" can sometimes interfere with a query filter. NOTE: this CVE is about Mongoose's failure to work around this _bsontype special case that exists in older versions of the bson parser (aka the mongodb/js-bson project).",
      "published_date": "2019-10-22",
      "chain_len": 1,
      "project": "https://github.com/Automattic/mongoose",
      "commit_href": "https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "commit_sha": "f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "patch": "SINGLE",
      "chain_ord": "['f3eca5b94d822225c04e96cbeed9f095afb3c31c']",
      "before_first_fix_commit": "{'cc10e0dc441f469330c1af2822d171fcd6fa8f89'}",
      "last_fix_commit": "f3eca5b94d822225c04e96cbeed9f095afb3c31c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/09/2019, 22:41:25",
      "message": "fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries\n\nFix #8222",
      "author": "Valeri Karpov",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'lib/cast.js': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/Automattic/mongoose/raw/f3eca5b94d822225c04e96cbeed9f095afb3c31c/lib%2Fcast.js', 'patch': \"@@ -27,6 +27,12 @@ module.exports = function cast(schema, obj, options, context) {\\n     throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\\n   }\\n \\n+  // bson 1.x has the unfortunate tendency to remove filters that have a top-level\\n+  // `_bsontype` property. Should remove this when we upgrade to bson 4.x. See gh-8222\\n+  if (obj.hasOwnProperty('_bsontype')) {\\n+    delete obj._bsontype;\\n+  }\\n+\\n   const paths = Object.keys(obj);\\n   let i = paths.length;\\n   let _keys;\"}}",
      "message_norm": "fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries\n\nfix #8222",
      "language": "fr",
      "entities": "[('fix(query', 'ACTION', ''), ('prevent', 'ACTION', ''), ('fix', 'ACTION', ''), ('#8222', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/cast.js'])",
      "num_files": 1.0
    },
    {
      "index": 1599,
      "vuln_id": "GHSA-crch-j389-5f84",
      "cwe_id": "{'CWE-787'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683'}",
      "dataset": "osv",
      "summary": "Heap OOB write in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`/`ArgMax`](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59):\n\n```cc\nTfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\nint j = 0;\nfor (int i = 0; i < NumDimensions(input); ++i) { \n  if (i != axis_value) {\n    output_dims->data[j] = SizeOfDimension(input, i);\n    ++j;\n  }\n}\n```\n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`.\n  \n### Patches \nWe have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683",
      "commit_sha": "c59c37e7b2d563967da813fa50fe20b21f4da683",
      "patch": "SINGLE",
      "chain_ord": "['c59c37e7b2d563967da813fa50fe20b21f4da683']",
      "before_first_fix_commit": "{'102b211d892f3abc14f845a72047809b39cc65ab'}",
      "last_fix_commit": "c59c37e7b2d563967da813fa50fe20b21f4da683",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/29/2021, 00:50:10",
      "message": "Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/lite/kernels/arg_min_max.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c59c37e7b2d563967da813fa50fe20b21f4da683/tensorflow%2Flite%2Fkernels%2Farg_min_max.cc', 'patch': '@@ -48,6 +48,9 @@ TfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\\n     axis_value += NumDimensions(input);\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n+\\n   // Copy the input dimensions to output except the axis dimension.\\n   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\\n   int j = 0;'}}",
      "message_norm": "prevent array write out-of-bounds.\n\nif user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\npiperorigin-revid: 371023299\nchange-id: i9eca37ffc2b29e8e48710f500701270ef0790224",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('issues', 'FLAW', ''), ('371023299', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/arg_min_max.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3067,
      "vuln_id": "GHSA-v6wr-fch2-vm5w",
      "cwe_id": "{'CWE-200'}",
      "score": 5.9,
      "chain": "{'https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects com.orientechnologies:orientdb-studio server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.",
      "published_date": "2018-10-18",
      "chain_len": 1,
      "project": "https://github.com/orientechnologies/orientdb",
      "commit_href": "https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104",
      "commit_sha": "668ece96be210e742a4e2820a3085b215cf55104",
      "patch": "SINGLE",
      "chain_ord": "['668ece96be210e742a4e2820a3085b215cf55104']",
      "before_first_fix_commit": "{'41fd20ab022e22bce32d62372dbe279693322086'}",
      "last_fix_commit": "668ece96be210e742a4e2820a3085b215cf55104",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/04/2015, 14:45:12",
      "message": "Adopted SecureRandom to avoid predicable random numbers in session",
      "author": "lvca",
      "comments": null,
      "stats": "{'additions': 136, 'deletions': 135, 'total': 271}",
      "files": "{'server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java': {'additions': 136, 'deletions': 135, 'changes': 271, 'status': 'modified', 'raw_url': 'https://github.com/orientechnologies/orientdb/raw/668ece96be210e742a4e2820a3085b215cf55104/server%2Fsrc%2Fmain%2Fjava%2Fcom%2Forientechnologies%2Forient%2Fserver%2Fnetwork%2Fprotocol%2Fhttp%2FOHttpSessionManager.java', 'patch': '@@ -1,141 +1,142 @@\\n /*\\r\\n-    *\\r\\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n-    *  *\\r\\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n-    *  *  you may not use this file except in compliance with the License.\\r\\n-    *  *  You may obtain a copy of the License at\\r\\n-    *  *\\r\\n-    *  *       http://www.apache.org/licenses/LICENSE-2.0\\r\\n-    *  *\\r\\n-    *  *  Unless required by applicable law or agreed to in writing, software\\r\\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n-    *  *  See the License for the specific language governing permissions and\\r\\n-    *  *  limitations under the License.\\r\\n-    *  *\\r\\n-    *  * For more information: http://www.orientechnologies.com\\r\\n-    *\\r\\n-    */\\r\\n+ *\\r\\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\\r\\n+ *  *\\r\\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\\r\\n+ *  *  you may not use this file except in compliance with the License.\\r\\n+ *  *  You may obtain a copy of the License at\\r\\n+ *  *\\r\\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\\r\\n+ *  *\\r\\n+ *  *  Unless required by applicable law or agreed to in writing, software\\r\\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\\r\\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n+ *  *  See the License for the specific language governing permissions and\\r\\n+ *  *  limitations under the License.\\r\\n+ *  *\\r\\n+ *  * For more information: http://www.orientechnologies.com\\r\\n+ *\\r\\n+ */\\r\\n package com.orientechnologies.orient.server.network.protocol.http;\\r\\n \\r\\n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\\r\\n- import com.orientechnologies.common.log.OLogManager;\\r\\n- import com.orientechnologies.orient.core.Orient;\\r\\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n-\\r\\n- import java.util.HashMap;\\r\\n- import java.util.Iterator;\\r\\n- import java.util.Map;\\r\\n- import java.util.Map.Entry;\\r\\n- import java.util.Random;\\r\\n- import java.util.TimerTask;\\r\\n+import com.orientechnologies.common.log.OLogManager;\\r\\n+import com.orientechnologies.orient.core.Orient;\\r\\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\\r\\n+\\r\\n+import java.security.SecureRandom;\\r\\n+import java.util.HashMap;\\r\\n+import java.util.Iterator;\\r\\n+import java.util.Map;\\r\\n+import java.util.Map.Entry;\\r\\n+import java.util.Random;\\r\\n+import java.util.TimerTask;\\r\\n \\r\\n /**\\r\\n-  * Handles the HTTP sessions such as a real HTTP Server.\\r\\n-  *\\r\\n-  * @author Luca Garulli\\r\\n-  */\\r\\n- public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n-   private int                              expirationTime;\\r\\n-   private Random                           random   = new Random();\\r\\n-\\r\\n-   protected OHttpSessionManager() {\\r\\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n-\\r\\n-     Orient.instance().scheduleTask(new TimerTask() {\\r\\n-       @Override\\r\\n-       public void run() {\\r\\n-         final int expired = checkSessionsValidity();\\r\\n-         if (expired > 0)\\r\\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n-       }\\r\\n-     }, expirationTime, expirationTime);\\r\\n-   }\\r\\n-\\r\\n-   public int checkSessionsValidity() {\\r\\n-     int expired = 0;\\r\\n-\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final long now = System.currentTimeMillis();\\r\\n-\\r\\n-       Entry<String, OHttpSession> s;\\r\\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n-         s = it.next();\\r\\n-\\r\\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n-           // REMOVE THE SESSION\\r\\n-           it.remove();\\r\\n-           expired++;\\r\\n-         }\\r\\n-       }\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-\\r\\n-     return expired;\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession[] getSessions() {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession getSession(final String iId) {\\r\\n-     acquireSharedLock();\\r\\n-     try {\\r\\n-\\r\\n-       final OHttpSession sess = sessions.get(iId);\\r\\n-       if (sess != null)\\r\\n-         sess.updateLastUpdatedOn();\\r\\n-       return sess;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseSharedLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n-       return id;\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public OHttpSession removeSession(final String iSessionId) {\\r\\n-     acquireExclusiveLock();\\r\\n-     try {\\r\\n-       return sessions.remove(iSessionId);\\r\\n-\\r\\n-     } finally {\\r\\n-       releaseExclusiveLock();\\r\\n-     }\\r\\n-   }\\r\\n-\\r\\n-   public int getExpirationTime() {\\r\\n-     return expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public void setExpirationTime(int expirationTime) {\\r\\n-     this.expirationTime = expirationTime;\\r\\n-   }\\r\\n-\\r\\n-   public static OHttpSessionManager getInstance() {\\r\\n-     return instance;\\r\\n-   }\\r\\n- }\\r\\n+ * Handles the HTTP sessions such as a real HTTP Server.\\r\\n+ *\\r\\n+ * @author Luca Garulli\\r\\n+ */\\r\\n+public class OHttpSessionManager extends OSharedResourceAbstract {\\r\\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\\r\\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\\r\\n+  private int                              expirationTime;\\r\\n+  private Random                           random   = new SecureRandom();\\r\\n+\\r\\n+  protected OHttpSessionManager() {\\r\\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\\r\\n+\\r\\n+    Orient.instance().scheduleTask(new TimerTask() {\\r\\n+      @Override\\r\\n+      public void run() {\\r\\n+        final int expired = checkSessionsValidity();\\r\\n+        if (expired > 0)\\r\\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\\r\\n+      }\\r\\n+    }, expirationTime, expirationTime);\\r\\n+  }\\r\\n+\\r\\n+  public int checkSessionsValidity() {\\r\\n+    int expired = 0;\\r\\n+\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final long now = System.currentTimeMillis();\\r\\n+\\r\\n+      Entry<String, OHttpSession> s;\\r\\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\\r\\n+        s = it.next();\\r\\n+\\r\\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\\r\\n+          // REMOVE THE SESSION\\r\\n+          it.remove();\\r\\n+          expired++;\\r\\n+        }\\r\\n+      }\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+\\r\\n+    return expired;\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession[] getSessions() {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession getSession(final String iId) {\\r\\n+    acquireSharedLock();\\r\\n+    try {\\r\\n+\\r\\n+      final OHttpSession sess = sessions.get(iId);\\r\\n+      if (sess != null)\\r\\n+        sess.updateLastUpdatedOn();\\r\\n+      return sess;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseSharedLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\\r\\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\\r\\n+      return id;\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public OHttpSession removeSession(final String iSessionId) {\\r\\n+    acquireExclusiveLock();\\r\\n+    try {\\r\\n+      return sessions.remove(iSessionId);\\r\\n+\\r\\n+    } finally {\\r\\n+      releaseExclusiveLock();\\r\\n+    }\\r\\n+  }\\r\\n+\\r\\n+  public int getExpirationTime() {\\r\\n+    return expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public void setExpirationTime(int expirationTime) {\\r\\n+    this.expirationTime = expirationTime;\\r\\n+  }\\r\\n+\\r\\n+  public static OHttpSessionManager getInstance() {\\r\\n+    return instance;\\r\\n+  }\\r\\n+}'}}",
      "message_norm": "adopted securerandom to avoid predicable random numbers in session",
      "language": "en",
      "entities": "[('securerandom', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java'])",
      "num_files": 1.0
    },
    {
      "index": 1932,
      "vuln_id": "GHSA-grw5-g9h2-wpg8",
      "cwe_id": "{'CWE-79'}",
      "score": 6.8,
      "chain": "{'https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in bootstrap-table Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties.",
      "published_date": "2022-05-17",
      "chain_len": 1,
      "project": "https://github.com/wenzhixin/bootstrap-table",
      "commit_href": "https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
      "commit_sha": "b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
      "patch": "SINGLE",
      "chain_ord": "['b4a1e5dd332be652e0bc376fd9256886cf4bbde9']",
      "before_first_fix_commit": "{'55d3760df3d226ac1150d7ddcbfd0ff6bd1c53c2'}",
      "last_fix_commit": "b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/10/2022, 02:59:07",
      "message": "Fixed XSS vulnerability bug by onCellHtmlData",
      "author": "zhixin",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 16, 'total': 20}",
      "files": "{'src/extensions/export/bootstrap-table-export.js': {'additions': 4, 'deletions': 16, 'changes': 20, 'status': 'modified', 'raw_url': 'https://github.com/wenzhixin/bootstrap-table/raw/b4a1e5dd332be652e0bc376fd9256886cf4bbde9/src%2Fextensions%2Fexport%2Fbootstrap-table-export.js', 'patch': \"@@ -23,15 +23,7 @@ $.extend($.fn.bootstrapTable.defaults, {\\n   showExport: false,\\n   exportDataType: 'basic', // basic, all, selected\\n   exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],\\n-  exportOptions: {\\n-    onCellHtmlData (cell, rowIndex, colIndex, htmlData) {\\n-      if (cell.is('th')) {\\n-        return cell.find('.th-inner').text()\\n-      }\\n-\\n-      return htmlData\\n-    }\\n-  },\\n+  exportOptions: {},\\n   exportFooter: false\\n })\\n \\n@@ -162,13 +154,9 @@ $.BootstrapTable = class extends $.BootstrapTable {\\n     $exportButtons.click(e => {\\n       e.preventDefault()\\n \\n-      const type = $(e.currentTarget).data('type')\\n-      const exportOptions = {\\n-        type,\\n-        escape: false\\n-      }\\n-\\n-      this.exportTable(exportOptions)\\n+      this.exportTable({\\n+        type: $(e.currentTarget).data('type')\\n+      })\\n     })\\n     this.handleToolbar()\\n   }\"}}",
      "message_norm": "fixed xss vulnerability bug by oncellhtmldata",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('bug', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/extensions/export/bootstrap-table-export.js'])",
      "num_files": 1.0
    },
    {
      "index": 1486,
      "vuln_id": "GHSA-c558-5gfm-p2r8",
      "cwe_id": "{'CWE-79'}",
      "score": 7.1,
      "chain": "{'https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5', 'https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d', 'https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7', 'https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a'}",
      "dataset": "osv",
      "summary": "JSPUI spellcheck and autocomplete tools vulnerable to Cross Site Scripting ### Impact\nThe JSPUI spellcheck \"Did you mean\" HTML escapes the data-spell attribute in the link, but not the actual displayed text.  Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.4 via two commits: \n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7\n* 6.x patch files available (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/ebb83a75234d3de9be129464013e998dc929b68d.patch\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7.patch\n\n_DSpace 5.x:_\n* Fixed in 5.11 via two commits: \n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5\n* 5.x patch files available (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n    * Fix for spellcheck: https://github.com/DSpace/DSpace/commit/c89e493e517b424dea6175caba54e91d3847fc3a.patch\n    * Fix for autocomplete: https://github.com/DSpace/DSpace/commit/6f75bb084ab1937d094208c55cd84340040bcbb5.patch\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs / configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered & reported by Hassan Bhuiyan (Brunel University London)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
      "published_date": "2022-08-06",
      "chain_len": 4,
      "project": "https://github.com/DSpace/DSpace",
      "commit_href": "https://github.com/DSpace/DSpace/commit/35030a23e48b5946f5853332c797e1c4adea7bb7",
      "commit_sha": "35030a23e48b5946f5853332c797e1c4adea7bb7",
      "patch": "MULTI",
      "chain_ord": "['ebb83a75234d3de9be129464013e998dc929b68d', '35030a23e48b5946f5853332c797e1c4adea7bb7', 'c89e493e517b424dea6175caba54e91d3847fc3a', '6f75bb084ab1937d094208c55cd84340040bcbb5']",
      "before_first_fix_commit": "{'d1dd7d23329ef055069759df15cfa200c8e32e54'}",
      "last_fix_commit": "6f75bb084ab1937d094208c55cd84340040bcbb5",
      "chain_ord_pos": 2.0,
      "commit_datetime": "04/08/2020, 01:19:14",
      "message": "[DS-4453] Fix XSS handling in JSPUI discovery autocomplete",
      "author": "Kim Shepherd",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'dspace-jspui/src/main/webapp/search/discovery.jsp': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/DSpace/DSpace/raw/35030a23e48b5946f5853332c797e1c4adea7bb7/dspace-jspui%2Fsrc%2Fmain%2Fwebapp%2Fsearch%2Fdiscovery.jsp', 'patch': '@@ -147,7 +147,7 @@\\n \\t\\t\\t\\t\\t\\t\\t\\t\\ttmp_val = item.displayedValue;\\n \\t\\t\\t\\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\\t\\t\\treturn {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tlabel: item.displayedValue + \" (\" + item.count + \")\",\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\tlabel: escapeHtml(item.displayedValue) + \" (\" + item.count + \")\",\\n \\t\\t\\t\\t\\t\\t\\t\\t\\tvalue: tmp_val\\n \\t\\t\\t\\t\\t\\t\\t\\t};\\n \\t\\t\\t\\t\\t\\t\\t}))\\t\\t\\t\\n@@ -159,6 +159,11 @@\\n \\tfunction validateFilters() {\\n \\t\\treturn document.getElementById(\"filterquery\").value.length > 0;\\n \\t}\\n+\\t// Generic HTML escape utility\\n+\\tvar escapeHtml = s => (s + \\'\\').replace(/[&<>\"\\']/g, m => ({\\n+\\t\\t\\'&\\': \\'&amp;\\', \\'<\\': \\'&lt;\\', \\'>\\': \\'&gt;\\',\\n+\\t\\t\\'\"\\': \\'&quot;\\', \"\\'\": \\'&#39;\\'\\n+\\t})[m]);\\n </script>\\t\\t\\n </c:set>'}}",
      "message_norm": "[ds-4453] fix xss handling in jspui discovery autocomplete",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['dspace-jspui/src/main/webapp/search/discovery.jsp'])",
      "num_files": 1.0
    },
    {
      "index": 1059,
      "vuln_id": "GHSA-7q4h-pj78-j7vg",
      "cwe_id": "{'CWE-400', 'CWE-918'}",
      "score": 7.5,
      "chain": "{'https://github.com/apache/cxf/commit/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https://github.com/apache/cxf/commit/40503a53914758759894f704bbf139ae89ace286'}",
      "dataset": "osv",
      "summary": "Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
      "published_date": "2021-05-13",
      "chain_len": 2,
      "project": "https://github.com/apache/cxf",
      "commit_href": "https://github.com/apache/cxf/commit/40503a53914758759894f704bbf139ae89ace286",
      "commit_sha": "40503a53914758759894f704bbf139ae89ace286",
      "patch": "MULTI",
      "chain_ord": "['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
      "before_first_fix_commit": "{'40503a53914758759894f704bbf139ae89ace286'}",
      "last_fix_commit": "aa789c5c4686597a7bdef2443909ab491fc2bc04",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/06/2021, 09:30:08",
      "message": "Disallow OAuth2 request_uri by default",
      "author": "Colm O hEigeartaigh",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 4, 'total': 17}",
      "files": "{'rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/JwtRequestCodeFilter.java': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/apache/cxf/raw/40503a53914758759894f704bbf139ae89ace286/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -42,6 +42,7 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    private static final String REQUEST_URI_CONTENT_TYPE = \"application/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n     private boolean verifyWithClientCertificates;\\n@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         if (requestToken == null) {\\n             String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n-                requestToken = WebClient.create(requestUri).get(String.class);\\n+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n         }\\n         if (requestToken != null) {\\n@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         }\\n         return params;\\n     }\\n-    private boolean isRequestUriValid(Client client, String requestUri) {\\n-        //TODO: consider restricting to specific hosts\\n-        return requestUri != null && requestUri.startsWith(\"https://\");\\n+\\n+    /**\\n+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,\\n+     * as otherwise it could lead to a security problem\\n+     * (https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-30#section-10.4)\\n+     * @param client the Client object\\n+     * @param requestUri the request_uri parameter to validate\\n+     * @return whether the requestUri is permitted or not\\n+     */\\n+    protected boolean isRequestUriValid(Client client, String requestUri) {\\n+        return false;\\n     }\\n     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {\\n         if (verifyWithClientCertificates) {'}}",
      "message_norm": "disallow oauth2 request_uri by default",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/JwtRequestCodeFilter.java'])",
      "num_files": 1.0
    },
    {
      "index": 744,
      "vuln_id": "GHSA-6465-r752-2h8v",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/neorazorx/facturascripts/commit/8e31d8434014a6d1e8791a489d84268fd74b0c9a'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in facturascripts Reflected cross-site scripting using url based payload in GitHub repository neorazorx/facturascripts prior to 2022.08. This can lead to theft of a user's cookies, which in turn could lead to account takeover or do other malicious activities in a victim's browser.",
      "published_date": "2022-05-13",
      "chain_len": 1,
      "project": "https://github.com/neorazorx/facturascripts",
      "commit_href": "https://github.com/neorazorx/facturascripts/commit/8e31d8434014a6d1e8791a489d84268fd74b0c9a",
      "commit_sha": "8e31d8434014a6d1e8791a489d84268fd74b0c9a",
      "patch": "SINGLE",
      "chain_ord": "['8e31d8434014a6d1e8791a489d84268fd74b0c9a']",
      "before_first_fix_commit": "{'ec88bc72ff2f6eb79a27112c777a7d601e946ed5'}",
      "last_fix_commit": "8e31d8434014a6d1e8791a489d84268fd74b0c9a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/09/2022, 22:12:41",
      "message": "We check the url parameter of the link to ensure that it is a valid controller.\n------\nComprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
      "author": "Carlos Garcia Gomez",
      "comments": null,
      "stats": "{'additions': 18, 'deletions': 1, 'total': 19}",
      "files": "{'Core/Controller/EditPageOption.php': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/NeoRazorX/facturascripts/raw/8e31d8434014a6d1e8791a489d84268fd74b0c9a/Core%2FController%2FEditPageOption.php', 'patch': \"@@ -24,6 +24,7 @@\\n use FacturaScripts\\\\Core\\\\Base\\\\DataBase\\\\DataBaseWhere;\\n use FacturaScripts\\\\Core\\\\Lib\\\\Widget\\\\VisualItemLoadEngine;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\CodeModel;\\n+use FacturaScripts\\\\Dinamic\\\\Model\\\\Page;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\PageOption;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\User;\\n use Symfony\\\\Component\\\\HttpFoundation\\\\Response;\\n@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)\\n         parent::privateCore($response, $user, $permissions);\\n         $this->model = new PageOption();\\n         $this->loadSelectedViewName();\\n-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;\\n+        $this->setBackPage();\\n         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;\\n         $this->loadPageOptions();\\n \\n@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool\\n         return true;\\n     }\\n \\n+    private function setBackPage()\\n+    {\\n+        // check if the url is a real controller name\\n+        $url = $this->request->get('url', '');\\n+        $pageModel = new Page();\\n+        foreach ($pageModel->all([], [], 0, 0) as $page) {\\n+            if (substr($url, 0, strlen($page->name)) === $page->name) {\\n+                $this->backPage = $url;\\n+                return;\\n+            }\\n+        }\\n+\\n+        // set the default back page\\n+        $this->backPage = $this->selectedViewName;\\n+    }\\n+\\n     /**\\n      * @param array $column\\n      * @param string $name\"}}",
      "message_norm": "we check the url parameter of the link to ensure that it is a valid controller.\n------\ncomprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
      "language": "es",
      "entities": "[('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['Core/Controller/EditPageOption.php'])",
      "num_files": 1.0
    },
    {
      "index": 2109,
      "vuln_id": "GHSA-hpv4-7p9c-mvfr",
      "cwe_id": "{'CWE-787', 'CWE-125'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30'}",
      "dataset": "osv",
      "summary": "Heap buffer overflow in `FractionalAvgPoolGrad` ### Impact\nThe implementation for `tf.raw_ops.FractionalAvgPoolGrad` can be tricked into accessing data outside of bounds of heap allocated buffers:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  overlapping=True)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty `EigenDoubleMatrixMap` and then accesses this buffer with indices that are outside of the empty area.\n\n### Patches\nWe have patched the issue in GitHub commit [0f931751fb20f565c4e94aa6df58d54a003cdb30](https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30",
      "commit_sha": "0f931751fb20f565c4e94aa6df58d54a003cdb30",
      "patch": "SINGLE",
      "chain_ord": "['0f931751fb20f565c4e94aa6df58d54a003cdb30']",
      "before_first_fix_commit": "{'55e763ffe2b348a61ab1c2fcfedc7bdf05c91990'}",
      "last_fix_commit": "0f931751fb20f565c4e94aa6df58d54a003cdb30",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/02/2021, 20:03:44",
      "message": "Validate dimensions of input tensor in `FractionalAvgPoolGrad`\n\nPiperOrigin-RevId: 388286227\nChange-Id: Ieb7566155e92acc8993a2212c76deacadc0edc8a",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 0, 'total': 12}",
      "files": "{'tensorflow/core/kernels/fractional_avg_pool_op.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0f931751fb20f565c4e94aa6df58d54a003cdb30/tensorflow%2Fcore%2Fkernels%2Ffractional_avg_pool_op.cc', 'patch': '@@ -271,6 +271,18 @@ class FractionalAvgPoolGradOp : public OpKernel {\\n     const int64_t in_rows = orig_input_tensor_shape_flat(1);\\n     const int64_t in_cols = orig_input_tensor_shape_flat(2);\\n     const int64_t in_depth = orig_input_tensor_shape_flat(3);\\n+    OP_REQUIRES(\\n+        context, in_batch != 0,\\n+        errors::InvalidArgument(\"Batch dimension of input must not be 0\"));\\n+    OP_REQUIRES(\\n+        context, in_rows != 0,\\n+        errors::InvalidArgument(\"Rows dimension of input must not be 0\"));\\n+    OP_REQUIRES(\\n+        context, in_cols != 0,\\n+        errors::InvalidArgument(\"Columns dimension of input must not be 0\"));\\n+    OP_REQUIRES(\\n+        context, in_depth != 0,\\n+        errors::InvalidArgument(\"Depth dimension of input must not be 0\"));\\n \\n     constexpr int tensor_in_and_out_dims = 4;\\n     // Transform orig_input_tensor_shape into TensorShape'}}",
      "message_norm": "validate dimensions of input tensor in `fractionalavgpoolgrad`\n\npiperorigin-revid: 388286227\nchange-id: ieb7566155e92acc8993a2212c76deacadc0edc8a",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('388286227', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/fractional_avg_pool_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 107,
      "vuln_id": "GHSA-2jx3-5j9v-prpp",
      "cwe_id": "{'CWE-89'}",
      "score": 8.1,
      "chain": "{'https://github.com/PrestaShop/blockwishlist/commit/b3ec4b85af5fd73f74d55390b226d221298ca084'}",
      "dataset": "osv",
      "summary": "BlockWishList SQL Injection vulnerability ### Impact\nAn authenticated customer can perform SQL injection\n\n### Patches\nIssue is fixed in 2.1.1",
      "published_date": "2022-06-25",
      "chain_len": 1,
      "project": "https://github.com/PrestaShop/blockwishlist",
      "commit_href": "https://github.com/PrestaShop/blockwishlist/commit/b3ec4b85af5fd73f74d55390b226d221298ca084",
      "commit_sha": "b3ec4b85af5fd73f74d55390b226d221298ca084",
      "patch": "SINGLE",
      "chain_ord": "['b3ec4b85af5fd73f74d55390b226d221298ca084']",
      "before_first_fix_commit": "{'13e64b2709544354fd116927b80bc3fa249bc5b4', 'be79516175d564f60a657627482b0a60c3da353e'}",
      "last_fix_commit": "b3ec4b85af5fd73f74d55390b226d221298ca084",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/24/2022, 08:04:52",
      "message": "Merge pull request from GHSA-2jx3-5j9v-prpp\n\nValidate order by and order way",
      "author": "atomiix",
      "comments": "{'com_1': {'author': 'doekia', 'datetime': '07/22/2022, 17:26:35', 'body': \"So apparently there is unfiltered value returned by toLegacyOrderWay() (I'm doubt full of it see below)\\r\\nIf this is the case CHANGE the function, not simply one module otherwise it is an open door for other modules.\\r\\n\\r\\nWhy I'm doubtfull ? Because toLegacyOrderWay() calls getDirection() which return $this->direction. $this->direction is set by setDirection() (during construct) and tests are done against values asc, desc, random otherwise exception. How can this lead to sql injection\"}, 'com_2': {'author': 'infiniweb', 'datetime': '07/22/2022, 21:40:39', 'body': '@doekia this issue is not with `toLegacyOrderWay`. The SQL injection can be reproduced because of the usage of `toLegacyOrderBy` (not `toLegacyOrderWay`) combined with a wrong usage of `getLegacyPrefix`. I can confirm the exploit. The usage of `Validate::isOrderBy($sortOrder)` is fixing the issue.'}, 'com_3': {'author': 'doekia', 'datetime': '07/25/2022, 18:07:12', 'body': 'Therefore I repeat, the function that need to be patched SHOULD BE toLegacyOrderBy() that should implement the Validate::isOrderBy() before returning values.\\r\\nSuch way will protect ANY modules that use the framework function toLegacyOrderBy()'}, 'com_4': {'author': 'Pilypas', 'datetime': '07/27/2022, 11:25:43', 'body': 'Can you tell me if the vulnerability in the module is also in Prestashop 1.6.1.24 version of blockwishlist 1.3.2 ?'}, 'com_5': {'author': 'infiniweb', 'datetime': '07/27/2022, 11:27:28', 'body': \"@Pilypas . No it's not. Please refer to https://github.com/PrestaShop/blockwishlist/security/advisories/GHSA-2jx3-5j9v-prpp\"}}",
      "stats": "{'additions': 5, 'deletions': 1, 'total': 6}",
      "files": "{'src/Search/WishListProductSearchProvider.php': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/PrestaShop/blockwishlist/raw/b3ec4b85af5fd73f74d55390b226d221298ca084/src%2FSearch%2FWishListProductSearchProvider.php', 'patch': \"@@ -35,6 +35,7 @@\\n use Product;\\n use Shop;\\n use Symfony\\\\Component\\\\Translation\\\\TranslatorInterface;\\n+use Validate;\\n use WishList;\\n \\n /**\\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\\n \\n         if ('products' === $type) {\\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\\n+            }\\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\\n             $products = $this->db->executeS($querySearch);\"}}",
      "message_norm": "merge pull request from ghsa-2jx3-5j9v-prpp\n\nvalidate order by and order way",
      "language": "no",
      "entities": "[('ghsa-2jx3-5j9v-prpp', 'VULNID', 'GHSA')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Search/WishListProductSearchProvider.php'])",
      "num_files": 1.0
    },
    {
      "index": 952,
      "vuln_id": "GHSA-74cr-77xc-8g6r",
      "cwe_id": "{'CWE-400', 'CWE-1321'}",
      "score": 7.3,
      "chain": "{'https://github.com/apollographql/apollo-server/commit/cea7397582a293af6a5f60947da34b95e669c6c1'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in @apollo/gateway Versions of `@apollo/gateway` prior to 0.6.2 are vulnerable to Prototype Pollution. The package uses deepMerge() to merge objects, which may allow attackers to alter the Object prototype through queries with GraphQL aliases. Carefully constructed payloads can override properties of all objects in the application. This may lead to Denial of Service or may be chained with other vulnerabilities leading to Remote Code Execution.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.",
      "published_date": "2019-06-13",
      "chain_len": 1,
      "project": "https://github.com/apollographql/apollo-server",
      "commit_href": "https://github.com/apollographql/apollo-server/commit/cea7397582a293af6a5f60947da34b95e669c6c1",
      "commit_sha": "cea7397582a293af6a5f60947da34b95e669c6c1",
      "patch": "SINGLE",
      "chain_ord": "['cea7397582a293af6a5f60947da34b95e669c6c1']",
      "before_first_fix_commit": "{'116e1b46ae8a58d5b77038d66588f208eb9b6e2a'}",
      "last_fix_commit": "cea7397582a293af6a5f60947da34b95e669c6c1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/04/2019, 22:58:07",
      "message": "Ignore __proto__ fields in deepMerge",
      "author": "Trevor Scheer",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'packages/apollo-gateway/src/utilities/deepMerge.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/apollographql/apollo-server/raw/cea7397582a293af6a5f60947da34b95e669c6c1/packages%2Fapollo-gateway%2Fsrc%2Futilities%2FdeepMerge.ts', 'patch': \"@@ -4,7 +4,7 @@ export function deepMerge(target: any, source: any): any {\\n   if (source === undefined || source === null) return target;\\n \\n   for (const key of Object.keys(source)) {\\n-    if (source[key] === undefined) continue;\\n+    if (source[key] === undefined || key === '__proto__') continue;\\n \\n     if (target[key] && isObject(source[key])) {\\n       deepMerge(target[key], source[key]);\"}}",
      "message_norm": "ignore __proto__ fields in deepmerge",
      "language": "nl",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['packages/apollo-gateway/src/utilities/deepMerge.ts'])",
      "num_files": 1.0
    },
    {
      "index": 463,
      "vuln_id": "GHSA-4q97-fh3f-j294",
      "cwe_id": "{'CWE-1321'}",
      "score": 9.8,
      "chain": "{'https://github.com/tiny-conf/tiny-conf/commit/1f7be78bc68927996647cd45b4367f8975a3ea05'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in tiny-conf All versions of package tiny-conf up to and including version 1.1.0 are vulnerable to Prototype Pollution via the set function.",
      "published_date": "2021-05-10",
      "chain_len": 1,
      "project": "https://github.com/tiny-conf/tiny-conf",
      "commit_href": "https://github.com/tiny-conf/tiny-conf/commit/1f7be78bc68927996647cd45b4367f8975a3ea05",
      "commit_sha": "1f7be78bc68927996647cd45b4367f8975a3ea05",
      "patch": "SINGLE",
      "chain_ord": "['1f7be78bc68927996647cd45b4367f8975a3ea05']",
      "before_first_fix_commit": "{'c4d8b44ab53b9810b76a04caec249762d8c7fbc7', 'c1f4181bc3583fff49fe6e34c6e745479c569eb2'}",
      "last_fix_commit": "1f7be78bc68927996647cd45b4367f8975a3ea05",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/01/2020, 08:21:02",
      "message": "Merge pull request #1 from d3m0n-r00t/master\n\nFixed prototype pollution",
      "author": "Maxime Tricoire",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tiny-conf.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tiny-conf/tiny-conf/raw/1f7be78bc68927996647cd45b4367f8975a3ea05/tiny-conf.js', 'patch': \"@@ -44,6 +44,9 @@ Store.prototype = {\\n    * @return {boolean} true if set; false otherwise\\n    */\\n   set: function (key, val) {\\n+    if (key.includes('__proto__') || key.includes('prototype') || key.includes('constructor')){\\n+      return undefined;\\n+    }\\n     if (val === undefined) {\\n       val = key;\\n       key = null;\"}}",
      "message_norm": "merge pull request #1 from d3m0n-r00t/master\n\nfixed prototype pollution",
      "language": "en",
      "entities": "[('#1', 'ISSUE', ''), ('fixed', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tiny-conf.js'])",
      "num_files": 1.0
    },
    {
      "index": 1928,
      "vuln_id": "GHSA-grmf-4fq6-2r79",
      "cwe_id": "{'CWE-119'}",
      "score": 9.8,
      "chain": "{'https://github.com/aubio/aubio/commit/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5'}",
      "dataset": "osv",
      "summary": "Improper Restriction of Operations within the Bounds of a Memory Buffer in aubio aubio v0.4.0 to v0.4.8 has a Buffer Overflow in new_aubio_tempo.",
      "published_date": "2019-07-26",
      "chain_len": 1,
      "project": "https://github.com/aubio/aubio",
      "commit_href": "https://github.com/aubio/aubio/commit/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
      "commit_sha": "b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
      "patch": "SINGLE",
      "chain_ord": "['b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5']",
      "before_first_fix_commit": "{'c4a8bc138e49de8b43fcd2221ef84dfa5073208f'}",
      "last_fix_commit": "b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/24/2018, 16:17:29",
      "message": "[tempo] fix buffer overflow in method parser",
      "author": "Paul Brossier",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 3, 'total': 7}",
      "files": "{'src/tempo/tempo.c': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/aubio/aubio/raw/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5/src%2Ftempo%2Ftempo.c', 'patch': '@@ -168,7 +168,7 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n     uint_t buf_size, uint_t hop_size, uint_t samplerate)\\n {\\n   aubio_tempo_t * o = AUBIO_NEW(aubio_tempo_t);\\n-  char_t specdesc_func[20];\\n+  char_t specdesc_func[PATH_MAX];\\n   o->samplerate = samplerate;\\n   // check parameters are valid\\n   if ((sint_t)hop_size < 1) {\\n@@ -203,9 +203,10 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n   o->pp       = new_aubio_peakpicker();\\n   aubio_peakpicker_set_threshold (o->pp, o->threshold);\\n   if ( strcmp(tempo_mode, \"default\") == 0 ) {\\n-    strcpy(specdesc_func, \"specflux\");\\n+    strncpy(specdesc_func, \"specflux\", PATH_MAX - 1);\\n   } else {\\n-    strcpy(specdesc_func, tempo_mode);\\n+    strncpy(specdesc_func, tempo_mode, PATH_MAX - 1);\\n+    specdesc_func[PATH_MAX - 1] = \\'\\\\0\\';\\n   }\\n   o->od       = new_aubio_specdesc(specdesc_func,buf_size);\\n   o->of       = new_fvec(1);'}}",
      "message_norm": "[tempo] fix buffer overflow in method parser",
      "language": "en",
      "entities": "[('buffer overflow', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/tempo/tempo.c'])",
      "num_files": 1.0
    },
    {
      "index": 251,
      "vuln_id": "GHSA-3fw8-66wf-pr7m",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/senchalabs/connect/commit/126187c4e12162e231b87350740045e5bb06e93a', 'https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135'}",
      "dataset": "osv",
      "summary": "methodOverride Middleware Reflected Cross-Site Scripting in connect Connect is a stack of middleware that is executed in order in each request.\n\nThe \"methodOverride\" middleware allows the http post to override the method of the request with the value of the \"_method\" post key or with the header \"x-http-method-override\".\n\nBecause the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the \"Cannot `[method]` `[url]`\" content. The method was not properly encoded for output in the browser.\n\n\n###Example:\n```\n~ curl \"localhost:3000\" -d \"_method=<script src=http://nodesecurity.io/xss.js></script>\"\nCannot <SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS></SCRIPT> /\n```\n\n## Recommendation\n\nUpdate to the newest version of Connect or disable methodOverride. It is not possible to avoid the vulnerability if you have enabled this middleware in the top of your stack.",
      "published_date": "2020-08-31",
      "chain_len": 2,
      "project": "https://github.com/senchalabs/connect",
      "commit_href": "https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135",
      "commit_sha": "277e5aad6a95d00f55571a9a0e11f2fa190d8135",
      "patch": "MULTI",
      "chain_ord": "['277e5aad6a95d00f55571a9a0e11f2fa190d8135', '126187c4e12162e231b87350740045e5bb06e93a']",
      "before_first_fix_commit": "{'b0df35bcf2e1b4e487a17889a8440ecf254ac3b4'}",
      "last_fix_commit": "126187c4e12162e231b87350740045e5bb06e93a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/27/2013, 15:31:23",
      "message": "fix: escape req.method in 404 response",
      "author": "TJ Holowaychuk",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'lib/proto.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/senchalabs/connect/raw/277e5aad6a95d00f55571a9a0e11f2fa190d8135/lib%2Fproto.js', 'patch': \"@@ -152,7 +152,7 @@ app.handle = function(req, res, out) {\\n         res.statusCode = 404;\\n         res.setHeader('Content-Type', 'text/plain');\\n         if ('HEAD' == req.method) return res.end();\\n-        res.end('Cannot ' + req.method + ' ' + utils.escape(req.originalUrl));\\n+        res.end('Cannot ' + utils.escape(req.method) + ' ' + utils.escape(req.originalUrl));\\n       }\\n       return;\\n     }\\n@@ -202,7 +202,7 @@ app.handle = function(req, res, out) {\\n  * Listen for connections.\\n  *\\n  * This method takes the same arguments\\n- * as node's `http.Server#listen()`.  \\n+ * as node's `http.Server#listen()`.\\n  *\\n  * HTTP and HTTPS:\\n  *\\n@@ -214,9 +214,9 @@ app.handle = function(req, res, out) {\\n  *      var connect = require('connect')\\n  *        , http = require('http')\\n  *        , https = require('https');\\n- *      \\n+ *\\n  *      var app = connect();\\n- *      \\n+ *\\n  *      http.createServer(app).listen(80);\\n  *      https.createServer(options, app).listen(443);\\n  *\"}}",
      "message_norm": "fix: escape req.method in 404 response",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/proto.js'])",
      "num_files": 1.0
    },
    {
      "index": 3131,
      "vuln_id": "GHSA-vj9x-w7ch-f46p",
      "cwe_id": "{'CWE-89'}",
      "score": 8.3,
      "chain": "{'https://github.com/pimcore/pimcore/commit/66281c12479dc01a06258d8533eaddfb1770d5bd'}",
      "dataset": "osv",
      "summary": "pimcore is vulnerable to SQL Injection pimcore is vulnerable to Improper Neutralization of Special Elements used in an SQL Command",
      "published_date": "2022-01-21",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/66281c12479dc01a06258d8533eaddfb1770d5bd",
      "commit_sha": "66281c12479dc01a06258d8533eaddfb1770d5bd",
      "patch": "SINGLE",
      "chain_ord": "['66281c12479dc01a06258d8533eaddfb1770d5bd']",
      "before_first_fix_commit": "{'d8377fc752dc3a42ca72cb49650481191f14ec63'}",
      "last_fix_commit": "66281c12479dc01a06258d8533eaddfb1770d5bd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/17/2022, 14:39:43",
      "message": "[Data Object] Classification Store quote filtering",
      "author": "Bernhard Rusch",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/66281c12479dc01a06258d8533eaddfb1770d5bd/bundles%2FAdminBundle%2FController%2FAdmin%2FDataObject%2FClassificationstoreController.php', 'patch': \"@@ -1242,7 +1242,7 @@ public function propertiesGetAction(Request $request)\\n         }\\n \\n         if ($storeId) {\\n-            $conditionParts[] = '(storeId = ' . $storeId . ')';\\n+            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';\\n         }\\n \\n         if ($request->get('filter')) {\"}}",
      "message_norm": "[data object] classification store quote filtering",
      "language": "it",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php'])",
      "num_files": 1.0
    },
    {
      "index": 806,
      "vuln_id": "GHSA-69q2-p9xp-739v",
      "cwe_id": "{'CWE-91'}",
      "score": 9.8,
      "chain": "{'https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8'}",
      "dataset": "osv",
      "summary": "XML Injection in petl petl before 1.68, in some configurations, allows resolution of entities in an XML document.",
      "published_date": "2021-04-20",
      "chain_len": 1,
      "project": "https://github.com/petl-developers/petl",
      "commit_href": "https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
      "commit_sha": "1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
      "patch": "SINGLE",
      "chain_ord": "['1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8']",
      "before_first_fix_commit": "{'364c3e5d0263a99dffebcd9df70b17bce57b3b06'}",
      "last_fix_commit": "1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/05/2020, 22:42:56",
      "message": "allow using a custom/restricted xml parser",
      "author": "Juarez Rudsatz",
      "comments": null,
      "stats": "{'additions': 20, 'deletions': 2, 'total': 22}",
      "files": "{'petl/io/xml.py': {'additions': 20, 'deletions': 2, 'changes': 22, 'status': 'modified', 'raw_url': 'https://github.com/petl-developers/petl/raw/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8/petl%2Fio%2Fxml.py', 'patch': '@@ -133,6 +133,9 @@ def fromxml(source, *args, **kwargs):\\n     or list of paths can be provided, e.g.,\\n     ``fromxml(\\'example.html\\', \\'.//tr\\', (\\'th\\', \\'td\\'))``.\\n \\n+    Optionally a custom parser can be provided, e.g.,\\n+    ``etl.fromxml(\\'example1.xml\\', \\'tr\\', \\'td\\', parser=my_parser)``.\\n+\\n     \"\"\"\\n \\n     source = read_source_from_arg(source)\\n@@ -162,14 +165,15 @@ def __init__(self, source, *args, **kwargs):\\n         else:\\n             assert False, \\'bad parameters\\'\\n         self.missing = kwargs.get(\\'missing\\', None)\\n+        self.user_parser = kwargs.get(\\'parser\\', None)\\n \\n     def __iter__(self):\\n         vmatch = self.vmatch\\n         vdict = self.vdict\\n \\n         with self.source.open(\\'rb\\') as xmlf:\\n-\\n-            tree = etree.parse(xmlf)\\n+            parser2 = _create_xml_parser(self.user_parser)\\n+            tree = etree.parse(xmlf, parser=parser2)\\n             if not hasattr(tree, \\'iterfind\\'):\\n                 # Python 2.6 compatibility\\n                 tree.iterfind = tree.findall\\n@@ -219,6 +223,20 @@ def __iter__(self):\\n                                 for f in flds)\\n \\n \\n+def _create_xml_parser(user_parser):\\n+    if user_parser is not None:\\n+        return user_parser\\n+    try:\\n+        # Default lxml parser.\\n+        # This will throw an error if parser is not set and lxml could not be imported\\n+        # because Python\\'s built XML parser doesn\\'t like the `resolve_entities` kwarg.\\n+        # return etree.XMLParser(resolve_entities=False)\\n+        return etree.XMLParser(resolve_entities=False)\\n+    except TypeError:\\n+        # lxml not available\\n+        return None\\n+\\n+\\n def element_text_getter(missing):\\n     def _get(v):\\n         if len(v) > 1:'}}",
      "message_norm": "allow using a custom/restricted xml parser",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['petl/io/xml.py'])",
      "num_files": 1.0
    },
    {
      "index": 755,
      "vuln_id": "GHSA-65mj-7c86-79jf",
      "cwe_id": "{'CWE-305', 'CWE-287'}",
      "score": 9.1,
      "chain": "{'https://github.com/ADOdb/ADOdb/commit/952de6c4273d9b1e91c2b838044f8c2111150c29', 'https://github.com/ADOdb/ADOdb/commit/b4d5ce70034c5aac3a1d51d317d93c037a0938d2'}",
      "dataset": "osv",
      "summary": "Authentication Bypass in ADOdb/ADOdb ### Impact\n\nAn attacker can inject values into a PostgreSQL connection string by providing a parameter surrounded by single quotes.\n\nDepending on how the library is used in the client software, this may allow an attacker to bypass the login process, gain access to the server's IP address, etc.\n\n### Patches\n\nThe vulnerability is fixed in ADOdb versions 5.20.21 (952de6c4273d9b1e91c2b838044f8c2111150c29) and 5.21.4 or later (b4d5ce70034c5aac3a1d51d317d93c037a0938d2).\n\nThe simplest patch is to delete line 29 in `drivers/adodb-postgres64.inc.php`:\n\n```php\ndiff --git a/drivers/adodb-postgres64.inc.php b/drivers/adodb-postgres64.inc.php\nindex d04b7f67..729d7141 100644\n--- a/drivers/adodb-postgres64.inc.php\n+++ b/drivers/adodb-postgres64.inc.php\n@@ -26,7 +26,6 @@ function adodb_addslashes($s)\n {\n    $len = strlen($s);\n    if ($len == 0) return \"''\";\n-   if (strncmp($s,\"'\",1) === 0 && substr($s,$len-1) == \"'\") return $s; // already quoted\n \n    return \"'\".addslashes($s).\"'\";\n }\n```\n\n### Workarounds\n\nEnsure the parameters passed to *ADOConnection::connect()* or related functions (_nConnect()_, _pConnect()_) are not surrounded by single quotes.\n\n### Credits\n\nThanks to **Emmet Leahy** (@meme-lord) of Sorcery Ltd for reporting this vulnerability, and to the [huntr](https://huntr.dev/) team for their support.\n\n### References\n\n- Original issue report https://huntr.dev/bounties/bdf5f216-4499-4225-a737-b28bc6f5801c/\n- ADOdb reference issue #793 \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Add a note in issue #793\n* Contact the maintainers on [Gitter](https://gitter.im/adodb/adodb)",
      "published_date": "2022-01-27",
      "chain_len": 2,
      "project": "https://github.com/ADOdb/ADOdb",
      "commit_href": "https://github.com/ADOdb/ADOdb/commit/952de6c4273d9b1e91c2b838044f8c2111150c29",
      "commit_sha": "952de6c4273d9b1e91c2b838044f8c2111150c29",
      "patch": "MULTI",
      "chain_ord": "['952de6c4273d9b1e91c2b838044f8c2111150c29', 'b4d5ce70034c5aac3a1d51d317d93c037a0938d2']",
      "before_first_fix_commit": "{'c5415722049f36c446a4034d15f1d17943f11458'}",
      "last_fix_commit": "b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/10/2022, 08:41:32",
      "message": "Prevent auth bypass with PostgreSQL connections\n\nThanks to Emmet Leahy of Sorcery Ltd for reporting this vulnerability\n(CVE-2021-3850).\n\nThis is a minimalistic approach to patch the issue, to reduce the risk\nof causing regressions in the legacy stable branch.\n\nFixes #793",
      "author": "Damien Regad",
      "comments": null,
      "stats": "{'additions': 0, 'deletions': 1, 'total': 1}",
      "files": "{'drivers/adodb-postgres64.inc.php': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/ADOdb/ADOdb/raw/952de6c4273d9b1e91c2b838044f8c2111150c29/drivers%2Fadodb-postgres64.inc.php', 'patch': '@@ -51,7 +51,6 @@ function adodb_addslashes($s)\\n {\\n \\t$len = strlen($s);\\n \\tif ($len == 0) return \"\\'\\'\";\\n-\\tif (strncmp($s,\"\\'\",1) === 0 && substr($s,$len-1) == \"\\'\") return $s; // already quoted\\n \\n \\treturn \"\\'\".addslashes($s).\"\\'\";\\n }'}}",
      "message_norm": "prevent auth bypass with postgresql connections\n\nthanks to emmet leahy of sorcery ltd for reporting this vulnerability\n(cve-2021-3850).\n\nthis is a minimalistic approach to patch the issue, to reduce the risk\nof causing regressions in the legacy stable branch.\n\nfixes #793",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('auth', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('cve-2021-3850', 'VULNID', 'CVE'), ('patch', 'ACTION', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('#793', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['drivers/adodb-postgres64.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 2326,
      "vuln_id": "GHSA-m296-j53x-xv95",
      "cwe_id": "{'CWE-362'}",
      "score": 8.1,
      "chain": "{'https://github.com/KizzyCode/tiny_future/commit/7ab8a264980d23c2ed64e72f4636f38b7381eb39', 'https://github.com/KizzyCode/tiny_future/commit/c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
      "dataset": "osv",
      "summary": "Data races in tiny_future `tiny_future` contains a light-weight implementation of `Future`s. The `Future`\ntype it has lacked bound on its `Send` and `Sync` traits.\n\nThis allows for a bug where non-thread safe types such as `Cell` can be used in\n`Future`s and cause data races in concurrent programs.\n\nThe flaw was corrected in commit `c791919` by adding trait bounds to `Future`'s\n`Send` and `Sync`.",
      "published_date": "2021-08-25",
      "chain_len": 2,
      "project": "https://github.com/KizzyCode/tiny_future",
      "commit_href": "https://github.com/KizzyCode/tiny_future/commit/7ab8a264980d23c2ed64e72f4636f38b7381eb39",
      "commit_sha": "7ab8a264980d23c2ed64e72f4636f38b7381eb39",
      "patch": "MULTI",
      "chain_ord": "['c7919199a0f6d1ce0e3c33499d1b37f862c990e4', '7ab8a264980d23c2ed64e72f4636f38b7381eb39']",
      "before_first_fix_commit": "{'c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
      "last_fix_commit": "7ab8a264980d23c2ed64e72f4636f38b7381eb39",
      "chain_ord_pos": 2.0,
      "commit_datetime": "12/08/2020, 16:33:00",
      "message": "Require `Send` for underlying types to fix https://github.com/KizzyCode/tiny_future/issues/1",
      "author": "Keziah Biermann",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'src/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/KizzyCode/tiny_future-rust/raw/7ab8a264980d23c2ed64e72f4636f38b7381eb39/src%2Flib.rs', 'patch': \"@@ -178,7 +178,7 @@ pub fn time_remaining(timeout_point: std::time::Instant) -> std::time::Duration\\n /// Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n /// future. The parameter passed to `job` is a function that returns if the future is still waiting\\n /// so that `job` can check for cancellation.\\n-pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n+pub fn async_with_state<T: 'static + Send, U: 'static + Send, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n \\tuse std::clone::Clone;\\n \\t\\n \\t// Create future and spawn job\\n@@ -192,7 +192,7 @@ pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send +\\n /// Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n /// future. The parameter passed to `job` is a function that returns if the future is still waiting\\n /// so that `job` can check for cancellation.\\n-pub fn async<T: 'static, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n+pub fn async<T: 'static + Send, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n \\tasync_with_state(job, ())\\n }\"}}",
      "message_norm": "require `send` for underlying types to fix https://github.com/kizzycode/tiny_future/issues/1",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('https://github.com/kizzycode/tiny_future/issues/1', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 2483,
      "vuln_id": "GHSA-mxh3-2699-98g9",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/pimcore/pimcore/commit/b5a9ad65e5a4dde1916f02019f8686ad835681ce'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting pimcore pimcore version 10.3.0 and prior is vulnerable to cross-site scripting.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/b5a9ad65e5a4dde1916f02019f8686ad835681ce",
      "commit_sha": "b5a9ad65e5a4dde1916f02019f8686ad835681ce",
      "patch": "SINGLE",
      "chain_ord": "['b5a9ad65e5a4dde1916f02019f8686ad835681ce']",
      "before_first_fix_commit": "{'6ccb5c12fc1be065ebce9c89c4677ee939b88597'}",
      "last_fix_commit": "b5a9ad65e5a4dde1916f02019f8686ad835681ce",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/07/2022, 14:23:39",
      "message": "[Admin] DataObject - Escape class definitions group properly",
      "author": "dpahuja",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/b5a9ad65e5a4dde1916f02019f8686ad835681ce/bundles%2FAdminBundle%2FController%2FAdmin%2FDataObject%2FClassController.php', 'patch': \"@@ -861,7 +861,7 @@ public function fieldcollectionTreeAction(Request $request, EventDispatcherInter\\n                 if (!isset($groups[$item->getGroup()])) {\\n                     $groups[$item->getGroup()] = [\\n                         'id' => 'group_' . $item->getKey(),\\n-                        'text' => $item->getGroup(),\\n+                        'text' => htmlspecialchars($item->getGroup()),\\n                         'expandable' => true,\\n                         'leaf' => false,\\n                         'allowChildren' => true,\\n@@ -1266,7 +1266,7 @@ public function objectbrickTreeAction(Request $request, EventDispatcherInterface\\n                 if (!isset($groups[$item->getGroup()])) {\\n                     $groups[$item->getGroup()] = [\\n                         'id' => 'group_' . $item->getKey(),\\n-                        'text' => $item->getGroup(),\\n+                        'text' => htmlspecialchars($item->getGroup()),\\n                         'expandable' => true,\\n                         'leaf' => false,\\n                         'allowChildren' => true,\"}}",
      "message_norm": "[admin] dataobject - escape class definitions group properly",
      "language": "fr",
      "entities": "[('admin', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1298,
      "vuln_id": "GHSA-92vm-wfm5-mxvv",
      "cwe_id": "{'CWE-362'}",
      "score": 4.4,
      "chain": "{'https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e', 'https://github.com/tj/node-cookie-signature/commit/2c4df6b6cee540f30876198cd0b5bebf28528c07', 'https://github.com/tj/node-cookie-signature/commit/4cc5e21e7f59a4ea0b51cd5e9634772d48fab590'}",
      "dataset": "osv",
      "summary": "cookie-signature Timing Attack Affected versions of `cookie-signature` are vulnerable to timing attacks as a result of using a fail-early comparison instead of a constant-time comparison. \n\nTiming attacks remove the exponential increase in entropy gained from increased secret length, by providing per-character feedback on the correctness of a guess via miniscule timing differences.\n\nUnder favorable network conditions, an attacker can exploit this to guess the secret in no more than `charset*length` guesses, instead of `charset^length` guesses required were the timing attack not present. \n\n\n\n## Recommendation\n\nUpdate to 1.0.4 or later.",
      "published_date": "2020-01-06",
      "chain_len": 3,
      "project": "https://github.com/tj/node-cookie-signature",
      "commit_href": "https://github.com/tj/node-cookie-signature/commit/4cc5e21e7f59a4ea0b51cd5e9634772d48fab590",
      "commit_sha": "4cc5e21e7f59a4ea0b51cd5e9634772d48fab590",
      "patch": "MULTI",
      "chain_ord": "['4cc5e21e7f59a4ea0b51cd5e9634772d48fab590', '39791081692e9e14aa62855369e1c7f80fbfd50e', '2c4df6b6cee540f30876198cd0b5bebf28528c07']",
      "before_first_fix_commit": "{'39791081692e9e14aa62855369e1c7f80fbfd50e'}",
      "last_fix_commit": "2c4df6b6cee540f30876198cd0b5bebf28528c07",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/25/2014, 22:09:31",
      "message": "Merge pull request #17 from tenbits/patch-1\n\nFix #15: use sha1 hashes for double signing",
      "author": "Nathan Vander Wilt",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 1, 'total': 10}",
      "files": "{'index.js': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tj/node-cookie-signature/raw/4cc5e21e7f59a4ea0b51cd5e9634772d48fab590/index.js', 'patch': \"@@ -39,5 +39,13 @@ exports.unsign = function(val, secret){\\n   var str = val.slice(0, val.lastIndexOf('.'))\\n     , mac = exports.sign(str, secret);\\n   \\n-  return exports.sign(mac, secret) == exports.sign(val, secret) ? str : false;\\n+  return sha1(mac) == sha1(val) ? str : false;\\n };\\n+\\n+/**\\n+ * Private\\n+ */\\n+\\n+function sha1(str){\\n+  return crypto.createHash('sha1').update(str).digest('hex');\\n+}\"}}",
      "message_norm": "merge pull request #17 from tenbits/patch-1\n\nfix #15: use sha1 hashes for double signing",
      "language": "en",
      "entities": "[('#17', 'ISSUE', ''), ('fix', 'ACTION', ''), ('#15', 'ISSUE', ''), ('signing', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 35,
      "vuln_id": "GHSA-25xj-89g5-fm6h",
      "cwe_id": "{'CWE-532', 'CWE-200'}",
      "score": 7.5,
      "chain": "{'https://github.com/hashicorp/vault/commit/87f47c216cf1a28f4054b80cff40de8c9e00e36c', 'https://github.com/hashicorp/vault/commit/e52f34772affb69f3239b2cdf6523cb7cfd67a92'}",
      "dataset": "osv",
      "summary": "Information Disclosure in HashiCorp Vault HashiCorp Vault and Vault Enterprise before 1.3.6, and 1.4.2 before 1.4.2, insert Sensitive Information into a Log File.",
      "published_date": "2021-05-18",
      "chain_len": 2,
      "project": "https://github.com/hashicorp/vault",
      "commit_href": "https://github.com/hashicorp/vault/commit/87f47c216cf1a28f4054b80cff40de8c9e00e36c",
      "commit_sha": "87f47c216cf1a28f4054b80cff40de8c9e00e36c",
      "patch": "MULTI",
      "chain_ord": "['e52f34772affb69f3239b2cdf6523cb7cfd67a92', '87f47c216cf1a28f4054b80cff40de8c9e00e36c']",
      "before_first_fix_commit": "{'01a682aa48ede581e12813314e64a75e314e500e'}",
      "last_fix_commit": "87f47c216cf1a28f4054b80cff40de8c9e00e36c",
      "chain_ord_pos": 2.0,
      "commit_datetime": "05/21/2020, 21:21:48",
      "message": "changelog++\n\nUpdated with CVE numbers for 1.4.2 and 1.3.6.",
      "author": "Meggie",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 2, 'total': 5}",
      "files": "{'CHANGELOG.md': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/hashicorp/vault/raw/87f47c216cf1a28f4054b80cff40de8c9e00e36c/CHANGELOG.md', 'patch': '@@ -29,7 +29,8 @@ BUG FIXES:\\n ## 1.4.2 (May 21st, 2020)\\n \\n SECURITY:\\n-* core: proxy environment variables are now redacted before being logged, in case the URLs include a username:password [[GH-9022](https://github.com/hashicorp/vault/pull/9022)]\\n+* core: proxy environment variables are now redacted before being logged, in case the URLs include a username:password. This vulnerability, CVE-2020-13223, is fixed in 1.3.6 and 1.4.2, but affects 1.4 and 1.4.2, as well as older versions of Vault [[GH-9022](https://github.com/hashicorp/vault/pull/9022)]\\n+* secrets/gcp: Fix a regression in 1.4.0 where the system TTLs were being used instead of the configured backend TTLs for dynamic service accounts. This vulnerability is CVE-2020-12757. [[GH-85](https://github.com/hashicorp/vault-plugin-secrets-gcp/pull/85)]\\n \\n IMPROVEMENTS:\\n \\n@@ -216,7 +217,7 @@ BUG FIXES:\\n ## 1.3.6 (May 21st, 2020)\\n \\n SECURITY:\\n-* core: proxy environment variables are now redacted before being logged, in case the URLs include a username:password [[GH-9022](https://github.com/hashicorp/vault/pull/9022)]\\n+* core: proxy environment variables are now redacted before being logged, in case the URLs include a username:password. This vulnerability, CVE-2020-13223, is fixed in 1.3.6 and 1.4.2, but affects 1.4 and 1.4.2, as well as older versions of Vault [[GH-9022](https://github.com/hashicorp/vault/pull/9022)]\\n \\n BUG FIXES:'}}",
      "message_norm": "changelog++\n\nupdated with cve numbers for 1.4.2 and 1.3.6.",
      "language": "en",
      "entities": "[('updated', 'ACTION', ''), ('cve', 'SECWORD', ''), ('1.4.2', 'VERSION', ''), ('1.3.6', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['CHANGELOG.md'])",
      "num_files": 1.0
    },
    {
      "index": 1118,
      "vuln_id": "GHSA-832h-xg76-4gv6",
      "cwe_id": "{'CWE-20'}",
      "score": 7.5,
      "chain": "{'https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3'}",
      "dataset": "osv",
      "summary": "ReDoS in brace-expansion Affected versions of `brace-expansion` are vulnerable to a regular expression denial of service condition.\n\n## Proof of Concept\n\n```\nvar expand = require('brace-expansion');\nexpand('{,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\n}');\n```\n\n\n## Recommendation\n\nUpdate to version 1.1.7 or later.",
      "published_date": "2018-01-29",
      "chain_len": 1,
      "project": "https://github.com/juliangruber/brace-expansion",
      "commit_href": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "commit_sha": "b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "patch": "SINGLE",
      "chain_ord": "['b13381281cead487cbdbfd6a69fb097ea5e456c3']",
      "before_first_fix_commit": "{'265f6cd6586383eebebbfc3c45da2eaa153d9e63'}",
      "last_fix_commit": "b13381281cead487cbdbfd6a69fb097ea5e456c3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/07/2017, 02:32:55",
      "message": "fix bug in https://github.com/juliangruber/brace-expansion/issues/33",
      "author": "mengyuan.ymy",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/juliangruber/brace-expansion/raw/b13381281cead487cbdbfd6a69fb097ea5e456c3/index.js', 'patch': \"@@ -106,7 +106,7 @@ function expand(str, isTop) {\\n   var isNumericSequence = /^-?\\\\d+\\\\.\\\\.-?\\\\d+(?:\\\\.\\\\.-?\\\\d+)?$/.test(m.body);\\n   var isAlphaSequence = /^[a-zA-Z]\\\\.\\\\.[a-zA-Z](?:\\\\.\\\\.-?\\\\d+)?$/.test(m.body);\\n   var isSequence = isNumericSequence || isAlphaSequence;\\n-  var isOptions = /^(.*,)+(.+)?$/.test(m.body);\\n+  var isOptions = m.body.indexOf(',') >= 0;\\n   if (!isSequence && !isOptions) {\\n     // {a},b}\\n     if (m.post.match(/,.*\\\\}/)) {\"}}",
      "message_norm": "fix bug in https://github.com/juliangruber/brace-expansion/issues/33",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('https://github.com/juliangruber/brace-expansion/issues/33', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 134,
      "vuln_id": "GHSA-2rfj-2mwp-787v",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/3d6226cc2d1077537220361c82e34a362c6c76ee', 'https://github.com/chakra-core/ChakraCore/commit/36644ee0d4cc2bc97a3cd49c3540e6eea193182a'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0989, CVE-2019-0991, CVE-2019-0992, CVE-2019-1002, CVE-2019-1003, CVE-2019-1024, CVE-2019-1051, CVE-2019-1052.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/36644ee0d4cc2bc97a3cd49c3540e6eea193182a",
      "commit_sha": "36644ee0d4cc2bc97a3cd49c3540e6eea193182a",
      "patch": "MULTI",
      "chain_ord": "['36644ee0d4cc2bc97a3cd49c3540e6eea193182a', '3d6226cc2d1077537220361c82e34a362c6c76ee']",
      "before_first_fix_commit": "{'d797e3f00e34c12c8c0ae52f56344325439dccd7', 'eabf77ad17010f220639e5261798da9ac14e43e3'}",
      "last_fix_commit": "3d6226cc2d1077537220361c82e34a362c6c76ee",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/15/2019, 23:54:48",
      "message": "CVE-2019-0993",
      "author": "Paul Leathers",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'lib/Runtime/Language/JavascriptOperators.cpp': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/36644ee0d4cc2bc97a3cd49c3540e6eea193182a/lib%2FRuntime%2FLanguage%2FJavascriptOperators.cpp', 'patch': \"@@ -9655,6 +9655,10 @@ using namespace Js;\\n             Var result = CALL_ENTRYPOINT(threadContext, marshalledFunction->GetEntryPoint(), function, CallInfo(flags, 1), thisVar);\\n             result = CrossSite::MarshalVar(requestContext, result);\\n \\n+            // Set implicit call flags so we bail out if we're trying to propagate the value forward, e.g., from a compare. Subsequent calls\\n+            // to the getter may produce different results.\\n+            threadContext->AddImplicitCallFlags(ImplicitCall_Accessor);\\n+\\n             return result;\\n         });\\n     }\"}}",
      "message_norm": "cve-2019-0993",
      "language": "ro",
      "entities": "[('cve-2019-0993', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Runtime/Language/JavascriptOperators.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 496,
      "vuln_id": "GHSA-4vhw-4rw7-jfpv",
      "cwe_id": "{'CWE-22'}",
      "score": 9.1,
      "chain": "{'https://github.com/NilsIrl/MozWire/pull/17/commits/dd0639bf2876773b66382f47285f7db701f628d9'}",
      "dataset": "osv",
      "summary": "Path traversal in mozwire An issue was discovered in the mozwire crate through 2020-08-18 for Rust. A ../ directory-traversal situation allows overwriting local files that have .conf at the end of the filename.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/NilsIrl/MozWire",
      "commit_href": "https://github.com/NilsIrl/MozWire/pull/17/commits/dd0639bf2876773b66382f47285f7db701f628d9",
      "commit_sha": "dd0639bf2876773b66382f47285f7db701f628d9",
      "patch": "SINGLE",
      "chain_ord": "['dd0639bf2876773b66382f47285f7db701f628d9']",
      "before_first_fix_commit": "{'1e58d8ba41268b36232e6830808565850ec65587'}",
      "last_fix_commit": "dd0639bf2876773b66382f47285f7db701f628d9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/18/2020, 19:05:11",
      "message": "Validate server hostnames to prevent path traversal\n\nIf Mozilla servers were compromised, hostnames could be used for path\ntraversal attacks. The impact would be very low as it would only be\npossible to write wireguard configs.\n\nFix #14",
      "author": "Nils",
      "comments": null,
      "stats": "{'additions': 23, 'deletions': 2, 'total': 25}",
      "files": "{'src/main.rs': {'additions': 23, 'deletions': 2, 'changes': 25, 'status': 'modified', 'raw_url': 'https://github.com/NilsIrl/MozWire/raw/dd0639bf2876773b66382f47285f7db701f628d9/src%2Fmain.rs', 'patch': '@@ -106,6 +106,14 @@ struct Server {\\n     port_ranges: Vec<(u16, u16)>,\\n }\\n \\n+impl Server {\\n+    fn validate_hostname(&self) -> bool {\\n+        self.hostname\\n+            .chars()\\n+            .all(|c| c.is_ascii_alphanumeric() || c == \\'-\\')\\n+    }\\n+}\\n+\\n // latitude and longitude omitted\\n #[derive(serde::Deserialize)]\\n struct City {\\n@@ -130,13 +138,26 @@ struct ServerList {\\n \\n impl ServerList {\\n     fn new(client: reqwest::blocking::Client, token: &str) -> Self {\\n-        client\\n+        let server_list = client\\n             .get(&format!(\"{}/vpn/servers\", BASE_URL))\\n             .bearer_auth(token)\\n             .send()\\n             .unwrap()\\n             .json::<ServerList>()\\n-            .unwrap()\\n+            .unwrap();\\n+        if let Some(server) = server_list\\n+            .countries\\n+            .iter()\\n+            .flat_map(|country| country.cities.iter().flat_map(|city| city.servers.iter()))\\n+            .find(|server| !server.validate_hostname())\\n+        {\\n+            eprintln!(\\n+                \"A server contains invalid characters in its hostname: {}\",\\n+                server.hostname\\n+            );\\n+            std::process::exit(3);\\n+        }\\n+        server_list\\n     }\\n }'}}",
      "message_norm": "validate server hostnames to prevent path traversal\n\nif mozilla servers were compromised, hostnames could be used for path\ntraversal attacks. the impact would be very low as it would only be\npossible to write wireguard configs.\n\nfix #14",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('server', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('low', 'SEVERITY', ''), ('fix', 'ACTION', ''), ('#14', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main.rs'])",
      "num_files": 1.0
    },
    {
      "index": 878,
      "vuln_id": "GHSA-6pqm-xvfc-w7p4",
      "cwe_id": "{'CWE-352'}",
      "score": 6.5,
      "chain": "{'https://github.com/star7th/showdoc/commit/654e871a3923e79076818a9a03533fe88222c871'}",
      "dataset": "osv",
      "summary": "showdoc is vulnerable to Cross-Site Request Forgery (CSRF) showdoc is vulnerable to Cross-Site Request Forgery (CSRF).",
      "published_date": "2021-12-03",
      "chain_len": 1,
      "project": "https://github.com/star7th/showdoc",
      "commit_href": "https://github.com/star7th/showdoc/commit/654e871a3923e79076818a9a03533fe88222c871",
      "commit_sha": "654e871a3923e79076818a9a03533fe88222c871",
      "patch": "SINGLE",
      "chain_ord": "['654e871a3923e79076818a9a03533fe88222c871']",
      "before_first_fix_commit": "{'a9886f26c08225e0adca75c67dfca3f7c42b87d0'}",
      "last_fix_commit": "654e871a3923e79076818a9a03533fe88222c871",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/22/2021, 12:22:29",
      "message": "Cookie security /Cookie \u5b89\u5168",
      "author": "star7th",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 0, 'total': 12}",
      "files": "{'server/index.php': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/star7th/showdoc/raw/654e871a3923e79076818a9a03533fe88222c871/server%2Findex.php', 'patch': \"@@ -8,6 +8,18 @@\\n     require './vendor/autoload.php';\\n }\\n \\n+// cookie\u5b89\u5168\uff0c\u7ed9PHPSESSID\u52a0\u4e0aStrict\\n+if (PHP_VERSION_ID >= 70300) {\\n+    session_set_cookie_params([\\n+        'samesite' => 'Strict'\\n+    ]);\\n+} else { \\n+    session_set_cookie_params(\\n+        NULL,\\n+        '/; samesite=Strict',\\n+    );\\n+}\\n+\\n // \u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f \u5efa\u8bae\u5f00\u53d1\u9636\u6bb5\u5f00\u542f \u90e8\u7f72\u9636\u6bb5\u6ce8\u91ca\u6216\u8005\u8bbe\u4e3afalse\\n define('APP_DEBUG',True);\"}}",
      "message_norm": "cookie security /cookie \u5b89\u5168",
      "language": "en",
      "entities": "[('cookie', 'SECWORD', ''), ('security', 'SECWORD', ''), ('/cookie', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/index.php'])",
      "num_files": 1.0
    },
    {
      "index": 3029,
      "vuln_id": "GHSA-v222-6mr4-qj29",
      "cwe_id": "{'CWE-78'}",
      "score": 10.0,
      "chain": "{'https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee', 'https://github.com/jirutka/asciidoctor-include-ext/commit/c7ea001a597c7033575342c51483dab7b87ae155'}",
      "dataset": "osv",
      "summary": "Command Injection vulnerability in asciidoctor-include-ext ### Impact\n\nApplications using [Asciidoctor (Ruby)](https://github.com/asciidoctor/asciidoctor) with [asciidoctor-include-ext](https://github.com/jirutka/asciidoctor-include-ext) (prior to version 0.4.0), which render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. ~~This attack is possible even when `allow-uri-read` is disabled!~~ (EDIT: it\u2019s not)\n\n\n### Patches\n\nThe vulnerability has been fixed in commit c7ea001 (and further improved in cbaccf3), which is included in version [0.4.0](https://rubygems.org/gems/asciidoctor-include-ext/versions/0.4.0).\n\n### Workarounds\n\n```rb\nrequire 'asciidoctor/include_ext'\n\nclass Asciidoctor::IncludeExt::IncludeProcessor\n  # Overrides superclass private method to mitigate Command Injection\n  # vulnerability in asciidoctor-include-ext <0.4.0.\n  def target_uri?(target)\n    target.downcase.start_with?('http://', 'https://') \\\n      && URI.parse(target).is_a?(URI::HTTP)\n  rescue URI::InvalidURIError\n    false\n  end\nend\n```\n\n### References\n\n* https://sakurity.com/blog/2015/02/28/openuri.html\n\n### Credits\n\nThis vulnerability was discovered by Joern Schneeweisz from the GitLab Security Research Team.\n\n\n### For more information\n\nSee commit message c7ea001.\n\nIf you have any questions or comments about this advisory open an issue in [jirutka/asciidoctor-include-ext](https://github.com/jirutka/asciidoctor-include-ext/issues/).",
      "published_date": "2022-03-31",
      "chain_len": 2,
      "project": "https://github.com/jirutka/asciidoctor-include-ext",
      "commit_href": "https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "commit_sha": "cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "patch": "MULTI",
      "chain_ord": "['c7ea001a597c7033575342c51483dab7b87ae155', 'cbaccf3de533cbca224bf61d0b74e4b84d41d8ee']",
      "before_first_fix_commit": "{'c7ea001a597c7033575342c51483dab7b87ae155'}",
      "last_fix_commit": "cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "chain_ord_pos": 2.0,
      "commit_datetime": "03/29/2022, 22:50:30",
      "message": "Make #read_lines code more robust, avoid using IO.open directly",
      "author": "Jakub Jirutka",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 4, 'total': 14}",
      "files": "{'lib/asciidoctor/include_ext/include_processor.rb': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https://github.com/jirutka/asciidoctor-include-ext/raw/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee/lib%2Fasciidoctor%2Finclude_ext%2Finclude_processor.rb', 'patch': \"@@ -113,10 +113,16 @@ def resolve_target_path(target, reader)\\n     #   the line number. If `nil` is given, all lines are passed.\\n     # @return [Array<String>] an array of read lines.\\n     def read_lines(path, selector)\\n-      if selector\\n-        IO.foreach(path).select.with_index(1, &selector)\\n-      else\\n-        URI.open(path, &:read)\\n+      # IO.open is deliberately not used directly to avoid potential security risks.\\n+      # TODO: Get rid of 'open-uri' (URI.open).\\n+      io = target_http?(path) ? URI : File\\n+\\n+      io.open(path) do |f|\\n+        if selector\\n+          f.each.select.with_index(1, &selector)\\n+        else\\n+          f.read\\n+        end\\n       end\\n     end\"}}",
      "message_norm": "make #read_lines code more robust, avoid using io.open directly",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/asciidoctor/include_ext/include_processor.rb'])",
      "num_files": 1.0
    },
    {
      "index": 531,
      "vuln_id": "GHSA-52q8-877j-gghq",
      "cwe_id": "{'CWE-22'}",
      "score": 0.0,
      "chain": "{'https://github.com/moinwiki/moin-1.9/commit/6b96a9060069302996b5af47fd4a388fc80172b7'}",
      "dataset": "osv",
      "summary": "remote code execution via cache action in MoinMoin ### Impact\nThe cache action in action/cache.py allows directory traversal through a crafted HTTP request. An attacker who can upload attachments to\nthe wiki can use this to achieve remote code execution.\n\n### Patches\nUsers are strongly advised to upgrade to a patched version.\n\nMoinMoin Wiki 1.9.11 has the necessary fixes and also contains other important fixes.\n\n### Workarounds\nIt is not advised to work around this, but to upgrade MoinMoin to a patched version.\n\nThat said, a work around via disabling the `cache` or the `AttachFile` action might be possible.\n\nAlso, it is of course helpful if you give `write` permissions (which include uploading attachments) only to trusted users.\n\n### Credits\n\nThis vulnerability was discovered by Michael Chapman.\n\n### For more information\nIf you have any questions or comments about this advisory, email me at [twaldmann@thinkmo.de](mailto:twaldmann@thinkmo.de).",
      "published_date": "2020-11-11",
      "chain_len": 1,
      "project": "https://github.com/moinwiki/moin-1.9",
      "commit_href": "https://github.com/moinwiki/moin-1.9/commit/6b96a9060069302996b5af47fd4a388fc80172b7",
      "commit_sha": "6b96a9060069302996b5af47fd4a388fc80172b7",
      "patch": "SINGLE",
      "chain_ord": "['6b96a9060069302996b5af47fd4a388fc80172b7']",
      "before_first_fix_commit": "{'d1e5fc7d3708d877353ca64dd4aa7cfd1cde4cb4', '31de9139d0aabc171e94032168399b4a0b2a88a2'}",
      "last_fix_commit": "6b96a9060069302996b5af47fd4a388fc80172b7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/08/2020, 16:21:56",
      "message": "Merge pull request from GHSA-52q8-877j-gghq\n\nsecurity: fix remote code execution via cache action, CVE-2020-25074",
      "author": "TW",
      "comments": null,
      "stats": "{'additions': 20, 'deletions': 7, 'total': 27}",
      "files": "{'MoinMoin/action/cache.py': {'additions': 20, 'deletions': 7, 'changes': 27, 'status': 'modified', 'raw_url': 'https://github.com/moinwiki/moin-1.9/raw/6b96a9060069302996b5af47fd4a388fc80172b7/MoinMoin%2Faction%2Fcache.py', 'patch': \"@@ -103,6 +103,19 @@ def key(request, wikiname=None, itemname=None, attachname=None, content=None, se\\n     return key\\n \\n \\n+def valid_key(key):\\n+    # make sure the key looks like keys generated by key()\\n+    if not isinstance(key, unicode):\\n+        # key is None (not given in url args) or something unexpected\\n+        return False\\n+    try:\\n+        int(key, 16)  # try to evaluate as hex number\\n+    except ValueError:\\n+        # was not a hex number\\n+        return False\\n+    return len(key) == 40  # hmac-sha1 hexdigest == 40 hex chars\\n+\\n+\\n def put(request, key, data,\\n         filename=None,\\n         content_type=None,\\n@@ -234,14 +247,14 @@ def _do_remove(request, key):\\n     remove(request, key)\\n \\n \\n-def _do(request, do, key):\\n-    if do == 'get':\\n-        _do_get(request, key)\\n-    elif do == 'remove':\\n-        _do_remove(request, key)\\n-\\n def execute(pagename, request):\\n     do = request.values.get('do')\\n     key = request.values.get('key')\\n-    _do(request, do, key)\\n+    valid = valid_key(key)  # validate untrusted input\\n+    if valid and do == 'get':\\n+        _do_get(request, key)\\n+    elif valid and do == 'remove':\\n+        _do_remove(request, key)\\n+    else:\\n+        request.status_code = 404\"}}",
      "message_norm": "merge pull request from ghsa-52q8-877j-gghq\n\nsecurity: fix remote code execution via cache action, cve-2020-25074",
      "language": "en",
      "entities": "[('ghsa-52q8-877j-gghq', 'VULNID', 'GHSA'), ('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('remote code execution', 'SECWORD', ''), ('cve-2020-25074', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['MoinMoin/action/cache.py'])",
      "num_files": 1.0
    },
    {
      "index": 925,
      "vuln_id": "GHSA-72p5-2r6g-fm6v",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/totaljs/cms/commit/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad', 'https://github.com/totaljs/cms/commit/8b9d7dada998c08d172481d9f0fc0397c4b3c78d'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects total.js Total.js CMS 12.0.0 has XSS related to themes/admin/views/index.html (item.message) and themes/admin/public/ui.js (column.format).",
      "published_date": "2019-04-02",
      "chain_len": 2,
      "project": "https://github.com/totaljs/cms",
      "commit_href": "https://github.com/totaljs/cms/commit/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad",
      "commit_sha": "75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad",
      "patch": "MULTI",
      "chain_ord": "['75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad', '8b9d7dada998c08d172481d9f0fc0397c4b3c78d']",
      "before_first_fix_commit": "{'75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad'}",
      "last_fix_commit": "8b9d7dada998c08d172481d9f0fc0397c4b3c78d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/13/2019, 19:29:24",
      "message": "Fixed XSS.",
      "author": "Peter S\u030cirka",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'themes/admin/public/ui.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/totaljs/cms/raw/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad/themes%2Fadmin%2Fpublic%2Fui.js', 'patch': \"@@ -559,7 +559,7 @@ COMPONENT('grid', 'filter:true;external:false;fillcount:50;filterlabel:Filtering\\n \\t\\t\\tfor (var j = 0, jl = columns.length; j < jl; j++) {\\n \\t\\t\\t\\tvar column = columns[j];\\n \\t\\t\\t\\tvar val = items[i][column.name];\\n-\\t\\t\\t\\tm.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : (column.format ? val.format(column.format) : val);\\n+\\t\\t\\t\\tm.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : Thelpers.encode((column.format ? val.format(column.format) : val));\\n \\t\\t\\t\\tm.index = j;\\n \\t\\t\\t\\tm.align = column.align;\\n \\t\\t\\t\\tm.background = column.background;\"}}",
      "message_norm": "fixed xss.",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['themes/admin/public/ui.js'])",
      "num_files": 1.0
    },
    {
      "index": 573,
      "vuln_id": "GHSA-57f3-gghm-9mhc",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/MrRio/jsPDF/commit/d8bb3b39efcd129994f7a3b01b632164144ec43e'}",
      "dataset": "osv",
      "summary": "Regular Expression Denial of Service (ReDoS) This affects the package jspdf before 2.3.1. ReDoS is possible via the addImage function.",
      "published_date": "2021-03-12",
      "chain_len": 1,
      "project": "https://github.com/MrRio/jsPDF",
      "commit_href": "https://github.com/MrRio/jsPDF/commit/d8bb3b39efcd129994f7a3b01b632164144ec43e",
      "commit_sha": "d8bb3b39efcd129994f7a3b01b632164144ec43e",
      "patch": "SINGLE",
      "chain_ord": "['d8bb3b39efcd129994f7a3b01b632164144ec43e']",
      "before_first_fix_commit": "{'c91995de97c598deaf6fda7109ea886a50f50109'}",
      "last_fix_commit": "d8bb3b39efcd129994f7a3b01b632164144ec43e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/11/2021, 15:50:17",
      "message": "fix ReDoS-vulnerable regexp in addImage (#3091)",
      "author": "Yeting Li",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/modules/addimage.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/parallax/jsPDF/raw/d8bb3b39efcd129994f7a3b01b632164144ec43e/src%2Fmodules%2Faddimage.js', 'patch': '@@ -630,7 +630,7 @@ import { atob, btoa } from \"../libs/AtobBtoa.js\";\\n     var result = null;\\n \\n     if (dataUrlParts.length === 2) {\\n-      var extractedInfo = /^data:(\\\\w*\\\\/\\\\w*);*(charset=[\\\\w=-]*)*;*$/.exec(\\n+      var extractedInfo = /^data:(\\\\w*\\\\/\\\\w*);*(charset=(?!charset=)[\\\\w=-]*)*;*$/.exec(\\n         dataUrlParts[0]\\n       );\\n       if (Array.isArray(extractedInfo)) {'}}",
      "message_norm": "fix redos-vulnerable regexp in addimage (#3091)",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('#3091', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/modules/addimage.js'])",
      "num_files": 1.0
    }
  ]
}