{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":2027,
            "vuln_id":"GHSA-h8pj-cxx2-jfg2",
            "cwe_id":"{'CWE-20'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/encode\/httpx\/pull\/2185\/commits\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in httpx Encode OSS httpx <=1.0.0.beta0 is affected by improper input validation in `httpx.URL`, `httpx.Client` and some functions using `httpx.URL.copy_with`.",
            "published_date":"2022-04-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/encode\/httpx",
            "commit_href":"https:\/\/github.com\/encode\/httpx\/pull\/2185\/commits\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
            "commit_sha":"e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
            "patch":"SINGLE",
            "chain_ord":"['e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1']",
            "before_first_fix_commit":"{'b07fe7b0745e62be5ef9bce1bee9e7d7a8878552'}",
            "last_fix_commit":"e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2022, 06:22:38",
            "message":"Patch `copy_with`",
            "author":"lebr0nli",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'httpx\/_urls.py': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/encode\/httpx\/raw\/e3c495a32c63d8aa7f1bcf3b7b27ee1a0ff428e1\/httpx%2F_urls.py', 'patch': '@@ -484,7 +484,11 @@ def copy_with(self, **kwargs: typing.Any) -> \"URL\":\\n         #  \\\\_\/   \\\\______________\/\\\\_________\/ \\\\_________\/ \\\\__\/\\n         #   |           |            |            |        |\\n         # scheme     authority       path        query   fragment\\n-        return URL(self._uri_reference.copy_with(**kwargs).unsplit())\\n+        new_url = URL(self)\\n+        new_url._uri_reference = self._uri_reference.copy_with(**kwargs)\\n+        if new_url.is_absolute_url:\\n+            new_url._uri_reference = new_url._uri_reference.normalize()\\n+        return URL(new_url)\\n \\n     def copy_set_param(self, key: str, value: typing.Any = None) -> \"URL\":\\n         return self.copy_with(params=self.params.set(key, value))'}}",
            "message_norm":"patch `copy_with`",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['httpx\/_urls.py'])",
            "num_files":1.0
        },
        {
            "index":2508,
            "vuln_id":"GHSA-p4v2-r99v-wjc2",
            "cwe_id":"{'CWE-116'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/nicotine-plus\/nicotine-plus\/commit\/0e3e2fac27a518f0a84330f1ddf1193424522045'}",
            "dataset":"osv",
            "summary":"Improper Encoding or Escaping of Output in Nicotine+ Denial of service (DoS) vulnerability in Nicotine+ starting with version 3.0.3 and prior to version 3.2.1 allows a user with a modified Soulseek client to crash Nicotine+ by sending a file download request with a file path containing a null character.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/nicotine-plus\/nicotine-plus",
            "commit_href":"https:\/\/github.com\/nicotine-plus\/nicotine-plus\/commit\/0e3e2fac27a518f0a84330f1ddf1193424522045",
            "commit_sha":"0e3e2fac27a518f0a84330f1ddf1193424522045",
            "patch":"SINGLE",
            "chain_ord":"['0e3e2fac27a518f0a84330f1ddf1193424522045']",
            "before_first_fix_commit":"{'aabfa856bd57bcf986c2ea296457986e83c0c98b'}",
            "last_fix_commit":"0e3e2fac27a518f0a84330f1ddf1193424522045",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/22\/2021, 18:49:21",
            "message":"Handle invalid file paths in file download requests\n\nFixes #1777",
            "author":"mathiascode",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 4, 'total': 17}",
            "files":"{'pynicotine\/shares.py': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nicotine-plus\/nicotine-plus\/raw\/0e3e2fac27a518f0a84330f1ddf1193424522045\/pynicotine%2Fshares.py', 'patch': '@@ -609,13 +609,22 @@ def load_shares(cls, shares, dbs, reset_shares=False):\\n \\n     def file_is_shared(self, user, virtualfilename, realfilename):\\n \\n-        log.add_transfer(\"Checking if file %(virtual_name)s with real path %(path)s is shared\", {\\n+        log.add_transfer(\"Checking if file is shared: %(virtual_name)s with real path %(path)s\", {\\n             \"virtual_name\": virtualfilename,\\n             \"path\": realfilename\\n         })\\n \\n-        if not os.access(realfilename, os.R_OK):\\n-            log.add_transfer(\"Can\\'t access file %(virtual_name)s with real path %(path)s, not sharing\", {\\n+        try:\\n+            if not os.access(realfilename, os.R_OK):\\n+                log.add_transfer(\"Cannot access file, not sharing: %(virtual_name)s with real path %(path)s\", {\\n+                    \"virtual_name\": virtualfilename,\\n+                    \"path\": realfilename\\n+                })\\n+                return False\\n+\\n+        except Exception:\\n+            log.add_transfer((\"Requested file path contains invalid characters or other errors, not sharing: \"\\n+                              \"%(virtual_name)s with real path %(path)s\"), {\\n                 \"virtual_name\": virtualfilename,\\n                 \"path\": realfilename\\n             })\\n@@ -643,7 +652,7 @@ def file_is_shared(self, user, virtualfilename, realfilename):\\n                 if file == fileinfo[0]:\\n                     return True\\n \\n-        log.add_transfer(\"Failed to share file %(virtual_name)s with real path %(path)s, since it wasn\\'t found\", {\\n+        log.add_transfer(\"Failed to share file, since it wasn\\'t found: %(virtual_name)s with real path %(path)s\", {\\n             \"virtual_name\": virtualfilename,\\n             \"path\": realfilename\\n         })'}}",
            "message_norm":"handle invalid file paths in file download requests\n\nfixes #1777",
            "language":"en",
            "entities":"[('fixes', 'ACTION', ''), ('#1777', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pynicotine\/shares.py'])",
            "num_files":1.0
        },
        {
            "index":2909,
            "vuln_id":"GHSA-r9vm-rhmf-7hxx",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Turistforeningen\/node-im-resize\/commit\/de624dacf6a50e39fe3472af1414d44937ce1f03'}",
            "dataset":"osv",
            "summary":"OS Command Injection in im-resize im-resize through 2.3.2 allows remote attackers to execute arbitrary commands via the \"exec\" argument. The cmd argument used within index.js, can be controlled by user without any sanitization.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/Turistforeningen\/node-im-resize",
            "commit_href":"https:\/\/github.com\/Turistforeningen\/node-im-resize\/commit\/de624dacf6a50e39fe3472af1414d44937ce1f03",
            "commit_sha":"de624dacf6a50e39fe3472af1414d44937ce1f03",
            "patch":"SINGLE",
            "chain_ord":"['de624dacf6a50e39fe3472af1414d44937ce1f03']",
            "before_first_fix_commit":"{'499fe82028337ae55cb61c24696c1ec16f0f9c9a'}",
            "last_fix_commit":"de624dacf6a50e39fe3472af1414d44937ce1f03",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/03\/2020, 21:25:54",
            "message":"fix: check image arguments before processing (#19)\n\nRegex hotfix to check for command injection",
            "author":"Sam Sanoop",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'index.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Turistforeningen\/node-im-resize\/raw\/de624dacf6a50e39fe3472af1414d44937ce1f03\/index.js', 'patch': \"@@ -7,13 +7,17 @@ var join = require('path').join;\\n var sprintf = require('util').format;\\n \\n module.exports = function(image, output, cb) {\\n+  if(\/;|&|`|\\\\$|\\\\(|\\\\)|\\\\|\\\\||\\\\||!|>|<|\\\\?|\\\\${\/g.test(JSON.stringify(image))) {\\n+    console.log('Input Validation failed, Suspicious Characters found');\\n+  } else {\\n   var cmd = module.exports.cmd(image, output);\\n   exec(cmd, {timeout: 30000}, function(e, stdout, stderr) {\\n     if (e) { return cb(e); }\\n     if (stderr) { return cb(new Error(stderr)); }\\n \\n     return cb(null, output.versions);\\n   });\\n+}\\n };\\n \\n \/**\"}}",
            "message_norm":"fix: check image arguments before processing (#19)\n\nregex hotfix to check for command injection",
            "language":"en",
            "entities":"[('#19', 'ISSUE', ''), ('hotfix', 'ACTION', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2449,
            "vuln_id":"GHSA-mq35-wqvf-r23c",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/sinatra\/sinatra\/commit\/12786867d6faaceaec62c7c2cb5b0e2dc074d71a'}",
            "dataset":"osv",
            "summary":"Sinatra has XSS via 400 Bad Request page via params parser exception Sinatra before 2.0.2 has XSS via the 400 Bad Request page that occurs upon a params parser exception.",
            "published_date":"2018-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/sinatra\/sinatra",
            "commit_href":"https:\/\/github.com\/sinatra\/sinatra\/commit\/12786867d6faaceaec62c7c2cb5b0e2dc074d71a",
            "commit_sha":"12786867d6faaceaec62c7c2cb5b0e2dc074d71a",
            "patch":"SINGLE",
            "chain_ord":"['12786867d6faaceaec62c7c2cb5b0e2dc074d71a']",
            "before_first_fix_commit":"{'5149dc9e0b0e281231b91223c6a414c905ad3a96'}",
            "last_fix_commit":"12786867d6faaceaec62c7c2cb5b0e2dc074d71a",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/30\/2018, 16:05:27",
            "message":"escape invalid query params, fixes #1428",
            "author":"Kunpei Sakai",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/sinatra\/base.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sinatra\/sinatra\/raw\/12786867d6faaceaec62c7c2cb5b0e2dc074d71a\/lib%2Fsinatra%2Fbase.rb', 'patch': '@@ -78,7 +78,7 @@ def unlink?\\n     def params\\n       super\\n     rescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError => e\\n-      raise BadRequest, \"Invalid query parameters: #{e.message}\"\\n+      raise BadRequest, \"Invalid query parameters: #{Rack::Utils.escape_html(e.message)}\"\\n     end\\n \\n     private'}}",
            "message_norm":"escape invalid query params, fixes #1428",
            "language":"ca",
            "entities":"[('escape', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#1428', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/sinatra\/base.rb'])",
            "num_files":1.0
        },
        {
            "index":2550,
            "vuln_id":"GHSA-pc58-wgmc-hfjr",
            "cwe_id":"{'CWE-1321'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mout\/mout\/commit\/3fecf1333e6d71ae72edf48c71dc665e40df7605'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in mout This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/mout\/mout",
            "commit_href":"https:\/\/github.com\/mout\/mout\/commit\/3fecf1333e6d71ae72edf48c71dc665e40df7605",
            "commit_sha":"3fecf1333e6d71ae72edf48c71dc665e40df7605",
            "patch":"SINGLE",
            "chain_ord":"['3fecf1333e6d71ae72edf48c71dc665e40df7605']",
            "before_first_fix_commit":"{'397fa131ec8090e305397d2db2d607c04440c2f3', '2189378ed476d34b3cd39ba7f1199dbf12b8e51b'}",
            "last_fix_commit":"3fecf1333e6d71ae72edf48c71dc665e40df7605",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/15\/2021, 18:58:13",
            "message":"Merge pull request #270 from 418sec\/1-npm-mout\n\nSecurity Fix for Prototype Pollution - huntr.dev",
            "author":"Mathias Paumgarten",
            "comments":"{'com_1': {'author': 'andrew-itscript', 'datetime': '08\/31\/2021, 08:47:19', 'body': '@roboshoes when do you plan to publish these changes to npm?'}, 'com_2': {'author': 'roboshoes', 'datetime': '09\/01\/2021, 17:49:50', 'body': 'Sorry for the delay. Has been released under [`v1.2.3`](https:\/\/www.npmjs.com\/package\/mout\/v\/1.2.3)'}}",
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'src\/object\/set.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mout\/mout\/raw\/3fecf1333e6d71ae72edf48c71dc665e40df7605\/src%2Fobject%2Fset.js', 'patch': '@@ -4,6 +4,10 @@ define([\\'.\/namespace\\'], function (namespace) {\\n      * set \"nested\" object property\\n      *\/\\n     function set(obj, prop, val){\\n+        \/\/ prototype pollution mitigation\\n+        if(prop.includes(\\'__proto__\\') || prop.includes(\\'prototype\\') || prop.includes(\\'constructor\\')) {\\n+            return false;\\n+        }\\n         var parts = (\/^(.+)\\\\.(.+)$\/).exec(prop);\\n         if (parts){\\n             namespace(obj, parts[1])[parts[2]] = val;'}}",
            "message_norm":"merge pull request #270 from 418sec\/1-npm-mout\n\nsecurity fix for prototype pollution - huntr.dev",
            "language":"en",
            "entities":"[('#270', 'ISSUE', ''), ('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/object\/set.js'])",
            "num_files":1.0
        },
        {
            "index":2205,
            "vuln_id":"GHSA-j7c4-2xj8-wm7r",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/latchset\/kdcproxy\/commit\/f274aa6787cb8b3ec1cc12c440a56665b7231882'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects kdcproxy python-kdcproxy before 0.3.2 allows remote attackers to cause a denial of service via a large POST request.",
            "published_date":"2018-11-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/latchset\/kdcproxy",
            "commit_href":"https:\/\/github.com\/latchset\/kdcproxy\/commit\/f274aa6787cb8b3ec1cc12c440a56665b7231882",
            "commit_sha":"f274aa6787cb8b3ec1cc12c440a56665b7231882",
            "patch":"SINGLE",
            "chain_ord":"['f274aa6787cb8b3ec1cc12c440a56665b7231882']",
            "before_first_fix_commit":"{'e4a71193099cd395578bcf32f4eb8beaa7da3e43'}",
            "last_fix_commit":"f274aa6787cb8b3ec1cc12c440a56665b7231882",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/03\/2015, 18:38:49",
            "message":"Enforce a maximum packet length\n\nPermanently fixes CVE-2015-5159 for all applications.",
            "author":"Nathaniel McCallum",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'kdcproxy\/__init__.py': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/latchset\/kdcproxy\/raw\/f274aa6787cb8b3ec1cc12c440a56665b7231882\/kdcproxy%2F__init__.py', 'patch': '@@ -61,6 +61,7 @@ def __str__(self):\\n \\n \\n class Application:\\n+    MAX_LENGTH = 128 * 1024\\n     SOCKTYPES = {\\n         \"tcp\": socket.SOCK_STREAM,\\n         \"udp\": socket.SOCK_DGRAM,\\n@@ -180,7 +181,11 @@ def __call__(self, env, start_response):\\n             try:\\n                 length = int(env[\"CONTENT_LENGTH\"])\\n             except AttributeError:\\n-                length = -1\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length < 0:\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length > self.MAX_LENGTH:\\n+                raise HTTPException(413, \"Request entity too large.\")\\n             try:\\n                 pr = codec.decode(env[\"wsgi.input\"].read(length))\\n             except codec.ParsingError as e:'}}",
            "message_norm":"enforce a maximum packet length\n\npermanently fixes cve-2015-5159 for all applications.",
            "language":"en",
            "entities":"[('fixes', 'ACTION', ''), ('cve-2015-5159', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['kdcproxy\/__init__.py'])",
            "num_files":1.0
        },
        {
            "index":729,
            "vuln_id":"GHSA-6296-mvgp-27hp",
            "cwe_id":"{'CWE-611'}",
            "score":4.2,
            "chain":"{'https:\/\/github.com\/eclipse\/lyo\/commit\/a8b15b7f49ca15e55f6699749c39705d21367c6e'}",
            "dataset":"osv",
            "summary":"XML External Entity Reference in Eclipse Lyo In Eclipse Lyo versions 1.0.0 to 4.1.0, a TransformerFactory is initialized with the defaults that do not restrict DTD loading when working with RDF\/XML. This allows an attacker to cause an external DTD to be retrieved.",
            "published_date":"2022-07-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/eclipse\/lyo",
            "commit_href":"https:\/\/github.com\/eclipse\/lyo\/commit\/a8b15b7f49ca15e55f6699749c39705d21367c6e",
            "commit_sha":"a8b15b7f49ca15e55f6699749c39705d21367c6e",
            "patch":"SINGLE",
            "chain_ord":"['a8b15b7f49ca15e55f6699749c39705d21367c6e']",
            "before_first_fix_commit":"{'5c07867c6fb4076f0177a28abc48cb83598197de'}",
            "last_fix_commit":"a8b15b7f49ca15e55f6699749c39705d21367c6e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2022, 12:03:44",
            "message":"Improve Transformer init\n\nSigned-off-by: Andrew Berezovskyi <andriib@kth.se>",
            "author":"Andrew Berezovskyi",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 14, 'total': 24}",
            "files":"{'core\/oslc4j-jena-provider\/src\/main\/java\/org\/eclipse\/lyo\/oslc4j\/provider\/jena\/JenaModelHelper.java': {'additions': 10, 'deletions': 14, 'changes': 24, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/eclipse\/lyo\/raw\/a8b15b7f49ca15e55f6699749c39705d21367c6e\/core%2Foslc4j-jena-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Flyo%2Foslc4j%2Fprovider%2Fjena%2FJenaModelHelper.java', 'patch': '@@ -52,6 +52,7 @@\\n import org.slf4j.LoggerFactory;\\n import org.w3c.dom.Element;\\n \\n+import javax.xml.XMLConstants;\\n import javax.xml.datatype.DatatypeConfigurationException;\\n import javax.xml.datatype.DatatypeFactory;\\n import javax.xml.namespace.QName;\\n@@ -119,7 +120,7 @@ static Model createJenaModel(final String descriptionAbout, final String respons\\n             final ResponseInfo<?> responseInfo, final Object[] objects, final Map<String, Object> properties)\\n             throws DatatypeConfigurationException, IllegalAccessException, IllegalArgumentException,\\n             InvocationTargetException, OslcCoreApplicationException {\\n-        \\n+\\n         Instant start = Instant.now();\\n \\n         final Model model = ModelFactory.createDefaultModel();\\n@@ -402,7 +403,7 @@ public static Object[] fromJenaModel(final Model model, final Class<?> beanClass\\n             IllegalArgumentException,\\n             InstantiationException, InvocationTargetException, OslcCoreApplicationException,\\n             URISyntaxException, SecurityException, NoSuchMethodException {\\n-        \\n+\\n         Instant start = Instant.now();\\n \\n         final List<Object> results = new ArrayList<>();\\n@@ -664,10 +665,7 @@ else if (!(bean instanceof AbstractResource))\\n                 {\\n                     if (extendedProperties == null)\\n                     {\\n-                        logger.debug(\"Set method not found for object type:\\t\" +\\n-                                beanClass.getName() +\\n-                                \", uri:\\t\" +\\n-                                uri);\\n+                        logger.debug(\"Set method not found for object type: {}, uri: {}\", beanClass.getName(), uri);\\n                     }\\n                     else\\n                     {\\n@@ -2270,20 +2268,18 @@ private static String getVisitedResourceName(Resource resource)\\n         return visitedResourceName;\\n     }\\n \\n-    private static Transformer createTransformer()\\n-    {\\n-        try\\n-        {\\n-            Transformer transformer = TransformerFactory.newInstance().newTransformer();\\n+    private static Transformer createTransformer() {\\n+        try {\\n+            TransformerFactory factory = TransformerFactory.newInstance();\\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\\n \\n+            Transformer transformer = factory.newTransformer();\\n             transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\\n \\n             return transformer;\\n-\\n         } catch (TransformerException e) {\\n-\\n             throw new RuntimeException(e);\\n-\\n         }\\n     }'}}",
            "message_norm":"improve transformer init\n\nsigned-off-by: andrew berezovskyi <andriib@kth.se>",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('andriib@kth.se', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/oslc4j-jena-provider\/src\/main\/java\/org\/eclipse\/lyo\/oslc4j\/provider\/jena\/JenaModelHelper.java'])",
            "num_files":1.0
        },
        {
            "index":1832,
            "vuln_id":"GHSA-g6vq-wc8w-4g69",
            "cwe_id":"{'CWE-352'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37'}",
            "dataset":"osv",
            "summary":"firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF) firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF).",
            "published_date":"2021-12-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/firefly-iii\/firefly-iii",
            "commit_href":"https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "commit_sha":"518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "patch":"SINGLE",
            "chain_ord":"['518b4ba5a7a56760902758ae0a2c6a392c2f4d37']",
            "before_first_fix_commit":"{'0f9c1b9427b946b5eb580112edfcb3ed6a812970'}",
            "last_fix_commit":"518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2021, 18:22:07",
            "message":"Fix CSRF issues",
            "author":"James Cole",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 5, 'total': 11}",
            "files":"{'routes\/web.php': {'additions': 6, 'deletions': 5, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/firefly-iii\/firefly-iii\/raw\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37\/routes%2Fweb.php', 'patch': \"@@ -213,7 +213,7 @@ static function () {\\n     ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\\\Http\\\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\\n     static function () {\\n         Route::get('', ['uses' => 'Bill\\\\IndexController@index', 'as' => 'index']);\\n-        Route::get('rescan\/{bill}', ['uses' => 'Bill\\\\ShowController@rescan', 'as' => 'rescan']);\\n+        Route::post('rescan\/{bill}', ['uses' => 'Bill\\\\ShowController@rescan', 'as' => 'rescan']);\\n         Route::get('create', ['uses' => 'Bill\\\\CreateController@create', 'as' => 'create']);\\n         Route::get('edit\/{bill}', ['uses' => 'Bill\\\\EditController@edit', 'as' => 'edit']);\\n         Route::get('delete\/{bill}', ['uses' => 'Bill\\\\DeleteController@delete', 'as' => 'delete']);\\n@@ -649,7 +649,7 @@ static function () {\\n         Route::get('rate\/{fromCurrencyCode}\/{toCurrencyCode}\/{date}', ['uses' => 'Json\\\\ExchangeController@getRate', 'as' => 'rate']);\\n \\n         \/\/ intro things:\\n-        Route::any('intro\/finished\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postFinished', 'as' => 'intro.finished']);\\n+        Route::post('intro\/finished\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postFinished', 'as' => 'intro.finished']);\\n         Route::post('intro\/enable\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postEnable', 'as' => 'intro.enable']);\\n         Route::get('intro\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@getIntroSteps', 'as' => 'intro']);\\n     }\\n@@ -726,14 +726,15 @@ static function () {\\n         Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\\n         Route::get('2fa\/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\\n         Route::post('2fa\/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\\n-        Route::get('\/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\\n-        Route::get('2fa\/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\\n+        Route::post('\/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\\n+        Route::post('2fa\/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\\n \\n     }\\n );\\n \\n \/**\\n  * Recurring Transactions Controller.\\n+ * \\n  *\/\\n Route::group(\\n     ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\\\Http\\\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\\n@@ -1078,7 +1079,7 @@ static function () {\\n \/\/ See reference nr. 6\\n         Route::post('store\/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\\n         Route::get('delete\/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\\n-        Route::get('switch\/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\\n+        Route::post('switch\/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\\n \\n         Route::post('destroy\/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\\n     }\"}}",
            "message_norm":"fix csrf issues",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('issues', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['routes\/web.php'])",
            "num_files":1.0
        },
        {
            "index":3107,
            "vuln_id":"GHSA-vfr4-x8j2-3rf9",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `TransposeConv` ### Impact\nThe optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/optimized\/optimized_ops.h#L5221-L5222):\n\n```cc \nint height_col = (height + pad_t + pad_b - filter_h) \/ stride_h + 1;\nint width_col = (width + pad_l + pad_r - filter_w) \/ stride_w + 1;\n```\n\nAn attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "commit_sha":"801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "patch":"SINGLE",
            "chain_ord":"['801c1c6be5324219689c98e1bd3e0ca365ee834d']",
            "before_first_fix_commit":"{'8e45822aa0b9f5df4b4c64f221e64dc930a70a9d'}",
            "last_fix_commit":"801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:25",
            "message":"Fix another division by 0 in TFLite\n\nPiperOrigin-RevId: 370800181\nChange-Id: I924809166a6131f5075e6d45c455106538d755f9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/lite\/kernels\/transpose_conv.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/801c1c6be5324219689c98e1bd3e0ca365ee834d\/tensorflow%2Flite%2Fkernels%2Ftranspose_conv.cc', 'patch': '@@ -591,6 +591,10 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   const auto* params =\\n       reinterpret_cast<TfLiteTransposeConvParams*>(node->builtin_data);\\n \\n+  \/\/ Prevent divisions by 0\\n+  TF_LITE_ENSURE(context, params->stride_height > 0);\\n+  TF_LITE_ENSURE(context, params->stride_width > 0);\\n+\\n   \/\/ Resize any deferred dynamic tensors\\n   if (IsDynamicTensor(output)) {\\n     TF_LITE_ENSURE_OK(context, ResizeTensor(context, output_shape, output));'}}",
            "message_norm":"fix another division by 0 in tflite\n\npiperorigin-revid: 370800181\nchange-id: i924809166a6131f5075e6d45c455106538d755f9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370800181', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/transpose_conv.cc'])",
            "num_files":1.0
        },
        {
            "index":1171,
            "vuln_id":"GHSA-8948-ffc6-jg52",
            "cwe_id":"{'CWE-20'}",
            "score":4.2,
            "chain":"{'https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516'}",
            "dataset":"osv",
            "summary":"Insecure Default Configuration in redbird Versions of `redbird` prior to 0.9.1 have a vulnerable default configuration of allowing TLS 1.0 connections on `lib\/proxy.js`. The package does not provide an option to disable TLS 1.0 which is deprecated and vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 0.9.1 or later.",
            "published_date":"2019-06-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/OptimalBits\/redbird",
            "commit_href":"https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516",
            "commit_sha":"39c7a2da84a2ddddfe046ea80e98800518920516",
            "patch":"SINGLE",
            "chain_ord":"['39c7a2da84a2ddddfe046ea80e98800518920516']",
            "before_first_fix_commit":"{'b0ba23a53e881204e4bca4cef75305edb4f9e8b4'}",
            "last_fix_commit":"39c7a2da84a2ddddfe046ea80e98800518920516",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2019, 16:07:54",
            "message":"Adding option to disable older SSL\/TLS versions\n\nSimply pass in \"secureOptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
            "author":"James Thomas",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'lib\/proxy.js': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/OptimalBits\/redbird\/raw\/39c7a2da84a2ddddfe046ea80e98800518920516\/lib%2Fproxy.js', 'patch': '@@ -252,6 +252,11 @@ ReverseProxy.prototype.setupHttpsProxy = function (proxy, websocketsUpgrade, log\\n     key: getCertData(sslOpts.key),\\n     cert: getCertData(sslOpts.cert)\\n   };\\n+  \\n+  \/\/ Allows the option to disable older SSL\/TLS versions\\n+  if(sslOpts.secureOptions) {\\n+    ssl.secureOptions = sslOpts.secureOptions;\\n+  }\\n \\n   if (sslOpts.ca) {\\n     ssl.ca = getCertData(sslOpts.ca, true);'}}",
            "message_norm":"adding option to disable older ssl\/tls versions\n\nsimply pass in \"secureoptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
            "language":"en",
            "entities":"[('adding', 'ACTION', ''), ('ssl', 'SECWORD', ''), ('tls', 'SECWORD', ''), ('secureoptions', 'SECWORD', ''), ('https proxy', 'SECWORD', ''), ('server', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/proxy.js'])",
            "num_files":1.0
        },
        {
            "index":196,
            "vuln_id":"GHSA-34hv-f45p-4qfq",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/WWBN\/AVideo\/commit\/77e9aa6411ff4b97571eb82e587139ec05ff894c'}",
            "dataset":"osv",
            "summary":"Open redirect in wwbn\/avideo Open redirect vulnerability in objects\/login.json.php in WWBN AVideo through 11.6, allows attackers to arbitrarily redirect users from a crafted url to the login page. A patch is available on the `master` branch of the repository.",
            "published_date":"2022-04-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/WWBN\/AVideo",
            "commit_href":"https:\/\/github.com\/WWBN\/AVideo\/commit\/77e9aa6411ff4b97571eb82e587139ec05ff894c",
            "commit_sha":"77e9aa6411ff4b97571eb82e587139ec05ff894c",
            "patch":"SINGLE",
            "chain_ord":"['77e9aa6411ff4b97571eb82e587139ec05ff894c']",
            "before_first_fix_commit":"{'24a25e4f415be8146c89f04df32ba4acce1b0e80'}",
            "last_fix_commit":"77e9aa6411ff4b97571eb82e587139ec05ff894c",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 17:54:12",
            "message":"Open Redirect fix, thanks Max Boll",
            "author":"Daniel",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'objects\/login.json.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WWBN\/AVideo\/raw\/77e9aa6411ff4b97571eb82e587139ec05ff894c\/objects%2Flogin.json.php', 'patch': '@@ -30,7 +30,7 @@\\n Category::clearCacheCount();\\n TimeLogEnd($timeLog, __LINE__);\\n \\n-if (!preg_match(\"|^\" . $global[\\'webSiteRootURL\\'] . \"|\", $_POST[\\'redirectUri\\'])) {\\n+if(!isSameDomain($global[\\'webSiteRootURL\\'], $_POST[\\'redirectUri\\'])){\\n     $_POST[\\'redirectUri\\'] = $global[\\'webSiteRootURL\\'];\\n }\\n _error_log(\"Start Login Request redirectUri=\" . $_POST[\\'redirectUri\\']);'}}",
            "message_norm":"open redirect fix, thanks max boll",
            "language":"en",
            "entities":"[('open redirect', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['objects\/login.json.php'])",
            "num_files":1.0
        },
        {
            "index":682,
            "vuln_id":"GHSA-5qjq-69w6-fg57",
            "cwe_id":"{'CWE-79'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/flarum\/core\/commit\/440bed81b8019dff00642c8f493b4909d505a28a'}",
            "dataset":"osv",
            "summary":"XSS vulnerability with translator Flarum's translation system allowed for string inputs to be converted into HTML DOM nodes when rendered. This change was made after v0.1.0-beta.16 (our last beta before v1.0.0) and was not noticed or documented.\n\nThis allowed for any user to type malicious HTML markup within certain user input fields and have this execute on client browsers. The example which led to the discovery of this vulnerability was in the forum search box. Entering faux-malicious HTML markup, such as <script>alert('test')<\/script> resulted in an alert box appearing on the forum. This attack could also be modified to perform AJAX requests on behalf of a user, possibly deleting discussions, modifying their settings or profile, or even modifying settings on the Admin panel if the attack was targetted towards a privileged user.\n\n### Impact\n\nAll Flarum communities that run flarum v1.0.0 or v1.0.1 are impacted.\n\n### Patches\n\nThe vulnerability has been fixed and published as flarum\/core v1.0.2. All communities running Flarum v1.0 have to upgrade as soon as possible to v1.0.2 using:\n\n```\ncomposer update --prefer-dist --no-dev -a -W\n```\n\nYou can then confirm you run the latest version using:\n\n```\ncomposer show flarum\/core\n```\n\n### Workarounds\n\n__None.__\n\n### For more information\n\nFor any questions or comments on this vulnerability please visit https:\/\/discuss.flarum.org\/d\/27558.\n\nFor support questions create a discussion at https:\/\/discuss.flarum.org\/t\/support.\n\nA reminder that if you ever become aware of a security issue in Flarum, please report it to us privately by emailing security@flarum.org, and we will address it promptly.",
            "published_date":"2021-06-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/flarum\/core",
            "commit_href":"https:\/\/github.com\/flarum\/core\/commit\/440bed81b8019dff00642c8f493b4909d505a28a",
            "commit_sha":"440bed81b8019dff00642c8f493b4909d505a28a",
            "patch":"SINGLE",
            "chain_ord":"['440bed81b8019dff00642c8f493b4909d505a28a']",
            "before_first_fix_commit":"{'eeb8fe1443b98f5f622ca52b4a02732f62d1aa77'}",
            "last_fix_commit":"440bed81b8019dff00642c8f493b4909d505a28a",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/06\/2021, 01:41:48",
            "message":"Fix XSS vulnerability",
            "author":"David Wheatley",
            "comments":"{'com_1': {'author': 'davwheat', 'datetime': '06\/07\/2021, 20:53:34', 'body': 'The details about this vulnerability have now been made public.\\r\\n\\r\\nFor more information, please see: https:\/\/discuss.flarum.org\/d\/27558-critical-security-update-to-flarum-core-v102'}}",
            "stats":"{'additions': 12, 'deletions': 1, 'total': 13}",
            "files":"{'js\/src\/common\/Translator.tsx': {'additions': 12, 'deletions': 1, 'changes': 13, 'status': 'renamed', 'raw_url': 'https:\/\/github.com\/flarum\/framework\/raw\/440bed81b8019dff00642c8f493b4909d505a28a\/js%2Fsrc%2Fcommon%2FTranslator.tsx', 'patch': \"@@ -48,12 +48,23 @@ export default class Translator {\\n     \/\/ future there should be a hook here to inspect the user and change the\\n     \/\/ translation key. This will allow a gender property to determine which\\n     \/\/ translation key is used.\\n+\\n     if ('user' in parameters) {\\n       const user = extract(parameters, 'user');\\n \\n       if (!parameters.username) parameters.username = username(user);\\n     }\\n-    return parameters;\\n+\\n+    const escapedParameters: TranslatorParameters = {};\\n+\\n+    for (const param in parameters) {\\n+      const paramValue = parameters[param];\\n+\\n+      if (typeof paramValue === 'string') escapedParameters[param] = <>{parameters[param]}<\/>;\\n+      else escapedParameters[param] = parameters[param];\\n+    }\\n+\\n+    return escapedParameters;\\n   }\\n \\n   trans(id: string, parameters: TranslatorParameters = {}) {\"}}",
            "message_norm":"fix xss vulnerability",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['js\/src\/common\/Translator.tsx'])",
            "num_files":1.0
        },
        {
            "index":2541,
            "vuln_id":"GHSA-p9j6-4pjr-gp48",
            "cwe_id":"{'CWE-22'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/joniles\/mpxj\/commit\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d'}",
            "dataset":"osv",
            "summary":"MPXJ path Traversal vulnerability common\/InputStreamHelper.java in Packwood MPXJ before 8.3.5 allows directory traversal in the zip stream handler flow, leading to the writing of files to arbitrary locations.",
            "published_date":"2020-12-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/joniles\/mpxj",
            "commit_href":"https:\/\/github.com\/joniles\/mpxj\/commit\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "commit_sha":"8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "patch":"SINGLE",
            "chain_ord":"['8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d']",
            "before_first_fix_commit":"{'1eed5f01ac8e49b433e0538bdc079caeda7d6fd7'}",
            "last_fix_commit":"8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2020, 12:13:14",
            "message":"zip slip fix",
            "author":"Jon Iles",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'src\/main\/java\/net\/sf\/mpxj\/common\/InputStreamHelper.java': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/joniles\/mpxj\/raw\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d\/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fmpxj%2Fcommon%2FInputStreamHelper.java', 'patch': '@@ -114,6 +114,7 @@ public static File writeZipStreamToTempDir(InputStream inputStream) throws IOExc\\n     *\/\\n    private static void processZipStream(File dir, InputStream inputStream) throws IOException\\n    {\\n+      String canonicalDestinationDirPath = dir.getCanonicalPath();\\n       ZipInputStream zip = new ZipInputStream(inputStream);\\n       while (true)\\n       {\\n@@ -124,6 +125,14 @@ private static void processZipStream(File dir, InputStream inputStream) throws I\\n          }\\n \\n          File file = new File(dir, entry.getName());\\n+\\n+         \/\/ https:\/\/snyk.io\/research\/zip-slip-vulnerability\\n+         String canonicalDestinationFile = file.getCanonicalPath();\\n+         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\\n+         {\\n+            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\\n+         }\\n+\\n          if (entry.isDirectory())\\n          {\\n             FileHelper.mkdirsQuietly(file);'}}",
            "message_norm":"zip slip fix",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/net\/sf\/mpxj\/common\/InputStreamHelper.java'])",
            "num_files":1.0
        },
        {
            "index":2796,
            "vuln_id":"GHSA-qpw2-xchm-655q",
            "cwe_id":"{'CWE-125'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/mhart\/StringStream\/commit\/2f4a9d496f94b0880e01a26857aa266a5a3ef274'}",
            "dataset":"osv",
            "summary":"Out-of-Bounds read in stringstream Versions less than 0.0.6 of the Node.js stringstream module are vulnerable to an out-of-bounds read because of allocation of uninitialized buffers when a number is passed in the input stream (when using Node.js 4.x).\n\n# WITHDRAWN\n\nThis is a duplicate of GHSA-mf6x-7mm4-x2g7",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/mhart\/StringStream",
            "commit_href":"https:\/\/github.com\/mhart\/StringStream\/commit\/2f4a9d496f94b0880e01a26857aa266a5a3ef274",
            "commit_sha":"2f4a9d496f94b0880e01a26857aa266a5a3ef274",
            "patch":"SINGLE",
            "chain_ord":"['2f4a9d496f94b0880e01a26857aa266a5a3ef274']",
            "before_first_fix_commit":"{'1efe3bf507bf3a1161f8473908b60e881d41422b', 'afbc7442220358419e330618e47f3a65fc265b1b'}",
            "last_fix_commit":"2f4a9d496f94b0880e01a26857aa266a5a3ef274",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/17\/2018, 10:22:09",
            "message":"Merge pull request #9 from mhart\/fix-buffer-constructor-vuln\n\nEnsure data is not a number in Buffer constructor",
            "author":"Michael Hart",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'stringstream.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mhart\/StringStream\/raw\/2f4a9d496f94b0880e01a26857aa266a5a3ef274\/stringstream.js', 'patch': \"@@ -28,7 +28,7 @@ StringStream.prototype.write = function(data) {\\n     return false\\n   }\\n   if (this.fromEncoding) {\\n-    if (Buffer.isBuffer(data)) data = data.toString()\\n+    if (Buffer.isBuffer(data) || typeof data === 'number') data = data.toString()\\n     data = new Buffer(data, this.fromEncoding)\\n   }\\n   var string = this.decoder.write(data)\"}}",
            "message_norm":"merge pull request #9 from mhart\/fix-buffer-constructor-vuln\n\nensure data is not a number in buffer constructor",
            "language":"en",
            "entities":"[('#9', 'ISSUE', ''), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['stringstream.js'])",
            "num_files":1.0
        },
        {
            "index":1518,
            "vuln_id":"GHSA-c94w-c95p-phf8",
            "cwe_id":"{'CWE-190'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/fcd18ce3101f245b083b30655c27b239dc72221e'}",
            "dataset":"osv",
            "summary":"Integer overflow in Tensorflow ### Impact\nThe [implementation of `OpLevelCostEstimator::CalculateTensorSize`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc#L1552-L1558) is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements:\n```cc\nint64_t OpLevelCostEstimator::CalculateTensorSize(\n    const OpInfo::TensorProperties& tensor, bool* found_unknown_shapes) {\n  int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);\n  int size = DataTypeSize(BaseType(tensor.dtype()));\n  VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;\n  return count * size;\n}\n```\nHere, `count` and `size` can be large enough to cause `count * size` to overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [fcd18ce3101f245b083b30655c27b239dc72221e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/fcd18ce3101f245b083b30655c27b239dc72221e).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/fcd18ce3101f245b083b30655c27b239dc72221e",
            "commit_sha":"fcd18ce3101f245b083b30655c27b239dc72221e",
            "patch":"SINGLE",
            "chain_ord":"['fcd18ce3101f245b083b30655c27b239dc72221e']",
            "before_first_fix_commit":"{'29e899868d77d8f575907515acefa012c5574246'}",
            "last_fix_commit":"fcd18ce3101f245b083b30655c27b239dc72221e",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/09\/2021, 22:54:52",
            "message":"Prevent integer overflow in `OpLevelCostEstimator::CalculateTensorSize`.\n\nIn order to not change the API, we return a negative value in case of overflow. A better fix is to change the API to return a status instead.\n\nPiperOrigin-RevId: 408713061\nChange-Id: I3771475b0c72a2844a3854086966562fd33f2da5",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/fcd18ce3101f245b083b30655c27b239dc72221e\/tensorflow%2Fcore%2Fgrappler%2Fcosts%2Fop_level_cost_estimator.cc', 'patch': '@@ -1555,7 +1555,13 @@ int64_t OpLevelCostEstimator::CalculateTensorSize(\\n   int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);\\n   int size = DataTypeSize(BaseType(tensor.dtype()));\\n   VLOG(2) << \"Count: \" << count << \" DataTypeSize: \" << size;\\n-  return count * size;\\n+  int64_t tensor_size = MultiplyWithoutOverflow(count, size);\\n+  if (tensor_size < 0) {\\n+    VLOG(1) << \"Overflow encountered when computing tensor size, multiplying \"\\n+            << count << \" with \" << size;\\n+    return -1;\\n+  }\\n+  return tensor_size;\\n }\\n \\n int64_t OpLevelCostEstimator::CalculateInputSize(const OpInfo& op_info,'}}",
            "message_norm":"prevent integer overflow in `oplevelcostestimator::calculatetensorsize`.\n\nin order to not change the api, we return a negative value in case of overflow. a better fix is to change the api to return a status instead.\n\npiperorigin-revid: 408713061\nchange-id: i3771475b0c72a2844a3854086966562fd33f2da5",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('integer overflow', 'SECWORD', ''), ('change', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('change', 'ACTION', ''), ('408713061', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc'])",
            "num_files":1.0
        },
        {
            "index":676,
            "vuln_id":"GHSA-5q6m-3h65-w53x",
            "cwe_id":"{'CWE-78'}",
            "score":5.6,
            "chain":"{'https:\/\/github.com\/facebook\/create-react-app\/commit\/f5e415f3a5b66f07dcc60aba1b445fa7cda97268'}",
            "dataset":"osv",
            "summary":"react-dev-utils OS Command Injection in function `getProcessForPort` react-dev-utils prior to v11.0.4 exposes a function, `getProcessForPort`, where an input argument is concatenated into a command string to be executed. This function is typically used from react-scripts (in Create React App projects), where the usage is safe. Only when this function is manually invoked with user-provided values (ie: by custom code) is there the potential for command injection. If you're consuming it from react-scripts then this issue does not affect you.",
            "published_date":"2021-03-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/facebook\/create-react-app",
            "commit_href":"https:\/\/github.com\/facebook\/create-react-app\/commit\/f5e415f3a5b66f07dcc60aba1b445fa7cda97268",
            "commit_sha":"f5e415f3a5b66f07dcc60aba1b445fa7cda97268",
            "patch":"SINGLE",
            "chain_ord":"['f5e415f3a5b66f07dcc60aba1b445fa7cda97268']",
            "before_first_fix_commit":"{'22f46a8d5dfc46fe0f613cd7efbc82344823f461'}",
            "last_fix_commit":"f5e415f3a5b66f07dcc60aba1b445fa7cda97268",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/08\/2021, 19:03:16",
            "message":"Security Fix for Command Injection - huntr.dev (#10644)\n\n* Update getProcessForPort.js\r\n\r\n* Update getProcessForPort.js\r\n\r\nCo-authored-by: Zhou Peng <zpbrent@gmail.com>\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>",
            "author":"huntr.dev | the place to protect open source",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'packages\/react-dev-utils\/getProcessForPort.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/facebook\/create-react-app\/raw\/f5e415f3a5b66f07dcc60aba1b445fa7cda97268\/packages%2Freact-dev-utils%2FgetProcessForPort.js', 'patch': \"@@ -9,6 +9,7 @@\\n \\n var chalk = require('chalk');\\n var execSync = require('child_process').execSync;\\n+var execFileSync = require('child_process').execFileSync;\\n var path = require('path');\\n \\n var execOptions = {\\n@@ -25,7 +26,7 @@ function isProcessAReactApp(processCommand) {\\n }\\n \\n function getProcessIdOnPort(port) {\\n-  return execSync('lsof -i:' + port + ' -P -t -sTCP:LISTEN', execOptions)\\n+  return execFileSync('lsof', ['-i:' + port, '-P', '-t', '-sTCP:LISTEN'], execOptions)\\n     .split('\\\\n')[0]\\n     .trim();\\n }\"}}",
            "message_norm":"security fix for command injection - huntr.dev (#10644)\n\n* update getprocessforport.js\r\n\r\n* update getprocessforport.js\r\n\r\nco-authored-by: zhou peng <zpbrent@gmail.com>\r\nco-authored-by: dan abramov <dan.abramov@gmail.com>",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('command injection', 'SECWORD', ''), ('#10644', 'ISSUE', ''), ('zpbrent@gmail.com', 'EMAIL', ''), ('dan.abramov@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/react-dev-utils\/getProcessForPort.js'])",
            "num_files":1.0
        },
        {
            "index":359,
            "vuln_id":"GHSA-44r7-7p62-q3fr",
            "cwe_id":"{'CWE-330', 'CWE-338'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/miekg\/dns\/commit\/8ebf2e419df7857ac8919baa05248789a8ffbf33'}",
            "dataset":"osv",
            "summary":"Insecure generation of random numbers The miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math\/rand is used. The TXID becomes predictable, leading to response forgeries.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/miekg\/dns",
            "commit_href":"https:\/\/github.com\/miekg\/dns\/commit\/8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "commit_sha":"8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "patch":"SINGLE",
            "chain_ord":"['8ebf2e419df7857ac8919baa05248789a8ffbf33']",
            "before_first_fix_commit":"{'6d0449f98180253901e9551a10ce679f35ff05be'}",
            "last_fix_commit":"8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/11\/2019, 07:31:09",
            "message":"Use crypto\/rand for random id generation. (#1044)\n\n* Use crypto\/rand for random id generation.\r\n\r\nFixes #1043 and #1037\r\n\r\n* Panic on rare crypto\/rand error.\r\n\r\n* Fixes in response to review.",
            "author":"Jacob Hoffman-Andrews",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 42, 'total': 52}",
            "files":"{'msg.go': {'additions': 10, 'deletions': 42, 'changes': 52, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/miekg\/dns\/raw\/8ebf2e419df7857ac8919baa05248789a8ffbf33\/msg.go', 'patch': '@@ -11,14 +11,12 @@ package dns\\n \/\/go:generate go run msg_generate.go\\n \\n import (\\n-\\tcrand \"crypto\/rand\"\\n+\\t\"crypto\/rand\"\\n \\t\"encoding\/binary\"\\n \\t\"fmt\"\\n \\t\"math\/big\"\\n-\\t\"math\/rand\"\\n \\t\"strconv\"\\n \\t\"strings\"\\n-\\t\"sync\"\\n )\\n \\n const (\\n@@ -73,53 +71,23 @@ var (\\n \\tErrTime          error = &Error{err: \"bad time\"}      \/\/ ErrTime indicates a timing error in TSIG authentication.\\n )\\n \\n-\/\/ Id by default, returns a 16 bits random number to be used as a\\n-\/\/ message id. The random provided should be good enough. This being a\\n-\/\/ variable the function can be reassigned to a custom function.\\n-\/\/ For instance, to make it return a static value:\\n+\/\/ Id by default returns a 16-bit random number to be used as a message id. The\\n+\/\/ number is drawn from a cryptographically secure random number generator.\\n+\/\/ This being a variable the function can be reassigned to a custom function.\\n+\/\/ For instance, to make it return a static value for testing:\\n \/\/\\n \/\/\\tdns.Id = func() uint16 { return 3 }\\n var Id = id\\n \\n-var (\\n-\\tidLock sync.Mutex\\n-\\tidRand *rand.Rand\\n-)\\n-\\n \/\/ id returns a 16 bits random number to be used as a\\n \/\/ message id. The random provided should be good enough.\\n func id() uint16 {\\n-\\tidLock.Lock()\\n-\\n-\\tif idRand == nil {\\n-\\t\\t\/\/ This (partially) works around\\n-\\t\\t\/\/ https:\/\/github.com\/golang\/go\/issues\/11833 by only\\n-\\t\\t\/\/ seeding idRand upon the first call to id.\\n-\\n-\\t\\tvar seed int64\\n-\\t\\tvar buf [8]byte\\n-\\n-\\t\\tif _, err := crand.Read(buf[:]); err == nil {\\n-\\t\\t\\tseed = int64(binary.LittleEndian.Uint64(buf[:]))\\n-\\t\\t} else {\\n-\\t\\t\\tseed = rand.Int63()\\n-\\t\\t}\\n-\\n-\\t\\tidRand = rand.New(rand.NewSource(seed))\\n+\\tvar output uint16\\n+\\terr := binary.Read(rand.Reader, binary.BigEndian, &output)\\n+\\tif err != nil {\\n+\\t\\tpanic(\"dns: reading random id failed: \" + err.Error())\\n \\t}\\n-\\n-\\t\/\/ The call to idRand.Uint32 must be within the\\n-\\t\/\/ mutex lock because *rand.Rand is not safe for\\n-\\t\/\/ concurrent use.\\n-\\t\/\/\\n-\\t\/\/ There is no added performance overhead to calling\\n-\\t\/\/ idRand.Uint32 inside a mutex lock over just\\n-\\t\/\/ calling rand.Uint32 as the global math\/rand rng\\n-\\t\/\/ is internally protected by a sync.Mutex.\\n-\\tid := uint16(idRand.Uint32())\\n-\\n-\\tidLock.Unlock()\\n-\\treturn id\\n+\\treturn output\\n }\\n \\n \/\/ MsgHdr is a a manually-unpacked version of (id, bits).'}}",
            "message_norm":"use crypto\/rand for random id generation. (#1044)\n\n* use crypto\/rand for random id generation.\r\n\r\nfixes #1043 and #1037\r\n\r\n* panic on rare crypto\/rand error.\r\n\r\n* fixes in response to review.",
            "language":"en",
            "entities":"[('crypto', 'SECWORD', ''), ('#1044', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#1043', 'ISSUE', ''), ('#1037', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['msg.go'])",
            "num_files":1.0
        },
        {
            "index":132,
            "vuln_id":"GHSA-2r8p-fg3c-wcj4",
            "cwe_id":"{'CWE-125'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bc9c546ce7015c57c2f15c168b3d9201de679a1d'}",
            "dataset":"osv",
            "summary":"Heap OOB and CHECK fail in `ResourceGather` ### Impact\nAn attacker can trigger a crash via a `CHECK`-fail in debug builds of TensorFlow using `tf.raw_ops.ResourceGather` or a read from outside the bounds of heap allocated data in the same API in a release build:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[1,2],[3,4],[5,6]],shape=(3,2),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=10,\n  validate_indices=False)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/resource_variable_ops.cc#L660-L668) does not check that the `batch_dims` value that the user supplies is less than the rank of the input tensor.\n\nSince the implementation uses several for loops over the dimensions of `tensor`, this results in reading data from outside the bounds of heap allocated buffer backing the tensor:\n\n```cc\n    \/\/ batch_dims_ = > params.dims() (10 > 2)\n    for (int i = 0; i < batch_dims_; ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n    for (int i = batch_dims_; i < indices.dims(); ++i) {\n      result_shape.AddDim(indices.dim_size(i));\n    }\n    for (int i = batch_dims_ + 1; i < params.dims(); ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n```\n\nIn debug mode, `.dim_size(i)` validates that the argument is less than `.dims()` using a `DCHECK`. But the `DCHECK` is a no-op in release builds.\n\n### Patches\nWe have patched the issue in GitHub commit [bc9c546ce7015c57c2f15c168b3d9201de679a1d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bc9c546ce7015c57c2f15c168b3d9201de679a1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bc9c546ce7015c57c2f15c168b3d9201de679a1d",
            "commit_sha":"bc9c546ce7015c57c2f15c168b3d9201de679a1d",
            "patch":"SINGLE",
            "chain_ord":"['bc9c546ce7015c57c2f15c168b3d9201de679a1d']",
            "before_first_fix_commit":"{'d5f28c9b17220a9c7b3a4c93fc6c3fea6949cadd'}",
            "last_fix_commit":"bc9c546ce7015c57c2f15c168b3d9201de679a1d",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 04:37:59",
            "message":"Prevent heap oob access in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387936433\nChange-Id: I9e71ddaa8dbd51ec6afbf163a6b3b591f193b4f6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/resource_variable_ops.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/bc9c546ce7015c57c2f15c168b3d9201de679a1d\/tensorflow%2Fcore%2Fkernels%2Fresource_variable_ops.cc', 'patch': '@@ -660,6 +660,11 @@ class ResourceGatherOp : public OpKernel {\\n     OP_REQUIRES(\\n         c, TensorShapeUtils::IsVectorOrHigher(params.shape()),\\n         errors::InvalidArgument(\"params must be at least 1 dimensional\"));\\n+    OP_REQUIRES(\\n+        c, params.shape().dims() >= batch_dims_,\\n+        errors::InvalidArgument(\"params must have at least \", batch_dims_,\\n+                                \" (batch_dims) dimensions but it has shape \",\\n+                                params.shape().DebugString()));\\n \\n     \/\/ Check that we have enough index space\\n     const int64_t N = indices.NumElements();'}}",
            "message_norm":"prevent heap oob access in `resource_variable_ops.cc`\n\npiperorigin-revid: 387936433\nchange-id: i9e71ddaa8dbd51ec6afbf163a6b3b591f193b4f6",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387936433', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/resource_variable_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3126,
            "vuln_id":"GHSA-vhm6-gw82-6f8j",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/703745d0ed3948623153117d761ce48514e2f281'}",
            "dataset":"osv",
            "summary":"Cross site scripting in LibreNMS LibreNMS prior to version 22.2.2 is vulnerable to cross-site scripting.",
            "published_date":"2022-02-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/703745d0ed3948623153117d761ce48514e2f281",
            "commit_sha":"703745d0ed3948623153117d761ce48514e2f281",
            "patch":"SINGLE",
            "chain_ord":"['703745d0ed3948623153117d761ce48514e2f281']",
            "before_first_fix_commit":"{'09929bd6865e54034db591ea37f5548406f5e716'}",
            "last_fix_commit":"703745d0ed3948623153117d761ce48514e2f281",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 14:28:31",
            "message":"Resolved XSS issue from alert rule list modal (#13805)",
            "author":"Neil Lathwood",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'includes\/html\/modal\/alert_rule_list.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/703745d0ed3948623153117d761ce48514e2f281\/includes%2Fhtml%2Fmodal%2Falert_rule_list.inc.php', 'patch': '@@ -62,7 +62,7 @@\\n                             echo \"\\n                                 <tr>\\n                                     <td>{$rule[\\'name\\']}<\/td>\\n-                                    <td><i>\" . htmlentities($rule_display) . \"<\/i><\/td>\\n+                                    <td><i>\" . htmlentities(strip_tags($rule_display)) . \"<\/i><\/td>\\n                                     <td>{$rule[\\'severity\\']}<\/td>\\n                                     <td>{$rule[\\'id\\']}<\/td>\\n                                 <\/tr>'}}",
            "message_norm":"resolved xss issue from alert rule list modal (#13805)",
            "language":"no",
            "entities":"[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/modal\/alert_rule_list.inc.php'])",
            "num_files":1.0
        },
        {
            "index":1570,
            "vuln_id":"GHSA-cmc7-mfmr-xqrx",
            "cwe_id":"{'CWE-480', 'CWE-287'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/abhinavsingh\/proxy.py\/pull\/482\/commits\/9b00093288237f5073c403f2c4f62acfdfa8ed46'}",
            "dataset":"osv",
            "summary":"Logic error in authentication in proxy.py before_upstream_connection in AuthPlugin in http\/proxy\/auth.py in proxy.py before 2.3.1 accepts incorrect Proxy-Authorization header data because of a boolean confusion (and versus or).",
            "published_date":"2021-04-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/abhinavsingh\/proxy.py",
            "commit_href":"https:\/\/github.com\/abhinavsingh\/proxy.py\/pull\/482\/commits\/9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "commit_sha":"9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "patch":"SINGLE",
            "chain_ord":"['9b00093288237f5073c403f2c4f62acfdfa8ed46']",
            "before_first_fix_commit":"{'0f78e74705e295bbfccfba342bf9fd34a9aa9103'}",
            "last_fix_commit":"9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/10\/2021, 16:30:14",
            "message":"Fix basic auth condition",
            "author":"Abhinav Singh",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'proxy\/http\/proxy\/auth.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/abhinavsingh\/proxy.py\/raw\/9b00093288237f5073c403f2c4f62acfdfa8ed46\/proxy%2Fhttp%2Fproxy%2Fauth.py', 'patch': \"@@ -35,8 +35,8 @@ def before_upstream_connection(\\n                 raise ProxyAuthenticationFailed()\\n             parts = request.headers[b'proxy-authorization'][1].split()\\n             if len(parts) != 2 \\\\\\n-                    and parts[0].lower() != b'basic' \\\\\\n-                    and parts[1] != self.flags.auth_code:\\n+                    or parts[0].lower() != b'basic' \\\\\\n+                    or parts[1] != self.flags.auth_code:\\n                 raise ProxyAuthenticationFailed()\\n         return request\"}}",
            "message_norm":"fix basic auth condition",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('auth', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['proxy\/http\/proxy\/auth.py'])",
            "num_files":1.0
        },
        {
            "index":2025,
            "vuln_id":"GHSA-h8hx-2c5r-32cf",
            "cwe_id":"{'CWE-352'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/TrestleAdmin\/trestle-auth\/commit\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery (CSRF) in trestle-auth ### Impact\nA vulnerability in trestle-auth versions 0.4.0 and 0.4.1 allows an attacker to create a form that will bypass Rails' built-in CSRF protection when submitted by a victim with a trestle-auth admin session. This potentially allows an attacker to alter protected data, including admin account credentials.\n\n### Patches\nThe vulnerability has been fixed in trestle-auth 0.4.2 released to RubyGems.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [trestle-auth](https:\/\/github.com\/TrestleAdmin\/trestle-auth\/issues)\n* Email the maintainer at [sam@sampohlenz.com](mailto:sam@sampohlenz.com)",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/TrestleAdmin\/trestle-auth",
            "commit_href":"https:\/\/github.com\/TrestleAdmin\/trestle-auth\/commit\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "commit_sha":"cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "patch":"SINGLE",
            "chain_ord":"['cb95b05cdb2609052207af07b4b8dfe3a23c11dc']",
            "before_first_fix_commit":"{'021955aa5d67260d6ba1faf2b5d59b9772164968'}",
            "last_fix_commit":"cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/12\/2021, 10:12:49",
            "message":"Ensure CSRF protection is prepended before authentication before_actions",
            "author":"Sam Pohlenz",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'lib\/trestle\/auth\/controller\/authentication.rb': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TrestleAdmin\/trestle-auth\/raw\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc\/lib%2Ftrestle%2Fauth%2Fcontroller%2Fauthentication.rb', 'patch': '@@ -9,6 +9,9 @@ module Authentication\\n \\n           prepend_before_action :require_authenticated_user\\n           prepend_before_action :authenticate_user\\n+\\n+          # Ensure that CSRF protection happens before authentication\\n+          protect_from_forgery prepend: true\\n         end\\n \\n       protected'}}",
            "message_norm":"ensure csrf protection is prepended before authentication before_actions",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/trestle\/auth\/controller\/authentication.rb'])",
            "num_files":1.0
        },
        {
            "index":2243,
            "vuln_id":"GHSA-jff5-55xj-4jcq",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/307ed31caba68a46426b8c73a787a05add2c7489'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Input During Web Page Generation in Jenkins jenkins before versions 2.44, 2.32.2 is vulnerable to a persisted cross-site scripting in search suggestions due to improperly escaping users with less-than and greater-than characters in their names (SECURITY-388).",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/307ed31caba68a46426b8c73a787a05add2c7489",
            "commit_sha":"307ed31caba68a46426b8c73a787a05add2c7489",
            "patch":"SINGLE",
            "chain_ord":"['307ed31caba68a46426b8c73a787a05add2c7489']",
            "before_first_fix_commit":"{'97a61a9fe55f4c16168c123f98301a5173b9fa86', '7ae469770fd10c79bebc07511cd0ab1cafd33292'}",
            "last_fix_commit":"307ed31caba68a46426b8c73a787a05add2c7489",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/10\/2017, 22:21:40",
            "message":"Merge pull request #98 from jenkinsci-cert\/SECURITY-388\n\n[SECURITY-388] Escape metacharacters in the search box",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'war\/src\/main\/webapp\/scripts\/hudson-behavior.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/307ed31caba68a46426b8c73a787a05add2c7489\/war%2Fsrc%2Fmain%2Fwebapp%2Fscripts%2Fhudson-behavior.js', 'patch': '@@ -2168,6 +2168,7 @@ function createSearchBox(searchURL) {\\n     var ac = new YAHOO.widget.AutoComplete(\"search-box\",\"search-box-completion\",ds);\\n     ac.typeAhead = false;\\n     ac.autoHighlight = false;\\n+    ac.formatResult = ac.formatEscapedResult;\\n \\n     var box   = $(\"search-box\");\\n     var sizer = $(\"search-box-sizer\");'}}",
            "message_norm":"merge pull request #98 from jenkinsci-cert\/security-388\n\n[security-388] escape metacharacters in the search box",
            "language":"en",
            "entities":"[('#98', 'ISSUE', ''), ('security-388', 'SECWORD', ''), ('security-388', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['war\/src\/main\/webapp\/scripts\/hudson-behavior.js'])",
            "num_files":1.0
        },
        {
            "index":1928,
            "vuln_id":"GHSA-grmf-4fq6-2r79",
            "cwe_id":"{'CWE-119'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/aubio\/aubio\/commit\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5'}",
            "dataset":"osv",
            "summary":"Improper Restriction of Operations within the Bounds of a Memory Buffer in aubio aubio v0.4.0 to v0.4.8 has a Buffer Overflow in new_aubio_tempo.",
            "published_date":"2019-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/aubio\/aubio",
            "commit_href":"https:\/\/github.com\/aubio\/aubio\/commit\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "commit_sha":"b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "patch":"SINGLE",
            "chain_ord":"['b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5']",
            "before_first_fix_commit":"{'c4a8bc138e49de8b43fcd2221ef84dfa5073208f'}",
            "last_fix_commit":"b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2018, 16:17:29",
            "message":"[tempo] fix buffer overflow in method parser",
            "author":"Paul Brossier",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'src\/tempo\/tempo.c': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/aubio\/aubio\/raw\/b1559f4c9ce2b304d8d27ffdc7128b6795ca82e5\/src%2Ftempo%2Ftempo.c', 'patch': '@@ -168,7 +168,7 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n     uint_t buf_size, uint_t hop_size, uint_t samplerate)\\n {\\n   aubio_tempo_t * o = AUBIO_NEW(aubio_tempo_t);\\n-  char_t specdesc_func[20];\\n+  char_t specdesc_func[PATH_MAX];\\n   o->samplerate = samplerate;\\n   \/\/ check parameters are valid\\n   if ((sint_t)hop_size < 1) {\\n@@ -203,9 +203,10 @@ aubio_tempo_t * new_aubio_tempo (const char_t * tempo_mode,\\n   o->pp       = new_aubio_peakpicker();\\n   aubio_peakpicker_set_threshold (o->pp, o->threshold);\\n   if ( strcmp(tempo_mode, \"default\") == 0 ) {\\n-    strcpy(specdesc_func, \"specflux\");\\n+    strncpy(specdesc_func, \"specflux\", PATH_MAX - 1);\\n   } else {\\n-    strcpy(specdesc_func, tempo_mode);\\n+    strncpy(specdesc_func, tempo_mode, PATH_MAX - 1);\\n+    specdesc_func[PATH_MAX - 1] = \\'\\\\0\\';\\n   }\\n   o->od       = new_aubio_specdesc(specdesc_func,buf_size);\\n   o->of       = new_fvec(1);'}}",
            "message_norm":"[tempo] fix buffer overflow in method parser",
            "language":"en",
            "entities":"[('buffer overflow', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/tempo\/tempo.c'])",
            "num_files":1.0
        },
        {
            "index":1746,
            "vuln_id":"GHSA-fm67-cv37-96ff",
            "cwe_id":"{'CWE-415'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/ultrajson\/ultrajson\/commit\/9c20de0f77b391093967e25d01fb48671104b15b'}",
            "dataset":"osv",
            "summary":"Potential double free of buffer during string decoding ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nWhen an error occurs while reallocating the buffer for string decoding, the buffer gets freed twice.\n\nDue to how UltraJSON uses the internal decoder, this double free is impossible to trigger from Python.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nUsers should upgrade to UltraJSON 5.4.0.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nThere is no workaround.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [UltraJSON](http:\/\/github.com\/ultrajson\/ultrajson\/issues)",
            "published_date":"2022-07-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/ultrajson\/ultrajson",
            "commit_href":"https:\/\/github.com\/ultrajson\/ultrajson\/commit\/9c20de0f77b391093967e25d01fb48671104b15b",
            "commit_sha":"9c20de0f77b391093967e25d01fb48671104b15b",
            "patch":"SINGLE",
            "chain_ord":"['9c20de0f77b391093967e25d01fb48671104b15b']",
            "before_first_fix_commit":"{'b21da40ead640b6153783dad506e68b4024056ef', '67ec07183342589d602e0fcf7bb1ff3e19272687'}",
            "last_fix_commit":"9c20de0f77b391093967e25d01fb48671104b15b",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/02\/2022, 05:11:59",
            "message":"Merge pull request from GHSA-fm67-cv37-96ff\n\nFix double free on string decoding if realloc fails",
            "author":"Hugo van Kemenade",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/ultrajsondec.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ultrajson\/ultrajson\/raw\/9c20de0f77b391093967e25d01fb48671104b15b\/lib%2Fultrajsondec.c', 'patch': '@@ -384,7 +384,7 @@ static FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode_string ( struct DecoderState *ds\\n       escStart = (JSUINT32 *)ds->dec->realloc(ds->escStart, newSize * sizeof(JSUINT32));\\n       if (!escStart)\\n       {\\n-        ds->dec->free(ds->escStart);\\n+        \/\/ Don\\'t free ds->escStart here; it gets handled in JSON_DecodeObject.\\n         return SetError(ds, -1, \"Could not reserve memory block\");\\n       }\\n       ds->escStart = escStart;'}}",
            "message_norm":"merge pull request from ghsa-fm67-cv37-96ff\n\nfix double free on string decoding if realloc fails",
            "language":"en",
            "entities":"[('ghsa-fm67-cv37-96ff', 'VULNID', 'GHSA'), ('double free', 'SECWORD', ''), ('decoding', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ultrajsondec.c'])",
            "num_files":1.0
        },
        {
            "index":2148,
            "vuln_id":"GHSA-hwj9-h5mp-3pm3",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/postcss\/postcss\/commit\/54cbf3c4847eb0fb1501b9d2337465439e849734', 'https:\/\/github.com\/postcss\/postcss\/commit\/b6f3e4d5a8d7504d553267f80384373af3a3dec5', 'https:\/\/github.com\/postcss\/postcss\/commit\/8682b1e4e328432ba692bed52326e84439cec9e4'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in postcss The npm package `postcss` from 7.0.0 and before versions 7.0.36 and 8.2.10 is vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.",
            "published_date":"2021-05-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/postcss\/postcss",
            "commit_href":"https:\/\/github.com\/postcss\/postcss\/commit\/8682b1e4e328432ba692bed52326e84439cec9e4",
            "commit_sha":"8682b1e4e328432ba692bed52326e84439cec9e4",
            "patch":"MULTI",
            "chain_ord":"['8682b1e4e328432ba692bed52326e84439cec9e4', 'b6f3e4d5a8d7504d553267f80384373af3a3dec5', '54cbf3c4847eb0fb1501b9d2337465439e849734']",
            "before_first_fix_commit":"{'12832f3d203474bd273bd06bd3b2407567bfe09e'}",
            "last_fix_commit":"54cbf3c4847eb0fb1501b9d2337465439e849734",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/08\/2021, 06:57:25",
            "message":"Fix unsafe regexp",
            "author":"Andrey Sitnik",
            "comments":"{'com_1': {'author': 'aw3218', 'datetime': '04\/19\/2021, 18:32:44', 'body': 'Any chance of getting this change into a 7.0.36 version?'}, 'com_2': {'author': 'ai', 'datetime': '04\/19\/2021, 18:35:03', 'body': '7.x support is over on Jan 1, 2020.\\r\\n\\r\\nThe issue is not so critical (it affects only online tools like CodePen). It is better to use this reason to update to PostCSS 8.'}, 'com_3': {'author': 'aw3218', 'datetime': '04\/19\/2021, 18:43:33', 'body': \"Angular 11 is calling cssnano@4.1.10 which calls version 7.0.35. Updating to cssnano@5.0.1 won't compile angular 11.\\r\\n\\r\\n`-- @angular-devkit\/build-angular@0.1102.7\\r\\n  +-- css-loader@5.0.1\\r\\n  | `-- postcss@8.2.10\\r\\n  +-- **cssnano@4.1.10**\\r\\n  | +-- cssnano-preset-default@4.0.8\\r\\n  | | +-- css-declaration-sorter@4.0.1\\r\\n  | | | `-**- postcss@7.0.35**\"}, 'com_4': {'author': 'ai', 'datetime': '04\/19\/2021, 18:44:29', 'body': 'Ask Angular 11 to update cssnano.'}, 'com_5': {'author': 'GeorgiosP', 'datetime': '04\/21\/2021, 15:59:36', 'body': 'Would this effect any project using editors like [monaco-editor](https:\/\/github.com\/microsoft\/monaco-editor\/blob\/92d6800a00070f876faad9ee7997e9efea7c5e4b\/package-lock.json#L2825) which has postcss or other browser based code editors with a dependency on V7 of postcss \ud83d\udcad'}, 'com_6': {'author': 'ai', 'datetime': '04\/21\/2021, 16:10:07', 'body': '@GeorgiosP it affects only use cases when:\\r\\n\\r\\n1. User send you CSS\\r\\n2. You compile this CSS on your servers\\r\\n\\r\\nIn this case, the user can generate special CSS which will take seconds or minutes to compile. An attacker can use it to DoS your servers.\\r\\n\\r\\nIf you can\u2019t update PostCSS, you can add timeout for CSS processing.'}, 'com_7': {'author': 'GeorgiosP', 'datetime': '04\/21\/2021, 16:16:41', 'body': '@ai thanks for the additional context \ud83d\ude4f\ud83c\udffc'}, 'com_8': {'author': 'Sesughter01', 'datetime': '05\/17\/2021, 08:22:18', 'body': 'how do I upgrade from 8.1.14 to the patched 8.2.10 in my laravel project?'}, 'com_9': {'author': 'Kmap-Holdings', 'datetime': '05\/17\/2021, 11:18:13', 'body': 'Eagerly waiting for this answer'}, 'com_10': {'author': 'ai', 'datetime': '05\/17\/2021, 11:30:43', 'body': '@Sesughter01 `yarn upgrade` or `npm update` should update your nested dependencies. But it is better to ask in Laravel community.'}, 'com_11': {'author': 'josephzidell', 'datetime': '05\/21\/2021, 14:00:06', 'body': \"@ai We run a DevSecOps pipeline (gov't work), and these vulns are causing full blockages. Not every plugin is compatible with v8 at the moment. Seems like it's taking the community some time to make the jump. Would you consider cutting a 7.x release for this?\"}, 'com_12': {'author': 'ai', 'datetime': '05\/21\/2021, 14:11:11', 'body': '@josephzidell this vulnerability affects only runner (`postcss-loader`, `postcss-cli`, `gulp-postcss`) and only on web compilers accepting user-generated CSS (like CodePen).\\r\\n\\r\\nPostCSS in plugin dependencies doesn\u2019t affect by this vulnerability.\\r\\n\\r\\nPostCSS 7 support ended in January 2021.\\r\\n\\r\\nIf you want extended support, you can pay for PostCSS commercial support.'}, 'com_13': {'author': 'josaphatmayuba', 'datetime': '01\/13\/2022, 06:07:16', 'body': 'I have\\r\\n\\r\\n> npm update\\r\\n\\r\\n![image](https:\/\/user-images.githubusercontent.com\/97654468\/149274944-50df9859-8e4d-4d20-8532-e43bdfd949da.png)'}, 'com_14': {'author': 'hakkisabah', 'datetime': '01\/15\/2022, 08:45:37', 'body': \"> I have\\r\\n> \\r\\n> > npm update\\r\\n> \\r\\n> ![image](https:\/\/user-images.githubusercontent.com\/97654468\/149274944-50df9859-8e4d-4d20-8532-e43bdfd949da.png)\\r\\n\\r\\nI don't understand, i have same issue and even more...\\r\\n![Screenshot (11)](https:\/\/user-images.githubusercontent.com\/10910670\/149615701-8738f08d-e779-4fa6-9587-94c524e1d140.png)\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/previous-map.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/postcss\/postcss\/raw\/8682b1e4e328432ba692bed52326e84439cec9e4\/lib%2Fprevious-map.js', 'patch': '@@ -54,7 +54,7 @@ class PreviousMap {\\n   }\\n \\n   loadAnnotation(css) {\\n-    let annotations = css.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=.*\\\\s*\\\\*\\\\\/\/gm)\\n+    let annotations = css.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=.*\\\\*\\\\\/\/gm)\\n \\n     if (annotations && annotations.length > 0) {\\n       \/\/ Locate the last sourceMappingURL to avoid picking up'}}",
            "message_norm":"fix unsafe regexp",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/previous-map.js'])",
            "num_files":1.0
        },
        {
            "index":412,
            "vuln_id":"GHSA-4fc4-4p5g-6w89",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/ckeditor\/ckeditor4\/commit\/d158413449692d920a778503502dcb22881bc949'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in CKEditor4 ### Affected packages\nThe vulnerability has been discovered in the core HTML processing module and may affect all plugins used by CKEditor 4.\n\n### Impact\nA potential vulnerability has been discovered in CKEditor 4 HTML processing core module. The vulnerability allowed to inject malformed HTML bypassing content sanitization, which could result in executing JavaScript code. It affects all users using the CKEditor 4 at version < 4.18.0.\n\n### Patches\nThe problem has been recognized and patched. The fix will be available in version 4.18.0.\n\n### For more information\nEmail us at security@cksource.com if you have any questions or comments about this advisory.\n\n### Acknowledgements\nThe CKEditor 4 team would like to thank GHSL team member Kevin Backhouse ([@kevinbackhouse](https:\/\/github.com\/kevinbackhouse)) for recognizing and reporting this vulnerability.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/ckeditor\/ckeditor4",
            "commit_href":"https:\/\/github.com\/ckeditor\/ckeditor4\/commit\/d158413449692d920a778503502dcb22881bc949",
            "commit_sha":"d158413449692d920a778503502dcb22881bc949",
            "patch":"SINGLE",
            "chain_ord":"['d158413449692d920a778503502dcb22881bc949']",
            "before_first_fix_commit":"{'8cff1e5aee3d766068792a374ba6b54a5cb92e2d'}",
            "last_fix_commit":"d158413449692d920a778503502dcb22881bc949",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/08\/2022, 16:35:34",
            "message":"Code refactoring.",
            "author":"Tomasz Jakut",
            "comments":null,
            "stats":"{'additions': 26, 'deletions': 14, 'total': 40}",
            "files":"{'core\/htmldataprocessor.js': {'additions': 26, 'deletions': 14, 'changes': 40, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ckeditor\/ckeditor4\/raw\/d158413449692d920a778503502dcb22881bc949\/core%2Fhtmldataprocessor.js', 'patch': '@@ -50,17 +50,18 @@\\n \\t\\thtmlFilter.addRules( createBogusAndFillerRules( editor, \\'html\\' ), { applyToAll: true } );\\n \\n \\t\\teditor.on( \\'toHtml\\', function( evt ) {\\n-\\t\\t\\tvar evtData = evt.data,\\n+\\t\\t\\tvar randomNumber = generateRandomNumber(),\\n+\\t\\t\\t\\tevtData = evt.data,\\n \\t\\t\\t\\tdata = evtData.dataValue,\\n \\t\\t\\t\\tfixBodyTag;\\n \\n \\t\\t\\t\/\/ Before we start protecting markup, make sure there are no externally injected\\n \\t\\t\\t\/\/ protection keywords.\\n-\\t\\t\\tdata = removeReservedKeywords( data );\\n+\\t\\t\\tdata = removeReservedKeywords( data, randomNumber );\\n \\n \\t\\t\\t\/\/ The source data is already HTML, but we need to clean\\n \\t\\t\\t\/\/ it up and apply the filter.\\n-\\t\\t\\tdata = protectSource( data, editor );\\n+\\t\\t\\tdata = protectSource( data, editor, randomNumber );\\n \\n \\t\\t\\t\/\/ Protect content of textareas. (https:\/\/dev.ckeditor.com\/ticket\/9995)\\n \\t\\t\\t\/\/ Do this before protecting attributes to avoid breaking:\\n@@ -70,7 +71,7 @@\\n \\t\\t\\t\/\/ Before anything, we must protect the URL attributes as the\\n \\t\\t\\t\/\/ browser may changing them when setting the innerHTML later in\\n \\t\\t\\t\/\/ the code.\\n-\\t\\t\\tdata = protectAttributes( data );\\n+\\t\\t\\tdata = protectAttributes( data, randomNumber );\\n \\n \\t\\t\\t\/\/ Protect elements than can\\'t be set inside a DIV. E.g. IE removes\\n \\t\\t\\t\/\/ style tags from innerHTML. (https:\/\/dev.ckeditor.com\/ticket\/3710)\\n@@ -90,7 +91,7 @@\\n \\n \\t\\t\\t\/\/ There are attributes which may execute JavaScript code inside fixBin.\\n \\t\\t\\t\/\/ Encode them greedily. They will be unprotected right after getting HTML from fixBin. (https:\/\/dev.ckeditor.com\/ticket\/10)\\n-\\t\\t\\tdata = protectInsecureAttributes( data );\\n+\\t\\t\\tdata = protectInsecureAttributes( data, randomNumber );\\n \\n \\t\\t\\tvar fixBin = evtData.context || editor.editable().getName(),\\n \\t\\t\\t\\tisPre;\\n@@ -110,7 +111,7 @@\\n \\t\\t\\tdata = el.getHtml().substr( 1 );\\n \\n \\t\\t\\t\/\/ Restore shortly protected attribute names.\\n-\\t\\t\\tdata = data.replace( new RegExp( \\'data-cke-\\' + CKEDITOR.rnd + \\'-\\', \\'ig\\' ), \\'\\' );\\n+\\t\\t\\tdata = data.replace( new RegExp( \\'data-cke-\\' + randomNumber + \\'-\\', \\'ig\\' ), \\'\\' );\\n \\n \\t\\t\\tisPre && ( data = data.replace( \/^<pre>|<\\\\\/pre>$\/gi, \\'\\' ) );\\n \\n@@ -838,13 +839,13 @@\\n \\n \\tvar protectSelfClosingRegex = \/<cke:(param|embed)([^>]*?)\\\\\/?>(?!\\\\s*<\\\\\/cke:\\\\1)\/gi;\\n \\n-\\tfunction protectAttributes( html ) {\\n+\\tfunction protectAttributes( html, randomNumber ) {\\n \\t\\treturn html.replace( protectElementRegex, function( element, tag, attributes ) {\\n \\t\\t\\treturn \\'<\\' + tag + attributes.replace( protectAttributeRegex, function( fullAttr, attrName ) {\\n \\t\\t\\t\\t\/\/ Avoid corrupting the inline event attributes (https:\/\/dev.ckeditor.com\/ticket\/7243).\\n \\t\\t\\t\\t\/\/ We should not rewrite the existed protected attributes, e.g. clipboard content from editor. (https:\/\/dev.ckeditor.com\/ticket\/5218)\\n \\t\\t\\t\\tif ( protectAttributeNameRegex.test( attrName ) && attributes.indexOf( \\'data-cke-saved-\\' + attrName ) == -1 )\\n-\\t\\t\\t\\t\\treturn \\' data-cke-saved-\\' + fullAttr + \\' data-cke-\\' + CKEDITOR.rnd + \\'-\\' + fullAttr;\\n+\\t\\t\\t\\t\\treturn \\' data-cke-saved-\\' + fullAttr + \\' data-cke-\\' + randomNumber + \\'-\\' + fullAttr;\\n \\n \\t\\t\\t\\treturn fullAttr;\\n \\t\\t\\t} ) + \\'>\\';\\n@@ -897,8 +898,8 @@\\n \\t\/\/ * opening tags - e.g. `<onfoo`,\\n \\t\/\/ * closing tags - e.g. <\/onfoo> (tested in \"false positive 1\"),\\n \\t\/\/ * part of other attribute - e.g. `data-onfoo` or `fonfoo`.\\n-\\tfunction protectInsecureAttributes( html ) {\\n-\\t\\treturn html.replace( \/([^a-z0-9<\\\\-])(on\\\\w{3,})(?!>)\/gi, \\'$1data-cke-\\' + CKEDITOR.rnd + \\'-$2\\' );\\n+\\tfunction protectInsecureAttributes( html, randomNumber ) {\\n+\\t\\treturn html.replace( \/([^a-z0-9<\\\\-])(on\\\\w{3,})(?!>)\/gi, \\'$1data-cke-\\' + randomNumber + \\'-$2\\' );\\n \\t}\\n \\n \\tfunction unprotectRealComments( html ) {\\n@@ -917,11 +918,11 @@\\n \\t\\t} );\\n \\t}\\n \\n-\\tfunction protectSource( data, editor ) {\\n+\\tfunction protectSource( data, editor, randomNumber ) {\\n \\t\\tvar protectedHtml = [],\\n \\t\\t\\tprotectRegexes = editor.config.protectedSource,\\n \\t\\t\\tstore = editor._.dataStore || ( editor._.dataStore = { id: 1 } ),\\n-\\t\\t\\ttempRegex = \/<\\\\!--\\\\{cke_temp(comment)?\\\\}(\\\\d*?)-->\/g;\\n+\\t\\t\\ttempRegex = new RegExp(\\'<\\\\\\\\!--\\\\\\\\{cke_temp_\\' + randomNumber + \\'(comment)?\\\\\\\\}(\\\\\\\\d*?)-->\\', \\'g\\' );\\n \\n \\t\\tvar regexes = [\\n \\t\\t\\t\/\/ Script tags will also be forced to be protected, otherwise\\n@@ -940,7 +941,7 @@\\n \\t\\t\/\/ Note that we use a different tag for comments, as we need to\\n \\t\\t\/\/ transform them when applying filters.\\n \\t\\tdata = data.replace( ( \/<!--[\\\\s\\\\S]*?-->\/g ), function( match ) {\\n-\\t\\t\\treturn \\'<!--{cke_tempcomment}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n+\\t\\t\\treturn \\'<!--{cke_temp_\\' + randomNumber + \\'comment}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n \\t\\t} );\\n \\n \\t\\tfor ( var i = 0; i < regexes.length; i++ ) {\\n@@ -951,7 +952,8 @@\\n \\t\\t\\t\\t} );\\n \\n \\t\\t\\t\\t\/\/ Avoid protecting over protected, e.g. \/\\\\{.*?\\\\}\/\\n-\\t\\t\\t\\treturn ( \/cke_temp(comment)?\/ ).test( match ) ? match : \\'<!--{cke_temp}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n+\\t\\t\\t\\treturn ( tempRegex ).test( match ) ? match : \\'<!--{cke_temp_\\' + randomNumber + \\'}\\' +\\n+\\t\\t\\t\\t\\t( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n \\t\\t\\t} );\\n \\t\\t}\\n \\t\\tdata = data.replace( tempRegex, function( $, isComment, id ) {\\n@@ -1107,6 +1109,16 @@\\n \\t\\t\\t};\\n \\t\\t}\\n \\t} )();\\n+\\n+\\tfunction generateRandomNumber() {\\n+\\t\\tvar cryptoApi = window.crypto || window.msCrypto;\\n+\\n+\\t\\tif ( cryptoApi ) {\\n+\\t\\t\\treturn cryptoApi.getRandomValues( new Uint32Array( 1 ) )[ 0 ];\\n+\\t\\t}\\n+\\n+\\t\\treturn Math.floor( Math.random() *  9000000000 + 1000000000 );\\n+\\t}\\n } )();\\n \\n \/**'}}",
            "message_norm":"code refactoring.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/htmldataprocessor.js'])",
            "num_files":1.0
        },
        {
            "index":2598,
            "vuln_id":"GHSA-pjxv-w3qj-j8m3",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mguinness\/elFinder.AspNet\/commit\/675049b39284a9e84f0915c71d688da8ebc7d720'}",
            "dataset":"osv",
            "summary":"Directory Traversal in elFinder.AspNet This affects the package elFinder.AspNet before 1.1.1.\n The user-controlled file name is not properly sanitized before it is used to create a file system path.",
            "published_date":"2021-08-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/mguinness\/elFinder.AspNet",
            "commit_href":"https:\/\/github.com\/mguinness\/elFinder.AspNet\/commit\/675049b39284a9e84f0915c71d688da8ebc7d720",
            "commit_sha":"675049b39284a9e84f0915c71d688da8ebc7d720",
            "patch":"SINGLE",
            "chain_ord":"['675049b39284a9e84f0915c71d688da8ebc7d720']",
            "before_first_fix_commit":"{'8f2690712bd6cf417d897d70f734d6e972cf0071'}",
            "last_fix_commit":"675049b39284a9e84f0915c71d688da8ebc7d720",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/10\/2021, 01:28:34",
            "message":"Directory traversal fixes",
            "author":"mguinness",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 0, 'total': 16}",
            "files":"{'elFinder.AspNet\/Drivers\/FileSystem\/FileSystemDriver.cs': {'additions': 16, 'deletions': 0, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mguinness\/elFinder.AspNet\/raw\/675049b39284a9e84f0915c71d688da8ebc7d720\/elFinder.AspNet%2FDrivers%2FFileSystem%2FFileSystemDriver.cs', 'patch': '@@ -229,6 +229,12 @@ public async Task<ConnectorResult> ExtractAsync(FullPath fullPath, bool newFolde\\n                         string file = Path.Combine(rootPath, entry.FullName)\\n                              .Replace(\"\/\", separator).Replace(\"\\\\\\\\\", separator);\\n \\n+                        string destPath = Path.GetFullPath(file);\\n+                        if (!destPath.StartsWith(rootPath, StringComparison.OrdinalIgnoreCase))\\n+                        {\\n+                            throw new NotSupportedException($\"Entry \\'{entry.FullName}\\' is outside of the destination directory.\");\\n+                        }\\n+\\n                         if (file.EndsWith(separator)) \/\/directory\\n                         {\\n                             var dir = new FileSystemDirectory(file);\\n@@ -636,12 +642,22 @@ public async Task<ConnectorResult> RenameAsync(FullPath path, string name)\\n             if (path.IsDirectory)\\n             {\\n                 var newPath = new FileSystemDirectory(Path.Combine(path.Directory.Parent.FullName, name));\\n+                string destPath = Path.GetFullPath(newPath.FullName);\\n+                if (!destPath.StartsWith(path.RootVolume.RootDirectory, StringComparison.OrdinalIgnoreCase))\\n+                {\\n+                    throw new NotSupportedException($\"Entry \\'{name}\\' is outside of the home directory.\");\\n+                }\\n                 Directory.Move(path.Directory.FullName, newPath.FullName);\\n                 response.Added.Add(await BaseModel.CreateAsync(newPath, path.RootVolume));\\n             }\\n             else\\n             {\\n                 var newPath = new FileSystemFile(Path.Combine(path.File.DirectoryName, name));\\n+                string destPath = Path.GetFullPath(newPath.FullName);\\n+                if (!destPath.StartsWith(path.RootVolume.RootDirectory, StringComparison.OrdinalIgnoreCase))\\n+                {\\n+                    throw new NotSupportedException($\"Entry \\'{name}\\' is outside of the home directory.\");\\n+                }\\n                 File.Move(path.File.FullName, newPath.FullName);\\n                 response.Added.Add(await BaseModel.CreateAsync(newPath, path.RootVolume));\\n             }'}}",
            "message_norm":"directory traversal fixes",
            "language":"ca",
            "entities":"[('directory traversal', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['elFinder.AspNet\/Drivers\/FileSystem\/FileSystemDriver.cs'])",
            "num_files":1.0
        },
        {
            "index":478,
            "vuln_id":"GHSA-4rcq-jv2f-898j",
            "cwe_id":"{'CWE-684'}",
            "score":3.5,
            "chain":"{'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/d28ed758d077a5bf19ddac4da468f7224114df23', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/4020210b193f77cf1785b21717f6ef7c5de5f0f8', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/f5d801251aa5436aff44660c87d7013e29ac5864', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/6821c236f9ae23adf21d46ce0d56768ac8d0c467', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/a45ca9c788f648d10cccce2af41405bf25ee2948', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/021ab572a319ca3db5907a33a59774f502b3b975', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/9bd1cf585fccdfe8318fff7af793730e74a04db3', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/1b7946ed14b386a24db050f2d6dba81ba6518755', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/2281a205c3e70ec20f35ec8fafecee0d5c4f3478', 'https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/19f01bb42d02da539446a52a25bb0c1232b86327'}",
            "dataset":"osv",
            "summary":"Incorrect Provision of Specified Functionality in qutebrowser # Description\n\nAfter a certificate error was overridden by the user, qutebrowser displays the URL as yellow (`colors.statusbar.url.warn.fg`). However, when the affected website was subsequently loaded again, the URL was mistakenly displayed as green (`colors.statusbar.url.success_https`). While the user already has seen a certificate error prompt at this point (or set `content.ssl_strict` to `false` which is not recommended), this could still provide a false sense of security.\n\n# Affected versions and patches\n\nAll versions of qutebrowser are believed to be affected, though versions before v0.11.x couldn't be tested.\n\nThe issue is fixed in qutebrowser v1.11.1 (pending release) and v1.12.0 (unreleased). Backported patches for older versions are available, but no further releases are planned.\n\n# Mitigation\n\nIf you are unable to upgrade:\n\n- Treat any host with a certificate exception as insecure, ignoring the URL color\n- Or set `content.ssl_strict` to `True` (instead of `'ask'`), preventing certificate exceptions\n\n# References\n\n- qutebrowser issue: https:\/\/github.com\/qutebrowser\/qutebrowser\/issues\/5403\n- Fix (master branch): https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/021ab572a319ca3db5907a33a59774f502b3b975\n- Related issue for KDE Falkon: https:\/\/bugs.kde.org\/show_bug.cgi?id=420902\n- Related issue for eric6 Web Browser: https:\/\/tracker.die-offenbachs.homelinux.org\/eric\/issue328 (fixed in eric6 20.6)",
            "published_date":"2020-05-08",
            "chain_len":10,
            "project":"https:\/\/github.com\/qutebrowser\/qutebrowser",
            "commit_href":"https:\/\/github.com\/qutebrowser\/qutebrowser\/commit\/1b7946ed14b386a24db050f2d6dba81ba6518755",
            "commit_sha":"1b7946ed14b386a24db050f2d6dba81ba6518755",
            "patch":"MULTI",
            "chain_ord":"['d28ed758d077a5bf19ddac4da468f7224114df23', '9bd1cf585fccdfe8318fff7af793730e74a04db3', '6821c236f9ae23adf21d46ce0d56768ac8d0c467', '4020210b193f77cf1785b21717f6ef7c5de5f0f8', 'f5d801251aa5436aff44660c87d7013e29ac5864', 'a45ca9c788f648d10cccce2af41405bf25ee2948', '2281a205c3e70ec20f35ec8fafecee0d5c4f3478', '19f01bb42d02da539446a52a25bb0c1232b86327', '021ab572a319ca3db5907a33a59774f502b3b975', '1b7946ed14b386a24db050f2d6dba81ba6518755']",
            "before_first_fix_commit":"{'e15af6cd92d523b22fe9774b653a859b9e33df41'}",
            "last_fix_commit":"1b7946ed14b386a24db050f2d6dba81ba6518755",
            "chain_ord_pos":10.0,
            "commit_datetime":"05\/02\/2020, 17:03:20",
            "message":"Update changelog",
            "author":"Florian Bruhin",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 1, 'total': 11}",
            "files":"{'doc\/changelog.asciidoc': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/qutebrowser\/qutebrowser\/raw\/1b7946ed14b386a24db050f2d6dba81ba6518755\/doc%2Fchangelog.asciidoc', 'patch': '@@ -45,7 +45,16 @@ Fixed\\n v1.11.1 (unreleased)\\n --------------------\\n \\n-No changes yet.\\n+Security\\n+~~~~~~~~\\n+\\n+- After a certificate error was overridden by the user, qutebrowser displays\\n+  the URL as yellow (`colors.statusbar.url.warn.fg`). However, when the\\n+  affected website was subsequently loaded again, the URL was mistakenly\\n+  displayed as green (`colors.statusbar.url.success_https`). While the user\\n+  already has seen a certificate error prompt at this point (or set\\n+  `content.ssl_strict` to `false` which is not recommended), this could still\\n+  provide a false sense of security. This is now fixed.\\n \\n v1.11.0 (2020-04-27)\\n --------------------'}}",
            "message_norm":"update changelog",
            "language":"nl",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['doc\/changelog.asciidoc'])",
            "num_files":1.0
        },
        {
            "index":1234,
            "vuln_id":"GHSA-8p5c-f328-9fvv",
            "cwe_id":"{'CWE-22'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/anthraxx\/diffoscope\/commit\/632a40828a54b399787c25e7fa243f732aef7e05'}",
            "dataset":"osv",
            "summary":"Diffoscope may write to arbitrary locations due to an untrusted archive diffoscope before 76 writes to arbitrary locations on disk based on the contents of an untrusted archive.",
            "published_date":"2018-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/anthraxx\/diffoscope",
            "commit_href":"https:\/\/github.com\/anthraxx\/diffoscope\/commit\/632a40828a54b399787c25e7fa243f732aef7e05",
            "commit_sha":"632a40828a54b399787c25e7fa243f732aef7e05",
            "patch":"SINGLE",
            "chain_ord":"['632a40828a54b399787c25e7fa243f732aef7e05']",
            "before_first_fix_commit":"{'b468a2840a097f4b2f7719929d690d5738dbcae4'}",
            "last_fix_commit":"632a40828a54b399787c25e7fa243f732aef7e05",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/09\/2017, 21:47:05",
            "message":"Extract archive members using an auto-incrementing integer, avoiding the need to sanitise filenames. (Closes: #854723)\n\nSigned-off-by: Chris Lamb <lamby@debian.org>",
            "author":"Chris Lamb",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 27, 'total': 41}",
            "files":"{'diffoscope\/comparators\/utils\/libarchive.py': {'additions': 14, 'deletions': 27, 'changes': 41, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anthraxx\/diffoscope\/raw\/632a40828a54b399787c25e7fa243f732aef7e05\/diffoscope%2Fcomparators%2Futils%2Flibarchive.py', 'patch': '@@ -23,6 +23,7 @@\\n import ctypes\\n import logging\\n import libarchive\\n+import collections\\n \\n from diffoscope.tempfiles import get_temporary_directory\\n \\n@@ -168,11 +169,11 @@ def close_archive(self):\\n \\n     def get_member_names(self):\\n         self.ensure_unpacked()\\n-        return self._member_names\\n+        return self._members.keys()\\n \\n     def extract(self, member_name, dest_dir):\\n         self.ensure_unpacked()\\n-        return os.path.join(self._unpacked, member_name)\\n+        return self._members[member_name]\\n \\n     def get_member(self, member_name):\\n         with libarchive.file_reader(self.source.path) as archive:\\n@@ -197,45 +198,31 @@ def get_subclass(self, entry):\\n         return LibarchiveMember(self, entry)\\n \\n     def ensure_unpacked(self):\\n-        if hasattr(self, \\'_unpacked\\'):\\n+        if hasattr(self, \\'_members\\'):\\n             return\\n \\n-        self._unpacked = get_temporary_directory().name\\n-        self._member_names = []\\n+        tmpdir = get_temporary_directory().name\\n+        self._members = collections.OrderedDict()\\n \\n-        logger.debug(\"Extracting %s to %s\", self.source.path, self._unpacked)\\n+        logger.debug(\"Extracting %s to %s\", self.source.path, tmpdir)\\n \\n         with libarchive.file_reader(self.source.path) as archive:\\n-            for entry in archive:\\n-                self._member_names.append(entry.pathname)\\n+            for idx, entry in enumerate(archive):\\n+                # Maintain a mapping of archive path to the extracted path,\\n+                # avoiding the need to sanitise filenames.\\n+                dst = os.path.join(tmpdir, \\'{}\\'.format(idx))\\n+                self._members[entry.pathname] = dst\\n \\n                 if entry.isdir:\\n                     continue\\n \\n-                # All extracted locations must be underneath self._unpacked\\n-                force_prefix = os.path.join(self._unpacked, \"\")\\n-\\n-                # Try to pick a safe and reasonable candidate name\\n-                candidate_name = os.path.normpath(entry.pathname.rstrip(\\'\/\\' + os.sep))\\n-                if os.path.isabs(candidate_name):\\n-                    candidate_name = os.path.relpath(candidate_name, os.path.join(os.path.sep))\\n-\\n-                dst = os.path.normpath(os.path.join(self._unpacked, candidate_name))\\n-                if not dst.startswith(force_prefix):\\n-                    logger.warn(\"Skipping member because we could not make a safe name to extract it to: \\'%s\\'\",\\n-                                entry.pathname)\\n-                    continue\\n-\\n-                # TODO: need to fix reading these cleaned members. currently\\n-                # reading will still try to use the uncleaned name.\\n-                #logging.debug(\"Extracting %s to %s\", entry.pathname, dst)\\n-                os.makedirs(os.path.dirname(dst), exist_ok=True)\\n+                logger.debug(\"Extracting %s to %s\", entry.pathname, dst)\\n \\n                 with open(dst, \\'wb\\') as f:\\n                     for block in entry.get_blocks():\\n                         f.write(block)\\n \\n         logger.debug(\\n             \"Extracted %d entries from %s to %s\",\\n-            len(self._member_names), self.source.path, self._unpacked,\\n+            len(self._members), self.source.path, tmpdir,\\n         )'}}",
            "message_norm":"extract archive members using an auto-incrementing integer, avoiding the need to sanitise filenames. (closes: #854723)\n\nsigned-off-by: chris lamb <lamby@debian.org>",
            "language":"en",
            "entities":"[('sanitise', 'SECWORD', ''), ('#854723', 'ISSUE', ''), ('lamby@debian.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['diffoscope\/comparators\/utils\/libarchive.py'])",
            "num_files":1.0
        },
        {
            "index":2100,
            "vuln_id":"GHSA-hp68-xhvj-x6j6",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc'}",
            "dataset":"osv",
            "summary":"jsx-slack insufficient patch for CVE-2021-43838 ReDoS We found the patch for CVE-2021-43838 in jsx-slack v4.5.1 is insufficient to save from Regular Expression Denial of Service (ReDoS) attack.\n\nThis vulnerability affects to jsx-slack v4.5.1 and earlier versions.\n\n### Impact\n\nIf attacker can put a lot of JSX elements into `<blockquote>` tag _with including multibyte characters_, an internal regular expression for escaping characters may consume an excessive amount of computing resources.\n\n```javascript\n\/** @jsxImportSource jsx-slack *\/\nimport { Section } from 'jsx-slack'\n\nconsole.log(\n  <Section>\n    <blockquote>\n      {[...Array(40)].map(() => (\n        <p>\u4e9c<\/p>\n      ))}\n    <\/blockquote>\n  <\/Section>\n)\n```\n\nv4.5.1 has released by passing the test against ASCII characters but missed the case of multibyte characters.\nhttps:\/\/github.com\/yhatt\/jsx-slack\/security\/advisories\/GHSA-55xv-f85c-248q\n\n### Patches\n\njsx-slack v4.5.2 has updated regular expressions for escaping blockquote characters to prevent catastrophic backtracking. It is also including an updated test case to confirm rendering multiple tags in `<blockquote>` with multibyte characters.\n\n### References\n\n- https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc\n\n### Credits\n\nThanks to @hieki for finding out this vulnerability.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/yhatt\/jsx-slack",
            "commit_href":"https:\/\/github.com\/yhatt\/jsx-slack\/commit\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "commit_sha":"46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "patch":"SINGLE",
            "chain_ord":"['46bc88391d89d5fda4ce689e18ca080bcdd29ecc']",
            "before_first_fix_commit":"{'c3722705c8aadf544f922a974883578aa27dbea3'}",
            "last_fix_commit":"46bc88391d89d5fda4ce689e18ca080bcdd29ecc",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/18\/2021, 07:03:24",
            "message":"Prevent catastrophic backtracking in blockquote escape replacer",
            "author":"Yuki Hattori",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 6, 'total': 13}",
            "files":"{'src\/mrkdwn\/escape.ts': {'additions': 7, 'deletions': 6, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/yhatt\/jsx-slack\/raw\/46bc88391d89d5fda4ce689e18ca080bcdd29ecc\/src%2Fmrkdwn%2Fescape.ts', 'patch': '@@ -1,20 +1,21 @@\\n \/\/ An internal HTML tag and emoji shorthand should not escape\\n const preventEscapeRegex =\\n-  \/(<.*?>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b\\'\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2fd5\\\\u3005\\\\u3041-\\\\u3096\\\\u30a0-\\\\u30ff\\\\u3130-\\\\u318f\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcb\\\\ua960-\\\\ua97f\\\\uac00-\\\\ud7ff\\\\uff10-\\\\uff19\\\\uff41-\\\\uff5a\\\\uff61-\\\\uff9f]+:)\/\\n+  \/(<[^>]*>|:[-a-z0-9\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cd\u00ce\u00cf\u00d1\u00d3\u00d4\u00d5\u00d6\u0152\u0153\u00d9\u00da\u00db\u00dc\u0178\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ed\u00ee\u00ef\u00f1\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00ff_\uff3f+\uff0b\\'\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2fd5\\\\u3005\\\\u3041-\\\\u3096\\\\u30a0-\\\\u30ff\\\\u3130-\\\\u318f\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcb\\\\ua960-\\\\ua97f\\\\uac00-\\\\ud7ff\\\\uff10-\\\\uff19\\\\uff41-\\\\uff5a\\\\uff61-\\\\uff9f]+:)\/\\n \\n const generateReplacerForEscape = (fallback: string) => (matched: string) =>\\n   `<span data-escape=\"${fallback.repeat(matched.length)}\">${matched}<\/span>`\\n \\n export const escapeReplacers = {\\n   blockquote: (partial: string) =>\\n     partial\\n-      .replace(\/^((?:<.*?>)*)(.{4})\/gm, (matched, leading, character) =>\\n-        character === \\'&gt;\\' ? `${leading}\\\\u00ad&gt;` : matched\\n+      .replace(\\n+        \/^((?:<(?:[^>]|>(?=<))*>)?)(&gt;)\/gm,\\n+        (_, leadingTags, character) => `${leadingTags}\\\\u00ad${character}`\\n       )\\n       .replace(\\n-        \/^((?:<.*?>)*)(\uff1e)\/gm,\\n-        (_, leading, character) =>\\n-          `${leading}${generateReplacerForEscape(\\'\\\\u00ad\uff1e\\')(character)}`\\n+        \/^((?:<(?:[^>]|>(?=<))*>)?)(\uff1e)\/gm,\\n+        (_, leadingTags, character) =>\\n+          `${leadingTags}${generateReplacerForEscape(\\'\\\\u00ad\uff1e\\')(character)}`\\n       ),\\n   bold: (partial: string) =>\\n     partial'}}",
            "message_norm":"prevent catastrophic backtracking in blockquote escape replacer",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/mrkdwn\/escape.ts'])",
            "num_files":1.0
        },
        {
            "index":1742,
            "vuln_id":"GHSA-fj93-7wm4-8x2g",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jquery\/jquery-mobile\/commit\/b0d9cc758a48f13321750d7409fb7655dcdf2b50'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in jquery-mobile All version of `jquery-mobile` are vulnerable to Cross-Site Scripting. The package checks for content in `location.hash` and if a URL is found it does an XmlHttpRequest (XHR) to the URL and renders the response with `innerHTML`. It fails to validate the `Content-Type` of the response, allowing attackers to include malicious payloads as part of query parameters that are reflected back to the user. A response such as `{\"q\":\"<iframe\/src='javascript:alert(1)'><\/iframe>\",\"results\":[]}` would be parsed as HTML and the JavaScript payload executed.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative package until a fix is made available.",
            "published_date":"2020-09-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/jquery\/jquery-mobile",
            "commit_href":"https:\/\/github.com\/jquery\/jquery-mobile\/commit\/b0d9cc758a48f13321750d7409fb7655dcdf2b50",
            "commit_sha":"b0d9cc758a48f13321750d7409fb7655dcdf2b50",
            "patch":"SINGLE",
            "chain_ord":"['b0d9cc758a48f13321750d7409fb7655dcdf2b50']",
            "before_first_fix_commit":"{'1f0cec9bcb9d75998e733d580d6f1144c963326e'}",
            "last_fix_commit":"b0d9cc758a48f13321750d7409fb7655dcdf2b50",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/13\/2019, 17:42:26",
            "message":"Check Content-Type header before parsing AJAX response as HTML (#8649)\n\nFix for issue #8640 (possible XSS vulnerability)",
            "author":"Denis Ryabov",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'js\/widgets\/pagecontainer.js': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jquery-archive\/jquery-mobile\/raw\/b0d9cc758a48f13321750d7409fb7655dcdf2b50\/js%2Fwidgets%2Fpagecontainer.js', 'patch': '@@ -564,6 +564,15 @@ $.widget( \"mobile.pagecontainer\", {\\n \\n \\t\\treturn $.proxy( function( html, textStatus, xhr ) {\\n \\n+\\t\\t\\t\/\/ Check that Content-Type is \"text\/html\" (https:\/\/github.com\/jquery\/jquery-mobile\/issues\/8640)\\n+\\t\\t\\tif ( !\/^text\\\\\/html\\\\b\/.test( xhr.getResponseHeader(\\'Content-Type\\') ) ) {\\n+\\t\\t\\t\\t\/\/ Display error message for unsupported content type\\n+\\t\\t\\t\\tif ( settings.showLoadMsg ) {\\n+\\t\\t\\t\\t\\tthis._showError();\\n+\\t\\t\\t\\t}\\n+\\t\\t\\t\\treturn;\\n+\\t\\t\\t}\\n+\\n \\t\\t\\t\/\/ Pre-parse html to check for a data-url, use it as the new fileUrl, base path, etc\\n \\t\\t\\tvar content,'}}",
            "message_norm":"check content-type header before parsing ajax response as html (#8649)\n\nfix for issue #8640 (possible xss vulnerability)",
            "language":"en",
            "entities":"[('#8649', 'ISSUE', ''), ('issue', 'FLAW', ''), ('#8640', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['js\/widgets\/pagecontainer.js'])",
            "num_files":1.0
        },
        {
            "index":2244,
            "vuln_id":"GHSA-jfp7-4j67-8r3q",
            "cwe_id":"{'CWE-193', 'CWE-131'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow caused by rounding ### Impact\nAn attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:\n\n```python\nimport tensorflow as tf\n\nl = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]\nimages = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)\nsize = tf.constant([12, 6], shape=[2], dtype=tf.int32)\nmin = tf.constant(80.22522735595703)\nmax = tf.constant(80.39215850830078)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,\n                                   align_corners=True, half_pixel_centers=True)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:\n\n```cc\nconst float in_f = std::floor(in);\ninterpolation->lower[i] = std::max(static_cast<int64>(in_f), static_cast<int64>(0));\ninterpolation->upper[i] = std::min(static_cast<int64>(std::ceil(in)), in_size - 1);\n```\n  \nFor some values of `in`, `interpolation->upper[i]` might be smaller than `interpolation->lower[i]`. This is an issue if `interpolation->upper[i]` is capped at `in_size-1` as it means that `interpolation->lower[i]` points outside of the image. Then, [in the interpolation code](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:\n\n```cc\ntemplate <int RESOLUTION, typename T, typename T_SCALE, typename T_CALC>\ninline void OutputLerpForChannels(const InterpolationCache<T_SCALE>& xs,\n                                  const int64 x, const T_SCALE ys_ilerp,\n                                  const int channels, const float min,\n                                  const float max, const T* ys_input_lower_ptr,\n                                  const T* ys_input_upper_ptr,\n                                  T* output_y_ptr) {\n  const int64 xs_lower = xs.lower[x];\n  ...\n  for (int c = 0; c < channels; ++c) {\n    const T top_left = ys_input_lower_ptr[xs_lower + c];\n    ...\n  }\n}\n```\n\nFor the other cases where `interpolation->upper[i]` is smaller than `interpolation->lower[i]`, we can set them to be equal without affecting the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "commit_sha":"f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "patch":"SINGLE",
            "chain_ord":"['f851613f8f0fb0c838d160ced13c134f778e3ce7']",
            "before_first_fix_commit":"{'44b7f486c0143f68b56c34e2d01e146ee445134a'}",
            "last_fix_commit":"f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 23:20:48",
            "message":"Fix heap buffer overflow caused by rounding.\n\nThis was hard to fix. Due to the way we compute the pixels that influence an output pixel in resized images, for certain input configuration we might have issued a read to a pixel that is outside of boundary of the original image. This is because of floating errors that affected truncation results.\n\nPiperOrigin-RevId: 369757871\nChange-Id: If89425fff930983829a2168203c11858883eebc9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f851613f8f0fb0c838d160ced13c134f778e3ce7\/tensorflow%2Fcore%2Fkernels%2Fquantized_resize_bilinear_op.cc', 'patch': '@@ -64,6 +64,8 @@ inline void ComputeInterpolationWeights(\\n         std::max(static_cast<int64>(in_f), static_cast<int64>(0));\\n     interpolation->upper[i] =\\n         std::min(static_cast<int64>(std::ceil(in)), in_size - 1);\\n+    interpolation->lower[i] =\\n+        std::min(interpolation->lower[i], interpolation->upper[i]);\\n     interpolation->lerp[i] = in - in_f;\\n     interpolation->ilerp[i] =\\n         static_cast<T_SCALE>((in - in_f) * (1 << resolution));'}}",
            "message_norm":"fix heap buffer overflow caused by rounding.\n\nthis was hard to fix. due to the way we compute the pixels that influence an output pixel in resized images, for certain input configuration we might have issued a read to a pixel that is outside of boundary of the original image. this is because of floating errors that affected truncation results.\n\npiperorigin-revid: 369757871\nchange-id: if89425fff930983829a2168203c11858883eebc9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('fix', 'ACTION', ''), ('outside of boundary', 'SECWORD', ''), ('errors', 'FLAW', ''), ('369757871', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3040,
            "vuln_id":"GHSA-v3jv-wrf4-5845",
            "cwe_id":"{'CWE-59'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/npm\/npm\/commit\/f4d31693e73a963574a88000580db1a716fe66f1'}",
            "dataset":"osv",
            "summary":"Local Privilege Escalation in npm Affected versions of `npm` use predictable temporary file names during archive unpacking. If an attacker can create a symbolic link at the location of one of these temporary file names, the attacker can arbitrarily write to any file that the user which owns the `npm` process has permission to write to, potentially resulting in local privilege escalation.\n\n\n\n## Recommendation\n\nUpdate to version 1.3.3 or later.",
            "published_date":"2020-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/npm\/npm",
            "commit_href":"https:\/\/github.com\/npm\/npm\/commit\/f4d31693e73a963574a88000580db1a716fe66f1",
            "commit_sha":"f4d31693e73a963574a88000580db1a716fe66f1",
            "patch":"SINGLE",
            "chain_ord":"['f4d31693e73a963574a88000580db1a716fe66f1']",
            "before_first_fix_commit":"{'e3007309aa93e94b69b5094fa1b11070b2ef993c'}",
            "last_fix_commit":"f4d31693e73a963574a88000580db1a716fe66f1",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/10\/2013, 15:59:28",
            "message":"Put 6 bytes of random in tmp folder name\n\nCloses #3635",
            "author":"isaacs",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'lib\/npm.js': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/npm\/npm\/raw\/f4d31693e73a963574a88000580db1a716fe66f1\/lib%2Fnpm.js', 'patch': '@@ -477,9 +477,14 @@ Object.defineProperty(npm, \"cache\",\\n   })\\n \\n var tmpFolder\\n+var crypto = require(\"crypto\")\\n+var rand = crypto.randomBytes(6)\\n+                 .toString(\"base64\")\\n+                 .replace(\/\\\\\/\/g, \\'_\\')\\n+                 .replace(\/\\\\+\/, \\'-\\')\\n Object.defineProperty(npm, \"tmp\",\\n   { get : function () {\\n-      if (!tmpFolder) tmpFolder = \"npm-\" + process.pid\\n+      if (!tmpFolder) tmpFolder = \"npm-\" + process.pid + \"-\" + rand\\n       return path.resolve(npm.config.get(\"tmp\"), tmpFolder)\\n     }\\n   , enumerable : true'}}",
            "message_norm":"put 6 bytes of random in tmp folder name\n\ncloses #3635",
            "language":"en",
            "entities":"[('#3635', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/npm.js'])",
            "num_files":1.0
        },
        {
            "index":1834,
            "vuln_id":"GHSA-g6ww-v8xp-vmwg",
            "cwe_id":"{'CWE-1321', 'CWE-20'}",
            "score":7.2,
            "chain":"{'https:\/\/github.com\/chaijs\/pathval\/pull\/58\/commits\/21a9046cfa0c2697cb41990f3b4316db410e6c8a'}",
            "dataset":"osv",
            "summary":"Prototype pollution in pathval A prototype pollution vulnerability affects all versions of package pathval under 1.1.1.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/chaijs\/pathval",
            "commit_href":"https:\/\/github.com\/chaijs\/pathval\/pull\/58\/commits\/21a9046cfa0c2697cb41990f3b4316db410e6c8a",
            "commit_sha":"21a9046cfa0c2697cb41990f3b4316db410e6c8a",
            "patch":"SINGLE",
            "chain_ord":"['21a9046cfa0c2697cb41990f3b4316db410e6c8a']",
            "before_first_fix_commit":"{'a1230184a33a18f4eb3a92817e9b7492e8082903'}",
            "last_fix_commit":"21a9046cfa0c2697cb41990f3b4316db410e6c8a",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/25\/2020, 12:37:44",
            "message":"fix: \ud83d\udc1b fix prototype pollution",
            "author":"Adam Gold",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'index.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chaijs\/pathval\/raw\/21a9046cfa0c2697cb41990f3b4316db410e6c8a\/index.js', 'patch': '@@ -76,6 +76,9 @@ function parsePath(path) {\\n   var str = path.replace(\/([^\\\\\\\\])\\\\[\/g, \\'$1.[\\');\\n   var parts = str.match(\/(\\\\\\\\\\\\.|[^.]+?)+\/g);\\n   return parts.map(function mapMatches(value) {\\n+    if (value === \"constructor\" || value === \"__proto__\" || value === \"prototype\") {\\n+      return {}\\n+    }\\n     var regexp = \/^\\\\[(\\\\d+)\\\\]$\/;\\n     var mArr = regexp.exec(value);\\n     var parsed = null;'}}",
            "message_norm":"fix: \ud83d\udc1b fix prototype pollution",
            "language":"fr",
            "entities":"[('fix', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":383,
            "vuln_id":"GHSA-4873-36h9-wv49",
            "cwe_id":"{'CWE-787', 'CWE-125', 'CWE-590'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/bytecodealliance\/wasmtime\/commit\/398a73f0dd862dbe703212ebae8e34036a18c11c'}",
            "dataset":"osv",
            "summary":"Out-of-bounds read\/write and invalid free with `externref`s and GC safepoints in Wasmtime  ### Impact\n\nThere was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime.\n\nTo trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where\n\n* there are no live references at this safepoint, and\n* there is a safepoint with live references earlier in this frame's function.\n\nUnder this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.\n\nEven though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug.\n\nWe have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare.\n\n### Patches\n\nThis bug has been patched and users should upgrade to Wasmtime version 0.30.0.\n\nAdditionally, we have updated [our primary `externref` fuzz target](https:\/\/github.com\/bytecodealliance\/wasmtime\/blob\/37c094faf53f1b356aab3c79d451395e4f7edb34\/fuzz\/fuzz_targets\/table_ops.rs) such that it better exercises these code paths and we can have greater confidence in their correctness going forward.\n\n### Workarounds\n\nIf you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to [`wasmtime::Config::wasm_reference_types`](https:\/\/docs.rs\/wasmtime\/0.29.0\/wasmtime\/struct.Config.html#method.wasm_reference_types)\n\n### References\n\n* [The Wasm reference types proposal, which introduces `externref`](https:\/\/github.com\/WebAssembly\/reference-types\/)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Reach out to us on [the Bytecode Alliance Zulip chat](https:\/\/bytecodealliance.zulipchat.com\/#narrow\/stream\/217126-wasmtime)\n* Open an issue in [the `bytecodealliance\/wasmtime` repository](https:\/\/github.com\/bytecodealliance\/wasmtime\/)",
            "published_date":"2021-09-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/bytecodealliance\/wasmtime",
            "commit_href":"https:\/\/github.com\/bytecodealliance\/wasmtime\/commit\/398a73f0dd862dbe703212ebae8e34036a18c11c",
            "commit_sha":"398a73f0dd862dbe703212ebae8e34036a18c11c",
            "patch":"SINGLE",
            "chain_ord":"['398a73f0dd862dbe703212ebae8e34036a18c11c']",
            "before_first_fix_commit":"{'ec4e48d4cbc28bcfd99e25842a90704e765b800f', '101998733b74624cbd348a2366d05760b40181f3'}",
            "last_fix_commit":"398a73f0dd862dbe703212ebae8e34036a18c11c",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/17\/2021, 17:28:50",
            "message":"Merge pull request from GHSA-4873-36h9-wv49\n\nStop doing fuzzy search for stack maps",
            "author":"Nick Fitzgerald",
            "comments":null,
            "stats":"{'additions': 52, 'deletions': 48, 'total': 100}",
            "files":"{'crates\/wasmtime\/src\/module\/registry.rs': {'additions': 52, 'deletions': 48, 'changes': 100, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bytecodealliance\/wasmtime\/raw\/398a73f0dd862dbe703212ebae8e34036a18c11c\/crates%2Fwasmtime%2Fsrc%2Fmodule%2Fregistry.rs', 'patch': '@@ -122,61 +122,65 @@ impl ModuleInfo for RegisteredModule {\\n         let info = self.module.func_info(index);\\n \\n         \/\/ Do a binary search to find the stack map for the given offset.\\n-        \/\/\\n-        \/\/ Because GC safepoints are technically only associated with a single\\n-        \/\/ PC, we should ideally only care about `Ok(index)` values returned\\n-        \/\/ from the binary search. However, safepoints are inserted right before\\n-        \/\/ calls, and there are two things that can disturb the PC\/offset\\n-        \/\/ associated with the safepoint versus the PC we actually use to query\\n-        \/\/ for the stack map:\\n-        \/\/\\n-        \/\/ 1. The `backtrace` crate gives us the PC in a frame that will be\\n-        \/\/    *returned to*, and where execution will continue from, rather than\\n-        \/\/    the PC of the call we are currently at. So we would need to\\n-        \/\/    disassemble one instruction backwards to query the actual PC for\\n-        \/\/    the stack map.\\n-        \/\/\\n-        \/\/    TODO: One thing we *could* do to make this a little less error\\n-        \/\/    prone, would be to assert\/check that the nearest GC safepoint\\n-        \/\/    found is within `max_encoded_size(any kind of call instruction)`\\n-        \/\/    our queried PC for the target architecture.\\n-        \/\/\\n-        \/\/ 2. Cranelift\\'s stack maps only handle the stack, not\\n-        \/\/    registers. However, some references that are arguments to a call\\n-        \/\/    may need to be in registers. In these cases, what Cranelift will\\n-        \/\/    do is:\\n-        \/\/\\n-        \/\/      a. spill all the live references,\\n-        \/\/      b. insert a GC safepoint for those references,\\n-        \/\/      c. reload the references into registers, and finally\\n-        \/\/      d. make the call.\\n-        \/\/\\n-        \/\/    Step (c) adds drift between the GC safepoint and the location of\\n-        \/\/    the call, which is where we actually walk the stack frame and\\n-        \/\/    collect its live references.\\n-        \/\/\\n-        \/\/    Luckily, the spill stack slots for the live references are still\\n-        \/\/    up to date, so we can still find all the on-stack roots.\\n-        \/\/    Furthermore, we do not have a moving GC, so we don\\'t need to worry\\n-        \/\/    whether the following code will reuse the references in registers\\n-        \/\/    (which would not have been updated to point to the moved objects)\\n-        \/\/    or reload from the stack slots (which would have been updated to\\n-        \/\/    point to the moved objects).\\n-\\n         let index = match info\\n             .stack_maps\\n             .binary_search_by_key(&func_offset, |i| i.code_offset)\\n         {\\n-            \/\/ Exact hit.\\n+            \/\/ Found it.\\n             Ok(i) => i,\\n \\n-            \/\/ `Err(0)` means that the associated stack map would have been the\\n-            \/\/ first element in the array if this pc had an associated stack\\n-            \/\/ map, but this pc does not have an associated stack map. This can\\n-            \/\/ only happen inside a Wasm frame if there are no live refs at this\\n-            \/\/ pc.\\n+            \/\/ No stack map associated with this PC.\\n+            \/\/\\n+            \/\/ Because we know we are in Wasm code, and we must be at some kind\\n+            \/\/ of call\/safepoint, then the Cranelift backend must have avoided\\n+            \/\/ emitting a stack map for this location because no refs were live.\\n+            #[cfg(not(feature = \"old-x86-backend\"))]\\n+            Err(_) => return None,\\n+\\n+            \/\/ ### Old x86_64 backend specific code.\\n+            \/\/\\n+            \/\/ Because GC safepoints are technically only associated with a\\n+            \/\/ single PC, we should ideally only care about `Ok(index)` values\\n+            \/\/ returned from the binary search. However, safepoints are inserted\\n+            \/\/ right before calls, and there are two things that can disturb the\\n+            \/\/ PC\/offset associated with the safepoint versus the PC we actually\\n+            \/\/ use to query for the stack map:\\n+            \/\/\\n+            \/\/ 1. The `backtrace` crate gives us the PC in a frame that will be\\n+            \/\/    *returned to*, and where execution will continue from, rather than\\n+            \/\/    the PC of the call we are currently at. So we would need to\\n+            \/\/    disassemble one instruction backwards to query the actual PC for\\n+            \/\/    the stack map.\\n+            \/\/\\n+            \/\/    TODO: One thing we *could* do to make this a little less error\\n+            \/\/    prone, would be to assert\/check that the nearest GC safepoint\\n+            \/\/    found is within `max_encoded_size(any kind of call instruction)`\\n+            \/\/    our queried PC for the target architecture.\\n+            \/\/\\n+            \/\/ 2. Cranelift\\'s stack maps only handle the stack, not\\n+            \/\/    registers. However, some references that are arguments to a call\\n+            \/\/    may need to be in registers. In these cases, what Cranelift will\\n+            \/\/    do is:\\n+            \/\/\\n+            \/\/      a. spill all the live references,\\n+            \/\/      b. insert a GC safepoint for those references,\\n+            \/\/      c. reload the references into registers, and finally\\n+            \/\/      d. make the call.\\n+            \/\/\\n+            \/\/    Step (c) adds drift between the GC safepoint and the location of\\n+            \/\/    the call, which is where we actually walk the stack frame and\\n+            \/\/    collect its live references.\\n+            \/\/\\n+            \/\/    Luckily, the spill stack slots for the live references are still\\n+            \/\/    up to date, so we can still find all the on-stack roots.\\n+            \/\/    Furthermore, we do not have a moving GC, so we don\\'t need to worry\\n+            \/\/    whether the following code will reuse the references in registers\\n+            \/\/    (which would not have been updated to point to the moved objects)\\n+            \/\/    or reload from the stack slots (which would have been updated to\\n+            \/\/    point to the moved objects).\\n+            #[cfg(feature = \"old-x86-backend\")]\\n             Err(0) => return None,\\n-\\n+            #[cfg(feature = \"old-x86-backend\")]\\n             Err(i) => i - 1,\\n         };'}}",
            "message_norm":"merge pull request from ghsa-4873-36h9-wv49\n\nstop doing fuzzy search for stack maps",
            "language":"en",
            "entities":"[('ghsa-4873-36h9-wv49', 'VULNID', 'GHSA'), ('fuzzy', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['crates\/wasmtime\/src\/module\/registry.rs'])",
            "num_files":1.0
        },
        {
            "index":10,
            "vuln_id":"GHSA-23f2-vgr6-fwv7",
            "cwe_id":"{'CWE-74'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/8b82341cb742e7bd4966964b399012f7ba017e0b'}",
            "dataset":"osv",
            "summary":"Command injection in librenms LibreNMS v22.3.0 was discovered to contain multiple command injection vulnerabilities via the service_ip, hostname, and service_param parameters.",
            "published_date":"2022-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/8b82341cb742e7bd4966964b399012f7ba017e0b",
            "commit_sha":"8b82341cb742e7bd4966964b399012f7ba017e0b",
            "patch":"SINGLE",
            "chain_ord":"['8b82341cb742e7bd4966964b399012f7ba017e0b']",
            "before_first_fix_commit":"{'3d0e095eb777845c39ed11d0981e0cef143d9f66'}",
            "last_fix_commit":"8b82341cb742e7bd4966964b399012f7ba017e0b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2022, 02:32:36",
            "message":"Fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* Clean more variables\r\n\r\n* Update services.inc.php\r\n\r\n* Update services.inc.php",
            "author":"Tony Murray",
            "comments":"{'com_1': {'author': 'bakerds', 'datetime': '04\/22\/2022, 11:25:17', 'body': 'Hey @murrant, it looks like this breaks using IPv6 literals in the IP field of a service'}}",
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'includes\/services.inc.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/8b82341cb742e7bd4966964b399012f7ba017e0b\/includes%2Fservices.inc.php', 'patch': \"@@ -4,6 +4,7 @@\\n use LibreNMS\\\\Alert\\\\AlertRules;\\n use LibreNMS\\\\Config;\\n use LibreNMS\\\\RRD\\\\RrdDefinition;\\n+use LibreNMS\\\\Util\\\\Clean;\\n \\n function get_service_status($device = null)\\n {\\n@@ -120,6 +121,10 @@ function poll_service($service)\\n {\\n     $update = [];\\n     $old_status = $service['service_status'];\\n+    $service['service_type'] = Clean::fileName($service['service_type']);\\n+    $service['service_ip'] = Clean::fileName($service['service_ip']);\\n+    $service['hostname'] = Clean::fileName($service['hostname']);\\n+    $service['overwrite_ip'] = Clean::fileName($service['overwrite_ip']);\\n     $check_cmd = '';\\n \\n     \/\/ if we have a script for this check, use it.\\n@@ -130,7 +135,7 @@ function poll_service($service)\\n \\n     \/\/ If we do not have a cmd from the check script, build one.\\n     if ($check_cmd == '') {\\n-        $check_cmd = Config::get('nagios_plugins') . '\/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ? $service['service_ip'] : $service['hostname']);\\n+        $check_cmd = Config::get('nagios_plugins') . '\/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ?: $service['hostname']);\\n         $check_cmd .= ' ' . $service['service_param'];\\n     }\"}}",
            "message_norm":"fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* clean more variables\r\n\r\n* update services.inc.php\r\n\r\n* update services.inc.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('command injection', 'SECWORD', ''), ('#13932', 'ISSUE', ''), ('command injection', 'SECWORD', ''), ('update', 'ACTION', ''), ('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/services.inc.php'])",
            "num_files":1.0
        },
        {
            "index":1931,
            "vuln_id":"GHSA-grvw-q343-58wh",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7e9a2ee60baa95ceb4f48f522f823c812ca90c80', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/95b3e3400afb8fa20743657f3a8057fb451e6f69'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1138, CVE-2019-1217, CVE-2019-1237, CVE-2019-1298.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/95b3e3400afb8fa20743657f3a8057fb451e6f69",
            "commit_sha":"95b3e3400afb8fa20743657f3a8057fb451e6f69",
            "patch":"MULTI",
            "chain_ord":"['95b3e3400afb8fa20743657f3a8057fb451e6f69', '7e9a2ee60baa95ceb4f48f522f823c812ca90c80']",
            "before_first_fix_commit":"{'edf5eeef49168bbcc30dac82f57048ad46988295', 'c5297b86536fbf1a02d27cec28fea3c516e6ab84'}",
            "last_fix_commit":"7e9a2ee60baa95ceb4f48f522f823c812ca90c80",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2019, 15:54:11",
            "message":"[CVE-2019-1300]",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 43, 'deletions': 31, 'total': 74}",
            "files":"{'lib\/Backend\/GlobOpt.cpp': {'additions': 43, 'deletions': 31, 'changes': 74, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/95b3e3400afb8fa20743657f3a8057fb451e6f69\/lib%2FBackend%2FGlobOpt.cpp', 'patch': \"@@ -1167,6 +1167,10 @@ void GlobOpt::InsertValueCompensation(\\n     IR::Instr *insertBeforeInstr = predecessor->GetLastInstr();\\n     Func *const func = insertBeforeInstr->m_func;\\n     bool setLastInstrInPredecessor;\\n+    \/\/ If this is a loop back edge, and the successor has been completed, don't attempt to update its block data.\\n+    \/\/ The update is unnecessary, and the data has likely been freed.\\n+    bool updateSuccessorBlockData = !this->isPerformingLoopBackEdgeCompensation || successor->GetDataUseCount() > 0;\\n+\\n     if(insertBeforeInstr->IsBranchInstr() || insertBeforeInstr->m_opcode == Js::OpCode::BailTarget)\\n     {\\n         \/\/ Don't insert code between the branch and the corresponding ByteCodeUses instructions\\n@@ -1257,29 +1261,33 @@ void GlobOpt::InsertValueCompensation(\\n             \/\/ Merge the head segment length value\\n             Assert(predecessorBlockData.liveVarSyms->Test(predecessorHeadSegmentLengthSym->m_id));\\n             predecessorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n-            successorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n             Value *const predecessorHeadSegmentLengthValue =\\n                 predecessorBlockData.FindValue(predecessorHeadSegmentLengthSym);\\n             Assert(predecessorHeadSegmentLengthValue);\\n             predecessorBlockData.SetValue(predecessorHeadSegmentLengthValue, mergedHeadSegmentLengthSym);\\n-            Value *const mergedHeadSegmentLengthValue = successorBlockData.FindValue(mergedHeadSegmentLengthSym);\\n-            if(mergedHeadSegmentLengthValue)\\n+\\n+            if (updateSuccessorBlockData)\\n             {\\n-                Assert(mergedHeadSegmentLengthValue->GetValueNumber() != predecessorHeadSegmentLengthValue->GetValueNumber());\\n-                if(predecessorHeadSegmentLengthValue->GetValueInfo() != mergedHeadSegmentLengthValue->GetValueInfo())\\n+                successorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n+                Value *const mergedHeadSegmentLengthValue = successorBlockData.FindValue(mergedHeadSegmentLengthSym);\\n+                if(mergedHeadSegmentLengthValue)\\n                 {\\n-                    mergedHeadSegmentLengthValue->SetValueInfo(\\n-                        ValueInfo::MergeLikelyIntValueInfo(\\n-                            this->alloc,\\n-                            mergedHeadSegmentLengthValue,\\n-                            predecessorHeadSegmentLengthValue,\\n-                            mergedHeadSegmentLengthValue->GetValueInfo()->Type()\\n-                                .Merge(predecessorHeadSegmentLengthValue->GetValueInfo()->Type())));\\n+                    Assert(mergedHeadSegmentLengthValue->GetValueNumber() != predecessorHeadSegmentLengthValue->GetValueNumber());\\n+                    if(predecessorHeadSegmentLengthValue->GetValueInfo() != mergedHeadSegmentLengthValue->GetValueInfo())\\n+                    {\\n+                        mergedHeadSegmentLengthValue->SetValueInfo(\\n+                            ValueInfo::MergeLikelyIntValueInfo(\\n+                                this->alloc,\\n+                                mergedHeadSegmentLengthValue,\\n+                                predecessorHeadSegmentLengthValue,\\n+                                mergedHeadSegmentLengthValue->GetValueInfo()->Type()\\n+                                    .Merge(predecessorHeadSegmentLengthValue->GetValueInfo()->Type())));\\n+                    }\\n+                }\\n+                else\\n+                {\\n+                    successorBlockData.SetValue(CopyValue(predecessorHeadSegmentLengthValue), mergedHeadSegmentLengthSym);\\n                 }\\n-            }\\n-            else\\n-            {\\n-                successorBlockData.SetValue(CopyValue(predecessorHeadSegmentLengthValue), mergedHeadSegmentLengthSym);\\n             }\\n         }\\n \\n@@ -1300,27 +1308,31 @@ void GlobOpt::InsertValueCompensation(\\n             \/\/ Merge the length value\\n             Assert(predecessorBlockData.liveVarSyms->Test(predecessorLengthSym->m_id));\\n             predecessorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n-            successorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n             Value *const predecessorLengthValue = predecessorBlockData.FindValue(predecessorLengthSym);\\n             Assert(predecessorLengthValue);\\n             predecessorBlockData.SetValue(predecessorLengthValue, mergedLengthSym);\\n-            Value *const mergedLengthValue = successorBlockData.FindValue(mergedLengthSym);\\n-            if(mergedLengthValue)\\n+\\n+            if (updateSuccessorBlockData)\\n             {\\n-                Assert(mergedLengthValue->GetValueNumber() != predecessorLengthValue->GetValueNumber());\\n-                if(predecessorLengthValue->GetValueInfo() != mergedLengthValue->GetValueInfo())\\n+                successorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n+                Value *const mergedLengthValue = successorBlockData.FindValue(mergedLengthSym);\\n+                if(mergedLengthValue)\\n                 {\\n-                    mergedLengthValue->SetValueInfo(\\n-                        ValueInfo::MergeLikelyIntValueInfo(\\n-                            this->alloc,\\n-                            mergedLengthValue,\\n-                            predecessorLengthValue,\\n-                            mergedLengthValue->GetValueInfo()->Type().Merge(predecessorLengthValue->GetValueInfo()->Type())));\\n+                    Assert(mergedLengthValue->GetValueNumber() != predecessorLengthValue->GetValueNumber());\\n+                    if(predecessorLengthValue->GetValueInfo() != mergedLengthValue->GetValueInfo())\\n+                    {\\n+                        mergedLengthValue->SetValueInfo(\\n+                            ValueInfo::MergeLikelyIntValueInfo(\\n+                                this->alloc,\\n+                                mergedLengthValue,\\n+                                predecessorLengthValue,\\n+                                mergedLengthValue->GetValueInfo()->Type().Merge(predecessorLengthValue->GetValueInfo()->Type())));\\n+                    }\\n+                }\\n+                else\\n+                {\\n+                    successorBlockData.SetValue(CopyValue(predecessorLengthValue), mergedLengthSym);\\n                 }\\n-            }\\n-            else\\n-            {\\n-                successorBlockData.SetValue(CopyValue(predecessorLengthValue), mergedLengthSym);\\n             }\\n         }\"}}",
            "message_norm":"[cve-2019-1300]",
            "language":"ro",
            "entities":"[('cve-2019-1300', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOpt.cpp'])",
            "num_files":1.0
        },
        {
            "index":3405,
            "vuln_id":"GHSA-x9rg-q5fx-fx66",
            "cwe_id":"{'CWE-20'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in libpam4j It was found that libpam4j prior to 1.10 did not properly validate user accounts when authenticating. A user with a valid password for a disabled account would be able to bypass security restrictions and possibly access sensitive information.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/kohsuke\/libpam4j",
            "commit_href":"https:\/\/github.com\/kohsuke\/libpam4j\/commit\/02ffdff218283629ba4a902e7fe2fd44646abc21",
            "commit_sha":"02ffdff218283629ba4a902e7fe2fd44646abc21",
            "patch":"SINGLE",
            "chain_ord":"['02ffdff218283629ba4a902e7fe2fd44646abc21']",
            "before_first_fix_commit":"{'f49e2838cb195b2dce1448393d8c88174ad80652'}",
            "last_fix_commit":"02ffdff218283629ba4a902e7fe2fd44646abc21",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/29\/2018, 18:11:55",
            "message":"call pam_acct_mgmt to verify whether the user account is valid.\n\nThis fixes issue #18 and thus CVE-2017-12197",
            "author":"Kohsuke Kawaguchi",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/main\/java\/org\/jvnet\/libpam\/PAM.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kohsuke\/libpam4j\/raw\/02ffdff218283629ba4a902e7fe2fd44646abc21\/src%2Fmain%2Fjava%2Forg%2Fjvnet%2Flibpam%2FPAM.java', 'patch': '@@ -124,7 +124,7 @@ public UnixUser authenticate(String username, String password) throws PAMExcepti\\n             check(libpam.pam_authenticate(pht,0),\"pam_authenticate failed\");\\n             check(libpam.pam_setcred(pht,0),\"pam_setcred failed\");\\n             \/\/ several different error code seem to be used to represent authentication failures\\n-\/\/            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n+            check(libpam.pam_acct_mgmt(pht,0),\"pam_acct_mgmt failed\");\\n \\n             PointerByReference r = new PointerByReference();\\n             check(libpam.pam_get_item(pht,PAM_USER,r),\"pam_get_item failed\");'}}",
            "message_norm":"call pam_acct_mgmt to verify whether the user account is valid.\n\nthis fixes issue #18 and thus cve-2017-12197",
            "language":"en",
            "entities":"[('verify', 'ACTION', ''), ('user account', 'SECWORD', ''), ('#18', 'ISSUE', ''), ('cve-2017-12197', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/org\/jvnet\/libpam\/PAM.java'])",
            "num_files":1.0
        },
        {
            "index":780,
            "vuln_id":"GHSA-686f-ch3r-xwmh",
            "cwe_id":"{'CWE-362', 'CWE-119'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/udoprog\/unicycle\/commit\/6a6c367a0c25f86f998fa315ea90c328f685b194', 'https:\/\/github.com\/udoprog\/unicycle\/commit\/92f40b4a2c671553dfa96feacff0265206c44ce5'}",
            "dataset":"osv",
            "summary":"Data races in unicycle Affected versions of this crate unconditionally implemented `Send` & `Sync` for types `PinSlab<T>` & `Unordered<T, S>`. This allows sending non-Send types to other threads and concurrently accessing non-Sync types from multiple threads.\n\nThis can result in a data race & memory corruption when types that provide internal mutability without synchronization are contained within `PinSlab<T>` or `Unordered<T, S>` and accessed concurrently from multiple threads.\n\nThe flaw was corrected in commits 92f40b4 & 6a6c367 by adding trait bound `T: Send` to `Send` impls for `PinSlab<T>` & `Unordered<T, S>` and adding `T: Sync` to `Sync` impls for `PinSlab<T>` & `Unordered<T, S>`.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/udoprog\/unicycle",
            "commit_href":"https:\/\/github.com\/udoprog\/unicycle\/commit\/6a6c367a0c25f86f998fa315ea90c328f685b194",
            "commit_sha":"6a6c367a0c25f86f998fa315ea90c328f685b194",
            "patch":"MULTI",
            "chain_ord":"['92f40b4a2c671553dfa96feacff0265206c44ce5', '6a6c367a0c25f86f998fa315ea90c328f685b194']",
            "before_first_fix_commit":"{'c6a1e1601e8ddfb33d2846abca3c3ddc50e0493c'}",
            "last_fix_commit":"6a6c367a0c25f86f998fa315ea90c328f685b194",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/24\/2021, 03:29:54",
            "message":"Fix trait bounds in Send\/Sync impl: Unordered<T,S>\nThis commit is a follow-up fix for the issue raised in\nhttps:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334 .",
            "author":"JOE1994",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/udoprog\/unicycle\/raw\/6a6c367a0c25f86f998fa315ea90c328f685b194\/src%2Flib.rs', 'patch': '@@ -377,8 +377,8 @@ where\\n     _marker: marker::PhantomData<S>,\\n }\\n \\n-unsafe impl<T, S> Send for Unordered<T, S> where S: Send + Sentinel {}\\n-unsafe impl<T, S> Sync for Unordered<T, S> where S: Sync + Sentinel {}\\n+unsafe impl<T: Send, S> Send for Unordered<T, S> where S: Sentinel {}\\n+unsafe impl<T: Sync, S> Sync for Unordered<T, S> where S: Sentinel {}\\n \\n impl<T, S> Unpin for Unordered<T, S> where S: Sentinel {}'}}",
            "message_norm":"fix trait bounds in send\/sync impl: unordered<t,s>\nthis commit is a follow-up fix for the issue raised in\nhttps:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334 .",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":744,
            "vuln_id":"GHSA-6465-r752-2h8v",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/neorazorx\/facturascripts\/commit\/8e31d8434014a6d1e8791a489d84268fd74b0c9a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in facturascripts Reflected cross-site scripting using url based payload in GitHub repository neorazorx\/facturascripts prior to 2022.08. This can lead to theft of a user's cookies, which in turn could lead to account takeover or do other malicious activities in a victim's browser.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/neorazorx\/facturascripts",
            "commit_href":"https:\/\/github.com\/neorazorx\/facturascripts\/commit\/8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "commit_sha":"8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "patch":"SINGLE",
            "chain_ord":"['8e31d8434014a6d1e8791a489d84268fd74b0c9a']",
            "before_first_fix_commit":"{'ec88bc72ff2f6eb79a27112c777a7d601e946ed5'}",
            "last_fix_commit":"8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 22:12:41",
            "message":"We check the url parameter of the link to ensure that it is a valid controller.\n------\nComprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
            "author":"Carlos Garcia Gomez",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'Core\/Controller\/EditPageOption.php': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NeoRazorX\/facturascripts\/raw\/8e31d8434014a6d1e8791a489d84268fd74b0c9a\/Core%2FController%2FEditPageOption.php', 'patch': \"@@ -24,6 +24,7 @@\\n use FacturaScripts\\\\Core\\\\Base\\\\DataBase\\\\DataBaseWhere;\\n use FacturaScripts\\\\Core\\\\Lib\\\\Widget\\\\VisualItemLoadEngine;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\CodeModel;\\n+use FacturaScripts\\\\Dinamic\\\\Model\\\\Page;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\PageOption;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\User;\\n use Symfony\\\\Component\\\\HttpFoundation\\\\Response;\\n@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)\\n         parent::privateCore($response, $user, $permissions);\\n         $this->model = new PageOption();\\n         $this->loadSelectedViewName();\\n-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;\\n+        $this->setBackPage();\\n         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;\\n         $this->loadPageOptions();\\n \\n@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool\\n         return true;\\n     }\\n \\n+    private function setBackPage()\\n+    {\\n+        \/\/ check if the url is a real controller name\\n+        $url = $this->request->get('url', '');\\n+        $pageModel = new Page();\\n+        foreach ($pageModel->all([], [], 0, 0) as $page) {\\n+            if (substr($url, 0, strlen($page->name)) === $page->name) {\\n+                $this->backPage = $url;\\n+                return;\\n+            }\\n+        }\\n+\\n+        \/\/ set the default back page\\n+        $this->backPage = $this->selectedViewName;\\n+    }\\n+\\n     \/**\\n      * @param array $column\\n      * @param string $name\"}}",
            "message_norm":"we check the url parameter of the link to ensure that it is a valid controller.\n------\ncomprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
            "language":"es",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Core\/Controller\/EditPageOption.php'])",
            "num_files":1.0
        },
        {
            "index":2007,
            "vuln_id":"GHSA-h6rj-8r3c-9gpj",
            "cwe_id":"{'CWE-400'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mongodb\/bson-ruby\/commit\/976da329ff03ecdfca3030eb6efe3c85e6db9999'}",
            "dataset":"osv",
            "summary":"bson is vulnerable to denial of service due to incorrect regex validation BSON injection vulnerability in the legal? function in BSON (bson-ruby) gem before 3.0.4 for Ruby allows remote attackers to cause a denial of service (resource consumption) or inject arbitrary data via a crafted string.",
            "published_date":"2018-03-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/mongodb\/bson-ruby",
            "commit_href":"https:\/\/github.com\/mongodb\/bson-ruby\/commit\/976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "commit_sha":"976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "patch":"SINGLE",
            "chain_ord":"['976da329ff03ecdfca3030eb6efe3c85e6db9999']",
            "before_first_fix_commit":"{'7446d7c6764dfda8dc4480ce16d5c023e74be5ca'}",
            "last_fix_commit":"976da329ff03ecdfca3030eb6efe3c85e6db9999",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/04\/2015, 04:19:42",
            "message":"Use \\A \\z for checking regex on legal",
            "author":"Durran Jordan",
            "comments":"{'com_1': {'author': 'judofyr', 'datetime': '06\/04\/2015, 16:53:06', 'body': 'Yay! Thanks for a quick patch.'}, 'com_2': {'author': 'cheald', 'datetime': '06\/04\/2015, 19:17:08', 'body': \"Is the 1.x series going to see a patch? Users who aren't using bson_ext (such as users on JRuby) are still vulnerable.\"}, 'com_3': {'author': 'estolfo', 'datetime': '06\/04\/2015, 19:19:06', 'body': 'Yes, it will be released this afternoon.'}, 'com_4': {'author': 'estolfo', 'datetime': '06\/04\/2015, 19:20:30', 'body': \"It's in master already.\"}, 'com_5': {'author': 'cheald', 'datetime': '06\/04\/2015, 19:21:58', 'body': 'Perfect, thanks. https:\/\/github.com\/mongodb\/mongo-ruby-driver\/blob\/1.x-stable\/lib\/bson\/types\/object_id.rb for anyone else who ends up here looking for it, like me. :)'}, 'com_6': {'author': 'estolfo', 'datetime': '06\/04\/2015, 20:44:37', 'body': 'mongo 1.12.3 and bson 1.12.3 are released with this fix.'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/bson\/object_id.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mongodb\/bson-ruby\/raw\/976da329ff03ecdfca3030eb6efe3c85e6db9999\/lib%2Fbson%2Fobject_id.rb', 'patch': '@@ -282,7 +282,7 @@ def from_time(time, options = {})\\n       #\\n       # @since 2.0.0\\n       def legal?(string)\\n-        string.to_s =~ \/^[0-9a-f]{24}$\/i ? true : false\\n+        string.to_s =~ \/\\\\A[0-9a-f]{24}\\\\z\/i ? true : false\\n       end\\n \\n       # Executes the provided block only if the size of the provided object is'}}",
            "message_norm":"use \\a \\z for checking regex on legal",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/bson\/object_id.rb'])",
            "num_files":1.0
        },
        {
            "index":707,
            "vuln_id":"GHSA-5vr6-hm68-5j9p",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/pull\/13554\/commits\/4f231a0f49b6c953d506913364ffd7fb3a660630'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in LibreNMS LibreNMS 21.11.0 is affected by is affected by a Cross Site Scripting (XSS) vulnerability in includes\/html\/forms\/poller-groups.inc.php.",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/pull\/13554\/commits\/4f231a0f49b6c953d506913364ffd7fb3a660630",
            "commit_sha":"4f231a0f49b6c953d506913364ffd7fb3a660630",
            "patch":"SINGLE",
            "chain_ord":"['4f231a0f49b6c953d506913364ffd7fb3a660630']",
            "before_first_fix_commit":"{'fff7b45a7599f8f13a55250dc5f2b957f3394194'}",
            "last_fix_commit":"4f231a0f49b6c953d506913364ffd7fb3a660630",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/22\/2021, 22:31:45",
            "message":"fix XSS vulnerability in poller-groups.inc.php",
            "author":"AL-KASSAR",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'includes\/html\/forms\/poller-groups.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/4f231a0f49b6c953d506913364ffd7fb3a660630\/includes%2Fhtml%2Fforms%2Fpoller-groups.inc.php', 'patch': '@@ -44,5 +44,5 @@\\n if (! empty($ok)) {\\n     exit(\"$ok\");\\n } else {\\n-    exit(\"ERROR: $error\");\\n+    exit(\"ERROR: \".htmlspecialchars($error));;\\n }'}}",
            "message_norm":"fix xss vulnerability in poller-groups.inc.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/forms\/poller-groups.inc.php'])",
            "num_files":1.0
        },
        {
            "index":2537,
            "vuln_id":"GHSA-p8q8-jfcv-g2h2",
            "cwe_id":"{'CWE-59'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/pear\/Archive_Tar\/commit\/7789ebb2f34f9e4adb3a4152ad0d1548930a9755', 'https:\/\/github.com\/pear\/Archive_Tar\/commit\/b5832439b1f37331fb4f87e67fe4f61ca26bf7d4'}",
            "dataset":"osv",
            "summary":"Directory Traversal in Archive_Tar In Archive_Tar before 1.4.14, symlinks can refer to targets outside of the extracted archive, a different vulnerability than CVE-2020-36193.",
            "published_date":"2021-08-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/pear\/Archive_Tar",
            "commit_href":"https:\/\/github.com\/pear\/Archive_Tar\/commit\/b5832439b1f37331fb4f87e67fe4f61ca26bf7d4",
            "commit_sha":"b5832439b1f37331fb4f87e67fe4f61ca26bf7d4",
            "patch":"MULTI",
            "chain_ord":"['b5832439b1f37331fb4f87e67fe4f61ca26bf7d4', '7789ebb2f34f9e4adb3a4152ad0d1548930a9755']",
            "before_first_fix_commit":"{'8c00f3c220655961dc3f869f37005794ab3e3500', '4d761c5334c790e45ef3245f0864b8955c562caa'}",
            "last_fix_commit":"7789ebb2f34f9e4adb3a4152ad0d1548930a9755",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/18\/2021, 15:21:58",
            "message":"Properly fix symbolic link path traversal (CVE-2021-32610)",
            "author":"Michiel Rook",
            "comments":null,
            "stats":"{'additions': 29, 'deletions': 21, 'total': 50}",
            "files":"{'Archive\/Tar.php': {'additions': 29, 'deletions': 21, 'changes': 50, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pear\/Archive_Tar\/raw\/b5832439b1f37331fb4f87e67fe4f61ca26bf7d4\/Archive%2FTar.php', 'patch': '@@ -2124,39 +2124,47 @@ public function _extractList(\\n                             }\\n                         }\\n                     } elseif ($v_header[\\'typeflag\\'] == \"2\") {\\n+                        if (!$p_symlinks) {\\n+                            $this->_warning(\\'Symbolic links are not allowed. \\'\\n+                                . \\'Unable to extract {\\'\\n+                                . $v_header[\\'filename\\'] . \\'}\\'\\n+                            );\\n+                            return false;\\n+                        }\\n+                        $absolute_link = FALSE;\\n                         $link_depth = 0;\\n-                        foreach (explode(\"\/\", $v_header[\\'filename\\']) as $dir) {\\n-                            if ($dir === \"..\") {\\n-                                $link_depth--;\\n-                            } elseif ($dir !== \"\" && $dir !== \".\" ) {\\n-                                $link_depth++;\\n-                            }\\n+                        if (strpos($v_header[\\'link\\'], \"\/\") === 0 || strpos($v_header[\\'link\\'], \\':\\') !== FALSE) {\\n+                          $absolute_link = TRUE;\\n                         }\\n-                        foreach (explode(\"\/\", $v_header[\\'link\\']) as $dir){\\n-                            if ($link_depth <= 0) {\\n-                                break;\\n+                        else {\\n+                            $s_filename = preg_replace(\\'@^\\' . preg_quote($p_path) . \\'@\\', \"\", $v_header[\\'filename\\']);\\n+                            $s_linkname = str_replace(\\'\\\\\\\\\\', \\'\/\\', $v_header[\\'link\\']);\\n+                            foreach (explode(\"\/\", $s_filename) as $dir) {\\n+                                if ($dir === \"..\") {\\n+                                    $link_depth--;\\n+                                } elseif ($dir !== \"\" && $dir !== \".\" ) {\\n+                                    $link_depth++;\\n+                                }\\n                             }\\n-                            if ($dir === \"..\") {\\n-                                $link_depth--;\\n-                            } elseif ($dir !== \"\" && $dir !== \".\") {\\n-                                $link_depth++;\\n+                            foreach (explode(\"\/\", $s_linkname) as $dir){\\n+                                if ($link_depth <= 0) {\\n+                                    break;\\n+                                }\\n+                                if ($dir === \"..\") {\\n+                                    $link_depth--;\\n+                                } elseif ($dir !== \"\" && $dir !== \".\") {\\n+                                    $link_depth++;\\n+                                }\\n                             }\\n                         }\\n-                        if (strpos($v_header[\\'link\\'], \"\/\") === 0 or $link_depth <= 0) {\\n+                        if ($absolute_link || $link_depth <= 0) {\\n                             $this->_error(\\n                                  \\'Out-of-path file extraction {\\'\\n                                  . $v_header[\\'filename\\'] . \\' --> \\' .\\n                                  $v_header[\\'link\\'] . \\'}\\'\\n                             );\\n                             return false;\\n                         }\\n-                        if (!$p_symlinks) {\\n-                            $this->_warning(\\'Symbolic links are not allowed. \\'\\n-                                . \\'Unable to extract {\\'\\n-                                . $v_header[\\'filename\\'] . \\'}\\'\\n-                            );\\n-                            return false;\\n-                        }\\n                         if (@file_exists($v_header[\\'filename\\'])) {\\n                             @unlink($v_header[\\'filename\\']);\\n                         }'}}",
            "message_norm":"properly fix symbolic link path traversal (cve-2021-32610)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('cve-2021-32610', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Archive\/Tar.php'])",
            "num_files":1.0
        },
        {
            "index":2791,
            "vuln_id":"GHSA-qpgx-64h2-gc3c",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/argoproj\/argo-events\/commit\/d0f66dbce78bc31923ca057b20fc722aa24ca961'}",
            "dataset":"osv",
            "summary":"Insecure path traversal in Git Trigger Source can lead to arbitrary file read ### Impact\nA path traversal issue was found in the (g *GitArtifactReader).Read() API. Read() calls into (g *GitArtifactReader).readFromRepository() that opens and reads the file that contains the trigger resource definition:\n\n```go\nfunc (g *GitArtifactReader) readFromRepository(r *git.Repository, dir string)\n```\n\nNo checks are made on this file at read time, which could lead an attacker to read files anywhere on the system. This could be achieved by either using symbolic links, or putting `..\/` in the path.\n\n### Patches\nA patch for this vulnerability has been released in the following Argo Events version:\n\nv1.7.1\n\n### Credits\nDisclosed by [Ada Logics](https:\/\/adalogics.com\/) in a security audit sponsored by CNCF and facilitated by OSTIF.\n\n### For more information\nOpen an issue in the [Argo Events issue tracker](https:\/\/github.com\/argoproj\/argo-events\/issues) or [discussions](https:\/\/github.com\/argoproj\/argo-events\/discussions)\nJoin us on [Slack](https:\/\/argoproj.github.io\/community\/join-slack) in channel #argo-events",
            "published_date":"2022-06-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/argoproj\/argo-events",
            "commit_href":"https:\/\/github.com\/argoproj\/argo-events\/commit\/d0f66dbce78bc31923ca057b20fc722aa24ca961",
            "commit_sha":"d0f66dbce78bc31923ca057b20fc722aa24ca961",
            "patch":"SINGLE",
            "chain_ord":"['d0f66dbce78bc31923ca057b20fc722aa24ca961']",
            "before_first_fix_commit":"{'e80ab9f9556f7f97346fb393e312f8a689ca21f8'}",
            "last_fix_commit":"d0f66dbce78bc31923ca057b20fc722aa24ca961",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/13\/2022, 03:18:33",
            "message":"fix: git artifactory arbitrary file read issue (#1965)\n\nSigned-off-by: Derek Wang <whynowy@gmail.com>",
            "author":"Derek Wang",
            "comments":null,
            "stats":"{'additions': 34, 'deletions': 2, 'total': 36}",
            "files":"{'sensors\/artifacts\/git.go': {'additions': 34, 'deletions': 2, 'changes': 36, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/argoproj\/argo-events\/raw\/d0f66dbce78bc31923ca057b20fc722aa24ca961\/sensors%2Fartifacts%2Fgit.go', 'patch': '@@ -20,6 +20,8 @@ import (\\n \\t\"fmt\"\\n \\t\"io\/ioutil\"\\n \\t\"os\"\\n+\\t\"path\"\\n+\\t\"strings\"\\n \\n \\t\"github.com\/go-git\/go-git\/v5\"\\n \\t\"github.com\/go-git\/go-git\/v5\/config\"\\n@@ -44,6 +46,8 @@ var (\\n \\t\\t\"refs\/*:refs\/*\",\\n \\t\\t\"HEAD:refs\/heads\/HEAD\",\\n \\t}\\n+\\n+\\tnotAllowedInPath = []string{\"..\", \"~\", \"\\\\\\\\\"}\\n )\\n \\n type GitArtifactReader struct {\\n@@ -52,6 +56,15 @@ type GitArtifactReader struct {\\n \\n \/\/ NewGitReader returns a new git reader\\n func NewGitReader(gitArtifact *v1alpha1.GitArtifact) (*GitArtifactReader, error) {\\n+\\tif gitArtifact == nil {\\n+\\t\\treturn nil, fmt.Errorf(\"nil git artifact\")\\n+\\t}\\n+\\tfor _, na := range notAllowedInPath {\\n+\\t\\tif strings.Contains(gitArtifact.FilePath, na) {\\n+\\t\\t\\treturn nil, fmt.Errorf(\"%q is not allowed in the filepath\", na)\\n+\\t\\t}\\n+\\t}\\n+\\n \\treturn &GitArtifactReader{\\n \\t\\tartifact: gitArtifact,\\n \\t}, nil\\n@@ -176,8 +189,16 @@ func (g *GitArtifactReader) readFromRepository(r *git.Repository, dir string) ([\\n \\t\\t\\treturn nil, fmt.Errorf(\"failed to pull latest updates. err: %+v\", err)\\n \\t\\t}\\n \\t}\\n-\\n-\\treturn ioutil.ReadFile(fmt.Sprintf(\"%s\/%s\", dir, g.artifact.FilePath))\\n+\\tfilePath := fmt.Sprintf(\"%s\/%s\", dir, g.artifact.FilePath)\\n+\\t\/\/ symbol link is not allowed due to security concern\\n+\\tisSymbolLink, err := isSymbolLink(filePath)\\n+\\tif err != nil {\\n+\\t\\treturn nil, err\\n+\\t}\\n+\\tif isSymbolLink {\\n+\\t\\treturn nil, fmt.Errorf(\"%q is a symbol link which is not allowed\", g.artifact.FilePath)\\n+\\t}\\n+\\treturn ioutil.ReadFile(filePath)\\n }\\n \\n func (g *GitArtifactReader) getBranchOrTag() *git.CheckoutOptions {\\n@@ -241,3 +262,14 @@ func (g *GitArtifactReader) Read() ([]byte, error) {\\n \\t}\\n \\treturn g.readFromRepository(r, cloneDir)\\n }\\n+\\n+func isSymbolLink(filepath string) (bool, error) {\\n+\\tfi, err := os.Lstat(path.Clean(filepath))\\n+\\tif err != nil {\\n+\\t\\treturn false, err\\n+\\t}\\n+\\tif fi.Mode()&os.ModeSymlink != 0 {\\n+\\t\\treturn true, nil\\n+\\t}\\n+\\treturn false, nil\\n+}'}}",
            "message_norm":"fix: git artifactory arbitrary file read issue (#1965)\n\nsigned-off-by: derek wang <whynowy@gmail.com>",
            "language":"en",
            "entities":"[('issue', 'FLAW', ''), ('#1965', 'ISSUE', ''), ('whynowy@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['sensors\/artifacts\/git.go'])",
            "num_files":1.0
        },
        {
            "index":469,
            "vuln_id":"GHSA-4r8q-gv9j-3xx6",
            "cwe_id":"{'CWE-601'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/tenancy\/multi-tenant\/commit\/9c837a21bccce9bcaeb90033ef200d84f0d9e164'}",
            "dataset":"osv",
            "summary":"Open Redirect ### Impact\nIn some situations, it is possible to have open redirects where users can be redirected from your site to any other site using a specially crafted URL.\nThis is only the case for installations where the default Hostname Identification is used and the environment uses tenants that have `force_https` set to `true` (default: `false`)\n\n### Patches\nVersion 5.7.2 contains the relevant patches to fix this bug. Stripping the URL from special characters to prevent specially crafted URL's from being redirected to.\n\n### Workarounds\nThere is a simple way to work around the security issue\n- Set the `force_https` to every tenant to `false`\n\n### References\nhttps:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2018-11784\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Contact us in Discord: https:\/\/tenancy.dev\/chat",
            "published_date":"2022-03-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/tenancy\/multi-tenant",
            "commit_href":"https:\/\/github.com\/tenancy\/multi-tenant\/commit\/9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "commit_sha":"9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "patch":"SINGLE",
            "chain_ord":"['9c837a21bccce9bcaeb90033ef200d84f0d9e164']",
            "before_first_fix_commit":"{'41150dce84288f24ff68c8df433a45f966a60865'}",
            "last_fix_commit":"9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/27\/2021, 04:40:08",
            "message":"Trim slashes from request uri before redirecting (#1001)",
            "author":"Jasper Zonneveld",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/Middleware\/HostnameActions.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tenancy\/multi-tenant\/raw\/9c837a21bccce9bcaeb90033ef200d84f0d9e164\/src%2FMiddleware%2FHostnameActions.php', 'patch': \"@@ -95,7 +95,7 @@ protected function secure(Hostname $hostname, Request $request)\\n     {\\n         $this->emitEvent(new Secured($hostname));\\n \\n-        return $this->redirect->secure($request->getRequestUri());\\n+        return $this->redirect->secure(ltrim($request->getRequestUri(), '\/'));\\n     }\\n \\n     \/**\"}}",
            "message_norm":"trim slashes from request uri before redirecting (#1001)",
            "language":"en",
            "entities":"[('#1001', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Middleware\/HostnameActions.php'])",
            "num_files":1.0
        },
        {
            "index":1485,
            "vuln_id":"GHSA-c558-5gfm-p2r8",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a'}",
            "dataset":"osv",
            "summary":"JSPUI spellcheck and autocomplete tools vulnerable to Cross Site Scripting ### Impact\nThe JSPUI spellcheck \"Did you mean\" HTML escapes the data-spell attribute in the link, but not the actual displayed text.  Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.4 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7\n* 6.x patch files available (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7.patch\n\n_DSpace 5.x:_\n* Fixed in 5.11 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5\n* 5.x patch files available (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5.patch\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs \/ configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered & reported by Hassan Bhuiyan (Brunel University London)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
            "published_date":"2022-08-06",
            "chain_len":4,
            "project":"https:\/\/github.com\/DSpace\/DSpace",
            "commit_href":"https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d",
            "commit_sha":"ebb83a75234d3de9be129464013e998dc929b68d",
            "patch":"MULTI",
            "chain_ord":"['ebb83a75234d3de9be129464013e998dc929b68d', '35030a23e48b5946f5853332c797e1c4adea7bb7', 'c89e493e517b424dea6175caba54e91d3847fc3a', '6f75bb084ab1937d094208c55cd84340040bcbb5']",
            "before_first_fix_commit":"{'d1dd7d23329ef055069759df15cfa200c8e32e54'}",
            "last_fix_commit":"6f75bb084ab1937d094208c55cd84340040bcbb5",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/08\/2020, 00:55:36",
            "message":"[DS-4453] Fix XSS handling in JSPUI discovery spellcheck",
            "author":"Kim Shepherd",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DSpace\/DSpace\/raw\/ebb83a75234d3de9be129464013e998dc929b68d\/dspace-jspui%2Fsrc%2Fmain%2Fwebapp%2Fsearch%2Fdiscovery.jsp', 'patch': '@@ -209,7 +209,7 @@\\n         <input type=\"text\" size=\"50\" id=\"query\" name=\"query\" value=\"<%= (query==null ? \"\" : Utils.addEntities(query)) %>\"\/>\\n         <input type=\"submit\" id=\"main-query-submit\" class=\"btn btn-primary\" value=\"<fmt:message key=\"jsp.general.go\"\/>\" \/>\\n <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>\\n-\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= spellCheckQuery %><\/a><\/fmt:param><\/fmt:message><\/p>\\n+\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= Utils.addEntities(spellCheckQuery) %><\/a><\/fmt:param><\/fmt:message><\/p>\\n <% } %>                  \\n         <input type=\"hidden\" value=\"<%= rpp %>\" name=\"rpp\" \/>\\n         <input type=\"hidden\" value=\"<%= Utils.addEntities(sortedBy) %>\" name=\"sort_by\" \/>'}}",
            "message_norm":"[ds-4453] fix xss handling in jspui discovery spellcheck",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp'])",
            "num_files":1.0
        },
        {
            "index":614,
            "vuln_id":"GHSA-5crj-c72x-m7gq",
            "cwe_id":"{'CWE-476'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff'}",
            "dataset":"osv",
            "summary":"Null pointer exception when `Exit` node is not preceded by `Enter` op ### Impact\nThe [process of building the control flow graph](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/common_runtime\/immutable_executor_state.cc#L284-L346) for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not:\n  \n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.Exit(data=[False,False])\n    \nfunc()\n```\n\nThis occurs because the code assumes that the first node in the pairing (e.g., an `Enter` node) always exists when encountering the second node (e.g., an `Exit` node):\n  \n```cc\n  ...\n} else if (IsExit(curr_node)) {\n  \/\/ Exit to the parent frame.\n  parent = parent_nodes[curr_id];         \n  frame_name = cf_info->frame_names[parent->id()];\n  ...                \n```\n\nWhen this is not the case, `parent` is `nullptr` so dereferencing it causes a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [05cbebd3c6bb8f517a158b0155debb8df79017ff](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "commit_sha":"05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "patch":"SINGLE",
            "chain_ord":"['05cbebd3c6bb8f517a158b0155debb8df79017ff']",
            "before_first_fix_commit":"{'3586950728a5e7cda93d9eeeedfec59ddb30883c'}",
            "last_fix_commit":"05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/18\/2021, 23:17:46",
            "message":"Fix a NPE issue in invalid Exit op. Now it will report an error instead of crash.\n\nPiperOrigin-RevId: 404089902\nChange-Id: Ia6ec55445ea70ad045a4d339d354959ad0618f2a",
            "author":"Xiao Yu",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/common_runtime\/immutable_executor_state.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/05cbebd3c6bb8f517a158b0155debb8df79017ff\/tensorflow%2Fcore%2Fcommon_runtime%2Fimmutable_executor_state.cc', 'patch': '@@ -316,6 +316,10 @@ Status ImmutableExecutorState::BuildControlFlowInfo(const Graph* g,\\n     } else if (IsExit(curr_node)) {\\n       \/\/ Exit to the parent frame.\\n       parent = parent_nodes[curr_id];\\n+      if (!parent) {\\n+        return errors::InvalidArgument(\\n+            \"Invalid Exit op: Cannot find a corresponding Enter op.\");\\n+      }\\n       frame_name = cf_info->frame_names[parent->id()];\\n       parent = parent_nodes[parent->id()];\\n     } else {'}}",
            "message_norm":"fix a npe issue in invalid exit op. now it will report an error instead of crash.\n\npiperorigin-revid: 404089902\nchange-id: ia6ec55445ea70ad045a4d339d354959ad0618f2a",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('npe issue', 'SECWORD', ''), ('error', 'FLAW', ''), ('404089902', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/immutable_executor_state.cc'])",
            "num_files":1.0
        },
        {
            "index":177,
            "vuln_id":"GHSA-32j9-6qqm-mq9g",
            "cwe_id":"{'CWE-241', 'CWE-703'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/Venemo\/node-lmdb\/commit\/97760104c0fd311206b88aecd91fa1f59fe2b85a'}",
            "dataset":"osv",
            "summary":"Unhandled case in node-lmdb The package node-lmdb before 0.9.7 is vulnerable to Denial of Service (DoS) when defining a non-invokable `ToString` value, which will cause a crash during type check.",
            "published_date":"2022-03-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/Venemo\/node-lmdb",
            "commit_href":"https:\/\/github.com\/Venemo\/node-lmdb\/commit\/97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "commit_sha":"97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "patch":"SINGLE",
            "chain_ord":"['97760104c0fd311206b88aecd91fa1f59fe2b85a']",
            "before_first_fix_commit":"{'4b659d1734e02e09b45a29ac81f425f610bd14ea'}",
            "last_fix_commit":"97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/12\/2022, 14:19:20",
            "message":"Perform argument check for putString",
            "author":"Kris Zyp",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'src\/txn.cpp': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Venemo\/node-lmdb\/raw\/97760104c0fd311206b88aecd91fa1f59fe2b85a\/src%2Ftxn.cpp', 'patch': '@@ -295,6 +295,8 @@ Nan::NAN_METHOD_RETURN_TYPE TxnWrap::putCommon(Nan::NAN_METHOD_ARGS_TYPE info, v\\n }\\n \\n NAN_METHOD(TxnWrap::putString) {\\n+    if (!info[2]->IsString())\\n+        return Nan::ThrowError(\"Value must be a string.\");\\n     return putCommon(info, [](Nan::NAN_METHOD_ARGS_TYPE info, MDB_val &data) -> void {\\n         CustomExternalStringResource::writeTo(Local<String>::Cast(info[2]), &data);\\n     }, [](MDB_val &data) -> void {'}}",
            "message_norm":"perform argument check for putstring",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/txn.cpp'])",
            "num_files":1.0
        },
        {
            "index":628,
            "vuln_id":"GHSA-5fw9-fq32-wv5p",
            "cwe_id":"{'CWE-78'}",
            "score":5.6,
            "chain":"{'https:\/\/github.com\/mikaelbr\/node-notifier\/commit\/5d62799dab88505a709cd032653b2320c5813fce'}",
            "dataset":"osv",
            "summary":"OS Command Injection in node-notifier This affects the package node-notifier before 8.0.1. It allows an attacker to run arbitrary commands on Linux machines due to the options params not being sanitised when being passed an array.",
            "published_date":"2020-12-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/mikaelbr\/node-notifier",
            "commit_href":"https:\/\/github.com\/mikaelbr\/node-notifier\/commit\/5d62799dab88505a709cd032653b2320c5813fce",
            "commit_sha":"5d62799dab88505a709cd032653b2320c5813fce",
            "patch":"SINGLE",
            "chain_ord":"['5d62799dab88505a709cd032653b2320c5813fce']",
            "before_first_fix_commit":"{'0c4a80df9a3b5015cd1e1ab858e008be3fece082'}",
            "last_fix_commit":"5d62799dab88505a709cd032653b2320c5813fce",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/15\/2020, 15:30:54",
            "message":"v8.0.1",
            "author":"Mikael Brevik",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'package.json': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mikaelbr\/node-notifier\/raw\/5d62799dab88505a709cd032653b2320c5813fce\/package.json', 'patch': '@@ -1,6 +1,6 @@\\n {\\n   \"name\": \"node-notifier\",\\n-  \"version\": \"8.0.0\",\\n+  \"version\": \"8.0.1\",\\n   \"description\": \"A Node.js module for sending notifications on native Mac, Windows (post and pre 8) and Linux (or Growl as fallback)\",\\n   \"main\": \"index.js\",\\n   \"scripts\": {'}}",
            "message_norm":"v8.0.1",
            "language":"sk",
            "entities":"[('v8.0.1', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['package.json'])",
            "num_files":1.0
        },
        {
            "index":381,
            "vuln_id":"GHSA-484f-743f-6jx2",
            "cwe_id":"{'CWE-94'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/PHPSocialNetwork\/phpfastcache\/commit\/c4527205cb7a402b595790c74310791f5b04a1a4'}",
            "dataset":"osv",
            "summary":"Object injection in cookie driver in phpfastcache ### Impact\nAn possible object injection has been discovered in cookie driver prior 5.0.13 versions (of 5.x releases).\n\n### Patches\nThe issue has been addressed by enforcing JSON conversion when deserializing\n\n### Workarounds\nIf you can't fix it, use another driver such as \"Files\" (Filesystem)\n\n### References\nFixing release: https:\/\/github.com\/PHPSocialNetwork\/phpfastcache\/releases\/tag\/5.0.13\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the issue tracker](https:\/\/github.com\/PHPSocialNetwork\/phpfastcache\/issues)\n* Email us at [security@geolim4.com](mailto:security@geolim4.com)",
            "published_date":"2019-12-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/PHPSocialNetwork\/phpfastcache",
            "commit_href":"https:\/\/github.com\/PHPSocialNetwork\/phpfastcache\/commit\/c4527205cb7a402b595790c74310791f5b04a1a4",
            "commit_sha":"c4527205cb7a402b595790c74310791f5b04a1a4",
            "patch":"SINGLE",
            "chain_ord":"['c4527205cb7a402b595790c74310791f5b04a1a4']",
            "before_first_fix_commit":"{'afb1d158aee1eaa07857909d43f6ce3570b82a30'}",
            "last_fix_commit":"c4527205cb7a402b595790c74310791f5b04a1a4",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/30\/2016, 08:40:00",
            "message":"Fixed critical vulnerability on cookie driver",
            "author":"Geolim4",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/phpFastCache\/Drivers\/Cookie\/Driver.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PHPSocialNetwork\/phpfastcache\/raw\/c4527205cb7a402b595790c74310791f5b04a1a4\/src%2FphpFastCache%2FDrivers%2FCookie%2FDriver.php', 'patch': '@@ -99,7 +99,7 @@ protected function driverRead(CacheItemInterface $item)\\n         \/\/ return null if no caching\\n         \/\/ return value if in caching\\n         $keyword = self::PREFIX . $item->getKey();\\n-        $x = isset($_COOKIE[ $keyword ]) ? $this->decode(json_decode($_COOKIE[ $keyword ], true)) : false;\\n+        $x = isset($_COOKIE[ $keyword ]) ? json_decode($_COOKIE[ $keyword ], true) : false;\\n \\n         if ($x == false) {\\n             return null;'}}",
            "message_norm":"fixed critical vulnerability on cookie driver",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('critical', 'SEVERITY', ''), ('vulnerability', 'SECWORD', ''), ('cookie', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/phpFastCache\/Drivers\/Cookie\/Driver.php'])",
            "num_files":1.0
        },
        {
            "index":1894,
            "vuln_id":"GHSA-gjqc-q9g6-q2j3",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9'}",
            "dataset":"osv",
            "summary":"`CHECK`-failures in binary ops in Tensorflow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [any binary op](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/kernels\/cwise_ops_common.h#L88-L137) would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved:\n\n```cc\nfunctor::BinaryFunctor<Device, Functor, 1>()(\n    eigen_device, out->template flat<Tout>(),\n    input_0.template flat<Tin>(), input_1.template flat<Tin>(),\n    error_ptr);\n```\nIf `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
            "commit_sha":"a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
            "patch":"SINGLE",
            "chain_ord":"['a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9']",
            "before_first_fix_commit":"{'c7db81b86b6746b494e5359433aa8e2dd7df25f6'}",
            "last_fix_commit":"a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/12\/2021, 08:24:39",
            "message":"Validate real and expected type of arguments to cwise ops.\n\nWithout this validation, it is possible to trigger a `CHECK`-fail denial of service.\n\nThis is a rollforward of a previous commit which was rolled back as it was relying on RTTI. This time we don't use RTTI, we replace `typeid(Tin).name()` with a double function call, `DataTypeString(DataTypeToEnum<Tin>::v())`.\n\nPiperOrigin-RevId: 409340416\nChange-Id: I96080b2796729a3a9b65e7c68307ac276070f2f0",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/cwise_ops_common.h': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9\/tensorflow%2Fcore%2Fkernels%2Fcwise_ops_common.h', 'patch': '@@ -87,7 +87,17 @@ class BinaryOp : public BinaryOpShared {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& input_0 = ctx->input(0);\\n+    OP_REQUIRES(ctx, input_0.dtype() == DataTypeToEnum<Tin>::v(),\\n+                errors::InvalidArgument(\\n+                    \"Expected tensor of type \",\\n+                    DataTypeString(DataTypeToEnum<Tin>::v()), \" but got type \",\\n+                    DataTypeString(input_0.dtype())));\\n     const Tensor& input_1 = ctx->input(1);\\n+    OP_REQUIRES(ctx, input_1.dtype() == DataTypeToEnum<Tin>::v(),\\n+                errors::InvalidArgument(\\n+                    \"Expected tensor of type \",\\n+                    DataTypeString(DataTypeToEnum<Tin>::v()), \" but got type \",\\n+                    DataTypeString(input_1.dtype())));\\n     const Device& eigen_device = ctx->eigen_device<Device>();\\n     bool error = false;\\n     bool* const error_ptr = Functor::has_errors ? &error : nullptr;'}}",
            "message_norm":"validate real and expected type of arguments to cwise ops.\n\nwithout this validation, it is possible to trigger a `check`-fail denial of service.\n\nthis is a rollforward of a previous commit which was rolled back as it was relying on rtti. this time we don't use rtti, we replace `typeid(tin).name()` with a double function call, `datatypestring(datatypetoenum<tin>::v())`.\n\npiperorigin-revid: 409340416\nchange-id: i96080b2796729a3a9b65e7c68307ac276070f2f0",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('409340416', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/cwise_ops_common.h'])",
            "num_files":1.0
        },
        {
            "index":1243,
            "vuln_id":"GHSA-8r7c-3cm2-3h8f",
            "cwe_id":"{'CWE-401'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd'}",
            "dataset":"osv",
            "summary":"Memory leak in Tensorflow ### Impact\nIf a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/common_runtime\/immutable_executor_state.cc#L84-L262):\n\n```cc\nStatus s = params_.create_kernel(n->properties(), &item->kernel);\nif (!s.ok()) {\n  item->kernel = nullptr;\n  s = AttachDef(s, *n);\n  return s;           \n}                     \n```\n\nHere, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "commit_sha":"c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "patch":"SINGLE",
            "chain_ord":"['c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd']",
            "before_first_fix_commit":"{'d781eab54947e82ebf182f28dcdd5b02e6925d46'}",
            "last_fix_commit":"c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/10\/2021, 21:51:15",
            "message":"Fix memory leak when a graph node is invalid.\n\nIf a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\n\nPiperOrigin-RevId: 408968108\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/core\/common_runtime\/immutable_executor_state.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd\/tensorflow%2Fcore%2Fcommon_runtime%2Fimmutable_executor_state.cc', 'patch': '@@ -131,6 +131,7 @@ Status ImmutableExecutorState::Initialize(const Graph& graph) {\\n \\n     Status s = params_.create_kernel(n->properties(), &item->kernel);\\n     if (!s.ok()) {\\n+      params_.delete_kernel(item->kernel);\\n       item->kernel = nullptr;\\n       s = AttachDef(s, *n);\\n       return s;'}}",
            "message_norm":"fix memory leak when a graph node is invalid.\n\nif a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. hence, we get a memory leak.\n\npiperorigin-revid: 408968108\nchange-id: i1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('memory leak', 'SECWORD', ''), ('408968108', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/immutable_executor_state.cc'])",
            "num_files":1.0
        },
        {
            "index":1254,
            "vuln_id":"GHSA-8rq8-f485-7v8x",
            "cwe_id":"{'CWE-502'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd'}",
            "dataset":"osv",
            "summary":"rpc.py 0.6.0 vulnerable to Deserialization of Untrusted Data rpc.py through 0.6.0 allows Remote Code Execution because an unpickle occurs when the \"serializer: pickle\" HTTP header is sent. In other words, although JSON (not Pickle) is the default data format, an unauthenticated client can cause the data to be processed with unpickle.\n\n[Per the maintainer](https:\/\/github.com\/abersheeran\/rpc.py\/issues\/22), rpc.py is not designed for an API that is open to the outside world, and external requests cannot reach rpc.py in real world use.\n\nA [fix](https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd) exists on the `master` branch. As a workaround, use the following code to turn off pickle in older versions:\n```\ndel SERIALIZER_NAMES[PickleSerializer.name]\ndel SERIALIZER_TYPES[PickleSerializer.content_type]",
            "published_date":"2022-07-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/abersheeran\/rpc.py",
            "commit_href":"https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "commit_sha":"491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "patch":"SINGLE",
            "chain_ord":"['491e7a841ed9a754796d6ab047a9fb16e23bf8bd']",
            "before_first_fix_commit":"{'3d5c31916a597f8bdd3260c50d6ec398da1c421c'}",
            "last_fix_commit":"491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/06\/2022, 04:55:59",
            "message":"PickleSerializer is turned off by default",
            "author":"Aber",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 2, 'total': 9}",
            "files":"{'rpcpy\/serializers.py': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/abersheeran\/rpc.py\/raw\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd\/rpcpy%2Fserializers.py', 'patch': '@@ -108,16 +108,21 @@ def decode(self, data: bytes) -> typing.Any:\\n         return cbor.loads(data)\\n \\n \\n+# Since the release of pickle to the external network may lead to\\n+# arbitrary code execution vulnerabilities, this serialization\\n+# method is not enabled by default. It is recommended to turn it on\\n+# when there is physical isolation from the outside.\\n+\\n SERIALIZER_NAMES = {\\n     JSONSerializer.name: JSONSerializer(),\\n-    PickleSerializer.name: PickleSerializer(),\\n+    # PickleSerializer.name: PickleSerializer(),\\n     MsgpackSerializer.name: MsgpackSerializer(),\\n     CBORSerializer.name: CBORSerializer(),\\n }\\n \\n SERIALIZER_TYPES = {\\n     JSONSerializer.content_type: JSONSerializer(),\\n-    PickleSerializer.content_type: PickleSerializer(),\\n+    # PickleSerializer.content_type: PickleSerializer(),\\n     MsgpackSerializer.content_type: MsgpackSerializer(),\\n     CBORSerializer.content_type: CBORSerializer(),\\n }'}}",
            "message_norm":"pickleserializer is turned off by default",
            "language":"en",
            "entities":"[('pickleserializer', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['rpcpy\/serializers.py'])",
            "num_files":1.0
        },
        {
            "index":2326,
            "vuln_id":"GHSA-m296-j53x-xv95",
            "cwe_id":"{'CWE-362'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/7ab8a264980d23c2ed64e72f4636f38b7381eb39', 'https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
            "dataset":"osv",
            "summary":"Data races in tiny_future `tiny_future` contains a light-weight implementation of `Future`s. The `Future`\ntype it has lacked bound on its `Send` and `Sync` traits.\n\nThis allows for a bug where non-thread safe types such as `Cell` can be used in\n`Future`s and cause data races in concurrent programs.\n\nThe flaw was corrected in commit `c791919` by adding trait bounds to `Future`'s\n`Send` and `Sync`.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/KizzyCode\/tiny_future",
            "commit_href":"https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "commit_sha":"7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "patch":"MULTI",
            "chain_ord":"['c7919199a0f6d1ce0e3c33499d1b37f862c990e4', '7ab8a264980d23c2ed64e72f4636f38b7381eb39']",
            "before_first_fix_commit":"{'c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
            "last_fix_commit":"7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/08\/2020, 16:33:00",
            "message":"Require `Send` for underlying types to fix https:\/\/github.com\/KizzyCode\/tiny_future\/issues\/1",
            "author":"Keziah Biermann",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/KizzyCode\/tiny_future-rust\/raw\/7ab8a264980d23c2ed64e72f4636f38b7381eb39\/src%2Flib.rs', 'patch': \"@@ -178,7 +178,7 @@ pub fn time_remaining(timeout_point: std::time::Instant) -> std::time::Duration\\n \/\/\/ Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n \/\/\/ future. The parameter passed to `job` is a function that returns if the future is still waiting\\n \/\/\/ so that `job` can check for cancellation.\\n-pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n+pub fn async_with_state<T: 'static + Send, U: 'static + Send, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n \\tuse std::clone::Clone;\\n \\t\\n \\t\/\/ Create future and spawn job\\n@@ -192,7 +192,7 @@ pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send +\\n \/\/\/ Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n \/\/\/ future. The parameter passed to `job` is a function that returns if the future is still waiting\\n \/\/\/ so that `job` can check for cancellation.\\n-pub fn async<T: 'static, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n+pub fn async<T: 'static + Send, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n \\tasync_with_state(job, ())\\n }\"}}",
            "message_norm":"require `send` for underlying types to fix https:\/\/github.com\/kizzycode\/tiny_future\/issues\/1",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('https:\/\/github.com\/kizzycode\/tiny_future\/issues\/1', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":3075,
            "vuln_id":"GHSA-v82p-hv3v-p6qp",
            "cwe_id":"{'CWE-20'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69'}",
            "dataset":"osv",
            "summary":"Incomplete validation in MKL requantization ### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69",
            "commit_sha":"9e62869465573cb2d9b5053f1fa02a81fce21d69",
            "patch":"MULTI",
            "chain_ord":"['9e62869465573cb2d9b5053f1fa02a81fce21d69', '203214568f5bc237603dbab6e1fd389f1572f5c9']",
            "before_first_fix_commit":"{'aff0d5b2883ea3de9b52f9e7cd996a34b299bf06'}",
            "last_fix_commit":"203214568f5bc237603dbab6e1fd389f1572f5c9",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/29\/2021, 23:29:20",
            "message":"Add more validation to `RequantizationRangePerChannel`.\n\nPiperOrigin-RevId: 387693946\nChange-Id: Ife8dcbdb021bec4787eef6a4361dd08f17c14bd6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/9e62869465573cb2d9b5053f1fa02a81fce21d69\/tensorflow%2Fcore%2Fkernels%2Fmkl%2Fmkl_requantization_range_per_channel_op.cc', 'patch': '@@ -57,6 +57,20 @@ class MklRequantizationRangePerChannelOp : public OpKernel {\\n         ctx, input_max.dim_size(0) == depth,\\n         errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n                                 depth, \" was \", input_max.dim_size(0)));\\n+    OP_REQUIRES(\\n+        ctx, input_min.NumElements() == depth,\\n+        errors::InvalidArgument(\"input_min must have the same number of \"\\n+                                \"elements as input_max, got \",\\n+                                input_min.NumElements(), \" and \", depth));\\n+    OP_REQUIRES(ctx, input.NumElements() > 0,\\n+                errors::InvalidArgument(\"input must not be empty\"));\\n+    OP_REQUIRES(ctx, input.dims() == 4,\\n+                errors::InvalidArgument(\"input must be in NHWC format\"));\\n+    OP_REQUIRES(\\n+        ctx, input.dim_size(3) == depth,\\n+        errors::InvalidArgument(\\n+            \"input must have same number of channels as length of input_min: \",\\n+            input.dim_size(3), \" vs \", depth));\\n \\n     const float* input_min_data = input_min.flat<float>().data();\\n     const float* input_max_data = input_max.flat<float>().data();'}}",
            "message_norm":"add more validation to `requantizationrangeperchannel`.\n\npiperorigin-revid: 387693946\nchange-id: ife8dcbdb021bec4787eef6a4361dd08f17c14bd6",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('387693946', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2670,
            "vuln_id":"GHSA-pxpf-v376-7xx5",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/yairEO\/tagify\/commit\/198c0451fad188390390395ccfc84ab371def4c7'}",
            "dataset":"osv",
            "summary":"tagify can pass a malicious placeholder to initiate the cross-site scripting (XSS) payload This affects the package @yaireo\/tagify before 4.9.8. The package is used for rendering UI components inside the input or text fields, and an attacker can pass a malicious placeholder value to it to fire the cross-site scripting (XSS) payload.",
            "published_date":"2022-04-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/yairEO\/tagify",
            "commit_href":"https:\/\/github.com\/yairEO\/tagify\/commit\/198c0451fad188390390395ccfc84ab371def4c7",
            "commit_sha":"198c0451fad188390390395ccfc84ab371def4c7",
            "patch":"SINGLE",
            "chain_ord":"['198c0451fad188390390395ccfc84ab371def4c7']",
            "before_first_fix_commit":"{'93f729c6d1bf45666a1dc21d5cae3aefe1b18043'}",
            "last_fix_commit":"198c0451fad188390390395ccfc84ab371def4c7",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/17\/2022, 08:16:09",
            "message":"fixes #989 - fix XSS",
            "author":"Yair Even Or",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/tagify.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/yairEO\/tagify\/raw\/198c0451fad188390390395ccfc84ab371def4c7\/src%2Ftagify.js', 'patch': '@@ -101,7 +101,7 @@ Tagify.prototype = {\\n \\n         _s.disabled = input.hasAttribute(\\'disabled\\')\\n         _s.readonly = _s.readonly || input.hasAttribute(\\'readonly\\')\\n-        _s.placeholder = input.getAttribute(\\'placeholder\\') || _s.placeholder || \"\"\\n+        _s.placeholder = escapeHTML(input.getAttribute(\\'placeholder\\') || _s.placeholder || \"\")\\n         _s.required = input.hasAttribute(\\'required\\')\\n \\n         for( let name in _s.classNames )'}}",
            "message_norm":"fixes #989 - fix xss",
            "language":"ca",
            "entities":"[('fixes', 'ACTION', ''), ('#989', 'ISSUE', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/tagify.js'])",
            "num_files":1.0
        },
        {
            "index":427,
            "vuln_id":"GHSA-4h44-w6fm-548g",
            "cwe_id":"{'CWE-325', 'CWE-200', 'CWE-502', 'CWE-20'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/FriendsOfTYPO3\/mediace\/commit\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75'}",
            "dataset":"osv",
            "summary":"Potential Remote Code Execution in TYPO3 with mediace extension > ### Meta\n> * CVSS: `CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (9.1)\n> * CWE-325, CWE-20, CWE-200, CWE-502\n\n### Problem\nIt has been discovered that an internal verification mechanism can be used to generate arbitrary checksums. This allows to inject arbitrary data having a valid cryptographic message authentication code (HMAC-SHA1) and can lead to various attack chains as described below.\n\n* [TYPO3-CORE-SA-2020-007](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2020-007), [CVE-2020-15099](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-15099): Potential Privilege Escalation\n  + the database server used for a TYPO3 installation must be accessible for an attacker (either via internet or shared hosting network)\n  + `CVSS:3.1\/AV:N\/AC:H\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (7.5, high)\n* [TYPO3-CORE-SA-2016-013](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2016-013), [CVE-2016-5091](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2016-5091): Insecure Deserialization & Remote Code Execution\n  + an attacker must have access to at least one Extbase plugin or module action in a TYPO3 installation\n  + `CVSS:3.1\/AV:N\/AC:L\/PR:N\/UI:N\/S:U\/C:H\/I:H\/A:H\/E:F\/RL:O\/RC:C` (9.1, critical)\n\nThe overall severity of this vulnerability is critical (9.1) based on mentioned attack chains and the fact it does not require any privileges.\n\n### Solution\nIn case the extension is not used and required at all, it is suggested to uninstall and remove it from the system completely. Otherwise, an updated version 7.6.5 is available from the TYPO3 extension manager, Packagist and the TYPO3 extension repository:\n\n* https:\/\/extensions.typo3.org\/extension\/download\/mediace\/7.6.5\/zip\/\n* https:\/\/packagist.org\/packages\/friendsoftypo3\/mediace#7.6.5\n\nAs a precautionary measure it is advised to change `encryptionKey` and database credentials in `typo3conf\/LocalConfiguration.php`.\n\n### Credits\nThanks to TYPO3 security team member Oliver Hader who reported and fixed the issue.\n\n### References\n* [TYPO3-EXT-SA-2020-014](https:\/\/typo3.org\/security\/advisory\/typo3-ext-sa-2020-014)",
            "published_date":"2020-07-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/FriendsOfTYPO3\/mediace",
            "commit_href":"https:\/\/github.com\/FriendsOfTYPO3\/mediace\/commit\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
            "commit_sha":"fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
            "patch":"SINGLE",
            "chain_ord":"['fa29ffd3e8b275782a8600d2406e1b1e5e16ae75']",
            "before_first_fix_commit":"{'a06c3fdf310ea4d53e193f21a23e630a3cd9f608'}",
            "last_fix_commit":"fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/29\/2020, 13:39:55",
            "message":"[SECURITY] Restrict file validation hash generation\n\nSecurity-References: CVE-2020-15086",
            "author":"Oliver Hader",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 2, 'total': 9}",
            "files":"{'Resources\/PHP\/ValidateHashEID.php': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FriendsOfTYPO3\/mediace\/raw\/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75\/Resources%2FPHP%2FValidateHashEID.php', 'patch': \"@@ -14,10 +14,15 @@\\n \\n call_user_func(function() {\\n     $value = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('value');\\n-    $addition = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('addition');\\n     $scope = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('scope');\\n \\n-    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, $addition);\\n+    if (!is_string($value) || empty($value)) {\\n+        \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::setResponseCodeAndExit(\\n+            \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::HTTP_STATUS_400\\n+        );\\n+    }\\n+\\n+    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, 'flashvars');\\n \\n     if ($scope === 'flashvars') {\\n         header('Content-type: application\/x-www-form-urlencoded');\"}}",
            "message_norm":"[security] restrict file validation hash generation\n\nsecurity-references: cve-2020-15086",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('hash', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cve-2020-15086', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Resources\/PHP\/ValidateHashEID.php'])",
            "num_files":1.0
        },
        {
            "index":1020,
            "vuln_id":"GHSA-7f63-h6g3-7cwm",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\/commits\/133606ffaec2edd9918d9fba5771ed21da7876a5', 'https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073'}",
            "dataset":"osv",
            "summary":"Cross Site Scripting (XSS) in @finastra\/ssr-pages A cross site scripting (XSS) issue can occur when providing untrusted input to the `redirect.link` property as an argument to the `build(MessagePageOptions)` function.\n\n### References\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\/commits\/133606ffaec2edd9918d9fba5771ed21da7876a5\n- https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073",
            "published_date":"2022-03-01",
            "chain_len":2,
            "project":"https:\/\/github.com\/Finastra\/ssr-pages",
            "commit_href":"https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073",
            "commit_sha":"98abc59e28fec48246be0d59ac144675d6361073",
            "patch":"MULTI",
            "chain_ord":"['133606ffaec2edd9918d9fba5771ed21da7876a5', '98abc59e28fec48246be0d59ac144675d6361073']",
            "before_first_fix_commit":"{'ea07d3fca4b5b84aab889391c100f9bf71333ded'}",
            "last_fix_commit":"98abc59e28fec48246be0d59ac144675d6361073",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/27\/2022, 18:45:49",
            "message":"fix string encoder",
            "author":"David Bocl\u00e9",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/helpers\/string-encoder.helper.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Finastra\/ssr-pages\/raw\/98abc59e28fec48246be0d59ac144675d6361073\/src%2Fhelpers%2Fstring-encoder.helper.ts', 'patch': \"@@ -2,7 +2,7 @@ export function stringEncode(string: string) {\\n     let encodedString = '';\\r\\n     for (let i = 0; i < string.length; i++) {\\r\\n         let charCodePointHex = string.charCodeAt(i).toString(16);\\r\\n-        encodedString += `\\\\\\\\u${charCodePointHex}`;\\r\\n+        encodedString += `\\\\\\\\u{${charCodePointHex}}`;\\r\\n     }\\r\\n     return encodedString;\\r\\n }\\n\\\\ No newline at end of file\"}}",
            "message_norm":"fix string encoder",
            "language":"da",
            "entities":"[('fix', 'ACTION', ''), ('encoder', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/string-encoder.helper.ts'])",
            "num_files":1.0
        },
        {
            "index":1999,
            "vuln_id":"GHSA-h6ch-v84p-w6p9",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/kpdecker\/jsdiff\/commit\/2aec4298639bf30fb88a00b356bf404d3551b8c0'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service (ReDoS) A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
            "published_date":"2019-06-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/kpdecker\/jsdiff",
            "commit_href":"https:\/\/github.com\/kpdecker\/jsdiff\/commit\/2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "commit_sha":"2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "patch":"SINGLE",
            "chain_ord":"['2aec4298639bf30fb88a00b356bf404d3551b8c0']",
            "before_first_fix_commit":"{'a47aca9cb199d558e02ce406e9838356803e204f'}",
            "last_fix_commit":"2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/05\/2018, 04:00:42",
            "message":"Optimize parch header parser",
            "author":"Kevin Decker",
            "comments":"{'com_1': {'author': 'mariosanchezgarcia', 'datetime': '07\/30\/2019, 17:32:24', 'body': 'Mario'}}",
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'src\/patch\/parse.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kpdecker\/jsdiff\/raw\/2aec4298639bf30fb88a00b356bf404d3551b8c0\/src%2Fpatch%2Fparse.js', 'patch': '@@ -53,16 +53,16 @@ export function parsePatch(uniDiff, options = {}) {\\n   \/\/ Parses the --- and +++ headers, if none are found, no lines\\n   \/\/ are consumed.\\n   function parseFileHeader(index) {\\n-    const headerPattern = \/^(---|\\\\+\\\\+\\\\+)\\\\s+([\\\\S ]*)(?:\\\\t(.*?)\\\\s*)?$\/;\\n-    const fileHeader = headerPattern.exec(diffstr[i]);\\n+    const fileHeader = (\/^(---|\\\\+\\\\+\\\\+)\\\\s+(.*)$\/).exec(diffstr[i]);\\n     if (fileHeader) {\\n       let keyPrefix = fileHeader[1] === \\'---\\' ? \\'old\\' : \\'new\\';\\n-      let fileName = fileHeader[2].replace(\/\\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n+      const data = fileHeader[2].split(\\'\\\\t\\', 2);\\n+      let fileName = data[0].replace(\/\\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n       if (\/^\".*\"$\/.test(fileName)) {\\n         fileName = fileName.substr(1, fileName.length - 2);\\n       }\\n       index[keyPrefix + \\'FileName\\'] = fileName;\\n-      index[keyPrefix + \\'Header\\'] = fileHeader[3];\\n+      index[keyPrefix + \\'Header\\'] = (data[1] || \\'\\').trim();\\n \\n       i++;\\n     }'}}",
            "message_norm":"optimize parch header parser",
            "language":"en",
            "entities":"[('optimize', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/patch\/parse.js'])",
            "num_files":1.0
        },
        {
            "index":2457,
            "vuln_id":"GHSA-mqh2-9wrp-vx84",
            "cwe_id":"{'CWE-787'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `SparseSplit` ### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`:\n\n```python\nimport tensorflow as tf\n\nshape_dims = tf.constant(0, dtype=tf.int64)\nindices = tf.ones([1, 1], dtype=tf.int64)\nvalues = tf.ones([1], dtype=tf.int64)\nshape = tf.ones([1], dtype=tf.int64)\n\ntf.raw_ops.SparseSplit(\n    split_dim=shape_dims, indices=indices, values=values,\n    shape=shape, num_split=1)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/699bff5d961f0abfde8fa3f876e6d241681fbef8\/tensorflow\/core\/util\/sparse\/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset:\n\n```cc\nconst int dim = input_tensor.indices().matrix<int64>()(i, split_dim);\nint slice_index = GetSliceIndex(dim, split_size, residual);\nnum_values[slice_index]++;\n```\n\nThis results in overriding values on the heap.\n\n### Patches\nWe have patched the issue in GitHub commit [8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31",
            "commit_sha":"8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31",
            "patch":"SINGLE",
            "chain_ord":"['8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31']",
            "before_first_fix_commit":"{'699bff5d961f0abfde8fa3f876e6d241681fbef8'}",
            "last_fix_commit":"8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/30\/2021, 00:58:08",
            "message":"Fix heap-buffer-overflow issue with `tf.raw_ops.SparseSplit`.\n\nPiperOrigin-RevId: 371242872\nChange-Id: I482bb3d12602c7c3cc9446f97fb9f584bb98e9a4",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/util\/sparse\/sparse_tensor.h': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31\/tensorflow%2Fcore%2Futil%2Fsparse%2Fsparse_tensor.h', 'patch': '@@ -527,6 +527,10 @@ inline Status SparseTensor::Split(const SparseTensor& input_tensor,\\n   for (int i = 0; i < input_tensor.indices().dim_size(0); ++i) {\\n     const int dim = input_tensor.indices().matrix<int64>()(i, split_dim);\\n     int slice_index = GetSliceIndex(dim, split_size, residual);\\n+    if (slice_index >= num_values.size()) {\\n+      return errors::InvalidArgument(\"Slice index \", slice_index,\\n+                                     \" is larger than num_split.\");\\n+    }\\n     num_values[slice_index]++;\\n   }'}}",
            "message_norm":"fix heap-buffer-overflow issue with `tf.raw_ops.sparsesplit`.\n\npiperorigin-revid: 371242872\nchange-id: i482bb3d12602c7c3cc9446f97fb9f584bb98e9a4",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371242872', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/util\/sparse\/sparse_tensor.h'])",
            "num_files":1.0
        },
        {
            "index":430,
            "vuln_id":"GHSA-4h66-vghf-xg5x",
            "cwe_id":"{'CWE-77'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/49459d4a3ce68587d48ffa8dead86fc9ed58e965', 'https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec'}",
            "dataset":"osv",
            "summary":"get-npm-package-version Command Injection vulnerability The package get-npm-package-version before 1.0.7 is vulnerable to Command Injection via the `main` function in index.js.",
            "published_date":"2022-08-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/hoperyy\/get-npm-package-version",
            "commit_href":"https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
            "commit_sha":"40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
            "patch":"MULTI",
            "chain_ord":"['40b1cf31a0607ea66f9e30a0c3af1383b52b2dec', '49459d4a3ce68587d48ffa8dead86fc9ed58e965']",
            "before_first_fix_commit":"{'52797864df09049ea28d65d14620774257a965b0'}",
            "last_fix_commit":"49459d4a3ce68587d48ffa8dead86fc9ed58e965",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2021, 03:48:05",
            "message":"feat: add defence to Command Injection\n\nadd defence to Command Injection",
            "author":"DuLinRain",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'index.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hoperyy\/get-npm-package-version\/raw\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec\/index.js', 'patch': \"@@ -1,5 +1,8 @@\\n module.exports = function (packageName, { registry = '', timeout = null } = {}) {\\n     try {\\n+        if (\/[`$&{}[;|]\/g.test(packageName) || \/[`$&{}[;|]\/g.test(registry)) {\\n+            return null\\n+        }\\n         let version;\\n \\n         const config = {\"}}",
            "message_norm":"feat: add defence to command injection\n\nadd defence to command injection",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', ''), ('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2750,
            "vuln_id":"GHSA-qgmg-gppg-76g5",
            "cwe_id":"{'CWE-1333'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/validatorjs\/validator.js\/commit\/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1'}",
            "dataset":"osv",
            "summary":"Inefficient Regular Expression Complexity in validator.js validator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity",
            "published_date":"2021-11-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/validatorjs\/validator.js",
            "commit_href":"https:\/\/github.com\/validatorjs\/validator.js\/commit\/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
            "commit_sha":"496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
            "patch":"SINGLE",
            "chain_ord":"['496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1']",
            "before_first_fix_commit":"{'45901ec4f1276d192da6d0eb10a60b64722356c1'}",
            "last_fix_commit":"496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/01\/2021, 20:30:39",
            "message":"fix(rtrim): remove regex to prevent ReDOS attack (#1738)",
            "author":"Sarhan Aissi",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'src\/lib\/rtrim.js': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/validatorjs\/validator.js\/raw\/496fc8b2a7f5997acaaec33cc44d0b8dba5fb5e1\/src%2Flib%2Frtrim.js', 'patch': \"@@ -2,7 +2,16 @@ import assertString from '.\/util\/assertString';\\n \\n export default function rtrim(str, chars) {\\n   assertString(str);\\n-  \/\/ https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Regular_Expressions#Escaping\\n-  const pattern = chars ? new RegExp(`[${chars.replace(\/[.*+?^${}()|[\\\\]\\\\\\\\]\/g, '\\\\\\\\$&')}]+$`, 'g') : \/(\\\\s)+$\/g;\\n-  return str.replace(pattern, '');\\n+  if (chars) {\\n+    \/\/ https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Guide\/Regular_Expressions#Escaping\\n+    const pattern = new RegExp(`[${chars.replace(\/[.*+?^${}()|[\\\\]\\\\\\\\]\/g, '\\\\\\\\$&')}]+$`, 'g');\\n+    return str.replace(pattern, '');\\n+  }\\n+  \/\/ Use a faster and more safe than regex trim method https:\/\/blog.stevenlevithan.com\/archives\/faster-trim-javascript\\n+  let strIndex = str.length - 1;\\n+  while (\/\\\\s\/.test(str.charAt(strIndex))) {\\n+    strIndex -= 1;\\n+  }\\n+\\n+  return str.slice(0, strIndex + 1);\\n }\"}}",
            "message_norm":"fix(rtrim): remove regex to prevent redos attack (#1738)",
            "language":"en",
            "entities":"[('fix(rtrim', 'ACTION', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('redos', 'SECWORD', ''), ('attack', 'FLAW', ''), ('#1738', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib\/rtrim.js'])",
            "num_files":1.0
        },
        {
            "index":1508,
            "vuln_id":"GHSA-c7pp-g2v2-2766",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/KartikTalwar\/gmail.js\/commit\/a83436f499f9c01b04280af945a5a81137b6baf1'}",
            "dataset":"osv",
            "summary":"DOM-based XSS in gmail-js Affected versions of `gmail-js` are vulnerable to cross-site scripting in the `tools.parse_response`, `helper.get.visible_emails_post`, and `helper.get.email_data_post` functions, which pass user input directly into the Function constructor.\n\n\n\n## Recommendation\n\nUpdate to version 0.6.5 or later.",
            "published_date":"2020-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/KartikTalwar\/gmail.js",
            "commit_href":"https:\/\/github.com\/KartikTalwar\/gmail.js\/commit\/a83436f499f9c01b04280af945a5a81137b6baf1",
            "commit_sha":"a83436f499f9c01b04280af945a5a81137b6baf1",
            "patch":"SINGLE",
            "chain_ord":"['a83436f499f9c01b04280af945a5a81137b6baf1']",
            "before_first_fix_commit":"{'0e4732cb6c6c447d7f0487580ad7ada33184be92'}",
            "last_fix_commit":"a83436f499f9c01b04280af945a5a81137b6baf1",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/29\/2016, 08:36:02",
            "message":"Replace new Function() with JSON.parse()",
            "author":"Jostein Kj\u00f8nigsen",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 15, 'total': 23}",
            "files":"{'src\/gmail.js': {'additions': 8, 'deletions': 15, 'changes': 23, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/KartikTalwar\/gmail.js\/raw\/a83436f499f9c01b04280af945a5a81137b6baf1\/src%2Fgmail.js', 'patch': '@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {\\n                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(\"[\");\\n                 data = response.substring(response.indexOf(\"[\"), endIndex);\\n \\n-                var get_data = new Function(\"\\\\\"use strict\\\\\"; return \" + data);\\n-                realData = get_data();\\n-\\n-                parsedResponse.push(realData);\\n+                var json = JSON.parse(data);\\n+                parsedResponse.push(json);\\n \\n                 \/\/ prepare response for next loop\\n                 response = response.substring(response.indexOf(\"[\"), response.length);\\n@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {\\n             return emails;\\n         }\\n \\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        api.tracker.view_data = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n+        api.tracker.view_data = json;\\n \\n         for(var i in api.tracker.view_data) {\\n             if (typeof(api.tracker.view_data[i]) === \"function\") {\\n@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {\\n         if (!get_data) {\\n             return {};\\n         }\\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        var cdata = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n \\n-        api.tracker.email_data = cdata[0];\\n+        api.tracker.email_data = json[0];\\n         return api.tools.parse_email_data(api.tracker.email_data);\\n     };'}}",
            "message_norm":"replace new function() with json.parse()",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/gmail.js'])",
            "num_files":1.0
        },
        {
            "index":287,
            "vuln_id":"GHSA-3pcq-34w5-p4g2",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/nicolas-van\/modern-async\/commit\/0010d28de1b15d51db3976080e26357fa7144436'}",
            "dataset":"osv",
            "summary":"forEachSeries and forEachLimit do not limit the number of requests ### Impact\n\nThis is a bug affecting two of the functions in this library: forEachSeries and forEachLimit. They should limit the concurrency of some actions but, in practice, they don't. Any code calling these functions will be written thinking they would limit the concurrency but they won't. This could lead to potential security issues in other projects.\n\n### Patches\n\nThe problem has been patched in 1.0.4.\n\n### Workarounds\n\nThere is no workaround aside from upgrading to 1.0.4.",
            "published_date":"2021-10-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/nicolas-van\/modern-async",
            "commit_href":"https:\/\/github.com\/nicolas-van\/modern-async\/commit\/0010d28de1b15d51db3976080e26357fa7144436",
            "commit_sha":"0010d28de1b15d51db3976080e26357fa7144436",
            "patch":"SINGLE",
            "chain_ord":"['0010d28de1b15d51db3976080e26357fa7144436']",
            "before_first_fix_commit":"{'7aa934294e59bc7359651a852e73bd5785b9b99b'}",
            "last_fix_commit":"0010d28de1b15d51db3976080e26357fa7144436",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/19\/2021, 21:22:02",
            "message":"Fix #5",
            "author":"Nicolas Vanhoren",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/forEachLimit.mjs': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nicolas-van\/modern-async\/raw\/0010d28de1b15d51db3976080e26357fa7144436\/src%2FforEachLimit.mjs', 'patch': \"@@ -35,7 +35,7 @@ import mapLimit from '.\/mapLimit.mjs'\\n  *\/\\n async function forEachLimit (iterable, iteratee, concurrency) {\\n   await mapLimit(iterable, async (v, i, t) => {\\n-    iteratee(v, i, t)\\n+    await iteratee(v, i, t)\\n   }, concurrency)\\n }\"}}",
            "message_norm":"fix #5",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('#5', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/forEachLimit.mjs'])",
            "num_files":1.0
        },
        {
            "index":1628,
            "vuln_id":"GHSA-cwpm-f78v-7m5c",
            "cwe_id":"{'CWE-400', 'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e'}",
            "dataset":"osv",
            "summary":"Denial of service in `tf.ragged.constant` due to lack of validation ### Impact\nThe implementation of [`tf.ragged.constant`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:\n\n```python\nimport tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55199).",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e",
            "commit_sha":"bd4d5583ff9c8df26d47a23e508208844297310e",
            "patch":"SINGLE",
            "chain_ord":"['bd4d5583ff9c8df26d47a23e508208844297310e']",
            "before_first_fix_commit":"{'e74ef072ecd54ca54f3940ce9b98af796ded2a1a'}",
            "last_fix_commit":"bd4d5583ff9c8df26d47a23e508208844297310e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2022, 16:11:43",
            "message":"Prevent denial of service in `tf.ragged.constant`\n\nFixes #55199\n\nPiperOrigin-RevId: 442029525",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/bd4d5583ff9c8df26d47a23e508208844297310e\/tensorflow%2Fpython%2Fops%2Fragged%2Fragged_factory_ops.py', 'patch': '@@ -188,6 +188,9 @@ def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,\\n     if max_depth > scalar_depth:\\n       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"\\n                        \"than scalar value nesting\" % pylist)\\n+    if ragged_rank is not None and max_depth < ragged_rank:\\n+      raise ValueError(f\"Invalid pylist={pylist}, max depth smaller than \"\\n+                       f\"ragged_rank={ragged_rank}\")\\n \\n   # If both inner_shape and ragged_rank were specified, then check that\\n   # they are compatible with pylist.'}}",
            "message_norm":"prevent denial of service in `tf.ragged.constant`\n\nfixes #55199\n\npiperorigin-revid: 442029525",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#55199', 'ISSUE', ''), ('442029525', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py'])",
            "num_files":1.0
        },
        {
            "index":1235,
            "vuln_id":"GHSA-8p9r-f949-699g",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/browserless\/chrome\/commit\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6'}",
            "dataset":"osv",
            "summary":"Path Traversal in browserless-chrome This affects all versions of browserless-chrome before 1.43.0. User input flowing from the workspace endpoint gets used to create a file path filePath and this is fetched and then sent back to a user. This can be escaped to fetch arbitrary files from a server.",
            "published_date":"2021-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/browserless\/chrome",
            "commit_href":"https:\/\/github.com\/browserless\/chrome\/commit\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "commit_sha":"848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "patch":"SINGLE",
            "chain_ord":"['848b87e5bea4f8473eea85261a5ff922d6ebd2b6']",
            "before_first_fix_commit":"{'6a195ab11d393cefcecf9940b38cf6921e3d38d0'}",
            "last_fix_commit":"848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/26\/2020, 17:28:01",
            "message":"Ensure workspace files are _in_ the workspace DIR",
            "author":"Joel Griffith",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'src\/routes.ts': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/browserless\/chrome\/raw\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6\/src%2Froutes.ts', 'patch': '@@ -157,9 +157,12 @@ export const getRoutes = ({\\n       }\\n \\n       const filePath = path.join(workspaceDir, file);\\n-\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }\\n@@ -185,6 +188,10 @@ export const getRoutes = ({\\n       const filePath = path.join(workspaceDir, file);\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }'}}",
            "message_norm":"ensure workspace files are _in_ the workspace dir",
            "language":"en",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/routes.ts'])",
            "num_files":1.0
        },
        {
            "index":262,
            "vuln_id":"GHSA-3hxh-8cp2-g4hg",
            "cwe_id":"{'CWE-416'}",
            "score":6.6,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ee119d4a498979525046fba1c3dd3f13a039fbb1'}",
            "dataset":"osv",
            "summary":"Use after free and segfault in shape inference functions ### Impact\nWhen running shape functions, some functions (such as `MutableHashTableShape`) produce extra output information in the form of a `ShapeAndType` struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but we were not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types.\n\n### Patches\nWe have patched the issue in GitHub commit [ee119d4a498979525046fba1c3dd3f13a039fbb1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ee119d4a498979525046fba1c3dd3f13a039fbb1).                                                                                                          \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ee119d4a498979525046fba1c3dd3f13a039fbb1",
            "commit_sha":"ee119d4a498979525046fba1c3dd3f13a039fbb1",
            "patch":"SINGLE",
            "chain_ord":"['ee119d4a498979525046fba1c3dd3f13a039fbb1']",
            "before_first_fix_commit":"{'f118ff1538ac7aa8a628bba03fe66dc6811cc7fc'}",
            "last_fix_commit":"ee119d4a498979525046fba1c3dd3f13a039fbb1",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/14\/2021, 19:43:17",
            "message":"Fix segmentation fault in shape inference logic.\n\nWhen running shape functions, some functions (such as `MutableHashTableShape`)\nproduce extra output information in the form of a `ShapeAndType` struct.  The\nshapes embedded in this struct are owned by an inference context that is\ncleaned up almost immediately; if the upstream code attempts to access this\nshape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them\n(and thus putting the newly created shape under ownership of an inference\ncontext that will not die), but we were not doing the same for shapes and\ntypes.  This commit fixes that by doing similar logic on output shapes and\ntypes.\n\nPiperOrigin-RevId: 384761124\nChange-Id: I07c0c42d29dfbb55bfa13ec1f09ef825fb0a1a1d",
            "author":"Daniel Ellis",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 2, 'total': 21}",
            "files":"{'tensorflow\/core\/common_runtime\/shape_refiner.cc': {'additions': 19, 'deletions': 2, 'changes': 21, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ee119d4a498979525046fba1c3dd3f13a039fbb1\/tensorflow%2Fcore%2Fcommon_runtime%2Fshape_refiner.cc', 'patch': '@@ -120,9 +120,26 @@ Status ShapeRefiner::InferShapesForFunctionSubNode(\\n     TF_RETURN_IF_ERROR(outer_context->MakeShapeFromShapeProto(proto, &handle));\\n     outer_context->set_output(index, handle);\\n \\n-    auto* resource = node_context->input_handle_shapes_and_types(0);\\n+    const std::vector<ShapeAndType>* resource =\\n+        node_context->input_handle_shapes_and_types(0);\\n     if (resource) {\\n-      outer_context->set_output_handle_shapes_and_types(index, *resource);\\n+      \/\/ `ShapesAndType`s contain `ShapeHandle`s.  These `ShapeHandle`s point\\n+      \/\/ to `Shape`s that are owned by a different inference context too.  We\\n+      \/\/ need to copy them to the outer context to prevent them from being\\n+      \/\/ destroyed before they are used.\\n+      std::vector<ShapeAndType> copied_shapes_and_types;\\n+      for (auto& shape_and_type : *resource) {\\n+        ShapeHandle handle;\\n+        TensorShapeProto proto;\\n+        node_context->ShapeHandleToProto(shape_and_type.shape, &proto);\\n+        TF_RETURN_IF_ERROR(\\n+            outer_context->MakeShapeFromShapeProto(proto, &handle));\\n+        copied_shapes_and_types.push_back(\\n+            ShapeAndType(handle, shape_and_type.dtype, shape_and_type.type));\\n+      }\\n+\\n+      outer_context->set_output_handle_shapes_and_types(\\n+          index, copied_shapes_and_types);\\n     }\\n   }'}}",
            "message_norm":"fix segmentation fault in shape inference logic.\n\nwhen running shape functions, some functions (such as `mutablehashtableshape`)\nproduce extra output information in the form of a `shapeandtype` struct.  the\nshapes embedded in this struct are owned by an inference context that is\ncleaned up almost immediately; if the upstream code attempts to access this\nshape information, it can trigger a segfault.\n\n`shaperefiner` is mitigating this for normal output shapes by cloning them\n(and thus putting the newly created shape under ownership of an inference\ncontext that will not die), but we were not doing the same for shapes and\ntypes.  this commit fixes that by doing similar logic on output shapes and\ntypes.\n\npiperorigin-revid: 384761124\nchange-id: i07c0c42d29dfbb55bfa13ec1f09ef825fb0a1a1d",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segmentation fault', 'SECWORD', ''), ('segfault', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('fixes', 'ACTION', ''), ('384761124', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/shape_refiner.cc'])",
            "num_files":1.0
        },
        {
            "index":3479,
            "vuln_id":"GHSA-xqj7-j8j5-f2xr",
            "cwe_id":"{'CWE-327'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839', 'https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad'}",
            "dataset":"osv",
            "summary":"Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",
            "published_date":"2018-10-16",
            "chain_len":2,
            "project":"https:\/\/github.com\/bcgit\/bc-java",
            "commit_href":"https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839",
            "commit_sha":"73780ac522b7795fc165630aba8d5f5729acc839",
            "patch":"MULTI",
            "chain_ord":"['73780ac522b7795fc165630aba8d5f5729acc839', '22467b6e8fe19717ecdf201c0cf91bacf04a55ad']",
            "before_first_fix_commit":"{'73780ac522b7795fc165630aba8d5f5729acc839'}",
            "last_fix_commit":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2018, 08:40:01",
            "message":"BJA-694 cleaned up primality test",
            "author":"David Hook",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bcgit\/bc-java\/raw\/73780ac522b7795fc165630aba8d5f5729acc839\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fbouncycastle%2Fcrypto%2Fgenerators%2FRSAKeyPairGenerator.java', 'patch': '@@ -20,12 +20,10 @@\\n     private static final BigInteger ONE = BigInteger.valueOf(1);\\n \\n     private RSAKeyGenerationParameters param;\\n-    private int iterations;\\n \\n     public void init(KeyGenerationParameters param)\\n     {\\n         this.param = (RSAKeyGenerationParameters)param;\\n-        this.iterations = getNumberOfIterations(this.param.getStrength(), this.param.getCertainty());\\n     }\\n \\n     public AsymmetricCipherKeyPair generateKeyPair()\\n@@ -159,6 +157,8 @@ public AsymmetricCipherKeyPair generateKeyPair()\\n      *\/\\n     protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger sqrdBound)\\n     {\\n+        int iterations = getNumberOfIterations(bitlength, param.getCertainty());\\n+\\n         for (int i = 0; i != 5 * bitlength; i++)\\n         {\\n             BigInteger p = new BigInteger(bitlength, 1, param.getRandom());\\n@@ -173,7 +173,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n                 continue;\\n             }\\n \\n-            if (!isProbablePrime(p))\\n+            if (!isProbablePrime(p, iterations))\\n             {\\n                 continue;\\n             }\\n@@ -189,7 +189,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n         throw new IllegalStateException(\"unable to generate prime number for RSA key\");\\n     }\\n \\n-    protected boolean isProbablePrime(BigInteger x)\\n+    protected boolean isProbablePrime(BigInteger x, int iterations)\\n     {\\n         \/*\\n          * Primes class for FIPS 186-4 C.3 primality checking'}}",
            "message_norm":"bja-694 cleaned up primality test",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java'])",
            "num_files":1.0
        },
        {
            "index":243,
            "vuln_id":"GHSA-3f8r-4qwm-r7jf",
            "cwe_id":"{'CWE-287'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/apache\/trafficcontrol\/commit\/f780aff77a52d52a37b4d1cc3e8e801c0b557356'}",
            "dataset":"osv",
            "summary":"Improper Authentication in Apache Traffic Control Improper authentication is possible in Apache Traffic Control versions 3.0.0 and 3.0.1 if LDAP is enabled for login in the Traffic Ops API component. Given a username for a user that can be authenticated via LDAP, it is possible to improperly authenticate as that user without that user's correct password.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/trafficcontrol",
            "commit_href":"https:\/\/github.com\/apache\/trafficcontrol\/commit\/f780aff77a52d52a37b4d1cc3e8e801c0b557356",
            "commit_sha":"f780aff77a52d52a37b4d1cc3e8e801c0b557356",
            "patch":"SINGLE",
            "chain_ord":"['f780aff77a52d52a37b4d1cc3e8e801c0b557356']",
            "before_first_fix_commit":"{'85596a08bb12835370895ba20455e5ce998278d1'}",
            "last_fix_commit":"f780aff77a52d52a37b4d1cc3e8e801c0b557356",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/30\/2019, 20:40:48",
            "message":"Improve ldap error handling",
            "author":"Rawlin Peters",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'traffic_ops\/traffic_ops_golang\/login\/login.go': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/trafficcontrol\/raw\/f780aff77a52d52a37b4d1cc3e8e801c0b557356\/traffic_ops%2Ftraffic_ops_golang%2Flogin%2Flogin.go', 'patch': '@@ -51,6 +51,10 @@ func LoginHandler(db *sqlx.DB, cfg config.Config) http.HandlerFunc {\\n \\t\\t\\thandleErrs(http.StatusBadRequest, err)\\n \\t\\t\\treturn\\n \\t\\t}\\n+\\t\\tif form.Username == \"\" || form.Password == \"\" {\\n+\\t\\t\\tapi.HandleErr(w, r, nil, http.StatusBadRequest, errors.New(\"username and password are required\"), nil)\\n+\\t\\t\\treturn\\n+\\t\\t}\\n \\t\\tresp := struct {\\n \\t\\t\\ttc.Alerts\\n \\t\\t}{}'}}",
            "message_norm":"improve ldap error handling",
            "language":"da",
            "entities":"[('improve', 'ACTION', ''), ('ldap', 'SECWORD', ''), ('error handling', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['traffic_ops\/traffic_ops_golang\/login\/login.go'])",
            "num_files":1.0
        },
        {
            "index":2574,
            "vuln_id":"GHSA-pgcq-h79j-2f69",
            "cwe_id":"{'CWE-354'}",
            "score":7.0,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a'}",
            "dataset":"osv",
            "summary":"Incomplete validation of shapes in multiple TF ops ### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving\/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-11-10",
            "chain_len":6,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "commit_sha":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "patch":"MULTI",
            "chain_ord":"['579261dcd446385831fe4f7457d802a59685121d', '4d74d8a00b07441cba090a02e0dd9ed385145bf4', '68422b215e618df5ad375bcdc6d2052e9fd3080a', 'da4aad5946be30e5f049920fa076e1f7ef021261', '4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'e7f497570abb6b4ae5af4970620cd880e4c0c904']",
            "before_first_fix_commit":"{'e0214528739cad3bd02fbf2696a793dc342ffb94'}",
            "last_fix_commit":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "chain_ord_pos":6.0,
            "commit_datetime":"10\/20\/2021, 22:41:05",
            "message":"Fix segfault on OOM in Conv2D.\n\nPiperOrigin-RevId: 404655317\nChange-Id: I33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
            "author":"Reed Wanderman-Milne",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/conv_ops.cc': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e7f497570abb6b4ae5af4970620cd880e4c0c904\/tensorflow%2Fcore%2Fkernels%2Fconv_ops.cc', 'patch': '@@ -183,20 +183,29 @@ struct LaunchGrouped {\\n     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };\\n \\n     \/\/ Shuffle input into temporary tensor.\\n-    Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));\\n+    Tensor input_shuffled;\\n+    OP_REQUIRES_OK(\\n+        ctx, ctx->allocate_temp(input.dtype(), TensorShape(post_shuffle(input)),\\n+                                &input_shuffled));\\n     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =\\n         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);\\n \\n     \/\/ Shuffle filter into temporary tensor.\\n-    Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));\\n+    Tensor filter_shuffled;\\n+    OP_REQUIRES_OK(ctx, ctx->allocate_temp(filter.dtype(),\\n+                                           TensorShape(post_shuffle(filter)),\\n+                                           &filter_shuffled));\\n     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =\\n         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);\\n \\n     \/\/ Wait for the completion of input\/filter shuffles.\\n     shuffles_completed.Wait();\\n \\n     \/\/ Write group convolution results into temporary output tensor.\\n-    Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));\\n+    Tensor output_shuffled;\\n+    OP_REQUIRES_OK(ctx, ctx->allocate_temp(output->dtype(),\\n+                                           TensorShape(post_shuffle(*output)),\\n+                                           &output_shuffled));\\n \\n     for (int64_t i = 0; i < num_groups; ++i) {\\n       \/\/ TODO(ezhulenev): Run this loop using `parallelFor` (regular parallelFor'}}",
            "message_norm":"fix segfault on oom in conv2d.\n\npiperorigin-revid: 404655317\nchange-id: i33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('404655317', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1223,
            "vuln_id":"GHSA-8jj7-5vxc-pg2q",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0aaaae6eca5a7175a193696383f582f53adab23f'}",
            "dataset":"osv",
            "summary":"Integer overflow in TensorFlow ### Impact\nUnder certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during [cost estimation for crop and resize](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc#L2621-L2689). Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [0aaaae6eca5a7175a193696383f582f53adab23f](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0aaaae6eca5a7175a193696383f582f53adab23f).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0aaaae6eca5a7175a193696383f582f53adab23f",
            "commit_sha":"0aaaae6eca5a7175a193696383f582f53adab23f",
            "patch":"SINGLE",
            "chain_ord":"['0aaaae6eca5a7175a193696383f582f53adab23f']",
            "before_first_fix_commit":"{'6b5adc0877de832b2a7c189532dbbbc64622eeb6'}",
            "last_fix_commit":"0aaaae6eca5a7175a193696383f582f53adab23f",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2021, 16:19:05",
            "message":"Prevent overflow in grappler cost estimation of crop&resize op.\n\nThe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\nPiperOrigin-RevId: 409670234\nChange-Id: I7994734a98b037c5642e051240329d16f959aae4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 22, 'deletions': 7, 'total': 29}",
            "files":"{'tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc': {'additions': 22, 'deletions': 7, 'changes': 29, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0aaaae6eca5a7175a193696383f582f53adab23f\/tensorflow%2Fcore%2Fgrappler%2Fcosts%2Fop_level_cost_estimator.cc', 'patch': '@@ -2681,27 +2681,42 @@ Status OpLevelCostEstimator::PredictCropAndResize(const OpContext& op_context,\\n   \/\/ calculation differs from rough estimate in implementation, as it separates\\n   \/\/ out cost per box from cost per pixel and cost per element.\\n \\n+  \/\/ Since crop arguments are user controlled, check for overflow.\\n+  int64_t crop_area = MultiplyWithoutOverflow(crop_height, crop_width);\\n+  if (crop_area < 0)\\n+    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",\\n+                                   crop_height, \" with \", crop_width,\\n+                                   \" would overflow\");\\n+  int64_t crop_volume = MultiplyWithoutOverflow(crop_area, num_boxes);\\n+  if (crop_volume < 0)\\n+    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",\\n+                                   crop_area, \" with \", num_boxes,\\n+                                   \" would overflow\");\\n+  int64_t crop_depth = MultiplyWithoutOverflow(crop_height, num_boxes);\\n+  if (crop_depth < 0)\\n+    return errors::InvalidArgument(\"Cannot estimate cost, multiplying \",\\n+                                   crop_height, \" with \", num_boxes,\\n+                                   \" would overflow\");\\n+\\n   \/\/ Ops for variables height_scale and width_scale.\\n   int64_t ops = (sub_cost * 6 + mul_cost * 2 + div_cost * 2) * num_boxes;\\n   \/\/ Ops for variable in_y.\\n-  ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * num_boxes;\\n+  ops += (mul_cost * 2 + sub_cost + add_cost) * crop_depth;\\n   \/\/ Ops for variable in_x (same computation across both branches).\\n-  ops += (mul_cost * 2 + sub_cost + add_cost) * crop_height * crop_width *\\n-         num_boxes;\\n+  ops += (mul_cost * 2 + sub_cost + add_cost) * crop_volume;\\n   \/\/ Specify op_cost based on the method.\\n   if (use_bilinear_interp) {\\n     \/\/ Ops for variables top_y_index, bottom_y_index, y_lerp.\\n-    ops += (floor_cost + ceil_cost + sub_cost) * crop_height * num_boxes;\\n+    ops += (floor_cost + ceil_cost + sub_cost) * crop_depth;\\n     \/\/ Ops for variables left_x, right_x, x_lerp;\\n-    ops += (floor_cost + ceil_cost + sub_cost) * crop_height * crop_width *\\n-           num_boxes;\\n+    ops += (floor_cost + ceil_cost + sub_cost) * crop_volume;\\n     \/\/ Ops for innermost loop across depth.\\n     ops +=\\n         (cast_to_float_cost * 4 + add_cost * 3 + sub_cost * 3 + mul_cost * 3) *\\n         output_elements;\\n   } else \/* method == \"nearest\" *\/ {\\n     \/\/ Ops for variables closest_x_index and closest_y_index.\\n-    ops += round_cost * 2 * crop_height * crop_width * num_boxes;\\n+    ops += round_cost * 2 * crop_volume;\\n     \/\/ Ops for innermost loop across depth.\\n     ops += cast_to_float_cost * output_elements;\\n   }'}}",
            "message_norm":"prevent overflow in grappler cost estimation of crop&resize op.\n\nthe crop parameters are user controlled, so we should make sure a user can not trigger an overflow maliciously.\n\npiperorigin-revid: 409670234\nchange-id: i7994734a98b037c5642e051240329d16f959aae4",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('maliciously', 'SECWORD', ''), ('409670234', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/costs\/op_level_cost_estimator.cc'])",
            "num_files":1.0
        },
        {
            "index":3029,
            "vuln_id":"GHSA-v222-6mr4-qj29",
            "cwe_id":"{'CWE-78'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee', 'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/c7ea001a597c7033575342c51483dab7b87ae155'}",
            "dataset":"osv",
            "summary":"Command Injection vulnerability in asciidoctor-include-ext ### Impact\n\nApplications using [Asciidoctor (Ruby)](https:\/\/github.com\/asciidoctor\/asciidoctor) with [asciidoctor-include-ext](https:\/\/github.com\/jirutka\/asciidoctor-include-ext) (prior to version 0.4.0), which render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. ~~This attack is possible even when `allow-uri-read` is disabled!~~ (EDIT: it\u2019s not)\n\n\n### Patches\n\nThe vulnerability has been fixed in commit c7ea001 (and further improved in cbaccf3), which is included in version [0.4.0](https:\/\/rubygems.org\/gems\/asciidoctor-include-ext\/versions\/0.4.0).\n\n### Workarounds\n\n```rb\nrequire 'asciidoctor\/include_ext'\n\nclass Asciidoctor::IncludeExt::IncludeProcessor\n  # Overrides superclass private method to mitigate Command Injection\n  # vulnerability in asciidoctor-include-ext <0.4.0.\n  def target_uri?(target)\n    target.downcase.start_with?('http:\/\/', 'https:\/\/') \\\n      && URI.parse(target).is_a?(URI::HTTP)\n  rescue URI::InvalidURIError\n    false\n  end\nend\n```\n\n### References\n\n* https:\/\/sakurity.com\/blog\/2015\/02\/28\/openuri.html\n\n### Credits\n\nThis vulnerability was discovered by Joern Schneeweisz from the GitLab Security Research Team.\n\n\n### For more information\n\nSee commit message c7ea001.\n\nIf you have any questions or comments about this advisory open an issue in [jirutka\/asciidoctor-include-ext](https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/issues\/).",
            "published_date":"2022-03-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/jirutka\/asciidoctor-include-ext",
            "commit_href":"https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "commit_sha":"cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "patch":"MULTI",
            "chain_ord":"['c7ea001a597c7033575342c51483dab7b87ae155', 'cbaccf3de533cbca224bf61d0b74e4b84d41d8ee']",
            "before_first_fix_commit":"{'c7ea001a597c7033575342c51483dab7b87ae155'}",
            "last_fix_commit":"cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/29\/2022, 22:50:30",
            "message":"Make #read_lines code more robust, avoid using IO.open directly",
            "author":"Jakub Jirutka",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 4, 'total': 14}",
            "files":"{'lib\/asciidoctor\/include_ext\/include_processor.rb': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/raw\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee\/lib%2Fasciidoctor%2Finclude_ext%2Finclude_processor.rb', 'patch': \"@@ -113,10 +113,16 @@ def resolve_target_path(target, reader)\\n     #   the line number. If `nil` is given, all lines are passed.\\n     # @return [Array<String>] an array of read lines.\\n     def read_lines(path, selector)\\n-      if selector\\n-        IO.foreach(path).select.with_index(1, &selector)\\n-      else\\n-        URI.open(path, &:read)\\n+      # IO.open is deliberately not used directly to avoid potential security risks.\\n+      # TODO: Get rid of 'open-uri' (URI.open).\\n+      io = target_http?(path) ? URI : File\\n+\\n+      io.open(path) do |f|\\n+        if selector\\n+          f.each.select.with_index(1, &selector)\\n+        else\\n+          f.read\\n+        end\\n       end\\n     end\"}}",
            "message_norm":"make #read_lines code more robust, avoid using io.open directly",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/asciidoctor\/include_ext\/include_processor.rb'])",
            "num_files":1.0
        },
        {
            "index":3281,
            "vuln_id":"GHSA-whr9-vfh2-7hm6",
            "cwe_id":"{'CWE-787'}",
            "score":4.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/79865b542f9ffdc9caeb255631f7c56f1d4b6517'}",
            "dataset":"osv",
            "summary":"Memory corruption in `DrawBoundingBoxesV2` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([10, 96, 0, 1], 0.)\nboxes = tf.fill([10, 53, 0], 0.)\ncolors = tf.fill([0, 1], 0.)\n\ntf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/31bd5026304677faa8a0b77602c6154171b9aec1\/tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc#L116-L130) assumes that the last element of `boxes` input is 4, as required by [the op](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/raw_ops\/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption:\n\n```cc \nconst auto tboxes = boxes.tensor<T, 3>();\nfor (int64 bb = 0; bb < num_boxes; ++bb) {\n  ...\n  const int64 min_box_row = static_cast<float>(tboxes(b, bb, 0)) * (height - 1);\n  const int64 max_box_row = static_cast<float>(tboxes(b, bb, 2)) * (height - 1);\n  const int64 min_box_col = static_cast<float>(tboxes(b, bb, 1)) * (width - 1);\n  const int64 max_box_col = static_cast<float>(tboxes(b, bb, 3)) * (width - 1);\n  ...\n}\n``` \n\nIf the last dimension in `boxes` is less than 4, accesses similar to `tboxes(b, bb, 3)` will access data outside of bounds. Further during code execution there are also writes to these indices.\n\n### Patches\nWe have patched the issue in GitHub commit [79865b542f9ffdc9caeb255631f7c56f1d4b6517](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/79865b542f9ffdc9caeb255631f7c56f1d4b6517).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/79865b542f9ffdc9caeb255631f7c56f1d4b6517",
            "commit_sha":"79865b542f9ffdc9caeb255631f7c56f1d4b6517",
            "patch":"SINGLE",
            "chain_ord":"['79865b542f9ffdc9caeb255631f7c56f1d4b6517']",
            "before_first_fix_commit":"{'31bd5026304677faa8a0b77602c6154171b9aec1'}",
            "last_fix_commit":"79865b542f9ffdc9caeb255631f7c56f1d4b6517",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 01:05:46",
            "message":"Fix memory corruption issue with `tf.raw_ops.DrawBoundingBoxesV2`.\n\nPiperOrigin-RevId: 372033910\nChange-Id: I8a9f4efc1c8ddaacbc26ec1fbe4bfdd6791c226d",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/79865b542f9ffdc9caeb255631f7c56f1d4b6517\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fdraw_bounding_box_op.cc', 'patch': '@@ -73,6 +73,12 @@ class DrawBoundingBoxesOp : public OpKernel {\\n         errors::InvalidArgument(\"Channel depth should be either 1 (GRY), \"\\n                                 \"3 (RGB), or 4 (RGBA)\"));\\n \\n+    OP_REQUIRES(\\n+        context, boxes.dim_size(2) == 4,\\n+        errors::InvalidArgument(\\n+            \"The size of the third dimension of the box must be 4. Received: \",\\n+            boxes.dim_size(2)));\\n+\\n     const int64 batch_size = images.dim_size(0);\\n     const int64 height = images.dim_size(1);\\n     const int64 width = images.dim_size(2);'}}",
            "message_norm":"fix memory corruption issue with `tf.raw_ops.drawboundingboxesv2`.\n\npiperorigin-revid: 372033910\nchange-id: i8a9f4efc1c8ddaacbc26ec1fbe4bfdd6791c226d",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('memory corruption', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372033910', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2461,
            "vuln_id":"GHSA-mr7p-25v2-35wr",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/nltk\/nltk\/commit\/f59d7ed8df2e0e957f7f247fe218032abdbe9a10'}",
            "dataset":"osv",
            "summary":"Path Traversal in nltk NLTK Downloader before 3.4.5 is vulnerable to a directory traversal, allowing attackers to write arbitrary files via a ..\/ (dot dot slash) in an NLTK package (ZIP archive) that is mishandled during extraction.",
            "published_date":"2019-08-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/nltk\/nltk",
            "commit_href":"https:\/\/github.com\/nltk\/nltk\/commit\/f59d7ed8df2e0e957f7f247fe218032abdbe9a10",
            "commit_sha":"f59d7ed8df2e0e957f7f247fe218032abdbe9a10",
            "patch":"SINGLE",
            "chain_ord":"['f59d7ed8df2e0e957f7f247fe218032abdbe9a10']",
            "before_first_fix_commit":"{'2554ff48feed878ba7e830ada9825196f3eaa86a'}",
            "last_fix_commit":"f59d7ed8df2e0e957f7f247fe218032abdbe9a10",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/20\/2019, 10:35:00",
            "message":"CVE-2019-14751:\nFixed security bug in downloader\n(https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2019-14751)",
            "author":"Steven Bird",
            "comments":"{'com_1': {'author': 'greysteil', 'datetime': '08\/26\/2019, 11:01:35', 'body': \"Thanks for this @stevenbird, and for all your work on `nltk`.\\r\\n\\r\\nHave you got 5 minutes to talk me through the process you went through fixing this, and any way GitHub can help? I'm on GitHub's security team and am working to make it easier for maintainers to alert users of security vulnerabilities.\\r\\n\\r\\nCurrently we have the security alert emails (which we're working to improve) and Security Advisories (the security tab on this repo). In future we're planning to make it easy for maintainers to apply for CVEs through GitHub (via creating Security Advisories).\\r\\n\\r\\nWas there any part of the flow of finding, fixing, and alerting users of this vulnerability that GitHub could have helped with? Or anything we're doing now that you'd like us to do differently?\\r\\n\\r\\nAny feedback very much appreciated. I'm on greysteil@github.com if you'd rather email it privately.\\r\\n\\r\\nThanks for all your do, and please don't hesitate to reach out if there's ever any way GitHub can help.\"}}",
            "stats":"{'additions': 1, 'deletions': 35, 'total': 36}",
            "files":"{'nltk\/downloader.py': {'additions': 1, 'deletions': 35, 'changes': 36, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nltk\/nltk\/raw\/f59d7ed8df2e0e957f7f247fe218032abdbe9a10\/nltk%2Fdownloader.py', 'patch': \"@@ -2260,42 +2260,8 @@ def _unzip_iter(filename, root, verbose=True):\\n         yield ErrorMessage(filename, e)\\n         return\\n \\n-    # Get lists of directories & files\\n-    namelist = zf.namelist()\\n-    dirlist = set()\\n-    for x in namelist:\\n-        if x.endswith('\/'):\\n-            dirlist.add(x)\\n-        else:\\n-            dirlist.add(x.rsplit('\/', 1)[0] + '\/')\\n-    filelist = [x for x in namelist if not x.endswith('\/')]\\n-\\n-    # Create the target directory if it doesn't exist\\n-    if not os.path.exists(root):\\n-        os.mkdir(root)\\n-\\n-    # Create the directory structure\\n-    for dirname in sorted(dirlist):\\n-        pieces = dirname[:-1].split('\/')\\n-        for i in range(len(pieces)):\\n-            dirpath = os.path.join(root, *pieces[: i + 1])\\n-            if not os.path.exists(dirpath):\\n-                os.mkdir(dirpath)\\n-\\n-    # Extract files.\\n-    for i, filename in enumerate(filelist):\\n-        filepath = os.path.join(root, *filename.split('\/'))\\n-\\n-        try:\\n-            with open(filepath, 'wb') as dstfile, zf.open(filename) as srcfile:\\n-                shutil.copyfileobj(srcfile, dstfile)\\n-        except Exception as e:\\n-            yield ErrorMessage(filename, e)\\n-            return\\n+    zf.extractall(root)\\n \\n-        if verbose and (i * 10 \/ len(filelist) > (i - 1) * 10 \/ len(filelist)):\\n-            sys.stdout.write('.')\\n-            sys.stdout.flush()\\n     if verbose:\\n         print()\"}}",
            "message_norm":"cve-2019-14751:\nfixed security bug in downloader\n(https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=cve-2019-14751)",
            "language":"en",
            "entities":"[('cve-2019-14751', 'VULNID', 'CVE'), ('fixed', 'ACTION', ''), ('security', 'SECWORD', ''), ('bug', 'FLAW', ''), ('https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=cve-2019-14751', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['nltk\/downloader.py'])",
            "num_files":1.0
        },
        {
            "index":2673,
            "vuln_id":"GHSA-q263-fvxm-m5mw",
            "cwe_id":"{'CWE-908', 'CWE-125'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b'}",
            "dataset":"osv",
            "summary":"Heap out of bounds access in MakeEdge in TensorFlow ### Impact\nUnder certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/3616708cb866365301d8e67b43b32b46d94b08a0\/tensorflow\/core\/common_runtime\/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:\n\n```cc\n  DataType src_out = src->output_type(output_index);\n  DataType dst_in = dst->input_type(input_index);\n  \/\/...\n```\n\nHowever, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.\n\nIn most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.\n\n### Patches\nWe have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2020-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "commit_sha":"0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "patch":"SINGLE",
            "chain_ord":"['0cc38aaa4064fd9e79101994ce9872c6d91f816b']",
            "before_first_fix_commit":"{'3616708cb866365301d8e67b43b32b46d94b08a0'}",
            "last_fix_commit":"0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2020, 17:31:57",
            "message":"Prevent unitialized memory access in `GraphConstructor::MakeEdge`\n\nThe `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\nPiperOrigin-RevId: 346343288\nChange-Id: I2127da27c2023d27f26efd39afa6c853385cab6f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'tensorflow\/core\/common_runtime\/graph_constructor.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0cc38aaa4064fd9e79101994ce9872c6d91f816b\/tensorflow%2Fcore%2Fcommon_runtime%2Fgraph_constructor.cc', 'patch': '@@ -44,6 +44,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\\n #include \"tensorflow\/core\/lib\/strings\/scanner.h\"\\n #include \"tensorflow\/core\/lib\/strings\/str_util.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/platform\/logging.h\"\\n #include \"tensorflow\/core\/platform\/macros.h\"\\n #include \"tensorflow\/core\/public\/version.h\"\\n@@ -1425,6 +1426,17 @@ void GraphConstructor::Undo() {\\n \\n Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,\\n                                   int input_index) {\\n+  if (output_index >= src->num_outputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Output \", output_index, \" of node \", src->name(),\\n+        \" does not exist. Node only has \", src->num_outputs(), \" outputs.\");\\n+  }\\n+  if (input_index >= dst->num_inputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Input \", input_index, \" of node \", dst->name(),\\n+        \" does not exist. Node only has \", dst->num_inputs(), \" inputs.\");\\n+  }\\n+\\n   DataType src_out = src->output_type(output_index);\\n   DataType dst_in = dst->input_type(input_index);\\n   if (!TypesCompatible(dst_in, src_out)) {'}}",
            "message_norm":"prevent unitialized memory access in `graphconstructor::makeedge`\n\nthe `makeedge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. however, if this is not the case this results in accessing data out of bounds. because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. however, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\npiperorigin-revid: 346343288\nchange-id: i2127da27c2023d27f26efd39afa6c853385cab6f",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('out of bounds', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('information leakage', 'SECWORD', ''), ('exploits', 'SECWORD', ''), ('346343288', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/graph_constructor.cc'])",
            "num_files":1.0
        },
        {
            "index":25,
            "vuln_id":"GHSA-24x6-8c7m-hv3f",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578'}",
            "dataset":"osv",
            "summary":"Heap OOB read in TFLite's implementation of `Minimum` or `Maximum` ### Impact\nThe implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty.\n\nThis is because [the broadcasting implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/reference\/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds:\n\n```cc\nauto maxmin_func = [&](int indexes[N]) {\n  output_data[SubscriptToIndex(output_desc, indexes)] =\n    op(input1_data[SubscriptToIndex(desc1, indexes)],\n        input2_data[SubscriptToIndex(desc2, indexes)]);\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [953f28dca13c92839ba389c055587cfe6c723578](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578",
            "commit_sha":"953f28dca13c92839ba389c055587cfe6c723578",
            "patch":"SINGLE",
            "chain_ord":"['953f28dca13c92839ba389c055587cfe6c723578']",
            "before_first_fix_commit":"{'801c1c6be5324219689c98e1bd3e0ca365ee834d'}",
            "last_fix_commit":"953f28dca13c92839ba389c055587cfe6c723578",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:38",
            "message":"Prevent a null pointer exception in TFLite\n\nPiperOrigin-RevId: 370800206\nChange-Id: Idd437ebce4ff224120d8eefc1c14c062173b71d6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 31, 'deletions': 29, 'total': 60}",
            "files":"{'tensorflow\/lite\/kernels\/maximum_minimum.cc': {'additions': 31, 'deletions': 29, 'changes': 60, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/953f28dca13c92839ba389c055587cfe6c723578\/tensorflow%2Flite%2Fkernels%2Fmaximum_minimum.cc', 'patch': '@@ -157,35 +157,37 @@ template <KernelType kernel_type, typename OpType>\\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   OpContext op_context(context, node);\\n \\n-    switch (op_context.output->type) {\\n-      case kTfLiteFloat32:\\n-        TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);\\n-        break;\\n-      case kTfLiteUInt8:\\n-        TFLiteOperation<kernel_type, uint8_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt8:\\n-        TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);\\n-        break;\\n-      case kTfLiteInt32:\\n-        TFLiteOperation<kernel_type, int32_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt64:\\n-        TFLiteOperation<kernel_type, int64_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt16:\\n-        TFLiteOperation<kernel_type, int16_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      default:\\n-        context->ReportError(context,\\n-                             \"Type %d is currently not supported by Maximum.\",\\n-                             op_context.output->type);\\n-        return kTfLiteError;\\n-    }\\n+  \/\/ If inputs have no element, shortcircuit.\\n+  if (NumElements(op_context.input1) == 0 ||\\n+      NumElements(op_context.input2) == 0) {\\n+    return kTfLiteOk;\\n+  }\\n+\\n+  switch (op_context.output->type) {\\n+    case kTfLiteFloat32:\\n+      TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteUInt8:\\n+      TFLiteOperation<kernel_type, uint8_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt8:\\n+      TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt32:\\n+      TFLiteOperation<kernel_type, int32_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt64:\\n+      TFLiteOperation<kernel_type, int64_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt16:\\n+      TFLiteOperation<kernel_type, int16_t, OpType>(context, node, op_context);\\n+      break;\\n+    default:\\n+      context->ReportError(context,\\n+                           \"Type %d is currently not supported by Maximum.\",\\n+                           op_context.output->type);\\n+      return kTfLiteError;\\n+  }\\n   return kTfLiteOk;\\n }'}}",
            "message_norm":"prevent a null pointer exception in tflite\n\npiperorigin-revid: 370800206\nchange-id: idd437ebce4ff224120d8eefc1c14c062173b71d6",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('370800206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/maximum_minimum.cc'])",
            "num_files":1.0
        },
        {
            "index":1182,
            "vuln_id":"GHSA-8c6g-4xc5-w96c",
            "cwe_id":"{'CWE-908'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/ruuda\/claxon\/commit\/8f28ec275e412dd3af4f3cda460605512faf332c'}",
            "dataset":"osv",
            "summary":"Uninitialized memory exposure in claxon An issue was discovered in the claxon crate before 0.4.1 for Rust. Uninitialized memory can be exposed because certain decode buffer sizes are mishandled.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/ruuda\/claxon",
            "commit_href":"https:\/\/github.com\/ruuda\/claxon\/commit\/8f28ec275e412dd3af4f3cda460605512faf332c",
            "commit_sha":"8f28ec275e412dd3af4f3cda460605512faf332c",
            "patch":"SINGLE",
            "chain_ord":"['8f28ec275e412dd3af4f3cda460605512faf332c']",
            "before_first_fix_commit":"{'cd82be35f413940ba446d2a19f10d74b86466487'}",
            "last_fix_commit":"8f28ec275e412dd3af4f3cda460605512faf332c",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/23\/2018, 18:01:40",
            "message":"Fix bug in decoding residuals\n\nA partition order could occur, such that the block size was not a\nmultiple of 2^order. Computation of the number of samples per partition\ndid not account for this case, rounding down due to the bit shift. This\nmeant that we would not fill the entire decode buffer.\n\nClaxon does not zero the decode buffer because it is (should be)\noverwritten anyway, and in the case of a format error, where the buffer\nmight be only partially full, the buffer is not exposed again.\nFurthermore, the way decoding works in most places, is that we fill the\nentire buffer, just by looping to fill it. If the input bitstream does\nnot contain enough data to fill the buffer, then that's a format error.\nIn a few places though, we need to slice up the buffer before decoding\ninto it: for decoding individual channels, and also for decoding\nresiduals, which are split into partitions.\n\nThis particular format error was especially nasty because it did not\ncause a format error down the line. Instead, it caused the buffer to be\nsliced in a way where the slices together did not cover the entire\nbuffer, and so parts of uninitialized memory could remain in the buffer.\n\nThanks a lot to Sergey \"Shnatsel\" Davidoff for reporting this bug,\ntogether with elaborate steps to reproduce that allowed me to pinpoint\nthe cause quickly.",
            "author":"Ruud van Asseldonk",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 6, 'total': 25}",
            "files":"{'src\/subframe.rs': {'additions': 19, 'deletions': 6, 'changes': 25, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ruuda\/claxon\/raw\/8f28ec275e412dd3af4f3cda460605512faf332c\/src%2Fsubframe.rs', 'patch': '@@ -254,35 +254,48 @@ fn decode_residual<R: ReadBytes>(input: &mut Bitstream<R>,\\n     \/\/ most 2^16 - 1 samples in the block. No values have been marked as\\n     \/\/ invalid by the specification though.\\n     let n_partitions = 1u32 << order;\\n-    let n_samples = block_size >> order;\\n+    let n_samples_per_partition = block_size >> order;\\n+\\n+    \/\/ The partitions together must fill the block. If the block size is not a\\n+    \/\/ multiple of 2^order; if we shifted off some bits, then we would not fill\\n+    \/\/ the entire block. Such a partition order is invalid for this block size.\\n+    if block_size & (n_partitions - 1) as u16 != 0 {\\n+        return fmt_err(\"invalid partition order\")\\n+    }\\n+\\n+    \/\/ NOTE: the check above checks that block_size is a multiple of n_partitions\\n+    \/\/ (this works because n_partitions is a power of 2). The check below is\\n+    \/\/ equivalent but more expensive.\\n+    debug_assert_eq!(n_partitions * n_samples_per_partition as u32, block_size as u32);\\n+\\n     let n_warm_up = block_size - buffer.len() as u16;\\n \\n     \/\/ The partition size must be at least as big as the number of warm-up\\n     \/\/ samples, otherwise the size of the first partition is negative.\\n-    if n_warm_up > n_samples {\\n+    if n_warm_up > n_samples_per_partition {\\n         return fmt_err(\"invalid residual\");\\n     }\\n \\n     \/\/ Finally decode the partitions themselves.\\n     match partition_type {\\n         RicePartitionType::Rice => {\\n             let mut start = 0;\\n-            let mut len = n_samples - n_warm_up;\\n+            let mut len = n_samples_per_partition - n_warm_up;\\n             for _ in 0..n_partitions {\\n                 let slice = &mut buffer[start..start + len as usize];\\n                 try!(decode_rice_partition(input, slice));\\n                 start = start + len as usize;\\n-                len = n_samples;\\n+                len = n_samples_per_partition;\\n             }\\n         }\\n         RicePartitionType::Rice2 => {\\n             let mut start = 0;\\n-            let mut len = n_samples - n_warm_up;\\n+            let mut len = n_samples_per_partition - n_warm_up;\\n             for _ in 0..n_partitions {\\n                 let slice = &mut buffer[start..start + len as usize];\\n                 try!(decode_rice2_partition(input, slice));\\n                 start = start + len as usize;\\n-                len = n_samples;\\n+                len = n_samples_per_partition;\\n             }\\n         }\\n     }'}}",
            "message_norm":"fix bug in decoding residuals\n\na partition order could occur, such that the block size was not a\nmultiple of 2^order. computation of the number of samples per partition\ndid not account for this case, rounding down due to the bit shift. this\nmeant that we would not fill the entire decode buffer.\n\nclaxon does not zero the decode buffer because it is (should be)\noverwritten anyway, and in the case of a format error, where the buffer\nmight be only partially full, the buffer is not exposed again.\nfurthermore, the way decoding works in most places, is that we fill the\nentire buffer, just by looping to fill it. if the input bitstream does\nnot contain enough data to fill the buffer, then that's a format error.\nin a few places though, we need to slice up the buffer before decoding\ninto it: for decoding individual channels, and also for decoding\nresiduals, which are split into partitions.\n\nthis particular format error was especially nasty because it did not\ncause a format error down the line. instead, it caused the buffer to be\nsliced in a way where the slices together did not cover the entire\nbuffer, and so parts of uninitialized memory could remain in the buffer.\n\nthanks a lot to sergey \"shnatsel\" davidoff for reporting this bug,\ntogether with elaborate steps to reproduce that allowed me to pinpoint\nthe cause quickly.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('error', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('error', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('decoding', 'SECWORD', ''), ('decoding', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('uninitialized memory', 'SECWORD', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/subframe.rs'])",
            "num_files":1.0
        },
        {
            "index":634,
            "vuln_id":"GHSA-5gjh-5j4f-cpwv",
            "cwe_id":"{'CWE-434', 'CWE-20'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/0fef3c9082269e9a4e817274942a5d7c50617284'}",
            "dataset":"osv",
            "summary":"Unrestricted Upload of File with Dangerous Type in Gogs ### Impact\n\nThe malicious user is able to upload a crafted `config` file into repository's `.git` directory with to gain SSH access to the server. All installations with [repository upload enabled (default)](https:\/\/github.com\/gogs\/gogs\/blob\/f36eeedbf89328ee70cc3a2e239f6314f9021f58\/conf\/app.ini#L127-L129) are affected.\n\n### Patches\n\nRepository file uploads are prohibited to its `.git` directory. Users should upgrade to 0.12.6 or the latest 0.13.0+dev.\n\n### Workarounds\n\n[Disable repository files upload](https:\/\/github.com\/gogs\/gogs\/blob\/f36eeedbf89328ee70cc3a2e239f6314f9021f58\/conf\/app.ini#L128-L129).\n\n### References\n\nhttps:\/\/huntr.dev\/bounties\/b4928cfe-4110-462f-a180-6d5673797902\/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on #6833.",
            "published_date":"2022-03-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/gogs\/gogs",
            "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/0fef3c9082269e9a4e817274942a5d7c50617284",
            "commit_sha":"0fef3c9082269e9a4e817274942a5d7c50617284",
            "patch":"SINGLE",
            "chain_ord":"['0fef3c9082269e9a4e817274942a5d7c50617284']",
            "before_first_fix_commit":"{'5aca56d2ddafad347dd670f4004ebf367c2c84ef'}",
            "last_fix_commit":"0fef3c9082269e9a4e817274942a5d7c50617284",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/13\/2022, 14:18:56",
            "message":"repo_editor: check upload `TreePath` and file name (#6838)",
            "author":"Joe Chen",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 4, 'total': 17}",
            "files":"{'internal\/db\/repo_editor.go': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/0fef3c9082269e9a4e817274942a5d7c50617284\/internal%2Fdb%2Frepo_editor.go', 'patch': '@@ -16,16 +16,18 @@ import (\\n \\t\"strings\"\\n \\t\"time\"\\n \\n+\\t\"github.com\/pkg\/errors\"\\n \\tgouuid \"github.com\/satori\/go.uuid\"\\n \\t\"github.com\/unknwon\/com\"\\n \\n \\t\"github.com\/gogs\/git-module\"\\n \\n \\t\"gogs.io\/gogs\/internal\/conf\"\\n \\t\"gogs.io\/gogs\/internal\/cryptoutil\"\\n-\\t\"gogs.io\/gogs\/internal\/db\/errors\"\\n+\\tdberrors \"gogs.io\/gogs\/internal\/db\/errors\"\\n \\t\"gogs.io\/gogs\/internal\/gitutil\"\\n \\t\"gogs.io\/gogs\/internal\/osutil\"\\n+\\t\"gogs.io\/gogs\/internal\/pathutil\"\\n \\t\"gogs.io\/gogs\/internal\/process\"\\n \\t\"gogs.io\/gogs\/internal\/tool\"\\n )\\n@@ -134,7 +136,7 @@ func (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (\\n \\tif opts.OldBranch != opts.NewBranch {\\n \\t\\t\/\/ Directly return error if new branch already exists in the server\\n \\t\\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\\n-\\t\\t\\treturn errors.BranchAlreadyExists{Name: opts.NewBranch}\\n+\\t\\t\\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\\n \\t\\t}\\n \\n \\t\\t\/\/ Otherwise, delete branch from local copy in case out of sync\\n@@ -449,11 +451,16 @@ func isRepositoryGitPath(path string) bool {\\n \\treturn strings.HasSuffix(path, \".git\") || strings.Contains(path, \".git\"+string(os.PathSeparator))\\n }\\n \\n-func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) (err error) {\\n+func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\\n \\tif len(opts.Files) == 0 {\\n \\t\\treturn nil\\n \\t}\\n \\n+\\t\/\/ Prevent uploading files into the \".git\" directory\\n+\\tif isRepositoryGitPath(opts.TreePath) {\\n+\\t\\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\\n+\\t}\\n+\\n \\tuploads, err := GetUploadsByUUIDs(opts.Files)\\n \\tif err != nil {\\n \\t\\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\\n@@ -487,7 +494,9 @@ func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions)\\n \\t\\t\\tcontinue\\n \\t\\t}\\n \\n-\\t\\t\/\/ Prevent copying files into .git directory, see https:\/\/gogs.io\/gogs\/issues\/5558.\\n+\\t\\tupload.Name = pathutil.Clean(upload.Name)\\n+\\n+\\t\\t\/\/ Prevent uploading files into the \".git\" directory\\n \\t\\tif isRepositoryGitPath(upload.Name) {\\n \\t\\t\\tcontinue\\n \\t\\t}'}}",
            "message_norm":"repo_editor: check upload `treepath` and file name (#6838)",
            "language":"en",
            "entities":"[('#6838', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['internal\/db\/repo_editor.go'])",
            "num_files":1.0
        },
        {
            "index":2286,
            "vuln_id":"GHSA-jp6r-xcjj-5h7r",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/gchq\/CyberChef\/commit\/01f0625d6a177f9c5df9281f12a27c814c2d8bcf'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in cyberchef Versions of `cyberchef` prior to 8.31.3 are vulnerable to Cross-Site Scripting. In `Text Encoding Brute Force` the table rows are created by concatenating the `value` variable unsanitized in the HTML code. If this variable is controlled by user input it allows attackers to execute arbitrary JavaScript in a victim's browser.\n\n\n## Recommendation\n\nUpgrade to version 8.31.3 or later.",
            "published_date":"2019-08-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/gchq\/CyberChef",
            "commit_href":"https:\/\/github.com\/gchq\/CyberChef\/commit\/01f0625d6a177f9c5df9281f12a27c814c2d8bcf",
            "commit_sha":"01f0625d6a177f9c5df9281f12a27c814c2d8bcf",
            "patch":"SINGLE",
            "chain_ord":"['01f0625d6a177f9c5df9281f12a27c814c2d8bcf']",
            "before_first_fix_commit":"{'38ff7ec89f595dbe5971c3577fa29a142b4b2416'}",
            "last_fix_commit":"01f0625d6a177f9c5df9281f12a27c814c2d8bcf",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/14\/2019, 21:00:17",
            "message":"Fixed XSS in 'Text Encoding Brute Force. Closes #539",
            "author":"n1474335",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/core\/operations\/TextEncodingBruteForce.mjs': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gchq\/CyberChef\/raw\/01f0625d6a177f9c5df9281f12a27c814c2d8bcf\/src%2Fcore%2Foperations%2FTextEncodingBruteForce.mjs', 'patch': '@@ -79,7 +79,7 @@ class TextEncodingBruteForce extends Operation {\\n         let table = \"<table class=\\'table table-hover table-sm table-bordered table-nonfluid\\'><tr><th>Encoding<\/th><th>Value<\/th><\/tr>\";\\n \\n         for (const enc in encodings) {\\n-            const value = Utils.printable(encodings[enc], true);\\n+            const value = Utils.escapeHtml(Utils.printable(encodings[enc], true));\\n             table += `<tr><td>${enc}<\/td><td>${value}<\/td><\/tr>`;\\n         }'}}",
            "message_norm":"fixed xss in 'text encoding brute force. closes #539",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('encoding', 'SECWORD', ''), ('#539', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/core\/operations\/TextEncodingBruteForce.mjs'])",
            "num_files":1.0
        },
        {
            "index":3387,
            "vuln_id":"GHSA-x752-qjv4-c4hc",
            "cwe_id":"{'CWE-74'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/dompdf\/dompdf\/commit\/4c70e1025bcd9b7694b95dd552499bd83cd6141d'}",
            "dataset":"osv",
            "summary":"Remote code injection in dompdf\/dompdf Dompdf is an HTML to PDF converter. Dompdf before 1.2.1 allows remote code execution via a .php file in the src:url field of an @font-face Cascading Style Sheets (CSS) statement (within an HTML input file).",
            "published_date":"2022-04-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/dompdf\/dompdf",
            "commit_href":"https:\/\/github.com\/dompdf\/dompdf\/commit\/4c70e1025bcd9b7694b95dd552499bd83cd6141d",
            "commit_sha":"4c70e1025bcd9b7694b95dd552499bd83cd6141d",
            "patch":"SINGLE",
            "chain_ord":"['4c70e1025bcd9b7694b95dd552499bd83cd6141d']",
            "before_first_fix_commit":"{'0347b9a73f8a03b1b7e659312416f6fd6c7a0cee'}",
            "last_fix_commit":"4c70e1025bcd9b7694b95dd552499bd83cd6141d",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2022, 00:09:04",
            "message":"Match installed font filename extension to type\n\nfixes #2598",
            "author":"Brian Sweeney",
            "comments":"{'com_1': {'author': 'Jakess39', 'datetime': '04\/16\/2022, 09:55:58', 'body': '> #2526'}, 'com_2': {'author': 'Jakess39', 'datetime': '04\/16\/2022, 09:56:11', 'body': '> > #2526'}}",
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'src\/FontMetrics.php': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/dompdf\/dompdf\/raw\/4c70e1025bcd9b7694b95dd552499bd83cd6141d\/src%2FFontMetrics.php', 'patch': '@@ -206,7 +206,6 @@ public function registerFont($style, $remoteFile, $context = null)\\n         }\\n \\n         $cacheEntry = $localFile;\\n-        $localFile .= \".\".strtolower(pathinfo(parse_url($remoteFile, PHP_URL_PATH), PATHINFO_EXTENSION));\\n \\n         $entry[$styleString] = $cacheEntry;\\n \\n@@ -258,6 +257,13 @@ public function registerFont($style, $remoteFile, $context = null)\\n             return false;\\n         }\\n \\n+        switch ($font->getFontType()) {\\n+            case \"TrueType\":\\n+            default:\\n+                $localFile .= \".ttf\";\\n+                break;\\n+        }\\n+\\n         $font->parse();\\n         $font->saveAdobeFontMetrics(\"$cacheEntry.ufm\");\\n         $font->close();'}}",
            "message_norm":"match installed font filename extension to type\n\nfixes #2598",
            "language":"en",
            "entities":"[('#2598', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/FontMetrics.php'])",
            "num_files":1.0
        },
        {
            "index":2094,
            "vuln_id":"GHSA-hm45-mgqm-gjm4",
            "cwe_id":"{'CWE-79'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/Cog-Creators\/Red-Dashboard\/commit\/a6b9785338003ec87fb75305e7d1cc2d40c7ab91', 'https:\/\/github.com\/Cog-Creators\/Red-Dashboard\/commit\/99d88b840674674166ce005b784ae8e31e955ab1'}",
            "dataset":"osv",
            "summary":"Remote Code Execution (RCE) Exploit on Cross Site Scripting (XSS) Vulnerability ### Impact\nA RCE exploit has been discovered in the Red Discord Bot - Dashboard Webserver: this exploit allows Discord users with specially crafted Server names and Usernames\/Nicknames to inject code into the webserver front-end code.  By abusing this exploit, it's possible to perform destructive actions and\/or access sensitive information.\n\n### Patches\nThis high severity exploit has been fixed on version `0.1.7a`.\n\n### Workarounds\nThere are no workarounds, bot owners must upgrade their relevant packages (Dashboard module and Dashboard webserver) in order to patch this issue\n\n### References\n- 99d88b8\n- a6b9785\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators\/Red-Dashboard](https:\/\/github.com\/Cog-Creators\/Red-Dashboard\/issues\/new\/choose)\n* Over on the official [Red Server](https:\/\/discord.gg\/red) or at the Third Party Server [Toxic Layer](https:\/\/discord.gg\/vQZTdB9)",
            "published_date":"2020-12-08",
            "chain_len":2,
            "project":"https:\/\/github.com\/Cog-Creators\/Red-Dashboard",
            "commit_href":"https:\/\/github.com\/Cog-Creators\/Red-Dashboard\/commit\/a6b9785338003ec87fb75305e7d1cc2d40c7ab91",
            "commit_sha":"a6b9785338003ec87fb75305e7d1cc2d40c7ab91",
            "patch":"MULTI",
            "chain_ord":"['99d88b840674674166ce005b784ae8e31e955ab1', 'a6b9785338003ec87fb75305e7d1cc2d40c7ab91']",
            "before_first_fix_commit":"{'261f00f52bbfee4db67f624fd7409bf08124a6c4'}",
            "last_fix_commit":"a6b9785338003ec87fb75305e7d1cc2d40c7ab91",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/01\/2020, 14:15:49",
            "message":"[UI] Fix SelectPicker not rendering properly",
            "author":"NeuroAssassin",
            "comments":null,
            "stats":"{'additions': 41, 'deletions': 16, 'total': 57}",
            "files":"{'reddash\/app\/home\/templates\/guild.html': {'additions': 41, 'deletions': 16, 'changes': 57, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Cog-Creators\/Red-Dashboard\/raw\/a6b9785338003ec87fb75305e7d1cc2d40c7ab91\/reddash%2Fapp%2Fhome%2Ftemplates%2Fguild.html', 'patch': '@@ -930,20 +930,20 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n             img.attr(\"src\", `${img.attr(\"data-src-url\")}png`)\\r\\n         }\\r\\n     }\\r\\n+\\r\\n+    function safe(str) {\\r\\n+        return String(str).replace(\/&\/g, \\'&amp;\\').replace(\/<\/g, \\'&lt;\\').replace(\/>\/g, \\'&gt;\\').replace(\/\"\/g, \\'&quot;\\');\\r\\n+    }\\r\\n <\/script>\\r\\n \\r\\n {% if data[\\'status\\'] == 1 and data[\\'data\\'][\\'status\\'] == 1 %}\\r\\n \\r\\n-{% if \\'aliascc\\' in data[\\'data\\'][\\'permslist\\'] %}\\r\\n+{% if \\'aliascc\\' in data[\\'data\\'][\\'permslist\\'] and false%}\\r\\n <script>\\r\\n     \/* ---------------------------------------------------------------------------------------------------------------------\\r\\n                                                         Aliases group\\r\\n        --------------------------------------------------------------------------------------------------------------------- *\/\\r\\n \\r\\n-    function safe(str) {\\r\\n-        return String(str).replace(\/&\/g, \\'&amp;\\').replace(\/<\/g, \\'&lt;\\').replace(\/>\/g, \\'&gt;\\').replace(\/\"\/g, \\'&quot;\\');\\r\\n-    }\\r\\n-\\r\\n     \/\/ Alias modal\\r\\n     $(document).on(\\'click\\', \\'.editaliasbutton\\', function () {\\r\\n         var command = $(this).parent().parent().data(\"command\")\\r\\n@@ -1186,28 +1186,35 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n             } else if (json.status === 1 && json.data.status === 0) {\\r\\n                 $(\"#targetstatus\").html(`{{ _(\\'Failed to fetch targets\\') }}: ${json.data.message}`)\\r\\n             } else {\\r\\n+                let big_ol_dict = {}\\r\\n                 select.html(\"\")\\r\\n \\r\\n                 var chopt = [`<optgroup label=\"{{ _(\\'Channels\\') }}\">`]\\r\\n                 for (let [id, name] of json.data.CHANNELS) {\\r\\n-                    chopt.push(`<option value=${id}>${name}<\/option>`)\\r\\n+                    chopt.push(`<option value=${id} class=\"selectpicker-element-${id}\">Loading...<\/option>`)\\r\\n+                    big_ol_dict[id] = name\\r\\n                 }\\r\\n                 chopt.push(\"<\/optgroup>\")\\r\\n                 select.append(chopt.join(\"\"))\\r\\n \\r\\n                 var ropt = [`<optgroup label=\"{{ _(\\'Roles\\') }}\">`]\\r\\n                 for (let [id, name] of json.data.ROLES) {\\r\\n-                    ropt.push(`<option value=${id}>${name}<\/option>`)\\r\\n+                    ropt.push(`<option value=${id} class=\"selectpicker-element-${id}\">Loading...<\/option>`)\\r\\n+                    big_ol_dict[id] = name\\r\\n                 }\\r\\n                 ropt.push(\"<\/optgroup>\")\\r\\n                 select.append(ropt.join(\"\"))\\r\\n \\r\\n                 var uopt = [`<optgroup label=\"{{ _(\\'Users\\') }}\">`]\\r\\n                 for (let [id, name] of json.data.USERS) {\\r\\n-                    uopt.push(`<option value=${id}>${name}<\/option>`)\\r\\n+                    uopt.push(`<option value=${id} class=\"selectpicker-element-${id}\">Loading...<\/option>`)\\r\\n+                    big_ol_dict[id] = name\\r\\n                 }\\r\\n                 uopt.push(\"<\/optgroup>\")\\r\\n                 select.append(uopt.join(\"\"))\\r\\n+                for (let [id, name] of Object.entries(big_ol_dict)) {\\r\\n+                    $(`.selectpicker-element-${id}`).text(name)\\r\\n+                }\\r\\n             }\\r\\n             select.selectpicker({ title: \"{{ _(\\'Choose target\\') }}\" })\\r\\n             select.removeAttr(\"disabled\")\\r\\n@@ -1299,18 +1306,24 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n                 $(\"#rulesdiv\").html(\"\")\\r\\n                 var overall = [\\'<h3 style=\"margin-bottom: 10px\">{{ _(\"Cog rules\") }}<\/h3>\\']\\r\\n                 var allcoglines = [\"<ul>\"]\\r\\n+\\r\\n+                let big_ol_dict_two = {}\\r\\n+                let cog_counter = 0\\r\\n+\\r\\n                 for (let [cog, rules] of Object.entries(json.data.COG)) {\\r\\n                     var coglines = []\\r\\n                     for (let rule of rules) {\\r\\n                         if (rule.type === \"Default\") {\\r\\n                             coglines.unshift(`<li>{{ _(\\'By default, users are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n                         } else if (rule.type === \"Role\") {\\r\\n-                            coglines.push(`<li>{{ _(\\'Users with the\\') }} <code>${rule.name}<\/code> {{ _(\\'role\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n+                            coglines.push(`<li>{{ _(\\'Users with the\\') }} <code id=\"cog-rules-${cog_counter}\">Loading...<\/code> {{ _(\\'role\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n                         } else if (rule.type === \"Channel\") {\\r\\n-                            coglines.push(`<li>{{ _(\\'Users in the\\') }} <code>${rule.name}<\/code> {{ _(\\'channel\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n+                            coglines.push(`<li>{{ _(\\'Users in the\\') }} <code id=\"cog-rules-${cog_counter}\">Loading...<\/code> {{ _(\\'channel\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n                         } else {\\r\\n-                            coglines.push(`<li>{{ _(\\'User\\') }} <code>${rule.name}<\/code> (${rule.id}) {{ _(\\'is\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n+                            coglines.push(`<li>{{ _(\\'User\\') }} <code id=\"cog-rules-${cog_counter}\">Loading...<\/code> (${rule.id}) {{ _(\\'is\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cog}<\/code> {{ _(\\'cog\\') }}.<\/li>`)\\r\\n                         }\\r\\n+                        big_ol_dict_two[`cog-rules-${cog_counter}`] = rule.name\\r\\n+                        cog_counter += 1\\r\\n                     }\\r\\n                     if (coglines) {\\r\\n                         allcoglines = allcoglines.concat(coglines)\\r\\n@@ -1324,18 +1337,23 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n \\r\\n                 overall.push(\\'<h3 style=\"margin-bottom: 10px\">{{ _(\"Command rules\") }}<\/h3>\\')\\r\\n                 var allcmdlines = [\"<ul>\"]\\r\\n+\\r\\n+                let cmd_counter = 0\\r\\n+\\r\\n                 for (let [cmd, rules] of Object.entries(json.data.COMMAND)) {\\r\\n                     var cmdlines = []\\r\\n                     for (let rule of rules) {\\r\\n                         if (rule.type === \"Default\") {\\r\\n                             cmdlines.unshift(`<li>{{ _(\\'By default, users are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n                         } else if (rule.type === \"Role\") {\\r\\n-                            cmdlines.push(`<li>{{ _(\\'Users with the\\') }} <code>${rule.name}<\/code> {{ _(\\'role\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n+                            cmdlines.push(`<li>{{ _(\\'Users with the\\') }} <code id=\"cmd-rules-${cmd_counter}\">Loading...<\/code> {{ _(\\'role\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n                         } else if (rule.type === \"Channel\") {\\r\\n-                            cmdlines.push(`<li>{{ _(\\'Users in the\\') }} <code>${rule.name}<\/code> {{ _(\\'channel\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n+                            cmdlines.push(`<li>{{ _(\\'Users in the\\') }} <code id=\"cmd-rules-${cmd_counter}\">Loading...<\/code> {{ _(\\'channel\\') }} (${rule.id}) {{ _(\\'are\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n                         } else {\\r\\n-                            cmdlines.push(`<li>{{ _(\\'User\\') }} <code>${rule.name}<\/code> (${rule.id}) {{ _(\\'is\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n+                            cmdlines.push(`<li>{{ _(\\'User\\') }} <code id=\"cmd-rules-${cmd_counter}\">Loading...<\/code> (${rule.id}) {{ _(\\'is\\') }} ${rule.permission} {{ _(\\'permission to use the\\') }} <code>${cmd}<\/code> {{ _(\\'command\\') }}.<\/li>`)\\r\\n                         }\\r\\n+                        big_ol_dict_two[`cmd-rules-${cmd_counter}`] = rule.name\\r\\n+                        cmd_counter += 1\\r\\n                     }\\r\\n                     if (cmdlines) {\\r\\n                         allcmdlines = allcmdlines.concat(cmdlines)\\r\\n@@ -1347,6 +1365,9 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n                 }\\r\\n                 overall = overall.concat(allcmdlines)\\r\\n                 $(\"#rulesdiv\").html(overall.join(\"\"))\\r\\n+                for (let [id, name] of Object.entries(big_ol_dict_two)) {\\r\\n+                    $(`#${id}`).text(name)\\r\\n+                }\\r\\n                 $(\"#fetchrulesstatus\").html(\"{{ _(\\'Refreshed rules\\') }}.\")\\r\\n             }\\r\\n         }\\r\\n@@ -1378,18 +1399,20 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n \\r\\n     $(document).on(\\'click\\', \\'.adminroleoption\\', function () {\\r\\n         var elm = $(this)\\r\\n+        let random_number = Math.floor(Math.random() * Math.floor(100000))\\r\\n         $(\"#adminrolelist\").append(`\\r\\n                 <li>\\r\\n                     <div class=\"row\">\\r\\n                         <div class=\"col-md-10 col-8\">\\r\\n-                            <input class=\"form-control adminroleinput\" value=\"${elm.text()}\" disabled=True data-id=\"${elm.attr(\"data-id\")}\">\\r\\n+                            <input class=\"form-control adminroleinput\" value=\"Loading...\" disabled=True data-id=\"${elm.attr(\"data-id\")}\" id=\"admin-role-${random_number}\">\\r\\n                         <\/div>\\r\\n                         <div class=\"col-md-1 col-1\">\\r\\n                             <span class=\"admin-role-x clickable\"><i class=\"tim-icons icon-simple-remove\" style=\"float: right; margin-top: 10px;\"><\/i><\/span>\\r\\n                         <\/div>\\r\\n                     <\/div>\\r\\n                 <\/li>\\r\\n             `)\\r\\n+        $(`#admin-role-${random_number}`).val(elm.text())\\r\\n         elm.remove()\\r\\n     })\\r\\n \\r\\n@@ -1442,18 +1465,20 @@ <h5>{{ data[\\'message\\'] }}<\/h5>\\n \\r\\n     $(document).on(\\'click\\', \\'.modroleoption\\', function () {\\r\\n         var elm = $(this)\\r\\n+        let random_number = Math.floor(Math.random() * Math.floor(100000))\\r\\n         $(\"#modrolelist\").append(`\\r\\n                 <li>\\r\\n                     <div class=\"row\">\\r\\n                         <div class=\"col-md-10 col-8\">\\r\\n-                            <input class=\"form-control modroleinput\" value=\"${elm.text()}\" disabled=True data-id=\"${elm.attr(\"data-id\")}\">\\r\\n+                            <input class=\"form-control modroleinput\" value=\"Loading...\" disabled=True data-id=\"${elm.attr(\"data-id\")}\" id=\"mod-role-${random_number}\">\\r\\n                         <\/div>\\r\\n                         <div class=\"col-md-1 col-1\">\\r\\n                             <span class=\"mod-role-x clickable\"><i class=\"tim-icons icon-simple-remove\" style=\"float: right; margin-top: 10px;\"><\/i><\/span>\\r\\n                         <\/div>\\r\\n                     <\/div>\\r\\n                 <\/li>\\r\\n             `)\\r\\n+        $(`#mod-role-${random_number}`).val(elm.text())\\r\\n         elm.remove()\\r\\n     })'}}",
            "message_norm":"[ui] fix selectpicker not rendering properly",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['reddash\/app\/home\/templates\/guild.html'])",
            "num_files":1.0
        },
        {
            "index":604,
            "vuln_id":"GHSA-59q2-x2qc-4c97",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/51300ba1cc2f487aefec6e6631fef03b0e08b298'}",
            "dataset":"osv",
            "summary":"Heap OOB access in unicode ops ### Impact\nAn attacker can access data outside of bounds of heap allocated array in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\n\ninput_values = tf.constant([58], shape=[1], dtype=tf.int32)\ninput_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)\noutput_encoding = \"UTF-8\"\n\ntf.raw_ops.UnicodeEncode(\n    input_values=input_values, input_splits=input_splits,\n    output_encoding=output_encoding)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/472c1f12ad9063405737679d4f6bd43094e1d36d\/tensorflow\/core\/kernels\/unicode_ops.cc)\nassumes that the `input_value`\/`input_splits` pair specify a valid sparse tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [51300ba1cc2f487aefec6e6631fef03b0e08b298](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/51300ba1cc2f487aefec6e6631fef03b0e08b298).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/51300ba1cc2f487aefec6e6631fef03b0e08b298",
            "commit_sha":"51300ba1cc2f487aefec6e6631fef03b0e08b298",
            "patch":"SINGLE",
            "chain_ord":"['51300ba1cc2f487aefec6e6631fef03b0e08b298']",
            "before_first_fix_commit":"{'472c1f12ad9063405737679d4f6bd43094e1d36d'}",
            "last_fix_commit":"51300ba1cc2f487aefec6e6631fef03b0e08b298",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/03\/2021, 16:53:26",
            "message":"Fix heap buffer overflow in tf.raw_ops.UnicodeEncode.\n\nPiperOrigin-RevId: 371717714\nChange-Id: If33443b28f158e58078f1268f6b92f2728d219e0",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 0, 'total': 19}",
            "files":"{'tensorflow\/core\/kernels\/unicode_ops.cc': {'additions': 19, 'deletions': 0, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/51300ba1cc2f487aefec6e6631fef03b0e08b298\/tensorflow%2Fcore%2Fkernels%2Funicode_ops.cc', 'patch': '@@ -533,6 +533,17 @@ class UnicodeEncodeOp : public OpKernel {\\n     const Tensor& input_splits = context->input(1);\\n     const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();\\n \\n+    \/\/ Operation will treat first argument in input_splits as if it were zero\\n+    \/\/ regardless of its actual value since splits should begin with zero and\\n+    \/\/ end with the length of the input values vector.\\n+    OP_REQUIRES(\\n+        context, input_splits_flat(0) == 0,\\n+        errors::InvalidArgument(\"First value in input_splits must be zero.\"));\\n+    OP_REQUIRES(context,\\n+                input_splits_flat(input_splits_flat.size() - 1) ==\\n+                    input_tensor_flat.size(),\\n+                errors::InvalidArgument(\"Last value in input_splits must be \"\\n+                                        \"equal to length of input_tensor.\"));\\n     \/\/ Since we limit to a 2-D input (flat_values of rank 1 and a single splits\\n     \/\/ tensor), our output dimension will be 1 with it\\'s size equal to the\\n     \/\/ number of splits (outer dimension or ragged tensor).\\n@@ -548,6 +559,14 @@ class UnicodeEncodeOp : public OpKernel {\\n     for (int i = 1; i < input_splits_flat.size(); ++i) {\\n       icu::UnicodeString unicode_string;\\n       icu::UnicodeStringAppendable appendable_unicode_string(unicode_string);\\n+      OP_REQUIRES(\\n+          context, input_splits_flat(i - 1) <= input_splits_flat(i),\\n+          errors::InvalidArgument(\\n+              \"Values in input_splits must be equal or in ascending order.\"));\\n+      OP_REQUIRES(\\n+          context, input_splits_flat(i) <= input_tensor_flat.size(),\\n+          errors::InvalidArgument(\"Values in input_splits must be less than or \"\\n+                                  \"equal to input_tensor length.\"));\\n       for (; idx < input_splits_flat(i); ++idx) {\\n         int32 code_point = input_tensor_flat(idx);\\n         \/\/ Check for invalid code point'}}",
            "message_norm":"fix heap buffer overflow in tf.raw_ops.unicodeencode.\n\npiperorigin-revid: 371717714\nchange-id: if33443b28f158e58078f1268f6b92f2728d219e0",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('tf.raw_ops.unicodeencode', 'SECWORD', ''), ('371717714', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unicode_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1151,
            "vuln_id":"GHSA-86ch-6w7v-v6xf",
            "cwe_id":"{'CWE-755'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/soketi\/soketi\/commit\/4b12efef9c31117c36a0a0f1c3aa32114e86364b'}",
            "dataset":"osv",
            "summary":"Denial of Service in soketi ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nThere was a wrong behavior when reading POST requests, making the server crash if it couldn't read the body. In case a POST request was sent to any endpoint of the server with an empty body, **even unauthenticated with the Pusher Protocol**, it would simply just crash the server for trying to send a response after the request closed.\n\nAll users that run the server are affected by it and it's highly recommended to upgrade to the latest patch.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nUpdating to at least 0.24.1 or the latest version.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nNo. Upgrading is the only solution.\n\n### References\n_Are there any links users can visit to find out more?_\n\nhttps:\/\/github.com\/soketi\/soketi\/releases\/tag\/0.24.1\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the issues board](https:\/\/github.com\/soketi\/soketi\/issues)\n* Email us at [alex@renoki.org](mailto:alex@renoki.org)",
            "published_date":"2022-01-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/soketi\/soketi",
            "commit_href":"https:\/\/github.com\/soketi\/soketi\/commit\/4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "commit_sha":"4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "patch":"SINGLE",
            "chain_ord":"['4b12efef9c31117c36a0a0f1c3aa32114e86364b']",
            "before_first_fix_commit":"{'8541e4e07c97de7b6fd2ce22f4e072ef1072d627', '53ba39c7886c614d27633d347dbd93faac9dbdc0'}",
            "last_fix_commit":"4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/07\/2022, 11:26:17",
            "message":"Merge pull request #246 from soketi\/fix\/crash-on-empty-post\n\n[fix] Do not close the connection on empty POST payload",
            "author":"rennokki",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 7, 'total': 16}",
            "files":"{'src\/http-handler.ts': {'additions': 9, 'deletions': 7, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/soketi\/soketi\/raw\/4b12efef9c31117c36a0a0f1c3aa32114e86364b\/src%2Fhttp-handler.ts', 'patch': \"@@ -417,19 +417,22 @@ export class HttpHandler {\\n             let chunk = Buffer.from(ab);\\n \\n             if (isLast) {\\n-                let json;\\n-                let raw;\\n+                let json = {};\\n+                let raw = '{}';\\n \\n                 if (buffer) {\\n                     try {\\n                         \/\/ @ts-ignore\\n                         json = JSON.parse(Buffer.concat([buffer, chunk]));\\n                     } catch (e) {\\n-                        res.close();\\n-                        return;\\n+                        \/\/\\n                     }\\n \\n-                    raw = Buffer.concat([buffer, chunk]).toString();\\n+                    try {\\n+                        raw = Buffer.concat([buffer, chunk]).toString();\\n+                    } catch (e) {\\n+                        \/\/\\n+                    }\\n \\n                     cb(json, raw);\\n                     loggingAction(json);\\n@@ -439,8 +442,7 @@ export class HttpHandler {\\n                         json = JSON.parse(chunk);\\n                         raw = chunk.toString();\\n                     } catch (e) {\\n-                        res.close();\\n-                        return;\\n+                        \/\/\\n                     }\\n \\n                     cb(json, raw);\"}}",
            "message_norm":"merge pull request #246 from soketi\/fix\/crash-on-empty-post\n\n[fix] do not close the connection on empty post payload",
            "language":"en",
            "entities":"[('#246', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/http-handler.ts'])",
            "num_files":1.0
        },
        {
            "index":769,
            "vuln_id":"GHSA-66rh-8fw6-59q6",
            "cwe_id":"{'CWE-915', 'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c', 'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/90bf1c551d05940898168d04066bbf15060f50cc'}",
            "dataset":"osv",
            "summary":"assign-deep Vulnerable to Prototype Pollution Versions of `assign-deep` prior to 1.0.1 and 0.4.8 are vulnerable to Prototype Pollution. The `assign` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n## Recommendation\n\nUpgrade to versions 1.0.1, 0.4.8, or later.",
            "published_date":"2019-08-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/jonschlinkert\/assign-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c",
            "commit_sha":"8e3cc4a34246733672c71e96532105384937e56c",
            "patch":"MULTI",
            "chain_ord":"['90bf1c551d05940898168d04066bbf15060f50cc', '8e3cc4a34246733672c71e96532105384937e56c']",
            "before_first_fix_commit":"{'24412bd2b59bc128437819c4a4518a7b7148d81a'}",
            "last_fix_commit":"8e3cc4a34246733672c71e96532105384937e56c",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/25\/2019, 17:46:37",
            "message":"ensure keys are valid",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 1, 'total': 10}",
            "files":"{'index.js': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/assign-deep\/raw\/8e3cc4a34246733672c71e96532105384937e56c\/index.js', 'patch': \"@@ -37,7 +37,7 @@ function extend(target, obj) {\\n   assignSymbols(target, obj);\\n \\n   for (var key in obj) {\\n-    if (key !== '__proto__' && hasOwn(obj, key)) {\\n+    if (isValidKey(key) && hasOwn(obj, key)) {\\n       var val = obj[key];\\n       if (isObject(val)) {\\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\\n@@ -68,6 +68,14 @@ function hasOwn(obj, key) {\\n   return Object.prototype.hasOwnProperty.call(obj, key);\\n }\\n \\n+\/**\\n+ * Returns true if the given `key` is a valid key that can be used for assigning properties.\\n+ *\/\\n+\\n+function isValidKey(key) {\\n+  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\\n+}\\n+\\n \/**\\n  * Expose `assign`\\n  *\/\"}}",
            "message_norm":"ensure keys are valid",
            "language":"af",
            "entities":"[('ensure', 'ACTION', ''), ('keys', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2783,
            "vuln_id":"GHSA-qmv4-jgp7-mf68",
            "cwe_id":"{'CWE-284'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails\/commit\/0057123a0321be6758845abbeb4290bf418ce542'}",
            "dataset":"osv",
            "summary":"Sails before 0.12.7 vulnerable to Broken CORS Affected versions of `sails` have an issue with the CORS configuration where the value of the origin header is reflected as the value for the `Access-Control-Allow-Origin` header. This may allow an attacker to make AJAX requests to vulnerable hosts through cross-site scripting or a malicious HTML Document, effectively bypassing the Same Origin Policy. \n\n## Mitigating Factors\n\nThis is only an issue when `allRoutes` is set to `true` and `origin` is set to `*` or left commented out in the sails CORS config file. \n\nThe problem can be compounded when the cors `credentials` setting is not provided, because at that point authenticated cross domain requests are possible.\n\n\n## Recommendation\n\nUpdate to version 0.12.7 or later.\n\nAs this vulnerability is primarily a user error, the patch for the vulnerability will simply cause the application to write an error message to the console when a vulnerable configuration is used in a production environment.\n\nWriting a proper CORS configuration is still the responsibility of the user, so it is necessary to check for the error message after installing the patch. Be sure you are not using `allRoutes: true` with `origin:'*'`, and that you uncomment `origin` and set it to a reasonable value. Ensure that if `origin` is set to `*` that you truly mean for all other websites to be able to make cross-domain requests to your API.\n\nLikewise, ensure `credentials` is uncommented out and set to the appropriate value. Make sure to explicitly set which origins may request resources via CORS.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/balderdashy\/sails",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails\/commit\/0057123a0321be6758845abbeb4290bf418ce542",
            "commit_sha":"0057123a0321be6758845abbeb4290bf418ce542",
            "patch":"SINGLE",
            "chain_ord":"['0057123a0321be6758845abbeb4290bf418ce542']",
            "before_first_fix_commit":"{'8d642f1ab3d46491cf7b73af1ec54941ff0eb84b'}",
            "last_fix_commit":"0057123a0321be6758845abbeb4290bf418ce542",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/05\/2016, 23:16:26",
            "message":"Warn about overly-permissive CORS settings when lifting in production",
            "author":"Scott Gress",
            "comments":null,
            "stats":"{'additions': 48, 'deletions': 0, 'total': 48}",
            "files":"{'lib\/hooks\/cors\/index.js': {'additions': 48, 'deletions': 0, 'changes': 48, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails\/raw\/0057123a0321be6758845abbeb4290bf418ce542\/lib%2Fhooks%2Fcors%2Findex.js', 'patch': \"@@ -44,6 +44,9 @@ module.exports = function(sails) {\\n      *\/\\n     initialize: function(cb) {\\n \\n+      \/\/ Declare an array to hold info about unsafely-configured routes.\\n+      var unsafeRoutes = [];\\n+\\n       \/\/ Once it's time to bind shadow routes, get to bindin'.\\n       sails.on('router:before', function () {\\n         \/\/ (TODO: consider changing this ^^ to `sails.after()` for consistency)\\n@@ -112,10 +115,55 @@ module.exports = function(sails) {\\n               sails.log.warn('Invalid CORS settings for route '+route);\\n             }\\n \\n+            \/\/ If the global CORS defaults are not overly permissive, check this individual route's settings.\\n+            if (sails.config.cors.allRoutes === false || sails.config.cors.origin !== '*' || sails.config.cors.credentials === false) {\\n+              var routeCorsConfig = _.defaults(optionsRouteConfigs[path][verb || 'default'], sails.config.cors);\\n+              \/\/ If they are too permissive, add the route to a list of unsafe routes to warn the user about\\n+              \/\/ when running in the production environment.\\n+              if (routeCorsConfig.origin === '*' && routeCorsConfig.credentials === true) {\\n+                unsafeRoutes.push((verb ? (verb + ' ') : '') + path);\\n+              }\\n+            }\\n+\\n           }\\n \\n         });\\n \\n+        \/\/ Log a warning if your default CORS settings are super permissive in the production environment.\\n+        if (sails.config.environment === 'production') {\\n+          \/\/ If the global CORS defaults are permissive, log a warning about that.\\n+          if (\\n+            sails.config.cors.allRoutes === true &&\\n+            sails.config.cors.origin === '*' &&\\n+            sails.config.cors.credentials === true\\n+          ) {\\n+          sails.log.error('\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                         'WARNING: You currently have your default CORS settings configured to allow\\\\n' +\\n+                         'all requests from all origins, with credentials.  This may leave your app\\\\n' +\\n+                         'open to attack by third-party sites!  Consider making your `origins` setting\\\\n' +\\n+                         'more restrictive or setting `credentials` to false, or else make certain that\\\\n' +\\n+                         'none of your routes perform sensitive actions or reveal secure information.\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n');\\n+          }\\n+          \/\/ Otherwise log a warning mentioning the particular routes that are too permissive.\\n+          else if (unsafeRoutes.length) {\\n+            sails.log.error('\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                           'WARNING: You currently have CORS settings on the following routes configured\\\\n' +\\n+                           'to allow all requests from all origins, with credentials:\\\\n\\\\n' + unsafeRoutes.join('\\\\n') + '\\\\n\\\\n' +\\n+                           'This may leave these routes open to attack by third-party sites!  Consider\\\\n'+\\n+                           'making the `origins` settings more restrictive or setting `credentials` to\\\\n' +\\n+                           'false, or else make certain that none of these routes perform sensitive\\\\n' +\\n+                           'actions or reveal secure information.\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n'\\n+                           );\\n+          }\\n+        }\\n+\\n+\\n+\\n+\\n         _.each(optionsRouteConfigs, function(config, path) {\\n           sails.router.bind('options '+path, prepareSendHeaders(config, true), null, {_middlewareType: 'CORS HOOK: preflight'});\\n         });\"}}",
            "message_norm":"warn about overly-permissive cors settings when lifting in production",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/hooks\/cors\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2398,
            "vuln_id":"GHSA-m9m5-cg5h-r582",
            "cwe_id":"{'CWE-338'}",
            "score":5.1,
            "chain":"{'https:\/\/github.com\/Absolucy\/nanorand-rs\/commit\/5ba218ac29df4786b002d7d12b47fa0c04a331f2'}",
            "dataset":"osv",
            "summary":"Improper random number generation in nanorand An issue was discovered in the nanorand crate before 0.5.1 for Rust. It caused any random number generator (even ChaCha) to return all zeroes because integer truncation was mishandled.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/Absolucy\/nanorand-rs",
            "commit_href":"https:\/\/github.com\/Absolucy\/nanorand-rs\/commit\/5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "commit_sha":"5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "patch":"SINGLE",
            "chain_ord":"['5ba218ac29df4786b002d7d12b47fa0c04a331f2']",
            "before_first_fix_commit":"{'7bf49ecbb254991585c04dd4f4d2a23cb16a1240'}",
            "last_fix_commit":"5ba218ac29df4786b002d7d12b47fa0c04a331f2",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/07\/2020, 12:33:01",
            "message":"fix: Fix random number generation",
            "author":"aspen",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 7, 'total': 14}",
            "files":"{'nanorand\/src\/gen.rs': {'additions': 7, 'deletions': 7, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Absolucy\/nanorand-rs\/raw\/5ba218ac29df4786b002d7d12b47fa0c04a331f2\/nanorand%2Fsrc%2Fgen.rs', 'patch': '@@ -101,44 +101,44 @@ impl<R: RNG> RandomRange<R> for usize {\\n \\n impl<R: RNG> RandomGen<R> for u32 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 32) as u32\\n+\\t\\tr.generate::<u64>() as u32\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u32 {\\n \\tfn random_range(r: &mut R, lower: u32, upper: u32) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 32) as u32\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u32\\n \\t}\\n }\\n \\n impl<R: RNG> RandomGen<R> for u16 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 16) as u16\\n+\\t\\tr.generate::<u64>() as u16\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u16 {\\n \\tfn random_range(r: &mut R, lower: u16, upper: u16) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 16) as u16\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u16\\n \\t}\\n }\\n \\n impl<R: RNG> RandomGen<R> for u8 {\\n \\tfn random(r: &mut R) -> Self {\\n-\\t\\t(r.generate::<u64>() >> 8) as u8\\n+\\t\\tr.generate::<u64>() as u8\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for u8 {\\n \\tfn random_range(r: &mut R, lower: u8, upper: u8) -> Self {\\n-\\t\\t(r.generate_range::<u64>(lower as u64, upper as u64) >> 8) as u8\\n+\\t\\tr.generate_range::<u64>(lower as u64, upper as u64) as u8\\n \\t}\\n }\\n \\n impl<R: RNG> RandomRange<R> for char {\\n \\tfn random_range(r: &mut R, lower: char, upper: char) -> Self {\\n \\t\\tloop {\\n-\\t\\t\\tlet ret = (r.generate_range::<u64>(lower as u64, upper as u64) >> 32) as u32;\\n+\\t\\t\\tlet ret = r.generate_range::<u64>(lower as u64, upper as u64) as u32;\\n \\t\\t\\tif let Some(c) = core::char::from_u32(ret) {\\n \\t\\t\\t\\tbreak c;\\n \\t\\t\\t}'}}",
            "message_norm":"fix: fix random number generation",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['nanorand\/src\/gen.rs'])",
            "num_files":1.0
        },
        {
            "index":3480,
            "vuln_id":"GHSA-xqj7-j8j5-f2xr",
            "cwe_id":"{'CWE-327'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839', 'https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad'}",
            "dataset":"osv",
            "summary":"Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",
            "published_date":"2018-10-16",
            "chain_len":2,
            "project":"https:\/\/github.com\/bcgit\/bc-java",
            "commit_href":"https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "commit_sha":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "patch":"MULTI",
            "chain_ord":"['73780ac522b7795fc165630aba8d5f5729acc839', '22467b6e8fe19717ecdf201c0cf91bacf04a55ad']",
            "before_first_fix_commit":"{'73780ac522b7795fc165630aba8d5f5729acc839'}",
            "last_fix_commit":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/22\/2018, 22:14:24",
            "message":"BJA-694 minor tweak to avoid method signature change",
            "author":"David Hook",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bcgit\/bc-java\/raw\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fbouncycastle%2Fcrypto%2Fgenerators%2FRSAKeyPairGenerator.java', 'patch': '@@ -157,8 +157,6 @@ public AsymmetricCipherKeyPair generateKeyPair()\\n      *\/\\n     protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger sqrdBound)\\n     {\\n-        int iterations = getNumberOfIterations(bitlength, param.getCertainty());\\n-\\n         for (int i = 0; i != 5 * bitlength; i++)\\n         {\\n             BigInteger p = new BigInteger(bitlength, 1, param.getRandom());\\n@@ -173,7 +171,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n                 continue;\\n             }\\n \\n-            if (!isProbablePrime(p, iterations))\\n+            if (!isProbablePrime(p))\\n             {\\n                 continue;\\n             }\\n@@ -189,8 +187,10 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n         throw new IllegalStateException(\"unable to generate prime number for RSA key\");\\n     }\\n \\n-    protected boolean isProbablePrime(BigInteger x, int iterations)\\n+    protected boolean isProbablePrime(BigInteger x)\\n     {\\n+        int iterations = getNumberOfIterations(x.bitLength(), param.getCertainty());\\n+\\n         \/*\\n          * Primes class for FIPS 186-4 C.3 primality checking\\n          *\/'}}",
            "message_norm":"bja-694 minor tweak to avoid method signature change",
            "language":"en",
            "entities":"[('tweak', 'FLAW', ''), ('signature', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java'])",
            "num_files":1.0
        },
        {
            "index":2289,
            "vuln_id":"GHSA-jppv-gw3r-w3q8",
            "cwe_id":"{'CWE-78'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/ruby\/rake\/commit\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee'}",
            "dataset":"osv",
            "summary":"OS Command Injection in Rake There is an OS command injection vulnerability in Ruby Rake before 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.",
            "published_date":"2020-02-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/ruby\/rake",
            "commit_href":"https:\/\/github.com\/ruby\/rake\/commit\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "commit_sha":"5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "patch":"SINGLE",
            "chain_ord":"['5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee']",
            "before_first_fix_commit":"{'6497ba4d94d12c123df48cc8ab40f0a4eb7fb337'}",
            "last_fix_commit":"5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/22\/2019, 01:23:43",
            "message":"Use File.open explicitly.",
            "author":"Hiroshi SHIBATA",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/rake\/file_list.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ruby\/rake\/raw\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee\/lib%2Frake%2Ffile_list.rb', 'patch': '@@ -294,7 +294,7 @@ def egrep(pattern, *options)\\n       matched = 0\\n       each do |fn|\\n         begin\\n-          open(fn, \"r\", *options) do |inf|\\n+          File.open(fn, \"r\", *options) do |inf|\\n             count = 0\\n             inf.each do |line|\\n               count += 1'}}",
            "message_norm":"use file.open explicitly.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/rake\/file_list.rb'])",
            "num_files":1.0
        },
        {
            "index":665,
            "vuln_id":"GHSA-5pg2-qg87-vmj7",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/9ebbb4dd35da74025ab6965f722829a7f8f86566'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber Cross-site Scripting (XSS) - Stored in GitHub repository microweber\/microweber prior to 1.2.19.",
            "published_date":"2022-07-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/9ebbb4dd35da74025ab6965f722829a7f8f86566",
            "commit_sha":"9ebbb4dd35da74025ab6965f722829a7f8f86566",
            "patch":"SINGLE",
            "chain_ord":"['9ebbb4dd35da74025ab6965f722829a7f8f86566']",
            "before_first_fix_commit":"{'c2991b3a44896320a834a4b611257db587129645'}",
            "last_fix_commit":"9ebbb4dd35da74025ab6965f722829a7f8f86566",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/01\/2022, 08:07:47",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'src\/MicroweberPackages\/App\/functions\/plupload.php': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/9ebbb4dd35da74025ab6965f722829a7f8f86566\/src%2FMicroweberPackages%2FApp%2Ffunctions%2Fplupload.php', 'patch': \"@@ -336,9 +336,12 @@\\n \/\/ Make sure the fileName is unique but only if chunking is disabled\\n if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {\\n     $ext = strrpos($fileName, '.');\\n+\\n     $fileName_a = substr($fileName, 0, $ext);\\n     $fileName_b = substr($fileName, $ext);\\n \\n+    $fileName_b = strtolower($fileName_b);\\n+\\n     $count = 1;\\n     while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {\\n         ++$count;\\n@@ -500,7 +503,7 @@\\n \\n     if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {\\n         $ext = get_file_extension($filePath);\\n-\\n+        $ext = strtolower($ext);\\n         if (function_exists('finfo_open') and function_exists('finfo_file')) {\\n             $finfo = finfo_open(FILEINFO_MIME_TYPE); \/\/ return mime type ala mimetype extension\\n             $mime = @finfo_file($finfo, $filePath);\"}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/App\/functions\/plupload.php'])",
            "num_files":1.0
        },
        {
            "index":1077,
            "vuln_id":"GHSA-7rg4-266c-jqw6",
            "cwe_id":"{'CWE-330', 'CWE-352'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/centreon\/centreon\/commit\/626d3fb91cef402df0ebda5a8165d8f45da67c7a', 'https:\/\/github.com\/centreon\/centreon\/commit\/0261d4b250135eb513fdb7d52ba6fdeb19c6863f'}",
            "dataset":"osv",
            "summary":"Predictable CSRF tokens in centreon\/centreon An issue was discovered in Centreon-Web in Centreon Platform 20.10.0. The anti-CSRF token generation is predictable, which might allow CSRF attacks that add an admin user.",
            "published_date":"2021-06-08",
            "chain_len":2,
            "project":"https:\/\/github.com\/centreon\/centreon",
            "commit_href":"https:\/\/github.com\/centreon\/centreon\/commit\/626d3fb91cef402df0ebda5a8165d8f45da67c7a",
            "commit_sha":"626d3fb91cef402df0ebda5a8165d8f45da67c7a",
            "patch":"MULTI",
            "chain_ord":"['0261d4b250135eb513fdb7d52ba6fdeb19c6863f', '626d3fb91cef402df0ebda5a8165d8f45da67c7a']",
            "before_first_fix_commit":"{'9a69f217db9af7820823df14a5fa737d554aa2c8'}",
            "last_fix_commit":"626d3fb91cef402df0ebda5a8165d8f45da67c7a",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/24\/2021, 13:36:03",
            "message":"fix(sec): use openssl_random_pseudo_bytes to generate csrf token (#9612)\n\nRefs: MON-6772",
            "author":"Kevin Duret",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 5, 'total': 7}",
            "files":"{'www\/lib\/HTML\/QuickForm\/HTML_QuickFormCustom.php': {'additions': 2, 'deletions': 5, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/centreon\/centreon\/raw\/626d3fb91cef402df0ebda5a8165d8f45da67c7a\/www%2Flib%2FHTML%2FQuickForm%2FHTML_QuickFormCustom.php', 'patch': \"@@ -85,12 +85,9 @@ public function &createElement($elementType)\\n      *\/\\n     public function createSecurityToken()\\n     {\\n-        $token = md5(uniqid());\\n+        $token = bin2hex(openssl_random_pseudo_bytes(16));\\n \\n-        if (false === isset($_SESSION['x-centreon-token']) &&\\n-            (isset($_SESSION['x-centreon-token']) &&\\n-                false === is_array($_SESSION['x-centreon-token']))\\n-        ) {\\n+        if (!isset($_SESSION['x-centreon-token']) || !is_array($_SESSION['x-centreon-token'])) {\\n             $_SESSION['x-centreon-token'] = array();\\n             $_SESSION['x-centreon-token-generated-at'] = array();\\n         }\"}}",
            "message_norm":"fix(sec): use openssl_random_pseudo_bytes to generate csrf token (#9612)\n\nrefs: mon-6772",
            "language":"en",
            "entities":"[('fix(sec', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('#9612', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['www\/lib\/HTML\/QuickForm\/HTML_QuickFormCustom.php'])",
            "num_files":1.0
        },
        {
            "index":357,
            "vuln_id":"GHSA-44qp-9wwf-734r",
            "cwe_id":"{'CWE-787', 'CWE-120'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3'}",
            "dataset":"osv",
            "summary":"Heap overflow in Tensorflow ### Impact \nThe [implementation of `SparseCountSparseOutput`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/count_ops.cc#L168-L273) is vulnerable to a heap overflow:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[-1,-1]],\n  values=[2],\n  dense_shape=[1, 1],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a",
            "commit_sha":"2b7100d6cdff36aa21010a82269bc05a6d1cc74a",
            "patch":"MULTI",
            "chain_ord":"['2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'adbbabdb0d3abb3cdeac69e38a96de1d678b24b3']",
            "before_first_fix_commit":"{'2b7100d6cdff36aa21010a82269bc05a6d1cc74a'}",
            "last_fix_commit":"adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2021, 03:36:18",
            "message":"Cleanup and remove duplicate validation in `SparseCount`.\n\nWe have valdiation that is duplicated, checking different conditions, in different formats and failing to capture all cases. This should fix all the previous bugs.\n\nPiperOrigin-RevId: 414886981\nChange-Id: Ibf0bba0beb057b76d505324bb9487565daf95f01",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 27, 'total': 48}",
            "files":"{'tensorflow\/core\/kernels\/count_ops.cc': {'additions': 21, 'deletions': 27, 'changes': 48, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a\/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -185,6 +185,27 @@ class SparseCount : public OpKernel {\\n                 errors::InvalidArgument(\\n                     \"Input indices must be a 2-dimensional tensor. Got: \",\\n                     indices.shape().DebugString()));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(values.shape()),\\n+                errors::InvalidArgument(\"Input values must be a vector. Got: \",\\n+                                        values.shape().DebugString()));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(shape.shape()),\\n+                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\\n+                                        shape.shape().DebugString()));\\n+    OP_REQUIRES(context,\\n+                values.shape().dim_size(0) == indices.shape().dim_size(0),\\n+                errors::InvalidArgument(\\n+                    \"Number of values must match first dimension of indices.\",\\n+                    \"Got \", values.shape().dim_size(0),\\n+                    \" values, indices shape: \", indices.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, shape.shape().dim_size(0) == indices.shape().dim_size(1),\\n+        errors::InvalidArgument(\\n+            \"Number of dimensions must match second dimension of indices.\",\\n+            \"Got \", shape.shape().dim_size(0),\\n+            \" dimensions, indices shape: \", indices.shape().DebugString()));\\n+    OP_REQUIRES(context, shape.NumElements() > 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n \\n     if (use_weights) {\\n       OP_REQUIRES(\\n@@ -195,28 +216,11 @@ class SparseCount : public OpKernel {\\n               \"; values shape: \", values.shape().DebugString()));\\n     }\\n \\n-    OP_REQUIRES(context, shape.NumElements() != 0,\\n-                errors::InvalidArgument(\\n-                    \"The shape argument requires at least one element.\"));\\n-\\n     bool is_1d = shape.NumElements() == 1;\\n     auto shape_vector = shape.flat<int64_t>();\\n     int num_batches = is_1d ? 1 : shape_vector(0);\\n     int num_values = values.NumElements();\\n \\n-    for (int b = 0; b < shape_vector.size(); b++) {\\n-      OP_REQUIRES(context, shape_vector(b) >= 0,\\n-                  errors::InvalidArgument(\\n-                      \"Elements in dense_shape must be >= 0. Instead got:\",\\n-                      shape.DebugString()));\\n-    }\\n-\\n-    OP_REQUIRES(context, num_values == indices.shape().dim_size(0),\\n-                errors::InvalidArgument(\\n-                    \"Number of values must match first dimension of indices.\",\\n-                    \"Got \", num_values,\\n-                    \" values, indices shape: \", indices.shape().DebugString()));\\n-\\n     const auto indices_values = indices.matrix<int64_t>();\\n     const auto values_values = values.flat<T>();\\n     const auto weight_values = weights.flat<W>();\\n@@ -225,16 +229,6 @@ class SparseCount : public OpKernel {\\n \\n     T max_value = 0;\\n \\n-    OP_REQUIRES(context, num_values <= indices.shape().dim_size(0),\\n-                errors::InvalidArgument(\\n-                    \"The first dimension of indices must be equal to or \"\\n-                    \"greather than number of values. ( \",\\n-                    indices.shape().dim_size(0), \" vs. \", num_values, \" )\"));\\n-    OP_REQUIRES(context, indices.shape().dim_size(1) > 0,\\n-                errors::InvalidArgument(\"The second dimension of indices must \"\\n-                                        \"be greater than 0. Received: \",\\n-                                        indices.shape().dim_size(1)));\\n-\\n     for (int idx = 0; idx < num_values; ++idx) {\\n       int batch = is_1d ? 0 : indices_values(idx, 0);\\n       if (batch >= num_batches) {'}}",
            "message_norm":"cleanup and remove duplicate validation in `sparsecount`.\n\nwe have valdiation that is duplicated, checking different conditions, in different formats and failing to capture all cases. this should fix all the previous bugs.\n\npiperorigin-revid: 414886981\nchange-id: ibf0bba0beb057b76d505324bb9487565daf95f01",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('duplicate validation', 'SECWORD', ''), ('fix', 'ACTION', ''), ('bugs', 'FLAW', ''), ('414886981', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/count_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":24,
            "vuln_id":"GHSA-24x4-6qmh-88qg",
            "cwe_id":"{'CWE-416'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b'}",
            "dataset":"osv",
            "summary":"Use after free in `DecodePng` kernel ### Impact\nA malicious user can cause a use after free behavior when [decoding PNG images](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/kernels\/image\/decode_image_op.cc#L339-L346):\n```cc\nif (\/* ... error conditions ... *\/) {\n  png::CommonFreeDecode(&decode);\n  OP_REQUIRES(context, false,\n              errors::InvalidArgument(\"PNG size too large for int: \",\n                                      decode.width, \" by \", decode.height));\n}   \n```\nAfter `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state.\n\n### Patches\nWe have patched the issue in GitHub commit [e746adbfcfee15e9cfdb391ff746c765b99bdf9b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "commit_sha":"e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "patch":"SINGLE",
            "chain_ord":"['e746adbfcfee15e9cfdb391ff746c765b99bdf9b']",
            "before_first_fix_commit":"{'3098fd96f45207b030c48ac78922d6221a4c421a'}",
            "last_fix_commit":"e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/12\/2021, 03:12:19",
            "message":"Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 1, 'total': 1}",
            "files":"{'tensorflow\/core\/kernels\/image\/decode_image_op.cc': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fdecode_image_op.cc', 'patch': '@@ -339,7 +339,6 @@ class DecodeImageV2Op : public OpKernel {\\n     if (width != static_cast<int64_t>(decode.width) || width <= 0 ||\\n         width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||\\n         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {\\n-      png::CommonFreeDecode(&decode);\\n       OP_REQUIRES(context, false,\\n                   errors::InvalidArgument(\"PNG size too large for int: \",\\n                                           decode.width, \" by \", decode.height));'}}",
            "message_norm":"prevent use after free in `decodepng` kernel.\n\nwe are cleaning up the memory in `decode` and then we are using an `op_requires` to check an invariant on the `decode` data.\n\npiperorigin-revid: 409299145\nchange-id: i4eb93aaca52483eb202e89b78df07fbb2f6cb254",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('use after free', 'SECWORD', ''), ('decodepng', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('409299145', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/decode_image_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2946,
            "vuln_id":"GHSA-rgvq-pcvf-hx75",
            "cwe_id":"{'CWE-131'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e'}",
            "dataset":"osv",
            "summary":"Heap OOB and null pointer dereference in `RaggedTensorToTensor` ### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e",
            "commit_sha":"b761c9b652af2107cfbc33efd19be0ce41daa33e",
            "patch":"MULTI",
            "chain_ord":"['f94ef358bb3e91d517446454edff6535bcfe8e4a', 'b761c9b652af2107cfbc33efd19be0ce41daa33e', 'c4d7afb6a5986b04505aca4466ae1951686c80f6']",
            "before_first_fix_commit":"{'50034ad2d55b10eb9d4593374546710b12f134e1'}",
            "last_fix_commit":"c4d7afb6a5986b04505aca4466ae1951686c80f6",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/15\/2021, 20:28:49",
            "message":"Fix `tf.raw_ops.RaggedTensorToTensor` failing CHECK.\n\nPiperOrigin-RevId: 368706628\nChange-Id: I5c9ea4833f38835ee183ca50d63251dc89c9f3bc",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 9, 'total': 20}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc': {'additions': 11, 'deletions': 9, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b761c9b652af2107cfbc33efd19be0ce41daa33e\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_tensor_op.cc', 'patch': '@@ -208,7 +208,7 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n   }\\n \\n   void CalculateOutputIndexRowSplit(\\n-      const RowPartitionTensor& row_split,\\n+      OpKernelContext* context, const RowPartitionTensor& row_split,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n@@ -233,7 +233,8 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n       }\\n     }\\n     if (row_split_size > 0) {\\n-      DCHECK_EQ(result->size(), row_split(row_split_size - 1));\\n+      OP_REQUIRES(context, result->size() == row_split(row_split_size - 1),\\n+                  errors::InvalidArgument(\"Invalid row split size.\"));\\n     }\\n   }\\n \\n@@ -259,7 +260,7 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n   \/\/ result[7] = -1 because parent_output_index[value_rowids[6]] == -1\\n   \/\/ result[8] = parent_output_index[value_rowids[7]]\\n   void CalculateOutputIndexValueRowID(\\n-      const RowPartitionTensor& value_rowids,\\n+      OpKernelContext* context, const RowPartitionTensor& value_rowids,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n@@ -293,7 +294,8 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n       }\\n       result->push_back(current_output_index);\\n     }\\n-    DCHECK_EQ(result->size(), value_rowids.size());\\n+    OP_REQUIRES(context, result->size() == value_rowids.size(),\\n+                errors::InvalidArgument(\"Invalid row ids.\"));\\n   }\\n \\n   Status CalculateOutputIndex(OpKernelContext* context, int dimension,\\n@@ -307,13 +309,13 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n     switch (partition_type) {\\n       case RowPartitionType::VALUE_ROWIDS:\\n         CalculateOutputIndexValueRowID(\\n-            row_partition_tensor, parent_output_index, output_index_multiplier,\\n-            output_size, result);\\n+            context, row_partition_tensor, parent_output_index,\\n+            output_index_multiplier, output_size, result);\\n         return tensorflow::Status::OK();\\n       case RowPartitionType::ROW_SPLITS:\\n-        CalculateOutputIndexRowSplit(row_partition_tensor, parent_output_index,\\n-                                     output_index_multiplier, output_size,\\n-                                     result);\\n+        CalculateOutputIndexRowSplit(\\n+            context, row_partition_tensor, parent_output_index,\\n+            output_index_multiplier, output_size, result);\\n         return tensorflow::Status::OK();\\n       default:\\n         return errors::InvalidArgument('}}",
            "message_norm":"fix `tf.raw_ops.raggedtensortotensor` failing check.\n\npiperorigin-revid: 368706628\nchange-id: i5c9ea4833f38835ee183ca50d63251dc89c9f3bc",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('368706628', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc'])",
            "num_files":1.0
        },
        {
            "index":78,
            "vuln_id":"GHSA-2ccx-2gf3-8xvv",
            "cwe_id":"{'CWE-346'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/getkirby-v2\/panel\/commit\/7f9ac1876bacb89fd8f142f5e561a02ebb725baa'}",
            "dataset":"osv",
            "summary":"Kirby .dev domains and some reverse proxy setups were treated as local ### Impact\n\n#### About our registration block\n\nIn order to protect new installations on public servers that don't have an admin account for the Panel yet, we block account registration there by default. This is a security feature, which we implemented years ago in Kirby 2. It helps to avoid that you forget registering your first admin account on a public server. \n\nIn this case \u2013 without our security block \u2013 someone else might theoretically be able to find your site, find out it's running on Kirby, find the Panel and then register the account first. It's an unlikely situation, but it's still a certain risk.\n\nTo be able to register the first Panel account on a public server, you have to enforce the installer via a config setting. This helps to push all users to the best practice of registering your first Panel account on your local machine and upload it together with the rest of the site. \n\n#### The issue\n\nAs noted by [Jukka Rautanen](https:\/\/github.com\/jukra), this installation block implementation in Kirby versions before 3.3.6 still assumed that .dev domains are local domains, which is no longer true. In the meantime, those domains became publicly available. This means that our installation block is no longer working as expected if you use a .dev domain for your Kirby site.\n\nIn fixing this issue, we've also found out that the local installation check may also fail if your site is behind a reverse proxy. \n\n#### Am I affected?\n\nYou are only affected if:\n\n1. you use a .dev domain or your site is behind a reverse proxy &\n2. you have not yet registered your first Panel account on the public server & \n3. someone finds your site and tries to login at `yourdomain.dev\/panel` before you register your first account.\n\nYou are not affected if you have already created one or multiple Panel accounts (no matter if on a .dev domain or behind a reverse proxy).\n\n### Patches\n\nThe problem has been patched in [Kirby 2.5.14](https:\/\/github.com\/getkirby-v2\/panel\/releases\/tag\/2.5.14) and [Kirby 3.3.6](https:\/\/github.com\/getkirby\/kirby\/releases\/tag\/3.3.6). Please update to one of these or a [later version](https:\/\/github.com\/getkirby\/kirby\/releases) to fix the vulnerability.\n\n**Note:** Kirby 2 reaches end of life on December 31, 2020. We therefore recommend to upgrade your Kirby 2 sites to Kirby 3. If you cannot upgrade, we still recommend to update to Kirby 2.5.14.\n\n### Workarounds\n\nKirby 2 sites on older releases can also be patched by applying the [changes from this commit](https:\/\/github.com\/getkirby-v2\/panel\/commit\/7f9ac1876bacb89fd8f142f5e561a02ebb725baa).",
            "published_date":"2021-01-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/getkirby-v2\/panel",
            "commit_href":"https:\/\/github.com\/getkirby-v2\/panel\/commit\/7f9ac1876bacb89fd8f142f5e561a02ebb725baa",
            "commit_sha":"7f9ac1876bacb89fd8f142f5e561a02ebb725baa",
            "patch":"SINGLE",
            "chain_ord":"['7f9ac1876bacb89fd8f142f5e561a02ebb725baa']",
            "before_first_fix_commit":"{'5a569d4e3ddaea2b6628d7ec1472a3e8bc410881'}",
            "last_fix_commit":"7f9ac1876bacb89fd8f142f5e561a02ebb725baa",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/01\/2020, 10:11:11",
            "message":"Better check for local environments",
            "author":"Bastian Allgeier",
            "comments":null,
            "stats":"{'additions': 41, 'deletions': 7, 'total': 48}",
            "files":"{'app\/src\/panel.php': {'additions': 41, 'deletions': 7, 'changes': 48, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/getkirby-v2\/panel\/raw\/7f9ac1876bacb89fd8f142f5e561a02ebb725baa\/app%2Fsrc%2Fpanel.php', 'patch': \"@@ -493,13 +493,47 @@ public function license() {\\n   }\\n \\n   public function isLocal() {\\n-    $localhosts = array('::1', '127.0.0.1', '0.0.0.0');\\n-    return (\\n-      in_array(server::get('SERVER_ADDR'), $localhosts) ||\\n-      server::get('SERVER_NAME') == 'localhost' ||\\n-      str::endsWith(server::get('SERVER_NAME'), '.localhost') ||\\n-      str::endsWith(server::get('SERVER_NAME'), '.test')\\n-    );\\n+\\n+    $host = server::get('SERVER_NAME');\\n+    $ip   = server::get('SERVER_ADDR');\\n+\\n+    if ($host === 'localhost') {\\n+      return true;\\n+    }\\n+\\n+    if (str::endsWith($host, '.localhost') === true) {\\n+      return true;\\n+    }\\n+\\n+    if (str::endsWith($host, '.local') === true) {\\n+      return true;\\n+    }\\n+\\n+    if (str::endsWith($host, '.test') === true) {\\n+      return true;\\n+    }\\n+\\n+    if (in_array($ip, ['::1', '127.0.0.1']) === true) {\\n+\\n+      if (\\n+        isset($_SERVER['HTTP_X_FORWARDED_FOR']) === true &&\\n+        in_array($_SERVER['HTTP_X_FORWARDED_FOR'], ['::1', '127.0.0.1']) === false\\n+      ) {\\n+        return false;\\n+      }\\n+\\n+      if (\\n+        isset($_SERVER['HTTP_CLIENT_IP']) === true &&\\n+        in_array($_SERVER['HTTP_CLIENT_IP'], ['::1', '127.0.0.1']) === false\\n+      ) {\\n+        return false;\\n+      }\\n+\\n+      \/\/ no reverse proxy or the real client also comes from localhost\\n+      return true;\\n+    }\\n+\\n+    return false;\\n   }\\n \\n   public function notify($text) {\"}}",
            "message_norm":"better check for local environments",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/src\/panel.php'])",
            "num_files":1.0
        },
        {
            "index":629,
            "vuln_id":"GHSA-5fxf-x22x-5q38",
            "cwe_id":"{'CWE-79'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/de6d17b52d261902653fbdd2ecefcaac82e54256'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber XSS on dynamic_text module in GitHub repository microweber\/microweber prior to 1.2.12.",
            "published_date":"2022-03-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/de6d17b52d261902653fbdd2ecefcaac82e54256",
            "commit_sha":"de6d17b52d261902653fbdd2ecefcaac82e54256",
            "patch":"SINGLE",
            "chain_ord":"['de6d17b52d261902653fbdd2ecefcaac82e54256']",
            "before_first_fix_commit":"{'095b1bcea7a4384f0d0513906100212df136a1e4'}",
            "last_fix_commit":"de6d17b52d261902653fbdd2ecefcaac82e54256",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/11\/2022, 13:38:50",
            "message":"Update build-and-upload.yml",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 1, 'total': 1}",
            "files":"{'.github\/workflows\/build-and-upload.yml': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/de6d17b52d261902653fbdd2ecefcaac82e54256\/.github%2Fworkflows%2Fbuild-and-upload.yml', 'patch': '@@ -6,7 +6,6 @@ on:\\n jobs:\\n   microweber-test-before-build:\\n     runs-on: ubuntu-latest\\n-    needs: stop-previous-runs\\n     steps:\\n       - uses: actions\/checkout@v2'}}",
            "message_norm":"update build-and-upload.yml",
            "language":"en",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['.github\/workflows\/build-and-upload.yml'])",
            "num_files":1.0
        },
        {
            "index":2545,
            "vuln_id":"GHSA-p9pc-299p-vxgp",
            "cwe_id":"{'CWE-915'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/yargs\/yargs-parser\/commit\/63810ca1ae1a24b08293a4d971e70e058c7a41e2', 'https:\/\/github.com\/yargs\/yargs-parser\/commit\/1c417bd0b42b09c475ee881e36d292af4fa2cc36'}",
            "dataset":"osv",
            "summary":"yargs-parser Vulnerable to Prototype Pollution Affected versions of `yargs-parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `--foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs-parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.",
            "published_date":"2020-09-04",
            "chain_len":2,
            "project":"https:\/\/github.com\/yargs\/yargs-parser",
            "commit_href":"https:\/\/github.com\/yargs\/yargs-parser\/commit\/1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "commit_sha":"1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "patch":"MULTI",
            "chain_ord":"['63810ca1ae1a24b08293a4d971e70e058c7a41e2', '1c417bd0b42b09c475ee881e36d292af4fa2cc36']",
            "before_first_fix_commit":"{'e93a345e1e585ba5df97c1da438673e7f2e8909b'}",
            "last_fix_commit":"1c417bd0b42b09c475ee881e36d292af4fa2cc36",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/10\/2021, 19:14:27",
            "message":"fix(security): address GHSA-p9pc-299p-vxgp (#362)\n\nUpdate release automation to allow for back ports.",
            "author":"Benjamin E. Coe",
            "comments":"{'com_1': {'author': 'kennethalegre19', 'datetime': '10\/19\/2021, 05:07:29', 'body': '`.github\/workflows\/release-please.yml'}}",
            "stats":"{'additions': 15, 'deletions': 0, 'total': 15}",
            "files":"{'.github\/workflows\/release-please.yml': {'additions': 15, 'deletions': 0, 'changes': 15, 'status': 'added', 'raw_url': 'https:\/\/github.com\/yargs\/yargs-parser\/raw\/1c417bd0b42b09c475ee881e36d292af4fa2cc36\/.github%2Fworkflows%2Frelease-please.yml', 'patch': '@@ -0,0 +1,15 @@\\n+on:\\n+   push:\\n+     branches:\\n+       - v5.x.x\\n+name: release-please\\n+jobs:\\n+  release-please:\\n+    runs-on: ubuntu-latest\\n+    steps:\\n+      - uses: google-github-actions\/release-please-action@v2\\n+        with:\\n+          token: ${{ secrets.GITHUB_TOKEN }}\\n+          release-type: node\\n+          package-name: yargs-parser\\n+          default-branch: v5.x.x'}}",
            "message_norm":"fix(security): address ghsa-p9pc-299p-vxgp (#362)\n\nupdate release automation to allow for back ports.",
            "language":"en",
            "entities":"[('fix(security', 'SECWORD', ''), ('ghsa-p9pc-299p-vxgp', 'VULNID', 'GHSA'), ('#362', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['.github\/workflows\/release-please.yml'])",
            "num_files":1.0
        },
        {
            "index":1285,
            "vuln_id":"GHSA-8xqr-4cpm-wx7g",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/tanem\/react-svg\/pull\/57\/commits\/ec7de5d678f53a085cee1348cb1aa069c9fc42fb'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in react-svg Versions of `react-svg` before 2.2.18 are vulnerable to cross-site scripting (xss). This is due to the fact that scripts found in SVG files are run by default.\n\n\n## Recommendation\n\nUpdate to version 2.2.18 or later.",
            "published_date":"2019-05-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/tanem\/react-svg",
            "commit_href":"https:\/\/github.com\/tanem\/react-svg\/pull\/57\/commits\/ec7de5d678f53a085cee1348cb1aa069c9fc42fb",
            "commit_sha":"ec7de5d678f53a085cee1348cb1aa069c9fc42fb",
            "patch":"SINGLE",
            "chain_ord":"['ec7de5d678f53a085cee1348cb1aa069c9fc42fb']",
            "before_first_fix_commit":"{'9fa13da92cc4c44a10b6e2aced023d3199e8c6bb'}",
            "last_fix_commit":"ec7de5d678f53a085cee1348cb1aa069c9fc42fb",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2018, 18:37:51",
            "message":"Changed default evalScripts prop to match documentation.",
            "author":"Ron Perris",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tanem\/react-svg\/raw\/ec7de5d678f53a085cee1348cb1aa069c9fc42fb\/src%2Findex.js', 'patch': \"@@ -10,7 +10,7 @@ export default class ReactSVG extends React.Component {\\n   static defaultProps = {\\n     callback: () => {},\\n     className: null,\\n-    evalScripts: 'once',\\n+    evalScripts: 'never',\\n     style: {},\\n     wrapperClassName: null\\n   }\"}}",
            "message_norm":"changed default evalscripts prop to match documentation.",
            "language":"en",
            "entities":"[('changed', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.js'])",
            "num_files":1.0
        },
        {
            "index":3118,
            "vuln_id":"GHSA-vh5c-jqfg-mhrh",
            "cwe_id":"{'CWE-352'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/69548c0320cbd772540cf4668743e69f879812cf', 'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/f0440dfcbba705e03f7565cd88893dde57ca3fa8'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery in xwiki-platform ### Impact\nIt's possible to know if a user has or not an account in a wiki related to an email address, and which username(s) is actually tight to that email by forging a request to the Forgot username page. Note that since this page does not have a CSRF check it's quite easy to perform a lot of those requests.\n\n### Patches\nThis issue has been patched in XWiki 12.10.5 and 13.2RC1. Two different patches are provided:\n  - a first one to fix the CSRF problem\n  - a more complex one that now relies on sending an email for the Forgot username process.\n\n### Workarounds\nIt's possible to fix the problem without uprading by editing the ForgotUsername page in version below 13.x, to use the following code: https:\/\/github.com\/xwiki\/xwiki-platform\/blob\/69548c0320cbd772540cf4668743e69f879812cf\/xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml#L39-L123\n\nIn version after 13.x it's also possible to edit manually the forgotusername.vm file, but it's really encouraged to upgrade the version here.\n\n### References\n  * https:\/\/jira.xwiki.org\/browse\/XWIKI-18384\n  * https:\/\/jira.xwiki.org\/browse\/XWIKI-18408\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Jira XWiki](https:\/\/jira.xwiki.org)\n* Email us at [security ML](mailto:security@xwiki.org)",
            "published_date":"2022-02-10",
            "chain_len":2,
            "project":"https:\/\/github.com\/xwiki\/xwiki-platform",
            "commit_href":"https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/69548c0320cbd772540cf4668743e69f879812cf",
            "commit_sha":"69548c0320cbd772540cf4668743e69f879812cf",
            "patch":"MULTI",
            "chain_ord":"['f0440dfcbba705e03f7565cd88893dde57ca3fa8', '69548c0320cbd772540cf4668743e69f879812cf']",
            "before_first_fix_commit":"{'dfa1479abcdbc3a3b906fdab62841c22f5c13e38'}",
            "last_fix_commit":"69548c0320cbd772540cf4668743e69f879812cf",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/09\/2021, 12:23:38",
            "message":"XWIKI-18408: Wrong check in forgot username",
            "author":"Simon Urli",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 2, 'total': 11}",
            "files":"{'xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml': {'additions': 9, 'deletions': 2, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/xwiki\/xwiki-platform\/raw\/69548c0320cbd772540cf4668743e69f879812cf\/xwiki-platform-core%2Fxwiki-platform-administration%2Fxwiki-platform-administration-ui%2Fsrc%2Fmain%2Fresources%2FXWiki%2FForgotUsername.xml', 'patch': '@@ -38,12 +38,19 @@\\n   <hidden>true<\/hidden>\\n   <content>{{velocity}}\\n #set($email = \"$!request.get(\\'e\\')\")\\n-#if($email == \\'\\')\\n+#if($email == \\'\\' || !$services.csrf.isTokenValid($request.form_token))\\n {{translation key=\"xe.admin.forgotUsername.instructions\"\/}}\\n \\n {{html}}\\n   &lt;form method=\"post\" action=\"$doc.getURL()\" class=\"xformInline\"&gt;\\n-    &lt;div&gt;&lt;label for=\"e\"&gt;$services.localization.render(\\'xe.admin.forgotUsername.email.label\\')&lt;\/label&gt; &lt;input type=\"text\" id=\"e\" name=\"e\"\/&gt; &lt;span class=\"buttonwrapper\"&gt;&lt;input type=\"submit\" value=\"$services.localization.render(\\'xe.admin.forgotUsername.submit\\')\" class=\"button\"\/&gt;&lt;\/span&gt;&lt;\/div&gt;\\n+    &lt;div&gt;\\n+      &lt;label for=\"e\"&gt;$services.localization.render(\\'xe.admin.forgotUsername.email.label\\')&lt;\/label&gt;\\n+      &lt;input type=\"text\" id=\"e\" name=\"e\"\/&gt;\\n+      &lt;input type=\"hidden\" name=\"form_token\" value=\"$services.csrf.getToken()\"\/&gt;\\n+      &lt;span class=\"buttonwrapper\"&gt;\\n+        &lt;input type=\"submit\" value=\"$services.localization.render(\\'xe.admin.forgotUsername.submit\\')\" class=\"button\"\/&gt;\\n+      &lt;\/span&gt;\\n+    &lt;\/div&gt;\\n   &lt;\/form&gt;\\n {{\/html}}'}}",
            "message_norm":"xwiki-18408: wrong check in forgot username",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['xwiki-platform-core\/xwiki-platform-administration\/xwiki-platform-administration-ui\/src\/main\/resources\/XWiki\/ForgotUsername.xml'])",
            "num_files":1.0
        },
        {
            "index":1334,
            "vuln_id":"GHSA-97gv-3p2c-xw7j",
            "cwe_id":"{'CWE-74', 'CWE-400'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/oliversalzburg\/i18n-node-angular\/commit\/877720d2d9bb90dc8233706e81ffa03f99fc9dc8'}",
            "dataset":"osv",
            "summary":"Denial of Service and Content Injection in i18n-node-angular Versions of `i18n-node-angular` prior to 1.4.0 are affected by denial of service and cross-site scripting vulnerabilities. The vulnerabilities exist in a REST endpoint that was created for development purposes, but was not disabled in production in affected versions.\n\n\n## Recommendation\n\nUpdate to version 1.4.0 or later.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/oliversalzburg\/i18n-node-angular",
            "commit_href":"https:\/\/github.com\/oliversalzburg\/i18n-node-angular\/commit\/877720d2d9bb90dc8233706e81ffa03f99fc9dc8",
            "commit_sha":"877720d2d9bb90dc8233706e81ffa03f99fc9dc8",
            "patch":"SINGLE",
            "chain_ord":"['877720d2d9bb90dc8233706e81ffa03f99fc9dc8']",
            "before_first_fix_commit":"{'85ba51ac9dc47a3e232a19926791219ef9de20ee'}",
            "last_fix_commit":"877720d2d9bb90dc8233706e81ffa03f99fc9dc8",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/07\/2016, 08:40:02",
            "message":"[FIX] Only register translate route during development",
            "author":"Oliver Salzburg",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'i18n-node-routes.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/oliversalzburg\/i18n-node-angular\/raw\/877720d2d9bb90dc8233706e81ffa03f99fc9dc8\/i18n-node-routes.js', 'patch': '@@ -49,7 +49,10 @@ var configure = function( app, configObject ) {\\n \\n \\t\/\/ Register routes\\n \\tapp.get( \"\/i18n\/:locale\", i18nRoutes.i18n );\\n-\\tapp.get( \"\/i18n\/:locale\/:phrase\", i18nRoutes.translate );\\n+\\n+\\tif( process.env.NODE_ENV === \"development\" ) {\\n+\\t\\tapp.get( \"\/i18n\/:locale\/:phrase\", i18nRoutes.translate );\\n+\\t}\\n };\\n \\n \/**'}}",
            "message_norm":"[fix] only register translate route during development",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['i18n-node-routes.js'])",
            "num_files":1.0
        },
        {
            "index":1986,
            "vuln_id":"GHSA-h4mc-r4f4-hcf4",
            "cwe_id":"{'CWE-311'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/spunjs\/selenium-binaries\/commit\/be37e82a3c43a4f1679d66cf9467085ec9994c47'}",
            "dataset":"osv",
            "summary":"selenium-binaries downloads resources over HTTP Versions of `selenium-binaries` prior to 0.15.0 insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `selenium-binaries`.\n\n\n## Recommendation\n\nA fix for this vulnerability is available on the `master` branch of the repository as part of version 0.15.0.\n\nAnother mitigation currently available is to use an alternate package, such as [selenium-webdriver](https:\/\/www.npmjs.com\/package\/selenium-webdriver), the official selenium bindings for node.js.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/spunjs\/selenium-binaries",
            "commit_href":"https:\/\/github.com\/spunjs\/selenium-binaries\/commit\/be37e82a3c43a4f1679d66cf9467085ec9994c47",
            "commit_sha":"be37e82a3c43a4f1679d66cf9467085ec9994c47",
            "patch":"SINGLE",
            "chain_ord":"['be37e82a3c43a4f1679d66cf9467085ec9994c47']",
            "before_first_fix_commit":"{'75b0fd18ffd6373fd09d39c48b1df632f9649c08'}",
            "last_fix_commit":"be37e82a3c43a4f1679d66cf9467085ec9994c47",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/22\/2020, 17:20:26",
            "message":"Avoid MiTM by downloading through https (#33)\n\nCo-authored-by: Alejandro Romero Herrera <alromh87@gmail.com>\r\nCo-authored-by: Raj <70631238+418raj@users.noreply.github.com>",
            "author":"huntr-helper",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'lib\/config.js': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/spunjs\/selenium-binaries\/raw\/be37e82a3c43a4f1679d66cf9467085ec9994c47\/lib%2Fconfig.js', 'patch': \"@@ -35,7 +35,7 @@ module.exports = {\\n     seleniumserver: {\\n       version: SELENIUM_BINARIES_SERVER_STANDALONE_VERSION,\\n       url: util.format(\\n-        'http:\/\/selenium-release.storage.googleapis.com\/%s\/',\\n+        'https:\/\/selenium-release.storage.googleapis.com\/%s\/',\\n         getMajorMinorVersion(SELENIUM_BINARIES_SERVER_STANDALONE_VERSION)\\n       ),\\n       path: path.resolve(\\n@@ -55,7 +55,7 @@ module.exports = {\\n     chromedriver: {\\n       version: SELENIUM_BINARIES_CHROMEDRIVER_VERSION,\\n       url: util.format(\\n-        'http:\/\/chromedriver.storage.googleapis.com\/%s\/',\\n+        'https:\/\/chromedriver.storage.googleapis.com\/%s\/',\\n         SELENIUM_BINARIES_CHROMEDRIVER_VERSION\\n       ),\\n       path: path.resolve(\\n@@ -89,7 +89,7 @@ module.exports = {\\n     iedriver: {\\n       version: SELENIUM_BINARIES_IEDRIVER_VERSION,\\n       url: util.format(\\n-        'http:\/\/selenium-release.storage.googleapis.com\/%s\/',\\n+        'https:\/\/selenium-release.storage.googleapis.com\/%s\/',\\n         getMajorMinorVersion(SELENIUM_BINARIES_IEDRIVER_VERSION)\\n       ),\\n       path: path.resolve(\"}}",
            "message_norm":"avoid mitm by downloading through https (#33)\n\nco-authored-by: alejandro romero herrera <alromh87@gmail.com>\r\nco-authored-by: raj <70631238+418raj@users.noreply.github.com>",
            "language":"en",
            "entities":"[('mitm', 'SECWORD', ''), ('#33', 'ISSUE', ''), ('alromh87@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/config.js'])",
            "num_files":1.0
        }
    ]
}