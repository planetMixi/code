{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":3137,
            "vuln_id":"GHSA-vjxv-45g9-9296",
            "cwe_id":"{'CWE-347'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/sigstore\/cosign\/commit\/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94'}",
            "dataset":"osv",
            "summary":"cosign's `cosign verify-attestaton  --type` can report a false positive if any attestation exists `cosign verify-attestation` used with the `--type` flag will report a false positive verification when:\n\n- There is at least one attestation with a valid signature\n- There are NO attestations of the type being verified (--type defaults to \"custom\")\n\nThis can happen when signing with a standard keypair and with \"keyless\" signing with Fulcio. Users should upgrade to cosign version 1.10.1 or greater for a patch. Currently the only workaround is to upgrade.",
            "published_date":"2022-08-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/sigstore\/cosign",
            "commit_href":"https:\/\/github.com\/sigstore\/cosign\/commit\/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
            "commit_sha":"c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
            "patch":"SINGLE",
            "chain_ord":"['c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94']",
            "before_first_fix_commit":"{'641f02b146816da54f112e1c1227747da17e5020'}",
            "last_fix_commit":"c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/04\/2022, 16:05:27",
            "message":"Merge pull request from GHSA-vjxv-45g9-9296\n\nToday the verification logic:\n1. Verifies signatures on attestations (at least one must verify, or it errors),\n2. All attestations matching the specified `--type` must pass any specified Cue\/Rego policies,\n3. *All* signature-verified attestations are then printed.\n\nHowever, if NONE of the attestations match the specified `--type` then `2.` is considered satisfied and we proceed to `3.`\n\nThis changes the above logic to:\n1. Same.\n2. Same, but these are put into a `checked` list,\n3. `checked` must be non-empty (or an error is printed about no attestations matching `--type`),\n4. *Just* the `checked` attestations are printed.\n\n---\n\nThe bug at HEAD:\n```shell\n$ cosign verify-attestation --type spdx ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\n\nVerification for ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2 --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - Any certificates were verified against the Fulcio roots.\nCertificate subject:  https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main\nCertificate issuer URL:  https:\/\/token.actions.githubusercontent.com\nCertificate extension GitHub Workflow Trigger: schedule\nCertificate extension GitHub Workflow SHA: 7e7572e578de7c51a2f1a1791f025cf315503aa2\nCertificate extension GitHub Workflow Name: Create Release\nCertificate extension GitHub Workflow Trigger distroless\/static\nCertificate extension GitHub Workflow Ref: refs\/heads\/main\n{\"payloadType\":\"application\/vnd.in-toto+json\",\"payload\":\"eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjAuMSIsInByZWRpY2F0ZVR5cGUiOiJjb3NpZ24uc2lnc3RvcmUuZGV2L2F0dGVzdGF0aW9uL3Z1bG4vdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hjci5pby9kaXN0cm9sZXNzL3N0YXRpYyIsImRpZ2VzdCI6eyJzaGEyNTYiOiJkZDc2MTRiNWExMmJjNGQ2MTdiMjIzYzU4OGI0ZTBjODMzNDAyYjhmNDk5MWZiNTcwMmVhODNhZmFkMTk4NmUyIn19XSwicHJlZGljYXRlIjp7Imludm9jYXRpb24iOnsicGFyYW1ldGVycyI6bnVsbCwidXJpIjoiaHR0cHM6Ly9naXRodWIuY29tL2Rpc3Ryb2xlc3Mvc3RhdGljL2FjdGlvbnMvcnVucy8yNzc5MjEyNzA1IiwiZXZlbnRfaWQiOiIyNzc5MjEyNzA1IiwiYnVpbGRlci5pZCI6IkNyZWF0ZSBSZWxlYXNlIn0sInNjYW5uZXIiOnsidXJpIjoiaHR0cHM6Ly9naXRodWIuY29tL2FxdWFzZWN1cml0eS90cml2eSIsInZlcnNpb24iOiIwLjI5LjIiLCJkYiI6eyJ1cmkiOiIiLCJ2ZXJzaW9uIjoiIn0sInJlc3VsdCI6eyIkc2NoZW1hIjoiaHR0cHM6Ly9qc29uLnNjaGVtYXN0b3JlLm9yZy9zYXJpZi0yLjEuMC1ydG0uNS5qc29uIiwicnVucyI6W3siY29sdW1uS2luZCI6InV0ZjE2Q29kZVVuaXRzIiwib3JpZ2luYWxVcmlCYXNlSWRzIjp7IlJPT1RQQVRIIjp7InVyaSI6ImZpbGU6Ly8vIn19LCJyZXN1bHRzIjpbXSwidG9vbCI6eyJkcml2ZXIiOnsiZnVsbE5hbWUiOiJUcml2eSBWdWxuZXJhYmlsaXR5IFNjYW5uZXIiLCJpbmZvcm1hdGlvblVyaSI6Imh0dHBzOi8vZ2l0aHViLmNvbS9hcXVhc2VjdXJpdHkvdHJpdnkiLCJuYW1lIjoiVHJpdnkiLCJydWxlcyI6W10sInZlcnNpb24iOiIwLjI5LjIifX19XSwidmVyc2lvbiI6IjIuMS4wIn19LCJtZXRhZGF0YSI6eyJzY2FuU3RhcnRlZE9uIjoiMjAyMi0wOC0wMlQwMjozMzo0N1oiLCJzY2FuRmluaXNoZWRPbiI6IjIwMjItMDgtMDJUMDI6MzM6NTNaIn19fQ==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"MEYCIQCovBtLOBXyB2zpvhp3j6QzqLtsH0\/RC7fRINSApySqxAIhAIKlzu1fXuKPPOIheNnsPmBOB6XfZbRs5sDW1yFSch1A\"}]}\n```\n\nThe same with this change:\n```shell\n$ go run .\/cmd\/cosign verify-attestation --type spdx ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\nError: none of the attestations matched the predicate type: spdx\nmain.go:62: error during command execution: none of the attestations matched the predicate type: spdx\nexit status 1\n```\n\nA valid `--type` with this change:\n```shell\n$ go run .\/cmd\/cosign verify-attestation --type vuln ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\n\nVerification for ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2 --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - Any certificates were verified against the Fulcio roots.\nCertificate subject:  https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main\nCertificate issuer URL:  https:\/\/token.actions.githubusercontent.com\nCertificate extension GitHub Workflow Trigger: schedule\nCertificate extension GitHub Workflow SHA: 7e7572e578de7c51a2f1a1791f025cf315503aa2\nCertificate extension GitHub Workflow Name: Create Release\nCertificate extension GitHub Workflow Trigger distroless\/static\nCertificate extension GitHub Workflow Ref: refs\/heads\/main\n{\"payloadType\":\"application\/vnd.in-toto+json\",\"payload\":\"eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjAuMSIsInByZWRpY2F0ZVR5cGUiOiJjb3NpZ24uc2lnc3RvcmUuZGV2L2F0dGVzdGF0aW9uL3Z1bG4vdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiZ2hjci5pby9kaXN0cm9sZXNzL3N0YXRpYyIsImRpZ2VzdCI6eyJzaGEyNTYiOiJkZDc2MTRiNWExMmJjNGQ2MTdiMjIzYzU4OGI0ZTBjODMzNDAyYjhmNDk5MWZiNTcwMmVhODNhZmFkMTk4NmUyIn19XSwicHJlZGljYXRlIjp7Imludm9jYXRpb24iOnsicGFyYW1ldGVycyI6bnVsbCwidXJpIjoiaHR0cHM6Ly9naXRodWIuY29tL2Rpc3Ryb2xlc3Mvc3RhdGljL2FjdGlvbnMvcnVucy8yNzc5MjEyNzA1IiwiZXZlbnRfaWQiOiIyNzc5MjEyNzA1IiwiYnVpbGRlci5pZCI6IkNyZWF0ZSBSZWxlYXNlIn0sInNjYW5uZXIiOnsidXJpIjoiaHR0cHM6Ly9naXRodWIuY29tL2FxdWFzZWN1cml0eS90cml2eSIsInZlcnNpb24iOiIwLjI5LjIiLCJkYiI6eyJ1cmkiOiIiLCJ2ZXJzaW9uIjoiIn0sInJlc3VsdCI6eyIkc2NoZW1hIjoiaHR0cHM6Ly9qc29uLnNjaGVtYXN0b3JlLm9yZy9zYXJpZi0yLjEuMC1ydG0uNS5qc29uIiwicnVucyI6W3siY29sdW1uS2luZCI6InV0ZjE2Q29kZVVuaXRzIiwib3JpZ2luYWxVcmlCYXNlSWRzIjp7IlJPT1RQQVRIIjp7InVyaSI6ImZpbGU6Ly8vIn19LCJyZXN1bHRzIjpbXSwidG9vbCI6eyJkcml2ZXIiOnsiZnVsbE5hbWUiOiJUcml2eSBWdWxuZXJhYmlsaXR5IFNjYW5uZXIiLCJpbmZvcm1hdGlvblVyaSI6Imh0dHBzOi8vZ2l0aHViLmNvbS9hcXVhc2VjdXJpdHkvdHJpdnkiLCJuYW1lIjoiVHJpdnkiLCJydWxlcyI6W10sInZlcnNpb24iOiIwLjI5LjIifX19XSwidmVyc2lvbiI6IjIuMS4wIn19LCJtZXRhZGF0YSI6eyJzY2FuU3RhcnRlZE9uIjoiMjAyMi0wOC0wMlQwMjozMzo0N1oiLCJzY2FuRmluaXNoZWRPbiI6IjIwMjItMDgtMDJUMDI6MzM6NTNaIn19fQ==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"MEYCIQCovBtLOBXyB2zpvhp3j6QzqLtsH0\/RC7fRINSApySqxAIhAIKlzu1fXuKPPOIheNnsPmBOB6XfZbRs5sDW1yFSch1A\"}]}\n```\n\nSigned-off-by: Matt Moore <mattmoor@chainguard.dev>",
            "author":"Matt Moore",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 1, 'total': 11}",
            "files":"{'cmd\/cosign\/cli\/verify\/verify_attestation.go': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sigstore\/cosign\/raw\/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94\/cmd%2Fcosign%2Fcli%2Fverify%2Fverify_attestation.go', 'patch': '@@ -201,6 +201,7 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\\n \\t\\t\\t}\\n \\t\\t}\\n \\n+\\t\\tvar checked []oci.Signature\\n \\t\\tvar validationErrors []error\\n \\t\\tfor _, vp := range verified {\\n \\t\\t\\tpayload, err := policy.AttestationToPayloadJSON(ctx, c.PredicateType, vp)\\n@@ -217,6 +218,7 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\\n \\t\\t\\t\\tcueValidationErr := cue.ValidateJSON(payload, cuePolicies)\\n \\t\\t\\t\\tif cueValidationErr != nil {\\n \\t\\t\\t\\t\\tvalidationErrors = append(validationErrors, cueValidationErr)\\n+\\t\\t\\t\\t\\tcontinue\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n \\n@@ -225,8 +227,11 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\\n \\t\\t\\t\\tregoValidationErrs := rego.ValidateJSON(payload, regoPolicies)\\n \\t\\t\\t\\tif len(regoValidationErrs) > 0 {\\n \\t\\t\\t\\t\\tvalidationErrors = append(validationErrors, regoValidationErrs...)\\n+\\t\\t\\t\\t\\tcontinue\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n+\\n+\\t\\t\\tchecked = append(checked, vp)\\n \\t\\t}\\n \\n \\t\\tif len(validationErrors) > 0 {\\n@@ -237,10 +242,14 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\\n \\t\\t\\treturn fmt.Errorf(\"%d validation errors occurred\", len(validationErrors))\\n \\t\\t}\\n \\n+\\t\\tif len(checked) == 0 {\\n+\\t\\t\\treturn fmt.Errorf(\"none of the attestations matched the predicate type: %s\", c.PredicateType)\\n+\\t\\t}\\n+\\n \\t\\t\/\/ TODO: add CUE validation report to `PrintVerificationHeader`.\\n \\t\\tPrintVerificationHeader(imageRef, co, bundleVerified, fulcioVerified)\\n \\t\\t\/\/ The attestations are always JSON, so use the raw \"text\" mode for outputting them instead of conversion\\n-\\t\\tPrintVerification(imageRef, verified, \"text\")\\n+\\t\\tPrintVerification(imageRef, checked, \"text\")\\n \\t}\\n \\n \\treturn nil'}}",
            "message_norm":"merge pull request from ghsa-vjxv-45g9-9296\n\ntoday the verification logic:\n1. verifies signatures on attestations (at least one must verify, or it errors),\n2. all attestations matching the specified `--type` must pass any specified cue\/rego policies,\n3. *all* signature-verified attestations are then printed.\n\nhowever, if none of the attestations match the specified `--type` then `2.` is considered satisfied and we proceed to `3.`\n\nthis changes the above logic to:\n1. same.\n2. same, but these are put into a `checked` list,\n3. `checked` must be non-empty (or an error is printed about no attestations matching `--type`),\n4. *just* the `checked` attestations are printed.\n\n---\n\nthe bug at head:\n```shell\n$ cosign verify-attestation --type spdx ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\n\nverification for ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2 --\nthe following checks were performed on each of these signatures:\n  - the cosign claims were validated\n  - existence of the claims in the transparency log was verified offline\n  - any certificates were verified against the fulcio roots.\ncertificate subject:  https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main\ncertificate issuer url:  https:\/\/token.actions.githubusercontent.com\ncertificate extension github workflow trigger: schedule\ncertificate extension github workflow sha: 7e7572e578de7c51a2f1a1791f025cf315503aa2\ncertificate extension github workflow name: create release\ncertificate extension github workflow trigger distroless\/static\ncertificate extension github workflow ref: refs\/heads\/main\n{\"payloadtype\":\"application\/vnd.in-toto+json\",\"payload\":\"eyjfdhlwzsi6imh0dhbzoi8vaw4tdg90by5pby9tdgf0zw1lbnqvdjaumsisinbyzwrpy2f0zvr5cguioijjb3npz24uc2lnc3rvcmuuzgv2l2f0dgvzdgf0aw9ul3z1bg4vdjeilcjzdwjqzwn0ijpbeyjuyw1lijoiz2hjci5pby9kaxn0cm9szxnzl3n0yxrpyyisimrpz2vzdci6eyjzageyntyioijkzdc2mtrinwexmmjjngq2mtdimjizyzu4ogi0ztbjodmzndayyjhmndk5mwzintcwmmvhodnhzmfkmtk4nmuyin19xswichjlzgljyxrlijp7imludm9jyxrpb24ionsicgfyyw1ldgvycyi6bnvsbcwidxjpijoiahr0chm6ly9naxrodwiuy29tl2rpc3ryb2xlc3mvc3rhdgljl2fjdglvbnmvcnvucy8ynzc5mjeynza1iiwizxzlbnrfawqioiiynzc5mjeynza1iiwiynvpbgrlci5pzci6iknyzwf0zsbszwxlyxnlin0sinnjyw5uzxiionsidxjpijoiahr0chm6ly9naxrodwiuy29tl2fxdwfzzwn1cml0es90cml2esisinzlcnnpb24ioiiwlji5ljiilcjkyii6eyj1cmkioiiilcj2zxjzaw9uijoiin0sinjlc3vsdci6eyikc2nozw1hijoiahr0chm6ly9qc29ulnnjagvtyxn0b3jllm9yzy9zyxjpzi0yljeumc1ydg0uns5qc29uiiwicnvucyi6w3siy29sdw1us2luzci6inv0zje2q29kzvvuaxrziiwib3jpz2luywxvcmlcyxnlswrzijp7iljpt1rqqvriijp7invyasi6imzpbgu6ly8vin19lcjyzxn1bhrzijpbxswidg9vbci6eyjkcml2zxiionsiznvsbe5hbwuioijucml2esbwdwxuzxjhymlsaxr5ifnjyw5uzxiilcjpbmzvcm1hdglvblvyasi6imh0dhbzoi8vz2l0ahvilmnvbs9hcxvhc2vjdxjpdhkvdhjpdnkilcjuyw1lijoivhjpdnkilcjydwxlcyi6w10sinzlcnnpb24ioiiwlji5ljiifx19xswidmvyc2lvbii6ijiums4win19lcjtzxrhzgf0ysi6eyjzy2fuu3rhcnrlze9uijoimjaymi0woc0wmlqwmjozmzo0n1oilcjzy2furmluaxnozwrpbii6ijiwmjitmdgtmdjumdi6mzm6ntnain19fq==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"meyciqcovbtlobxyb2zpvhp3j6qzqltsh0\/rc7frinsapysqxaihaiklzu1fxukppoihennspmbob6xfzbrs5sdw1yfsch1a\"}]}\n```\n\nthe same with this change:\n```shell\n$ go run .\/cmd\/cosign verify-attestation --type spdx ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\nerror: none of the attestations matched the predicate type: spdx\nmain.go:62: error during command execution: none of the attestations matched the predicate type: spdx\nexit status 1\n```\n\na valid `--type` with this change:\n```shell\n$ go run .\/cmd\/cosign verify-attestation --type vuln ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2\n\nverification for ghcr.io\/distroless\/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2 --\nthe following checks were performed on each of these signatures:\n  - the cosign claims were validated\n  - existence of the claims in the transparency log was verified offline\n  - any certificates were verified against the fulcio roots.\ncertificate subject:  https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main\ncertificate issuer url:  https:\/\/token.actions.githubusercontent.com\ncertificate extension github workflow trigger: schedule\ncertificate extension github workflow sha: 7e7572e578de7c51a2f1a1791f025cf315503aa2\ncertificate extension github workflow name: create release\ncertificate extension github workflow trigger distroless\/static\ncertificate extension github workflow ref: refs\/heads\/main\n{\"payloadtype\":\"application\/vnd.in-toto+json\",\"payload\":\"eyjfdhlwzsi6imh0dhbzoi8vaw4tdg90by5pby9tdgf0zw1lbnqvdjaumsisinbyzwrpy2f0zvr5cguioijjb3npz24uc2lnc3rvcmuuzgv2l2f0dgvzdgf0aw9ul3z1bg4vdjeilcjzdwjqzwn0ijpbeyjuyw1lijoiz2hjci5pby9kaxn0cm9szxnzl3n0yxrpyyisimrpz2vzdci6eyjzageyntyioijkzdc2mtrinwexmmjjngq2mtdimjizyzu4ogi0ztbjodmzndayyjhmndk5mwzintcwmmvhodnhzmfkmtk4nmuyin19xswichjlzgljyxrlijp7imludm9jyxrpb24ionsicgfyyw1ldgvycyi6bnvsbcwidxjpijoiahr0chm6ly9naxrodwiuy29tl2rpc3ryb2xlc3mvc3rhdgljl2fjdglvbnmvcnvucy8ynzc5mjeynza1iiwizxzlbnrfawqioiiynzc5mjeynza1iiwiynvpbgrlci5pzci6iknyzwf0zsbszwxlyxnlin0sinnjyw5uzxiionsidxjpijoiahr0chm6ly9naxrodwiuy29tl2fxdwfzzwn1cml0es90cml2esisinzlcnnpb24ioiiwlji5ljiilcjkyii6eyj1cmkioiiilcj2zxjzaw9uijoiin0sinjlc3vsdci6eyikc2nozw1hijoiahr0chm6ly9qc29ulnnjagvtyxn0b3jllm9yzy9zyxjpzi0yljeumc1ydg0uns5qc29uiiwicnvucyi6w3siy29sdw1us2luzci6inv0zje2q29kzvvuaxrziiwib3jpz2luywxvcmlcyxnlswrzijp7iljpt1rqqvriijp7invyasi6imzpbgu6ly8vin19lcjyzxn1bhrzijpbxswidg9vbci6eyjkcml2zxiionsiznvsbe5hbwuioijucml2esbwdwxuzxjhymlsaxr5ifnjyw5uzxiilcjpbmzvcm1hdglvblvyasi6imh0dhbzoi8vz2l0ahvilmnvbs9hcxvhc2vjdxjpdhkvdhjpdnkilcjuyw1lijoivhjpdnkilcjydwxlcyi6w10sinzlcnnpb24ioiiwlji5ljiifx19xswidmvyc2lvbii6ijiums4win19lcjtzxrhzgf0ysi6eyjzy2fuu3rhcnrlze9uijoimjaymi0woc0wmlqwmjozmzo0n1oilcjzy2furmluaxnozwrpbii6ijiwmjitmdgtmdjumdi6mzm6ntnain19fq==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"meyciqcovbtlobxyb2zpvhp3j6qzqltsh0\/rc7frinsapysqxaihaiklzu1fxukppoihennspmbob6xfzbrs5sdw1yfsch1a\"}]}\n```\n\nsigned-off-by: matt moore <mattmoor@chainguard.dev>",
            "language":"en",
            "entities":"[('ghsa-vjxv-45g9-9296', 'VULNID', 'GHSA'), ('verifies', 'ACTION', ''), ('verify', 'ACTION', ''), ('signature', 'SECWORD', ''), ('verified', 'ACTION', ''), ('changes', 'ACTION', ''), ('error', 'FLAW', ''), ('bug', 'FLAW', ''), ('validated', 'ACTION', ''), ('verified', 'ACTION', ''), ('verified', 'ACTION', ''), ('certificate', 'SECWORD', ''), ('https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main', 'URL', ''), ('certificate', 'SECWORD', ''), ('https:\/\/token.actions.githubusercontent.com', 'URL', ''), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('sha: 7e7572e578de7c51a2f1a1791f025cf315503aa2', 'SHA', 'prefix_colon_sha'), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('toto+json\",\"payload\":\"eyjfdhlwzsi6imh0dhbzoi8vaw4tdg90by5pby9tdgf0zw1lbnqvdjaumsisinbyzwrpy2f0zvr5cguioijjb3npz24uc2lnc3rvcmuuzgv2l2f0dgvzdgf0aw9ul3z1bg4vdjeilcjzdwjqzwn0ijpbeyjuyw1lijoiz2hjci5pby9kaxn0cm9szxnzl3n0yxrpyyisimrpz2vzdci6eyjzageyntyioijkzdc2mtrinwexmmjjngq2mtdimjizyzu4ogi0ztbjodmzndayyjhmndk5mwzintcwmmvhodnhzmfkmtk4nmuyin19xswichjlzgljyxrlijp7imludm9jyxrpb24ionsicgfyyw1ldgvycyi6bnvsbcwidxjpijoiahr0chm6ly9naxrodwiuy29tl2rpc3ryb2xlc3mvc3rhdgljl2fjdglvbnmvcnvucy8ynzc5mjeynza1iiwizxzlbnrfawqioiiynzc5mjeynza1iiwiynvpbgrlci5pzci6iknyzwf0zsbszwxlyxnlin0sinnjyw5uzxiionsidxjpijoiahr0chm6ly9naxrodwiuy29tl2fxdwfzzwn1cml0es90cml2esisinzlcnnpb24ioiiwlji5ljiilcjkyii6eyj1cmkioiiilcj2zxjzaw9uijoiin0sinjlc3vsdci6eyikc2nozw1hijoiahr0chm6ly9qc29ulnnjagvtyxn0b3jllm9yzy9zyxjpzi0yljeumc1ydg0uns5qc29uiiwicnvucyi6w3siy29sdw1us2luzci6inv0zje2q29kzvvuaxrziiwib3jpz2luywxvcmlcyxnlswrzijp7iljpt1rqqvriijp7invyasi6imzpbgu6ly8vin19lcjyzxn1bhrzijpbxswidg9vbci6eyjkcml2zxiionsiznvsbe5hbwuioijucml2esbwdwxuzxjhymlsaxr5ifnjyw5uzxiilcjpbmzvcm1hdglvblvyasi6imh0dhbzoi8vz2l0ahvilmnvbs9hcxvhc2vjdxjpdhkvdhjpdnkilcjuyw1lijoivhjpdnkilcjydwxlcyi6w10sinzlcnnpb24ioiiwlji5ljiifx19xswidmvyc2lvbii6ijiums4win19lcjtzxrhzgf0ysi6eyjzy2fuu3rhcnrlze9uijoimjaymi0woc0wmlqwmjozmzo0n1oilcjzy2furmluaxnozwrpbii6ijiwmjitmdgtmdjumdi6mzm6ntnain19fq==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"meyciqcovbtlobxyb2zpvhp3j6qzqltsh0', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('command execution', 'SECWORD', ''), ('validated', 'ACTION', ''), ('verified', 'ACTION', ''), ('verified', 'ACTION', ''), ('certificate', 'SECWORD', ''), ('https:\/\/github.com\/distroless\/static\/.github\/workflows\/release.yaml@refs\/heads\/main', 'URL', ''), ('certificate', 'SECWORD', ''), ('https:\/\/token.actions.githubusercontent.com', 'URL', ''), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('sha: 7e7572e578de7c51a2f1a1791f025cf315503aa2', 'SHA', 'prefix_colon_sha'), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('toto+json\",\"payload\":\"eyjfdhlwzsi6imh0dhbzoi8vaw4tdg90by5pby9tdgf0zw1lbnqvdjaumsisinbyzwrpy2f0zvr5cguioijjb3npz24uc2lnc3rvcmuuzgv2l2f0dgvzdgf0aw9ul3z1bg4vdjeilcjzdwjqzwn0ijpbeyjuyw1lijoiz2hjci5pby9kaxn0cm9szxnzl3n0yxrpyyisimrpz2vzdci6eyjzageyntyioijkzdc2mtrinwexmmjjngq2mtdimjizyzu4ogi0ztbjodmzndayyjhmndk5mwzintcwmmvhodnhzmfkmtk4nmuyin19xswichjlzgljyxrlijp7imludm9jyxrpb24ionsicgfyyw1ldgvycyi6bnvsbcwidxjpijoiahr0chm6ly9naxrodwiuy29tl2rpc3ryb2xlc3mvc3rhdgljl2fjdglvbnmvcnvucy8ynzc5mjeynza1iiwizxzlbnrfawqioiiynzc5mjeynza1iiwiynvpbgrlci5pzci6iknyzwf0zsbszwxlyxnlin0sinnjyw5uzxiionsidxjpijoiahr0chm6ly9naxrodwiuy29tl2fxdwfzzwn1cml0es90cml2esisinzlcnnpb24ioiiwlji5ljiilcjkyii6eyj1cmkioiiilcj2zxjzaw9uijoiin0sinjlc3vsdci6eyikc2nozw1hijoiahr0chm6ly9qc29ulnnjagvtyxn0b3jllm9yzy9zyxjpzi0yljeumc1ydg0uns5qc29uiiwicnvucyi6w3siy29sdw1us2luzci6inv0zje2q29kzvvuaxrziiwib3jpz2luywxvcmlcyxnlswrzijp7iljpt1rqqvriijp7invyasi6imzpbgu6ly8vin19lcjyzxn1bhrzijpbxswidg9vbci6eyjkcml2zxiionsiznvsbe5hbwuioijucml2esbwdwxuzxjhymlsaxr5ifnjyw5uzxiilcjpbmzvcm1hdglvblvyasi6imh0dhbzoi8vz2l0ahvilmnvbs9hcxvhc2vjdxjpdhkvdhjpdnkilcjuyw1lijoivhjpdnkilcjydwxlcyi6w10sinzlcnnpb24ioiiwlji5ljiifx19xswidmvyc2lvbii6ijiums4win19lcjtzxrhzgf0ysi6eyjzy2fuu3rhcnrlze9uijoimjaymi0woc0wmlqwmjozmzo0n1oilcjzy2furmluaxnozwrpbii6ijiwmjitmdgtmdjumdi6mzm6ntnain19fq==\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"meyciqcovbtlobxyb2zpvhp3j6qzqltsh0', 'SECWORD', ''), ('mattmoor@chainguard.dev', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['cmd\/cosign\/cli\/verify\/verify_attestation.go'])",
            "num_files":1.0
        },
        {
            "index":1842,
            "vuln_id":"GHSA-g7xr-v82w-qggq",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d'}",
            "dataset":"osv",
            "summary":"Code Injection in SEOmatic In the SEOmatic plugin up to 3.4.11 for Craft CMS 3, it is possible for unauthenticated attackers to perform a Server-Side Template Injection, allowing for remote code execution.",
            "published_date":"2022-06-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/nystudio107\/craft-seomatic",
            "commit_href":"https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
            "commit_sha":"3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
            "patch":"SINGLE",
            "chain_ord":"['3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d']",
            "before_first_fix_commit":"{'4e46b792ce973ac0c652fb330055f41aca1981c8'}",
            "last_fix_commit":"3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/24\/2021, 18:08:04",
            "message":"Sanitize the canonical URL after the absolute URL has been returned, to mitigate poisoned `X-Forwarded-Host` headers",
            "author":"Andrew Welch",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 2, 'total': 3}",
            "files":"{'src\/services\/Helper.php': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nystudio107\/craft-seomatic\/raw\/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d\/src%2Fservices%2FHelper.php', 'patch': '@@ -148,9 +148,8 @@ public static function safeCanonicalUrl(): string\\n         } catch (InvalidConfigException $e) {\\n             Craft::error($e->getMessage(), __METHOD__);\\n         }\\n-        $url = DynamicMetaHelper::sanitizeUrl($url);\\n \\n-        return UrlHelper::absoluteUrlWithProtocol($url);\\n+        return DynamicMetaHelper::sanitizeUrl(UrlHelper::absoluteUrlWithProtocol($url));\\n     }\\n \\n     \/**'}}",
            "message_norm":"sanitize the canonical url after the absolute url has been returned, to mitigate poisoned `x-forwarded-host` headers",
            "language":"en",
            "entities":"[('sanitize', 'SECWORD', ''), ('mitigate', 'ACTION', ''), ('poisoned', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/services\/Helper.php'])",
            "num_files":1.0
        },
        {
            "index":1897,
            "vuln_id":"GHSA-gm9x-q798-hmr4",
            "cwe_id":"{'CWE-78'}",
            "score":7.2,
            "chain":"{'https:\/\/github.com\/sh0ji\/git-tags-remote\/commit\/a20488960cbd2c98455386108253094897ebfc1c'}",
            "dataset":"osv",
            "summary":"Command Injection in git-tags-remote All versions of `git-tags-remote ` are vulnerable to Command Injection. The package fails to sanitize the repository input and passes it directly to an `exec` call on the `get` function . This may allow attackers to execute arbitrary code in the system if the `repo` value passed to the function is user-controlled.  \n\nThe following proof-of-concept creates a file in `\/tmp`:  \n```\nconst gitTagsRemote = require('git-tags-remote');\n\ngitTagsRemote.get('https:\/\/github.com\/sh0ji\/git-tags-remote.git; echo \"Injection Success\" > \/tmp\/command-injection.test')\n.then(tags => console.log(tags));\n```",
            "published_date":"2020-07-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/sh0ji\/git-tags-remote",
            "commit_href":"https:\/\/github.com\/sh0ji\/git-tags-remote\/commit\/a20488960cbd2c98455386108253094897ebfc1c",
            "commit_sha":"a20488960cbd2c98455386108253094897ebfc1c",
            "patch":"SINGLE",
            "chain_ord":"['a20488960cbd2c98455386108253094897ebfc1c']",
            "before_first_fix_commit":"{'c43558b77312a13f69ca25ed965cf4792c239458'}",
            "last_fix_commit":"a20488960cbd2c98455386108253094897ebfc1c",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/21\/2021, 20:02:24",
            "message":"fix: use spawn for more secure input\n\nresolves #58",
            "author":"Evan Yamanishi",
            "comments":null,
            "stats":"{'additions': 23, 'deletions': 10, 'total': 33}",
            "files":"{'src\/index.ts': {'additions': 23, 'deletions': 10, 'changes': 33, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sh0ji\/git-tags-remote\/raw\/a20488960cbd2c98455386108253094897ebfc1c\/src%2Findex.ts', 'patch': \"@@ -1,17 +1,30 @@\\n import { valid, compare } from 'semver';\\n-import { exec } from 'child_process';\\n+import { spawn } from 'child_process';\\n \\n-const lsRemoteTags = (repo: string): Promise<string> => new Promise(\\n-\\t(resolve, reject) => {\\n-\\t\\texec(`git ls-remote --tags ${repo}`, (_, stdout, stderr) => {\\n-\\t\\t\\tif (stderr) reject(new Error(stderr));\\n-\\t\\t\\tresolve(stdout.toString().trim());\\n-\\t\\t});\\n-\\t},\\n-);\\n+const lsRemoteTags = (repoPath: string): Promise<string> => new Promise((resolve, reject) => {\\n+\\tlet stderr = '';\\n+\\tlet stdout = '';\\n+\\n+\\tconst child = spawn('git', ['ls-remote', '--tags', repoPath]);\\n+\\n+\\tchild.stdout.on('data', (data) => {\\n+\\t\\tstdout += data;\\n+\\t});\\n+\\n+\\tchild.stderr.on('data', (data) => {\\n+\\t\\tstderr += data;\\n+\\t});\\n+\\n+\\tchild.on('error', reject);\\n+\\n+\\tchild.on('close', (exitCode) => {\\n+\\t\\tif (exitCode !== 0 || stderr.length) reject(new Error(stderr));\\n+\\t\\tresolve(stdout.toString().trim());\\n+\\t});\\n+});\\n \\n const parseTags = (tags: string): Map<string, string> => {\\n-\\tconst tagMap = new Map();\\n+\\tconst tagMap = new Map<string, string>();\\n \\ttags.split('\\\\n')\\n \\t\\t.forEach((str) => {\\n \\t\\t\\tconst ref = str.split(\/\\\\t\/);\"}}",
            "message_norm":"fix: use spawn for more secure input\n\nresolves #58",
            "language":"en",
            "entities":"[('secure', 'SECWORD', ''), ('#58', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.ts'])",
            "num_files":1.0
        },
        {
            "index":2729,
            "vuln_id":"GHSA-q9p4-qfc8-fvpp",
            "cwe_id":"{'CWE-89'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/catfan\/Medoo\/commit\/659864b393961bf224bba1efc03b7dcbed7de533'}",
            "dataset":"osv",
            "summary":"SQL Injection in medoo columnQuote in medoo before 1.7.5 allows remote attackers to perform a SQL Injection due to improper escaping.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/catfan\/Medoo",
            "commit_href":"https:\/\/github.com\/catfan\/Medoo\/commit\/659864b393961bf224bba1efc03b7dcbed7de533",
            "commit_sha":"659864b393961bf224bba1efc03b7dcbed7de533",
            "patch":"SINGLE",
            "chain_ord":"['659864b393961bf224bba1efc03b7dcbed7de533']",
            "before_first_fix_commit":"{'b3f05edf256d63ec3cfd31d6a078c564daf9863d'}",
            "last_fix_commit":"659864b393961bf224bba1efc03b7dcbed7de533",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/11\/2019, 15:50:40",
            "message":"[fix] Fix columnQuote for \bsecurity issue reported by Snyk",
            "author":"Angel Lai",
            "comments":"{'com_1': {'author': 'jfcherng', 'datetime': '10\/12\/2019, 11:57:36', 'body': \"It's perfect valid to use `_` in a column name and I believe it's used quite often. This change would make `v1.7.4` literally unusable for most of people.\\r\\n\\r\\nNot sure about other SQL standard. For MySQL, it's valid to use some of UTF-8 chars as the column name.\\r\\nhttps:\/\/dev.mysql.com\/doc\/refman\/8.0\/en\/identifiers.html\"}, 'com_2': {'author': 'catfan', 'datetime': '10\/12\/2019, 13:18:09', 'body': \"Thanks for this great spot. The `_` should be added. Although it's possible to use UTF-8 chars for column name, it may have some problem for some databases. Using `a-zA-Z0-9_` is enough for most case.\"}}",
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'src\/Medoo.php': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/catfan\/Medoo\/raw\/659864b393961bf224bba1efc03b7dcbed7de533\/src%2FMedoo.php', 'patch': '@@ -500,6 +500,11 @@ protected function typeMap($value, $type)\\n \\n \\tprotected function columnQuote($string)\\n \\t{\\n+\\t\\tif (!preg_match(\\'\/^[a-zA-Z0-9]+(\\\\.?[a-zA-Z0-9]+)?$\/i\\', $string))\\n+\\t\\t{\\n+\\t\\t\\tthrow new InvalidArgumentException(\"Incorrect column name \\\\\"$string\\\\\"\");\\n+\\t\\t}\\n+\\n \\t\\tif (strpos($string, \\'.\\') !== false)\\n \\t\\t{\\n \\t\\t\\treturn \\'\"\\' . $this->prefix . str_replace(\\'.\\', \\'\".\"\\', $string) . \\'\"\\';'}}",
            "message_norm":"[fix] fix columnquote for \bsecurity issue reported by snyk",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fix', 'ACTION', ''), ('\\x08security', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Medoo.php'])",
            "num_files":1.0
        },
        {
            "index":883,
            "vuln_id":"GHSA-6qcc-whgp-pjj2",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Pimcore Pimcore version 10.3.2 and prior is vulnerable to stored cross-site scripting. A patch is available and anticipated to be part of version 10.3.3.",
            "published_date":"2022-03-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
            "commit_sha":"8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
            "patch":"SINGLE",
            "chain_ord":"['8ab06bfbb5a05a1b190731d9c7476ec45f5ee878']",
            "before_first_fix_commit":"{'cef6fb5a9f385f77b9a1af508ecc45a147476458'}",
            "last_fix_commit":"8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/02\/2022, 19:06:51",
            "message":"escaping fields in SERP preview",
            "author":"JiaJia Ji",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'bundles\/AdminBundle\/Resources\/public\/js\/pimcore\/document\/pages\/settings.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878\/bundles%2FAdminBundle%2FResources%2Fpublic%2Fjs%2Fpimcore%2Fdocument%2Fpages%2Fsettings.js', 'patch': '@@ -79,8 +79,8 @@ pimcore.document.pages.settings = Class.create(pimcore.document.settings_abstrac\\n             var updateSerpPreview = function () {\\n \\n                 var metaPanel = this.layout.getComponent(\"metaDataPanel\");\\n-                var title = metaPanel.getComponent(\"title\").getValue();\\n-                var description = metaPanel.getComponent(\"description\").getValue();\\n+                var title = htmlspecialchars(metaPanel.getComponent(\"title\").getValue());\\n+                var description = htmlspecialchars(metaPanel.getComponent(\"description\").getValue());\\n \\n                 var truncate = function( text, n ){\\n                     if (text.length <= n) { return text; }'}}",
            "message_norm":"escaping fields in serp preview",
            "language":"en",
            "entities":"[('escaping', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Resources\/public\/js\/pimcore\/document\/pages\/settings.js'])",
            "num_files":1.0
        },
        {
            "index":2122,
            "vuln_id":"GHSA-hrgx-p36p-89q4",
            "cwe_id":"{'CWE-89', 'CWE-95'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804'}",
            "dataset":"osv",
            "summary":"PrestaShop eval injection possible if shop vulnerable to SQL injection ### Impact\nEval injection possible if the shop is vulnerable to an SQL injection.\n\n### Patches\nThe problem is fixed in version 1.7.8.7\n\n### Workarounds\nDelete the MySQL Smarty cache feature by removing these lines in the file `config\/smarty.config.inc.php` lines 43-46 (PrestaShop 1.7) or 40-43 (PrestaShop 1.6):\n```php\nif (Configuration::get('PS_SMARTY_CACHING_TYPE') == 'mysql') {\n    include _PS_CLASS_DIR_.'Smarty\/SmartyCacheResourceMysql.php';\n    $smarty->caching_type = 'mysql';\n}\n```",
            "published_date":"2022-07-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/PrestaShop",
            "commit_href":"https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "commit_sha":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "patch":"SINGLE",
            "chain_ord":"['b6d96e7c2a4e35a44e96ffbcdfd34439b56af804']",
            "before_first_fix_commit":"{'dc8dc1faef7185ad30fc8dcb0653524d9bfb7c82', 'f342765697f5f980e4c6bb537f6575bf5e657077'}",
            "last_fix_commit":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/25\/2022, 08:51:31",
            "message":"Merge pull request from GHSA-hrgx-p36p-89q4\n\nCrypt\/decrypt smarty cache in DB",
            "author":"atomiix",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'classes\/Smarty\/SmartyCacheResourceMysql.php': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/PrestaShop\/raw\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804\/classes%2FSmarty%2FSmartyCacheResourceMysql.php', 'patch': '@@ -25,6 +25,14 @@\\n  *\/\\n class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom\\n {\\n+    \/** @var PhpEncryption *\/\\n+    private $phpEncryption;\\n+\\n+    public function __construct()\\n+    {\\n+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);\\n+    }\\n+\\n     \/**\\n      * fetch cached content and its modification time from data source.\\n      *\\n@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)\\n     {\\n         $row = Db::getInstance()->getRow(\\'SELECT modified, content FROM \\' . _DB_PREFIX_ . \\'smarty_cache WHERE id_smarty_cache = \"\\' . pSQL($id, true) . \\'\"\\');\\n         if ($row) {\\n-            $content = $row[\\'content\\'];\\n+            $content = $this->phpEncryption->decrypt($row[\\'content\\']);\\n             $mtime = strtotime($row[\\'modified\\']);\\n         } else {\\n             $content = null;\\n@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)\\n \\t\\t\\t\"\\' . pSQL($id, true) . \\'\",\\n \\t\\t\\t\"\\' . pSQL(sha1($name)) . \\'\",\\n \\t\\t\\t\"\\' . pSQL($cache_id, true) . \\'\",\\n-\\t\\t\\t\"\\' . pSQL($content, true) . \\'\"\\n+\\t\\t\\t\"\\' . $this->phpEncryption->encrypt($content) . \\'\"\\n \\t\\t)\\');\\n \\n         return (bool) Db::getInstance()->Affected_Rows();'}}",
            "message_norm":"merge pull request from ghsa-hrgx-p36p-89q4\n\ncrypt\/decrypt smarty cache in db",
            "language":"en",
            "entities":"[('ghsa-hrgx-p36p-89q4', 'VULNID', 'GHSA'), ('crypt', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['classes\/Smarty\/SmartyCacheResourceMysql.php'])",
            "num_files":1.0
        },
        {
            "index":2185,
            "vuln_id":"GHSA-j47c-j42c-mwqq",
            "cwe_id":"{'CWE-670'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/solana-labs\/solana-pay\/commit\/ac6ce0d0a81137700874a8bf5a7caac3be999fad'}",
            "dataset":"osv",
            "summary":"Solana Pay Vulnerable to Weakness in Transfer Validation Logic ### Description\nWhen a Solana Pay transaction is located using a [reference key](https:\/\/github.com\/solana-labs\/solana-pay\/blob\/master\/SPEC.md#reference), it may be checked to represent a transfer of the desired amount to the recipient, using the supplied [`validateTransfer` function](https:\/\/github.com\/solana-labs\/solana-pay\/blob\/master\/core\/src\/validateTransfer.ts). An edge case regarding this mechanism could cause the validation logic to validate multiple transfers.\n\n### Impact\nMost known Solana Pay point of sale applications are currently run on physical point of sale devices, which makes this issue unlikely to occur. However, there may be web-based point of sale applications using the protocol where it may be more likely to occur.\n\n### Patches\nThis issue has been patched as of version [`0.2.1`](https:\/\/www.npmjs.com\/package\/@solana\/pay\/v\/0.2.1). Users of the Solana Pay SDK should upgrade to it.",
            "published_date":"2022-08-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/solana-labs\/solana-pay",
            "commit_href":"https:\/\/github.com\/solana-labs\/solana-pay\/commit\/ac6ce0d0a81137700874a8bf5a7caac3be999fad",
            "commit_sha":"ac6ce0d0a81137700874a8bf5a7caac3be999fad",
            "patch":"SINGLE",
            "chain_ord":"['ac6ce0d0a81137700874a8bf5a7caac3be999fad']",
            "before_first_fix_commit":"{'f41701dc7931f7882c6eb0582c9ddd796eb9d3aa'}",
            "last_fix_commit":"ac6ce0d0a81137700874a8bf5a7caac3be999fad",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/28\/2022, 17:15:33",
            "message":"finish transfer validation implementation",
            "author":"Jordan Sexton",
            "comments":null,
            "stats":"{'additions': 60, 'deletions': 18, 'total': 78}",
            "files":"{'core\/src\/validateTransfer.ts': {'additions': 60, 'deletions': 18, 'changes': 78, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/solana-labs\/solana-pay\/raw\/ac6ce0d0a81137700874a8bf5a7caac3be999fad\/core%2Fsrc%2FvalidateTransfer.ts', 'patch': \"@@ -1,15 +1,23 @@\\n-import { getAssociatedTokenAddress } from '@solana\/spl-token';\\n+import {\\n+    decodeInstruction,\\n+    getAssociatedTokenAddress,\\n+    isTransferCheckedInstruction,\\n+    isTransferInstruction,\\n+} from '@solana\/spl-token';\\n import {\\n     ConfirmedTransactionMeta,\\n     Connection,\\n     Finality,\\n     LAMPORTS_PER_SOL,\\n     Message,\\n+    SystemInstruction,\\n+    Transaction,\\n     TransactionResponse,\\n     TransactionSignature,\\n } from '@solana\/web3.js';\\n import BigNumber from 'bignumber.js';\\n-import { Amount, Memo, Recipient, References, SPLToken } from '.\/types';\\n+import { MEMO_PROGRAM_ID } from '.\/constants';\\n+import { Amount, Memo, Recipient, Reference, References, SPLToken } from '.\/types';\\n \\n \/**\\n  * Thrown when a transaction doesn't contain a valid Solana Pay transfer.\\n@@ -58,33 +66,49 @@ export async function validateTransfer(\\n     if (!meta) throw new ValidateTransferError('missing meta');\\n     if (meta.err) throw meta.err;\\n \\n-    const [preAmount, postAmount] = splToken\\n-        ? await validateSPLTokenTransfer(message, meta, recipient, splToken)\\n-        : await validateSystemTransfer(message, meta, recipient);\\n+    if (reference && !Array.isArray(reference)) {\\n+        reference = [reference];\\n+    }\\n \\n+    const [preAmount, postAmount] = splToken\\n+        ? await validateSPLTokenTransfer(message, meta, recipient, splToken, reference)\\n+        : await validateSystemTransfer(message, meta, recipient, reference);\\n     if (postAmount.minus(preAmount).lt(amount)) throw new ValidateTransferError('amount not transferred');\\n \\n-    if (reference) {\\n-        if (!Array.isArray(reference)) {\\n-            reference = [reference];\\n-        }\\n-\\n-        for (const pubkey of reference) {\\n-            if (!message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))\\n-                throw new ValidateTransferError('reference not found');\\n-        }\\n+    if (memo) {\\n+        \/\/ Check that the second instruction is a memo instruction with the expected memo.\\n+        const transaction = Transaction.populate(message);\\n+        const instruction = transaction.instructions[1];\\n+        if (!instruction) throw new ValidateTransferError('missing memo instruction');\\n+        if (!instruction.programId.equals(MEMO_PROGRAM_ID)) throw new ValidateTransferError('invalid memo program');\\n+        if (!instruction.data.equals(Buffer.from(memo, 'utf8'))) throw new ValidateTransferError('invalid memo');\\n     }\\n \\n-    \/\/ FIXME: add memo check\\n-\\n     return response;\\n }\\n \\n async function validateSystemTransfer(\\n     message: Message,\\n     meta: ConfirmedTransactionMeta,\\n-    recipient: Recipient\\n+    recipient: Recipient,\\n+    references?: Reference[]\\n ): Promise<[BigNumber, BigNumber]> {\\n+    if (references) {\\n+        \/\/ Check that the first instruction is a system transfer instruction.\\n+        const transaction = Transaction.populate(message);\\n+        const instruction = transaction.instructions[0];\\n+        SystemInstruction.decodeTransfer(instruction);\\n+\\n+        \/\/ Check that the expected reference keys exactly match the extra keys provided to the instruction.\\n+        const [_from, _to, ...extraKeys] = instruction.keys;\\n+        const length = extraKeys.length;\\n+        if (length !== references.length) throw new ValidateTransferError('invalid references');\\n+\\n+        for (let i = 0; i < length; i++) {\\n+            if (!extraKeys[i].pubkey.equals(references[i])) throw new ValidateTransferError(`invalid reference ${i}`);\\n+        }\\n+    }\\n+\\n     const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));\\n     if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\\n \\n@@ -98,8 +122,26 @@ async function validateSPLTokenTransfer(\\n     message: Message,\\n     meta: ConfirmedTransactionMeta,\\n     recipient: Recipient,\\n-    splToken: SPLToken\\n+    splToken: SPLToken,\\n+    references?: Reference[]\\n ): Promise<[BigNumber, BigNumber]> {\\n+    if (references) {\\n+        \/\/ Check that the first instruction is an SPL token transfer instruction.\\n+        const transaction = Transaction.populate(message);\\n+        const instruction = decodeInstruction(transaction.instructions[0]);\\n+        if (!isTransferCheckedInstruction(instruction) && !isTransferInstruction(instruction))\\n+            throw new ValidateTransferError('invalid transfer');\\n+\\n+        \/\/ Check that the expected reference keys exactly match the extra keys provided to the instruction.\\n+        const extraKeys = instruction.keys.multiSigners;\\n+        const length = extraKeys.length;\\n+        if (length !== references.length) throw new ValidateTransferError('invalid references');\\n+\\n+        for (let i = 0; i < length; i++) {\\n+            if (!extraKeys[i].pubkey.equals(references[i])) throw new ValidateTransferError(`invalid reference ${i}`);\\n+        }\\n+    }\\n+\\n     const recipientATA = await getAssociatedTokenAddress(splToken, recipient);\\n     const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));\\n     if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\"}}",
            "message_norm":"finish transfer validation implementation",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/validateTransfer.ts'])",
            "num_files":1.0
        },
        {
            "index":1941,
            "vuln_id":"GHSA-gvm4-h8j3-rjrq",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `LoadAndRemapMatrix` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:\n    \n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/d94227d43aa125ad8b54115c03cece54f6a1977b\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.\n  \n```cc\nconst string& ckpt_path = ckpt_path_t->scalar<tstring>()();\n```\n\nHowever, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar<T>()()` to trigger and terminate the process.\n\n### Patches\nWe have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4",
            "commit_sha":"77dd114513d7796e1e2b8aece214a380af26fbf4",
            "patch":"SINGLE",
            "chain_ord":"['77dd114513d7796e1e2b8aece214a380af26fbf4']",
            "before_first_fix_commit":"{'faa76f39014ed3b5e2c158593b1335522e573c7f'}",
            "last_fix_commit":"77dd114513d7796e1e2b8aece214a380af26fbf4",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/04\/2021, 22:46:30",
            "message":"Fix a check fail\n\nPiperOrigin-RevId: 372011072\nChange-Id: I1062cfaed0aa16884e9a16312483794d188db76f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/77dd114513d7796e1e2b8aece214a380af26fbf4\/tensorflow%2Fcore%2Fkernels%2Fload_and_remap_matrix_op.cc', 'patch': '@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {\\n     \/\/ Processes the checkpoint source and the provided Tensor name.\\n     const Tensor* ckpt_path_t;\\n     OP_REQUIRES_OK(context, context->input(\"ckpt_path\", &ckpt_path_t));\\n+    OP_REQUIRES(\\n+        context, ckpt_path_t->NumElements() == 1,\\n+        errors::InvalidArgument(\"The `ckpt_path` tensor must have exactly one \"\\n+                                \"element, got tensor of shape \",\\n+                                ckpt_path_t->shape().DebugString()));\\n     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();\\n     const Tensor* old_tensor_name_t;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"fix a check fail\n\npiperorigin-revid: 372011072\nchange-id: i1062cfaed0aa16884e9a16312483794d188db76f",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372011072', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc'])",
            "num_files":1.0
        },
        {
            "index":865,
            "vuln_id":"GHSA-6m26-25q2-cq46",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/c897d0dc159849763a813184d9b75b966c6360bf'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber Microweber Cross-site Scripting (XSS) - Stored XSS vulnerability on admin page up to version 1.3.",
            "published_date":"2022-02-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/c897d0dc159849763a813184d9b75b966c6360bf",
            "commit_sha":"c897d0dc159849763a813184d9b75b966c6360bf",
            "patch":"SINGLE",
            "chain_ord":"['c897d0dc159849763a813184d9b75b966c6360bf']",
            "before_first_fix_commit":"{'7d3e768be798979e82778c47fbabfbd944ec8ea7'}",
            "last_fix_commit":"c897d0dc159849763a813184d9b75b966c6360bf",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/25\/2022, 09:57:42",
            "message":"add xss clean to create media dir method",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'src\/MicroweberPackages\/Media\/MediaManager.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/c897d0dc159849763a813184d9b75b966c6360bf\/src%2FMicroweberPackages%2FMedia%2FMediaManager.php', 'patch': \"@@ -4,6 +4,7 @@\\n \\n use Conner\\\\Tagging\\\\Model\\\\Tagged;\\n use \\\\Intervention\\\\Image\\\\ImageManagerStatic as Image;\\n+use MicroweberPackages\\\\Helper\\\\HTMLClean;\\n use MicroweberPackages\\\\Media\\\\Models\\\\Media;\\n use MicroweberPackages\\\\Media\\\\Models\\\\MediaThumbnail;\\n use MicroweberPackages\\\\Utils\\\\Media\\\\Thumbnailer;\\n@@ -1184,6 +1185,10 @@ public function thumbnail_img($params)\\n \\n     public function create_media_dir($params)\\n     {\\n+\\n+        $clean = new HTMLClean();\\n+        $_REQUEST = $clean->cleanArray($_REQUEST);\\n+\\n         must_have_access();\\n         $resp = array();\\n         \/\/ $target_path = media_base_path() . 'uploaded' . DS;\\n@@ -1198,7 +1203,7 @@ public function create_media_dir($params)\\n \\n             $target_path = $fn_path;\\n         }\\n-        if (!isset($_REQUEST['name'])) {\\n+        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {\\n             $resp = array('error' => 'You must send new_folder parameter');\\n         } else {\\n             $fn_new_folder_path = $_REQUEST['name'];\"}}",
            "message_norm":"add xss clean to create media dir method",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Media\/MediaManager.php'])",
            "num_files":1.0
        },
        {
            "index":206,
            "vuln_id":"GHSA-36vm-xw34-x4pj",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `tf.raw_ops.IRFFT` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:\n    \n```python\nimport tensorflow as tf\n\nvalues = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)\n``` \n    \nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n\n### Patches\nWe have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "commit_sha":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "patch":"SINGLE",
            "chain_ord":"['1c56f53be0b722ca657cbc7df461ed676c8642a2']",
            "before_first_fix_commit":"{'8926cbdbbff8b9975d63a41569d51c50a9806d9d'}",
            "last_fix_commit":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 00:11:46",
            "message":"Fix a check fail in Fast Fourier implementation\n\nPiperOrigin-RevId: 372026629\nChange-Id: Id05c3362aa575271bc3e06b16316c9037085fc11",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/fft_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1c56f53be0b722ca657cbc7df461ed676c8642a2\/tensorflow%2Fcore%2Fkernels%2Ffft_ops.cc', 'patch': '@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\\n limitations under the License.\\n ==============================================================================*\/\\n \\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #define EIGEN_USE_THREADS\\n \\n \/\/ See docs in ..\/ops\/fft_ops.cc.\\n@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {\\n           i == FFTRank ? fft_shape[i - 1] \/ 2 + 1 : fft_shape[i - 1];\\n       full_fft_shape.AddDim(fft_shape[i - 1]);\\n     }\\n+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,\\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\\n+                                        full_fft_shape.DebugString()));\\n \\n     Tensor temp;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),'}}",
            "message_norm":"fix a check fail in fast fourier implementation\n\npiperorigin-revid: 372026629\nchange-id: id05c3362aa575271bc3e06b16316c9037085fc11",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372026629', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/fft_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3158,
            "vuln_id":"GHSA-vq2r-5xvm-3hc3",
            "cwe_id":"{'CWE-908'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b1b323042264740c398140da32e93fb9c2c9f33e'}",
            "dataset":"osv",
            "summary":"Segfault in `CTCBeamSearchDecoder` ### Impact\nDue to lack of validation in `tf.raw_ops.CTCBeamSearchDecoder`, an attacker can trigger denial of service via segmentation faults:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)\nsequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],\nshape=[8], dtype=tf.int32)\nbeam_width = 10\ntop_paths = 3\nmerge_repeated = True\n\ntf.raw_ops.CTCBeamSearchDecoder(\n  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,\n  top_paths=top_paths, merge_repeated=merge_repeated)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc#L68-L79) fails to detect cases when the input tensor is empty and proceeds to read data from a null buffer.\n  \n### Patches\nWe have patched the issue in GitHub commit [b1b323042264740c398140da32e93fb9c2c9f33e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b1b323042264740c398140da32e93fb9c2c9f33e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b1b323042264740c398140da32e93fb9c2c9f33e",
            "commit_sha":"b1b323042264740c398140da32e93fb9c2c9f33e",
            "patch":"SINGLE",
            "chain_ord":"['b1b323042264740c398140da32e93fb9c2c9f33e']",
            "before_first_fix_commit":"{'a74768f8e4efbda4def9f16ee7e13cf3922ac5f7'}",
            "last_fix_commit":"b1b323042264740c398140da32e93fb9c2c9f33e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2021, 21:51:41",
            "message":"Fix SEGV in CTC ops\n\nPiperOrigin-RevId: 372430279\nChange-Id: I7ec2ad9d6f4d0980c33de45d27c6b17df5c6e26f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/ctc_decoder_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b1b323042264740c398140da32e93fb9c2c9f33e\/tensorflow%2Fcore%2Fkernels%2Fctc_decoder_ops.cc', 'patch': '@@ -70,6 +70,9 @@ class CTCDecodeHelper {\\n     if (inputs_shape.dims() != 3) {\\n       return errors::InvalidArgument(\"inputs is not a 3-Tensor\");\\n     }\\n+    if (inputs_shape.num_elements() == 0) {\\n+      return errors::InvalidArgument(\"inputs must not be empty\");\\n+    }\\n \\n     const int64 max_time = inputs_shape.dim_size(0);\\n     const int64 batch_size = inputs_shape.dim_size(1);'}}",
            "message_norm":"fix segv in ctc ops\n\npiperorigin-revid: 372430279\nchange-id: i7ec2ad9d6f4d0980c33de45d27c6b17df5c6e26f",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('372430279', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ctc_decoder_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":187,
            "vuln_id":"GHSA-3374-7h99-xr85",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/forkcms\/forkcms\/commit\/6ec6171206a7507a39695edc8bbd1b97ef1041c6'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in forkcms Fork CMS Content Management System v5.8.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the `Displayname` field when using the `Add`, `Edit` or `Register' functions. This vulnerability allows attackers to execute arbitrary web scripts or HTML.",
            "published_date":"2021-10-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/forkcms\/forkcms",
            "commit_href":"https:\/\/github.com\/forkcms\/forkcms\/commit\/6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "commit_sha":"6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "patch":"SINGLE",
            "chain_ord":"['6ec6171206a7507a39695edc8bbd1b97ef1041c6']",
            "before_first_fix_commit":"{'f439d630c2f46a85b251488cd7073068a66fae5c'}",
            "last_fix_commit":"6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2020, 10:44:12",
            "message":"Fix xss in profiles display name",
            "author":"Jelmer Prins",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'src\/Backend\/Modules\/Profiles\/Actions\/Index.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/forkcms\/forkcms\/raw\/6ec6171206a7507a39695edc8bbd1b97ef1041c6\/src%2FBackend%2FModules%2FProfiles%2FActions%2FIndex.php', 'patch': \"@@ -128,6 +128,7 @@ private function loadDataGrid(): void\\n             'registered_on',\\n             true\\n         );\\n+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');\\n \\n         \/\/ add the mass action controls\\n         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');\"}}",
            "message_norm":"fix xss in profiles display name",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Backend\/Modules\/Profiles\/Actions\/Index.php'])",
            "num_files":1.0
        },
        {
            "index":571,
            "vuln_id":"GHSA-579h-mv94-g4gp",
            "cwe_id":"{'CWE-269'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/kubernetes\/kubernetes\/commit\/2257c1ecbe3c0cf71dd50b82752ae189c94ec905'}",
            "dataset":"osv",
            "summary":"Privilege Escalation in Kubernetes In all Kubernetes versions prior to v1.10.11, v1.11.5, and v1.12.3, incorrect handling of error responses to proxied upgrade requests in the kube-apiserver allowed specially crafted requests to establish a connection through the Kubernetes API server to backend servers, then send arbitrary requests over the same connection directly to the backend, authenticated with the Kubernetes API server's TLS credentials used to establish the backend connection.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/kubernetes\/kubernetes",
            "commit_href":"https:\/\/github.com\/kubernetes\/kubernetes\/commit\/2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
            "commit_sha":"2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
            "patch":"SINGLE",
            "chain_ord":"['2257c1ecbe3c0cf71dd50b82752ae189c94ec905']",
            "before_first_fix_commit":"{'b84e3dd6f80af4016acfd891ef6cc50ce05d4b5b', '396271cf52af70bc96ed378dd9ce1a865cc99647'}",
            "last_fix_commit":"2257c1ecbe3c0cf71dd50b82752ae189c94ec905",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/26\/2018, 12:26:22",
            "message":"Merge pull request #71412 from liggitt\/backend-error\n\nHandle error responses from backends",
            "author":"k8s-ci-robot",
            "comments":null,
            "stats":"{'additions': 37, 'deletions': 0, 'total': 37}",
            "files":"{'staging\/src\/k8s.io\/apimachinery\/pkg\/util\/proxy\/upgradeaware.go': {'additions': 37, 'deletions': 0, 'changes': 37, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kubernetes\/kubernetes\/raw\/2257c1ecbe3c0cf71dd50b82752ae189c94ec905\/staging%2Fsrc%2Fk8s.io%2Fapimachinery%2Fpkg%2Futil%2Fproxy%2Fupgradeaware.go', 'patch': '@@ -17,6 +17,7 @@ limitations under the License.\\n package proxy\\n \\n import (\\n+\\t\"bufio\"\\n \\t\"bytes\"\\n \\t\"context\"\\n \\t\"fmt\"\\n@@ -271,6 +272,18 @@ func (h *UpgradeAwareHandler) tryUpgrade(w http.ResponseWriter, req *http.Reques\\n \\t}\\n \\tdefer backendConn.Close()\\n \\n+\\t\/\/ determine the http response code from the backend by reading from rawResponse+backendConn\\n+\\trawResponseCode, headerBytes, err := getResponseCode(io.MultiReader(bytes.NewReader(rawResponse), backendConn))\\n+\\tif err != nil {\\n+\\t\\tklog.V(6).Infof(\"Proxy connection error: %v\", err)\\n+\\t\\th.Responder.Error(w, req, err)\\n+\\t\\treturn true\\n+\\t}\\n+\\tif len(headerBytes) > len(rawResponse) {\\n+\\t\\t\/\/ we read beyond the bytes stored in rawResponse, update rawResponse to the full set of bytes read from the backend\\n+\\t\\trawResponse = headerBytes\\n+\\t}\\n+\\n \\t\/\/ Once the connection is hijacked, the ErrorResponder will no longer work, so\\n \\t\/\/ hijacking should be the last step in the upgrade.\\n \\trequestHijacker, ok := w.(http.Hijacker)\\n@@ -295,6 +308,17 @@ func (h *UpgradeAwareHandler) tryUpgrade(w http.ResponseWriter, req *http.Reques\\n \\t\\t}\\n \\t}\\n \\n+\\tif rawResponseCode != http.StatusSwitchingProtocols {\\n+\\t\\t\/\/ If the backend did not upgrade the request, finish echoing the response from the backend to the client and return, closing the connection.\\n+\\t\\tklog.V(6).Infof(\"Proxy upgrade error, status code %d\", rawResponseCode)\\n+\\t\\t_, err := io.Copy(requestHijackedConn, backendConn)\\n+\\t\\tif err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {\\n+\\t\\t\\tklog.Errorf(\"Error proxying data from backend to client: %v\", err)\\n+\\t\\t}\\n+\\t\\t\/\/ Indicate we handled the request\\n+\\t\\treturn true\\n+\\t}\\n+\\n \\t\/\/ Proxy the connection. This is bidirectional, so we need a goroutine\\n \\t\/\/ to copy in each direction. Once one side of the connection exits, we\\n \\t\/\/ exit the function which performs cleanup and in the process closes\\n@@ -356,6 +380,19 @@ func (h *UpgradeAwareHandler) DialForUpgrade(req *http.Request) (net.Conn, error\\n \\treturn dial(updatedReq, h.UpgradeTransport)\\n }\\n \\n+\/\/ getResponseCode reads a http response from the given reader, returns the status code,\\n+\/\/ the bytes read from the reader, and any error encountered\\n+func getResponseCode(r io.Reader) (int, []byte, error) {\\n+\\trawResponse := bytes.NewBuffer(make([]byte, 0, 256))\\n+\\t\/\/ Save the bytes read while reading the response headers into the rawResponse buffer\\n+\\tresp, err := http.ReadResponse(bufio.NewReader(io.TeeReader(r, rawResponse)), nil)\\n+\\tif err != nil {\\n+\\t\\treturn 0, nil, err\\n+\\t}\\n+\\t\/\/ return the http status code and the raw bytes consumed from the reader in the process\\n+\\treturn resp.StatusCode, rawResponse.Bytes(), nil\\n+}\\n+\\n \/\/ dial dials the backend at req.URL and writes req to it.\\n func dial(req *http.Request, transport http.RoundTripper) (net.Conn, error) {\\n \\tconn, err := DialURL(req.Context(), req.URL, transport)'}}",
            "message_norm":"merge pull request #71412 from liggitt\/backend-error\n\nhandle error responses from backends",
            "language":"no",
            "entities":"[('#71412', 'ISSUE', ''), ('error', 'FLAW', ''), ('error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['staging\/src\/k8s.io\/apimachinery\/pkg\/util\/proxy\/upgradeaware.go'])",
            "num_files":1.0
        },
        {
            "index":2958,
            "vuln_id":"GHSA-rhrq-64mq-hf9h",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1e206baedf8bef0334cca3eb92bab134ef525a28'}",
            "dataset":"osv",
            "summary":"FPE in TFLite division operations ### Impact\nThe implementation of division in TFLite is [vulnerable to a division by 0 error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/lite\/kernels\/div.cc)\n\nThere is no check that the divisor tensor does not contain zero elements.\n\n### Patches\nWe have patched the issue in GitHub commit [1e206baedf8bef0334cca3eb92bab134ef525a28](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1e206baedf8bef0334cca3eb92bab134ef525a28).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1e206baedf8bef0334cca3eb92bab134ef525a28",
            "commit_sha":"1e206baedf8bef0334cca3eb92bab134ef525a28",
            "patch":"SINGLE",
            "chain_ord":"['1e206baedf8bef0334cca3eb92bab134ef525a28']",
            "before_first_fix_commit":"{'9579070c3fe96b4ed3b07c1b294c7a402250fb43'}",
            "last_fix_commit":"1e206baedf8bef0334cca3eb92bab134ef525a28",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/16\/2021, 21:23:21",
            "message":"Prevent a division by 0 in division ops.\n\nPiperOrigin-RevId: 385223169\nChange-Id: Ia4228960b5d2aa44480385f74bdd70d21a3613c3",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 1, 'total': 17}",
            "files":"{'tensorflow\/lite\/kernels\/div.cc': {'additions': 16, 'deletions': 1, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1e206baedf8bef0334cca3eb92bab134ef525a28\/tensorflow%2Flite%2Fkernels%2Fdiv.cc', 'patch': \"@@ -216,9 +216,23 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context,\\n                     GetOutputSafe(context, node, kOutputTensor, &output));\\n \\n-  if (output->type == kTfLiteFloat32 || output->type == kTfLiteInt32) {\\n+  \/\/ TODO(b\/193904910): This can written with C++ templates\\n+#define TF_LITE_CHECK_DIV_NON_ZERO(data_type)                       \\\\\\n+  const auto* input2_data = GetTensorData<data_type>(input2);       \\\\\\n+  const size_t input2_elements = input2->bytes \/ sizeof(data_type); \\\\\\n+  for (size_t i = 0; i < input2_elements; i++) {                    \\\\\\n+    TF_LITE_ENSURE(context, input2_data[i] != 0);                   \\\\\\n+  }\\n+\\n+  if (output->type == kTfLiteFloat32) {\\n+    \/\/ Div by zero seems ok in this case, just like in TF case infinities are\\n+    \/\/ returned. So we don't do a check at this point.\\n+    EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);\\n+  } else if (output->type == kTfLiteInt32) {\\n+    TF_LITE_CHECK_DIV_NON_ZERO(int32_t);\\n     EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);\\n   } else if (output->type == kTfLiteUInt8) {\\n+    TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);\\n     TF_LITE_ENSURE_OK(\\n         context, EvalQuantized<kernel_type>(context, node, params, data, input1,\\n                                             input2, output));\\n@@ -229,6 +243,7 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n         output->type);\\n     return kTfLiteError;\\n   }\\n+#undef TF_LITE_CHECK_DIV_NON_ZERO\\n \\n   return kTfLiteOk;\\n }\"}}",
            "message_norm":"prevent a division by 0 in division ops.\n\npiperorigin-revid: 385223169\nchange-id: ia4228960b5d2aa44480385f74bdd70d21a3613c3",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('385223169', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/div.cc'])",
            "num_files":1.0
        },
        {
            "index":2568,
            "vuln_id":"GHSA-pfxf-wh96-fvjc",
            "cwe_id":"{'CWE-117'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/jhipster\/jhipster-kotlin\/commit\/426ccab85e7e0da562643200637b99b6a2a99449'}",
            "dataset":"osv",
            "summary":"Log Forging in generator-jhipster-kotlin ### Impact\n\nWe log the mail for invalid password reset attempts. \nAs the email is provided by a user and the api is public this can be used by an attacker to forge log entries.\nThis is vulnerable to https:\/\/cwe.mitre.org\/data\/definitions\/117.html\n\nThis problem affects only application generated with jwt or session authentication. Applications using oauth are not vulnerable.\n\n### Patches\n\nversion 1.7.0.\n\n### Workarounds\n\nIn `AccountResource.kt` you should change the line\n\n```kotlin\n log.warn(\"Password reset requested for non existing mail '$mail'\");\n```\n\nto \n\n```kotlin\n log.warn(\"Password reset requested for non existing mail\");\n```\n\n### References\n\n* https:\/\/cwe.mitre.org\/data\/definitions\/117.html\n* https:\/\/owasp.org\/www-community\/attacks\/Log_Injection\n* https:\/\/www.baeldung.com\/jvm-log-forging\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [jhipster kotlin](https:\/\/github.com\/jhipster\/jhipster-kotlin)",
            "published_date":"2020-06-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/jhipster\/jhipster-kotlin",
            "commit_href":"https:\/\/github.com\/jhipster\/jhipster-kotlin\/commit\/426ccab85e7e0da562643200637b99b6a2a99449",
            "commit_sha":"426ccab85e7e0da562643200637b99b6a2a99449",
            "patch":"SINGLE",
            "chain_ord":"['426ccab85e7e0da562643200637b99b6a2a99449']",
            "before_first_fix_commit":"{'72d229b48b87c5575c116a8b0ba6c3c9f02ac287'}",
            "last_fix_commit":"426ccab85e7e0da562643200637b99b6a2a99449",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2020, 20:18:48",
            "message":"prevent log forging when doing password reset init request",
            "author":"Frederik Hahne",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'generators\/server\/templates\/src\/main\/kotlin\/package\/web\/rest\/AccountResource.kt.ejs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jhipster\/jhipster-kotlin\/raw\/426ccab85e7e0da562643200637b99b6a2a99449\/generators%2Fserver%2Ftemplates%2Fsrc%2Fmain%2Fkotlin%2Fpackage%2Fweb%2Frest%2FAccountResource.kt.ejs', 'patch': '@@ -406,7 +406,7 @@ class AccountResource(\\n         } else {\\n             \/\/ Pretend the request has been successful to prevent checking which emails really exist\\n             \/\/ but log that an invalid attempt has been made\\n-            log.warn(\"Password reset requested for non existing mail \\'$mail\\'\");\\n+            log.warn(\"Password reset requested for non existing mail\");\\n         }\\n     }\\n     <%_ } else { _%>\\n@@ -418,7 +418,7 @@ class AccountResource(\\n                 } else {\\n                     \/\/ Pretend the request has been successful to prevent checking which emails really exist\\n                     \/\/ but log that an invalid attempt has been made\\n-                    log.warn(\"Password reset request for non existing email \\'$mail\\'\")\\n+                    log.warn(\"Password reset request for non existing email\")\\n                 }\\n             }.then()\\n     <%_ } _%>'}}",
            "message_norm":"prevent log forging when doing password reset init request",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['generators\/server\/templates\/src\/main\/kotlin\/package\/web\/rest\/AccountResource.kt.ejs'])",
            "num_files":1.0
        },
        {
            "index":1171,
            "vuln_id":"GHSA-8948-ffc6-jg52",
            "cwe_id":"{'CWE-20'}",
            "score":4.2,
            "chain":"{'https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516'}",
            "dataset":"osv",
            "summary":"Insecure Default Configuration in redbird Versions of `redbird` prior to 0.9.1 have a vulnerable default configuration of allowing TLS 1.0 connections on `lib\/proxy.js`. The package does not provide an option to disable TLS 1.0 which is deprecated and vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 0.9.1 or later.",
            "published_date":"2019-06-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/OptimalBits\/redbird",
            "commit_href":"https:\/\/github.com\/OptimalBits\/redbird\/commit\/39c7a2da84a2ddddfe046ea80e98800518920516",
            "commit_sha":"39c7a2da84a2ddddfe046ea80e98800518920516",
            "patch":"SINGLE",
            "chain_ord":"['39c7a2da84a2ddddfe046ea80e98800518920516']",
            "before_first_fix_commit":"{'b0ba23a53e881204e4bca4cef75305edb4f9e8b4'}",
            "last_fix_commit":"39c7a2da84a2ddddfe046ea80e98800518920516",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2019, 16:07:54",
            "message":"Adding option to disable older SSL\/TLS versions\n\nSimply pass in \"secureOptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
            "author":"James Thomas",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'lib\/proxy.js': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/OptimalBits\/redbird\/raw\/39c7a2da84a2ddddfe046ea80e98800518920516\/lib%2Fproxy.js', 'patch': '@@ -252,6 +252,11 @@ ReverseProxy.prototype.setupHttpsProxy = function (proxy, websocketsUpgrade, log\\n     key: getCertData(sslOpts.key),\\n     cert: getCertData(sslOpts.cert)\\n   };\\n+  \\n+  \/\/ Allows the option to disable older SSL\/TLS versions\\n+  if(sslOpts.secureOptions) {\\n+    ssl.secureOptions = sslOpts.secureOptions;\\n+  }\\n \\n   if (sslOpts.ca) {\\n     ssl.ca = getCertData(sslOpts.ca, true);'}}",
            "message_norm":"adding option to disable older ssl\/tls versions\n\nsimply pass in \"secureoptions\" as you normally would to an https config object, and redbird will pass it along into the https proxy server.",
            "language":"en",
            "entities":"[('adding', 'ACTION', ''), ('ssl', 'SECWORD', ''), ('tls', 'SECWORD', ''), ('secureoptions', 'SECWORD', ''), ('https proxy', 'SECWORD', ''), ('server', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/proxy.js'])",
            "num_files":1.0
        },
        {
            "index":707,
            "vuln_id":"GHSA-5vr6-hm68-5j9p",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/pull\/13554\/commits\/4f231a0f49b6c953d506913364ffd7fb3a660630'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in LibreNMS LibreNMS 21.11.0 is affected by is affected by a Cross Site Scripting (XSS) vulnerability in includes\/html\/forms\/poller-groups.inc.php.",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/pull\/13554\/commits\/4f231a0f49b6c953d506913364ffd7fb3a660630",
            "commit_sha":"4f231a0f49b6c953d506913364ffd7fb3a660630",
            "patch":"SINGLE",
            "chain_ord":"['4f231a0f49b6c953d506913364ffd7fb3a660630']",
            "before_first_fix_commit":"{'fff7b45a7599f8f13a55250dc5f2b957f3394194'}",
            "last_fix_commit":"4f231a0f49b6c953d506913364ffd7fb3a660630",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/22\/2021, 22:31:45",
            "message":"fix XSS vulnerability in poller-groups.inc.php",
            "author":"AL-KASSAR",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'includes\/html\/forms\/poller-groups.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/4f231a0f49b6c953d506913364ffd7fb3a660630\/includes%2Fhtml%2Fforms%2Fpoller-groups.inc.php', 'patch': '@@ -44,5 +44,5 @@\\n if (! empty($ok)) {\\n     exit(\"$ok\");\\n } else {\\n-    exit(\"ERROR: $error\");\\n+    exit(\"ERROR: \".htmlspecialchars($error));;\\n }'}}",
            "message_norm":"fix xss vulnerability in poller-groups.inc.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/forms\/poller-groups.inc.php'])",
            "num_files":1.0
        },
        {
            "index":519,
            "vuln_id":"GHSA-4wv4-mgfq-598v",
            "cwe_id":"{'CWE-94'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/AnneTheDev\/nobelprize\/commit\/00639d375b0efd097bc1eca18d9dc021691b9286'}",
            "dataset":"osv",
            "summary":"Code injection in nobelprizeparser Code injection through use of eval.",
            "published_date":"2021-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/AnneTheDev\/nobelprize",
            "commit_href":"https:\/\/github.com\/AnneTheDev\/nobelprize\/commit\/00639d375b0efd097bc1eca18d9dc021691b9286",
            "commit_sha":"00639d375b0efd097bc1eca18d9dc021691b9286",
            "patch":"SINGLE",
            "chain_ord":"['00639d375b0efd097bc1eca18d9dc021691b9286']",
            "before_first_fix_commit":"{'23abc78c8bf9eddce8ec40f0ec7bbb586a3ebe9f', '29126617df6f313d81588d695d94982cba03d82e'}",
            "last_fix_commit":"00639d375b0efd097bc1eca18d9dc021691b9286",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/23\/2021, 09:03:46",
            "message":"Merge pull request from GHSA-4wv4-mgfq-598v\n\nReplace eval with JSON.parse",
            "author":"AnneTheDev",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/AnneTheDev\/nobelprize\/raw\/00639d375b0efd097bc1eca18d9dc021691b9286\/lib%2Findex.js', 'patch': '@@ -10,7 +10,7 @@ function output(laureate) {\\n class Parser {\\n     \/\/ Parse JSON data\\n     constructor(data) {\\n-        this.laureates = eval(`(${data})`).laureates;\\n+        this.laureates = JSON.parse(data}).laureates;\\n     }\\n \\n     inYear(year) {'}}",
            "message_norm":"merge pull request from ghsa-4wv4-mgfq-598v\n\nreplace eval with json.parse",
            "language":"en",
            "entities":"[('ghsa-4wv4-mgfq-598v', 'VULNID', 'GHSA'), ('eval', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2137,
            "vuln_id":"GHSA-hvr8-466p-75rh",
            "cwe_id":"{'CWE-119'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/python-pillow\/Pillow\/commit\/4e0d9b0b9740d258ade40cce248c93777362ac1e'}",
            "dataset":"osv",
            "summary":"Integer overflow discovered in Pillow  Integer overflow in the ImagingResampleHorizontal function in libImaging\/Resample.c in Pillow before 3.1.1 allows remote attackers to have unspecified impact via negative values of the new size, which triggers a heap-based buffer overflow.",
            "published_date":"2018-07-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/python-pillow\/Pillow",
            "commit_href":"https:\/\/github.com\/python-pillow\/Pillow\/commit\/4e0d9b0b9740d258ade40cce248c93777362ac1e",
            "commit_sha":"4e0d9b0b9740d258ade40cce248c93777362ac1e",
            "patch":"SINGLE",
            "chain_ord":"['4e0d9b0b9740d258ade40cce248c93777362ac1e']",
            "before_first_fix_commit":"{'bdd86b72ae38874b6bdaf27458a5ed00df0cd3d5'}",
            "last_fix_commit":"4e0d9b0b9740d258ade40cce248c93777362ac1e",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/04\/2016, 06:54:12",
            "message":"fix integer overflow in Resample.c",
            "author":"Ned Williamson",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'libImaging\/Resample.c': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/python-pillow\/Pillow\/raw\/4e0d9b0b9740d258ade40cce248c93777362ac1e\/libImaging%2FResample.c', 'patch': '@@ -138,11 +138,23 @@ ImagingResampleHorizontal(Imaging imIn, int xsize, int filter)\\n     \/* maximum number of coofs *\/\\n     kmax = (int) ceil(support) * 2 + 1;\\n \\n+    \/\/ check for overflow\\n+    if (kmax > 0 && xsize > SIZE_MAX \/ kmax)\\n+        return (Imaging) ImagingError_MemoryError();\\n+\\n+    \/\/ sizeof(float) should be greater than 0\\n+    if (xsize * kmax > SIZE_MAX \/ sizeof(float))\\n+        return (Imaging) ImagingError_MemoryError();\\n+\\n     \/* coefficient buffer *\/\\n     kk = malloc(xsize * kmax * sizeof(float));\\n     if ( ! kk)\\n         return (Imaging) ImagingError_MemoryError();\\n \\n+    \/\/ sizeof(int) should be greater than 0 as well\\n+    if (xsize > SIZE_MAX \/ (2 * sizeof(int)))\\n+        return (Imaging) ImagingError_MemoryError();\\n+\\n     xbounds = malloc(xsize * 2 * sizeof(int));\\n     if ( ! xbounds) {\\n         free(kk);'}}",
            "message_norm":"fix integer overflow in resample.c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('integer overflow', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['libImaging\/Resample.c'])",
            "num_files":1.0
        },
        {
            "index":3328,
            "vuln_id":"GHSA-ww4x-rwq6-qpgf",
            "cwe_id":"{'CWE-352'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/rubysec\/ruby-advisory-db\/commit\/aef9f623c0be838234d53baf18977564804da397'}",
            "dataset":"osv",
            "summary":"Cross-site Request Forgery in OmniAuth The request phase of the OmniAuth Ruby gem (1.9.1 and earlier) is vulnerable to Cross-Site Request Forgery when used as part of the Ruby on Rails framework, allowing accounts to be connected without user intent, user interaction, or feedback to the user. This permits a secondary account to be able to sign into the web application as the primary account.\n\nAs of v2 OmniAuth no longer has the vulnerable configuration by default, but it is still possible to configure OmniAuth in such a way that the web application becomes vulnerable to Cross-Site Request Forgery. There is a recommended remediation described [here](https:\/\/github.com\/omniauth\/omniauth\/wiki\/Resolving-CVE-2015-9284).",
            "published_date":"2019-05-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/rubysec\/ruby-advisory-db",
            "commit_href":"https:\/\/github.com\/rubysec\/ruby-advisory-db\/commit\/aef9f623c0be838234d53baf18977564804da397",
            "commit_sha":"aef9f623c0be838234d53baf18977564804da397",
            "patch":"SINGLE",
            "chain_ord":"['aef9f623c0be838234d53baf18977564804da397']",
            "before_first_fix_commit":"{'f05618a2eac8817b13e31f15940fe32c5d4ff6b6'}",
            "last_fix_commit":"aef9f623c0be838234d53baf18977564804da397",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/11\/2021, 22:02:34",
            "message":"Add v2.0.0 as a patched version for CVE-2015-9284\n\nhttps:\/\/github.com\/omniauth\/omniauth\/releases\/tag\/v2.0.0",
            "author":"Reed Loden",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'gems\/omniauth\/CVE-2015-9284.yml': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rubysec\/ruby-advisory-db\/raw\/aef9f623c0be838234d53baf18977564804da397\/gems%2Fomniauth%2FCVE-2015-9284.yml', 'patch': '@@ -20,6 +20,9 @@ description: |\\n cvss_v2: 6.8\\n cvss_v3: 8.8\\n \\n+patched_versions:\\n+  - \">= 2.0.0\"\\n+\\n related:\\n   url:\\n     - https:\/\/github.com\/omniauth\/omniauth\/pull\/809'}}",
            "message_norm":"add v2.0.0 as a patched version for cve-2015-9284\n\nhttps:\/\/github.com\/omniauth\/omniauth\/releases\/tag\/v2.0.0",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('v2.0.0', 'VERSION', ''), ('patched', 'ACTION', ''), ('cve-2015-9284', 'VULNID', 'CVE'), ('https:\/\/github.com\/omniauth\/omniauth\/releases\/tag\/v2.0.0', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['gems\/omniauth\/CVE-2015-9284.yml'])",
            "num_files":1.0
        },
        {
            "index":1945,
            "vuln_id":"GHSA-gwp4-hfv6-p7hw",
            "cwe_id":"{'CWE-502'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/ad418eeb974e357f2797aef64aa0e3ffaaa6125b'}",
            "dataset":"osv",
            "summary":"Deserialization of untrusted data in FasterXML jackson-databind A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9.2. This occurs when Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the logback jar in the classpath.",
            "published_date":"2019-08-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/FasterXML\/jackson-databind",
            "commit_href":"https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/ad418eeb974e357f2797aef64aa0e3ffaaa6125b",
            "commit_sha":"ad418eeb974e357f2797aef64aa0e3ffaaa6125b",
            "patch":"SINGLE",
            "chain_ord":"['ad418eeb974e357f2797aef64aa0e3ffaaa6125b']",
            "before_first_fix_commit":"{'322ae225cbcd07178a634e548d991b0aec6b47bf'}",
            "last_fix_commit":"ad418eeb974e357f2797aef64aa0e3ffaaa6125b",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/26\/2019, 04:58:11",
            "message":"Backport #2387, #2389 fixes",
            "author":"Tatu Saloranta",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'src\/main\/java\/com\/fasterxml\/jackson\/databind\/jsontype\/impl\/SubTypeValidator.java': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FasterXML\/jackson-databind\/raw\/ad418eeb974e357f2797aef64aa0e3ffaaa6125b\/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fjsontype%2Fimpl%2FSubTypeValidator.java', 'patch': '@@ -89,6 +89,12 @@\\n         s.add(\"org.jdom.transform.XSLTransformer\");\\n         s.add(\"org.jdom2.transform.XSLTransformer\");\\n \\n+        \/\/ [databind#2387]: EHCache\\n+        s.add(\"net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup\");\\n+\\n+        \/\/ [databind#2389]: logback\/jndi\\n+        s.add(\"ch.qos.logback.core.db.JNDIConnectionSource\");\\n+\\n         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\\n     }'}}",
            "message_norm":"backport #2387, #2389 fixes",
            "language":"en",
            "entities":"[('#2387', 'ISSUE', ''), ('#2389', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/fasterxml\/jackson\/databind\/jsontype\/impl\/SubTypeValidator.java'])",
            "num_files":1.0
        },
        {
            "index":2221,
            "vuln_id":"GHSA-j8qc-5fqr-52fp",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c570e2ecfc822941335ad48f6e10df4e21f11c96'}",
            "dataset":"osv",
            "summary":"Division by zero in `Conv2DBackpropFilter` ### Impact\nAn attacker can cause a division by zero to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([0, 0, 0, 0], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 1, 1, 1],\n  use_cudnn_on_gpu=False,\n  padding='SAME',\n  explicit_paddings=[],\n  data_format='NHWC',\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da\/tensorflow\/core\/kernels\/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments):\n\n```cc\nconst size_t size_A = output_image_size * filter_total_size; \nconst size_t size_B = output_image_size * dims.out_depth;\nconst size_t size_C = filter_total_size * dims.out_depth;\nconst size_t work_unit_size = size_A + size_B + size_C;\nconst size_t shard_size = (target_working_set_size + work_unit_size - 1) \/ work_unit_size;\n```\n\nIf all shapes are empty then `work_unit_size` is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service. \n\n### Patches\nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c570e2ecfc822941335ad48f6e10df4e21f11c96",
            "commit_sha":"c570e2ecfc822941335ad48f6e10df4e21f11c96",
            "patch":"SINGLE",
            "chain_ord":"['c570e2ecfc822941335ad48f6e10df4e21f11c96']",
            "before_first_fix_commit":"{'1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da'}",
            "last_fix_commit":"c570e2ecfc822941335ad48f6e10df4e21f11c96",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2021, 00:50:10",
            "message":"Fix issues in Conv2DBackpropFilter.\n\nPiperOrigin-RevId: 369772454\nChange-Id: I49b465f2ae2ce91def61b56cea8000197d5177d8",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/conv_grad_filter_ops.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c570e2ecfc822941335ad48f6e10df4e21f11c96\/tensorflow%2Fcore%2Fkernels%2Fconv_grad_filter_ops.cc', 'patch': '@@ -495,6 +495,14 @@ class Conv2DCustomBackpropFilterOp : public OpKernel {\\n     const int filter_total_size = dims.spatial_dims[0].filter_size *\\n                                   dims.spatial_dims[1].filter_size *\\n                                   dims.in_depth;\\n+    OP_REQUIRES(\\n+        context,\\n+        filter_total_size * dims.out_depth == filter_backprop->NumElements(),\\n+        errors::InvalidArgument(\\n+            \"filter_size does not have enough elements, requested \",\\n+            filter_total_size * dims.out_depth, \", got \",\\n+            filter_backprop->NumElements()));\\n+\\n     \/\/ The output image size is the spatial size of the output.\\n     const int output_image_size =\\n         dims.spatial_dims[0].output_size * dims.spatial_dims[1].output_size;\\n@@ -518,6 +526,11 @@ class Conv2DCustomBackpropFilterOp : public OpKernel {\\n \\n     const size_t work_unit_size = size_A + size_B + size_C;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size != 0,\\n+        errors::InvalidArgument(\\n+            \"Work size for convolution would be 0, which is not acceptable\"));\\n+\\n     const size_t shard_size =\\n         (target_working_set_size + work_unit_size - 1) \/ work_unit_size;'}}",
            "message_norm":"fix issues in conv2dbackpropfilter.\n\npiperorigin-revid: 369772454\nchange-id: i49b465f2ae2ce91def61b56cea8000197d5177d8",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issues', 'FLAW', ''), ('369772454', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_grad_filter_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2157,
            "vuln_id":"GHSA-hx9q-2mx4-m4pg",
            "cwe_id":"{'CWE-191', 'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943'}",
            "dataset":"osv",
            "summary":"Missing validation causes denial of service via `Conv3DBackpropFilterV2` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n\/\/ ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55305).",
            "published_date":"2022-05-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "commit_sha":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "patch":"MULTI",
            "chain_ord":"['84563f265f28b3c36a15335c8b005d405260e943', '20cb18724b0bf6c09071a3f53434c4eec53cc147']",
            "before_first_fix_commit":"{'3f30e4965889b1b86b1d56392e437ccc08907f65'}",
            "last_fix_commit":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/20\/2022, 19:05:26",
            "message":"Allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nRelated to the fix for #55305\n\nPiperOrigin-RevId: 443157549",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/20cb18724b0bf6c09071a3f53434c4eec53cc147\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -94,8 +94,10 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n-    OP_REQUIRES(context, num_segments > 0,\\n-                errors::InvalidArgument(\"Number of segments must be positive\"));\\n+    OP_REQUIRES(\\n+        context, num_segments >= 0,\\n+        errors::InvalidArgument(\\n+            \"Number of segments must be non-negative but got \", num_segments));\\n     OP_REQUIRES(context, segment_dims != 0,\\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));'}}",
            "message_norm":"allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nrelated to the fix for #55305\n\npiperorigin-revid: 443157549",
            "language":"en",
            "entities":"[('#55305', 'ISSUE', ''), ('443157549', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2075,
            "vuln_id":"GHSA-hhvc-g5hv-48c6",
            "cwe_id":"{'CWE-471'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c1e1fc899ad5f8c725dcbb6470069890b5060bc7'}",
            "dataset":"osv",
            "summary":"Write to immutable memory region in TensorFlow ### Impact\nThe `tf.raw_ops.ImmutableConst` operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:\n\n```python\n>>> import tensorflow as tf\n>>> with open('\/tmp\/test.txt','w') as f: f.write('a'*128)\n>>> tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,\n                              memory_region_name='\/tmp\/test.txt')\n```\n\nIf the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault.\n\nThis is because the alocator used to return the buffer data is not marked as returning an opaque handle since the [needed virtual method](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/c1e1fc899ad5f8c725dcbb6470069890b5060bc7\/tensorflow\/core\/framework\/typed_allocator.h#L78-L85) is [not overriden](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/acdf3c04fcfa767ae8d109b9e1f727ef050dba4d\/tensorflow\/core\/kernels\/immutable_constant_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [c1e1fc899ad5f8c725dcbb6470069890b5060bc7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c1e1fc899ad5f8c725dcbb6470069890b5060bc7) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2020-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
            "commit_sha":"c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
            "patch":"SINGLE",
            "chain_ord":"['c1e1fc899ad5f8c725dcbb6470069890b5060bc7']",
            "before_first_fix_commit":"{'acdf3c04fcfa767ae8d109b9e1f727ef050dba4d'}",
            "last_fix_commit":"c1e1fc899ad5f8c725dcbb6470069890b5060bc7",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/05\/2020, 01:06:23",
            "message":"Mark `MemmappedTensorAllocator` as returning opaque handle.\n\nThis allocator is used for `ImmutableConstantOp` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nFor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. This means writing to the buffer. However, in our case, the buffer is immutable and already contains the tensor data. Hence, writing to it is both destructive and causes a crash.\n\nPiperOrigin-RevId: 345786451\nChange-Id: I46369c50fa60b3431709ffe068a728d3061f49c4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/immutable_constant_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c1e1fc899ad5f8c725dcbb6470069890b5060bc7\/tensorflow%2Fcore%2Fkernels%2Fimmutable_constant_op.cc', 'patch': \"@@ -62,6 +62,12 @@ class MemmappedTensorAllocator : public Allocator {\\n \\n   void set_delete_on_deallocate() { delete_on_deallocate_ = true; }\\n \\n+  \/\/ Make sure tensors or complex types (strings, variants, resources) don't get\\n+  \/\/ their constructor called via a placement new since that would require\\n+  \/\/ writing to immutable data.\\n+  \/\/ See also: tensorflow\/core\/framework\/typed_allocator.h\\n+  bool AllocatesOpaqueHandle() const override { return true; }\\n+\\n  private:\\n   std::unique_ptr<ReadOnlyMemoryRegion> memory_region_;\\n   \/\/ If there is an error during allocation we keep it in this status.\"}}",
            "message_norm":"mark `memmappedtensorallocator` as returning opaque handle.\n\nthis allocator is used for `immutableconstantop` and it returns a handle to the contents of a memory mapped file which is supposed to represent a tensor.\n\nfor tensors of complex types (resources, variables and strings), allocators which are not marked as returning opaque handles will call placement new to initialize each element. this means writing to the buffer. however, in our case, the buffer is immutable and already contains the tensor data. hence, writing to it is both destructive and causes a crash.\n\npiperorigin-revid: 345786451\nchange-id: i46369c50fa60b3431709ffe068a728d3061f49c4",
            "language":"en",
            "entities":"[('initialize', 'SECWORD', ''), ('345786451', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/immutable_constant_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1891,
            "vuln_id":"GHSA-gj85-pvp5-mvf9",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/ptrofimov\/beanstalk_console\/commit\/e351c8260ec1d3718d9e475ee57c7e12c47f19da'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Beanstalk console Beanstalk console prior to version 1.7.12 is vulnerable to cross-site scripting.",
            "published_date":"2022-02-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/ptrofimov\/beanstalk_console",
            "commit_href":"https:\/\/github.com\/ptrofimov\/beanstalk_console\/commit\/e351c8260ec1d3718d9e475ee57c7e12c47f19da",
            "commit_sha":"e351c8260ec1d3718d9e475ee57c7e12c47f19da",
            "patch":"SINGLE",
            "chain_ord":"['e351c8260ec1d3718d9e475ee57c7e12c47f19da']",
            "before_first_fix_commit":"{'95d5808836034835fc33500c6a82276277fabdf9'}",
            "last_fix_commit":"e351c8260ec1d3718d9e475ee57c7e12c47f19da",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/01\/2022, 15:43:02",
            "message":"Sanitize input",
            "author":"Nav-Prak",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/include.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ptrofimov\/beanstalk_console\/raw\/e351c8260ec1d3718d9e475ee57c7e12c47f19da\/lib%2Finclude.php', 'patch': \"@@ -19,7 +19,7 @@ function autoload_class($class) {\\n require_once dirname(__FILE__) . '\/..\/config.php';\\r\\n require_once dirname(__FILE__) . '\/..\/src\/Storage.php';\\r\\n \\r\\n-$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';\\r\\n+$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';\\r\\n $GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';\\r\\n $GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';\\r\\n $GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';\"}}",
            "message_norm":"sanitize input",
            "language":"ro",
            "entities":"[('sanitize', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/include.php'])",
            "num_files":1.0
        },
        {
            "index":1675,
            "vuln_id":"GHSA-f655-xhvm-cwp4",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/jenkinsci\/gitlab-plugin\/commit\/24e9a99d8151b5345109ef12cddc1ab323baa4ee'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Jenkins GitLab Plugin Jenkins GitLab Plugin 1.5.34 and earlier does not escape multiple fields inserted into the description of webhook-triggered builds, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers with Item\/Configure permission.",
            "published_date":"2022-07-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/gitlab-plugin",
            "commit_href":"https:\/\/github.com\/jenkinsci\/gitlab-plugin\/commit\/24e9a99d8151b5345109ef12cddc1ab323baa4ee",
            "commit_sha":"24e9a99d8151b5345109ef12cddc1ab323baa4ee",
            "patch":"SINGLE",
            "chain_ord":"['24e9a99d8151b5345109ef12cddc1ab323baa4ee']",
            "before_first_fix_commit":"{'316f8aa1190c646e0cddf6614e3d881d1490be7f'}",
            "last_fix_commit":"24e9a99d8151b5345109ef12cddc1ab323baa4ee",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/29\/2022, 15:15:16",
            "message":"[SECURITY-2316]",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/main\/resources\/com\/dabsquared\/gitlabjenkins\/cause\/GitLabWebHookCause\/description.jelly': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/gitlab-plugin\/raw\/24e9a99d8151b5345109ef12cddc1ab323baa4ee\/src%2Fmain%2Fresources%2Fcom%2Fdabsquared%2Fgitlabjenkins%2Fcause%2FGitLabWebHookCause%2Fdescription.jelly', 'patch': '@@ -1,4 +1,5 @@\\n <?jelly escape-by-default=\\'true\\'?>\\n <j:jelly xmlns:j=\"jelly:core\">\\n-  <span><j:out value=\"${it.shortDescription}\" \/><\/span>\\n+  <!-- SECURITY-2316: This used to show the HTML-formatted it.shortDescription, but that does not properly neutralize user-provided input -->\\n+  <span>Triggered by GitLab Webhook<\/span>\\n <\/j:jelly>'}}",
            "message_norm":"[security-2316]",
            "language":"en",
            "entities":"[('security-2316', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/resources\/com\/dabsquared\/gitlabjenkins\/cause\/GitLabWebHookCause\/description.jelly'])",
            "num_files":1.0
        },
        {
            "index":3407,
            "vuln_id":"GHSA-xc47-3rch-cv57",
            "cwe_id":"{'CWE-284'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/0e5ef53c352754de2778ffa20c85da15fd6f7ae0'}",
            "dataset":"osv",
            "summary":"Improper Access Control in snipe-it Users with no system permissions are able to see and create personal access tokens",
            "published_date":"2022-01-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/0e5ef53c352754de2778ffa20c85da15fd6f7ae0",
            "commit_sha":"0e5ef53c352754de2778ffa20c85da15fd6f7ae0",
            "patch":"SINGLE",
            "chain_ord":"['0e5ef53c352754de2778ffa20c85da15fd6f7ae0']",
            "before_first_fix_commit":"{'512dbfee7acfcafa1524c8b2fb4cc4ef96958d0b', 'eb8f23a888ccb2dc53a11c6dd240cbe8373500aa'}",
            "last_fix_commit":"0e5ef53c352754de2778ffa20c85da15fd6f7ae0",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/13\/2022, 09:36:52",
            "message":"Merge pull request #10504 from snipe\/fixes\/auth_controls_on_api_key_creation\n\nFixes auth controls on api key creation",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'app\/Http\/Controllers\/ProfileController.php': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/0e5ef53c352754de2778ffa20c85da15fd6f7ae0\/app%2FHttp%2FControllers%2FProfileController.php', 'patch': \"@@ -113,6 +113,12 @@ public function postIndex(ImageUploadRequest $request)\\n      *\/\\n     public function api()\\n     {\\n+\\n+        \/\/ Make sure the self.api permission has been granted\\n+        if (!Gate::allows('self.api')) {\\n+            abort(403);\\n+        }\\n+\\n         return view('account\/api');\\n     }\"}}",
            "message_norm":"merge pull request #10504 from snipe\/fixes\/auth_controls_on_api_key_creation\n\nfixes auth controls on api key creation",
            "language":"en",
            "entities":"[('#10504', 'ISSUE', ''), ('auth_controls_on_api_key_creation', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('auth', 'SECWORD', ''), ('key', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/ProfileController.php'])",
            "num_files":1.0
        },
        {
            "index":733,
            "vuln_id":"GHSA-6346-5r4h-ff5x",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/724e2d186a33c0c27273107dc4f160a09384877f'}",
            "dataset":"osv",
            "summary":"Microweber vulnerable to cross-site scripting (XSS) Microweber is a drag and drop website builder and a powerful next generation CMS. Microweber versions 1.2.15 and prior are vulnerable to cross-site scripting. This could lead to injection of arbitrary JaveScript code, defacement of a page, or stealing cookies. A patch is available on the `master` branch of Microweber's GitHub repository.",
            "published_date":"2022-05-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/724e2d186a33c0c27273107dc4f160a09384877f",
            "commit_sha":"724e2d186a33c0c27273107dc4f160a09384877f",
            "patch":"SINGLE",
            "chain_ord":"['724e2d186a33c0c27273107dc4f160a09384877f']",
            "before_first_fix_commit":"{'5eb846301d61b22eda84a997026d050a14a518f4'}",
            "last_fix_commit":"724e2d186a33c0c27273107dc4f160a09384877f",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/03\/2022, 08:41:32",
            "message":"Update order_filtering.blade.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/MicroweberPackages\/Order\/resources\/views\/admin\/orders\/partials\/order_filtering.blade.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/724e2d186a33c0c27273107dc4f160a09384877f\/src%2FMicroweberPackages%2FOrder%2Fresources%2Fviews%2Fadmin%2Forders%2Fpartials%2Forder_filtering.blade.php', 'patch': '@@ -158,7 +158,7 @@ class=\"btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text\\n             $(document).ready(function () {\\n                 var searchOrdersByProduct = new mw.autoComplete({\\n                     element: \"#js-orders-search-by-products\",\\n-                    placeholder: \"<?php if ($productKeyword) { echo $productKeyword; } else { _e(\"Search by products...\"); }?>\",\\n+                    placeholder: \"<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(\"Search by products...\"); }?>\",\\n                     autoComplete:true,\\n                     ajaxConfig: {\\n                         method: \\'get\\','}}",
            "message_norm":"update order_filtering.blade.php",
            "language":"da",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Order\/resources\/views\/admin\/orders\/partials\/order_filtering.blade.php'])",
            "num_files":1.0
        },
        {
            "index":3417,
            "vuln_id":"GHSA-xf7w-r453-m56c",
            "cwe_id":"{'CWE-59'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/npm\/fstream\/commit\/6a77d2fa6e1462693cf8e46f930da96ec1b0bb22'}",
            "dataset":"osv",
            "summary":"Arbitrary File Overwrite in fstream Versions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 1.0.12 or later.",
            "published_date":"2019-05-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/npm\/fstream",
            "commit_href":"https:\/\/github.com\/npm\/fstream\/commit\/6a77d2fa6e1462693cf8e46f930da96ec1b0bb22",
            "commit_sha":"6a77d2fa6e1462693cf8e46f930da96ec1b0bb22",
            "patch":"SINGLE",
            "chain_ord":"['6a77d2fa6e1462693cf8e46f930da96ec1b0bb22']",
            "before_first_fix_commit":"{'1e4527ffe8688d4f5325283d7cf2cf2d61f14c6b'}",
            "last_fix_commit":"6a77d2fa6e1462693cf8e46f930da96ec1b0bb22",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/15\/2019, 00:37:57",
            "message":"Clobber a Link if it's in the way of a File\n\nFixes https:\/\/github.com\/npm\/node-tar\/issues\/212",
            "author":"isaacs",
            "comments":"{'com_1': {'author': 'ret2libc', 'datetime': '06\/24\/2019, 10:41:00', 'body': \"Does this fix really solve the issue? Doesn't it make it just racy? (e.g. if at the time of check the file is a regular one and it is switched to an hardlink just before the `create()` function is called)\"}, 'com_2': {'author': 'mssalvatore', 'datetime': '08\/29\/2019, 11:35:42', 'body': 'I don\\'t believe this patch is attempting to resolve a TOCTOU condition. The context of the original issue (https:\/\/hackerone.com\/reports\/344595) is that arbitrary files on the filesystem could be overwritten if a crafted **tar archive** were extracted.\\r\\n\\r\\nWithin that context, I don\\'t believe this fix is has a race condition. It is not trying to prevent general TOCTOU issues. Rather, it\\'s preventing the condition where you\\'re in the process of iterating through the entries in a tar archive and you:\\r\\n\\r\\n1) Extract a hardlink named \"LINK\" that points to some arbitrary location (like \/etc\/passwd)\\r\\n2) Extract a regular file that also has the name \"LINK\"\\r\\n\\r\\nWithout this fix, this scenario would result in \/etc\/passwd being overwritten with the contents of the regular file \"LINK\".\\r\\n\\r\\nAll that being said, I am *really* not a javascript\/node.js developer, so:\\r\\n\\r\\n1) Since node.js handles I\/O asynchronously, are there concurrency concerns while looping through and extracting the entries of a tarball? \\r\\n2) Why would someone use fstream at all in this capacity when they could use the tar package instead? I\\'m curious as to why this fix was really necessary in the first place.'}, 'com_3': {'author': 'ret2libc', 'datetime': '09\/10\/2019, 15:20:25', 'body': \"> I don't believe this patch is attempting to resolve a TOCTOU condition. The context of the original issue (https:\/\/hackerone.com\/reports\/344595) is that arbitrary files on the filesystem could be overwritten if a crafted **tar archive** were extracted.\\r\\n\\r\\nTrue, though I was not able to trigger the issue while extracting a tar. Maybe I'm just missing something, but I ended up analyzing the issue in the context of a copy from one directory to another. Also, from reading various comments around this seemed more like a security fix to make npm-audit happy.\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/writer.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/npm\/fstream\/raw\/6a77d2fa6e1462693cf8e46f930da96ec1b0bb22\/lib%2Fwriter.js', 'patch': \"@@ -147,7 +147,7 @@ Writer.prototype._stat = function (current) {\\n \\n     \/\/ if it's a type change, then we need to clobber or error.\\n     \/\/ if it's not a type change, then let the impl take care of it.\\n-    if (currentType !== self.type) {\\n+    if (currentType !== self.type || self.type === 'File' && current.nlink > 1) {\\n       return rimraf(self._path, function (er) {\\n         if (er) return self.error(er)\\n         self._old = null\"}}",
            "message_norm":"clobber a link if it's in the way of a file\n\nfixes https:\/\/github.com\/npm\/node-tar\/issues\/212",
            "language":"en",
            "entities":"[('https:\/\/github.com\/npm\/node-tar\/issues\/212', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/writer.js'])",
            "num_files":1.0
        },
        {
            "index":1809,
            "vuln_id":"GHSA-g452-6rfc-vrvx",
            "cwe_id":"{'CWE-915'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/samholmes\/node-open-graph\/commit\/a0cef507a90adaac7dbbe9c404f09a50bdefb348'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in open-graph This affects the package open-graph before 0.2.6. The function parse could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor payload.",
            "published_date":"2021-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/samholmes\/node-open-graph",
            "commit_href":"https:\/\/github.com\/samholmes\/node-open-graph\/commit\/a0cef507a90adaac7dbbe9c404f09a50bdefb348",
            "commit_sha":"a0cef507a90adaac7dbbe9c404f09a50bdefb348",
            "patch":"SINGLE",
            "chain_ord":"['a0cef507a90adaac7dbbe9c404f09a50bdefb348']",
            "before_first_fix_commit":"{'ef532ed1c51be12155bc1f9baecad09a7c587e04'}",
            "last_fix_commit":"a0cef507a90adaac7dbbe9c404f09a50bdefb348",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/03\/2021, 16:31:10",
            "message":"Patch: Filter out blacklisted keys in og property name",
            "author":"Samuel Holmes",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 0, 'total': 7}",
            "files":"{'index.js': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/samholmes\/node-open-graph\/raw\/a0cef507a90adaac7dbbe9c404f09a50bdefb348\/index.js', 'patch': '@@ -10,6 +10,11 @@ var shorthandProperties = {\\n \\t\"audio\": \"audio:url\"\\n }\\n \\n+var keyBlacklist = [\\n+\\t\\'__proto__\\',\\n+\\t\\'constructor\\',\\n+\\t\\'prototype\\'\\n+]\\n \\n exports = module.exports = function(url, cb, options){\\n   var userAgent = (options || {}).userAgent || \\'NodeOpenGraphCrawler (https:\/\/github.com\/samholmes\/node-open-graph)\\'\\n@@ -122,6 +127,8 @@ exports.parse = function($, options){\\n \\t\\twhile (keys.length > 1) {\\n \\t\\t\\tkey = keys.shift();\\n \\n+\\t\\t\\tif (keyBlacklist.includes(key)) continue\\n+\\n \\t\\t\\tif (Array.isArray(ptr[key])) {\\n \\t\\t\\t\\t\/\/ the last index of ptr[key] should become\\n \\t\\t\\t\\t\/\/ the object we are examining.'}}",
            "message_norm":"patch: filter out blacklisted keys in og property name",
            "language":"en",
            "entities":"[('blacklisted', 'SECWORD', ''), ('keys', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":56,
            "vuln_id":"GHSA-27j5-4p9v-pp67",
            "cwe_id":"{'CWE-617'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2'}",
            "dataset":"osv",
            "summary":"`std::abort` raised from `TensorListReserve` ### Impact\nProviding a negative element to `num_elements` list argument of  `tf.raw_ops.TensorListReserve` causes the runtime to abort the process due to reallocating a `std::vector` to have a negative number of elements:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(\n  element_shape = tf.constant([1]),\n  num_elements=tf.constant([-1]),\n  element_dtype = tf.int32)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/list_kernels.cc#L312) calls `std::vector.resize()` with the new size controlled by input given by the user, without checking that this input is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [8a6e874437670045e6c7dc6154c7412b4a2135e2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a6e874437670045e6c7dc6154c7412b4a2135e2",
            "commit_sha":"8a6e874437670045e6c7dc6154c7412b4a2135e2",
            "patch":"SINGLE",
            "chain_ord":"['8a6e874437670045e6c7dc6154c7412b4a2135e2']",
            "before_first_fix_commit":"{'3e23241a7f330f62c701f5ceb10f6594cd735f70'}",
            "last_fix_commit":"8a6e874437670045e6c7dc6154c7412b4a2135e2",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/10\/2021, 00:32:55",
            "message":"Validate num_elements input in tf.raw_ops.TensorListReserve\n\nPiperOrigin-RevId: 383954564\nChange-Id: I454bd78eff85bc4f16ddb7e608596971cca47f8f",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/list_kernels.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8a6e874437670045e6c7dc6154c7412b4a2135e2\/tensorflow%2Fcore%2Fkernels%2Flist_kernels.cc', 'patch': '@@ -302,6 +302,10 @@ class TensorListReserve : public OpKernel {\\n     PartialTensorShape element_shape;\\n     OP_REQUIRES_OK(c, TensorShapeFromTensor(c->input(0), &element_shape));\\n     int32 num_elements = c->input(1).scalar<int32>()();\\n+    OP_REQUIRES(c, num_elements >= 0,\\n+                errors::InvalidArgument(\"The num_elements to reserve must be a \"\\n+                                        \"non negative number, but got \",\\n+                                        num_elements));\\n     TensorList output;\\n     output.element_shape = element_shape;\\n     output.element_dtype = element_dtype_;'}}",
            "message_norm":"validate num_elements input in tf.raw_ops.tensorlistreserve\n\npiperorigin-revid: 383954564\nchange-id: i454bd78eff85bc4f16ddb7e608596971cca47f8f",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('383954564', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/list_kernels.cc'])",
            "num_files":1.0
        },
        {
            "index":1482,
            "vuln_id":"GHSA-c53x-wwx2-pg96",
            "cwe_id":"{'CWE-79'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/bersLucas\/liljs\/commit\/779c0dcd8aba434a1c94db7d1d2d990a629f9a6c'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in @berslucas\/liljs Versions of  `@berslucas\/liljs` prior to 1.0.2 are vulnerable to Cross-Site Scripting (XSS). The package uses the unsafe `innerHTML` function without sanitizing input, which may allow attackers to execute arbitrary JavaScript on the victim's browser.\n\n\n## Recommendation\n\nUpgrade to version 1.0.2 or later.",
            "published_date":"2020-09-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/bersLucas\/liljs",
            "commit_href":"https:\/\/github.com\/bersLucas\/liljs\/commit\/779c0dcd8aba434a1c94db7d1d2d990a629f9a6c",
            "commit_sha":"779c0dcd8aba434a1c94db7d1d2d990a629f9a6c",
            "patch":"SINGLE",
            "chain_ord":"['779c0dcd8aba434a1c94db7d1d2d990a629f9a6c']",
            "before_first_fix_commit":"{'bc0919e0031e6e6aa99be9793a6a9afa8ad2e5b1'}",
            "last_fix_commit":"779c0dcd8aba434a1c94db7d1d2d990a629f9a6c",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/10\/2019, 03:29:54",
            "message":"Use textContent over innerHTML so you can bind untrusted text values\nwithout the possibility of an XSS attack.",
            "author":"Cody Mikol",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/liljs.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bersLucas\/liljs\/raw\/779c0dcd8aba434a1c94db7d1d2d990a629f9a6c\/src%2Fliljs.js', 'patch': '@@ -21,7 +21,7 @@ const liljs = (elem, data = {}) => {\\n      * @param {String} property Name of the property to render\\n      * @param {String} value (Optional) A value to use instead of a property (used in lil-list-text)\\n      *\/\\n-    const setText = (elem, property, value) => elem.innerHTML = value || state[property].value;\\n+    const setText = (elem, property, value) => elem.textContent = value || state[property].value;\\n \\n     \/** Set style helper function\\n      * @function setStyle\\n@@ -43,7 +43,7 @@ const liljs = (elem, data = {}) => {\\n      *\/\\n     const setList = (elem, property) => {\\n       \/\/TODO: Find a way to update without clearing lists\\n-      elem.innerHTML = \"\";\\n+      elem.textContent = \"\";\\n       state[property].value.forEach(value => {\\n         let clone = document.importNode(state[property].template.content, true);\\n         clone.querySelectorAll(\"[lil-list-text]\").forEach(node => {'}}",
            "message_norm":"use textcontent over innerhtml so you can bind untrusted text values\nwithout the possibility of an xss attack.",
            "language":"en",
            "entities":"[('untrusted', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('attack', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/liljs.js'])",
            "num_files":1.0
        },
        {
            "index":1112,
            "vuln_id":"GHSA-82j4-vr25-x394",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/78522520892d4e29cc94148c6ec84a204a607b73'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in ShowDoc ShowDoc is vulnerable to stored cross-site scripting due to unrestricted file upload in versions 2.10.3 and prior. A patch is available and anticipated to be part of version 2.10.4.",
            "published_date":"2022-03-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/78522520892d4e29cc94148c6ec84a204a607b73",
            "commit_sha":"78522520892d4e29cc94148c6ec84a204a607b73",
            "patch":"SINGLE",
            "chain_ord":"['78522520892d4e29cc94148c6ec84a204a607b73']",
            "before_first_fix_commit":"{'52d1d902084387bec22a64e6027f100e939733c8', '830c89a4c2c5fd0dd491422bf8e97b4eb5713f55'}",
            "last_fix_commit":"78522520892d4e29cc94148c6ec84a204a607b73",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/13\/2022, 10:39:59",
            "message":"Merge pull request #1629 from ajaysenr\/master\n\nUpdate AttachmentModel.class.php",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/78522520892d4e29cc94148c6ec84a204a607b73\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -304,6 +304,7 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \"%\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xml\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xxhtml\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".aspx\")\\t\\t\\t\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
            "message_norm":"merge pull request #1629 from ajaysenr\/master\n\nupdate attachmentmodel.class.php",
            "language":"en",
            "entities":"[('#1629', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":3146,
            "vuln_id":"GHSA-vmjw-c2vp-p33c",
            "cwe_id":"{'CWE-681'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d'}",
            "dataset":"osv",
            "summary":"Crash in NMS ops caused by integer conversion to unsigned ### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.NonMaxSuppressionV5` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],\n  scores=[1.0,2.0,3.0],\n  max_output_size=-1,\n  iou_threshold=0.5,\n  score_threshold=0.5,\n  soft_nms_sigma=1.0,\n  pad_to_max_output_size=True)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a `std::vector`:\n\n```cc\n  const int output_size = max_output_size.scalar<int>()();\n  \/\/ ...\n  std::vector<int> selected;\n  \/\/ ...\n  if (pad_to_max_output_size) {\n    selected.resize(output_size, 0);\n    \/\/ ...\n  }\n```\n    \nHowever, as `std::vector::resize` takes the size argument as a `size_t` and `output_size` is an `int`, there is an implicit conversion to usigned. If the attacker supplies a negative value, this conversion results in a crash.\n\nA similar issue occurs in `CombinedNonMaxSuppression`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  clip_boxes=True)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d) and commit [b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58",
            "commit_sha":"b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58",
            "patch":"MULTI",
            "chain_ord":"['b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58', '3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d']",
            "before_first_fix_commit":"{'a87fa31dc3becc97c7e945b9b8c8711acb92fc12'}",
            "last_fix_commit":"3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:24:52",
            "message":"Prevent overflow due to integer conversion to unsigned.\n\nPiperOrigin-RevId: 387738045\nChange-Id: Id7e95bc07e02df1c66b72bd09f389608c87bdebe",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fnon_max_suppression_op.cc', 'patch': '@@ -930,6 +930,8 @@ class CombinedNonMaxSuppressionOp : public OpKernel {\\n         errors::InvalidArgument(\"max_size_per_class must be 0-D, got shape \",\\n                                 max_output_size.shape().DebugString()));\\n     const int max_size_per_class = max_output_size.scalar<int>()();\\n+    OP_REQUIRES(context, max_size_per_class > 0,\\n+                errors::InvalidArgument(\"max_size_per_class must be positive\"));\\n     \/\/ max_total_size: scalar\\n     const Tensor& max_total_size = context->input(3);\\n     OP_REQUIRES('}}",
            "message_norm":"prevent overflow due to integer conversion to unsigned.\n\npiperorigin-revid: 387738045\nchange-id: id7e95bc07e02df1c66b72bd09f389608c87bdebe",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('387738045', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2082,
            "vuln_id":"GHSA-hj8g-cw8x-2c6m",
            "cwe_id":"{'CWE-79'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/a5925f74d39775771d4c37c8d4c1acbb762fda0a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Microweber Microweber prior to version 1.3 is vulnerable to reflected cross-site scripting.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "commit_sha":"a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "patch":"SINGLE",
            "chain_ord":"['a5925f74d39775771d4c37c8d4c1acbb762fda0a']",
            "before_first_fix_commit":"{'0b6b1eb5ba85ffc8f74e6f5f5be9dc9f9f7e9d8f'}",
            "last_fix_commit":"a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 10:18:26",
            "message":"Update UrlManager.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/MicroweberPackages\/Helper\/UrlManager.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/a5925f74d39775771d4c37c8d4c1acbb762fda0a\/src%2FMicroweberPackages%2FHelper%2FUrlManager.php', 'patch': '@@ -276,7 +276,8 @@ public function string($skip_ajax = false)\\n \\n         \/\/ clear request params\\n         $cleanParam = new HTMLClean();\\n-        $u1 = $cleanParam->cleanArray($u1);\\n+        $u1 = $cleanParam->clean($u1);\\n+\\n \\n         return $u1;\\n     }'}}",
            "message_norm":"update urlmanager.php",
            "language":"sv",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SUBMIT_CENTERED",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Helper\/UrlManager.php'])",
            "num_files":1.0
        },
        {
            "index":1589,
            "vuln_id":"GHSA-cqhr-jqvc-qw9p",
            "cwe_id":"{'CWE-79'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/javamelody\/javamelody\/commit\/e0497c1980acebd257d3da78dfde29ae9bdffdf6'}",
            "dataset":"osv",
            "summary":"Java Melody vulnerable to cross-site scripting JavaMelody is a monitoring tool for JavaEE applications. Versions prior to 1.61.0 are vulnerable to a cross-site scripting (XSS) attack. This issue was patched in version 1.61.0, and users are recommended to upgrade to the latest version. There are no known workarounds.",
            "published_date":"2022-07-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/javamelody\/javamelody",
            "commit_href":"https:\/\/github.com\/javamelody\/javamelody\/commit\/e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "commit_sha":"e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "patch":"SINGLE",
            "chain_ord":"['e0497c1980acebd257d3da78dfde29ae9bdffdf6']",
            "before_first_fix_commit":"{'7f9460e61bc2d942af3fee19041deda6c8f85816'}",
            "last_fix_commit":"e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/24\/2016, 15:15:22",
            "message":"fix XSS",
            "author":"evernat",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/HtmlCoreReport.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/javamelody\/javamelody\/raw\/e0497c1980acebd257d3da78dfde29ae9bdffdf6\/javamelody-core%2Fsrc%2Fmain%2Fjava%2Fnet%2Fbull%2Fjavamelody%2FHtmlCoreReport.java', 'patch': '@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,\\n \\t\\tif (message != null) {\\r\\n \\t\\t\\twriteln(SCRIPT_BEGIN);\\r\\n \\t\\t\\t\/\/ writeDirectly pour ne pas g\u00e9rer de traductions si le message contient \\'#\\'\\r\\n-\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + javascriptEncode(message) + \"\\\\\");\");\\r\\n+\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + htmlEncodeButNotSpace(javascriptEncode(message)) + \"\\\\\");\");\\r\\n \\t\\t\\twriteln(\"\");\\r\\n \\t\\t\\t\/\/ redirect vers une url \u00e9vitant que F5 du navigateur ne refasse l\\'action au lieu de faire un refresh\\r\\n \\t\\t\\tif (partToRedirectTo == null) {'}}",
            "message_norm":"fix xss",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/HtmlCoreReport.java'])",
            "num_files":1.0
        },
        {
            "index":2462,
            "vuln_id":"GHSA-mrq4-7ch7-2465",
            "cwe_id":"{'CWE-94'}",
            "score":9.0,
            "chain":"{'https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/d02b469ec365822e6a9f017e57f588966248bf21'}",
            "dataset":"osv",
            "summary":"Server Side Twig Template Injection PrestaShop is an Open Source e-commerce platform. Starting with version 1.7.0.0 and ending with version 1.7.8.3, an attacker is able to inject twig code inside the back office when using the legacy layout. The problem is fixed in version 1.7.8.3. There are no known workarounds.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/PrestaShop",
            "commit_href":"https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/d02b469ec365822e6a9f017e57f588966248bf21",
            "commit_sha":"d02b469ec365822e6a9f017e57f588966248bf21",
            "patch":"SINGLE",
            "chain_ord":"['d02b469ec365822e6a9f017e57f588966248bf21']",
            "before_first_fix_commit":"{'ed8eb7ce8242e91d7acf85d7157277aad6bcac21', 'd2807b0560d5ca2835c6a4774e183c182d903f1a'}",
            "last_fix_commit":"d02b469ec365822e6a9f017e57f588966248bf21",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2022, 09:20:05",
            "message":"Merge pull request from GHSA-mrq4-7ch7-2465\n\nProperly escape smarty output for twig",
            "author":"GoT",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 19, 'total': 37}",
            "files":"{'src\/PrestaShopBundle\/Twig\/LayoutExtension.php': {'additions': 18, 'deletions': 19, 'changes': 37, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/PrestaShop\/raw\/d02b469ec365822e6a9f017e57f588966248bf21\/src%2FPrestaShopBundle%2FTwig%2FLayoutExtension.php', 'patch': \"@@ -218,26 +218,25 @@ public function getLegacyLayout(\\n             throw new Exception('PrestaShopBundle\\\\Twig\\\\LayoutExtension cannot find the {$content} string in legacy layout template', 1);\\n         }\\n \\n-        $content = str_replace(\\n-            [\\n-                '{$content}',\\n-                'var currentIndex = \\\\'index.php\\\\';',\\n-                '<\/head>',\\n-                '<\/body>',\\n-            ],\\n-            [\\n-                '{% block content_header %}{% endblock %}\\n-                 {% block content %}{% endblock %}\\n-                 {% block content_footer %}{% endblock %}\\n-                 {% block sidebar_right %}{% endblock %}',\\n-                'var currentIndex = \\\\'' . $this->context->getAdminLink($controllerName) . '\\\\';',\\n-                '{% block stylesheets %}{% endblock %}{% block extra_stylesheets %}{% endblock %}<\/head>',\\n-                '{% block javascripts %}{% endblock %}{% block extra_javascripts %}{% endblock %}{% block translate_javascripts %}{% endblock %}<\/body>',\\n-            ],\\n-            $layout\\n-        );\\n+        $explodedLayout = explode('{$content}', $layout);\\n+        $header = explode('<\/head>', $explodedLayout[0]);\\n+        $footer = explode('<\/body>', $explodedLayout[1]);\\n+\\n+        return $this->escapeSmarty(str_replace('var currentIndex = \\\\'index.php\\\\';', 'var currentIndex = \\\\'' . $this->context->getAdminLink($controllerName) . '\\\\';', $header[0]))\\n+            . '{% block stylesheets %}{% endblock %}{% block extra_stylesheets %}{% endblock %}<\/head>'\\n+            . $this->escapeSmarty($header[1])\\n+            . '{% block content_header %}{% endblock %}'\\n+            . '{% block content %}{% endblock %}'\\n+            . '{% block content_footer %}{% endblock %}'\\n+            . '{% block sidebar_right %}{% endblock %}'\\n+            . $this->escapeSmarty($footer[0])\\n+            . '{% block javascripts %}{% endblock %}{% block extra_javascripts %}{% endblock %}{% block translate_javascripts %}{% endblock %}<\/body>'\\n+            . $this->escapeSmarty($footer[1]);\\n+    }\\n \\n-        return $content;\\n+    private function escapeSmarty(string $template): string\\n+    {\\n+        return '{{ \\\\'' . addslashes($template) . '\\\\' | raw }}';\\n     }\\n \\n     \/**\"}}",
            "message_norm":"merge pull request from ghsa-mrq4-7ch7-2465\n\nproperly escape smarty output for twig",
            "language":"en",
            "entities":"[('ghsa-mrq4-7ch7-2465', 'VULNID', 'GHSA'), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/PrestaShopBundle\/Twig\/LayoutExtension.php'])",
            "num_files":1.0
        },
        {
            "index":2838,
            "vuln_id":"GHSA-r24h-634p-m72x",
            "cwe_id":"{'CWE-668'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Atinux\/schema-inspector\/commit\/345a7b2eed11bb6128421150d65f4f83fdbb737d'}",
            "dataset":"osv",
            "summary":"Validation Bypass in schema-inspector In schema-inspector before 1.6.9, a maliciously crafted JavaScript object can bypass the `sanitize()` and the `validate()` function used within schema-inspector.",
            "published_date":"2020-06-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/Atinux\/schema-inspector",
            "commit_href":"https:\/\/github.com\/Atinux\/schema-inspector\/commit\/345a7b2eed11bb6128421150d65f4f83fdbb737d",
            "commit_sha":"345a7b2eed11bb6128421150d65f4f83fdbb737d",
            "patch":"SINGLE",
            "chain_ord":"['345a7b2eed11bb6128421150d65f4f83fdbb737d']",
            "before_first_fix_commit":"{'7f67b2a95f85ecb76d0dc5326d76d082a2b99e1f'}",
            "last_fix_commit":"345a7b2eed11bb6128421150d65f4f83fdbb737d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/20\/2020, 15:01:42",
            "message":"fix: Issue #75",
            "author":"S\u00e9bastien Chopin",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'lib\/schema-inspector.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/schema-inspector\/schema-inspector\/raw\/345a7b2eed11bb6128421150d65f4f83fdbb737d\/lib%2Fschema-inspector.js', 'patch': \"@@ -80,7 +80,7 @@\\n \\t\\tthis._custom = {};\\n \\t\\tif (custom != null) {\\n \\t\\t\\tfor (var key in custom) {\\n-\\t\\t\\t\\tif (custom.hasOwnProperty(key)){\\n+\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(custom, key)) {\\n \\t\\t\\t\\t\\tthis._custom['$' + key] = custom[key];\\n \\t\\t\\t\\t}\\n \\t\\t\\t}\\n@@ -480,7 +480,7 @@\\n \\t\\t\\t}\\n \\t\\t\\telse {\\n \\t\\t\\t\\tfor (var key in candidate) {\\n-\\t\\t\\t\\t\\tif (candidate.hasOwnProperty(key)){\\n+\\t\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(candidate, key)) {\\n \\t\\t\\t\\t\\t\\tthis._deeperArray(key);\\n \\t\\t\\t\\t\\t\\tthis._validate(items, candidate[key]);\\n \\t\\t\\t\\t\\t\\tthis._back();\\n@@ -1011,7 +1011,7 @@\\n \\t\\t\\t}\\n \\t\\t\\telse {\\n \\t\\t\\t\\tfor (i in post) {\\n-\\t\\t\\t\\t\\tif(post.hasOwnProperty(i)){\\n+\\t\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(post, i)) {\\n \\t\\t\\t\\t\\t\\tthis._deeperArray(i);\\n \\t\\t\\t\\t\\t\\tpost[i] = this._sanitize(schema.items, post[i]);\\n \\t\\t\\t\\t\\t\\tthis._back();\\n@@ -1430,7 +1430,7 @@\\n \\t\\t\\tvar prop = schema.properties || {};\\n \\n \\t\\t\\tfor (var key in prop) {\\n-\\t\\t\\t\\tif (prop.hasOwnProperty(key)){\\n+\\t\\t\\t\\tif (Object.prototype.hasOwnProperty.call(prop, key)) {\\n \\t\\t\\t\\t\\tif (prop[key].optional === true && _rand.bool() === true) {\\n \\t\\t\\t\\t\\t\\tcontinue;\\n \\t\\t\\t\\t\\t}\"}}",
            "message_norm":"fix: issue #75",
            "language":"fr",
            "entities":"[('#75', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/schema-inspector.js'])",
            "num_files":1.0
        },
        {
            "index":987,
            "vuln_id":"GHSA-773q-5334-5gf9",
            "cwe_id":"{'CWE-789'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/rust-blockchain\/evm\/commit\/19ade858c430ab13eb562764a870ac9f8506f8dd'}",
            "dataset":"osv",
            "summary":"Memory over-allocation in evm-core Prior to the patch, when executing specific EVM opcodes related\nto memory operations that use `evm_core::Memory::copy_large`, the\ncrate can over-allocate memory when it is not needed, making it\npossible for an attacker to perform denial-of-service attack.\n\nThe flaw was corrected in commit `19ade85`.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rust-blockchain\/evm",
            "commit_href":"https:\/\/github.com\/rust-blockchain\/evm\/commit\/19ade858c430ab13eb562764a870ac9f8506f8dd",
            "commit_sha":"19ade858c430ab13eb562764a870ac9f8506f8dd",
            "patch":"SINGLE",
            "chain_ord":"['19ade858c430ab13eb562764a870ac9f8506f8dd']",
            "before_first_fix_commit":"{'2a8a3e967ec265fdc7120ff6b57ceab021ca69f6'}",
            "last_fix_commit":"19ade858c430ab13eb562764a870ac9f8506f8dd",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/11\/2021, 15:33:30",
            "message":"Skip setting memory value if the value vec is empty",
            "author":"Wei Tang",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'core\/src\/memory.rs': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rust-blockchain\/evm\/raw\/19ade858c430ab13eb562764a870ac9f8506f8dd\/core%2Fsrc%2Fmemory.rs', 'patch': '@@ -105,6 +105,10 @@ impl Memory {\\n \\t\\tvalue: &[u8],\\n \\t\\ttarget_size: Option<usize>\\n \\t) -> Result<(), ExitFatal> {\\n+\\t\\tif value.is_empty() {\\n+\\t\\t\\treturn Ok(())\\n+\\t\\t}\\n+\\t\\t\\n \\t\\tlet target_size = target_size.unwrap_or(value.len());\\n \\n \\t\\tif offset.checked_add(target_size)'}}",
            "message_norm":"skip setting memory value if the value vec is empty",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/memory.rs'])",
            "num_files":1.0
        },
        {
            "index":226,
            "vuln_id":"GHSA-38rv-5jqc-m2cv",
            "cwe_id":"{'CWE-918'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/recurly\/recurly-client-python\/commit\/049c74699ce93cf126feff06d632ea63fba36742'}",
            "dataset":"osv",
            "summary":"High severity vulnerability that affects recurly The Recurly Client Python Library before 2.0.5, 2.1.16, 2.2.22, 2.3.1, 2.4.5, 2.5.1, 2.6.2 is vulnerable to a Server-Side Request Forgery vulnerability in the \"Resource.get\" method that could result in compromise of API keys or other critical resources.",
            "published_date":"2019-01-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/recurly\/recurly-client-python",
            "commit_href":"https:\/\/github.com\/recurly\/recurly-client-python\/commit\/049c74699ce93cf126feff06d632ea63fba36742",
            "commit_sha":"049c74699ce93cf126feff06d632ea63fba36742",
            "patch":"SINGLE",
            "chain_ord":"['049c74699ce93cf126feff06d632ea63fba36742']",
            "before_first_fix_commit":"{'9db2d1a0268201571a567d73481d0d16c6fbc5e1'}",
            "last_fix_commit":"049c74699ce93cf126feff06d632ea63fba36742",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/09\/2017, 00:45:28",
            "message":"Fix SSRF: do not use urljoin, quote uuids",
            "author":"Benjamin Eckel",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'recurly\/resource.py': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/recurly\/recurly-client-python\/raw\/049c74699ce93cf126feff06d632ea63fba36742\/recurly%2Fresource.py', 'patch': '@@ -12,8 +12,7 @@\\n import recurly.errors\\n from recurly.link_header import parse_link_value\\n from six.moves import http_client\\n-from six.moves.urllib.parse import urlencode, urljoin, urlsplit\\n-\\n+from six.moves.urllib.parse import urlencode, urlsplit, quote\\n \\n class Money(object):\\n \\n@@ -338,7 +337,8 @@ def get(cls, uuid):\\n         can be directly requested with this method.\\n \\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.member_path % (uuid,))\\n+        uuid = quote(str(uuid))\\n+        url = recurly.base_uri() + (cls.member_path % (uuid,))\\n         resp, elem = cls.element_for_url(url)\\n         return cls.from_element(elem)\\n \\n@@ -606,7 +606,7 @@ def all(cls, **kwargs):\\n         parameters.\\n \\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\\n+        url = recurly.base_uri() + cls.collection_path\\n         if kwargs:\\n             url = \\'%s?%s\\' % (url, urlencode(kwargs))\\n         return Page.page_for_url(url)\\n@@ -616,7 +616,7 @@ def count(cls, **kwargs):\\n         \"\"\"Return a count of server side resources given\\n         filtering arguments in kwargs.\\n         \"\"\"\\n-        url = urljoin(recurly.base_uri(), cls.collection_path)\\n+        url = recurly.base_uri() + cls.collection_path\\n         if kwargs:\\n             url = \\'%s?%s\\' % (url, urlencode(kwargs))\\n         return Page.count_for_url(url)\\n@@ -638,7 +638,7 @@ def _update(self):\\n         return self.put(self._url)\\n \\n     def _create(self):\\n-        url = urljoin(recurly.base_uri(), self.collection_path)\\n+        url = recurly.base_uri() + self.collection_path\\n         return self.post(url)\\n \\n     def put(self, url):'}}",
            "message_norm":"fix ssrf: do not use urljoin, quote uuids",
            "language":"fr",
            "entities":"[('fix', 'ACTION', ''), ('ssrf', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['recurly\/resource.py'])",
            "num_files":1.0
        },
        {
            "index":3492,
            "vuln_id":"GHSA-xrr4-74mc-rpjc",
            "cwe_id":"{'CWE-59'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/irmen\/Pyro3\/commit\/554e095a62c4412c91f981e72fd34a936ac2bf1e'}",
            "dataset":"osv",
            "summary":"Pyro mishandles pid files in temporary directory locations and opening the pid file as root pyro before 3.15 unsafely handles pid files in temporary directory locations and opening the pid file as root. An attacker can use this flaw to overwrite arbitrary files via symlinks.",
            "published_date":"2018-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/irmen\/Pyro3",
            "commit_href":"https:\/\/github.com\/irmen\/Pyro3\/commit\/554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "commit_sha":"554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "patch":"SINGLE",
            "chain_ord":"['554e095a62c4412c91f981e72fd34a936ac2bf1e']",
            "before_first_fix_commit":"{'1df908f8e8bd3eaf0fd2f1b80d38405f6a10328d'}",
            "last_fix_commit":"554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/01\/2011, 13:32:40",
            "message":"changed pidfile location because of security vulnerability, debian bug #631912",
            "author":"irmen",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'Pyro\/ext\/daemonizer.py': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/irmen\/Pyro3\/raw\/554e095a62c4412c91f981e72fd34a936ac2bf1e\/Pyro%2Fext%2Fdaemonizer.py', 'patch': '@@ -47,7 +47,9 @@ class Daemonizer:\\n     \"\"\"\\n     def __init__(self, pidfile=None):\\n         if not pidfile:\\n-            self.pidfile = \"\/tmp\/%s.pid\" % self.__class__.__name__.lower()\\n+            # PID file moved out of \/tmp to avoid security vulnerability\\n+            # changed by Debian maintainer per Debian bug #631912\\n+            self.pidfile = \"\/var\/run\/pyro-%s.pid\" % self.__class__.__name__.lower()\\n         else:\\n             self.pidfile = pidfile\\n \\n@@ -121,12 +123,16 @@ def main_loop(self):\\n \\n     def process_command_line(self, argv, verbose=1):\\n         usage = \"usage:  %s  start | stop | restart | status | debug \" \\\\\\n+                \"[--pidfile=...] \" \\\\\\n                 \"(run as non-daemon)\" % os.path.basename(argv[0])\\n         if len(argv) < 2:\\n             print usage\\n             raise SystemExit\\n         else:\\n             operation = argv[1]\\n+            if len(argv) > 2 and argv[2].startswith(\\'--pidfile=\\') and \\\\\\n+                len(argv[2]) > len(\\'--pidfile=\\'):\\n+                self.pidfile = argv[2][len(\\'--pidfile=\\'):]\\n         pid = self.get_pid()\\n         if operation == \\'status\\':\\n             if self.is_process_running():'}}",
            "message_norm":"changed pidfile location because of security vulnerability, debian bug #631912",
            "language":"en",
            "entities":"[('changed', 'ACTION', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('bug', 'FLAW', ''), ('#631912', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Pyro\/ext\/daemonizer.py'])",
            "num_files":1.0
        },
        {
            "index":1666,
            "vuln_id":"GHSA-f55g-x8qq-2569",
            "cwe_id":"{'CWE-1236'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d9e136ff228e3760fd6dd7572869ac38e9a81809'}",
            "dataset":"osv",
            "summary":"CSV-Safe improperly filters special characters potentially leading to CSV injection CSV-Safe gem < 3.0.0 doesn't filter out special characters which could trigger CSV Injection.",
            "published_date":"2022-05-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/WeblateOrg\/weblate",
            "commit_href":"https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "commit_sha":"d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "patch":"SINGLE",
            "chain_ord":"['d9e136ff228e3760fd6dd7572869ac38e9a81809']",
            "before_first_fix_commit":"{'66f55341916de8a9e9125bb4af661373fb5c525b'}",
            "last_fix_commit":"d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2017, 15:19:46",
            "message":"Improve filter on CSV formulas\n\nIt seems that Excel is interpreting way more than I originally thought.\n\nFixes https:\/\/hackerone.com\/reports\/223999\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
            "author":"Michal \u010ciha\u0159",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'weblate\/trans\/exporters.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WeblateOrg\/weblate\/raw\/d9e136ff228e3760fd6dd7572869ac38e9a81809\/weblate%2Ftrans%2Fexporters.py', 'patch': '@@ -279,6 +279,6 @@ def string_filter(self, text):\\n         used at first position of translatable strings, so the harm is not\\n         that big.\\n         \"\"\"\\n-        if text and text[0] in (\\'=\\', \\'+\\', \\'-\\', \\'@\\'):\\n-            return \"\\'\" + text\\n+        if text and text[0] in (\\'=\\', \\'+\\', \\'-\\', \\'@\\', \\'|\\', \\'%\\'):\\n+            return \"\\'{0}\\'\".format(text.replace(\\'|\\', \\'\\\\|\\'))\\n         return text'}}",
            "message_norm":"improve filter on csv formulas\n\nit seems that excel is interpreting way more than i originally thought.\n\nfixes https:\/\/hackerone.com\/reports\/223999\n\nsigned-off-by: michal \u010diha\u0159 <michal@cihar.com>",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('fixes', 'ACTION', ''), ('https:\/\/hackerone.com\/reports\/223999', 'URL', ''), ('michal@cihar.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['weblate\/trans\/exporters.py'])",
            "num_files":1.0
        },
        {
            "index":945,
            "vuln_id":"GHSA-73rp-q4rx-5grc",
            "cwe_id":"{'CWE-284', 'CWE-863'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/c162dfffb9bfd264d232aaaf5bb3daee16a3cb38'}",
            "dataset":"osv",
            "summary":"Incorrect Authorization in microweber Users Account Pre-Takeover or Users Account Takeover. in GitHub repository microweber\/microweber prior to 1.2.15. Victim Account Take Over. Since, there is no email confirmation, an attacker can easily create an account in the application using the Victim\u2019s Email. This allows an attacker to gain pre-authentication to the victim\u2019s account. Further, due to the lack of proper validation of email coming from Social Login and failing to check if an account already exists, the victim will not identify if an account is already existing. Hence, the attacker\u2019s persistence will remain. An attacker would be able to see all the activities performed by the victim user impacting the confidentiality and attempt to modify\/corrupt the data impacting the integrity and availability factor. This attack becomes more interesting when an attacker can register an account from an employee\u2019s email address. Assuming the organization uses G-Suite, it is much more impactful to hijack into an employee\u2019s account.",
            "published_date":"2022-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/c162dfffb9bfd264d232aaaf5bb3daee16a3cb38",
            "commit_sha":"c162dfffb9bfd264d232aaaf5bb3daee16a3cb38",
            "patch":"SINGLE",
            "chain_ord":"['c162dfffb9bfd264d232aaaf5bb3daee16a3cb38']",
            "before_first_fix_commit":"{'12c0316b3bde8ff6a6adc5d2a05f6409b03c9556'}",
            "last_fix_commit":"c162dfffb9bfd264d232aaaf5bb3daee16a3cb38",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 12:54:29",
            "message":"Update index.blade.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'src\/MicroweberPackages\/Shop\/resources\/views\/index.blade.php': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/c162dfffb9bfd264d232aaaf5bb3daee16a3cb38\/src%2FMicroweberPackages%2FShop%2Fresources%2Fviews%2Findex.blade.php', 'patch': '@@ -46,9 +46,11 @@\\n                         <div class=\"d-flex\">\\n                             <p class=\"col-6 mb-0\">\\n                                 @if($product->hasSpecialPrice())\\n-                                    <span class=\"price-old\"><?php print currency_format($product->specialPrice); ?><\/span>\\n+                                    <span class=\"price-old\"><?php print currency_format($product->price); ?><\/span>\\n+                                    <span class=\"money\"><?php print currency_format($product->specialPrice); ?><\/span>\\n+                                @else\\n+                                    <span class=\"money\"><?php print currency_format($product->price); ?><\/span>\\n                                 @endif\\n-                                <span class=\"money\"><?php print currency_format($product->price); ?><\/span>\\n                             <\/p>\\n \\n                             <a class=\"col-6 text-end text-right align-self-center\" href=\"{{content_link($product->id)}}\"> View<\/a>'}}",
            "message_norm":"update index.blade.php",
            "language":"sv",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Shop\/resources\/views\/index.blade.php'])",
            "num_files":1.0
        },
        {
            "index":326,
            "vuln_id":"GHSA-3x96-m42v-hvh5",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/c51285f791e48e536111cd57a9544ccbf7f33961'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Microweber Cross-site Scripting (XSS) - Reflected in GitHub repository microweber\/microweber prior to 1.2.18.",
            "published_date":"2022-06-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/c51285f791e48e536111cd57a9544ccbf7f33961",
            "commit_sha":"c51285f791e48e536111cd57a9544ccbf7f33961",
            "patch":"SINGLE",
            "chain_ord":"['c51285f791e48e536111cd57a9544ccbf7f33961']",
            "before_first_fix_commit":"{'10550ec85018bb0f581edd0ac2aed0d7bc9fe6b1'}",
            "last_fix_commit":"c51285f791e48e536111cd57a9544ccbf7f33961",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/22\/2022, 11:56:16",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 3, 'total': 12}",
            "files":"{'userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php': {'additions': 9, 'deletions': 3, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/c51285f791e48e536111cd57a9544ccbf7f33961\/userfiles%2Fmodules%2Fmicroweber%2Ftoolbar%2Feditor_tools%2Fmodule_settings%2Findex.php', 'patch': '@@ -87,11 +87,13 @@\\n     if (isset($_GET[\\'autosize\\'])) {\\n         $autoSize = $_GET[\\'autosize\\'];\\n     }\\n+    $autoSize = xss_clean($autoSize);\\n \\n     $type = \\'\\';\\n     if (isset($_GET[\\'type\\'])) {\\n         $type = $_GET[\\'type\\'];\\n     }\\n+    $type = xss_clean($type);\\n \\n     $mod_id = $mod_orig_id = false;\\n     $is_linked_mod = false;\\n@@ -403,7 +405,9 @@\\n                 if (mw.notification) {\\n                     mw.notification.success(\\'<?php _ejs(\\'Settings are saved\\') ?>\\');\\n                 }\\n+                <?php if (isset($params[\\'id\\'])) : ?>\\n                 mw.reload_module_parent(\\'#<?php print $params[\\'id\\']  ?>\\')\\n+                <?php endif; ?>\\n \\n             });\\n \\n@@ -440,9 +444,11 @@\\n <body class=\"mw-external-loading loading\">\\n <div id=\"settings-main\">\\n     <div id=\"settings-container\">\\n-        <div class=\"mw-module-live-edit-settings <?php print $params[\\'id\\'] ?>\"\\n-             id=\"module-id-<?php print $params[\\'id\\'] ?>\">{content}\\n-        <\/div>\\n+        <?php if (isset($params[\\'id\\'])) : ?>\\n+            <div class=\"mw-module-live-edit-settings <?php print $params[\\'id\\'] ?>\"\\n+                 id=\"module-id-<?php print $params[\\'id\\'] ?>\">{content}\\n+            <\/div>\\n+        <?php endif; ?>\\n     <\/div>\\n <\/div>'}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php'])",
            "num_files":1.0
        },
        {
            "index":1218,
            "vuln_id":"GHSA-8hfj-j24r-96c4",
            "cwe_id":"{'CWE-27', 'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/moment\/moment\/commit\/4211bfc8f15746be4019bba557e29a7ba83d54c5'}",
            "dataset":"osv",
            "summary":"Path Traversal: 'dir\/..\/..\/filename' in moment.locale ### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user-provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo](https:\/\/github.com\/moment\/moment)",
            "published_date":"2022-04-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/moment\/moment",
            "commit_href":"https:\/\/github.com\/moment\/moment\/commit\/4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "commit_sha":"4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "patch":"SINGLE",
            "chain_ord":"['4211bfc8f15746be4019bba557e29a7ba83d54c5']",
            "before_first_fix_commit":"{'f2a813afcfd0dd6e63812ea74c46ecc627f6a6a6'}",
            "last_fix_commit":"4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/27\/2022, 11:46:47",
            "message":"[bugfix] Avoid loading path-looking locales from fs",
            "author":"Iskren Chernev",
            "comments":"{'com_1': {'author': 'kuraga', 'datetime': '05\/11\/2022, 17:44:47', 'body': '@ichernev , why two `\\\\\\\\`?'}, 'com_2': {'author': 'omoustaouda', 'datetime': '06\/19\/2022, 12:17:54', 'body': \"@ichernev, thank you for the patch!\\r\\n\\r\\na consideration that come at a first glance: I'd consider allowing only the expected valid characters, \\r\\nlike `it-IT`, `es-ES`, ...\\r\\n\\r\\ninstead of preventing the ones that look not sane,\\r\\nthe reason is that there are uncountable ways to escape chars like `\/` and `\\\\` to look different and possibly not being caught by this regexp.\"}}",
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'src\/lib\/locale\/locales.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moment\/moment\/raw\/4211bfc8f15746be4019bba557e29a7ba83d54c5\/src%2Flib%2Flocale%2Flocales.js', 'patch': \"@@ -62,6 +62,11 @@ function chooseLocale(names) {\\n     return globalLocale;\\n }\\n \\n+function isLocaleNameSane(name) {\\n+    \/\/ Prevent names that look like filesystem paths, i.e contain '\/' or '\\\\'\\n+    return name.match('^[^\/\\\\\\\\\\\\\\\\]*$') != null;\\n+}\\n+\\n function loadLocale(name) {\\n     var oldLocale = null,\\n         aliasedRequire;\\n@@ -70,7 +75,8 @@ function loadLocale(name) {\\n         locales[name] === undefined &&\\n         typeof module !== 'undefined' &&\\n         module &&\\n-        module.exports\\n+        module.exports &&\\n+        isLocaleNameSane(name)\\n     ) {\\n         try {\\n             oldLocale = globalLocale._abbr;\"}}",
            "message_norm":"[bugfix] avoid loading path-looking locales from fs",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib\/locale\/locales.js'])",
            "num_files":1.0
        },
        {
            "index":359,
            "vuln_id":"GHSA-44r7-7p62-q3fr",
            "cwe_id":"{'CWE-330', 'CWE-338'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/miekg\/dns\/commit\/8ebf2e419df7857ac8919baa05248789a8ffbf33'}",
            "dataset":"osv",
            "summary":"Insecure generation of random numbers The miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math\/rand is used. The TXID becomes predictable, leading to response forgeries.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/miekg\/dns",
            "commit_href":"https:\/\/github.com\/miekg\/dns\/commit\/8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "commit_sha":"8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "patch":"SINGLE",
            "chain_ord":"['8ebf2e419df7857ac8919baa05248789a8ffbf33']",
            "before_first_fix_commit":"{'6d0449f98180253901e9551a10ce679f35ff05be'}",
            "last_fix_commit":"8ebf2e419df7857ac8919baa05248789a8ffbf33",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/11\/2019, 07:31:09",
            "message":"Use crypto\/rand for random id generation. (#1044)\n\n* Use crypto\/rand for random id generation.\r\n\r\nFixes #1043 and #1037\r\n\r\n* Panic on rare crypto\/rand error.\r\n\r\n* Fixes in response to review.",
            "author":"Jacob Hoffman-Andrews",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 42, 'total': 52}",
            "files":"{'msg.go': {'additions': 10, 'deletions': 42, 'changes': 52, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/miekg\/dns\/raw\/8ebf2e419df7857ac8919baa05248789a8ffbf33\/msg.go', 'patch': '@@ -11,14 +11,12 @@ package dns\\n \/\/go:generate go run msg_generate.go\\n \\n import (\\n-\\tcrand \"crypto\/rand\"\\n+\\t\"crypto\/rand\"\\n \\t\"encoding\/binary\"\\n \\t\"fmt\"\\n \\t\"math\/big\"\\n-\\t\"math\/rand\"\\n \\t\"strconv\"\\n \\t\"strings\"\\n-\\t\"sync\"\\n )\\n \\n const (\\n@@ -73,53 +71,23 @@ var (\\n \\tErrTime          error = &Error{err: \"bad time\"}      \/\/ ErrTime indicates a timing error in TSIG authentication.\\n )\\n \\n-\/\/ Id by default, returns a 16 bits random number to be used as a\\n-\/\/ message id. The random provided should be good enough. This being a\\n-\/\/ variable the function can be reassigned to a custom function.\\n-\/\/ For instance, to make it return a static value:\\n+\/\/ Id by default returns a 16-bit random number to be used as a message id. The\\n+\/\/ number is drawn from a cryptographically secure random number generator.\\n+\/\/ This being a variable the function can be reassigned to a custom function.\\n+\/\/ For instance, to make it return a static value for testing:\\n \/\/\\n \/\/\\tdns.Id = func() uint16 { return 3 }\\n var Id = id\\n \\n-var (\\n-\\tidLock sync.Mutex\\n-\\tidRand *rand.Rand\\n-)\\n-\\n \/\/ id returns a 16 bits random number to be used as a\\n \/\/ message id. The random provided should be good enough.\\n func id() uint16 {\\n-\\tidLock.Lock()\\n-\\n-\\tif idRand == nil {\\n-\\t\\t\/\/ This (partially) works around\\n-\\t\\t\/\/ https:\/\/github.com\/golang\/go\/issues\/11833 by only\\n-\\t\\t\/\/ seeding idRand upon the first call to id.\\n-\\n-\\t\\tvar seed int64\\n-\\t\\tvar buf [8]byte\\n-\\n-\\t\\tif _, err := crand.Read(buf[:]); err == nil {\\n-\\t\\t\\tseed = int64(binary.LittleEndian.Uint64(buf[:]))\\n-\\t\\t} else {\\n-\\t\\t\\tseed = rand.Int63()\\n-\\t\\t}\\n-\\n-\\t\\tidRand = rand.New(rand.NewSource(seed))\\n+\\tvar output uint16\\n+\\terr := binary.Read(rand.Reader, binary.BigEndian, &output)\\n+\\tif err != nil {\\n+\\t\\tpanic(\"dns: reading random id failed: \" + err.Error())\\n \\t}\\n-\\n-\\t\/\/ The call to idRand.Uint32 must be within the\\n-\\t\/\/ mutex lock because *rand.Rand is not safe for\\n-\\t\/\/ concurrent use.\\n-\\t\/\/\\n-\\t\/\/ There is no added performance overhead to calling\\n-\\t\/\/ idRand.Uint32 inside a mutex lock over just\\n-\\t\/\/ calling rand.Uint32 as the global math\/rand rng\\n-\\t\/\/ is internally protected by a sync.Mutex.\\n-\\tid := uint16(idRand.Uint32())\\n-\\n-\\tidLock.Unlock()\\n-\\treturn id\\n+\\treturn output\\n }\\n \\n \/\/ MsgHdr is a a manually-unpacked version of (id, bits).'}}",
            "message_norm":"use crypto\/rand for random id generation. (#1044)\n\n* use crypto\/rand for random id generation.\r\n\r\nfixes #1043 and #1037\r\n\r\n* panic on rare crypto\/rand error.\r\n\r\n* fixes in response to review.",
            "language":"en",
            "entities":"[('crypto', 'SECWORD', ''), ('#1044', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#1043', 'ISSUE', ''), ('#1037', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['msg.go'])",
            "num_files":1.0
        },
        {
            "index":1548,
            "vuln_id":"GHSA-cg3h-rc9q-g8v9",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/6ccb5c12fc1be065ebce9c89c4677ee939b88597'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in pimcore pimcore version 10.3.0 and prior is vulnerable to cross-site scripting.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/6ccb5c12fc1be065ebce9c89c4677ee939b88597",
            "commit_sha":"6ccb5c12fc1be065ebce9c89c4677ee939b88597",
            "patch":"SINGLE",
            "chain_ord":"['6ccb5c12fc1be065ebce9c89c4677ee939b88597']",
            "before_first_fix_commit":"{'7b6b2229ed3f19da1632afcbf9b8fec6d768faad'}",
            "last_fix_commit":"6ccb5c12fc1be065ebce9c89c4677ee939b88597",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2022, 12:03:58",
            "message":"[Admin] Website Settings - Escape grid values properly",
            "author":"dpahuja",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 7, 'total': 26}",
            "files":"{'bundles\/AdminBundle\/Resources\/public\/js\/pimcore\/settings\/website.js': {'additions': 19, 'deletions': 7, 'changes': 26, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/6ccb5c12fc1be065ebce9c89c4677ee939b88597\/bundles%2FAdminBundle%2FResources%2Fpublic%2Fjs%2Fpimcore%2Fsettings%2Fwebsite.js', 'patch': '@@ -36,7 +36,7 @@ pimcore.settings.website = Class.create({\\n                 border:false,\\n                 layout:\"fit\",\\n                 closable:true,\\n-                items:[this.getRowEditor()]\\n+                items:[this.getRowEditor()],\\n             });\\n \\n             var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\\n@@ -133,6 +133,7 @@ pimcore.settings.website = Class.create({\\n                 dataIndex: \\'data\\',\\n                 flex: 300,\\n                 editable: true,\\n+                editor: new Ext.form.TextField({}),\\n                 renderer: this.getCellRenderer.bind(this),\\n             },\\n             {text: t(\"site\"), flex: 100, sortable:true, dataIndex: \"siteId\",\\n@@ -303,7 +304,10 @@ pimcore.settings.website = Class.create({\\n             bodyCls: \"pimcore_editable_grid\",\\n             stripeRows:true,\\n             columns : {\\n-                items: typesColumns\\n+                items: typesColumns,\\n+                defaults: {\\n+                    renderer: Ext.util.Format.htmlEncode\\n+                },\\n             },\\n             sm:  Ext.create(\\'Ext.selection.RowModel\\', {}),\\n             bbar:this.pagingtoolbar,\\n@@ -359,15 +363,23 @@ pimcore.settings.website = Class.create({\\n     },\\n \\n     getCellEditor: function (record) {\\n-        var data = record.data;\\n+        let data = record.data;\\n \\n-        var type = data.type;\\n-        var property;\\n+        let type = data.type;\\n+        let property;\\n \\n         if (type === \"text\") {\\n-            property = Ext.create(\\'Ext.form.TextField\\');\\n+            property = {\\n+                xtype: \\'textfield\\',\\n+                flex: 1,\\n+                value: data.data\\n+            }\\n         } else if (type == \"textarea\") {\\n-            property = Ext.create(\\'Ext.form.TextArea\\');\\n+            property = {\\n+                xtype: \"textarea\",\\n+                flex: 1,\\n+                value: data.data\\n+            }\\n         } else if (type == \"document\" || type == \"asset\" || type == \"object\") {\\n             property = {\\n                 xtype: \\'textfield\\','}}",
            "message_norm":"[admin] website settings - escape grid values properly",
            "language":"af",
            "entities":"[('admin', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Resources\/public\/js\/pimcore\/settings\/website.js'])",
            "num_files":1.0
        },
        {
            "index":20,
            "vuln_id":"GHSA-247x-2f9f-5wp7",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/448a16182065bd08a202d9057dd8ca541e67996c'}",
            "dataset":"osv",
            "summary":"Stack overflow in TensorFlow ### Impact\nThe `GraphDef` format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a `GraphDef` containing a fragment such as the following can be consumed when loading a `SavedModel`:\n\n```\n  library {\n    function {\n      signature {\n        name: \"SomeOp\"\n        description: \"Self recursive op\"\n      }\n      node_def {\n        name: \"1\"\n        op: \"SomeOp\"\n      }\n      node_def {\n        name: \"2\"\n        op: \"SomeOp\"\n      }\n    }\n  } \n```\n\nThis would result in a stack overflow during execution as resolving each `NodeDef` means resolving the function itself and its nodes.\n\n### Patches\nWe have patched the issue in GitHub commit [448a16182065bd08a202d9057dd8ca541e67996c](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/448a16182065bd08a202d9057dd8ca541e67996c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/448a16182065bd08a202d9057dd8ca541e67996c",
            "commit_sha":"448a16182065bd08a202d9057dd8ca541e67996c",
            "patch":"SINGLE",
            "chain_ord":"['448a16182065bd08a202d9057dd8ca541e67996c']",
            "before_first_fix_commit":"{'7b1eba4193a389c7e92e01e585aeb71be97529cd'}",
            "last_fix_commit":"448a16182065bd08a202d9057dd8ca541e67996c",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2021, 00:49:32",
            "message":"Prevent stack overflow when FunctionLib in GraphDef has a self-recursive function.\n\nIt is likely that no recursivity is supported, but we should handle this separately.\n\nPiperOrigin-RevId: 414860329\nChange-Id: I02a2270e86282b37362ddd485eeef16fb986a9e0",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 0, 'total': 18}",
            "files":"{'tensorflow\/cc\/saved_model\/loader.cc': {'additions': 18, 'deletions': 0, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/448a16182065bd08a202d9057dd8ca541e67996c\/tensorflow%2Fcc%2Fsaved_model%2Floader.cc', 'patch': '@@ -25,6 +25,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/attr_value.pb.h\"\\n #include \"tensorflow\/core\/framework\/function.pb.h\"\\n #include \"tensorflow\/core\/framework\/node_def.pb.h\"\\n+#include \"tensorflow\/core\/framework\/op_def.pb.h\"\\n #include \"tensorflow\/core\/framework\/tensor.pb.h\"\\n #include \"tensorflow\/core\/lib\/io\/path.h\"\\n #include \"tensorflow\/core\/lib\/monitoring\/counter.h\"\\n@@ -99,6 +100,19 @@ static Status ValidateNode(const NodeDef& node) {\\n   return Status::OK();\\n }\\n \\n+static Status ValidateFunctionNotRecursive(const FunctionDef& function) {\\n+  const auto& function_name = function.signature().name();\\n+  for (const auto& node : function.node_def()) {\\n+    if (node.op() == function_name) {\\n+      return errors::FailedPrecondition(\\n+          \"Function \", function_name,\\n+          \" is self recursive and TensorFlow does not support this scenario.\");\\n+    }\\n+  }\\n+\\n+  return Status::OK();\\n+}\\n+\\n static Status ValidateSavedTensors(const GraphDef& graph_def) {\\n   for (const auto& node : graph_def.node()) {\\n     TF_RETURN_IF_ERROR(ValidateNode(node));\\n@@ -110,6 +124,10 @@ static Status ValidateSavedTensors(const GraphDef& graph_def) {\\n       for (const auto& node : function.node_def()) {\\n         TF_RETURN_IF_ERROR(ValidateNode(node));\\n       }\\n+\\n+      \/\/ Also check that there is no recursivity in the library\\n+      \/\/ TODO(mihaimaruseac): Do more than self-recursivity\\n+      TF_RETURN_IF_ERROR(ValidateFunctionNotRecursive(function));\\n     }\\n   }'}}",
            "message_norm":"prevent stack overflow when functionlib in graphdef has a self-recursive function.\n\nit is likely that no recursivity is supported, but we should handle this separately.\n\npiperorigin-revid: 414860329\nchange-id: i02a2270e86282b37362ddd485eeef16fb986a9e0",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('414860329', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/cc\/saved_model\/loader.cc'])",
            "num_files":1.0
        },
        {
            "index":2084,
            "vuln_id":"GHSA-hjgp-8ffr-hwwr",
            "cwe_id":"{'CWE-311'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/dcodeIO\/ClosureCompiler.js\/commit\/e59848f5975e5b15279c044daf9cff8ff192bae6'}",
            "dataset":"osv",
            "summary":"Downloads Resources over HTTP in closurecompiler Affected versions of `closurecompiler` insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `closurecompiler`.\n\n\n## Recommendation\n\nUpdate to version 1.6.1 or later.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/dcodeIO\/ClosureCompiler.js",
            "commit_href":"https:\/\/github.com\/dcodeIO\/ClosureCompiler.js\/commit\/e59848f5975e5b15279c044daf9cff8ff192bae6",
            "commit_sha":"e59848f5975e5b15279c044daf9cff8ff192bae6",
            "patch":"SINGLE",
            "chain_ord":"['e59848f5975e5b15279c044daf9cff8ff192bae6']",
            "before_first_fix_commit":"{'a896952c01f25a5317b6619723fe1ebeabaeb468', '923250af8c94154bdbc48f61230af1adf2543173'}",
            "last_fix_commit":"e59848f5975e5b15279c044daf9cff8ff192bae6",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/01\/2016, 14:20:53",
            "message":"Merge pull request #51 from Greenek\/master\n\nUpdate link to bundled-openjdk-jre",
            "author":"Daniel Wirtz",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'scripts\/configure.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/dcodeIO\/ClosureCompiler.js\/raw\/e59848f5975e5b15279c044daf9cff8ff192bae6\/scripts%2Fconfigure.js', 'patch': '@@ -48,7 +48,7 @@ function platformPostfix() {\\n }\\n \\n \/\/ Bundled JRE download url\\n-var jrePrefix = \"http:\/\/bundled-openjdk-jre.googlecode.com\/files\/OpenJDK-JRE-7u6_24-\";\\n+var jrePrefix = \"https:\/\/storage.googleapis.com\/google-code-archive-downloads\/v2\/code.google.com\/bundled-openjdk-jre\/OpenJDK-JRE-7u6_24-\";\\n var jrePostfix = \".tar.gz\";\\n var jreUrl = jrePrefix+platformPostfix()+jrePostfix;\\n \\n@@ -205,13 +205,13 @@ function download(downloadUrl, filename, callback, ondata) {\\n  * @param {function(?Error)} callback\\n  * @param {function(Object)=} entryCallback\\n  *\/\\n-function unpack(filename, callback, entryCallback) {   \\n+function unpack(filename, callback, entryCallback) {\\n     var input = fs.createReadStream(filename, { flags: \\'r\\', encoding: null }),\\n         files = {},\\n         dir = path.dirname(filename),\\n         returned = false,\\n         to = null;\\n-    \\n+\\n     \/\/ Finishs the unpack if all files are done\\n     function maybeFinish() {\\n         if (to !== null) clearTimeout(to);\\n@@ -230,7 +230,7 @@ function unpack(filename, callback, entryCallback) {\\n             }\\n         }, 1000);\\n     }\\n-    \\n+\\n     input.pipe(zlib.createGunzip()).pipe(tar.Parse()).on(\"entry\", function(entry) {\\n         if (entryCallback) entryCallback(entry);\\n         if (entry[\"type\"] == \\'File\\') {'}}",
            "message_norm":"merge pull request #51 from greenek\/master\n\nupdate link to bundled-openjdk-jre",
            "language":"no",
            "entities":"[('#51', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['scripts\/configure.js'])",
            "num_files":1.0
        },
        {
            "index":2695,
            "vuln_id":"GHSA-q485-j897-qc27",
            "cwe_id":"{'CWE-611'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/zhutougg\/c3p0\/commit\/2eb0ea97f745740b18dd45e4a909112d4685f87b'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects com.mchange:c3p0 c3p0 0.9.5.2 allows XXE in extractXmlConfigFromInputStream in com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java during initialization.",
            "published_date":"2019-01-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/zhutougg\/c3p0",
            "commit_href":"https:\/\/github.com\/zhutougg\/c3p0\/commit\/2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "commit_sha":"2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "patch":"SINGLE",
            "chain_ord":"['2eb0ea97f745740b18dd45e4a909112d4685f87b']",
            "before_first_fix_commit":"{'6796e1d0951b52897531e4ea62252191dacb17b5'}",
            "last_fix_commit":"2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/20\/2018, 13:11:13",
            "message":"Repair XXE vulnerability at initialization",
            "author":"zhutougg",
            "comments":"{'com_1': {'author': 'crazyguyonabike', 'datetime': '01\/09\/2019, 23:26:09', 'body': 'If this actually fixes the CVE, can you do a PR to the original source and\/or make a release?'}, 'com_2': {'author': 'mprins', 'datetime': '02\/21\/2019, 11:17:44', 'body': 'this is resolved in v.0.9.5.3 in a more elegant way, see: https:\/\/github.com\/swaldman\/c3p0\/commit\/7dfdda63f42759a5ec9b63d725b7412f74adb3e1'}}",
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'src\/java\/com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/zhutougg\/c3p0\/raw\/2eb0ea97f745740b18dd45e4a909112d4685f87b\/src%2Fjava%2Fcom%2Fmchange%2Fv2%2Fc3p0%2Fcfg%2FC3P0ConfigXmlUtils.java', 'patch': '@@ -144,6 +144,7 @@ public static C3P0Config extractXmlConfigFromDefaultResource() throws Exception\\n     public static C3P0Config extractXmlConfigFromInputStream(InputStream is) throws Exception\\n     {\\n         DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();\\n+\\tfact.setExpandEntityReferences(false);\\n         DocumentBuilder db = fact.newDocumentBuilder();\\n         Document doc = db.parse( is );'}}",
            "message_norm":"repair xxe vulnerability at initialization",
            "language":"en",
            "entities":"[('xxe', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('initialization', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/java\/com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java'])",
            "num_files":1.0
        },
        {
            "index":218,
            "vuln_id":"GHSA-3872-f48p-pxqj",
            "cwe_id":"{'CWE-88', 'CWE-77'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d83672a3e7415da1490334e2c9431e5da1966842', 'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/35d59f1f040541c358cece0a8d4a63183ca919b8'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Special Elements used in a Command ('Command Injection') in Weblate ### Impact\nWeblate didn't correctly sanitize some arguments passed to Git and Mercurial, which allowed changing their behavior in an unintended way.\n\n### Patches\n\nThe issues were fixed in the 4.11.1 release. The following commits are addressing it:\n\n* 35d59f1f040541c358cece0a8d4a63183ca919b8\n* d83672a3e7415da1490334e2c9431e5da1966842\n\n### Workarounds\n\nInstances in which untrusted users cannot create new components are not affected.\n\n### References\n* [SNYK-PYTHON-WEBLATE-2414088](https:\/\/security.snyk.io\/vuln\/SNYK-PYTHON-WEBLATE-2414088)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a topic in [discussions](https:\/\/github.com\/WeblateOrg\/weblate\/discussions)\n* Email us at [care@weblate.org](mailto:care@weblate.org)",
            "published_date":"2022-03-04",
            "chain_len":2,
            "project":"https:\/\/github.com\/WeblateOrg\/weblate",
            "commit_href":"https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d83672a3e7415da1490334e2c9431e5da1966842",
            "commit_sha":"d83672a3e7415da1490334e2c9431e5da1966842",
            "patch":"MULTI",
            "chain_ord":"['35d59f1f040541c358cece0a8d4a63183ca919b8', 'd83672a3e7415da1490334e2c9431e5da1966842']",
            "before_first_fix_commit":"{'9a5a09781e5a19ab9a24878afb08c9fcafb21ca7'}",
            "last_fix_commit":"d83672a3e7415da1490334e2c9431e5da1966842",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/03\/2022, 07:45:16",
            "message":"vcs: Improve git parameters handling\n\nMake sure that all user provided input is handled as expected.",
            "author":"Michal \u010ciha\u0159",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 3, 'total': 8}",
            "files":"{'weblate\/vcs\/git.py': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WeblateOrg\/weblate\/raw\/d83672a3e7415da1490334e2c9431e5da1966842\/weblate%2Fvcs%2Fgit.py', 'patch': '@@ -85,7 +85,7 @@ def get_remote_branch(cls, repo: str):\\n         if not repo:\\n             return super().get_remote_branch(repo)\\n         try:\\n-            result = cls._popen([\"ls-remote\", \"--symref\", repo, \"HEAD\"])\\n+            result = cls._popen([\"ls-remote\", \"--symref\", \"--\", repo, \"HEAD\"])\\n         except RepositoryException:\\n             report_error(cause=\"Listing remote branch\")\\n             return super().get_remote_branch(repo)\\n@@ -149,7 +149,9 @@ def get_depth():\\n     @classmethod\\n     def _clone(cls, source: str, target: str, branch: str):\\n         \"\"\"Clone repository.\"\"\"\\n-        cls._popen([\"clone\"] + cls.get_depth() + [\"--branch\", branch, source, target])\\n+        cls._popen(\\n+            [\"clone\"] + cls.get_depth() + [\"--branch\", branch, \"--\", source, target]\\n+        )\\n \\n     def get_config(self, path):\\n         \"\"\"Read entry from configuration.\"\"\"\\n@@ -572,7 +574,7 @@ def get_last_repo_revision(cls, url):\\n \\n     @classmethod\\n     def get_remote_args(cls, source, target):\\n-        result = [\"--prefix=origin\/\", source, target]\\n+        result = [\"--prefix=origin\/\", \"--\", source, target]\\n         if cls.is_stdlayout(source):\\n             result.insert(0, \"--stdlayout\")\\n             revision = cls.get_last_repo_revision(source + \"\/trunk\/\")'}}",
            "message_norm":"vcs: improve git parameters handling\n\nmake sure that all user provided input is handled as expected.",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('user provided input', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['weblate\/vcs\/git.py'])",
            "num_files":1.0
        },
        {
            "index":866,
            "vuln_id":"GHSA-6m8p-4fxj-pgc2",
            "cwe_id":"{'CWE-78'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/mikaelbr\/mversion\/commit\/b7a8b32600e60759a7ad3921ec4a2750bf173482'}",
            "dataset":"osv",
            "summary":"OS Command Injection in mversion The issue occurs because tagName user input is formatted inside the exec function is executed without any checks.",
            "published_date":"2021-05-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/mikaelbr\/mversion",
            "commit_href":"https:\/\/github.com\/mikaelbr\/mversion\/commit\/b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "commit_sha":"b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "patch":"SINGLE",
            "chain_ord":"['b7a8b32600e60759a7ad3921ec4a2750bf173482']",
            "before_first_fix_commit":"{'a9ddbc2bc86eb48f6976b85d195b6a94e81ffb22'}",
            "last_fix_commit":"b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/23\/2020, 22:02:33",
            "message":"Fix Remote Command Execution",
            "author":"hbkhan",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/git.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mikaelbr\/mversion\/raw\/b7a8b32600e60759a7ad3921ec4a2750bf173482\/lib%2Fgit.js', 'patch': '@@ -61,7 +61,7 @@ module.exports.commit = function (files, message, newVer, tagName, callback) {\\n \\n     function (done) {\\n       cp.exec(\\n-        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),\\n+        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),\\n         gitExtra,\\n         done\\n       );'}}",
            "message_norm":"fix remote command execution",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('command execution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/git.js'])",
            "num_files":1.0
        },
        {
            "index":1686,
            "vuln_id":"GHSA-f7q6-xxph-mfm8",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/3ae96b9d41c117aafa45873ad10077d4b873a3cb'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Pimcore Pimcore prior to version 10.2.10 contains a cross-site scripting vulnerability.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "commit_sha":"3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "patch":"SINGLE",
            "chain_ord":"['3ae96b9d41c117aafa45873ad10077d4b873a3cb']",
            "before_first_fix_commit":"{'fbb2badbb05ec80e4f6f15b52fb2f58cbbf379c4'}",
            "last_fix_commit":"3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/25\/2022, 11:20:25",
            "message":"disallow html entity names on import - follow up to #11217",
            "author":"Divesh",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'models\/DataObject\/ClassDefinition\/Service.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/3ae96b9d41c117aafa45873ad10077d4b873a3cb\/models%2FDataObject%2FClassDefinition%2FService.php', 'patch': \"@@ -315,11 +315,11 @@ public static function generateLayoutTreeFromArray($array, $throwException = fal\\n     {\\n         if (is_array($array) && count($array) > 0) {\\n             if ($name = $array['name'] ?? false) {\\n-                $sanitizedName = htmlentities($name);\\n-                if ($sanitizedName !== $name) {\\n+                if (preg_match('\/<.+?>\/', $name)) {\\n                     throw new \\\\Exception('not a valid name:' . htmlentities($name));\\n                 }\\n             }\\n+\\n             \/** @var LoaderInterface $loader *\/\\n             $loader = \\\\Pimcore::getContainer()->get('pimcore.implementation_loader.object.' . $array['datatype']);\"}}",
            "message_norm":"disallow html entity names on import - follow up to #11217",
            "language":"en",
            "entities":"[('#11217', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['models\/DataObject\/ClassDefinition\/Service.php'])",
            "num_files":1.0
        },
        {
            "index":3241,
            "vuln_id":"GHSA-w77p-8cfg-2x43",
            "cwe_id":"{'CWE-284'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/qos-ch\/slf4j\/commit\/d2b27fba88e983f921558da27fc29b5f5d269405'}",
            "dataset":"osv",
            "summary":"Improper Access Control in SLF4J org.slf4j.ext.EventData in the slf4j-ext module in QOS.CH SLF4J before `1.8.0-beta4` allows remote attackers to bypass intended access restrictions via crafted data. EventData in the slf4j-ext module in QOS.CH SLF4J, has been fixed in SLF4J version `1.7.26` and later and in the `2.0.x` series.\n\nNote that while the [fix commit](https:\/\/github.com\/qos-ch\/slf4j\/commit\/d2b27fba88e983f921558da27fc29b5f5d269405) is associated with the tag `1.8.0-beta3`, the versions in [Maven](https:\/\/mvnrepository.com\/artifact\/org.slf4j\/slf4j-ext) go directly from `1.8.0-beta2` to `1.8.0-beta4`.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/qos-ch\/slf4j",
            "commit_href":"https:\/\/github.com\/qos-ch\/slf4j\/commit\/d2b27fba88e983f921558da27fc29b5f5d269405",
            "commit_sha":"d2b27fba88e983f921558da27fc29b5f5d269405",
            "patch":"SINGLE",
            "chain_ord":"['d2b27fba88e983f921558da27fc29b5f5d269405']",
            "before_first_fix_commit":"{'0ec1f6aac8648e87a7dda2f5730fef6db3b4fa33'}",
            "last_fix_commit":"d2b27fba88e983f921558da27fc29b5f5d269405",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2018, 00:09:26",
            "message":"fix SLF4J-431",
            "author":"Ceki Gulcu",
            "comments":"{'com_1': {'author': 'kbabioch', 'datetime': '03\/20\/2018, 08:48:11', 'body': 'What exactly is the issue here? Unfortunately there seem to be no details available on this, and marking a class \"deprecated\" is not necessarily a real fix.'}, 'com_2': {'author': 'ceki', 'datetime': '03\/20\/2018, 08:50:32', 'body': '@kbabioch  Are you using the EventData class?'}, 'com_3': {'author': 'kbabioch', 'datetime': '03\/20\/2018, 09:10:00', 'body': \"@ceki I'm evaluating this issue, and realized that basically no details are available yet :-\/.\"}, 'com_4': {'author': 'ceki', 'datetime': '03\/20\/2018, 09:18:17', 'body': 'SLF4J-431 is a subtask of SLF4J-430. EventData is slated to be removed due to a security vulnerability.'}, 'com_5': {'author': 'adioss', 'datetime': '12\/14\/2018, 16:02:22', 'body': 'Regarding http:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2018-8088, as far as I understand, solution is to update to version to 1.8.0-beta2.\\r\\nHowever, on https:\/\/jira.qos.ch\/browse\/SLF4J-430, you can see that fix version is 1.8.0-beta3.\\r\\nSo, what could we advice in order to fix the threat?'}, 'com_6': {'author': 'ceki', 'datetime': '12\/14\/2018, 21:07:48', 'body': 'As far as I know, org.slf4j.ext.EventData is not widely used.'}, 'com_7': {'author': 'areguru', 'datetime': '12\/20\/2018, 17:28:49', 'body': \"@adioss \\r\\nI suppose you use the OWASP dependency-checker or similar and got a warning about CVE-2018-8088.\\r\\n(In that case same as us)\\r\\n\\r\\nMy understanding after analyzing this is that only the slf4j-ext module has the vulnerability, and only the EventData-class is affected. Most users of SLF4J doesn't use this. \\r\\nhttps:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2018-8088\\r\\nhttps:\/\/mvnrepository.com\/artifact\/org.slf4j\/slf4j-ext\\r\\n   groupId: org.slf4j\\r\\n   artifactId: slf4j-ext\\r\\n   version: 1.7.25\\r\\n\\r\\nSLF4J extensions are packaged within slf4j-ext.jar\\r\\nhttps:\/\/www.slf4j.org\/extensions.html\\r\\n\\r\\nIf you use maven \\r\\nmvn dependency:tree\\r\\nwill generate the dependencies tree of your maven project.\\r\\n\\r\\nFor us the flagging of slf4j-api as vulnerable was a false positive.\\r\\nhttps:\/\/mvnrepository.com\/artifact\/org.slf4j\/slf4j-api\\r\\n   groupId: org.slf4j\\r\\n   artifactId: slf4j-api\\r\\n   version: 1.7.25\\r\\n\\r\\nYou have to check if your application actually use slf4j-ext (and org.slf4j.ext.EventData)\"}, 'com_8': {'author': 'adioss', 'datetime': '12\/20\/2018, 23:42:45', 'body': '@areguru yep exactly that, you\\'ve got it: CVE is \"badly\" declared so, although only slf4j-ext is sensitive, cpe declaration is too large so slf4j-* are detected by sca tools like dependency-check.\\r\\n\\r\\nAlthough I have no dependencies on slf4j-ext on my projects, for other people that have slf4j-ext in the classpath, I was wandering if \"mark as deprecated\" was enough and if they is no other way to exploit the threat than using the constructor directly (using deserialization for example) but finally I\\'m not sure it\\'s possible.\\r\\nThanks a lot @areguru  and @ceki for feedback.'}, 'com_9': {'author': 'sepe81', 'datetime': '01\/09\/2019, 09:47:27', 'body': 'According to https:\/\/www.slf4j.org\/download.html version 1.8.0-beta2 is EXPERIMENTAL. Are there any plans to backport this to the STABLE branch 1.7.x and release a version 1.7.26?'}, 'com_10': {'author': 'cowwoc', 'datetime': '01\/09\/2019, 14:50:50', 'body': '@adioss I emailed nvd@nist.gov asking them to fix the CVE but got back this nice auto-reply: `Due to a lapse in appropriations, I will be out of the office and unable to reply to e-mail until further notice.` :)'}, 'com_11': {'author': 'cowwoc', 'datetime': '01\/09\/2019, 15:22:45', 'body': \"Looking again, it looks like I was supposed to email mitre.org instead of nist.gov. I did now and they seem to be active. I'll let you know once I hear back from them.\"}, 'com_12': {'author': 'cowwoc', 'datetime': '01\/10\/2019, 16:42:30', 'body': \"Hey guys. I've just heard back from nist.gov. They will be updating the CVE for slf4j (and 700 others) within the next 24 hours to fix this kind of error (overly-broad warnings). If you guys run across this kind of error in the future, I recommend reporting it to them. They were extremely responsive and helpful. Have a great day :)\"}, 'com_13': {'author': 'markkolich', 'datetime': '01\/25\/2019, 20:02:29', 'body': \"@ceki following up on @sepe81's comment above, according to slf4j.org [0], version `1.8.0-beta2` is marked experimental but this version has been available for almost a year [1].\\r\\n\\r\\nIf I can gently ask, what is the plan\/timeline for releasing a non-beta version of `1.8.0`?\\r\\n\\r\\n[0] https:\/\/www.slf4j.org\/download.html\\r\\n[1] https:\/\/github.com\/qos-ch\/slf4j\/releases\/tag\/v_1.8.0_beta2\"}, 'com_14': {'author': 'cowwoc', 'datetime': '01\/25\/2019, 20:42:43', 'body': 'I am hoping https:\/\/jira.qos.ch\/browse\/SLF4J-428 gets fixed before 1.8.0 is released because it will affect the Java module name.'}, 'com_15': {'author': 'Neustradamus', 'datetime': '01\/13\/2022, 20:30:30', 'body': 'Dear @kbabioch, @adioss, @areguru, @sepe81, @cowwoc, @markkolich,\\r\\n\\r\\nIn first, I wish you a Happy New Year 2022!\\r\\n\\r\\nToday, there was a progress by @ceki, and a correction about my old requests:\\r\\n- https:\/\/jira.qos.ch\/browse\/SLF4J-455\\r\\n\\r\\nIt has been solved in 1.7.26 and 1.8.0-beta4.\\r\\n\\r\\nI have requested the update of:\\r\\n- https:\/\/jira.qos.ch\/browse\/SLF4J-430\\r\\n- https:\/\/jira.qos.ch\/browse\/SLF4J-431\\r\\n\\r\\nAnd about CVE-2018-8088:\\r\\n- https:\/\/cve.mitre.org\/cgi-bin\/cvekey.cgi?keyword=slf4j+slf4j+log4j12\\r\\n- https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2018-8088\\r\\n- https:\/\/www.google.com\/search?q=CVE-2018-8088\\r\\n\\r\\nLinked to:\\r\\n- https:\/\/github.com\/qos-ch\/reload4j\/issues\/10'}}",
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'slf4j-ext\/src\/main\/java\/org\/slf4j\/ext\/EventData.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/qos-ch\/slf4j\/raw\/d2b27fba88e983f921558da27fc29b5f5d269405\/slf4j-ext%2Fsrc%2Fmain%2Fjava%2Forg%2Fslf4j%2Fext%2FEventData.java', 'patch': '@@ -40,6 +40,8 @@\\n  * event. Users may extend this class for each EventType they want to log.\\n  * \\n  * @author Ralph Goers\\n+ * \\n+ * @deprecated Due to a security vulnerability, this class will be removed without replacement.\\n  *\/\\n public class EventData implements Serializable {'}}",
            "message_norm":"fix slf4j-431",
            "language":"sv",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['slf4j-ext\/src\/main\/java\/org\/slf4j\/ext\/EventData.java'])",
            "num_files":1.0
        },
        {
            "index":517,
            "vuln_id":"GHSA-4wm8-c2vv-xrpq",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/DSpace\/DSpace\/commit\/28eb8158210d41168a62ed5f9e044f754513bc37', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/f7758457b7ec3489d525e39aa753cc70809d9ad9'}",
            "dataset":"osv",
            "summary":"JSPUI Possible Cross Site Scripting in \"Request a Copy\" Feature ### Impact\nThe JSPUI \"Request a Copy\" feature does not properly escape values submitted and stored from the \"Request a Copy\" form.  This means that item requests could be vulnerable to XSS attacks.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n\n_DSpace 6.x:_ \n* Fixed in 6.4 via commit: https:\/\/github.com\/DSpace\/DSpace\/commit\/503a6af57fd720c37b0d86c34de63baa5dd85819\n* 6.x patch file: https:\/\/github.com\/DSpace\/DSpace\/commit\/503a6af57fd720c37b0d86c34de63baa5dd85819.patch (may be applied manually if an immediate upgrade to 6.4 is not possible)\n\n_DSpace 5.x:_\n* Fixed in 5.11 via commit: https:\/\/github.com\/DSpace\/DSpace\/commit\/28eb8158210d41168a62ed5f9e044f754513bc37\n* 5.x patch file: https:\/\/github.com\/DSpace\/DSpace\/commit\/28eb8158210d41168a62ed5f9e044f754513bc37.patch (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs \/ configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### Workarounds\nAs a workaround, you can temporarily disable the \"Request a Copy\" feature by either commenting out the below configuration (or setting its value to empty):\n```\n# Comment out this default value\n# request.item.type = all\n```\nOnce your JSPUI site is patched, you can re-enable this setting. See https:\/\/wiki.lyrasis.org\/display\/DSDOC6x\/Request+a+Copy for more information on this setting.\n\n### References\nDiscovered & reported by Andrea Bollini of 4Science\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
            "published_date":"2022-08-06",
            "chain_len":2,
            "project":"https:\/\/github.com\/DSpace\/DSpace",
            "commit_href":"https:\/\/github.com\/DSpace\/DSpace\/commit\/f7758457b7ec3489d525e39aa753cc70809d9ad9",
            "commit_sha":"f7758457b7ec3489d525e39aa753cc70809d9ad9",
            "patch":"MULTI",
            "chain_ord":"['f7758457b7ec3489d525e39aa753cc70809d9ad9', '28eb8158210d41168a62ed5f9e044f754513bc37']",
            "before_first_fix_commit":"{'56e76049185bbd87c994128a9d77735ad7af0199'}",
            "last_fix_commit":"28eb8158210d41168a62ed5f9e044f754513bc37",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/08\/2020, 00:48:56",
            "message":"[DS-4133] Improve URL handling in Controlled Vocab JSPUI servlet",
            "author":"Kim Shepherd",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'dspace-jspui\/src\/main\/java\/org\/dspace\/app\/webui\/servlet\/ControlledVocabularyServlet.java': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DSpace\/DSpace\/raw\/f7758457b7ec3489d525e39aa753cc70809d9ad9\/dspace-jspui%2Fsrc%2Fmain%2Fjava%2Forg%2Fdspace%2Fapp%2Fwebui%2Fservlet%2FControlledVocabularyServlet.java', 'patch': '@@ -14,6 +14,7 @@\\n import javax.servlet.http.HttpServletRequest;\\n import javax.servlet.http.HttpServletResponse;\\n \\n+import org.apache.log4j.Logger;\\n import org.dspace.authorize.AuthorizeException;\\n import org.dspace.core.Context;\\n \\n@@ -25,8 +26,8 @@\\n  *\/\\n public class ControlledVocabularyServlet extends DSpaceServlet\\n {\\n-    \/\/ private static Logger log =\\n-    \/\/ Logger.getLogger(ControlledVocabularyServlet.class);\\n+    private static Logger log =\\n+    Logger.getLogger(ControlledVocabularyServlet.class);\\n \\n     protected void doDSGet(Context context, HttpServletRequest request,\\n             HttpServletResponse response) throws ServletException, IOException,\\n@@ -37,6 +38,13 @@ protected void doDSGet(Context context, HttpServletRequest request,\\n         String filter = \"\";\\n         String callerUrl = request.getParameter(\"callerUrl\");\\n \\n+        \/\/ callerUrl must starts with URL outside DSpace request context path\\n+        if(!callerUrl.startsWith(request.getContextPath())) {\\n+            log.error(\"Controlled vocabulary caller URL would result in redirect outside DSpace web app: \" + callerUrl + \". Rejecting request with 400 Bad Request.\");\\n+            response.sendError(400, \"The caller URL must be within the DSpace base URL of \" + request.getContextPath());\\n+            return;\\n+        }\\n+\\n         if (request.getParameter(\"ID\") != null)\\n         {\\n             ID = request.getParameter(\"ID\");'}}",
            "message_norm":"[ds-4133] improve url handling in controlled vocab jspui servlet",
            "language":"en",
            "entities":"[('improve', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['dspace-jspui\/src\/main\/java\/org\/dspace\/app\/webui\/servlet\/ControlledVocabularyServlet.java'])",
            "num_files":1.0
        },
        {
            "index":3395,
            "vuln_id":"GHSA-x83m-p7pv-ch8v",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/744009c9e5cc5d0447f0dc39d055f917e1fd9e16'}",
            "dataset":"osv",
            "summary":"Division by 0 in `QuantizedAdd` ### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedAdd`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([68, 228], shape=[2, 1], dtype=tf.quint8)\ny = tf.constant([], shape=[2, 0], dtype=tf.quint8)\n\nmin_x = tf.constant(10.723421015884028)\nmax_x = tf.constant(15.19578006631113)\nmin_y = tf.constant(-5.539003866682977)\nmax_y = tf.constant(42.18819949559947)\n\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/6f26b3f3418201479c264f2a02000880d8df151c\/tensorflow\/core\/kernels\/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero.\n\n```cc\nvoid VectorTensorAddition(const T* vector_data, float min_vector,\n                          float max_vector, int64 vector_num_elements,\n                          const T* tensor_data, float min_tensor,\n                          float max_tensor, int64 tensor_num_elements,\n                          float output_min, float output_max, Toutput* output) {\n  for (int i = 0; i < tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\nSince `vector_num_elements` is [determined based on input shapes](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/6f26b3f3418201479c264f2a02000880d8df151c\/tensorflow\/core\/kernels\/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [744009c9e5cc5d0447f0dc39d055f917e1fd9e16](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/744009c9e5cc5d0447f0dc39d055f917e1fd9e16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/744009c9e5cc5d0447f0dc39d055f917e1fd9e16",
            "commit_sha":"744009c9e5cc5d0447f0dc39d055f917e1fd9e16",
            "patch":"SINGLE",
            "chain_ord":"['744009c9e5cc5d0447f0dc39d055f917e1fd9e16']",
            "before_first_fix_commit":"{'6f26b3f3418201479c264f2a02000880d8df151c'}",
            "last_fix_commit":"744009c9e5cc5d0447f0dc39d055f917e1fd9e16",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2021, 19:00:12",
            "message":"Validate work in `QuantizedAdd`, ensure at least one element.\n\nPiperOrigin-RevId: 370127996\nChange-Id: I57c6f3e01afdeada84737820a131590137463855",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/quantized_add_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/744009c9e5cc5d0447f0dc39d055f917e1fd9e16\/tensorflow%2Fcore%2Fkernels%2Fquantized_add_op.cc', 'patch': '@@ -538,6 +538,8 @@ class QuantizedAddOp : public OpKernel {\\n         tensor_min = min_x;\\n         tensor_max = max_x;\\n       }\\n+      OP_REQUIRES(context, vector_num_elements > 0,\\n+                  errors::InvalidArgument(\"Must have some elements to add\"));\\n       VectorTensorAddition<T, Toutput>(\\n           vector_data, vector_min, vector_max, vector_num_elements, tensor_data,\\n           tensor_min, tensor_max, tensor_num_elements, min_z_value, max_z_value,'}}",
            "message_norm":"validate work in `quantizedadd`, ensure at least one element.\n\npiperorigin-revid: 370127996\nchange-id: i57c6f3e01afdeada84737820a131590137463855",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('ensure', 'ACTION', ''), ('370127996', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_add_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2161,
            "vuln_id":"GHSA-hxf9-7h4c-f5jv",
            "cwe_id":"{'CWE-200'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b'}",
            "dataset":"osv",
            "summary":"Django-Anymail prone to a timing attack webhooks\/base.py in Anymail (aka django-anymail) before 1.2.1 is prone to a timing attack vulnerability on the WEBHOOK_AUTHORIZATION secret, which allows remote attackers to post arbitrary e-mail tracking events.",
            "published_date":"2018-07-12",
            "chain_len":2,
            "project":"https:\/\/github.com\/anymail\/django-anymail",
            "commit_href":"https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5",
            "commit_sha":"db586ede1fbb41dce21310ea28ae15a1cf1286c5",
            "patch":"MULTI",
            "chain_ord":"['db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'c07998304b4a31df4c61deddcb03d3607a04691b']",
            "before_first_fix_commit":"{'7029298b930620b1655dab2548f72d6640a5905e'}",
            "last_fix_commit":"c07998304b4a31df4c61deddcb03d3607a04691b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/02\/2018, 19:41:14",
            "message":"Security: prevent timing attack on WEBHOOK_AUTHORIZATION secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
            "author":"medmunds",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'anymail\/webhooks\/base.py': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anymail\/django-anymail\/raw\/db586ede1fbb41dce21310ea28ae15a1cf1286c5\/anymail%2Fwebhooks%2Fbase.py', 'patch': '@@ -2,6 +2,7 @@\\n \\n import six\\n from django.http import HttpResponse\\n+from django.utils.crypto import constant_time_compare\\n from django.utils.decorators import method_decorator\\n from django.views.decorators.csrf import csrf_exempt\\n from django.views.generic import View\\n@@ -40,8 +41,13 @@ def __init__(self, **kwargs):\\n     def validate_request(self, request):\\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\\n         if self.basic_auth:\\n-            basic_auth = get_request_basic_auth(request)\\n-            if basic_auth is None or basic_auth not in self.basic_auth:\\n+            request_auth = get_request_basic_auth(request)\\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It\\'s OK that any()\\n+            # can terminate early: we\\'re not trying to protect how many auth strings are allowed,\\n+            # just the contents of each individual auth string.)\\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\\n+                          for allowed_auth in self.basic_auth)\\n+            if not auth_ok:\\n                 # noinspection PyUnresolvedReferences\\n                 raise AnymailWebhookValidationFailure(\\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\\n@@ -77,8 +83,11 @@ def validate_request(self, request):\\n         *All* definitions of this method in the class chain (including mixins)\\n         will be called. There is no need to chain to the superclass.\\n         (See self.run_validators and collect_all_methods.)\\n+\\n+        Security note: use django.utils.crypto.constant_time_compare for string\\n+        comparisons, to avoid exposing your validation to a timing attack.\\n         \"\"\"\\n-        # if request.POST[\\'signature\\'] != expected_signature:\\n+        # if not constant_time_compare(request.POST[\\'signature\\'], expected_signature):\\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\\n         # (else just do nothing)\\n         pass'}}",
            "message_norm":"security: prevent timing attack on webhook_authorization secret\n\nanymail's webhook validation was vulnerable to a timing attack.\nan attacker could have used this to recover your webhook_authorization\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nthere have not been any reports of attempted exploit in the wild. (the\nvulnerability was discovered through code review.) attempts would be\nvisible in http logs as a very large number of 400 responses on\nanymail's webhook urls, or in python error monitoring as a very large\nnumber of anymailwebhookvalidationfailure exceptions.\n\nif you are using anymail's webhooks, you should upgrade to this release.\nin addition, you may want to rotate to a new webhook_authorization\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attack', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attacker', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('error', 'FLAW', ''), ('upgrade', 'ACTION', ''), ('docs](http:\/\/anymail.readthedocs.io', 'URL', ''), ('exploit', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['anymail\/webhooks\/base.py'])",
            "num_files":1.0
        },
        {
            "index":1766,
            "vuln_id":"GHSA-fq9f-9wv9-rfmg",
            "cwe_id":"{'CWE-295'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0'}",
            "dataset":"osv",
            "summary":"Improper Certificate Validation in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier bundled a version of the commons-httpclient library with the vulnerability CVE-2012-6153 that incorrectly verified SSL certificates, making it susceptible to man-in-the-middle attacks. This library is widely used as a transitive dependency in Jenkins plugins. The fix for CVE-2012-6153 was backported to the version of commons-httpclient that is bundled in core and made available to plugins.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "commit_sha":"fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "patch":"SINGLE",
            "chain_ord":"['fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0']",
            "before_first_fix_commit":"{'67f68c181033cbabf2075769e0f846f58c226c08'}",
            "last_fix_commit":"fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/29\/2017, 13:39:32",
            "message":"[SECURITY-555] Patch Commons HttpClient 3.x.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'pom.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0\/pom.xml', 'patch': '@@ -164,7 +164,7 @@ THE SOFTWARE.\\n       <dependency>\\n         <groupId>commons-httpclient<\/groupId>\\n         <artifactId>commons-httpclient<\/artifactId>\\n-        <version>3.1<\/version>\\n+        <version>3.1-jenkins-1<\/version>\\n       <\/dependency>\\n \\n       <dependency>'}}",
            "message_norm":"[security-555] patch commons httpclient 3.x.",
            "language":"en",
            "entities":"[('security-555', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pom.xml'])",
            "num_files":1.0
        },
        {
            "index":3235,
            "vuln_id":"GHSA-w6cx-qg2q-rvq8",
            "cwe_id":"{'CWE-22'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780'}",
            "dataset":"osv",
            "summary":"Path Traversal in @finastra\/ssr-pages A path traversal issue can occur when providing untrusted input to the `svg` property as an argument to the `build(MessagePageOptions)` function.\n\n### References\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780",
            "published_date":"2022-03-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/Finastra\/ssr-pages",
            "commit_href":"https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780",
            "commit_sha":"c3e4c563384ae3ba3892f37dd190218577620780",
            "patch":"SINGLE",
            "chain_ord":"['c3e4c563384ae3ba3892f37dd190218577620780']",
            "before_first_fix_commit":"{'a61ab5a82983ad2d0779454f929bbb76f00ed605'}",
            "last_fix_commit":"c3e4c563384ae3ba3892f37dd190218577620780",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/25\/2022, 14:09:28",
            "message":"fix: Fix path traversal vulnerability",
            "author":"David Bocl\u00e9",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 1, 'total': 11}",
            "files":"{'src\/helpers\/inlineSVG.helper.ts': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Finastra\/ssr-pages\/raw\/c3e4c563384ae3ba3892f37dd190218577620780\/src%2Fhelpers%2FinlineSVG.helper.ts', 'patch': \"@@ -2,6 +2,15 @@ import { readFileSync } from 'fs';\\n import { join } from 'path';\\r\\n \\r\\n export default function inlineSVG(iconName) {\\r\\n-  const path = join(__dirname, `..\/assets\/img\/${iconName}.svg`);\\r\\n+  const path = join(__dirname, `..\/assets\/img\/${iconNameWhitelist(iconName)}.svg`);\\r\\n   return readFileSync(path, 'utf8');\\r\\n }\\r\\n+\\r\\n+function iconNameWhitelist(iconName) {\\r\\n+  const fallbackIconName = 'warning'\\r\\n+  const whitelist = ['warning', 'exit'];\\r\\n+  if (!whitelist.includes(iconName)) {\\r\\n+    return fallbackIconName;\\r\\n+  }\\r\\n+  return iconName;\\r\\n+}\\n\\\\ No newline at end of file\"}}",
            "message_norm":"fix: fix path traversal vulnerability",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/inlineSVG.helper.ts'])",
            "num_files":1.0
        },
        {
            "index":671,
            "vuln_id":"GHSA-5ppx-rgw2-xg23",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/f67068170b55633571e5462e52b6124b23d7cb84'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Input During Web Page Generation in Jenkins Jenkins 2.88 and earlier; 2.73.2 and earlier Autocompletion suggestions for text fields were not escaped, resulting in a persisted cross-site scripting vulnerability if the source for the suggestions allowed specifying text that includes HTML metacharacters like less-than and greater-than characters.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/f67068170b55633571e5462e52b6124b23d7cb84",
            "commit_sha":"f67068170b55633571e5462e52b6124b23d7cb84",
            "patch":"SINGLE",
            "chain_ord":"['f67068170b55633571e5462e52b6124b23d7cb84']",
            "before_first_fix_commit":"{'566a8ddb885f0bef9bc848e60455c0aabbf0c1d3'}",
            "last_fix_commit":"f67068170b55633571e5462e52b6124b23d7cb84",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/24\/2017, 16:01:03",
            "message":"[SECURITY-641] Escape autocompletion suggestions",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'war\/src\/main\/webapp\/scripts\/hudson-behavior.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/f67068170b55633571e5462e52b6124b23d7cb84\/war%2Fsrc%2Fmain%2Fwebapp%2Fscripts%2Fhudson-behavior.js', 'patch': '@@ -712,6 +712,7 @@ var jenkinsRules = {\\n         };\\n         ac.prehighlightClassName = \"yui-ac-prehighlight\";\\n         ac.animSpeed = 0;\\n+        ac.formatResult = ac.formatEscapedResult;\\n         ac.useShadow = true;\\n         ac.autoSnapContainer = true;\\n         ac.delimChar = e.getAttribute(\"autoCompleteDelimChar\");'}}",
            "message_norm":"[security-641] escape autocompletion suggestions",
            "language":"fr",
            "entities":"[('security-641', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['war\/src\/main\/webapp\/scripts\/hudson-behavior.js'])",
            "num_files":1.0
        },
        {
            "index":316,
            "vuln_id":"GHSA-3w67-q784-6w7c",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `GatherNd` ### Impact\nThe reference implementation of the `GatherNd` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/reference\/reference_ops.h#L966):\n\n```cc \nret.dims_to_count[i] = remain_flat_size \/ params_shape.Dims(i);\n```\n\nAn attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [8e45822aa0b9f5df4b4c64f221e64dc930a70a9d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "commit_sha":"8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "patch":"SINGLE",
            "chain_ord":"['8e45822aa0b9f5df4b4c64f221e64dc930a70a9d']",
            "before_first_fix_commit":"{'0d45ea1ca641b21b73bcf9c00e0179cda284e7e7'}",
            "last_fix_commit":"8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:10",
            "message":"Handle one more division by 0 in TFLite.\n\nPiperOrigin-RevId: 370800140\nChange-Id: I9ab42e5aaccf02f226d1282611490a54cf7d273e",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/gather_nd.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d\/tensorflow%2Flite%2Fkernels%2Fgather_nd.cc', 'patch': '@@ -155,6 +155,9 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context,\\n                     GetOutputSafe(context, node, kOutputTensor, &output));\\n \\n+  \/\/ Prevent division by 0 in the helper\\n+  TF_LITE_ENSURE(context, NumElements(params) > 0);\\n+\\n   switch (indices->type) {\\n     case kTfLiteInt32:\\n       return EvalGatherNd<int32_t>(context, params, indices, output);'}}",
            "message_norm":"handle one more division by 0 in tflite.\n\npiperorigin-revid: 370800140\nchange-id: i9ab42e5aaccf02f226d1282611490a54cf7d273e",
            "language":"en",
            "entities":"[('division by 0', 'SECWORD', ''), ('370800140', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/gather_nd.cc'])",
            "num_files":1.0
        },
        {
            "index":1233,
            "vuln_id":"GHSA-8p36-q63g-68qh",
            "cwe_id":"{'CWE-915'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/mitreid-connect\/OpenID-Connect-Java-Spring-Server\/commit\/7eba3c12fed82388f917e8dd9b73e86e3a311e4c'}",
            "dataset":"osv",
            "summary":"Autobinding vulnerability in MITREid Connect org\/mitre\/oauth2\/web\/OAuthConfirmationController.java in the OpenID Connect server implementation for MITREid Connect through 1.3.3 contains a Mass Assignment (aka Autobinding) vulnerability. This arises due to unsafe usage of the @ModelAttribute annotation during the OAuth authorization flow, in which HTTP request parameters affect an authorizationRequest.",
            "published_date":"2021-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/mitreid-connect\/OpenID-Connect-Java-Spring-Server",
            "commit_href":"https:\/\/github.com\/mitreid-connect\/OpenID-Connect-Java-Spring-Server\/commit\/7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
            "commit_sha":"7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
            "patch":"SINGLE",
            "chain_ord":"['7eba3c12fed82388f917e8dd9b73e86e3a311e4c']",
            "before_first_fix_commit":"{'0d4ef2cb4f77bea5df9e2d4f1cfff4dffb7045c0'}",
            "last_fix_commit":"7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/12\/2021, 15:22:12",
            "message":"Fix Spring Autobinding vulnerability\n\n1. Make authorizationRequest no longer affected by http request parameters due to @ModelAttribute. See http:\/\/agrrrdog.blogspot.com\/2017\/03\/autobinding-vulns-and-spring-mvc.html",
            "author":"Michael Stepankin",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '02\/24\/2021, 07:32:35', 'body': '[CVE-2021-27582](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2021-27582) was assigned to this commit.'}}",
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'openid-connect-server\/src\/main\/java\/org\/mitre\/oauth2\/web\/OAuthConfirmationController.java': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mitreid-connect\/OpenID-Connect-Java-Spring-Server\/raw\/7eba3c12fed82388f917e8dd9b73e86e3a311e4c\/openid-connect-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fmitre%2Foauth2%2Fweb%2FOAuthConfirmationController.java', 'patch': '@@ -103,9 +103,9 @@ public OAuthConfirmationController(ClientDetailsEntityService clientService) {\\n \\n \\t@PreAuthorize(\"hasRole(\\'ROLE_USER\\')\")\\n \\t@RequestMapping(\"\/oauth\/confirm_access\")\\n-\\tpublic String confimAccess(Map<String, Object> model, @ModelAttribute(\"authorizationRequest\") AuthorizationRequest authRequest,\\n-\\t\\t\\tPrincipal p) {\\n+\\tpublic String confirmAccess(Map<String, Object> model, Principal p) {\\n \\n+\\t\\tAuthorizationRequest authRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\\n \\t\\t\/\/ Check the \"prompt\" parameter to see if we need to do special processing\\n \\n \\t\\tString prompt = (String)authRequest.getExtensions().get(PROMPT);'}}",
            "message_norm":"fix spring autobinding vulnerability\n\n1. make authorizationrequest no longer affected by http request parameters due to @modelattribute. see http:\/\/agrrrdog.blogspot.com\/2017\/03\/autobinding-vulns-and-spring-mvc.html",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('http:\/\/agrrrdog.blogspot.com\/2017\/03\/autobinding-vulns-and-spring-mvc.html', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['openid-connect-server\/src\/main\/java\/org\/mitre\/oauth2\/web\/OAuthConfirmationController.java'])",
            "num_files":1.0
        },
        {
            "index":2316,
            "vuln_id":"GHSA-jx5q-g37m-h5hj",
            "cwe_id":"{'CWE-74', 'CWE-1321'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/oroinc\/platform\/commit\/62c26936b3adee9c20255dcd9f8ee5c299b464a9'}",
            "dataset":"osv",
            "summary":"Client-Side JavaScript Prototype Pollution in oro\/platform ### Summary\n\nBy sending a specially crafted request, an attacker could inject properties into existing JavaScript language construct prototypes, such as objects. Later this injection may lead to JS code execution by libraries that are vulnerable to Prototype Pollution.\n\n### Workarounds\n\nConfigure WAF to drop requests containing next strings: `__proto__` , `constructor[prototype]`, `constructor.prototype`",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/oroinc\/platform",
            "commit_href":"https:\/\/github.com\/oroinc\/platform\/commit\/62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "commit_sha":"62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "patch":"SINGLE",
            "chain_ord":"['62c26936b3adee9c20255dcd9f8ee5c299b464a9']",
            "before_first_fix_commit":"{'d9929d4085f4e38d05c4e4b02c7d4c15de84f88c'}",
            "last_fix_commit":"62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/24\/2021, 15:40:19",
            "message":"BAP-21092: JavaScript Prototype Pollution (#31464)",
            "author":"Hryhorii Hrebiniuk",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'src\/Oro\/Bundle\/UIBundle\/Resources\/public\/js\/tools.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/oroinc\/platform\/raw\/62c26936b3adee9c20255dcd9f8ee5c299b464a9\/src%2FOro%2FBundle%2FUIBundle%2FResources%2Fpublic%2Fjs%2Ftools.js', 'patch': \"@@ -85,6 +85,10 @@ define(function(require) {\\n                 query = query.slice(1);\\n             }\\n             const setValue = function(root, path, value) {\\n+                if (path[0] === '__proto__') {\\n+                    \/\/ Prevent Object.prototype pollution\\n+                    return;\\n+                }\\n                 if (path.length > 1) {\\n                     const dir = path.shift();\\n                     if (typeof root[dir] === 'undefined') {\"}}",
            "message_norm":"bap-21092: javascript prototype pollution (#31464)",
            "language":"fr",
            "entities":"[('prototype pollution', 'SECWORD', ''), ('#31464', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Oro\/Bundle\/UIBundle\/Resources\/public\/js\/tools.js'])",
            "num_files":1.0
        },
        {
            "index":2709,
            "vuln_id":"GHSA-q6mp-562x-ggvv",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber Cross-site Scripting (XSS) - Stored in GitHub repository microweber\/microweber prior to 1.2.19.",
            "published_date":"2022-07-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "commit_sha":"70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "patch":"SINGLE",
            "chain_ord":"['70b46e231e7b2c113666745a0ab6de9a8b7ef08e']",
            "before_first_fix_commit":"{'b7663f9af0f4ab777275ffe7a3b77958f98c81fb'}",
            "last_fix_commit":"70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/04\/2022, 08:02:08",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/MicroweberPackages\/Utils\/System\/Files.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e\/src%2FMicroweberPackages%2FUtils%2FSystem%2FFiles.php', 'patch': \"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA\\n                 break;\\n             case 'file':\\n             case 'files':\\n-                $are_allowed .= ',css,json,zip,gzip,csv,7z';\\n+                $are_allowed .= ',css,json,zip,gzip,psd,csv,7z';\\n                 break;\\n             case 'documents':\\n             case 'doc':\\n-                $are_allowed .= ',doc,docx,pdf,odt,pages,rtf,txt,pps,ppt,pptx,xls,xlsx';\\n+                $are_allowed .= ',doc,docx,pdf,odt,rtf,txt,pps,ppt,pptx,xls,xlsx';\\n                 break;\\n             case 'archives':\\n             case 'arc':\"}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Utils\/System\/Files.php'])",
            "num_files":1.0
        },
        {
            "index":345,
            "vuln_id":"GHSA-43f8-2h32-f4cj",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/npm\/hosted-git-info\/commit\/bede0dc38e1785e732bf0a48ba6f81a4a908eba3', 'https:\/\/github.com\/npm\/hosted-git-info\/commit\/8d4b3697d79bcd89cdb36d1db165e3696c783a01', 'https:\/\/github.com\/npm\/hosted-git-info\/commit\/29adfe5ef789784c861b2cdeb15051ec2ba651a7'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in hosted-git-info The npm package `hosted-git-info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst-case time complexity",
            "published_date":"2021-05-06",
            "chain_len":3,
            "project":"https:\/\/github.com\/npm\/hosted-git-info",
            "commit_href":"https:\/\/github.com\/npm\/hosted-git-info\/commit\/29adfe5ef789784c861b2cdeb15051ec2ba651a7",
            "commit_sha":"29adfe5ef789784c861b2cdeb15051ec2ba651a7",
            "patch":"MULTI",
            "chain_ord":"['bede0dc38e1785e732bf0a48ba6f81a4a908eba3', '29adfe5ef789784c861b2cdeb15051ec2ba651a7', '8d4b3697d79bcd89cdb36d1db165e3696c783a01']",
            "before_first_fix_commit":"{'29adfe5ef789784c861b2cdeb15051ec2ba651a7'}",
            "last_fix_commit":"8d4b3697d79bcd89cdb36d1db165e3696c783a01",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/07\/2021, 19:31:52",
            "message":"fix: backport regex fix from #76\n\nPR-URL: https:\/\/github.com\/npm\/hosted-git-info\/pull\/84\nCredit: @nlf\nClose: #84\nReviewed-by: @wraithgar",
            "author":"nlf",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'index.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/npm\/hosted-git-info\/raw\/29adfe5ef789784c861b2cdeb15051ec2ba651a7\/index.js', 'patch': \"@@ -41,7 +41,7 @@ function fromUrl (giturl, opts) {\\n     isGitHubShorthand(giturl) ? 'github:' + giturl : giturl\\n   )\\n   var parsed = parseGitUrl(url)\\n-  var shortcutMatch = url.match(new RegExp('^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^\/]*))[\/](.+?)(?:[.]git)?($|#)'))\\n+  var shortcutMatch = url.match(\/^([^:]+):(?:[^@]+@)?(?:([^\/]*)\\\\\/)?([^#]+)\/)\\n   var matches = Object.keys(gitHosts).map(function (gitHostName) {\\n     try {\\n       var gitHostInfo = gitHosts[gitHostName]\\n@@ -55,7 +55,7 @@ function fromUrl (giturl, opts) {\\n       var defaultRepresentation = null\\n       if (shortcutMatch && shortcutMatch[1] === gitHostName) {\\n         user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2])\\n-        project = decodeURIComponent(shortcutMatch[3])\\n+        project = decodeURIComponent(shortcutMatch[3].replace(\/\\\\.git$\/, ''))\\n         defaultRepresentation = 'shortcut'\\n       } else {\\n         if (parsed.host && parsed.host !== gitHostInfo.domain && parsed.host.replace(\/^www[.]\/, '') !== gitHostInfo.domain) return\"}}",
            "message_norm":"fix: backport regex fix from #76\n\npr-url: https:\/\/github.com\/npm\/hosted-git-info\/pull\/84\ncredit: @nlf\nclose: #84\nreviewed-by: @wraithgar",
            "language":"en",
            "entities":"[('#76', 'ISSUE', ''), ('https:\/\/github.com\/npm\/hosted-git-info\/pull\/84', 'URL', ''), ('#84', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1465,
            "vuln_id":"GHSA-c383-q5vf-hx55",
            "cwe_id":"{'CWE-190'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in Microweber Microweber prior to 1.2.12 is vulnerable to Integer Overflow or Wraparound.",
            "published_date":"2022-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "commit_sha":"7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "patch":"SINGLE",
            "chain_ord":"['7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583']",
            "before_first_fix_commit":"{'28f2677ea228a36e7692505e1821ae373a8b07e4'}",
            "last_fix_commit":"7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/11\/2022, 08:30:42",
            "message":"checkout shipping address validation - max chars allowed",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 4, 'total': 25}",
            "files":"{'src\/MicroweberPackages\/Checkout\/Http\/Controllers\/Traits\/ShippingTrait.php': {'additions': 21, 'deletions': 4, 'changes': 25, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583\/src%2FMicroweberPackages%2FCheckout%2FHttp%2FControllers%2FTraits%2FShippingTrait.php', 'patch': \"@@ -38,13 +38,30 @@ public function shippingMethodSave(Request $request) {\\n \\n         if (is_array($request->get('Address'))) {\\n             $request->merge([\\n-               'city'=>$request->get('Address')['city'],\\n-               'zip'=>$request->get('Address')['zip'],\\n-               'state'=>$request->get('Address')['state'],\\n-               'address'=>$request->get('Address')['address'],\\n+                'city'=>$request->get('Address')['city'],\\n+                'zip'=>$request->get('Address')['zip'],\\n+                'state'=>$request->get('Address')['state'],\\n+                'address'=>$request->get('Address')['address'],\\n             ]);\\n         }\\n \\n+        $rules = [];\\n+        $rules['shipping_gw'] = 'max:500';\\n+        $rules['city'] = 'max:500';\\n+        $rules['address'] = 'max:500';\\n+        $rules['country'] = 'max:500';\\n+        $rules['state'] = 'max:500';\\n+        $rules['zip'] = 'max:500';\\n+        $rules['other_info'] = 'max:500';\\n+\\n+        $validator = Validator::make($request->all(), $rules);\\n+\\n+        if ($validator->fails()) {\\n+            $errors = $validator->messages()->toArray();\\n+            session_set('errors', $errors);\\n+            return redirect(route('checkout.shipping_method'));\\n+        }\\n+\\n         session_append_array('checkout_v2', [\\n             'shipping_gw'=> $request->get('shipping_gw'),\\n             'city'=> $request->get('city'),\"}}",
            "message_norm":"checkout shipping address validation - max chars allowed",
            "language":"en",
            "entities":null,
            "classification_level_1":"NON_SECURITY_RELATED",
            "classification_level_2":"REDUNDANT_MESSAGE",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Checkout\/Http\/Controllers\/Traits\/ShippingTrait.php'])",
            "num_files":1.0
        },
        {
            "index":2876,
            "vuln_id":"GHSA-r659-8xfp-j327",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Vincit\/objection.js\/commit\/46b842a6bc897198b83f41ac85c92864b991d7e9', 'https:\/\/github.com\/vincit\/objection.js\/commit\/b41aab8dcd78f426f7468dcda541a7aca18a66a6'}",
            "dataset":"osv",
            "summary":"objection.js Prototype Pollution vulnerability before v2.2.16 objection.js prior to version 2.2.16 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). This issue is patched in version 2.2.16.",
            "published_date":"2021-09-07",
            "chain_len":2,
            "project":"https:\/\/github.com\/Vincit\/objection.js",
            "commit_href":"https:\/\/github.com\/Vincit\/objection.js\/commit\/46b842a6bc897198b83f41ac85c92864b991d7e9",
            "commit_sha":"46b842a6bc897198b83f41ac85c92864b991d7e9",
            "patch":"MULTI",
            "chain_ord":"['b41aab8dcd78f426f7468dcda541a7aca18a66a6', '46b842a6bc897198b83f41ac85c92864b991d7e9']",
            "before_first_fix_commit":"{'260b284a1cbfb044991894c5a3cf3dedc8ce7267'}",
            "last_fix_commit":"46b842a6bc897198b83f41ac85c92864b991d7e9",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/03\/2021, 09:24:20",
            "message":"Security Fix for Prototype Pollution\n\nFix prototype pollution when path components are not strings",
            "author":"ready-research",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'lib\/utils\/objectUtils.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Vincit\/objection.js\/raw\/46b842a6bc897198b83f41ac85c92864b991d7e9\/lib%2Futils%2FobjectUtils.js', 'patch': \"@@ -225,6 +225,9 @@ function set(obj, path, value) {\\n \\n   for (let i = 0, l = path.length - 1; i < l; ++i) {\\n     const key = path[i];\\n+    if (key === '__proto__') {\\n+      return false;\\n+    }\\n     let child = obj[key];\\n \\n     if (!isObject(child)) {\\n@@ -252,7 +255,10 @@ function set(obj, path, value) {\\n function zipObject(keys, values) {\\n   const out = {};\\n \\n-  for (let i = 0, l = keys.length; i < l; ++i) {\\n+  for (let i = 0, l = keys.length; i < l; ++i) {    \\n+    if (keys[i] === '__proto__') {\\n+      return false;\\n+    }\\n     out[keys[i]] = values[i];\\n   }\"}}",
            "message_norm":"security fix for prototype pollution\n\nfix prototype pollution when path components are not strings",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/utils\/objectUtils.js'])",
            "num_files":1.0
        },
        {
            "index":1497,
            "vuln_id":"GHSA-c697-r227-pq6h",
            "cwe_id":"{'CWE-434'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/35d1853baf64d6a1d90fd8803e52439da53a3911'}",
            "dataset":"osv",
            "summary":"Unrestricted Upload of File with Dangerous Type in pimcore Unrestricted Upload of File with Dangerous Type in Packagist pimcore\/pimcore",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/35d1853baf64d6a1d90fd8803e52439da53a3911",
            "commit_sha":"35d1853baf64d6a1d90fd8803e52439da53a3911",
            "patch":"SINGLE",
            "chain_ord":"['35d1853baf64d6a1d90fd8803e52439da53a3911']",
            "before_first_fix_commit":"{'d8377fc752dc3a42ca72cb49650481191f14ec63'}",
            "last_fix_commit":"35d1853baf64d6a1d90fd8803e52439da53a3911",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/17\/2022, 15:52:05",
            "message":"[Settings] Validate SVG uploads for branding",
            "author":"Bernhard Rusch",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'bundles\/AdminBundle\/Controller\/Admin\/SettingsController.php': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/35d1853baf64d6a1d90fd8803e52439da53a3911\/bundles%2FAdminBundle%2FController%2FAdmin%2FSettingsController.php', 'patch': \"@@ -109,6 +109,12 @@ public function uploadCustomLogoAction(Request $request)\\n             throw new \\\\Exception('Unsupported file format');\\n         }\\n \\n+        if($fileExt === 'svg') {\\n+            if(strpos(file_get_contents($_FILES['Filedata']['tmp_name']), '<script')) {\\n+                throw new \\\\Exception('Scripts in SVG files are not supported');\\n+            }\\n+        }\\n+\\n         $storage = Tool\\\\Storage::get('admin');\\n         $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($_FILES['Filedata']['tmp_name'], 'rb'));\"}}",
            "message_norm":"[settings] validate svg uploads for branding",
            "language":"sv",
            "entities":"[('validate', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/SettingsController.php'])",
            "num_files":1.0
        },
        {
            "index":260,
            "vuln_id":"GHSA-3hw5-q855-g6cw",
            "cwe_id":"{'CWE-94'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/dojo\/dojox\/commit\/47d1b302b5b23d94e875b77b9b9a8c4f5622c9da'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in Dojox The Dojox jQuery wrapper `jqMix` mixin method is vulnerable to Prototype Pollution. \n\nAffected Area:\n```\n\/\/https:\/\/github.com\/dojo\/dojox\/blob\/master\/jq.js#L442\n\t\tvar tobj = {};\n\t\tfor(var x in props){\n\t\t\t\/\/ the \"tobj\" condition avoid copying properties in \"props\"\n\t\t\t\/\/ inherited from Object.prototype.  For example, if obj has a custom\n\t\t\t\/\/ toString() method, don't overwrite it with the toString() method\n\t\t\t\/\/ that props inherited from Object.prototype\n\t\t\tif((tobj[x] === undefined || tobj[x] != props[x]) && props[x] !== undefined && obj != props[x]){\n\t\t\t\tif(dojo.isObject(obj[x]) && dojo.isObject(props[x])){\n\t\t\t\t\tif(dojo.isArray(props[x])){\n\t\t\t\t\t\tobj[x] = props[x];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tobj[x] = jqMix(obj[x], props[x]);\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tobj[x] = props[x];\n\t\t\t\t}\n```",
            "published_date":"2020-03-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/dojo\/dojox",
            "commit_href":"https:\/\/github.com\/dojo\/dojox\/commit\/47d1b302b5b23d94e875b77b9b9a8c4f5622c9da",
            "commit_sha":"47d1b302b5b23d94e875b77b9b9a8c4f5622c9da",
            "patch":"SINGLE",
            "chain_ord":"['47d1b302b5b23d94e875b77b9b9a8c4f5622c9da']",
            "before_first_fix_commit":"{'5491effdb1b586f1a5f5b173460fe26e23abcfe6'}",
            "last_fix_commit":"47d1b302b5b23d94e875b77b9b9a8c4f5622c9da",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/10\/2020, 14:25:04",
            "message":"Merge pull request from GHSA-3hw5-q855-g6cw\n\nPrevent the special __proto__ property name from being mixed in to\nprevent polluting the prototoype of the object being mixed into in the\njqMix function in jq.js",
            "author":"Nick Nisi",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'jq.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/dojo\/dojox\/raw\/47d1b302b5b23d94e875b77b9b9a8c4f5622c9da\/jq.js', 'patch': \"@@ -455,7 +455,7 @@ dojo.query differences that cause some tests to fail:\\n \\t\\t\\t\/\/ inherited from Object.prototype.  For example, if obj has a custom\\n \\t\\t\\t\/\/ toString() method, don't overwrite it with the toString() method\\n \\t\\t\\t\/\/ that props inherited from Object.prototype\\n-\\t\\t\\tif((tobj[x] === undefined || tobj[x] != props[x]) && props[x] !== undefined && obj != props[x]){\\n+\\t\\t\\tif(x !== '__proto__ ' && ((tobj[x] === undefined || tobj[x] != props[x])) && props[x] !== undefined && obj != props[x]){\\n \\t\\t\\t\\tif(dojo.isObject(obj[x]) && dojo.isObject(props[x])){\\n \\t\\t\\t\\t\\tif(dojo.isArray(props[x])){\\n \\t\\t\\t\\t\\t\\tobj[x] = props[x];\"}}",
            "message_norm":"merge pull request from ghsa-3hw5-q855-g6cw\n\nprevent the special __proto__ property name from being mixed in to\nprevent polluting the prototoype of the object being mixed into in the\njqmix function in jq.js",
            "language":"en",
            "entities":"[('ghsa-3hw5-q855-g6cw', 'VULNID', 'GHSA'), ('prevent', 'ACTION', ''), ('prevent', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['jq.js'])",
            "num_files":1.0
        },
        {
            "index":642,
            "vuln_id":"GHSA-5hj3-vjjf-f5m7",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e138660270e7599793fa438cd7b2fc2ce215a6'}",
            "dataset":"osv",
            "summary":"Heap OOB in `SdcaOptimizerV2` ### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.SdcaOptimizerV2`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SdcaOptimizerV2(\n  sparse_example_indices=[[1]],\n  sparse_feature_indices=[[1]],\n  sparse_feature_values=[[1.0,2.0]],\n  dense_features=[[1.0]],\n  example_weights=[1.0],\n  example_labels=[],\n  sparse_indices=[1],\n  sparse_weights=[1.0],\n  dense_weights=[[1.0]],\n  example_state_data=[[100.0,100.0,100.0,100.0]],\n  loss_type='logistic_loss',\n  l1=100.0,\n  l2=100.0,\n  num_loss_partitions=1,\n  num_inner_iterations=1,\n  adaptive=True)       \n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/sdca_internal.cc#L320-L353) does not check that the length of `example_labels` is the same as the number of examples.\n\n### Patches\nWe have patched the issue in GitHub commit [a4e138660270e7599793fa438cd7b2fc2ce215a6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e138660270e7599793fa438cd7b2fc2ce215a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e138660270e7599793fa438cd7b2fc2ce215a6",
            "commit_sha":"a4e138660270e7599793fa438cd7b2fc2ce215a6",
            "patch":"SINGLE",
            "chain_ord":"['a4e138660270e7599793fa438cd7b2fc2ce215a6']",
            "before_first_fix_commit":"{'578e634b4f1c1c684d4b4294f9e5281b2133b3ed'}",
            "last_fix_commit":"a4e138660270e7599793fa438cd7b2fc2ce215a6",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:24:27",
            "message":"Add remaining validation to `sdca_internal.cc`\n\nPiperOrigin-RevId: 387738010\nChange-Id: I28eedcfd87a53aaf34deb075acea1f8c95470808",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/sdca_internal.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a4e138660270e7599793fa438cd7b2fc2ce215a6\/tensorflow%2Fcore%2Fkernels%2Fsdca_internal.cc', 'patch': '@@ -380,6 +380,11 @@ Status Examples::Initialize(OpKernelContext* const context,\\n   const Tensor* example_labels_t;\\n   TF_RETURN_IF_ERROR(context->input(\"example_labels\", &example_labels_t));\\n   auto example_labels = example_labels_t->flat<float>();\\n+  if (example_labels.size() != num_examples) {\\n+    return errors::InvalidArgument(\"Expected \", num_examples,\\n+                                   \" example labels but got \",\\n+                                   example_labels.size());\\n+  }\\n \\n   OpInputList dense_features_inputs;\\n   TF_RETURN_IF_ERROR('}}",
            "message_norm":"add remaining validation to `sdca_internal.cc`\n\npiperorigin-revid: 387738010\nchange-id: i28eedcfd87a53aaf34deb075acea1f8c95470808",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('387738010', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sdca_internal.cc'])",
            "num_files":1.0
        },
        {
            "index":3440,
            "vuln_id":"GHSA-xhp9-4947-rq78",
            "cwe_id":"{'CWE-755'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/bottlepy\/bottle\/commit\/a2b0ee6bb4ce88895429ec4aca856616244c4c4c', 'https:\/\/github.com\/bottlepy\/bottle\/commit\/e140e1b54da721a660f2eb9d58a106b7b3ff2f00'}",
            "dataset":"osv",
            "summary":"Denial of service in bottle Bottle before 0.12.20 mishandles errors during early request binding.",
            "published_date":"2022-06-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/bottlepy\/bottle",
            "commit_href":"https:\/\/github.com\/bottlepy\/bottle\/commit\/a2b0ee6bb4ce88895429ec4aca856616244c4c4c",
            "commit_sha":"a2b0ee6bb4ce88895429ec4aca856616244c4c4c",
            "patch":"MULTI",
            "chain_ord":"['e140e1b54da721a660f2eb9d58a106b7b3ff2f00', 'a2b0ee6bb4ce88895429ec4aca856616244c4c4c']",
            "before_first_fix_commit":"{'04b27f185412250f9389a6a14d1e1c516c87e13c'}",
            "last_fix_commit":"a2b0ee6bb4ce88895429ec4aca856616244c4c4c",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/26\/2022, 13:36:31",
            "message":"Release of 0.12.20\n\nThis release contains a security fix.\nThanks Elton Nokaj for responsibly reporting this issue.",
            "author":"Marcel Hellkamp",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'bottle.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bottlepy\/bottle\/raw\/a2b0ee6bb4ce88895429ec4aca856616244c4c4c\/bottle.py', 'patch': \"@@ -16,7 +16,7 @@\\n from __future__ import with_statement\\n \\n __author__ = 'Marcel Hellkamp'\\n-__version__ = '0.12.19'\\n+__version__ = '0.12.20'\\n __license__ = 'MIT'\\n \\n # The gevent server adapter needs to patch some modules before they are imported\"}}",
            "message_norm":"release of 0.12.20\n\nthis release contains a security fix.\nthanks elton nokaj for responsibly reporting this issue.",
            "language":"en",
            "entities":"[('0.12.20', 'VERSION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bottle.py'])",
            "num_files":1.0
        },
        {
            "index":849,
            "vuln_id":"GHSA-6hjc-m38h-7jhh",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/4e46b792ce973ac0c652fb330055f41aca1981c8', 'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in SEOmatic plugin A cross-site scripting (XSS) vulnerability in the SEOmatic plugin 3.4.10 for Craft CMS 3 allows remote attackers to inject arbitrary web script via a GET to \/index.php?action=seomatic\/file\/seo-file-link with url parameter containing the base64 encoded URL of a malicious web page \/ file and fileName parameter containing an arbitrary filename with the intended content-type to be rendered in the user's browser as the extension.",
            "published_date":"2022-06-13",
            "chain_len":2,
            "project":"https:\/\/github.com\/nystudio107\/craft-seomatic",
            "commit_href":"https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873",
            "commit_sha":"5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873",
            "patch":"MULTI",
            "chain_ord":"['5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873', '4e46b792ce973ac0c652fb330055f41aca1981c8']",
            "before_first_fix_commit":"{'8c0dc48d026fd076cd0a8fae917bdadc8d67cfa6'}",
            "last_fix_commit":"4e46b792ce973ac0c652fb330055f41aca1981c8",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/24\/2021, 01:25:40",
            "message":"Ensure that only files with the extensions listed in `allowedFileExtensions` General Config setting can be used with the SEO File Link controller\n\nSigned-off-by: Andrew Welch <andrew@nystudio107.com>",
            "author":"Andrew Welch",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'src\/controllers\/FileController.php': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nystudio107\/craft-seomatic\/raw\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873\/src%2Fcontrollers%2FFileController.php', 'patch': '@@ -15,12 +15,15 @@\\n use nystudio107\\\\seomatic\\\\Seomatic;\\n \\n use Craft;\\n+use craft\\\\elements\\\\Asset;\\n use craft\\\\helpers\\\\FileHelper;\\n+use craft\\\\helpers\\\\Assets as AssetsHelper;\\n use craft\\\\web\\\\Controller;\\n \\n use yii\\\\web\\\\NotFoundHttpException;\\n use yii\\\\web\\\\HttpException;\\n use yii\\\\web\\\\Response;\\n+use yii\\\\web\\\\ServerErrorHttpException;\\n \\n \/**\\n  * @author    nystudio107\\n@@ -87,6 +90,15 @@ public function actionSeoFileLink($url, $robots = \\'\\', $canonical = \\'\\', $inline =\\n                 $headerValue = \\'<\\'.$canonical.\\'>; rel=\"canonical\"\\';\\n                 $response->headers->add(\\'Link\\', $headerValue);\\n             }\\n+            \/\/ Ensure the file type is allowed\\n+            \/\/ ref: https:\/\/craftcms.com\/docs\/3.x\/config\/config-settings.html#allowedfileextensions\\n+            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;\\n+            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== \\'\\') {\\n+                $ext = strtolower($ext);\\n+            }\\n+            if ($ext === \\'\\' || !in_array($ext, $allowedExtensions, true)) {\\n+                throw new ServerErrorHttpException(Craft::t(\\'seomatic\\', \\'File format not allowed.\\'));\\n+            }\\n             \/\/ Send the file as a stream, so it can exist anywhere\\n             $response->sendContentAsFile(\\n                 $contents,'}}",
            "message_norm":"ensure that only files with the extensions listed in `allowedfileextensions` general config setting can be used with the seo file link controller\n\nsigned-off-by: andrew welch <andrew@nystudio107.com>",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/controllers\/FileController.php'])",
            "num_files":1.0
        },
        {
            "index":3206,
            "vuln_id":"GHSA-w37f-pvvx-wcwm",
            "cwe_id":"{'CWE-682'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/moodle\/moodle\/commit\/59b5858da200f63ecb59a9113af2b99ef1496fe5'}",
            "dataset":"osv",
            "summary":"Incorrect Calculation in moodle A flaw was found in moodle where logic used to count failed login attempts could result in the account lockout threshold being bypassed.",
            "published_date":"2022-05-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/moodle\/moodle",
            "commit_href":"https:\/\/github.com\/moodle\/moodle\/commit\/59b5858da200f63ecb59a9113af2b99ef1496fe5",
            "commit_sha":"59b5858da200f63ecb59a9113af2b99ef1496fe5",
            "patch":"SINGLE",
            "chain_ord":"['59b5858da200f63ecb59a9113af2b99ef1496fe5']",
            "before_first_fix_commit":"{'a0f47c8bc4d6f5971025de7d63f22475701d2f86'}",
            "last_fix_commit":"59b5858da200f63ecb59a9113af2b99ef1496fe5",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2022, 08:52:20",
            "message":"MDL-73736 core_auth: Fix concurrency issue in login_attempt_failed()\n\nThis patch wraps the login_failed_count logic in a resource lock and\nforces a user preferences cache reload. Each thread must wait for the\nlock and must fetch the current count before incrementing it. This\nensures that login_failed_count is correct across threads and that the\nlockout threshold is correctly honoured.\n\nCo-Authored-By: Sujith Haridasan <sujith@moodle.com>",
            "author":"Jake Dallimore",
            "comments":null,
            "stats":"{'additions': 43, 'deletions': 19, 'total': 62}",
            "files":"{'lib\/authlib.php': {'additions': 43, 'deletions': 19, 'changes': 62, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moodle\/moodle\/raw\/59b5858da200f63ecb59a9113af2b99ef1496fe5\/lib%2Fauthlib.php', 'patch': \"@@ -877,6 +877,7 @@ function login_attempt_valid($user) {\\n \/**\\n  * To be called after failed user login.\\n  * @param stdClass $user\\n+ * @throws moodle_exception\\n  *\/\\n function login_attempt_failed($user) {\\n     global $CFG;\\n@@ -888,30 +889,53 @@ function login_attempt_failed($user) {\\n         return;\\n     }\\n \\n-    $count = get_user_preferences('login_failed_count', 0, $user);\\n-    $last = get_user_preferences('login_failed_last', 0, $user);\\n-    $sincescuccess = get_user_preferences('login_failed_count_since_success', $count, $user);\\n-    $sincescuccess = $sincescuccess + 1;\\n-    set_user_preference('login_failed_count_since_success', $sincescuccess, $user);\\n+    \/\/ Force user preferences cache reload to ensure the most up-to-date login_failed_count is fetched.\\n+    \/\/ This is perhaps overzealous but is the documented way of reloading the cache, as per the test method\\n+    \/\/ 'test_check_user_preferences_loaded'.\\n+    unset($user->preference);\\n+\\n+    $resource = 'user:' . $user->id;\\n+    $lockfactory = \\\\core\\\\lock\\\\lock_config::get_lock_factory('core_failed_login_count_lock');\\n+\\n+    \/\/ Get a new lock for the resource, waiting for it for a maximum of 10 seconds.\\n+    if ($lock = $lockfactory->get_lock($resource, 10)) {\\n+        try {\\n+            $count = get_user_preferences('login_failed_count', 0, $user);\\n+            $last = get_user_preferences('login_failed_last', 0, $user);\\n+            $sincescuccess = get_user_preferences('login_failed_count_since_success', $count, $user);\\n+            $sincescuccess = $sincescuccess + 1;\\n+            set_user_preference('login_failed_count_since_success', $sincescuccess, $user);\\n+\\n+            if (empty($CFG->lockoutthreshold)) {\\n+                \/\/ No threshold means no lockout.\\n+                \/\/ Always unlock here, there might be some race conditions or leftovers when switching threshold.\\n+                login_unlock_account($user);\\n+                $lock->release();\\n+                return;\\n+            }\\n \\n-    if (empty($CFG->lockoutthreshold)) {\\n-        \/\/ No threshold means no lockout.\\n-        \/\/ Always unlock here, there might be some race conditions or leftovers when switching threshold.\\n-        login_unlock_account($user);\\n-        return;\\n-    }\\n+            if (!empty($CFG->lockoutwindow) and time() - $last > $CFG->lockoutwindow) {\\n+                $count = 0;\\n+            }\\n \\n-    if (!empty($CFG->lockoutwindow) and time() - $last > $CFG->lockoutwindow) {\\n-        $count = 0;\\n-    }\\n+            $count = $count + 1;\\n \\n-    $count = $count+1;\\n+            set_user_preference('login_failed_count', $count, $user);\\n+            set_user_preference('login_failed_last', time(), $user);\\n \\n-    set_user_preference('login_failed_count', $count, $user);\\n-    set_user_preference('login_failed_last', time(), $user);\\n+            if ($count >= $CFG->lockoutthreshold) {\\n+                login_lock_account($user);\\n+            }\\n \\n-    if ($count >= $CFG->lockoutthreshold) {\\n-        login_lock_account($user);\\n+            \/\/ Release locks when we're done.\\n+            $lock->release();\\n+        } catch (Exception $e) {\\n+            \/\/ Always release the lock on a failure.\\n+            $lock->release();\\n+        }\\n+    } else {\\n+        \/\/ We did not get access to the resource in time, give up.\\n+        throw new moodle_exception('locktimeout');\\n     }\\n }\"}}",
            "message_norm":"mdl-73736 core_auth: fix concurrency issue in login_attempt_failed()\n\nthis patch wraps the login_failed_count logic in a resource lock and\nforces a user preferences cache reload. each thread must wait for the\nlock and must fetch the current count before incrementing it. this\nensures that login_failed_count is correct across threads and that the\nlockout threshold is correctly honoured.\n\nco-authored-by: sujith haridasan <sujith@moodle.com>",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('ensures', 'ACTION', ''), ('sujith@moodle.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/authlib.php'])",
            "num_files":1.0
        },
        {
            "index":863,
            "vuln_id":"GHSA-6jv7-28mv-qp9c",
            "cwe_id":"{'CWE-862'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/jenkinsci\/autonomiq-plugin\/commit\/e06b1ff67664a90819c9561bbc12f4c6e593d1dc'}",
            "dataset":"osv",
            "summary":"Missing permission check in Jenkins autonomiq Plugin A missing permission check in Jenkins autonomiq Plugin 1.15 and earlier allows attackers with Overall\/Read permission to connect to an attacker-specified URL using attacker-specified credentials.",
            "published_date":"2022-02-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/autonomiq-plugin",
            "commit_href":"https:\/\/github.com\/jenkinsci\/autonomiq-plugin\/commit\/e06b1ff67664a90819c9561bbc12f4c6e593d1dc",
            "commit_sha":"e06b1ff67664a90819c9561bbc12f4c6e593d1dc",
            "patch":"SINGLE",
            "chain_ord":"['e06b1ff67664a90819c9561bbc12f4c6e593d1dc']",
            "before_first_fix_commit":"{'abfbe8a84d54ec7708c8ef073d56b128baffb1f5'}",
            "last_fix_commit":"e06b1ff67664a90819c9561bbc12f4c6e593d1dc",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/09\/2022, 07:16:27",
            "message":"added permission and csrf protection",
            "author":"jameeluddin",
            "comments":null,
            "stats":"{'additions': 17, 'deletions': 0, 'total': 17}",
            "files":"{'src\/main\/java\/io\/jenkins\/plugins\/autonomiq\/AutonomiqBuilder.java': {'additions': 17, 'deletions': 0, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/autonomiq-plugin\/raw\/e06b1ff67664a90819c9561bbc12f4c6e593d1dc\/src%2Fmain%2Fjava%2Fio%2Fjenkins%2Fplugins%2Fautonomiq%2FAutonomiqBuilder.java', 'patch': '@@ -653,6 +653,7 @@ public String getDisplayName() {\\n         }\\n \\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillProjectItems(@QueryParameter String aiqUrl,\\n                                                @QueryParameter String login,\\n                                                @QueryParameter Secret password,\\n@@ -661,6 +662,8 @@ public ListBoxModel doFillProjectItems(@QueryParameter String aiqUrl,\\n                                                @QueryParameter String proxyUser,\\n                                                @QueryParameter Secret proxyPassword,\\n                                                @QueryParameter Boolean httpProxy) {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n+\\n \\n             \/\/ make sure other fields have been filled in\\n             if (aiqUrl.length() > 0 && login.length() > 0 && Secret.toString(password).length() > 0) {\\n@@ -681,7 +684,10 @@ public ListBoxModel doFillProjectItems(@QueryParameter String aiqUrl,\\n         }\\n \\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillPlatformTestCasesItems() {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n+\\n \\n             String[] values = {\"Linux\"};  \/\/, \"Windows\"};\\n \\n@@ -690,7 +696,10 @@ public ListBoxModel doFillPlatformTestCasesItems() {\\n             return new ListBoxModel(options);\\n         }\\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillPlatformTestSuitesItems() {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n+\\n \\n             String[] values = {\"Linux\"};  \/\/, \"Windows\"};\\n \\n@@ -701,7 +710,10 @@ public ListBoxModel doFillPlatformTestSuitesItems() {\\n \\n \\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillBrowserTestCasesItems() {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n+\\n \\n             String[] values = {\"Chrome\", \"Firefox\"};\\n \\n@@ -710,7 +722,9 @@ public ListBoxModel doFillBrowserTestCasesItems() {\\n             return new ListBoxModel(options);\\n         }\\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillBrowserTestSuitesItems() {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n \\n             String[] values = {\"Chrome\", \"Firefox\"};\\n \\n@@ -720,7 +734,10 @@ public ListBoxModel doFillBrowserTestSuitesItems() {\\n         }\\n \\n         @SuppressWarnings(\"unused\")\\n+        @POST\\n         public ListBoxModel doFillExecutionModeItems() {\\n+        \\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\\n+\\n \\n             String[] values = {\"serial\", \"parallel\"};'}}",
            "message_norm":"added permission and csrf protection",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('permission', 'SECWORD', ''), ('csrf', 'SECWORD', ''), ('protection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/io\/jenkins\/plugins\/autonomiq\/AutonomiqBuilder.java'])",
            "num_files":1.0
        },
        {
            "index":756,
            "vuln_id":"GHSA-65mj-7c86-79jf",
            "cwe_id":"{'CWE-305', 'CWE-287'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/ADOdb\/ADOdb\/commit\/952de6c4273d9b1e91c2b838044f8c2111150c29', 'https:\/\/github.com\/ADOdb\/ADOdb\/commit\/b4d5ce70034c5aac3a1d51d317d93c037a0938d2'}",
            "dataset":"osv",
            "summary":"Authentication Bypass in ADOdb\/ADOdb ### Impact\n\nAn attacker can inject values into a PostgreSQL connection string by providing a parameter surrounded by single quotes.\n\nDepending on how the library is used in the client software, this may allow an attacker to bypass the login process, gain access to the server's IP address, etc.\n\n### Patches\n\nThe vulnerability is fixed in ADOdb versions 5.20.21 (952de6c4273d9b1e91c2b838044f8c2111150c29) and 5.21.4 or later (b4d5ce70034c5aac3a1d51d317d93c037a0938d2).\n\nThe simplest patch is to delete line 29 in `drivers\/adodb-postgres64.inc.php`:\n\n```php\ndiff --git a\/drivers\/adodb-postgres64.inc.php b\/drivers\/adodb-postgres64.inc.php\nindex d04b7f67..729d7141 100644\n--- a\/drivers\/adodb-postgres64.inc.php\n+++ b\/drivers\/adodb-postgres64.inc.php\n@@ -26,7 +26,6 @@ function adodb_addslashes($s)\n {\n    $len = strlen($s);\n    if ($len == 0) return \"''\";\n-   if (strncmp($s,\"'\",1) === 0 && substr($s,$len-1) == \"'\") return $s; \/\/ already quoted\n \n    return \"'\".addslashes($s).\"'\";\n }\n```\n\n### Workarounds\n\nEnsure the parameters passed to *ADOConnection::connect()* or related functions (_nConnect()_, _pConnect()_) are not surrounded by single quotes.\n\n### Credits\n\nThanks to **Emmet Leahy** (@meme-lord) of Sorcery Ltd for reporting this vulnerability, and to the [huntr](https:\/\/huntr.dev\/) team for their support.\n\n### References\n\n- Original issue report https:\/\/huntr.dev\/bounties\/bdf5f216-4499-4225-a737-b28bc6f5801c\/\n- ADOdb reference issue #793 \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Add a note in issue #793\n* Contact the maintainers on [Gitter](https:\/\/gitter.im\/adodb\/adodb)",
            "published_date":"2022-01-27",
            "chain_len":2,
            "project":"https:\/\/github.com\/ADOdb\/ADOdb",
            "commit_href":"https:\/\/github.com\/ADOdb\/ADOdb\/commit\/b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
            "commit_sha":"b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
            "patch":"MULTI",
            "chain_ord":"['952de6c4273d9b1e91c2b838044f8c2111150c29', 'b4d5ce70034c5aac3a1d51d317d93c037a0938d2']",
            "before_first_fix_commit":"{'c5415722049f36c446a4034d15f1d17943f11458'}",
            "last_fix_commit":"b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/10\/2022, 09:00:33",
            "message":"Prevent auth bypass with PostgreSQL connections\n\nThanks to Emmet Leahy of Sorcery Ltd for reporting this vulnerability\n(CVE-2021-3850).\n\nRefactoring ADODB_postgres64::_connect():\n- Remove adodb_addslashes() function, which did not escape the\n  connection parameters when they are wrapped in single quotes\n  (root cause for the identified security issue).\n- Use addcslashes() instead of addslashes() to only escape `'` and `\\`,\n  to strictly follow pg_connect() documentation (addslashes() also\n  escapes `\"`)\n- Use an array and a foreach loop to build the connection string when\n  given individual parameters for host:port, user, password and dbname\n\nFixes #793",
            "author":"Damien Regad",
            "comments":null,
            "stats":"{'additions': 25, 'deletions': 22, 'total': 47}",
            "files":"{'drivers\/adodb-postgres64.inc.php': {'additions': 25, 'deletions': 22, 'changes': 47, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ADOdb\/ADOdb\/raw\/b4d5ce70034c5aac3a1d51d317d93c037a0938d2\/drivers%2Fadodb-postgres64.inc.php', 'patch': '@@ -22,15 +22,6 @@\\n \/\/ security - hide paths\\n if (!defined(\\'ADODB_DIR\\')) die();\\n \\n-function adodb_addslashes($s)\\n-{\\n-\\t$len = strlen($s);\\n-\\tif ($len == 0) return \"\\'\\'\";\\n-\\tif (strncmp($s,\"\\'\",1) === 0 && substr($s,$len-1) == \"\\'\") return $s; \/\/ already quoted\\n-\\n-\\treturn \"\\'\".addslashes($s).\"\\'\";\\n-}\\n-\\n class ADODB_postgres64 extends ADOConnection{\\n \\tvar $databaseType = \\'postgres64\\';\\n \\tvar $dataProvider = \\'postgres\\';\\n@@ -693,21 +684,33 @@ function _connect($str,$user=\\'\\',$pwd=\\'\\',$db=\\'\\',$ctype=0)\\n \\n \\t\\t$this->_errorMsg = false;\\n \\n+\\t\\t\/\/ If $user, $pwd and $db are all null, then $str is a pg_connect()\\n+\\t\\t\/\/ connection string. Otherwise we expect it to be a hostname,\\n+\\t\\t\/\/ with optional port separated by \\':\\'\\n \\t\\tif ($user || $pwd || $db) {\\n-\\t\\t\\t$user = adodb_addslashes($user);\\n-\\t\\t\\t$pwd = adodb_addslashes($pwd);\\n-\\t\\t\\tif (strlen($db) == 0) $db = \\'template1\\';\\n-\\t\\t\\t$db = adodb_addslashes($db);\\n-\\t\\t\\tif ($str)  {\\n-\\t\\t\\t\\t$host = explode(\":\", $str);\\n-\\t\\t\\t\\tif ($host[0]) $str = \"host=\".adodb_addslashes($host[0]);\\n-\\t\\t\\t\\telse $str = \\'\\';\\n-\\t\\t\\t\\tif (isset($host[1])) $str .= \" port=$host[1]\";\\n-\\t\\t\\t\\telse if (!empty($this->port)) $str .= \" port=\".$this->port;\\n+\\t\\t\\t\/\/ Hostname & port\\n+\\t\\t\\tif ($str) {\\n+\\t\\t\\t\\t$host = explode(\\':\\', $str);\\n+\\t\\t\\t\\tif ($host[0]) {\\n+\\t\\t\\t\\t\\t$conn[\\'host\\'] = $host[0];\\n+\\t\\t\\t\\t}\\n+\\t\\t\\t\\tif (isset($host[1])) {\\n+\\t\\t\\t\\t\\t$conn[\\'port\\'] = (int)$host[1];\\n+\\t\\t\\t\\t} elseif (!empty($this->port)) {\\n+\\t\\t\\t\\t\\t$conn[\\'port\\'] = $this->port;\\n+\\t\\t\\t\\t}\\n+\\t\\t\\t}\\n+\\t\\t\\t$conn[\\'user\\'] = $user;\\n+\\t\\t\\t$conn[\\'password\\'] = $pwd;\\n+\\t\\t\\t\/\/ @TODO not sure why we default to \\'template1\\', pg_connect() uses the username when dbname is empty\\n+\\t\\t\\t$conn[\\'dbname\\'] = $db ?: \\'template1\\';\\n+\\n+\\t\\t\\t\/\/ Generate connection string\\n+\\t\\t\\t$str = \\'\\';\\n+\\t\\t\\tforeach ($conn as $param => $value) {\\n+\\t\\t\\t\\t\/\/ Escaping single quotes and backslashes per pg_connect() documentation\\n+\\t\\t\\t\\t$str .= $param . \"=\\'\" . addcslashes($value, \"\\'\\\\\\\\\") . \"\\' \";\\n \\t\\t\\t}\\n-\\t\\t\\tif ($user) $str .= \" user=\".$user;\\n-\\t\\t\\tif ($pwd)  $str .= \" password=\".$pwd;\\n-\\t\\t\\tif ($db)   $str .= \" dbname=\".$db;\\n \\t\\t}\\n \\n \\t\\t\/\/if ($user) $linea = \"user=$user host=$linea password=$pwd dbname=$db port=5432\";'}}",
            "message_norm":"prevent auth bypass with postgresql connections\n\nthanks to emmet leahy of sorcery ltd for reporting this vulnerability\n(cve-2021-3850).\n\nrefactoring adodb_postgres64::_connect():\n- remove adodb_addslashes() function, which did not escape the\n  connection parameters when they are wrapped in single quotes\n  (root cause for the identified security issue).\n- use addcslashes() instead of addslashes() to only escape `'` and `\\`,\n  to strictly follow pg_connect() documentation (addslashes() also\n  escapes `\"`)\n- use an array and a foreach loop to build the connection string when\n  given individual parameters for host:port, user, password and dbname\n\nfixes #793",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('auth', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('cve-2021-3850', 'VULNID', 'CVE'), ('remove', 'ACTION', ''), ('escape', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('escape', 'SECWORD', ''), ('escapes', 'SECWORD', ''), ('password', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#793', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['drivers\/adodb-postgres64.inc.php'])",
            "num_files":1.0
        },
        {
            "index":1243,
            "vuln_id":"GHSA-8r7c-3cm2-3h8f",
            "cwe_id":"{'CWE-401'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd'}",
            "dataset":"osv",
            "summary":"Memory leak in Tensorflow ### Impact\nIf a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/common_runtime\/immutable_executor_state.cc#L84-L262):\n\n```cc\nStatus s = params_.create_kernel(n->properties(), &item->kernel);\nif (!s.ok()) {\n  item->kernel = nullptr;\n  s = AttachDef(s, *n);\n  return s;           \n}                     \n```\n\nHere, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "commit_sha":"c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "patch":"SINGLE",
            "chain_ord":"['c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd']",
            "before_first_fix_commit":"{'d781eab54947e82ebf182f28dcdd5b02e6925d46'}",
            "last_fix_commit":"c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/10\/2021, 21:51:15",
            "message":"Fix memory leak when a graph node is invalid.\n\nIf a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\n\nPiperOrigin-RevId: 408968108\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/core\/common_runtime\/immutable_executor_state.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd\/tensorflow%2Fcore%2Fcommon_runtime%2Fimmutable_executor_state.cc', 'patch': '@@ -131,6 +131,7 @@ Status ImmutableExecutorState::Initialize(const Graph& graph) {\\n \\n     Status s = params_.create_kernel(n->properties(), &item->kernel);\\n     if (!s.ok()) {\\n+      params_.delete_kernel(item->kernel);\\n       item->kernel = nullptr;\\n       s = AttachDef(s, *n);\\n       return s;'}}",
            "message_norm":"fix memory leak when a graph node is invalid.\n\nif a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. hence, we get a memory leak.\n\npiperorigin-revid: 408968108\nchange-id: i1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('memory leak', 'SECWORD', ''), ('408968108', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/immutable_executor_state.cc'])",
            "num_files":1.0
        },
        {
            "index":1610,
            "vuln_id":"GHSA-cvgx-3v3q-m36c",
            "cwe_id":"{'CWE-125'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a0d64445116c43cf46a5666bd4eee28e7a82f244'}",
            "dataset":"osv",
            "summary":"Heap OOB in shape inference for `QuantizeV2` ### Impact\nThe [shape inference code for `QuantizeV2`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/framework\/common_shape_fns.cc#L2509-L2530) can trigger a read outside of bounds of heap allocated array:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeV2(\n    input=[1.0,1.0],\n    min_range=[1.0,10.0],\n    max_range=[1.0,10.0],\n    T=tf.qint32,\n    mode='MIN_COMBINED',\n    round_mode='HALF_TO_EVEN',\n    narrow_range=False,\n    axis=-100,\n    ensure_minimum_range=10)\n  return data\n\ntest()\n```\n\nThis occurs whenever `axis` is a negative value less than `-1`. In this case, we are accessing data before the start of a heap buffer:\n    \n```cc\nint axis = -1;\nStatus s = c->GetAttr(\"axis\", &axis);\nif (!s.ok() && s.code() != error::NOT_FOUND) {\n  return s;\n}   \n... \nif (axis != -1) {\n  ...\n  TF_RETURN_IF_ERROR(\n      c->Merge(c->Dim(minmax, 0), c->Dim(input, axis), &depth));\n}\n```\n\nThe code allows `axis` to be an optional argument (`s` would contain an `error::NOT_FOUND` error code). Otherwise, it assumes that `axis` is a valid index into the dimensions of the `input` tensor. If `axis` is less than `-1` then this results in a heap OOB read.\n    \n### Patches\nWe have patched the issue in GitHub commit [a0d64445116c43cf46a5666bd4eee28e7a82f244](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a0d64445116c43cf46a5666bd4eee28e7a82f244).\n    \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, as this version is the only one that is also affected.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a0d64445116c43cf46a5666bd4eee28e7a82f244",
            "commit_sha":"a0d64445116c43cf46a5666bd4eee28e7a82f244",
            "patch":"SINGLE",
            "chain_ord":"['a0d64445116c43cf46a5666bd4eee28e7a82f244']",
            "before_first_fix_commit":"{'4a7c71d60c94ae3bc8149429988eeeb1d5466f00'}",
            "last_fix_commit":"a0d64445116c43cf46a5666bd4eee28e7a82f244",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/01\/2021, 22:52:56",
            "message":"Prevent OOB access in QuantizeV2 shape inference\n\nPiperOrigin-RevId: 400309614\nChange-Id: I31412c71b05b4f21b677f7fa715a61499cbee39d",
            "author":"Yu-Cheng Ling",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/framework\/common_shape_fns.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a0d64445116c43cf46a5666bd4eee28e7a82f244\/tensorflow%2Fcore%2Fframework%2Fcommon_shape_fns.cc', 'patch': '@@ -2559,6 +2559,9 @@ Status QuantizeV2Shape(InferenceContext* c) {\\n   if (!s.ok() && s.code() != error::NOT_FOUND) {\\n     return s;\\n   }\\n+  if (axis < -1) {\\n+    return errors::InvalidArgument(\"axis should be at least -1, got \", axis);\\n+  }\\n   const int minmax_rank = (axis == -1) ? 0 : 1;\\n   TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\\n   ShapeHandle minmax;'}}",
            "message_norm":"prevent oob access in quantizev2 shape inference\n\npiperorigin-revid: 400309614\nchange-id: i31412c71b05b4f21b677f7fa715a61499cbee39d",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('400309614', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/common_shape_fns.cc'])",
            "num_files":1.0
        },
        {
            "index":460,
            "vuln_id":"GHSA-4q2w-rw7m-xqw6",
            "cwe_id":"{'CWE-807'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/sony\/nnabla\/commit\/e87347648ab7210529a0e60f0849680de8e9b63a'}",
            "dataset":"osv",
            "summary":"Sony Neural Network Libraries reliance on untrusted inputs prior to v1.0.10 nbla\/logger.cpp in libnnabla.a in Sony Neural Network Libraries (aka nnabla) prior to v1.0.10 relies on the HOME environment variable, which might be untrusted.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/sony\/nnabla",
            "commit_href":"https:\/\/github.com\/sony\/nnabla\/commit\/e87347648ab7210529a0e60f0849680de8e9b63a",
            "commit_sha":"e87347648ab7210529a0e60f0849680de8e9b63a",
            "patch":"SINGLE",
            "chain_ord":"['e87347648ab7210529a0e60f0849680de8e9b63a']",
            "before_first_fix_commit":"{'b164980f08f3ed7740439b51d4e5ca79db0d149e', '05cd50648786cc044d3b131239299f91f399e3b8'}",
            "last_fix_commit":"e87347648ab7210529a0e60f0849680de8e9b63a",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/15\/2018, 08:24:39",
            "message":"Merge pull request #299 from sony\/feature\/20181107-fix-getenv-usage\n\nAvoid get HOME dir with getenv.",
            "author":"Takuya Narihira",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'src\/nbla\/logger.cpp': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sony\/nnabla\/raw\/e87347648ab7210529a0e60f0849680de8e9b63a\/src%2Fnbla%2Flogger.cpp', 'patch': '@@ -48,21 +48,21 @@ std::shared_ptr<spdlog::logger> get_logger(void) {\\n       logfile = logpath + \"\\\\\\\\nbla_lib.log\";\\n     }\\n #else\\n-    const char *homedir = getenv(\"HOME\");\\n+    const char *homedir = nullptr;\\n     if (homedir == nullptr) {\\n       struct passwd *pw = getpwuid(getuid());\\n       if (pw != nullptr) {\\n         homedir = pw->pw_dir;\\n+        logpath = homedir;\\n+        logpath += \"\/nnabla_data\";\\n+        mkdir(logpath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);\\n       }\\n     }\\n     if (homedir == nullptr) {\\n-      logpath = \"\/tmp_\";\\n+      logpath = \"\/tmp\/nnabla_\";\\n       logpath += getuid();\\n-    } else {\\n-      logpath = homedir;\\n+      mkdir(logpath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);\\n     }\\n-    logpath += \"\/nnabla_data\";\\n-    mkdir(logpath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);\\n     logpath += \"\/log\";\\n     mkdir(logpath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);\\n     logfile = logpath + \"\/nbla_lib.log\";'}}",
            "message_norm":"merge pull request #299 from sony\/feature\/20181107-fix-getenv-usage\n\navoid get home dir with getenv.",
            "language":"en",
            "entities":"[('#299', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/nbla\/logger.cpp'])",
            "num_files":1.0
        },
        {
            "index":3188,
            "vuln_id":"GHSA-vx6v-xg64-pmr8",
            "cwe_id":"{'CWE-79'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/2c7065e0c4296e0c692fb4a7ee19c7357583af30'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in django-helpdesk django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-11-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/django-helpdesk\/django-helpdesk",
            "commit_href":"https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "commit_sha":"2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "patch":"SINGLE",
            "chain_ord":"['2c7065e0c4296e0c692fb4a7ee19c7357583af30']",
            "before_first_fix_commit":"{'3f245871ac91356fd91a4e2cea5048bcac1d833e'}",
            "last_fix_commit":"2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/11\/2021, 10:32:09",
            "message":"Add function `htmlEntities`\n\n`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.",
            "author":"lethanhphuc",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'helpdesk\/templates\/helpdesk\/ticket_list.html': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/raw\/2c7065e0c4296e0c692fb4a7ee19c7357583af30\/helpdesk%2Ftemplates%2Fhelpdesk%2Fticket_list.html', 'patch': '@@ -330,7 +330,11 @@ <h5 class=\"mb-0\">\\n         function get_url(row) {\\n             return \"{% url \\'helpdesk:view\\' 1234 %}\".replace(\/1234\/, row.id.toString());\\n         }\\n-\\n+        \\n+        function htmlEntities(str) {\\n+            return String(str).replace(\/&\/g, \\'&amp;\\').replace(\/<\/g, \\'&lt;\\').replace(\/>\/g, \\'&gt;\\').replace(\/\"\/g, \\'&quot;\\');\\n+        }\\n+        \\n         $(document).ready(function () {\\n             \/\/ Ticket DataTable Initialization\\n             $(\\'#ticketTable\\').DataTable({\\n@@ -366,7 +370,7 @@ <h5 class=\"mb-0\">\\n                             if (type === \\'display\\') {\\n                                 data = \\'<div class=\"tickettitle\"><a href=\"\\' + get_url(row) + \\'\" >\\' +\\n                                     row.id + \\'. \\' +\\n-                                    row.title + \\'<\/a><\/div>\\';\\n+                                    htmlEntities(row.title) + \\'<\/a><\/div>\\';\\n                             }\\n                             return data\\n                         }'}}",
            "message_norm":"add function `htmlentities`\n\n`htmlentities()` is a function which converts special characters. this allows you to show to display the string without the browser reading it as html.",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('htmlentities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['helpdesk\/templates\/helpdesk\/ticket_list.html'])",
            "num_files":1.0
        },
        {
            "index":1473,
            "vuln_id":"GHSA-c45w-2wxr-pp53",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5899741d0421391ca878da47907b1452f06aaf1b'}",
            "dataset":"osv",
            "summary":"Heap OOB read in `tf.raw_ops.Dequantize` ### Impact\nDue to lack of validation in `tf.raw_ops.Dequantize`, an attacker can trigger a read from outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\ninput_tensor=tf.constant(\n  [75, 75, 75, 75, -6, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10], shape=[5, 10], dtype=tf.int32)\ninput_tensor=tf.cast(input_tensor, dtype=tf.quint8)\nmin_range = tf.constant([-10], shape=[1], dtype=tf.float32)\nmax_range = tf.constant([24, 758, 758, 758, 758], shape=[5], dtype=tf.float32)\n  \ntf.raw_ops.Dequantize( \n  input=input_tensor, min_range=min_range, max_range=max_range, mode='SCALED',\n  narrow_range=True, axis=0, dtype=tf.dtypes.float32)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/26003593aa94b1742f34dc22ce88a1e17776a67d\/tensorflow\/core\/kernels\/dequantize_op.cc#L106-L131) accesses the `min_range` and `max_range` tensors in parallel but fails to check that they have the same shape:\n\n```cc\nif (num_slices == 1) {\n  const float min_range = input_min_tensor.flat<float>()(0);\n  const float max_range = input_max_tensor.flat<float>()(0);\n  DequantizeTensor(ctx, input, min_range, max_range, &float_output);\n} else {\n  ...\n  auto min_ranges = input_min_tensor.vec<float>();\n  auto max_ranges = input_max_tensor.vec<float>();\n  for (int i = 0; i < num_slices; ++i) {\n    DequantizeSlice(ctx->eigen_device<Device>(), ctx,\n                    input_tensor.template chip<1>(i), min_ranges(i),\n                    max_ranges(i), output_tensor.template chip<1>(i));\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5899741d0421391ca878da47907b1452f06aaf1b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5899741d0421391ca878da47907b1452f06aaf1b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5899741d0421391ca878da47907b1452f06aaf1b",
            "commit_sha":"5899741d0421391ca878da47907b1452f06aaf1b",
            "patch":"SINGLE",
            "chain_ord":"['5899741d0421391ca878da47907b1452f06aaf1b']",
            "before_first_fix_commit":"{'26003593aa94b1742f34dc22ce88a1e17776a67d'}",
            "last_fix_commit":"5899741d0421391ca878da47907b1452f06aaf1b",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2021, 22:31:05",
            "message":"Fix heap OOB read in dequantize op.\n\nAlso fixes SEGV in same op\n\nPiperOrigin-RevId: 372437896\nChange-Id: I135e94d360c2a1ce374c10f7e0fed1af603dbc02",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'tensorflow\/core\/kernels\/dequantize_op.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5899741d0421391ca878da47907b1452f06aaf1b\/tensorflow%2Fcore%2Fkernels%2Fdequantize_op.cc', 'patch': '@@ -98,6 +98,18 @@ class DequantizeOp : public OpKernel {\\n     if (axis_ > -1) {\\n       num_slices = input.dim_size(axis_);\\n     }\\n+    OP_REQUIRES(ctx, input_min_tensor.NumElements() == num_slices,\\n+                errors::InvalidArgument(\\n+                    \"input_min_tensor must have as many elements as input on \"\\n+                    \"the dequantization axis (\",\\n+                    axis_, \"), got \", input_min_tensor.NumElements(),\\n+                    \", expected \", num_slices));\\n+    OP_REQUIRES(ctx, input_max_tensor.NumElements() == num_slices,\\n+                errors::InvalidArgument(\\n+                    \"input_max_tensor must have as many elements as input on \"\\n+                    \"the dequantization axis (\",\\n+                    axis_, \"), got \", input_max_tensor.NumElements(),\\n+                    \", expected \", num_slices));\\n \\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));'}}",
            "message_norm":"fix heap oob read in dequantize op.\n\nalso fixes segv in same op\n\npiperorigin-revid: 372437896\nchange-id: i135e94d360c2a1ce374c10f7e0fed1af603dbc02",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('372437896', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/dequantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3480,
            "vuln_id":"GHSA-xqj7-j8j5-f2xr",
            "cwe_id":"{'CWE-327'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839', 'https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad'}",
            "dataset":"osv",
            "summary":"Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",
            "published_date":"2018-10-16",
            "chain_len":2,
            "project":"https:\/\/github.com\/bcgit\/bc-java",
            "commit_href":"https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "commit_sha":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "patch":"MULTI",
            "chain_ord":"['73780ac522b7795fc165630aba8d5f5729acc839', '22467b6e8fe19717ecdf201c0cf91bacf04a55ad']",
            "before_first_fix_commit":"{'73780ac522b7795fc165630aba8d5f5729acc839'}",
            "last_fix_commit":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/22\/2018, 22:14:24",
            "message":"BJA-694 minor tweak to avoid method signature change",
            "author":"David Hook",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bcgit\/bc-java\/raw\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fbouncycastle%2Fcrypto%2Fgenerators%2FRSAKeyPairGenerator.java', 'patch': '@@ -157,8 +157,6 @@ public AsymmetricCipherKeyPair generateKeyPair()\\n      *\/\\n     protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger sqrdBound)\\n     {\\n-        int iterations = getNumberOfIterations(bitlength, param.getCertainty());\\n-\\n         for (int i = 0; i != 5 * bitlength; i++)\\n         {\\n             BigInteger p = new BigInteger(bitlength, 1, param.getRandom());\\n@@ -173,7 +171,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n                 continue;\\n             }\\n \\n-            if (!isProbablePrime(p, iterations))\\n+            if (!isProbablePrime(p))\\n             {\\n                 continue;\\n             }\\n@@ -189,8 +187,10 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n         throw new IllegalStateException(\"unable to generate prime number for RSA key\");\\n     }\\n \\n-    protected boolean isProbablePrime(BigInteger x, int iterations)\\n+    protected boolean isProbablePrime(BigInteger x)\\n     {\\n+        int iterations = getNumberOfIterations(x.bitLength(), param.getCertainty());\\n+\\n         \/*\\n          * Primes class for FIPS 186-4 C.3 primality checking\\n          *\/'}}",
            "message_norm":"bja-694 minor tweak to avoid method signature change",
            "language":"en",
            "entities":"[('tweak', 'FLAW', ''), ('signature', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java'])",
            "num_files":1.0
        },
        {
            "index":992,
            "vuln_id":"GHSA-77gp-3h4r-6428",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0657c83d08845cc434175934c642299de2c0f042'}",
            "dataset":"osv",
            "summary":"Out of bounds read and write in Tensorflow ### Impact\nThere is a typo in TensorFlow's [`SpecializeType`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/full_type_util.cc#L81-L102) which results in heap OOB read\/write:\n\n```cc\nfor (int i = 0; i < op_def.output_arg_size(); i++) {\n  \/\/ ...\n  for (int j = 0; j < t->args_size(); j++) {\n    auto* arg = t->mutable_args(i);\n    \/\/ ...\n  }\n} \n```\n\nDue to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data.\n\n### Patches\nWe have patched the issue in GitHub commit [0657c83d08845cc434175934c642299de2c0f042](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0657c83d08845cc434175934c642299de2c0f042).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0657c83d08845cc434175934c642299de2c0f042",
            "commit_sha":"0657c83d08845cc434175934c642299de2c0f042",
            "patch":"SINGLE",
            "chain_ord":"['0657c83d08845cc434175934c642299de2c0f042']",
            "before_first_fix_commit":"{'6e65b0b4ad12fdaa223e87b4ae6d8cb762fcae2b'}",
            "last_fix_commit":"0657c83d08845cc434175934c642299de2c0f042",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/09\/2021, 12:44:43",
            "message":"Fix heap OOB read\/write due to incorrect indexing.\n\nPiperOrigin-RevId: 408578046\nChange-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tensorflow\/core\/framework\/full_type_util.cc': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0657c83d08845cc434175934c642299de2c0f042\/tensorflow%2Fcore%2Fframework%2Ffull_type_util.cc', 'patch': '@@ -100,7 +100,7 @@ StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,\\n     \/\/ verifications are needed, they should be done by separately, and in a\\n     \/\/ way that can be reused for type inference.\\n     for (int j = 0; j < t->args_size(); j++) {\\n-      auto* arg = t->mutable_args(i);\\n+      auto* arg = t->mutable_args(j);\\n       if (arg->type_id() == TFT_VAR) {\\n         const auto* attr = attrs.Find(arg->s());\\n         if (attr == nullptr) {'}}",
            "message_norm":"fix heap oob read\/write due to incorrect indexing.\n\npiperorigin-revid: 408578046\nchange-id: ifc9ffea49e5890f55fcb2c27568611052c3ddcfa",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('408578046', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/full_type_util.cc'])",
            "num_files":1.0
        },
        {
            "index":332,
            "vuln_id":"GHSA-4278-2v5v-65r4",
            "cwe_id":"{'CWE-787', 'CWE-120'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eebb96c2830d48597d055d247c0e9aebaea94cd5'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `RaggedBinCount` ### Impact\nIf the `splits` argument of `RaggedBincount` does not specify a valid [`SparseTensor`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/sparse\/SparseTensor), then an attacker can trigger a heap buffer overflow:\n\n```python\nimport tensorflow as tf\ntf.raw_ops.RaggedBincount(splits=[0], values=[1,1,1,1,1], size=5, weights=[1,2,3,4], binary_output=False)\n```\n\nThis will cause a read from outside the bounds of the `splits` tensor buffer in the [implementation of the `RaggedBincount` op](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8b677d79167799f71c42fd3fa074476e0295413a\/tensorflow\/core\/kernels\/bincount_op.cc#L430-L433):\n\n```cc\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits(batch_idx)) {\n        batch_idx++;\n      }\n      ...\n    }\n```\n\nBefore the `for` loop, `batch_idx` is set to 0. The user controls the `splits` array, making it contain only one element, 0. Thus, the code in the `while` loop would increment `batch_idx` and then try to read `splits(1)`, which is outside of bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [eebb96c2830d48597d055d247c0e9aebaea94cd5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eebb96c2830d48597d055d247c0e9aebaea94cd5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are also affected.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eebb96c2830d48597d055d247c0e9aebaea94cd5",
            "commit_sha":"eebb96c2830d48597d055d247c0e9aebaea94cd5",
            "patch":"SINGLE",
            "chain_ord":"['eebb96c2830d48597d055d247c0e9aebaea94cd5']",
            "before_first_fix_commit":"{'8b677d79167799f71c42fd3fa074476e0295413a'}",
            "last_fix_commit":"eebb96c2830d48597d055d247c0e9aebaea94cd5",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2021, 21:18:51",
            "message":"Fix an invalid address vulnerability in `tf.raw_ops.RaggedBincount`.\n\nPiperOrigin-RevId: 368293153\nChange-Id: I4b4e493d3fd05e7dc55a55de3a041a80a4f275c3",
            "author":"Amit Patankar",
            "comments":"{'com_1': {'author': 'Rayyan335', 'datetime': '05\/14\/2021, 19:00:36', 'body': 'tensorflow\/core\/kernels\/bincount_op.cc'}}",
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/core\/kernels\/bincount_op.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/eebb96c2830d48597d055d247c0e9aebaea94cd5\/tensorflow%2Fcore%2Fkernels%2Fbincount_op.cc', 'patch': '@@ -420,6 +420,15 @@ class RaggedBincountOp : public OpKernel {\\n     int num_values = values.size();\\n     int batch_idx = 0;\\n \\n+    OP_REQUIRES(ctx, splits(0) == 0,\\n+                errors::InvalidArgument(\"Splits must start with 0, not with \",\\n+                                        splits(0)));\\n+\\n+    OP_REQUIRES(ctx, splits(num_rows) == num_values,\\n+                errors::InvalidArgument(\\n+                    \"Splits must end with the number of values, got \",\\n+                    splits(num_rows), \" instead of \", num_values));\\n+\\n     Tensor* out_t;\\n     OP_REQUIRES_OK(\\n         ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));'}}",
            "message_norm":"fix an invalid address vulnerability in `tf.raw_ops.raggedbincount`.\n\npiperorigin-revid: 368293153\nchange-id: i4b4e493d3fd05e7dc55a55de3a041a80a4f275c3",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('368293153', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/bincount_op.cc'])",
            "num_files":1.0
        },
        {
            "index":859,
            "vuln_id":"GHSA-6jp6-9rf9-gc66",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/9e19a8414337692cc90da2a91c9af5420f2952f1', 'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/f6753a1a1c63fade6ad418fbda827c6750ab0bda', 'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/22d577b1f1e88665a88b4569380148030e0f8389'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Weblate ### Impact\nDue to improper neutralization, it was possible to perform cross-site scripting via crafted user and language names.\n\n### Patches\n\nThe issues were fixed in the 4.11 release. The following commits are addressing it:\n\n* f6753a1a1c63fade6ad418fbda827c6750ab0bda\n* 9e19a8414337692cc90da2a91c9af5420f2952f1\n* 22d577b1f1e88665a88b4569380148030e0f8389\n\n### Workarounds\n\nYou can look for crafted user and language names to see if you were affected.\n\n### References\n* https:\/\/hackerone.com\/reports\/1486674\n* https:\/\/hackerone.com\/reports\/1486718\n* https:\/\/hackerone.com\/reports\/1485226\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a topic in [discussions](https:\/\/github.com\/WeblateOrg\/weblate\/discussions)\n* Email us at [care@weblate.org](mailto:care@weblate.org)",
            "published_date":"2022-02-25",
            "chain_len":3,
            "project":"https:\/\/github.com\/WeblateOrg\/weblate",
            "commit_href":"https:\/\/github.com\/WeblateOrg\/weblate\/commit\/f6753a1a1c63fade6ad418fbda827c6750ab0bda",
            "commit_sha":"f6753a1a1c63fade6ad418fbda827c6750ab0bda",
            "patch":"MULTI",
            "chain_ord":"['22d577b1f1e88665a88b4569380148030e0f8389', '9e19a8414337692cc90da2a91c9af5420f2952f1', 'f6753a1a1c63fade6ad418fbda827c6750ab0bda']",
            "before_first_fix_commit":"{'572628cef60e9d839b79b2087960b606a5cca4d8'}",
            "last_fix_commit":"f6753a1a1c63fade6ad418fbda827c6750ab0bda",
            "chain_ord_pos":3.0,
            "commit_datetime":"02\/22\/2022, 20:10:41",
            "message":"translate: Add missing escaping to language name\n\nFixes https:\/\/hackerone.com\/reports\/1486674",
            "author":"Michal \u010ciha\u0159",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'weblate\/trans\/forms.py': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WeblateOrg\/weblate\/raw\/f6753a1a1c63fade6ad418fbda827c6750ab0bda\/weblate%2Ftrans%2Fforms.py', 'patch': '@@ -37,6 +37,7 @@\\n from django.template.loader import render_to_string\\n from django.urls import reverse\\n from django.utils import timezone\\n+from django.utils.html import escape\\n from django.utils.http import urlencode\\n from django.utils.safestring import mark_safe\\n from django.utils.translation import gettext\\n@@ -318,7 +319,7 @@ def render(self, name, value, attrs=None, renderer=None, **kwargs):\\n             # Render textare\\n             textarea = super().render(fieldname, val, attrs, renderer, **kwargs)\\n             # Label for plural\\n-            label = str(unit.translation.language)\\n+            label = escape(unit.translation.language)\\n             if len(values) != 1:\\n                 label = f\"{label}, {plural.get_plural_label(idx)}\"\\n             ret.append('}}",
            "message_norm":"translate: add missing escaping to language name\n\nfixes https:\/\/hackerone.com\/reports\/1486674",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('https:\/\/hackerone.com\/reports\/1486674', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['weblate\/trans\/forms.py'])",
            "num_files":1.0
        },
        {
            "index":3394,
            "vuln_id":"GHSA-x7r7-wmj8-vv5g",
            "cwe_id":"{'CWE-79'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/octoprint\/octoprint\/commit\/8087528e4a7ddd15c7d95ff662deb5ef7de90045'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in OctoPrint Cross-site Scripting (XSS) - DOM in GitHub repository octoprint\/octoprint prior to 1.8.0. The login endpoint allows for javascript injection which may lead to account takeover in a phishing scenario.",
            "published_date":"2022-05-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/octoprint\/octoprint",
            "commit_href":"https:\/\/github.com\/octoprint\/octoprint\/commit\/8087528e4a7ddd15c7d95ff662deb5ef7de90045",
            "commit_sha":"8087528e4a7ddd15c7d95ff662deb5ef7de90045",
            "patch":"SINGLE",
            "chain_ord":"['8087528e4a7ddd15c7d95ff662deb5ef7de90045']",
            "before_first_fix_commit":"{'700034d028ff3518b563a7b4ba4dacc920142d07'}",
            "last_fix_commit":"8087528e4a7ddd15c7d95ff662deb5ef7de90045",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/11\/2022, 11:02:52",
            "message":"\ud83d\udd12\ufe0f Sanitize and validate login redirect\n\nFixes an XSS and an open redirect issue.",
            "author":"Gina H\u00e4u\u00dfge",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
            "files":"{'src\/octoprint\/server\/views.py': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/OctoPrint\/OctoPrint\/raw\/8087528e4a7ddd15c7d95ff662deb5ef7de90045\/src%2Foctoprint%2Fserver%2Fviews.py', 'patch': '@@ -8,6 +8,7 @@\\n import os\\n import re\\n from collections import defaultdict\\n+from urllib.parse import urlparse\\n \\n from flask import (\\n     Response,\\n@@ -170,7 +171,16 @@ def _add_additional_assets(hook):\\n def login():\\n     from flask_login import current_user\\n \\n-    redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))\\n+    default_redirect_url = request.script_root + url_for(\"index\")\\n+    redirect_url = request.args.get(\"redirect\", default_redirect_url)\\n+\\n+    parsed = urlparse(redirect_url)  # check if redirect url is valid\\n+    if parsed.scheme != \"\" or parsed.netloc != \"\":\\n+        _logger.warning(\\n+            f\"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}\"\\n+        )\\n+        redirect_url = default_redirect_url\\n+\\n     permissions = sorted(\\n         filter(\\n             lambda x: x is not None and isinstance(x, OctoPrintPermission),'}}",
            "message_norm":"\ud83d\udd12\ufe0f sanitize and validate login redirect\n\nfixes an xss and an open redirect issue.",
            "language":"en",
            "entities":"[('sanitize', 'SECWORD', ''), ('validate', 'ACTION', ''), ('login', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/octoprint\/server\/views.py'])",
            "num_files":1.0
        },
        {
            "index":3160,
            "vuln_id":"GHSA-vqj2-4v8m-8vrq",
            "cwe_id":"{'CWE-377', 'CWE-668'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/mlflow\/mlflow\/commit\/61984e6843d2e59235d82a580c529920cd8f3711'}",
            "dataset":"osv",
            "summary":"Insecure Temporary File in mlflow mlflow prior to 1.23.1 contains an insecure temporary file. The insecure function `tempfile.mktemp()` is deprecated and `mkstemp()` should be used instead.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/mlflow\/mlflow",
            "commit_href":"https:\/\/github.com\/mlflow\/mlflow\/commit\/61984e6843d2e59235d82a580c529920cd8f3711",
            "commit_sha":"61984e6843d2e59235d82a580c529920cd8f3711",
            "patch":"SINGLE",
            "chain_ord":"['61984e6843d2e59235d82a580c529920cd8f3711']",
            "before_first_fix_commit":"{'271750bc2a65f469956a11499c022df138c6d0f6'}",
            "last_fix_commit":"61984e6843d2e59235d82a580c529920cd8f3711",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2022, 23:59:23",
            "message":"Use mkstemp to replace deprecated mktemp call (#5303)\n\n* Use mkstemp\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Remove num examples\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Close instead of remove\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Close the handle\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>",
            "author":"Corey Zumar",
            "comments":"{'com_1': {'author': 'sr-mpamera', 'datetime': '03\/02\/2022, 15:40:16', 'body': 'The security check fails even though the mlflow is upgraded to 1.23.1. It gives the error \"Insecure Temporary File in mlflow\".\\r\\nAny suggested solution please ?'}}",
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'mlflow\/utils\/file_utils.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mlflow\/mlflow\/raw\/61984e6843d2e59235d82a580c529920cd8f3711\/mlflow%2Futils%2Ffile_utils.py', 'patch': '@@ -287,7 +287,7 @@ def _filter_timestamps(tar_info):\\n         tar_info.mtime = 0\\n         return tar_info if custom_filter is None else custom_filter(tar_info)\\n \\n-    unzipped_filename = tempfile.mktemp()\\n+    unzipped_file_handle, unzipped_filename = tempfile.mkstemp()\\n     try:\\n         with tarfile.open(unzipped_filename, \"w\") as tar:\\n             tar.add(source_dir, arcname=archive_name, filter=_filter_timestamps)\\n@@ -298,7 +298,7 @@ def _filter_timestamps(tar_info):\\n         ) as gzipped_tar, open(unzipped_filename, \"rb\") as tar:\\n             gzipped_tar.write(tar.read())\\n     finally:\\n-        os.remove(unzipped_filename)\\n+        os.close(unzipped_file_handle)\\n \\n \\n def _copy_project(src_path, dst_path=\"\"):'}}",
            "message_norm":"use mkstemp to replace deprecated mktemp call (#5303)\n\n* use mkstemp\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* remove num examples\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* close instead of remove\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* close the handle\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>",
            "language":"en",
            "entities":"[('#5303', 'ISSUE', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('remove', 'ACTION', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('remove', 'ACTION', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('corey.zumar@databricks.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mlflow\/utils\/file_utils.py'])",
            "num_files":1.0
        },
        {
            "index":203,
            "vuln_id":"GHSA-35q2-47q7-3pc3",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/NodeRedis\/node-redis\/commit\/2d11b6dc9b9774464a91fb4b448bad8bf699629e'}",
            "dataset":"osv",
            "summary":"Node-Redis potential exponential regex in monitor mode ### Impact\nWhen a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service.\n\n### Patches\nThe problem was fixed in commit [`2d11b6d`](https:\/\/github.com\/NodeRedis\/node-redis\/commit\/2d11b6dc9b9774464a91fb4b448bad8bf699629e) and was released in version `3.1.1`.\n\n### References\n#1569 (GHSL-2021-026)",
            "published_date":"2021-04-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/NodeRedis\/node-redis",
            "commit_href":"https:\/\/github.com\/NodeRedis\/node-redis\/commit\/2d11b6dc9b9774464a91fb4b448bad8bf699629e",
            "commit_sha":"2d11b6dc9b9774464a91fb4b448bad8bf699629e",
            "patch":"SINGLE",
            "chain_ord":"['2d11b6dc9b9774464a91fb4b448bad8bf699629e']",
            "before_first_fix_commit":"{'7e77de84bc80b0742321939c59612dc27559bbff'}",
            "last_fix_commit":"2d11b6dc9b9774464a91fb4b448bad8bf699629e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/08\/2021, 22:04:34",
            "message":"fix #1569 - improve monitor_regex (#1595)\n\nCo-authored-by: Guy Korland <gkorland@gmail.com>",
            "author":"Leibale Eidelman",
            "comments":"{'com_1': {'author': 'Plavit', 'datetime': '04\/27\/2021, 21:27:30', 'body': 'lemme check compatibility'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/utils.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/redis\/node-redis\/raw\/2d11b6dc9b9774464a91fb4b448bad8bf699629e\/lib%2Futils.js', 'patch': '@@ -127,7 +127,7 @@ module.exports = {\\n     reply_to_object: replyToObject,\\n     print: print,\\n     err_code: \/^([A-Z]+)\\\\s+(.+)$\/,\\n-    monitor_regex: \/^[0-9]{10,11}\\\\.[0-9]+ \\\\[[0-9]+ .+\\\\]( \".+?\")+$\/,\\n+    monitor_regex: \/^[0-9]{10,11}\\\\.[0-9]+ \\\\[[0-9]+ .+\\\\].*\"$\/,\\n     clone: convenienceClone,\\n     callback_or_emit: callbackOrEmit,\\n     reply_in_order: replyInOrder'}}",
            "message_norm":"fix #1569 - improve monitor_regex (#1595)\n\nco-authored-by: guy korland <gkorland@gmail.com>",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#1569', 'ISSUE', ''), ('improve', 'ACTION', ''), ('#1595', 'ISSUE', ''), ('gkorland@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/utils.js'])",
            "num_files":1.0
        },
        {
            "index":1151,
            "vuln_id":"GHSA-86ch-6w7v-v6xf",
            "cwe_id":"{'CWE-755'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/soketi\/soketi\/commit\/4b12efef9c31117c36a0a0f1c3aa32114e86364b'}",
            "dataset":"osv",
            "summary":"Denial of Service in soketi ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nThere was a wrong behavior when reading POST requests, making the server crash if it couldn't read the body. In case a POST request was sent to any endpoint of the server with an empty body, **even unauthenticated with the Pusher Protocol**, it would simply just crash the server for trying to send a response after the request closed.\n\nAll users that run the server are affected by it and it's highly recommended to upgrade to the latest patch.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nUpdating to at least 0.24.1 or the latest version.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nNo. Upgrading is the only solution.\n\n### References\n_Are there any links users can visit to find out more?_\n\nhttps:\/\/github.com\/soketi\/soketi\/releases\/tag\/0.24.1\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the issues board](https:\/\/github.com\/soketi\/soketi\/issues)\n* Email us at [alex@renoki.org](mailto:alex@renoki.org)",
            "published_date":"2022-01-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/soketi\/soketi",
            "commit_href":"https:\/\/github.com\/soketi\/soketi\/commit\/4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "commit_sha":"4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "patch":"SINGLE",
            "chain_ord":"['4b12efef9c31117c36a0a0f1c3aa32114e86364b']",
            "before_first_fix_commit":"{'8541e4e07c97de7b6fd2ce22f4e072ef1072d627', '53ba39c7886c614d27633d347dbd93faac9dbdc0'}",
            "last_fix_commit":"4b12efef9c31117c36a0a0f1c3aa32114e86364b",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/07\/2022, 11:26:17",
            "message":"Merge pull request #246 from soketi\/fix\/crash-on-empty-post\n\n[fix] Do not close the connection on empty POST payload",
            "author":"rennokki",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 7, 'total': 16}",
            "files":"{'src\/http-handler.ts': {'additions': 9, 'deletions': 7, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/soketi\/soketi\/raw\/4b12efef9c31117c36a0a0f1c3aa32114e86364b\/src%2Fhttp-handler.ts', 'patch': \"@@ -417,19 +417,22 @@ export class HttpHandler {\\n             let chunk = Buffer.from(ab);\\n \\n             if (isLast) {\\n-                let json;\\n-                let raw;\\n+                let json = {};\\n+                let raw = '{}';\\n \\n                 if (buffer) {\\n                     try {\\n                         \/\/ @ts-ignore\\n                         json = JSON.parse(Buffer.concat([buffer, chunk]));\\n                     } catch (e) {\\n-                        res.close();\\n-                        return;\\n+                        \/\/\\n                     }\\n \\n-                    raw = Buffer.concat([buffer, chunk]).toString();\\n+                    try {\\n+                        raw = Buffer.concat([buffer, chunk]).toString();\\n+                    } catch (e) {\\n+                        \/\/\\n+                    }\\n \\n                     cb(json, raw);\\n                     loggingAction(json);\\n@@ -439,8 +442,7 @@ export class HttpHandler {\\n                         json = JSON.parse(chunk);\\n                         raw = chunk.toString();\\n                     } catch (e) {\\n-                        res.close();\\n-                        return;\\n+                        \/\/\\n                     }\\n \\n                     cb(json, raw);\"}}",
            "message_norm":"merge pull request #246 from soketi\/fix\/crash-on-empty-post\n\n[fix] do not close the connection on empty post payload",
            "language":"en",
            "entities":"[('#246', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/http-handler.ts'])",
            "num_files":1.0
        },
        {
            "index":1628,
            "vuln_id":"GHSA-cwpm-f78v-7m5c",
            "cwe_id":"{'CWE-400', 'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e'}",
            "dataset":"osv",
            "summary":"Denial of service in `tf.ragged.constant` due to lack of validation ### Impact\nThe implementation of [`tf.ragged.constant`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:\n\n```python\nimport tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55199).",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bd4d5583ff9c8df26d47a23e508208844297310e",
            "commit_sha":"bd4d5583ff9c8df26d47a23e508208844297310e",
            "patch":"SINGLE",
            "chain_ord":"['bd4d5583ff9c8df26d47a23e508208844297310e']",
            "before_first_fix_commit":"{'e74ef072ecd54ca54f3940ce9b98af796ded2a1a'}",
            "last_fix_commit":"bd4d5583ff9c8df26d47a23e508208844297310e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2022, 16:11:43",
            "message":"Prevent denial of service in `tf.ragged.constant`\n\nFixes #55199\n\nPiperOrigin-RevId: 442029525",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/bd4d5583ff9c8df26d47a23e508208844297310e\/tensorflow%2Fpython%2Fops%2Fragged%2Fragged_factory_ops.py', 'patch': '@@ -188,6 +188,9 @@ def _constant_value(ragged_factory, inner_factory, pylist, dtype, ragged_rank,\\n     if max_depth > scalar_depth:\\n       raise ValueError(\"Invalid pylist=%r: empty list nesting is greater \"\\n                        \"than scalar value nesting\" % pylist)\\n+    if ragged_rank is not None and max_depth < ragged_rank:\\n+      raise ValueError(f\"Invalid pylist={pylist}, max depth smaller than \"\\n+                       f\"ragged_rank={ragged_rank}\")\\n \\n   # If both inner_shape and ragged_rank were specified, then check that\\n   # they are compatible with pylist.'}}",
            "message_norm":"prevent denial of service in `tf.ragged.constant`\n\nfixes #55199\n\npiperorigin-revid: 442029525",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#55199', 'ISSUE', ''), ('442029525', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/python\/ops\/ragged\/ragged_factory_ops.py'])",
            "num_files":1.0
        },
        {
            "index":2597,
            "vuln_id":"GHSA-pjpc-87mp-4332",
            "cwe_id":"{'CWE-79'}",
            "score":9.6,
            "chain":"{'https:\/\/github.com\/mautic\/mautic\/commit\/462eb596027fd949efbf9ac5cb2b376805e9d246'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting vulnerability in Mautic's tracking pixel functionality ### Impact\n\nMautic allows you to track open rates by using tracking pixels. \nThe tracking information is stored together with extra metadata of the tracking request.\n\nThe output isn't sufficiently filtered when showing the metadata of the tracking information, which may lead to a vulnerable situation.\n\n### Patches\n\nPlease upgrade to 4.3.0\n\n### Workarounds\nNone.\n\n### References\n* Internally tracked under MST-38\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@mautic.org](mailto:security@mautic.org)",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/mautic\/mautic",
            "commit_href":"https:\/\/github.com\/mautic\/mautic\/commit\/462eb596027fd949efbf9ac5cb2b376805e9d246",
            "commit_sha":"462eb596027fd949efbf9ac5cb2b376805e9d246",
            "patch":"SINGLE",
            "chain_ord":"['462eb596027fd949efbf9ac5cb2b376805e9d246']",
            "before_first_fix_commit":"{'d1518c24e45515d710d4e488bc33a14027b64194'}",
            "last_fix_commit":"462eb596027fd949efbf9ac5cb2b376805e9d246",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/23\/2022, 11:55:13",
            "message":"Merge pull request from GHSA-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* Update app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php\n\nCo-authored-by: John Linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nCo-authored-by: John Linhart <admin@escope.cz>",
            "author":"mollux",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mautic\/mautic\/raw\/462eb596027fd949efbf9ac5cb2b376805e9d246\/app%2Fbundles%2FEmailBundle%2FViews%2FSubscribedEvents%2FTimeline%2Findex.html.php', 'patch': \"@@ -8,6 +8,7 @@\\n  *\\n  * @license     GNU\/GPLv3 http:\/\/www.gnu.org\/licenses\/gpl-3.0.html\\n  *\/\\n+\\n if ($item = ((isset($event['extra'])) ? $event['extra']['stat'] : false)): ?>\\n     <p>\\n         <?php if (!empty($item['isFailed'])) : ?>\\n@@ -63,7 +64,7 @@\\n             endif;\\n             ?>\\n             <?php if ($counter > 1): ?><hr\/><?php endif; ?>\\n-            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?><\/strong><br\/><?php echo $detail['useragent']; ?>\\n+            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?><\/strong><br\/><?php echo $view->escape($detail['useragent']); ?>\\n             <?php ++$counter; ?>\\n         <?php endforeach; ?>\\n         <?php\"}}",
            "message_norm":"merge pull request from ghsa-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* update app\/bundles\/emailbundle\/views\/subscribedevents\/timeline\/index.html.php\n\nco-authored-by: john linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nco-authored-by: john linhart <admin@escope.cz>",
            "language":"en",
            "entities":"[('ghsa-pjpc-87mp-4332', 'VULNID', 'GHSA'), ('sanitise', 'SECWORD', ''), ('update', 'ACTION', ''), ('admin@escope.cz', 'SECWORD', ''), ('removed', 'ACTION', ''), ('admin@escope.cz', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php'])",
            "num_files":1.0
        },
        {
            "index":1567,
            "vuln_id":"GHSA-cm5x-837x-jf3c",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e86605c0a336c088b638da02135ea6f9f6753618'}",
            "dataset":"osv",
            "summary":"Division by 0 in inplace operations ### Impact\nAn attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.InplaceSub(x=[],i=[-99,-1,-1],v=[1,1,1])\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/inplace_ops.cc#L283) has a logic error: it should skip processing if `x` and `v` are empty but the code uses `||` instead of `&&`.\n\n### Patches\nWe have patched the issue in GitHub commit [e86605c0a336c088b638da02135ea6f9f6753618](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e86605c0a336c088b638da02135ea6f9f6753618).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e86605c0a336c088b638da02135ea6f9f6753618",
            "commit_sha":"e86605c0a336c088b638da02135ea6f9f6753618",
            "patch":"SINGLE",
            "chain_ord":"['e86605c0a336c088b638da02135ea6f9f6753618']",
            "before_first_fix_commit":"{'29e3d6b706a33780b1cb4863200ec7525ff035ce'}",
            "last_fix_commit":"e86605c0a336c088b638da02135ea6f9f6753618",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2021, 21:21:27",
            "message":"Fix FPE in inpace update ops.\n\nPiperOrigin-RevId: 388303197\nChange-Id: Ib48309b6213ffe53eba81004b00e889d653e4b83",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/inplace_ops.cc': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e86605c0a336c088b638da02135ea6f9f6753618\/tensorflow%2Fcore%2Fkernels%2Finplace_ops.cc', 'patch': '@@ -225,7 +225,7 @@ class InplaceOpBase : public OpKernel {\\n \\n     Tensor y = x;  \/\/ This creates an alias intentionally.\\n     \/\/ Skip processing if tensors are empty.\\n-    if (x.NumElements() > 0 || v.NumElements() > 0) {\\n+    if (x.NumElements() > 0 && v.NumElements() > 0) {\\n       OP_REQUIRES_OK(ctx, DoCompute(ctx, i, v, &y));\\n     }\\n     ctx->set_output(0, y);'}}",
            "message_norm":"fix fpe in inpace update ops.\n\npiperorigin-revid: 388303197\nchange-id: ib48309b6213ffe53eba81004b00e889d653e4b83",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('388303197', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/inplace_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1560,
            "vuln_id":"GHSA-cjc7-49v2-jp64",
            "cwe_id":"{'CWE-787', 'CWE-665'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseAdd` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3",
            "commit_sha":"6fd02f44810754ae7481838b6a67c5df7f909ca3",
            "patch":"MULTI",
            "chain_ord":"['6fd02f44810754ae7481838b6a67c5df7f909ca3', '41727ff06111117bdf86b37db198217fd7a143cc']",
            "before_first_fix_commit":"{'6f432d6334edc93fd5af0070170def56b0413e8a'}",
            "last_fix_commit":"41727ff06111117bdf86b37db198217fd7a143cc",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2021, 23:40:49",
            "message":"Fix `tf.raw_ops.SparseAdd ` invalid memory access failure.\n\nPiperOrigin-RevId: 370568774\nChange-Id: I5f73b31c865f2948a1c8dfb7ebd22b3cfb6405bf",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/sparse_add_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6fd02f44810754ae7481838b6a67c5df7f909ca3\/tensorflow%2Fcore%2Fkernels%2Fsparse_add_op.cc', 'patch': '@@ -14,6 +14,7 @@ limitations under the License.\\n ==============================================================================*\/\\n \\n #include \"tensorflow\/core\/framework\/op_kernel.h\"\\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n #include \"tensorflow\/core\/framework\/register_types.h\"\\n #include \"tensorflow\/core\/framework\/tensor.h\"\\n #include \"tensorflow\/core\/framework\/tensor_util.h\"\\n@@ -101,6 +102,10 @@ class SparseAddOp : public OpKernel {\\n     std::vector<T> out_values;\\n     const int num_dims = a_shape->dim_size(0);\\n \\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Invalid input_a shape. Received: \",\\n+                                        a_shape->DebugString()));\\n+\\n     \/\/ The input and output sparse tensors are assumed to be ordered along\\n     \/\/ increasing dimension number.\\n     int64 i = 0, j = 0;'}}",
            "message_norm":"fix `tf.raw_ops.sparseadd ` invalid memory access failure.\n\npiperorigin-revid: 370568774\nchange-id: i5f73b31c865f2948a1c8dfb7ebd22b3cfb6405bf",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('invalid memory access', 'SECWORD', ''), ('370568774', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_add_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1452,
            "vuln_id":"GHSA-c265-37vj-cwcc",
            "cwe_id":"{'CWE-502'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/99001cdb6807b5c7b170ec6a9092ecbb618ae79c'}",
            "dataset":"osv",
            "summary":"Deserialization of untrusted data in Jackson Databind FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",
            "published_date":"2020-06-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/FasterXML\/jackson-databind",
            "commit_href":"https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/99001cdb6807b5c7b170ec6a9092ecbb618ae79c",
            "commit_sha":"99001cdb6807b5c7b170ec6a9092ecbb618ae79c",
            "patch":"SINGLE",
            "chain_ord":"['99001cdb6807b5c7b170ec6a9092ecbb618ae79c']",
            "before_first_fix_commit":"{'716f3f95fb82c686cc20d7255665de54c5330fa7'}",
            "last_fix_commit":"99001cdb6807b5c7b170ec6a9092ecbb618ae79c",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/02\/2020, 02:17:39",
            "message":"Fix #2704",
            "author":"Tatu Saloranta",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'release-notes\/VERSION-2.x': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FasterXML\/jackson-databind\/raw\/99001cdb6807b5c7b170ec6a9092ecbb618ae79c\/release-notes%2FVERSION-2.x', 'patch': '@@ -10,6 +10,8 @@ Project: jackson-databind\\n  (reported by Topsec(tcc))\\n #2698: Block one more gadget type (weblogic\/oracle-aqjms)\\n  (reported by Fangrun Li)\\n+#2704: Block one more gadget type (weblogic\/oracle-aqjms)\\n+ (reported by XuYuanzhen)\\n \\n 2.9.10.4 (11-Apr-2020)'}}",
            "message_norm":"fix #2704",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('#2704', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['release-notes\/VERSION-2.x'])",
            "num_files":1.0
        },
        {
            "index":215,
            "vuln_id":"GHSA-37pf-w9ff-gqvm",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/87ac2b5a751710ee288fdda3fd4d9818e22387a1'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0912, CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0922, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0933, CVE-2019-0937.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/87ac2b5a751710ee288fdda3fd4d9818e22387a1",
            "commit_sha":"87ac2b5a751710ee288fdda3fd4d9818e22387a1",
            "patch":"MULTI",
            "chain_ord":"['87ac2b5a751710ee288fdda3fd4d9818e22387a1', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
            "before_first_fix_commit":"{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
            "last_fix_commit":"d797e3f00e34c12c8c0ae52f56344325439dccd7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2019, 17:22:17",
            "message":"[CVE-2019-0927]",
            "author":"Michael Holman",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'lib\/Backend\/GlobOptFields.cpp': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/87ac2b5a751710ee288fdda3fd4d9818e22387a1\/lib%2FBackend%2FGlobOptFields.cpp', 'patch': '@@ -394,6 +394,7 @@ GlobOpt::ProcessFieldKills(IR::Instr *instr, BVSparse<JitArenaAllocator> *bv, bo\\n     case Js::OpCode::StRootFldStrict:\\n     case Js::OpCode::StSlot:\\n     case Js::OpCode::StSlotChkUndecl:\\n+    case Js::OpCode::StSuperFld:\\n         Assert(dstOpnd != nullptr);\\n         sym = dstOpnd->AsSymOpnd()->m_sym;\\n         if (inGlobOpt)'}}",
            "message_norm":"[cve-2019-0927]",
            "language":"ro",
            "entities":"[('cve-2019-0927', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOptFields.cpp'])",
            "num_files":1.0
        },
        {
            "index":177,
            "vuln_id":"GHSA-32j9-6qqm-mq9g",
            "cwe_id":"{'CWE-241', 'CWE-703'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/Venemo\/node-lmdb\/commit\/97760104c0fd311206b88aecd91fa1f59fe2b85a'}",
            "dataset":"osv",
            "summary":"Unhandled case in node-lmdb The package node-lmdb before 0.9.7 is vulnerable to Denial of Service (DoS) when defining a non-invokable `ToString` value, which will cause a crash during type check.",
            "published_date":"2022-03-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/Venemo\/node-lmdb",
            "commit_href":"https:\/\/github.com\/Venemo\/node-lmdb\/commit\/97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "commit_sha":"97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "patch":"SINGLE",
            "chain_ord":"['97760104c0fd311206b88aecd91fa1f59fe2b85a']",
            "before_first_fix_commit":"{'4b659d1734e02e09b45a29ac81f425f610bd14ea'}",
            "last_fix_commit":"97760104c0fd311206b88aecd91fa1f59fe2b85a",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/12\/2022, 14:19:20",
            "message":"Perform argument check for putString",
            "author":"Kris Zyp",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'src\/txn.cpp': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Venemo\/node-lmdb\/raw\/97760104c0fd311206b88aecd91fa1f59fe2b85a\/src%2Ftxn.cpp', 'patch': '@@ -295,6 +295,8 @@ Nan::NAN_METHOD_RETURN_TYPE TxnWrap::putCommon(Nan::NAN_METHOD_ARGS_TYPE info, v\\n }\\n \\n NAN_METHOD(TxnWrap::putString) {\\n+    if (!info[2]->IsString())\\n+        return Nan::ThrowError(\"Value must be a string.\");\\n     return putCommon(info, [](Nan::NAN_METHOD_ARGS_TYPE info, MDB_val &data) -> void {\\n         CustomExternalStringResource::writeTo(Local<String>::Cast(info[2]), &data);\\n     }, [](MDB_val &data) -> void {'}}",
            "message_norm":"perform argument check for putstring",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/txn.cpp'])",
            "num_files":1.0
        },
        {
            "index":1508,
            "vuln_id":"GHSA-c7pp-g2v2-2766",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/KartikTalwar\/gmail.js\/commit\/a83436f499f9c01b04280af945a5a81137b6baf1'}",
            "dataset":"osv",
            "summary":"DOM-based XSS in gmail-js Affected versions of `gmail-js` are vulnerable to cross-site scripting in the `tools.parse_response`, `helper.get.visible_emails_post`, and `helper.get.email_data_post` functions, which pass user input directly into the Function constructor.\n\n\n\n## Recommendation\n\nUpdate to version 0.6.5 or later.",
            "published_date":"2020-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/KartikTalwar\/gmail.js",
            "commit_href":"https:\/\/github.com\/KartikTalwar\/gmail.js\/commit\/a83436f499f9c01b04280af945a5a81137b6baf1",
            "commit_sha":"a83436f499f9c01b04280af945a5a81137b6baf1",
            "patch":"SINGLE",
            "chain_ord":"['a83436f499f9c01b04280af945a5a81137b6baf1']",
            "before_first_fix_commit":"{'0e4732cb6c6c447d7f0487580ad7ada33184be92'}",
            "last_fix_commit":"a83436f499f9c01b04280af945a5a81137b6baf1",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/29\/2016, 08:36:02",
            "message":"Replace new Function() with JSON.parse()",
            "author":"Jostein Kj\u00f8nigsen",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 15, 'total': 23}",
            "files":"{'src\/gmail.js': {'additions': 8, 'deletions': 15, 'changes': 23, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/KartikTalwar\/gmail.js\/raw\/a83436f499f9c01b04280af945a5a81137b6baf1\/src%2Fgmail.js', 'patch': '@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {\\n                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(\"[\");\\n                 data = response.substring(response.indexOf(\"[\"), endIndex);\\n \\n-                var get_data = new Function(\"\\\\\"use strict\\\\\"; return \" + data);\\n-                realData = get_data();\\n-\\n-                parsedResponse.push(realData);\\n+                var json = JSON.parse(data);\\n+                parsedResponse.push(json);\\n \\n                 \/\/ prepare response for next loop\\n                 response = response.substring(response.indexOf(\"[\"), response.length);\\n@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {\\n             return emails;\\n         }\\n \\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        api.tracker.view_data = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n+        api.tracker.view_data = json;\\n \\n         for(var i in api.tracker.view_data) {\\n             if (typeof(api.tracker.view_data[i]) === \"function\") {\\n@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {\\n         if (!get_data) {\\n             return {};\\n         }\\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        var cdata = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n \\n-        api.tracker.email_data = cdata[0];\\n+        api.tracker.email_data = json[0];\\n         return api.tools.parse_email_data(api.tracker.email_data);\\n     };'}}",
            "message_norm":"replace new function() with json.parse()",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/gmail.js'])",
            "num_files":1.0
        },
        {
            "index":1730,
            "vuln_id":"GHSA-fh37-cx83-q542",
            "cwe_id":"{'CWE-306', 'CWE-269', 'CWE-287'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/apache\/airflow\/commit\/21cedff205e7d62675949fda2aa4616d77232b76'}",
            "dataset":"osv",
            "summary":"Improper Authentication in Apache Airflow The lineage endpoint of the deprecated Experimental API was not protected by authentication in Airflow 2.0.0. This allowed unauthenticated users to hit that endpoint. This is low-severity issue as the attacker needs to be aware of certain parameters to pass to that endpoint and even after can just get some metadata about a DAG and a Task. This issue only affects Apache Airflow 2.0.0.",
            "published_date":"2021-06-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/airflow",
            "commit_href":"https:\/\/github.com\/apache\/airflow\/commit\/21cedff205e7d62675949fda2aa4616d77232b76",
            "commit_sha":"21cedff205e7d62675949fda2aa4616d77232b76",
            "patch":"SINGLE",
            "chain_ord":"['21cedff205e7d62675949fda2aa4616d77232b76']",
            "before_first_fix_commit":"{'4b1a6f78d132e42f1c946f53eca89789d21bdc1d'}",
            "last_fix_commit":"21cedff205e7d62675949fda2aa4616d77232b76",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/27\/2021, 21:47:45",
            "message":"Add authentication to lineage endpoint for experimental API (#13870)\n\n(cherry picked from commit 24a54242d56058846c7978130b3f37ca045d5142)",
            "author":"Ian Carroll",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'airflow\/www\/api\/experimental\/endpoints.py': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/airflow\/raw\/21cedff205e7d62675949fda2aa4616d77232b76\/airflow%2Fwww%2Fapi%2Fexperimental%2Fendpoints.py', 'patch': '@@ -389,6 +389,7 @@ def delete_pool(name):\\n \\n \\n @api_experimental.route(\\'\/lineage\/<string:dag_id>\/<string:execution_date>\\', methods=[\\'GET\\'])\\n+@requires_authentication\\n def get_lineage(dag_id: str, execution_date: str):\\n     \"\"\"Get Lineage details for a DagRun\"\"\"\\n     # Convert string datetime into actual datetime'}}",
            "message_norm":"add authentication to lineage endpoint for experimental api (#13870)\n\n(cherry picked from commit 24a54242d56058846c7978130b3f37ca045d5142)",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('authentication', 'SECWORD', ''), ('#13870', 'ISSUE', ''), ('commit 24a54242d56058846c7978130b3f37ca045d5142', 'SHA', 'prefix_colon_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['airflow\/www\/api\/experimental\/endpoints.py'])",
            "num_files":1.0
        },
        {
            "index":3151,
            "vuln_id":"GHSA-vp56-6g26-6827",
            "cwe_id":"{'CWE-400'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/node-fetch\/node-fetch\/commit\/28802387292baee467e042e168d92597b5bbbe3d'}",
            "dataset":"osv",
            "summary":"node-fetch Inefficient Regular Expression Complexity  [node-fetch](https:\/\/www.npmjs.com\/package\/node-fetch) is a light-weight module that brings window.fetch to node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `isOriginPotentiallyTrustworthy()` function in `referrer.js`, when processing a URL string with alternating letters and periods, such as `'http:\/\/' + 'a.a.'.repeat(i) + 'a'`.",
            "published_date":"2022-08-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/node-fetch\/node-fetch",
            "commit_href":"https:\/\/github.com\/node-fetch\/node-fetch\/commit\/28802387292baee467e042e168d92597b5bbbe3d",
            "commit_sha":"28802387292baee467e042e168d92597b5bbbe3d",
            "patch":"SINGLE",
            "chain_ord":"['28802387292baee467e042e168d92597b5bbbe3d']",
            "before_first_fix_commit":"{'e87b093fd678a9ea39c5b17b2a1bdfc4691eedc7'}",
            "last_fix_commit":"28802387292baee467e042e168d92597b5bbbe3d",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2022, 08:01:29",
            "message":"fix: ReDoS referrer (#1611)\n\n* fix ReDoS referrer\r\n\r\n* Update src\/utils\/referrer.js\r\n\r\nEliminate regex and use string matcher\r\n\r\nCo-authored-by: Linus Unneb\u00e4ck <linus@folkdatorn.se>\r\n\r\nCo-authored-by: Khang. V\u00f5 V\u0129 <khangvv@vng.com.vn>\r\nCo-authored-by: Linus Unneb\u00e4ck <linus@folkdatorn.se>",
            "author":"Khang Vo (doublevkay)",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/utils\/referrer.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/node-fetch\/node-fetch\/raw\/28802387292baee467e042e168d92597b5bbbe3d\/src%2Futils%2Freferrer.js', 'patch': '@@ -119,7 +119,7 @@ export function isOriginPotentiallyTrustworthy(url) {\\n \\t\/\/ 5. If origin\\'s host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\\n \\t\/\/ We are returning FALSE here because we cannot ensure conformance to\\n \\t\/\/ let-localhost-be-loalhost (https:\/\/tools.ietf.org\/html\/draft-west-let-localhost-be-localhost)\\n-\\tif (\/^(.+\\\\.)*localhost$\/.test(url.host)) {\\n+\\tif (url.host === \\'localhost\\' || url.host.endsWith(\\'.localhost\\')) {\\n \\t\\treturn false;\\n \\t}'}}",
            "message_norm":"fix: redos referrer (#1611)\n\n* fix redos referrer\r\n\r\n* update src\/utils\/referrer.js\r\n\r\neliminate regex and use string matcher\r\n\r\nco-authored-by: linus unneb\u00e4ck <linus@folkdatorn.se>\r\n\r\nco-authored-by: khang. v\u00f5 v\u0129 <khangvv@vng.com.vn>\r\nco-authored-by: linus unneb\u00e4ck <linus@folkdatorn.se>",
            "language":"en",
            "entities":"[('redos', 'SECWORD', ''), ('#1611', 'ISSUE', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('linus@folkdatorn.se', 'EMAIL', ''), ('linus@folkdatorn.se', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/utils\/referrer.js'])",
            "num_files":1.0
        },
        {
            "index":3418,
            "vuln_id":"GHSA-xfhh-g9f5-x4m4",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/socketio\/socket.io-parser\/commit\/dcb942d24db97162ad16a67c2a0cf30875342d55'}",
            "dataset":"osv",
            "summary":"Resource exhaustion in socket.io-parser The `socket.io-parser` npm package before versions 3.3.2 and 3.4.1 allows attackers to cause a denial of service (memory consumption) via a large packet because a concatenation approach is used.",
            "published_date":"2021-06-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/socketio\/socket.io-parser",
            "commit_href":"https:\/\/github.com\/socketio\/socket.io-parser\/commit\/dcb942d24db97162ad16a67c2a0cf30875342d55",
            "commit_sha":"dcb942d24db97162ad16a67c2a0cf30875342d55",
            "patch":"SINGLE",
            "chain_ord":"['dcb942d24db97162ad16a67c2a0cf30875342d55']",
            "before_first_fix_commit":"{'a5d04354e6e98b5318d5276123b0b5a5e698bf8e'}",
            "last_fix_commit":"dcb942d24db97162ad16a67c2a0cf30875342d55",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/13\/2020, 05:37:32",
            "message":"fix: prevent DoS (OOM) via massive packets (#95)\n\nWhen maxHttpBufferSize is large (1e8 bytes), a payload of length 100MB\r\ncan be sent like so:\r\n\r\n99999991:422222222222222222222222222222222222222222222...\r\n\r\nThis massive packet can cause OOM via building up many many\r\n`ConsOneByteString` objects due to concatenation:\r\n99999989 `ConsOneByteString`s and then converting the massive integer to\r\na `Number`.\r\n\r\nThe performance can be improved to avoid this by using `substring`\r\nrather than building the string via concatenation.\r\n\r\nBelow I tried one payload of length 7e7 as the 1e8 payload took so\r\nlong to process that it timed out before running out of memory.\r\n\r\n```\r\n==== JS stack trace =========================================\r\n\r\n    0: ExitFrame [pc: 0x13c5b79]\r\nSecurity context: 0x152fe7b808d1 <JSObject>\r\n    1: decodeString [0x2dd385fb5d1] [\/node_modules\/socket.io-parser\/index.js:~276] [pc=0xf59746881be](this=0x175d34c42b69 <JSGlobal Object>,0x14eccff10fe1 <Very long string[69999990]>)\r\n    2: add [0x31fc2693da29] [\/node_modules\/socket.io-parser\/index.js:242] [bytecode=0xa7ed6554889 offset=11](this=0x0a2881be5069 <Decoder map = 0x3ceaa8bf48c9>,0x14eccff10fe1 <Very...\r\n\r\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 0xa09830 node::Abort() [node]\r\n 2: 0xa09c55 node::OnFatalError(char const*, char const*) [node]\r\n 3: 0xb7d71e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [node]\r\n 4: 0xb7da99 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [node]\r\n 5: 0xd2a1f5  [node]\r\n 6: 0xd2a886 v8::internal::Heap::RecomputeLimits(v8::internal::GarbageCollector) [node]\r\n 7: 0xd37105 v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [node]\r\n 8: 0xd37fb5 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]\r\n 9: 0xd3965f v8::internal::Heap::HandleGCRequest() [node]\r\n10: 0xce8395 v8::internal::StackGuard::HandleInterrupts() [node]\r\n11: 0x1042cb6 v8::internal::Runtime_StackGuard(int, unsigned long*, v8::internal::Isolate*) [node]\r\n12: 0x13c5b79  [node]\r\n```",
            "author":"bcaller",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '01\/08\/2021, 09:15:14', 'body': '[CVE-2020-36049](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-36049) was assigned to this commit.'}}",
            "stats":"{'additions': 7, 'deletions': 10, 'total': 17}",
            "files":"{'index.js': {'additions': 7, 'deletions': 10, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/socketio\/socket.io-parser\/raw\/dcb942d24db97162ad16a67c2a0cf30875342d55\/index.js', 'patch': \"@@ -286,11 +286,9 @@ function decodeString(str) {\\n \\n   \/\/ look up attachments if type binary\\n   if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\\n-    var buf = '';\\n-    while (str.charAt(++i) !== '-') {\\n-      buf += str.charAt(i);\\n-      if (i == str.length) break;\\n-    }\\n+    var start = i + 1;\\n+    while (str.charAt(++i) !== '-' && i != str.length) {}\\n+    var buf = str.substring(start, i);\\n     if (buf != Number(buf) || str.charAt(i) !== '-') {\\n       throw new Error('Illegal attachments');\\n     }\\n@@ -299,31 +297,30 @@ function decodeString(str) {\\n \\n   \/\/ look up namespace (if any)\\n   if ('\/' === str.charAt(i + 1)) {\\n-    p.nsp = '';\\n+    var start = i + 1;\\n     while (++i) {\\n       var c = str.charAt(i);\\n       if (',' === c) break;\\n-      p.nsp += c;\\n       if (i === str.length) break;\\n     }\\n+    p.nsp = str.substring(start, i);\\n   } else {\\n     p.nsp = '\/';\\n   }\\n \\n   \/\/ look up id\\n   var next = str.charAt(i + 1);\\n   if ('' !== next && Number(next) == next) {\\n-    p.id = '';\\n+    var start = i + 1;\\n     while (++i) {\\n       var c = str.charAt(i);\\n       if (null == c || Number(c) != c) {\\n         --i;\\n         break;\\n       }\\n-      p.id += str.charAt(i);\\n       if (i === str.length) break;\\n     }\\n-    p.id = Number(p.id);\\n+    p.id = Number(str.substring(start, i + 1));\\n   }\\n \\n   \/\/ look up json data\"}}",
            "message_norm":"fix: prevent dos (oom) via massive packets (#95)\n\nwhen maxhttpbuffersize is large (1e8 bytes), a payload of length 100mb\r\ncan be sent like so:\r\n\r\n99999991:422222222222222222222222222222222222222222222...\r\n\r\nthis massive packet can cause oom via building up many many\r\n`consonebytestring` objects due to concatenation:\r\n99999989 `consonebytestring`s and then converting the massive integer to\r\na `number`.\r\n\r\nthe performance can be improved to avoid this by using `substring`\r\nrather than building the string via concatenation.\r\n\r\nbelow i tried one payload of length 7e7 as the 1e8 payload took so\r\nlong to process that it timed out before running out of memory.\r\n\r\n```\r\n==== js stack trace =========================================\r\n\r\n    0: exitframe [pc: 0x13c5b79]\r\nsecurity context: 0x152fe7b808d1 <jsobject>\r\n    1: decodestring [0x2dd385fb5d1] [\/node_modules\/socket.io-parser\/index.js:~276] [pc=0xf59746881be](this=0x175d34c42b69 <jsglobal object>,0x14eccff10fe1 <very long string[69999990]>)\r\n    2: add [0x31fc2693da29] [\/node_modules\/socket.io-parser\/index.js:242] [bytecode=0xa7ed6554889 offset=11](this=0x0a2881be5069 <decoder map = 0x3ceaa8bf48c9>,0x14eccff10fe1 <very...\r\n\r\nfatal error: ineffective mark-compacts near heap limit allocation failed - javascript heap out of memory\r\n 1: 0xa09830 node::abort() [node]\r\n 2: 0xa09c55 node::onfatalerror(char const*, char const*) [node]\r\n 3: 0xb7d71e v8::utils::reportoomfailure(v8::internal::isolate*, char const*, bool) [node]\r\n 4: 0xb7da99 v8::internal::v8::fatalprocessoutofmemory(v8::internal::isolate*, char const*, bool) [node]\r\n 5: 0xd2a1f5  [node]\r\n 6: 0xd2a886 v8::internal::heap::recomputelimits(v8::internal::garbagecollector) [node]\r\n 7: 0xd37105 v8::internal::heap::performgarbagecollection(v8::internal::garbagecollector, v8::gccallbackflags) [node]\r\n 8: 0xd37fb5 v8::internal::heap::collectgarbage(v8::internal::allocationspace, v8::internal::garbagecollectionreason, v8::gccallbackflags) [node]\r\n 9: 0xd3965f v8::internal::heap::handlegcrequest() [node]\r\n10: 0xce8395 v8::internal::stackguard::handleinterrupts() [node]\r\n11: 0x1042cb6 v8::internal::runtime_stackguard(int, unsigned long*, v8::internal::isolate*) [node]\r\n12: 0x13c5b79  [node]\r\n```",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('dos', 'SECWORD', ''), ('#95', 'ISSUE', ''), ('99999989', 'SHA', 'generic_sha'), ('improved', 'ACTION', ''), ('out of memory', 'SECWORD', ''), ('security', 'SECWORD', ''), ('decodestring', 'SECWORD', ''), ('add', 'ACTION', ''), ('decoder', 'SECWORD', ''), ('error', 'FLAW', ''), ('out of memory', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1936,
            "vuln_id":"GHSA-gv3v-92v6-m48j",
            "cwe_id":"{'CWE-444'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/jooby-project\/jooby\/commit\/b66e3342cf95205324023cfdf2cb5811e8a6dcf4'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of CRLF Sequences in HTTP Headers in Jooby ('HTTP Response Splitting) ### Impact\n\n - Cross Site Scripting\n - Cache Poisoning\n - Page Hijacking\n\n### Patches\n\nThis was fixed in version `2.2.1`.\n\n### Workarounds\n\nIf you are unable to update, ensure that user supplied data isn't able to flow to HTTP headers. If it does, pre-sanitize for CRLF characters.\n\n### References\n\n##### [CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https:\/\/cwe.mitre.org\/data\/definitions\/113.html)\n\nI've been poking at libraries to see if they are vulnerable to HTTP Response Splitting and Jooby is my third case of finding this vulnerability.\n\n### Root Cause\n\nThis roots cause back to this line in the Jooby codebase:\n\nhttps:\/\/github.com\/jooby-project\/jooby\/blob\/93cfc80aa20c188f71a442ea7a1827da380e1c27\/modules\/jooby-netty\/src\/main\/java\/io\/jooby\/internal\/netty\/NettyContext.java#L102\n\nThe `DefaultHttpHeaders` takes a parameter `validate` which, when `true` (as it is for the no-arg constructor) validates that the header isn't being abused to do HTTP Response Splitting.\n\n### Reported By\n\nThis vulnerability was reported by @JLLeitschuh ([Twitter](https:\/\/twitter.com\/JLLeitschuh))\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [jooby-project\/jooby](https:\/\/github.com\/jooby-project\/jooby\/issues)",
            "published_date":"2020-04-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/jooby-project\/jooby",
            "commit_href":"https:\/\/github.com\/jooby-project\/jooby\/commit\/b66e3342cf95205324023cfdf2cb5811e8a6dcf4",
            "commit_sha":"b66e3342cf95205324023cfdf2cb5811e8a6dcf4",
            "patch":"SINGLE",
            "chain_ord":"['b66e3342cf95205324023cfdf2cb5811e8a6dcf4']",
            "before_first_fix_commit":"{'d5708760bdd27f8f6e1dbbbabbda4379fd5ba926'}",
            "last_fix_commit":"b66e3342cf95205324023cfdf2cb5811e8a6dcf4",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/12\/2019, 13:30:52",
            "message":"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting fix #GHSA-gv3v-92v6-m48j",
            "author":"Edgar Espina",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'modules\/jooby-netty\/src\/main\/java\/io\/jooby\/internal\/netty\/NettyContext.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jooby-project\/jooby\/raw\/b66e3342cf95205324023cfdf2cb5811e8a6dcf4\/modules%2Fjooby-netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fjooby%2Finternal%2Fnetty%2FNettyContext.java', 'patch': '@@ -99,7 +99,7 @@\\n public class NettyContext implements DefaultContext, ChannelFutureListener {\\n \\n   private static final HttpHeaders NO_TRAILING = EmptyHttpHeaders.INSTANCE;\\n-  final DefaultHttpHeaders setHeaders = new DefaultHttpHeaders(false);\\n+  final DefaultHttpHeaders setHeaders = new DefaultHttpHeaders(true);\\n   private final int bufferSize;\\n   InterfaceHttpPostRequestDecoder decoder;\\n   private Router router;'}}",
            "message_norm":"cwe-113: improper neutralization of crlf sequences in http headers ('http response splitting fix #ghsa-gv3v-92v6-m48j",
            "language":"en",
            "entities":"[('cwe-113', 'CWEID', ''), ('improper neutralization', 'SECWORD', ''), ('http response splitting', 'SECWORD', ''), ('ghsa-gv3v-92v6-m48j', 'VULNID', 'GHSA')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/jooby-netty\/src\/main\/java\/io\/jooby\/internal\/netty\/NettyContext.java'])",
            "num_files":1.0
        }
    ]
}