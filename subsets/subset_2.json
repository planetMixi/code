{
  "schema": {
    "fields": [
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "vuln_id",
        "type": "string"
      },
      {
        "name": "cwe_id",
        "type": "string"
      },
      {
        "name": "score",
        "type": "number"
      },
      {
        "name": "chain",
        "type": "string"
      },
      {
        "name": "dataset",
        "type": "string"
      },
      {
        "name": "summary",
        "type": "string"
      },
      {
        "name": "published_date",
        "type": "string"
      },
      {
        "name": "chain_len",
        "type": "integer"
      },
      {
        "name": "project",
        "type": "string"
      },
      {
        "name": "commit_href",
        "type": "string"
      },
      {
        "name": "commit_sha",
        "type": "string"
      },
      {
        "name": "patch",
        "type": "string"
      },
      {
        "name": "chain_ord",
        "type": "string"
      },
      {
        "name": "before_first_fix_commit",
        "type": "string"
      },
      {
        "name": "last_fix_commit",
        "type": "string"
      },
      {
        "name": "chain_ord_pos",
        "type": "number"
      },
      {
        "name": "commit_datetime",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      },
      {
        "name": "author",
        "type": "string"
      },
      {
        "name": "comments",
        "type": "string"
      },
      {
        "name": "stats",
        "type": "string"
      },
      {
        "name": "files",
        "type": "string"
      },
      {
        "name": "message_norm",
        "type": "string"
      },
      {
        "name": "language",
        "type": "string"
      },
      {
        "name": "entities",
        "type": "string"
      },
      {
        "name": "classification_level_1",
        "type": "string"
      },
      {
        "name": "classification_level_2",
        "type": "string"
      },
      {
        "name": "list_files",
        "type": "string"
      },
      {
        "name": "num_files",
        "type": "number"
      }
    ],
    "primaryKey": [
      "index"
    ],
    "pandas_version": "1.4.0"
  },
  "data": [
    {
      "index": 3211,
      "vuln_id": "GHSA-w3v3-cxq5-9vr4",
      "cwe_id": "{'CWE-276', 'CWE-284'}",
      "score": 6.3,
      "chain": "{'https://github.com/snipe/snipe-it/commit/cf14a0222c67472086cd08b2155f045edaf75f2e'}",
      "dataset": "osv",
      "summary": "Incorrect Default Permissions and Improper Access Control in snipe-it snipe-it is vulnerable to Improper Access Control/Incorrect Default Permissions.",
      "published_date": "2022-01-21",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/cf14a0222c67472086cd08b2155f045edaf75f2e",
      "commit_sha": "cf14a0222c67472086cd08b2155f045edaf75f2e",
      "patch": "SINGLE",
      "chain_ord": "['cf14a0222c67472086cd08b2155f045edaf75f2e']",
      "before_first_fix_commit": "{'b78e610ce3b4295fb4c56659976a5d5d26eeb6da', 'bb095641c2f421f744796d184287c46fc9303591'}",
      "last_fix_commit": "cf14a0222c67472086cd08b2155f045edaf75f2e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/11/2022, 03:24:31",
      "message": "Merge pull request #10498 from Haxatron/master\n\nFix access control",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 2, 'total': 8}",
      "files": "{'app/Http/Controllers/BulkAssetModelsController.php': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/cf14a0222c67472086cd08b2155f045edaf75f2e/app%2FHttp%2FControllers%2FBulkAssetModelsController.php', 'patch': \"@@ -32,6 +32,7 @@ public function edit(Request $request)\\n \\n             // If deleting....\\n             if ($request->input('bulk_actions')=='delete') {\\n+                $this->authorize('delete', AssetModel::class);\\n                 $valid_count = 0;\\n                 foreach ($models as $model) {\\n                     if ($model->assets_count == 0) {\\n@@ -42,7 +43,7 @@ public function edit(Request $request)\\n \\n             // Otherwise display the bulk edit screen\\n             }\\n-\\n+            $this->authorize('update', AssetModel::class);\\n             $nochange = ['NC' => 'No Change'];\\n             return view('models/bulk-edit', compact('models'))\\n                 ->with('fieldset_list', $nochange + Helper::customFieldsetList())\\n@@ -63,7 +64,8 @@ public function edit(Request $request)\\n      */\\n     public function update(Request $request)\\n     {\\n-\\n+        $this->authorize('update', AssetModel::class);\\n+      \\n         $models_raw_array = $request->input('ids');\\n         $update_array = array();\\n \\n@@ -103,6 +105,8 @@ public function update(Request $request)\\n      */\\n     public function destroy(Request $request)\\n     {\\n+        $this->authorize('delete', AssetModel::class);\\n+      \\n         $models_raw_array = $request->input('ids');\\n \\n         if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\"}}",
      "message_norm": "merge pull request #10498 from haxatron/master\n\nfix access control",
      "language": "en",
      "entities": "[('#10498', 'ISSUE', ''), ('access control', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/BulkAssetModelsController.php'])",
      "num_files": 1.0
    },
    {
      "index": 831,
      "vuln_id": "GHSA-6g85-3hm8-83f9",
      "cwe_id": "{'CWE-754'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/20431e9044cf2ad3c0323c34888b192f3289af6b'}",
      "dataset": "osv",
      "summary": "CHECK-fail in `QuantizeAndDequantizeV4Grad` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.QuantizeAndDequantizeV4Grad`:\n\n```python\nimport tensorflow as tf\n\ngradient_tensor = tf.constant([0.0], shape=[1])\ninput_tensor = tf.constant([0.0], shape=[1])\ninput_min = tf.constant([[0.0]], shape=[1, 1])\ninput_max = tf.constant([[0.0]], shape=[1, 1])\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=gradient_tensor, input=input_tensor,\n  input_min=input_min, input_max=input_max, axis=0)\n```                     \n                        \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the `input_*` tensors. In turn, this results in the tensors being passes as they are to [`QuantizeAndDequantizePerChannelGradientImpl`](https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306):\n\n```cc \ntemplate <typename Device, typename T>\nstruct QuantizeAndDequantizePerChannelGradientImpl {\n  static void Compute(const Device& d,\n                      typename TTypes<T, 3>::ConstTensor gradient,\n                      typename TTypes<T, 3>::ConstTensor input,\n                      const Tensor* input_min_tensor,\n                      const Tensor* input_max_tensor,\n                      typename TTypes<T, 3>::Tensor input_backprop,\n                      typename TTypes<T>::Flat input_min_backprop,\n                      typename TTypes<T>::Flat input_max_backprop) {\n    ...\n    auto input_min = input_min_tensor->vec<T>();\n    auto input_max = input_max_tensor->vec<T>();\n    ...\n}\n```\n\nHowever, the `vec<T>` method, requires the rank to 1 and triggers a `CHECK` failure otherwise.\n\n### Patches\nWe have patched the issue in GitHub commit [20431e9044cf2ad3c0323c34888b192f3289af6b](https://github.com/tensorflow/tensorflow/commit/20431e9044cf2ad3c0323c34888b192f3289af6b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 as this is the only other affected version.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/20431e9044cf2ad3c0323c34888b192f3289af6b",
      "commit_sha": "20431e9044cf2ad3c0323c34888b192f3289af6b",
      "patch": "SINGLE",
      "chain_ord": "['20431e9044cf2ad3c0323c34888b192f3289af6b']",
      "before_first_fix_commit": "{'95078c145b5a7a43ee046144005f733092756ab5'}",
      "last_fix_commit": "20431e9044cf2ad3c0323c34888b192f3289af6b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/26/2021, 20:43:59",
      "message": "Fix `tf.raw_ops.QuantizeAndDequantizeV4Grad` CHECK failure.\n\nPiperOrigin-RevId: 370532425\nChange-Id: I767721be266851b63d8fe55e7ac6be0af6017f6c",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 0, 'total': 10}",
      "files": "{'tensorflow/core/kernels/quantize_and_dequantize_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/20431e9044cf2ad3c0323c34888b192f3289af6b/tensorflow%2Fcore%2Fkernels%2Fquantize_and_dequantize_op.cc', 'patch': '@@ -160,7 +160,17 @@ class QuantizeAndDequantizeV4GradientOp : public OpKernel {\\n         errors::InvalidArgument(\"gradient and input must be the same size\"));\\n     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\\n     const Tensor& input_min_tensor = ctx->input(2);\\n+    OP_REQUIRES(ctx,\\n+                input_min_tensor.dims() == 0 || input_min_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input min tensor must have dimension 1. Recieved \",\\n+                    input_min_tensor.dims(), \".\"));\\n     const Tensor& input_max_tensor = ctx->input(3);\\n+    OP_REQUIRES(ctx,\\n+                input_max_tensor.dims() == 0 || input_max_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input max tensor must have dimension 1. Recieved \",\\n+                    input_max_tensor.dims(), \".\"));\\n     if (axis_ != -1) {\\n       OP_REQUIRES(\\n           ctx, input_min_tensor.dim_size(0) == depth,'}}",
      "message_norm": "fix `tf.raw_ops.quantizeanddequantizev4grad` check failure.\n\npiperorigin-revid: 370532425\nchange-id: i767721be266851b63d8fe55e7ac6be0af6017f6c",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('370532425', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/quantize_and_dequantize_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 93,
      "vuln_id": "GHSA-2gw2-8q9w-cw8p",
      "cwe_id": "{'CWE-426'}",
      "score": 7.8,
      "chain": "{'https://github.com/ffi/ffi/commit/e0fe486df0e117ed67b0282b6ada04b7214ca05c', 'https://github.com/ffi/ffi/commit/09e0c6076466b4383da7fa4e13f714311109945a'}",
      "dataset": "osv",
      "summary": "Ruby-ffi has a DLL loading issue  ruby-ffi version 1.9.23 and earlier has a DLL loading issue which can be hijacked on Windows OS, when a Symbol is used as DLL name instead of a String This vulnerability appears to have been fixed in v1.9.24 and later.",
      "published_date": "2018-08-31",
      "chain_len": 2,
      "project": "https://github.com/ffi/ffi",
      "commit_href": "https://github.com/ffi/ffi/commit/09e0c6076466b4383da7fa4e13f714311109945a",
      "commit_sha": "09e0c6076466b4383da7fa4e13f714311109945a",
      "patch": "MULTI",
      "chain_ord": "['e0fe486df0e117ed67b0282b6ada04b7214ca05c', '09e0c6076466b4383da7fa4e13f714311109945a']",
      "before_first_fix_commit": "{'e0fe486df0e117ed67b0282b6ada04b7214ca05c'}",
      "last_fix_commit": "09e0c6076466b4383da7fa4e13f714311109945a",
      "chain_ord_pos": 2.0,
      "commit_datetime": "06/01/2018, 20:31:40",
      "message": "Don't search in hardcoded paths on Windows\n\nNative Windows apps don't use \"/usr\" path to store system dlls.\nIt's even more harm than good to search through these directories,\nsince they are used in Cygwin and it can lead to accidentaly loading\nCygwin DLLs into native Windows apps.\n\nHardcoded paths are disabled for MINGW and MSWIN environments only.\nThey are still present on Cygwin and MSYS2, because these POSIX-API\nbased environments don't use LoadLibrary() but dl_open() to load DLLs.",
      "author": "Lars Kanis",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/ffi/library.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/ffi/ffi/raw/09e0c6076466b4383da7fa4e13f714311109945a/lib%2Fffi%2Flibrary.rb', 'patch': '@@ -125,7 +125,7 @@ def ffi_lib(*names)\\n                 retry\\n               else\\n                 # TODO better library lookup logic\\n-                unless libname.start_with?(\"/\")\\n+                unless libname.start_with?(\"/\") || FFI::Platform.windows?\\n                   path = [\\'/usr/lib/\\',\\'/usr/local/lib/\\'].find do |pth|\\n                     File.exist?(pth + libname)\\n                   end'}}",
      "message_norm": "don't search in hardcoded paths on windows\n\nnative windows apps don't use \"/usr\" path to store system dlls.\nit's even more harm than good to search through these directories,\nsince they are used in cygwin and it can lead to accidentaly loading\ncygwin dlls into native windows apps.\n\nhardcoded paths are disabled for mingw and mswin environments only.\nthey are still present on cygwin and msys2, because these posix-api\nbased environments don't use loadlibrary() but dl_open() to load dlls.",
      "language": "en",
      "entities": "[('hardcoded', 'SECWORD', ''), ('hardcoded', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/ffi/library.rb'])",
      "num_files": 1.0
    },
    {
      "index": 3328,
      "vuln_id": "GHSA-ww4x-rwq6-qpgf",
      "cwe_id": "{'CWE-352'}",
      "score": 0.0,
      "chain": "{'https://github.com/rubysec/ruby-advisory-db/commit/aef9f623c0be838234d53baf18977564804da397'}",
      "dataset": "osv",
      "summary": "Cross-site Request Forgery in OmniAuth The request phase of the OmniAuth Ruby gem (1.9.1 and earlier) is vulnerable to Cross-Site Request Forgery when used as part of the Ruby on Rails framework, allowing accounts to be connected without user intent, user interaction, or feedback to the user. This permits a secondary account to be able to sign into the web application as the primary account.\n\nAs of v2 OmniAuth no longer has the vulnerable configuration by default, but it is still possible to configure OmniAuth in such a way that the web application becomes vulnerable to Cross-Site Request Forgery. There is a recommended remediation described [here](https://github.com/omniauth/omniauth/wiki/Resolving-CVE-2015-9284).",
      "published_date": "2019-05-29",
      "chain_len": 1,
      "project": "https://github.com/rubysec/ruby-advisory-db",
      "commit_href": "https://github.com/rubysec/ruby-advisory-db/commit/aef9f623c0be838234d53baf18977564804da397",
      "commit_sha": "aef9f623c0be838234d53baf18977564804da397",
      "patch": "SINGLE",
      "chain_ord": "['aef9f623c0be838234d53baf18977564804da397']",
      "before_first_fix_commit": "{'f05618a2eac8817b13e31f15940fe32c5d4ff6b6'}",
      "last_fix_commit": "aef9f623c0be838234d53baf18977564804da397",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/11/2021, 22:02:34",
      "message": "Add v2.0.0 as a patched version for CVE-2015-9284\n\nhttps://github.com/omniauth/omniauth/releases/tag/v2.0.0",
      "author": "Reed Loden",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'gems/omniauth/CVE-2015-9284.yml': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/rubysec/ruby-advisory-db/raw/aef9f623c0be838234d53baf18977564804da397/gems%2Fomniauth%2FCVE-2015-9284.yml', 'patch': '@@ -20,6 +20,9 @@ description: |\\n cvss_v2: 6.8\\n cvss_v3: 8.8\\n \\n+patched_versions:\\n+  - \">= 2.0.0\"\\n+\\n related:\\n   url:\\n     - https://github.com/omniauth/omniauth/pull/809'}}",
      "message_norm": "add v2.0.0 as a patched version for cve-2015-9284\n\nhttps://github.com/omniauth/omniauth/releases/tag/v2.0.0",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('v2.0.0', 'VERSION', ''), ('patched', 'ACTION', ''), ('cve-2015-9284', 'VULNID', 'CVE'), ('https://github.com/omniauth/omniauth/releases/tag/v2.0.0', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['gems/omniauth/CVE-2015-9284.yml'])",
      "num_files": 1.0
    },
    {
      "index": 2945,
      "vuln_id": "GHSA-rgvq-pcvf-hx75",
      "cwe_id": "{'CWE-131'}",
      "score": 5.3,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/f94ef358bb3e91d517446454edff6535bcfe8e4a', 'https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6', 'https://github.com/tensorflow/tensorflow/commit/b761c9b652af2107cfbc33efd19be0ce41daa33e'}",
      "dataset": "osv",
      "summary": "Heap OOB and null pointer dereference in `RaggedTensorToTensor` ### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https://github.com/tensorflow/tensorflow/commit/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https://github.com/tensorflow/tensorflow/commit/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 3,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6",
      "commit_sha": "c4d7afb6a5986b04505aca4466ae1951686c80f6",
      "patch": "MULTI",
      "chain_ord": "['f94ef358bb3e91d517446454edff6535bcfe8e4a', 'b761c9b652af2107cfbc33efd19be0ce41daa33e', 'c4d7afb6a5986b04505aca4466ae1951686c80f6']",
      "before_first_fix_commit": "{'50034ad2d55b10eb9d4593374546710b12f134e1'}",
      "last_fix_commit": "c4d7afb6a5986b04505aca4466ae1951686c80f6",
      "chain_ord_pos": 3.0,
      "commit_datetime": "05/11/2021, 22:22:49",
      "message": "Fix heap OOB / undefined behavior in `RaggedTensorToTensor`\n\nPiperOrigin-RevId: 373244623\nChange-Id: I2d6cbbc8c67b238a8815bf58097f7586d87c54f2",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 35, 'deletions': 20, 'total': 55}",
      "files": "{'tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc': {'additions': 35, 'deletions': 20, 'changes': 55, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c4d7afb6a5986b04505aca4466ae1951686c80f6/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_tensor_op.cc', 'patch': '@@ -207,8 +207,8 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n     DCHECK_EQ(result->size(), first_dimension);\\n   }\\n \\n-  void CalculateOutputIndexRowSplit(\\n-      OpKernelContext* context, const RowPartitionTensor& row_split,\\n+  Status CalculateOutputIndexRowSplit(\\n+      const RowPartitionTensor& row_split,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n@@ -232,10 +232,11 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n         result->push_back(-1);\\n       }\\n     }\\n-    if (row_split_size > 0) {\\n-      OP_REQUIRES(context, result->size() == row_split(row_split_size - 1),\\n-                  errors::InvalidArgument(\"Invalid row split size.\"));\\n+    if (row_split_size > 0 && result->size() != row_split(row_split_size - 1)) {\\n+      return errors::InvalidArgument(\"Invalid row split size.\");\\n     }\\n+\\n+    return Status::OK();\\n   }\\n \\n   // Calculate the output index of the first element of a list.\\n@@ -259,20 +260,26 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n   // result[6] = -1 because parent_output_index[value_rowids[6]] == -1\\n   // result[7] = -1 because parent_output_index[value_rowids[6]] == -1\\n   // result[8] = parent_output_index[value_rowids[7]]\\n-  void CalculateOutputIndexValueRowID(\\n-      OpKernelContext* context, const RowPartitionTensor& value_rowids,\\n+  Status CalculateOutputIndexValueRowID(\\n+      const RowPartitionTensor& value_rowids,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n     const INDEX_TYPE index_size = value_rowids.size();\\n     result->reserve(index_size);\\n     if (index_size == 0) {\\n-      return;\\n+      return Status::OK();\\n     }\\n \\n     INDEX_TYPE current_output_column = 0;\\n     INDEX_TYPE current_value_rowid = value_rowids(0);\\n-    DCHECK_LT(current_value_rowid, parent_output_index.size());\\n+\\n+    if (current_value_rowid >= parent_output_index.size()) {\\n+      return errors::InvalidArgument(\\n+          \"Got current_value_rowid=\", current_value_rowid,\\n+          \" which is not less than \", parent_output_index.size());\\n+    }\\n+\\n     INDEX_TYPE current_output_index = parent_output_index[current_value_rowid];\\n     result->push_back(current_output_index);\\n     for (INDEX_TYPE i = 1; i < index_size; ++i) {\\n@@ -289,13 +296,23 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n       } else {\\n         current_output_column = 0;\\n         current_value_rowid = next_value_rowid;\\n-        DCHECK_LT(next_value_rowid, parent_output_index.size());\\n+\\n+        if (next_value_rowid >= parent_output_index.size()) {\\n+          return errors::InvalidArgument(\\n+              \"Got next_value_rowid=\", next_value_rowid,\\n+              \" which is not less than \", parent_output_index.size());\\n+        }\\n+\\n         current_output_index = parent_output_index[next_value_rowid];\\n       }\\n       result->push_back(current_output_index);\\n     }\\n-    OP_REQUIRES(context, result->size() == value_rowids.size(),\\n-                errors::InvalidArgument(\"Invalid row ids.\"));\\n+\\n+    if (result->size() != value_rowids.size()) {\\n+      return errors::InvalidArgument(\"Invalid row ids.\");\\n+    }\\n+\\n+    return Status::OK();\\n   }\\n \\n   Status CalculateOutputIndex(OpKernelContext* context, int dimension,\\n@@ -308,21 +325,19 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n     auto partition_type = GetRowPartitionTypeByDimension(dimension);\\n     switch (partition_type) {\\n       case RowPartitionType::VALUE_ROWIDS:\\n-        CalculateOutputIndexValueRowID(\\n-            context, row_partition_tensor, parent_output_index,\\n-            output_index_multiplier, output_size, result);\\n-        return tensorflow::Status::OK();\\n+        return CalculateOutputIndexValueRowID(\\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\\n+            output_size, result);\\n       case RowPartitionType::ROW_SPLITS:\\n         if (row_partition_tensor.size() - 1 > parent_output_index.size()) {\\n           return errors::InvalidArgument(\\n               \"Row partition size is greater than output size: \",\\n               row_partition_tensor.size() - 1, \" > \",\\n               parent_output_index.size());\\n         }\\n-        CalculateOutputIndexRowSplit(\\n-            context, row_partition_tensor, parent_output_index,\\n-            output_index_multiplier, output_size, result);\\n-        return tensorflow::Status::OK();\\n+        return CalculateOutputIndexRowSplit(\\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\\n+            output_size, result);\\n       default:\\n         return errors::InvalidArgument(\\n             \"Unsupported partition type:\",'}}",
      "message_norm": "fix heap oob / undefined behavior in `raggedtensortotensor`\n\npiperorigin-revid: 373244623\nchange-id: i2d6cbbc8c67b238a8815bf58097f7586d87c54f2",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('373244623', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2588,
      "vuln_id": "GHSA-ph87-fvjr-v33w",
      "cwe_id": "{'CWE-617'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1'}",
      "dataset": "osv",
      "summary": "CHECK-fail in `tf.raw_ops.RFFT` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`:\n    \n```python\nimport tensorflow as tf\n\ninputs = tf.constant([1], shape=[1], dtype=tf.float32)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.RFFT(input=inputs, fft_length=fft_length)\n```\n\nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n    \n### Patches\nWe have patched the issue in GitHub commit [31bd5026304677faa8a0b77602c6154171b9aec1](https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1",
      "commit_sha": "31bd5026304677faa8a0b77602c6154171b9aec1",
      "patch": "SINGLE",
      "chain_ord": "['31bd5026304677faa8a0b77602c6154171b9aec1']",
      "before_first_fix_commit": "{'1c56f53be0b722ca657cbc7df461ed676c8642a2'}",
      "last_fix_commit": "31bd5026304677faa8a0b77602c6154171b9aec1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 00:42:54",
      "message": "Prevent check fail in FFT\n\nPiperOrigin-RevId: 372031044\nChange-Id: I50994e3e8a5d1342d01bde80256f6bf2730ca299",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/kernels/fft_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow%2Fcore%2Fkernels%2Ffft_ops.cc', 'patch': '@@ -222,6 +222,9 @@ class FFTCPU : public FFTBase {\\n       input_slice_sizes[i] = fft_shape[i - 1];\\n       temp_shape.AddDim(fft_shape[i - 1]);\\n     }\\n+    OP_REQUIRES(ctx, temp_shape.num_elements() > 0,\\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\\n+                                        temp_shape.DebugString()));\\n \\n     auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();\\n     const Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> zero_start_indices;'}}",
      "message_norm": "prevent check fail in fft\n\npiperorigin-revid: 372031044\nchange-id: i50994e3e8a5d1342d01bde80256f6bf2730ca299",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('372031044', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/fft_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2598,
      "vuln_id": "GHSA-pjxv-w3qj-j8m3",
      "cwe_id": "{'CWE-22'}",
      "score": 7.5,
      "chain": "{'https://github.com/mguinness/elFinder.AspNet/commit/675049b39284a9e84f0915c71d688da8ebc7d720'}",
      "dataset": "osv",
      "summary": "Directory Traversal in elFinder.AspNet This affects the package elFinder.AspNet before 1.1.1.\n The user-controlled file name is not properly sanitized before it is used to create a file system path.",
      "published_date": "2021-08-09",
      "chain_len": 1,
      "project": "https://github.com/mguinness/elFinder.AspNet",
      "commit_href": "https://github.com/mguinness/elFinder.AspNet/commit/675049b39284a9e84f0915c71d688da8ebc7d720",
      "commit_sha": "675049b39284a9e84f0915c71d688da8ebc7d720",
      "patch": "SINGLE",
      "chain_ord": "['675049b39284a9e84f0915c71d688da8ebc7d720']",
      "before_first_fix_commit": "{'8f2690712bd6cf417d897d70f734d6e972cf0071'}",
      "last_fix_commit": "675049b39284a9e84f0915c71d688da8ebc7d720",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/10/2021, 01:28:34",
      "message": "Directory traversal fixes",
      "author": "mguinness",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 0, 'total': 16}",
      "files": "{'elFinder.AspNet/Drivers/FileSystem/FileSystemDriver.cs': {'additions': 16, 'deletions': 0, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/mguinness/elFinder.AspNet/raw/675049b39284a9e84f0915c71d688da8ebc7d720/elFinder.AspNet%2FDrivers%2FFileSystem%2FFileSystemDriver.cs', 'patch': '@@ -229,6 +229,12 @@ public async Task<ConnectorResult> ExtractAsync(FullPath fullPath, bool newFolde\\n                         string file = Path.Combine(rootPath, entry.FullName)\\n                              .Replace(\"/\", separator).Replace(\"\\\\\\\\\", separator);\\n \\n+                        string destPath = Path.GetFullPath(file);\\n+                        if (!destPath.StartsWith(rootPath, StringComparison.OrdinalIgnoreCase))\\n+                        {\\n+                            throw new NotSupportedException($\"Entry \\'{entry.FullName}\\' is outside of the destination directory.\");\\n+                        }\\n+\\n                         if (file.EndsWith(separator)) //directory\\n                         {\\n                             var dir = new FileSystemDirectory(file);\\n@@ -636,12 +642,22 @@ public async Task<ConnectorResult> RenameAsync(FullPath path, string name)\\n             if (path.IsDirectory)\\n             {\\n                 var newPath = new FileSystemDirectory(Path.Combine(path.Directory.Parent.FullName, name));\\n+                string destPath = Path.GetFullPath(newPath.FullName);\\n+                if (!destPath.StartsWith(path.RootVolume.RootDirectory, StringComparison.OrdinalIgnoreCase))\\n+                {\\n+                    throw new NotSupportedException($\"Entry \\'{name}\\' is outside of the home directory.\");\\n+                }\\n                 Directory.Move(path.Directory.FullName, newPath.FullName);\\n                 response.Added.Add(await BaseModel.CreateAsync(newPath, path.RootVolume));\\n             }\\n             else\\n             {\\n                 var newPath = new FileSystemFile(Path.Combine(path.File.DirectoryName, name));\\n+                string destPath = Path.GetFullPath(newPath.FullName);\\n+                if (!destPath.StartsWith(path.RootVolume.RootDirectory, StringComparison.OrdinalIgnoreCase))\\n+                {\\n+                    throw new NotSupportedException($\"Entry \\'{name}\\' is outside of the home directory.\");\\n+                }\\n                 File.Move(path.File.FullName, newPath.FullName);\\n                 response.Added.Add(await BaseModel.CreateAsync(newPath, path.RootVolume));\\n             }'}}",
      "message_norm": "directory traversal fixes",
      "language": "ca",
      "entities": "[('directory traversal', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['elFinder.AspNet/Drivers/FileSystem/FileSystemDriver.cs'])",
      "num_files": 1.0
    },
    {
      "index": 2961,
      "vuln_id": "GHSA-rjmf-p882-645m",
      "cwe_id": "{'CWE-295'}",
      "score": 6.8,
      "chain": "{'https://github.com/mongodb/libmongocrypt/commit/76365515ff8754b9f705e56428dd0d7efa7f541b'}",
      "dataset": "osv",
      "summary": "Improper Certificate Validation A specific version of the Node.js mongodb-client-encryption module does not perform correct validation of the KMS server\u2019s certificate. This vulnerability in combination with a privileged network position active MITM attack could result in interception of traffic between the Node.js driver and the KMS service rendering client-side field level encryption (CSFLE) ineffective. This issue was discovered during internal testing and affects mongodb-client-encryption module version 1.2.0, which was available from 2021-Jan-29 and deprecated in the NPM Registry on 2021-Feb-04. This vulnerability does not impact driver traffic payloads with CSFLE-supported key services from applications residing inside the AWS, GCP, and Azure nework fabrics due to compensating controls in these environments. This issue does not impact driver workloads that don\u2019t use Field Level Encryption.",
      "published_date": "2021-04-12",
      "chain_len": 1,
      "project": "https://github.com/mongodb/libmongocrypt",
      "commit_href": "https://github.com/mongodb/libmongocrypt/commit/76365515ff8754b9f705e56428dd0d7efa7f541b",
      "commit_sha": "76365515ff8754b9f705e56428dd0d7efa7f541b",
      "patch": "SINGLE",
      "chain_ord": "['76365515ff8754b9f705e56428dd0d7efa7f541b']",
      "before_first_fix_commit": "{'30d8adc205bffcc9764e4e556a25146687183751'}",
      "last_fix_commit": "76365515ff8754b9f705e56428dd0d7efa7f541b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/05/2021, 23:37:36",
      "message": "fix: always authorize TLS endpoints, use servername for SNI (#159)\n\nTLS endpoints should always be authorized. \r\nIn order to properly communicate with GCP's KMS servers\r\nwe need to provide a `servername`, so the endpoint can serve the\r\ncorrect TLS certificate.",
      "author": "Matt Broadstone",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'bindings/node/lib/stateMachine.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/mongodb/libmongocrypt/raw/76365515ff8754b9f705e56428dd0d7efa7f541b/bindings%2Fnode%2Flib%2FstateMachine.js', 'patch': \"@@ -217,7 +217,7 @@ module.exports = function(modules) {\\n     kmsRequest(request) {\\n       const parsedUrl = request.endpoint.split(':');\\n       const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\\n-      const options = { host: parsedUrl[0], port, rejectUnauthorized: false };\\n+      const options = { host: parsedUrl[0], servername: parsedUrl[0], port };\\n       const message = request.message;\\n \\n       return new Promise((resolve, reject) => {\"}}",
      "message_norm": "fix: always authorize tls endpoints, use servername for sni (#159)\n\ntls endpoints should always be authorized. \r\nin order to properly communicate with gcp's kms servers\r\nwe need to provide a `servername`, so the endpoint can serve the\r\ncorrect tls certificate.",
      "language": "en",
      "entities": "[('tls', 'SECWORD', ''), ('servername', 'SECWORD', ''), ('#159', 'ISSUE', ''), ('tls', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('servername', 'SECWORD', ''), ('tls', 'SECWORD', ''), ('certificate', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bindings/node/lib/stateMachine.js'])",
      "num_files": 1.0
    },
    {
      "index": 1713,
      "vuln_id": "GHSA-fc38-mxwr-pfhx",
      "cwe_id": "{'CWE-79'}",
      "score": 8.0,
      "chain": "{'https://github.com/shopware/platform/commit/abe9f69e1f667800f974acccd3047b4930e4b423'}",
      "dataset": "osv",
      "summary": "Cross-Site Scripting via SVG media files ### Impact\nCross-Site Scripting via SVG media files\n\n### Patches\nWe recommend updating to the current version 6.4.3.1. You can get the update to 6.4.3.1 regularly via the Auto-Updater or directly via the download overview.\n\nhttps://www.shopware.com/en/download/#shopware-6\n\n### Workarounds\nFor older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.",
      "published_date": "2021-08-23",
      "chain_len": 1,
      "project": "https://github.com/shopware/platform",
      "commit_href": "https://github.com/shopware/platform/commit/abe9f69e1f667800f974acccd3047b4930e4b423",
      "commit_sha": "abe9f69e1f667800f974acccd3047b4930e4b423",
      "patch": "SINGLE",
      "chain_ord": "['abe9f69e1f667800f974acccd3047b4930e4b423']",
      "before_first_fix_commit": "{'912b96de3b839c6c5525c98cbb58f537c2d838be'}",
      "last_fix_commit": "abe9f69e1f667800f974acccd3047b4930e4b423",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/27/2021, 13:31:10",
      "message": "NEXT-15677 - Fix XSS for SVG files",
      "author": "Jonas Elfering",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'public/.htaccess.dist': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/shopware/platform/raw/abe9f69e1f667800f974acccd3047b4930e4b423/public%2F.htaccess.dist', 'patch': '@@ -36,7 +36,7 @@ DirectoryIndex index.php\\n </IfModule>\\n \\n <IfModule mod_headers.c>\\n-    <FilesMatch \"\\\\.svg$\">\\n+    <FilesMatch \"\\\\.(?i:svg)$\">\\n         Header set Content-Security-Policy \"script-src \\'none\\'\"\\n     </FilesMatch>\\n </IfModule>'}}",
      "message_norm": "next-15677 - fix xss for svg files",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['public/.htaccess.dist'])",
      "num_files": 1.0
    },
    {
      "index": 3258,
      "vuln_id": "GHSA-wc69-rhjr-hc9g",
      "cwe_id": "{'CWE-400', 'CWE-1333'}",
      "score": 7.5,
      "chain": "{'https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3'}",
      "dataset": "osv",
      "summary": "Inefficient Regular Expression Complexity in moment ### Impact\n\n* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment-1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.",
      "published_date": "2022-07-06",
      "chain_len": 1,
      "project": "https://github.com/moment/moment",
      "commit_href": "https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
      "commit_sha": "9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
      "patch": "SINGLE",
      "chain_ord": "['9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3']",
      "before_first_fix_commit": "{'6374fd860aeff75e6c9d9d11540c6b22bc7ef175'}",
      "last_fix_commit": "9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/06/2022, 15:28:25",
      "message": "[bugfix] Fix redos in preprocessRFC2822 regex (#6015)\n\n* fix ReDoS in preprocessRFC2822 regex\r\n\r\nFixes: [#2936](https://github.com/moment/moment/issues/6012)\r\n\r\nDisallow nested rfc2822 comments to prevent quadratic regex execution time (i.e each open bracket is considered at most twice).",
      "author": "Khang Vo (doublevkay)",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/lib/create/from-string.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/moment/moment/raw/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3/src%2Flib%2Fcreate%2Ffrom-string.js', 'patch': \"@@ -151,7 +151,7 @@ function untruncateYear(yearStr) {\\n function preprocessRFC2822(s) {\\n     // Remove comments and folding whitespace and replace multiple-spaces with a single space\\n     return s\\n-        .replace(/\\\\([^)]*\\\\)|[\\\\n\\\\t]/g, ' ')\\n+        .replace(/\\\\([^()]*\\\\)|[\\\\n\\\\t]/g, ' ')\\n         .replace(/(\\\\s\\\\s+)/g, ' ')\\n         .replace(/^\\\\s\\\\s*/, '')\\n         .replace(/\\\\s\\\\s*$/, '');\"}}",
      "message_norm": "[bugfix] fix redos in preprocessrfc2822 regex (#6015)\n\n* fix redos in preprocessrfc2822 regex\r\n\r\nfixes: [#2936](https://github.com/moment/moment/issues/6012)\r\n\r\ndisallow nested rfc2822 comments to prevent quadratic regex execution time (i.e each open bracket is considered at most twice).",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('preprocessrfc2822', 'SECWORD', ''), ('#6015', 'ISSUE', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('preprocessrfc2822', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#2936](https://github.com', 'ISSUE', ''), ('issues/6012', 'FLAW', ''), ('prevent', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib/create/from-string.js'])",
      "num_files": 1.0
    },
    {
      "index": 1141,
      "vuln_id": "GHSA-85rr-4rh9-hhwh",
      "cwe_id": "{'CWE-119', 'CWE-20'}",
      "score": 7.5,
      "chain": "{'https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c'}",
      "dataset": "osv",
      "summary": "Memory leak in Nanopb ### Impact\nDecoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed.\n\n### Patches\nPreliminary patch is [available on git](https://github.com/nanopb/nanopb/commit/edf6dcbffee4d614ac0c2c1b258ab95185bdb6e9) and problem will be patched in versions 0.3.9.7 and 0.4.4 once testing has been completed.\n\n### Workarounds\nFollowing workarounds are available:\n* Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code.\n* Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed.\n* Use an arena allocator for nanopb, to make sure all memory can be released afterwards.\n\n### References\nBug report: https://github.com/nanopb/nanopb/issues/615\n\n### For more information\nIf you have any questions or comments about this advisory, comment on the bug report linked above.",
      "published_date": "2020-11-25",
      "chain_len": 1,
      "project": "https://github.com/nanopb/nanopb",
      "commit_href": "https://github.com/nanopb/nanopb/commit/4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
      "commit_sha": "4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
      "patch": "SINGLE",
      "chain_ord": "['4fe23595732b6f1254cfc11a9b8d6da900b55b0c']",
      "before_first_fix_commit": "{'d9d5dfd869aca4d00a81f671b2445fb4cea0352f'}",
      "last_fix_commit": "4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/25/2020, 09:38:40",
      "message": "Fix memory leak with oneofs and PB_ENABLE_MALLOC (#615)\n\nNanopb would leak memory when all of the following conditions were true:\n- PB_ENABLE_MALLOC is defined at the compile time\n- Message definitions contains an oneof field,\n  the oneof contains a static submessage, and\n  the static submessage contains a pointer field.\n- Data being decoded contains two values for the submessage.\n\nThe logic in pb_release_union_field would detect that the same\nsubmessage occurs twice, and wouldn't release it because keeping\nthe old values is necessary to match the C++ library behavior\nregarding message merges.\n\nBut then decode_static_field() would go to memset() the whole\nsubmessage to zero, because it unconditionally assumed it to\nbe uninitialized memory. This would normally happen when the\ncontents of the union field is switched to a different oneof\nitem, instead of merging with the same one.\n\nThis commit changes it so that the field is memset() only when\n`which_field` contains a different tag.",
      "author": "Petteri Aimonen",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 3, 'total': 9}",
      "files": "{'pb_decode.c': {'additions': 6, 'deletions': 3, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/nanopb/nanopb/raw/4fe23595732b6f1254cfc11a9b8d6da900b55b0c/pb_decode.c', 'patch': '@@ -464,14 +464,17 @@ static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t\\n             }\\n \\n         case PB_HTYPE_ONEOF:\\n-            *(pb_size_t*)iter->pSize = iter->pos->tag;\\n-            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)\\n+            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE &&\\n+                *(pb_size_t*)iter->pSize != iter->pos->tag)\\n             {\\n                 /* We memset to zero so that any callbacks are set to NULL.\\n-                 * Then set any default values. */\\n+                 * This is because the callbacks might otherwise have values\\n+                 * from some other union field. */\\n                 memset(iter->pData, 0, iter->pos->data_size);\\n                 pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);\\n             }\\n+            *(pb_size_t*)iter->pSize = iter->pos->tag;\\n+\\n             return func(stream, iter->pos, iter->pData);\\n \\n         default:'}}",
      "message_norm": "fix memory leak with oneofs and pb_enable_malloc (#615)\n\nnanopb would leak memory when all of the following conditions were true:\n- pb_enable_malloc is defined at the compile time\n- message definitions contains an oneof field,\n  the oneof contains a static submessage, and\n  the static submessage contains a pointer field.\n- data being decoded contains two values for the submessage.\n\nthe logic in pb_release_union_field would detect that the same\nsubmessage occurs twice, and wouldn't release it because keeping\nthe old values is necessary to match the c++ library behavior\nregarding message merges.\n\nbut then decode_static_field() would go to memset() the whole\nsubmessage to zero, because it unconditionally assumed it to\nbe uninitialized memory. this would normally happen when the\ncontents of the union field is switched to a different oneof\nitem, instead of merging with the same one.\n\nthis commit changes it so that the field is memset() only when\n`which_field` contains a different tag.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', ''), ('#615', 'ISSUE', ''), ('leak', 'SECWORD', ''), ('decoded', 'SECWORD', ''), ('decode_static_field', 'SECWORD', ''), ('uninitialized memory', 'SECWORD', ''), ('changes', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['pb_decode.c'])",
      "num_files": 1.0
    },
    {
      "index": 59,
      "vuln_id": "GHSA-27qf-jwm8-g7f3",
      "cwe_id": "{'CWE-369'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9'}",
      "dataset": "osv",
      "summary": "FPE in LSH in TFLite ### Impact\nAn attacker can craft a TFLite model that would trigger a division by zero error in LSH  [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118).\n\n```cc\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  int input_item_bytes = input->bytes / SizeOfDimension(input, 0);\n  // ...\n}\n```\n          \nThere is no check that the first dimension of the input is non zero.\n      \n### Patches\nWe have patched the issue in GitHub commit [0575b640091680cfb70f4dd93e70658de43b94f9](https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9",
      "commit_sha": "0575b640091680cfb70f4dd93e70658de43b94f9",
      "patch": "SINGLE",
      "chain_ord": "['0575b640091680cfb70f4dd93e70658de43b94f9']",
      "before_first_fix_commit": "{'13aec9e4558d83fedac084ad66e32daf8bbcde0f'}",
      "last_fix_commit": "0575b640091680cfb70f4dd93e70658de43b94f9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/27/2021, 23:45:20",
      "message": "Prevent division by 0 in LSH projection.\n\nPiperOrigin-RevId: 387225857\nChange-Id: Iaeb572a763618c64f503e0026f6dd9fd769bf50c",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'tensorflow/lite/kernels/lsh_projection.cc': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0575b640091680cfb70f4dd93e70658de43b94f9/tensorflow%2Flite%2Fkernels%2Flsh_projection.cc', 'patch': '@@ -28,7 +28,7 @@ limitations under the License.\\n //\\n // Input:\\n //   Tensor[0]: Hash functions. Dim.size == 2, DataType: Float.\\n-//              Tensor[0].Dim[0]: Num of hash functions.\\n+//              Tensor[0].Dim[0]: Num of hash functions. Must be at least 1.\\n //              Tensor[0].Dim[1]: Num of projected output bits generated by\\n //                                each hash function.\\n //   In sparse case, Tensor[0].Dim[1] + ceil( log2(Tensor[0].Dim[0] )) <= 32.\\n@@ -82,6 +82,7 @@ TfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\\n   const TfLiteTensor* input;\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\\n   TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\\n+  TF_LITE_ENSURE(context, SizeOfDimension(input, 0) >= 1);\\n \\n   if (NumInputs(node) == 3) {\\n     const TfLiteTensor* weight;'}}",
      "message_norm": "prevent division by 0 in lsh projection.\n\npiperorigin-revid: 387225857\nchange-id: iaeb572a763618c64f503e0026f6dd9fd769bf50c",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('387225857', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/lsh_projection.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1891,
      "vuln_id": "GHSA-gj85-pvp5-mvf9",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/ptrofimov/beanstalk_console/commit/e351c8260ec1d3718d9e475ee57c7e12c47f19da'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Beanstalk console Beanstalk console prior to version 1.7.12 is vulnerable to cross-site scripting.",
      "published_date": "2022-02-06",
      "chain_len": 1,
      "project": "https://github.com/ptrofimov/beanstalk_console",
      "commit_href": "https://github.com/ptrofimov/beanstalk_console/commit/e351c8260ec1d3718d9e475ee57c7e12c47f19da",
      "commit_sha": "e351c8260ec1d3718d9e475ee57c7e12c47f19da",
      "patch": "SINGLE",
      "chain_ord": "['e351c8260ec1d3718d9e475ee57c7e12c47f19da']",
      "before_first_fix_commit": "{'95d5808836034835fc33500c6a82276277fabdf9'}",
      "last_fix_commit": "e351c8260ec1d3718d9e475ee57c7e12c47f19da",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/01/2022, 15:43:02",
      "message": "Sanitize input",
      "author": "Nav-Prak",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/include.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/ptrofimov/beanstalk_console/raw/e351c8260ec1d3718d9e475ee57c7e12c47f19da/lib%2Finclude.php', 'patch': \"@@ -19,7 +19,7 @@ function autoload_class($class) {\\n require_once dirname(__FILE__) . '/../config.php';\\r\\n require_once dirname(__FILE__) . '/../src/Storage.php';\\r\\n \\r\\n-$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';\\r\\n+$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';\\r\\n $GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';\\r\\n $GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';\\r\\n $GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';\"}}",
      "message_norm": "sanitize input",
      "language": "ro",
      "entities": "[('sanitize', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/include.php'])",
      "num_files": 1.0
    },
    {
      "index": 412,
      "vuln_id": "GHSA-4fc4-4p5g-6w89",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/ckeditor/ckeditor4/commit/d158413449692d920a778503502dcb22881bc949'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in CKEditor4 ### Affected packages\nThe vulnerability has been discovered in the core HTML processing module and may affect all plugins used by CKEditor 4.\n\n### Impact\nA potential vulnerability has been discovered in CKEditor 4 HTML processing core module. The vulnerability allowed to inject malformed HTML bypassing content sanitization, which could result in executing JavaScript code. It affects all users using the CKEditor 4 at version < 4.18.0.\n\n### Patches\nThe problem has been recognized and patched. The fix will be available in version 4.18.0.\n\n### For more information\nEmail us at security@cksource.com if you have any questions or comments about this advisory.\n\n### Acknowledgements\nThe CKEditor 4 team would like to thank GHSL team member Kevin Backhouse ([@kevinbackhouse](https://github.com/kevinbackhouse)) for recognizing and reporting this vulnerability.",
      "published_date": "2022-03-16",
      "chain_len": 1,
      "project": "https://github.com/ckeditor/ckeditor4",
      "commit_href": "https://github.com/ckeditor/ckeditor4/commit/d158413449692d920a778503502dcb22881bc949",
      "commit_sha": "d158413449692d920a778503502dcb22881bc949",
      "patch": "SINGLE",
      "chain_ord": "['d158413449692d920a778503502dcb22881bc949']",
      "before_first_fix_commit": "{'8cff1e5aee3d766068792a374ba6b54a5cb92e2d'}",
      "last_fix_commit": "d158413449692d920a778503502dcb22881bc949",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/08/2022, 16:35:34",
      "message": "Code refactoring.",
      "author": "Tomasz Jakut",
      "comments": null,
      "stats": "{'additions': 26, 'deletions': 14, 'total': 40}",
      "files": "{'core/htmldataprocessor.js': {'additions': 26, 'deletions': 14, 'changes': 40, 'status': 'modified', 'raw_url': 'https://github.com/ckeditor/ckeditor4/raw/d158413449692d920a778503502dcb22881bc949/core%2Fhtmldataprocessor.js', 'patch': '@@ -50,17 +50,18 @@\\n \\t\\thtmlFilter.addRules( createBogusAndFillerRules( editor, \\'html\\' ), { applyToAll: true } );\\n \\n \\t\\teditor.on( \\'toHtml\\', function( evt ) {\\n-\\t\\t\\tvar evtData = evt.data,\\n+\\t\\t\\tvar randomNumber = generateRandomNumber(),\\n+\\t\\t\\t\\tevtData = evt.data,\\n \\t\\t\\t\\tdata = evtData.dataValue,\\n \\t\\t\\t\\tfixBodyTag;\\n \\n \\t\\t\\t// Before we start protecting markup, make sure there are no externally injected\\n \\t\\t\\t// protection keywords.\\n-\\t\\t\\tdata = removeReservedKeywords( data );\\n+\\t\\t\\tdata = removeReservedKeywords( data, randomNumber );\\n \\n \\t\\t\\t// The source data is already HTML, but we need to clean\\n \\t\\t\\t// it up and apply the filter.\\n-\\t\\t\\tdata = protectSource( data, editor );\\n+\\t\\t\\tdata = protectSource( data, editor, randomNumber );\\n \\n \\t\\t\\t// Protect content of textareas. (https://dev.ckeditor.com/ticket/9995)\\n \\t\\t\\t// Do this before protecting attributes to avoid breaking:\\n@@ -70,7 +71,7 @@\\n \\t\\t\\t// Before anything, we must protect the URL attributes as the\\n \\t\\t\\t// browser may changing them when setting the innerHTML later in\\n \\t\\t\\t// the code.\\n-\\t\\t\\tdata = protectAttributes( data );\\n+\\t\\t\\tdata = protectAttributes( data, randomNumber );\\n \\n \\t\\t\\t// Protect elements than can\\'t be set inside a DIV. E.g. IE removes\\n \\t\\t\\t// style tags from innerHTML. (https://dev.ckeditor.com/ticket/3710)\\n@@ -90,7 +91,7 @@\\n \\n \\t\\t\\t// There are attributes which may execute JavaScript code inside fixBin.\\n \\t\\t\\t// Encode them greedily. They will be unprotected right after getting HTML from fixBin. (https://dev.ckeditor.com/ticket/10)\\n-\\t\\t\\tdata = protectInsecureAttributes( data );\\n+\\t\\t\\tdata = protectInsecureAttributes( data, randomNumber );\\n \\n \\t\\t\\tvar fixBin = evtData.context || editor.editable().getName(),\\n \\t\\t\\t\\tisPre;\\n@@ -110,7 +111,7 @@\\n \\t\\t\\tdata = el.getHtml().substr( 1 );\\n \\n \\t\\t\\t// Restore shortly protected attribute names.\\n-\\t\\t\\tdata = data.replace( new RegExp( \\'data-cke-\\' + CKEDITOR.rnd + \\'-\\', \\'ig\\' ), \\'\\' );\\n+\\t\\t\\tdata = data.replace( new RegExp( \\'data-cke-\\' + randomNumber + \\'-\\', \\'ig\\' ), \\'\\' );\\n \\n \\t\\t\\tisPre && ( data = data.replace( /^<pre>|<\\\\/pre>$/gi, \\'\\' ) );\\n \\n@@ -838,13 +839,13 @@\\n \\n \\tvar protectSelfClosingRegex = /<cke:(param|embed)([^>]*?)\\\\/?>(?!\\\\s*<\\\\/cke:\\\\1)/gi;\\n \\n-\\tfunction protectAttributes( html ) {\\n+\\tfunction protectAttributes( html, randomNumber ) {\\n \\t\\treturn html.replace( protectElementRegex, function( element, tag, attributes ) {\\n \\t\\t\\treturn \\'<\\' + tag + attributes.replace( protectAttributeRegex, function( fullAttr, attrName ) {\\n \\t\\t\\t\\t// Avoid corrupting the inline event attributes (https://dev.ckeditor.com/ticket/7243).\\n \\t\\t\\t\\t// We should not rewrite the existed protected attributes, e.g. clipboard content from editor. (https://dev.ckeditor.com/ticket/5218)\\n \\t\\t\\t\\tif ( protectAttributeNameRegex.test( attrName ) && attributes.indexOf( \\'data-cke-saved-\\' + attrName ) == -1 )\\n-\\t\\t\\t\\t\\treturn \\' data-cke-saved-\\' + fullAttr + \\' data-cke-\\' + CKEDITOR.rnd + \\'-\\' + fullAttr;\\n+\\t\\t\\t\\t\\treturn \\' data-cke-saved-\\' + fullAttr + \\' data-cke-\\' + randomNumber + \\'-\\' + fullAttr;\\n \\n \\t\\t\\t\\treturn fullAttr;\\n \\t\\t\\t} ) + \\'>\\';\\n@@ -897,8 +898,8 @@\\n \\t// * opening tags - e.g. `<onfoo`,\\n \\t// * closing tags - e.g. </onfoo> (tested in \"false positive 1\"),\\n \\t// * part of other attribute - e.g. `data-onfoo` or `fonfoo`.\\n-\\tfunction protectInsecureAttributes( html ) {\\n-\\t\\treturn html.replace( /([^a-z0-9<\\\\-])(on\\\\w{3,})(?!>)/gi, \\'$1data-cke-\\' + CKEDITOR.rnd + \\'-$2\\' );\\n+\\tfunction protectInsecureAttributes( html, randomNumber ) {\\n+\\t\\treturn html.replace( /([^a-z0-9<\\\\-])(on\\\\w{3,})(?!>)/gi, \\'$1data-cke-\\' + randomNumber + \\'-$2\\' );\\n \\t}\\n \\n \\tfunction unprotectRealComments( html ) {\\n@@ -917,11 +918,11 @@\\n \\t\\t} );\\n \\t}\\n \\n-\\tfunction protectSource( data, editor ) {\\n+\\tfunction protectSource( data, editor, randomNumber ) {\\n \\t\\tvar protectedHtml = [],\\n \\t\\t\\tprotectRegexes = editor.config.protectedSource,\\n \\t\\t\\tstore = editor._.dataStore || ( editor._.dataStore = { id: 1 } ),\\n-\\t\\t\\ttempRegex = /<\\\\!--\\\\{cke_temp(comment)?\\\\}(\\\\d*?)-->/g;\\n+\\t\\t\\ttempRegex = new RegExp(\\'<\\\\\\\\!--\\\\\\\\{cke_temp_\\' + randomNumber + \\'(comment)?\\\\\\\\}(\\\\\\\\d*?)-->\\', \\'g\\' );\\n \\n \\t\\tvar regexes = [\\n \\t\\t\\t// Script tags will also be forced to be protected, otherwise\\n@@ -940,7 +941,7 @@\\n \\t\\t// Note that we use a different tag for comments, as we need to\\n \\t\\t// transform them when applying filters.\\n \\t\\tdata = data.replace( ( /<!--[\\\\s\\\\S]*?-->/g ), function( match ) {\\n-\\t\\t\\treturn \\'<!--{cke_tempcomment}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n+\\t\\t\\treturn \\'<!--{cke_temp_\\' + randomNumber + \\'comment}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n \\t\\t} );\\n \\n \\t\\tfor ( var i = 0; i < regexes.length; i++ ) {\\n@@ -951,7 +952,8 @@\\n \\t\\t\\t\\t} );\\n \\n \\t\\t\\t\\t// Avoid protecting over protected, e.g. /\\\\{.*?\\\\}/\\n-\\t\\t\\t\\treturn ( /cke_temp(comment)?/ ).test( match ) ? match : \\'<!--{cke_temp}\\' + ( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n+\\t\\t\\t\\treturn ( tempRegex ).test( match ) ? match : \\'<!--{cke_temp_\\' + randomNumber + \\'}\\' +\\n+\\t\\t\\t\\t\\t( protectedHtml.push( match ) - 1 ) + \\'-->\\';\\n \\t\\t\\t} );\\n \\t\\t}\\n \\t\\tdata = data.replace( tempRegex, function( $, isComment, id ) {\\n@@ -1107,6 +1109,16 @@\\n \\t\\t\\t};\\n \\t\\t}\\n \\t} )();\\n+\\n+\\tfunction generateRandomNumber() {\\n+\\t\\tvar cryptoApi = window.crypto || window.msCrypto;\\n+\\n+\\t\\tif ( cryptoApi ) {\\n+\\t\\t\\treturn cryptoApi.getRandomValues( new Uint32Array( 1 ) )[ 0 ];\\n+\\t\\t}\\n+\\n+\\t\\treturn Math.floor( Math.random() *  9000000000 + 1000000000 );\\n+\\t}\\n } )();\\n \\n /**'}}",
      "message_norm": "code refactoring.",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/htmldataprocessor.js'])",
      "num_files": 1.0
    },
    {
      "index": 1887,
      "vuln_id": "GHSA-ghww-cv4v-hmxx",
      "cwe_id": "{'CWE-352'}",
      "score": 4.3,
      "chain": "{'https://github.com/microweber/microweber/commit/756096da1260f29ff6f4532234d93d8e41dd5aa8'}",
      "dataset": "osv",
      "summary": "Cross-Site Request Forgery microweber microweber prior to version 1.2.11 is vulnerable to Cross-Site Request Forgery (CSRF).",
      "published_date": "2022-02-18",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/756096da1260f29ff6f4532234d93d8e41dd5aa8",
      "commit_sha": "756096da1260f29ff6f4532234d93d8e41dd5aa8",
      "patch": "SINGLE",
      "chain_ord": "['756096da1260f29ff6f4532234d93d8e41dd5aa8']",
      "before_first_fix_commit": "{'037744b21342f771f6a3de65ed0be936d47c3737'}",
      "last_fix_commit": "756096da1260f29ff6f4532234d93d8e41dd5aa8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/16/2022, 16:19:52",
      "message": "Update UserLogoutController.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'src/MicroweberPackages/User/Http/Controllers/UserLogoutController.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/756096da1260f29ff6f4532234d93d8e41dd5aa8/src%2FMicroweberPackages%2FUser%2FHttp%2FControllers%2FUserLogoutController.php', 'patch': '@@ -5,6 +5,7 @@\\n use App\\\\Http\\\\Resources\\\\User\\\\UserResource;\\n use Illuminate\\\\Http\\\\Request;\\n use Illuminate\\\\Routing\\\\Controller;\\n+use Illuminate\\\\Support\\\\Facades\\\\Auth;\\n use MicroweberPackages\\\\App\\\\Http\\\\Middleware\\\\SameSiteRefererMiddleware;\\n \\n class UserLogoutController extends Controller\\n@@ -42,7 +43,11 @@ public function index(Request $request)\\n \\n     public function submit(Request $request)\\n     {\\n-        return logout();\\n+        Auth::logout();\\n+\\n+        $url = site_url();\\n+\\n+        return app()->url_manager->redirect($url);\\n     }\\n \\n }'}}",
      "message_norm": "update userlogoutcontroller.php",
      "language": "fr",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/User/Http/Controllers/UserLogoutController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1429,
      "vuln_id": "GHSA-9rpc-5v9q-5r7f",
      "cwe_id": "{'CWE-665', 'CWE-20'}",
      "score": 3.6,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6'}",
      "dataset": "osv",
      "summary": "Incomplete validation in `SparseReshape` ### Impact\nIncomplete validation in `SparseReshape` results in a denial of service based on a `CHECK`-failure.\n\n```python\nimport tensorflow as tf\n\ninput_indices = tf.constant(41, shape=[1, 1], dtype=tf.int64)\ninput_shape = tf.zeros([11], dtype=tf.int64)\nnew_shape = tf.zeros([1], dtype=tf.int64)\n\ntf.raw_ops.SparseReshape(input_indices=input_indices,\n    input_shape=input_shape,\n    new_shape=new_shape)\n``` \n    \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e87b51ce05c3eb172065a6ea5f48415854223285/tensorflow/core/kernels/sparse_reshape_op.cc#L40) has no validation that the input arguments specify a valid sparse tensor.\n\n### Patches \nWe have patched the issue in GitHub commit [1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6](https://github.com/tensorflow/tensorflow/commit/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are the only affected versions.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "commit_sha": "1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "patch": "SINGLE",
      "chain_ord": "['1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6']",
      "before_first_fix_commit": "{'8d78df9997a8537a2f389adc2cfdc36e71da0665'}",
      "last_fix_commit": "1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/29/2021, 22:30:30",
      "message": "Fix heap-buffer-overflow issue with `tf.raw_ops.SparseReshape`.\n\nPiperOrigin-RevId: 371218558\nChange-Id: I6a6dc5bf15b50a1d05bdd95e9ba347cb39f40f45",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 0, 'total': 12}",
      "files": "{'tensorflow/core/kernels/sparse_reshape_op.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1d04d7d93f4ed3854abf75d6b712d72c3f70d6b6/tensorflow%2Fcore%2Fkernels%2Fsparse_reshape_op.cc', 'patch': '@@ -26,6 +26,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/types.h\"\\n #include \"tensorflow/core/kernels/reshape_util.h\"\\n #include \"tensorflow/core/lib/gtl/inlined_vector.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -38,6 +39,17 @@ class SparseReshapeOp : public OpKernel {\\n   explicit SparseReshapeOp(OpKernelConstruction* context) : OpKernel(context) {}\\n \\n   void Compute(OpKernelContext* context) override {\\n+    const Tensor& input_indices_in = context->input(0);\\n+    const Tensor& input_shape_in = context->input(1);\\n+\\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_indices_in.shape()),\\n+                errors::InvalidArgument(\"Input must be a matrix.\"));\\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(input_shape_in.shape()),\\n+                errors::InvalidArgument(\"Input shape must be a vector.\"));\\n+    OP_REQUIRES(context,\\n+                input_indices_in.dim_size(1) == input_shape_in.dim_size(0),\\n+                errors::InvalidArgument(\\n+                    \"Input tensor rank must match input shape length.\"));\\n     ReshapeSparseTensor<Device>(context, context->input(0), context->input(1),\\n                                 context->input(2), 0 /* output indices index */,\\n                                 1 /* output shape index */);'}}",
      "message_norm": "fix heap-buffer-overflow issue with `tf.raw_ops.sparsereshape`.\n\npiperorigin-revid: 371218558\nchange-id: i6a6dc5bf15b50a1d05bdd95e9ba347cb39f40f45",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371218558', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_reshape_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 319,
      "vuln_id": "GHSA-3wcq-x3mq-6r9p",
      "cwe_id": "{'CWE-908', 'CWE-200'}",
      "score": 7.7,
      "chain": "{'https://github.com/mafintosh/dns-packet/commit/0d0d593f8df4e2712c43957a6c62e95047f12b2d', 'https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56'}",
      "dataset": "osv",
      "summary": "Potential memory exposure in dns-packet This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.",
      "published_date": "2021-05-24",
      "chain_len": 2,
      "project": "https://github.com/mafintosh/dns-packet",
      "commit_href": "https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
      "commit_sha": "25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
      "patch": "MULTI",
      "chain_ord": "['25f15dd0fedc53688b25fd053ebbdffe3d5c1c56', '0d0d593f8df4e2712c43957a6c62e95047f12b2d']",
      "before_first_fix_commit": "{'7f35bac5b4680d7bfbb34fbc475ecfdbf9d25092'}",
      "last_fix_commit": "0d0d593f8df4e2712c43957a6c62e95047f12b2d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/19/2021, 17:59:39",
      "message": "do trim on encodingLength as well",
      "author": "Mathias Buus",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/mafintosh/dns-packet/raw/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56/index.js', 'patch': \"@@ -78,7 +78,7 @@ name.decode.bytes = 0\\n \\n name.encodingLength = function (n) {\\n   if (n === '.') return 1\\n-  return Buffer.byteLength(n) + 2\\n+  return Buffer.byteLength(n.replace(/^\\\\.|\\\\.$/gm, '')) + 2\\n }\\n \\n const string = {}\"}}",
      "message_norm": "do trim on encodinglength as well",
      "language": "en",
      "entities": "[('encodinglength', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 3339,
      "vuln_id": "GHSA-wxj7-97fp-j53j",
      "cwe_id": "{'CWE-29', 'CWE-668'}",
      "score": 9.8,
      "chain": "{'https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085'}",
      "dataset": "osv",
      "summary": "Exposure of Resource to Wrong Sphere in Zip-Local The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.",
      "published_date": "2022-02-01",
      "chain_len": 1,
      "project": "https://github.com/Mostafa-Samir/zip-local",
      "commit_href": "https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085",
      "commit_sha": "949446a95a660c0752b1db0c654f0fd619ae6085",
      "patch": "SINGLE",
      "chain_ord": "['949446a95a660c0752b1db0c654f0fd619ae6085']",
      "before_first_fix_commit": "{'6bb9b59733df379ac168aa705790bd8339b4bf9b'}",
      "last_fix_commit": "949446a95a660c0752b1db0c654f0fd619ae6085",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/30/2021, 16:05:29",
      "message": "add test for sync unzipping a zip-slip attack file",
      "author": "Mostafa Samir",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 0, 'total': 7}",
      "files": "{'tests/unzip.sync.test.js': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/Mostafa-Samir/zip-local/raw/949446a95a660c0752b1db0c654f0fd619ae6085/tests%2Funzip.sync.test.js', 'patch': '@@ -27,6 +27,13 @@ describe(\"Unzipping synchronously\", function () {\\n         zipper.sync.unzip(\"./tests/assets/hello.zip\").save(\"./tests/assets/hello-sync-unzip/\");\\n     });\\n \\n+    it(\"should raise an error when an entry is outside extraction path\", function () {\\n+        fs.mkdirSync(\"./tests/assets/zip-slip-sync\");\\n+        expect(\\n+            zipper.sync.unzip(\"./tests/assets/zip-slip.zip\").save(\"./tests/assets/zip-slip-sync\")\\n+        ).to.throw(\"Entry is outside the extraction path\")\\n+    });\\n+\\n     it(\"checks if unzipped files on disk contain correct data\", function (done) {\\n \\n         fs.readFile(\"./tests/assets/hello-sync-unzip/hello/says-hello\", \\'utf8\\', function (err, data) {'}}",
      "message_norm": "add test for sync unzipping a zip-slip attack file",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('attack', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tests/unzip.sync.test.js'])",
      "num_files": 1.0
    },
    {
      "index": 2404,
      "vuln_id": "GHSA-mc7w-4cjf-c973",
      "cwe_id": "{'CWE-78'}",
      "score": 9.8,
      "chain": "{'https://github.com/peterbraden/node-opencv/commit/aaece6921d7368577511f06c94c99dd4e9653563', 'https://github.com/peterbraden/node-opencv/commit/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b'}",
      "dataset": "osv",
      "summary": "OS Command Injection in node-opencv utils/find-opencv.js in node-opencv (aka OpenCV bindings for Node.js) prior to 6.1.0 is vulnerable to Command Injection. It does not validate user input allowing attackers to execute arbitrary commands.",
      "published_date": "2021-10-12",
      "chain_len": 2,
      "project": "https://github.com/peterbraden/node-opencv",
      "commit_href": "https://github.com/peterbraden/node-opencv/commit/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b",
      "commit_sha": "81a4b8620188e89f7e4fc985f3c89b58d4bcc86b",
      "patch": "MULTI",
      "chain_ord": "['81a4b8620188e89f7e4fc985f3c89b58d4bcc86b', 'aaece6921d7368577511f06c94c99dd4e9653563']",
      "before_first_fix_commit": "{'58f248af12cbdbccfe88f79637402d4796de3d39'}",
      "last_fix_commit": "aaece6921d7368577511f06c94c99dd4e9653563",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/20/2019, 08:45:23",
      "message": "Remove untrusted input to exec",
      "author": "Peter Braden",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'utils/find-opencv.js': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/peterbraden/node-opencv/raw/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b/utils%2Ffind-opencv.js', 'patch': '@@ -2,13 +2,13 @@\\n \\n var exec = require(\"child_process\").exec;\\n var fs = require(\"fs\");\\n-var flag = process.argv[2] || \"--exists\";\\n+var flag = \"--exists\";\\n \\n // Normally |pkg-config opencv ...| could report either OpenCV 2.x or OpenCV 3.y\\n // depending on what is installed.  To enable both 2.x and 3.y to co-exist on\\n // the same machine, the opencv.pc for 3.y can be installed as opencv3.pc and\\n // then selected by |export PKG_CONFIG_OPENCV3=1| before building node-opencv.\\n-var opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : \\'\"opencv >= 2.3.1\"\\';\\n+var opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : \\' \"opencv >= 2.3.1\"\\';\\n \\n function main(){\\n     //Try using pkg-config, but if it fails and it is on Windows, try the fallback\\n@@ -18,7 +18,7 @@ function main(){\\n                 fallback();\\n             }\\n             else{\\n-                throw new Error(\"ERROR: failed to run: pkg-config\", opencv, flag);\\n+              throw new Error(\"ERROR: failed to run: pkg-config\" + opencv + \" \" + flag + \" - Is OpenCV installed?\");\\n             }\\n         }\\n         else{'}}",
      "message_norm": "remove untrusted input to exec",
      "language": "en",
      "entities": "[('remove', 'ACTION', ''), ('untrusted', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['utils/find-opencv.js'])",
      "num_files": 1.0
    },
    {
      "index": 883,
      "vuln_id": "GHSA-6qcc-whgp-pjj2",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/pimcore/pimcore/commit/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Pimcore Pimcore version 10.3.2 and prior is vulnerable to stored cross-site scripting. A patch is available and anticipated to be part of version 10.3.3.",
      "published_date": "2022-03-05",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
      "commit_sha": "8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
      "patch": "SINGLE",
      "chain_ord": "['8ab06bfbb5a05a1b190731d9c7476ec45f5ee878']",
      "before_first_fix_commit": "{'cef6fb5a9f385f77b9a1af508ecc45a147476458'}",
      "last_fix_commit": "8ab06bfbb5a05a1b190731d9c7476ec45f5ee878",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/02/2022, 19:06:51",
      "message": "escaping fields in SERP preview",
      "author": "JiaJia Ji",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'bundles/AdminBundle/Resources/public/js/pimcore/document/pages/settings.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878/bundles%2FAdminBundle%2FResources%2Fpublic%2Fjs%2Fpimcore%2Fdocument%2Fpages%2Fsettings.js', 'patch': '@@ -79,8 +79,8 @@ pimcore.document.pages.settings = Class.create(pimcore.document.settings_abstrac\\n             var updateSerpPreview = function () {\\n \\n                 var metaPanel = this.layout.getComponent(\"metaDataPanel\");\\n-                var title = metaPanel.getComponent(\"title\").getValue();\\n-                var description = metaPanel.getComponent(\"description\").getValue();\\n+                var title = htmlspecialchars(metaPanel.getComponent(\"title\").getValue());\\n+                var description = htmlspecialchars(metaPanel.getComponent(\"description\").getValue());\\n \\n                 var truncate = function( text, n ){\\n                     if (text.length <= n) { return text; }'}}",
      "message_norm": "escaping fields in serp preview",
      "language": "en",
      "entities": "[('escaping', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Resources/public/js/pimcore/document/pages/settings.js'])",
      "num_files": 1.0
    },
    {
      "index": 782,
      "vuln_id": "GHSA-686h-j8r8-wmfm",
      "cwe_id": "{'CWE-362', 'CWE-77'}",
      "score": 8.1,
      "chain": "{'https://github.com/Xudong-Huang/rcu_cell/pull/4/commits/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2'}",
      "dataset": "osv",
      "summary": "Data races in rcu_cell Affected versions of this crate unconditionally implement Send/Sync for `RcuCell<T>`.\nThis allows users to send `T: !Send` to other threads (while `T` enclosed within `RcuCell<T>`), and allows users to concurrently access `T: !Sync` by using the APIs of `RcuCell<T>` that provide access to `&T`.\n\nThis can result in memory corruption caused by data races.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/Xudong-Huang/rcu_cell",
      "commit_href": "https://github.com/Xudong-Huang/rcu_cell/pull/4/commits/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
      "commit_sha": "1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
      "patch": "SINGLE",
      "chain_ord": "['1faf18eee11f14969b77ae0f76dcd9ebd437d0c2']",
      "before_first_fix_commit": "{'0e4dc8cd07002a583462994ab4bcfecdf3338fae'}",
      "last_fix_commit": "1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/20/2021, 03:33:02",
      "message": "Fix Send/Sync impl of RcuCell<T>",
      "author": "JOE1994",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'src/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/Xudong-Huang/rcu_cell/raw/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2/src%2Flib.rs', 'patch': '@@ -372,8 +372,8 @@ pub struct RcuCell<T> {\\n     link: LinkWrapper<T>,\\n }\\n \\n-unsafe impl<T> Send for RcuCell<T> {}\\n-unsafe impl<T> Sync for RcuCell<T> {}\\n+unsafe impl<T: Send> Send for RcuCell<T> {}\\n+unsafe impl<T: Sync> Sync for RcuCell<T> {}\\n \\n impl<T> Default for RcuCell<T> {\\n     fn default() -> Self {'}}",
      "message_norm": "fix send/sync impl of rcucell<t>",
      "language": "en",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 203,
      "vuln_id": "GHSA-35q2-47q7-3pc3",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e'}",
      "dataset": "osv",
      "summary": "Node-Redis potential exponential regex in monitor mode ### Impact\nWhen a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service.\n\n### Patches\nThe problem was fixed in commit [`2d11b6d`](https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e) and was released in version `3.1.1`.\n\n### References\n#1569 (GHSL-2021-026)",
      "published_date": "2021-04-27",
      "chain_len": 1,
      "project": "https://github.com/NodeRedis/node-redis",
      "commit_href": "https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e",
      "commit_sha": "2d11b6dc9b9774464a91fb4b448bad8bf699629e",
      "patch": "SINGLE",
      "chain_ord": "['2d11b6dc9b9774464a91fb4b448bad8bf699629e']",
      "before_first_fix_commit": "{'7e77de84bc80b0742321939c59612dc27559bbff'}",
      "last_fix_commit": "2d11b6dc9b9774464a91fb4b448bad8bf699629e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/08/2021, 22:04:34",
      "message": "fix #1569 - improve monitor_regex (#1595)\n\nCo-authored-by: Guy Korland <gkorland@gmail.com>",
      "author": "Leibale Eidelman",
      "comments": "{'com_1': {'author': 'Plavit', 'datetime': '04/27/2021, 21:27:30', 'body': 'lemme check compatibility'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/utils.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/redis/node-redis/raw/2d11b6dc9b9774464a91fb4b448bad8bf699629e/lib%2Futils.js', 'patch': '@@ -127,7 +127,7 @@ module.exports = {\\n     reply_to_object: replyToObject,\\n     print: print,\\n     err_code: /^([A-Z]+)\\\\s+(.+)$/,\\n-    monitor_regex: /^[0-9]{10,11}\\\\.[0-9]+ \\\\[[0-9]+ .+\\\\]( \".+?\")+$/,\\n+    monitor_regex: /^[0-9]{10,11}\\\\.[0-9]+ \\\\[[0-9]+ .+\\\\].*\"$/,\\n     clone: convenienceClone,\\n     callback_or_emit: callbackOrEmit,\\n     reply_in_order: replyInOrder'}}",
      "message_norm": "fix #1569 - improve monitor_regex (#1595)\n\nco-authored-by: guy korland <gkorland@gmail.com>",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('#1569', 'ISSUE', ''), ('improve', 'ACTION', ''), ('#1595', 'ISSUE', ''), ('gkorland@gmail.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/utils.js'])",
      "num_files": 1.0
    },
    {
      "index": 1809,
      "vuln_id": "GHSA-g452-6rfc-vrvx",
      "cwe_id": "{'CWE-915'}",
      "score": 5.3,
      "chain": "{'https://github.com/samholmes/node-open-graph/commit/a0cef507a90adaac7dbbe9c404f09a50bdefb348'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in open-graph This affects the package open-graph before 0.2.6. The function parse could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor payload.",
      "published_date": "2021-09-01",
      "chain_len": 1,
      "project": "https://github.com/samholmes/node-open-graph",
      "commit_href": "https://github.com/samholmes/node-open-graph/commit/a0cef507a90adaac7dbbe9c404f09a50bdefb348",
      "commit_sha": "a0cef507a90adaac7dbbe9c404f09a50bdefb348",
      "patch": "SINGLE",
      "chain_ord": "['a0cef507a90adaac7dbbe9c404f09a50bdefb348']",
      "before_first_fix_commit": "{'ef532ed1c51be12155bc1f9baecad09a7c587e04'}",
      "last_fix_commit": "a0cef507a90adaac7dbbe9c404f09a50bdefb348",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/03/2021, 16:31:10",
      "message": "Patch: Filter out blacklisted keys in og property name",
      "author": "Samuel Holmes",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 0, 'total': 7}",
      "files": "{'index.js': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/samholmes/node-open-graph/raw/a0cef507a90adaac7dbbe9c404f09a50bdefb348/index.js', 'patch': '@@ -10,6 +10,11 @@ var shorthandProperties = {\\n \\t\"audio\": \"audio:url\"\\n }\\n \\n+var keyBlacklist = [\\n+\\t\\'__proto__\\',\\n+\\t\\'constructor\\',\\n+\\t\\'prototype\\'\\n+]\\n \\n exports = module.exports = function(url, cb, options){\\n   var userAgent = (options || {}).userAgent || \\'NodeOpenGraphCrawler (https://github.com/samholmes/node-open-graph)\\'\\n@@ -122,6 +127,8 @@ exports.parse = function($, options){\\n \\t\\twhile (keys.length > 1) {\\n \\t\\t\\tkey = keys.shift();\\n \\n+\\t\\t\\tif (keyBlacklist.includes(key)) continue\\n+\\n \\t\\t\\tif (Array.isArray(ptr[key])) {\\n \\t\\t\\t\\t// the last index of ptr[key] should become\\n \\t\\t\\t\\t// the object we are examining.'}}",
      "message_norm": "patch: filter out blacklisted keys in og property name",
      "language": "en",
      "entities": "[('blacklisted', 'SECWORD', ''), ('keys', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 187,
      "vuln_id": "GHSA-3374-7h99-xr85",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/forkcms/forkcms/commit/6ec6171206a7507a39695edc8bbd1b97ef1041c6'}",
      "dataset": "osv",
      "summary": "Cross-site scripting in forkcms Fork CMS Content Management System v5.8.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the `Displayname` field when using the `Add`, `Edit` or `Register' functions. This vulnerability allows attackers to execute arbitrary web scripts or HTML.",
      "published_date": "2021-10-25",
      "chain_len": 1,
      "project": "https://github.com/forkcms/forkcms",
      "commit_href": "https://github.com/forkcms/forkcms/commit/6ec6171206a7507a39695edc8bbd1b97ef1041c6",
      "commit_sha": "6ec6171206a7507a39695edc8bbd1b97ef1041c6",
      "patch": "SINGLE",
      "chain_ord": "['6ec6171206a7507a39695edc8bbd1b97ef1041c6']",
      "before_first_fix_commit": "{'f439d630c2f46a85b251488cd7073068a66fae5c'}",
      "last_fix_commit": "6ec6171206a7507a39695edc8bbd1b97ef1041c6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/17/2020, 10:44:12",
      "message": "Fix xss in profiles display name",
      "author": "Jelmer Prins",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'src/Backend/Modules/Profiles/Actions/Index.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/forkcms/forkcms/raw/6ec6171206a7507a39695edc8bbd1b97ef1041c6/src%2FBackend%2FModules%2FProfiles%2FActions%2FIndex.php', 'patch': \"@@ -128,6 +128,7 @@ private function loadDataGrid(): void\\n             'registered_on',\\n             true\\n         );\\n+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');\\n \\n         // add the mass action controls\\n         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');\"}}",
      "message_norm": "fix xss in profiles display name",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Backend/Modules/Profiles/Actions/Index.php'])",
      "num_files": 1.0
    },
    {
      "index": 2229,
      "vuln_id": "GHSA-jc8m-cxhj-668x",
      "cwe_id": "{'CWE-307'}",
      "score": 8.3,
      "chain": "{'https://github.com/Sorcery/sorcery/commit/0f116d223826895a73b12492f17486e5d54ab7a7'}",
      "dataset": "osv",
      "summary": "Improper Restriction of Excessive Authentication Attempts in Sorcery ### Impact\nBrute force vulnerability when using password authentication via Sorcery. The brute force protection submodule will prevent a brute force attack for the defined lockout period, but once expired protection will not be re-enabled until a user or malicious actor logs in successfully. This does not affect users that do not use the built-in brute force protection submodule, nor users that use permanent account lockout.\n\n### Patches\nPatched as of version `0.15.0`.\n\n### Workarounds\nCurrently no workarounds, other than monkey patching the authenticate method provided by Sorcery or upgrading to version `0.15.0`.",
      "published_date": "2020-05-07",
      "chain_len": 1,
      "project": "https://github.com/Sorcery/sorcery",
      "commit_href": "https://github.com/Sorcery/sorcery/commit/0f116d223826895a73b12492f17486e5d54ab7a7",
      "commit_sha": "0f116d223826895a73b12492f17486e5d54ab7a7",
      "patch": "SINGLE",
      "chain_ord": "['0f116d223826895a73b12492f17486e5d54ab7a7']",
      "before_first_fix_commit": "{'6b72ca36cf389804963e2553ccbb3da000518e51'}",
      "last_fix_commit": "0f116d223826895a73b12492f17486e5d54ab7a7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/02/2020, 20:56:58",
      "message": "Fix brute force vuln due to callbacks not being ran (#235)\n\nThe authenticate method previously would return before callbacks executed if an\r\ninvalid password was provided, which causes the brute force protection to only\r\nwork for the first lockout period, and only resets after a successful login.\r\n\r\nFixes #231",
      "author": "Josh Buker",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'lib/sorcery/model.rb': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/Sorcery/sorcery/raw/0f116d223826895a73b12492f17486e5d54ab7a7/lib%2Fsorcery%2Fmodel.rb', 'patch': '@@ -102,10 +102,6 @@ def authenticate(*credentials, &block)\\n \\n         set_encryption_attributes\\n \\n-        unless user.valid_password?(credentials[1])\\n-          return authentication_response(user: user, failure: :invalid_password, &block)\\n-        end\\n-\\n         if user.respond_to?(:active_for_authentication?) && !user.active_for_authentication?\\n           return authentication_response(user: user, failure: :inactive, &block)\\n         end\\n@@ -118,6 +114,10 @@ def authenticate(*credentials, &block)\\n           end\\n         end\\n \\n+        unless user.valid_password?(credentials[1])\\n+          return authentication_response(user: user, failure: :invalid_password, &block)\\n+        end\\n+\\n         authentication_response(user: user, return_value: user, &block)\\n       end'}}",
      "message_norm": "fix brute force vuln due to callbacks not being ran (#235)\n\nthe authenticate method previously would return before callbacks executed if an\r\ninvalid password was provided, which causes the brute force protection to only\r\nwork for the first lockout period, and only resets after a successful login.\r\n\r\nfixes #231",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('#235', 'ISSUE', ''), ('password', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('login', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#231', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/sorcery/model.rb'])",
      "num_files": 1.0
    },
    {
      "index": 3303,
      "vuln_id": "GHSA-wp77-4gmm-7cq8",
      "cwe_id": "{'CWE-476'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986'}",
      "dataset": "osv",
      "summary": "Incorrect validation of `SaveV2` inputs ### Impact\nThe code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SaveV2(\n  prefix=['tensorflow'],\n  tensor_name=['v'],\n  shape_and_slices=[],\n  tensors=[1,2,3])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.\n\nHowever, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.\n      \n### Patches\nWe have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986",
      "commit_sha": "9728c60e136912a12d99ca56e106b7cce7af5986",
      "patch": "SINGLE",
      "chain_ord": "['9728c60e136912a12d99ca56e106b7cce7af5986']",
      "before_first_fix_commit": "{'f2a673bd34f0d64b8e40a551ac78989d16daad09'}",
      "last_fix_commit": "9728c60e136912a12d99ca56e106b7cce7af5986",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/31/2021, 02:05:41",
      "message": "Ensure validation sticks in `save_restore_v2_ops.cc`\n\nPiperOrigin-RevId: 387924206\nChange-Id: I6156842eb3230076b5812c0815f3e66bd5241454",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'tensorflow/core/kernels/save_restore_v2_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/9728c60e136912a12d99ca56e106b7cce7af5986/tensorflow%2Fcore%2Fkernels%2Fsave_restore_v2_ops.cc', 'patch': '@@ -98,6 +98,7 @@ class SaveV2 : public OpKernel {\\n     const Tensor& shape_and_slices = context->input(2);\\n     ValidateInputs(true /* is save op */, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const int kFixedInputs = 3;  // Prefix, tensor names, shape_and_slices.\\n     const int num_tensors = static_cast<int>(tensor_names.NumElements());\\n@@ -177,6 +178,7 @@ class RestoreV2 : public OpKernel {\\n                                         \" expected dtypes.\"));\\n     ValidateInputs(false /* not save op */, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const string& prefix_string = prefix.scalar<tstring>()();'}}",
      "message_norm": "ensure validation sticks in `save_restore_v2_ops.cc`\n\npiperorigin-revid: 387924206\nchange-id: i6156842eb3230076b5812c0815f3e66bd5241454",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('387924206', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/save_restore_v2_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1978,
      "vuln_id": "GHSA-h3vq-wv8j-36gw",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/LLK/scratch-svg-renderer/commit/7c74ec7de3254143ec3c557677f5355a90a3d07f'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Scratch-Svg-Renderer A DOM-based cross-site scripting (XSS) vulnerability in Scratch-Svg-Renderer v0.2.0 allows attackers to execute arbitrary web scripts or HTML via a crafted sb3 file.",
      "published_date": "2022-01-08",
      "chain_len": 1,
      "project": "https://github.com/LLK/scratch-svg-renderer",
      "commit_href": "https://github.com/LLK/scratch-svg-renderer/commit/7c74ec7de3254143ec3c557677f5355a90a3d07f",
      "commit_sha": "7c74ec7de3254143ec3c557677f5355a90a3d07f",
      "patch": "SINGLE",
      "chain_ord": "['7c74ec7de3254143ec3c557677f5355a90a3d07f']",
      "before_first_fix_commit": "{'d010f2d0edc3ab87ecabb27b9160f91317aa2722'}",
      "last_fix_commit": "7c74ec7de3254143ec3c557677f5355a90a3d07f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/09/2020, 19:50:27",
      "message": "Remove lots of event handlers",
      "author": "Eric Rosenbaum",
      "comments": null,
      "stats": "{'additions': 15, 'deletions': 2, 'total': 17}",
      "files": "{'src/fixup-svg-string.js': {'additions': 15, 'deletions': 2, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/LLK/scratch-svg-renderer/raw/7c74ec7de3254143ec3c557677f5355a90a3d07f/src%2Ffixup-svg-string.js', 'patch': '@@ -50,8 +50,21 @@ module.exports = function (svgString) {\\n     // Empty script tags and javascript executing\\n     svgString = svgString.replace(/<script[\\\\s\\\\S]*>[\\\\s\\\\S]*<\\\\/script>/, \\'<script></script>\\');\\n     \\n-    // Remove error handlers\\n-    svgString = svgString.replace(/onerror=[\\\\s\\\\S]*[\\'\"].*?[\\'\"]/i, \\'\\');\\n+    // Remove event handlers\\n+    const eventNames = [\\n+        \\'onbegin\\', \\'onend\\', \\'onrepeat\\', \\'onabort\\', \\'onerror\\', \\'onresize\\', \\'onscroll\\', \\'onunload\\', \\'oncopy\\',\\n+        \\'oncut\\', \\'onpaste\\', \\'oncancel\\', \\'oncanplay\\', \\'oncanplaythrough\\', \\'onchange\\', \\'onclick\\', \\'onclose\\',\\n+        \\'oncuechange\\', \\'ondblclick\\', \\'ondrag\\', \\'ondragend\\', \\'ondragenter\\', \\'ondragexit\\', \\'ondragleave\\',\\n+        \\'ondragover\\', \\'ondragstart\\', \\'ondrop\\', \\'ondurationchange\\', \\'onloadeddata\\', \\'onloadedmetadata\\',\\n+        \\'onloadstart\\', \\'onmousedown\\', \\'onmouseenter\\', \\'onmouseleave\\', \\'onmousemove\\',\\n+        \\'onemptied\\', \\'onended\\', \\'onerror\\', \\'onfocus\\', \\'oninput\\', \\'oninvalid\\', \\'onkeydown\\', \\'onkeypress\\',\\n+        \\'onkeyup\\', \\'onload\\', \\'onmouseout\\', \\'onmouseover\\', \\'onmouseup\\', \\'onmousewheel\\', \\'onpause\\', \\'onplay\\',\\n+        \\'onplaying\\', \\'onprogress\\', \\'onratechange\\', \\'onreset\\', \\'onresize\\', \\'onscroll\\', \\'onseeked\\', \\'onseeking\\',\\n+        \\'onselect\\', \\'onshow\\', \\'onstalled\\', \\'onsubmit\\', \\'onsuspend\\', \\'ontimeupdate\\', \\'ontoggle\\', \\'onvolumechange\\',\\n+        \\'onwaiting\\', \\'onactivate\\', \\'onfocusin\\', \\'onfocusout\\'\\n+    ];\\n+    const eventsRegex = new RegExp(`(${eventNames.join(\\'|\\')})\\\\\\\\s*=\\\\\\\\s*[\\'\"].*[\\'\"]`, \\'i\\');\\n+    svgString = svgString.replace(eventsRegex, \\'\\');\\n \\n     return svgString;\\n };'}}",
      "message_norm": "remove lots of event handlers",
      "language": "en",
      "entities": "[('remove', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/fixup-svg-string.js'])",
      "num_files": 1.0
    },
    {
      "index": 2727,
      "vuln_id": "GHSA-q99r-j969-6jwr",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/7e9a2ee60baa95ceb4f48f522f823c812ca90c80', 'https://github.com/chakra-core/ChakraCore/commit/31f2588c7ba5b446bccf2769e9ecf4d444b73045'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1138, CVE-2019-1217, CVE-2019-1298, CVE-2019-1300.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/31f2588c7ba5b446bccf2769e9ecf4d444b73045",
      "commit_sha": "31f2588c7ba5b446bccf2769e9ecf4d444b73045",
      "patch": "MULTI",
      "chain_ord": "['31f2588c7ba5b446bccf2769e9ecf4d444b73045', '7e9a2ee60baa95ceb4f48f522f823c812ca90c80']",
      "before_first_fix_commit": "{'edf5eeef49168bbcc30dac82f57048ad46988295', 'c5297b86536fbf1a02d27cec28fea3c516e6ab84'}",
      "last_fix_commit": "7e9a2ee60baa95ceb4f48f522f823c812ca90c80",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/26/2019, 22:39:34",
      "message": "[CVE-2019-1237]",
      "author": "Michael Holman",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'lib/Runtime/Library/BoundFunction.cpp': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/31f2588c7ba5b446bccf2769e9ecf4d444b73045/lib%2FRuntime%2FLibrary%2FBoundFunction.cpp', 'patch': \"@@ -354,6 +354,12 @@ namespace Js\\n             Var varLength;\\n             if (targetFunction->GetProperty(targetFunction, PropertyIds::length, &varLength, nullptr, requestContext))\\n             {\\n+                if (!TaggedInt::Is(varLength))\\n+                {\\n+                    // ToInt32 conversion on non-primitive length can invalidate assumptions made by the JIT,\\n+                    // so add implicit call flag if length isn't a TaggedInt already\\n+                    requestContext->GetThreadContext()->AddImplicitCallFlags(ImplicitCall_Accessor);\\n+                }\\n                 len = JavascriptConversion::ToInt32(varLength, requestContext);\\n             }\"}}",
      "message_norm": "[cve-2019-1237]",
      "language": "ro",
      "entities": "[('cve-2019-1237', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Runtime/Library/BoundFunction.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 738,
      "vuln_id": "GHSA-63m4-fhf2-cmf7",
      "cwe_id": "{'CWE-78'}",
      "score": 9.8,
      "chain": "{'https://github.com/KyleRoss/windows-cpu/commit/b75e19aa2f7459a9506bceb577ba2341fe273117'}",
      "dataset": "osv",
      "summary": "Command Execution in windows-cpu Version of `windows-cpu` before 0.1.5 will execute arbitrary code passed into the first argument of the `findLoad` method, resulting in remote code execution.\n\n## Proof of Concept\n\n```\nvar win = require('windows-cpu');\nwind.findLoad('foo & calc.exe');\n```\n\n\n## Recommendation\n\nUpdate to version 0.1.5 or later.",
      "published_date": "2020-09-01",
      "chain_len": 1,
      "project": "https://github.com/KyleRoss/windows-cpu",
      "commit_href": "https://github.com/KyleRoss/windows-cpu/commit/b75e19aa2f7459a9506bceb577ba2341fe273117",
      "commit_sha": "b75e19aa2f7459a9506bceb577ba2341fe273117",
      "patch": "SINGLE",
      "chain_ord": "['b75e19aa2f7459a9506bceb577ba2341fe273117']",
      "before_first_fix_commit": "{'da656c1a9d5edbf4e8bf0640f349aeb714a4f1a0'}",
      "last_fix_commit": "b75e19aa2f7459a9506bceb577ba2341fe273117",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/13/2017, 04:32:09",
      "message": "ES6 Refactor + fix vulnerability",
      "author": "Kyle Ross",
      "comments": null,
      "stats": "{'additions': 120, 'deletions': 143, 'total': 263}",
      "files": "{'index.js': {'additions': 120, 'deletions': 143, 'changes': 263, 'status': 'modified', 'raw_url': 'https://github.com/KyleRoss/windows-cpu/raw/b75e19aa2f7459a9506bceb577ba2341fe273117/index.js', 'patch': '@@ -1,120 +1,92 @@\\n /**\\n  * windows-cpu module for Node.js to get various load statistics.\\n  * @module windows-cpu\\n- * @version 0.1.4\\n- * @author Kyle Ross <kylerross1324@gmail.com>\\n+ * @version 1.0.0\\n+ * @author Kyle Ross\\n  * @license MIT License\\n- * \\n- * @requires os\\n- * @requires child_process\\n- *\\n- * @example\\n- *\\n- * var cpu = require(\\'windows-cpu\\');\\n  */\\n+\"use strict\";\\n \\n-(function() {\\n-    var platform = require(\\'os\\').platform(),\\n-        path     = require(\\'path\\'),\\n-        exec     = require(\\'child_process\\').exec,\\n-        execFile = require(\\'child_process\\').execFile,\\n-        wmic     = platform === \\'win32\\'? path.join(process.env.SystemRoot, \\'System32\\', \\'wbem\\', \\'wmic.exe\\') : null,\\n-        emptyFn  = function(){},\\n-        findLoad;\\n-    \\n-    /*\\n-     * Checks current platform to ensure we are running on `win32`.\\n-     * @private\\n-     * @param {function} cb A callback function to call if there is an error.\\n-     * @returns {boolean} True if `win32` platform, else false.\\n-     */\\n-    function checkPlatform(cb) {\\n-        if(platform !== \\'win32\\') {\\n-            if(isFunction(cb)) cb(new Error(\\'windows-cpu> [ERROR] This module only works on Windows platforms.\\'));\\n-            return false;\\n-        }\\n-        return true;\\n-    }\\n+const fs = require(\\'fs\\');\\n+const path = require(\\'path\\');\\n+const cp = require(\\'child_process\\');\\n+const platform = require(\\'os\\').platform();\\n+\\n+const exec = cp.exec;\\n+const execFile = cp.execFile;\\n+const wmic = path.join(process.env.SystemRoot, \\'System32\\', \\'wbem\\', \\'wmic.exe\\');\\n+\\n+/**\\n+ * Finds the current processor load of a specific process name or id.\\n+ * @private\\n+ * @param  {String}   arg Process name or id to lookup\\n+ * @param  {Function} cb  Callback to call with results\\n+ */\\n+function findLoad(arg, cb) {\\n+    let cmd = `wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime,IDProcess | findstr /i /c:${arg}`;\\n     \\n-    /*\\n-     * Proper checking to see if variable is a function.\\n-     * @private\\n-     * @param {*} fn The variable to check if is a function.\\n-     * @returns {boolean} True if is a function, else false.\\n-     */\\n-    function isFunction(fn) {\\n-        var getType = {};\\n-        return fn && getType.toString.call(fn) === \\'[object Function]\\';\\n+    exec(cmd, function(error, res, stderr) {\\n+        if(error !== null || stderr) return cb(error || stderr);\\n+        if(!res) return cb(`Cannot find results for provided arg: ${arg}`, { load: 0, results: [] });\\n+        \\n+        let found = res.replace(/[^\\\\S\\\\n]+/g, \\':\\').replace(/:\\\\s/g, \\'|\\').split(\\'|\\').filter(function(v) {\\n+            return !!v;\\n+        }).map(function(v) {\\n+            let [pid, proc, load] = v.split(\\':\\');\\n+            return {\\n+                pid: +pid,\\n+                process: proc,\\n+                load: +load\\n+            };\\n+        });\\n+        \\n+        let load = found.reduce((acc, val) => {\\n+            return acc + val.load;\\n+        }, 0);\\n+        \\n+        cb(null, { load, found });\\n+    });\\n+}\\n+\\n+/**\\n+ * @class Public class for WindowsCPU\\n+ */\\n+class WindowsCPU {\\n+    constructor() {\\n+        /**\\n+         * Access to uninstantiated WindowsCPU class\\n+         * @type {Class}\\n+         */\\n+        this.WindowsCPU = WindowsCPU;\\n+        this.checkPlatform();\\n     }\\n     \\n     /**\\n-     * Gets the total load in percent for process(es) by a specific search parameter.\\n-     * @param {string|number} arg Specific search parameter. Can be a Process ID or Process Name.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n-     * @example\\n-     *\\n-     * var cpu = require(\\'windows-cpu\\');\\n-     *\\n-     * // Find the total load for \"chrome\" processes\\n-     * cpu.findLoad(\\'chrome\\', function(error, results) {\\n-     *      if(error) {\\n-     *          return console.log(error);\\n-     *      }\\n-     *\\n-     *      // results =>\\n-     *      // {\\n-     *      //    load: 8,\\n-     *      //    found: [\\n-     *      //        { pid: \\'900\\', process: \\'chrome\\', load: 4 },\\n-     *      //        { pid: \\'905\\', process: \\'chrome#1\\', load: 0 },\\n-     *      //        { pid: \\'910\\', process: \\'chrome#2\\', load: 4 }\\n-     *      //    ]\\n-     *      // }\\n-     *\\n-     *      console.log(\\'Google Chrome is currently using \\' + results.load + \\'% of the cpu.\\');\\n-     * });\\n+     * Checks if the current platform is supported by windows-cpu\\n+     * @return {Boolean} Returns `true` if platform is supported\\n+     * @throws {Error} If platform is not Windows\\n+     * @throws {Error} If wmic.exe process does not exist or cannot be accessed\\n      */\\n-    findLoad = exports.findLoad = function findLoad(arg, cb) {\\n-        if(!isFunction(cb)) cb = emptyFn;\\n-        if(!checkPlatform(cb)) return;\\n+    checkPlatform() {\\n+        if(platform !== \\'win32\\') \\n+            throw new Error(\\'windows-cpu only works on Windows platforms.\\');\\n         \\n-        var cmd = \"wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime,IDProcess | findstr /i /c:\" + arg;\\n-        exec(cmd, function (error, res, stderr) {\\n-            if(error !== null || stderr) return cb(error || stderr);\\n-            if(!res) return cb(\\'Cannot find results for provided arg: \\' + arg, { load: 0, results: [] });\\n-            \\n-            var found = res.replace(/[^\\\\S\\\\n]+/g, \\':\\').replace(/\\\\:\\\\s/g, \\'|\\').split(\\'|\\').filter(function(v) {\\n-                return !!v;\\n-            }).map(function(v) {\\n-                var data = v.split(\\':\\');\\n-                return {\\n-                    pid: +data[0],\\n-                    process: data[1],\\n-                    load: +data[2]\\n-                };\\n-            });\\n-            \\n-            var totalLoad = 0;\\n-            \\n-            found.forEach(function(obj) {\\n-                totalLoad += obj.load;\\n-            });\\n-            \\n-            var output = {\\n-                load: totalLoad,\\n-                found: found\\n-            };\\n-            \\n-            cb(null, output);\\n-        });\\n-    };\\n+        try {\\n+            fs.accessSync(wmic);\\n+        } catch(e) {\\n+            throw new Error(\\'windows-cpu is not supported on your version of Windows or you are not running as administrator.\\');\\n+        }\\n+        \\n+        return true;\\n+    }\\n     \\n     /**\\n      * Gets the total load in percent for all processes running on the current machine per CPU.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * // Get total load on server for each CPU\\n      * cpu.totalLoad(function(error, results) {\\n@@ -129,27 +101,27 @@\\n      *      // [3, 10]\\n      * });\\n      */\\n-    exports.totalLoad = function totalLoad(cb) {\\n-        if (!isFunction(cb)) cb = emptyFn;\\n-        if (!checkPlatform(cb)) return;\\n-        \\n-        execFile(wmic, [\\'cpu\\', \\'get\\', \\'loadpercentage\\'], function (error, res, stderr) {\\n+    totalLoad(cb) {\\n+        execFile(wmic, [\\'cpu\\', \\'get\\', \\'loadpercentage\\'], function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n             \\n-            var cpus = (res.match(/\\\\d+/g) || []).map(function(x) { \\n+            let cpus = (res.match(/\\\\d+/g) || []).map(function(x) { \\n                 return +(x.trim()); \\n             });\\n             \\n             cb(null, cpus);\\n         });\\n-    };\\n+        \\n+        return this;\\n+    }\\n     \\n     /**\\n-     * Gets the total load in percent for all Node.js processes running on the current machine.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Retrieves the current cpu load for all node processes running on the current machine\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * // Get total load for all node processes\\n      * cpu.nodeLoad(function(error, results) {\\n@@ -167,19 +139,21 @@\\n      *      //    ]\\n      *      // }\\n      *\\n-     *      console.log(\\'Total Node.js Load: \\' + results.load);\\n+     *      console.log(`Total Node.js Load: ${results.load}%`);\\n      * });\\n      */\\n-    exports.nodeLoad = function nodeLoad(cb) {\\n+    nodeLoad(cb) {\\n         findLoad(\\'node\\', cb);\\n-    };\\n+        return this;\\n+    }\\n     \\n     /**\\n-     * Gets the total load in percent for all processes running on the current machine per CPU.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Retrieves the current cpu load for this process.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * // Get load for current running node process\\n      * cpu.processLoad(function(error, results) {\\n@@ -195,19 +169,21 @@\\n      *      //    ]\\n      *      // }\\n      *\\n-     *      console.log(\\'Total Process Load: \\' + results.load);\\n+     *      console.log(`Total Process Load: ${results.load}%`);\\n      * });\\n      */\\n-    exports.processLoad = function processLoad(cb) {\\n+    processLoad(cb) {\\n         findLoad(process.pid, cb);\\n-    };\\n+        return this;\\n+    }\\n     \\n     /**\\n-     * Gets the name of each processor in the machine.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Gets list of all processors in the current machine.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * // Get listing of processors\\n      * cpu.cpuInfo(function(error, results) {\\n@@ -224,28 +200,28 @@\\n      *      console.log(\\'Installed Processors: \\', results);\\n      * });\\n      */\\n-    exports.cpuInfo = function cpuInfo(cb) {\\n-        if(!isFunction(cb)) cb = emptyFn;\\n-        if(!checkPlatform(cb)) return;\\n-        \\n-        execFile(wmic, [\\'cpu\\', \\'get\\', \\'Name\\'], function (error, res, stderr) {\\n+    cpuInfo(cb) {\\n+        execFile(wmic, [\\'cpu\\', \\'get\\', \\'Name\\'], function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n             \\n-            var cpus = res.match(/[^\\\\r\\\\n]+/g).map(function(v) {\\n+            let cpus = res.match(/[^\\\\r\\\\n]+/g).map(function(v) {\\n                 return v.trim();\\n             });\\n             \\n             cpus.shift();\\n             cb(null, cpus);\\n         });\\n-    };\\n-\\n+        \\n+        return this;\\n+    }\\n+    \\n     /**\\n-     * Gets the total memory usage value in KB , MB and GB .\\n-     * @param {function} cb A callback function to handle the result (error, results).\\n+     * Gets the total memory usage on the machine in KB, MB and GB.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * // Get the memory usage\\n      * cpu.totalMemoryUsage(function(error, results) {\\n@@ -263,17 +239,14 @@\\n      *      console.log(\\'Total Memory Usage: \\', result);\\n      * });\\n      */\\n-    exports.totalMemoryUsage = function totalMemoryUsage(cb) {\\n-        if (!isFunction(cb)) cb = emptyFn;\\n-        if (!checkPlatform(cb)) return;\\n-        \\n-        var cmd = \"tasklist /FO csv /nh\";\\n-        exec(cmd, function (error, res, stderr) {\\n+    totalMemoryUsage(cb) {\\n+        let cmd = \\'tasklist /FO csv /nh\\';\\n+        exec(cmd, function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n-            var results = { usageInKb: 0 , usageInMb: 0 , usageInGb: 0 };\\n+            let results = { usageInKb: 0 , usageInMb: 0 , usageInGb: 0 };\\n             \\n             results.usageInKb = res.match(/[^\\\\r\\\\n]+/g).map(function(v) {\\n-                var amt = +v.split(\\'\",\"\\')[4].replace(/[^\\\\d]/g, \\'\\');\\n+                let amt = +v.split(\\'\",\"\\')[4].replace(/[^\\\\d]/g, \\'\\');\\n                 return (!isNaN(amt) && typeof amt === \\'number\\')? amt : 0;\\n             }).reduce(function(prev, current) {\\n                 return prev + current;\\n@@ -284,5 +257,9 @@\\n             \\n             cb(null, results);\\n         });\\n-    };\\n-}());\\n+        \\n+        return this;\\n+    }\\n+}\\n+\\n+module.exports = new WindowsCPU();'}}",
      "message_norm": "es6 refactor + fix vulnerability",
      "language": "ca",
      "entities": "[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 716,
      "vuln_id": "GHSA-5x33-h32w-6vr2",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/moodle/moodle/commit/e8632a4ad0b4da3763cbbe5949594aa449b483bb'}",
      "dataset": "osv",
      "summary": "Cross site-scripting (XSS) moodle The filter in the tag manager required extra sanitizing to prevent a reflected XSS risk. This affects 3.9 to 3.9.1, 3.8 to 3.8.4, 3.7 to 3.7.7, 3.5 to 3.5.13 and earlier unsupported versions. Fixed in 3.9.2, 3.8.5, 3.7.8 and 3.5.14.",
      "published_date": "2021-03-29",
      "chain_len": 1,
      "project": "https://github.com/moodle/moodle",
      "commit_href": "https://github.com/moodle/moodle/commit/e8632a4ad0b4da3763cbbe5949594aa449b483bb",
      "commit_sha": "e8632a4ad0b4da3763cbbe5949594aa449b483bb",
      "patch": "SINGLE",
      "chain_ord": "['e8632a4ad0b4da3763cbbe5949594aa449b483bb']",
      "before_first_fix_commit": "{'630078eb4a189a17378ea6cf19be989da2114c1c'}",
      "last_fix_commit": "e8632a4ad0b4da3763cbbe5949594aa449b483bb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/04/2020, 10:04:27",
      "message": "MDL-69340 tag: Correct the filter input HTML in the tag manager",
      "author": "Michael Hawkins",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'tag/manage.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/moodle/moodle/raw/e8632a4ad0b4da3763cbbe5949594aa449b483bb/tag%2Fmanage.php', 'patch': '@@ -211,7 +211,7 @@\\n print(\\'<div class=\"tag-management-form generalbox\"><label class=\"accesshide\" for=\"id_tagfilter\">\\'. get_string(\\'search\\') .\\'</label>\\'.\\n     \\'<input type=\"hidden\" name=\"tc\" value=\"\\'.$tagcollid.\\'\" />\\'.\\n     \\'<input type=\"hidden\" name=\"perpage\" value=\"\\'.$perpage.\\'\" />\\'.\\n-    \\'<input id=\"id_tagfilter\" name=\"filter\" type=\"text\" value=\\' . s($filter) . \\'>\\'.\\n+    \\'<input id=\"id_tagfilter\" name=\"filter\" type=\"text\" value=\"\\' . s($filter) . \\'\">\\'.\\n     \\'<input value=\"\\'. s(get_string(\\'search\\')) .\\'\" type=\"submit\" class=\"btn btn-secondary\"> \\'.\\n     ($filter !== \\'\\' ? html_writer::link(new moodle_url($PAGE->url, array(\\'filter\\' => null)),\\n         get_string(\\'resetfilter\\', \\'tag\\'), array(\\'class\\' => \\'resetfilterlink\\')) : \\'\\').'}}",
      "message_norm": "mdl-69340 tag: correct the filter input html in the tag manager",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tag/manage.php'])",
      "num_files": 1.0
    },
    {
      "index": 351,
      "vuln_id": "GHSA-4449-hg37-77v8",
      "cwe_id": "{'CWE-78'}",
      "score": 8.6,
      "chain": "{'https://github.com/totaljs/framework/commit/6192491ab2631e7c1d317c221f18ea613e2c18a5'}",
      "dataset": "osv",
      "summary": "Command injection in total.js There is a command injection vulnerability that affects the package total.js before version 3.4.7. The issue occurs in the image.pipe and image.stream functions. The type parameter is used to build the command that is then executed using child_process.spawn. The issue occurs because child_process.spawn is called with the option shell set to true and because the type parameter is not properly sanitized.",
      "published_date": "2021-02-05",
      "chain_len": 1,
      "project": "https://github.com/totaljs/framework",
      "commit_href": "https://github.com/totaljs/framework/commit/6192491ab2631e7c1d317c221f18ea613e2c18a5",
      "commit_sha": "6192491ab2631e7c1d317c221f18ea613e2c18a5",
      "patch": "SINGLE",
      "chain_ord": "['6192491ab2631e7c1d317c221f18ea613e2c18a5']",
      "before_first_fix_commit": "{'79e84ada0a4455a2fe2383bed6436f231290276a'}",
      "last_fix_commit": "6192491ab2631e7c1d317c221f18ea613e2c18a5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/27/2020, 16:36:16",
      "message": "Fixed \"Command Injection\" in `image.stream()` - thank to Sam Sanoop.",
      "author": "Peter Sirka",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'image.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/totaljs/framework/raw/6192491ab2631e7c1d317c221f18ea613e2c18a5/image.js', 'patch': '@@ -38,6 +38,7 @@ const SPAWN_OPT = { shell: true };\\n const D = require(\\'os\\').platform().substring(0, 3).toLowerCase() === \\'win\\' ? \\'\"\\' : \\'\\\\\\'\\';\\n const CMD_CONVERT = { gm: \\'gm\\', im: \\'convert\\', magick: \\'magick\\' };\\n const CMD_CONVERT2 = { gm: \\'gm convert\\', im: \\'convert\\', magick: \\'magick\\' };\\n+const SUPPORTEDIMAGES = { jpg: 1, png: 1, gif: 1, apng: 1, jpeg: 1, heif: 1, heic: 1, webp: 1, ico: 1 };\\n \\n var CACHE = {};\\n var middlewares = {};\\n@@ -322,7 +323,7 @@ ImageProto.stream = function(type, writer) {\\n \\n \\t!self.builder.length && self.minify();\\n \\n-\\tif (!type)\\n+\\tif (!type || !SUPPORTEDIMAGES[type])\\n \\t\\ttype = self.outputType;\\n \\n \\tF.stats.performance.open++;'}}",
      "message_norm": "fixed \"command injection\" in `image.stream()` - thank to sam sanoop.",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('command injection', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['image.js'])",
      "num_files": 1.0
    },
    {
      "index": 763,
      "vuln_id": "GHSA-66gw-5xpf-gfp5",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/ipython/ipython/commit/c2078a53543ed502efd968649fee1125e0eb549c', 'https://github.com/ipython/ipython/commit/7222bd53ad089a65fd610fab4626f9d0ab47dfce'}",
      "dataset": "osv",
      "summary": "Improper Neutralization of Input During Web Page Generation in IPython Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/notebooks path.",
      "published_date": "2022-05-13",
      "chain_len": 2,
      "project": "https://github.com/ipython/ipython",
      "commit_href": "https://github.com/ipython/ipython/commit/c2078a53543ed502efd968649fee1125e0eb549c",
      "commit_sha": "c2078a53543ed502efd968649fee1125e0eb549c",
      "patch": "MULTI",
      "chain_ord": "['7222bd53ad089a65fd610fab4626f9d0ab47dfce', 'c2078a53543ed502efd968649fee1125e0eb549c']",
      "before_first_fix_commit": "{'64966ea2ae0d44a9c059efcb299db66cbc66ef04'}",
      "last_fix_commit": "c2078a53543ed502efd968649fee1125e0eb549c",
      "chain_ord_pos": 2.0,
      "commit_datetime": "06/22/2015, 04:12:34",
      "message": "Set content type in json_error to application/json",
      "author": "Kyle Kelley",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'IPython/html/base/handlers.py': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/ipython/ipython/raw/c2078a53543ed502efd968649fee1125e0eb549c/IPython%2Fhtml%2Fbase%2Fhandlers.py', 'patch': '@@ -339,6 +339,7 @@ def wrapper(self, *args, **kwargs):\\n             message = e.log_message\\n             self.log.warn(message)\\n             self.set_status(e.status_code)\\n+            self.set_header(\\'Content-Type\\', \\'application/json\\')\\n             self.finish(json.dumps(dict(message=message)))\\n         except Exception:\\n             self.log.error(\"Unhandled error in API request\", exc_info=True)\\n@@ -348,6 +349,7 @@ def wrapper(self, *args, **kwargs):\\n             self.set_status(status)\\n             tb_text = \\'\\'.join(traceback.format_exception(t, value, tb))\\n             reply = dict(message=message, traceback=tb_text)\\n+            self.set_header(\\'Content-Type\\', \\'application/json\\')\\n             self.finish(json.dumps(reply))\\n         else:\\n             return result'}}",
      "message_norm": "set content type in json_error to application/json",
      "language": "en",
      "entities": "[('json_error', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['IPython/html/base/handlers.py'])",
      "num_files": 1.0
    },
    {
      "index": 1686,
      "vuln_id": "GHSA-f7q6-xxph-mfm8",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/pimcore/pimcore/commit/3ae96b9d41c117aafa45873ad10077d4b873a3cb'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Pimcore Pimcore prior to version 10.2.10 contains a cross-site scripting vulnerability.",
      "published_date": "2022-01-27",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/3ae96b9d41c117aafa45873ad10077d4b873a3cb",
      "commit_sha": "3ae96b9d41c117aafa45873ad10077d4b873a3cb",
      "patch": "SINGLE",
      "chain_ord": "['3ae96b9d41c117aafa45873ad10077d4b873a3cb']",
      "before_first_fix_commit": "{'fbb2badbb05ec80e4f6f15b52fb2f58cbbf379c4'}",
      "last_fix_commit": "3ae96b9d41c117aafa45873ad10077d4b873a3cb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/25/2022, 11:20:25",
      "message": "disallow html entity names on import - follow up to #11217",
      "author": "Divesh",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'models/DataObject/ClassDefinition/Service.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/3ae96b9d41c117aafa45873ad10077d4b873a3cb/models%2FDataObject%2FClassDefinition%2FService.php', 'patch': \"@@ -315,11 +315,11 @@ public static function generateLayoutTreeFromArray($array, $throwException = fal\\n     {\\n         if (is_array($array) && count($array) > 0) {\\n             if ($name = $array['name'] ?? false) {\\n-                $sanitizedName = htmlentities($name);\\n-                if ($sanitizedName !== $name) {\\n+                if (preg_match('/<.+?>/', $name)) {\\n                     throw new \\\\Exception('not a valid name:' . htmlentities($name));\\n                 }\\n             }\\n+\\n             /** @var LoaderInterface $loader */\\n             $loader = \\\\Pimcore::getContainer()->get('pimcore.implementation_loader.object.' . $array['datatype']);\"}}",
      "message_norm": "disallow html entity names on import - follow up to #11217",
      "language": "en",
      "entities": "[('#11217', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['models/DataObject/ClassDefinition/Service.php'])",
      "num_files": 1.0
    },
    {
      "index": 2799,
      "vuln_id": "GHSA-qq74-vgcf-54c3",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/star7th/showdoc/commit/e5d575928b1371a7e07b09b6592822298335062a'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in ShowDoc ShowDoc is vulnerable to stored cross-site scripting via viva cshtm file upload in in versions 2.10.3 and prior. A patch is available and anticipated to be part of version 2.10.4.",
      "published_date": "2022-03-15",
      "chain_len": 1,
      "project": "https://github.com/star7th/showdoc",
      "commit_href": "https://github.com/star7th/showdoc/commit/e5d575928b1371a7e07b09b6592822298335062a",
      "commit_sha": "e5d575928b1371a7e07b09b6592822298335062a",
      "patch": "SINGLE",
      "chain_ord": "['e5d575928b1371a7e07b09b6592822298335062a']",
      "before_first_fix_commit": "{'ba45d19e1d77a7eea866dab30eff5da552694891'}",
      "last_fix_commit": "e5d575928b1371a7e07b09b6592822298335062a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/14/2022, 05:07:40",
      "message": "bug",
      "author": "star7th",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'server/Application/Api/Model/AttachmentModel.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/star7th/showdoc/raw/e5d575928b1371a7e07b09b6592822298335062a/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -311,6 +311,7 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \".asa\")\\n \\t\\t\\t|| $isDangerStr($filename , \".cshtml\")\\n \\t\\t\\t|| $isDangerStr($filename , \".axd\")\\n+\\t\\t\\t|| $isDangerStr($filename , \"htm\")\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
      "message_norm": "bug",
      "language": "id",
      "entities": "[('bug', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/Application/Api/Model/AttachmentModel.class.php'])",
      "num_files": 1.0
    },
    {
      "index": 2484,
      "vuln_id": "GHSA-mxjj-953w-2c2v",
      "cwe_id": "{'CWE-787', 'CWE-125'}",
      "score": 7.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/8ee24e7949a203d234489f9da2c5bf45a7d5157d'}",
      "dataset": "osv",
      "summary": "Data corruption in tensorflow-lite ### Impact\nWhen determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/types.h#L437-L442\n\nSince the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.\n\n### Patches\nWe have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2020-09-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/8ee24e7949a203d234489f9da2c5bf45a7d5157d",
      "commit_sha": "8ee24e7949a203d234489f9da2c5bf45a7d5157d",
      "patch": "SINGLE",
      "chain_ord": "['8ee24e7949a203d234489f9da2c5bf45a7d5157d']",
      "before_first_fix_commit": "{'0b5662bc2be13a8c8f044d925d87fb6e56247cd8'}",
      "last_fix_commit": "8ee24e7949a203d234489f9da2c5bf45a7d5157d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/18/2020, 21:19:26",
      "message": "[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'tensorflow/lite/kernels/internal/types.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/8ee24e7949a203d234489f9da2c5bf45a7d5157d/tensorflow%2Flite%2Fkernels%2Finternal%2Ftypes.h', 'patch': '@@ -438,7 +438,7 @@ int MatchingArraySize(const ArrayType1& array1, int index1,\\n inline int MatchingDim(const RuntimeShape& shape1, int index1,\\n                        const RuntimeShape& shape2, int index2) {\\n   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));\\n-  return shape1.Dims(index1);\\n+  return std::min(shape1.Dims(index1), shape2.Dims(index2));\\n }\\n \\n template <typename... Args>'}}",
      "message_norm": "[tflite] ensure `matchingdim` does not allow buffer overflow.\n\nwe check in `matchingdim` that both arguments have the same dimensionality, however that is a `dcheck` only enabled if building in debug mode. hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. to fix, we now make `matchingdim` return the minimum of the two sizes.\n\na much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\npiperorigin-revid: 332526127\nchange-id: if627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('buffer overflows', 'SECWORD', ''), ('fix', 'ACTION', ''), ('332526127', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/internal/types.h'])",
      "num_files": 1.0
    },
    {
      "index": 3014,
      "vuln_id": "GHSA-rv6r-3f5q-9rgx",
      "cwe_id": "{'CWE-120'}",
      "score": 7.5,
      "chain": "{'https://github.com/twisted/twisted/commit/98387b39e9f0b21462f6abc7a1325dc370fcdeb1', 'https://github.com/twisted/twisted/commit/89c395ee794e85a9657b112c4351417850330ef9'}",
      "dataset": "osv",
      "summary": "Twisted SSH client and server deny of service during SSH handshake. ### Impact\n\nThe Twisted SSH client and server implementation naively accepted an infinite amount of data for the  peer's SSH version identifier.\n\nA malicious peer can trivially craft a request that uses all available memory and crash the server, resulting in denial of service. The attack is as simple as `nc -rv localhost 22 < /dev/zero`.\n\n### Patches\n\nThe issue was fix in GitHub commit https://github.com/twisted/twisted/commit/98387b39e9f0b21462f6abc7a1325dc370fcdeb1\n\nA fix is available in Twisted 22.2.0.\n\n### Workarounds\n\n* Limit access to the SSH server only to trusted source IP addresses.\n* Connect over SSH only to trusted destination IP addresses.\n\n### References\n\nReported at https://twistedmatrix.com/trac/ticket/10284\nDiscussions at https://github.com/twisted/twisted/security/advisories/GHSA-rv6r-3f5q-9rgx\n\n### For more information\n\nFound by vin01",
      "published_date": "2022-03-03",
      "chain_len": 2,
      "project": "https://github.com/twisted/twisted",
      "commit_href": "https://github.com/twisted/twisted/commit/89c395ee794e85a9657b112c4351417850330ef9",
      "commit_sha": "89c395ee794e85a9657b112c4351417850330ef9",
      "patch": "MULTI",
      "chain_ord": "['98387b39e9f0b21462f6abc7a1325dc370fcdeb1', '89c395ee794e85a9657b112c4351417850330ef9']",
      "before_first_fix_commit": "{'2b2af4d66e878d66572babcbcbd2d3dc7d6a09f2'}",
      "last_fix_commit": "89c395ee794e85a9657b112c4351417850330ef9",
      "chain_ord_pos": 2.0,
      "commit_datetime": "03/01/2022, 10:39:34",
      "message": "Update the release date.",
      "author": "Adi Roiban",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'NEWS.rst': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/twisted/twisted/raw/89c395ee794e85a9657b112c4351417850330ef9/NEWS.rst', 'patch': '@@ -3,8 +3,8 @@ http://twistedmatrix.com/trac/ticket/<number>\\n \\n .. towncrier release notes start\\n \\n-Twisted 22.2.0.rc1 (2022-02-08)\\n-===============================\\n+Twisted 22.2.0 (2022-03-01)\\n+===========================\\n \\n Bugfixes\\n --------'}}",
      "message_norm": "update the release date.",
      "language": "en",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['NEWS.rst'])",
      "num_files": 1.0
    },
    {
      "index": 1679,
      "vuln_id": "GHSA-f78f-353m-cf4j",
      "cwe_id": "{'CWE-94'}",
      "score": 9.8,
      "chain": "{'https://github.com/mithunsatheesh/node-rules/commit/100862223904bb6478fcc33b701c7dee11f7b832'}",
      "dataset": "osv",
      "summary": "Code Injection in node-rules node-rules including 3.0.0 and prior to 5.0.0 allows injection of arbitrary commands. The argument rules of function \"fromJSON()\" can be controlled by users without any sanitization.",
      "published_date": "2021-12-10",
      "chain_len": 1,
      "project": "https://github.com/mithunsatheesh/node-rules",
      "commit_href": "https://github.com/mithunsatheesh/node-rules/commit/100862223904bb6478fcc33b701c7dee11f7b832",
      "commit_sha": "100862223904bb6478fcc33b701c7dee11f7b832",
      "patch": "SINGLE",
      "chain_ord": "['100862223904bb6478fcc33b701c7dee11f7b832']",
      "before_first_fix_commit": "{'1b07c48336ce30aa6d3b6b3be1850cd292860dbb'}",
      "last_fix_commit": "100862223904bb6478fcc33b701c7dee11f7b832",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/16/2020, 13:43:37",
      "message": "Remove fromJSON and toJSON from exposed APIs\n\nRemove fromJSON and toJSON from exposed APIs in V5.0.0",
      "author": "Mithun Satheesh",
      "comments": null,
      "stats": "{'additions': 0, 'deletions': 31, 'total': 31}",
      "files": "{'lib/node-rules.js': {'additions': 0, 'deletions': 31, 'changes': 31, 'status': 'modified', 'raw_url': 'https://github.com/mithunsatheesh/node-rules/raw/100862223904bb6478fcc33b701c7dee11f7b832/lib%2Fnode-rules.js', 'patch': '@@ -128,36 +128,5 @@\\n         }\\n         this.sync();\\n     }\\n-    RuleEngine.prototype.toJSON = function() {\\n-        var rules = this.rules;\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = rule.condition.toString();\\n-                rule.consequence = rule.consequence.toString();\\n-                return rule;\\n-            });\\n-        } else if (typeof(rules) != \"undefined\") {\\n-            rules.condition = rules.condition.toString();\\n-            rules.consequence = rules.consequence.toString();\\n-        }\\n-        return rules;\\n-    };\\n-    RuleEngine.prototype.fromJSON = function(rules) {\\n-        this.init();\\n-        if (typeof(rules) == \"string\") {\\n-            rules = JSON.parse(rules);\\n-        }\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = eval(\"(\" + rule.condition + \")\");\\n-                rule.consequence = eval(\"(\" + rule.consequence + \")\");\\n-                return rule;\\n-            });\\n-        } else if (rules !== null && typeof(rules) == \"object\") {\\n-            rules.condition = eval(\"(\" + rules.condition + \")\");\\n-            rules.consequence = eval(\"(\" + rules.consequence + \")\");\\n-        }\\n-        this.register(rules);\\n-    };\\n     module.exports = RuleEngine;\\n }(module.exports));'}}",
      "message_norm": "remove fromjson and tojson from exposed apis\n\nremove fromjson and tojson from exposed apis in v5.0.0",
      "language": "en",
      "entities": "[('remove', 'ACTION', ''), ('exposed apis', 'SECWORD', ''), ('exposed apis', 'SECWORD', ''), ('v5.0.0', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/node-rules.js'])",
      "num_files": 1.0
    },
    {
      "index": 239,
      "vuln_id": "GHSA-3cgf-9m6x-pwwr",
      "cwe_id": "{'CWE-362'}",
      "score": 9.8,
      "chain": "{'https://github.com/rusqlite/rusqlite/commit/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f'}",
      "dataset": "osv",
      "summary": "Data races in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via UnlockNotification.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/rusqlite/rusqlite",
      "commit_href": "https://github.com/rusqlite/rusqlite/commit/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
      "commit_sha": "45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
      "patch": "SINGLE",
      "chain_ord": "['45fd77ee43c38eea4d6f4e2e56c1667a55ec654f']",
      "before_first_fix_commit": "{'c9ef5bd63cad5c0c123344c072b490a1a9bcbe1f'}",
      "last_fix_commit": "45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/15/2020, 19:05:31",
      "message": "UnlockNotification should hold mutex when calling condvar",
      "author": "Thom Chiovoloni",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 11, 'total': 20}",
      "files": "{'src/unlock_notify.rs': {'additions': 9, 'deletions': 11, 'changes': 20, 'status': 'modified', 'raw_url': 'https://github.com/rusqlite/rusqlite/raw/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f/src%2Funlock_notify.rs', 'patch': '@@ -26,12 +26,13 @@ impl UnlockNotification {\\n         }\\n     }\\n \\n-    fn fired(&mut self) {\\n-        *self.mutex.lock().unwrap() = true;\\n+    fn fired(&self) {\\n+        let mut flag = self.mutex.lock().unwrap();\\n+        *flag = true;\\n         self.cond.notify_one();\\n     }\\n \\n-    fn wait(&mut self) {\\n+    fn wait(&self) {\\n         let mut fired = self.mutex.lock().unwrap();\\n         while !*fired {\\n             fired = self.cond.wait(fired).unwrap();\\n@@ -43,12 +44,9 @@ impl UnlockNotification {\\n #[cfg(feature = \"unlock_notify\")]\\n unsafe extern \"C\" fn unlock_notify_cb(ap_arg: *mut *mut c_void, n_arg: c_int) {\\n     use std::slice::from_raw_parts;\\n-    let args = from_raw_parts(ap_arg, n_arg as usize);\\n-    for arg in args {\\n-        let _ = catch_unwind(|| {\\n-            let un: &mut UnlockNotification = &mut *(*arg as *mut UnlockNotification);\\n-            un.fired()\\n-        });\\n+    let args = from_raw_parts(ap_arg as *const &UnlockNotification, n_arg as usize);\\n+    for un in args {\\n+        let _ = catch_unwind(std::panic::AssertUnwindSafe(|| un.fired()));\\n     }\\n }\\n \\n@@ -73,12 +71,12 @@ pub unsafe fn is_locked(db: *mut ffi::sqlite3, rc: c_int) -> bool {\\n /// back the current transaction (if any).\\n #[cfg(feature = \"unlock_notify\")]\\n pub unsafe fn wait_for_unlock_notify(db: *mut ffi::sqlite3) -> c_int {\\n-    let mut un = UnlockNotification::new();\\n+    let un = UnlockNotification::new();\\n     /* Register for an unlock-notify callback. */\\n     let rc = ffi::sqlite3_unlock_notify(\\n         db,\\n         Some(unlock_notify_cb),\\n-        &mut un as *mut UnlockNotification as *mut c_void,\\n+        &un as *const UnlockNotification as *mut c_void,\\n     );\\n     debug_assert!(\\n         rc == ffi::SQLITE_LOCKED || rc == ffi::SQLITE_LOCKED_SHAREDCACHE || rc == ffi::SQLITE_OK'}}",
      "message_norm": "unlocknotification should hold mutex when calling condvar",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/unlock_notify.rs'])",
      "num_files": 1.0
    },
    {
      "index": 3279,
      "vuln_id": "GHSA-wh98-p28r-vrc9",
      "cwe_id": "{'CWE-200'}",
      "score": 7.4,
      "chain": "{'https://github.com/rails/rails/commit/f9a2ad03943d5c2ba54e1d45f155442b519c75da'}",
      "dataset": "osv",
      "summary": "Exposure of information in Action Pack ### Impact\n\nUnder certain circumstances response bodies will not be closed, for example a [bug in a webserver](https://github.com/puma/puma/pull/2812) or a bug in a Rack middleware.  In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request.  This can lead to data being leaked to subsequent requests, especially when interacting with `ActiveSupport::CurrentAttributes`.\n\nUpgrading to the FIXED versions of Rails will ensure mitigation of this issue even in the context of a buggy webserver or middleware implementation.\n\n### Patches\n\nThis has been fixed in Rails 7.0.2.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\n### Workarounds\n\nUpgrading is highly recommended, but to work around this problem the following middleware can be used:\n\n```ruby\nclass GuardedExecutor < ActionDispatch::Executor\n  def call(env)\n    ensure_completed!\n    super\n  end\n\n  private\n\n    def ensure_completed!\n      @executor.new.complete! if @executor.active?\n    end\nend\n\n# Ensure the guard is inserted before ActionDispatch::Executor\nRails.application.configure do\n  config.middleware.swap ActionDispatch::Executor, GuardedExecutor, executor\nend\n```",
      "published_date": "2022-02-11",
      "chain_len": 1,
      "project": "https://github.com/rails/rails",
      "commit_href": "https://github.com/rails/rails/commit/f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "commit_sha": "f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "patch": "SINGLE",
      "chain_ord": "['f9a2ad03943d5c2ba54e1d45f155442b519c75da']",
      "before_first_fix_commit": "{'761a2e25520566d932c41c740b8a5c513d839de8'}",
      "last_fix_commit": "f9a2ad03943d5c2ba54e1d45f155442b519c75da",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/11/2022, 19:23:01",
      "message": "Fix reloader to work with new Executor signature\n\nThis is a follow up to [CVE-2022-23633].",
      "author": "Aaron Patterson",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'activesupport/lib/active_support/reloader.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/rails/rails/raw/f9a2ad03943d5c2ba54e1d45f155442b519c75da/activesupport%2Flib%2Factive_support%2Freloader.rb', 'patch': '@@ -58,7 +58,7 @@ def self.reload!\\n       prepare!\\n     end\\n \\n-    def self.run! # :nodoc:\\n+    def self.run!(reset: false) # :nodoc:\\n       if check!\\n         super\\n       else'}}",
      "message_norm": "fix reloader to work with new executor signature\n\nthis is a follow up to [cve-2022-23633].",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('signature', 'SECWORD', ''), ('cve-2022-23633', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['activesupport/lib/active_support/reloader.rb'])",
      "num_files": 1.0
    },
    {
      "index": 2186,
      "vuln_id": "GHSA-j47f-4232-hvv8",
      "cwe_id": "{'CWE-125'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a'}",
      "dataset": "osv",
      "summary": "Heap out of bounds read in `RaggedCross` ### Impact\nAn attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:\n\n```python\nimport tensorflow as tf\n\nragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    out_row_splits_type=tf.int64)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:\n\n```cc\nint next_ragged = 0;\nint next_sparse = 0;\nint next_dense = 0;\nfor (char c : input_order_) {\n  if (c == 'R') {\n    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n        features));\n    next_ragged++;\n  } else if (c == 'S') {\n    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n        batch_size, features));\n    next_sparse++;\n  } else if (c == 'D') {\n    TF_RETURN_IF_ERROR(\n        BuildDenseFeatureReader(dense_list[next_dense++], features));\n  }\n  ...\n}\n```\n\nEach of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.\n\n### Patches\nWe have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a",
      "commit_sha": "44b7f486c0143f68b56c34e2d01e146ee445134a",
      "patch": "SINGLE",
      "chain_ord": "['44b7f486c0143f68b56c34e2d01e146ee445134a']",
      "before_first_fix_commit": "{'efea03b38fb8d3b81762237dc85e579cc5fc6e87'}",
      "last_fix_commit": "44b7f486c0143f68b56c34e2d01e146ee445134a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/21/2021, 23:19:54",
      "message": "Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 30, 'deletions': 0, 'total': 30}",
      "files": "{'tensorflow/core/kernels/ragged_cross_op.cc': {'additions': 30, 'deletions': 0, 'changes': 30, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow%2Fcore%2Fkernels%2Fragged_cross_op.cc', 'patch': '@@ -21,6 +21,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/register_types.h\"\\n #include \"tensorflow/core/framework/tensor.h\"\\n #include \"tensorflow/core/framework/tensor_shape.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n #include \"tensorflow/core/platform/fingerprint.h\"\\n #include \"tensorflow/core/util/util.h\"\\n #include \"tensorflow/core/util/work_sharder.h\"\\n@@ -466,16 +467,45 @@ class RaggedCrossOp : public OpKernel {\\n     int next_dense = 0;\\n     for (char c : input_order_) {\\n       if (c == \\'R\\') {\\n+        if (next_ragged >= ragged_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor value at index \",\\n+              next_ragged, \" from a list of \", ragged_values_list.size(),\\n+              \" values.\");\\n+        if (next_ragged >= ragged_splits_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor split at index \",\\n+              next_ragged, \" from a list of \", ragged_splits_list.size(),\\n+              \" splits.\");\\n         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\\n             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\\n             features));\\n         next_ragged++;\\n       } else if (c == \\'S\\') {\\n+        if (next_sparse >= sparse_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor value at index \",\\n+              next_sparse, \" from a list of \", sparse_values_list.size(),\\n+              \" values.\");\\n+        if (next_sparse >= sparse_indices_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor index at index \",\\n+              next_sparse, \" from a list of \", sparse_indices_list.size(),\\n+              \" indices.\");\\n         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\\n             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\\n             batch_size, features));\\n         next_sparse++;\\n       } else if (c == \\'D\\') {\\n+        if (next_dense >= dense_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a dense tensor at index \", next_dense,\\n+              \" from a list of \", dense_list.size(), \" tensors.\");\\n         TF_RETURN_IF_ERROR(\\n             BuildDenseFeatureReader(dense_list[next_dense++], features));\\n       } else {'}}",
      "message_norm": "fix out of bounds read in `ragged_cross_op.cc`.\n\npiperorigin-revid: 369757702\nchange-id: ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('out of bounds read', 'SECWORD', ''), ('369757702', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ragged_cross_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 389,
      "vuln_id": "GHSA-4952-p58q-6crx",
      "cwe_id": "{'CWE-87', 'CWE-79', 'CWE-75'}",
      "score": 7.4,
      "chain": "{'https://github.com/jupyterlab/jupyterlab/commit/504825938c0abfa2fb8ff8d529308830a5ae42ed'}",
      "dataset": "osv",
      "summary": "JupyterLab: XSS due to lack of sanitization of the action attribute of an html <form> ### Impact\n\nUntrusted notebook can execute code on load. This is a remote code execution, but requires user action to open a notebook.\n\n### Patches\n\nPatched in the following versions: 3.1.4, 3.0.17, 2.3.2, 2.2.10, 1.2.21.\n\n### References\n\n[OWASP Page on Restricting Form Submissions](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)\n\n### For more information\n\nIf you have any questions or comments about this advisory, or vulnerabilities to report, please email our security list security@ipython.org.\n\nCredit: Guillaume Jeanne from Google",
      "published_date": "2021-08-23",
      "chain_len": 1,
      "project": "https://github.com/jupyterlab/jupyterlab",
      "commit_href": "https://github.com/jupyterlab/jupyterlab/commit/504825938c0abfa2fb8ff8d529308830a5ae42ed",
      "commit_sha": "504825938c0abfa2fb8ff8d529308830a5ae42ed",
      "patch": "SINGLE",
      "chain_ord": "['504825938c0abfa2fb8ff8d529308830a5ae42ed']",
      "before_first_fix_commit": "{'ccb65656e3ed9c47d3e6fedbcff2405885d0bcaa'}",
      "last_fix_commit": "504825938c0abfa2fb8ff8d529308830a5ae42ed",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/05/2021, 16:42:03",
      "message": "Merge pull request from GHSA-4952-p58q-6crx\n\nRemove `form` tags' `action` attribute during sanitizing.\n\nCo-authored-by: Afshin Taylor Darian <git@darian.af>",
      "author": "Steven Silvester",
      "comments": null,
      "stats": "{'additions': 0, 'deletions': 1, 'total': 1}",
      "files": "{'packages/apputils/src/sanitizer.ts': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/jupyterlab/jupyterlab/raw/504825938c0abfa2fb8ff8d529308830a5ae42ed/packages%2Fapputils%2Fsrc%2Fsanitizer.ts', 'patch': \"@@ -624,7 +624,6 @@ export class Sanitizer implements ISanitizer {\\n       font: ['color', 'face', 'size'],\\n       form: [\\n         'accept',\\n-        'action',\\n         'autocomplete',\\n         'enctype',\\n         'method',\"}}",
      "message_norm": "merge pull request from ghsa-4952-p58q-6crx\n\nremove `form` tags' `action` attribute during sanitizing.\n\nco-authored-by: afshin taylor darian <git@darian.af>",
      "language": "en",
      "entities": "[('ghsa-4952-p58q-6crx', 'VULNID', 'GHSA'), ('remove', 'ACTION', ''), ('sanitizing', 'SECWORD', ''), ('git@darian.af', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['packages/apputils/src/sanitizer.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2921,
      "vuln_id": "GHSA-rcvx-rmvf-mxch",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/eclipse/hawkbit/commit/94b7c12cde1b38eda5414bd88d6d068008cfb9f9'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Eclipse Hawkbit In all version of Eclipse Hawkbit prior to 0.3.0M7, the HTTP 404 (Not Found) JSON response body returned by the REST API may contain unsafe characters within the path attribute. Sending a POST request to a non existing resource will return the full path from the given URL unescaped to the client.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/eclipse/hawkbit",
      "commit_href": "https://github.com/eclipse/hawkbit/commit/94b7c12cde1b38eda5414bd88d6d068008cfb9f9",
      "commit_sha": "94b7c12cde1b38eda5414bd88d6d068008cfb9f9",
      "patch": "SINGLE",
      "chain_ord": "['94b7c12cde1b38eda5414bd88d6d068008cfb9f9']",
      "before_first_fix_commit": "{'8816396d18880d2020743ce2e83a08446449d0db'}",
      "last_fix_commit": "94b7c12cde1b38eda5414bd88d6d068008cfb9f9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/12/2021, 10:56:44",
      "message": "Fixes #1067\n\nJSON body response for HTTP 404 error may contain unsafe URL path characters. Thus removing path from the response\n\nSigned-off-by: Dominic Schabel <dominic.schabel@bosch.io>",
      "author": "Dominic Schabel",
      "comments": null,
      "stats": "{'additions': 22, 'deletions': 4, 'total': 26}",
      "files": "{'hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/ErrorController.java': {'additions': 22, 'deletions': 4, 'changes': 26, 'status': 'renamed', 'raw_url': 'https://github.com/eclipse/hawkbit/raw/94b7c12cde1b38eda5414bd88d6d068008cfb9f9/hawkbit-runtime%2Fhawkbit-update-server%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Fhawkbit%2Fapp%2FErrorController.java', 'patch': '@@ -8,6 +8,8 @@\\n  */\\n package org.eclipse.hawkbit.app;\\n \\n+import java.util.Map;\\n+\\n import javax.servlet.http.HttpServletRequest;\\n import javax.servlet.http.HttpServletResponse;\\n \\n@@ -23,22 +25,23 @@\\n /**\\n  * Error page controller that ensures that ocet stream does not return text in\\n  * case of an error.\\n- *\\n  */\\n @Controller\\n // Exception squid:S3752 - errors need handling for all methods\\n @SuppressWarnings(\"squid:S3752\")\\n-public class StreamAwareErrorController extends BasicErrorController {\\n+public class ErrorController extends BasicErrorController {\\n+\\n+    private static final String PATH = \"path\";\\n \\n     /**\\n-     * A new {@link StreamAwareErrorController}.\\n+     * A new {@link ErrorController}.\\n      * \\n      * @param errorAttributes\\n      *            the error attributes\\n      * @param serverProperties\\n      *            configuration properties\\n      */\\n-    public StreamAwareErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {\\n+    public ErrorController(final ErrorAttributes errorAttributes, final ServerProperties serverProperties) {\\n         super(errorAttributes, serverProperties.getError());\\n     }\\n \\n@@ -48,4 +51,19 @@ public ResponseEntity<Void> errorStream(final HttpServletRequest request, final\\n         return new ResponseEntity<>(status);\\n     }\\n \\n+    @Override\\n+    @RequestMapping\\n+    public ResponseEntity<Map<String, Object>> error(final HttpServletRequest request) {\\n+        final HttpStatus status = getStatus(request);\\n+        final Map<String, Object> body = getErrorAttributesWithoutPath(request);\\n+        return new ResponseEntity<>(body, status);\\n+    }\\n+\\n+    private Map<String, Object> getErrorAttributesWithoutPath(final HttpServletRequest request) {\\n+        final Map<String, Object> body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));\\n+        if (body != null && body.containsKey(PATH)) {\\n+            body.remove(PATH);\\n+        }\\n+        return body;\\n+    }\\n }'}}",
      "message_norm": "fixes #1067\n\njson body response for http 404 error may contain unsafe url path characters. thus removing path from the response\n\nsigned-off-by: dominic schabel <dominic.schabel@bosch.io>",
      "language": "en",
      "entities": "[('fixes', 'ACTION', ''), ('#1067', 'ISSUE', ''), ('error', 'FLAW', ''), ('unsafe', 'SECWORD', ''), ('removing', 'ACTION', ''), ('dominic.schabel@bosch.io', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/ErrorController.java'])",
      "num_files": 1.0
    },
    {
      "index": 858,
      "vuln_id": "GHSA-6jp6-9rf9-gc66",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/WeblateOrg/weblate/commit/9e19a8414337692cc90da2a91c9af5420f2952f1', 'https://github.com/WeblateOrg/weblate/commit/f6753a1a1c63fade6ad418fbda827c6750ab0bda', 'https://github.com/WeblateOrg/weblate/commit/22d577b1f1e88665a88b4569380148030e0f8389'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Weblate ### Impact\nDue to improper neutralization, it was possible to perform cross-site scripting via crafted user and language names.\n\n### Patches\n\nThe issues were fixed in the 4.11 release. The following commits are addressing it:\n\n* f6753a1a1c63fade6ad418fbda827c6750ab0bda\n* 9e19a8414337692cc90da2a91c9af5420f2952f1\n* 22d577b1f1e88665a88b4569380148030e0f8389\n\n### Workarounds\n\nYou can look for crafted user and language names to see if you were affected.\n\n### References\n* https://hackerone.com/reports/1486674\n* https://hackerone.com/reports/1486718\n* https://hackerone.com/reports/1485226\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a topic in [discussions](https://github.com/WeblateOrg/weblate/discussions)\n* Email us at [care@weblate.org](mailto:care@weblate.org)",
      "published_date": "2022-02-25",
      "chain_len": 3,
      "project": "https://github.com/WeblateOrg/weblate",
      "commit_href": "https://github.com/WeblateOrg/weblate/commit/9e19a8414337692cc90da2a91c9af5420f2952f1",
      "commit_sha": "9e19a8414337692cc90da2a91c9af5420f2952f1",
      "patch": "MULTI",
      "chain_ord": "['22d577b1f1e88665a88b4569380148030e0f8389', '9e19a8414337692cc90da2a91c9af5420f2952f1', 'f6753a1a1c63fade6ad418fbda827c6750ab0bda']",
      "before_first_fix_commit": "{'572628cef60e9d839b79b2087960b606a5cca4d8'}",
      "last_fix_commit": "f6753a1a1c63fade6ad418fbda827c6750ab0bda",
      "chain_ord_pos": 2.0,
      "commit_datetime": "02/22/2022, 20:00:41",
      "message": "js: Add missing escaping to username completion\n\nFixes https://hackerone.com/reports/1486674",
      "author": "Michal \u010ciha\u0159",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'weblate/static/loader-bootstrap.js': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/WeblateOrg/weblate/raw/9e19a8414337692cc90da2a91c9af5420f2952f1/weblate%2Fstatic%2Floader-bootstrap.js', 'patch': '@@ -1131,7 +1131,9 @@ $(function () {\\n       return \"\";\\n     },\\n     menuItemTemplate: function (item) {\\n-      return `<a>${item.string}</a>`;\\n+      let link = document.createElement(\"a\");\\n+      link.innerText = item.string;\\n+      return link.outerHTML;\\n     },\\n     values: (text, callback) => {\\n       $.ajax({'}}",
      "message_norm": "js: add missing escaping to username completion\n\nfixes https://hackerone.com/reports/1486674",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('https://hackerone.com/reports/1486674', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['weblate/static/loader-bootstrap.js'])",
      "num_files": 1.0
    },
    {
      "index": 2471,
      "vuln_id": "GHSA-mvqp-q37c-wf9j",
      "cwe_id": "{'CWE-74'}",
      "score": 7.5,
      "chain": "{'https://github.com/ratpack/ratpack/commit/c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae', 'https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects io.ratpack:ratpack-core ## CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\n\nVersions of Ratpack 0.9.1 through and including 1.7.4 are vulnerable to [HTTP Response Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting), \nif untrusted and unsanitized data is used to populate the headers of an HTTP response.\nAn attacker can utilize this vulnerability to have the server issue any HTTP response they specify.\n\nIf your application uses arbitrary user input as the value of a response header it is vulnerable.\nIf your application does not use arbitrary values as response header values, it is not vulnerable.\n\nPreviously, Ratpack did not validate response header values.\nNow, adding a header value that contains the header value termination characters (CRLF) produces a runtime exception.\nSince there is no mechanism for escaping or encoding the termination characters in a String, a runtime exception is necessary.\n\nAs potentially dangerous values now cause runtime exceptions, it is a good idea to continue to validate and sanitize any user-supplied values being used as response headers.\n\nWe would like to thank [Jonathan Leitschuh](https://github.com/JLLeitschuh) for reporting this vulnerability.\n\n### Vulnerable Example\n\nThe following example server uses a query parameter value as a response header, without validating or sanitizing it.\n```java\nRatpackServer startedServer =  RatpackServer.start(server -> {\n    server.handlers(chain -> chain.all(ctx -> {\n        // User supplied query parameter\n        String header = ctx.getRequest().getQueryParams().get(\"header\");\n        // User supplied data used to populate a header value.\n        ctx.header(\"the-header\", header)\n            .render(\"OK!\");\n    }));\n});\n```\n\nSending a request to the server with the following value for the `header` query param would allow the execution of arbitrary Javascript.\n\n```\nContent-Type: text/html\nX-XSS-Protection: 0\n\n<script>alert(document.domain)</script>\n```\n\n### Impact\n\n- Cross-User Defacement\n- Cache Poisoning\n- Cross-Site Scripting\n- Page Hijacking\n\n### Patches\n\nThis vulnerability has been patched in Ratpack version 1.7.5.\n\n### Root Cause\n\nThe root cause was due to using the netty `DefaultHttpHeaders` object with verification disabled.\n\nhttps://github.com/ratpack/ratpack/blob/af1e8c8590f164d7dd84d4212886fad4ead99080/ratpack-core/src/main/java/ratpack/server/internal/NettyHandlerAdapter.java#L159\n\nThis vulnerability is now more clearly documented in the Netty documentation: https://github.com/netty/netty/pull/9646\n\n### Workarounds\n\nThe workaround for this vulnerability is to either not use arbitrary input as response header values or validate such values before being used to ensure they don't contain a carriage return and/or line feed characters.\n\n### References\n\n - [CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https://cwe.mitre.org/data/definitions/113.html)\n - Fix commit: https://github.com/ratpack/ratpack/commit/efb910d38a96494256f36675ef0e5061097dd77d\n \n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [ratpack/ratpack](https://github.com/ratpack/ratpack/issues)\n* Ask in our [Slack channel](https://slack-signup.ratpack.io/)",
      "published_date": "2019-10-21",
      "chain_len": 2,
      "project": "https://github.com/ratpack/ratpack",
      "commit_href": "https://github.com/ratpack/ratpack/commit/c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae",
      "commit_sha": "c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae",
      "patch": "MULTI",
      "chain_ord": "['efb910d38a96494256f36675ef0e5061097dd77d', 'c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae']",
      "before_first_fix_commit": "{'efb910d38a96494256f36675ef0e5061097dd77d'}",
      "last_fix_commit": "c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae",
      "chain_ord_pos": 2.0,
      "commit_datetime": "10/08/2019, 23:43:23",
      "message": "Add test for response header validation",
      "author": "Luke Daley",
      "comments": null,
      "stats": "{'additions': 42, 'deletions': 0, 'total': 42}",
      "files": "{'ratpack-core/src/test/groovy/ratpack/http/ResponseHeaderValidationSpec.groovy': {'additions': 42, 'deletions': 0, 'changes': 42, 'status': 'added', 'raw_url': 'https://github.com/ratpack/ratpack/raw/c560a8d10cb8bdd7a526c1ca2e67c8f224ca23ae/ratpack-core%2Fsrc%2Ftest%2Fgroovy%2Fratpack%2Fhttp%2FResponseHeaderValidationSpec.groovy', 'patch': '@@ -0,0 +1,42 @@\\n+/*\\n+ * Copyright 2019 the original author or authors.\\n+ *\\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\\n+ * you may not use this file except in compliance with the License.\\n+ * You may obtain a copy of the License at\\n+ *\\n+ *    http://www.apache.org/licenses/LICENSE-2.0\\n+ *\\n+ * Unless required by applicable law or agreed to in writing, software\\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n+ * See the License for the specific language governing permissions and\\n+ * limitations under the License.\\n+ */\\n+\\n+package ratpack.http\\n+\\n+import ratpack.test.internal.RatpackGroovyDslSpec\\n+\\n+class ResponseHeaderValidationSpec extends RatpackGroovyDslSpec {\\n+\\n+  def \"invalid header values yield exception\"() {\\n+    when:\\n+    handlers {\\n+      all {\\n+        try {\\n+          header(\"Test\", \"value\\\\r\\\\nAnotherHeader: another value\")\\n+          render \"ok\"\\n+        } catch (e) {\\n+          render e.toString()\\n+        }\\n+      }\\n+    }\\n+\\n+    then:\\n+    def response = get()\\n+    response.headers.names == [\\'content-type\\', \\'content-length\\'].toSet()\\n+    response.body.text == \"java.lang.IllegalArgumentException: only \\' \\' and \\'\\\\\\\\t\\' are allowed after \\'\\\\\\\\n\\': value\\\\r\\\\nAnotherHeader: another value\"\\n+  }\\n+\\n+}'}}",
      "message_norm": "add test for response header validation",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('header validation', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ratpack-core/src/test/groovy/ratpack/http/ResponseHeaderValidationSpec.groovy'])",
      "num_files": 1.0
    },
    {
      "index": 3159,
      "vuln_id": "GHSA-vq36-27g6-p492",
      "cwe_id": "{'CWE-125'}",
      "score": 8.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c99d98cd189839dcf51aee94e7437b54b31f8abd'}",
      "dataset": "osv",
      "summary": "Out of bounds read in Tensorflow ### Impact\nTensorFlow's [type inference](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L223-L229) can cause a heap OOB read as the bounds checking is done in a `DCHECK` (which is a no-op during production):\n\n```cc\nif (node_t.type_id() != TFT_UNSET) {\n  int ix = input_idx[i];\n  DCHECK(ix < node_t.args_size())\n      << \"input \" << i << \" should have an output \" << ix\n      << \" but instead only has \" << node_t.args_size()\n      << \" outputs: \" << node_t.DebugString();\n  input_types.emplace_back(node_t.args(ix));\n  // ...\n}       \n```   \n      \nAn attacker can control `input_idx` such that `ix` would be larger than the number of values in `node_t.args`.\n        \n### Patches\nWe have patched the issue in GitHub commit [c99d98cd189839dcf51aee94e7437b54b31f8abd](https://github.com/tensorflow/tensorflow/commit/c99d98cd189839dcf51aee94e7437b54b31f8abd).\n  \nThe fix will be included in TensorFlow 2.8.0. This is the only affected version.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c99d98cd189839dcf51aee94e7437b54b31f8abd",
      "commit_sha": "c99d98cd189839dcf51aee94e7437b54b31f8abd",
      "patch": "SINGLE",
      "chain_ord": "['c99d98cd189839dcf51aee94e7437b54b31f8abd']",
      "before_first_fix_commit": "{'c5ae019abd2f260cf3400abcce4962c75cc5182c'}",
      "last_fix_commit": "c99d98cd189839dcf51aee94e7437b54b31f8abd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/13/2021, 01:42:30",
      "message": "Handle invalid inputs instead of crashing.\n\nPiperOrigin-RevId: 409549744\nChange-Id: I7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
      "author": "Dan Moldovan",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 4, 'total': 14}",
      "files": "{'tensorflow/core/graph/graph.cc': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c99d98cd189839dcf51aee94e7437b54b31f8abd/tensorflow%2Fcore%2Fgraph%2Fgraph.cc', 'patch': '@@ -222,10 +222,16 @@ void Node::RunForwardTypeInference() {\\n       const auto& node_t = node->def().experimental_type();\\n       if (node_t.type_id() != TFT_UNSET) {\\n         int ix = input_idx[i];\\n-        DCHECK(ix < node_t.args_size())\\n-            << \"input \" << i << \" should have an output \" << ix\\n-            << \" but instead only has \" << node_t.args_size()\\n-            << \" outputs: \" << node_t.DebugString();\\n+        if (ix >= node_t.args_size()) {\\n+          LOG(WARNING) << name() << \" has bad type information: input \" << i\\n+                       << \" should have an output \" << ix\\n+                       << \" but instead only has \" << node_t.args_size()\\n+                       << \" outputs: \" << node_t.DebugString()\\n+                       << \"\\\\nThis indicates either \"\\n+                          \"a bug in op registration or a corrupted graph.\";\\n+          ClearTypeInfo();\\n+          return;\\n+        }\\n         input_types.emplace_back(node_t.args(ix));\\n       } else {\\n         input_types.emplace_back(*no_type);'}}",
      "message_norm": "handle invalid inputs instead of crashing.\n\npiperorigin-revid: 409549744\nchange-id: i7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
      "language": "en",
      "entities": "[('409549744', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/graph/graph.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2550,
      "vuln_id": "GHSA-pc58-wgmc-hfjr",
      "cwe_id": "{'CWE-1321'}",
      "score": 7.5,
      "chain": "{'https://github.com/mout/mout/commit/3fecf1333e6d71ae72edf48c71dc665e40df7605'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in mout This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/mout/mout",
      "commit_href": "https://github.com/mout/mout/commit/3fecf1333e6d71ae72edf48c71dc665e40df7605",
      "commit_sha": "3fecf1333e6d71ae72edf48c71dc665e40df7605",
      "patch": "SINGLE",
      "chain_ord": "['3fecf1333e6d71ae72edf48c71dc665e40df7605']",
      "before_first_fix_commit": "{'397fa131ec8090e305397d2db2d607c04440c2f3', '2189378ed476d34b3cd39ba7f1199dbf12b8e51b'}",
      "last_fix_commit": "3fecf1333e6d71ae72edf48c71dc665e40df7605",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/15/2021, 18:58:13",
      "message": "Merge pull request #270 from 418sec/1-npm-mout\n\nSecurity Fix for Prototype Pollution - huntr.dev",
      "author": "Mathias Paumgarten",
      "comments": "{'com_1': {'author': 'andrew-itscript', 'datetime': '08/31/2021, 08:47:19', 'body': '@roboshoes when do you plan to publish these changes to npm?'}, 'com_2': {'author': 'roboshoes', 'datetime': '09/01/2021, 17:49:50', 'body': 'Sorry for the delay. Has been released under [`v1.2.3`](https://www.npmjs.com/package/mout/v/1.2.3)'}}",
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'src/object/set.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/mout/mout/raw/3fecf1333e6d71ae72edf48c71dc665e40df7605/src%2Fobject%2Fset.js', 'patch': '@@ -4,6 +4,10 @@ define([\\'./namespace\\'], function (namespace) {\\n      * set \"nested\" object property\\n      */\\n     function set(obj, prop, val){\\n+        // prototype pollution mitigation\\n+        if(prop.includes(\\'__proto__\\') || prop.includes(\\'prototype\\') || prop.includes(\\'constructor\\')) {\\n+            return false;\\n+        }\\n         var parts = (/^(.+)\\\\.(.+)$/).exec(prop);\\n         if (parts){\\n             namespace(obj, parts[1])[parts[2]] = val;'}}",
      "message_norm": "merge pull request #270 from 418sec/1-npm-mout\n\nsecurity fix for prototype pollution - huntr.dev",
      "language": "en",
      "entities": "[('#270', 'ISSUE', ''), ('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/object/set.js'])",
      "num_files": 1.0
    },
    {
      "index": 1591,
      "vuln_id": "GHSA-cqp5-m4pq-gfgp",
      "cwe_id": "{'CWE-471'}",
      "score": 0.0,
      "chain": "{'https://github.com/jonschlinkert/defaults-deep/commit/c873f341327ad885ff4d0f23b3d3bca31b0343e5'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in defaults-deep Versions of `default-deep` before 0.2.4 are vulnerable to prototype pollution\n\n\n## Recommendation\n\nUpdate to version 0.2.4 or later.",
      "published_date": "2018-07-26",
      "chain_len": 1,
      "project": "https://github.com/jonschlinkert/defaults-deep",
      "commit_href": "https://github.com/jonschlinkert/defaults-deep/commit/c873f341327ad885ff4d0f23b3d3bca31b0343e5",
      "commit_sha": "c873f341327ad885ff4d0f23b3d3bca31b0343e5",
      "patch": "SINGLE",
      "chain_ord": "['c873f341327ad885ff4d0f23b3d3bca31b0343e5']",
      "before_first_fix_commit": "{'aef804bf3e56484a6e463e35f5f74599523aee69'}",
      "last_fix_commit": "c873f341327ad885ff4d0f23b3d3bca31b0343e5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/07/2018, 16:52:35",
      "message": "exclude __proto__",
      "author": "doowb",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'index.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/jonschlinkert/defaults-deep/raw/c873f341327ad885ff4d0f23b3d3bca31b0343e5/index.js', 'patch': \"@@ -16,6 +16,10 @@ function defaultsDeep(target, objects) {\\n \\n   function copy(target, current) {\\n     lazy.forOwn(current, function (value, key) {\\n+      if (key === '__proto__') {\\n+        return;\\n+      }\\n+\\n       var val = target[key];\\n       // add the missing property, or allow a null property to be updated\\n       if (val == null) {\"}}",
      "message_norm": "exclude __proto__",
      "language": "pt",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 2237,
      "vuln_id": "GHSA-jf9v-q8vh-3fmc",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/icecoder/ICEcoder/commit/21d6ae0f2a3fce7d076ae430d48f5df56bd0f256'}",
      "dataset": "osv",
      "summary": "Cross-site scripting in ICEcoder In ICEcoder 8.0 allows, a reflected XSS vulnerability was identified in the multipe-results.php page due to insufficient sanitization of the _GET['replace'] variable. As a result, arbitrary Javascript code can get executed.",
      "published_date": "2021-09-09",
      "chain_len": 1,
      "project": "https://github.com/icecoder/ICEcoder",
      "commit_href": "https://github.com/icecoder/ICEcoder/commit/21d6ae0f2a3fce7d076ae430d48f5df56bd0f256",
      "commit_sha": "21d6ae0f2a3fce7d076ae430d48f5df56bd0f256",
      "patch": "SINGLE",
      "chain_ord": "['21d6ae0f2a3fce7d076ae430d48f5df56bd0f256']",
      "before_first_fix_commit": "{'54e4aff163d29edb13fe885219f82fca258c7e99'}",
      "last_fix_commit": "21d6ae0f2a3fce7d076ae430d48f5df56bd0f256",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/25/2021, 20:22:25",
      "message": "XSS and usage fixes on multiple-results.php",
      "author": "mattpass",
      "comments": null,
      "stats": "{'additions': 15, 'deletions': 12, 'total': 27}",
      "files": "{'lib/multiple-results.php': {'additions': 15, 'deletions': 12, 'changes': 27, 'status': 'modified', 'raw_url': 'https://github.com/icecoder/ICEcoder/raw/21d6ae0f2a3fce7d076ae430d48f5df56bd0f256/lib%2Fmultiple-results.php', 'patch': '@@ -1,4 +1,5 @@\\n <?php\\n+// TODO: The whole file needs a refactor and comments!\\n include \"headers.php\";\\n include \"settings.php\";\\n $t = $text[\\'multiple-results\\'];\\n@@ -101,16 +102,18 @@\\n             if (\\n                 // TODO: Find in filenames not working with regex, see all instances of findText and $findText below\\n                 true === haveMatch && -1 < targetURL.indexOf(\\'_perms\\')) {\\n-                if (-1 < userTarget.indexOf(\"selected\")) {\\n-                    for (let j = 0; j < parent.ICEcoder.selectedFiles.length; j++) {\\n-                        // TODO: This whole file needs comments - what does the below do?!\\n+                    if (-1 < userTarget.indexOf(\"selected\")) {\\n+                        for (let j = 0; j < parent.ICEcoder.selectedFiles.length; j++) {\\n                         if (\\n-                            0 === targetURL.replace(/\\\\//g, \"|\").indexOf(parent.ICEcoder.selectedFiles[j].replace(/\\\\//g, \"|\").replace(/_perms/g, \"\"))\\n+                            // If the pipe delimited targetURL starts with this pipe delimited, non _perms elem selectedFile\\n+                            0 === targetURL.replace(/\\\\//g, \"|\").indexOf(parent.ICEcoder.selectedFiles[j].replace(/\\\\//g, \"|\").replace(/_perms/g, \"\").toLowerCase())\\n                             && (\\n-                            targetURL.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\") === parent.ICEcoder.selectedFiles[j].replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\")\\n+                            // If the slash delimited, non _perms elem matches the slasj delimited, non _perms elem\\n+                            targetURL.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\") === parent.ICEcoder.selectedFiles[j].replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").toLowerCase()\\n                             ||\\n+                            // Path length for targetURL is greater than path length for this selectedFile and targetURL char at selectedFiles length ends with a slash\\n                             (targetURL.replace(/\\\\|/g, \"/\").split(\"/\").length > parent.ICEcoder.selectedFiles[j].replace(/\\\\|/g, \"/\").split(\"/\").length && \"/\" === targetURL.charAt(parent.ICEcoder.selectedFiles[j].length)))) {\\n-                            foundInSelected = true;\\n+                                foundInSelected = true;\\n                         }\\n                     }\\n                 }\\n@@ -124,8 +127,8 @@\\n                     // TODO: get this line working\\n                     resultsDisplay +=\\n                         targetURL.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").replace(/<?php\\n-                            echo str_replace(\"/\", \"\\\\/\",strtolower($findText)); ?>/g, \"<b>\" +\\n-                            findText.toLowerCase() + \"</b>\");\\n+                            echo str_replace(\"/\", \"\\\\/\",strtolower(preg_quote($findText))); ?>/g, \"<b>\" +\\n+                            parent.ICEcoder.xssClean(findText).toLowerCase() + \"</b>\");\\n                         resultsDisplay += \\'</a><br>\\';\\n                     <?php if (false === isset($_GET[\\'replace\\'])) { ?>\\n                     resultsDisplay += \\'<div id=\"foundCount\\' + i +\\'\">\\' + spansArray[i].innerHTML + \\'</div>\\';\\n@@ -134,8 +137,8 @@\\n                     resultsDisplay +=\\n                         \\'<div id=\"foundCount\\' + i + \\'\">\\' + spansArray[i].innerHTML +\\n                         \\', <?php echo $t[\\'rename to\\'];?> \\' +\\n-                        targetURL.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").replace(/<?php echo str_replace(\"/\", \"\\\\/\",strtolower($findText)); ?>/g,\"<b><?php\\n-                            if (isset($_GET[\\'replace\\'])) {echo $_GET[\\'replace\\'];};\\n+                        targetURL.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").replace(/<?php echo str_replace(\"/\", \"\\\\/\",strtolower(preg_quote($findText))); ?>/g,\"<b><?php\\n+                            if (isset($_GET[\\'replace\\'])) {echo str_replace(\"&amp;\", \"&\", xssClean($_GET[\\'replace\\'], \\'script\\'));};\\n                         ?></b>\")+\\'</div>\\';\\n                         <?php\\n                         ;};\\n@@ -253,7 +256,7 @@ function phpGrep($q, $path, $base) {\\n \\n     const replaceInFileSingle = function(fileRef) {\\n         // TODO: findText in this line\\n-        parent.ICEcoder.replaceInFile(fileRef, true === parent.ICEcoder.findRegex ? findText : parent.ICEcoder.escapeRegex(findText), \\'<?php if (isset($_GET[\\'replace\\'])) {echo $_GET[\\'replace\\'];}; ?>\\');\\n+        parent.ICEcoder.replaceInFile(fileRef, true === parent.ICEcoder.findRegex ? findText : parent.ICEcoder.escapeRegex(findText), \\'<?php if (isset($_GET[\\'replace\\'])) {echo xssClean($_GET[\\'replace\\'], \\'script\\');}; ?>\\');\\n     };\\n \\n     const replaceInFilesAll = function() {\\n@@ -267,7 +270,7 @@ function phpGrep($q, $path, $base) {\\n         fileRef = spansArray[arrayRef].id.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\");\\n         const rExp = new RegExp(true === parent.ICEcoder.findRegex ? findText : parent.ICEcoder.escapeRegex(findText), \"gi\");\\n         // TODO: get this working\\n-        newName = spansArray[arrayRef].id.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").replace(rExp, \"<?php if (isset($_GET[\\'replace\\'])) {echo $_GET[\\'replace\\'];}; ?>\");\\n+        newName = spansArray[arrayRef].id.replace(/\\\\|/g, \"/\").replace(/_perms/g, \"\").replace(rExp, \"<?php if (isset($_GET[\\'replace\\'])) {echo xssClean($_GET[\\'replace\\'], \\'script\\');}; ?>\");\\n         parent.ICEcoder.renameFile(fileRef,newName);\\n     };'}}",
      "message_norm": "xss and usage fixes on multiple-results.php",
      "language": "en",
      "entities": "[('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/multiple-results.php'])",
      "num_files": 1.0
    },
    {
      "index": 3262,
      "vuln_id": "GHSA-wcm2-9c89-wmfm",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/jquery/jquery-ui/commit/7e9060c109b928769a664dbcc2c17bd21231b6f3'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in jquery-ui Cross-site scripting (XSS) vulnerability in jquery.ui.dialog.js in the Dialog widget in jQuery UI before 1.10.0 allows remote attackers to inject arbitrary web script or HTML via the title option.",
      "published_date": "2017-10-24",
      "chain_len": 1,
      "project": "https://github.com/jquery/jquery-ui",
      "commit_href": "https://github.com/jquery/jquery-ui/commit/7e9060c109b928769a664dbcc2c17bd21231b6f3",
      "commit_sha": "7e9060c109b928769a664dbcc2c17bd21231b6f3",
      "patch": "SINGLE",
      "chain_ord": "['7e9060c109b928769a664dbcc2c17bd21231b6f3']",
      "before_first_fix_commit": "{'60486ac632a0a1bbbb0c7449fe17bccfae11af80'}",
      "last_fix_commit": "7e9060c109b928769a664dbcc2c17bd21231b6f3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/26/2012, 09:14:36",
      "message": "Dialog: Extract setting the title into a _title method, use .text() to prevent XSS. Fixes #6016 - Dialog: Title XSS Vulnerability.",
      "author": "J\u00f6rn Zaefferer",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 4, 'total': 13}",
      "files": "{'ui/jquery.ui.dialog.js': {'additions': 9, 'deletions': 4, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/jquery/jquery-ui/raw/7e9060c109b928769a664dbcc2c17bd21231b6f3/ui%2Fjquery.ui.dialog.js', 'patch': '@@ -352,14 +352,21 @@ $.widget(\"ui.dialog\", {\\n \\t\\tuiDialogTitle = $( \"<span>\" )\\n \\t\\t\\t.uniqueId()\\n \\t\\t\\t.addClass( \"ui-dialog-title\" )\\n-\\t\\t\\t.html( this.options.title || \"&#160;\" )\\n \\t\\t\\t.prependTo( this.uiDialogTitlebar );\\n+\\t\\tthis._title( uiDialogTitle );\\n \\n \\t\\tthis.uiDialog.attr({\\n \\t\\t\\t\"aria-labelledby\": uiDialogTitle.attr( \"id\" )\\n \\t\\t});\\n \\t},\\n \\n+\\t_title: function( title ) {\\n+\\t\\tif ( !this.options.title ) {\\n+\\t\\t\\ttitle.html( \"&#160;\" );\\n+\\t\\t}\\n+\\t\\ttitle.text( this.options.title );\\n+\\t},\\n+\\n \\t_createButtonPane: function() {\\n \\t\\tvar uiDialogButtonPane = ( this.uiDialogButtonPane = $( \"<div>\" ) )\\n \\t\\t\\t.addClass( \"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\" );\\n@@ -600,9 +607,7 @@ $.widget(\"ui.dialog\", {\\n \\t\\t}\\n \\n \\t\\tif ( key === \"title\" ) {\\n-\\t\\t\\t// convert whatever was passed in to a string, for html() to not throw up\\n-\\t\\t\\t$( \".ui-dialog-title\", this.uiDialogTitlebar )\\n-\\t\\t\\t\\t.html( \"\" + ( value || \"&#160;\" ) );\\n+\\t\\t\\tthis._title( this.uiDialogTitlebar.find( \".ui-dialog-title\" ) );\\n \\t\\t}\\n \\t},'}}",
      "message_norm": "dialog: extract setting the title into a _title method, use .text() to prevent xss. fixes #6016 - dialog: title xss vulnerability.",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#6016', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ui/jquery.ui.dialog.js'])",
      "num_files": 1.0
    },
    {
      "index": 3261,
      "vuln_id": "GHSA-wc9w-wvq2-ffm9",
      "cwe_id": "{'CWE-918'}",
      "score": 5.4,
      "chain": "{'https://github.com/grafana/grafana/commit/ba953be95f0302c2ea80d23f1e5f2c1847365192'}",
      "dataset": "osv",
      "summary": "Server Side Request Forgery in Grafana The avatar feature in Grafana 3.0.1 through 7.0.1 has an SSRF Incorrect Access Control issue that allows remote code execution. This vulnerability allows any unauthenticated user/client to make Grafana send HTTP requests to any URL and return its result to the user/client. This can be used to gain information about the network that Grafana is running on.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/grafana/grafana",
      "commit_href": "https://github.com/grafana/grafana/commit/ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "commit_sha": "ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "patch": "SINGLE",
      "chain_ord": "['ba953be95f0302c2ea80d23f1e5f2c1847365192']",
      "before_first_fix_commit": "{'e5414f44aa2728cce0dbbc7698fddb514fa8193a'}",
      "last_fix_commit": "ba953be95f0302c2ea80d23f1e5f2c1847365192",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/03/2020, 13:56:13",
      "message": "Only allow 32 hexadecimal digits for the avatar hash (#25322)\n\n(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)",
      "author": "Marcus Efraimsson",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 5, 'total': 16}",
      "files": "{'pkg/api/avatar/avatar.go': {'additions': 11, 'deletions': 5, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/grafana/grafana/raw/ba953be95f0302c2ea80d23f1e5f2c1847365192/pkg%2Fapi%2Favatar%2Favatar.go', 'patch': '@@ -15,14 +15,14 @@ import (\\n \\t\"net/http\"\\n \\t\"net/url\"\\n \\t\"path/filepath\"\\n+\\t\"regexp\"\\n \\t\"strconv\"\\n-\\t\"strings\"\\n \\t\"sync\"\\n \\t\"time\"\\n \\n \\t\"github.com/grafana/grafana/pkg/infra/log\"\\n+\\t\"github.com/grafana/grafana/pkg/models\"\\n \\t\"github.com/grafana/grafana/pkg/setting\"\\n-\\t\"gopkg.in/macaron.v1\"\\n \\n \\tgocache \"github.com/patrickmn/go-cache\"\\n )\\n@@ -73,9 +73,15 @@ type CacheServer struct {\\n \\tcache    *gocache.Cache\\n }\\n \\n-func (this *CacheServer) Handler(ctx *macaron.Context) {\\n-\\turlPath := ctx.Req.URL.Path\\n-\\thash := urlPath[strings.LastIndex(urlPath, \"/\")+1:]\\n+var validMD5 = regexp.MustCompile(\"^[a-fA-F0-9]{32}$\")\\n+\\n+func (this *CacheServer) Handler(ctx *models.ReqContext) {\\n+\\thash := ctx.Params(\"hash\")\\n+\\n+\\tif len(hash) != 32 || !validMD5.MatchString(hash) {\\n+\\t\\tctx.JsonApiErr(404, \"Avatar not found\", nil)\\n+\\t\\treturn\\n+\\t}\\n \\n \\tvar avatar *Avatar\\n \\tobj, exists := this.cache.Get(hash)'}}",
      "message_norm": "only allow 32 hexadecimal digits for the avatar hash (#25322)\n\n(cherry picked from commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509)",
      "language": "en",
      "entities": "[('hash', 'SECWORD', ''), ('#25322', 'ISSUE', ''), ('commit 7a9c0e31eca4958f5fba053cfea9e64a2ea58509', 'SHA', 'prefix_colon_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['pkg/api/avatar/avatar.go'])",
      "num_files": 1.0
    },
    {
      "index": 2046,
      "vuln_id": "GHSA-hf44-3mx6-vhhw",
      "cwe_id": "{'CWE-400'}",
      "score": 6.5,
      "chain": "{'https://github.com/graphhopper/graphhopper/commit/eb189be1fa7443ebf4ae881e737a18f818c95f41'}",
      "dataset": "osv",
      "summary": "Navigate endpoint is vulnerable to regex injection that may lead to Denial of Service. ### Impact\nThe regex injection that may lead to Denial of Service.\n\n### Patches\nWill be patched in 2.4 and 3.0\n\n### Workarounds\nVersions lower than 2.x are only affected if the navigation module is added\n\n### References\nSee this pull request for the fix: https://github.com/graphhopper/graphhopper/pull/2304\n\nIf you have any questions or comments about this advisory please [send us an Email](https://www.graphhopper.com/contact-form/) or create a topic [here](https://discuss.graphhopper.com/).",
      "published_date": "2021-05-19",
      "chain_len": 1,
      "project": "https://github.com/graphhopper/graphhopper",
      "commit_href": "https://github.com/graphhopper/graphhopper/commit/eb189be1fa7443ebf4ae881e737a18f818c95f41",
      "commit_sha": "eb189be1fa7443ebf4ae881e737a18f818c95f41",
      "patch": "SINGLE",
      "chain_ord": "['eb189be1fa7443ebf4ae881e737a18f818c95f41']",
      "before_first_fix_commit": "{'744f0e2535355e67aefbb6906303332b8aff0a7f'}",
      "last_fix_commit": "eb189be1fa7443ebf4ae881e737a18f818c95f41",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/04/2021, 18:03:31",
      "message": "avoid regex in navigate module (#2304)\n\n* replace two regexs with one indexOf\r\n\r\n* make check stricter\r\n\r\n* use @easbar's suggestion",
      "author": "Peter",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 5, 'total': 8}",
      "files": "{'navigation/src/main/java/com/graphhopper/navigation/NavigateResource.java': {'additions': 3, 'deletions': 5, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/graphhopper/graphhopper/raw/eb189be1fa7443ebf4ae881e737a18f818c95f41/navigation%2Fsrc%2Fmain%2Fjava%2Fcom%2Fgraphhopper%2Fnavigation%2FNavigateResource.java', 'patch': '@@ -188,13 +188,11 @@ private GHResponse calcRoute(List<Double> favoredHeadings, List<GHPoint> request\\n      * The url looks like: \".../{profile}/1.522438,42.504606;1.527209,42.504776;1.526113,42.505144;1.527218,42.50529?..\"\\n      */\\n     private List<GHPoint> getPointsFromRequest(HttpServletRequest httpServletRequest, String profile) {\\n-\\n         String url = httpServletRequest.getRequestURI();\\n-        url = url.replaceFirst(\"/navigate/directions/v5/gh/\" + profile + \"/\", \"\");\\n-        url = url.replaceAll(\"\\\\\\\\?[*]\", \"\");\\n-\\n+        String urlStart = \"/navigate/directions/v5/gh/\" + profile + \"/\";\\n+        if (!url.startsWith(urlStart)) throw new IllegalArgumentException(\"Incorrect URL \" + url);\\n+        url = url.substring(urlStart.length());\\n         String[] pointStrings = url.split(\";\");\\n-\\n         List<GHPoint> points = new ArrayList<>(pointStrings.length);\\n         for (int i = 0; i < pointStrings.length; i++) {\\n             points.add(GHPoint.fromStringLonLat(pointStrings[i]));'}}",
      "message_norm": "avoid regex in navigate module (#2304)\n\n* replace two regexs with one indexof\r\n\r\n* make check stricter\r\n\r\n* use @easbar's suggestion",
      "language": "en",
      "entities": "[('#2304', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['navigation/src/main/java/com/graphhopper/navigation/NavigateResource.java'])",
      "num_files": 1.0
    },
    {
      "index": 334,
      "vuln_id": "GHSA-4284-jfhc-f854",
      "cwe_id": "{'CWE-732'}",
      "score": 5.3,
      "chain": "{'https://github.com/phusion/passenger/commit/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8'}",
      "dataset": "osv",
      "summary": "Phusion Passenger incorrect permission assignment An issue was discovered in switchGroup() in agent/ExecHelper/ExecHelperMain.cpp in Phusion Passenger before 5.3.2. The set of groups (gidset) is not set correctly, leaving it up to randomness (i.e., uninitialized memory) which supplementary groups are actually being set while lowering privileges.",
      "published_date": "2022-05-13",
      "chain_len": 1,
      "project": "https://github.com/phusion/passenger",
      "commit_href": "https://github.com/phusion/passenger/commit/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
      "commit_sha": "4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
      "patch": "SINGLE",
      "chain_ord": "['4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8']",
      "before_first_fix_commit": "{'6120509d3dca78b959135529262047febe884498'}",
      "last_fix_commit": "4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/29/2018, 13:33:50",
      "message": "ExecHelperMain: fix privilege lowering code",
      "author": "Hongli Lai (Phusion)",
      "comments": "{'com_1': {'author': 'kbabioch', 'datetime': '06/21/2018, 14:31:00', 'body': 'CVE-2018-12615 has been assigned to this.'}, 'com_2': {'author': 'CamJN', 'datetime': '06/21/2018, 14:33:35', 'body': \"Where was this reported? Mitre isn't showing a listing for CVE-2018-12615.\"}, 'com_3': {'author': 'kbabioch', 'datetime': '06/21/2018, 14:37:46', 'body': \"It was reported through MITRE and will be displayed in the usual places, once it is synced, which usually takes a couple of hours. I've just added the comment as a reference, in case someone will be looking for it in the future.\"}, 'com_4': {'author': 'kbabioch', 'datetime': '06/21/2018, 14:39:14', 'body': 'By the way: While looking at the code we also realized that there might be other issues with the privilege drop, e.g. #2096'}}",
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'src/agent/ExecHelper/ExecHelperMain.cpp': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/phusion/passenger/raw/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8/src%2Fagent%2FExecHelper%2FExecHelperMain.cpp', 'patch': '@@ -201,6 +201,9 @@ switchGroup(uid_t uid, const struct passwd *userInfo, gid_t gid) {\\n \\t\\t\\tif (ngroups <= NGROUPS_MAX) {\\n \\t\\t\\t\\tsetgroupsCalled = true;\\n \\t\\t\\t\\tgidset.reset(new gid_t[ngroups]);\\n+\\t\\t\\t\\tfor (int i = 0; i < ngroups; i++) {\\n+\\t\\t\\t\\t\\tgidset[i] = groups[i];\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\tif (setgroups(ngroups, gidset.get()) == -1) {\\n \\t\\t\\t\\t\\tint e = errno;\\n \\t\\t\\t\\t\\tfprintf(stderr, \"ERROR: setgroups(%d, ...) failed: %s (errno=%d)\\\\n\",'}}",
      "message_norm": "exechelpermain: fix privilege lowering code",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('privilege', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/agent/ExecHelper/ExecHelperMain.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 2331,
      "vuln_id": "GHSA-m2q3-53fq-7h66",
      "cwe_id": "{'CWE-200'}",
      "score": 0.0,
      "chain": "{'https://github.com/gollum/gollum/commit/ce68a88293ce3b18c261312392ad33a88bb69ea1'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects gollum The Precious module in gollum before 4.0.1 allows remote attackers to read arbitrary files by leveraging the lack of a certain temporary-file check.",
      "published_date": "2018-08-28",
      "chain_len": 1,
      "project": "https://github.com/gollum/gollum",
      "commit_href": "https://github.com/gollum/gollum/commit/ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "commit_sha": "ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "patch": "SINGLE",
      "chain_ord": "['ce68a88293ce3b18c261312392ad33a88bb69ea1']",
      "before_first_fix_commit": "{'288f75929d57bff1753b47aa860066ce674d5229'}",
      "last_fix_commit": "ce68a88293ce3b18c261312392ad33a88bb69ea1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/20/2015, 11:53:02",
      "message": "Added security check.",
      "author": "Bart Kamphorst",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'lib/gollum/app.rb': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/gollum/gollum/raw/ce68a88293ce3b18c261312392ad33a88bb69ea1/lib%2Fgollum%2Fapp.rb', 'patch': \"@@ -176,6 +176,7 @@ def wiki_new\\n         fullname = params[:file][:filename]\\n         tempfile = params[:file][:tempfile]\\n       end\\n+      halt 500 unless tempfile.is_a? Tempfile\\n \\n       # Remove page file dir prefix from upload path if necessary -- committer handles this itself\\n       dir      = wiki.per_page_uploads ? params[:upload_dest].match(/^(#{wiki.page_file_dir}\\\\/+)?(.*)/)[2] : 'uploads'\"}}",
      "message_norm": "added security check.",
      "language": "en",
      "entities": "[('added', 'ACTION', ''), ('security', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/gollum/app.rb'])",
      "num_files": 1.0
    },
    {
      "index": 2183,
      "vuln_id": "GHSA-j472-mcq2-95p6",
      "cwe_id": "{'CWE-78'}",
      "score": 8.8,
      "chain": "{'https://github.com/jenkinsci/jenkins/commit/67f68c181033cbabf2075769e0f846f58c226c08', 'https://github.com/jenkinsci/jenkins/commit/d7ea3f40efedd50541a57b943d5f7bbed046d091'}",
      "dataset": "osv",
      "summary": "OS Command Injection in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier users with permission to create or configure agents in Jenkins could configure a launch method called 'Launch agent via execution of command on master'. This allowed them to run arbitrary shell commands on the master node whenever the agent was supposed to be launched. Configuration of this launch method now requires the Run Scripts permission typically only granted to administrators.",
      "published_date": "2022-05-14",
      "chain_len": 2,
      "project": "https://github.com/jenkinsci/jenkins",
      "commit_href": "https://github.com/jenkinsci/jenkins/commit/67f68c181033cbabf2075769e0f846f58c226c08",
      "commit_sha": "67f68c181033cbabf2075769e0f846f58c226c08",
      "patch": "MULTI",
      "chain_ord": "['d7ea3f40efedd50541a57b943d5f7bbed046d091', '67f68c181033cbabf2075769e0f846f58c226c08']",
      "before_first_fix_commit": "{'3ff432ace14d8f4544c88a179a2f7a962eb98ba6'}",
      "last_fix_commit": "67f68c181033cbabf2075769e0f846f58c226c08",
      "chain_ord_pos": 2.0,
      "commit_datetime": "09/28/2017, 15:37:47",
      "message": "[SECURITY-478] Strengthening test.",
      "author": "Jesse Glick",
      "comments": null,
      "stats": "{'additions': 18, 'deletions': 1, 'total': 19}",
      "files": "{'test/src/test/java/hudson/slaves/CommandLauncher2Test.java': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/jenkins/raw/67f68c181033cbabf2075769e0f846f58c226c08/test%2Fsrc%2Ftest%2Fjava%2Fhudson%2Fslaves%2FCommandLauncher2Test.java', 'patch': '@@ -29,15 +29,19 @@\\n import com.gargoylesoftware.htmlunit.WebRequest;\\n import com.gargoylesoftware.htmlunit.html.HtmlForm;\\n import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\\n+import hudson.XmlFile;\\n import hudson.cli.CLICommand;\\n import hudson.cli.CLICommandInvoker;\\n import hudson.cli.UpdateNodeCommand;\\n import hudson.model.Computer;\\n import hudson.model.User;\\n+import java.io.File;\\n+import java.io.IOException;\\n import java.net.HttpURLConnection;\\n+import javax.annotation.CheckForNull;\\n import jenkins.model.Jenkins;\\n import org.apache.tools.ant.filters.StringInputStream;\\n-import static org.hamcrest.Matchers.containsString;\\n+import static org.hamcrest.Matchers.*;\\n import org.junit.Test;\\n import static org.junit.Assert.*;\\n import org.junit.Rule;\\n@@ -73,6 +77,7 @@ public void evaluate() throws Throwable {\\n                 rr.j.submit(form);\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by GUI\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by GUI\");\\n                 // Then by REST.\\n                 String configDotXml = s.toComputer().getUrl() + \"config.xml\";\\n                 String xml = wc.goTo(configDotXml, \"application/xml\").getWebResponse().getContentAsString();\\n@@ -83,14 +88,17 @@ public void evaluate() throws Throwable {\\n                 wc.getPage(req);\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by REST\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by REST\");\\n                 // Then by CLI.\\n                 CLICommand cmd = new UpdateNodeCommand();\\n                 cmd.setTransportAuth(User.get(\"admin\").impersonate());\\n                 assertThat(new CLICommandInvoker(rr.j, cmd).withStdin(new StringInputStream(xml.replace(\"echo configured by GUI\", \"echo configured by CLI\"))).invokeWithArgs(\"s\"), CLICommandInvoker.Matcher.succeededSilently());\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by CLI\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by CLI\");\\n                 // Now verify that all modes failed as dev. First as GUI.\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n+                s.save();\\n                 wc = rr.j.createWebClient().login(\"dev\");\\n                 form = wc.getPage(s, \"configure\").getFormByName(\"config\");\\n                 input = form.getInputByName(\"_.command\");\\n@@ -104,6 +112,7 @@ public void evaluate() throws Throwable {\\n                 }\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by admin\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by admin\");\\n                 // Then by REST.\\n                 req = new WebRequest(wc.createCrumbedUrl(configDotXml), HttpMethod.POST);\\n                 req.setEncodingType(null);\\n@@ -115,6 +124,7 @@ public void evaluate() throws Throwable {\\n                 }\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass()); // currently seems to reset it to JNLPLauncher, whatever\\n+                assertSerialForm(s, null);\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n                 // Then by CLI.\\n                 cmd = new UpdateNodeCommand();\\n@@ -123,10 +133,17 @@ public void evaluate() throws Throwable {\\n                     CLICommandInvoker.Matcher./* gets swallowed by RobustReflectionConverter, hmm*/succeededSilently());\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass());\\n+                assertSerialForm(s, null);\\n                 // Now also check that SYSTEM deserialization works after a restart.\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n                 s.save();\\n             }\\n+            private void assertSerialForm(DumbSlave s, @CheckForNull String expectedCommand) throws IOException {\\n+                // cf. private methods in Nodes\\n+                File nodesDir = new File(rr.j.jenkins.getRootDir(), \"nodes\");\\n+                XmlFile configXml = new XmlFile(Jenkins.XSTREAM, new File(new File(nodesDir, s.getNodeName()), \"config.xml\"));\\n+                assertThat(configXml.asString(), expectedCommand != null ? containsString(\"<agentCommand>\" + expectedCommand + \"</agentCommand>\") : not(containsString(\"<agentCommand>\")));\\n+            }\\n         });\\n         rr.addStep(new Statement() {\\n             @Override'}}",
      "message_norm": "[security-478] strengthening test.",
      "language": "en",
      "entities": "[('security-478', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['test/src/test/java/hudson/slaves/CommandLauncher2Test.java'])",
      "num_files": 1.0
    },
    {
      "index": 1551,
      "vuln_id": "GHSA-cgfm-62j4-v4rf",
      "cwe_id": "{'CWE-125'}",
      "score": 7.3,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750'}",
      "dataset": "osv",
      "summary": "Heap out of bounds access in sparse reduction operations ### Impact\nThe implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nx = tf.SparseTensor(\n      indices=[[773, 773, 773], [773, 773, 773]],\n      values=[1, 1],\n      dense_shape=[337, 337, 337])\ntf.sparse.reduce_sum(x, 1)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [87158f43f05f2720a374f3e6d22a7aaa3a33f750](https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750). \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750",
      "commit_sha": "87158f43f05f2720a374f3e6d22a7aaa3a33f750",
      "patch": "SINGLE",
      "chain_ord": "['87158f43f05f2720a374f3e6d22a7aaa3a33f750']",
      "before_first_fix_commit": "{'9c7f40e5f1b5b74156ad4d7bc20b8d69bdedbe29'}",
      "last_fix_commit": "87158f43f05f2720a374f3e6d22a7aaa3a33f750",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/31/2021, 04:11:18",
      "message": "Prevent heap OOB in sparse reduction ops.\n\nPiperOrigin-RevId: 387934524\nChange-Id: I894aa30f1e454f09b471d565b4a325da49322c1a",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 0, 'total': 13}",
      "files": "{'tensorflow/core/kernels/sparse_reduce_op.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/87158f43f05f2720a374f3e6d22a7aaa3a33f750/tensorflow%2Fcore%2Fkernels%2Fsparse_reduce_op.cc', 'patch': '@@ -219,7 +219,20 @@ class SparseReduceOp : public OpKernel {\\n     sp.Reorder<T>(reduction.reorder_dims);\\n     for (const auto &g : sp.group(reduction.group_by_dims)) {\\n       Op::template Run<T>(ctx, reduced_val, g.template values<T>());\\n+      OP_REQUIRES(ctx,\\n+                  output_strides.empty() ||\\n+                  (g.group().size() == output_strides.size()),\\n+                  errors::Internal(\\n+                      \"Expected group size and output_strides size to match\",\\n+                      \", but got \", g.group().size(), \" and \",\\n+                      output_strides.size()));\\n       const int64_t idx = CoordinatesToFlatIndex(g.group(), output_strides);\\n+      OP_REQUIRES(ctx,\\n+                  idx >= 0 && idx < out_flat.size(),\\n+                  errors::Internal(\\n+                      \"Obtained a write index of \", idx,\\n+                      \" which is outside of bounds of [0, \",\\n+                      out_flat.size(), \")\"));\\n       out_flat(idx) = reduced_val();\\n       VLOG(2) << \"coords: \" << absl::StrJoin(g.group(), \",\")\\n               << \"; idx: \" << idx << \"; group \" << Op::Name() << \": \"'}}",
      "message_norm": "prevent heap oob in sparse reduction ops.\n\npiperorigin-revid: 387934524\nchange-id: i894aa30f1e454f09b471d565b4a325da49322c1a",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387934524', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_reduce_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 368,
      "vuln_id": "GHSA-468q-v4jj-485h",
      "cwe_id": "{'CWE-1333'}",
      "score": 7.5,
      "chain": "{'https://github.com/nervjs/taro/commit/acadb6c826ba57f2030a626f1de4f7b4608fcdb5'}",
      "dataset": "osv",
      "summary": "Inefficient Regular Expression Complexity in taro taro is vulnerable to Inefficient Regular Expression Complexity",
      "published_date": "2021-09-20",
      "chain_len": 1,
      "project": "https://github.com/nervjs/taro",
      "commit_href": "https://github.com/nervjs/taro/commit/acadb6c826ba57f2030a626f1de4f7b4608fcdb5",
      "commit_sha": "acadb6c826ba57f2030a626f1de4f7b4608fcdb5",
      "patch": "SINGLE",
      "chain_ord": "['acadb6c826ba57f2030a626f1de4f7b4608fcdb5']",
      "before_first_fix_commit": "{'51a672907177558f20d664e7c196fdb0bff41c75'}",
      "last_fix_commit": "acadb6c826ba57f2030a626f1de4f7b4608fcdb5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/02/2021, 14:08:46",
      "message": "Security fix for ReDoS\n\nFixed Regular Expression Denial of Service vulnerability in url validation",
      "author": "ready-research",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'packages/taro-helper/src/constants.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/NervJS/taro/raw/acadb6c826ba57f2030a626f1de4f7b4608fcdb5/packages%2Ftaro-helper%2Fsrc%2Fconstants.ts', 'patch': '@@ -104,7 +104,7 @@ export const REG_JSON = /\\\\.json(\\\\?.*)?$/\\n export const REG_UX = /\\\\.ux(\\\\?.*)?$/\\n export const REG_TEMPLATE = /\\\\.(wxml|axml|ttml|qml|swan|jxml)(\\\\?.*)?$/\\n export const REG_WXML_IMPORT = /<import(.*)?src=(?:(?:\\'([^\\']*)\\')|(?:\"([^\"]*)\"))/gi\\n-export const REG_URL = /^(?:(?:(?:https?|ftp):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$/i\\n+export const REG_URL = /^(?:(?:(?:https?|ftp):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?))(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$/i\\n export const CSS_IMPORT_REG = /@import ([\"\\'])(.+?)\\\\1;/g\\n \\n export const NODE_MODULES = \\'node_modules\\''}}",
      "message_norm": "security fix for redos\n\nfixed regular expression denial of service vulnerability in url validation",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('url validation', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['packages/taro-helper/src/constants.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2955,
      "vuln_id": "GHSA-rhq2-3vr9-6mcr",
      "cwe_id": "{'CWE-22'}",
      "score": 8.3,
      "chain": "{'https://github.com/gradio-app/gradio/commit/41bd3645bdb616e1248b2167ca83636a2653f781'}",
      "dataset": "osv",
      "summary": "Files on the host computer can be accessed from the Gradio interface ### Impact\nThis is a vulnerability that affects anyone who creates and publicly shares Gradio interfaces using `gradio<2.4.8`. Because of the way that static files were being served, someone who generated a public Gradio link and shared it with others would potentially be exposing the files on the computer that generated the link, while the link was active. An attacker would be able to view the contents of a file on the computer if they knew the exact relative filepath. We do not have any evidence that this was ever exploited, but we treated the issue seriously and immediately took steps to mitigate it (see below)\n\n### Response\n1. We worked with @haby0 to immediately patch the issue and released a new version, `gradio 2.5.0`, within 24 hours of the issue being brought to our attention \n2. We enabled a notification that is printed to anyone using an older version of gradio telling them to upgrade (see screenshot below)\n3. We expanded our test suite to test for this vulnerability ensuring that our patch does not get reverted in future releases of `gradio`\n\n![image](https://user-images.githubusercontent.com/1778297/146251425-f36b519b-6d4a-4dfb-8d89-c1ed005979d3.png)\n\n### Patches\nThe problem has been patched in `gradio>=2.5.0`.",
      "published_date": "2022-01-21",
      "chain_len": 1,
      "project": "https://github.com/gradio-app/gradio",
      "commit_href": "https://github.com/gradio-app/gradio/commit/41bd3645bdb616e1248b2167ca83636a2653f781",
      "commit_sha": "41bd3645bdb616e1248b2167ca83636a2653f781",
      "patch": "SINGLE",
      "chain_ord": "['41bd3645bdb616e1248b2167ca83636a2653f781']",
      "before_first_fix_commit": "{'0b2c4901a63b2e5a7d7b3964d27b8f82d6d330e1'}",
      "last_fix_commit": "41bd3645bdb616e1248b2167ca83636a2653f781",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/14/2021, 21:01:55",
      "message": "secure path hotfix",
      "author": "Ali Abid",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 3, 'total': 5}",
      "files": "{'gradio/networking.py': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/gradio-app/gradio/raw/41bd3645bdb616e1248b2167ca83636a2653f781/gradio%2Fnetworking.py', 'patch': '@@ -377,15 +377,14 @@ def interpret():\\n @app.route(\"/file/<path:path>\", methods=[\"GET\"])\\n @login_check\\n def file(path):\\n-    path = secure_filename(path)\\n     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):\\n-        with open(os.path.join(app.cwd, path), \"rb\") as encrypted_file:\\n+        with open(safe_join(app.cwd, path), \"rb\") as encrypted_file:\\n             encrypted_data = encrypted_file.read()\\n         file_data = encryptor.decrypt(\\n             app.interface.encryption_key, encrypted_data)\\n         return send_file(io.BytesIO(file_data), attachment_filename=os.path.basename(path))\\n     else:\\n-        return send_file(os.path.join(app.cwd, path))\\n+        return send_file(safe_join(app.cwd, path))\\n \\n \\n @app.route(\"/api/queue/push/\", methods=[\"POST\"])'}}",
      "message_norm": "secure path hotfix",
      "language": "en",
      "entities": "[('secure', 'SECWORD', ''), ('hotfix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['gradio/networking.py'])",
      "num_files": 1.0
    },
    {
      "index": 2292,
      "vuln_id": "GHSA-jq4v-f5q6-mjqq",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/lxml/lxml/pull/316/commits/10ec1b4e9f93713513a3264ed6158af22492f270', 'https://github.com/lxml/lxml/commit/a5f9cb52079dc57477c460dbe6ba0f775e14a999', 'https://github.com/lxml/lxml/commit/2d01a1ba8984e0483ce6619b972832377f208a0d'}",
      "dataset": "osv",
      "summary": "lxml before 4.6.3 vulnerable to Cross-Site Scripting  An XSS vulnerability was discovered in the python `lxml` clean module versions before 4.6.3. When disabling `the safe_attrs_only` and `forms` arguments, the `Cleaner` class does not remove the `formaction` attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in `lxml` 4.6.3.",
      "published_date": "2021-03-22",
      "chain_len": 3,
      "project": "https://github.com/lxml/lxml",
      "commit_href": "https://github.com/lxml/lxml/pull/316/commits/10ec1b4e9f93713513a3264ed6158af22492f270",
      "commit_sha": "10ec1b4e9f93713513a3264ed6158af22492f270",
      "patch": "MULTI",
      "chain_ord": "['10ec1b4e9f93713513a3264ed6158af22492f270', '2d01a1ba8984e0483ce6619b972832377f208a0d', 'a5f9cb52079dc57477c460dbe6ba0f775e14a999']",
      "before_first_fix_commit": "{'2d01a1ba8984e0483ce6619b972832377f208a0d'}",
      "last_fix_commit": "a5f9cb52079dc57477c460dbe6ba0f775e14a999",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/20/2021, 06:49:25",
      "message": "Add formaction attribute to defs.link_attrs",
      "author": "Kevin Chung",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'src/lxml/html/defs.py': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/lxml/lxml/raw/10ec1b4e9f93713513a3264ed6158af22492f270/src%2Flxml%2Fhtml%2Fdefs.py', 'patch': \"@@ -23,6 +23,8 @@\\n     'usemap',\\n     # Not standard:\\n     'dynsrc', 'lowsrc',\\n+    # HTML5 formaction\\n+    'formaction'\\n     ])\\n \\n # Not in the HTML 4 spec:\"}}",
      "message_norm": "add formaction attribute to defs.link_attrs",
      "language": "en",
      "entities": "[('add', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lxml/html/defs.py'])",
      "num_files": 1.0
    },
    {
      "index": 2597,
      "vuln_id": "GHSA-pjpc-87mp-4332",
      "cwe_id": "{'CWE-79'}",
      "score": 9.6,
      "chain": "{'https://github.com/mautic/mautic/commit/462eb596027fd949efbf9ac5cb2b376805e9d246'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting vulnerability in Mautic's tracking pixel functionality ### Impact\n\nMautic allows you to track open rates by using tracking pixels. \nThe tracking information is stored together with extra metadata of the tracking request.\n\nThe output isn't sufficiently filtered when showing the metadata of the tracking information, which may lead to a vulnerable situation.\n\n### Patches\n\nPlease upgrade to 4.3.0\n\n### Workarounds\nNone.\n\n### References\n* Internally tracked under MST-38\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@mautic.org](mailto:security@mautic.org)",
      "published_date": "2022-05-25",
      "chain_len": 1,
      "project": "https://github.com/mautic/mautic",
      "commit_href": "https://github.com/mautic/mautic/commit/462eb596027fd949efbf9ac5cb2b376805e9d246",
      "commit_sha": "462eb596027fd949efbf9ac5cb2b376805e9d246",
      "patch": "SINGLE",
      "chain_ord": "['462eb596027fd949efbf9ac5cb2b376805e9d246']",
      "before_first_fix_commit": "{'d1518c24e45515d710d4e488bc33a14027b64194'}",
      "last_fix_commit": "462eb596027fd949efbf9ac5cb2b376805e9d246",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/23/2022, 11:55:13",
      "message": "Merge pull request from GHSA-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* Update app/bundles/EmailBundle/Views/SubscribedEvents/Timeline/index.html.php\n\nCo-authored-by: John Linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nCo-authored-by: John Linhart <admin@escope.cz>",
      "author": "mollux",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'app/bundles/EmailBundle/Views/SubscribedEvents/Timeline/index.html.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/mautic/mautic/raw/462eb596027fd949efbf9ac5cb2b376805e9d246/app%2Fbundles%2FEmailBundle%2FViews%2FSubscribedEvents%2FTimeline%2Findex.html.php', 'patch': \"@@ -8,6 +8,7 @@\\n  *\\n  * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html\\n  */\\n+\\n if ($item = ((isset($event['extra'])) ? $event['extra']['stat'] : false)): ?>\\n     <p>\\n         <?php if (!empty($item['isFailed'])) : ?>\\n@@ -63,7 +64,7 @@\\n             endif;\\n             ?>\\n             <?php if ($counter > 1): ?><hr/><?php endif; ?>\\n-            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $detail['useragent']; ?>\\n+            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?></strong><br/><?php echo $view->escape($detail['useragent']); ?>\\n             <?php ++$counter; ?>\\n         <?php endforeach; ?>\\n         <?php\"}}",
      "message_norm": "merge pull request from ghsa-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* update app/bundles/emailbundle/views/subscribedevents/timeline/index.html.php\n\nco-authored-by: john linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nco-authored-by: john linhart <admin@escope.cz>",
      "language": "en",
      "entities": "[('ghsa-pjpc-87mp-4332', 'VULNID', 'GHSA'), ('sanitise', 'SECWORD', ''), ('update', 'ACTION', ''), ('admin@escope.cz', 'SECWORD', ''), ('removed', 'ACTION', ''), ('admin@escope.cz', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/bundles/EmailBundle/Views/SubscribedEvents/Timeline/index.html.php'])",
      "num_files": 1.0
    },
    {
      "index": 1077,
      "vuln_id": "GHSA-7rg4-266c-jqw6",
      "cwe_id": "{'CWE-330', 'CWE-352'}",
      "score": 6.5,
      "chain": "{'https://github.com/centreon/centreon/commit/626d3fb91cef402df0ebda5a8165d8f45da67c7a', 'https://github.com/centreon/centreon/commit/0261d4b250135eb513fdb7d52ba6fdeb19c6863f'}",
      "dataset": "osv",
      "summary": "Predictable CSRF tokens in centreon/centreon An issue was discovered in Centreon-Web in Centreon Platform 20.10.0. The anti-CSRF token generation is predictable, which might allow CSRF attacks that add an admin user.",
      "published_date": "2021-06-08",
      "chain_len": 2,
      "project": "https://github.com/centreon/centreon",
      "commit_href": "https://github.com/centreon/centreon/commit/626d3fb91cef402df0ebda5a8165d8f45da67c7a",
      "commit_sha": "626d3fb91cef402df0ebda5a8165d8f45da67c7a",
      "patch": "MULTI",
      "chain_ord": "['0261d4b250135eb513fdb7d52ba6fdeb19c6863f', '626d3fb91cef402df0ebda5a8165d8f45da67c7a']",
      "before_first_fix_commit": "{'9a69f217db9af7820823df14a5fa737d554aa2c8'}",
      "last_fix_commit": "626d3fb91cef402df0ebda5a8165d8f45da67c7a",
      "chain_ord_pos": 2.0,
      "commit_datetime": "03/24/2021, 13:36:03",
      "message": "fix(sec): use openssl_random_pseudo_bytes to generate csrf token (#9612)\n\nRefs: MON-6772",
      "author": "Kevin Duret",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 5, 'total': 7}",
      "files": "{'www/lib/HTML/QuickForm/HTML_QuickFormCustom.php': {'additions': 2, 'deletions': 5, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/centreon/centreon/raw/626d3fb91cef402df0ebda5a8165d8f45da67c7a/www%2Flib%2FHTML%2FQuickForm%2FHTML_QuickFormCustom.php', 'patch': \"@@ -85,12 +85,9 @@ public function &createElement($elementType)\\n      */\\n     public function createSecurityToken()\\n     {\\n-        $token = md5(uniqid());\\n+        $token = bin2hex(openssl_random_pseudo_bytes(16));\\n \\n-        if (false === isset($_SESSION['x-centreon-token']) &&\\n-            (isset($_SESSION['x-centreon-token']) &&\\n-                false === is_array($_SESSION['x-centreon-token']))\\n-        ) {\\n+        if (!isset($_SESSION['x-centreon-token']) || !is_array($_SESSION['x-centreon-token'])) {\\n             $_SESSION['x-centreon-token'] = array();\\n             $_SESSION['x-centreon-token-generated-at'] = array();\\n         }\"}}",
      "message_norm": "fix(sec): use openssl_random_pseudo_bytes to generate csrf token (#9612)\n\nrefs: mon-6772",
      "language": "en",
      "entities": "[('fix(sec', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('#9612', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['www/lib/HTML/QuickForm/HTML_QuickFormCustom.php'])",
      "num_files": 1.0
    },
    {
      "index": 124,
      "vuln_id": "GHSA-2p9q-h29j-3f5v",
      "cwe_id": "{'CWE-20'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7'}",
      "dataset": "osv",
      "summary": "Missing validation causes `TensorSummaryV2` to crash ### Impact\nThe implementation of [`tf.raw_ops.TensorSummaryV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array('test'),\n  tensor=np.array(3),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))\n```\n\nThe code assumes `axis` is a scalar but there is no validation for this.\n\n```cc\n    const Tensor& serialized_summary_metadata_tensor = c->input(2);\n    // ...\n    ParseFromTString(serialized_summary_metadata_tensor.scalar<tstring>()(),\n                     v->mutable_metadata());\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University.",
      "published_date": "2022-05-24",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "commit_sha": "290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "patch": "SINGLE",
      "chain_ord": "['290bb05c80c327ed74fae1d089f1001b1e2a4ef7']",
      "before_first_fix_commit": "{'263ad6ad211921b34c5fa5c3460e177d855d1101'}",
      "last_fix_commit": "290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2022, 18:02:25",
      "message": "Fix tf.raw_ops.TensorSummaryV2 vulnerability with invalid serialized_summary_metadata.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445197183",
      "author": "Alan Liu",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'tensorflow/core/kernels/summary_tensor_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/290bb05c80c327ed74fae1d089f1001b1e2a4ef7/tensorflow%2Fcore%2Fkernels%2Fsummary_tensor_op.cc', 'patch': '@@ -36,6 +36,10 @@ class SummaryTensorOpV2 : public OpKernel {\\n                 errors::InvalidArgument(\"tag must be scalar\"));\\n     const Tensor& tensor = c->input(1);\\n     const Tensor& serialized_summary_metadata_tensor = c->input(2);\\n+    OP_REQUIRES(\\n+        c,\\n+        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\\n+        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\\n \\n     Summary s;\\n     Summary::Value* v = s.add_value();'}}",
      "message_norm": "fix tf.raw_ops.tensorsummaryv2 vulnerability with invalid serialized_summary_metadata.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445197183",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('serialized_summary_metadata', 'SECWORD', ''), ('445197183', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/summary_tensor_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3040,
      "vuln_id": "GHSA-v3jv-wrf4-5845",
      "cwe_id": "{'CWE-59'}",
      "score": 0.0,
      "chain": "{'https://github.com/npm/npm/commit/f4d31693e73a963574a88000580db1a716fe66f1'}",
      "dataset": "osv",
      "summary": "Local Privilege Escalation in npm Affected versions of `npm` use predictable temporary file names during archive unpacking. If an attacker can create a symbolic link at the location of one of these temporary file names, the attacker can arbitrarily write to any file that the user which owns the `npm` process has permission to write to, potentially resulting in local privilege escalation.\n\n\n\n## Recommendation\n\nUpdate to version 1.3.3 or later.",
      "published_date": "2020-09-01",
      "chain_len": 1,
      "project": "https://github.com/npm/npm",
      "commit_href": "https://github.com/npm/npm/commit/f4d31693e73a963574a88000580db1a716fe66f1",
      "commit_sha": "f4d31693e73a963574a88000580db1a716fe66f1",
      "patch": "SINGLE",
      "chain_ord": "['f4d31693e73a963574a88000580db1a716fe66f1']",
      "before_first_fix_commit": "{'e3007309aa93e94b69b5094fa1b11070b2ef993c'}",
      "last_fix_commit": "f4d31693e73a963574a88000580db1a716fe66f1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/10/2013, 15:59:28",
      "message": "Put 6 bytes of random in tmp folder name\n\nCloses #3635",
      "author": "isaacs",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'lib/npm.js': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/npm/npm/raw/f4d31693e73a963574a88000580db1a716fe66f1/lib%2Fnpm.js', 'patch': '@@ -477,9 +477,14 @@ Object.defineProperty(npm, \"cache\",\\n   })\\n \\n var tmpFolder\\n+var crypto = require(\"crypto\")\\n+var rand = crypto.randomBytes(6)\\n+                 .toString(\"base64\")\\n+                 .replace(/\\\\//g, \\'_\\')\\n+                 .replace(/\\\\+/, \\'-\\')\\n Object.defineProperty(npm, \"tmp\",\\n   { get : function () {\\n-      if (!tmpFolder) tmpFolder = \"npm-\" + process.pid\\n+      if (!tmpFolder) tmpFolder = \"npm-\" + process.pid + \"-\" + rand\\n       return path.resolve(npm.config.get(\"tmp\"), tmpFolder)\\n     }\\n   , enumerable : true'}}",
      "message_norm": "put 6 bytes of random in tmp folder name\n\ncloses #3635",
      "language": "en",
      "entities": "[('#3635', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/npm.js'])",
      "num_files": 1.0
    },
    {
      "index": 3484,
      "vuln_id": "GHSA-xr38-w74q-r8jv",
      "cwe_id": "{'CWE-862', 'CWE-863'}",
      "score": 6.4,
      "chain": "{'https://github.com/inveniosoftware/invenio-drafts-resources/commit/039b0cff1ad4b952000f4d8c3a93f347108b6626'}",
      "dataset": "osv",
      "summary": "Permissions not properly checked in Invenio-Drafts-Resources ### Impact\n\nInvenio-Drafts-Resources does not properly check permissions when a record is published. The vulnerability is exploitable in a default installation of InvenioRDM. An authenticated user is able via REST API calls to publish draft records of other users if they know the record identifier and the draft validates (e.g. all require fields filled out). An attacker is not able to modify the data in the record, and thus e.g. *cannot* change a record from restricted to public.\n\n### Details\n\nThe service's ``publish()`` method contains the following permission check:\n\n```python\ndef publish(..):\n    self.require_permission(identity, \"publish\")\n```\nHowever, the record should have been passed into the permission check so that the need generators have access to e.g. the record owner.\n\n```python\ndef publish(..):\n    self.require_permission(identity, \"publish\", record=record)\n```\nThe bug is activated in Invenio-RDM-Records which has a need generator called ``RecordOwners()``, which when no record is passed in defaults to allow any authenticated user:\n\n```python\nclass RecordOwners(Generator):\n    def needs(self, record=None, **kwargs):\n        if record is None:\n            return [authenticated_user]\n    # ...\n```\n\n### Patches\n\nThe problem is patched in Invenio-Drafts-Resources v0.13.7 and 0.14.6+, which is part of InvenioRDM v6.0.1 and InvenioRDM v7.0 respectively.\n\nYou can verify the version installed of Invenio-Drafts-Resources via PIP:\n\n```console\ncd ~/src/my-site\npipenv run pip freeze | grep invenio-drafts-resources\n```\n\n### References\n\n- [Security policy](https://invenio.readthedocs.io/en/latest/community/security-policy.html)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Chat with us on Discord: https://discord.gg/8qatqBC",
      "published_date": "2021-12-06",
      "chain_len": 1,
      "project": "https://github.com/inveniosoftware/invenio-drafts-resources",
      "commit_href": "https://github.com/inveniosoftware/invenio-drafts-resources/commit/039b0cff1ad4b952000f4d8c3a93f347108b6626",
      "commit_sha": "039b0cff1ad4b952000f4d8c3a93f347108b6626",
      "patch": "SINGLE",
      "chain_ord": "['039b0cff1ad4b952000f4d8c3a93f347108b6626']",
      "before_first_fix_commit": "{'998ede99c377c84f11fe22c07c20f90c88c463dc'}",
      "last_fix_commit": "039b0cff1ad4b952000f4d8c3a93f347108b6626",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/24/2021, 14:32:41",
      "message": "security: fix missing permission check of publish\n\n* Invenio-Drafts-Resources does not properly check permissions when a\n  record is published. The vulnerability is exploitable in a default\n  installation of InvenioRDM. An authenticated a user is able via REST\n  API calls to publish draft records of other users if they know the\n  record identifier and the draft validates (e.g. all require fields\n  filled out). An attacker is not able to modify the data in the record,\n  and thus e.g. cannot change a record from restricted to public.",
      "author": "Lars Holm Nielsen",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 2, 'total': 3}",
      "files": "{'invenio_drafts_resources/services/records/service.py': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/inveniosoftware/invenio-drafts-resources/raw/039b0cff1ad4b952000f4d8c3a93f347108b6626/invenio_drafts_resources%2Fservices%2Frecords%2Fservice.py', 'patch': '@@ -267,10 +267,9 @@ def publish(self, id_, identity, uow=None):\\n               into records)\\n             - Create or update associated (published) record with data\\n         \"\"\"\\n-        self.require_permission(identity, \"publish\")\\n-\\n         # Get the draft\\n         draft = self.draft_cls.pid.resolve(id_, registered_only=False)\\n+        self.require_permission(identity, \"publish\", record=draft)\\n \\n         # Validate the draft strictly - since a draft can be saved with errors\\n         # we do a strict validation here to make sure only valid drafts can be'}}",
      "message_norm": "security: fix missing permission check of publish\n\n* invenio-drafts-resources does not properly check permissions when a\n  record is published. the vulnerability is exploitable in a default\n  installation of inveniordm. an authenticated a user is able via rest\n  api calls to publish draft records of other users if they know the\n  record identifier and the draft validates (e.g. all require fields\n  filled out). an attacker is not able to modify the data in the record,\n  and thus e.g. cannot change a record from restricted to public.",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('permission', 'SECWORD', ''), ('permissions', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('exploitable', 'SECWORD', ''), ('validates', 'ACTION', ''), ('attacker', 'FLAW', ''), ('change', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['invenio_drafts_resources/services/records/service.py'])",
      "num_files": 1.0
    },
    {
      "index": 707,
      "vuln_id": "GHSA-5vr6-hm68-5j9p",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/librenms/librenms/pull/13554/commits/4f231a0f49b6c953d506913364ffd7fb3a660630'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in LibreNMS LibreNMS 21.11.0 is affected by is affected by a Cross Site Scripting (XSS) vulnerability in includes/html/forms/poller-groups.inc.php.",
      "published_date": "2021-12-03",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/pull/13554/commits/4f231a0f49b6c953d506913364ffd7fb3a660630",
      "commit_sha": "4f231a0f49b6c953d506913364ffd7fb3a660630",
      "patch": "SINGLE",
      "chain_ord": "['4f231a0f49b6c953d506913364ffd7fb3a660630']",
      "before_first_fix_commit": "{'fff7b45a7599f8f13a55250dc5f2b957f3394194'}",
      "last_fix_commit": "4f231a0f49b6c953d506913364ffd7fb3a660630",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/22/2021, 22:31:45",
      "message": "fix XSS vulnerability in poller-groups.inc.php",
      "author": "AL-KASSAR",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'includes/html/forms/poller-groups.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/4f231a0f49b6c953d506913364ffd7fb3a660630/includes%2Fhtml%2Fforms%2Fpoller-groups.inc.php', 'patch': '@@ -44,5 +44,5 @@\\n if (! empty($ok)) {\\n     exit(\"$ok\");\\n } else {\\n-    exit(\"ERROR: $error\");\\n+    exit(\"ERROR: \".htmlspecialchars($error));;\\n }'}}",
      "message_norm": "fix xss vulnerability in poller-groups.inc.php",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['includes/html/forms/poller-groups.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 1697,
      "vuln_id": "GHSA-f8h4-7rgh-q2gm",
      "cwe_id": "{'CWE-787', 'CWE-120'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876'}",
      "dataset": "osv",
      "summary": "Segfault and heap buffer overflow in `{Experimental,}DatasetToTFRecord` ### Impact\nThe implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\ndataset = tf.data.experimental.to_variant(dataset)\ntf.raw_ops.ExperimentalDatasetToTFRecord(\n  input_dataset=dataset,\n  filename='/tmp/output',\n  compression_type='')\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types.\n\n### Patches\nWe have patched the issue in GitHub commit [e0b6e58c328059829c3eb968136f17aa72b6c876](https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876",
      "commit_sha": "e0b6e58c328059829c3eb968136f17aa72b6c876",
      "patch": "SINGLE",
      "chain_ord": "['e0b6e58c328059829c3eb968136f17aa72b6c876']",
      "before_first_fix_commit": "{'b5b9ae94a68215d4498ea2b3d1072dc4b2bf5600'}",
      "last_fix_commit": "e0b6e58c328059829c3eb968136f17aa72b6c876",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/29/2021, 21:58:43",
      "message": "Fix segfault/heap buffer overflow in `{Experimental,}DatasetToTFRecord` where dataset is numeric.\n\nCode assumes only strings inputs and then interprets numbers as valid `tstring`s. Then, when trying to compute the CRC of the record this results in heap buffer overflow.\n\nPiperOrigin-RevId: 387675909\nChange-Id: I7396b9b8afc1ac744112af7c0b1cd7bb41e0f556",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 14, 'deletions': 1, 'total': 15}",
      "files": "{'tensorflow/core/kernels/data/experimental/to_tf_record_op.cc': {'additions': 14, 'deletions': 1, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow%2Fcore%2Fkernels%2Fdata%2Fexperimental%2Fto_tf_record_op.cc', 'patch': '@@ -18,6 +18,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/function_handle_cache.h\"\\n #include \"tensorflow/core/framework/op_kernel.h\"\\n #include \"tensorflow/core/framework/resource_mgr.h\"\\n+#include \"tensorflow/core/framework/types.h\"\\n #include \"tensorflow/core/kernels/ops_util.h\"\\n #include \"tensorflow/core/lib/core/threadpool.h\"\\n #include \"tensorflow/core/lib/io/record_writer.h\"\\n@@ -91,8 +92,20 @@ class ToTFRecordOp : public AsyncOpKernel {\\n     TF_RETURN_IF_ERROR(finalized_dataset->MakeIterator(\\n         &iter_ctx, /*parent=*/nullptr, \"ToTFRecordOpIterator\", &iterator));\\n \\n+    const int num_output_dtypes = finalized_dataset->output_dtypes().size();\\n+    if (num_output_dtypes != 1) {\\n+      return errors::InvalidArgument(\\n+          \"ToTFRecordOp currently only support datasets of 1 single column, \",\\n+          \"but got \", num_output_dtypes);\\n+    }\\n+    const DataType dt = finalized_dataset->output_dtypes()[0];\\n+    if (dt != DT_STRING) {\\n+      return errors::InvalidArgument(\\n+          \"ToTFRecordOp currently only supports DT_STRING dataypes, but got \",\\n+          DataTypeString(dt));\\n+    }\\n     std::vector<Tensor> components;\\n-    components.reserve(finalized_dataset->output_dtypes().size());\\n+    components.reserve(num_output_dtypes);\\n     bool end_of_sequence;\\n     do {\\n       TF_RETURN_IF_ERROR('}}",
      "message_norm": "fix segfault/heap buffer overflow in `{experimental,}datasettotfrecord` where dataset is numeric.\n\ncode assumes only strings inputs and then interprets numbers as valid `tstring`s. then, when trying to compute the crc of the record this results in heap buffer overflow.\n\npiperorigin-revid: 387675909\nchange-id: i7396b9b8afc1ac744112af7c0b1cd7bb41e0f556",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('buffer overflow', 'SECWORD', ''), ('crc', 'SECWORD', ''), ('buffer overflow', 'SECWORD', ''), ('387675909', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/data/experimental/to_tf_record_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3126,
      "vuln_id": "GHSA-vhm6-gw82-6f8j",
      "cwe_id": "{'CWE-79'}",
      "score": 4.8,
      "chain": "{'https://github.com/librenms/librenms/commit/703745d0ed3948623153117d761ce48514e2f281'}",
      "dataset": "osv",
      "summary": "Cross site scripting in LibreNMS LibreNMS prior to version 22.2.2 is vulnerable to cross-site scripting.",
      "published_date": "2022-02-28",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/commit/703745d0ed3948623153117d761ce48514e2f281",
      "commit_sha": "703745d0ed3948623153117d761ce48514e2f281",
      "patch": "SINGLE",
      "chain_ord": "['703745d0ed3948623153117d761ce48514e2f281']",
      "before_first_fix_commit": "{'09929bd6865e54034db591ea37f5548406f5e716'}",
      "last_fix_commit": "703745d0ed3948623153117d761ce48514e2f281",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/22/2022, 14:28:31",
      "message": "Resolved XSS issue from alert rule list modal (#13805)",
      "author": "Neil Lathwood",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'includes/html/modal/alert_rule_list.inc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/703745d0ed3948623153117d761ce48514e2f281/includes%2Fhtml%2Fmodal%2Falert_rule_list.inc.php', 'patch': '@@ -62,7 +62,7 @@\\n                             echo \"\\n                                 <tr>\\n                                     <td>{$rule[\\'name\\']}</td>\\n-                                    <td><i>\" . htmlentities($rule_display) . \"</i></td>\\n+                                    <td><i>\" . htmlentities(strip_tags($rule_display)) . \"</i></td>\\n                                     <td>{$rule[\\'severity\\']}</td>\\n                                     <td>{$rule[\\'id\\']}</td>\\n                                 </tr>'}}",
      "message_norm": "resolved xss issue from alert rule list modal (#13805)",
      "language": "no",
      "entities": "[('xss', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#13805', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['includes/html/modal/alert_rule_list.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 2178,
      "vuln_id": "GHSA-j3mj-fhpq-qqjj",
      "cwe_id": "{'CWE-617'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3'}",
      "dataset": "osv",
      "summary": "Reachable Assertion in Tensorflow ### Impact\nWhen decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. \n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "commit_sha": "5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "patch": "SINGLE",
      "chain_ord": "['5b491cd5e41ad63735161cec9c2a568172c8b6a3']",
      "before_first_fix_commit": "{'9f3eb61a8033efa4ef45b1f291ef67d5beef8b0e'}",
      "last_fix_commit": "5b491cd5e41ad63735161cec9c2a568172c8b6a3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/08/2021, 17:51:28",
      "message": "Validate `proto.dtype()` before calling `set_dtype()`.\n\nThis prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\nPiperOrigin-RevId: 408369083\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 0, 'total': 9}",
      "files": "{'tensorflow/core/framework/tensor.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/5b491cd5e41ad63735161cec9c2a568172c8b6a3/tensorflow%2Fcore%2Fframework%2Ftensor.cc', 'patch': '@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {\\n                          dtype_error = true, dtype_error = true);\\n     }\\n     if (dtype_error || p == nullptr) return false;\\n+  } else {\\n+    // Handle the case of empty tensors (N = 0) or tensors with incomplete shape\\n+    // (N = -1). All other values of `shape.num_elements()` should be invalid by\\n+    // construction.\\n+    // Here, we just need to validate that the `proto.dtype()` value is valid.\\n+    bool dtype_error = false;\\n+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,\\n+                       dtype_error = true);\\n+    if (dtype_error) return false;\\n   }\\n   shape_ = shape;\\n   set_dtype(proto.dtype());'}}",
      "message_norm": "validate `proto.dtype()` before calling `set_dtype()`.\n\nthis prevents a `dcheck`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\npiperorigin-revid: 408369083\nchange-id: ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('prevents', 'ACTION', ''), ('408369083', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/framework/tensor.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3363,
      "vuln_id": "GHSA-x4g7-fvjj-prg8",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b'}",
      "dataset": "osv",
      "summary": "Division by 0 in `QuantizedConv2D` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedConv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)\n```\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/00e9a4d67d76703fa1aee33dac582acf317e0e81/tensorflow/core/kernels/quantized_conv_ops.cc#L257-L259) does a division by a quantity that is controlled by the caller: \n\n```cc\nconst int filter_value_count = filter_width * filter_height * input_depth;\nconst int64 patches_per_chunk = kMaxChunkSize / (filter_value_count * sizeof(T1));\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [cfa91be9863a91d5105a3b4941096044ab32036b](https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b",
      "commit_sha": "cfa91be9863a91d5105a3b4941096044ab32036b",
      "patch": "SINGLE",
      "chain_ord": "['cfa91be9863a91d5105a3b4941096044ab32036b']",
      "before_first_fix_commit": "{'00e9a4d67d76703fa1aee33dac582acf317e0e81'}",
      "last_fix_commit": "cfa91be9863a91d5105a3b4941096044ab32036b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/20/2021, 01:58:47",
      "message": "Fix one FPE and remove two CHECK-fails.\n\nPiperOrigin-RevId: 369349640\nChange-Id: I1fedbfc2b5bab635c5cb51f103d7c9176f79831a",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 2, 'total': 13}",
      "files": "{'tensorflow/core/kernels/quantized_conv_ops.cc': {'additions': 11, 'deletions': 2, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/cfa91be9863a91d5105a3b4941096044ab32036b/tensorflow%2Fcore%2Fkernels%2Fquantized_conv_ops.cc', 'patch': '@@ -18,6 +18,8 @@ limitations under the License.\\n #include <algorithm>\\n #include <vector>\\n \\n+#include \"tensorflow/core/platform/errors.h\"\\n+\\n #define EIGEN_USE_THREADS\\n \\n #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\\n@@ -227,8 +229,12 @@ class Im2ColConvFunctor {\\n       return;\\n     }\\n \\n-    CHECK_GT(output_width, 0);\\n-    CHECK_GT(output_height, 0);\\n+    OP_REQUIRES(\\n+        context, output_width > 0,\\n+        errors::InvalidArgument(\"output_width must be strictly positive\"));\\n+    OP_REQUIRES(\\n+        context, output_height > 0,\\n+        errors::InvalidArgument(\"output_height must be strictly positive\"));\\n     int filter_left_offset;\\n     int filter_top_offset;\\n     if (padding == VALID) {\\n@@ -255,6 +261,9 @@ class Im2ColConvFunctor {\\n     // by the width, then the height. This is the standard memory order in the\\n     // image world if it helps to visualize it.\\n     const int filter_value_count = filter_width * filter_height * input_depth;\\n+    OP_REQUIRES(context, filter_value_count > 0,\\n+                errors::InvalidArgument(\\n+                    \"filter patch must contain at least one element\"));\\n     const int64 patches_per_chunk =\\n         kMaxChunkSize / (filter_value_count * sizeof(T1));\\n     const int64 chunk_value_count ='}}",
      "message_norm": "fix one fpe and remove two check-fails.\n\npiperorigin-revid: 369349640\nchange-id: i1fedbfc2b5bab635c5cb51f103d7c9176f79831a",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('remove', 'ACTION', ''), ('369349640', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/quantized_conv_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 314,
      "vuln_id": "GHSA-3v6h-hqm4-2rg6",
      "cwe_id": "{'CWE-22'}",
      "score": 0.0,
      "chain": "{'https://github.com/cthackers/adm-zip/commit/62f64004fefb894c523a7143e8a88ebe6c84df25'}",
      "dataset": "osv",
      "summary": "Arbitrary File Write in adm-zip Versions of `adm-zip` before 0.4.9 are vulnerable to arbitrary file write when used to extract a specifically crafted archive that contains path traversal filenames (`../../file.txt` for example).\n\n\n## Recommendation\n\nUpdate to version 0.4.9 or later.",
      "published_date": "2018-07-27",
      "chain_len": 1,
      "project": "https://github.com/cthackers/adm-zip",
      "commit_href": "https://github.com/cthackers/adm-zip/commit/62f64004fefb894c523a7143e8a88ebe6c84df25",
      "commit_sha": "62f64004fefb894c523a7143e8a88ebe6c84df25",
      "patch": "SINGLE",
      "chain_ord": "['62f64004fefb894c523a7143e8a88ebe6c84df25']",
      "before_first_fix_commit": "{'e116bc18df51e4e50c493cede82ae7696954b511', '6f4dfeb9a2166e93207443879988f97d88a37cde'}",
      "last_fix_commit": "62f64004fefb894c523a7143e8a88ebe6c84df25",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/23/2018, 07:20:56",
      "message": "Merge pull request #212 from aviadatsnyk/master\n\nfix: prevent extracting archived files outside of target path.  Credit to Snyk Security Research Team for disclosure and fixing the issue.",
      "author": "The Brain",
      "comments": "{'com_1': {'author': 'Shubham-9798', 'datetime': '08/27/2018, 04:25:44', 'body': 'adding adm-zip'}}",
      "stats": "{'additions': 11, 'deletions': 0, 'total': 11}",
      "files": "{'adm-zip.js': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/cthackers/adm-zip/raw/62f64004fefb894c523a7143e8a88ebe6c84df25/adm-zip.js', 'patch': '@@ -354,6 +354,9 @@ module.exports = function(/*String*/input) {\\n \\n \\n             var target = pth.resolve(targetPath, maintainEntryPath ? entryName : pth.basename(entryName));\\n+            if(!target.startsWith(targetPath)) {\\n+                throw Utils.Errors.INVALID_FILENAME + \": \" + entryName;\\n+            }\\n \\n             if (item.isDirectory) {\\n                 target = pth.resolve(target, \"..\");\\n@@ -429,6 +432,10 @@ module.exports = function(/*String*/input) {\\n             _zip.entries.forEach(function(entry) {\\n                 entryName = entry.entryName.toString();\\n \\n+                if(!pth.resolve(targetPath, entryName).startsWith(targetPath)) {\\n+                    throw Utils.Errors.INVALID_FILENAME + \": \" + entryName;\\n+                }\\n+\\n                 if(isWin){\\n                     entryName = escapeFileName(entryName)\\n                 }\\n@@ -471,6 +478,10 @@ module.exports = function(/*String*/input) {\\n                     entryName = escapeFileName(entryName)\\n                 }\\n \\n+                if(!pth.resolve(targetPath, entryName).startsWith(targetPath)) {\\n+                  throw Utils.Errors.INVALID_FILENAME + \": \" + entryName;\\n+                }\\n+\\n                 if (entry.isDirectory) {\\n                     Utils.makeDir(pth.resolve(targetPath, entryName));\\n                     if(--i == 0)'}}",
      "message_norm": "merge pull request #212 from aviadatsnyk/master\n\nfix: prevent extracting archived files outside of target path.  credit to snyk security research team for disclosure and fixing the issue.",
      "language": "en",
      "entities": "[('#212', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('security', 'SECWORD', ''), ('disclosure', 'SECWORD', ''), ('fixing', 'ACTION', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['adm-zip.js'])",
      "num_files": 1.0
    },
    {
      "index": 646,
      "vuln_id": "GHSA-5j3g-jfq3-7jwx",
      "cwe_id": "{'CWE-94'}",
      "score": 0.0,
      "chain": "{'https://github.com/hapijs/bassmaster/commit/b751602d8cb7194ee62a61e085069679525138c4'}",
      "dataset": "osv",
      "summary": "Arbitrary JavaScript Execution in bassmaster A vulnerability exists in bassmaster <= 1.5.1 that allows for an attacker to provide arbitrary JavaScript that is then executed server side via eval.\n\n\n## Recommendation\n\nUpdate to bassmaster version 1.5.2 or greater.",
      "published_date": "2017-10-24",
      "chain_len": 1,
      "project": "https://github.com/hapijs/bassmaster",
      "commit_href": "https://github.com/hapijs/bassmaster/commit/b751602d8cb7194ee62a61e085069679525138c4",
      "commit_sha": "b751602d8cb7194ee62a61e085069679525138c4",
      "patch": "SINGLE",
      "chain_ord": "['b751602d8cb7194ee62a61e085069679525138c4']",
      "before_first_fix_commit": "{'83f02417beab924ce2fe6ee7d6fcfab11d2dafd5'}",
      "last_fix_commit": "b751602d8cb7194ee62a61e085069679525138c4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/25/2014, 23:06:07",
      "message": "Remove eval statement",
      "author": "nvcexploder",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 8, 'total': 10}",
      "files": "{'lib/batch.js': {'additions': 2, 'deletions': 8, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/outmoded/bassmaster/raw/b751602d8cb7194ee62a61e085069679525138c4/lib%2Fbatch.js', 'patch': \"@@ -146,16 +146,10 @@ internals.batch = function (batchRequest, resultsData, pos, parts, callback) {\\n             var ref = resultsData.resultsMap[parts[i].index];\\n \\n             if (ref) {\\n-                var value = null;\\n-\\n-                try {\\n-                    eval('value = ref.' + parts[i].value + ';');\\n-                }\\n-                catch (e) {\\n-                    error = new Error(e.message);\\n-                }\\n+                var value = ref[parts[i].value]||null;\\n \\n                 if (value) {\\n+\\n                     if (value.match && value.match(/^[\\\\w:]+$/)) {\\n                         path += value;\\n                     }\"}}",
      "message_norm": "remove eval statement",
      "language": "sl",
      "entities": "[('remove', 'ACTION', ''), ('eval', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/batch.js'])",
      "num_files": 1.0
    },
    {
      "index": 2096,
      "vuln_id": "GHSA-hmg3-c7xj-6qwm",
      "cwe_id": "{'CWE-131'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13'}",
      "dataset": "osv",
      "summary": "Heap buffer overflow in `SparseTensorToCSRSparseMatrix` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in converting sparse tensors to CSR Sparse matrices:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([0.0], dtype=np.float32)\ndense_shape = [0, 0]\n\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\nvalues_tensor = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap:\n\n```cc\ncsr_row_ptr(indices(i, 0) + 1) += 1;\n```\n                      \nIf the value at `indices(i, 0)` is such that `indices(i, 0) + 1` is outside the bounds of `csr_row_ptr`, this results in writing outside of bounds of heap allocated data.\n\n### Patches\nWe have patched the issue in GitHub commit [1e922ccdf6bf46a3a52641f99fd47d54c1decd13](https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
      "commit_sha": "1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
      "patch": "SINGLE",
      "chain_ord": "['1e922ccdf6bf46a3a52641f99fd47d54c1decd13']",
      "before_first_fix_commit": "{'800346f2c03a27e182dd4fba48295f65e7790739'}",
      "last_fix_commit": "1e922ccdf6bf46a3a52641f99fd47d54c1decd13",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/23/2021, 17:41:12",
      "message": "Fix crash in `SparseTensorToCSRSparseMatrixCPUFunctor`\n\nPiperOrigin-RevId: 370110290\nChange-Id: I4451e92661a55c2180f80d38b67a9b50bf5edec5",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'tensorflow/core/kernels/sparse/kernels.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1e922ccdf6bf46a3a52641f99fd47d54c1decd13/tensorflow%2Fcore%2Fkernels%2Fsparse%2Fkernels.cc', 'patch': '@@ -22,6 +22,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/tensor_types.h\"\\n #include \"tensorflow/core/lib/core/errors.h\"\\n #include \"tensorflow/core/lib/core/status.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n \\n namespace tensorflow {\\n namespace functor {\\n@@ -63,6 +64,11 @@ Status SparseTensorToCSRSparseMatrixCPUFunctor::operator()(\\n \\n     for (int64 i = 0; i < total_nnz; ++i) {\\n       // For now, the rows pointers store the corresponding row counts.\\n+      int64 ix = indices(i, 0) + 1;\\n+      if (ix >= csr_row_ptr.size()) {\\n+        return errors::InvalidArgument(\"Got an index \", ix,\\n+                                       \" that is outside of csr_row_ptr\");\\n+      }\\n       csr_row_ptr(indices(i, 0) + 1) += 1;\\n       csr_col_ind(i) = indices(i, 1);\\n     }'}}",
      "message_norm": "fix crash in `sparsetensortocsrsparsematrixcpufunctor`\n\npiperorigin-revid: 370110290\nchange-id: i4451e92661a55c2180f80d38b67a9b50bf5edec5",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('370110290', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse/kernels.cc'])",
      "num_files": 1.0
    },
    {
      "index": 21,
      "vuln_id": "GHSA-24m3-w8g9-jwpq",
      "cwe_id": "{'CWE-178', 'CWE-200'}",
      "score": 3.0,
      "chain": "{'https://github.com/simplesamlphp/simplesamlphp/commit/47968d26a2fd3ed52da70dc09210921d612ce44e'}",
      "dataset": "osv",
      "summary": "Information disclosure of source code in SimpleSAMLphp ### Background\n\nThe module controller in `SimpleSAML\\Module` that processes requests for pages\nhosted by modules, has code to identify paths ending with `.php` and process\nthose as PHP code. If no other suitable way of handling the given path exists it\npresents the file to the browser.\n\n### Description\n\nThe check to identify paths ending with `.php` does not account for uppercase\nletters. If someone requests a path ending with e.g. `.PHP` and the server is\nserving the code from a case-insensitive file system, such as on Windows, the\nprocessing of the PHP code does not occur, and the source code is instead\npresented to the browser.\n\n### Affected versions\n\nSimpleSAMLphp versions **1.18.5 and older**.\n\n### Impact\n\nAn attacker may use this issue to gain access to the source code in third-party\nmodules that is meant to be private, or even sensitive. However, the attack\nsurface is considered small, as the attack will only work when SimpleSAMLphp\nserves such content from a file system that is not case-sensitive, such as on\nWindows.\n\n### Resolution\n\nUpgrade the SimpleSAMLphp installation to version **1.18.6**.\n\n### Credit\n\nThis vulnerability was discovered and reported by S\u0142awek Naczy\u0144ski.",
      "published_date": "2020-04-22",
      "chain_len": 1,
      "project": "https://github.com/simplesamlphp/simplesamlphp",
      "commit_href": "https://github.com/simplesamlphp/simplesamlphp/commit/47968d26a2fd3ed52da70dc09210921d612ce44e",
      "commit_sha": "47968d26a2fd3ed52da70dc09210921d612ce44e",
      "patch": "SINGLE",
      "chain_ord": "['47968d26a2fd3ed52da70dc09210921d612ce44e']",
      "before_first_fix_commit": "{'228e4f2287fd5d73727178b87de7a9652bf1c5b0'}",
      "last_fix_commit": "47968d26a2fd3ed52da70dc09210921d612ce44e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/16/2020, 12:17:24",
      "message": "Fix source code disclosure on case-insensitive file systems\n\nIf the file system containing the PHP code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the PHP file to the browser instead of executing it.\n\nE.g. a request for this URL will return the source code:\n\n  https:/sp.example.org/simplesaml/module.php/core/frontpage_welcome.PHP\n\nFix that by converting the path to lowercase before checking the file\nextension.\n\nSee the following page for details:\n\n  https://github.com/simplesamlphp/simplesamlphp/security/advisories/GHSA-24m3-w8g9-jwpq",
      "author": "Olav Morken",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/SimpleSAML/Module.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/simplesamlphp/simplesamlphp/raw/47968d26a2fd3ed52da70dc09210921d612ce44e/lib%2FSimpleSAML%2FModule.php', 'patch': \"@@ -259,7 +259,7 @@ function ($val) {\\n             throw new Error\\\\NotFound('The URL wasn\\\\'t found in the module.');\\n         }\\n \\n-        if (substr($path, -4) === '.php') {\\n+        if (mb_strtolower(substr($path, -4), 'UTF-8') === '.php') {\\n             // PHP file - attempt to run it\\n \\n             /* In some environments, $_SERVER['SCRIPT_NAME'] is already set with $_SERVER['PATH_INFO']. Check for that\"}}",
      "message_norm": "fix source code disclosure on case-insensitive file systems\n\nif the file system containing the php code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the php file to the browser instead of executing it.\n\ne.g. a request for this url will return the source code:\n\n  https:/sp.example.org/simplesaml/module.php/core/frontpage_welcome.php\n\nfix that by converting the path to lowercase before checking the file\nextension.\n\nsee the following page for details:\n\n  https://github.com/simplesamlphp/simplesamlphp/security/advisories/ghsa-24m3-w8g9-jwpq",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('disclosure', 'SECWORD', ''), ('https:/sp.example.org', 'URL', ''), ('https://github.com/simplesamlphp/simplesamlphp/security/advisories/ghsa-24m3-w8g9-jwpq', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/SimpleSAML/Module.php'])",
      "num_files": 1.0
    },
    {
      "index": 2279,
      "vuln_id": "GHSA-jmqm-f2gx-4fjv",
      "cwe_id": "{'CWE-352'}",
      "score": 5.3,
      "chain": "{'https://github.com/npm/npm-registry-fetch/commit/18bf9b97fb1deecdba01ffb05580370846255c88'}",
      "dataset": "osv",
      "summary": "Sensitive information exposure through logs in npm-registry-fetch Affected versions of `npm-registry-fetch` are vulnerable to an information exposure vulnerability through log files. The cli supports URLs like `<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>`. The password value is not redacted and is printed to stdout and also to any generated log files.",
      "published_date": "2020-07-07",
      "chain_len": 1,
      "project": "https://github.com/npm/npm-registry-fetch",
      "commit_href": "https://github.com/npm/npm-registry-fetch/commit/18bf9b97fb1deecdba01ffb05580370846255c88",
      "commit_sha": "18bf9b97fb1deecdba01ffb05580370846255c88",
      "patch": "SINGLE",
      "chain_ord": "['18bf9b97fb1deecdba01ffb05580370846255c88']",
      "before_first_fix_commit": "{'09e540b09a951ded299ee028e7f1bd21cef5a6da'}",
      "last_fix_commit": "18bf9b97fb1deecdba01ffb05580370846255c88",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/30/2020, 16:32:16",
      "message": "chore: remove auth data from logs (#29)",
      "author": "Claudia Hern\u00e1ndez",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 1, 'total': 11}",
      "files": "{'check-response.js': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/npm/npm-registry-fetch/raw/18bf9b97fb1deecdba01ffb05580370846255c88/check-response.js', 'patch': \"@@ -30,9 +30,18 @@ function logRequest (method, res, startTime, opts) {\\n   const attempt = res.headers.get('x-fetch-attempts')\\n   const attemptStr = attempt && attempt > 1 ? ` attempt #${attempt}` : ''\\n   const cacheStr = res.headers.get('x-local-cache') ? ' (from cache)' : ''\\n+\\n+  let urlStr\\n+  try {\\n+    const url = new URL(res.url)\\n+    urlStr = res.url.replace(url.password, '***')\\n+  } catch {\\n+    urlStr = res.url\\n+  }\\n+\\n   opts.log.http(\\n     'fetch',\\n-    `${method.toUpperCase()} ${res.status} ${res.url} ${elapsedTime}ms${attemptStr}${cacheStr}`\\n+    `${method.toUpperCase()} ${res.status} ${urlStr} ${elapsedTime}ms${attemptStr}${cacheStr}`\\n   )\\n }\"}}",
      "message_norm": "chore: remove auth data from logs (#29)",
      "language": "en",
      "entities": "[('remove', 'ACTION', ''), ('auth', 'SECWORD', ''), ('#29', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['check-response.js'])",
      "num_files": 1.0
    },
    {
      "index": 2167,
      "vuln_id": "GHSA-hxmr-5gv9-6p8v",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/librenms/librenms/commit/4f86915866703e2fcd1e34b3fc1181ec2ad78e54'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in librenms Cross-site Scripting (XSS) - Stored in Packagist librenms/librenms prior to 22.2.0.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/commit/4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
      "commit_sha": "4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
      "patch": "SINGLE",
      "chain_ord": "['4f86915866703e2fcd1e34b3fc1181ec2ad78e54']",
      "before_first_fix_commit": "{'3ac0de16b2767d4d4df25b89aa9439daf070b24c'}",
      "last_fix_commit": "4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/13/2022, 18:07:37",
      "message": "XSS fix, cont. (#13776)\n\nhttps://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/",
      "author": "PipoCanaja",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'includes/html/pages/addhost.inc.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/4f86915866703e2fcd1e34b3fc1181ec2ad78e54/includes%2Fhtml%2Fpages%2Faddhost.inc.php', 'patch': \"@@ -45,9 +45,9 @@\\n             $snmpver = 'v2c';\\n             $additional = [\\n                 'snmp_disable' => 1,\\n-                'os'           => $_POST['os'] ? $_POST['os_id'] : 'ping',\\n-                'hardware'     => $_POST['hardware'],\\n-                'sysName'      => $_POST['sysName'],\\n+                'os'           => $_POST['os'] ? strip_tags($_POST['os_id']) : 'ping',\\n+                'hardware'     => strip_tags($_POST['hardware']),\\n+                'sysName'      => strip_tags($_POST['sysName']),\\n             ];\\n         } elseif ($_POST['snmpver'] === 'v2c' || $_POST['snmpver'] === 'v1') {\\n             if ($_POST['community']) {\"}}",
      "message_norm": "xss fix, cont. (#13776)\n\nhttps://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/",
      "language": "ca",
      "entities": "[('xss', 'SECWORD', ''), ('#13776', 'ISSUE', ''), ('https://huntr.dev/bounties/13951f51-deed-4a3d-8275-52306cc5a87d/', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['includes/html/pages/addhost.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 30,
      "vuln_id": "GHSA-2598-2f59-rmhq",
      "cwe_id": "{'CWE-89'}",
      "score": 9.8,
      "chain": "{'https://github.com/sequelize/sequelize/commit/ee4017379db0059566ecb5424274ad4e2d66bc68'}",
      "dataset": "osv",
      "summary": "SQL Injection in sequelize Versions of `sequelize` prior to 3.35.1 are vulnerable to SQL Injection. The package fails to sanitize JSON path keys in the Postgres dialect,  which may allow attackers to inject SQL statements and execute arbitrary SQL queries.\n\n\n## Recommendation\n\nUpgrade to version 3.35.1 or later.",
      "published_date": "2019-11-08",
      "chain_len": 1,
      "project": "https://github.com/sequelize/sequelize",
      "commit_href": "https://github.com/sequelize/sequelize/commit/ee4017379db0059566ecb5424274ad4e2d66bc68",
      "commit_sha": "ee4017379db0059566ecb5424274ad4e2d66bc68",
      "patch": "SINGLE",
      "chain_ord": "['ee4017379db0059566ecb5424274ad4e2d66bc68']",
      "before_first_fix_commit": "{'75c1fdbc676d73a28a5e0bca49b2a6d4a9f8708c'}",
      "last_fix_commit": "ee4017379db0059566ecb5424274ad4e2d66bc68",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/20/2019, 05:26:22",
      "message": "fix(postgres): json path key quoting (#11088)",
      "author": "Sushant",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'lib/dialects/abstract/query-generator.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/sequelize/sequelize/raw/ee4017379db0059566ecb5424274ad4e2d66bc68/lib%2Fdialects%2Fabstract%2Fquery-generator.js', 'patch': \"@@ -2198,7 +2198,8 @@ var QueryGenerator = {\\n             path[path.length - 1] = $tmp[0];\\n           }\\n \\n-          $baseKey = self.quoteIdentifier(key)+'#>>\\\\'{'+path.join(', ')+'}\\\\'';\\n+          var pathKey = self.escape('{' + path.join(', ') + '}');\\n+          $baseKey = self.quoteIdentifier(key)+'#>>'+pathKey;\\n \\n           if (options.prefix) {\\n             if (options.prefix instanceof Utils.literal) {\"}}",
      "message_norm": "fix(postgres): json path key quoting (#11088)",
      "language": "en",
      "entities": "[('fix(postgres', 'ACTION', ''), ('key', 'SECWORD', ''), ('#11088', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/dialects/abstract/query-generator.js'])",
      "num_files": 1.0
    },
    {
      "index": 3097,
      "vuln_id": "GHSA-vcjj-9vg7-vf68",
      "cwe_id": "{'CWE-476'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/15691e456c7dc9bd6be203b09765b063bf4a380c'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in TFLite ### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\n```python\nimport tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.Input(shape=(1, 2, 3)))\nmodel.add(tf.keras.layers.Dense(0, activation='relu'))\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninterpreter.invoke()\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer.\n\n```cc\n  if (y4 > 1) {\n    // ...\n  } else {\n    for (int i0 = 0; i0 < y0; ++i0) {\n      const T* input2_data_ptr = nullptr;\n      for (int i1 = 0; i1 < y1; ++i1) {\n        input2_data_ptr = input2_data_reset;\n        for (int i2 = 0; i2 < y2; ++i2) {\n          scalar_broadcast_f(y3, params, *input1_data_ptr, input2_data_ptr,\n                             output_data_ptr);\n        }\n      }\n    }\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [15691e456c7dc9bd6be203b09765b063bf4a380c](https://github.com/tensorflow/tensorflow/commit/15691e456c7dc9bd6be203b09765b063bf4a380c).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/15691e456c7dc9bd6be203b09765b063bf4a380c",
      "commit_sha": "15691e456c7dc9bd6be203b09765b063bf4a380c",
      "patch": "SINGLE",
      "chain_ord": "['15691e456c7dc9bd6be203b09765b063bf4a380c']",
      "before_first_fix_commit": "{'c107c1a6cee9afe5f718a48b70ffaa44bece42a2'}",
      "last_fix_commit": "15691e456c7dc9bd6be203b09765b063bf4a380c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/28/2021, 01:40:39",
      "message": "Prevent dereferencing of null pointers in TFLite's `add.cc`.\n\nPiperOrigin-RevId: 387244946\nChange-Id: I56094233327fbd8439b92e1dbb1262176e00eeb9",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'tensorflow/lite/kernels/internal/optimized/optimized_ops.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/15691e456c7dc9bd6be203b09765b063bf4a380c/tensorflow%2Flite%2Fkernels%2Finternal%2Foptimized%2Foptimized_ops.h', 'patch': '@@ -265,7 +265,7 @@ inline void BinaryBroadcastFiveFold(const ArithmeticParams& unswitched_params,\\n       // We have broadcast y2*y3*y4 of input2 data y1 times, and now move on.\\n       input2_data_reset = input2_data_ptr;\\n     }\\n-  } else {\\n+  } else if (input1_data_ptr != nullptr) {\\n     // Special case of y4 == 1, in which the innermost loop is a single\\n     // element and can be combined with the next (y3) as an inner broadcast.\\n     //'}}",
      "message_norm": "prevent dereferencing of null pointers in tflite's `add.cc`.\n\npiperorigin-revid: 387244946\nchange-id: i56094233327fbd8439b92e1dbb1262176e00eeb9",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('387244946', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/internal/optimized/optimized_ops.h'])",
      "num_files": 1.0
    },
    {
      "index": 1683,
      "vuln_id": "GHSA-f7f4-hqp2-7prc",
      "cwe_id": "{'CWE-20'}",
      "score": 7.5,
      "chain": "{'https://github.com/balderdashy/sails-hook-sockets/commit/ff02114eaec090ee51db48435cc32d451662606e', 'https://github.com/balderdashy/sails-hook-sockets/commit/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
      "dataset": "osv",
      "summary": "Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
      "published_date": "2020-07-24",
      "chain_len": 2,
      "project": "https://github.com/balderdashy/sails-hook-sockets",
      "commit_href": "https://github.com/balderdashy/sails-hook-sockets/commit/0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "commit_sha": "0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "patch": "MULTI",
      "chain_ord": "['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
      "before_first_fix_commit": "{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
      "last_fix_commit": "0533a4864b1920fd8fbb5287bc0889193c5faf44",
      "chain_ord_pos": 2.0,
      "commit_datetime": "09/23/2018, 21:38:55",
      "message": "Follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
      "author": "Mike McNeil",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 1, 'total': 5}",
      "files": "{'lib/receive-incoming-sails-io-msg.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/balderdashy/sails-hook-sockets/raw/0533a4864b1920fd8fbb5287bc0889193c5faf44/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '/',\\n+      // ^^ Uses || '/' because otherwise url.parse returns `null`,\\n+      // which is not a string and thus bad when you try to check\\n+      // .match() of it.\\n \\n       method  : options.eventName,\"}}",
      "message_norm": "follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
      "language": "en",
      "entities": "[('ff02114eaec090ee51db48435cc32d451662606e', 'SHA', 'generic_sha'), ('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/receive-incoming-sails-io-msg.js'])",
      "num_files": 1.0
    },
    {
      "index": 2045,
      "vuln_id": "GHSA-hf2m-j98r-4fqw",
      "cwe_id": "{'CWE-287'}",
      "score": 9.8,
      "chain": "{'https://github.com/NodeBB/NodeBB/commit/04dab1d550cdebf4c1567bca9a51f8b9ca48a500'}",
      "dataset": "osv",
      "summary": "API token verification can be bypassed in NodeBB  ### Impact\nIncorrect logic present in the token verification step unintentionally allowed master token access to the API.\n\n### Patches\nThe vulnerability has been patch as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 04dab1d550cdebf4c1567bca9a51f8b9ca48a500 to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
      "published_date": "2021-11-30",
      "chain_len": 1,
      "project": "https://github.com/NodeBB/NodeBB",
      "commit_href": "https://github.com/NodeBB/NodeBB/commit/04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
      "commit_sha": "04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
      "patch": "SINGLE",
      "chain_ord": "['04dab1d550cdebf4c1567bca9a51f8b9ca48a500']",
      "before_first_fix_commit": "{'1783f918bc19568f421473824461ff2ed7755e4c'}",
      "last_fix_commit": "04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/25/2021, 17:23:54",
      "message": "fix: token verify",
      "author": "Bar\u0131\u015f Soner U\u015fakl\u0131",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 7, 'total': 10}",
      "files": "{'src/routes/authentication.js': {'additions': 3, 'deletions': 7, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/NodeBB/NodeBB/raw/04dab1d550cdebf4c1567bca9a51f8b9ca48a500/src%2Froutes%2Fauthentication.js', 'patch': \"@@ -44,13 +44,9 @@ Auth.getLoginStrategies = function () {\\n };\\n \\n Auth.verifyToken = async function (token, done) {\\n-\\tlet { tokens = [] } = await meta.settings.get('core.api');\\n-\\ttokens = tokens.reduce((memo, cur) => {\\n-\\t\\tmemo[cur.token] = cur.uid;\\n-\\t\\treturn memo;\\n-\\t}, {});\\n-\\n-\\tconst uid = tokens[token];\\n+\\tconst { tokens = [] } = await meta.settings.get('core.api');\\n+\\tconst tokenObj = tokens.find(t => t.token === token);\\n+\\tconst uid = tokenObj ? tokenObj.uid : undefined;\\n \\n \\tif (uid !== undefined) {\\n \\t\\tif (parseInt(uid, 10) > 0) {\"}}",
      "message_norm": "fix: token verify",
      "language": "no",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/routes/authentication.js'])",
      "num_files": 1.0
    },
    {
      "index": 1504,
      "vuln_id": "GHSA-c7fh-chf7-jr5x",
      "cwe_id": "{'CWE-770'}",
      "score": 7.5,
      "chain": "{'https://github.com/fracpete/vfsjfilechooser2/commit/9c9f2c317f3de5ece60a3ae28c371e9796e3909b'}",
      "dataset": "osv",
      "summary": "ReDOS in Vfsjfilechooser2 A Regular Expression Denial of Service (ReDOS) vulnerability was discovered in Vfsjfilechooser2 which occurs when the application attempts to validate crafted URIs.",
      "published_date": "2022-01-06",
      "chain_len": 1,
      "project": "https://github.com/fracpete/vfsjfilechooser2",
      "commit_href": "https://github.com/fracpete/vfsjfilechooser2/commit/9c9f2c317f3de5ece60a3ae28c371e9796e3909b",
      "commit_sha": "9c9f2c317f3de5ece60a3ae28c371e9796e3909b",
      "patch": "SINGLE",
      "chain_ord": "['9c9f2c317f3de5ece60a3ae28c371e9796e3909b']",
      "before_first_fix_commit": "{'5a5f3487dd44066beb2351a332751932df39973b'}",
      "last_fix_commit": "9c9f2c317f3de5ece60a3ae28c371e9796e3909b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/06/2020, 21:18:37",
      "message": "incorporated Yeting Li's fix for Potential Regex Denial of Service (ReDoS), see https://github.com/fracpete/vfsjfilechooser2/issues/7\npasswords can now also contain special characters (eg :), which have to be URL encoded (ie %3A)",
      "author": "Peter Reutemann",
      "comments": null,
      "stats": "{'additions': 95, 'deletions': 73, 'total': 168}",
      "files": "{'src/main/java/com/googlecode/vfsjfilechooser2/utils/VFSURIValidator.java': {'additions': 95, 'deletions': 73, 'changes': 168, 'status': 'modified', 'raw_url': 'https://github.com/fracpete/vfsjfilechooser2/raw/9c9f2c317f3de5ece60a3ae28c371e9796e3909b/src%2Fmain%2Fjava%2Fcom%2Fgooglecode%2Fvfsjfilechooser2%2Futils%2FVFSURIValidator.java', 'patch': '@@ -2,6 +2,8 @@\\n  * VFS URIs validator\\n  *\\n  * Copyright (C) 2008 Stan Love\\n+ * Copyright (C) 2020 University of Waikato, Hamilton, NZ\\n+ * Copyright (C) 2020 Yeting Li\\n  *\\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\\n  * you may not use this file except in compliance with the License.\\n@@ -233,11 +235,11 @@ else if ((drive != null) && (file == null)) {\\n \\t\\t//        \"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://(.*?:.*?@)*([^:]+)([ \\t]*:[0-9]+)*([ \\t]*:)*(/.*)\");\\n \\t\\t//\"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://(.+:.+@)*([^:]+)([ \\t]*:[0-9]+)*([ \\t]*:)*(/.*)\");\\n \\t\\tPattern p_ftp2 = Pattern\\n-\\t\\t\\t\\t.compile(\"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://(.+:.+@)*([^:]+?/*)([ \\t]*:[0-9]+)*([ \\t]*:)*(/.*)\");\\n+\\t\\t\\t\\t.compile(\"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://([^:@]+:[^:@]+@)*([^:]+?/*)([ ]*:[0-9]+)*([ ]*:)*(/.*)\");\\n \\t\\tMatcher m_ftp2 = p_ftp2.matcher(_uri);\\n \\n \\t\\tPattern p_ftp3 = Pattern\\n-\\t\\t\\t\\t.compile(\"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://(.+:.+@)*([^:]+)([ \\t]*:[0-9]+)*([ \\t]*:)*(/*?.*)\");\\n+\\t\\t\\t\\t.compile(\"(ftp|FTP|sftp|SFTP|http|HTTP|https|HTTPS|webdav|WEBDAV|smb|SMB)://([^:@]+:[^:@]+@)*([^:]+)([ \\t]*:[0-9]+)*([ \\t]*:)*(/*?.*)\");\\n \\t\\tMatcher m_ftp3 = p_ftp3.matcher(_uri);\\n \\n \\t\\tif (m_ftp2.matches()) {\\n@@ -344,6 +346,26 @@ else if ((drive != null) && (file == null)) {\\n \\t\\t\\tif (local_pass.startsWith(\":\")) {\\n \\t\\t\\t\\tlocal_pass = local_pass.substring(1);\\n \\t\\t\\t}\\n+\\t\\t\\t// decode specials chars (URL encoded %XY)\\n+\\t\\t\\tif (local_pass.contains(\"%\")) {\\n+\\t\\t\\t\\tString tmp_local_pass = local_pass;\\n+\\t\\t\\t\\tStringBuilder new_local_pass = new StringBuilder();\\n+\\t\\t\\t\\twhile (tmp_local_pass.contains(\"%\")) {\\n+\\t\\t\\t\\t\\tnew_local_pass.append(tmp_local_pass.substring(0, tmp_local_pass.indexOf(\\'%\\')));\\n+\\t\\t\\t\\t\\ttmp_local_pass = tmp_local_pass.substring(tmp_local_pass.indexOf(\\'%\\'));\\n+\\t\\t\\t\\t\\tif (tmp_local_pass.length() >= 3) {\\n+\\t\\t\\t\\t\\t\\tchar c = (char) Integer.parseInt(tmp_local_pass.substring(1, 3), 16);\\n+\\t\\t\\t\\t\\t\\tnew_local_pass.append(c);\\n+\\t\\t\\t\\t\\t\\ttmp_local_pass = tmp_local_pass.substring(3);\\n+\\t\\t\\t\\t\\t}\\n+\\t\\t\\t\\t\\telse {\\n+\\t\\t\\t\\t\\t\\tbreak;\\n+\\t\\t\\t\\t\\t}\\n+\\t\\t\\t\\t}\\n+\\t\\t\\t\\tif (!tmp_local_pass.isEmpty())\\n+\\t\\t\\t\\t\\tnew_local_pass.append(tmp_local_pass);\\n+\\t\\t\\t\\tlocal_pass = new_local_pass.toString();\\n+\\t\\t\\t}\\n \\t\\t}\\n \\t\\tlocal_hostname = hostname;\\n \\t\\tlocal_port = port;\\n@@ -823,26 +845,26 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"ftp://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"ftp://user:pass%3Aa@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n \\t\\t}\\n \\t\\tv.assertEquals(v.getProtocol(), \"ftp\");\\n \\t\\tv.assertEquals(v.getUser(), \"user\");\\n-\\t\\tv.assertEquals(v.getPassword(), \"pass:\");\\n+\\t\\tv.assertEquals(v.getPassword(), \"pass:a\");\\n \\t\\tv.assertEquals(v.getHostname(), \"machine\");\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"ftp://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"ftp://user:pass%3A%3a@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n \\t\\t}\\n \\t\\tv.assertEquals(v.getProtocol(), \"ftp\");\\n \\t\\tv.assertEquals(v.getUser(), \"user\");\\n-\\t\\tv.assertEquals(v.getPassword(), \"pass:\");\\n+\\t\\tv.assertEquals(v.getPassword(), \"pass::\");\\n \\t\\tv.assertEquals(v.getHostname(), \"machine\");\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n@@ -992,7 +1014,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"FTP://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"FTP://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1004,7 +1026,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"FTP://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"FTP://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1161,7 +1183,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"sftp://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"sftp://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1173,7 +1195,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"sftp://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"sftp://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1185,7 +1207,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"sftp: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"sftp: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1197,7 +1219,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"sftp:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"sftp:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1209,7 +1231,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"sftp:/ /user:pass:@machine\";\\n+\\t\\ts = \"sftp:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1221,7 +1243,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"sftp://user:pass:@:123/a\";\\n+\\t\\ts = \"sftp://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1233,7 +1255,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"sftp://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"sftp://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1329,7 +1351,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SFTP://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"SFTP://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1341,7 +1363,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"SFTP://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"SFTP://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1498,7 +1520,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"http://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"http://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1510,7 +1532,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"http://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"http://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1522,7 +1544,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"http: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"http: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1534,7 +1556,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"http:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"http:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1546,7 +1568,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"http:/ /user:pass:@machine\";\\n+\\t\\ts = \"http:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1558,7 +1580,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"http://user:pass:@:123/a\";\\n+\\t\\ts = \"http://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1570,7 +1592,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"http://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"http://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1666,7 +1688,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTP://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"HTTP://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1678,7 +1700,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"HTTP://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"HTTP://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1690,7 +1712,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"HTTP: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"HTTP: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1702,7 +1724,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTP:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"HTTP:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1714,7 +1736,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTP:/ /user:pass:@machine\";\\n+\\t\\ts = \"HTTP:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1726,7 +1748,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTP://user:pass:@:123/a\";\\n+\\t\\ts = \"HTTP://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1738,7 +1760,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTP://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"HTTP://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1835,7 +1857,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"https://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"https://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1847,7 +1869,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"https://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"https://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1859,7 +1881,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"https: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"https: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1871,7 +1893,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"https:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"https:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1883,7 +1905,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"https:/ /user:pass:@machine\";\\n+\\t\\ts = \"https:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1895,7 +1917,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"https://user:pass:@:123/a\";\\n+\\t\\ts = \"https://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -1907,7 +1929,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"https://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"https://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2003,7 +2025,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTPS://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"HTTPS://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2015,7 +2037,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"HTTPS://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"HTTPS://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2027,7 +2049,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"HTTPS: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"HTTPS: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2039,7 +2061,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTPS:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"HTTPS:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2051,7 +2073,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTPS:/ /user:pass:@machine\";\\n+\\t\\ts = \"HTTPS:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2063,7 +2085,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTPS://user:pass:@:123/a\";\\n+\\t\\ts = \"HTTPS://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2075,7 +2097,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"HTTPS://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"HTTPS://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2172,7 +2194,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"webdav://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"webdav://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2184,13 +2206,13 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"webdav://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"webdav://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n \\t\\t}\\n \\n-\\t\\ts = \"webdav: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"webdav: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2202,7 +2224,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"webdav:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"webdav:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2214,7 +2236,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"webdav:/ /user:pass:@machine\";\\n+\\t\\ts = \"webdav:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2226,7 +2248,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"webdav://user:pass:@:123/a\";\\n+\\t\\ts = \"webdav://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2238,7 +2260,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"webdav://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"webdav://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2334,7 +2356,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"WEBDAV://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"WEBDAV://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2346,7 +2368,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"WEBDAV://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"WEBDAV://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2358,7 +2380,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"WEBDAV: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"WEBDAV: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2370,7 +2392,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"WEBDAV:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"WEBDAV:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2382,7 +2404,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"WEBDAV:/ /user:pass:@machine\";\\n+\\t\\ts = \"WEBDAV:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2394,7 +2416,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"WEBDAV://user:pass:@:123/a\";\\n+\\t\\ts = \"WEBDAV://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2406,7 +2428,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"WEBDAV://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"WEBDAV://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2503,7 +2525,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"smb://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"smb://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2515,7 +2537,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"smb://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"smb://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2527,7 +2549,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"smb: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"smb: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2539,7 +2561,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"smb:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"smb:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2551,7 +2573,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"smb:/ /user:pass:@machine\";\\n+\\t\\ts = \"smb:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2563,7 +2585,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"smb://user:pass:@:123/a\";\\n+\\t\\ts = \"smb://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2575,7 +2597,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"smb://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"smb://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2671,7 +2693,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SMB://user:pass:@machine/the_file\"; //can \":\" be part of a password?\\n+\\t\\ts = \"SMB://user:pass%3A@machine/the_file\"; //if \":\" is part of a password, it must be encoded (: -> %3A)\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2683,7 +2705,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_file\");\\n \\n-\\t\\ts = \"SMB://user:pass:@machine/the_dir/\";\\n+\\t\\ts = \"SMB://user:pass%3A@machine/the_dir/\";\\n \\n \\t\\tif (!v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2695,7 +2717,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertEquals(v.getFile(), \"/the_dir/\");\\n \\n-\\t\\ts = \"SMB: //user:pass:@machine/the_file\"; //failure tests\\n+\\t\\ts = \"SMB: //user:pass%3A@machine/the_file\"; //failure tests\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2707,7 +2729,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SMB:/ /user:pass:@machine/the_file\";\\n+\\t\\ts = \"SMB:/ /user:pass%3A@machine/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2719,7 +2741,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SMB:/ /user:pass:@machine\";\\n+\\t\\ts = \"SMB:/ /user:pass%3A@machine\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2731,7 +2753,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SMB://user:pass:@:123/a\";\\n+\\t\\ts = \"SMB://user:pass%3A@:123/a\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);\\n@@ -2743,7 +2765,7 @@ public static void main(String[] args) {\\n \\t\\tv.assertNull(v.getPort());\\n \\t\\tv.assertNull(v.getFile());\\n \\n-\\t\\ts = \"SMB://user:pass:@machine:a/the_file\";\\n+\\t\\ts = \"SMB://user:pass%3A@machine:a/the_file\";\\n \\n \\t\\tif (v.isValid(s)) {\\n \\t\\t\\tv.error_msg(s);'}}",
      "message_norm": "incorporated yeting li's fix for potential regex denial of service (redos), see https://github.com/fracpete/vfsjfilechooser2/issues/7\npasswords can now also contain special characters (eg :), which have to be url encoded (ie %3a)",
      "language": "en",
      "entities": "[('denial of service', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('https://github.com/fracpete/vfsjfilechooser2/issues/7', 'URL', ''), ('passwords', 'SECWORD', ''), ('encoded', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/com/googlecode/vfsjfilechooser2/utils/VFSURIValidator.java'])",
      "num_files": 1.0
    },
    {
      "index": 696,
      "vuln_id": "GHSA-5rwj-j5m3-3chj",
      "cwe_id": "{'CWE-401'}",
      "score": 7.5,
      "chain": "{'https://github.com/sonicdoe/detect-character-encoding/commit/d44356927b92e3b13e178071bf6d7c671766f588'}",
      "dataset": "osv",
      "summary": "Missing Release of Memory after Effective Lifetime in detect-character-encoding ### Impact\n\nIn detect-character-encoding v0.3.0 and earlier, allocated memory is not released.\n\n### Patches\n\nThe problem has been patched in [detect-character-encoding v0.3.1](https://github.com/sonicdoe/detect-character-encoding/releases/tag/v0.3.1).\n\n### CVSS score\n\n[CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O/RC:C](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O/RC:C)\n\nBase Score: 7.5 (High)\nTemporal Score: 7.2 (High)\n\nSince detect-character-encoding is a library, the scoring is based on the \u201c[reasonable worst-case implementation scenario](https://www.first.org/cvss/v3.1/user-guide#3-7-Scoring-Vulnerabilities-in-Software-Libraries-and-Similar)\u201d, namely, using detect-character-encoding in a program accessible over the internet which becomes unavailable when running out of memory. Depending on your specific implementation, the vulnerability\u2019s severity in your program may be different.\n\n### Proof of concept\n\n```js\nconst express = require(\"express\");\nconst detectCharacterEncoding = require(\"detect-character-encoding\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  detectCharacterEncoding(Buffer.from(\"foo\"));\n\n  res.end();\n});\n\napp.listen(3000);\n```\n\n`hey -n 1000000 http://localhost:3000` ([`hey`](https://github.com/rakyll/hey)) causes the Node.js process to consume more and more memory.\n\n### References\n\n- https://github.com/sonicdoe/detect-character-encoding/commit/d44356927b92e3b13e178071bf6d7c671766f588\n- https://github.com/sonicdoe/detect-character-encoding/pull/6",
      "published_date": "2021-09-01",
      "chain_len": 1,
      "project": "https://github.com/sonicdoe/detect-character-encoding",
      "commit_href": "https://github.com/sonicdoe/detect-character-encoding/commit/d44356927b92e3b13e178071bf6d7c671766f588",
      "commit_sha": "d44356927b92e3b13e178071bf6d7c671766f588",
      "patch": "SINGLE",
      "chain_ord": "['d44356927b92e3b13e178071bf6d7c671766f588']",
      "before_first_fix_commit": "{'2e3aa333a573960edf2d782bca3b25a01e49678b'}",
      "last_fix_commit": "d44356927b92e3b13e178071bf6d7c671766f588",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/09/2017, 18:19:58",
      "message": "Fix memory leak by properly closing `charsetDetector`",
      "author": "Michael Hertsch",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'icuWrapper.cpp': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/sonicdoe/detect-character-encoding/raw/d44356927b92e3b13e178071bf6d7c671766f588/icuWrapper.cpp', 'patch': '@@ -28,27 +28,31 @@ NAN_METHOD(DetectCharacterEncoding) {\\n \\n \\tif(U_FAILURE(errorCode)) {\\n \\t\\tNan::ThrowError(\"Failed to set ICU charset detector\u2019s text.\");\\n+\\t\\tucsdet_close(charsetDetector);\\n \\t\\treturn;\\n \\t}\\n \\n \\tcharsetMatch = ucsdet_detect(charsetDetector, &errorCode);\\n \\n \\tif(U_FAILURE(errorCode)) {\\n \\t\\tNan::ThrowError(\"Failed to detect charset.\");\\n+\\t\\tucsdet_close(charsetDetector);\\n \\t\\treturn;\\n \\t}\\n \\n \\tconst char *charsetName = ucsdet_getName(charsetMatch, &errorCode);\\n \\n \\tif(U_FAILURE(errorCode)) {\\n \\t\\tNan::ThrowError(\"Failed to get name from charset match.\");\\n+\\t\\tucsdet_close(charsetDetector);\\n \\t\\treturn;\\n \\t}\\n \\n \\tint32_t confidence = ucsdet_getConfidence(charsetMatch, &errorCode);\\n \\n \\tif(U_FAILURE(errorCode)) {\\n \\t\\tNan::ThrowError(\"Failed to get confidence from charset match.\");\\n+\\t\\tucsdet_close(charsetDetector);\\n \\t\\treturn;\\n \\t}\\n \\n@@ -57,6 +61,7 @@ NAN_METHOD(DetectCharacterEncoding) {\\n \\tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\\n \\n \\tinfo.GetReturnValue().Set(obj);\\n+\\tucsdet_close(charsetDetector);\\n }\\n \\n void Init(v8::Local<v8::Object> exports) {'}}",
      "message_norm": "fix memory leak by properly closing `charsetdetector`",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['icuWrapper.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 1790,
      "vuln_id": "GHSA-fx5c-h9f6-rv7c",
      "cwe_id": "{'CWE-617'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6'}",
      "dataset": "osv",
      "summary": "`CHECK`-fails due to attempting to build a reference tensor ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [Grappler optimizer would attempt to build a tensor using a reference `dtype`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1328-L1402). This would result in a crash due to a `CHECK`-fail [in the `Tensor` constructor](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/tensor.cc#L733-L781) as reference types are not allowed.\n### Patches\nWe have patched the issue in GitHub commit [6b5adc0877de832b2a7c189532dbbbc64622eeb6](https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6",
      "commit_sha": "6b5adc0877de832b2a7c189532dbbbc64622eeb6",
      "patch": "SINGLE",
      "chain_ord": "['6b5adc0877de832b2a7c189532dbbbc64622eeb6']",
      "before_first_fix_commit": "{'af2cab9355e8d5bf48c2c7042b3faaf31262ea8c'}",
      "last_fix_commit": "6b5adc0877de832b2a7c189532dbbbc64622eeb6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/13/2021, 15:28:58",
      "message": "Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/grappler/optimizers/constant_folding.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/6b5adc0877de832b2a7c189532dbbbc64622eeb6/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1363,6 +1363,11 @@ Status ConstantFolding::EvaluateOneFoldable(const NodeDef& node,\\n                           input_tensor.ToString(),\\n                           \" has a dtype of DT_INVALID.\"));\\n     }\\n+    if (IsRefType(raw_val.dtype())) {\\n+      return errors::InvalidArgument(\\n+          \"Not allowed to construct a tensor with reference dtype, got \",\\n+          DataTypeString(raw_val.dtype()));\\n+    }\\n     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());\\n     if (!value->FromProto(raw_val)) {\\n       delete (value);'}}",
      "message_norm": "prevent `check`-fail when building reference tensor.\n\nthe tensor constructor does not allow reference dtypes, as these should not show up explicitly. however, when passed these invalid types instead of building an invalid object the constructor crashes via a `check`-fail. we have a static builder that properly handles this case but is not applicable given current usage.\n\ninstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\npiperorigin-revid: 409662503\nchange-id: i5892f831fde7f276cd7ab34519cf6b8061c71a59",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('error', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('409662503', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/grappler/optimizers/constant_folding.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2432,
      "vuln_id": "GHSA-mj63-64x7-57xf",
      "cwe_id": "{'CWE-22'}",
      "score": 9.8,
      "chain": "{'https://github.com/SecureAuthCorp/impacket/commit/49c643bf66620646884ed141c94e5fdd85bcdd2f', 'https://github.com/SecureAuthCorp/impacket/commit/99bd29e3995c254e2d6f6c2e3454e4271665955a'}",
      "dataset": "osv",
      "summary": "Path traversal in impacket Multiple path traversal vulnerabilities exist in smbserver.py in Impacket before 0.9.23. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ../ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing /etc/shadow or an SSH authorized key.",
      "published_date": "2021-06-18",
      "chain_len": 2,
      "project": "https://github.com/SecureAuthCorp/impacket",
      "commit_href": "https://github.com/SecureAuthCorp/impacket/commit/99bd29e3995c254e2d6f6c2e3454e4271665955a",
      "commit_sha": "99bd29e3995c254e2d6f6c2e3454e4271665955a",
      "patch": "MULTI",
      "chain_ord": "['99bd29e3995c254e2d6f6c2e3454e4271665955a', '49c643bf66620646884ed141c94e5fdd85bcdd2f']",
      "before_first_fix_commit": "{'6688da5d97592269aae72b3a00dc1ab186c0b33d', '91902eafb68fea932cf2350cab329f15afa554e5'}",
      "last_fix_commit": "49c643bf66620646884ed141c94e5fdd85bcdd2f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/25/2021, 11:06:02",
      "message": "Fix Path Traversal vulnerabilities by checking path prefix against incoming filename",
      "author": "OmriI",
      "comments": null,
      "stats": "{'additions': 2011, 'deletions': 1936, 'total': 3947}",
      "files": "{'impacket/smbserver.py': {'additions': 2011, 'deletions': 1936, 'changes': 3947, 'status': 'modified', 'raw_url': 'https://github.com/SecureAuthCorp/impacket/raw/99bd29e3995c254e2d6f6c2e3454e4271665955a/impacket%2Fsmbserver.py', 'patch': None}}",
      "message_norm": "fix path traversal vulnerabilities by checking path prefix against incoming filename",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['impacket/smbserver.py'])",
      "num_files": 1.0
    },
    {
      "index": 835,
      "vuln_id": "GHSA-6gm7-j668-w6h9",
      "cwe_id": "{'CWE-89'}",
      "score": 7.5,
      "chain": "{'https://github.com/pimcore/pimcore/commit/a697830359df06246acca502ee2455614de68017'}",
      "dataset": "osv",
      "summary": "SQL Injection in Pimcore Pimcore prior to version 10.3.5 is vulnerable SQL injection in RecyclebinController.php. This vulnerability affects data confidentiality.",
      "published_date": "2022-04-09",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/a697830359df06246acca502ee2455614de68017",
      "commit_sha": "a697830359df06246acca502ee2455614de68017",
      "patch": "SINGLE",
      "chain_ord": "['a697830359df06246acca502ee2455614de68017']",
      "before_first_fix_commit": "{'e649598b4d2892c0bef9dea24cdf8f7006dc1ef1'}",
      "last_fix_commit": "a697830359df06246acca502ee2455614de68017",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/04/2022, 08:59:41",
      "message": "[Recyclebin] Quote condition filter",
      "author": "dpahuja",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'bundles/AdminBundle/Controller/Admin/RecyclebinController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/a697830359df06246acca502ee2455614de68017/bundles%2FAdminBundle%2FController%2FAdmin%2FRecyclebinController.php', 'patch': '@@ -119,7 +119,7 @@ public function listAction(Request $request)\\n                         $condition = $field . \\' BETWEEN \\' . $db->quote($value) . \\' AND \\' . $db->quote($maxTime);\\n                         $conditionFilters[] = $condition;\\n                     } else {\\n-                        $conditionFilters[] = $field . $operator . \" \\'\" . $value . \"\\' \";\\n+                        $conditionFilters[] = $field . $operator . \\' \\' . $db->quote($value);\\n                     }\\n                 }\\n             }'}}",
      "message_norm": "[recyclebin] quote condition filter",
      "language": "it",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Controller/Admin/RecyclebinController.php'])",
      "num_files": 1.0
    },
    {
      "index": 156,
      "vuln_id": "GHSA-2wwc-w2gw-4329",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'https://github.com/chakra-core/ChakraCore/commit/cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1307, CVE-2019-1308, CVE-2019-1335.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
      "commit_sha": "94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
      "patch": "MULTI",
      "chain_ord": "['94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d']",
      "before_first_fix_commit": "{'7e9a2ee60baa95ceb4f48f522f823c812ca90c80', '5989c6e038d80f92dcd8e10d725cdf45396201bb'}",
      "last_fix_commit": "cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/30/2019, 22:55:27",
      "message": "CVE-2019-1366",
      "author": "Paul Leathers",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/Backend/GlobOpt.cpp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/94181502091b7c22eb86ab1b45ce80bf7ff03aaf/lib%2FBackend%2FGlobOpt.cpp', 'patch': '@@ -3603,7 +3603,7 @@ GlobOpt::OptSrc(IR::Opnd *opnd, IR::Instr * *pInstr, Value **indirIndexValRef, I\\n \\n         opnd->SetValueType(valueType);\\n \\n-        if(!IsLoopPrePass() && opnd->IsSymOpnd() && valueType.IsDefinite())\\n+        if(!IsLoopPrePass() && opnd->IsSymOpnd() && (valueType.IsDefinite() || valueType.IsNotTaggedValue()))\\n         {\\n             if (opnd->AsSymOpnd()->m_sym->IsPropertySym())\\n             {'}}",
      "message_norm": "cve-2019-1366",
      "language": "ro",
      "entities": "[('cve-2019-1366', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/GlobOpt.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 2648,
      "vuln_id": "GHSA-pvrc-hg3f-58r6",
      "cwe_id": "{'CWE-787'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f'}",
      "dataset": "osv",
      "summary": "Heap OOB access in `Dilation2DBackpropInput` ### Impact\nAn attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to `tf.raw_ops.Dilation2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n    \ninput_tensor = tf.constant([1.1] * 81, shape=[3, 3, 3, 3], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 3], dtype=tf.float32)\nout_backprop = tf.constant([1.1] * 1062, shape=[3, 2, 59, 3], dtype=tf.float32)\n\ntf.raw_ops.Dilation2DBackpropInput(\n  input=input_tensor, filter=filter, out_backprop=out_backprop, \n  strides=[1, 40, 1, 1], rates=[1, 56, 56, 1], padding='VALID')\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array.\n  \n```cc               \nin_backprop(b, h_in_max, w_in_max, d) += out_backprop(b, h_out, w_out, d);\n```                 \n    \nThe values for `h_out` and `w_out` are guaranteed to be in range for `out_backprop` (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating `h_in_max`/`w_in_max` and `in_backprop`.\n\n### Patches\nWe have patched the issue in GitHub commit [3f6fe4dfef6f57e768260b48166c27d148f3015f](https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f",
      "commit_sha": "3f6fe4dfef6f57e768260b48166c27d148f3015f",
      "patch": "SINGLE",
      "chain_ord": "['3f6fe4dfef6f57e768260b48166c27d148f3015f']",
      "before_first_fix_commit": "{'afd954e65f15aea4d438d0a219136fc4a63a573d'}",
      "last_fix_commit": "3f6fe4dfef6f57e768260b48166c27d148f3015f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 01:33:28",
      "message": "Add missing validations in dillation ops.\n\nPiperOrigin-RevId: 372037158\nChange-Id: I4ee304c84a02550c030288a6534000b934fc1599",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 4, 'total': 15}",
      "files": "{'tensorflow/core/kernels/dilation_ops.cc': {'additions': 11, 'deletions': 4, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow%2Fcore%2Fkernels%2Fdilation_ops.cc', 'patch': '@@ -130,6 +130,7 @@ class DilationOp : public OpKernel {\\n     ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\\n                &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\\n                &out_cols);\\n+    if (!context->status().ok()) return;\\n \\n     // Output tensor is of the following dimensions:\\n     // [ batch, out_rows, out_cols, depth ]\\n@@ -229,6 +230,7 @@ class DilationBackpropInputOp : public OpKernel {\\n     ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\\n                &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\\n                &out_cols);\\n+    if (!context->status().ok()) return;\\n \\n     // Verify that the incoming gradient tensor has the expected size\\n     // [ batch, out_rows, out_cols, depth ]\\n@@ -318,8 +320,10 @@ struct DilationBackpropInput<CPUDevice, T> {\\n                 }\\n               }\\n             }\\n-            in_backprop(b, h_in_max, w_in_max, d) +=\\n-                out_backprop(b, h_out, w_out, d);\\n+            if (h_in_max < input_rows && w_in_max < input_cols) {\\n+              in_backprop(b, h_in_max, w_in_max, d) +=\\n+                  out_backprop(b, h_out, w_out, d);\\n+            }\\n           }\\n         }\\n       }\\n@@ -349,6 +353,7 @@ class DilationBackpropFilterOp : public OpKernel {\\n     ParseSizes(context, strides_, rates_, padding_, &stride_rows, &stride_cols,\\n                &rate_rows, &rate_cols, &pad_top, &pad_left, &out_rows,\\n                &out_cols);\\n+    if (!context->status().ok()) return;\\n \\n     // Verify that the incoming gradient tensor has the expected size\\n     // [ batch, out_rows, out_cols, depth ]\\n@@ -438,8 +443,10 @@ struct DilationBackpropFilter<CPUDevice, T> {\\n                 }\\n               }\\n             }\\n-            filter_backprop(h_max, w_max, d) +=\\n-                out_backprop(b, h_out, w_out, d);\\n+            if (h_max < filter_rows && w_max < filter_cols) {\\n+              filter_backprop(h_max, w_max, d) +=\\n+                  out_backprop(b, h_out, w_out, d);\\n+            }\\n           }\\n         }\\n       }'}}",
      "message_norm": "add missing validations in dillation ops.\n\npiperorigin-revid: 372037158\nchange-id: i4ee304c84a02550c030288a6534000b934fc1599",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('missing validations', 'SECWORD', ''), ('372037158', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/dilation_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1579,
      "vuln_id": "GHSA-cph5-m8f7-6c5x",
      "cwe_id": "{'CWE-697', 'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929'}",
      "dataset": "osv",
      "summary": "Incorrect Comparison in axios axios is vulnerable to Inefficient Regular Expression Complexity",
      "published_date": "2021-09-01",
      "chain_len": 1,
      "project": "https://github.com/axios/axios",
      "commit_href": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
      "commit_sha": "5b457116e31db0e88fede6c428e969e87f290929",
      "patch": "SINGLE",
      "chain_ord": "['5b457116e31db0e88fede6c428e969e87f290929']",
      "before_first_fix_commit": "{'5bc9ea24dda14e74def0b8ae9cdb3fa1a0c77773'}",
      "last_fix_commit": "5b457116e31db0e88fede6c428e969e87f290929",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/30/2021, 12:33:43",
      "message": "Security fix for ReDoS (#3980)",
      "author": "ready-research",
      "comments": "{'com_1': {'author': 'kanatBektursyn', 'datetime': '09/02/2021, 07:27:22', 'body': 'What is the usage of self made trim function?'}, 'com_2': {'author': 'muditjuneja', 'datetime': '09/03/2021, 13:40:44', 'body': 'Something related to this : https://app.snyk.io/vuln/SNYK-JS-AXIOS-1579269?'}, 'com_3': {'author': 'vargaurav', 'datetime': '09/05/2021, 05:56:14', 'body': 'This is getting flagged in snyk.'}, 'com_4': {'author': 'tbogard', 'datetime': '09/06/2021, 01:01:48', 'body': '> What is the usage of self made trim function?\\r\\n\\r\\nProbably an intended custom made trim function with the intention to be faster... but ended in bloating resources...'}, 'com_5': {'author': 'catscarlet', 'datetime': '09/08/2021, 03:25:02', 'body': 'But, but `str.trim()` should not only deal with \\\\s but also deal with \\\\uFEFF and \\\\xA0. \\r\\n\\r\\nThe trim Polyfill was:\\r\\n\\r\\n```\\r\\nif (!String.prototype.trim) {\\r\\n  String.prototype.trim = function () {\\r\\n    return this.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\'\\');\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\nMDN(en) removed this part because of \"outdated with WebView Android 37\".\\r\\nThe other languages still have this Polyfill part.\\r\\n\\r\\nSee mdn/content#7602'}, 'com_6': {'author': 'Teej42', 'datetime': '09/09/2021, 17:15:48', 'body': 'It is not clear to me, but was this fix added in v0.21.4 release, or will be added in the next release?'}, 'com_7': {'author': 'jasonsaayman', 'datetime': '09/09/2021, 17:57:06', 'body': \"Already added :) I think the custom trim function was used like this incase a browser or version of node did not have native support. I don't think we can drop it just yet due to supporting a pretty large range of browsers. However I will review some of that code when I have a chance and see if it would be possible to get rid of it.\"}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/utils.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/axios/axios/raw/5b457116e31db0e88fede6c428e969e87f290929/lib%2Futils.js', 'patch': \"@@ -185,7 +185,7 @@ function isURLSearchParams(val) {\\n  * @returns {String} The String freed of excess whitespace\\n  */\\n function trim(str) {\\n-  return str.replace(/^\\\\s*/, '').replace(/\\\\s*$/, '');\\n+  return str.trim ? str.trim() : str.replace(/^\\\\s+|\\\\s+$/g, '');\\n }\\n \\n /**\"}}",
      "message_norm": "security fix for redos (#3980)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('#3980', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/utils.js'])",
      "num_files": 1.0
    },
    {
      "index": 1226,
      "vuln_id": "GHSA-8jxq-75rw-fhj9",
      "cwe_id": "{'CWE-94'}",
      "score": 9.8,
      "chain": "{'https://github.com/pyeve/eve/commit/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98'}",
      "dataset": "osv",
      "summary": "Eve allows execution of arbitrary code via Code Injection in the where parameter io/mongo/parser.py in Eve (aka pyeve) before 0.7.5 allows remote attackers to execute arbitrary code via Code Injection in the where parameter.",
      "published_date": "2018-07-12",
      "chain_len": 1,
      "project": "https://github.com/pyeve/eve",
      "commit_href": "https://github.com/pyeve/eve/commit/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
      "commit_sha": "f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
      "patch": "SINGLE",
      "chain_ord": "['f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98']",
      "before_first_fix_commit": "{'6d1526bf8ad93a3d259b1fd357f0c40e4ed9dbf5'}",
      "last_fix_commit": "f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/14/2018, 16:51:26",
      "message": "fix mongo visitor parser",
      "author": "Nicola Iarocci",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 6, 'total': 15}",
      "files": "{'eve/io/mongo/parser.py': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/pyeve/eve/raw/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98/eve%2Fio%2Fmongo%2Fparser.py', 'patch': '@@ -122,16 +122,19 @@ def visit_Call(self, node):\\n         datetime().\\n         \"\"\"\\n         if isinstance(node.func, ast.Name):\\n-            expr = None\\n             if node.func.id == \\'ObjectId\\':\\n-                expr = \"(\\'\" + node.args[0].s + \"\\')\"\\n+                try:\\n+                    self.current_value = ObjectId(node.args[0].s)\\n+                except:\\n+                    pass\\n             elif node.func.id == \\'datetime\\':\\n                 values = []\\n                 for arg in node.args:\\n-                    values.append(str(arg.n))\\n-                expr = \"(\" + \", \".join(values) + \")\"\\n-            if expr:\\n-                self.current_value = eval(node.func.id + expr)\\n+                    values.append(arg.n)\\n+                try:\\n+                    self.current_value = datetime(*values)\\n+                except:\\n+                    pass\\n \\n     def visit_Attribute(self, node):\\n         \"\"\" Attribute handler (\\'Contact.Id\\').'}}",
      "message_norm": "fix mongo visitor parser",
      "language": "it",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['eve/io/mongo/parser.py'])",
      "num_files": 1.0
    },
    {
      "index": 1344,
      "vuln_id": "GHSA-98p5-x8x4-c9m5",
      "cwe_id": "{'CWE-190'}",
      "score": 8.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01', 'https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043', 'https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4'}",
      "dataset": "osv",
      "summary": "Integer overflow in TFLite ### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i < lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape->data.i32[i];\n    lookup_size *= dim;\n    output_shape->data[k] = dim;\n  }\n  for (int i = 1; i < embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape->data[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
      "published_date": "2022-02-09",
      "chain_len": 3,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4",
      "commit_sha": "a4e401da71458d253b05e41f28637b65baf64be4",
      "patch": "MULTI",
      "chain_ord": "['f19be71717c497723ba0cea0379e84f061a75e01', '1de49725a5fc4e48f1a3b902ec3599ee99283043', 'a4e401da71458d253b05e41f28637b65baf64be4']",
      "before_first_fix_commit": "{'f435ae9dee673e83504618b77e1be8cddda73e74'}",
      "last_fix_commit": "a4e401da71458d253b05e41f28637b65baf64be4",
      "chain_ord_pos": 3.0,
      "commit_datetime": "12/21/2021, 21:06:51",
      "message": "Prevent segfault in `embedding_lookup_sparse.cc`\n\nPrevious fixes missed one additional case.\n\nPiperOrigin-RevId: 417676944\nChange-Id: I8ab412155cf9b1e897448a6611d209eaa7ca9e66",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'tensorflow/lite/kernels/embedding_lookup_sparse.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/a4e401da71458d253b05e41f28637b65baf64be4/tensorflow%2Flite%2Fkernels%2Fembedding_lookup_sparse.cc', 'patch': '@@ -159,6 +159,7 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));\\n   const TfLiteTensor* value;\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 4, &value));\\n+  const size_t values_size = NumElements(value);\\n \\n   const int lookup_rank = SizeOfDimension(indices, 1);\\n   const int embedding_rank = NumDimensions(value);\\n@@ -253,6 +254,11 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n     current_squares_weight += w * w;\\n     current_total_weight += w;\\n     for (int k = 0; k < embedding_size; k++) {\\n+      // only index if indices are valid\\n+      if (current_output_offset + k < 0) continue;\\n+      if (current_output_offset + k >= output_size) continue;\\n+      if (example_embedding_offset + k < 0) continue;\\n+      if (example_embedding_offset + k >= values_size) continue;\\n       output_ptr[current_output_offset + k] +=\\n           value_ptr[example_embedding_offset + k] * w;\\n     }'}}",
      "message_norm": "prevent segfault in `embedding_lookup_sparse.cc`\n\nprevious fixes missed one additional case.\n\npiperorigin-revid: 417676944\nchange-id: i8ab412155cf9b1e897448a6611d209eaa7ca9e66",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('417676944', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/embedding_lookup_sparse.cc'])",
      "num_files": 1.0
    },
    {
      "index": 568,
      "vuln_id": "GHSA-56wv-2wr9-3h9r",
      "cwe_id": "{'CWE-347'}",
      "score": 7.5,
      "chain": "{'https://github.com/AntonKueltz/fastecdsa/commit/e592f106edd5acf6dacedfab2ad16fe6c735c9d1', 'https://github.com/AntonKueltz/fastecdsa/commit/7b64e3efaa806b4daaf73bb5172af3581812f8de', 'https://github.com/AntonKueltz/fastecdsa/commit/4a16daeaf139be20654ef58a9fe4c79dc030458c'}",
      "dataset": "osv",
      "summary": "Improper Verification of Cryptographic Signature in fastecdsa An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",
      "published_date": "2021-10-12",
      "chain_len": 3,
      "project": "https://github.com/AntonKueltz/fastecdsa",
      "commit_href": "https://github.com/AntonKueltz/fastecdsa/commit/4a16daeaf139be20654ef58a9fe4c79dc030458c",
      "commit_sha": "4a16daeaf139be20654ef58a9fe4c79dc030458c",
      "patch": "MULTI",
      "chain_ord": "['e592f106edd5acf6dacedfab2ad16fe6c735c9d1', '7b64e3efaa806b4daaf73bb5172af3581812f8de', '4a16daeaf139be20654ef58a9fe4c79dc030458c']",
      "before_first_fix_commit": "{'7b64e3efaa806b4daaf73bb5172af3581812f8de'}",
      "last_fix_commit": "4a16daeaf139be20654ef58a9fe4c79dc030458c",
      "chain_ord_pos": 3.0,
      "commit_datetime": "04/14/2020, 09:52:44",
      "message": "Update CHANGELOG.md",
      "author": "AntonKueltz",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'CHANGELOG.md': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/AntonKueltz/fastecdsa/raw/4a16daeaf139be20654ef58a9fe4c79dc030458c/CHANGELOG.md', 'patch': \"@@ -2,7 +2,7 @@\\n \\n ## [2.1.2]\\n ### Fixed\\n-- Point at infinity handling in C extensions\\n+- Point at infinity handling in C extensions (issue #52)\\n - DER signature decoding that assumed length was always encoded in one byte\\n \\n ## [2.1.1]\\n@@ -28,4 +28,4 @@\\n - Various unused imports\\n \\n ### Fixed\\n-- Issue with benchmark script when C extensions weren't built in place (issue #44)\\n\\\\ No newline at end of file\\n+- Issue with benchmark script when C extensions weren't built in place (issue #44)\"}}",
      "message_norm": "update changelog.md",
      "language": "nl",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['CHANGELOG.md'])",
      "num_files": 1.0
    },
    {
      "index": 1842,
      "vuln_id": "GHSA-g7xr-v82w-qggq",
      "cwe_id": "{'CWE-94'}",
      "score": 9.8,
      "chain": "{'https://github.com/nystudio107/craft-seomatic/commit/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d'}",
      "dataset": "osv",
      "summary": "Code Injection in SEOmatic In the SEOmatic plugin up to 3.4.11 for Craft CMS 3, it is possible for unauthenticated attackers to perform a Server-Side Template Injection, allowing for remote code execution.",
      "published_date": "2022-06-13",
      "chain_len": 1,
      "project": "https://github.com/nystudio107/craft-seomatic",
      "commit_href": "https://github.com/nystudio107/craft-seomatic/commit/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
      "commit_sha": "3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
      "patch": "SINGLE",
      "chain_ord": "['3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d']",
      "before_first_fix_commit": "{'4e46b792ce973ac0c652fb330055f41aca1981c8'}",
      "last_fix_commit": "3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/24/2021, 18:08:04",
      "message": "Sanitize the canonical URL after the absolute URL has been returned, to mitigate poisoned `X-Forwarded-Host` headers",
      "author": "Andrew Welch",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 2, 'total': 3}",
      "files": "{'src/services/Helper.php': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/nystudio107/craft-seomatic/raw/3fee7d50147cdf3f999cfc1e04cbc3fb3d9f2f7d/src%2Fservices%2FHelper.php', 'patch': '@@ -148,9 +148,8 @@ public static function safeCanonicalUrl(): string\\n         } catch (InvalidConfigException $e) {\\n             Craft::error($e->getMessage(), __METHOD__);\\n         }\\n-        $url = DynamicMetaHelper::sanitizeUrl($url);\\n \\n-        return UrlHelper::absoluteUrlWithProtocol($url);\\n+        return DynamicMetaHelper::sanitizeUrl(UrlHelper::absoluteUrlWithProtocol($url));\\n     }\\n \\n     /**'}}",
      "message_norm": "sanitize the canonical url after the absolute url has been returned, to mitigate poisoned `x-forwarded-host` headers",
      "language": "en",
      "entities": "[('sanitize', 'SECWORD', ''), ('mitigate', 'ACTION', ''), ('poisoned', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/services/Helper.php'])",
      "num_files": 1.0
    },
    {
      "index": 2297,
      "vuln_id": "GHSA-jr37-66pj-36v7",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/Bottelet/DaybydayCRM/commit/002dc75f400cf307bd00b71a5a93f1e26e52cee2'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in DayByDay CRM In Daybyday CRM, version 2.2.0 is vulnerable to Stored Cross-Site Scripting (XSS) vulnerability that allows low privileged application users to store malicious scripts in the title field of new tasks. These scripts are executed in a victim\u2019s browser when they open the \u201c/tasks\u201d page to view all the tasks.",
      "published_date": "2022-01-08",
      "chain_len": 1,
      "project": "https://github.com/Bottelet/DaybydayCRM",
      "commit_href": "https://github.com/Bottelet/DaybydayCRM/commit/002dc75f400cf307bd00b71a5a93f1e26e52cee2",
      "commit_sha": "002dc75f400cf307bd00b71a5a93f1e26e52cee2",
      "patch": "SINGLE",
      "chain_ord": "['002dc75f400cf307bd00b71a5a93f1e26e52cee2']",
      "before_first_fix_commit": "{'fe842ea5ede237443f1f45a99aeb839133115d8b'}",
      "last_fix_commit": "002dc75f400cf307bd00b71a5a93f1e26e52cee2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/25/2021, 19:53:06",
      "message": "fix xss for tasks index",
      "author": "Casper Bottelet",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'app/Http/Controllers/TasksController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/Bottelet/DaybydayCRM/raw/002dc75f400cf307bd00b71a5a93f1e26e52cee2/app%2FHttp%2FControllers%2FTasksController.php', 'patch': '@@ -82,7 +82,7 @@ public function anyData()\\n             })\\n             ->addColumn(\\'view\\', function ($tasks) {\\n                 return \\'<a href=\"\\' . route(\"tasks.show\", $tasks->external_id) . \\'\" class=\"btn btn-link\">\\' . __(\\'View\\') .\\'</a>\\'\\n-                . \\'<a data-toggle=\"modal\" data-id=\"\\'. route(\\'tasks.destroy\\',$tasks->external_id) . \\'\" data-title=\"\\'. $tasks->title . \\'\" data-target=\"#deletion\" class=\"btn btn-link\">\\' . __(\\'Delete\\') .\\'</a>\\'\\n+                . \\'<a data-toggle=\"modal\" data-id=\"\\'. route(\\'tasks.destroy\\',$tasks->external_id) . \\'\" data-target=\"#deletion\" class=\"btn btn-link\">\\' . __(\\'Delete\\') .\\'</a>\\'\\n                 ;\\n             })\\n             ->rawColumns([\\'titlelink\\',\\'view\\', \\'status_id\\'])'}}",
      "message_norm": "fix xss for tasks index",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/TasksController.php'])",
      "num_files": 1.0
    },
    {
      "index": 422,
      "vuln_id": "GHSA-4gp3-p7ph-x2jr",
      "cwe_id": "{'CWE-78'}",
      "score": 9.8,
      "chain": "{'https://github.com/guybedford/devcert/commit/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8'}",
      "dataset": "osv",
      "summary": "OS Command Injection in devcert-sanscache devcert-sanscache before 0.4.7 allows remote attackers to execute arbitrary code or cause a Command Injection via the exec function. The variable `commonName` controlled by user input is used as part of the `exec` function without any sanitization.",
      "published_date": "2020-04-14",
      "chain_len": 1,
      "project": "https://github.com/guybedford/devcert",
      "commit_href": "https://github.com/guybedford/devcert/commit/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
      "commit_sha": "571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
      "patch": "SINGLE",
      "chain_ord": "['571f4e6d077f7f21c6aed655ae380d85a7a5d3b8']",
      "before_first_fix_commit": "{'651bb8ebb97a029be13656c0476d48db85887451'}",
      "last_fix_commit": "571f4e6d077f7f21c6aed655ae380d85a7a5d3b8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/08/2020, 01:35:58",
      "message": "common name sanitization",
      "author": "Guy Bedford",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/index.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/guybedford/devcert/raw/571f4e6d077f7f21c6aed655ae380d85a7a5d3b8/src%2Findex.ts', 'patch': \"@@ -6,7 +6,7 @@ import fs = require('fs');\\n export default async function generateDevCert (commonName: string) {\\n   if (!commandExists.sync('openssl'))\\n     throw new Error('Unable to find openssl - make sure it is installed and available in your PATH');\\n-  if (!commonName.match(/^(.|\\\\.){1,64}$/))\\n+  if (!commonName.match(/^(a-zA-Z0-9|\\\\.){1,64}$/))\\n     throw new Error(`Invalid Common Name ${commonName}.`);\\n   try {\\n     const opensslConfPath = generateOpensslConf(commonName);\"}}",
      "message_norm": "common name sanitization",
      "language": "it",
      "entities": "[('sanitization', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.ts'])",
      "num_files": 1.0
    },
    {
      "index": 3382,
      "vuln_id": "GHSA-x67x-vg9m-65c3",
      "cwe_id": "{'CWE-119'}",
      "score": 9.8,
      "chain": "{'https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319'}",
      "dataset": "osv",
      "summary": "Integer overflow in base64 Affected versions of this crate suffered from an integer overflow bug when\ncalculating the size of a buffer to use when encoding base64 using the\n`encode_config_buf` and `encode_config` functions.  If the input string\nwas large, this would cause a buffer to be allocated that was too small.\nSince this function writes to the buffer using unsafe code, it would\nallow an attacker to write beyond the buffer, causing memory corruption\nand possibly the execution of arbitrary code.\n\nThis flaw was corrected by using checked arithmetic to calculate\nthe size of the buffer.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/alicemaz/rust-base64",
      "commit_href": "https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319",
      "commit_sha": "24ead980daf11ba563e4fb2516187a56a71ad319",
      "patch": "SINGLE",
      "chain_ord": "['24ead980daf11ba563e4fb2516187a56a71ad319']",
      "before_first_fix_commit": "{'21a9389cf340f1e36e48856859d5713b97744383'}",
      "last_fix_commit": "24ead980daf11ba563e4fb2516187a56a71ad319",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/03/2017, 05:26:40",
      "message": "Use checked arithmetic in encoded_size\n\npreviously encoded_size could silently overflow usize, resulting in\nwrite past the bounds of the buffer allocated by reserve. this changes\nencoded_size to return an option, with none if overflow occurs.\npresently callers simply panic on this case, but it could conceivably be\nrendered as an error in the future\n\ncredit to Andrew Ayer for reporting this vulnerability",
      "author": "Alice Maz",
      "comments": null,
      "stats": "{'additions': 75, 'deletions': 61, 'total': 136}",
      "files": "{'src/lib.rs': {'additions': 75, 'deletions': 61, 'changes': 136, 'status': 'modified', 'raw_url': 'https://github.com/marshallpierce/rust-base64/raw/24ead980daf11ba563e4fb2516187a56a71ad319/src%2Flib.rs', 'patch': '@@ -171,31 +171,36 @@ pub fn decode<T: ?Sized + AsRef<[u8]>>(input: &T) -> Result<Vec<u8>, DecodeError\\n ///}\\n ///```\\n pub fn encode_config<T: ?Sized + AsRef<[u8]>>(input: &T, config: Config) -> String {\\n-    let mut buf = String::with_capacity(encoded_size(input.as_ref().len(), config));\\n+    let mut buf = match encoded_size(input.as_ref().len(), config) {\\n+        Some(n) => String::with_capacity(n),\\n+        None => panic!(\"integer overflow when calculating buffer size\")\\n+    };\\n \\n     encode_config_buf(input, config, &mut buf);\\n \\n     buf\\n }\\n \\n /// calculate the base64 encoded string size, including padding\\n-fn encoded_size(bytes_len: usize, config: Config) -> usize {\\n-    let rem = bytes_len % 3;\\n-\\n-    let complete_input_chunks = bytes_len / 3;\\n-    let complete_output_chars = complete_input_chunks * 4;\\n-    let printing_output_chars = if rem == 0 {\\n-        complete_output_chars\\n-    } else {\\n-        complete_output_chars + 4\\n-    };\\n+fn encoded_size(bytes_len: usize, config: Config) -> Option<usize> {\\n+    let printing_output_chars = bytes_len\\n+        .checked_add(2)\\n+        .map(|x| x / 3)\\n+        .and_then(|x| x.checked_mul(4));\\n+\\n+    //TODO this is subtly wrong but in a not dangerous way\\n+    //pushing patch with identical to previous behavior, then fixing\\n     let line_ending_output_chars = match config.line_wrap {\\n-        LineWrap::NoWrap => 0,\\n-        LineWrap::Wrap(n, LineEnding::CRLF) => printing_output_chars / n * 2,\\n-        LineWrap::Wrap(n, LineEnding::LF) => printing_output_chars / n,\\n+        LineWrap::NoWrap => Some(0),\\n+        LineWrap::Wrap(n, LineEnding::CRLF) =>\\n+            printing_output_chars.map(|y| y / n).and_then(|y| y.checked_mul(2)),\\n+        LineWrap::Wrap(n, LineEnding::LF) =>\\n+            printing_output_chars.map(|y| y / n),\\n     };\\n \\n-    return printing_output_chars + line_ending_output_chars;\\n+    printing_output_chars.and_then(|x|\\n+        line_ending_output_chars.and_then(|y| x.checked_add(y))\\n+    )\\n }\\n \\n ///Encode arbitrary octets as base64.\\n@@ -224,7 +229,11 @@ pub fn encode_config_buf<T: ?Sized + AsRef<[u8]>>(input: &T, config: Config, buf\\n     };\\n \\n     // reserve to make sure the memory we\\'ll be writing to with unsafe is allocated\\n-    buf.reserve(encoded_size(input_bytes.len(), config));\\n+    let resv_size = match encoded_size(input_bytes.len(), config) {\\n+        Some(n) => n,\\n+        None => panic!(\"integer overflow when calculating buffer size\"),\\n+    };\\n+    buf.reserve(resv_size);\\n \\n     let orig_buf_len = buf.len();\\n     let mut fast_loop_output_buf_len = orig_buf_len;\\n@@ -579,52 +588,52 @@ mod tests {\\n \\n     #[test]\\n     fn encoded_size_correct() {\\n-        assert_eq!(0, encoded_size(0, STANDARD));\\n+        assert_eq!(Some(0), encoded_size(0, STANDARD));\\n \\n-        assert_eq!(4, encoded_size(1, STANDARD));\\n-        assert_eq!(4, encoded_size(2, STANDARD));\\n-        assert_eq!(4, encoded_size(3, STANDARD));\\n+        assert_eq!(Some(4), encoded_size(1, STANDARD));\\n+        assert_eq!(Some(4), encoded_size(2, STANDARD));\\n+        assert_eq!(Some(4), encoded_size(3, STANDARD));\\n \\n-        assert_eq!(8, encoded_size(4, STANDARD));\\n-        assert_eq!(8, encoded_size(5, STANDARD));\\n-        assert_eq!(8, encoded_size(6, STANDARD));\\n+        assert_eq!(Some(8), encoded_size(4, STANDARD));\\n+        assert_eq!(Some(8), encoded_size(5, STANDARD));\\n+        assert_eq!(Some(8), encoded_size(6, STANDARD));\\n \\n-        assert_eq!(12, encoded_size(7, STANDARD));\\n-        assert_eq!(12, encoded_size(8, STANDARD));\\n-        assert_eq!(12, encoded_size(9, STANDARD));\\n+        assert_eq!(Some(12), encoded_size(7, STANDARD));\\n+        assert_eq!(Some(12), encoded_size(8, STANDARD));\\n+        assert_eq!(Some(12), encoded_size(9, STANDARD));\\n \\n-        assert_eq!(72, encoded_size(54, STANDARD));\\n+        assert_eq!(Some(72), encoded_size(54, STANDARD));\\n \\n-        assert_eq!(76, encoded_size(55, STANDARD));\\n-        assert_eq!(76, encoded_size(56, STANDARD));\\n-        assert_eq!(76, encoded_size(57, STANDARD));\\n+        assert_eq!(Some(76), encoded_size(55, STANDARD));\\n+        assert_eq!(Some(76), encoded_size(56, STANDARD));\\n+        assert_eq!(Some(76), encoded_size(57, STANDARD));\\n \\n-        assert_eq!(80, encoded_size(58, STANDARD));\\n+        assert_eq!(Some(80), encoded_size(58, STANDARD));\\n     }\\n \\n     #[test]\\n     fn encoded_size_correct_mime() {\\n-        assert_eq!(0, encoded_size(0, MIME));\\n+        assert_eq!(Some(0), encoded_size(0, MIME));\\n \\n-        assert_eq!(4, encoded_size(1, MIME));\\n-        assert_eq!(4, encoded_size(2, MIME));\\n-        assert_eq!(4, encoded_size(3, MIME));\\n+        assert_eq!(Some(4), encoded_size(1, MIME));\\n+        assert_eq!(Some(4), encoded_size(2, MIME));\\n+        assert_eq!(Some(4), encoded_size(3, MIME));\\n \\n-        assert_eq!(8, encoded_size(4, MIME));\\n-        assert_eq!(8, encoded_size(5, MIME));\\n-        assert_eq!(8, encoded_size(6, MIME));\\n+        assert_eq!(Some(8), encoded_size(4, MIME));\\n+        assert_eq!(Some(8), encoded_size(5, MIME));\\n+        assert_eq!(Some(8), encoded_size(6, MIME));\\n \\n-        assert_eq!(12, encoded_size(7, MIME));\\n-        assert_eq!(12, encoded_size(8, MIME));\\n-        assert_eq!(12, encoded_size(9, MIME));\\n+        assert_eq!(Some(12), encoded_size(7, MIME));\\n+        assert_eq!(Some(12), encoded_size(8, MIME));\\n+        assert_eq!(Some(12), encoded_size(9, MIME));\\n \\n-        assert_eq!(72, encoded_size(54, MIME));\\n+        assert_eq!(Some(72), encoded_size(54, MIME));\\n \\n-        assert_eq!(78, encoded_size(55, MIME));\\n-        assert_eq!(78, encoded_size(56, MIME));\\n-        assert_eq!(78, encoded_size(57, MIME));\\n+        assert_eq!(Some(78), encoded_size(55, MIME));\\n+        assert_eq!(Some(78), encoded_size(56, MIME));\\n+        assert_eq!(Some(78), encoded_size(57, MIME));\\n \\n-        assert_eq!(82, encoded_size(58, MIME));\\n+        assert_eq!(Some(82), encoded_size(58, MIME));\\n     }\\n \\n     #[test]\\n@@ -636,26 +645,31 @@ mod tests {\\n             LineWrap::Wrap(76, LineEnding::LF)\\n         );\\n \\n-        assert_eq!(0, encoded_size(0, config));\\n+        assert_eq!(Some(0), encoded_size(0, config));\\n+\\n+        assert_eq!(Some(4), encoded_size(1, config));\\n+        assert_eq!(Some(4), encoded_size(2, config));\\n+        assert_eq!(Some(4), encoded_size(3, config));\\n \\n-        assert_eq!(4, encoded_size(1, config));\\n-        assert_eq!(4, encoded_size(2, config));\\n-        assert_eq!(4, encoded_size(3, config));\\n+        assert_eq!(Some(8), encoded_size(4, config));\\n+        assert_eq!(Some(8), encoded_size(5, config));\\n+        assert_eq!(Some(8), encoded_size(6, config));\\n \\n-        assert_eq!(8, encoded_size(4, config));\\n-        assert_eq!(8, encoded_size(5, config));\\n-        assert_eq!(8, encoded_size(6, config));\\n+        assert_eq!(Some(12), encoded_size(7, config));\\n+        assert_eq!(Some(12), encoded_size(8, config));\\n+        assert_eq!(Some(12), encoded_size(9, config));\\n \\n-        assert_eq!(12, encoded_size(7, config));\\n-        assert_eq!(12, encoded_size(8, config));\\n-        assert_eq!(12, encoded_size(9, config));\\n+        assert_eq!(Some(72), encoded_size(54, config));\\n \\n-        assert_eq!(72, encoded_size(54, config));\\n+        assert_eq!(Some(77), encoded_size(55, config));\\n+        assert_eq!(Some(77), encoded_size(56, config));\\n+        assert_eq!(Some(77), encoded_size(57, config));\\n \\n-        assert_eq!(77, encoded_size(55, config));\\n-        assert_eq!(77, encoded_size(56, config));\\n-        assert_eq!(77, encoded_size(57, config));\\n+        assert_eq!(Some(81), encoded_size(58, config));\\n+    }\\n \\n-        assert_eq!(81, encoded_size(58, config));\\n+    #[test]\\n+    fn encoded_size_overflow() {\\n+        assert_eq!(None, encoded_size(std::usize::MAX, STANDARD));\\n     }\\n }'}}",
      "message_norm": "use checked arithmetic in encoded_size\n\npreviously encoded_size could silently overflow usize, resulting in\nwrite past the bounds of the buffer allocated by reserve. this changes\nencoded_size to return an option, with none if overflow occurs.\npresently callers simply panic on this case, but it could conceivably be\nrendered as an error in the future\n\ncredit to andrew ayer for reporting this vulnerability",
      "language": "en",
      "entities": "[('encoded_size', 'SECWORD', ''), ('encoded_size', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('encoded_size', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('error', 'FLAW', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 2948,
      "vuln_id": "GHSA-rh4p-g7x6-8pqg",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/75162b7f2d8ac2b37d17564e9c979ba1bae707e8', 'https://github.com/chakra-core/ChakraCore/commit/7f0d390ad77d838cbb81d4586c83ec822f384ce8'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1092, CVE-2019-1103, CVE-2019-1106, CVE-2019-1107.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/7f0d390ad77d838cbb81d4586c83ec822f384ce8",
      "commit_sha": "7f0d390ad77d838cbb81d4586c83ec822f384ce8",
      "patch": "MULTI",
      "chain_ord": "['7f0d390ad77d838cbb81d4586c83ec822f384ce8', '75162b7f2d8ac2b37d17564e9c979ba1bae707e8']",
      "before_first_fix_commit": "{'12c31f0e83ddc511e57b9aa1e78533899199eb32', 'ba1f4455f921ce5f12091ff8a11c8028c6a64b17'}",
      "last_fix_commit": "75162b7f2d8ac2b37d17564e9c979ba1bae707e8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/06/2019, 18:38:26",
      "message": "[CVE-2019-1062] Chakra JIT Type Confusion",
      "author": "Paul Leathers",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 6, 'total': 11}",
      "files": "{'lib/Backend/Opnd.cpp': {'additions': 5, 'deletions': 6, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/7f0d390ad77d838cbb81d4586c83ec822f384ce8/lib%2FBackend%2FOpnd.cpp', 'patch': \"@@ -962,7 +962,8 @@ PropertySymOpnd::IsObjectHeaderInlined() const\\n bool\\n PropertySymOpnd::ChangesObjectLayout() const\\n {\\n-    JITTypeHolder cachedType = this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n+    JITTypeHolder cachedType = this->HasInitialType() ? this->GetInitialType() : \\n+        this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n \\n     JITTypeHolder finalType = this->GetFinalType();\\n \\n@@ -987,13 +988,11 @@ PropertySymOpnd::ChangesObjectLayout() const\\n         // This is the case where the type transition actually occurs. (This is the only case that's detectable\\n         // during the loop pre-pass, since final types are not in place yet.)\\n \\n-        Assert(cachedType != nullptr && Js::DynamicType::Is(cachedType->GetTypeId()));\\n-\\n-        const JITTypeHandler * cachedTypeHandler = cachedType->GetTypeHandler();\\n         const JITTypeHandler * initialTypeHandler = initialType->GetTypeHandler();\\n \\n-        return cachedTypeHandler->GetInlineSlotCapacity() != initialTypeHandler->GetInlineSlotCapacity() ||\\n-            cachedTypeHandler->GetOffsetOfInlineSlots() != initialTypeHandler->GetOffsetOfInlineSlots();\\n+        // If no final type has been set in the forward pass, then we have no way of knowing how the object shape will evolve here.\\n+        // If the initial type is object-header-inlined, assume that the layout may change.\\n+        return initialTypeHandler->IsObjectHeaderInlinedTypeHandler();\\n     }\\n \\n     return false;\"}}",
      "message_norm": "[cve-2019-1062] chakra jit type confusion",
      "language": "en",
      "entities": "[('cve-2019-1062', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/Opnd.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 2704,
      "vuln_id": "GHSA-q5wr-fvpq-p67g",
      "cwe_id": "{'CWE-787', 'CWE-190'}",
      "score": 8.8,
      "chain": "{'https://github.com/gemini-testing/png-img/commit/14ac462a32ca4b3b78f56502ac976d5b0222ce3d'}",
      "dataset": "osv",
      "summary": "Integer Overflow in png-img An integer overflow in the PngImg::InitStorage_() function of png-img before 3.1.0 leads to an under-allocation of heap memory and subsequently an exploitable heap-based buffer overflow when loading a crafted PNG file.",
      "published_date": "2021-12-10",
      "chain_len": 1,
      "project": "https://github.com/gemini-testing/png-img",
      "commit_href": "https://github.com/gemini-testing/png-img/commit/14ac462a32ca4b3b78f56502ac976d5b0222ce3d",
      "commit_sha": "14ac462a32ca4b3b78f56502ac976d5b0222ce3d",
      "patch": "SINGLE",
      "chain_ord": "['14ac462a32ca4b3b78f56502ac976d5b0222ce3d']",
      "before_first_fix_commit": "{'9fedfccb9ab2d1ccee4d7d544f3e03d505317352'}",
      "last_fix_commit": "14ac462a32ca4b3b78f56502ac976d5b0222ce3d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/06/2020, 00:45:40",
      "message": "Handle image size overflow",
      "author": "Mikhail Cheshkov",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 2, 'total': 14}",
      "files": "{'src/PngImg.cc': {'additions': 12, 'deletions': 2, 'changes': 14, 'status': 'modified', 'raw_url': 'https://github.com/gemini-testing/png-img/raw/14ac462a32ca4b3b78f56502ac976d5b0222ce3d/src%2FPngImg.cc', 'patch': '@@ -60,10 +60,20 @@ void PngImg::ReadInfo_(PngReadStruct& rs) {\\n ///\\n void PngImg::InitStorage_() {\\n     rowPtrs_.resize(info_.height, nullptr);\\n-    data_ = new png_byte[info_.height * info_.rowbytes];\\n+    // Extend height and rowbytes from uint32_t to size_t to avoid multiplication overflow when size_t is larger\\n+    size_t h = info_.height;\\n+    size_t rb = info_.rowbytes;\\n+    // We need to make sure that info_.height * info_.rowbytes will not overflow size_t\\n+    // Unfotunately, there\\'s no simple and portable way to do this in C++\\n+    // For integer division of positive numbers a * b > c <==> a > c / b holds\\n+    if (h > std::numeric_limits<size_t>::max() / rb) {\\n+        // TODO Propagate this exception to JS, and test it\\n+        throw std::runtime_error(\"Image is too large to allocate single buffer\");\\n+    }\\n+    data_ = new png_byte[h * rb];\\n \\n     for(size_t i = 0; i < info_.height; ++i) {\\n-        rowPtrs_[i] = data_ + i * info_.rowbytes;\\n+        rowPtrs_[i] = data_ + i * rb;\\n     }\\n }'}}",
      "message_norm": "handle image size overflow",
      "language": "en",
      "entities": "[('overflow', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/PngImg.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2025,
      "vuln_id": "GHSA-h8hx-2c5r-32cf",
      "cwe_id": "{'CWE-352'}",
      "score": 8.1,
      "chain": "{'https://github.com/TrestleAdmin/trestle-auth/commit/cb95b05cdb2609052207af07b4b8dfe3a23c11dc'}",
      "dataset": "osv",
      "summary": "Cross-Site Request Forgery (CSRF) in trestle-auth ### Impact\nA vulnerability in trestle-auth versions 0.4.0 and 0.4.1 allows an attacker to create a form that will bypass Rails' built-in CSRF protection when submitted by a victim with a trestle-auth admin session. This potentially allows an attacker to alter protected data, including admin account credentials.\n\n### Patches\nThe vulnerability has been fixed in trestle-auth 0.4.2 released to RubyGems.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [trestle-auth](https://github.com/TrestleAdmin/trestle-auth/issues)\n* Email the maintainer at [sam@sampohlenz.com](mailto:sam@sampohlenz.com)",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/TrestleAdmin/trestle-auth",
      "commit_href": "https://github.com/TrestleAdmin/trestle-auth/commit/cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
      "commit_sha": "cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
      "patch": "SINGLE",
      "chain_ord": "['cb95b05cdb2609052207af07b4b8dfe3a23c11dc']",
      "before_first_fix_commit": "{'021955aa5d67260d6ba1faf2b5d59b9772164968'}",
      "last_fix_commit": "cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/12/2021, 10:12:49",
      "message": "Ensure CSRF protection is prepended before authentication before_actions",
      "author": "Sam Pohlenz",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'lib/trestle/auth/controller/authentication.rb': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/TrestleAdmin/trestle-auth/raw/cb95b05cdb2609052207af07b4b8dfe3a23c11dc/lib%2Ftrestle%2Fauth%2Fcontroller%2Fauthentication.rb', 'patch': '@@ -9,6 +9,9 @@ module Authentication\\n \\n           prepend_before_action :require_authenticated_user\\n           prepend_before_action :authenticate_user\\n+\\n+          # Ensure that CSRF protection happens before authentication\\n+          protect_from_forgery prepend: true\\n         end\\n \\n       protected'}}",
      "message_norm": "ensure csrf protection is prepended before authentication before_actions",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('authentication', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/trestle/auth/controller/authentication.rb'])",
      "num_files": 1.0
    },
    {
      "index": 383,
      "vuln_id": "GHSA-4873-36h9-wv49",
      "cwe_id": "{'CWE-787', 'CWE-125', 'CWE-590'}",
      "score": 6.3,
      "chain": "{'https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c'}",
      "dataset": "osv",
      "summary": "Out-of-bounds read/write and invalid free with `externref`s and GC safepoints in Wasmtime  ### Impact\n\nThere was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime.\n\nTo trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where\n\n* there are no live references at this safepoint, and\n* there is a safepoint with live references earlier in this frame's function.\n\nUnder this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.\n\nEven though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug.\n\nWe have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare.\n\n### Patches\n\nThis bug has been patched and users should upgrade to Wasmtime version 0.30.0.\n\nAdditionally, we have updated [our primary `externref` fuzz target](https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs) such that it better exercises these code paths and we can have greater confidence in their correctness going forward.\n\n### Workarounds\n\nIf you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to [`wasmtime::Config::wasm_reference_types`](https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types)\n\n### References\n\n* [The Wasm reference types proposal, which introduces `externref`](https://github.com/WebAssembly/reference-types/)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Reach out to us on [the Bytecode Alliance Zulip chat](https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime)\n* Open an issue in [the `bytecodealliance/wasmtime` repository](https://github.com/bytecodealliance/wasmtime/)",
      "published_date": "2021-09-20",
      "chain_len": 1,
      "project": "https://github.com/bytecodealliance/wasmtime",
      "commit_href": "https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c",
      "commit_sha": "398a73f0dd862dbe703212ebae8e34036a18c11c",
      "patch": "SINGLE",
      "chain_ord": "['398a73f0dd862dbe703212ebae8e34036a18c11c']",
      "before_first_fix_commit": "{'ec4e48d4cbc28bcfd99e25842a90704e765b800f', '101998733b74624cbd348a2366d05760b40181f3'}",
      "last_fix_commit": "398a73f0dd862dbe703212ebae8e34036a18c11c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/17/2021, 17:28:50",
      "message": "Merge pull request from GHSA-4873-36h9-wv49\n\nStop doing fuzzy search for stack maps",
      "author": "Nick Fitzgerald",
      "comments": null,
      "stats": "{'additions': 52, 'deletions': 48, 'total': 100}",
      "files": "{'crates/wasmtime/src/module/registry.rs': {'additions': 52, 'deletions': 48, 'changes': 100, 'status': 'modified', 'raw_url': 'https://github.com/bytecodealliance/wasmtime/raw/398a73f0dd862dbe703212ebae8e34036a18c11c/crates%2Fwasmtime%2Fsrc%2Fmodule%2Fregistry.rs', 'patch': '@@ -122,61 +122,65 @@ impl ModuleInfo for RegisteredModule {\\n         let info = self.module.func_info(index);\\n \\n         // Do a binary search to find the stack map for the given offset.\\n-        //\\n-        // Because GC safepoints are technically only associated with a single\\n-        // PC, we should ideally only care about `Ok(index)` values returned\\n-        // from the binary search. However, safepoints are inserted right before\\n-        // calls, and there are two things that can disturb the PC/offset\\n-        // associated with the safepoint versus the PC we actually use to query\\n-        // for the stack map:\\n-        //\\n-        // 1. The `backtrace` crate gives us the PC in a frame that will be\\n-        //    *returned to*, and where execution will continue from, rather than\\n-        //    the PC of the call we are currently at. So we would need to\\n-        //    disassemble one instruction backwards to query the actual PC for\\n-        //    the stack map.\\n-        //\\n-        //    TODO: One thing we *could* do to make this a little less error\\n-        //    prone, would be to assert/check that the nearest GC safepoint\\n-        //    found is within `max_encoded_size(any kind of call instruction)`\\n-        //    our queried PC for the target architecture.\\n-        //\\n-        // 2. Cranelift\\'s stack maps only handle the stack, not\\n-        //    registers. However, some references that are arguments to a call\\n-        //    may need to be in registers. In these cases, what Cranelift will\\n-        //    do is:\\n-        //\\n-        //      a. spill all the live references,\\n-        //      b. insert a GC safepoint for those references,\\n-        //      c. reload the references into registers, and finally\\n-        //      d. make the call.\\n-        //\\n-        //    Step (c) adds drift between the GC safepoint and the location of\\n-        //    the call, which is where we actually walk the stack frame and\\n-        //    collect its live references.\\n-        //\\n-        //    Luckily, the spill stack slots for the live references are still\\n-        //    up to date, so we can still find all the on-stack roots.\\n-        //    Furthermore, we do not have a moving GC, so we don\\'t need to worry\\n-        //    whether the following code will reuse the references in registers\\n-        //    (which would not have been updated to point to the moved objects)\\n-        //    or reload from the stack slots (which would have been updated to\\n-        //    point to the moved objects).\\n-\\n         let index = match info\\n             .stack_maps\\n             .binary_search_by_key(&func_offset, |i| i.code_offset)\\n         {\\n-            // Exact hit.\\n+            // Found it.\\n             Ok(i) => i,\\n \\n-            // `Err(0)` means that the associated stack map would have been the\\n-            // first element in the array if this pc had an associated stack\\n-            // map, but this pc does not have an associated stack map. This can\\n-            // only happen inside a Wasm frame if there are no live refs at this\\n-            // pc.\\n+            // No stack map associated with this PC.\\n+            //\\n+            // Because we know we are in Wasm code, and we must be at some kind\\n+            // of call/safepoint, then the Cranelift backend must have avoided\\n+            // emitting a stack map for this location because no refs were live.\\n+            #[cfg(not(feature = \"old-x86-backend\"))]\\n+            Err(_) => return None,\\n+\\n+            // ### Old x86_64 backend specific code.\\n+            //\\n+            // Because GC safepoints are technically only associated with a\\n+            // single PC, we should ideally only care about `Ok(index)` values\\n+            // returned from the binary search. However, safepoints are inserted\\n+            // right before calls, and there are two things that can disturb the\\n+            // PC/offset associated with the safepoint versus the PC we actually\\n+            // use to query for the stack map:\\n+            //\\n+            // 1. The `backtrace` crate gives us the PC in a frame that will be\\n+            //    *returned to*, and where execution will continue from, rather than\\n+            //    the PC of the call we are currently at. So we would need to\\n+            //    disassemble one instruction backwards to query the actual PC for\\n+            //    the stack map.\\n+            //\\n+            //    TODO: One thing we *could* do to make this a little less error\\n+            //    prone, would be to assert/check that the nearest GC safepoint\\n+            //    found is within `max_encoded_size(any kind of call instruction)`\\n+            //    our queried PC for the target architecture.\\n+            //\\n+            // 2. Cranelift\\'s stack maps only handle the stack, not\\n+            //    registers. However, some references that are arguments to a call\\n+            //    may need to be in registers. In these cases, what Cranelift will\\n+            //    do is:\\n+            //\\n+            //      a. spill all the live references,\\n+            //      b. insert a GC safepoint for those references,\\n+            //      c. reload the references into registers, and finally\\n+            //      d. make the call.\\n+            //\\n+            //    Step (c) adds drift between the GC safepoint and the location of\\n+            //    the call, which is where we actually walk the stack frame and\\n+            //    collect its live references.\\n+            //\\n+            //    Luckily, the spill stack slots for the live references are still\\n+            //    up to date, so we can still find all the on-stack roots.\\n+            //    Furthermore, we do not have a moving GC, so we don\\'t need to worry\\n+            //    whether the following code will reuse the references in registers\\n+            //    (which would not have been updated to point to the moved objects)\\n+            //    or reload from the stack slots (which would have been updated to\\n+            //    point to the moved objects).\\n+            #[cfg(feature = \"old-x86-backend\")]\\n             Err(0) => return None,\\n-\\n+            #[cfg(feature = \"old-x86-backend\")]\\n             Err(i) => i - 1,\\n         };'}}",
      "message_norm": "merge pull request from ghsa-4873-36h9-wv49\n\nstop doing fuzzy search for stack maps",
      "language": "en",
      "entities": "[('ghsa-4873-36h9-wv49', 'VULNID', 'GHSA'), ('fuzzy', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['crates/wasmtime/src/module/registry.rs'])",
      "num_files": 1.0
    },
    {
      "index": 296,
      "vuln_id": "GHSA-3pxp-6963-46r9",
      "cwe_id": "{'CWE-77'}",
      "score": 0.0,
      "chain": "{'https://github.com/fagbokforlaget/pdfinfojs/commit/5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd'}",
      "dataset": "osv",
      "summary": "Command Injection in pdfinfojs Versions of `pdfinfojs` before 0.4.1 are vulnerable to command injection. This is exploitable if an attacker can control the filename parameter that is passed into the `pdfinfojs` constructor.\n\n\n## Recommendation\n\nUpdate to version 0.4.1 or later.",
      "published_date": "2018-06-07",
      "chain_len": 1,
      "project": "https://github.com/fagbokforlaget/pdfinfojs",
      "commit_href": "https://github.com/fagbokforlaget/pdfinfojs/commit/5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd",
      "commit_sha": "5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd",
      "patch": "SINGLE",
      "chain_ord": "['5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd']",
      "before_first_fix_commit": "{'379c0e14db8298b465269653b9ac308d83eb6d4e'}",
      "last_fix_commit": "5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/13/2018, 11:36:11",
      "message": "fix: command injection vulnerability",
      "author": "Deepak Thukral",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'lib/pdfinfo.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/fagbokforlaget/pdfinfojs/raw/5cc59cd8aa13ca8d16bb41da8affdfef370ad4fd/lib%2Fpdfinfo.js', 'patch': '@@ -1,9 +1,9 @@\\n-const { exec, execSync } = require(\\'child_process\\');\\n+const { execFile, execFileSync } = require(\\'child_process\\');\\n const utils = require(\\'./utils\\');\\n \\n function pdfinfo (filename, options) {\\n   this.options = options || {};\\n-  this.options.additional = [\\'\"\\' + filename + \\'\"\\'];\\n+  this.options.additional = [filename];\\n \\n   pdfinfo.prototype.add_options = function(optionArray) {\\n     if (typeof optionArray.length !== undefined) {\\n@@ -23,7 +23,7 @@ function pdfinfo (filename, options) {\\n   pdfinfo.prototype.getInfoSync = function() {\\n     const self = this;\\n     try {\\n-    \\tlet data = execSync(\\'pdfinfo \\' + self.options.additional.join(\\' \\')).toString(\\'utf8\\');\\n+    \\tlet data = execFileSync(\\'pdfinfo\\', self.options.additional).toString(\\'utf8\\');\\n         return utils.parse(data);\\n     } catch(err) {\\n         throw new Error(\"pdfinfo error: \"+ err.msg);\\n@@ -33,7 +33,7 @@ function pdfinfo (filename, options) {\\n \\n   pdfinfo.prototype.getInfo = function(cb) {\\n     let self = this;\\n-    let child = exec(\\'pdfinfo \\' + self.options.additional.join(\\' \\'), function(error, stdout, stderr) {\\n+    let child = execFile(\\'pdfinfo\\', self.options.additional, (error, stdout, stderr) => {\\n       if (!error) {\\n         let data = utils.parse(stdout);\\n         if (cb && typeof cb === \"function\") {'}}",
      "message_norm": "fix: command injection vulnerability",
      "language": "en",
      "entities": "[('command injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/pdfinfo.js'])",
      "num_files": 1.0
    },
    {
      "index": 729,
      "vuln_id": "GHSA-6296-mvgp-27hp",
      "cwe_id": "{'CWE-611'}",
      "score": 4.2,
      "chain": "{'https://github.com/eclipse/lyo/commit/a8b15b7f49ca15e55f6699749c39705d21367c6e'}",
      "dataset": "osv",
      "summary": "XML External Entity Reference in Eclipse Lyo In Eclipse Lyo versions 1.0.0 to 4.1.0, a TransformerFactory is initialized with the defaults that do not restrict DTD loading when working with RDF/XML. This allows an attacker to cause an external DTD to be retrieved.",
      "published_date": "2022-07-08",
      "chain_len": 1,
      "project": "https://github.com/eclipse/lyo",
      "commit_href": "https://github.com/eclipse/lyo/commit/a8b15b7f49ca15e55f6699749c39705d21367c6e",
      "commit_sha": "a8b15b7f49ca15e55f6699749c39705d21367c6e",
      "patch": "SINGLE",
      "chain_ord": "['a8b15b7f49ca15e55f6699749c39705d21367c6e']",
      "before_first_fix_commit": "{'5c07867c6fb4076f0177a28abc48cb83598197de'}",
      "last_fix_commit": "a8b15b7f49ca15e55f6699749c39705d21367c6e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/06/2022, 12:03:44",
      "message": "Improve Transformer init\n\nSigned-off-by: Andrew Berezovskyi <andriib@kth.se>",
      "author": "Andrew Berezovskyi",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 14, 'total': 24}",
      "files": "{'core/oslc4j-jena-provider/src/main/java/org/eclipse/lyo/oslc4j/provider/jena/JenaModelHelper.java': {'additions': 10, 'deletions': 14, 'changes': 24, 'status': 'modified', 'raw_url': 'https://github.com/eclipse/lyo/raw/a8b15b7f49ca15e55f6699749c39705d21367c6e/core%2Foslc4j-jena-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Feclipse%2Flyo%2Foslc4j%2Fprovider%2Fjena%2FJenaModelHelper.java', 'patch': '@@ -52,6 +52,7 @@\\n import org.slf4j.LoggerFactory;\\n import org.w3c.dom.Element;\\n \\n+import javax.xml.XMLConstants;\\n import javax.xml.datatype.DatatypeConfigurationException;\\n import javax.xml.datatype.DatatypeFactory;\\n import javax.xml.namespace.QName;\\n@@ -119,7 +120,7 @@ static Model createJenaModel(final String descriptionAbout, final String respons\\n             final ResponseInfo<?> responseInfo, final Object[] objects, final Map<String, Object> properties)\\n             throws DatatypeConfigurationException, IllegalAccessException, IllegalArgumentException,\\n             InvocationTargetException, OslcCoreApplicationException {\\n-        \\n+\\n         Instant start = Instant.now();\\n \\n         final Model model = ModelFactory.createDefaultModel();\\n@@ -402,7 +403,7 @@ public static Object[] fromJenaModel(final Model model, final Class<?> beanClass\\n             IllegalArgumentException,\\n             InstantiationException, InvocationTargetException, OslcCoreApplicationException,\\n             URISyntaxException, SecurityException, NoSuchMethodException {\\n-        \\n+\\n         Instant start = Instant.now();\\n \\n         final List<Object> results = new ArrayList<>();\\n@@ -664,10 +665,7 @@ else if (!(bean instanceof AbstractResource))\\n                 {\\n                     if (extendedProperties == null)\\n                     {\\n-                        logger.debug(\"Set method not found for object type:\\t\" +\\n-                                beanClass.getName() +\\n-                                \", uri:\\t\" +\\n-                                uri);\\n+                        logger.debug(\"Set method not found for object type: {}, uri: {}\", beanClass.getName(), uri);\\n                     }\\n                     else\\n                     {\\n@@ -2270,20 +2268,18 @@ private static String getVisitedResourceName(Resource resource)\\n         return visitedResourceName;\\n     }\\n \\n-    private static Transformer createTransformer()\\n-    {\\n-        try\\n-        {\\n-            Transformer transformer = TransformerFactory.newInstance().newTransformer();\\n+    private static Transformer createTransformer() {\\n+        try {\\n+            TransformerFactory factory = TransformerFactory.newInstance();\\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\\n+            factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\\n \\n+            Transformer transformer = factory.newTransformer();\\n             transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\\n \\n             return transformer;\\n-\\n         } catch (TransformerException e) {\\n-\\n             throw new RuntimeException(e);\\n-\\n         }\\n     }'}}",
      "message_norm": "improve transformer init\n\nsigned-off-by: andrew berezovskyi <andriib@kth.se>",
      "language": "en",
      "entities": "[('improve', 'ACTION', ''), ('andriib@kth.se', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/oslc4j-jena-provider/src/main/java/org/eclipse/lyo/oslc4j/provider/jena/JenaModelHelper.java'])",
      "num_files": 1.0
    },
    {
      "index": 723,
      "vuln_id": "GHSA-5xvc-vgmp-jgc3",
      "cwe_id": "{'CWE-284'}",
      "score": 9.1,
      "chain": "{'https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/9e200d974e0cb85d828a6afedb8ab90a37878f28', 'https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
      "dataset": "osv",
      "summary": "Improper Access Control in jupyterhub-firstuseauthenticator ### Impact\n\nWhen JupyterHub is used with FirstUseAuthenticator, the vulnerability allows unauthorized access to any user's account if `create_users=True` and the username is known or guessed.\n\n### Patches\n\nUpgrade to jupyterhub-firstuseauthenticator to 1.0, or apply patch https://github.com/jupyterhub/firstuseauthenticator/pull/38.patch\n\n### Workarounds\n\nIf you cannot upgrade, there is no complete workaround, but it can be mitigated.\n\nIf you cannot upgrade yet, you can disable user creation with `c.FirstUseAuthenticator.create_users = False`, which will only allow login with fully normalized usernames for already existing users prior to jupyterhub-firstuserauthenticator 1.0. If any users have never logged in with their normalized username (i.e. lowercase), they will still be vulnerable until you can patch or upgrade.",
      "published_date": "2021-10-28",
      "chain_len": 2,
      "project": "https://github.com/jupyterhub/firstuseauthenticator",
      "commit_href": "https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/9e200d974e0cb85d828a6afedb8ab90a37878f28",
      "commit_sha": "9e200d974e0cb85d828a6afedb8ab90a37878f28",
      "patch": "MULTI",
      "chain_ord": "['32b21898fb2b53b1a2e36270de6854ad70e9e9bf', '9e200d974e0cb85d828a6afedb8ab90a37878f28']",
      "before_first_fix_commit": "{'32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
      "last_fix_commit": "9e200d974e0cb85d828a6afedb8ab90a37878f28",
      "chain_ord_pos": 2.0,
      "commit_datetime": "10/26/2021, 07:00:03",
      "message": "Use normalize_username instead of .lower\n\nallows for following normalization changes",
      "author": "Min RK",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'firstuseauthenticator/firstuseauthenticator.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/jupyterhub/firstuseauthenticator/raw/9e200d974e0cb85d828a6afedb8ab90a37878f28/firstuseauthenticator%2Ffirstuseauthenticator.py', 'patch': \"@@ -138,7 +138,7 @@ def validate_username(self, name):\\n \\n     @gen.coroutine\\n     def authenticate(self, handler, data):\\n-        username = data['username'].lower()\\n+        username = self.normalize_username(data['username'])\\n \\n         if not self.create_users:\\n             if not self._user_exists(username):\"}}",
      "message_norm": "use normalize_username instead of .lower\n\nallows for following normalization changes",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['firstuseauthenticator/firstuseauthenticator.py'])",
      "num_files": 1.0
    }
  ]
}