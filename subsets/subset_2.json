{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":2463,
            "vuln_id":"GHSA-mrvj-7q4f-5p42",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/ezsystems\/ezpublish-kernel\/commit\/29fecd2afe86f763510f10c02f14962d028f311b'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in eZ Platform Kernel ### Impact\nIn file upload it is possible by certain means to upload files like .html and .js. These may contain XSS exploits which will be run when links to them are accessed by victims.\n\n### Patches\nThe fix consists simply of adding common types of scriptable file types to the configuration of the already existing filetype blacklist feature. See \"Patched versions\". As such, this can also be done manually, without installing the patched versions. This may be relevant if you are currently running a considerably older version of the kernel package and don't want to upgrade it at this time. Please see the settting \"ezsettings.default.io.file_storage.file_type_blacklist\" at:\nhttps:\/\/github.com\/ezsystems\/ezplatform-kernel\/blob\/master\/eZ\/Bundle\/EzPublishCoreBundle\/Resources\/config\/default_settings.yml#L109\n\n### Important note\nYou should adapt this setting to your needs. Do not add file types to the blacklist that you actually need to be able to upload. For instance, if you need your editors to be able to upload SVG files, then don't blacklist that. Instead, you could e.g. use an approval workflow for such content.",
            "published_date":"2021-03-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/ezsystems\/ezpublish-kernel",
            "commit_href":"https:\/\/github.com\/ezsystems\/ezpublish-kernel\/commit\/29fecd2afe86f763510f10c02f14962d028f311b",
            "commit_sha":"29fecd2afe86f763510f10c02f14962d028f311b",
            "patch":"SINGLE",
            "chain_ord":"['29fecd2afe86f763510f10c02f14962d028f311b']",
            "before_first_fix_commit":"{'4a538dbfd28fecd404f11fa0816b69a5a9e93a16'}",
            "last_fix_commit":"29fecd2afe86f763510f10c02f14962d028f311b",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2021, 15:03:30",
            "message":"Merge pull request from GHSA-mrvj-7q4f-5p42\n\nCo-authored-by: Gunnstein Lye <gunnstein.lye@ibexa.co>",
            "author":"Gunnstein Lye",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'eZ\/Bundle\/EzPublishCoreBundle\/Resources\/config\/default_settings.yml': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ezsystems\/ezpublish-kernel\/raw\/29fecd2afe86f763510f10c02f14962d028f311b\/eZ%2FBundle%2FEzPublishCoreBundle%2FResources%2Fconfig%2Fdefault_settings.yml', 'patch': '@@ -89,6 +89,16 @@ parameters:\\n         - pht\\n         - phtml\\n         - pgif\\n+        - hta\\n+        - htm\\n+        - html\\n+        - xhtm\\n+        - xhtml\\n+        - jar\\n+        - js\\n+        - jse\\n+        - svg\\n+        - swf\\n \\n     # Content settings\\n     ezsettings.default.content.view_cache: true         # Whether to use content view cache or not (Etag\/Last-Modified based)'}}",
            "message_norm":"merge pull request from ghsa-mrvj-7q4f-5p42\n\nco-authored-by: gunnstein lye <gunnstein.lye@ibexa.co>",
            "language":"en",
            "entities":"[('ghsa-mrvj-7q4f-5p42', 'VULNID', 'GHSA'), ('gunnstein.lye@ibexa.co', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['eZ\/Bundle\/EzPublishCoreBundle\/Resources\/config\/default_settings.yml'])",
            "num_files":1.0
        },
        {
            "index":2597,
            "vuln_id":"GHSA-pjpc-87mp-4332",
            "cwe_id":"{'CWE-79'}",
            "score":9.6,
            "chain":"{'https:\/\/github.com\/mautic\/mautic\/commit\/462eb596027fd949efbf9ac5cb2b376805e9d246'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting vulnerability in Mautic's tracking pixel functionality ### Impact\n\nMautic allows you to track open rates by using tracking pixels. \nThe tracking information is stored together with extra metadata of the tracking request.\n\nThe output isn't sufficiently filtered when showing the metadata of the tracking information, which may lead to a vulnerable situation.\n\n### Patches\n\nPlease upgrade to 4.3.0\n\n### Workarounds\nNone.\n\n### References\n* Internally tracked under MST-38\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@mautic.org](mailto:security@mautic.org)",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/mautic\/mautic",
            "commit_href":"https:\/\/github.com\/mautic\/mautic\/commit\/462eb596027fd949efbf9ac5cb2b376805e9d246",
            "commit_sha":"462eb596027fd949efbf9ac5cb2b376805e9d246",
            "patch":"SINGLE",
            "chain_ord":"['462eb596027fd949efbf9ac5cb2b376805e9d246']",
            "before_first_fix_commit":"{'d1518c24e45515d710d4e488bc33a14027b64194'}",
            "last_fix_commit":"462eb596027fd949efbf9ac5cb2b376805e9d246",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/23\/2022, 11:55:13",
            "message":"Merge pull request from GHSA-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* Update app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php\n\nCo-authored-by: John Linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nCo-authored-by: John Linhart <admin@escope.cz>",
            "author":"mollux",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mautic\/mautic\/raw\/462eb596027fd949efbf9ac5cb2b376805e9d246\/app%2Fbundles%2FEmailBundle%2FViews%2FSubscribedEvents%2FTimeline%2Findex.html.php', 'patch': \"@@ -8,6 +8,7 @@\\n  *\\n  * @license     GNU\/GPLv3 http:\/\/www.gnu.org\/licenses\/gpl-3.0.html\\n  *\/\\n+\\n if ($item = ((isset($event['extra'])) ? $event['extra']['stat'] : false)): ?>\\n     <p>\\n         <?php if (!empty($item['isFailed'])) : ?>\\n@@ -63,7 +64,7 @@\\n             endif;\\n             ?>\\n             <?php if ($counter > 1): ?><hr\/><?php endif; ?>\\n-            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?><\/strong><br\/><?php echo $detail['useragent']; ?>\\n+            <strong><?php echo $view['date']->toText($detail['datetime'], 'UTC'); ?><\/strong><br\/><?php echo $view->escape($detail['useragent']); ?>\\n             <?php ++$counter; ?>\\n         <?php endforeach; ?>\\n         <?php\"}}",
            "message_norm":"merge pull request from ghsa-pjpc-87mp-4332\n\n* sanitise user agent before displaying\n\n* update app\/bundles\/emailbundle\/views\/subscribedevents\/timeline\/index.html.php\n\nco-authored-by: john linhart <admin@escope.cz>\n\n* removed obsolete use statement\n\nco-authored-by: john linhart <admin@escope.cz>",
            "language":"en",
            "entities":"[('ghsa-pjpc-87mp-4332', 'VULNID', 'GHSA'), ('sanitise', 'SECWORD', ''), ('update', 'ACTION', ''), ('admin@escope.cz', 'SECWORD', ''), ('removed', 'ACTION', ''), ('admin@escope.cz', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/bundles\/EmailBundle\/Views\/SubscribedEvents\/Timeline\/index.html.php'])",
            "num_files":1.0
        },
        {
            "index":3414,
            "vuln_id":"GHSA-xcvv-84j5-jw9h",
            "cwe_id":"{'CWE-471'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/19953a8c089b0328c470acaaaf6accdfcb34da11'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in assign-deep Versions of `assign-deep` before 0.4.7 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 0.4.7 or later.",
            "published_date":"2018-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/assign-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/19953a8c089b0328c470acaaaf6accdfcb34da11",
            "commit_sha":"19953a8c089b0328c470acaaaf6accdfcb34da11",
            "patch":"SINGLE",
            "chain_ord":"['19953a8c089b0328c470acaaaf6accdfcb34da11']",
            "before_first_fix_commit":"{'f6cba02d11a1d293593be0e942aff60bfd5a5711'}",
            "last_fix_commit":"19953a8c089b0328c470acaaaf6accdfcb34da11",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2018, 16:20:22",
            "message":"exclude __proto__",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/assign-deep\/raw\/19953a8c089b0328c470acaaaf6accdfcb34da11\/index.js', 'patch': \"@@ -37,7 +37,7 @@ function extend(target, obj) {\\n   assignSymbols(target, obj);\\n \\n   for (var key in obj) {\\n-    if (hasOwn(obj, key)) {\\n+    if (key !== '__proto__' && hasOwn(obj, key)) {\\n       var val = obj[key];\\n       if (isObject(val)) {\\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\"}}",
            "message_norm":"exclude __proto__",
            "language":"pt",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":871,
            "vuln_id":"GHSA-6mv9-hcx5-7mhh",
            "cwe_id":"{'CWE-918'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/2d16b459205730d85e51499c2457109b234ca9d9'}",
            "dataset":"osv",
            "summary":"Server-Side Request Forgery in Jenkins An improper authorization vulnerability exists in Jenkins versions 2.106 and earlier, and LTS 2.89.3 and earlier, that allows an attacker to have Jenkins submit HTTP GET requests and get limited information about the response.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/2d16b459205730d85e51499c2457109b234ca9d9",
            "commit_sha":"2d16b459205730d85e51499c2457109b234ca9d9",
            "patch":"SINGLE",
            "chain_ord":"['2d16b459205730d85e51499c2457109b234ca9d9']",
            "before_first_fix_commit":"{'ccc374a7176d7704941fb494589790b7673efe2e'}",
            "last_fix_commit":"2d16b459205730d85e51499c2457109b234ca9d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/30\/2018, 17:15:48",
            "message":"[SECURITY-506] Require admin permission to validate proxy config.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'core\/src\/main\/java\/hudson\/ProxyConfiguration.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/2d16b459205730d85e51499c2457109b234ca9d9\/core%2Fsrc%2Fmain%2Fjava%2Fhudson%2FProxyConfiguration.java', 'patch': '@@ -341,6 +341,8 @@ public FormValidation doValidateProxy(\\n                 @QueryParameter(\"userName\") String userName, @QueryParameter(\"password\") String password,\\n                 @QueryParameter(\"noProxyHost\") String noProxyHost) {\\n \\n+            Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\\n+\\n             if (Util.fixEmptyAndTrim(testUrl) == null) {\\n                 return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\\n             }'}}",
            "message_norm":"[security-506] require admin permission to validate proxy config.",
            "language":"en",
            "entities":"[('security-506', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('permission', 'SECWORD', ''), ('validate', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/hudson\/ProxyConfiguration.java'])",
            "num_files":1.0
        },
        {
            "index":1465,
            "vuln_id":"GHSA-c383-q5vf-hx55",
            "cwe_id":"{'CWE-190'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in Microweber Microweber prior to 1.2.12 is vulnerable to Integer Overflow or Wraparound.",
            "published_date":"2022-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "commit_sha":"7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "patch":"SINGLE",
            "chain_ord":"['7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583']",
            "before_first_fix_commit":"{'28f2677ea228a36e7692505e1821ae373a8b07e4'}",
            "last_fix_commit":"7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/11\/2022, 08:30:42",
            "message":"checkout shipping address validation - max chars allowed",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 4, 'total': 25}",
            "files":"{'src\/MicroweberPackages\/Checkout\/Http\/Controllers\/Traits\/ShippingTrait.php': {'additions': 21, 'deletions': 4, 'changes': 25, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583\/src%2FMicroweberPackages%2FCheckout%2FHttp%2FControllers%2FTraits%2FShippingTrait.php', 'patch': \"@@ -38,13 +38,30 @@ public function shippingMethodSave(Request $request) {\\n \\n         if (is_array($request->get('Address'))) {\\n             $request->merge([\\n-               'city'=>$request->get('Address')['city'],\\n-               'zip'=>$request->get('Address')['zip'],\\n-               'state'=>$request->get('Address')['state'],\\n-               'address'=>$request->get('Address')['address'],\\n+                'city'=>$request->get('Address')['city'],\\n+                'zip'=>$request->get('Address')['zip'],\\n+                'state'=>$request->get('Address')['state'],\\n+                'address'=>$request->get('Address')['address'],\\n             ]);\\n         }\\n \\n+        $rules = [];\\n+        $rules['shipping_gw'] = 'max:500';\\n+        $rules['city'] = 'max:500';\\n+        $rules['address'] = 'max:500';\\n+        $rules['country'] = 'max:500';\\n+        $rules['state'] = 'max:500';\\n+        $rules['zip'] = 'max:500';\\n+        $rules['other_info'] = 'max:500';\\n+\\n+        $validator = Validator::make($request->all(), $rules);\\n+\\n+        if ($validator->fails()) {\\n+            $errors = $validator->messages()->toArray();\\n+            session_set('errors', $errors);\\n+            return redirect(route('checkout.shipping_method'));\\n+        }\\n+\\n         session_append_array('checkout_v2', [\\n             'shipping_gw'=> $request->get('shipping_gw'),\\n             'city'=> $request->get('city'),\"}}",
            "message_norm":"checkout shipping address validation - max chars allowed",
            "language":"en",
            "entities":null,
            "classification_level_1":"NON_SECURITY_RELATED",
            "classification_level_2":"REDUNDANT_MESSAGE",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Checkout\/Http\/Controllers\/Traits\/ShippingTrait.php'])",
            "num_files":1.0
        },
        {
            "index":1331,
            "vuln_id":"GHSA-976r-qfjj-c24w",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/apache\/airflow\/commit\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8'}",
            "dataset":"osv",
            "summary":"Command injection via Celery broker in Apache Airflow An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attacker can connect to the broker (Redis, RabbitMQ) directly, it is possible to inject commands, resulting in the celery worker running arbitrary commands.",
            "published_date":"2020-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/airflow",
            "commit_href":"https:\/\/github.com\/apache\/airflow\/commit\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "commit_sha":"afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "patch":"SINGLE",
            "chain_ord":"['afa4b11fddfdbadb048f742cf66d5c21c675a5c8']",
            "before_first_fix_commit":"{'63260c9955d12a60d8c143a932432013dd05eebb'}",
            "last_fix_commit":"afa4b11fddfdbadb048f742cf66d5c21c675a5c8",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/27\/2019, 08:24:41",
            "message":"[AIRFLOW-6351] security - ui - Add Cross Site Scripting defence (#6913)",
            "author":"tooptoop4",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'airflow\/www_rbac\/views.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/airflow\/raw\/afa4b11fddfdbadb048f742cf66d5c21c675a5c8\/airflow%2Fwww_rbac%2Fviews.py', 'patch': '@@ -321,7 +321,7 @@ def get_int_arg(value, default=0):\\n             num_dag_to=min(end, num_of_all_dags),\\n             num_of_all_dags=num_of_all_dags,\\n             paging=wwwutils.generate_pages(current_page, num_of_pages,\\n-                                           search=arg_search_query,\\n+                                           search=escape(arg_search_query) if arg_search_query else None,\\n                                            showPaused=not hide_paused),\\n             num_runs=num_runs,\\n             tags=tags)'}}",
            "message_norm":"[airflow-6351] security - ui - add cross site scripting defence (#6913)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('add', 'ACTION', ''), ('cross site scripting', 'SECWORD', ''), ('defence', 'SECWORD', ''), ('#6913', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['airflow\/www_rbac\/views.py'])",
            "num_files":1.0
        },
        {
            "index":2948,
            "vuln_id":"GHSA-rh4p-g7x6-8pqg",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/75162b7f2d8ac2b37d17564e9c979ba1bae707e8', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7f0d390ad77d838cbb81d4586c83ec822f384ce8'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1092, CVE-2019-1103, CVE-2019-1106, CVE-2019-1107.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7f0d390ad77d838cbb81d4586c83ec822f384ce8",
            "commit_sha":"7f0d390ad77d838cbb81d4586c83ec822f384ce8",
            "patch":"MULTI",
            "chain_ord":"['7f0d390ad77d838cbb81d4586c83ec822f384ce8', '75162b7f2d8ac2b37d17564e9c979ba1bae707e8']",
            "before_first_fix_commit":"{'12c31f0e83ddc511e57b9aa1e78533899199eb32', 'ba1f4455f921ce5f12091ff8a11c8028c6a64b17'}",
            "last_fix_commit":"75162b7f2d8ac2b37d17564e9c979ba1bae707e8",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/06\/2019, 18:38:26",
            "message":"[CVE-2019-1062] Chakra JIT Type Confusion",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 6, 'total': 11}",
            "files":"{'lib\/Backend\/Opnd.cpp': {'additions': 5, 'deletions': 6, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/7f0d390ad77d838cbb81d4586c83ec822f384ce8\/lib%2FBackend%2FOpnd.cpp', 'patch': \"@@ -962,7 +962,8 @@ PropertySymOpnd::IsObjectHeaderInlined() const\\n bool\\n PropertySymOpnd::ChangesObjectLayout() const\\n {\\n-    JITTypeHolder cachedType = this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n+    JITTypeHolder cachedType = this->HasInitialType() ? this->GetInitialType() : \\n+        this->IsMono() ? this->GetType() : this->GetFirstEquivalentType();\\n \\n     JITTypeHolder finalType = this->GetFinalType();\\n \\n@@ -987,13 +988,11 @@ PropertySymOpnd::ChangesObjectLayout() const\\n         \/\/ This is the case where the type transition actually occurs. (This is the only case that's detectable\\n         \/\/ during the loop pre-pass, since final types are not in place yet.)\\n \\n-        Assert(cachedType != nullptr && Js::DynamicType::Is(cachedType->GetTypeId()));\\n-\\n-        const JITTypeHandler * cachedTypeHandler = cachedType->GetTypeHandler();\\n         const JITTypeHandler * initialTypeHandler = initialType->GetTypeHandler();\\n \\n-        return cachedTypeHandler->GetInlineSlotCapacity() != initialTypeHandler->GetInlineSlotCapacity() ||\\n-            cachedTypeHandler->GetOffsetOfInlineSlots() != initialTypeHandler->GetOffsetOfInlineSlots();\\n+        \/\/ If no final type has been set in the forward pass, then we have no way of knowing how the object shape will evolve here.\\n+        \/\/ If the initial type is object-header-inlined, assume that the layout may change.\\n+        return initialTypeHandler->IsObjectHeaderInlinedTypeHandler();\\n     }\\n \\n     return false;\"}}",
            "message_norm":"[cve-2019-1062] chakra jit type confusion",
            "language":"en",
            "entities":"[('cve-2019-1062', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/Opnd.cpp'])",
            "num_files":1.0
        },
        {
            "index":831,
            "vuln_id":"GHSA-6g85-3hm8-83f9",
            "cwe_id":"{'CWE-754'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `QuantizeAndDequantizeV4Grad` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.QuantizeAndDequantizeV4Grad`:\n\n```python\nimport tensorflow as tf\n\ngradient_tensor = tf.constant([0.0], shape=[1])\ninput_tensor = tf.constant([0.0], shape=[1])\ninput_min = tf.constant([[0.0]], shape=[1, 1])\ninput_max = tf.constant([[0.0]], shape=[1, 1])\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=gradient_tensor, input=input_tensor,\n  input_min=input_min, input_max=input_max, axis=0)\n```                     \n                        \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/95078c145b5a7a43ee046144005f733092756ab5\/tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the `input_*` tensors. In turn, this results in the tensors being passes as they are to [`QuantizeAndDequantizePerChannelGradientImpl`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/95078c145b5a7a43ee046144005f733092756ab5\/tensorflow\/core\/kernels\/quantize_and_dequantize_op.h#L295-L306):\n\n```cc \ntemplate <typename Device, typename T>\nstruct QuantizeAndDequantizePerChannelGradientImpl {\n  static void Compute(const Device& d,\n                      typename TTypes<T, 3>::ConstTensor gradient,\n                      typename TTypes<T, 3>::ConstTensor input,\n                      const Tensor* input_min_tensor,\n                      const Tensor* input_max_tensor,\n                      typename TTypes<T, 3>::Tensor input_backprop,\n                      typename TTypes<T>::Flat input_min_backprop,\n                      typename TTypes<T>::Flat input_max_backprop) {\n    ...\n    auto input_min = input_min_tensor->vec<T>();\n    auto input_max = input_max_tensor->vec<T>();\n    ...\n}\n```\n\nHowever, the `vec<T>` method, requires the rank to 1 and triggers a `CHECK` failure otherwise.\n\n### Patches\nWe have patched the issue in GitHub commit [20431e9044cf2ad3c0323c34888b192f3289af6b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 as this is the only other affected version.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b",
            "commit_sha":"20431e9044cf2ad3c0323c34888b192f3289af6b",
            "patch":"SINGLE",
            "chain_ord":"['20431e9044cf2ad3c0323c34888b192f3289af6b']",
            "before_first_fix_commit":"{'95078c145b5a7a43ee046144005f733092756ab5'}",
            "last_fix_commit":"20431e9044cf2ad3c0323c34888b192f3289af6b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2021, 20:43:59",
            "message":"Fix `tf.raw_ops.QuantizeAndDequantizeV4Grad` CHECK failure.\n\nPiperOrigin-RevId: 370532425\nChange-Id: I767721be266851b63d8fe55e7ac6be0af6017f6c",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/20431e9044cf2ad3c0323c34888b192f3289af6b\/tensorflow%2Fcore%2Fkernels%2Fquantize_and_dequantize_op.cc', 'patch': '@@ -160,7 +160,17 @@ class QuantizeAndDequantizeV4GradientOp : public OpKernel {\\n         errors::InvalidArgument(\"gradient and input must be the same size\"));\\n     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\\n     const Tensor& input_min_tensor = ctx->input(2);\\n+    OP_REQUIRES(ctx,\\n+                input_min_tensor.dims() == 0 || input_min_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input min tensor must have dimension 1. Recieved \",\\n+                    input_min_tensor.dims(), \".\"));\\n     const Tensor& input_max_tensor = ctx->input(3);\\n+    OP_REQUIRES(ctx,\\n+                input_max_tensor.dims() == 0 || input_max_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input max tensor must have dimension 1. Recieved \",\\n+                    input_max_tensor.dims(), \".\"));\\n     if (axis_ != -1) {\\n       OP_REQUIRES(\\n           ctx, input_min_tensor.dim_size(0) == depth,'}}",
            "message_norm":"fix `tf.raw_ops.quantizeanddequantizev4grad` check failure.\n\npiperorigin-revid: 370532425\nchange-id: i767721be266851b63d8fe55e7ac6be0af6017f6c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('370532425', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3109,
            "vuln_id":"GHSA-vfrc-ggmc-5jwv",
            "cwe_id":"{'CWE-79'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/04483bdac3b5196737516398b5ce0383875a5c60'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in django-helpdesk django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2021-11-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/django-helpdesk\/django-helpdesk",
            "commit_href":"https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/04483bdac3b5196737516398b5ce0383875a5c60",
            "commit_sha":"04483bdac3b5196737516398b5ce0383875a5c60",
            "patch":"SINGLE",
            "chain_ord":"['04483bdac3b5196737516398b5ce0383875a5c60']",
            "before_first_fix_commit":"{'2c7065e0c4296e0c692fb4a7ee19c7357583af30'}",
            "last_fix_commit":"04483bdac3b5196737516398b5ce0383875a5c60",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/18\/2021, 03:42:02",
            "message":"Add `att.full_clean()` before saving\n\nFix issue https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983\r\nAlso, fix bug stored XSS disclosure: https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/",
            "author":"lethanhphuc",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'helpdesk\/lib.py': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/raw\/04483bdac3b5196737516398b5ce0383875a5c60\/helpdesk%2Flib.py', 'patch': \"@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):\\n                 'application\/octet-stream',\\n                 size=attached.size,\\n             )\\n+            att.full_clean()\\n             att.save()\\n \\n             if attached.size < max_email_attachment_size:\"}}",
            "message_norm":"add `att.full_clean()` before saving\n\nfix issue https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983\r\nalso, fix bug stored xss disclosure: https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983', 'URL', ''), ('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('xss', 'SECWORD', ''), ('disclosure', 'SECWORD', ''), ('https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['helpdesk\/lib.py'])",
            "num_files":1.0
        },
        {
            "index":2187,
            "vuln_id":"GHSA-j4f2-536g-r55m",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/socketio\/engine.io\/commit\/734f9d1268840722c41219e69eb58318e0b2ac6b'}",
            "dataset":"osv",
            "summary":"Resource exhaustion in engine.io  Engine.IO before 4.0.0 and 3.6.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/socketio\/engine.io",
            "commit_href":"https:\/\/github.com\/socketio\/engine.io\/commit\/734f9d1268840722c41219e69eb58318e0b2ac6b",
            "commit_sha":"734f9d1268840722c41219e69eb58318e0b2ac6b",
            "patch":"SINGLE",
            "chain_ord":"['734f9d1268840722c41219e69eb58318e0b2ac6b']",
            "before_first_fix_commit":"{'61b949259ed966ef6fc8bfd61f14d1a2ef06d319'}",
            "last_fix_commit":"734f9d1268840722c41219e69eb58318e0b2ac6b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2020, 06:57:29",
            "message":"feat: decrease the default value of maxHttpBufferSize\n\nThis change reduces the default value from 100 mb to a more sane 1 mb.\n\nThis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
            "author":"Damien Arrachequesne",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '01\/08\/2021, 09:14:06', 'body': '[CVE-2020-36048](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-36048) was assigned to this commit.'}, 'com_2': {'author': 'ixevix', 'datetime': '05\/11\/2022, 18:37:43', 'body': 'Any luck getting this into an official release on some version of engine.io that socket.io v2.4.x depends on?'}, 'com_3': {'author': 'darrachequesne', 'datetime': '06\/27\/2022, 05:35:10', 'body': '@ixevix here we go:\\r\\n\\r\\n- https:\/\/github.com\/socketio\/engine.io\/releases\/tag\/3.6.0\\r\\n- https:\/\/github.com\/socketio\/socket.io\/releases\/tag\/2.5.0'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/server.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/socketio\/engine.io\/raw\/734f9d1268840722c41219e69eb58318e0b2ac6b\/lib%2Fserver.js', 'patch': '@@ -26,7 +26,7 @@ class Server extends EventEmitter {\\n         pingTimeout: 5000,\\n         pingInterval: 25000,\\n         upgradeTimeout: 10000,\\n-        maxHttpBufferSize: 10e7,\\n+        maxHttpBufferSize: 1e6,\\n         transports: Object.keys(transports),\\n         allowUpgrades: true,\\n         perMessageDeflate: {'}}",
            "message_norm":"feat: decrease the default value of maxhttpbuffersize\n\nthis change reduces the default value from 100 mb to a more sane 1 mb.\n\nthis helps protect the server against denial of service attacks by\nmalicious clients sending huge amounts of data.",
            "language":"en",
            "entities":"[('protect', 'SECWORD', ''), ('server', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('malicious', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/server.js'])",
            "num_files":1.0
        },
        {
            "index":3159,
            "vuln_id":"GHSA-vq36-27g6-p492",
            "cwe_id":"{'CWE-125'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd'}",
            "dataset":"osv",
            "summary":"Out of bounds read in Tensorflow ### Impact\nTensorFlow's [type inference](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/274df9b02330b790aa8de1cee164b70f72b9b244\/tensorflow\/core\/graph\/graph.cc#L223-L229) can cause a heap OOB read as the bounds checking is done in a `DCHECK` (which is a no-op during production):\n\n```cc\nif (node_t.type_id() != TFT_UNSET) {\n  int ix = input_idx[i];\n  DCHECK(ix < node_t.args_size())\n      << \"input \" << i << \" should have an output \" << ix\n      << \" but instead only has \" << node_t.args_size()\n      << \" outputs: \" << node_t.DebugString();\n  input_types.emplace_back(node_t.args(ix));\n  \/\/ ...\n}       \n```   \n      \nAn attacker can control `input_idx` such that `ix` would be larger than the number of values in `node_t.args`.\n        \n### Patches\nWe have patched the issue in GitHub commit [c99d98cd189839dcf51aee94e7437b54b31f8abd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd).\n  \nThe fix will be included in TensorFlow 2.8.0. This is the only affected version.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "commit_sha":"c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "patch":"SINGLE",
            "chain_ord":"['c99d98cd189839dcf51aee94e7437b54b31f8abd']",
            "before_first_fix_commit":"{'c5ae019abd2f260cf3400abcce4962c75cc5182c'}",
            "last_fix_commit":"c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2021, 01:42:30",
            "message":"Handle invalid inputs instead of crashing.\n\nPiperOrigin-RevId: 409549744\nChange-Id: I7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
            "author":"Dan Moldovan",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 4, 'total': 14}",
            "files":"{'tensorflow\/core\/graph\/graph.cc': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c99d98cd189839dcf51aee94e7437b54b31f8abd\/tensorflow%2Fcore%2Fgraph%2Fgraph.cc', 'patch': '@@ -222,10 +222,16 @@ void Node::RunForwardTypeInference() {\\n       const auto& node_t = node->def().experimental_type();\\n       if (node_t.type_id() != TFT_UNSET) {\\n         int ix = input_idx[i];\\n-        DCHECK(ix < node_t.args_size())\\n-            << \"input \" << i << \" should have an output \" << ix\\n-            << \" but instead only has \" << node_t.args_size()\\n-            << \" outputs: \" << node_t.DebugString();\\n+        if (ix >= node_t.args_size()) {\\n+          LOG(WARNING) << name() << \" has bad type information: input \" << i\\n+                       << \" should have an output \" << ix\\n+                       << \" but instead only has \" << node_t.args_size()\\n+                       << \" outputs: \" << node_t.DebugString()\\n+                       << \"\\\\nThis indicates either \"\\n+                          \"a bug in op registration or a corrupted graph.\";\\n+          ClearTypeInfo();\\n+          return;\\n+        }\\n         input_types.emplace_back(node_t.args(ix));\\n       } else {\\n         input_types.emplace_back(*no_type);'}}",
            "message_norm":"handle invalid inputs instead of crashing.\n\npiperorigin-revid: 409549744\nchange-id: i7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
            "language":"en",
            "entities":"[('409549744', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/graph\/graph.cc'])",
            "num_files":1.0
        },
        {
            "index":925,
            "vuln_id":"GHSA-72p5-2r6g-fm6v",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/totaljs\/cms\/commit\/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad', 'https:\/\/github.com\/totaljs\/cms\/commit\/8b9d7dada998c08d172481d9f0fc0397c4b3c78d'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects total.js Total.js CMS 12.0.0 has XSS related to themes\/admin\/views\/index.html (item.message) and themes\/admin\/public\/ui.js (column.format).",
            "published_date":"2019-04-02",
            "chain_len":2,
            "project":"https:\/\/github.com\/totaljs\/cms",
            "commit_href":"https:\/\/github.com\/totaljs\/cms\/commit\/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad",
            "commit_sha":"75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad",
            "patch":"MULTI",
            "chain_ord":"['75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad', '8b9d7dada998c08d172481d9f0fc0397c4b3c78d']",
            "before_first_fix_commit":"{'75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad'}",
            "last_fix_commit":"8b9d7dada998c08d172481d9f0fc0397c4b3c78d",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/13\/2019, 19:29:24",
            "message":"Fixed XSS.",
            "author":"Peter S\u030cirka",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'themes\/admin\/public\/ui.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/totaljs\/cms\/raw\/75205f93009db3cf8c0b0f4f1fc8ab82d70da8ad\/themes%2Fadmin%2Fpublic%2Fui.js', 'patch': \"@@ -559,7 +559,7 @@ COMPONENT('grid', 'filter:true;external:false;fillcount:50;filterlabel:Filtering\\n \\t\\t\\tfor (var j = 0, jl = columns.length; j < jl; j++) {\\n \\t\\t\\t\\tvar column = columns[j];\\n \\t\\t\\t\\tvar val = items[i][column.name];\\n-\\t\\t\\t\\tm.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : (column.format ? val.format(column.format) : val);\\n+\\t\\t\\t\\tm.value = column.template ? column.template(items[i], column) : column.render ? column.render(val, column, items[i]) : val == null ? '' : Thelpers.encode((column.format ? val.format(column.format) : val));\\n \\t\\t\\t\\tm.index = j;\\n \\t\\t\\t\\tm.align = column.align;\\n \\t\\t\\t\\tm.background = column.background;\"}}",
            "message_norm":"fixed xss.",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['themes\/admin\/public\/ui.js'])",
            "num_files":1.0
        },
        {
            "index":3347,
            "vuln_id":"GHSA-x2jc-pwfj-h9p3",
            "cwe_id":"{'CWE-89'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d'}",
            "dataset":"osv",
            "summary":"SQL Injection in sequelize Affected versions of `sequelize` use MySQL's backslash-based escape syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's escape syntax, which can result in a SQL Injection vulnerability.\n\n\n## Recommendation\n\nUpdate to version 1.7.0-alpha3 or later.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/sequelize\/sequelize",
            "commit_href":"https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "commit_sha":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "patch":"SINGLE",
            "chain_ord":"['c876192aa6ce1f67e22b26a4d175b8478615f42d']",
            "before_first_fix_commit":"{'7dc35e3889e3fa0859b96be41092717444cc2a38'}",
            "last_fix_commit":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/15\/2013, 03:24:59",
            "message":"Fix string escaping for sqlite\n\nSQLite was defaulting to the MySQL backslash-escaped style, but it uses\npostgres-style escaping. This is a SQL-injection vulnerability, and\nshouldn't be taken lightly (although SQLite is mostly for testing).",
            "author":"Benjamin Woodruff",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'lib\/sql-string.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sequelize\/sequelize\/raw\/c876192aa6ce1f67e22b26a4d175b8478615f42d\/lib%2Fsql-string.js', 'patch': '@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\\n     }\\n   }\\n \\n-  if (dialect == \"postgres\") {\\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\\n     \/\/ http:\/\/www.postgresql.org\/docs\/8.2\/static\/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\\n+    \/\/ http:\/\/stackoverflow.com\/q\/603572\/130598\\n     val = val.replace(\/\\'\/g, \"\\'\\'\");\\n   } else {\\n     val = val.replace(\/[\\\\0\\\\n\\\\r\\\\b\\\\t\\\\\\\\\\\\\\'\\\\\"\\\\x1a]\/g, function(s) {'}}",
            "message_norm":"fix string escaping for sqlite\n\nsqlite was defaulting to the mysql backslash-escaped style, but it uses\npostgres-style escaping. this is a sql-injection vulnerability, and\nshouldn't be taken lightly (although sqlite is mostly for testing).",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/sql-string.js'])",
            "num_files":1.0
        },
        {
            "index":987,
            "vuln_id":"GHSA-773q-5334-5gf9",
            "cwe_id":"{'CWE-789'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/rust-blockchain\/evm\/commit\/19ade858c430ab13eb562764a870ac9f8506f8dd'}",
            "dataset":"osv",
            "summary":"Memory over-allocation in evm-core Prior to the patch, when executing specific EVM opcodes related\nto memory operations that use `evm_core::Memory::copy_large`, the\ncrate can over-allocate memory when it is not needed, making it\npossible for an attacker to perform denial-of-service attack.\n\nThe flaw was corrected in commit `19ade85`.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rust-blockchain\/evm",
            "commit_href":"https:\/\/github.com\/rust-blockchain\/evm\/commit\/19ade858c430ab13eb562764a870ac9f8506f8dd",
            "commit_sha":"19ade858c430ab13eb562764a870ac9f8506f8dd",
            "patch":"SINGLE",
            "chain_ord":"['19ade858c430ab13eb562764a870ac9f8506f8dd']",
            "before_first_fix_commit":"{'2a8a3e967ec265fdc7120ff6b57ceab021ca69f6'}",
            "last_fix_commit":"19ade858c430ab13eb562764a870ac9f8506f8dd",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/11\/2021, 15:33:30",
            "message":"Skip setting memory value if the value vec is empty",
            "author":"Wei Tang",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'core\/src\/memory.rs': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rust-blockchain\/evm\/raw\/19ade858c430ab13eb562764a870ac9f8506f8dd\/core%2Fsrc%2Fmemory.rs', 'patch': '@@ -105,6 +105,10 @@ impl Memory {\\n \\t\\tvalue: &[u8],\\n \\t\\ttarget_size: Option<usize>\\n \\t) -> Result<(), ExitFatal> {\\n+\\t\\tif value.is_empty() {\\n+\\t\\t\\treturn Ok(())\\n+\\t\\t}\\n+\\t\\t\\n \\t\\tlet target_size = target_size.unwrap_or(value.len());\\n \\n \\t\\tif offset.checked_add(target_size)'}}",
            "message_norm":"skip setting memory value if the value vec is empty",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/memory.rs'])",
            "num_files":1.0
        },
        {
            "index":1370,
            "vuln_id":"GHSA-9g9w-hmvj-5h57",
            "cwe_id":"{'CWE-471'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/merge-deep\/commit\/2c33634da7129a5aefcc262d2fec2e72224404e5'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in merge-deep Versions of `merge-deep` before 3.0.1 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 3.0.1 or later.",
            "published_date":"2018-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/merge-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/merge-deep\/commit\/2c33634da7129a5aefcc262d2fec2e72224404e5",
            "commit_sha":"2c33634da7129a5aefcc262d2fec2e72224404e5",
            "patch":"SINGLE",
            "chain_ord":"['2c33634da7129a5aefcc262d2fec2e72224404e5']",
            "before_first_fix_commit":"{'7be7e50163dc4ef467ace5371186a77028a66cc9'}",
            "last_fix_commit":"2c33634da7129a5aefcc262d2fec2e72224404e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2018, 16:43:20",
            "message":"exclude __proto__",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/merge-deep\/raw\/2c33634da7129a5aefcc262d2fec2e72224404e5\/index.js', 'patch': \"@@ -30,7 +30,7 @@ module.exports = function mergeDeep(orig, objects) {\\n \\n function merge(target, obj) {\\n   for (var key in obj) {\\n-    if (!hasOwn(obj, key)) {\\n+    if (key === '__proto__' || !hasOwn(obj, key)) {\\n       continue;\\n     }\"}}",
            "message_norm":"exclude __proto__",
            "language":"pt",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2484,
            "vuln_id":"GHSA-mxjj-953w-2c2v",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":7.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ee24e7949a203d234489f9da2c5bf45a7d5157d'}",
            "dataset":"osv",
            "summary":"Data corruption in tensorflow-lite ### Impact\nWhen determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:\nhttps:\/\/github.com\/tensorflow\/tensorflow\/blob\/0e68f4d3295eb0281a517c3662f6698992b7b2cf\/tensorflow\/lite\/kernels\/internal\/types.h#L437-L442\n\nSince the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads\/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.\n\n### Patches\nWe have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2020-09-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "commit_sha":"8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "patch":"SINGLE",
            "chain_ord":"['8ee24e7949a203d234489f9da2c5bf45a7d5157d']",
            "before_first_fix_commit":"{'0b5662bc2be13a8c8f044d925d87fb6e56247cd8'}",
            "last_fix_commit":"8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/18\/2020, 21:19:26",
            "message":"[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/internal\/types.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8ee24e7949a203d234489f9da2c5bf45a7d5157d\/tensorflow%2Flite%2Fkernels%2Finternal%2Ftypes.h', 'patch': '@@ -438,7 +438,7 @@ int MatchingArraySize(const ArrayType1& array1, int index1,\\n inline int MatchingDim(const RuntimeShape& shape1, int index1,\\n                        const RuntimeShape& shape2, int index2) {\\n   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));\\n-  return shape1.Dims(index1);\\n+  return std::min(shape1.Dims(index1), shape2.Dims(index2));\\n }\\n \\n template <typename... Args>'}}",
            "message_norm":"[tflite] ensure `matchingdim` does not allow buffer overflow.\n\nwe check in `matchingdim` that both arguments have the same dimensionality, however that is a `dcheck` only enabled if building in debug mode. hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. to fix, we now make `matchingdim` return the minimum of the two sizes.\n\na much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\npiperorigin-revid: 332526127\nchange-id: if627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('buffer overflows', 'SECWORD', ''), ('fix', 'ACTION', ''), ('332526127', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/internal\/types.h'])",
            "num_files":1.0
        },
        {
            "index":1018,
            "vuln_id":"GHSA-7f62-4887-cfv5",
            "cwe_id":"{'CWE-269'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526'}",
            "dataset":"osv",
            "summary":"Privilege escalation in easyappointments The Easy!Appointments API authorization is checked against the user's existence, without validating the permissions. As a result, a low privileged user (eg. provider) can create a new admin user via the \"\/api\/v1\/admins\/\" endpoint and take over the system. A [patch](https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526) is available on the `develop` branch of the repository.",
            "published_date":"2022-05-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/alextselegidis\/easyappointments",
            "commit_href":"https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526",
            "commit_sha":"63dbb51decfcc1631c398ecd6d30e3a337845526",
            "patch":"SINGLE",
            "chain_ord":"['63dbb51decfcc1631c398ecd6d30e3a337845526']",
            "before_first_fix_commit":"{'f0e976c9ac9be2a7e7626d2112c71042ba087dfa'}",
            "last_fix_commit":"63dbb51decfcc1631c398ecd6d30e3a337845526",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 21:26:28",
            "message":"Check the role slug in Api.php",
            "author":"Alex Tselegidis",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'application\/libraries\/Api.php': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alextselegidis\/easyappointments\/raw\/63dbb51decfcc1631c398ecd6d30e3a337845526\/application%2Flibraries%2FApi.php', 'patch': \"@@ -77,7 +77,9 @@ public function auth()\\n \\n             $password = $_SERVER['PHP_AUTH_PW'];\\n \\n-            if ( ! $this->CI->accounts->check_login($username, $password))\\n+            $userdata = $this->CI->accounts->check_login($username, $password);\\n+\\n+            if (empty($userdata['role_slug']) || $userdata['role_slug'] !== DB_SLUG_ADMIN)\\n             {\\n                 throw new RuntimeException('The provided credentials do not match any admin user!', 401, 'Unauthorized');\\n             }\"}}",
            "message_norm":"check the role slug in api.php",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['application\/libraries\/Api.php'])",
            "num_files":1.0
        },
        {
            "index":1143,
            "vuln_id":"GHSA-85wq-pqhp-hmq6",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/e69c28e44dae41322112471e1c80f840bde314d4', 'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/23f4809e6c10a221e9d67f2e841536845387b42d'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery in Jenkins Jenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an issue in the Jenkins user database authentication realm: create an account if signup is enabled; or create an account if the victim is an administrator, possibly deleting the existing default admin user in the process and allowing a wide variety of impacts.",
            "published_date":"2022-05-14",
            "chain_len":3,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/e69c28e44dae41322112471e1c80f840bde314d4",
            "commit_sha":"e69c28e44dae41322112471e1c80f840bde314d4",
            "patch":"MULTI",
            "chain_ord":"['3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'e69c28e44dae41322112471e1c80f840bde314d4', '23f4809e6c10a221e9d67f2e841536845387b42d']",
            "before_first_fix_commit":"{'eeb699ed8c2ce937f2b836692b36a98da7bb5622'}",
            "last_fix_commit":"23f4809e6c10a221e9d67f2e841536845387b42d",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/01\/2017, 17:41:02",
            "message":"[SECURITY-412] Fix handling of restart\/safeRestart URLs",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 8, 'total': 29}",
            "files":"{'core\/src\/main\/java\/jenkins\/model\/Jenkins.java': {'additions': 21, 'deletions': 8, 'changes': 29, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/e69c28e44dae41322112471e1c80f840bde314d4\/core%2Fsrc%2Fmain%2Fjava%2Fjenkins%2Fmodel%2FJenkins.java', 'patch': '@@ -3367,19 +3367,25 @@ public DirectoryBrowserSupport doUserContent() {\\n      *\\n      * This first replaces \"app\" to {@link HudsonIsRestarting}\\n      *\/\\n-    @CLIMethod(name=\"restart\")\\n-    @RequirePOST\\n     public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\")) {\\n             req.getView(this,\"_restart.jelly\").forward(req,rsp);\\n             return;\\n         }\\n \\n-        restart();\\n+        if (req != null && req.getMethod().equals(\"POST\")) {\\n+            restart();\\n+        }\\n \\n-        if (rsp != null) \/\/ null for CLI\\n-            rsp.sendRedirect2(\".\");\\n+        rsp.sendRedirect2(\".\");\\n+    }\\n+\\n+    @CLIMethod(name=\"restart\")\\n+    @Restricted(NoExternalUse.class)\\n+    public void cliRestart() throws RestartNotSupportedException {\\n+        checkPermission(ADMINISTER);\\n+        restart();\\n     }\\n \\n     \/**\\n@@ -3389,18 +3395,25 @@ public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\\n      *\\n      * @since 1.332\\n      *\/\\n-    @CLIMethod(name=\"safe-restart\")\\n-    @RequirePOST\\n     public HttpResponse doSafeRestart(StaplerRequest req) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\"))\\n             return HttpResponses.forwardToView(this,\"_safeRestart.jelly\");\\n \\n-        safeRestart();\\n+        if (req != null && req.getMethod().equals(\"POST\")) {\\n+            safeRestart();\\n+        }\\n \\n         return HttpResponses.redirectToDot();\\n     }\\n \\n+    @CLIMethod(name=\"safe-restart\")\\n+    @Restricted(NoExternalUse.class)\\n+    public void cliSafeRestart() throws RestartNotSupportedException {\\n+        checkPermission(ADMINISTER);\\n+        safeRestart();\\n+    }\\n+\\n     \/**\\n      * Performs a restart.\\n      *\/'}}",
            "message_norm":"[security-412] fix handling of restart\/saferestart urls",
            "language":"en",
            "entities":"[('security-412', 'SECWORD', ''), ('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/jenkins\/model\/Jenkins.java'])",
            "num_files":1.0
        },
        {
            "index":495,
            "vuln_id":"GHSA-4vf2-4xcg-65cx",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Conv2D` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n                               \ntf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)\n```                            \n                               \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/988087bd83f144af14087fe4fecee2d250d93737\/tensorflow\/core\/kernels\/conv_ops.cc#L261-L263) does a division by a quantity that is controlled by the caller:\n```cc\n  const int64 patch_depth = filter.dim_size(2);\n  if (in_depth % patch_depth != 0) { ... }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b12aa1d44352de21d1a6faaf04172d8c2508b42b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "commit_sha":"b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "patch":"SINGLE",
            "chain_ord":"['b12aa1d44352de21d1a6faaf04172d8c2508b42b']",
            "before_first_fix_commit":"{'988087bd83f144af14087fe4fecee2d250d93737'}",
            "last_fix_commit":"b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 01:32:56",
            "message":"Fix one more FPE.\n\nPiperOrigin-RevId: 369346568\nChange-Id: I840fd575962adc879713a4c9cc59e6da3331caa7",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/conv_ops.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b12aa1d44352de21d1a6faaf04172d8c2508b42b\/tensorflow%2Fcore%2Fkernels%2Fconv_ops.cc', 'patch': '@@ -260,6 +260,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\\n     const int64 out_depth = output->dim_size(3);\\n     const int64 patch_depth = filter.dim_size(2);\\n \\n+    if (patch_depth <= 0) {\\n+      ctx->SetStatus(errors::InvalidArgument(\\n+          \"filter depth must be stricly positive, got \", patch_depth));\\n+      return;\\n+    }\\n     if (in_depth % patch_depth != 0) {\\n       ctx->SetStatus(errors::InvalidArgument(\\n           \"input depth must be evenly divisible by filter depth: \", in_depth,\\n@@ -268,6 +273,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\\n     }\\n \\n     const int64 num_groups = in_depth \/ patch_depth;\\n+    if (num_groups <= 0) {\\n+      ctx->SetStatus(errors::InvalidArgument(\\n+          \"number of groups must be stricly positive, got \", num_groups));\\n+      return;\\n+    }\\n     if (out_depth % num_groups != 0 || out_depth < num_groups) {\\n       ctx->SetStatus(errors::InvalidArgument(\\n           \"output depth must be evenly divisible by number of groups: \",\\n@@ -536,6 +546,9 @@ Status ComputeConv2DDimension(const Conv2DParameters& params,\\n               errors::InvalidArgument(\"Patch depth too large\"));\\n   const int in_depth = static_cast<int>(in_depth_raw);\\n   const int patch_depth = static_cast<int>(patch_depth_raw);\\n+  TF_REQUIRES(patch_depth > 0,\\n+              errors::InvalidArgument(\\n+                  \"filter depth must be stricly positive, got \", patch_depth));\\n   TF_REQUIRES(in_depth % patch_depth == 0,\\n               errors::InvalidArgument(\\n                   \"input depth must be evenly divisible by filter depth: \",'}}",
            "message_norm":"fix one more fpe.\n\npiperorigin-revid: 369346568\nchange-id: i840fd575962adc879713a4c9cc59e6da3331caa7",
            "language":"it",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('369346568', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":411,
            "vuln_id":"GHSA-4f99-p9c2-3j8x",
            "cwe_id":"{'CWE-125', 'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae'}",
            "dataset":"osv",
            "summary":"Undefined behavior via `nullptr` reference binding in sparse matrix multiplication ### Impact\nThe [code for sparse matrix multiplication](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/sparse_matmul_op.cc#L954-L1086) is vulnerable to undefined behavior via binding a reference to `nullptr`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SparseMatMul(\n  a=[[1.0,1.0,1.0]],\n  b=[[],[],[]],\n  transpose_a=False,\n  transpose_b=False,\n  a_is_sparse=False, \n  b_is_sparse=True)\n```\n\nThis occurs whenever the dimensions of `a` or `b` are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, we should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access.\n\n### Patches\nWe have patched the issue in GitHub commit [e6cf28c72ba2eb949ca950d834dd6d66bb01cfae](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae",
            "commit_sha":"e6cf28c72ba2eb949ca950d834dd6d66bb01cfae",
            "patch":"SINGLE",
            "chain_ord":"['e6cf28c72ba2eb949ca950d834dd6d66bb01cfae']",
            "before_first_fix_commit":"{'d4fdd7830befb1f3aed8b4d1681471531856ae77'}",
            "last_fix_commit":"e6cf28c72ba2eb949ca950d834dd6d66bb01cfae",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/06\/2021, 04:54:15",
            "message":"Validate that matrix dimension sizes in SparseMatMul are positive.\n\nPiperOrigin-RevId: 401149683\nChange-Id: Ib33eafc561a39c8741ece80b2edce6d4aae9a57d",
            "author":"Penporn Koanantakool",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/sparse_matmul_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae\/tensorflow%2Fcore%2Fkernels%2Fsparse_matmul_op.cc', 'patch': '@@ -32,6 +32,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/kernels\/fill_functor.h\"\\n #include \"tensorflow\/core\/lib\/core\/blocking_counter.h\"\\n #include \"tensorflow\/core\/lib\/core\/threadpool.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/platform\/logging.h\"\\n #include \"tensorflow\/core\/platform\/macros.h\"\\n #include \"tensorflow\/core\/platform\/mutex.h\"\\n@@ -980,9 +981,18 @@ class SparseMatMulOp : public OpKernel {\\n                 errors::InvalidArgument(\\n                     \"Matrix size incompatible: a: \", a.shape().DebugString(),\\n                     \", b: \", b.shape().DebugString()));\\n+    OP_REQUIRES(ctx, m >= 0 && n >= 0 && k >= 0,\\n+                errors::InvalidArgument(\\n+                    \"Matrix dimensions cannot be negative: a: \",\\n+                    a.shape().DebugString(), \", b: \", b.shape().DebugString()));\\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({m, n}), &output));\\n \\n+    \/\/ Return early if at least one of the output dimension size is 0.\\n+    if (m == 0 || n == 0) {\\n+      return;\\n+    }\\n+\\n     if (k == 0) {\\n       \/\/ If the inner dimension k in the matrix multiplication is zero, we fill\\n       \/\/ the output with zeros.'}}",
            "message_norm":"validate that matrix dimension sizes in sparsematmul are positive.\n\npiperorigin-revid: 401149683\nchange-id: ib33eafc561a39c8741ece80b2edce6d4aae9a57d",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('401149683', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_matmul_op.cc'])",
            "num_files":1.0
        },
        {
            "index":91,
            "vuln_id":"GHSA-2gqg-2rg7-gh33",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b'}",
            "dataset":"osv",
            "summary":"Cross site scripting in librenms LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component \/Table\/GraylogController.php.",
            "published_date":"2022-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "commit_sha":"cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "patch":"SINGLE",
            "chain_ord":"['cc6112b8fb36039b862b42d86eb79ef7ee89d31b']",
            "before_first_fix_commit":"{'9c126572a2aebd43838aab9bf6abc09719ce983e'}",
            "last_fix_commit":"cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2022, 23:10:02",
            "message":"fix graylog xss (#13931)",
            "author":"Tony Murray",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'app\/Http\/Controllers\/Table\/GraylogController.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b\/app%2FHttp%2FControllers%2FTable%2FGraylogController.php', 'patch': '@@ -118,8 +118,8 @@ private function formatMessage($message)\\n         return [\\n             \\'severity\\'  => $this->severityLabel($level),\\n             \\'timestamp\\' => $displayTime,\\n-            \\'source\\'    => $device ? Url::deviceLink($device) : $message[\\'message\\'][\\'source\\'],\\n-            \\'message\\'   => $message[\\'message\\'][\\'message\\'] ?? \\'\\',\\n+            \\'source\\'    => $device ? Url::deviceLink($device) : htmlspecialchars($message[\\'message\\'][\\'source\\']),\\n+            \\'message\\'   => htmlspecialchars($message[\\'message\\'][\\'message\\'] ?? \\'\\'),\\n             \\'facility\\'  => is_numeric($facility) ? \"($facility) \" . __(\"syslog.facility.$facility\") : $facility,\\n             \\'level\\'     => (is_numeric($level) && $level >= 0) ? \"($level) \" . __(\"syslog.severity.$level\") : $level,\\n         ];'}}",
            "message_norm":"fix graylog xss (#13931)",
            "language":"no",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('#13931', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Table\/GraylogController.php'])",
            "num_files":1.0
        },
        {
            "index":873,
            "vuln_id":"GHSA-6p5r-g9mq-ggh2",
            "cwe_id":"{'CWE-824'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff8894044dfae5568ecbf2ed514c1a37dc394f1b'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in `MatrixSetDiagV*` ops ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixSetDiagV*`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixSetDiagV3(\n  input=[1,2,3],\n  diagonal=[1,1],\n  k=[],\n  align='RIGHT_LEFT')\n```\n  \nThe  [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong: \n\n```cc \n  auto& diag_index = context->input(1);\n  ...\n  lower_diag_index = diag_index.flat<int32>()(0);\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [ff8894044dfae5568ecbf2ed514c1a37dc394f1b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff8894044dfae5568ecbf2ed514c1a37dc394f1b).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff8894044dfae5568ecbf2ed514c1a37dc394f1b",
            "commit_sha":"ff8894044dfae5568ecbf2ed514c1a37dc394f1b",
            "patch":"SINGLE",
            "chain_ord":"['ff8894044dfae5568ecbf2ed514c1a37dc394f1b']",
            "before_first_fix_commit":"{'59077ac39cc64139f889863081bdb3d0f88d39b6'}",
            "last_fix_commit":"ff8894044dfae5568ecbf2ed514c1a37dc394f1b",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 01:58:29",
            "message":"Add one missing valdiation to `matrix_set_diag_op.cc`\n\nPiperOrigin-RevId: 387923408\nChange-Id: If6a97b9098c13879400f56c22f91555cdf0ce5d7",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/linalg\/matrix_set_diag_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ff8894044dfae5568ecbf2ed514c1a37dc394f1b\/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_set_diag_op.cc', 'patch': '@@ -70,6 +70,9 @@ class MatrixSetDiagOp : public OpKernel {\\n                   errors::InvalidArgument(\\n                       \"diag_index must be a scalar or vector, received shape: \",\\n                       diag_index.shape().DebugString()));\\n+      OP_REQUIRES(\\n+          context, diag_index.NumElements() > 0,\\n+          errors::InvalidArgument(\"diag_index must have at least one element\"));\\n       lower_diag_index = diag_index.flat<int32>()(0);\\n       upper_diag_index = lower_diag_index;\\n       if (TensorShapeUtils::IsVector(diag_index.shape())) {'}}",
            "message_norm":"add one missing valdiation to `matrix_set_diag_op.cc`\n\npiperorigin-revid: 387923408\nchange-id: if6a97b9098c13879400f56c22f91555cdf0ce5d7",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('387923408', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/linalg\/matrix_set_diag_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1591,
            "vuln_id":"GHSA-cqp5-m4pq-gfgp",
            "cwe_id":"{'CWE-471'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/defaults-deep\/commit\/c873f341327ad885ff4d0f23b3d3bca31b0343e5'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in defaults-deep Versions of `default-deep` before 0.2.4 are vulnerable to prototype pollution\n\n\n## Recommendation\n\nUpdate to version 0.2.4 or later.",
            "published_date":"2018-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/defaults-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/defaults-deep\/commit\/c873f341327ad885ff4d0f23b3d3bca31b0343e5",
            "commit_sha":"c873f341327ad885ff4d0f23b3d3bca31b0343e5",
            "patch":"SINGLE",
            "chain_ord":"['c873f341327ad885ff4d0f23b3d3bca31b0343e5']",
            "before_first_fix_commit":"{'aef804bf3e56484a6e463e35f5f74599523aee69'}",
            "last_fix_commit":"c873f341327ad885ff4d0f23b3d3bca31b0343e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2018, 16:52:35",
            "message":"exclude __proto__",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'index.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/defaults-deep\/raw\/c873f341327ad885ff4d0f23b3d3bca31b0343e5\/index.js', 'patch': \"@@ -16,6 +16,10 @@ function defaultsDeep(target, objects) {\\n \\n   function copy(target, current) {\\n     lazy.forOwn(current, function (value, key) {\\n+      if (key === '__proto__') {\\n+        return;\\n+      }\\n+\\n       var val = target[key];\\n       \/\/ add the missing property, or allow a null property to be updated\\n       if (val == null) {\"}}",
            "message_norm":"exclude __proto__",
            "language":"pt",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2323,
            "vuln_id":"GHSA-jxwx-85vp-gvwm",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jquery-validation\/jquery-validation\/commit\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in jquery-validation The GitHub Security Lab team has identified potential security vulnerabilities in jquery.validation.\n\nThe project contains one or more regular expressions that are vulnerable to ReDoS (Regular Expression Denial of Service)\n\nThis issue was discovered and reported by GitHub team member @erik-krogh (Erik Krogh Kristensen).",
            "published_date":"2021-01-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/jquery-validation\/jquery-validation",
            "commit_href":"https:\/\/github.com\/jquery-validation\/jquery-validation\/commit\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "commit_sha":"5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "patch":"SINGLE",
            "chain_ord":"['5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d']",
            "before_first_fix_commit":"{'b8d6646ec67c73372dddfbc9aadff45571a96136'}",
            "last_fix_commit":"5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/09\/2021, 15:28:00",
            "message":"Core: fixed Regular Expression Denial of Service vulnerability (#2371)\n\nReDoS, or Regular Expression Denial of Service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nGHSL-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
            "author":"Markus Staab",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/core.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jquery-validation\/jquery-validation\/raw\/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d\/src%2Fcore.js', 'patch': '@@ -1412,7 +1412,7 @@ $.extend( $.validator, {\\n \\t\\t\\t\/\/ https:\/\/gist.github.com\/dperini\/729294\\n \\t\\t\\t\/\/ see also https:\/\/mathiasbynens.be\/demo\/url-regex\\n \\t\\t\\t\/\/ modified to allow protocol-relative URLs\\n-\\t\\t\\treturn this.optional( element ) || \/^(?:(?:(?:https?|ftp):)?\\\\\/\\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})).?)(?::\\\\d{2,5})?(?:[\/?#]\\\\S*)?$\/i.test( value );\\n+\\t\\t\\treturn this.optional( element ) || \/^(?:(?:(?:https?|ftp):)?\\\\\/\\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?))(?::\\\\d{2,5})?(?:[\/?#]\\\\S*)?$\/i.test( value );\\n \\t\\t},\\n \\n \\t\\t\/\/ https:\/\/jqueryvalidation.org\/date-method\/'}}",
            "message_norm":"core: fixed regular expression denial of service vulnerability (#2371)\n\nredos, or regular expression denial of service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nghsl-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#2371', 'ISSUE', ''), ('redos', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/core.js'])",
            "num_files":1.0
        },
        {
            "index":1048,
            "vuln_id":"GHSA-7ph6-5cmq-xgjq",
            "cwe_id":"{'CWE-22'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/ab778254fb8f71c774e1c1239368c44fe3b6bba5'}",
            "dataset":"osv",
            "summary":"Path traversal in xwiki-platform-skin-skinx XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. AbstractSxExportURLFactoryActionHandler#processSx does not escape anything from SSX document reference when serializing it on filesystem, so it's easy to mess up the HTML export process with reference elements containing filesystem syntax like \"..\/\", \".\/\". or \"\/\" in general (the last two not causing any security threat, but can cause conflicts with others serialized files). Patch can be found in 13.6-rc-1. Giving script or subwiki admin right only to trusted people and disabling HTML\/PDF export can be done as workaround.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/xwiki\/xwiki-platform",
            "commit_href":"https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/ab778254fb8f71c774e1c1239368c44fe3b6bba5",
            "commit_sha":"ab778254fb8f71c774e1c1239368c44fe3b6bba5",
            "patch":"SINGLE",
            "chain_ord":"['ab778254fb8f71c774e1c1239368c44fe3b6bba5']",
            "before_first_fix_commit":"{'9e4d40d03960b20233f6887bc142fe4474f620c4'}",
            "last_fix_commit":"ab778254fb8f71c774e1c1239368c44fe3b6bba5",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/07\/2021, 14:02:50",
            "message":"XWIKI-18819: It's possible to save pretty much anything anywhere by creating and using an SSX\/JSX containing \"..\/\" in its reference",
            "author":"Thomas Mortagne",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 11, 'total': 18}",
            "files":"{'xwiki-platform-core\/xwiki-platform-skin\/xwiki-platform-skin-skinx\/src\/main\/java\/org\/xwiki\/skinx\/internal\/AbstractSxExportURLFactoryActionHandler.java': {'additions': 7, 'deletions': 11, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/xwiki\/xwiki-platform\/raw\/ab778254fb8f71c774e1c1239368c44fe3b6bba5\/xwiki-platform-core%2Fxwiki-platform-skin%2Fxwiki-platform-skin-skinx%2Fsrc%2Fmain%2Fjava%2Forg%2Fxwiki%2Fskinx%2Finternal%2FAbstractSxExportURLFactoryActionHandler.java', 'patch': '@@ -100,13 +100,13 @@ public URL createURL(String spaces, String name, String queryString, String anch\\n         XWikiDocument.backupContext(backup, context);\\n         try {\\n             sxDocument.setAsContextDoc(context);\\n-            return processSx(spaceNames, name, queryString, context, exportContext);\\n+            return processSx(sxDocument.getId(), queryString, context, exportContext);\\n         } finally {\\n             XWikiDocument.restoreContext(backup, context);\\n         }\\n     }\\n \\n-    private URL processSx(List<String> spaceNames, String name, String queryString, XWikiContext context,\\n+    private URL processSx(long id, String queryString, XWikiContext context,\\n         FilesystemExportContext exportContext) throws Exception\\n     {\\n         SxSource sxSource = null;\\n@@ -128,7 +128,7 @@ private URL processSx(List<String> spaceNames, String name, String queryString,\\n \\n         \/\/ Write the content to file\\n         \/\/ We need a unique name for that SSX content\\n-        String targetPath = String.format(\"%s\/%s\/%s\", getSxPrefix(), StringUtils.join(spaceNames, \\'\/\\'), name);\\n+        String targetPath = String.format(\"%s\/%s\", getSxPrefix(), id);\\n         File targetDirectory = new File(exportContext.getExportDir(), targetPath);\\n         if (!targetDirectory.exists()) {\\n             targetDirectory.mkdirs();\\n@@ -146,11 +146,7 @@ private URL processSx(List<String> spaceNames, String name, String queryString,\\n \\n         path.append(getSxPrefix());\\n         path.append(URL_PATH_SEPARATOR);\\n-        for (String spaceName : spaceNames) {\\n-            path.append(encodeURLPart(spaceName));\\n-            path.append(URL_PATH_SEPARATOR);\\n-        }\\n-        path.append(encodeURLPart(name));\\n+        path.append(id);\\n         path.append(URL_PATH_SEPARATOR);\\n         path.append(encodeURLPart(targetLocation.getName()));\\n \\n@@ -161,14 +157,14 @@ protected String getContent(SxSource sxSource, FilesystemExportContext exportCon\\n     {\\n         String content;\\n \\n-        \/\/ We know we\\'re inside a SX file located at \"<S|J>sx\/<Space>\/<Page>\/<s|j>sx<NNN>.<css|js>\". Inside this CSS\\n+        \/\/ We know we\\'re inside a SX file located at \"<S|J>sx\/<id>\/<s|j>sx<NNN>.<css|js>\". Inside this CSS\\n         \/\/ there can be URLs and we need to ensure that the prefix for these URLs lead to the root of the path, i.e.\\n-        \/\/ 3 levels up (\"..\/..\/..\/\").\\n+        \/\/ 3 levels up (\"..\/..\/\").\\n         \/\/ To make this happen we reuse the Doc Parent Level from FileSystemExportContext to a fixed value of 3.\\n         \/\/ We also make sure to put back the original value\\n         int originalDocParentLevel = exportContext.getDocParentLevel();\\n         try {\\n-            exportContext.setDocParentLevels(3);\\n+            exportContext.setDocParentLevels(2);\\n             content = sxSource.getContent();\\n         } finally {\\n             exportContext.setDocParentLevels(originalDocParentLevel);'}}",
            "message_norm":"xwiki-18819: it's possible to save pretty much anything anywhere by creating and using an ssx\/jsx containing \"..\/\" in its reference",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['xwiki-platform-core\/xwiki-platform-skin\/xwiki-platform-skin-skinx\/src\/main\/java\/org\/xwiki\/skinx\/internal\/AbstractSxExportURLFactoryActionHandler.java'])",
            "num_files":1.0
        },
        {
            "index":1934,
            "vuln_id":"GHSA-gv26-jpj9-c8gq",
            "cwe_id":"{'CWE-754'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseSparseMinimum` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python \nimport tensorflow as tf\n\na_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    b_shape=b_shape)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches \nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2022-03-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "commit_sha":"f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "patch":"MULTI",
            "chain_ord":"['ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'f6fde895ef9c77d848061c0517f19d0ec2682f3a']",
            "before_first_fix_commit":"{'cae81a7ae3ca6207396d5c893e8163f4acb34037'}",
            "last_fix_commit":"f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/12\/2021, 01:32:03",
            "message":"Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373274848\nChange-Id: I3a665ac3a29dee9fb69bdf408a939330cb93ea75",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f6fde895ef9c77d848061c0517f19d0ec2682f3a\/tensorflow%2Fcore%2Fkernels%2Fsparse_sparse_binary_op_shared.cc', 'patch': '@@ -150,6 +150,7 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n \\n     const int64 a_nnz = a_indices_t->dim_size(0);\\n     const int64 b_nnz = b_indices_t->dim_size(0);\\n+\\n     const auto a_values = a_values_t->vec<T>();\\n     const auto b_values = b_values_t->vec<T>();\\n \\n@@ -166,6 +167,14 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n                     \"Input shapes should be a vector but received shapes \",\\n                     a_shape_t->shape().DebugString(), \" and \",\\n                     b_shape_t->shape().DebugString()));\\n+    const int num_dims = a_indices_t->dim_size(1);\\n+    OP_REQUIRES(\\n+        ctx, a_shape_t->NumElements() == num_dims,\\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\\n+                                \"a_shape must match, got \",\\n+                                num_dims, \" and \", a_shape_t->NumElements()));\\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Tensors must not be empty\"));\\n     OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),\\n                 errors::InvalidArgument(\\n                     \"Operands do not have the same ranks; got shapes: \",\\n@@ -180,12 +189,6 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n                                           \" for dimension \", i));\\n     }\\n \\n-    OP_REQUIRES(\\n-        ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),\\n-        errors::InvalidArgument(\\n-            \"Indices\\' dimensions do not match: got \", a_indices_t->dim_size(1),\\n-            \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));\\n-    const int num_dims = a_indices_t->dim_size(1);\\n     const auto a_indices_mat = a_indices_t->matrix<int64>();\\n     const auto b_indices_mat = b_indices_t->matrix<int64>();\\n     std::vector<T> a_augmented_values, b_augmented_values;'}}",
            "message_norm":"validate that a and b are proper sparse tensors\n\npiperorigin-revid: 373274848\nchange-id: i3a665ac3a29dee9fb69bdf408a939330cb93ea75",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('373274848', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":2288,
            "vuln_id":"GHSA-jpj5-hg26-6jgc",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/Xhofe\/alist\/commit\/6af17e2509a400979420f613fd7f2f9721fdcd6e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Alist Alist versions 2.0.10 through 2.1.0 were discovered to contain a cross-site scripting (XSS) vulnerability via \/i\/:data\/ipa.plist. This issue was fixed in version 2.1.1.",
            "published_date":"2022-03-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/Xhofe\/alist",
            "commit_href":"https:\/\/github.com\/Xhofe\/alist\/commit\/6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "commit_sha":"6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "patch":"SINGLE",
            "chain_ord":"['6af17e2509a400979420f613fd7f2f9721fdcd6e']",
            "before_first_fix_commit":"{'5193b2aa7df73231ebf68e90b3295f2a5c0916a2'}",
            "last_fix_commit":"6af17e2509a400979420f613fd7f2f9721fdcd6e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/01\/2022, 12:09:25",
            "message":":lock: fix #645 xss vulnerability",
            "author":"Xhofe",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'server\/controllers\/other.go': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alist-org\/alist\/raw\/6af17e2509a400979420f613fd7f2f9721fdcd6e\/server%2Fcontrollers%2Fother.go', 'patch': '@@ -7,6 +7,7 @@ import (\\n \\t\"github.com\/Xhofe\/alist\/server\/common\"\\n \\t\"github.com\/Xhofe\/alist\/utils\"\\n \\t\"github.com\/gin-gonic\/gin\"\\n+\\t\"net\/url\"\\n \\t\"strings\"\\n )\\n \\n@@ -24,11 +25,19 @@ func Plist(c *gin.Context) {\\n \\t\\treturn\\n \\t}\\n \\tu := string(bytes)\\n+\\tuUrl, err := url.Parse(u)\\n+\\tif err != nil {\\n+\\t\\tcommon.ErrorResp(c, err, 500)\\n+\\t\\treturn\\n+\\t}\\n \\tname := utils.Base(u)\\n+\\tu = uUrl.String()\\n \\tipaIndex := strings.Index(name, \".ipa\")\\n \\tif ipaIndex != -1 {\\n \\t\\tname = name[:ipaIndex]\\n \\t}\\n+\\tname = strings.ReplaceAll(name, \"<\", \"[\")\\n+\\tname = strings.ReplaceAll(name, \">\", \"]\")\\n \\tplist := fmt.Sprintf(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\\n <plist version=\"1.0\">\\n     <dict>'}}",
            "message_norm":":lock: fix #645 xss vulnerability",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#645', 'ISSUE', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/controllers\/other.go'])",
            "num_files":1.0
        },
        {
            "index":301,
            "vuln_id":"GHSA-3q6g-vf58-7m4g",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/python-restx\/flask-restx\/commit\/bab31e085f355dd73858fd3715f7ed71849656da'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in flask-restx Flask RESTX contains a regular expression that is vulnerable to [ReDoS](https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS) (Regular Expression Denial of Service) in `email_regex`.",
            "published_date":"2021-09-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/python-restx\/flask-restx",
            "commit_href":"https:\/\/github.com\/python-restx\/flask-restx\/commit\/bab31e085f355dd73858fd3715f7ed71849656da",
            "commit_sha":"bab31e085f355dd73858fd3715f7ed71849656da",
            "patch":"SINGLE",
            "chain_ord":"['bab31e085f355dd73858fd3715f7ed71849656da']",
            "before_first_fix_commit":"{'e1ab7e34a47fa8c2fd025402b9c65afbe24d5e98'}",
            "last_fix_commit":"bab31e085f355dd73858fd3715f7ed71849656da",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/01\/2021, 19:53:02",
            "message":"optimize email regex (credits: @kevinbackhouse, fix: #372)",
            "author":"ziirish",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'flask_restx\/inputs.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/python-restx\/flask-restx\/raw\/bab31e085f355dd73858fd3715f7ed71849656da\/flask_restx%2Finputs.py', 'patch': '@@ -48,7 +48,7 @@ def my_type(value):\\n \\n \\n email_regex = re.compile(\\n-    r\"^\" \"(?P<local>[^@]*[^@.])\" r\"@\" r\"(?P<server>[^@]+(?:\\\\.[^@]+)*)\" r\"$\",\\n+    r\"^\" \"(?P<local>[^@]*[^@.])\" r\"@\" r\"(?P<server>[^@\\\\.]+(?:\\\\.[^@\\\\.]+)*)\" r\"$\",\\n     re.IGNORECASE,\\n )'}}",
            "message_norm":"optimize email regex (credits: @kevinbackhouse, fix: #372)",
            "language":"en",
            "entities":"[('optimize', 'ACTION', ''), ('#372', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['flask_restx\/inputs.py'])",
            "num_files":1.0
        },
        {
            "index":2316,
            "vuln_id":"GHSA-jx5q-g37m-h5hj",
            "cwe_id":"{'CWE-74', 'CWE-1321'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/oroinc\/platform\/commit\/62c26936b3adee9c20255dcd9f8ee5c299b464a9'}",
            "dataset":"osv",
            "summary":"Client-Side JavaScript Prototype Pollution in oro\/platform ### Summary\n\nBy sending a specially crafted request, an attacker could inject properties into existing JavaScript language construct prototypes, such as objects. Later this injection may lead to JS code execution by libraries that are vulnerable to Prototype Pollution.\n\n### Workarounds\n\nConfigure WAF to drop requests containing next strings: `__proto__` , `constructor[prototype]`, `constructor.prototype`",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/oroinc\/platform",
            "commit_href":"https:\/\/github.com\/oroinc\/platform\/commit\/62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "commit_sha":"62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "patch":"SINGLE",
            "chain_ord":"['62c26936b3adee9c20255dcd9f8ee5c299b464a9']",
            "before_first_fix_commit":"{'d9929d4085f4e38d05c4e4b02c7d4c15de84f88c'}",
            "last_fix_commit":"62c26936b3adee9c20255dcd9f8ee5c299b464a9",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/24\/2021, 15:40:19",
            "message":"BAP-21092: JavaScript Prototype Pollution (#31464)",
            "author":"Hryhorii Hrebiniuk",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'src\/Oro\/Bundle\/UIBundle\/Resources\/public\/js\/tools.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/oroinc\/platform\/raw\/62c26936b3adee9c20255dcd9f8ee5c299b464a9\/src%2FOro%2FBundle%2FUIBundle%2FResources%2Fpublic%2Fjs%2Ftools.js', 'patch': \"@@ -85,6 +85,10 @@ define(function(require) {\\n                 query = query.slice(1);\\n             }\\n             const setValue = function(root, path, value) {\\n+                if (path[0] === '__proto__') {\\n+                    \/\/ Prevent Object.prototype pollution\\n+                    return;\\n+                }\\n                 if (path.length > 1) {\\n                     const dir = path.shift();\\n                     if (typeof root[dir] === 'undefined') {\"}}",
            "message_norm":"bap-21092: javascript prototype pollution (#31464)",
            "language":"fr",
            "entities":"[('prototype pollution', 'SECWORD', ''), ('#31464', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Oro\/Bundle\/UIBundle\/Resources\/public\/js\/tools.js'])",
            "num_files":1.0
        },
        {
            "index":2082,
            "vuln_id":"GHSA-hj8g-cw8x-2c6m",
            "cwe_id":"{'CWE-79'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/a5925f74d39775771d4c37c8d4c1acbb762fda0a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Microweber Microweber prior to version 1.3 is vulnerable to reflected cross-site scripting.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "commit_sha":"a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "patch":"SINGLE",
            "chain_ord":"['a5925f74d39775771d4c37c8d4c1acbb762fda0a']",
            "before_first_fix_commit":"{'0b6b1eb5ba85ffc8f74e6f5f5be9dc9f9f7e9d8f'}",
            "last_fix_commit":"a5925f74d39775771d4c37c8d4c1acbb762fda0a",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 10:18:26",
            "message":"Update UrlManager.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/MicroweberPackages\/Helper\/UrlManager.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/a5925f74d39775771d4c37c8d4c1acbb762fda0a\/src%2FMicroweberPackages%2FHelper%2FUrlManager.php', 'patch': '@@ -276,7 +276,8 @@ public function string($skip_ajax = false)\\n \\n         \/\/ clear request params\\n         $cleanParam = new HTMLClean();\\n-        $u1 = $cleanParam->cleanArray($u1);\\n+        $u1 = $cleanParam->clean($u1);\\n+\\n \\n         return $u1;\\n     }'}}",
            "message_norm":"update urlmanager.php",
            "language":"sv",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SUBMIT_CENTERED",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Helper\/UrlManager.php'])",
            "num_files":1.0
        },
        {
            "index":2844,
            "vuln_id":"GHSA-r33q-22hv-j29q",
            "cwe_id":"{'CWE-400'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/ethereum\/go-ethereum\/commit\/bddd103a9f0af27ef533f04e06ea429cf76b6d46'}",
            "dataset":"osv",
            "summary":"Denial of service in github.com\/ethereum\/go-ethereum ### Impact\n\nA DoS vulnerability can make a LES server crash via malicious `GetProofsV2` request from a connected LES client.\n\n### Patches\n\nThe vulnerability was patched in https:\/\/github.com\/ethereum\/go-ethereum\/pull\/21896. \n\n### Workarounds\n\nThis vulnerability only concerns users explicitly enabling `les` server; disabling `les` prevents the exploit. \nIt can also be patched by manually applying the patch in https:\/\/github.com\/ethereum\/go-ethereum\/pull\/21896. \n\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [go-ethereum](https:\/\/github.com\/ethereum\/go-ethereum)\n* Email us at [security@ethereum.org](mailto:security@ethereum.org)",
            "published_date":"2021-06-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/ethereum\/go-ethereum",
            "commit_href":"https:\/\/github.com\/ethereum\/go-ethereum\/commit\/bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "commit_sha":"bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "patch":"SINGLE",
            "chain_ord":"['bddd103a9f0af27ef533f04e06ea429cf76b6d46']",
            "before_first_fix_commit":"{'6b5840961407960a06ed20cb5dd1b782080653ff'}",
            "last_fix_commit":"bddd103a9f0af27ef533f04e06ea429cf76b6d46",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2020, 09:55:17",
            "message":"les: fix GetProofsV2 bug (#21896)",
            "author":"Felf\u00f6ldi Zsolt",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 4, 'total': 6}",
            "files":"{'les\/server_handler.go': {'additions': 2, 'deletions': 4, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ethereum\/go-ethereum\/raw\/bddd103a9f0af27ef533f04e06ea429cf76b6d46\/les%2Fserver_handler.go', 'patch': '@@ -610,6 +610,7 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\tvar (\\n \\t\\t\\tlastBHash common.Hash\\n \\t\\t\\troot      common.Hash\\n+\\t\\t\\theader    *types.Header\\n \\t\\t)\\n \\t\\treqCnt := len(req.Reqs)\\n \\t\\tif accept(req.ReqID, uint64(reqCnt), MaxProofsFetch) {\\n@@ -624,10 +625,6 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\t\\t\\t\\t\\treturn\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\t\\t\/\/ Look up the root hash belonging to the request\\n-\\t\\t\\t\\t\\tvar (\\n-\\t\\t\\t\\t\\t\\theader *types.Header\\n-\\t\\t\\t\\t\\t\\ttrie   state.Trie\\n-\\t\\t\\t\\t\\t)\\n \\t\\t\\t\\t\\tif request.BHash != lastBHash {\\n \\t\\t\\t\\t\\t\\troot, lastBHash = common.Hash{}, request.BHash\\n \\n@@ -654,6 +651,7 @@ func (h *serverHandler) handleMsg(p *clientPeer, wg *sync.WaitGroup) error {\\n \\t\\t\\t\\t\\t\/\/ Open the account or storage trie for the request\\n \\t\\t\\t\\t\\tstatedb := h.blockchain.StateCache()\\n \\n+\\t\\t\\t\\t\\tvar trie state.Trie\\n \\t\\t\\t\\t\\tswitch len(request.AccKey) {\\n \\t\\t\\t\\t\\tcase 0:\\n \\t\\t\\t\\t\\t\\t\/\/ No account key specified, open an account trie'}}",
            "message_norm":"les: fix getproofsv2 bug (#21896)",
            "language":"af",
            "entities":"[('bug', 'FLAW', ''), ('#21896', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['les\/server_handler.go'])",
            "num_files":1.0
        },
        {
            "index":2171,
            "vuln_id":"GHSA-j259-6c58-9m58",
            "cwe_id":"{'CWE-20'}",
            "score":9.3,
            "chain":"{'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5'}",
            "dataset":"osv",
            "summary":"loopback-connector-postgresql Vulnerable to Improper Sanitization of `contains` Filter Improper input validation on the `contains` LoopBack filter may allow for arbitrary SQL injection.\n\n### Impact\n\nWhen the extended filter property `contains` is permitted to be interpreted by the Postgres connector, it is possible to inject arbitrary SQL which may affect the confidentiality and integrity of data stored on the connected database.\n\nThis affects users who does any of the following:\n\n- Connect to the database via the DataSource with `allowExtendedProperties: true` setting OR\n- Uses the connector's CRUD methods directly OR\n- Uses the connector's other methods to interpret the LoopBack filter.\n\n### Patches\n\nPatch release `loopback-connector-postgresql@5.5.1` has been published of which resolves this issue.\n\n### Workarounds\n\nUsers who are unable to upgrade should do the following if applicable:\n\n- Remove `allowExtendedProperties: true` DataSource setting\n- Add `allowExtendedProperties: false` DataSource setting\n- When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand.",
            "published_date":"2022-08-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql",
            "commit_href":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5",
            "commit_sha":"d57406c6737692a3a106b58a35406290cddb23e5",
            "patch":"SINGLE",
            "chain_ord":"['d57406c6737692a3a106b58a35406290cddb23e5']",
            "before_first_fix_commit":"{'1a863f3df332f1732e8fec519f1d686561313a3e'}",
            "last_fix_commit":"d57406c6737692a3a106b58a35406290cddb23e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/04\/2022, 11:27:20",
            "message":"fix: improve filter sanitisation\n\nAdd sanitisation of user-input for `contains` LoopBack filter which may allow for arbitrary SQL injection.\n\nSigned-off-by: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>",
            "author":"Rifa Achrinza",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'lib\/postgresql.js': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/raw\/d57406c6737692a3a106b58a35406290cddb23e5\/lib%2Fpostgresql.js', 'patch': \"@@ -545,10 +545,11 @@ PostgreSQL.prototype.buildExpression = function(columnName, operator,\\n       return new ParameterizedSQL(columnName + regexOperator,\\n         [operatorValue.source]);\\n     case 'contains':\\n-      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map((v) => `'${v}'`) + ']::'\\n-        + propertyDefinition.postgresql.dataType);\\n+      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map(() => '?') + ']::'\\n+        + propertyDefinition.postgresql.dataType,\\n+        operatorValue);\\n     case 'match':\\n-      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery('${operatorValue}')`);\\n+      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery(?)`, [operatorValue]);\\n     default:\\n       \/\/ invoke the base implementation of `buildExpression`\\n       return this.invokeSuper('buildExpression', columnName, operator,\"}}",
            "message_norm":"fix: improve filter sanitisation\n\nadd sanitisation of user-input for `contains` loopback filter which may allow for arbitrary sql injection.\n\nsigned-off-by: rifa achrinza <25147899+achrinza@users.noreply.github.com>",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('add', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('sql injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/postgresql.js'])",
            "num_files":1.0
        },
        {
            "index":2805,
            "vuln_id":"GHSA-qqxp-xp9v-vvx6",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jquery\/jquery-ui\/commit\/f2854408cce7e4b7fc6bf8676761904af9c96bde', 'https:\/\/github.com\/jquery\/jquery-ui\/commit\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects jquery-ui Cross-site scripting (XSS) vulnerability in the default content option in jquery.ui.tooltip.js in the Tooltip widget in jQuery UI before 1.10.0 allows remote attackers to inject arbitrary web script or HTML via the title attribute, which is not properly handled in the autocomplete combo box demo.",
            "published_date":"2017-10-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/jquery\/jquery-ui",
            "commit_href":"https:\/\/github.com\/jquery\/jquery-ui\/commit\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e",
            "commit_sha":"5fee6fd5000072ff32f2d65b6451f39af9e0e39e",
            "patch":"MULTI",
            "chain_ord":"['5fee6fd5000072ff32f2d65b6451f39af9e0e39e', 'f2854408cce7e4b7fc6bf8676761904af9c96bde']",
            "before_first_fix_commit":"{'5fee6fd5000072ff32f2d65b6451f39af9e0e39e'}",
            "last_fix_commit":"f2854408cce7e4b7fc6bf8676761904af9c96bde",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/27\/2012, 15:52:19",
            "message":"Autocomplete demo: Combobox: Encode search term inside tooltips. Fixes #8859 - Autocomplete: XSS in combobox demo.",
            "author":"Scott Gonz\u00e1lez",
            "comments":"{'com_1': {'author': 'jzaefferer', 'datetime': '11\/27\/2012, 16:05:23', 'body': \"Doesn't this just hide the underlying tooltip vulnerability? If so, tooltip would have to use `.text()` instead of `.html()`, and make it sane to override that.\"}, 'com_2': {'author': 'scottgonzalez', 'datetime': '11\/27\/2012, 16:13:04', 'body': \"hmm...yeah, tooltip should handle this in the default `content` option. Good catch, I'll fix that.\"}, 'com_3': {'author': 'scottgonzalez', 'datetime': '11\/27\/2012, 16:22:17', 'body': 'Fixed in f2854408cce7e4b7fc6bf8676761904af9c96bde.'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'demos\/autocomplete\/combobox.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jquery\/jquery-ui\/raw\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e\/demos%2Fautocomplete%2Fcombobox.html', 'patch': '@@ -61,7 +61,7 @@\\n \\t\\t\\t\\t\\t\\t\/\/ remove invalid value, as it didn\\'t match anything\\n \\t\\t\\t\\t\\t\\t$( element )\\n \\t\\t\\t\\t\\t\\t\\t.val( \"\" )\\n-\\t\\t\\t\\t\\t\\t\\t.attr( \"title\", value + \" didn\\'t match any item\" )\\n+\\t\\t\\t\\t\\t\\t\\t.attr( \"title\", $( \"<a>\" ).text( value ).html() + \" didn\\'t match any item\" )\\n \\t\\t\\t\\t\\t\\t\\t.tooltip( \"open\" );\\n \\t\\t\\t\\t\\t\\tselect.val( \"\" );\\n \\t\\t\\t\\t\\t\\tsetTimeout(function() {'}}",
            "message_norm":"autocomplete demo: combobox: encode search term inside tooltips. fixes #8859 - autocomplete: xss in combobox demo.",
            "language":"pt",
            "entities":"[('encode', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#8859', 'ISSUE', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['demos\/autocomplete\/combobox.html'])",
            "num_files":1.0
        },
        {
            "index":3267,
            "vuln_id":"GHSA-wf5p-c75w-w3wh",
            "cwe_id":"{'CWE-476'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6b57f461b39fd1aa8c1b870f1b974aac3554955'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TFLite MLIR optimizations ### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\nThis is caused by the MLIR optimization of `L2NormalizeReduceAxis` operator. The [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/compiler\/mlir\/lite\/transforms\/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:\n\n```cc\nbool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast<ShapedType>().getRank() - 1 ==\n          *axis.getValues<int>().begin() ||\n      *axis.getValues<int>().begin() == -1) {\n      \/\/ ...\n  }\n  \/\/ ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d6b57f461b39fd1aa8c1b870f1b974aac3554955](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6b57f461b39fd1aa8c1b870f1b974aac3554955).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n          \n### Attribution              \nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6b57f461b39fd1aa8c1b870f1b974aac3554955",
            "commit_sha":"d6b57f461b39fd1aa8c1b870f1b974aac3554955",
            "patch":"SINGLE",
            "chain_ord":"['d6b57f461b39fd1aa8c1b870f1b974aac3554955']",
            "before_first_fix_commit":"{'c26b15e7565e4f50ad6ea25b09127a019ad77c14'}",
            "last_fix_commit":"d6b57f461b39fd1aa8c1b870f1b974aac3554955",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 23:20:45",
            "message":"Prevent nullptr dereference in MLIR TFLite dialect\/optimizer.\n\nPiperOrigin-RevId: 387220762\nChange-Id: Id136ef04bb3d36123b4685d316ae81a9ec924d6b",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/compiler\/mlir\/lite\/transforms\/optimize.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d6b57f461b39fd1aa8c1b870f1b974aac3554955\/tensorflow%2Fcompiler%2Fmlir%2Flite%2Ftransforms%2Foptimize.cc', 'patch': '@@ -68,6 +68,9 @@ constexpr char kRelu6[] = \"RELU6\";\\n constexpr char kRelu1[] = \"RELU_N1_TO_1\";\\n \\n bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\\n+  if (axis.getNumElements() == 0) {\\n+    return false;\\n+  }\\n   if (sq_op.getType().cast<ShapedType>().getRank() - 1 ==\\n           *axis.getValues<int>().begin() ||\\n       *axis.getValues<int>().begin() == -1) {'}}",
            "message_norm":"prevent nullptr dereference in mlir tflite dialect\/optimizer.\n\npiperorigin-revid: 387220762\nchange-id: id136ef04bb3d36123b4685d316ae81a9ec924d6b",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('387220762', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/compiler\/mlir\/lite\/transforms\/optimize.cc'])",
            "num_files":1.0
        },
        {
            "index":950,
            "vuln_id":"GHSA-7488-6x3r-23w5",
            "cwe_id":"{'CWE-22'}",
            "score":9.3,
            "chain":"{'https:\/\/github.com\/ganga-devs\/ganga\/commit\/730e7aba192407d35eb37dd7938d49071124be8c'}",
            "dataset":"osv",
            "summary":"ganga before 8.5.10 allows absolute path traversal because the Flask send_file function is used unsafely The ganga-devs\/ganga repository before 8.5.10 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.",
            "published_date":"2022-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/ganga-devs\/ganga",
            "commit_href":"https:\/\/github.com\/ganga-devs\/ganga\/commit\/730e7aba192407d35eb37dd7938d49071124be8c",
            "commit_sha":"730e7aba192407d35eb37dd7938d49071124be8c",
            "patch":"SINGLE",
            "chain_ord":"['730e7aba192407d35eb37dd7938d49071124be8c']",
            "before_first_fix_commit":"{'0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc'}",
            "last_fix_commit":"730e7aba192407d35eb37dd7938d49071124be8c",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 23:19:28",
            "message":"# Absolute Path Traversal due to incorrect use of `send_file` call (#2025)\n\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (..\/)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\r\n\r\n## Common Weakness Enumeration category\r\nCWE - 36\r\n\r\n## Root Cause Analysis\r\n\r\nThe `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\r\n```\r\n>>> import os.path\r\n>>> static = \"path\/to\/mySafeStaticDir\"\r\n>>> malicious = \"\/..\/..\/..\/..\/..\/etc\/passwd\"\r\n>>> os.path.join(t,malicious)\r\n'\/..\/..\/..\/..\/..\/etc\/passwd'\r\n```\r\nSince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks.\r\n\r\nIn this case, the problems occurs due to the following code :\r\nhttps:\/\/github.com\/ganga-devs\/ganga\/blob\/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc\/ganga\/GangaGUI\/gui\/routes.py#L671\r\n\r\nHere, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack.\r\n\r\n## Proof of Concept\r\n\r\nThe bug can be verified using a proof of concept similar to the one shown below.\r\n\r\n```\r\ncurl --path-as-is 'http:\/\/<domain>\/job\/<int:job_id>\/browse\/\/\/..\/..\/..\/..\/etc\/passwd\"'\r\n```\r\n## Remediation\r\n\r\nThis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `werkzeug.utils.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\r\n\r\n## Common Vulnerability Scoring System Vector\r\n\r\nThe attack can be carried over the network. A complex non-standard configuration or a specialized condition is not required for the attack to be successfully conducted. There is no user interaction required for successful execution. The attack can affect components outside the scope of the target module. The attack can be used to gain access to confidential files like passwords, login credentials and other secrets. It cannot be directly used to affect a change on a system resource. Hence has limited to no impact on integrity. Using this attack vector a attacker may make multiple requests for accessing huge files such as a database. This can lead to a partial system denial service. However, the impact on availability is quite low in this case. Taking this account an appropriate CVSS v3.1 vector would be\r\n\r\n(AV:N\/AC:L\/PR:N\/UI:N\/S:C\/C:H\/I:N\/A:L)[https:\/\/nvd.nist.gov\/vuln-metrics\/cvss\/v3-calculator?vector=AV:N\/AC:L\/PR:N\/UI:N\/S:C\/C:H\/I:N\/A:L&version=3.1]\r\n\r\nThis gives it a base score of 9.3\/10 and a severity rating of critical.\r\n\r\n## References\r\n* [OWASP Path Traversal](https:\/\/owasp.org\/www-community\/attacks\/Path_Traversal)\r\n* github\/securitylab#669\r\n\r\n### This bug was found using *[CodeQL by Github](https:\/\/codeql.github.com\/)*\r\n\r\nCo-authored-by: Porcupiney Hairs <porucpiney.hairs@protonmail.com>",
            "author":"porcupineyhairs",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'ganga\/GangaGUI\/gui\/routes.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ganga-devs\/ganga\/raw\/730e7aba192407d35eb37dd7938d49071124be8c\/ganga%2FGangaGUI%2Fgui%2Froutes.py', 'patch': '@@ -12,7 +12,7 @@\\n import sys\\n import datetime\\n from functools import wraps\\n-from werkzeug.utils import secure_filename\\n+from werkzeug.utils import secure_filename, safe_join\\n from werkzeug.security import generate_password_hash, check_password_hash\\n from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response\\n from flask_login import login_user, login_required, logout_user, current_user, UserMixin\\n@@ -656,7 +656,7 @@ def job_browse(job_id: int, path):\\n         return redirect(url_for(\"job_page\", job_id=job_id))\\n \\n     # Join the base and the requested path\\n-    abs_path = os.path.join(job_base_dir, path)\\n+    abs_path = safe_join(job_base_dir, path)\\n \\n     # URL path variable for going back\\n     back_path = os.path.dirname(abs_path).replace(job_base_dir, \"\")'}}",
            "message_norm":"# absolute path traversal due to incorrect use of `send_file` call (#2025)\n\na path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. by manipulating variables that reference files with \u201cdot-dot-slash (..\/)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. this attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\r\n\r\n## common weakness enumeration category\r\ncwe - 36\r\n\r\n## root cause analysis\r\n\r\nthe `os.path.join` call is unsafe for use with untrusted input. when the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  please see the example below.\r\n```\r\n>>> import os.path\r\n>>> static = \"path\/to\/mysafestaticdir\"\r\n>>> malicious = \"\/..\/..\/..\/..\/..\/etc\/passwd\"\r\n>>> os.path.join(t,malicious)\r\n'\/..\/..\/..\/..\/..\/etc\/passwd'\r\n```\r\nsince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks.\r\n\r\nin this case, the problems occurs due to the following code :\r\nhttps:\/\/github.com\/ganga-devs\/ganga\/blob\/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc\/ganga\/gangagui\/gui\/routes.py#l671\r\n\r\nhere, the `path` parameter is attacker controlled. this parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. this leads to a path traversal attack.\r\n\r\n## proof of concept\r\n\r\nthe bug can be verified using a proof of concept similar to the one shown below.\r\n\r\n```\r\ncurl --path-as-is 'http:\/\/<domain>\/job\/<int:job_id>\/browse\/\/\/..\/..\/..\/..\/etc\/passwd\"'\r\n```\r\n## remediation\r\n\r\nthis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. in case the application logic necessiates this behaviour, one can either use the `werkzeug.utils.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\r\n\r\n## common vulnerability scoring system vector\r\n\r\nthe attack can be carried over the network. a complex non-standard configuration or a specialized condition is not required for the attack to be successfully conducted. there is no user interaction required for successful execution. the attack can affect components outside the scope of the target module. the attack can be used to gain access to confidential files like passwords, login credentials and other secrets. it cannot be directly used to affect a change on a system resource. hence has limited to no impact on integrity. using this attack vector a attacker may make multiple requests for accessing huge files such as a database. this can lead to a partial system denial service. however, the impact on availability is quite low in this case. taking this account an appropriate cvss v3.1 vector would be\r\n\r\n(av:n\/ac:l\/pr:n\/ui:n\/s:c\/c:h\/i:n\/a:l)[https:\/\/nvd.nist.gov\/vuln-metrics\/cvss\/v3-calculator?vector=av:n\/ac:l\/pr:n\/ui:n\/s:c\/c:h\/i:n\/a:l&version=3.1]\r\n\r\nthis gives it a base score of 9.3\/10 and a severity rating of critical.\r\n\r\n## references\r\n* [owasp path traversal](https:\/\/owasp.org\/www-community\/attacks\/path_traversal)\r\n* github\/securitylab#669\r\n\r\n### this bug was found using *[codeql by github](https:\/\/codeql.github.com\/)*\r\n\r\nco-authored-by: porcupiney hairs <porucpiney.hairs@protonmail.com>",
            "language":"en",
            "entities":"[('absolute path traversal', 'SECWORD', ''), ('incorrect use', 'SECWORD', ''), ('#2025', 'ISSUE', ''), ('path traversal', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('directory traversal', 'SECWORD', ''), ('manipulating', 'ACTION', ''), ('critical', 'SEVERITY', ''), ('attack', 'SECWORD', ''), ('directory traversal', 'SECWORD', ''), ('common weakness enumeration', 'SECWORD', ''), ('cwe - 36', 'CWEID', 'CWE_flexible'), ('unsafe', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('path traversal', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('problems', 'FLAW', ''), ('https:\/\/github.com\/ganga-devs\/ganga\/blob\/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc\/ganga\/gangagui\/gui\/routes.py#l671', 'URL', ''), ('attacker', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('attacker', 'SECWORD', ''), ('path traversal', 'SECWORD', ''), ('attack', 'FLAW', ''), ('bug', 'FLAW', ''), ('verified', 'ACTION', ''), ('http:\/\/<domain>\/job\/<int', 'URL', ''), ('fixed', 'ACTION', ''), ('preventing', 'ACTION', ''), ('untrusted data', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'FLAW', ''), ('confidential', 'SECWORD', ''), ('passwords', 'SECWORD', ''), ('login', 'SECWORD', ''), ('integrity', 'SECWORD', ''), ('attack vector', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('availability', 'SECWORD', ''), ('low', 'SEVERITY', ''), ('v3.1', 'VERSION', ''), ('l)[https:\/\/nvd.nist.gov', 'URL', ''), ('critical', 'SEVERITY', ''), ('owasp', 'SECWORD', ''), ('path traversal](https:\/\/owasp.org', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('securitylab#669', 'SECWORD', ''), ('bug', 'FLAW', ''), ('found', 'ACTION', ''), ('codeql', 'DETECTION', ''), ('github](https:\/\/codeql.github.com\/', 'URL', ''), ('porucpiney.hairs@protonmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ganga\/GangaGUI\/gui\/routes.py'])",
            "num_files":1.0
        },
        {
            "index":1450,
            "vuln_id":"GHSA-9xh4-23q4-v6wr",
            "cwe_id":"{'CWE-476', 'CWE-787', 'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow and undefined behavior in `FusedBatchNorm` ### Impact\nThe implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow:\n      \n```python\nimport tensorflow as tf\n\nx = tf.zeros([10, 10, 10, 6], dtype=tf.float32)\nscale = tf.constant([0.0], shape=[1], dtype=tf.float32)\noffset = tf.constant([0.0], shape=[1], dtype=tf.float32)\nmean = tf.constant([0.0], shape=[1], dtype=tf.float32)\nvariance = tf.constant([0.0], shape=[1], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n    \ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance,\n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n```\n  \nIf the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers:\n\n```python \nimport tensorflow as tf\nimport numpy as np\n\nx = tf.zeros([10, 10, 10, 1], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance, \n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n``` \n\nThe  [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7\/tensorflow\/core\/kernels\/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary.\n\nIf the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [6972f9dfe325636b3db4e0bc517ee22a159365c0](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "commit_sha":"6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "patch":"SINGLE",
            "chain_ord":"['6972f9dfe325636b3db4e0bc517ee22a159365c0']",
            "before_first_fix_commit":"{'57d86e0db5d1365f19adcce848dfc1bf89fdd4c7'}",
            "last_fix_commit":"6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/07\/2021, 00:45:51",
            "message":"Add missing valuidation to FusedBatchNorm.\n\nPiperOrigin-RevId: 372460336\nChange-Id: Ic8c4e4de67c58a741bd87f2e182bed07247d1126",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 27, 'deletions': 1, 'total': 28}",
            "files":"{'tensorflow\/core\/kernels\/fused_batch_norm_op.cc': {'additions': 27, 'deletions': 1, 'changes': 28, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6972f9dfe325636b3db4e0bc517ee22a159365c0\/tensorflow%2Fcore%2Fkernels%2Ffused_batch_norm_op.cc', 'patch': '@@ -1282,6 +1282,32 @@ class FusedBatchNormOpBase : public OpKernel {\\n                   errors::InvalidArgument(\"Error during tensor copy.\"));\\n     }\\n \\n+    const auto num_channels = GetTensorDim(x, tensor_format_, \\'C\\');\\n+    OP_REQUIRES(\\n+        context, scale.NumElements() == num_channels,\\n+        errors::InvalidArgument(\"scale must have the same number of elements \"\\n+                                \"as the channels of x, got \",\\n+                                scale.NumElements(), \" and \", num_channels));\\n+    OP_REQUIRES(\\n+        context, offset.NumElements() == num_channels,\\n+        errors::InvalidArgument(\"offset must have the same number of elements \"\\n+                                \"as the channels of x, got \",\\n+                                offset.NumElements(), \" and \", num_channels));\\n+    if (estimated_mean.NumElements() != 0) {\\n+      OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,\\n+                  errors::InvalidArgument(\\n+                      \"mean must be empty or have the same number of \"\\n+                      \"elements as the channels of x, got \",\\n+                      estimated_mean.NumElements(), \" and \", num_channels));\\n+    }\\n+    if (estimated_variance.NumElements() != 0) {\\n+      OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,\\n+                  errors::InvalidArgument(\\n+                      \"variance must be empty or have the same number of \"\\n+                      \"elements as the channels of x, got \",\\n+                      estimated_variance.NumElements(), \" and \", num_channels));\\n+    }\\n+\\n     if (has_side_input_) {\\n       OP_REQUIRES(context, side_input->shape() == x.shape(),\\n                   errors::InvalidArgument(\\n@@ -1294,7 +1320,7 @@ class FusedBatchNormOpBase : public OpKernel {\\n       \/\/ NOTE(ezhulenev): This requirement is coming from implementation\\n       \/\/ details of cudnnBatchNormalizationForwardTrainingEx.\\n       OP_REQUIRES(\\n-          context, !is_training_ || x.dim_size(3) % 4 == 0,\\n+          context, !is_training_ || num_channels % 4 == 0,\\n           errors::InvalidArgument(\"FusedBatchNorm with activation requires \"\\n                                   \"channel dimension to be a multiple of 4.\"));\\n     }'}}",
            "message_norm":"add missing valuidation to fusedbatchnorm.\n\npiperorigin-revid: 372460336\nchange-id: ic8c4e4de67c58a741bd87f2e182bed07247d1126",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('372460336', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/fused_batch_norm_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3323,
            "vuln_id":"GHSA-wvh5-78h5-gmgr",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/moodle\/moodle\/commit\/6abe964bbac41b5e40a81b40962f7044b0dc201e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in moodle A flaw was found in moodle where ID numbers displayed when bulk allocating markers to assignments required additional sanitizing to prevent a stored XSS risk.",
            "published_date":"2022-05-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/moodle\/moodle",
            "commit_href":"https:\/\/github.com\/moodle\/moodle\/commit\/6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "commit_sha":"6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "patch":"SINGLE",
            "chain_ord":"['6abe964bbac41b5e40a81b40962f7044b0dc201e']",
            "before_first_fix_commit":"{'11b2cc4cb5cf0693414f0e84cb790e487ae33a24'}",
            "last_fix_commit":"6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/15\/2022, 00:10:25",
            "message":"MDL-74204 mod_assign: escape identity fields in allocate marker form.",
            "author":"Paul Holden",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'mod\/assign\/classes\/output\/renderer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moodle\/moodle\/raw\/6abe964bbac41b5e40a81b40962f7044b0dc201e\/mod%2Fassign%2Fclasses%2Foutput%2Frenderer.php', 'patch': \"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\\\\assign_user_summary $summary) {\\n             $fullname = fullname($summary->user, $summary->viewfullnames);\\n             $extrainfo = array();\\n             foreach ($summary->extrauserfields as $extrafield) {\\n-                $extrainfo[] = $summary->user->$extrafield;\\n+                $extrainfo[] = s($summary->user->$extrafield);\\n             }\\n             if (count($extrainfo)) {\\n                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';\"}}",
            "message_norm":"mdl-74204 mod_assign: escape identity fields in allocate marker form.",
            "language":"en",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mod\/assign\/classes\/output\/renderer.php'])",
            "num_files":1.0
        },
        {
            "index":3276,
            "vuln_id":"GHSA-wgx2-6432-j3fw",
            "cwe_id":"{'CWE-704'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/paritytech\/bigint\/commit\/7e71521a61b009afc94c91135353102658550d42'}",
            "dataset":"osv",
            "summary":"Unsoundness in bigint An issue was discovered in the bigint crate through 2020-05-07 for Rust. It allows a soundness violation.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/paritytech\/bigint",
            "commit_href":"https:\/\/github.com\/paritytech\/bigint\/commit\/7e71521a61b009afc94c91135353102658550d42",
            "commit_sha":"7e71521a61b009afc94c91135353102658550d42",
            "patch":"SINGLE",
            "chain_ord":"['7e71521a61b009afc94c91135353102658550d42']",
            "before_first_fix_commit":"{'ae4bc3b51d3718abafa89837730e23bd718c6b02'}",
            "last_fix_commit":"7e71521a61b009afc94c91135353102658550d42",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/07\/2020, 13:12:33",
            "message":"DEPRECATED: bump to 4.4.3 to update crates.io readme",
            "author":"Andronik Ordian",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'Cargo.toml': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/paritytech\/bigint\/raw\/7e71521a61b009afc94c91135353102658550d42\/Cargo.toml', 'patch': '@@ -1,11 +1,12 @@\\n [package]\\n-description = \"Large fixed-size integers arithmetics\"\\n+description = \"DEPRECATED: use uint instead\"\\n homepage = \"http:\/\/parity.io\"\\n repository = \"https:\/\/github.com\/ethcore\/bigint\"\\n license = \"MIT\/Apache-2.0\"\\n name = \"bigint\"\\n-version = \"4.4.2\"\\n+version = \"4.4.3\"\\n authors = [\"Parity Technologies <admin@parity.io>\"]\\n+readme = \"README.md\"\\n \\n [dependencies]\\n rustc-hex = { version = \"1.0\", optional = true }'}}",
            "message_norm":"deprecated: bump to 4.4.3 to update crates.io readme",
            "language":"en",
            "entities":"[('4.4.3', 'VERSION', ''), ('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Cargo.toml'])",
            "num_files":1.0
        },
        {
            "index":3113,
            "vuln_id":"GHSA-vgmw-9cww-qq99",
            "cwe_id":"{'CWE-284', 'CWE-863'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/0c0313f375bed7b035c8c0482bbb09599e16bfcf'}",
            "dataset":"osv",
            "summary":"Incorrect Authorization in calibreweb calibreweb prior to version 0.6.16 contains an Incorrect Authorization vulnerability.",
            "published_date":"2022-01-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/janeczku\/calibre-web",
            "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "commit_sha":"0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "patch":"SINGLE",
            "chain_ord":"['0c0313f375bed7b035c8c0482bbb09599e16bfcf']",
            "before_first_fix_commit":"{'6bf07539788004513c3692c074ebc7ba4ce005e1'}",
            "last_fix_commit":"0c0313f375bed7b035c8c0482bbb09599e16bfcf",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/18\/2022, 16:55:10",
            "message":"Prevent creating a public shelf without permission",
            "author":"Ozzie Isaacs",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'cps\/shelf.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/0c0313f375bed7b035c8c0482bbb09599e16bfcf\/cps%2Fshelf.py', 'patch': '@@ -248,7 +248,7 @@ def create_edit_shelf(shelf, page_title, page, shelf_id=False):\\n         if not current_user.role_edit_shelfs() and to_save.get(\"is_public\") == \"on\":\\n             flash(_(u\"Sorry you are not allowed to create a public shelf\"), category=\"error\")\\n             return redirect(url_for(\\'web.index\\'))\\n-        is_public = 1 if to_save.get(\"is_public\") else 0\\n+        is_public = 1 if to_save.get(\"is_public\") == \"on\" else 0\\n         if config.config_kobo_sync:\\n             shelf.kobo_sync = True if to_save.get(\"kobo_sync\") else False\\n             if shelf.kobo_sync:'}}",
            "message_norm":"prevent creating a public shelf without permission",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('permission', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['cps\/shelf.py'])",
            "num_files":1.0
        },
        {
            "index":1989,
            "vuln_id":"GHSA-h4pc-gx2w-f2xv",
            "cwe_id":"{'CWE-125'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412'}",
            "dataset":"osv",
            "summary":"Heap OOB read in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/c59c37e7b2d563967da813fa50fe20b21f4da683\/tensorflow\/lite\/kernels\/split_v.cc#L99):\n\n```cc\nconst int input_size = SizeOfDimension(input, axis_value);\n``` \n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/102b211d892f3abc14f845a72047809b39cc65ab\/tensorflow\/lite\/kernels\/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:\n\n```cc\ninline int SizeOfDimension(const TfLiteTensor* t, int dim) {\n  return t->dims->data[dim];\n}\n```\n  \n### Patches \nWe have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "commit_sha":"ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "patch":"SINGLE",
            "chain_ord":"['ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412']",
            "before_first_fix_commit":"{'c59c37e7b2d563967da813fa50fe20b21f4da683'}",
            "last_fix_commit":"ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 01:12:15",
            "message":"Prevent array OOB read\/write\n\nPiperOrigin-RevId: 371026165\nChange-Id: I26ac6372c87246e03c7eb8c94e84c84d86054b36",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/split_v.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412\/tensorflow%2Flite%2Fkernels%2Fsplit_v.cc', 'patch': '@@ -96,6 +96,8 @@ TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,\\n     }\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n   const int input_size = SizeOfDimension(input, axis_value);\\n \\n   if (minus_one_index != -1) {'}}",
            "message_norm":"prevent array oob read\/write\n\npiperorigin-revid: 371026165\nchange-id: i26ac6372c87246e03c7eb8c94e84c84d86054b36",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('371026165', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/split_v.cc'])",
            "num_files":1.0
        },
        {
            "index":2811,
            "vuln_id":"GHSA-qr82-2c78-4m8h",
            "cwe_id":"{'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in map operations ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  memory_limit=128)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac).\n                       \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/532f5c5a547126c634fefd43bbad1dc6417678ac",
            "commit_sha":"532f5c5a547126c634fefd43bbad1dc6417678ac",
            "patch":"SINGLE",
            "chain_ord":"['532f5c5a547126c634fefd43bbad1dc6417678ac']",
            "before_first_fix_commit":"{'a4e138660270e7599793fa438cd7b2fc2ce215a6'}",
            "last_fix_commit":"532f5c5a547126c634fefd43bbad1dc6417678ac",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:24:39",
            "message":"Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/map_stage_op.cc': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/532f5c5a547126c634fefd43bbad1dc6417678ac\/tensorflow%2Fcore%2Fkernels%2Fmap_stage_op.cc', 'patch': '@@ -210,25 +210,28 @@ class StagingMap : public ResourceBase {\\n                                    const OptionalTuple& tuple)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (tuple[index].has_value()) {\\n-      return Status(errors::InvalidArgument(\\n+      return errors::InvalidArgument(\\n           \"The tensor for index \\'\", index, \"\\' for key \\'\", key.scalar<int64>()(),\\n-          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\"));\\n+          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\");\\n     }\\n \\n     return Status::OK();\\n   }\\n \\n   \/\/ Check that the indices are strictly ordered\\n   Status check_index_ordering(const Tensor& indices) {\\n+    if (indices.NumElements() == 0) {\\n+      return errors::InvalidArgument(\"Indices are empty\");\\n+    }\\n+\\n     auto findices = indices.flat<int>();\\n \\n     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {\\n       if (findices(i) < findices(i + 1)) {\\n         continue;\\n       }\\n \\n-      return Status(\\n-          errors::InvalidArgument(\"Indices are not strictly ordered\"));\\n+      return errors::InvalidArgument(\"Indices are not strictly ordered\");\\n     }\\n \\n     return Status::OK();\\n@@ -238,10 +241,10 @@ class StagingMap : public ResourceBase {\\n   Status check_memory_limit(std::size_t bytes)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (has_memory_limit() && bytes > memory_limit_) {\\n-      return Status(errors::ResourceExhausted(\\n+      return errors::ResourceExhausted(\\n           \"Attempted to insert tensors with combined size of \\'\", bytes,\\n           \"\\' bytes into Staging Area with a memory limit of \\'\", memory_limit_,\\n-          \"\\'.\"));\\n+          \"\\'.\");\\n     }\\n \\n     return Status::OK();'}}",
            "message_norm":"prevent nullptr deref in validation of indexes in map ops.\n\npiperorigin-revid: 387738023\nchange-id: i83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('387738023', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/map_stage_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1468,
            "vuln_id":"GHSA-c3g4-w6cv-6v7h",
            "cwe_id":"{'CWE-276'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/containers\/buildah\/commit\/e7e55c988c05dd74005184ceb64f097a0cfe645b', 'https:\/\/github.com\/containers\/buildah\/commit\/90b3254c7404039c1c786999ac189654228f6e0e'}",
            "dataset":"osv",
            "summary":"Non-empty default inheritable capabilities for linux container in Buildah A bug was found in Buildah where containers were created with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2).\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.",
            "published_date":"2022-04-01",
            "chain_len":2,
            "project":"https:\/\/github.com\/containers\/buildah",
            "commit_href":"https:\/\/github.com\/containers\/buildah\/commit\/90b3254c7404039c1c786999ac189654228f6e0e",
            "commit_sha":"90b3254c7404039c1c786999ac189654228f6e0e",
            "patch":"MULTI",
            "chain_ord":"['e7e55c988c05dd74005184ceb64f097a0cfe645b', '90b3254c7404039c1c786999ac189654228f6e0e']",
            "before_first_fix_commit":"{'5d252d404df19f77d26d6af956f4809103ce079f'}",
            "last_fix_commit":"90b3254c7404039c1c786999ac189654228f6e0e",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/24\/2022, 20:32:47",
            "message":"Add a test for CVE-2022-27651\n\nCheck that the inheritable capabilities are set to 0, even when we\nexplicitly try to add capabilities.\n\nSigned-off-by: Nalin Dahyabhai <nalin@redhat.com>",
            "author":"Nalin Dahyabhai",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'tests\/run.bats': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/containers\/buildah\/raw\/90b3254c7404039c1c786999ac189654228f6e0e\/tests%2Frun.bats', 'patch': '@@ -786,9 +786,23 @@ _EOF\\n \\tif test \"$DBUS_SESSION_BUS_ADDRESS\" = \"\"; then\\n \\t\\tskip \"${1:-test does not work when \\\\$BUILDAH_ISOLATION = chroot}\"\\n \\tfi\\n+\\t_prefetch alpine\\n \\n \\trun_buildah from --quiet --pull=false --signature-policy ${TESTSDIR}\/policy.json alpine\\n \\tcid=$output\\n \\trun_buildah run --cgroupns=host $cid cat \/proc\/self\/cgroup\\n \\texpect_output --substring \"\/user.slice\/\"\\n }\\n+\\n+@test \"run-inheritable-capabilities\" {\\n+\\tskip_if_no_runtime\\n+\\n+\\t_prefetch alpine\\n+\\n+\\trun_buildah from --quiet --pull=false --signature-policy ${TESTSDIR}\/policy.json alpine\\n+\\tcid=$output\\n+\\trun_buildah run $cid grep ^CapInh: \/proc\/self\/status\\n+\\texpect_output \"CapInh:\\t0000000000000000\"\\n+\\trun_buildah run --cap-add=ALL $cid grep ^CapInh: \/proc\/self\/status\\n+\\texpect_output \"CapInh:\\t0000000000000000\"\\n+}'}}",
            "message_norm":"add a test for cve-2022-27651\n\ncheck that the inheritable capabilities are set to 0, even when we\nexplicitly try to add capabilities.\n\nsigned-off-by: nalin dahyabhai <nalin@redhat.com>",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('cve-2022-27651', 'VULNID', 'CVE'), ('add', 'ACTION', ''), ('nalin@redhat.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tests\/run.bats'])",
            "num_files":1.0
        },
        {
            "index":302,
            "vuln_id":"GHSA-3qgw-p4fm-x7gf",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's convolution code ### Impact\nTFLite's [convolution code](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/09c73bca7d648e961dd05898292d91a8322a9d45\/tensorflow\/lite\/kernels\/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. For example:\n\n```cc \nconst int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff489d95a9006be080ad14feb378f2b4dac35552](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552",
            "commit_sha":"ff489d95a9006be080ad14feb378f2b4dac35552",
            "patch":"SINGLE",
            "chain_ord":"['ff489d95a9006be080ad14feb378f2b4dac35552']",
            "before_first_fix_commit":"{'09c73bca7d648e961dd05898292d91a8322a9d45'}",
            "last_fix_commit":"ff489d95a9006be080ad14feb378f2b4dac35552",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 19:37:35",
            "message":"Prevent division by 0.\n\nPiperOrigin-RevId: 370962554\nChange-Id: I0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'tensorflow\/lite\/kernels\/conv.cc': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ff489d95a9006be080ad14feb378f2b4dac35552\/tensorflow%2Flite%2Fkernels%2Fconv.cc', 'patch': '@@ -545,6 +545,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\\n     \/\/ Only one scale factor per batch is typically necessary. See optimized\\n     \/\/ implementation for why we need to allocate for the height of the inputs\\n     \/\/ flattened to 2D.\\n+    TF_LITE_ENSURE(context, channels_in != 0);\\n     const int height = NumElements(input) \/ channels_in;\\n     int scaling_dims[1] = {height};\\n     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {\\n@@ -587,6 +588,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\\n       input_offsets->type = kTfLiteInt32;\\n       input_offsets->allocation_type = kTfLiteArenaRw;\\n       \/\/ See above comment for the need to allocate for height of inputs.\\n+      TF_LITE_ENSURE(context, channels_in != 0);\\n       const int height = NumElements(input) \/ channels_in;\\n       const int input_offset_dims[1] = {height};\\n       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,\\n@@ -886,8 +888,9 @@ TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,\\n   CalculateActivationRange(params->activation, &output_activation_min,\\n                            &output_activation_max);\\n \\n-  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\\n   const int batch_size = SizeOfDimension(input, 0);\\n+  TF_LITE_ENSURE(context, batch_size != 0);\\n+  const int input_size = NumElements(input) \/ batch_size;\\n   TfLiteTensor* quantized_input_tensor;\\n   TF_LITE_ENSURE_OK(context,\\n                     GetTemporarySafe(context, node, data->input_quantized_index,\\n@@ -989,8 +992,9 @@ TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node,\\n   CalculateActivationRange(params->activation, &output_activation_min,\\n                            &output_activation_max);\\n \\n-  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\\n   const int batch_size = SizeOfDimension(input, 0);\\n+  TF_LITE_ENSURE(context, batch_size != 0);\\n+  const int input_size = NumElements(input) \/ batch_size;\\n \\n   const float* input_ptr = GetTensorData<float>(input);\\n   TfLiteTensor* quantized_input_tensor;'}}",
            "message_norm":"prevent division by 0.\n\npiperorigin-revid: 370962554\nchange-id: i0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370962554', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/conv.cc'])",
            "num_files":1.0
        },
        {
            "index":2959,
            "vuln_id":"GHSA-rj44-gpjc-29r7",
            "cwe_id":"{'CWE-78'}",
            "score":6.4,
            "chain":"{'https:\/\/github.com\/thi-ng\/umbrella\/commit\/88f61656e5f5cfba960013b8133186389efaf243'}",
            "dataset":"osv",
            "summary":"[thi.ng\/egf] Potential arbitrary code execution of `#gpg`-tagged property values ### Impact\n\nPotential for arbitrary code execution in `#gpg`-tagged property values (only if `decrypt: true` option is enabled)\n\n### Patches\n\n[A fix](https:\/\/github.com\/thi-ng\/umbrella\/commit\/3e14765d6bfd8006742c9e7860bc7d58ae94dfa5) has already been released as v0.4.0\n\n### Workarounds\n\nBy default, EGF parse functions do NOT attempt to decrypt values (since GPG is only available in non-browser env).\n\nHowever, if GPG encrypted values are used\/required:\n\n1. Perform a regex search for `#gpg`-tagged values in the EGF source file\/string and check for backtick (\\`) chars in the encrypted value string\n2. Replace\/remove them or skip parsing if present...\n\n### References\n\nhttps:\/\/github.com\/thi-ng\/umbrella\/security\/advisories\/GHSA-rj44-gpjc-29r7#advisory-comment-65261\n\n### For more information\n\nIf you have any questions or comments about this advisory, please open an issue in the [thi.ng\/umbrella repo](https:\/\/github.com\/thi-ng\/umbrella\/issues), of which this package is part of.",
            "published_date":"2021-04-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/thi-ng\/umbrella",
            "commit_href":"https:\/\/github.com\/thi-ng\/umbrella\/commit\/88f61656e5f5cfba960013b8133186389efaf243",
            "commit_sha":"88f61656e5f5cfba960013b8133186389efaf243",
            "patch":"SINGLE",
            "chain_ord":"['88f61656e5f5cfba960013b8133186389efaf243']",
            "before_first_fix_commit":"{'c3f5ec12f324a4e627b26dc45d480c0e761602ea', '3e14765d6bfd8006742c9e7860bc7d58ae94dfa5'}",
            "last_fix_commit":"88f61656e5f5cfba960013b8133186389efaf243",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/27\/2021, 08:52:42",
            "message":"Merge pull request from GHSA-rj44-gpjc-29r7\n\nfix(egf): update GPG invocation to avoid arb code exec",
            "author":"Karsten Schmidt",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'packages\/egf\/src\/tags.ts': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/thi-ng\/umbrella\/raw\/88f61656e5f5cfba960013b8133186389efaf243\/packages%2Fegf%2Fsrc%2Ftags.ts', 'patch': '@@ -1,7 +1,7 @@\\n import type { IObjectOf } from \"@thi.ng\/api\";\\n import { maybeParseFloat, maybeParseInt, unescape } from \"@thi.ng\/strings\";\\n import { base64Decode } from \"@thi.ng\/transducers-binary\";\\n-import { execSync } from \"child_process\";\\n+import { execFileSync } from \"child_process\";\\n import { readFileSync } from \"fs\";\\n import { resolve as resolvePath } from \"path\";\\n import { IS_NODE, NODE_ONLY, TagParser } from \".\/api\";\\n@@ -24,7 +24,9 @@ export const BUILTINS: IObjectOf<TagParser> = {\\n     gpg: IS_NODE\\n         ? (_, body, ctx) =>\\n               (ctx.opts.decrypt\\n-                  ? execSync(`echo \"${body}\" | gpg --decrypt`).toString()\\n+                  ? execFileSync(\"gpg\", [\"--decrypt\"], {\\n+                        input: body,\\n+                    }).toString()\\n                   : body\\n               ).trim()\\n         : NODE_ONLY,'}}",
            "message_norm":"merge pull request from ghsa-rj44-gpjc-29r7\n\nfix(egf): update gpg invocation to avoid arb code exec",
            "language":"ca",
            "entities":"[('ghsa-rj44-gpjc-29r7', 'VULNID', 'GHSA'), ('fix(egf', 'ACTION', ''), ('code exec', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/egf\/src\/tags.ts'])",
            "num_files":1.0
        },
        {
            "index":1383,
            "vuln_id":"GHSA-9hr3-j9mc-xmq2",
            "cwe_id":"{'CWE-29', 'CWE-22'}",
            "score":6.9,
            "chain":"{'https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/359603b63fc6c59d8b57e061c171954bab3433bf', 'https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe'}",
            "dataset":"osv",
            "summary":"Path Traversal in com.alibaba.oneagent:one-java-agent-plugin All versions of package `com.alibaba.oneagent:one-java-agent-plugin` are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) using a specially crafted archive that holds directory traversal filenames (e.g. `..\/..\/evil.exe`). The attacker can overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u2019s machine.",
            "published_date":"2022-05-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/alibaba\/one-java-agent",
            "commit_href":"https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/359603b63fc6c59d8b57e061c171954bab3433bf",
            "commit_sha":"359603b63fc6c59d8b57e061c171954bab3433bf",
            "patch":"MULTI",
            "chain_ord":"['359603b63fc6c59d8b57e061c171954bab3433bf', 'b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe']",
            "before_first_fix_commit":"{'52f2506c7cbcfbbe342ddf9d35a915fc49e6fa48'}",
            "last_fix_commit":"b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/07\/2022, 02:28:31",
            "message":"remove unused IOUtils.unzip",
            "author":"luyanbo",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 56, 'total': 56}",
            "files":"{'one-java-agent-plugin\/src\/main\/java\/com\/alibaba\/oneagent\/utils\/IOUtils.java': {'additions': 0, 'deletions': 56, 'changes': 56, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alibaba\/one-java-agent\/raw\/359603b63fc6c59d8b57e061c171954bab3433bf\/one-java-agent-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Foneagent%2Futils%2FIOUtils.java', 'patch': '@@ -103,60 +103,4 @@ public static IOException close(URLClassLoader urlClassLoader) {\\n \\t\\treturn null;\\n \\t}\\n \\n-\\tpublic static void unzip(String zipFile, String extractFolder) throws IOException {\\n-\\t\\tFile file = new File(zipFile);\\n-\\t\\tZipFile zip = null;\\n-\\t\\ttry {\\n-\\t\\t\\tint BUFFER = 1024 * 8;\\n-\\n-\\t\\t\\tzip = new ZipFile(file);\\n-\\t\\t\\tString newPath = extractFolder;\\n-\\n-\\t\\t\\tnew File(newPath).mkdir();\\n-\\t\\t\\tEnumeration<? extends ZipEntry> zipFileEntries = zip.entries();\\n-\\n-\\t\\t\\t\/\/ Process each entry\\n-\\t\\t\\twhile (zipFileEntries.hasMoreElements()) {\\n-\\t\\t\\t\\t\/\/ grab a zip file entry\\n-\\t\\t\\t\\tZipEntry entry = (ZipEntry) zipFileEntries.nextElement();\\n-\\t\\t\\t\\tString currentEntry = entry.getName();\\n-\\n-\\t\\t\\t\\tFile destFile = new File(newPath, currentEntry);\\n-\\t\\t\\t\\t\/\/ destFile = new File(newPath, destFile.getName());\\n-\\t\\t\\t\\tFile destinationParent = destFile.getParentFile();\\n-\\n-\\t\\t\\t\\t\/\/ create the parent directory structure if needed\\n-\\t\\t\\t\\tdestinationParent.mkdirs();\\n-\\n-\\t\\t\\t\\tif (!entry.isDirectory()) {\\n-\\t\\t\\t\\t\\tBufferedInputStream is = null;\\n-\\t\\t\\t\\t\\tBufferedOutputStream dest = null;\\n-\\t\\t\\t\\t\\ttry {\\n-\\t\\t\\t\\t\\t\\tis = new BufferedInputStream(zip.getInputStream(entry));\\n-\\t\\t\\t\\t\\t\\tint currentByte;\\n-\\t\\t\\t\\t\\t\\t\/\/ establish buffer for writing file\\n-\\t\\t\\t\\t\\t\\tbyte data[] = new byte[BUFFER];\\n-\\n-\\t\\t\\t\\t\\t\\t\/\/ write the current file to disk\\n-\\t\\t\\t\\t\\t\\tFileOutputStream fos = new FileOutputStream(destFile);\\n-\\t\\t\\t\\t\\t\\tdest = new BufferedOutputStream(fos, BUFFER);\\n-\\n-\\t\\t\\t\\t\\t\\t\/\/ read and write until last byte is encountered\\n-\\t\\t\\t\\t\\t\\twhile ((currentByte = is.read(data, 0, BUFFER)) != -1) {\\n-\\t\\t\\t\\t\\t\\t\\tdest.write(data, 0, currentByte);\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\tdest.flush();\\n-\\t\\t\\t\\t\\t} finally {\\n-\\t\\t\\t\\t\\t\\tclose(dest);\\n-\\t\\t\\t\\t\\t\\tclose(is);\\n-\\t\\t\\t\\t\\t}\\n-\\n-\\t\\t\\t\\t}\\n-\\n-\\t\\t\\t}\\n-\\t\\t} finally {\\n-\\t\\t\\tclose(zip);\\n-\\t\\t}\\n-\\n-\\t}\\n }'}}",
            "message_norm":"remove unused ioutils.unzip",
            "language":"en",
            "entities":"[('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['one-java-agent-plugin\/src\/main\/java\/com\/alibaba\/oneagent\/utils\/IOUtils.java'])",
            "num_files":1.0
        },
        {
            "index":2072,
            "vuln_id":"GHSA-hhqj-cfjx-vj25",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/hakimel\/reveal.js\/commit\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2'}",
            "dataset":"osv",
            "summary":"Cross site scripting in reveal.js The onmessage event listener in \/plugin\/notes\/speaker-view.html does not check the origin of postMessage before adding the content to the webpage. The vulnerable code allows any origin to postMessage on the browser window and feeds attacker's input to parts using which attacker can execute arbitrary javascript code on victim's browser window hosting reveal.js",
            "published_date":"2022-03-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/hakimel\/reveal.js",
            "commit_href":"https:\/\/github.com\/hakimel\/reveal.js\/commit\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "commit_sha":"32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "patch":"SINGLE",
            "chain_ord":"['32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2']",
            "before_first_fix_commit":"{'e33c3c72f93d4c70ded3a90f5918f60082c96451'}",
            "last_fix_commit":"32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/26\/2022, 11:46:18",
            "message":"Fix DOM XSS",
            "author":"r0hanSH",
            "comments":"{'com_1': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:17', 'body': '\u062e\u062f\u0645\u0627\u062a: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \\r\\n\u0646\u0648\u0639 \u0633\u0631\u0648\u06cc\u0633: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0633\u067e\u0647\\r\\n\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a: 9243 3628 1010 5892\\r\\n\u0628\u0646\u0627\u0645: \u0627\u0628\u0631\u0627\u0647\u06cc\u0645 \u0645\u0631\u0627\u062f\u06cc \u0627\u0633\u062a\u06cc\u0627\u0631\\r\\n\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0631\u062a:\\r\\n147,000,000,000,000\u0631\u06cc\u0627\u0644\\r\\n\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a:\\r\\n147,000,000,000,000\u0631\u06cc\u0627\u0644\\r\\n\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc:963877\\r\\n\u0634\u0645\u0627\u0631\u0647 \u0645\u0631\u062c\u0639:94382963877\\r\\n\u06a9\u062f\u0633\u062f\u0627\u062f:20060530\\r\\nCODETRANSFER:G0956DVY87\\r\\nCOMMON ACCOUNT:947022366\\r\\nISIN:XS2111948803\\r\\nCFI CODE:DBFUFB\\r\\n\\r\\n\u0648\u0636\u0639\u06cc\u062a \u06a9\u0627\u0631\u062a: \u0627\u06a9\u062a\u06cc\u0648 \u0648 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633\u06cc\\r\\n            \u0633\u0631\u0648\u0631 \u0628\u0627\u0646\u06a9 \u0633\u067e\u0647'}, 'com_2': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:31', 'body': '> \u062e\u062f\u0645\u0627\u062a: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0646\u0648\u0639 \u0633\u0631\u0648\u06cc\u0633: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0633\u067e\u0647 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a: 9243 3628 1010 5892 \u0628\u0646\u0627\u0645: \u0627\u0628\u0631\u0627\u0647\u06cc\u0645 \u0645\u0631\u0627\u062f\u06cc \u0627\u0633\u062a\u06cc\u0627\u0631 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0631\u062a: 147,000,000,000,000\u0631\u06cc\u0627\u0644 \u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a: 147,000,000,000,000\u0631\u06cc\u0627\u0644 \u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc:963877 \u0634\u0645\u0627\u0631\u0647 \u0645\u0631\u062c\u0639:94382963877 \u06a9\u062f\u0633\u062f\u0627\u062f:20060530 CODETRANSFER:G0956DVY87 COMMON ACCOUNT: 947022366 ISIN:XS2111948803 \u06a9\u062f CFI:DBFUFB\\r\\n> \\r\\n> \u06a9\u0627\u0631\u062a \u0648\u0636\u0639\u06cc\u062a: \u0627\u06a9\u062a\u06cc\u0648 \u0648 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633\u06cc \u0633\u0631\u0648\u0631 \u0628\u0627\u0646\u06a9 \u0633\u067e\u0647'}, 'com_3': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:50', 'body': '![\u06f2\u06f0\u06f2\u06f2\u06f0\u06f6\u06f1\u06f6_\u06f0\u06f7\u06f3\u06f7\u06f4\u06f0](https:\/\/user-images.githubusercontent.com\/97744031\/173983277-3cf21aef-9310-4a21-b681-3457044107ad.jpg)'}}",
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'plugin\/notes\/speaker-view.html': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hakimel\/reveal.js\/raw\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2\/plugin%2Fnotes%2Fspeaker-view.html', 'patch': '@@ -368,6 +368,10 @@ <h4 class=\"label\">Notes<\/h4>\\n \\n \\t\\t\\t\\twindow.addEventListener( \\'message\\', function( event ) {\\n \\n+\\t\\t\\t\\t\\tif (window.location.origin !== event.origin){\\n+\\t\\t\\t\\t\\t\\treturn;\\n+\\t\\t\\t\\t\\t}\\n+\\n \\t\\t\\t\\t\\tclearTimeout( connectionTimeout );\\n \\t\\t\\t\\t\\tconnectionStatus.style.display = \\'none\\';'}}",
            "message_norm":"fix dom xss",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['plugin\/notes\/speaker-view.html'])",
            "num_files":1.0
        },
        {
            "index":3334,
            "vuln_id":"GHSA-wx69-rvg3-x7fc",
            "cwe_id":"{'CWE-79'}",
            "score":9.0,
            "chain":"{'https:\/\/github.com\/NodeBB\/NodeBB\/commit\/1783f918bc19568f421473824461ff2ed7755e4c'}",
            "dataset":"osv",
            "summary":"XSS via prototype pollution in NodeBB  ### Impact\nA prototype pollution vulnerability in the uploader module allowed a malicious user to inject arbitrary data (i.e. javascript) into the DOM, theoretically allowing for an account takeover when used in conjunction with a path traversal vulnerability disclosed at the same time as this report.\n\n### Patches\nThe vulnerability has been patched as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 1783f918bc19568f421473824461ff2ed7755e4c to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
            "published_date":"2021-11-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/NodeBB\/NodeBB",
            "commit_href":"https:\/\/github.com\/NodeBB\/NodeBB\/commit\/1783f918bc19568f421473824461ff2ed7755e4c",
            "commit_sha":"1783f918bc19568f421473824461ff2ed7755e4c",
            "patch":"SINGLE",
            "chain_ord":"['1783f918bc19568f421473824461ff2ed7755e4c']",
            "before_first_fix_commit":"{'c8b2fc46dc698db687379106b3f01c71b80f495f'}",
            "last_fix_commit":"1783f918bc19568f421473824461ff2ed7755e4c",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2021, 17:17:33",
            "message":"fix: guard against prototype pollution",
            "author":"Bar\u0131\u015f Soner U\u015fakl\u0131",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'src\/socket.io\/uploads.js': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NodeBB\/NodeBB\/raw\/1783f918bc19568f421473824461ff2ed7755e4c\/src%2Fsocket.io%2Fuploads.js', 'patch': \"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {\\n \\t\\t'user.updateCover': socketUser.updateCover,\\n \\t\\t'groups.cover.update': socketGroup.cover.update,\\n \\t};\\n-\\tif (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {\\n+\\tif (!socket.uid || !data || !data.chunk ||\\n+\\t\\t!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {\\n \\t\\tthrow new Error('[[error:invalid-data]]');\\n \\t}\\n \\n-\\tinProgress[socket.id] = inProgress[socket.id] || {};\\n+\\tinProgress[socket.id] = inProgress[socket.id] || Object.create(null);\\n \\tconst socketUploads = inProgress[socket.id];\\n \\tconst { method } = data.params;\"}}",
            "message_norm":"fix: guard against prototype pollution",
            "language":"en",
            "entities":"[('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/socket.io\/uploads.js'])",
            "num_files":1.0
        },
        {
            "index":3326,
            "vuln_id":"GHSA-wvjw-p9f5-vq28",
            "cwe_id":"{'CWE-755'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9'}",
            "dataset":"osv",
            "summary":"Segfault in `tf.raw_ops.SparseCountSparseOutput` ### Impact\nPassing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [82e6203221865de4008445b13c69b6826d2b28d9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9",
            "commit_sha":"82e6203221865de4008445b13c69b6826d2b28d9",
            "patch":"SINGLE",
            "chain_ord":"['82e6203221865de4008445b13c69b6826d2b28d9']",
            "before_first_fix_commit":"{'0e182ba66c18db83668c05d26ee0c84ca9e2dbff'}",
            "last_fix_commit":"82e6203221865de4008445b13c69b6826d2b28d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/03\/2021, 01:02:03",
            "message":"Fix segfaults in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 360547563\nChange-Id: I781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'tensorflow\/core\/kernels\/count_ops.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/82e6203221865de4008445b13c69b6826d2b28d9\/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -192,6 +192,10 @@ class SparseCount : public OpKernel {\\n               \"; values shape: \", values.shape().DebugString()));\\n     }\\n \\n+    OP_REQUIRES(context, shape.NumElements() != 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n+\\n     bool is_1d = shape.NumElements() == 1;\\n     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\\n     int num_values = values.NumElements();\\n@@ -212,6 +216,14 @@ class SparseCount : public OpKernel {\\n \\n     for (int idx = 0; idx < num_values; ++idx) {\\n       int batch = is_1d ? 0 : indices_values(idx, 0);\\n+      if (batch >= num_batches) {\\n+        OP_REQUIRES(context, batch < num_batches,\\n+                    errors::InvalidArgument(\\n+                        \"Indices value along the first dimension must be \",\\n+                        \"lower than the first index of the shape.\", \"Got \",\\n+                        batch, \" as batch and \", num_batches,\\n+                        \" as the first dimension of the shape.\"));\\n+      }\\n       const auto& value = values_values(idx);\\n       if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\\n         if (binary_output_) {'}}",
            "message_norm":"fix segfaults in `tf.raw_ops.sparsecountsparseoutput`.\n\npiperorigin-revid: 360547563\nchange-id: i781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
            "language":"en",
            "entities":"[('segfaults', 'SECWORD', ''), ('360547563', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/count_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":144,
            "vuln_id":"GHSA-2v7p-f4qm-r5pc",
            "cwe_id":"{'CWE-89'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/523a735ab94f004459b84ffdfd3db784586bbd82'}",
            "dataset":"osv",
            "summary":"SQL Injection found in Pimcore Pimcore is an open source data & experience management platform. A SQL injection was discovered in GridHelperService.php in GitHub repository pimcore\/pimcore prior to 10.3.6.",
            "published_date":"2022-04-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/523a735ab94f004459b84ffdfd3db784586bbd82",
            "commit_sha":"523a735ab94f004459b84ffdfd3db784586bbd82",
            "patch":"SINGLE",
            "chain_ord":"['523a735ab94f004459b84ffdfd3db784586bbd82']",
            "before_first_fix_commit":"{'f29d3b2f305865c6e9884c460fb35bcf21bcf29f'}",
            "last_fix_commit":"523a735ab94f004459b84ffdfd3db784586bbd82",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2022, 09:05:32",
            "message":"Fixed column quoting in GridHelperService",
            "author":"Bernhard Rusch",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 2, 'total': 7}",
            "files":"{'bundles\/AdminBundle\/Helper\/GridHelperService.php': {'additions': 5, 'deletions': 2, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/523a735ab94f004459b84ffdfd3db784586bbd82\/bundles%2FAdminBundle%2FHelper%2FGridHelperService.php', 'patch': \"@@ -332,12 +332,13 @@ public function getFilterCondition($filterJson, ClassDefinition $class, $tablePr\\n                         } elseif ($filterField == 'id') {\\n                             $conditionPartsFilters[] = 'oo_id ' . $operator . ' ' . $db->quote($filter['value']);\\n                         } else {\\n+                            $filterField = $db->quoteIdentifier('o_' . $filterField);\\n                             if ($filter['type'] == 'date' && $operator == '=') {\\n                                 \/\/if the equal operator is chosen with the date type, condition has to be changed\\n                                 $maxTime = $filter['value'] + (86400 - 1); \/\/specifies the top point of the range used in the condition\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n+                                $conditionPartsFilters[] = $filterField . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\\n                             } else {\\n-                                $conditionPartsFilters[] = '`o_' . $filterField . '` ' . $operator . ' ' . $db->quote($filter['value']);\\n+                                $conditionPartsFilters[] = $filterField . ' ' . $operator . ' ' . $db->quote($filter['value']);\\n                             }\\n                         }\\n                     }\\n@@ -780,6 +781,8 @@ public function prepareAssetListingForGrid($allParams, $adminUser)\\n \\n                 if ($filterField == 'fullpath') {\\n                     $filterField = 'CONCAT(path,filename)';\\n+                }else {\\n+                    $filterField = $db->quoteIdentifier($filterField);\\n                 }\\n \\n                 if (isset($filterDef[1]) && $filterDef[1] == 'system') {\"}}",
            "message_norm":"fixed column quoting in gridhelperservice",
            "language":"en",
            "entities":"[('fixed', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Helper\/GridHelperService.php'])",
            "num_files":1.0
        },
        {
            "index":2277,
            "vuln_id":"GHSA-jmgf-p46x-982h",
            "cwe_id":"{'CWE-352'}",
            "score":0.0,
            "chain":"{'http:\/\/github.com\/rails\/rails\/commit\/7282ed863ca7e6f928bae9162c9a63a98775a19d'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects rails CRLF injection vulnerability in Ruby on Rails before 2.0.5 allows remote attackers to inject arbitrary HTTP headers and conduct HTTP response splitting attacks via a crafted URL to the redirect_to function.",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"http:\/\/github.com\/rails\/rails",
            "commit_href":"http:\/\/github.com\/rails\/rails\/commit\/7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "commit_sha":"7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "patch":"SINGLE",
            "chain_ord":"['7282ed863ca7e6f928bae9162c9a63a98775a19d']",
            "before_first_fix_commit":"{'e8577991dcc47bcb11f99fd6582ee2a3f8270498'}",
            "last_fix_commit":"7282ed863ca7e6f928bae9162c9a63a98775a19d",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/14\/2008, 09:47:27",
            "message":"Sanitize the URLs passed to redirect_to to prevent a potential response spli\n\nCGI.rb and mongrel don't do any sanitization of the contents of HTTP headers",
            "author":"Michael Koziarski",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'actionpack\/lib\/action_controller\/response.rb': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rails\/rails\/raw\/7282ed863ca7e6f928bae9162c9a63a98775a19d\/actionpack%2Flib%2Faction_controller%2Fresponse.rb', 'patch': '@@ -30,9 +30,9 @@ def charset\\n \\n     def redirect(to_url, response_status)\\n       self.headers[\"Status\"] = response_status\\n-      self.headers[\"Location\"] = to_url\\n+      self.headers[\"Location\"] = to_url.gsub(\/[\\\\r\\\\n]\/, \\'\\')\\n \\n-      self.body = \"<html><body>You are being <a href=\\\\\"#{to_url}\\\\\">redirected<\/a>.<\/body><\/html>\"\\n+      self.body = \"<html><body>You are being <a href=\\\\\"#{CGI.escapeHTML(to_url)}\\\\\">redirected<\/a>.<\/body><\/html>\"\\n     end\\n \\n     def prepare!'}}",
            "message_norm":"sanitize the urls passed to redirect_to to prevent a potential response spli\n\ncgi.rb and mongrel don't do any sanitization of the contents of http headers",
            "language":"en",
            "entities":"[('sanitize', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('sanitization', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['actionpack\/lib\/action_controller\/response.rb'])",
            "num_files":1.0
        },
        {
            "index":1226,
            "vuln_id":"GHSA-8jxq-75rw-fhj9",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/pyeve\/eve\/commit\/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98'}",
            "dataset":"osv",
            "summary":"Eve allows execution of arbitrary code via Code Injection in the where parameter io\/mongo\/parser.py in Eve (aka pyeve) before 0.7.5 allows remote attackers to execute arbitrary code via Code Injection in the where parameter.",
            "published_date":"2018-07-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/pyeve\/eve",
            "commit_href":"https:\/\/github.com\/pyeve\/eve\/commit\/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
            "commit_sha":"f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
            "patch":"SINGLE",
            "chain_ord":"['f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98']",
            "before_first_fix_commit":"{'6d1526bf8ad93a3d259b1fd357f0c40e4ed9dbf5'}",
            "last_fix_commit":"f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/14\/2018, 16:51:26",
            "message":"fix mongo visitor parser",
            "author":"Nicola Iarocci",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'eve\/io\/mongo\/parser.py': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pyeve\/eve\/raw\/f8f7019ffdf9b4e05faf95e1f04e204aa4c91f98\/eve%2Fio%2Fmongo%2Fparser.py', 'patch': '@@ -122,16 +122,19 @@ def visit_Call(self, node):\\n         datetime().\\n         \"\"\"\\n         if isinstance(node.func, ast.Name):\\n-            expr = None\\n             if node.func.id == \\'ObjectId\\':\\n-                expr = \"(\\'\" + node.args[0].s + \"\\')\"\\n+                try:\\n+                    self.current_value = ObjectId(node.args[0].s)\\n+                except:\\n+                    pass\\n             elif node.func.id == \\'datetime\\':\\n                 values = []\\n                 for arg in node.args:\\n-                    values.append(str(arg.n))\\n-                expr = \"(\" + \", \".join(values) + \")\"\\n-            if expr:\\n-                self.current_value = eval(node.func.id + expr)\\n+                    values.append(arg.n)\\n+                try:\\n+                    self.current_value = datetime(*values)\\n+                except:\\n+                    pass\\n \\n     def visit_Attribute(self, node):\\n         \"\"\" Attribute handler (\\'Contact.Id\\').'}}",
            "message_norm":"fix mongo visitor parser",
            "language":"it",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['eve\/io\/mongo\/parser.py'])",
            "num_files":1.0
        },
        {
            "index":822,
            "vuln_id":"GHSA-6f84-42vf-ppwp",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6'}",
            "dataset":"osv",
            "summary":"Division by 0 in `QuantizedMul` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedMul`:\n\n```python\nimport tensorflow as tf\n\nx = tf.zeros([4, 1], dtype=tf.quint8)\ny = tf.constant([], dtype=tf.quint8)\nmin_x = tf.constant(0.0)\nmax_x = tf.constant(0.0010000000474974513)\nmin_y = tf.constant(0.0)\nmax_y = tf.constant(0.0010000000474974513)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```                            \n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/55900e961ed4a23b438392024912154a2c2f5e85\/tensorflow\/core\/kernels\/quantized_mul_op.cc#L188-L198) does a division by a quantity that is controlled by the caller:\n\n```cc\ntemplate <class T, class Toutput>\nvoid VectorTensorMultiply(const T* vector_data, int32 vector_offset,\n                          int64 vector_num_elements, const T* tensor_data,\n                          int32 tensor_offset, int64 tensor_num_elements,\n                          Toutput* output) {\n  for (int i = 0; i < tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "commit_sha":"a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "patch":"SINGLE",
            "chain_ord":"['a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6']",
            "before_first_fix_commit":"{'55900e961ed4a23b438392024912154a2c2f5e85'}",
            "last_fix_commit":"a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 17:52:46",
            "message":"Fix one division by zero\n\nPiperOrigin-RevId: 369474832\nChange-Id: I1082858ed78d9b2e4738ce30b231955973d49e1e",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/quantized_mul_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6\/tensorflow%2Fcore%2Fkernels%2Fquantized_mul_op.cc', 'patch': '@@ -347,6 +347,11 @@ class QuantizedMulOp : public OpKernel {\\n         tensor_num_elements = x.NumElements();\\n         tensor_offset = offset_x;\\n       }\\n+      if (vector_num_elements == 0) {\\n+        context->SetStatus(\\n+            errors::InvalidArgument(\"vector must have at least 1 element\"));\\n+        return;\\n+      }\\n       VectorTensorMultiply<T, Toutput>(\\n           vector_data, vector_offset, vector_num_elements, tensor_data,\\n           tensor_offset, tensor_num_elements, z_data);'}}",
            "message_norm":"fix one division by zero\n\npiperorigin-revid: 369474832\nchange-id: i1082858ed78d9b2e4738ce30b231955973d49e1e",
            "language":"it",
            "entities":"[('fix', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('369474832', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_mul_op.cc'])",
            "num_files":1.0
        },
        {
            "index":38,
            "vuln_id":"GHSA-2647-c639-qv2j",
            "cwe_id":"{'CWE-918'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8'}",
            "dataset":"osv",
            "summary":"Server-Side Request Forgery in calibreweb calibreweb prior to version 0.6.17 is vulnerable to server-side request forgery (SSRF). This is due to an incomplete fix for [CVE-2022-0339](https:\/\/github.com\/advisories\/GHSA-4w8p-x6g8-fv64). The blacklist does not check for `0.0.0.0`, which would result in a payload of `0.0.0.0` resolving to `localhost`.",
            "published_date":"2022-03-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/janeczku\/calibre-web",
            "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "commit_sha":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "patch":"SINGLE",
            "chain_ord":"['965352c8d96c9eae7a6867ff76b0db137d04b0b8']",
            "before_first_fix_commit":"{'8007e450b3178f517b83b0989744c6df38867932'}",
            "last_fix_commit":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/26\/2022, 07:05:35",
            "message":"Don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
            "author":"Ozzie Isaacs",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'cps\/helper.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/965352c8d96c9eae7a6867ff76b0db137d04b0b8\/cps%2Fhelper.py', 'patch': '@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):\\n         if not cli.allow_localhost:\\n             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]\\n             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]\\n-            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\":\\n+            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":\\n                 log.error(\"Localhost was accessed for cover upload\")\\n                 return False, _(\"You are not allowed to access localhost for cover uploads\")\\n-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling\\n+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling\\n         img.raise_for_status()\\n         return save_cover(img, book_path)\\n     except (socket.gaierror,'}}",
            "message_norm":"don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
            "language":"en",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"REDUNDANT_MESSAGE",
            "list_files":"dict_keys(['cps\/helper.py'])",
            "num_files":1.0
        },
        {
            "index":3095,
            "vuln_id":"GHSA-vcfc-9wcp-j623",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/ServiceStack\/ServiceStack\/commit\/a0e0d7de20f5d1712f1793f925496def4383c610'}",
            "dataset":"osv",
            "summary":"Cross site scripting attack in ServiceStack Framework ServiceStack ServiceStack Framework 4.5.14 is affected by: Cross Site Scripting (XSS). The impact is: JavaScrpit is reflected in the server response, hence executed by the browser. The component is: the query used in the GET request is prone. The attack vector is: Since there is no server-side validation and If Browser encoding is bypassed, the victim is affected when opening a crafted URL. The fixed version is: 5.2.0.",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/ServiceStack\/ServiceStack",
            "commit_href":"https:\/\/github.com\/ServiceStack\/ServiceStack\/commit\/a0e0d7de20f5d1712f1793f925496def4383c610",
            "commit_sha":"a0e0d7de20f5d1712f1793f925496def4383c610",
            "patch":"SINGLE",
            "chain_ord":"['a0e0d7de20f5d1712f1793f925496def4383c610']",
            "before_first_fix_commit":"{'2c6fbe4554014ead15b7b188bb748b655b30807c'}",
            "last_fix_commit":"a0e0d7de20f5d1712f1793f925496def4383c610",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/17\/2018, 15:05:59",
            "message":"HtmlEncode Raw URL in HtmlFormat snapshot",
            "author":"Demis Bellot",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'src\/ServiceStack\/Formats\/HtmlFormat.cs': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ServiceStack\/ServiceStack\/raw\/a0e0d7de20f5d1712f1793f925496def4383c610\/src%2FServiceStack%2FFormats%2FHtmlFormat.cs', 'patch': '@@ -90,12 +90,13 @@ public async Task SerializeToStreamAsync(IRequest req, object response, Stream o\\n             {\\n                 \/\/ Serialize then escape any potential script tags to avoid XSS when displaying as HTML\\n                 var json = JsonDataContractSerializer.Instance.SerializeToString(dto) ?? \"null\";\\n-                json = json.Replace(\"<\", \"&lt;\").Replace(\">\", \"&gt;\");\\n+                json = json.HtmlEncode();\\n \\n                 var url = req.ResolveAbsoluteUrl()\\n                     .Replace(\"format=html\", \"\")\\n                     .Replace(\"format=shtm\", \"\")\\n-                    .TrimEnd(\\'?\\', \\'&\\');\\n+                    .TrimEnd(\\'?\\', \\'&\\')\\n+                    .HtmlEncode();\\n \\n                 url += url.Contains(\"?\") ? \"&\" : \"?\";'}}",
            "message_norm":"htmlencode raw url in htmlformat snapshot",
            "language":"en",
            "entities":"[('htmlencode', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/ServiceStack\/Formats\/HtmlFormat.cs'])",
            "num_files":1.0
        },
        {
            "index":351,
            "vuln_id":"GHSA-4449-hg37-77v8",
            "cwe_id":"{'CWE-78'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/totaljs\/framework\/commit\/6192491ab2631e7c1d317c221f18ea613e2c18a5'}",
            "dataset":"osv",
            "summary":"Command injection in total.js There is a command injection vulnerability that affects the package total.js before version 3.4.7. The issue occurs in the image.pipe and image.stream functions. The type parameter is used to build the command that is then executed using child_process.spawn. The issue occurs because child_process.spawn is called with the option shell set to true and because the type parameter is not properly sanitized.",
            "published_date":"2021-02-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/totaljs\/framework",
            "commit_href":"https:\/\/github.com\/totaljs\/framework\/commit\/6192491ab2631e7c1d317c221f18ea613e2c18a5",
            "commit_sha":"6192491ab2631e7c1d317c221f18ea613e2c18a5",
            "patch":"SINGLE",
            "chain_ord":"['6192491ab2631e7c1d317c221f18ea613e2c18a5']",
            "before_first_fix_commit":"{'79e84ada0a4455a2fe2383bed6436f231290276a'}",
            "last_fix_commit":"6192491ab2631e7c1d317c221f18ea613e2c18a5",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/27\/2020, 16:36:16",
            "message":"Fixed \"Command Injection\" in `image.stream()` - thank to Sam Sanoop.",
            "author":"Peter Sirka",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'image.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/totaljs\/framework\/raw\/6192491ab2631e7c1d317c221f18ea613e2c18a5\/image.js', 'patch': '@@ -38,6 +38,7 @@ const SPAWN_OPT = { shell: true };\\n const D = require(\\'os\\').platform().substring(0, 3).toLowerCase() === \\'win\\' ? \\'\"\\' : \\'\\\\\\'\\';\\n const CMD_CONVERT = { gm: \\'gm\\', im: \\'convert\\', magick: \\'magick\\' };\\n const CMD_CONVERT2 = { gm: \\'gm convert\\', im: \\'convert\\', magick: \\'magick\\' };\\n+const SUPPORTEDIMAGES = { jpg: 1, png: 1, gif: 1, apng: 1, jpeg: 1, heif: 1, heic: 1, webp: 1, ico: 1 };\\n \\n var CACHE = {};\\n var middlewares = {};\\n@@ -322,7 +323,7 @@ ImageProto.stream = function(type, writer) {\\n \\n \\t!self.builder.length && self.minify();\\n \\n-\\tif (!type)\\n+\\tif (!type || !SUPPORTEDIMAGES[type])\\n \\t\\ttype = self.outputType;\\n \\n \\tF.stats.performance.open++;'}}",
            "message_norm":"fixed \"command injection\" in `image.stream()` - thank to sam sanoop.",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['image.js'])",
            "num_files":1.0
        },
        {
            "index":2178,
            "vuln_id":"GHSA-j3mj-fhpq-qqjj",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3'}",
            "dataset":"osv",
            "summary":"Reachable Assertion in Tensorflow ### Impact\nWhen decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. \n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5b491cd5e41ad63735161cec9c2a568172c8b6a3",
            "commit_sha":"5b491cd5e41ad63735161cec9c2a568172c8b6a3",
            "patch":"SINGLE",
            "chain_ord":"['5b491cd5e41ad63735161cec9c2a568172c8b6a3']",
            "before_first_fix_commit":"{'9f3eb61a8033efa4ef45b1f291ef67d5beef8b0e'}",
            "last_fix_commit":"5b491cd5e41ad63735161cec9c2a568172c8b6a3",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/08\/2021, 17:51:28",
            "message":"Validate `proto.dtype()` before calling `set_dtype()`.\n\nThis prevents a `DCHECK`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\nPiperOrigin-RevId: 408369083\nChange-Id: Ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/core\/framework\/tensor.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5b491cd5e41ad63735161cec9c2a568172c8b6a3\/tensorflow%2Fcore%2Fframework%2Ftensor.cc', 'patch': '@@ -983,6 +983,15 @@ bool Tensor::FromProto(Allocator* a, const TensorProto& proto) {\\n                          dtype_error = true, dtype_error = true);\\n     }\\n     if (dtype_error || p == nullptr) return false;\\n+  } else {\\n+    \/\/ Handle the case of empty tensors (N = 0) or tensors with incomplete shape\\n+    \/\/ (N = -1). All other values of `shape.num_elements()` should be invalid by\\n+    \/\/ construction.\\n+    \/\/ Here, we just need to validate that the `proto.dtype()` value is valid.\\n+    bool dtype_error = false;\\n+    CASES_WITH_DEFAULT(proto.dtype(), break, dtype_error = true,\\n+                       dtype_error = true);\\n+    if (dtype_error) return false;\\n   }\\n   shape_ = shape;\\n   set_dtype(proto.dtype());'}}",
            "message_norm":"validate `proto.dtype()` before calling `set_dtype()`.\n\nthis prevents a `dcheck`-fail when the proto contains an invalid dtype for a tensor shape with 0 elements or for an incomplete tensor shape.\n\npiperorigin-revid: 408369083\nchange-id: ia21a3e3d62a90d642a4561f08f3b543e5ad00c46",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('prevents', 'ACTION', ''), ('408369083', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/tensor.cc'])",
            "num_files":1.0
        },
        {
            "index":227,
            "vuln_id":"GHSA-393f-2jr3-cp69",
            "cwe_id":"{'CWE-754'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b432a38fe0e1b4b904a6c222cbce794c39703e87'}",
            "dataset":"osv",
            "summary":"CHECK-fail in DrawBoundingBoxes ### Impact\nAn attacker can trigger a denial of service via a `CHECK` failure by passing an empty image to `tf.raw_ops.DrawBoundingBoxes`:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([53, 0, 48, 1], 0.)\nboxes = tf.fill([53, 31, 4], 0.)\nboxes = tf.Variable(boxes)\nboxes[0, 0, 0].assign(3.90621)\ntf.raw_ops.DrawBoundingBoxes(images=images, boxes=boxes)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91\/tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc#L148-L165) uses `CHECK_*` assertions instead of `OP_REQUIRES` to validate user controlled inputs. Whereas `OP_REQUIRES` allows returning an error condition back to the user, the `CHECK_*` macros result in a crash if the condition is false, similar to `assert`.\n\n```cc\nconst int64 max_box_row_clamp = std::min<int64>(max_box_row, height - 1);\n... \nCHECK_GE(max_box_row_clamp, 0);\n``` \n    \nIn this case, `height` is 0 from the `images` input. This results in `max_box_row_clamp` being negative and the assertion being falsified, followed by aborting program execution.\n    \n### Patches\nWe have patched the issue in GitHub commit [b432a38fe0e1b4b904a6c222cbce794c39703e87](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b432a38fe0e1b4b904a6c222cbce794c39703e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b432a38fe0e1b4b904a6c222cbce794c39703e87",
            "commit_sha":"b432a38fe0e1b4b904a6c222cbce794c39703e87",
            "patch":"SINGLE",
            "chain_ord":"['b432a38fe0e1b4b904a6c222cbce794c39703e87']",
            "before_first_fix_commit":"{'ea34a18dc3f5c8d80a40ccca1404f343b5d55f91'}",
            "last_fix_commit":"b432a38fe0e1b4b904a6c222cbce794c39703e87",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 22:57:36",
            "message":"Fix overflow CHECK issue with `tf.raw_ops.DrawBoundingBoxes`.\n\nPiperOrigin-RevId: 369753591\nChange-Id: I3b45fc98ee0d28a3c20b7e9c995aa647c976ec40",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 36, 'deletions': 12, 'total': 48}",
            "files":"{'tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc': {'additions': 36, 'deletions': 12, 'changes': 48, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b432a38fe0e1b4b904a6c222cbce794c39703e87\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fdraw_bounding_box_op.cc', 'patch': '@@ -147,22 +147,46 @@ class DrawBoundingBoxesOp : public OpKernel {\\n \\n         \/\/ At this point, {min,max}_box_{row,col}_clamp are inside the\\n         \/\/ image.\\n-        CHECK_GE(min_box_row_clamp, 0);\\n-        CHECK_GE(max_box_row_clamp, 0);\\n-        CHECK_LT(min_box_row_clamp, height);\\n-        CHECK_LT(max_box_row_clamp, height);\\n-        CHECK_GE(min_box_col_clamp, 0);\\n-        CHECK_GE(max_box_col_clamp, 0);\\n-        CHECK_LT(min_box_col_clamp, width);\\n-        CHECK_LT(max_box_col_clamp, width);\\n+        OP_REQUIRES(\\n+            context, min_box_row_clamp >= 0,\\n+            errors::InvalidArgument(\"Min box row clamp is less than 0.\"));\\n+        OP_REQUIRES(\\n+            context, max_box_row_clamp >= 0,\\n+            errors::InvalidArgument(\"Max box row clamp is less than 0.\"));\\n+        OP_REQUIRES(context, min_box_row_clamp <= height,\\n+                    errors::InvalidArgument(\\n+                        \"Min box row clamp is greater than height.\"));\\n+        OP_REQUIRES(context, max_box_row_clamp <= height,\\n+                    errors::InvalidArgument(\\n+                        \"Max box row clamp is greater than height.\"));\\n+\\n+        OP_REQUIRES(\\n+            context, min_box_col_clamp >= 0,\\n+            errors::InvalidArgument(\"Min box col clamp is less than 0.\"));\\n+        OP_REQUIRES(\\n+            context, max_box_col_clamp >= 0,\\n+            errors::InvalidArgument(\"Max box col clamp is less than 0.\"));\\n+        OP_REQUIRES(context, min_box_col_clamp <= width,\\n+                    errors::InvalidArgument(\\n+                        \"Min box col clamp is greater than width.\"));\\n+        OP_REQUIRES(context, max_box_col_clamp <= width,\\n+                    errors::InvalidArgument(\\n+                        \"Max box col clamp is greater than width.\"));\\n \\n         \/\/ At this point, the min_box_row and min_box_col are either\\n         \/\/ in the image or above\/left of it, and max_box_row and\\n         \/\/ max_box_col are either in the image or below\/right or it.\\n-        CHECK_LT(min_box_row, height);\\n-        CHECK_GE(max_box_row, 0);\\n-        CHECK_LT(min_box_col, width);\\n-        CHECK_GE(max_box_col, 0);\\n+\\n+        OP_REQUIRES(\\n+            context, min_box_row <= height,\\n+            errors::InvalidArgument(\"Min box row is greater than height.\"));\\n+        OP_REQUIRES(context, max_box_row >= 0,\\n+                    errors::InvalidArgument(\"Max box row is less than 0.\"));\\n+        OP_REQUIRES(\\n+            context, min_box_col <= width,\\n+            errors::InvalidArgument(\"Min box col is greater than width.\"));\\n+        OP_REQUIRES(context, max_box_col >= 0,\\n+                    errors::InvalidArgument(\"Max box col is less than 0.\"));\\n \\n         \/\/ Draw top line.\\n         if (min_box_row >= 0) {'}}",
            "message_norm":"fix overflow check issue with `tf.raw_ops.drawboundingboxes`.\n\npiperorigin-revid: 369753591\nchange-id: i3b45fc98ee0d28a3c20b7e9c995aa647c976ec40",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('369753591', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/draw_bounding_box_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2795,
            "vuln_id":"GHSA-qpv2-jxc7-3638",
            "cwe_id":"{'CWE-200'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/05c0819776b07425b2831cd31a8a0f4e7ac30c09'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information in snipe\/snipe-it Snipe-IT prior to v5.3.10 is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/05c0819776b07425b2831cd31a8a0f4e7ac30c09",
            "commit_sha":"05c0819776b07425b2831cd31a8a0f4e7ac30c09",
            "patch":"SINGLE",
            "chain_ord":"['05c0819776b07425b2831cd31a8a0f4e7ac30c09']",
            "before_first_fix_commit":"{'16f963fa3d7c4875e9bccf6926629efe3530d00e'}",
            "last_fix_commit":"05c0819776b07425b2831cd31a8a0f4e7ac30c09",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2022, 23:55:42",
            "message":"Updated language string\n\nSigned-off-by: snipe <snipe@snipe.net>",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'resources\/lang\/en\/passwords.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/05c0819776b07425b2831cd31a8a0f4e7ac30c09\/resources%2Flang%2Fen%2Fpasswords.php', 'patch': \"@@ -1,6 +1,6 @@\\n <?php\\n \\n return [\\n-    'sent'\\t        => 'Your password link has been sent!',\\n+    'sent'\\t        => 'Success: If that email address exists in our system, a password recovery email has been sent.',\\n     'user'\\t\\t\\t=> 'No matching active user found with that email.',\\n ];\"}}",
            "message_norm":"updated language string\n\nsigned-off-by: snipe <snipe@snipe.net>",
            "language":"en",
            "entities":"[('updated', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['resources\/lang\/en\/passwords.php'])",
            "num_files":1.0
        },
        {
            "index":1578,
            "vuln_id":"GHSA-cpgw-2wxr-pww3",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/1f247cf8139cb483276cd8dd06385a800ce9d4b2'}",
            "dataset":"osv",
            "summary":"Open Redirect Open redirect vulnerability in Gogs before 0.12 allows remote attackers to redirect users to arbitrary websites and conduct phishing attacks via an initial \/\\ substring in the user\/login redirect_to parameter, related to the function isValidRedirect in routes\/user\/auth.go.",
            "published_date":"2021-06-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/gogs\/gogs",
            "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/1f247cf8139cb483276cd8dd06385a800ce9d4b2",
            "commit_sha":"1f247cf8139cb483276cd8dd06385a800ce9d4b2",
            "patch":"SINGLE",
            "chain_ord":"['1f247cf8139cb483276cd8dd06385a800ce9d4b2']",
            "before_first_fix_commit":"{'c9bb33afc3ae35db21b26fd914bd80ca277a4e0d'}",
            "last_fix_commit":"1f247cf8139cb483276cd8dd06385a800ce9d4b2",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/06\/2018, 09:10:16",
            "message":"routes: fix open redirect vulnerability #5364 (#5365)",
            "author":"chromium1337",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'routes\/user\/auth.go': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/1f247cf8139cb483276cd8dd06385a800ce9d4b2\/routes%2Fuser%2Fauth.go', 'patch': \"@@ -73,10 +73,10 @@ func AutoLogin(c *context.Context) (bool, error) {\\n }\\n \\n \/\/ isValidRedirect returns false if the URL does not redirect to same site.\\n-\/\/ False: \/\/url, http:\/\/url\\n+\/\/ False: \/\/url, http:\/\/url, \/\\\\url\\n \/\/ True: \/url\\n func isValidRedirect(url string) bool {\\n-\\treturn len(url) >= 2 && url[0] == '\/' && url[1] != '\/'\\n+\\treturn len(url) >= 2 && url[0] == '\/' && url[1] != '\/' && url[1] != '\\\\\\\\'\\n }\\n \\n func Login(c *context.Context) {\"}}",
            "message_norm":"routes: fix open redirect vulnerability #5364 (#5365)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#5364', 'ISSUE', ''), ('#5365', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['routes\/user\/auth.go'])",
            "num_files":1.0
        },
        {
            "index":839,
            "vuln_id":"GHSA-6gv8-p3vj-pxvr",
            "cwe_id":"{'CWE-476'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7bdf50bb4f5c54a4997c379092888546c97c3ebd'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in `UncompressElement` ### Impact\nThe code for `tf.raw_ops.UncompressElement` can be made to trigger a null pointer dereference: \n\n```python\nimport tensorflow as tf\n\ndata = tf.data.Dataset.from_tensors([0.0])\ntf.raw_ops.UncompressElement(\n  compressed=tf.data.experimental.to_variant(data),\n  output_types=[tf.int64],\n  output_shapes=[2])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/data\/experimental\/compression_ops.cc#L50-L53) obtains a pointer to a `CompressedElement` from a `Variant` tensor and then proceeds to dereference it for decompressing. There is no check that the `Variant` tensor contained a `CompressedElement`, so the pointer is actually `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [7bdf50bb4f5c54a4997c379092888546c97c3ebd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7bdf50bb4f5c54a4997c379092888546c97c3ebd).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/7bdf50bb4f5c54a4997c379092888546c97c3ebd",
            "commit_sha":"7bdf50bb4f5c54a4997c379092888546c97c3ebd",
            "patch":"SINGLE",
            "chain_ord":"['7bdf50bb4f5c54a4997c379092888546c97c3ebd']",
            "before_first_fix_commit":"{'a21a1226a1dbc08e257e4344324d5881fbd95d4e'}",
            "last_fix_commit":"7bdf50bb4f5c54a4997c379092888546c97c3ebd",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/10\/2021, 00:45:15",
            "message":"Ensure non-empty compressed input in tf.raw_ops.UncompressElement\n\nPiperOrigin-RevId: 383955815\nChange-Id: I072a84fd02738dd2f51b3f42836ed80067dba4a8",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/data\/experimental\/compression_ops.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/7bdf50bb4f5c54a4997c379092888546c97c3ebd\/tensorflow%2Fcore%2Fkernels%2Fdata%2Fexperimental%2Fcompression_ops.cc', 'patch': '@@ -48,6 +48,11 @@ void UncompressElementOp::Compute(OpKernelContext* ctx) {\\n   Tensor tensor = ctx->input(0);\\n   const Variant& variant = tensor.scalar<Variant>()();\\n   const CompressedElement* compressed = variant.get<CompressedElement>();\\n+  OP_REQUIRES(\\n+      ctx, compressed != nullptr,\\n+      errors::InvalidArgument(\\n+          \"Input does not contain a compressed element. Instead got tensor \",\\n+          tensor.DebugString()));\\n \\n   std::vector<Tensor> components;\\n   OP_REQUIRES_OK(ctx, UncompressElement(*compressed, &components));'}}",
            "message_norm":"ensure non-empty compressed input in tf.raw_ops.uncompresselement\n\npiperorigin-revid: 383955815\nchange-id: i072a84fd02738dd2f51b3f42836ed80067dba4a8",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('compressed', 'SECWORD', ''), ('tf.raw_ops.uncompresselement', 'SECWORD', ''), ('383955815', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/data\/experimental\/compression_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2364,
            "vuln_id":"GHSA-m648-33qf-v3gp",
            "cwe_id":"{'CWE-20'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3'}",
            "dataset":"osv",
            "summary":"CHECK-fail in LSTM with zero-length input in TensorFlow ### Impact\nRunning an LSTM\/GRU model where the LSTM\/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.\n\nThis can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.\n\n### Patches\nWe have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2020-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14755416e364f17fb1870882fa778c7fec7f16e3",
            "commit_sha":"14755416e364f17fb1870882fa778c7fec7f16e3",
            "patch":"SINGLE",
            "chain_ord":"['14755416e364f17fb1870882fa778c7fec7f16e3']",
            "before_first_fix_commit":"{'042a6923d7f9ff05e7514bf6011e4ca30be70113'}",
            "last_fix_commit":"14755416e364f17fb1870882fa778c7fec7f16e3",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2020, 04:31:31",
            "message":"Prevent CHECK-fail in LSTM\/GRU with zero-length input.\n\nPiperOrigin-RevId: 346239181\nChange-Id: I5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'tensorflow\/stream_executor\/cuda\/cuda_dnn.cc': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/14755416e364f17fb1870882fa778c7fec7f16e3\/tensorflow%2Fstream_executor%2Fcuda%2Fcuda_dnn.cc', 'patch': '@@ -1468,7 +1468,9 @@ class CudnnRnnSequenceTensorDescriptor\\n   static port::StatusOr<CudnnRnnSequenceTensorDescriptor> Create(\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();\\n@@ -1486,7 +1488,9 @@ class CudnnRnnSequenceTensorDescriptor\\n       GpuExecutor* parent, int max_seq_length, int batch_size, int data_size,\\n       const absl::Span<const int>& seq_lengths, bool time_major,\\n       cudnnDataType_t data_type) {\\n-    CHECK_GT(max_seq_length, 0);\\n+    if (max_seq_length <= 0) {\\n+      return port::Status(port::error::INVALID_ARGUMENT, \"max_seq_length <= 0\");\\n+    }\\n     int dims[] = {batch_size, data_size, 1};\\n     int strides[] = {dims[1] * dims[2], dims[2], 1};\\n     TensorDescriptor tensor_desc = CreateTensorDescriptor();'}}",
            "message_norm":"prevent check-fail in lstm\/gru with zero-length input.\n\npiperorigin-revid: 346239181\nchange-id: i5f233dbc076aab7bb4e31ba24f5abd4eaf99ea4f",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('346239181', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/stream_executor\/cuda\/cuda_dnn.cc'])",
            "num_files":1.0
        },
        {
            "index":2183,
            "vuln_id":"GHSA-j472-mcq2-95p6",
            "cwe_id":"{'CWE-78'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/67f68c181033cbabf2075769e0f846f58c226c08', 'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/d7ea3f40efedd50541a57b943d5f7bbed046d091'}",
            "dataset":"osv",
            "summary":"OS Command Injection in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier users with permission to create or configure agents in Jenkins could configure a launch method called 'Launch agent via execution of command on master'. This allowed them to run arbitrary shell commands on the master node whenever the agent was supposed to be launched. Configuration of this launch method now requires the Run Scripts permission typically only granted to administrators.",
            "published_date":"2022-05-14",
            "chain_len":2,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/67f68c181033cbabf2075769e0f846f58c226c08",
            "commit_sha":"67f68c181033cbabf2075769e0f846f58c226c08",
            "patch":"MULTI",
            "chain_ord":"['d7ea3f40efedd50541a57b943d5f7bbed046d091', '67f68c181033cbabf2075769e0f846f58c226c08']",
            "before_first_fix_commit":"{'3ff432ace14d8f4544c88a179a2f7a962eb98ba6'}",
            "last_fix_commit":"67f68c181033cbabf2075769e0f846f58c226c08",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/28\/2017, 15:37:47",
            "message":"[SECURITY-478] Strengthening test.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'test\/src\/test\/java\/hudson\/slaves\/CommandLauncher2Test.java': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/67f68c181033cbabf2075769e0f846f58c226c08\/test%2Fsrc%2Ftest%2Fjava%2Fhudson%2Fslaves%2FCommandLauncher2Test.java', 'patch': '@@ -29,15 +29,19 @@\\n import com.gargoylesoftware.htmlunit.WebRequest;\\n import com.gargoylesoftware.htmlunit.html.HtmlForm;\\n import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\\n+import hudson.XmlFile;\\n import hudson.cli.CLICommand;\\n import hudson.cli.CLICommandInvoker;\\n import hudson.cli.UpdateNodeCommand;\\n import hudson.model.Computer;\\n import hudson.model.User;\\n+import java.io.File;\\n+import java.io.IOException;\\n import java.net.HttpURLConnection;\\n+import javax.annotation.CheckForNull;\\n import jenkins.model.Jenkins;\\n import org.apache.tools.ant.filters.StringInputStream;\\n-import static org.hamcrest.Matchers.containsString;\\n+import static org.hamcrest.Matchers.*;\\n import org.junit.Test;\\n import static org.junit.Assert.*;\\n import org.junit.Rule;\\n@@ -73,6 +77,7 @@ public void evaluate() throws Throwable {\\n                 rr.j.submit(form);\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by GUI\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by GUI\");\\n                 \/\/ Then by REST.\\n                 String configDotXml = s.toComputer().getUrl() + \"config.xml\";\\n                 String xml = wc.goTo(configDotXml, \"application\/xml\").getWebResponse().getContentAsString();\\n@@ -83,14 +88,17 @@ public void evaluate() throws Throwable {\\n                 wc.getPage(req);\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by REST\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by REST\");\\n                 \/\/ Then by CLI.\\n                 CLICommand cmd = new UpdateNodeCommand();\\n                 cmd.setTransportAuth(User.get(\"admin\").impersonate());\\n                 assertThat(new CLICommandInvoker(rr.j, cmd).withStdin(new StringInputStream(xml.replace(\"echo configured by GUI\", \"echo configured by CLI\"))).invokeWithArgs(\"s\"), CLICommandInvoker.Matcher.succeededSilently());\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by CLI\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by CLI\");\\n                 \/\/ Now verify that all modes failed as dev. First as GUI.\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n+                s.save();\\n                 wc = rr.j.createWebClient().login(\"dev\");\\n                 form = wc.getPage(s, \"configure\").getFormByName(\"config\");\\n                 input = form.getInputByName(\"_.command\");\\n@@ -104,6 +112,7 @@ public void evaluate() throws Throwable {\\n                 }\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertEquals(\"echo configured by admin\", ((CommandLauncher) s.getLauncher()).getCommand());\\n+                assertSerialForm(s, \"echo configured by admin\");\\n                 \/\/ Then by REST.\\n                 req = new WebRequest(wc.createCrumbedUrl(configDotXml), HttpMethod.POST);\\n                 req.setEncodingType(null);\\n@@ -115,6 +124,7 @@ public void evaluate() throws Throwable {\\n                 }\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass()); \/\/ currently seems to reset it to JNLPLauncher, whatever\\n+                assertSerialForm(s, null);\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n                 \/\/ Then by CLI.\\n                 cmd = new UpdateNodeCommand();\\n@@ -123,10 +133,17 @@ public void evaluate() throws Throwable {\\n                     CLICommandInvoker.Matcher.\/* gets swallowed by RobustReflectionConverter, hmm*\/succeededSilently());\\n                 s = (DumbSlave) rr.j.jenkins.getNode(\"s\");\\n                 assertNotEquals(CommandLauncher.class, s.getLauncher().getClass());\\n+                assertSerialForm(s, null);\\n                 \/\/ Now also check that SYSTEM deserialization works after a restart.\\n                 s.setLauncher(new CommandLauncher(\"echo configured by admin\"));\\n                 s.save();\\n             }\\n+            private void assertSerialForm(DumbSlave s, @CheckForNull String expectedCommand) throws IOException {\\n+                \/\/ cf. private methods in Nodes\\n+                File nodesDir = new File(rr.j.jenkins.getRootDir(), \"nodes\");\\n+                XmlFile configXml = new XmlFile(Jenkins.XSTREAM, new File(new File(nodesDir, s.getNodeName()), \"config.xml\"));\\n+                assertThat(configXml.asString(), expectedCommand != null ? containsString(\"<agentCommand>\" + expectedCommand + \"<\/agentCommand>\") : not(containsString(\"<agentCommand>\")));\\n+            }\\n         });\\n         rr.addStep(new Statement() {\\n             @Override'}}",
            "message_norm":"[security-478] strengthening test.",
            "language":"en",
            "entities":"[('security-478', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['test\/src\/test\/java\/hudson\/slaves\/CommandLauncher2Test.java'])",
            "num_files":1.0
        },
        {
            "index":2119,
            "vuln_id":"GHSA-hrf4-hcpc-3345",
            "cwe_id":"{'CWE-190'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/f7acbd075dff4825b35b597b74958de9edce67fc'}",
            "dataset":"osv",
            "summary":"Denial of service in microweber Microweber is drag and drop website builder and CMS with E-commerce. The microweber prior 1.2.12 application allows large characters to insert in the input field \"post title\" which can allow attackers to cause a Denial of Service (DoS) via a crafted HTTP request. The post title input can be limited to 500 characters or max 1000 characters as a workaround.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/f7acbd075dff4825b35b597b74958de9edce67fc",
            "commit_sha":"f7acbd075dff4825b35b597b74958de9edce67fc",
            "patch":"SINGLE",
            "chain_ord":"['f7acbd075dff4825b35b597b74958de9edce67fc']",
            "before_first_fix_commit":"{'14e960d184e681507f5293be86446d18d1c125b5'}",
            "last_fix_commit":"f7acbd075dff4825b35b597b74958de9edce67fc",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 15:00:22",
            "message":"Update PostRequest.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'src\/MicroweberPackages\/Post\/Http\/Requests\/PostRequest.php': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/f7acbd075dff4825b35b597b74958de9edce67fc\/src%2FMicroweberPackages%2FPost%2FHttp%2FRequests%2FPostRequest.php', 'patch': \"@@ -22,8 +22,15 @@ public function authorize()\\n      *\/\\n     public function rules()\\n     {\\n+        \/\/ todo with multilanguage\\n+\\n         $rules = [\\n-           \/\/ 'title' => 'required', \/\/ todo with multilanguage\\n+            'title' => 'required|max:500',\\n+            'url' => 'max:500',\\n+            'description' => 'max:500',\\n+            'content_meta_title' => 'max:500',\\n+            'content_meta_keywords' => 'max:500',\\n+            'original_link' => 'max:500',\\n         ];\\n \\n         return $rules;\"}}",
            "message_norm":"update postrequest.php",
            "language":"fr",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Post\/Http\/Requests\/PostRequest.php'])",
            "num_files":1.0
        },
        {
            "index":2350,
            "vuln_id":"GHSA-m52x-29pq-w3vv",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/mpetroff\/pannellum\/commit\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914'}",
            "dataset":"osv",
            "summary":"Pannellum Cross-Site Scripting due to data not being sanitized for URIs or vbscript Versions of `pannellum` prior to 2.5.6 are vulnerable to Cross-Site Scripting (XSS). The package fails to sanitize URLs for data URIs, which may allow attackers to execute arbitrary code in a victim's browser. \n\n\n## Recommendation\n\nUpgrade to version 2.5.6 or later.",
            "published_date":"2019-11-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/mpetroff\/pannellum",
            "commit_href":"https:\/\/github.com\/mpetroff\/pannellum\/commit\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "commit_sha":"cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "patch":"SINGLE",
            "chain_ord":"['cc2f3d99953de59db908e0c6efd1c2c17f7c6914']",
            "before_first_fix_commit":"{'40111b237e763821437f501c94d8511022274dc3', 'f42e80facb41bb97321a0e2056d9ef5a4779e627'}",
            "last_fix_commit":"cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/22\/2019, 01:35:45",
            "message":"Merge pull request from GHSA-m52x-29pq-w3vv\n\nFix potential XSS vulnerability",
            "author":"Matthew Petroff",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 6, 'total': 19}",
            "files":"{'src\/js\/pannellum.js': {'additions': 13, 'deletions': 6, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mpetroff\/pannellum\/raw\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914\/src%2Fjs%2Fpannellum.js', 'patch': \"@@ -1719,7 +1719,7 @@ function createHotSpot(hs) {\\n         if (config.basePath && !absoluteURL(imgp))\\n             imgp = config.basePath + imgp;\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);\\n+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);\\n         a.target = '_blank';\\n         span.appendChild(a);\\n         var image = document.createElement('img');\\n@@ -1731,7 +1731,7 @@ function createHotSpot(hs) {\\n         span.style.maxWidth = 'initial';\\n     } else if (hs.URL) {\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL);\\n+        a.href = sanitizeURL(hs.URL, true);\\n         if (hs.attributes) {\\n             for (var key in hs.attributes) {\\n                 a.setAttribute(key, hs.attributes[key]);\\n@@ -2005,7 +2005,7 @@ function processOptions(isPreview) {\\n                 var authorText = escapeHTML(config[key]);\\n                 if (config.authorURL) {\\n                     var authorLink = document.createElement('a');\\n-                    authorLink.href = sanitizeURL(config['authorURL']);\\n+                    authorLink.href = sanitizeURL(config['authorURL'], true);\\n                     authorLink.target = '_blank';\\n                     authorLink.innerHTML = escapeHTML(config[key]);\\n                     authorText = authorLink.outerHTML;\\n@@ -2016,7 +2016,7 @@ function processOptions(isPreview) {\\n             \\n             case 'fallback':\\n                 var link = document.createElement('a');\\n-                link.href = sanitizeURL(config[key]);\\n+                link.href = sanitizeURL(config[key], true);\\n                 link.target = '_blank';\\n                 link.textContent = 'Click here to view this panorama in an alternative viewer.';\\n                 var message = document.createElement('p');\\n@@ -2378,10 +2378,17 @@ function escapeHTML(s) {\\n  * The URL cannot be of protocol 'javascript'.\\n  * @private\\n  * @param {string} url - URL to sanitize\\n+ * @param {boolean} href - True if URL is for link (blocks data URIs)\\n  * @returns {string} Sanitized URL\\n  *\/\\n-function sanitizeURL(url) {\\n-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {\\n+function sanitizeURL(url, href) {\\n+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||\\n+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {\\n+        console.log('Script URL removed.');\\n+        return 'about:blank';\\n+    }\\n+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {\\n+        console.log('Data URI removed from link.');\\n         return 'about:blank';\\n     }\\n     return url;\"}}",
            "message_norm":"merge pull request from ghsa-m52x-29pq-w3vv\n\nfix potential xss vulnerability",
            "language":"ca",
            "entities":"[('ghsa-m52x-29pq-w3vv', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/js\/pannellum.js'])",
            "num_files":1.0
        },
        {
            "index":1724,
            "vuln_id":"GHSA-ffhg-7mh4-33c4",
            "cwe_id":"{'CWE-347'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/golang\/crypto\/commit\/bac4c82f69751a6dd76e702d54b3ceb88adab236'}",
            "dataset":"osv",
            "summary":"Improper Verification of Cryptographic Signature in golang.org\/x\/crypto golang.org\/x\/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org\/x\/crypto\/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/golang\/crypto",
            "commit_href":"https:\/\/github.com\/golang\/crypto\/commit\/bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "commit_sha":"bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "patch":"SINGLE",
            "chain_ord":"['bac4c82f69751a6dd76e702d54b3ceb88adab236']",
            "before_first_fix_commit":"{'1ad67e1f0ef495d4014b6ffd8f2cf80f91fffbce'}",
            "last_fix_commit":"bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2020, 23:53:37",
            "message":"ssh: return an error for malformed ed25519 public keys rather than panic\n\nAn attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. Clients can deliver such a public key and signature\nto any golang.org\/x\/crypto\/ssh server with a PublicKeyCallback, and\nservers can deliver them to any golang.org\/x\/crypto\/ssh client.\n\nThis issue was discovered and reported by Alex Gaynor, Fish in a Barrel,\nand is tracked as CVE-2020-9283.\n\nChange-Id: Ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nReviewed-on: https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357\nRun-TryBot: Filippo Valsorda <filippo@golang.org>\nReviewed-by: Katie Hockman <katie@golang.org>\nTryBot-Result: Gobot Gobot <gobot@golang.org>",
            "author":"Filippo Valsorda",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 8, 'total': 28}",
            "files":"{'ssh\/keys.go': {'additions': 20, 'deletions': 8, 'changes': 28, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/golang\/crypto\/raw\/bac4c82f69751a6dd76e702d54b3ceb88adab236\/ssh%2Fkeys.go', 'patch': '@@ -562,9 +562,11 @@ func parseED25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n-\\tkey := ed25519.PublicKey(w.KeyBytes)\\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\treturn (ed25519PublicKey)(key), w.Rest, nil\\n+\\treturn ed25519PublicKey(w.KeyBytes), w.Rest, nil\\n }\\n \\n func (k ed25519PublicKey) Marshal() []byte {\\n@@ -582,9 +584,11 @@ func (k ed25519PublicKey) Verify(b []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\tedKey := (ed25519.PublicKey)(k)\\n-\\tif ok := ed25519.Verify(edKey, b, sig.Blob); !ok {\\n+\\tif ok := ed25519.Verify(ed25519.PublicKey(k), b, sig.Blob); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -838,6 +842,10 @@ func parseSKEd25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n+\\n \\tkey := new(skEd25519PublicKey)\\n \\tkey.application = w.Application\\n \\tkey.PublicKey = ed25519.PublicKey(w.KeyBytes)\\n@@ -862,6 +870,9 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k.PublicKey); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n \\th := sha256.New()\\n \\th.Write([]byte(k.application))\\n@@ -898,8 +909,7 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\n \\toriginal := Marshal(blob)\\n \\n-\\tedKey := (ed25519.PublicKey)(k.PublicKey)\\n-\\tif ok := ed25519.Verify(edKey, original, edSig.Signature); !ok {\\n+\\tif ok := ed25519.Verify(k.PublicKey, original, edSig.Signature); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -1051,7 +1061,10 @@ func NewPublicKey(key interface{}) (PublicKey, error) {\\n \\tcase *dsa.PublicKey:\\n \\t\\treturn (*dsaPublicKey)(key), nil\\n \\tcase ed25519.PublicKey:\\n-\\t\\treturn (ed25519PublicKey)(key), nil\\n+\\t\\tif l := len(key); l != ed25519.PublicKeySize {\\n+\\t\\t\\treturn nil, fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t\\t}\\n+\\t\\treturn ed25519PublicKey(key), nil\\n \\tdefault:\\n \\t\\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)\\n \\t}\\n@@ -1304,7 +1317,6 @@ func parseOpenSSHPrivateKey(key []byte, decrypt openSSHDecryptFunc) (crypto.Priv\\n \\t\\treturn nil, errors.New(\"ssh: malformed OpenSSH key\")\\n \\t}\\n \\n-\\t\/\/ we only handle ed25519 and rsa keys currently\\n \\tswitch pk1.Keytype {\\n \\tcase KeyAlgoRSA:\\n \\t\\t\/\/ https:\/\/github.com\/openssh\/openssh-portable\/blob\/master\/sshkey.c#L2760-L2773'}}",
            "message_norm":"ssh: return an error for malformed ed25519 public keys rather than panic\n\nan attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. clients can deliver such a public key and signature\nto any golang.org\/x\/crypto\/ssh server with a publickeycallback, and\nservers can deliver them to any golang.org\/x\/crypto\/ssh client.\n\nthis issue was discovered and reported by alex gaynor, fish in a barrel,\nand is tracked as cve-2020-9283.\n\nchange-id: ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nreviewed-on: https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357\nrun-trybot: filippo valsorda <filippo@golang.org>\nreviewed-by: katie hockman <katie@golang.org>\ntrybot-result: gobot gobot <gobot@golang.org>",
            "language":"en",
            "entities":"[('ssh', 'SECWORD', ''), ('error', 'FLAW', ''), ('ed25519', 'SHA', 'generic_sha'), ('public keys', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('ssh', 'SECWORD', ''), ('ed25519', 'SHA', 'generic_sha'), ('public key', 'SECWORD', ''), ('verify', 'ACTION', ''), ('signature', 'SECWORD', ''), ('public key', 'SECWORD', ''), ('signature', 'SECWORD', ''), ('golang.org\/x\/crypto\/ssh', 'SECWORD', ''), ('server', 'SECWORD', ''), ('publickeycallback', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('golang.org\/x\/crypto\/ssh', 'SECWORD', ''), ('issue', 'FLAW', ''), ('cve-2020-9283', 'VULNID', 'CVE'), ('https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357', 'SECWORD', ''), ('filippo@golang.org', 'EMAIL', ''), ('katie@golang.org', 'EMAIL', ''), ('gobot@golang.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ssh\/keys.go'])",
            "num_files":1.0
        },
        {
            "index":2978,
            "vuln_id":"GHSA-rp7r-79rm-2758",
            "cwe_id":"{'CWE-200'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/apache\/derby\/commit\/fd24a7590ff5426bac68303fbeca07dbc5067412', 'https:\/\/github.com\/apache\/derby\/commit\/09a7325f75a4f96a7735e46c9723930f88ea2613', 'https:\/\/github.com\/apache\/derby\/commit\/82d721fd53e30dbb86d6d742c085030985091968'}",
            "dataset":"osv",
            "summary":"Apache Derby exposes user and password attributes Apache Derby before 10.1.2.1 exposes the (1) user and (2) password attributes in cleartext via (a) the RDBNAM parameter of the ACCSEC command and (b) the output of the DatabaseMetaData.getURL function, which allows context-dependent attackers to obtain sensitive information.",
            "published_date":"2022-05-01",
            "chain_len":3,
            "project":"https:\/\/github.com\/apache\/derby",
            "commit_href":"https:\/\/github.com\/apache\/derby\/commit\/09a7325f75a4f96a7735e46c9723930f88ea2613",
            "commit_sha":"09a7325f75a4f96a7735e46c9723930f88ea2613",
            "patch":"MULTI",
            "chain_ord":"['09a7325f75a4f96a7735e46c9723930f88ea2613', '82d721fd53e30dbb86d6d742c085030985091968', 'fd24a7590ff5426bac68303fbeca07dbc5067412']",
            "before_first_fix_commit":"{'90f16141b17352af5c934f3cf8bdbbb90c40624e'}",
            "last_fix_commit":"fd24a7590ff5426bac68303fbeca07dbc5067412",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/09\/2005, 19:50:58",
            "message":"DERBY-561 - Embedded driver jdbcCompliant() method should return true\nTest will be checked in as part of tess for DERBY-530\n\n\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860 13f79535-47bb-0310-9956-ffa450edef68",
            "author":"Katherine Marsden",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/derby\/raw\/09a7325f75a4f96a7735e46c9723930f88ea2613\/java%2Fengine%2Forg%2Fapache%2Fderby%2Fjdbc%2FInternalDriver.java', 'patch': '@@ -209,7 +209,7 @@ public int getMinorVersion() {\\n \\t}\\r\\n \\r\\n \\tpublic boolean jdbcCompliant() {\\r\\n-\\t\\treturn false;\\r\\n+\\t\\treturn true;\\r\\n \\t}\\r\\n \\r\\n \\t\/*'}}",
            "message_norm":"derby-561 - embedded driver jdbccompliant() method should return true\ntest will be checked in as part of tess for derby-530\n\n\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860 13f79535-47bb-0310-9956-ffa450edef68",
            "language":"en",
            "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/db\/derby\/code\/trunk@279860', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['java\/engine\/org\/apache\/derby\/jdbc\/InternalDriver.java'])",
            "num_files":1.0
        },
        {
            "index":156,
            "vuln_id":"GHSA-2wwc-w2gw-4329",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1307, CVE-2019-1308, CVE-2019-1335.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
            "commit_sha":"94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
            "patch":"MULTI",
            "chain_ord":"['94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d']",
            "before_first_fix_commit":"{'7e9a2ee60baa95ceb4f48f522f823c812ca90c80', '5989c6e038d80f92dcd8e10d725cdf45396201bb'}",
            "last_fix_commit":"cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/30\/2019, 22:55:27",
            "message":"CVE-2019-1366",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/Backend\/GlobOpt.cpp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf\/lib%2FBackend%2FGlobOpt.cpp', 'patch': '@@ -3603,7 +3603,7 @@ GlobOpt::OptSrc(IR::Opnd *opnd, IR::Instr * *pInstr, Value **indirIndexValRef, I\\n \\n         opnd->SetValueType(valueType);\\n \\n-        if(!IsLoopPrePass() && opnd->IsSymOpnd() && valueType.IsDefinite())\\n+        if(!IsLoopPrePass() && opnd->IsSymOpnd() && (valueType.IsDefinite() || valueType.IsNotTaggedValue()))\\n         {\\n             if (opnd->AsSymOpnd()->m_sym->IsPropertySym())\\n             {'}}",
            "message_norm":"cve-2019-1366",
            "language":"ro",
            "entities":"[('cve-2019-1366', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOpt.cpp'])",
            "num_files":1.0
        },
        {
            "index":3258,
            "vuln_id":"GHSA-wc69-rhjr-hc9g",
            "cwe_id":"{'CWE-400', 'CWE-1333'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/moment\/moment\/commit\/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3'}",
            "dataset":"osv",
            "summary":"Inefficient Regular Expression Complexity in moment ### Impact\n\n* using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https:\/\/github.com\/moment\/moment\/pull\/6015#issuecomment-1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.",
            "published_date":"2022-07-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/moment\/moment",
            "commit_href":"https:\/\/github.com\/moment\/moment\/commit\/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
            "commit_sha":"9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
            "patch":"SINGLE",
            "chain_ord":"['9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3']",
            "before_first_fix_commit":"{'6374fd860aeff75e6c9d9d11540c6b22bc7ef175'}",
            "last_fix_commit":"9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/06\/2022, 15:28:25",
            "message":"[bugfix] Fix redos in preprocessRFC2822 regex (#6015)\n\n* fix ReDoS in preprocessRFC2822 regex\r\n\r\nFixes: [#2936](https:\/\/github.com\/moment\/moment\/issues\/6012)\r\n\r\nDisallow nested rfc2822 comments to prevent quadratic regex execution time (i.e each open bracket is considered at most twice).",
            "author":"Khang Vo (doublevkay)",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/lib\/create\/from-string.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moment\/moment\/raw\/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3\/src%2Flib%2Fcreate%2Ffrom-string.js', 'patch': \"@@ -151,7 +151,7 @@ function untruncateYear(yearStr) {\\n function preprocessRFC2822(s) {\\n     \/\/ Remove comments and folding whitespace and replace multiple-spaces with a single space\\n     return s\\n-        .replace(\/\\\\([^)]*\\\\)|[\\\\n\\\\t]\/g, ' ')\\n+        .replace(\/\\\\([^()]*\\\\)|[\\\\n\\\\t]\/g, ' ')\\n         .replace(\/(\\\\s\\\\s+)\/g, ' ')\\n         .replace(\/^\\\\s\\\\s*\/, '')\\n         .replace(\/\\\\s\\\\s*$\/, '');\"}}",
            "message_norm":"[bugfix] fix redos in preprocessrfc2822 regex (#6015)\n\n* fix redos in preprocessrfc2822 regex\r\n\r\nfixes: [#2936](https:\/\/github.com\/moment\/moment\/issues\/6012)\r\n\r\ndisallow nested rfc2822 comments to prevent quadratic regex execution time (i.e each open bracket is considered at most twice).",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('preprocessrfc2822', 'SECWORD', ''), ('#6015', 'ISSUE', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('preprocessrfc2822', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#2936](https:\/\/github.com', 'ISSUE', ''), ('issues\/6012', 'FLAW', ''), ('prevent', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib\/create\/from-string.js'])",
            "num_files":1.0
        },
        {
            "index":3050,
            "vuln_id":"GHSA-v52p-hfjf-wg88",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `SpaceToBatchNd` ### Impact\nThe implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8\/tensorflow\/lite\/kernels\/space_to_batch_nd.cc#L82-L83):\n\n```cc\nTF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\noutput_size->data[dim + 1] = final_dim_size \/ block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6d36ba65577006affb272335b7c1abd829010708",
            "commit_sha":"6d36ba65577006affb272335b7c1abd829010708",
            "patch":"SINGLE",
            "chain_ord":"['6d36ba65577006affb272335b7c1abd829010708']",
            "before_first_fix_commit":"{'412c7d9bb8f8a762c5b266c9e73bfa165f29aac8'}",
            "last_fix_commit":"6d36ba65577006affb272335b7c1abd829010708",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 21:22:30",
            "message":"Prevent division by 0\n\nPiperOrigin-RevId: 370984990\nChange-Id: Ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/space_to_batch_nd.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6d36ba65577006affb272335b7c1abd829010708\/tensorflow%2Flite%2Fkernels%2Fspace_to_batch_nd.cc', 'patch': '@@ -79,6 +79,7 @@ TfLiteStatus ResizeOutputTensor(TfLiteContext* context,\\n   for (int dim = 0; dim < spatial_dims_num; ++dim) {\\n     int final_dim_size = (input_size->data[dim + 1] + paddings_data[dim * 2] +\\n                           paddings_data[dim * 2 + 1]);\\n+    TF_LITE_ENSURE(context, block_shape[dim] != 0);\\n     TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\\n     output_size->data[dim + 1] = final_dim_size \/ block_shape[dim];\\n     output_batch_size *= block_shape[dim];'}}",
            "message_norm":"prevent division by 0\n\npiperorigin-revid: 370984990\nchange-id: ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370984990', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/space_to_batch_nd.cc'])",
            "num_files":1.0
        },
        {
            "index":493,
            "vuln_id":"GHSA-4v5p-v5h9-6xjx",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0'}",
            "dataset":"osv",
            "summary":"`CHECK`-failures in Tensorflow ### Impact\nAn attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated.\n\n### Patches\nWe have patched the issue in GitHub commit [c2b31ff2d3151acb230edc3f5b1832d2c713a9e0](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
            "commit_sha":"c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
            "patch":"SINGLE",
            "chain_ord":"['c2b31ff2d3151acb230edc3f5b1832d2c713a9e0']",
            "before_first_fix_commit":"{'41424fd983e23b11ed13bbd5a2b2be0e25ab4244'}",
            "last_fix_commit":"c2b31ff2d3151acb230edc3f5b1832d2c713a9e0",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/08\/2021, 18:14:10",
            "message":"Remove a `DCHECK`-fail, log an error instead.\n\n`DCHECK` in debug mode results in crashes. TensorFlow has had multiple vulnerabilities due to this.\n\nOutside of debug mode, `DCHECK` is a no-op.\n\nA better alternative is to report an error to the log buffer and continue. This should happen both in debug mode and in prod mode.\n\nPiperOrigin-RevId: 408375925\nChange-Id: Id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'tensorflow\/core\/framework\/op_def_util.cc': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0\/tensorflow%2Fcore%2Fframework%2Fop_def_util.cc', 'patch': '@@ -821,9 +821,10 @@ bool RepeatedAttrDefEqual(\\n     const protobuf::RepeatedPtrField<OpDef::AttrDef>& a2) {\\n   std::unordered_map<string, const OpDef::AttrDef*> a1_set;\\n   for (const OpDef::AttrDef& def : a1) {\\n-    DCHECK(a1_set.find(def.name()) == a1_set.end())\\n-        << \"AttrDef names must be unique, but \\'\" << def.name()\\n-        << \"\\' appears more than once\";\\n+    if (a1_set.find(def.name()) != a1_set.end()) {\\n+      LOG(ERROR) << \"AttrDef names must be unique, but \\'\" << def.name()\\n+                 << \"\\' appears more than once\";\\n+    }\\n     a1_set[def.name()] = &def;\\n   }\\n   for (const OpDef::AttrDef& def : a2) {'}}",
            "message_norm":"remove a `dcheck`-fail, log an error instead.\n\n`dcheck` in debug mode results in crashes. tensorflow has had multiple vulnerabilities due to this.\n\noutside of debug mode, `dcheck` is a no-op.\n\na better alternative is to report an error to the log buffer and continue. this should happen both in debug mode and in prod mode.\n\npiperorigin-revid: 408375925\nchange-id: id5b3e19c73f3fbe0cc4bba26ca44ff9607bb6356",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('error', 'FLAW', ''), ('vulnerabilities', 'SECWORD', ''), ('error', 'FLAW', ''), ('408375925', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/op_def_util.cc'])",
            "num_files":1.0
        },
        {
            "index":385,
            "vuln_id":"GHSA-48mj-p7x2-5jfm",
            "cwe_id":"{'CWE-306'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/esphome\/esphome\/pull\/2409\/commits\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e', 'https:\/\/github.com\/esphome\/esphome\/commit\/be965a60eba6bb769e2a5afdbc8eed132f077a59'}",
            "dataset":"osv",
            "summary":"Basic auth bypass in esphome ### Impact\n\nAnyone with web_server enabled and HTTP basic auth configured on 2021.9.1 or older\n\n`web_server` allows OTA update without checking user defined basic auth username & password\n\n### Patches\n\nPatch released in 2021.9.2\n\n### Workarounds\n\nDisable\/remove `web_server`",
            "published_date":"2021-09-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/esphome\/esphome",
            "commit_href":"https:\/\/github.com\/esphome\/esphome\/pull\/2409\/commits\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "commit_sha":"207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "patch":"MULTI",
            "chain_ord":"['be965a60eba6bb769e2a5afdbc8eed132f077a59', '207cde1667d8c799a197b78ca8a5a14de8d5ca1e']",
            "before_first_fix_commit":"{'be965a60eba6bb769e2a5afdbc8eed132f077a59'}",
            "last_fix_commit":"207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/28\/2021, 01:02:04",
            "message":"Fix lint issues in web_server_base",
            "author":"Jesse Hills",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'esphome\/components\/web_server_base\/web_server_base.h': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/esphome\/esphome\/raw\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e\/esphome%2Fcomponents%2Fweb_server_base%2Fweb_server_base.h', 'patch': '@@ -3,6 +3,7 @@\\n #ifdef USE_ARDUINO\\n \\n #include <memory>\\n+#include <utility>\\n #include \"esphome\/core\/component.h\"\\n \\n #include <ESPAsyncWebServer.h>\\n@@ -96,8 +97,8 @@ class WebServerBase : public Component {\\n   std::shared_ptr<AsyncWebServer> get_server() const { return server_; }\\n   float get_setup_priority() const override;\\n \\n-  void set_auth_username(std::string auth_username) { credentials_.username = auth_username; }\\n-  void set_auth_password(std::string auth_password) { credentials_.password = auth_password; }\\n+  void set_auth_username(std::string auth_username) { credentials_.username = std::move(auth_username); }\\n+  void set_auth_password(std::string auth_password) { credentials_.password = std::move(auth_password); }\\n \\n   void add_handler(AsyncWebHandler *handler);'}}",
            "message_norm":"fix lint issues in web_server_base",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issues', 'FLAW', ''), ('web_server_base', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['esphome\/components\/web_server_base\/web_server_base.h'])",
            "num_files":1.0
        },
        {
            "index":1356,
            "vuln_id":"GHSA-9c8h-2mv3-49ww",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4'}",
            "dataset":"osv",
            "summary":"Division by 0 in most convolution operators ### Impact\nMost implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  padding = \"SAME\")\n```\n\nThe shape inference [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/framework\/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations.\n\n### Patches\nWe have patched the issue in GitHub commit [8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
            "commit_sha":"8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
            "patch":"SINGLE",
            "chain_ord":"['8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4']",
            "before_first_fix_commit":"{'1071f554dbd09f7e101324d366eec5f4fe5a3ece'}",
            "last_fix_commit":"8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 01:23:45",
            "message":"Prevent division by 0 in common shape functions.\n\nPiperOrigin-RevId: 387712197\nChange-Id: Id25c7460e35b68aeeeac23b9a88e455b443ee149",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 0, 'total': 11}",
            "files":"{'tensorflow\/core\/framework\/common_shape_fns.cc': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4\/tensorflow%2Fcore%2Fframework%2Fcommon_shape_fns.cc', 'patch': '@@ -672,6 +672,8 @@ Status Conv2DShapeImpl(shape_inference::InferenceContext* c,\\n   if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {\\n     int64_t input_depth_value = c->Value(input_depth_dim),\\n             filter_input_depth_value = c->Value(filter_input_depth_dim);\\n+    if (filter_input_depth_value == 0)\\n+      return errors::InvalidArgument(\"Depth of filter must not be 0\");\\n     if (input_depth_value % filter_input_depth_value != 0)\\n       return errors::InvalidArgument(\\n           \"Depth of input (\", input_depth_value,\\n@@ -681,6 +683,8 @@ Status Conv2DShapeImpl(shape_inference::InferenceContext* c,\\n       int64_t num_groups = input_depth_value \/ filter_input_depth_value;\\n       if (c->ValueKnown(output_depth_dim)) {\\n         int64_t output_depth_value = c->Value(output_depth_dim);\\n+        if (num_groups == 0)\\n+          return errors::InvalidArgument(\"Number of groups must not be 0\");\\n         if (output_depth_value % num_groups != 0)\\n           return errors::InvalidArgument(\\n               \"Depth of output (\", output_depth_value,\\n@@ -816,6 +820,8 @@ Status Conv3DShape(shape_inference::InferenceContext* c) {\\n   if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {\\n     int64_t input_depth_value = c->Value(input_depth_dim),\\n             filter_input_depth_value = c->Value(filter_input_depth_dim);\\n+    if (filter_input_depth_value == 0)\\n+      return errors::InvalidArgument(\"Depth of filter must not be 0\");\\n     if (input_depth_value % filter_input_depth_value != 0)\\n       return errors::InvalidArgument(\\n           \"Depth of input (\", input_depth_value,\\n@@ -825,6 +831,8 @@ Status Conv3DShape(shape_inference::InferenceContext* c) {\\n       int64_t num_groups = input_depth_value \/ filter_input_depth_value;\\n       if (c->ValueKnown(output_depth_dim)) {\\n         int64_t output_depth_value = c->Value(output_depth_dim);\\n+        if (num_groups == 0)\\n+          return errors::InvalidArgument(\"Number of groups must not be 0\");\\n         if (output_depth_value % num_groups != 0)\\n           return errors::InvalidArgument(\\n               \"Depth of output (\", output_depth_value,\\n@@ -2456,6 +2464,9 @@ Status SparseReduceShapeFn(InferenceContext* c) {\\n \\n     int64_t ndims = shape_vec.size();\\n     absl::flat_hash_set<int64> axes;\\n+    if (ndims == 0)\\n+      return errors::InvalidArgument(\\n+          \"Number of dims in shape tensor must not be 0\");\\n     for (int i = 0; i < axes_vec.size(); i++) {\\n       axes.insert((axes_vec(i) + ndims) % ndims);\\n     }'}}",
            "message_norm":"prevent division by 0 in common shape functions.\n\npiperorigin-revid: 387712197\nchange-id: id25c7460e35b68aeeeac23b9a88e455b443ee149",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('387712197', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/common_shape_fns.cc'])",
            "num_files":1.0
        },
        {
            "index":486,
            "vuln_id":"GHSA-4rmr-c2jx-vx27",
            "cwe_id":"{'CWE-1336'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/bobthecow\/mustache.php\/commit\/579ffa5c96e1d292c060b3dd62811ff01ad8c24e'}",
            "dataset":"osv",
            "summary":"Mustache remote code injection vulnerability In Mustache.php v2.0.0 through v2.14.0, Sections tag can lead to arbitrary php code execution even if strict_callables is true when section value is controllable.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/bobthecow\/mustache.php",
            "commit_href":"https:\/\/github.com\/bobthecow\/mustache.php\/commit\/579ffa5c96e1d292c060b3dd62811ff01ad8c24e",
            "commit_sha":"579ffa5c96e1d292c060b3dd62811ff01ad8c24e",
            "patch":"SINGLE",
            "chain_ord":"['579ffa5c96e1d292c060b3dd62811ff01ad8c24e']",
            "before_first_fix_commit":"{'076209772dda21cbfdbf5ef99d202a0937da4826'}",
            "last_fix_commit":"579ffa5c96e1d292c060b3dd62811ff01ad8c24e",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/21\/2022, 06:08:36",
            "message":"Fix CVE-2022-0323 (improper neutralization of section names) \n\n- Fixes possible RCE when rendering untrusted user templates.\n- Remove unnecessary comments in generated source.",
            "author":"Justin Hileman",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 4, 'total': 6}",
            "files":"{'src\/Mustache\/Compiler.php': {'additions': 2, 'deletions': 4, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bobthecow\/mustache.php\/raw\/579ffa5c96e1d292c060b3dd62811ff01ad8c24e\/src%2FMustache%2FCompiler.php', 'patch': \"@@ -320,7 +320,6 @@ private function block($nodes)\\n     }\\n \\n     const SECTION_CALL = '\\n-        \/\/ %s section\\n         $value = $context->%s(%s);%s\\n         $buffer .= $this->section%s($context, $indent, $value);\\n     ';\\n@@ -391,11 +390,10 @@ private function section($nodes, $id, $filters, $start, $end, $otag, $ctag, $lev\\n         $id      = var_export($id, true);\\n         $filters = $this->getFilters($filters, $level);\\n \\n-        return sprintf($this->prepare(self::SECTION_CALL, $level), $id, $method, $id, $filters, $key);\\n+        return sprintf($this->prepare(self::SECTION_CALL, $level), $method, $id, $filters, $key);\\n     }\\n \\n     const INVERTED_SECTION = '\\n-        \/\/ %s inverted section\\n         $value = $context->%s(%s);%s\\n         if (empty($value)) {\\n             %s\\n@@ -418,7 +416,7 @@ private function invertedSection($nodes, $id, $filters, $level)\\n         $id      = var_export($id, true);\\n         $filters = $this->getFilters($filters, $level);\\n \\n-        return sprintf($this->prepare(self::INVERTED_SECTION, $level), $id, $method, $id, $filters, $this->walk($nodes, $level));\\n+        return sprintf($this->prepare(self::INVERTED_SECTION, $level), $method, $id, $filters, $this->walk($nodes, $level));\\n     }\\n \\n     const PARTIAL_INDENT = ', $indent . %s';\"}}",
            "message_norm":"fix cve-2022-0323 (improper neutralization of section names) \n\n- fixes possible rce when rendering untrusted user templates.\n- remove unnecessary comments in generated source.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('cve-2022-0323', 'VULNID', 'CVE'), ('improper neutralization', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Mustache\/Compiler.php'])",
            "num_files":1.0
        },
        {
            "index":2039,
            "vuln_id":"GHSA-hc6c-75p4-hmq4",
            "cwe_id":"{'CWE-476'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6'}",
            "dataset":"osv",
            "summary":"Reference binding to null pointer in `MatrixDiag*` ops ### Impact\nThe implementation of [`MatrixDiag*` operations](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/4c4f420e68f1cfaf8f4b6e8e3eb857e9e4c3ff33\/tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc#L195-L197) does not validate that the tensor arguments are non-empty:\n\n```cc\n      num_rows = context->input(2).flat<int32>()(0);\n      num_cols = context->input(3).flat<int32>()(0);\n      padding_value = context->input(4).flat<T>()(0); \n``` \n\nThus, users can trigger null pointer dereferences if any of the above tensors are null:\n\n```python\nimport tensorflow as tf\n\nd = tf.convert_to_tensor([],dtype=tf.float32)\np = tf.convert_to_tensor([],dtype=tf.float32)\ntf.raw_ops.MatrixDiagV2(diagonal=d, k=0, num_rows=0, num_cols=0, padding_value=p)\n```\n\nChanging from `tf.raw_ops.MatrixDiagV2` to `tf.raw_ops.MatrixDiagV3` still reproduces the issue.\n\n### Patches\nWe have patched the issue in GitHub commit [a7116dd3913c4a4afd2a3a938573aa7c785fdfc6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6",
            "commit_sha":"a7116dd3913c4a4afd2a3a938573aa7c785fdfc6",
            "patch":"SINGLE",
            "chain_ord":"['a7116dd3913c4a4afd2a3a938573aa7c785fdfc6']",
            "before_first_fix_commit":"{'4c4f420e68f1cfaf8f4b6e8e3eb857e9e4c3ff33'}",
            "last_fix_commit":"a7116dd3913c4a4afd2a3a938573aa7c785fdfc6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/18\/2021, 03:55:53",
            "message":"Validate `MatrixDiagV{2,3}` arguments to prevent breakage.\n\nPiperOrigin-RevId: 369056033\nChange-Id: Ic2018c297d3dd6f252dc1dd3667f1ed5cb1eaa42",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 3, 'total': 19}",
            "files":"{'tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc': {'additions': 16, 'deletions': 3, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6\/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_diag_op.cc', 'patch': '@@ -192,9 +192,22 @@ class MatrixDiagOp : public OpKernel {\\n           upper_diag_index = diag_index.flat<int32>()(1);\\n         }\\n       }\\n-      num_rows = context->input(2).flat<int32>()(0);\\n-      num_cols = context->input(3).flat<int32>()(0);\\n-      padding_value = context->input(4).flat<T>()(0);\\n+\\n+      auto& num_rows_tensor = context->input(2);\\n+      OP_REQUIRES(context, TensorShapeUtils::IsScalar(num_rows_tensor.shape()),\\n+                  errors::InvalidArgument(\"num_rows must be a scalar\"));\\n+      num_rows = num_rows_tensor.flat<int32>()(0);\\n+\\n+      auto& num_cols_tensor = context->input(3);\\n+      OP_REQUIRES(context, TensorShapeUtils::IsScalar(num_cols_tensor.shape()),\\n+                  errors::InvalidArgument(\"num_cols must be a scalar\"));\\n+      num_cols = num_cols_tensor.flat<int32>()(0);\\n+\\n+      auto& padding_value_tensor = context->input(4);\\n+      OP_REQUIRES(context,\\n+                  TensorShapeUtils::IsScalar(padding_value_tensor.shape()),\\n+                  errors::InvalidArgument(\"padding_value must be a scalar\"));\\n+      padding_value = padding_value_tensor.flat<T>()(0);\\n     }\\n \\n     \/\/ Size validations.'}}",
            "message_norm":"validate `matrixdiagv{2,3}` arguments to prevent breakage.\n\npiperorigin-revid: 369056033\nchange-id: ic2018c297d3dd6f252dc1dd3667f1ed5cb1eaa42",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('prevent', 'ACTION', ''), ('369056033', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc'])",
            "num_files":1.0
        },
        {
            "index":557,
            "vuln_id":"GHSA-55j9-849x-26h4",
            "cwe_id":"{'CWE-74'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\/commits\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81'}",
            "dataset":"osv",
            "summary":"Remote Code Execution in Red Discord Bot ### Impact\nA RCE exploit has been discovered in the Trivia module: this exploit allows Discord users with specifically crafted usernames to inject code into the Trivia module's leaderboard command. By abusing this exploit, it's possible to perform destructive actions and\/or access sensitive information.\n\n### Patches\nThis critical exploit has been fixed on version 3.3.11.\n\n### Workarounds\nUnloading the Trivia module with ``unload trivia`` can render this exploit not accessible. We still highly recommend updating to 3.3.11 to completely patch this issue.\n\n### References\nhttps:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators\/Red-DiscordBot](https:\/\/github.com\/Cog-Creators\/Red-DiscordBot)\n* Over on our [Discord server](https:\/\/discord.gg\/red)",
            "published_date":"2020-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot",
            "commit_href":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\/commits\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "commit_sha":"9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "patch":"SINGLE",
            "chain_ord":"['9ab536235bafc2b42c3c17d7ce26f1cc64482a81']",
            "before_first_fix_commit":"{'c8526d42b4299d50b0c69f86204723cc82754453'}",
            "last_fix_commit":"9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/09\/2020, 23:11:15",
            "message":"Remove an unnecessary `.format`",
            "author":"Flame442",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'redbot\/cogs\/trivia\/trivia.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/raw\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81\/redbot%2Fcogs%2Ftrivia%2Ftrivia.py', 'patch': '@@ -539,7 +539,7 @@ def _get_leaderboard(data: dict, key: str, top: int):\\n             )\\n             padding = [\" \" * (len(h) - len(f)) for h, f in zip(headers, fields)]\\n             fields = tuple(f + padding[i] for i, f in enumerate(fields))\\n-            lines.append(\" | \".join(fields).format(member=member, **m_data))\\n+            lines.append(\" | \".join(fields))\\n             if rank == top:\\n                 break\\n         return \"\\\\n\".join(lines)'}}",
            "message_norm":"remove an unnecessary `.format`",
            "language":"en",
            "entities":"[('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['redbot\/cogs\/trivia\/trivia.py'])",
            "num_files":1.0
        },
        {
            "index":108,
            "vuln_id":"GHSA-2jx8-v4hv-gx3h",
            "cwe_id":"{'CWE-611'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/reportportal\/service-api\/commit\/da4a012abdcc69f02f4255d81466f1f473b7f418'}",
            "dataset":"osv",
            "summary":"XXE vulnerability in Launch import | Release Date | Affected Projects | Affected Versions | Access Vector| Security Risk |\n|--------------|-------------------|-------------------|---------------|---------------|\n| Monday, May 4, 2020| [service-api](https:\/\/github.com\/reportportal\/service-api) | Every version, starting from 3.1.0 | Remote | Medium |\n\n### Impact\nStarting from version 3.1.0 we introduced a new feature of JUnit XML launch import. Unfortunately XML parser was not configured properly to prevent XML external entity (XXE) attacks. This allows a user to import a specifically-crafted XML file that uses external entities for extraction of secrets from Report Portal service-api module or server-side request forgery.\n\nReport Portal versions 4.3.12+ and 5.1.1+ disables external entity resolution for theirs XML parser.\n\nWe advise our users install the latest releases we built specifically to address this issue.\n\n### Patches\nFixed with https:\/\/github.com\/reportportal\/service-api\/pull\/1201\n\n### Binary Download\nhttps:\/\/bintray.com\/epam\/reportportal\/service-api\/5.1.1\nhttps:\/\/bintray.com\/epam\/reportportal\/service-api\/4.3.12\n\n### Docker Container Download\n* RP v4: `docker pull reportportal\/service-api:4.3.12`\n* RP v5: `docker pull reportportal\/service-api:5.1.1`\n\n### Acknowledgement\nThe issue was reported to Report Portal Team by an external security researcher.\nOur Team thanks Julien M. for reporting the issue.\n\n### For more information\nIf you have any questions or comments about this advisory email us: [support@reportportal.io](mailto:support@reportportal.io)",
            "published_date":"2021-06-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/reportportal\/service-api",
            "commit_href":"https:\/\/github.com\/reportportal\/service-api\/commit\/da4a012abdcc69f02f4255d81466f1f473b7f418",
            "commit_sha":"da4a012abdcc69f02f4255d81466f1f473b7f418",
            "patch":"SINGLE",
            "chain_ord":"['da4a012abdcc69f02f4255d81466f1f473b7f418']",
            "before_first_fix_commit":"{'afbd14d404c4084cfdd17d60685f8984949b1350', '74a954601ad9eea14a0650f5c1ae9bd91031e2ba'}",
            "last_fix_commit":"da4a012abdcc69f02f4255d81466f1f473b7f418",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/30\/2020, 21:14:46",
            "message":"Merge pull request #1201 from reportportal\/sax-hotfix\n\nsax vulnerability fix",
            "author":"Pavel Bortnik",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'src\/main\/java\/com\/epam\/ta\/reportportal\/core\/imprt\/impl\/junit\/XunitParseJob.java': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/reportportal\/service-api\/raw\/da4a012abdcc69f02f4255d81466f1f473b7f418\/src%2Fmain%2Fjava%2Fcom%2Fepam%2Fta%2Freportportal%2Fcore%2Fimprt%2Fimpl%2Fjunit%2FXunitParseJob.java', 'patch': '@@ -24,8 +24,10 @@\\n import org.springframework.context.annotation.Scope;\\n import org.springframework.stereotype.Component;\\n import org.xml.sax.SAXException;\\n+import org.xml.sax.XMLReader;\\n \\n import javax.xml.parsers.ParserConfigurationException;\\n+import javax.xml.parsers.SAXParser;\\n import javax.xml.parsers.SAXParserFactory;\\n import java.io.IOException;\\n import java.io.InputStream;\\n@@ -43,7 +45,22 @@ public class XunitParseJob implements Callable<ParseResults> {\\n \\t@Override\\n \\tpublic ParseResults call() {\\n \\t\\ttry {\\n-\\t\\t\\tSAXParserFactory.newInstance().newSAXParser().parse(xmlInputStream, handler);\\n+\\t\\t\\tSAXParserFactory spf = SAXParserFactory.newInstance();\\n+\\t\\t\\tSAXParser saxParser = spf.newSAXParser();\\n+\\t\\t\\tXMLReader reader = saxParser.getXMLReader();\\n+\\n+\\t\\t\\t\/\/ Xerces 1 - http:\/\/xerces.apache.org\/xerces-j\/features.html#external-general-entities\\n+\\t\\t\\t\/\/ Xerces 2 - http:\/\/xerces.apache.org\/xerces2-j\/features.html#external-general-entities\\n+\\n+\\t\\t\\t\/\/ Using the SAXParserFactory\\'s setFeature\\n+\\t\\t\\tspf.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+\\t\\t\\t\/\/ Using the XMLReader\\'s setFeature\\n+\\t\\t\\treader.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+\\n+\\t\\t\\t\/\/ Xerces 2 only - http:\/\/xerces.apache.org\/xerces-j\/features.html#external-general-entities\\n+\\t\\t\\tspf.setFeature(\"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\", true);\\n+\\n+\\t\\t\\tsaxParser.parse(xmlInputStream, handler);\\n \\t\\t} catch (SAXException | IOException | ParserConfigurationException e) {\\n \\t\\t\\tthrow new ReportPortalException(ErrorType.PARSING_XML_ERROR, e.getMessage());\\n \\t\\t}'}}",
            "message_norm":"merge pull request #1201 from reportportal\/sax-hotfix\n\nsax vulnerability fix",
            "language":"ca",
            "entities":"[('#1201', 'ISSUE', ''), ('sax', 'SECWORD', ''), ('hotfix', 'ACTION', ''), ('sax', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/epam\/ta\/reportportal\/core\/imprt\/impl\/junit\/XunitParseJob.java'])",
            "num_files":1.0
        },
        {
            "index":2322,
            "vuln_id":"GHSA-jxvf-m3x5-mxwq",
            "cwe_id":"{'CWE-1321'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/steveukx\/properties\/commit\/0877cc871db9865f58dd9389ce99e61be05380a5', 'https:\/\/github.com\/steveukx\/properties\/commit\/4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab'}",
            "dataset":"osv",
            "summary":"Properties-Reader before v2.2.0 vulnerable to prototype pollution Properties-Reader prior to version 2.2.0 is vulnerable to prototype pollution. Version 2.2.0 contains a patch for this issue.",
            "published_date":"2022-07-19",
            "chain_len":2,
            "project":"https:\/\/github.com\/steveukx\/properties",
            "commit_href":"https:\/\/github.com\/steveukx\/properties\/commit\/4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
            "commit_sha":"4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
            "patch":"MULTI",
            "chain_ord":"['0877cc871db9865f58dd9389ce99e61be05380a5', '4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab']",
            "before_first_fix_commit":"{'0877cc871db9865f58dd9389ce99e61be05380a5'}",
            "last_fix_commit":"4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/30\/2020, 06:58:22",
            "message":"Allow for relying on Object prototype in steps of the expanded properties",
            "author":"Steve King",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/properties-reader.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/steveukx\/properties\/raw\/4e4bc392ecfd0a128f48c1d69f64a0d7194fcaab\/src%2Fproperties-reader.js', 'patch': '@@ -217,7 +217,7 @@ PropertiesReader.prototype.set = function (key, value) {\\n       }\\n \\n       if (!has(source, step)) {\\n-         Object.defineProperty(source, step, { value: Object.create(null) });\\n+         Object.defineProperty(source, step, { value: {} });\\n       }\\n \\n       source = source[step]'}}",
            "message_norm":"allow for relying on object prototype in steps of the expanded properties",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/properties-reader.js'])",
            "num_files":1.0
        },
        {
            "index":107,
            "vuln_id":"GHSA-2jx3-5j9v-prpp",
            "cwe_id":"{'CWE-89'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084'}",
            "dataset":"osv",
            "summary":"BlockWishList SQL Injection vulnerability ### Impact\nAn authenticated customer can perform SQL injection\n\n### Patches\nIssue is fixed in 2.1.1",
            "published_date":"2022-06-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/blockwishlist",
            "commit_href":"https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084",
            "commit_sha":"b3ec4b85af5fd73f74d55390b226d221298ca084",
            "patch":"SINGLE",
            "chain_ord":"['b3ec4b85af5fd73f74d55390b226d221298ca084']",
            "before_first_fix_commit":"{'13e64b2709544354fd116927b80bc3fa249bc5b4', 'be79516175d564f60a657627482b0a60c3da353e'}",
            "last_fix_commit":"b3ec4b85af5fd73f74d55390b226d221298ca084",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/24\/2022, 08:04:52",
            "message":"Merge pull request from GHSA-2jx3-5j9v-prpp\n\nValidate order by and order way",
            "author":"atomiix",
            "comments":"{'com_1': {'author': 'doekia', 'datetime': '07\/22\/2022, 17:26:35', 'body': \"So apparently there is unfiltered value returned by toLegacyOrderWay() (I'm doubt full of it see below)\\r\\nIf this is the case CHANGE the function, not simply one module otherwise it is an open door for other modules.\\r\\n\\r\\nWhy I'm doubtfull ? Because toLegacyOrderWay() calls getDirection() which return $this->direction. $this->direction is set by setDirection() (during construct) and tests are done against values asc, desc, random otherwise exception. How can this lead to sql injection\"}, 'com_2': {'author': 'infiniweb', 'datetime': '07\/22\/2022, 21:40:39', 'body': '@doekia this issue is not with `toLegacyOrderWay`. The SQL injection can be reproduced because of the usage of `toLegacyOrderBy` (not `toLegacyOrderWay`) combined with a wrong usage of `getLegacyPrefix`. I can confirm the exploit. The usage of `Validate::isOrderBy($sortOrder)` is fixing the issue.'}, 'com_3': {'author': 'doekia', 'datetime': '07\/25\/2022, 18:07:12', 'body': 'Therefore I repeat, the function that need to be patched SHOULD BE toLegacyOrderBy() that should implement the Validate::isOrderBy() before returning values.\\r\\nSuch way will protect ANY modules that use the framework function toLegacyOrderBy()'}, 'com_4': {'author': 'Pilypas', 'datetime': '07\/27\/2022, 11:25:43', 'body': 'Can you tell me if the vulnerability in the module is also in Prestashop 1.6.1.24 version of blockwishlist 1.3.2 ?'}, 'com_5': {'author': 'infiniweb', 'datetime': '07\/27\/2022, 11:27:28', 'body': \"@Pilypas . No it's not. Please refer to https:\/\/github.com\/PrestaShop\/blockwishlist\/security\/advisories\/GHSA-2jx3-5j9v-prpp\"}}",
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'src\/Search\/WishListProductSearchProvider.php': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/blockwishlist\/raw\/b3ec4b85af5fd73f74d55390b226d221298ca084\/src%2FSearch%2FWishListProductSearchProvider.php', 'patch': \"@@ -35,6 +35,7 @@\\n use Product;\\n use Shop;\\n use Symfony\\\\Component\\\\Translation\\\\TranslatorInterface;\\n+use Validate;\\n use WishList;\\n \\n \/**\\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\\n \\n         if ('products' === $type) {\\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\\n+            }\\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\\n             $products = $this->db->executeS($querySearch);\"}}",
            "message_norm":"merge pull request from ghsa-2jx3-5j9v-prpp\n\nvalidate order by and order way",
            "language":"no",
            "entities":"[('ghsa-2jx3-5j9v-prpp', 'VULNID', 'GHSA')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Search\/WishListProductSearchProvider.php'])",
            "num_files":1.0
        },
        {
            "index":2318,
            "vuln_id":"GHSA-jxhc-q857-3j6g",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/sporkmonger\/addressable\/commit\/0d8a3127e35886ce9284810a7f2438bff6b43cbc', 'https:\/\/github.com\/sporkmonger\/addressable\/commit\/89c76130ce255c601f642a018cb5fb5a80e679a7'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in Addressable templates ### Impact\n\nWithin the URI template implementation in Addressable, a maliciously crafted template may result in uncontrolled resource consumption, leading to denial of service when matched against a URI. In typical usage, templates would not normally be read from untrusted user input, but nonetheless, no previous security advisory for Addressable has cautioned against doing this. Users of the parsing capabilities in Addressable but not the URI template capabilities are unaffected.\n\n### Patches\n\nThe vulnerability was introduced in version 2.3.0 (previously yanked) and has been present in all subsequent versions up to, and including, 2.7.0. It is fixed in version 2.8.0.\n\n### Workarounds\n\nThe vulnerability can be avoided by only creating Template objects from trusted sources that have been validated not to produce catastrophic backtracking.\n\n### References\n\n- https:\/\/owasp.org\/www-community\/attacks\/Regular_expression_Denial_of_Service_-_ReDoS\n- https:\/\/cwe.mitre.org\/data\/definitions\/1333.html\n- https:\/\/www.regular-expressions.info\/catastrophic.html\n\n### For more information\nIf you have any questions or comments about this advisory:\n* [Open an issue](https:\/\/github.com\/sporkmonger\/addressable\/issues)",
            "published_date":"2021-07-12",
            "chain_len":2,
            "project":"https:\/\/github.com\/sporkmonger\/addressable",
            "commit_href":"https:\/\/github.com\/sporkmonger\/addressable\/commit\/0d8a3127e35886ce9284810a7f2438bff6b43cbc",
            "commit_sha":"0d8a3127e35886ce9284810a7f2438bff6b43cbc",
            "patch":"MULTI",
            "chain_ord":"['89c76130ce255c601f642a018cb5fb5a80e679a7', '0d8a3127e35886ce9284810a7f2438bff6b43cbc']",
            "before_first_fix_commit":"{'89c76130ce255c601f642a018cb5fb5a80e679a7'}",
            "last_fix_commit":"0d8a3127e35886ce9284810a7f2438bff6b43cbc",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/03\/2021, 04:10:39",
            "message":"Adding note about ReDoS vulnerability",
            "author":"Bob Aman",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'CHANGELOG.md': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sporkmonger\/addressable\/raw\/0d8a3127e35886ce9284810a7f2438bff6b43cbc\/CHANGELOG.md', 'patch': '@@ -1,4 +1,5 @@\\n # Addressable 2.8.0\\n+- fixes ReDoS vulnerability in Addressable::Template#match\\n - no longer replaces `+` with spaces in queries for non-http(s) schemes\\n - fixed encoding ipv6 literals\\n - the `:compacted` flag for `normalized_query` now dedupes parameters'}}",
            "message_norm":"adding note about redos vulnerability",
            "language":"en",
            "entities":"[('adding', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['CHANGELOG.md'])",
            "num_files":1.0
        },
        {
            "index":826,
            "vuln_id":"GHSA-6fvx-r7hx-3vh6",
            "cwe_id":"{'CWE-611'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/javamelody\/javamelody\/commit\/ef111822562d0b9365bd3e671a75b65bd0613353'}",
            "dataset":"osv",
            "summary":"JavaMelody has XXE via parseSoapMethodName in bull\/javamelody\/PayloadNameRequestWrapper.java. JavaMelody before 1.74.0 has XXE via parseSoapMethodName in bull\/javamelody\/PayloadNameRequestWrapper.java.",
            "published_date":"2018-10-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/javamelody\/javamelody",
            "commit_href":"https:\/\/github.com\/javamelody\/javamelody\/commit\/ef111822562d0b9365bd3e671a75b65bd0613353",
            "commit_sha":"ef111822562d0b9365bd3e671a75b65bd0613353",
            "patch":"SINGLE",
            "chain_ord":"['ef111822562d0b9365bd3e671a75b65bd0613353']",
            "before_first_fix_commit":"{'00dd8d51a6483cb3a5b4c8ae9c24197028401c58'}",
            "last_fix_commit":"ef111822562d0b9365bd3e671a75b65bd0613353",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/04\/2018, 06:31:29",
            "message":"fix for security",
            "author":"evernat",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '10\/12\/2018, 08:21:37', 'body': '[CVE-2018-15531](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2018-15531) was assigned to this issue.'}}",
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/PayloadNameRequestWrapper.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/javamelody\/javamelody\/raw\/ef111822562d0b9365bd3e671a75b65bd0613353\/javamelody-core%2Fsrc%2Fmain%2Fjava%2Fnet%2Fbull%2Fjavamelody%2FPayloadNameRequestWrapper.java', 'patch': '@@ -235,6 +235,8 @@ private static String parseSoapMethodName(InputStream stream, String charEncodin\\n \\t\\ttry {\\r\\n \\t\\t\\t\/\/ newInstance() et pas newFactory() pour java 1.5 (issue 367)\\r\\n \\t\\t\\tfinal XMLInputFactory factory = XMLInputFactory.newInstance();\\r\\n+\\t\\t\\tfactory.setProperty(XMLInputFactory.SUPPORT_DTD, false); \/\/ disable DTDs entirely for that factory\\r\\n+\\t\\t\\tfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); \/\/ disable external entities\\r\\n \\t\\t\\tfinal XMLStreamReader xmlReader;\\r\\n \\t\\t\\tif (charEncoding != null) {\\r\\n \\t\\t\\t\\txmlReader = factory.createXMLStreamReader(stream, charEncoding);'}}",
            "message_norm":"fix for security",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/PayloadNameRequestWrapper.java'])",
            "num_files":1.0
        },
        {
            "index":1607,
            "vuln_id":"GHSA-cv3f-px9r-54hm",
            "cwe_id":"{'CWE-200'}",
            "score":4.7,
            "chain":"{'https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf'}",
            "dataset":"osv",
            "summary":"Phusion Passenger information disclosure In agent\/Core\/SpawningKit\/Spawner.h in Phusion Passenger 5.1.10 (fixed in Passenger Open Source 5.1.11 and Passenger Enterprise 5.1.10), if Passenger is running as root, it is possible to list the contents of arbitrary files on a system by symlinking a file named REVISION from the application root folder to a file of choice and querying passenger-status --show=xml.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/phusion\/passenger",
            "commit_href":"https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf",
            "commit_sha":"4043718264095cde6623c2cbe8c644541036d7bf",
            "patch":"SINGLE",
            "chain_ord":"['4043718264095cde6623c2cbe8c644541036d7bf']",
            "before_first_fix_commit":"{'a63f1e9cd8148dfaac08b00d74ef2b59bc2c9dd4'}",
            "last_fix_commit":"4043718264095cde6623c2cbe8c644541036d7bf",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/11\/2017, 13:55:07",
            "message":"Disable unused feature.",
            "author":"Daniel Knoppel (Phusion)",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/agent\/Core\/SpawningKit\/Spawner.h': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/phusion\/passenger\/raw\/4043718264095cde6623c2cbe8c644541036d7bf\/src%2Fagent%2FCore%2FSpawningKit%2FSpawner.h', 'patch': '@@ -721,7 +721,6 @@ class Spawner {\\n \\t\\tprepareChroot(info, options);\\n \\t\\tinfo.userSwitching = prepareUserSwitching(options);\\n \\t\\tprepareSwitchingWorkingDirectory(info, options);\\n-\\t\\tinferApplicationInfo(info);\\n \\t\\treturn info;\\n \\t}\\n \\n@@ -775,6 +774,7 @@ class Spawner {\\n \\t\\tassert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);\\n \\t}\\n \\n+#ifdef false\\n \\tvoid inferApplicationInfo(SpawnPreparationInfo &info) const {\\n \\t\\tinfo.codeRevision = readFromRevisionFile(info);\\n \\t\\tif (info.codeRevision.empty()) {\\n@@ -817,6 +817,7 @@ class Spawner {\\n \\t\\t\\treturn string();\\n \\t\\t}\\n \\t}\\n+#endif\\n \\n \\tbool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {\\n \\t\\tif (options.loadShellEnvvars) {'}}",
            "message_norm":"disable unused feature.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/agent\/Core\/SpawningKit\/Spawner.h'])",
            "num_files":1.0
        },
        {
            "index":2112,
            "vuln_id":"GHSA-hq37-853p-g5cf",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Kozea\/CairoSVG\/commit\/cfc9175e590531d90384aa88845052de53d94bf3'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in CairoSVG # Doyensec Vulnerability Advisory \n\n* Regular Expression Denial of Service (REDoS) in cairosvg\n* Affected Product: CairoSVG v2.0.0+\n* Vendor: https:\/\/github.com\/Kozea\n* Severity: Medium\n* Vulnerability Class: Denial of Service\n* Author(s): Ben Caller ([Doyensec](https:\/\/doyensec.com))\n\n## Summary\n\nWhen processing SVG files, the python package CairoSVG uses two regular expressions which are vulnerable to Regular Expression Denial of Service (REDoS).\nIf an attacker provides a malicious SVG, it can make cairosvg get stuck processing the file for a very long time.\n\n## Technical description\n\nThe vulnerable regular expressions are\n\nhttps:\/\/github.com\/Kozea\/CairoSVG\/blob\/9c4a982b9a021280ad90e89707eacc1d114e4ac4\/cairosvg\/colors.py#L190-L191\n\nThe section between 'rgb(' and the final ')' contains multiple overlapping groups.\n\nSince all three infinitely repeating groups accept spaces, a long string of spaces causes catastrophic backtracking when it is not followed by a closing parenthesis.\n\nThe complexity is cubic, so doubling the length of the malicious string of spaces makes processing take 8 times as long.\n\n## Reproduction steps\n\nCreate a malicious SVG of the form:\n\n    <svg width=\"1\" height=\"1\"><rect fill=\"rgb(                     ;\"\/><\/svg>\n\nwith the following code:\n\n    '<svg width=\"1\" height=\"1\"><rect fill=\"rgb(' + (' ' * 3456) + ';\"\/><\/svg>'\n\nNote that there is no closing parenthesis before the semi-colon.\n\nRun cairosvg e.g.:\n\n    cairosvg cairo-redos.svg -o x.png\n\nand notice that it hangs at 100% CPU. Increasing the number of spaces increases the processing time with cubic complexity.\n\n## Remediation\n\nFix the regexes to avoid overlapping parts. Perhaps remove the [ \\n\\r\\t]* groups from the regex, and use .strip() on the returned capture group.\n\n## Disclosure timeline\n\n- 2020-12-30: Vulnerability disclosed via email to CourtBouillon",
            "published_date":"2021-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/Kozea\/CairoSVG",
            "commit_href":"https:\/\/github.com\/Kozea\/CairoSVG\/commit\/cfc9175e590531d90384aa88845052de53d94bf3",
            "commit_sha":"cfc9175e590531d90384aa88845052de53d94bf3",
            "patch":"SINGLE",
            "chain_ord":"['cfc9175e590531d90384aa88845052de53d94bf3']",
            "before_first_fix_commit":"{'9c4a982b9a021280ad90e89707eacc1d114e4ac4', '063185b60588a41d4df661ad70f9f7b699901abc'}",
            "last_fix_commit":"cfc9175e590531d90384aa88845052de53d94bf3",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/06\/2021, 14:43:14",
            "message":"Merge pull request from GHSA-hq37-853p-g5cf\n\nDon\u2019t use overlapping groups for regular expressions",
            "author":"Guillaume Ayoub",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'cairosvg\/colors.py': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Kozea\/CairoSVG\/raw\/cfc9175e590531d90384aa88845052de53d94bf3\/cairosvg%2Fcolors.py', 'patch': \"@@ -187,8 +187,8 @@\\n     'transparent': (0, 0, 0, 0),\\n }\\n \\n-RGBA = re.compile(r'rgba\\\\([ \\\\n\\\\r\\\\t]*(.+?)[ \\\\n\\\\r\\\\t]*\\\\)')\\n-RGB = re.compile(r'rgb\\\\([ \\\\n\\\\r\\\\t]*(.+?)[ \\\\n\\\\r\\\\t]*\\\\)')\\n+RGBA = re.compile(r'rgba\\\\((.+?)\\\\)')\\n+RGB = re.compile(r'rgb\\\\((.+?)\\\\)')\\n HEX_RRGGBB = re.compile('#[0-9a-f]{6}')\\n HEX_RGB = re.compile('#[0-9a-f]{3}')\\n \\n@@ -212,14 +212,14 @@ def color(string, opacity=1):\\n     if match:\\n         r, g, b, a = tuple(\\n             float(i.strip(' %')) \/ 100 if '%' in i else float(i) \/ 255\\n-            for i in match.group(1).split(','))\\n+            for i in match.group(1).strip().split(','))\\n         return (r, g, b, a * 255 * opacity)\\n \\n     match = RGB.search(string)\\n     if match:\\n         r, g, b = tuple(\\n             float(i.strip(' %')) \/ 100 if '%' in i else float(i) \/ 255\\n-            for i in match.group(1).split(','))\\n+            for i in match.group(1).strip().split(','))\\n         return (r, g, b, opacity)\\n \\n     match = HEX_RRGGBB.search(string)\"}}",
            "message_norm":"merge pull request from ghsa-hq37-853p-g5cf\n\ndon\u2019t use overlapping groups for regular expressions",
            "language":"en",
            "entities":"[('ghsa-hq37-853p-g5cf', 'VULNID', 'GHSA')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['cairosvg\/colors.py'])",
            "num_files":1.0
        },
        {
            "index":1483,
            "vuln_id":"GHSA-c545-c4f9-rf6v",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257'}",
            "dataset":"osv",
            "summary":"Heap OOB in TFLite ### Impact\nTFLite's [`expand_dims.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data:\n\n```cc\n  if (axis < 0) { \n    axis = input_dims.size + 1 + axis;\n  }   \n  TF_LITE_ENSURE(context, axis <= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i < output_dims->size; ++i) {\n    if (i < axis) {\n      output_dims->data[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims->data[i] = 1;\n    } else {\n      output_dims->data[i] = input_dims.data[i - 1];\n    }\n  }\n```\n\nIf `axis` is a large negative value (e.g., `-100000`), then after the first `if` it would still be negative. The check following the `if` statement will pass and the `for` loop would read one element before the start of `input_dims.data` (when `i = 0`).\n\n### Patches\nWe have patched the issue in GitHub commit [d94ffe08a65400f898241c0374e9edc6fa8ed257](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "commit_sha":"d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "patch":"SINGLE",
            "chain_ord":"['d94ffe08a65400f898241c0374e9edc6fa8ed257']",
            "before_first_fix_commit":"{'e95fc647063378993ec84d41cbbda6dcb60bad4e'}",
            "last_fix_commit":"d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 21:42:54",
            "message":"Prevent an OOB read in `expand_dims.cc`\n\nThe for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).\n\nPiperOrigin-RevId: 387200206\nChange-Id: I162f4feba12d547c3a4340833ae682016a2ebfab",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/expand_dims.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d94ffe08a65400f898241c0374e9edc6fa8ed257\/tensorflow%2Flite%2Fkernels%2Fexpand_dims.cc', 'patch': '@@ -37,6 +37,7 @@ TfLiteStatus ExpandTensorDim(TfLiteContext* context, const TfLiteTensor& input,\\n     axis = input_dims.size + 1 + axis;\\n   }\\n   TF_LITE_ENSURE(context, axis <= input_dims.size);\\n+  TF_LITE_ENSURE(context, axis >= 0);\\n \\n   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\\n   for (int i = 0; i < output_dims->size; ++i) {'}}",
            "message_norm":"prevent an oob read in `expand_dims.cc`\n\nthe for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. if user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in python one can do `l[-3]` to mean `l[-3 + len(l)]`).\n\npiperorigin-revid: 387200206\nchange-id: i162f4feba12d547c3a4340833ae682016a2ebfab",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('387200206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/expand_dims.cc'])",
            "num_files":1.0
        },
        {
            "index":1173,
            "vuln_id":"GHSA-896r-f27r-55mw",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/kriszyp\/json-schema\/commit\/b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/22f146111f541d9737e832823699ad3528ca7741', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa'}",
            "dataset":"osv",
            "summary":"json-schema is vulnerable to Prototype Pollution json-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
            "published_date":"2021-11-19",
            "chain_len":3,
            "project":"https:\/\/github.com\/kriszyp\/json-schema",
            "commit_href":"https:\/\/github.com\/kriszyp\/json-schema\/commit\/b62f1da1ff5442f23443d6be6a92d00e65cba93a",
            "commit_sha":"b62f1da1ff5442f23443d6be6a92d00e65cba93a",
            "patch":"MULTI",
            "chain_ord":"['22f146111f541d9737e832823699ad3528ca7741', 'b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa']",
            "before_first_fix_commit":"{'ef60987a9a14b9d9c739384460044ba53cd9b9a2'}",
            "last_fix_commit":"f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/02\/2021, 02:41:46",
            "message":"Protect against constructor modification, #84",
            "author":"Kris Zyp",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/validate.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kriszyp\/json-schema\/raw\/b62f1da1ff5442f23443d6be6a92d00e65cba93a\/lib%2Fvalidate.js', 'patch': \"@@ -207,7 +207,7 @@ var validate = exports._validate = function(\/*Any*\/instance,\/*Object*\/schema,\/*O\\n \\t\\t\\t}\\n \\t\\t\\t\\n \\t\\t\\tfor(var i in objTypeDef){ \\n-\\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__'){\\n+\\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){\\n \\t\\t\\t\\t\\tvar value = instance[i];\\n \\t\\t\\t\\t\\t\/\/ skip _not_ specified properties\\n \\t\\t\\t\\t\\tif (value === undefined && options.existingOnly) continue;\"}}",
            "message_norm":"protect against constructor modification, #84",
            "language":"en",
            "entities":"[('protect', 'SECWORD', ''), ('#84', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/validate.js'])",
            "num_files":1.0
        },
        {
            "index":415,
            "vuln_id":"GHSA-4fg4-p75j-w5xj",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b'}",
            "dataset":"osv",
            "summary":"Heap out of bounds in `QuantizedBatchNormWithGlobalNormalization` ### Impact\nAn attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([1], shape=[1, 1, 1, 1], dtype=tf.quint8)\nt_min = tf.constant([], shape=[0], dtype=tf.float32)\nt_max = tf.constant([], shape=[0], dtype=tf.float32)\nm = tf.constant([1], shape=[1], dtype=tf.quint8)\nm_min = tf.constant([], shape=[0], dtype=tf.float32)\nm_max = tf.constant([], shape=[0], dtype=tf.float32)\nv = tf.constant([1], shape=[1], dtype=tf.quint8)\nv_min = tf.constant([], shape=[0], dtype=tf.float32)\nv_max = tf.constant([], shape=[0], dtype=tf.float32)\nbeta = tf.constant([1], shape=[1], dtype=tf.quint8)\nbeta_min = tf.constant([], shape=[0], dtype=tf.float32)\nbeta_max = tf.constant([], shape=[0], dtype=tf.float32)\ngamma = tf.constant([1], shape=[1], dtype=tf.quint8)\ngamma_min = tf.constant([], shape=[0], dtype=tf.float32)\ngamma_max = tf.constant([], shape=[0], dtype=tf.float32) \n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```                         \n                            \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f\/tensorflow\/core\/kernels\/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty: \n  \n```cc\nconst float input_min = context->input(1).flat<float>()(0);\nconst float input_max = context->input(2).flat<float>()(0);\n...\nconst float mean_min = context->input(4).flat<float>()(0);\nconst float mean_max = context->input(5).flat<float>()(0);\n...\nconst float var_min = context->input(7).flat<float>()(0);\nconst float var_max = context->input(8).flat<float>()(0);\n...\nconst float beta_min = context->input(10).flat<float>()(0);\nconst float beta_max = context->input(11).flat<float>()(0);\n...\nconst float gamma_min = context->input(13).flat<float>()(0);\nconst float gamma_max = context->input(14).flat<float>()(0);\n```\n\nIf any of these inputs is empty, `.flat<T>()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "commit_sha":"d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "patch":"SINGLE",
            "chain_ord":"['d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b']",
            "before_first_fix_commit":"{'55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f'}",
            "last_fix_commit":"d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2021, 18:40:06",
            "message":"Add missing validation in `QuantizedBatchNormWithGlobalNormalization`\n\nPiperOrigin-RevId: 370123451\nChange-Id: Id234d6dab1ec21230bb8e503dba30f899af87f33",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 67, 'deletions': 10, 'total': 77}",
            "files":"{'tensorflow\/core\/kernels\/quantized_batch_norm_op.cc': {'additions': 67, 'deletions': 10, 'changes': 77, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b\/tensorflow%2Fcore%2Fkernels%2Fquantized_batch_norm_op.cc', 'patch': '@@ -173,20 +173,50 @@ class QuantizedBatchNormOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     const Tensor& input = context->input(0);\\n-    const float input_min = context->input(1).flat<float>()(0);\\n-    const float input_max = context->input(2).flat<float>()(0);\\n+    const auto& input_min_tensor = context->input(1);\\n+    OP_REQUIRES(context, input_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"input_min must have 1 element\"));\\n+    const float input_min = input_min_tensor.flat<float>()(0);\\n+    const auto& input_max_tensor = context->input(2);\\n+    OP_REQUIRES(context, input_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"input_max must have 1 element\"));\\n+    const float input_max = input_max_tensor.flat<float>()(0);\\n     const Tensor& mean = context->input(3);\\n-    const float mean_min = context->input(4).flat<float>()(0);\\n-    const float mean_max = context->input(5).flat<float>()(0);\\n+    const auto& mean_min_tensor = context->input(4);\\n+    OP_REQUIRES(context, mean_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"mean_min must have 1 element\"));\\n+    const float mean_min = mean_min_tensor.flat<float>()(0);\\n+    const auto& mean_max_tensor = context->input(5);\\n+    OP_REQUIRES(context, mean_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"mean_max must have 1 element\"));\\n+    const float mean_max = mean_max_tensor.flat<float>()(0);\\n     const Tensor& var = context->input(6);\\n-    const float var_min = context->input(7).flat<float>()(0);\\n-    const float var_max = context->input(8).flat<float>()(0);\\n+    const auto& var_min_tensor = context->input(7);\\n+    OP_REQUIRES(context, var_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"var_min must have 1 element\"));\\n+    const float var_min = var_min_tensor.flat<float>()(0);\\n+    const auto& var_max_tensor = context->input(8);\\n+    OP_REQUIRES(context, var_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"var_max must have 1 element\"));\\n+    const float var_max = var_max_tensor.flat<float>()(0);\\n     const Tensor& beta = context->input(9);\\n-    const float beta_min = context->input(10).flat<float>()(0);\\n-    const float beta_max = context->input(11).flat<float>()(0);\\n+    const auto& beta_min_tensor = context->input(10);\\n+    OP_REQUIRES(context, beta_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"beta_min must have 1 element\"));\\n+    const float beta_min = beta_min_tensor.flat<float>()(0);\\n+    const auto& beta_max_tensor = context->input(11);\\n+    OP_REQUIRES(context, beta_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"beta_max must have 1 element\"));\\n+    const float beta_max = beta_max_tensor.flat<float>()(0);\\n     const Tensor& gamma = context->input(12);\\n-    const float gamma_min = context->input(13).flat<float>()(0);\\n-    const float gamma_max = context->input(14).flat<float>()(0);\\n+    const auto& gamma_min_tensor = context->input(13);\\n+    OP_REQUIRES(context, gamma_min_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"gamma_min must have 1 element\"));\\n+    const float gamma_min = gamma_min_tensor.flat<float>()(0);\\n+    const auto& gamma_max_tensor = context->input(14);\\n+    OP_REQUIRES(context, gamma_max_tensor.NumElements() == 1,\\n+                errors::InvalidArgument(\"gamma_max must have 1 element\"));\\n+    const float gamma_max = gamma_max_tensor.flat<float>()(0);\\n \\n     OP_REQUIRES(context, input.dims() == 4,\\n                 errors::InvalidArgument(\"input must be 4-dimensional\",\\n@@ -203,6 +233,33 @@ class QuantizedBatchNormOp : public OpKernel {\\n     OP_REQUIRES(context, gamma.dims() == 1,\\n                 errors::InvalidArgument(\"gamma must be 1-dimensional\",\\n                                         gamma.shape().DebugString()));\\n+    OP_REQUIRES(context, mean.NumElements() > 1,\\n+                errors::InvalidArgument(\"Must have at least a mean value\",\\n+                                        gamma.shape().DebugString()));\\n+    OP_REQUIRES(context, mean.NumElements() > 1,\\n+                errors::InvalidArgument(\"Must have at least a mean value\"));\\n+    const auto last_dim = input.shape().dims() - 1;\\n+    OP_REQUIRES(context,\\n+                mean.shape().dim_size(0) == input.shape().dim_size(last_dim),\\n+                errors::InvalidArgument(\"Must provide as many means as the \"\\n+                                        \"last dimension of the input tensor: \",\\n+                                        mean.shape().DebugString(), \" vs. \",\\n+                                        input.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == var.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and variance tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", var.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == beta.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and beta tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", beta.shape().DebugString()));\\n+    OP_REQUIRES(\\n+        context, mean.shape().dim_size(0) == gamma.shape().dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Mean and gamma tensors must have the same shape: \",\\n+            mean.shape().DebugString(), \" vs. \", gamma.shape().DebugString()));\\n \\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"add missing validation in `quantizedbatchnormwithglobalnormalization`\n\npiperorigin-revid: 370123451\nchange-id: id234d6dab1ec21230bb8e503dba30f899af87f33",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('370123451', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_batch_norm_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3492,
            "vuln_id":"GHSA-xrr4-74mc-rpjc",
            "cwe_id":"{'CWE-59'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/irmen\/Pyro3\/commit\/554e095a62c4412c91f981e72fd34a936ac2bf1e'}",
            "dataset":"osv",
            "summary":"Pyro mishandles pid files in temporary directory locations and opening the pid file as root pyro before 3.15 unsafely handles pid files in temporary directory locations and opening the pid file as root. An attacker can use this flaw to overwrite arbitrary files via symlinks.",
            "published_date":"2018-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/irmen\/Pyro3",
            "commit_href":"https:\/\/github.com\/irmen\/Pyro3\/commit\/554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "commit_sha":"554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "patch":"SINGLE",
            "chain_ord":"['554e095a62c4412c91f981e72fd34a936ac2bf1e']",
            "before_first_fix_commit":"{'1df908f8e8bd3eaf0fd2f1b80d38405f6a10328d'}",
            "last_fix_commit":"554e095a62c4412c91f981e72fd34a936ac2bf1e",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/01\/2011, 13:32:40",
            "message":"changed pidfile location because of security vulnerability, debian bug #631912",
            "author":"irmen",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'Pyro\/ext\/daemonizer.py': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/irmen\/Pyro3\/raw\/554e095a62c4412c91f981e72fd34a936ac2bf1e\/Pyro%2Fext%2Fdaemonizer.py', 'patch': '@@ -47,7 +47,9 @@ class Daemonizer:\\n     \"\"\"\\n     def __init__(self, pidfile=None):\\n         if not pidfile:\\n-            self.pidfile = \"\/tmp\/%s.pid\" % self.__class__.__name__.lower()\\n+            # PID file moved out of \/tmp to avoid security vulnerability\\n+            # changed by Debian maintainer per Debian bug #631912\\n+            self.pidfile = \"\/var\/run\/pyro-%s.pid\" % self.__class__.__name__.lower()\\n         else:\\n             self.pidfile = pidfile\\n \\n@@ -121,12 +123,16 @@ def main_loop(self):\\n \\n     def process_command_line(self, argv, verbose=1):\\n         usage = \"usage:  %s  start | stop | restart | status | debug \" \\\\\\n+                \"[--pidfile=...] \" \\\\\\n                 \"(run as non-daemon)\" % os.path.basename(argv[0])\\n         if len(argv) < 2:\\n             print usage\\n             raise SystemExit\\n         else:\\n             operation = argv[1]\\n+            if len(argv) > 2 and argv[2].startswith(\\'--pidfile=\\') and \\\\\\n+                len(argv[2]) > len(\\'--pidfile=\\'):\\n+                self.pidfile = argv[2][len(\\'--pidfile=\\'):]\\n         pid = self.get_pid()\\n         if operation == \\'status\\':\\n             if self.is_process_running():'}}",
            "message_norm":"changed pidfile location because of security vulnerability, debian bug #631912",
            "language":"en",
            "entities":"[('changed', 'ACTION', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('bug', 'FLAW', ''), ('#631912', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Pyro\/ext\/daemonizer.py'])",
            "num_files":1.0
        },
        {
            "index":2404,
            "vuln_id":"GHSA-mc7w-4cjf-c973",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/peterbraden\/node-opencv\/commit\/aaece6921d7368577511f06c94c99dd4e9653563', 'https:\/\/github.com\/peterbraden\/node-opencv\/commit\/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b'}",
            "dataset":"osv",
            "summary":"OS Command Injection in node-opencv utils\/find-opencv.js in node-opencv (aka OpenCV bindings for Node.js) prior to 6.1.0 is vulnerable to Command Injection. It does not validate user input allowing attackers to execute arbitrary commands.",
            "published_date":"2021-10-12",
            "chain_len":2,
            "project":"https:\/\/github.com\/peterbraden\/node-opencv",
            "commit_href":"https:\/\/github.com\/peterbraden\/node-opencv\/commit\/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b",
            "commit_sha":"81a4b8620188e89f7e4fc985f3c89b58d4bcc86b",
            "patch":"MULTI",
            "chain_ord":"['81a4b8620188e89f7e4fc985f3c89b58d4bcc86b', 'aaece6921d7368577511f06c94c99dd4e9653563']",
            "before_first_fix_commit":"{'58f248af12cbdbccfe88f79637402d4796de3d39'}",
            "last_fix_commit":"aaece6921d7368577511f06c94c99dd4e9653563",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/20\/2019, 08:45:23",
            "message":"Remove untrusted input to exec",
            "author":"Peter Braden",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'utils\/find-opencv.js': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/peterbraden\/node-opencv\/raw\/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b\/utils%2Ffind-opencv.js', 'patch': '@@ -2,13 +2,13 @@\\n \\n var exec = require(\"child_process\").exec;\\n var fs = require(\"fs\");\\n-var flag = process.argv[2] || \"--exists\";\\n+var flag = \"--exists\";\\n \\n \/\/ Normally |pkg-config opencv ...| could report either OpenCV 2.x or OpenCV 3.y\\n \/\/ depending on what is installed.  To enable both 2.x and 3.y to co-exist on\\n \/\/ the same machine, the opencv.pc for 3.y can be installed as opencv3.pc and\\n \/\/ then selected by |export PKG_CONFIG_OPENCV3=1| before building node-opencv.\\n-var opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : \\'\"opencv >= 2.3.1\"\\';\\n+var opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : \\' \"opencv >= 2.3.1\"\\';\\n \\n function main(){\\n     \/\/Try using pkg-config, but if it fails and it is on Windows, try the fallback\\n@@ -18,7 +18,7 @@ function main(){\\n                 fallback();\\n             }\\n             else{\\n-                throw new Error(\"ERROR: failed to run: pkg-config\", opencv, flag);\\n+              throw new Error(\"ERROR: failed to run: pkg-config\" + opencv + \" \" + flag + \" - Is OpenCV installed?\");\\n             }\\n         }\\n         else{'}}",
            "message_norm":"remove untrusted input to exec",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('untrusted', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['utils\/find-opencv.js'])",
            "num_files":1.0
        },
        {
            "index":1230,
            "vuln_id":"GHSA-8m9g-647g-5pxw",
            "cwe_id":"{'CWE-835'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/Yubico\/yubihsm-connector\/commit\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed'}",
            "dataset":"osv",
            "summary":"Infinite loop in Yubico yubihsm-connector An issue was discovered in the \/api\/connector endpoint handler in Yubico yubihsm-connector before 3.0.1 (in YubiHSM SDK before 2021.04). The handler did not validate the length of the request, which can lead to a state where yubihsm-connector becomes stuck in a loop waiting for the YubiHSM to send it data, preventing any further operations until the yubihsm-connector is restarted. An attacker can send 0, 1, or 2 bytes to trigger this.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Yubico\/yubihsm-connector",
            "commit_href":"https:\/\/github.com\/Yubico\/yubihsm-connector\/commit\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "commit_sha":"82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "patch":"SINGLE",
            "chain_ord":"['82bdf202c53460bac9106cc9b4b34a0a16cae0ed']",
            "before_first_fix_commit":"{'33e94e9034ffc52e29639386a191abd9b455d84b'}",
            "last_fix_commit":"82bdf202c53460bac9106cc9b4b34a0a16cae0ed",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/15\/2021, 13:00:39",
            "message":"Check content-length to avoid denial-of-service",
            "author":"Per Nilsson",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'api.go': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Yubico\/yubihsm-connector\/raw\/82bdf202c53460bac9106cc9b4b34a0a16cae0ed\/api.go', 'patch': '@@ -177,19 +177,19 @@ func apiHandler(w http.ResponseWriter, r *http.Request, timeout time.Duration, s\\n \\t\\treturn\\n \\t}\\n \\n+\\tif r.ContentLength < 3 || r.ContentLength > 2048 {\\n+\\t\\thttp.Error(w, http.StatusText(http.StatusBadRequest),\\n+\\t\\t\\thttp.StatusBadRequest)\\n+\\t\\treturn\\n+\\t}\\n+\\n \\tif buf, err = ioutil.ReadAll(r.Body); err != nil {\\n \\t\\tclog.WithError(err).Error(\"failed reading incoming request\")\\n \\t\\thttp.Error(w, http.StatusText(http.StatusInternalServerError),\\n \\t\\t\\thttp.StatusInternalServerError)\\n \\t\\treturn\\n \\t}\\n \\n-\\tif len(buf) < 3 || len(buf) > 2048 {\\n-\\t\\thttp.Error(w, http.StatusText(http.StatusBadRequest),\\n-\\t\\t\\thttp.StatusBadRequest)\\n-\\t\\treturn\\n-\\t}\\n-\\n \\tif buf, err = usbProxy(buf, cid, timeout, serial); err != nil {\\n \\t\\tclog.WithError(err).Error(\"failed usb proxy\")\\n \\t\\thttp.Error(w, http.StatusText(http.StatusInternalServerError),'}}",
            "message_norm":"check content-length to avoid denial-of-service",
            "language":"en",
            "entities":"[('denial-of-service', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['api.go'])",
            "num_files":1.0
        },
        {
            "index":1519,
            "vuln_id":"GHSA-c968-pq7h-7fxv",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/311403edbc9816df80274bd1ea8b3c0c0f22c3fa'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Conv3DBackprop*` ### Impact\nThe `tf.raw_ops.Conv3DBackprop*` operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([0, 0, 0, 0, 0], shape=[5], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 1, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n                            \ntf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])\n```\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([1], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nfilter_tensor = tf.constant([0, 0, 0, 1, 0], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[1, 1, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding='SAME', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a91bb59769f19146d5a0c20060244378e878f140\/tensorflow\/core\/kernels\/conv_grad_ops_3d.cc#L430-L450) does not check that the divisor used in computing the shard size is not zero:\n\n```cc\n  const int64 size_A = output_image_size * dims.out_depth;\n  const int64 size_B = filter_total_size * dims.out_depth;\n  const int64 size_C = output_image_size * filter_total_size;\n  const int64 work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction\n        ? 1\n        : (target_working_set_size + work_unit_size - 1) \/ work_unit_size;\n```\n\nThus, if attacker controls the input sizes, they can trigger a denial of service via a division by zero error.\n\n### Patches\nWe have patched the issue in GitHub commit [311403edbc9816df80274bd1ea8b3c0c0f22c3fa](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/311403edbc9816df80274bd1ea8b3c0c0f22c3fa).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
            "commit_sha":"311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
            "patch":"SINGLE",
            "chain_ord":"['311403edbc9816df80274bd1ea8b3c0c0f22c3fa']",
            "before_first_fix_commit":"{'a91bb59769f19146d5a0c20060244378e878f140'}",
            "last_fix_commit":"311403edbc9816df80274bd1ea8b3c0c0f22c3fa",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2021, 23:00:40",
            "message":"Eliminate a division by 0 in 3D convolutions.\n\nAlso prevent a CHECK failed introduced in the most recent change.\n\nPiperOrigin-RevId: 369322073\nChange-Id: I4f609c028f89565fb2b49c3fdd20b63496582bae",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 42, 'deletions': 0, 'total': 42}",
            "files":"{'tensorflow\/core\/kernels\/conv_grad_ops_3d.cc': {'additions': 42, 'deletions': 0, 'changes': 42, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/311403edbc9816df80274bd1ea8b3c0c0f22c3fa\/tensorflow%2Fcore%2Fkernels%2Fconv_grad_ops_3d.cc', 'patch': '@@ -239,6 +239,14 @@ class Conv3DBackpropInputOp : public OpKernel {\\n       input_shape = context->input(0).shape();\\n     }\\n \\n+    OP_REQUIRES(context, input_shape.dims() == 5,\\n+                errors::InvalidArgument(\"input tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, filter_shape.dims() == 5,\\n+        errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, out_backprop_shape.dims() == 5,\\n+        errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));\\n     OP_REQUIRES(\\n         context, input_shape.dim_size(4) == filter_shape.dim_size(3),\\n         errors::InvalidArgument(\"input and filter_sizes must have the same \"\\n@@ -360,6 +368,14 @@ class Conv3DCustomBackpropInputOp : public OpKernel {\\n       input_shape = context->input(0).shape();\\n     }\\n \\n+    OP_REQUIRES(context, input_shape.dims() == 5,\\n+                errors::InvalidArgument(\"input tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, filter_shape.dims() == 5,\\n+        errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, out_backprop_shape.dims() == 5,\\n+        errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));\\n     OP_REQUIRES(\\n         context, input_shape.dim_size(4) == filter_shape.dim_size(3),\\n         errors::InvalidArgument(\"input and filter_sizes must have the same \"\\n@@ -444,6 +460,11 @@ class Conv3DCustomBackpropInputOp : public OpKernel {\\n     \/\/ contraction compared to sharding and matmuls.\\n     const bool use_parallel_contraction = dims.batch_size == 1;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size > 0,\\n+        errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"\\n+                                \"must all have at least 1 element\"));\\n+\\n     const size_t shard_size =\\n         use_parallel_contraction\\n             ? 1\\n@@ -724,6 +745,14 @@ class Conv3DBackpropFilterOp : public OpKernel {\\n       filter_shape = context->input(1).shape();\\n     }\\n \\n+    OP_REQUIRES(context, input_shape.dims() == 5,\\n+                errors::InvalidArgument(\"input tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, filter_shape.dims() == 5,\\n+        errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, out_backprop_shape.dims() == 5,\\n+        errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));\\n     OP_REQUIRES(\\n         context, input_shape.dim_size(4) == filter_shape.dim_size(3),\\n         errors::InvalidArgument(\"input and filter_sizes must have the same \"\\n@@ -850,6 +879,14 @@ class Conv3DCustomBackpropFilterOp : public OpKernel {\\n       filter_shape = context->input(1).shape();\\n     }\\n \\n+    OP_REQUIRES(context, input_shape.dims() == 5,\\n+                errors::InvalidArgument(\"input tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, filter_shape.dims() == 5,\\n+        errors::InvalidArgument(\"filter_sizes tensor must have 5 dimensions\"));\\n+    OP_REQUIRES(\\n+        context, out_backprop_shape.dims() == 5,\\n+        errors::InvalidArgument(\"out_backprop tensor must have 5 dimensions\"));\\n     OP_REQUIRES(\\n         context, input_shape.dim_size(4) == filter_shape.dim_size(3),\\n         errors::InvalidArgument(\"input and filter_sizes must have the same \"\\n@@ -936,6 +973,11 @@ class Conv3DCustomBackpropFilterOp : public OpKernel {\\n \\n     const int64 work_unit_size = size_A + size_B + size_C;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size > 0,\\n+        errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"\\n+                                \"must all have at least 1 element\"));\\n+\\n     const size_t shard_size =\\n         (target_working_set_size + work_unit_size - 1) \/ work_unit_size;'}}",
            "message_norm":"eliminate a division by 0 in 3d convolutions.\n\nalso prevent a check failed introduced in the most recent change.\n\npiperorigin-revid: 369322073\nchange-id: i4f609c028f89565fb2b49c3fdd20b63496582bae",
            "language":"en",
            "entities":"[('division by 0', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('369322073', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_grad_ops_3d.cc'])",
            "num_files":1.0
        },
        {
            "index":2695,
            "vuln_id":"GHSA-q485-j897-qc27",
            "cwe_id":"{'CWE-611'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/zhutougg\/c3p0\/commit\/2eb0ea97f745740b18dd45e4a909112d4685f87b'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects com.mchange:c3p0 c3p0 0.9.5.2 allows XXE in extractXmlConfigFromInputStream in com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java during initialization.",
            "published_date":"2019-01-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/zhutougg\/c3p0",
            "commit_href":"https:\/\/github.com\/zhutougg\/c3p0\/commit\/2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "commit_sha":"2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "patch":"SINGLE",
            "chain_ord":"['2eb0ea97f745740b18dd45e4a909112d4685f87b']",
            "before_first_fix_commit":"{'6796e1d0951b52897531e4ea62252191dacb17b5'}",
            "last_fix_commit":"2eb0ea97f745740b18dd45e4a909112d4685f87b",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/20\/2018, 13:11:13",
            "message":"Repair XXE vulnerability at initialization",
            "author":"zhutougg",
            "comments":"{'com_1': {'author': 'crazyguyonabike', 'datetime': '01\/09\/2019, 23:26:09', 'body': 'If this actually fixes the CVE, can you do a PR to the original source and\/or make a release?'}, 'com_2': {'author': 'mprins', 'datetime': '02\/21\/2019, 11:17:44', 'body': 'this is resolved in v.0.9.5.3 in a more elegant way, see: https:\/\/github.com\/swaldman\/c3p0\/commit\/7dfdda63f42759a5ec9b63d725b7412f74adb3e1'}}",
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'src\/java\/com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/zhutougg\/c3p0\/raw\/2eb0ea97f745740b18dd45e4a909112d4685f87b\/src%2Fjava%2Fcom%2Fmchange%2Fv2%2Fc3p0%2Fcfg%2FC3P0ConfigXmlUtils.java', 'patch': '@@ -144,6 +144,7 @@ public static C3P0Config extractXmlConfigFromDefaultResource() throws Exception\\n     public static C3P0Config extractXmlConfigFromInputStream(InputStream is) throws Exception\\n     {\\n         DocumentBuilderFactory fact = DocumentBuilderFactory.newInstance();\\n+\\tfact.setExpandEntityReferences(false);\\n         DocumentBuilder db = fact.newDocumentBuilder();\\n         Document doc = db.parse( is );'}}",
            "message_norm":"repair xxe vulnerability at initialization",
            "language":"en",
            "entities":"[('xxe', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('initialization', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/java\/com\/mchange\/v2\/c3p0\/cfg\/C3P0ConfigXmlUtils.java'])",
            "num_files":1.0
        },
        {
            "index":2436,
            "vuln_id":"GHSA-mjvc-j6rv-9xj8",
            "cwe_id":"{'CWE-215'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/b12e1a490c79460bff019f34b2e17112249b16ec'}",
            "dataset":"osv",
            "summary":"Insertion of Sensitive Information Into Debugging Code in Microweber Microweber prior to 1.3 may expose sensitive information about a server and a user when running the server in debug mode.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/b12e1a490c79460bff019f34b2e17112249b16ec",
            "commit_sha":"b12e1a490c79460bff019f34b2e17112249b16ec",
            "patch":"SINGLE",
            "chain_ord":"['b12e1a490c79460bff019f34b2e17112249b16ec']",
            "before_first_fix_commit":"{'a5925f74d39775771d4c37c8d4c1acbb762fda0a'}",
            "last_fix_commit":"b12e1a490c79460bff019f34b2e17112249b16ec",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 10:35:12",
            "message":"Update Handler.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'src\/MicroweberPackages\/App\/Exceptions\/Handler.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/b12e1a490c79460bff019f34b2e17112249b16ec\/src%2FMicroweberPackages%2FApp%2FExceptions%2FHandler.php', 'patch': '@@ -12,9 +12,9 @@ class Handler extends ExceptionHandler\\n      *\\n      * @var array\\n      *\/\\n-\/\/    protected $dontReport = [\\n-\/\/        \/\/\\n-\/\/    ];\\n+    protected $dontReport = [\\n+        \\\\BadMethodCallException::class,\\n+    ];\\n \\n     \/**\\n      * A list of the inputs that are never flashed for validation exceptions.\\n@@ -102,10 +102,10 @@ private function getMicroweberErrorBarHtml()\\n                  <a href=\"\\' . api_url(\\'mw_post_update\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload database<\/a>\\n                  <a href=\"\\' . api_url(\\'mw_reload_modules\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload modules<\/a>\\n                  <a href=\"\\' . api_url(\\'clearcache\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Clear cache<\/a>\\n-                 \\n+\\n                  <a href=\"\" class=\"btn\">Refresh<\/a>\\n             <\/div>\\n         <\/div>\\n         \\';\\n     }\\n-}\\n\\\\ No newline at end of file\\n+}'}}",
            "message_norm":"update handler.php",
            "language":"da",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/App\/Exceptions\/Handler.php'])",
            "num_files":1.0
        },
        {
            "index":2331,
            "vuln_id":"GHSA-m2q3-53fq-7h66",
            "cwe_id":"{'CWE-200'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/gollum\/gollum\/commit\/ce68a88293ce3b18c261312392ad33a88bb69ea1'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects gollum The Precious module in gollum before 4.0.1 allows remote attackers to read arbitrary files by leveraging the lack of a certain temporary-file check.",
            "published_date":"2018-08-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/gollum\/gollum",
            "commit_href":"https:\/\/github.com\/gollum\/gollum\/commit\/ce68a88293ce3b18c261312392ad33a88bb69ea1",
            "commit_sha":"ce68a88293ce3b18c261312392ad33a88bb69ea1",
            "patch":"SINGLE",
            "chain_ord":"['ce68a88293ce3b18c261312392ad33a88bb69ea1']",
            "before_first_fix_commit":"{'288f75929d57bff1753b47aa860066ce674d5229'}",
            "last_fix_commit":"ce68a88293ce3b18c261312392ad33a88bb69ea1",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/20\/2015, 11:53:02",
            "message":"Added security check.",
            "author":"Bart Kamphorst",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'lib\/gollum\/app.rb': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gollum\/gollum\/raw\/ce68a88293ce3b18c261312392ad33a88bb69ea1\/lib%2Fgollum%2Fapp.rb', 'patch': \"@@ -176,6 +176,7 @@ def wiki_new\\n         fullname = params[:file][:filename]\\n         tempfile = params[:file][:tempfile]\\n       end\\n+      halt 500 unless tempfile.is_a? Tempfile\\n \\n       # Remove page file dir prefix from upload path if necessary -- committer handles this itself\\n       dir      = wiki.per_page_uploads ? params[:upload_dest].match(\/^(#{wiki.page_file_dir}\\\\\/+)?(.*)\/)[2] : 'uploads'\"}}",
            "message_norm":"added security check.",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('security', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/gollum\/app.rb'])",
            "num_files":1.0
        },
        {
            "index":2950,
            "vuln_id":"GHSA-rh9j-f5f8-rvgc",
            "cwe_id":"{'CWE-295', 'CWE-287'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/parse-community\/parse-server\/commit\/ba2b0a9cb9a568817a114b132a4c2e0911d76df1', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/2084b7c569697a5230e42511799eeac9219db5a9'}",
            "dataset":"osv",
            "summary":"Authentication bypass vulnerability in Apple Game Center auth adapter  ### Impact\nThe certificate in Apple Game Center auth adapter not validated. As a result, authentication could potentially be bypassed by making a fake certificate accessible via certain Apple domains and providing the URL to that certificate in an authData object.\n\n### Patches\nTo prevent this, a new `rootCertificateUrl` property is introduced to the Parse Server Apple Game Center auth adapter which takes the URL to the root certificate of Apple's Game Center authentication certificate. If no value is set, the `rootCertificateUrl` property defaults to the URL of the [current root certificate](https:\/\/developer.apple.com\/news\/?id=stttq465) as of May 27, 2022.\n\nKeep in mind that the root certificate can change at any time (expected to be announced by Apple) and that it is the developer's responsibility to keep the root certificate URL up-to-date when using the Parse Server Apple Game Center auth adapter.\n\n### Workarounds\nNone.\n\n### References\n- https:\/\/github.com\/parse-community\/parse-server\/security\/advisories\/GHSA-rh9j-f5f8-rvgc\n- https:\/\/developer.apple.com\/news\/?id=stttq465\n- https:\/\/github.com\/parse-community\/parse-server\n\n### More information\n* For questions or comments about this vulnerability visit our [community forum](http:\/\/community.parseplatform.org) or [community chat](http:\/\/chat.parseplatform.org)\n* Report other vulnerabilities at [report.parseplatform.org](https:\/\/report.parseplatform.org)",
            "published_date":"2022-06-17",
            "chain_len":3,
            "project":"https:\/\/github.com\/parse-community\/parse-server",
            "commit_href":"https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/0cc299f82e367518f2fe7a53b99f3f801a338cf4",
            "commit_sha":"0cc299f82e367518f2fe7a53b99f3f801a338cf4",
            "patch":"MULTI",
            "chain_ord":"['2084b7c569697a5230e42511799eeac9219db5a9', '0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'ba2b0a9cb9a568817a114b132a4c2e0911d76df1']",
            "before_first_fix_commit":"{'a8aef820afa2c8d87683668c2961e523016bad9b'}",
            "last_fix_commit":"ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/17\/2022, 15:30:54",
            "message":"Update gcenter.js",
            "author":"Manuel Trezza",
            "comments":null,
            "stats":"{'additions': 17, 'deletions': 9, 'total': 26}",
            "files":"{'src\/Adapters\/Auth\/gcenter.js': {'additions': 17, 'deletions': 9, 'changes': 26, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/parse-community\/parse-server\/raw\/0cc299f82e367518f2fe7a53b99f3f801a338cf4\/src%2FAdapters%2FAuth%2Fgcenter.js', 'patch': \"@@ -56,8 +56,9 @@ async function getAppleCertificate(publicKeyUrl) {\\n   const cert_headers = await new Promise((resolve, reject) =>\\n     https.get(headOptions, res => resolve(res.headers)).on('error', reject)\\n   );\\n+  const validContentTypes = ['application\/x-x509-ca-cert', 'application\/pkix-cert'];\\n   if (\\n-    cert_headers['content-type'] !== 'application\/pkix-cert' ||\\n+    !validContentTypes.includes(cert_headers['content-type']) ||\\n     cert_headers['content-length'] == null ||\\n     cert_headers['content-length'] > 10000\\n   ) {\\n@@ -66,7 +67,7 @@ async function getAppleCertificate(publicKeyUrl) {\\n       `Apple Game Center - invalid publicKeyUrl: ${publicKeyUrl}`\\n     );\\n   }\\n-  const {certificate, headers} = await getCertificate(publicKeyUrl);\\n+  const { certificate, headers } = await getCertificate(publicKeyUrl);\\n   if (headers['cache-control']) {\\n     const expire = headers['cache-control'].match(\/max-age=([0-9]+)\/);\\n     if (expire) {\\n@@ -90,15 +91,15 @@ function getCertificate(url, buffer) {\\n         });\\n         res.on('end', () => {\\n           if (buffer) {\\n-            resolve({certificate: Buffer.concat(data), headers: res.headers});\\n+            resolve({ certificate: Buffer.concat(data), headers: res.headers });\\n             return;\\n           }\\n           let cert = '';\\n           for (const chunk of data) {\\n             cert += chunk.toString('base64');\\n           }\\n           const certificate = convertX509CertToPEM(cert);\\n-          resolve({certificate, headers: res.headers});\\n+          resolve({ certificate, headers: res.headers });\\n         });\\n       })\\n       .on('error', reject);\\n@@ -132,7 +133,10 @@ function verifySignature(publicKey, authData) {\\n function verifyPublicKeyIssuer(cert, publicKeyUrl) {\\n   const publicKeyCert = pki.certificateFromPem(cert);\\n   if (!ca.cert) {\\n-    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');\\n+    throw new Parse.Error(\\n+      Parse.Error.OBJECT_NOT_FOUND,\\n+      'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'\\n+    );\\n   }\\n   try {\\n     if (!ca.cert.verify(publicKeyCert)) {\\n@@ -163,21 +167,25 @@ async function validateAuthData(authData) {\\n \/\/ Returns a promise that fulfills if this app id is valid.\\n async function validateAppId(appIds, authData, options = {}) {\\n   if (!options.rootCertificateUrl) {\\n-    options.rootCertificateUrl = 'https:\/\/cacerts.digicert.com\/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem'\\n+    options.rootCertificateUrl =\\n+      'https:\/\/cacerts.digicert.com\/DigiCertTrustedG4CodeSigningRSA4096SHA3842021CA1.crt.pem';\\n   }\\n   if (ca.url === options.rootCertificateUrl) {\\n     return;\\n   }\\n-  const {certificate, headers} = await getCertificate(options.rootCertificateUrl, true);\\n+  const { certificate, headers } = await getCertificate(options.rootCertificateUrl, true);\\n   if (\\n     headers['content-type'] !== 'application\/x-pem-file' ||\\n     headers['content-length'] == null ||\\n     headers['content-length'] > 10000\\n   ) {\\n-    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.');\\n+    throw new Parse.Error(\\n+      Parse.Error.OBJECT_NOT_FOUND,\\n+      'Apple Game Center auth adapter parameter `rootCertificateURL` is invalid.'\\n+    );\\n   }\\n   ca.cert = pki.certificateFromPem(certificate);\\n-  ca.url = options.rootCertificateUrl\\n+  ca.url = options.rootCertificateUrl;\\n }\\n \\n module.exports = {\"}}",
            "message_norm":"update gcenter.js",
            "language":"nl",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Adapters\/Auth\/gcenter.js'])",
            "num_files":1.0
        },
        {
            "index":2575,
            "vuln_id":"GHSA-pgcq-h79j-2f69",
            "cwe_id":"{'CWE-354'}",
            "score":7.0,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a'}",
            "dataset":"osv",
            "summary":"Incomplete validation of shapes in multiple TF ops ### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving\/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-11-10",
            "chain_len":6,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07",
            "commit_sha":"4dddb2fd0b01cdd196101afbba6518658a2c9e07",
            "patch":"MULTI",
            "chain_ord":"['579261dcd446385831fe4f7457d802a59685121d', '4d74d8a00b07441cba090a02e0dd9ed385145bf4', '68422b215e618df5ad375bcdc6d2052e9fd3080a', 'da4aad5946be30e5f049920fa076e1f7ef021261', '4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'e7f497570abb6b4ae5af4970620cd880e4c0c904']",
            "before_first_fix_commit":"{'e0214528739cad3bd02fbf2696a793dc342ffb94'}",
            "last_fix_commit":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "chain_ord_pos":5.0,
            "commit_datetime":"10\/20\/2021, 21:53:58",
            "message":"Fix segfault in pools on empty shapes when certain dimension were very large.\n\nPooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. This multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\nPiperOrigin-RevId: 404644978\nChange-Id: Ic79f89c970357ca2962b1f231449066db9403146",
            "author":"Reed Wanderman-Milne",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/core\/kernels\/pooling_ops_common.h': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4dddb2fd0b01cdd196101afbba6518658a2c9e07\/tensorflow%2Fcore%2Fkernels%2Fpooling_ops_common.h', 'patch': \"@@ -189,6 +189,9 @@ class MaxPoolingOp : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     \/\/ On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     \/\/ EigenMatrix version that is currently faster than Eigen's\\n     \/\/ Spatial MaxPooling implementation.\\n@@ -443,6 +446,9 @@ class MaxPoolingV2Op : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     \/\/ On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     \/\/ EigenMatrix version that is currently faster than Eigen's\\n     \/\/ Spatial MaxPooling implementation.\\n@@ -561,6 +567,9 @@ template <typename Device, typename T>\\n void SpatialAvgPool(OpKernelContext* context, Tensor* output,\\n                     const Tensor& input, const PoolParameters& params,\\n                     const Padding& padding) {\\n+  if (output->NumElements() == 0) {\\n+    return;\\n+  }\\n   typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\\n       ConstEigenMatrixMap;\\n   typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\"}}",
            "message_norm":"fix segfault in pools on empty shapes when certain dimension were very large.\n\npooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. this multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\npiperorigin-revid: 404644978\nchange-id: ic79f89c970357ca2962b1f231449066db9403146",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('404644978', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/pooling_ops_common.h'])",
            "num_files":1.0
        },
        {
            "index":1677,
            "vuln_id":"GHSA-f6px-w8rh-7r89",
            "cwe_id":"{'CWE-362', 'CWE-732'}",
            "score":4.7,
            "chain":"{'https:\/\/github.com\/beego\/beego\/pull\/3975\/commits\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd'}",
            "dataset":"osv",
            "summary":"Data race in Beego The File Session Manager in Beego 1.10.0 allows local users to read session files because there is a race condition involving file creation within a directory with weak permissions.",
            "published_date":"2021-08-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/beego\/beego",
            "commit_href":"https:\/\/github.com\/beego\/beego\/pull\/3975\/commits\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "commit_sha":"f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "patch":"SINGLE",
            "chain_ord":"['f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd']",
            "before_first_fix_commit":"{'8f3d1c5f42fce57e83e1c3f7d180477595db7cca'}",
            "last_fix_commit":"f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2020, 15:42:54",
            "message":"Change permission mask",
            "author":"Nico Waisman",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'session\/sess_file.go': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/beego\/beego\/raw\/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd\/session%2Fsess_file.go', 'patch': '@@ -138,7 +138,7 @@ func (fp *FileProvider) SessionRead(sid string) (Store, error) {\\n \\tfilepder.lock.Lock()\\n \\tdefer filepder.lock.Unlock()\\n \\n-\\terr := os.MkdirAll(path.Join(fp.savePath, string(sid[0]), string(sid[1])), 0777)\\n+\\terr := os.MkdirAll(path.Join(fp.savePath, string(sid[0]), string(sid[1])), 0755)\\n \\tif err != nil {\\n \\t\\tSLogger.Println(err.Error())\\n \\t}\\n@@ -231,7 +231,7 @@ func (fp *FileProvider) SessionRegenerate(oldsid, sid string) (Store, error) {\\n \\t\\treturn nil, fmt.Errorf(\"newsid %s exist\", newSidFile)\\n \\t}\\n \\n-\\terr = os.MkdirAll(newPath, 0777)\\n+\\terr = os.MkdirAll(newPath, 0755)\\n \\tif err != nil {\\n \\t\\tSLogger.Println(err.Error())\\n \\t}'}}",
            "message_norm":"change permission mask",
            "language":"en",
            "entities":"[('change', 'ACTION', ''), ('permission', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['session\/sess_file.go'])",
            "num_files":1.0
        },
        {
            "index":1683,
            "vuln_id":"GHSA-f7f4-hqp2-7prc",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
            "published_date":"2020-07-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "commit_sha":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "patch":"MULTI",
            "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
            "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
            "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/23\/2018, 21:38:55",
            "message":"Follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
            "author":"Mike McNeil",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/0533a4864b1920fd8fbb5287bc0889193c5faf44\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '\/',\\n+      \/\/ ^^ Uses || '\/' because otherwise url.parse returns `null`,\\n+      \/\/ which is not a string and thus bad when you try to check\\n+      \/\/ .match() of it.\\n \\n       method  : options.eventName,\"}}",
            "message_norm":"follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
            "language":"en",
            "entities":"[('ff02114eaec090ee51db48435cc32d451662606e', 'SHA', 'generic_sha'), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
            "num_files":1.0
        },
        {
            "index":1766,
            "vuln_id":"GHSA-fq9f-9wv9-rfmg",
            "cwe_id":"{'CWE-295'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0'}",
            "dataset":"osv",
            "summary":"Improper Certificate Validation in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier bundled a version of the commons-httpclient library with the vulnerability CVE-2012-6153 that incorrectly verified SSL certificates, making it susceptible to man-in-the-middle attacks. This library is widely used as a transitive dependency in Jenkins plugins. The fix for CVE-2012-6153 was backported to the version of commons-httpclient that is bundled in core and made available to plugins.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "commit_sha":"fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "patch":"SINGLE",
            "chain_ord":"['fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0']",
            "before_first_fix_commit":"{'67f68c181033cbabf2075769e0f846f58c226c08'}",
            "last_fix_commit":"fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/29\/2017, 13:39:32",
            "message":"[SECURITY-555] Patch Commons HttpClient 3.x.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'pom.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0\/pom.xml', 'patch': '@@ -164,7 +164,7 @@ THE SOFTWARE.\\n       <dependency>\\n         <groupId>commons-httpclient<\/groupId>\\n         <artifactId>commons-httpclient<\/artifactId>\\n-        <version>3.1<\/version>\\n+        <version>3.1-jenkins-1<\/version>\\n       <\/dependency>\\n \\n       <dependency>'}}",
            "message_norm":"[security-555] patch commons httpclient 3.x.",
            "language":"en",
            "entities":"[('security-555', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pom.xml'])",
            "num_files":1.0
        },
        {
            "index":343,
            "vuln_id":"GHSA-43f8-2h32-f4cj",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/npm\/hosted-git-info\/commit\/bede0dc38e1785e732bf0a48ba6f81a4a908eba3', 'https:\/\/github.com\/npm\/hosted-git-info\/commit\/8d4b3697d79bcd89cdb36d1db165e3696c783a01', 'https:\/\/github.com\/npm\/hosted-git-info\/commit\/29adfe5ef789784c861b2cdeb15051ec2ba651a7'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in hosted-git-info The npm package `hosted-git-info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst-case time complexity",
            "published_date":"2021-05-06",
            "chain_len":3,
            "project":"https:\/\/github.com\/npm\/hosted-git-info",
            "commit_href":"https:\/\/github.com\/npm\/hosted-git-info\/commit\/bede0dc38e1785e732bf0a48ba6f81a4a908eba3",
            "commit_sha":"bede0dc38e1785e732bf0a48ba6f81a4a908eba3",
            "patch":"MULTI",
            "chain_ord":"['bede0dc38e1785e732bf0a48ba6f81a4a908eba3', '29adfe5ef789784c861b2cdeb15051ec2ba651a7', '8d4b3697d79bcd89cdb36d1db165e3696c783a01']",
            "before_first_fix_commit":"{'29adfe5ef789784c861b2cdeb15051ec2ba651a7'}",
            "last_fix_commit":"8d4b3697d79bcd89cdb36d1db165e3696c783a01",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/28\/2021, 17:22:16",
            "message":"fix: simplify the regular expression for shortcut matching\n\nPR-URL: https:\/\/github.com\/npm\/hosted-git-info\/pull\/76\nCredit: @nlf\nClose: #76\nReviewed-by: @isaacs",
            "author":"nlf",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'index.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/npm\/hosted-git-info\/raw\/bede0dc38e1785e732bf0a48ba6f81a4a908eba3\/index.js', 'patch': \"@@ -41,7 +41,7 @@ function fromUrl (giturl, opts) {\\n     isGitHubShorthand(giturl) ? 'github:' + giturl : giturl\\n   )\\n   var parsed = parseGitUrl(url)\\n-  var shortcutMatch = url.match(new RegExp('^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^\/]*))[\/](.+?)(?:[.]git)?($|#)'))\\n+  var shortcutMatch = url.match(\/^([^:]+):(?:[^@]+@)?(?:([^\/]*)\\\\\/)?([^#]+)\/)\\n   var matches = Object.keys(gitHosts).map(function (gitHostName) {\\n     try {\\n       var gitHostInfo = gitHosts[gitHostName]\\n@@ -55,7 +55,7 @@ function fromUrl (giturl, opts) {\\n       var defaultRepresentation = null\\n       if (shortcutMatch && shortcutMatch[1] === gitHostName) {\\n         user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2])\\n-        project = decodeURIComponent(shortcutMatch[3])\\n+        project = decodeURIComponent(shortcutMatch[3].replace(\/\\\\.git$\/, ''))\\n         defaultRepresentation = 'shortcut'\\n       } else {\\n         if (parsed.host && parsed.host !== gitHostInfo.domain && parsed.host.replace(\/^www[.]\/, '') !== gitHostInfo.domain) return\"}}",
            "message_norm":"fix: simplify the regular expression for shortcut matching\n\npr-url: https:\/\/github.com\/npm\/hosted-git-info\/pull\/76\ncredit: @nlf\nclose: #76\nreviewed-by: @isaacs",
            "language":"en",
            "entities":"[('https:\/\/github.com\/npm\/hosted-git-info\/pull\/76', 'URL', ''), ('#76', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":872,
            "vuln_id":"GHSA-6p56-wp2h-9hxr",
            "cwe_id":"{'CWE-120'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/numpy\/numpy\/commit\/ae317fd9ff3e79c0eac357d723bfc29cbd625f2e'}",
            "dataset":"osv",
            "summary":"NumPy Buffer Overflow (Disputed) A Buffer Overflow vulnerability exists in NumPy 1.9.x in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service.\n\nNOTE: The vendor does not agree this is a vulneraility; In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.",
            "published_date":"2022-01-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/numpy\/numpy",
            "commit_href":"https:\/\/github.com\/numpy\/numpy\/commit\/ae317fd9ff3e79c0eac357d723bfc29cbd625f2e",
            "commit_sha":"ae317fd9ff3e79c0eac357d723bfc29cbd625f2e",
            "patch":"SINGLE",
            "chain_ord":"['ae317fd9ff3e79c0eac357d723bfc29cbd625f2e']",
            "before_first_fix_commit":"{'938fe1f871e22b8f5556b946135fa700e5ebcce1', '16f7824b4d935b6aee98298ca4123d57174a6f2e'}",
            "last_fix_commit":"ae317fd9ff3e79c0eac357d723bfc29cbd625f2e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/11\/2021, 19:39:32",
            "message":"Merge pull request #18989 from yetanothercheer\/gh-18939-potential_buffer_overflow\n\nBUG: fix potential buffer overflow(#18939)",
            "author":"Charles Harris",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 8, 'total': 16}",
            "files":"{'numpy\/core\/src\/multiarray\/ctors.c': {'additions': 8, 'deletions': 8, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/numpy\/numpy\/raw\/ae317fd9ff3e79c0eac357d723bfc29cbd625f2e\/numpy%2Fcore%2Fsrc%2Fmultiarray%2Fctors.c', 'patch': '@@ -668,6 +668,14 @@ PyArray_NewFromDescr_int(\\n     int i;\\n     npy_intp nbytes;\\n \\n+    if ((unsigned int)nd > (unsigned int)NPY_MAXDIMS) {\\n+        PyErr_Format(PyExc_ValueError,\\n+                     \"number of dimensions must be within [0, %d]\",\\n+                     NPY_MAXDIMS);\\n+        Py_DECREF(descr);\\n+        return NULL;\\n+    }\\n+\\n     if (descr->subarray) {\\n         PyObject *ret;\\n         npy_intp newdims[2*NPY_MAXDIMS];\\n@@ -687,14 +695,6 @@ PyArray_NewFromDescr_int(\\n         return ret;\\n     }\\n \\n-    if ((unsigned int)nd > (unsigned int)NPY_MAXDIMS) {\\n-        PyErr_Format(PyExc_ValueError,\\n-                     \"number of dimensions must be within [0, %d]\",\\n-                     NPY_MAXDIMS);\\n-        Py_DECREF(descr);\\n-        return NULL;\\n-    }\\n-\\n     \/* Check datatype element size *\/\\n     nbytes = descr->elsize;\\n     if (PyDataType_ISUNSIZED(descr)) {'}}",
            "message_norm":"merge pull request #18989 from yetanothercheer\/gh-18939-potential_buffer_overflow\n\nbug: fix potential buffer overflow(#18939)",
            "language":"en",
            "entities":"[('#18989', 'ISSUE', ''), ('potential_buffer_overflow', 'SECWORD', ''), ('bug', 'FLAW', ''), ('fix', 'ACTION', ''), ('buffer overflow(#18939', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['numpy\/core\/src\/multiarray\/ctors.c'])",
            "num_files":1.0
        },
        {
            "index":1589,
            "vuln_id":"GHSA-cqhr-jqvc-qw9p",
            "cwe_id":"{'CWE-79'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/javamelody\/javamelody\/commit\/e0497c1980acebd257d3da78dfde29ae9bdffdf6'}",
            "dataset":"osv",
            "summary":"Java Melody vulnerable to cross-site scripting JavaMelody is a monitoring tool for JavaEE applications. Versions prior to 1.61.0 are vulnerable to a cross-site scripting (XSS) attack. This issue was patched in version 1.61.0, and users are recommended to upgrade to the latest version. There are no known workarounds.",
            "published_date":"2022-07-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/javamelody\/javamelody",
            "commit_href":"https:\/\/github.com\/javamelody\/javamelody\/commit\/e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "commit_sha":"e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "patch":"SINGLE",
            "chain_ord":"['e0497c1980acebd257d3da78dfde29ae9bdffdf6']",
            "before_first_fix_commit":"{'7f9460e61bc2d942af3fee19041deda6c8f85816'}",
            "last_fix_commit":"e0497c1980acebd257d3da78dfde29ae9bdffdf6",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/24\/2016, 15:15:22",
            "message":"fix XSS",
            "author":"evernat",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/HtmlCoreReport.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/javamelody\/javamelody\/raw\/e0497c1980acebd257d3da78dfde29ae9bdffdf6\/javamelody-core%2Fsrc%2Fmain%2Fjava%2Fnet%2Fbull%2Fjavamelody%2FHtmlCoreReport.java', 'patch': '@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,\\n \\t\\tif (message != null) {\\r\\n \\t\\t\\twriteln(SCRIPT_BEGIN);\\r\\n \\t\\t\\t\/\/ writeDirectly pour ne pas g\u00e9rer de traductions si le message contient \\'#\\'\\r\\n-\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + javascriptEncode(message) + \"\\\\\");\");\\r\\n+\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + htmlEncodeButNotSpace(javascriptEncode(message)) + \"\\\\\");\");\\r\\n \\t\\t\\twriteln(\"\");\\r\\n \\t\\t\\t\/\/ redirect vers une url \u00e9vitant que F5 du navigateur ne refasse l\\'action au lieu de faire un refresh\\r\\n \\t\\t\\tif (partToRedirectTo == null) {'}}",
            "message_norm":"fix xss",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/HtmlCoreReport.java'])",
            "num_files":1.0
        }
    ]
}