{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":1522,
            "vuln_id":"GHSA-c9g6-9335-x697",
            "cwe_id":"{'CWE-20'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/sockjs\/sockjs-node\/commit\/dd7e642cd69ee74385825816d30642c43e051d16'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in SocksJS-Node Incorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/sockjs\/sockjs-node",
            "commit_href":"https:\/\/github.com\/sockjs\/sockjs-node\/commit\/dd7e642cd69ee74385825816d30642c43e051d16",
            "commit_sha":"dd7e642cd69ee74385825816d30642c43e051d16",
            "patch":"SINGLE",
            "chain_ord":"['dd7e642cd69ee74385825816d30642c43e051d16']",
            "before_first_fix_commit":"{'3e975c69cce21092c2ac9aa7a2f9dc40446f5ccd', '68e8fd7a92e0e73cac6894a282b6d84f33e879b3'}",
            "last_fix_commit":"dd7e642cd69ee74385825816d30642c43e051d16",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/09\/2020, 01:36:12",
            "message":"Merge pull request #266 from cakoose\/backport-writeHead-fix\n\nwriteHead: Don't end() response",
            "author":"Bryce Kahle",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 3, 'total': 3}",
            "files":"{'src\/webjs.coffee': {'additions': 0, 'deletions': 3, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sockjs\/sockjs-node\/raw\/dd7e642cd69ee74385825816d30642c43e051d16\/src%2Fwebjs.coffee', 'patch': \"@@ -45,9 +45,6 @@ fake_response = (req, res) ->\\n             try\\n                 res.write(r.join('\\\\r\\\\n'))\\n             catch x\\n-            try\\n-                res.end()\\n-            catch x\\n         res.setHeader = (k, v) -> headers[k] = v\"}}",
            "message_norm":"merge pull request #266 from cakoose\/backport-writehead-fix\n\nwritehead: don't end() response",
            "language":"en",
            "entities":"[('#266', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/webjs.coffee'])",
            "num_files":1.0
        },
        {
            "index":2502,
            "vuln_id":"GHSA-p493-635q-r6gr",
            "cwe_id":"{'CWE-74'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/pugjs\/pug\/commit\/991e78f7c4220b2f8da042877c6f0ef5a4683be0'}",
            "dataset":"osv",
            "summary":"Remote code execution via the `pretty` option. ### Impact\n\nIf a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.\n\n### Patches\n\nUpgrade to `pug@3.0.1` or `pug-code-gen@3.0.2` or `pug-code-gen@2.0.3`, which correctly sanitise the parameter.\n\n### Workarounds\n\nIf there is no way for un-trusted input to be passed to pug as the `pretty` option, e.g. if you compile templates in advance before applying user input to them, you do not need to upgrade.\n\n### References\n\n\nOriginal report: https:\/\/github.com\/pugjs\/pug\/issues\/3312\n\n### For more information\n\nIf you believe you have found other vulnerabilities, please **DO NOT** open an issue. Instead, you can follow the instructions in our [Security Policy](https:\/\/github.com\/pugjs\/pug\/blob\/master\/SECURITY.md)",
            "published_date":"2021-03-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/pugjs\/pug",
            "commit_href":"https:\/\/github.com\/pugjs\/pug\/commit\/991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "commit_sha":"991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "patch":"SINGLE",
            "chain_ord":"['991e78f7c4220b2f8da042877c6f0ef5a4683be0']",
            "before_first_fix_commit":"{'06baa525a23049756de9587461d389a12bc12537'}",
            "last_fix_commit":"991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/28\/2021, 18:21:18",
            "message":"fix: sanitise and escape the `pretty` option (#3314)",
            "author":"Forbes Lindesay",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 2, 'total': 13}",
            "files":"{'packages\/pug-code-gen\/index.js': {'additions': 11, 'deletions': 2, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pugjs\/pug\/raw\/991e78f7c4220b2f8da042877c6f0ef5a4683be0\/packages%2Fpug-code-gen%2Findex.js', 'patch': '@@ -57,6 +57,11 @@ function Compiler(node, options) {\\n   if (this.pp && typeof this.pp !== \\'string\\') {\\n     this.pp = \\'  \\';\\n   }\\n+  if (this.pp && !\/^\\\\s+$\/.test(this.pp)) {\\n+    throw new Error(\\n+      \\'The pretty parameter should either be a boolean or whitespace only string\\'\\n+    );\\n+  }\\n   this.debug = false !== options.compileDebug;\\n   this.indents = 0;\\n   this.parentIndents = 0;\\n@@ -452,7 +457,9 @@ Compiler.prototype = {\\n   visitMixinBlock: function(block) {\\n     if (this.pp)\\n       this.buf.push(\\n-        \"pug_indent.push(\\'\" + Array(this.indents + 1).join(this.pp) + \"\\');\"\\n+        \\'pug_indent.push(\\' +\\n+          stringify(Array(this.indents + 1).join(this.pp)) +\\n+          \\');\\'\\n       );\\n     this.buf.push(\\'block && block();\\');\\n     if (this.pp) this.buf.push(\\'pug_indent.pop();\\');\\n@@ -504,7 +511,9 @@ Compiler.prototype = {\\n       this.mixins[key].used = true;\\n       if (pp)\\n         this.buf.push(\\n-          \"pug_indent.push(\\'\" + Array(this.indents + 1).join(pp) + \"\\');\"\\n+          \\'pug_indent.push(\\' +\\n+            stringify(Array(this.indents + 1).join(pp)) +\\n+            \\');\\'\\n         );\\n       if (block || attrs.length || attrsBlocks.length) {\\n         this.buf.push(name + \\'.call({\\');'}}",
            "message_norm":"fix: sanitise and escape the `pretty` option (#3314)",
            "language":"en",
            "entities":"[('sanitise', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('#3314', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/pug-code-gen\/index.js'])",
            "num_files":1.0
        },
        {
            "index":3415,
            "vuln_id":"GHSA-xcwj-wfcm-m23c",
            "cwe_id":"{'CWE-476'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd'}",
            "dataset":"osv",
            "summary":"Invalid validation in `SparseMatrixSparseCholesky` ### Impact\nAn attacker can trigger a null pointer dereference by providing an invalid `permutation` to `tf.raw_ops.SparseMatrixSparseCholesky`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([-10.0], dtype=np.float32)\ndense_shape = [1, 1]\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\ninput = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n\npermutation = tf.constant([], shape=[1, 0], dtype=tf.int32)\n \ntf.raw_ops.SparseMatrixSparseCholesky(input=input, permutation=permutation, type=tf.float32)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/080f1d9e257589f78b3ffb75debf584168aa6062\/tensorflow\/core\/kernels\/sparse\/sparse_cholesky_op.cc#L85-L86) fails to properly validate the input arguments: \n                          \n```cc \nvoid Compute(OpKernelContext* ctx) final {\n  ...\n  const Tensor& input_permutation_indices = ctx->input(1);\n  ...\n  ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size, &num_rows);\n  ...\n}\n\nvoid ValidateInputs(OpKernelContext* ctx,\n    const CSRSparseMatrix& sparse_matrix,\n    const Tensor& permutation_indices, int* batch_size,\n    int64* num_rows) {\n  OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum<T>::value, ...)\n  ...\n}\n```\nAlthough `ValidateInputs` is called and there are checks in the body of this function, the code proceeds to the next line in `ValidateInputs` since [`OP_REQUIRES`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/080f1d9e257589f78b3ffb75debf584168aa6062\/tensorflow\/core\/framework\/op_requires.h#L41-L48) is a macro that only exits the current function.\n\n```cc\n#define OP_REQUIRES(CTX, EXP, STATUS)                     \\\n  do {                                                    \\\n    if (!TF_PREDICT_TRUE(EXP)) {                          \\\n      CheckNotInComputeAsync((CTX), \"OP_REQUIRES_ASYNC\"); \\\n      (CTX)->CtxFailure(__FILE__, __LINE__, (STATUS));    \\\n      return;                                             \\\n    }                                                     \\\n  } while (0)\n```\n\nThus, the first validation condition that fails in `ValidateInputs` will cause an early return from that function. However, the caller will continue execution from the next line. The fix is to either explicitly check `context->status()` or to convert `ValidateInputs` to return a `Status`.\n\n### Patches\nWe have patched the issue in GitHub commit [e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd",
            "commit_sha":"e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd",
            "patch":"SINGLE",
            "chain_ord":"['e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd']",
            "before_first_fix_commit":"{'080f1d9e257589f78b3ffb75debf584168aa6062'}",
            "last_fix_commit":"e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 21:45:33",
            "message":"Remove `OP_REQUIRES` call from helper function.\n\nSince `OP_REQUIRES` macro expands to a `return;` (among other), calling it in a helper function only ends the helper function's execution earlier, but the kernel will still run from start to end. Thus, all the expected validations are actually broken\/useless as the code ploughs through the next crash anyway.\n\nPiperOrigin-RevId: 369524386\nChange-Id: I54f6cf9328445675ccc392e661b04336b229c9da",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 34, 'deletions': 33, 'total': 67}",
            "files":"{'tensorflow\/core\/kernels\/sparse\/sparse_cholesky_op.cc': {'additions': 34, 'deletions': 33, 'changes': 67, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd\/tensorflow%2Fcore%2Fkernels%2Fsparse%2Fsparse_cholesky_op.cc', 'patch': '@@ -17,6 +17,8 @@ limitations under the License.\\n #include <numeric>\\n #include <vector>\\n \\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n+\\n #define EIGEN_USE_THREADS\\n \\n #include \"third_party\/eigen3\/Eigen\/Core\"\\n@@ -82,8 +84,8 @@ class CSRSparseCholeskyCPUOp : public OpKernel {\\n \\n     int64 num_rows;\\n     int batch_size;\\n-    ValidateInputs(ctx, *input_matrix, input_permutation_indices, &batch_size,\\n-                   &num_rows);\\n+    OP_REQUIRES_OK(ctx, ValidateInputs(*input_matrix, input_permutation_indices,\\n+                                       &batch_size, &num_rows));\\n \\n     \/\/ Allocate batch pointers.\\n     Tensor batch_ptr(cpu_allocator(), DT_INT32, TensorShape({batch_size + 1}));\\n@@ -226,49 +228,48 @@ class CSRSparseCholeskyCPUOp : public OpKernel {\\n   }\\n \\n  private:\\n-  void ValidateInputs(OpKernelContext* ctx,\\n-                      const CSRSparseMatrix& sparse_matrix,\\n-                      const Tensor& permutation_indices, int* batch_size,\\n-                      int64* num_rows) {\\n-    OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum<T>::value,\\n-                errors::InvalidArgument(\\n-                    \"Asked for a CSRSparseMatrix of type \",\\n-                    DataTypeString(DataTypeToEnum<T>::value),\\n-                    \" but saw dtype: \", DataTypeString(sparse_matrix.dtype())));\\n+  Status ValidateInputs(const CSRSparseMatrix& sparse_matrix,\\n+                        const Tensor& permutation_indices, int* batch_size,\\n+                        int64* num_rows) {\\n+    if (sparse_matrix.dtype() != DataTypeToEnum<T>::value)\\n+      return errors::InvalidArgument(\\n+          \"Asked for a CSRSparseMatrix of type \",\\n+          DataTypeString(DataTypeToEnum<T>::value),\\n+          \" but saw dtype: \", DataTypeString(sparse_matrix.dtype()));\\n \\n     const Tensor& dense_shape = sparse_matrix.dense_shape();\\n     const int rank = dense_shape.dim_size(0);\\n-    OP_REQUIRES(ctx, rank == 2 || rank == 3,\\n-                errors::InvalidArgument(\"sparse matrix must have rank 2 or 3; \",\\n-                                        \"but dense_shape has size \", rank));\\n+    if (rank < 2 || rank > 3)\\n+      return errors::InvalidArgument(\"sparse matrix must have rank 2 or 3; \",\\n+                                     \"but dense_shape has size \", rank);\\n     const int row_dim = (rank == 2) ? 0 : 1;\\n     auto dense_shape_vec = dense_shape.vec<int64>();\\n     *num_rows = dense_shape_vec(row_dim);\\n     const int64 num_cols = dense_shape_vec(row_dim + 1);\\n-    OP_REQUIRES(ctx, *num_rows == num_cols,\\n-                errors::InvalidArgument(\"sparse matrix must be square; got: \",\\n-                                        *num_rows, \" != \", num_cols));\\n+    if (*num_rows != num_cols)\\n+      return errors::InvalidArgument(\\n+          \"sparse matrix must be square; got: \", *num_rows, \" != \", num_cols);\\n     const TensorShape& perm_shape = permutation_indices.shape();\\n-    OP_REQUIRES(\\n-        ctx, perm_shape.dims() + 1 == rank,\\n-        errors::InvalidArgument(\\n-            \"sparse matrix must have the same rank as permutation; got: \", rank,\\n-            \" != \", perm_shape.dims(), \" + 1.\"));\\n-    OP_REQUIRES(\\n-        ctx, perm_shape.dim_size(rank - 2) == *num_rows,\\n-        errors::InvalidArgument(\\n-            \"permutation must have the same number of elements in each batch \"\\n-            \"as the number of rows in sparse matrix; got: \",\\n-            perm_shape.dim_size(rank - 2), \" != \", *num_rows));\\n+    if (perm_shape.dims() + 1 != rank)\\n+      return errors::InvalidArgument(\\n+          \"sparse matrix must have the same rank as permutation; got: \", rank,\\n+          \" != \", perm_shape.dims(), \" + 1.\");\\n+    if (perm_shape.dim_size(rank - 2) != *num_rows)\\n+      return errors::InvalidArgument(\\n+          \"permutation must have the same number of elements in each batch \"\\n+          \"as the number of rows in sparse matrix; got: \",\\n+          perm_shape.dim_size(rank - 2), \" != \", *num_rows);\\n \\n     *batch_size = sparse_matrix.batch_size();\\n     if (*batch_size > 1) {\\n-      OP_REQUIRES(\\n-          ctx, perm_shape.dim_size(0) == *batch_size,\\n-          errors::InvalidArgument(\"permutation must have the same batch size \"\\n-                                  \"as sparse matrix; got: \",\\n-                                  perm_shape.dim_size(0), \" != \", *batch_size));\\n+      if (perm_shape.dim_size(0) != *batch_size)\\n+        return errors::InvalidArgument(\\n+            \"permutation must have the same batch size \"\\n+            \"as sparse matrix; got: \",\\n+            perm_shape.dim_size(0), \" != \", *batch_size);\\n     }\\n+\\n+    return Status::OK();\\n   }\\n };'}}",
            "message_norm":"remove `op_requires` call from helper function.\n\nsince `op_requires` macro expands to a `return;` (among other), calling it in a helper function only ends the helper function's execution earlier, but the kernel will still run from start to end. thus, all the expected validations are actually broken\/useless as the code ploughs through the next crash anyway.\n\npiperorigin-revid: 369524386\nchange-id: i54f6cf9328445675ccc392e661b04336b229c9da",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('369524386', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse\/sparse_cholesky_op.cc'])",
            "num_files":1.0
        },
        {
            "index":617,
            "vuln_id":"GHSA-5f38-9jw2-6r6h",
            "cwe_id":"{'CWE-79', 'CWE-843'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/rooseveltframework\/teddy\/commit\/64c556717b4879bf8d4c30067cf6e70d899a3dc0'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in teddy Teddy is a readable and easy to learn templating language. This affects the package teddy before 0.5.9. A type confusion vulnerability can be used to bypass input sanitization when the model content is an array (instead of a string).",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/rooseveltframework\/teddy",
            "commit_href":"https:\/\/github.com\/rooseveltframework\/teddy\/commit\/64c556717b4879bf8d4c30067cf6e70d899a3dc0",
            "commit_sha":"64c556717b4879bf8d4c30067cf6e70d899a3dc0",
            "patch":"SINGLE",
            "chain_ord":"['64c556717b4879bf8d4c30067cf6e70d899a3dc0']",
            "before_first_fix_commit":"{'90387d97c7a8f458a08dd3b72a4b0574000af5f8', 'fea0b218069ff00f86f2b24f2fd08be01cd6b8c1'}",
            "last_fix_commit":"64c556717b4879bf8d4c30067cf6e70d899a3dc0",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/07\/2021, 01:27:38",
            "message":"Merge pull request #518 from kethinov\/refactor-escape-entities\n\nrefactor escape entities for better type checking",
            "author":"Eric Newport",
            "comments":null,
            "stats":"{'additions': 15, 'deletions': 4, 'total': 19}",
            "files":"{'utils.js': {'additions': 15, 'deletions': 4, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rooseveltframework\/teddy\/raw\/64c556717b4879bf8d4c30067cf6e70d899a3dc0\/utils.js', 'patch': \"@@ -96,10 +96,21 @@ function escapeEntities (value) {\\n   let i\\n   let j\\n \\n-  if (value === undefined || typeof value === 'boolean' || typeof value === 'object') { \/\/ Cannot escape on these values\\n-    return value\\n-  } else if (typeof value === 'number') { \/\/ Value is a number, no reason to escape\\n-    return `${value}`\\n+  if (typeof value === 'object') { \/\/ Cannot escape on this value\\n+    if (!value) {\\n+      return false \/\/ it is falsey to return false\\n+    } else if (Array.isArray(value)) {\\n+      if (value.length === 0) {\\n+        return false \/\/ empty arrays are falsey\\n+      } else {\\n+        return '[Array]' \/\/ print that it is an array with content in it, but do not print the contents\\n+      }\\n+    }\\n+    return '[Object]' \/\/ just print that it is an object, do not print the contents\\n+  } else if (value === undefined) { \/\/ Cannot escape on this value\\n+    return false \/\/ undefined is falsey\\n+  } else if (typeof value === 'boolean' || typeof value === 'number') { \/\/ Cannot escape on these values\\n+    return value \/\/ if it's already a boolean or a number just return it\\n   } else {\\n     \/\/ Loop through value to find HTML entities\\n     for (i = 0; i < value.length; i++) {\"}}",
            "message_norm":"merge pull request #518 from kethinov\/refactor-escape-entities\n\nrefactor escape entities for better type checking",
            "language":"en",
            "entities":"[('#518', 'ISSUE', ''), ('escape', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['utils.js'])",
            "num_files":1.0
        },
        {
            "index":1175,
            "vuln_id":"GHSA-896r-f27r-55mw",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/kriszyp\/json-schema\/commit\/b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/22f146111f541d9737e832823699ad3528ca7741', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa'}",
            "dataset":"osv",
            "summary":"json-schema is vulnerable to Prototype Pollution json-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
            "published_date":"2021-11-19",
            "chain_len":3,
            "project":"https:\/\/github.com\/kriszyp\/json-schema",
            "commit_href":"https:\/\/github.com\/kriszyp\/json-schema\/commit\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "commit_sha":"f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "patch":"MULTI",
            "chain_ord":"['22f146111f541d9737e832823699ad3528ca7741', 'b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa']",
            "before_first_fix_commit":"{'ef60987a9a14b9d9c739384460044ba53cd9b9a2'}",
            "last_fix_commit":"f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "chain_ord_pos":3.0,
            "commit_datetime":"11\/02\/2021, 02:47:49",
            "message":"Use a little more robust method of checking instances",
            "author":"Kris Zyp",
            "comments":"{'com_1': {'author': 'JamieSlome', 'datetime': '11\/02\/2021, 10:48:47', 'body': '@kriszyp - just to confirm, does this fix the report submitted by the researcher [here](https:\/\/huntr.dev\/bounties\/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\/)?'}, 'com_2': {'author': 'kriszyp', 'datetime': '11\/02\/2021, 11:20:36', 'body': '> does this fix the report submitted by the researcher here?\\r\\n\\r\\nYes, along with https:\/\/github.com\/kriszyp\/json-schema\/commit\/22f146111f541d9737e832823699ad3528ca7741, that is intended to fix that security issue.'}, 'com_3': {'author': 'JamieSlome', 'datetime': '11\/02\/2021, 12:10:20', 'body': '@kriszyp - thanks for the heads up! Are you able to confirm this on the report, and we can go ahead and publish a CVE \/ make the report public?\\r\\n\\r\\n(cc @yoshino-s)'}, 'com_4': {'author': 'kriszyp', 'datetime': '11\/09\/2021, 02:04:23', 'body': 'Yes, I have published the updated version with the fix.'}, 'com_5': {'author': 'JamieSlome', 'datetime': '11\/09\/2021, 07:55:24', 'body': '@kriszyp - could you update this on the report: https:\/\/huntr.dev\/bounties\/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\/\\r\\n\\r\\nYou can also decide if you would like to keep the bounty for yourself or return it to the prize pot \ud83d\udc4c'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/validate.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kriszyp\/json-schema\/raw\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa\/lib%2Fvalidate.js', 'patch': \"@@ -208,7 +208,7 @@ var validate = exports._validate = function(\/*Any*\/instance,\/*Object*\/schema,\/*O\\n \\t\\t\\t\\n \\t\\t\\tfor(var i in objTypeDef){ \\n \\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){\\n-\\t\\t\\t\\t\\tvar value = instance[i];\\n+\\t\\t\\t\\t\\tvar value = instance.hasOwnProperty(i) ? instance[i] : undefined;\\n \\t\\t\\t\\t\\t\/\/ skip _not_ specified properties\\n \\t\\t\\t\\t\\tif (value === undefined && options.existingOnly) continue;\\n \\t\\t\\t\\t\\tvar propDef = objTypeDef[i];\"}}",
            "message_norm":"use a little more robust method of checking instances",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/validate.js'])",
            "num_files":1.0
        },
        {
            "index":180,
            "vuln_id":"GHSA-32wx-4gxx-h48f",
            "cwe_id":"{'CWE-639'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/flarum\/tags\/commit\/c8fcd000857493f1e4cc00b6f2771ce388b93e9d'}",
            "dataset":"osv",
            "summary":"Users can edit the tags of any discussion This advisory concerns a vulnerability which was patched and publicly released on October 5, 2020.\n\n### Impact\nThis vulnerability allowed any registered user to edit the tags of any discussion for which they have READ access using the REST API.\n\nUsers were able to remove any existing tag, and add any tag in which they are allowed to create discussions. The chosen tags still had to match the configured Tags minimums and maximums.\n\nBy moving the discussion to new tags, users were able to go around permissions applied to restricted tags. Depending on the setup, this can include publicly exposing content that was only visible to certain groups, or gain the ability to interact with content where such interaction was limited.\n\nThe full impact varies depending on the configuration of permissions and restricted tags, and which community extensions are being used. All tag-scoped permissions offered by extensions are impacted by this ability to go around them.\n\nForums that don't use restricted tags and don't use any extension that relies on tags for access control should not see any security impact. An update is still required to stop users from being able to change any discussion's tags.\n\nForums that don't use the Tags extension are unaffected.\n\n### Patches\nThe fix will be available in version v0.1.0-beta.14 with Flarum beta 14. The fix has already been back-ported to Flarum beta 13 as version v0.1.0-beta.13.2 of the Tags extension.\n\n### Workarounds\nVersion v0.1.0-beta.13.2 of the Tags extension allows existing Flarum beta 13 forums to fix the issue without the need to update to beta 14.\n\nForums that have not yet updated to Flarum beta 13 are encouraged to update as soon as possible.\n\n### References\n\n- [Release announcement](https:\/\/discuss.flarum.org\/d\/25059-security-update-to-flarum-tags-010-beta132)\n- [GitHub issue](https:\/\/github.com\/flarum\/core\/issues\/2355)\n\n### For more information\nIf you have any questions or comments about this advisory, please start a new discussion on our [support forum](https:\/\/discuss.flarum.org\/t\/support).\n\nIf you discover a security vulnerability within Flarum, please send an e-mail to [security@flarum.org](mailto:security@flarum.org). All security vulnerabilities will be promptly addressed. More details can be found in our [security policy](https:\/\/github.com\/flarum\/core\/security\/policy).",
            "published_date":"2021-01-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/flarum\/tags",
            "commit_href":"https:\/\/github.com\/flarum\/tags\/commit\/c8fcd000857493f1e4cc00b6f2771ce388b93e9d",
            "commit_sha":"c8fcd000857493f1e4cc00b6f2771ce388b93e9d",
            "patch":"SINGLE",
            "chain_ord":"['c8fcd000857493f1e4cc00b6f2771ce388b93e9d']",
            "before_first_fix_commit":"{'c207faa17ffc496d5ce0161923f19556a0ac4c5b'}",
            "last_fix_commit":"c8fcd000857493f1e4cc00b6f2771ce388b93e9d",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/03\/2020, 22:37:56",
            "message":"Fix Editing Discussion Tags Permission (#95)",
            "author":"Sami Mazouz",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'src\/Listener\/SaveTagsToDatabase.php': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/flarum\/tags\/raw\/c8fcd000857493f1e4cc00b6f2771ce388b93e9d\/src%2FListener%2FSaveTagsToDatabase.php', 'patch': \"@@ -59,6 +59,10 @@ public function handle(Saving $event)\\n \\n         \/\/ TODO: clean up, prevent discussion from being created without tags\\n         if (isset($event->data['relationships']['tags']['data'])) {\\n+            if ($discussion->exists) {\\n+                $actor->assertCan('tag', $discussion);\\n+            }\\n+\\n             $linkage = (array) $event->data['relationships']['tags']['data'];\\n \\n             $newTagIds = [];\"}}",
            "message_norm":"fix editing discussion tags permission (#95)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('permission', 'SECWORD', ''), ('#95', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Listener\/SaveTagsToDatabase.php'])",
            "num_files":1.0
        },
        {
            "index":3124,
            "vuln_id":"GHSA-vhfp-9wvj-gwvg",
            "cwe_id":"{'CWE-611'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/modxcms\/revolution\/pull\/15238\/commits\/1b7ffe02df30f05dbf67dd15e4d8101687c1585a'}",
            "dataset":"osv",
            "summary":"XML External Entity vulnerability in MODX CMS A XML External Entity (XXE) vulnerability was discovered in the modRestServiceRequest component in MODX CMS 2.7.3 which can lead to an information disclosure or denial of service (DOS).",
            "published_date":"2021-11-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/modxcms\/revolution",
            "commit_href":"https:\/\/github.com\/modxcms\/revolution\/pull\/15238\/commits\/1b7ffe02df30f05dbf67dd15e4d8101687c1585a",
            "commit_sha":"1b7ffe02df30f05dbf67dd15e4d8101687c1585a",
            "patch":"SINGLE",
            "chain_ord":"['1b7ffe02df30f05dbf67dd15e4d8101687c1585a']",
            "before_first_fix_commit":"{'97b4e469500d54cf55a889b18f466a9cc6573983'}",
            "last_fix_commit":"1b7ffe02df30f05dbf67dd15e4d8101687c1585a",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/18\/2020, 09:14:28",
            "message":"Prevent potential XXE vulnerability in modRestService by disabling the libxml entity loader [#15237]\n\nThe libxml_disable_entity_loader function is deprecated in PHP8, and the entity loader is automatically enabled on v2.9.0+ of libxml which may have been used pre-PHP8 as well. PHP8 comes with at least v2.9.0+ of libxml bundled, so this conditional covers both scenarios.\n\nRef: https:\/\/github.com\/php\/php-src\/pull\/5867",
            "author":"Mark Hamstra",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 1, 'total': 10}",
            "files":"{'core\/model\/modx\/rest\/modrestservice.class.php': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/modxcms\/revolution\/raw\/1b7ffe02df30f05dbf67dd15e4d8101687c1585a\/core%2Fmodel%2Fmodx%2Frest%2Fmodrestservice.class.php', 'patch': \"@@ -59,6 +59,7 @@ public function __construct(modX &$modx,array $config = array()) {\\n             'responseSuccessKey' => 'success',\\n             'trimParameters' => false,\\n             'xmlRootNode' => 'response',\\n+            'xmlDisableEntityLoader' => true,\\n \\t\\t),$config);\\n \\t\\t$this->modx->getService('lexicon','modLexicon');\\n         if ($this->modx->lexicon) {\\n@@ -397,7 +398,14 @@ protected function _collectRequestParameters() {\\n             case 'text\/xml':\\n                 $data = stream_get_contents($filehandle);\\n                 fclose($filehandle);\\n-                $xml = simplexml_load_string($data);\\n+                if (LIBXML_VERSION < 20900 && $this->service->getOption('xmlDisableEntityLoader')) {\\n+                    $disableEntities = libxml_disable_entity_loader(true);\\n+                    $xml = simplexml_load_string($data);\\n+                    libxml_disable_entity_loader($disableEntities);\\n+                }\\n+                else {\\n+                    $xml = simplexml_load_string($data);\\n+                }\\n                 $params = $this->_xml2array($xml);\\n                 break;\\n             case 'application\/json':\"}}",
            "message_norm":"prevent potential xxe vulnerability in modrestservice by disabling the libxml entity loader [#15237]\n\nthe libxml_disable_entity_loader function is deprecated in php8, and the entity loader is automatically enabled on v2.9.0+ of libxml which may have been used pre-php8 as well. php8 comes with at least v2.9.0+ of libxml bundled, so this conditional covers both scenarios.\n\nref: https:\/\/github.com\/php\/php-src\/pull\/5867",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('xxe', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#15237', 'ISSUE', ''), ('v2.9.0', 'VERSION', ''), ('v2.9.0', 'VERSION', ''), ('https:\/\/github.com\/php\/php-src\/pull\/5867', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/model\/modx\/rest\/modrestservice.class.php'])",
            "num_files":1.0
        },
        {
            "index":3161,
            "vuln_id":"GHSA-vqw6-72r7-fgw7",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/480641e3599775a8895254ffbc0fc45621334f68'}",
            "dataset":"osv",
            "summary":"OOB read in `MatrixTriangularSolve` ### Impact\nThe implementation of [`MatrixTriangularSolve`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8cae746d8449c7dda5298327353d68613f16e798\/tensorflow\/core\/kernels\/linalg\/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails:\n\n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,\n                            const Tensor& in1) override {\n  OP_REQUIRES(\n      ctx, in0.dims() >= 2,\n      errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() >= 2,\n      errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));\n}\n  \nvoid Compute(OpKernelContext* ctx) override {\n  const Tensor& in0 = ctx->input(0);\n  const Tensor& in1 = ctx->input(1);\n\n  ValidateInputTensors(ctx, in0, in1);\n\n  MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\n  ...\n}\n```\n  \nSince `OP_REQUIRES` only sets `ctx->status()` to a non-OK value and calls `return`, this allows malicious attackers to trigger an out of bounds read:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)\nrhs_array = np.array([])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)\n\ntf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)\n```\n\nAs the two input tensors are empty, the `OP_REQUIRES` in `ValidateInputTensors` should fire and interrupt execution. However, given the implementation of `OP_REQUIRES`, after the `in0.dims() >= 2` fails, execution moves to the initialization of the `bcast` object. This initialization is done with invalid data and results in heap OOB read.\n\n### Patches\nWe have patched the issue in GitHub commit [480641e3599775a8895254ffbc0fc45621334f68](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/480641e3599775a8895254ffbc0fc45621334f68).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/480641e3599775a8895254ffbc0fc45621334f68",
            "commit_sha":"480641e3599775a8895254ffbc0fc45621334f68",
            "patch":"SINGLE",
            "chain_ord":"['480641e3599775a8895254ffbc0fc45621334f68']",
            "before_first_fix_commit":"{'8cae746d8449c7dda5298327353d68613f16e798'}",
            "last_fix_commit":"480641e3599775a8895254ffbc0fc45621334f68",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/24\/2021, 23:47:25",
            "message":"Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 4, 'total': 20}",
            "files":"{'tensorflow\/core\/kernels\/linalg\/matrix_triangular_solve_op_impl.h': {'additions': 16, 'deletions': 4, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/480641e3599775a8895254ffbc0fc45621334f68\/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_triangular_solve_op_impl.h', 'patch': '@@ -162,6 +162,9 @@ class BaseMatrixTriangularSolveOp : public OpKernel {\\n     const Tensor& in1 = ctx->input(1);\\n \\n     ValidateInputTensors(ctx, in0, in1);\\n+    if (!ctx->status().ok()) {\\n+      return;\\n+    }\\n \\n     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\\n     OP_REQUIRES(\\n@@ -230,13 +233,22 @@ class MatrixTriangularSolveOp\\n  private:\\n   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,\\n                             const Tensor& in1) override {\\n+    const auto in0_num_dims = in0.dims();\\n     OP_REQUIRES(\\n-        ctx, in0.dims() >= 2,\\n-        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\\n+        ctx, in0_num_dims >= 2,\\n+        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));\\n \\n+    const auto in1_num_dims = in1.dims();\\n     OP_REQUIRES(\\n-        ctx, in1.dims() >= 2,\\n-        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));\\n+        ctx, in1_num_dims >= 2,\\n+        errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));\\n+\\n+    const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);\\n+    const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);\\n+    OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,\\n+                errors::InvalidArgument(\\n+                    \"In[0] matrices in the last dimensions must be square (\",\\n+                    in0_last_dim, \" =\/= \", in0_prev_dim, \")\"));\\n   }\\n };'}}",
            "message_norm":"validate (and ensure validation sticks) inputs for `matrixtriangularsolve`.\n\npiperorigin-revid: 370282444\nchange-id: iaed61a0b0727cc42c830658b72eb69f785f48dc5",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('ensure', 'ACTION', ''), ('370282444', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/linalg\/matrix_triangular_solve_op_impl.h'])",
            "num_files":1.0
        },
        {
            "index":3334,
            "vuln_id":"GHSA-wx69-rvg3-x7fc",
            "cwe_id":"{'CWE-79'}",
            "score":9.0,
            "chain":"{'https:\/\/github.com\/NodeBB\/NodeBB\/commit\/1783f918bc19568f421473824461ff2ed7755e4c'}",
            "dataset":"osv",
            "summary":"XSS via prototype pollution in NodeBB  ### Impact\nA prototype pollution vulnerability in the uploader module allowed a malicious user to inject arbitrary data (i.e. javascript) into the DOM, theoretically allowing for an account takeover when used in conjunction with a path traversal vulnerability disclosed at the same time as this report.\n\n### Patches\nThe vulnerability has been patched as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 1783f918bc19568f421473824461ff2ed7755e4c to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
            "published_date":"2021-11-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/NodeBB\/NodeBB",
            "commit_href":"https:\/\/github.com\/NodeBB\/NodeBB\/commit\/1783f918bc19568f421473824461ff2ed7755e4c",
            "commit_sha":"1783f918bc19568f421473824461ff2ed7755e4c",
            "patch":"SINGLE",
            "chain_ord":"['1783f918bc19568f421473824461ff2ed7755e4c']",
            "before_first_fix_commit":"{'c8b2fc46dc698db687379106b3f01c71b80f495f'}",
            "last_fix_commit":"1783f918bc19568f421473824461ff2ed7755e4c",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2021, 17:17:33",
            "message":"fix: guard against prototype pollution",
            "author":"Bar\u0131\u015f Soner U\u015fakl\u0131",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'src\/socket.io\/uploads.js': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NodeBB\/NodeBB\/raw\/1783f918bc19568f421473824461ff2ed7755e4c\/src%2Fsocket.io%2Fuploads.js', 'patch': \"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {\\n \\t\\t'user.updateCover': socketUser.updateCover,\\n \\t\\t'groups.cover.update': socketGroup.cover.update,\\n \\t};\\n-\\tif (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {\\n+\\tif (!socket.uid || !data || !data.chunk ||\\n+\\t\\t!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {\\n \\t\\tthrow new Error('[[error:invalid-data]]');\\n \\t}\\n \\n-\\tinProgress[socket.id] = inProgress[socket.id] || {};\\n+\\tinProgress[socket.id] = inProgress[socket.id] || Object.create(null);\\n \\tconst socketUploads = inProgress[socket.id];\\n \\tconst { method } = data.params;\"}}",
            "message_norm":"fix: guard against prototype pollution",
            "language":"en",
            "entities":"[('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/socket.io\/uploads.js'])",
            "num_files":1.0
        },
        {
            "index":91,
            "vuln_id":"GHSA-2gqg-2rg7-gh33",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b'}",
            "dataset":"osv",
            "summary":"Cross site scripting in librenms LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component \/Table\/GraylogController.php.",
            "published_date":"2022-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "commit_sha":"cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "patch":"SINGLE",
            "chain_ord":"['cc6112b8fb36039b862b42d86eb79ef7ee89d31b']",
            "before_first_fix_commit":"{'9c126572a2aebd43838aab9bf6abc09719ce983e'}",
            "last_fix_commit":"cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2022, 23:10:02",
            "message":"fix graylog xss (#13931)",
            "author":"Tony Murray",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'app\/Http\/Controllers\/Table\/GraylogController.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/cc6112b8fb36039b862b42d86eb79ef7ee89d31b\/app%2FHttp%2FControllers%2FTable%2FGraylogController.php', 'patch': '@@ -118,8 +118,8 @@ private function formatMessage($message)\\n         return [\\n             \\'severity\\'  => $this->severityLabel($level),\\n             \\'timestamp\\' => $displayTime,\\n-            \\'source\\'    => $device ? Url::deviceLink($device) : $message[\\'message\\'][\\'source\\'],\\n-            \\'message\\'   => $message[\\'message\\'][\\'message\\'] ?? \\'\\',\\n+            \\'source\\'    => $device ? Url::deviceLink($device) : htmlspecialchars($message[\\'message\\'][\\'source\\']),\\n+            \\'message\\'   => htmlspecialchars($message[\\'message\\'][\\'message\\'] ?? \\'\\'),\\n             \\'facility\\'  => is_numeric($facility) ? \"($facility) \" . __(\"syslog.facility.$facility\") : $facility,\\n             \\'level\\'     => (is_numeric($level) && $level >= 0) ? \"($level) \" . __(\"syslog.severity.$level\") : $level,\\n         ];'}}",
            "message_norm":"fix graylog xss (#13931)",
            "language":"no",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('#13931', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Table\/GraylogController.php'])",
            "num_files":1.0
        },
        {
            "index":2547,
            "vuln_id":"GHSA-pc22-3g76-gm6j",
            "cwe_id":"{'CWE-379', 'CWE-378'}",
            "score":9.3,
            "chain":"{'https:\/\/github.com\/swagger-api\/swagger-codegen\/commit\/987ea7a30b463cc239580d6ad166c707ae942a89'}",
            "dataset":"osv",
            "summary":"Generator Web Application: Local Privilege Escalation Vulnerability via System Temp Directory ### Impact\n\nOn Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. \n\nThis vulnerability is local privilege escalation because the contents of the `outputFolder` can be appended to by an attacker. As such, code written to this directory, when executed can be attacker controlled.\n\n#### Java Code\n\nThe method `File.createTempFile` from the JDK is vulnerable to this local information disclosure vulnerability.\n\nhttps:\/\/github.com\/swagger-api\/swagger-codegen\/blob\/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab\/modules\/swagger-generator\/src\/main\/java\/io\/swagger\/generator\/online\/Generator.java#L174-L185\n\n\n### Patches\n\nFix has been applied to the master branch with:\n\n* https:\/\/github.com\/swagger-api\/swagger-codegen\/commit\/987ea7a30b463cc239580d6ad166c707ae942a89\n\nincluded in release: 2.4.19\n\n\n### References\n\n* [CWE-378: Creation of Temporary File With Insecure Permissions](https:\/\/cwe.mitre.org\/data\/definitions\/378.html)\n* [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https:\/\/cwe.mitre.org\/data\/definitions\/379.html)\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* Email us at [security@swagger.io](mailto:security@swagger.io)\n\n#### Original vulnerability report\n\n> I'm performing OSS security research under the GitHub Security Lab Bug Bounty program.\n> I've been using a custom CodeQL query to find local temporary directory vulnerabilities in OSS with three custom CodeQL queries.\n> \n> - https:\/\/github.com\/github\/codeql\/pull\/4388\/files#diff-71d36c0f2bd0b08e32866f873f1c906cdc17277e0ad327c0c6cd2c882f30de4f\n> - https:\/\/github.com\/github\/codeql\/pull\/4388\/files#diff-1893a18a8bf43c011d61a7889d0139b998a5a78701a30fe7722eddd4c506aaac\n> - https:\/\/github.com\/github\/codeql\/pull\/4473\n> \n> The code generated by the Swagger Generator contains a local information disclosure vulnerability. The system temporary directory, on unix-like systems is shared between multiple users. Information written to this directory, or directories created under this directory that do not correctly set the posix standard permissions can have these directories read\/modified by other users.\n> \n> ---\n> \n> This vulnerability exists in the maven plugin.\n> \n> This vulnerability is distinctly different. This vulnerability is most likely a local privilege escalation vulnerability.\n> \n> https:\/\/github.com\/swagger-api\/swagger-codegen\/blob\/068b1ebcb7b04a48ad38f1cadd24bb3810c9f1ab\/modules\/swagger-generator\/src\/main\/java\/io\/swagger\/generator\/online\/Generator.java#L174-L185\n> \n> This vulnerability is very similar to this similar vulnerability I disclosed in the Eclipse Jetty project.\n> \n> https:\/\/github.com\/eclipse\/jetty.project\/security\/advisories\/GHSA-g3wg-6mcf-8jj6\n> \n> This is due to a race condition between the call to `delete` and the call to `mkdirs`.\n> \n> ```java\n> \/\/ ensure file will always be unique by appending random digits\n> File outputFolder = File.createTempFile(\"codegen-\", \"-tmp\"); \/\/ Attacker knows the full path of the file that will be generated\n> \/\/ delete the file that was created\n> outputFolder.delete(); \/\/ Attacker sees file is deleted and begins a race to create their own directory before Swagger Code Generator.\n> \/\/ and make a directory of the same name\n> \/\/ SECURITY VULNERABILITY: Race Condition! - Attacker beats Swagger Code Generator and now owns this directory\n> outputFolder.mkdirs();\n> ```\n> \n> This vulnerability is local privilege escalation because the contents of the `outputFolder` can be appended to by an attacker. As such, code written to this directory, when executed can be attacker controlled.\n> \n> The fix here is to switch to the `Files` API for creating temporary directories. Which does not contain this race condition, and appropriately sets the correct file permissions.\n>",
            "published_date":"2021-03-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/swagger-api\/swagger-codegen",
            "commit_href":"https:\/\/github.com\/swagger-api\/swagger-codegen\/commit\/987ea7a30b463cc239580d6ad166c707ae942a89",
            "commit_sha":"987ea7a30b463cc239580d6ad166c707ae942a89",
            "patch":"SINGLE",
            "chain_ord":"['987ea7a30b463cc239580d6ad166c707ae942a89']",
            "before_first_fix_commit":"{'3b40539b2260fbf1c8198dceb8797599c3944ef7', 'a4b766beb6141ed66dbe1be23bce32366b5f9486'}",
            "last_fix_commit":"987ea7a30b463cc239580d6ad166c707ae942a89",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/02\/2021, 10:05:49",
            "message":"Merge pull request from GHSA-pc22-3g76-gm6j\n\n security: use java.nio.files in Generator.",
            "author":"Francesco Tumanischvili",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 3, 'total': 5}",
            "files":"{'modules\/swagger-generator\/src\/main\/java\/io\/swagger\/generator\/online\/Generator.java': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/swagger-api\/swagger-codegen\/raw\/987ea7a30b463cc239580d6ad166c707ae942a89\/modules%2Fswagger-generator%2Fsrc%2Fmain%2Fjava%2Fio%2Fswagger%2Fgenerator%2Fonline%2FGenerator.java', 'patch': '@@ -15,6 +15,7 @@\\n import org.slf4j.LoggerFactory;\\n \\n import java.io.File;\\n+import java.nio.file.Files;\\n import java.util.ArrayList;\\n import java.util.LinkedHashMap;\\n import java.util.List;\\n@@ -173,9 +174,7 @@ public static InputOption serverOptions(@SuppressWarnings(\"unused\") String langu\\n \\n     protected static File getTmpFolder() {\\n         try {\\n-            File outputFolder = File.createTempFile(\"codegen-\", \"-tmp\");\\n-            outputFolder.delete();\\n-            outputFolder.mkdir();\\n+            File outputFolder = Files.createTempDirectory(\"codegen-\").toFile();\\n             outputFolder.deleteOnExit();\\n             return outputFolder;\\n         } catch (Exception e) {'}}",
            "message_norm":"merge pull request from ghsa-pc22-3g76-gm6j\n\n security: use java.nio.files in generator.",
            "language":"en",
            "entities":"[('ghsa-pc22-3g76-gm6j', 'VULNID', 'GHSA'), ('security', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/swagger-generator\/src\/main\/java\/io\/swagger\/generator\/online\/Generator.java'])",
            "num_files":1.0
        },
        {
            "index":2072,
            "vuln_id":"GHSA-hhqj-cfjx-vj25",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/hakimel\/reveal.js\/commit\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2'}",
            "dataset":"osv",
            "summary":"Cross site scripting in reveal.js The onmessage event listener in \/plugin\/notes\/speaker-view.html does not check the origin of postMessage before adding the content to the webpage. The vulnerable code allows any origin to postMessage on the browser window and feeds attacker's input to parts using which attacker can execute arbitrary javascript code on victim's browser window hosting reveal.js",
            "published_date":"2022-03-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/hakimel\/reveal.js",
            "commit_href":"https:\/\/github.com\/hakimel\/reveal.js\/commit\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "commit_sha":"32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "patch":"SINGLE",
            "chain_ord":"['32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2']",
            "before_first_fix_commit":"{'e33c3c72f93d4c70ded3a90f5918f60082c96451'}",
            "last_fix_commit":"32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/26\/2022, 11:46:18",
            "message":"Fix DOM XSS",
            "author":"r0hanSH",
            "comments":"{'com_1': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:17', 'body': '\u062e\u062f\u0645\u0627\u062a: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \\r\\n\u0646\u0648\u0639 \u0633\u0631\u0648\u06cc\u0633: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0633\u067e\u0647\\r\\n\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a: 9243 3628 1010 5892\\r\\n\u0628\u0646\u0627\u0645: \u0627\u0628\u0631\u0627\u0647\u06cc\u0645 \u0645\u0631\u0627\u062f\u06cc \u0627\u0633\u062a\u06cc\u0627\u0631\\r\\n\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0631\u062a:\\r\\n147,000,000,000,000\u0631\u06cc\u0627\u0644\\r\\n\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a:\\r\\n147,000,000,000,000\u0631\u06cc\u0627\u0644\\r\\n\u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc:963877\\r\\n\u0634\u0645\u0627\u0631\u0647 \u0645\u0631\u062c\u0639:94382963877\\r\\n\u06a9\u062f\u0633\u062f\u0627\u062f:20060530\\r\\nCODETRANSFER:G0956DVY87\\r\\nCOMMON ACCOUNT:947022366\\r\\nISIN:XS2111948803\\r\\nCFI CODE:DBFUFB\\r\\n\\r\\n\u0648\u0636\u0639\u06cc\u062a \u06a9\u0627\u0631\u062a: \u0627\u06a9\u062a\u06cc\u0648 \u0648 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633\u06cc\\r\\n            \u0633\u0631\u0648\u0631 \u0628\u0627\u0646\u06a9 \u0633\u067e\u0647'}, 'com_2': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:31', 'body': '> \u062e\u062f\u0645\u0627\u062a: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0646\u0648\u0639 \u0633\u0631\u0648\u06cc\u0633: \u0647\u0645\u0631\u0627\u0647 \u06a9\u0627\u0631\u062a \u0633\u067e\u0647 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a: 9243 3628 1010 5892 \u0628\u0646\u0627\u0645: \u0627\u0628\u0631\u0627\u0647\u06cc\u0645 \u0645\u0631\u0627\u062f\u06cc \u0627\u0633\u062a\u06cc\u0627\u0631 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0631\u062a: 147,000,000,000,000\u0631\u06cc\u0627\u0644 \u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a: 147,000,000,000,000\u0631\u06cc\u0627\u0644 \u06a9\u062f \u067e\u06cc\u06af\u06cc\u0631\u06cc:963877 \u0634\u0645\u0627\u0631\u0647 \u0645\u0631\u062c\u0639:94382963877 \u06a9\u062f\u0633\u062f\u0627\u062f:20060530 CODETRANSFER:G0956DVY87 COMMON ACCOUNT: 947022366 ISIN:XS2111948803 \u06a9\u062f CFI:DBFUFB\\r\\n> \\r\\n> \u06a9\u0627\u0631\u062a \u0648\u0636\u0639\u06cc\u062a: \u0627\u06a9\u062a\u06cc\u0648 \u0648 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633\u06cc \u0633\u0631\u0648\u0631 \u0628\u0627\u0646\u06a9 \u0633\u067e\u0647'}, 'com_3': {'author': 'Zhila136', 'datetime': '06\/16\/2022, 03:13:50', 'body': '![\u06f2\u06f0\u06f2\u06f2\u06f0\u06f6\u06f1\u06f6_\u06f0\u06f7\u06f3\u06f7\u06f4\u06f0](https:\/\/user-images.githubusercontent.com\/97744031\/173983277-3cf21aef-9310-4a21-b681-3457044107ad.jpg)'}}",
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'plugin\/notes\/speaker-view.html': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hakimel\/reveal.js\/raw\/32cdd3b1872ba8e2267c9e87ae216cb55f40f4d2\/plugin%2Fnotes%2Fspeaker-view.html', 'patch': '@@ -368,6 +368,10 @@ <h4 class=\"label\">Notes<\/h4>\\n \\n \\t\\t\\t\\twindow.addEventListener( \\'message\\', function( event ) {\\n \\n+\\t\\t\\t\\t\\tif (window.location.origin !== event.origin){\\n+\\t\\t\\t\\t\\t\\treturn;\\n+\\t\\t\\t\\t\\t}\\n+\\n \\t\\t\\t\\t\\tclearTimeout( connectionTimeout );\\n \\t\\t\\t\\t\\tconnectionStatus.style.display = \\'none\\';'}}",
            "message_norm":"fix dom xss",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['plugin\/notes\/speaker-view.html'])",
            "num_files":1.0
        },
        {
            "index":1234,
            "vuln_id":"GHSA-8p5c-f328-9fvv",
            "cwe_id":"{'CWE-22'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/anthraxx\/diffoscope\/commit\/632a40828a54b399787c25e7fa243f732aef7e05'}",
            "dataset":"osv",
            "summary":"Diffoscope may write to arbitrary locations due to an untrusted archive diffoscope before 76 writes to arbitrary locations on disk based on the contents of an untrusted archive.",
            "published_date":"2018-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/anthraxx\/diffoscope",
            "commit_href":"https:\/\/github.com\/anthraxx\/diffoscope\/commit\/632a40828a54b399787c25e7fa243f732aef7e05",
            "commit_sha":"632a40828a54b399787c25e7fa243f732aef7e05",
            "patch":"SINGLE",
            "chain_ord":"['632a40828a54b399787c25e7fa243f732aef7e05']",
            "before_first_fix_commit":"{'b468a2840a097f4b2f7719929d690d5738dbcae4'}",
            "last_fix_commit":"632a40828a54b399787c25e7fa243f732aef7e05",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/09\/2017, 21:47:05",
            "message":"Extract archive members using an auto-incrementing integer, avoiding the need to sanitise filenames. (Closes: #854723)\n\nSigned-off-by: Chris Lamb <lamby@debian.org>",
            "author":"Chris Lamb",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 27, 'total': 41}",
            "files":"{'diffoscope\/comparators\/utils\/libarchive.py': {'additions': 14, 'deletions': 27, 'changes': 41, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anthraxx\/diffoscope\/raw\/632a40828a54b399787c25e7fa243f732aef7e05\/diffoscope%2Fcomparators%2Futils%2Flibarchive.py', 'patch': '@@ -23,6 +23,7 @@\\n import ctypes\\n import logging\\n import libarchive\\n+import collections\\n \\n from diffoscope.tempfiles import get_temporary_directory\\n \\n@@ -168,11 +169,11 @@ def close_archive(self):\\n \\n     def get_member_names(self):\\n         self.ensure_unpacked()\\n-        return self._member_names\\n+        return self._members.keys()\\n \\n     def extract(self, member_name, dest_dir):\\n         self.ensure_unpacked()\\n-        return os.path.join(self._unpacked, member_name)\\n+        return self._members[member_name]\\n \\n     def get_member(self, member_name):\\n         with libarchive.file_reader(self.source.path) as archive:\\n@@ -197,45 +198,31 @@ def get_subclass(self, entry):\\n         return LibarchiveMember(self, entry)\\n \\n     def ensure_unpacked(self):\\n-        if hasattr(self, \\'_unpacked\\'):\\n+        if hasattr(self, \\'_members\\'):\\n             return\\n \\n-        self._unpacked = get_temporary_directory().name\\n-        self._member_names = []\\n+        tmpdir = get_temporary_directory().name\\n+        self._members = collections.OrderedDict()\\n \\n-        logger.debug(\"Extracting %s to %s\", self.source.path, self._unpacked)\\n+        logger.debug(\"Extracting %s to %s\", self.source.path, tmpdir)\\n \\n         with libarchive.file_reader(self.source.path) as archive:\\n-            for entry in archive:\\n-                self._member_names.append(entry.pathname)\\n+            for idx, entry in enumerate(archive):\\n+                # Maintain a mapping of archive path to the extracted path,\\n+                # avoiding the need to sanitise filenames.\\n+                dst = os.path.join(tmpdir, \\'{}\\'.format(idx))\\n+                self._members[entry.pathname] = dst\\n \\n                 if entry.isdir:\\n                     continue\\n \\n-                # All extracted locations must be underneath self._unpacked\\n-                force_prefix = os.path.join(self._unpacked, \"\")\\n-\\n-                # Try to pick a safe and reasonable candidate name\\n-                candidate_name = os.path.normpath(entry.pathname.rstrip(\\'\/\\' + os.sep))\\n-                if os.path.isabs(candidate_name):\\n-                    candidate_name = os.path.relpath(candidate_name, os.path.join(os.path.sep))\\n-\\n-                dst = os.path.normpath(os.path.join(self._unpacked, candidate_name))\\n-                if not dst.startswith(force_prefix):\\n-                    logger.warn(\"Skipping member because we could not make a safe name to extract it to: \\'%s\\'\",\\n-                                entry.pathname)\\n-                    continue\\n-\\n-                # TODO: need to fix reading these cleaned members. currently\\n-                # reading will still try to use the uncleaned name.\\n-                #logging.debug(\"Extracting %s to %s\", entry.pathname, dst)\\n-                os.makedirs(os.path.dirname(dst), exist_ok=True)\\n+                logger.debug(\"Extracting %s to %s\", entry.pathname, dst)\\n \\n                 with open(dst, \\'wb\\') as f:\\n                     for block in entry.get_blocks():\\n                         f.write(block)\\n \\n         logger.debug(\\n             \"Extracted %d entries from %s to %s\",\\n-            len(self._member_names), self.source.path, self._unpacked,\\n+            len(self._members), self.source.path, tmpdir,\\n         )'}}",
            "message_norm":"extract archive members using an auto-incrementing integer, avoiding the need to sanitise filenames. (closes: #854723)\n\nsigned-off-by: chris lamb <lamby@debian.org>",
            "language":"en",
            "entities":"[('sanitise', 'SECWORD', ''), ('#854723', 'ISSUE', ''), ('lamby@debian.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['diffoscope\/comparators\/utils\/libarchive.py'])",
            "num_files":1.0
        },
        {
            "index":12,
            "vuln_id":"GHSA-23fp-fmrv-f5px",
            "cwe_id":"{'CWE-400'}",
            "score":4.9,
            "chain":"{'https:\/\/github.com\/strapi\/strapi\/commit\/c0c191c08f05fe10d7a6b1bf9475c1a651a89362'}",
            "dataset":"osv",
            "summary":"Uncontrolled Resource Consumption in strapi A denial of service exists in strapi v3.0.0-beta.18.3 and earlier that can be abused in the admin console using admin rights can lead to arbitrary restart of the application.",
            "published_date":"2021-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/strapi\/strapi",
            "commit_href":"https:\/\/github.com\/strapi\/strapi\/commit\/c0c191c08f05fe10d7a6b1bf9475c1a651a89362",
            "commit_sha":"c0c191c08f05fe10d7a6b1bf9475c1a651a89362",
            "patch":"SINGLE",
            "chain_ord":"['c0c191c08f05fe10d7a6b1bf9475c1a651a89362']",
            "before_first_fix_commit":"{'7e3f7ee2de9eecd0bc098d7b77940b64f48b3a96'}",
            "last_fix_commit":"c0c191c08f05fe10d7a6b1bf9475c1a651a89362",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/07\/2020, 13:15:16",
            "message":"chore(admin): Improve plugin name validator in install\/uninstall plugin",
            "author":"Alexandre Bodin",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 2, 'total': 15}",
            "files":"{'packages\/strapi-admin\/controllers\/Admin.js': {'additions': 13, 'deletions': 2, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/strapi\/strapi\/raw\/c0c191c08f05fe10d7a6b1bf9475c1a651a89362\/packages%2Fstrapi-admin%2Fcontrollers%2FAdmin.js', 'patch': '@@ -7,6 +7,17 @@ const formatError = error => [\\n   { messages: [{ id: error.id, message: error.message, field: error.field }] },\\n ];\\n \\n+const PLUGIN_NAME_REGEX = \/^[A-Za-z][A-Za-z0-9-_]+$\/;\\n+\\n+\/**\\n+ * Validates a plugin name format\\n+ *\/\\n+const isValidPluginName = plugin => {\\n+  return (\\n+    _.isString(plugin) && !_.isEmpty(plugin) && PLUGIN_NAME_REGEX.test(plugin)\\n+  );\\n+};\\n+\\n \/**\\n  * A set of functions called \"actions\" for `Admin`\\n  *\/\\n@@ -67,7 +78,7 @@ module.exports = {\\n     try {\\n       const { plugin } = ctx.request.body;\\n \\n-      if (!\/^[A-Za-z0-9_-]+$\/.test(plugin)) {\\n+      if (!isValidPluginName(plugin)) {\\n         return ctx.badRequest(\\'Invalid plugin name\\');\\n       }\\n \\n@@ -107,7 +118,7 @@ module.exports = {\\n     try {\\n       const { plugin } = ctx.params;\\n \\n-      if (!\/^[A-Za-z0-9_-]+$\/.test(plugin)) {\\n+      if (!isValidPluginName(plugin)) {\\n         return ctx.badRequest(\\'Invalid plugin name\\');\\n       }'}}",
            "message_norm":"chore(admin): improve plugin name validator in install\/uninstall plugin",
            "language":"it",
            "entities":"[('chore(admin', 'SECWORD', ''), ('improve', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/strapi-admin\/controllers\/Admin.js'])",
            "num_files":1.0
        },
        {
            "index":1948,
            "vuln_id":"GHSA-gwrj-88fp-5m36",
            "cwe_id":"{'CWE-94'}",
            "score":8.5,
            "chain":"{'https:\/\/github.com\/whiteleaf7\/narou\/commit\/d07720e855293182563b749431dfbf6c2d1cdb42'}",
            "dataset":"osv",
            "summary":"Code injection in Narou Narou (aka Narou.rb) before 3.8.0 allows Ruby Code Injection via the title name or author name of a novel.",
            "published_date":"2021-07-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/whiteleaf7\/narou",
            "commit_href":"https:\/\/github.com\/whiteleaf7\/narou\/commit\/d07720e855293182563b749431dfbf6c2d1cdb42",
            "commit_sha":"d07720e855293182563b749431dfbf6c2d1cdb42",
            "patch":"SINGLE",
            "chain_ord":"['d07720e855293182563b749431dfbf6c2d1cdb42']",
            "before_first_fix_commit":"{'21f8d1b4cbfa42a80eae09d74bb5124fd6cde3f2'}",
            "last_fix_commit":"d07720e855293182563b749431dfbf6c2d1cdb42",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/27\/2021, 13:49:19",
            "message":"prohibit embedding of novel information",
            "author":"whiteleaf7",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 8, 'total': 9}",
            "files":"{'template\/converter.rb.erb': {'additions': 1, 'deletions': 8, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/whiteleaf7\/narou\/raw\/d07720e855293182563b749431dfbf6c2d1cdb42\/template%2Fconverter.rb.erb', 'patch': '@@ -1,14 +1,7 @@\\n # -*- coding: utf-8 -*-\\n <% Template.target_binary_version(1.0) -%>\\n \\n-=begin\\n-\u5bfe\u8c61\u5c0f\u8aac\u60c5\u5831\\n-\u30bf\u30a4\u30c8\u30eb: <%= @setting[\"title\"] %>\\n-\u4f5c\u8005: <%= @setting[\"author\"] %>\\n-URL: <%= @setting[\"toc_url\"] %>\\n-\\n-\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f http:\/\/bit.ly\/1vTEH04 \u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\\n-=end\\n+# \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f http:\/\/bit.ly\/1vTEH04 \u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\\n converter do\\n   # \u5404\u7a2e\u5909\u63db\u51e6\u7406\u304c\u3055\u308c\u308b\u300c\u524d\u300d\u306e\u751f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u5909\u63db\u51e6\u7406\u3092\u8a18\u8ff0\\n   def before(io, text_type)'}}",
            "message_norm":"prohibit embedding of novel information",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['template\/converter.rb.erb'])",
            "num_files":1.0
        },
        {
            "index":831,
            "vuln_id":"GHSA-6g85-3hm8-83f9",
            "cwe_id":"{'CWE-754'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `QuantizeAndDequantizeV4Grad` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.QuantizeAndDequantizeV4Grad`:\n\n```python\nimport tensorflow as tf\n\ngradient_tensor = tf.constant([0.0], shape=[1])\ninput_tensor = tf.constant([0.0], shape=[1])\ninput_min = tf.constant([[0.0]], shape=[1, 1])\ninput_max = tf.constant([[0.0]], shape=[1, 1])\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=gradient_tensor, input=input_tensor,\n  input_min=input_min, input_max=input_max, axis=0)\n```                     \n                        \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/95078c145b5a7a43ee046144005f733092756ab5\/tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the `input_*` tensors. In turn, this results in the tensors being passes as they are to [`QuantizeAndDequantizePerChannelGradientImpl`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/95078c145b5a7a43ee046144005f733092756ab5\/tensorflow\/core\/kernels\/quantize_and_dequantize_op.h#L295-L306):\n\n```cc \ntemplate <typename Device, typename T>\nstruct QuantizeAndDequantizePerChannelGradientImpl {\n  static void Compute(const Device& d,\n                      typename TTypes<T, 3>::ConstTensor gradient,\n                      typename TTypes<T, 3>::ConstTensor input,\n                      const Tensor* input_min_tensor,\n                      const Tensor* input_max_tensor,\n                      typename TTypes<T, 3>::Tensor input_backprop,\n                      typename TTypes<T>::Flat input_min_backprop,\n                      typename TTypes<T>::Flat input_max_backprop) {\n    ...\n    auto input_min = input_min_tensor->vec<T>();\n    auto input_max = input_max_tensor->vec<T>();\n    ...\n}\n```\n\nHowever, the `vec<T>` method, requires the rank to 1 and triggers a `CHECK` failure otherwise.\n\n### Patches\nWe have patched the issue in GitHub commit [20431e9044cf2ad3c0323c34888b192f3289af6b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 as this is the only other affected version.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20431e9044cf2ad3c0323c34888b192f3289af6b",
            "commit_sha":"20431e9044cf2ad3c0323c34888b192f3289af6b",
            "patch":"SINGLE",
            "chain_ord":"['20431e9044cf2ad3c0323c34888b192f3289af6b']",
            "before_first_fix_commit":"{'95078c145b5a7a43ee046144005f733092756ab5'}",
            "last_fix_commit":"20431e9044cf2ad3c0323c34888b192f3289af6b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2021, 20:43:59",
            "message":"Fix `tf.raw_ops.QuantizeAndDequantizeV4Grad` CHECK failure.\n\nPiperOrigin-RevId: 370532425\nChange-Id: I767721be266851b63d8fe55e7ac6be0af6017f6c",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/20431e9044cf2ad3c0323c34888b192f3289af6b\/tensorflow%2Fcore%2Fkernels%2Fquantize_and_dequantize_op.cc', 'patch': '@@ -160,7 +160,17 @@ class QuantizeAndDequantizeV4GradientOp : public OpKernel {\\n         errors::InvalidArgument(\"gradient and input must be the same size\"));\\n     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\\n     const Tensor& input_min_tensor = ctx->input(2);\\n+    OP_REQUIRES(ctx,\\n+                input_min_tensor.dims() == 0 || input_min_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input min tensor must have dimension 1. Recieved \",\\n+                    input_min_tensor.dims(), \".\"));\\n     const Tensor& input_max_tensor = ctx->input(3);\\n+    OP_REQUIRES(ctx,\\n+                input_max_tensor.dims() == 0 || input_max_tensor.dims() == 1,\\n+                errors::InvalidArgument(\\n+                    \"Input max tensor must have dimension 1. Recieved \",\\n+                    input_max_tensor.dims(), \".\"));\\n     if (axis_ != -1) {\\n       OP_REQUIRES(\\n           ctx, input_min_tensor.dim_size(0) == depth,'}}",
            "message_norm":"fix `tf.raw_ops.quantizeanddequantizev4grad` check failure.\n\npiperorigin-revid: 370532425\nchange-id: i767721be266851b63d8fe55e7ac6be0af6017f6c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('370532425', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":955,
            "vuln_id":"GHSA-74qp-233x-p5j8",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/apache\/incubator-livy\/commit\/4d8a912699683b973eee76d4e91447d769a0cb0d'}",
            "dataset":"osv",
            "summary":"Cross-site scripting (XSS) in Apache Livy Livy server version 0.7.0-incubating (only) is vulnerable to a cross site scripting issue in the session name. A malicious user could use this flaw to access logs and results of other users' sessions and run jobs with their privileges. This issue is fixed in Livy 0.7.1-incubating.",
            "published_date":"2021-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/incubator-livy",
            "commit_href":"https:\/\/github.com\/apache\/incubator-livy\/commit\/4d8a912699683b973eee76d4e91447d769a0cb0d",
            "commit_sha":"4d8a912699683b973eee76d4e91447d769a0cb0d",
            "patch":"SINGLE",
            "chain_ord":"['4d8a912699683b973eee76d4e91447d769a0cb0d']",
            "before_first_fix_commit":"{'97cf2f75929ef6c152afc468adbead269bd0758f'}",
            "last_fix_commit":"4d8a912699683b973eee76d4e91447d769a0cb0d",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/15\/2020, 00:25:54",
            "message":"Add html escape to session name\n\n## What changes were proposed in this pull request?\n\nThe PR adds HTML escaping to session names.\n\n## How was this patch tested?\n\nManual test.\n\nAuthor: Marco Gaido <mgaido@apache.org>\n\nCloses #302 from mgaido91\/escape_html.",
            "author":"Marco Gaido",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 3, 'total': 10}",
            "files":"{'server\/src\/main\/resources\/org\/apache\/livy\/server\/ui\/static\/js\/all-sessions.js': {'additions': 7, 'deletions': 3, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/incubator-livy\/raw\/4d8a912699683b973eee76d4e91447d769a0cb0d\/server%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Flivy%2Fserver%2Fui%2Fstatic%2Fjs%2Fall-sessions.js', 'patch': '@@ -15,13 +15,17 @@\\n  * limitations under the License.\\n  *\/\\n \\n+function escapeHtml(unescapedText) {\\n+  return $(\"<div>\").text(unescapedText).html()\\n+}\\n+\\n function loadSessionsTable(sessions) {\\n   $.each(sessions, function(index, session) {\\n     $(\"#interactive-sessions .sessions-table-body\").append(\\n       \"<tr>\" +\\n         tdWrap(uiLink(\"session\/\" + session.id, session.id)) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.kind) +\\n@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {\\n       \"<tr>\" +\\n         tdWrap(session.id) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.state) +\\n@@ -79,4 +83,4 @@ $(document).ready(function () {\\n       $(\"#all-sessions\").append(\\'<h4>No Sessions or Batches have been created yet.<\/h4>\\');\\n     }\\n   });\\n-});\\n\\\\ No newline at end of file\\n+});'}}",
            "message_norm":"add html escape to session name\n\n## what changes were proposed in this pull request?\n\nthe pr adds html escaping to session names.\n\n## how was this patch tested?\n\nmanual test.\n\nauthor: marco gaido <mgaido@apache.org>\n\ncloses #302 from mgaido91\/escape_html.",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/src\/main\/resources\/org\/apache\/livy\/server\/ui\/static\/js\/all-sessions.js'])",
            "num_files":1.0
        },
        {
            "index":1094,
            "vuln_id":"GHSA-7wv8-g97r-432h",
            "cwe_id":"{'CWE-200'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/e680e134a4215c979bfd2eaf58336be34c8fc6e6'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information to an Unauthorized Actor in microweber Exposure of Sensitive Information to an Unauthorized Actor in Packagist microweber\/microweber prior to 1.2.11.",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/e680e134a4215c979bfd2eaf58336be34c8fc6e6",
            "commit_sha":"e680e134a4215c979bfd2eaf58336be34c8fc6e6",
            "patch":"SINGLE",
            "chain_ord":"['e680e134a4215c979bfd2eaf58336be34c8fc6e6']",
            "before_first_fix_commit":"{'62aa09ed44ff63f5fffc5addbf000423d7c38e44'}",
            "last_fix_commit":"e680e134a4215c979bfd2eaf58336be34c8fc6e6",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/19\/2022, 09:35:10",
            "message":"search_authors only admins",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/MicroweberPackages\/User\/helpers\/api_user.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/e680e134a4215c979bfd2eaf58336be34c8fc6e6\/src%2FMicroweberPackages%2FUser%2Fhelpers%2Fapi_user.php', 'patch': \"@@ -63,9 +63,9 @@\\n \\n });\\n \\n-api_expose('users\/search_authors', function ($params = false) {\\n+api_expose_admin('users\/search_authors', function ($params = false) {\\n \\n-    $return = array();\\n+    $return = array(); \\n \\n     $kw = false;\\n     if (isset($params['kw'])) {\"}}",
            "message_norm":"search_authors only admins",
            "language":"en",
            "entities":"[('admins', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/User\/helpers\/api_user.php'])",
            "num_files":1.0
        },
        {
            "index":2853,
            "vuln_id":"GHSA-r4c4-5fpq-56wg",
            "cwe_id":"{'CWE-125'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e84c975313e8e8e38bb2ea118196369c45c51378'}",
            "dataset":"osv",
            "summary":"Heap OOB in boosted trees ### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(\n  node_id_range=[0,10],\n  stats_summary_indices=[[1, 2, 3, 0x1000000]],\n  stats_summary_values=[1.0],\n  stats_summary_shape=[1,1,1,1],\n  l1=l2=[1.0],\n  tree_complexity=[0.5],\n  min_node_weight=[1.0],\n  logits_dimension=3,\n  split_type='inequality')                                                                                                                                                                                                                                                                \n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/boosted_trees\/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range.\n  \n### Patches\nWe have patched the issue in GitHub commit [e84c975313e8e8e38bb2ea118196369c45c51378](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e84c975313e8e8e38bb2ea118196369c45c51378).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e84c975313e8e8e38bb2ea118196369c45c51378",
            "commit_sha":"e84c975313e8e8e38bb2ea118196369c45c51378",
            "patch":"SINGLE",
            "chain_ord":"['e84c975313e8e8e38bb2ea118196369c45c51378']",
            "before_first_fix_commit":"{'2e0ee46f1a47675152d3d865797a18358881d7a6'}",
            "last_fix_commit":"e84c975313e8e8e38bb2ea118196369c45c51378",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 19:35:03",
            "message":"In tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit, limit stat_dim in stats_summary_indices to under stats_dims in stats_summary_shape\n\nPiperOrigin-RevId: 387171191\nChange-Id: I83ca8a75b22aa78c037e8b98779da6cced16bfaa",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 0, 'total': 7}",
            "files":"{'tensorflow\/core\/kernels\/boosted_trees\/stats_ops.cc': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e84c975313e8e8e38bb2ea118196369c45c51378\/tensorflow%2Fcore%2Fkernels%2Fboosted_trees%2Fstats_ops.cc', 'patch': '@@ -1050,6 +1050,13 @@ class BoostedTreesSparseCalculateBestFeatureSplitOp : public OpKernel {\\n       const int32_t feature_dim = stats_summary_indices(idx, 1);\\n       const int32_t bucket_id = stats_summary_indices(idx, 2);\\n       const int32_t stat_dim = stats_summary_indices(idx, 3);\\n+      OP_REQUIRES(context, stat_dim < stats_dims,\\n+                  errors::InvalidArgument(\\n+                      \"Stat dim, the sum of logits dim and hessian dim in \"\\n+                      \"stats_summary_indices, cannot be greater than stats \"\\n+                      \"dims, the last value in stats_summary_shape, which was \",\\n+                      stats_dims, \". At index (\", idx,\\n+                      \", 4), stats_summary_indices contains value \", stat_dim));\\n       std::pair<FeatureMapIterator, bool> const& f_insert_result = f_map.insert(\\n           FeatureMapIterator::value_type(feature_dim, BucketMap()));\\n       auto& b_map = f_insert_result.first->second;'}}",
            "message_norm":"in tf.raw_ops.boostedtreessparsecalculatebestfeaturesplit, limit stat_dim in stats_summary_indices to under stats_dims in stats_summary_shape\n\npiperorigin-revid: 387171191\nchange-id: i83ca8a75b22aa78c037e8b98779da6cced16bfaa",
            "language":"en",
            "entities":"[('387171191', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/boosted_trees\/stats_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":21,
            "vuln_id":"GHSA-24m3-w8g9-jwpq",
            "cwe_id":"{'CWE-178', 'CWE-200'}",
            "score":3.0,
            "chain":"{'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/47968d26a2fd3ed52da70dc09210921d612ce44e'}",
            "dataset":"osv",
            "summary":"Information disclosure of source code in SimpleSAMLphp ### Background\n\nThe module controller in `SimpleSAML\\Module` that processes requests for pages\nhosted by modules, has code to identify paths ending with `.php` and process\nthose as PHP code. If no other suitable way of handling the given path exists it\npresents the file to the browser.\n\n### Description\n\nThe check to identify paths ending with `.php` does not account for uppercase\nletters. If someone requests a path ending with e.g. `.PHP` and the server is\nserving the code from a case-insensitive file system, such as on Windows, the\nprocessing of the PHP code does not occur, and the source code is instead\npresented to the browser.\n\n### Affected versions\n\nSimpleSAMLphp versions **1.18.5 and older**.\n\n### Impact\n\nAn attacker may use this issue to gain access to the source code in third-party\nmodules that is meant to be private, or even sensitive. However, the attack\nsurface is considered small, as the attack will only work when SimpleSAMLphp\nserves such content from a file system that is not case-sensitive, such as on\nWindows.\n\n### Resolution\n\nUpgrade the SimpleSAMLphp installation to version **1.18.6**.\n\n### Credit\n\nThis vulnerability was discovered and reported by S\u0142awek Naczy\u0144ski.",
            "published_date":"2020-04-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/simplesamlphp\/simplesamlphp",
            "commit_href":"https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/47968d26a2fd3ed52da70dc09210921d612ce44e",
            "commit_sha":"47968d26a2fd3ed52da70dc09210921d612ce44e",
            "patch":"SINGLE",
            "chain_ord":"['47968d26a2fd3ed52da70dc09210921d612ce44e']",
            "before_first_fix_commit":"{'228e4f2287fd5d73727178b87de7a9652bf1c5b0'}",
            "last_fix_commit":"47968d26a2fd3ed52da70dc09210921d612ce44e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/16\/2020, 12:17:24",
            "message":"Fix source code disclosure on case-insensitive file systems\n\nIf the file system containing the PHP code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the PHP file to the browser instead of executing it.\n\nE.g. a request for this URL will return the source code:\n\n  https:\/sp.example.org\/simplesaml\/module.php\/core\/frontpage_welcome.PHP\n\nFix that by converting the path to lowercase before checking the file\nextension.\n\nSee the following page for details:\n\n  https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/GHSA-24m3-w8g9-jwpq",
            "author":"Olav Morken",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/SimpleSAML\/Module.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/raw\/47968d26a2fd3ed52da70dc09210921d612ce44e\/lib%2FSimpleSAML%2FModule.php', 'patch': \"@@ -259,7 +259,7 @@ function ($val) {\\n             throw new Error\\\\NotFound('The URL wasn\\\\'t found in the module.');\\n         }\\n \\n-        if (substr($path, -4) === '.php') {\\n+        if (mb_strtolower(substr($path, -4), 'UTF-8') === '.php') {\\n             \/\/ PHP file - attempt to run it\\n \\n             \/* In some environments, $_SERVER['SCRIPT_NAME'] is already set with $_SERVER['PATH_INFO']. Check for that\"}}",
            "message_norm":"fix source code disclosure on case-insensitive file systems\n\nif the file system containing the php code is case-insensitive, a\nrequest containing an uppercase file extension will return the\ncontents of the php file to the browser instead of executing it.\n\ne.g. a request for this url will return the source code:\n\n  https:\/sp.example.org\/simplesaml\/module.php\/core\/frontpage_welcome.php\n\nfix that by converting the path to lowercase before checking the file\nextension.\n\nsee the following page for details:\n\n  https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/ghsa-24m3-w8g9-jwpq",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('disclosure', 'SECWORD', ''), ('https:\/sp.example.org', 'URL', ''), ('https:\/\/github.com\/simplesamlphp\/simplesamlphp\/security\/advisories\/ghsa-24m3-w8g9-jwpq', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/SimpleSAML\/Module.php'])",
            "num_files":1.0
        },
        {
            "index":453,
            "vuln_id":"GHSA-4p55-xj37-fx7g",
            "cwe_id":"{'CWE-276'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/strapi\/strapi\/commit\/3cdd73987950d5c7976701047b38203e902007bb'}",
            "dataset":"osv",
            "summary":"Improper Authorization in Strapi In Strapi before 3.2.5, there is no admin::hasPermissions restriction for CTB (aka content-type-builder) routes.",
            "published_date":"2020-10-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/strapi\/strapi",
            "commit_href":"https:\/\/github.com\/strapi\/strapi\/commit\/3cdd73987950d5c7976701047b38203e902007bb",
            "commit_sha":"3cdd73987950d5c7976701047b38203e902007bb",
            "patch":"SINGLE",
            "chain_ord":"['3cdd73987950d5c7976701047b38203e902007bb']",
            "before_first_fix_commit":"{'15e8a76f11c7d86ee3746efff187cbf83e220424', '4d00bc09b8bd7c0938e2d54f480d503560fcb45e'}",
            "last_fix_commit":"3cdd73987950d5c7976701047b38203e902007bb",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/22\/2020, 14:30:20",
            "message":"Merge pull request #8439 from strapi\/fix\/ctb-permissions\n\nAdd permission to CTB routes",
            "author":"Alexandre BODIN",
            "comments":null,
            "stats":"{'additions': 42, 'deletions': 14, 'total': 56}",
            "files":"{'packages\/strapi-plugin-content-type-builder\/config\/routes.json': {'additions': 42, 'deletions': 14, 'changes': 56, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/strapi\/strapi\/raw\/3cdd73987950d5c7976701047b38203e902007bb\/packages%2Fstrapi-plugin-content-type-builder%2Fconfig%2Froutes.json', 'patch': '@@ -5,111 +5,139 @@\\n       \"path\": \"\/reserved-names\",\\n       \"handler\": \"Builder.getReservedNames\",\\n       \"config\": {\\n-        \"policies\": []\\n+        \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"GET\",\\n       \"path\": \"\/connections\",\\n       \"handler\": \"Connections.getConnections\",\\n       \"config\": {\\n-        \"policies\": []\\n+        \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"GET\",\\n       \"path\": \"\/content-types\",\\n       \"handler\": \"ContentTypes.getContentTypes\",\\n       \"config\": {\\n-        \"policies\": []\\n+        \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"GET\",\\n       \"path\": \"\/content-types\/:uid\",\\n       \"handler\": \"ContentTypes.getContentType\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"POST\",\\n       \"path\": \"\/content-types\",\\n       \"handler\": \"ContentTypes.createContentType\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"PUT\",\\n       \"path\": \"\/content-types\/:uid\",\\n       \"handler\": \"ContentTypes.updateContentType\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"DELETE\",\\n       \"path\": \"\/content-types\/:uid\",\\n       \"handler\": \"ContentTypes.deleteContentType\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"GET\",\\n       \"path\": \"\/components\",\\n       \"handler\": \"Components.getComponents\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"GET\",\\n       \"path\": \"\/components\/:uid\",\\n       \"handler\": \"Components.getComponent\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"POST\",\\n       \"path\": \"\/components\",\\n       \"handler\": \"Components.createComponent\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"PUT\",\\n       \"path\": \"\/components\/:uid\",\\n       \"handler\": \"Components.updateComponent\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"DELETE\",\\n       \"path\": \"\/components\/:uid\",\\n       \"handler\": \"Components.deleteComponent\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"PUT\",\\n       \"path\": \"\/component-categories\/:name\",\\n       \"handler\": \"ComponentCategories.editCategory\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     },\\n     {\\n       \"method\": \"DELETE\",\\n       \"path\": \"\/component-categories\/:name\",\\n       \"handler\": \"ComponentCategories.deleteCategory\",\\n       \"config\": {\\n-        \"policies\": []\\n+      \"policies\": [\\n+          [\"admin::hasPermissions\", [\"plugins::content-type-builder.read\"]]\\n+        ]\\n       }\\n     }\\n   ]'}}",
            "message_norm":"merge pull request #8439 from strapi\/fix\/ctb-permissions\n\nadd permission to ctb routes",
            "language":"fr",
            "entities":"[('#8439', 'ISSUE', ''), ('permissions', 'SECWORD', ''), ('add', 'ACTION', ''), ('permission', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/strapi-plugin-content-type-builder\/config\/routes.json'])",
            "num_files":1.0
        },
        {
            "index":1120,
            "vuln_id":"GHSA-83rh-hx5x-q9p5",
            "cwe_id":"{'CWE-125'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/opencv\/opencv\/pull\/10480\/commits\/4ca89db22dea962690f31c1781bce5937ee91837'}",
            "dataset":"osv",
            "summary":"Out-of-bounds Read in OpenCV In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer over-read exists in the function cv::HdrDecoder::checkSignature in modules\/imgcodecs\/src\/grfmt_hdr.cpp.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencv\/opencv",
            "commit_href":"https:\/\/github.com\/opencv\/opencv\/pull\/10480\/commits\/4ca89db22dea962690f31c1781bce5937ee91837",
            "commit_sha":"4ca89db22dea962690f31c1781bce5937ee91837",
            "patch":"SINGLE",
            "chain_ord":"['4ca89db22dea962690f31c1781bce5937ee91837']",
            "before_first_fix_commit":"{'30373d2566a3ec097f0418dc2661ec03fcfb71d6'}",
            "last_fix_commit":"4ca89db22dea962690f31c1781bce5937ee91837",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/01\/2018, 13:12:21",
            "message":"imgproc(hdr): fix bounds check in HdrDecoder::checkSignature()",
            "author":"Alexander Alekhin",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 4, 'total': 12}",
            "files":"{'modules\/imgcodecs\/src\/grfmt_hdr.cpp': {'additions': 8, 'deletions': 4, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencv\/opencv\/raw\/4ca89db22dea962690f31c1781bce5937ee91837\/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_hdr.cpp', 'patch': '@@ -101,10 +101,14 @@ bool HdrDecoder::readData(Mat& _img)\\n \\n bool HdrDecoder::checkSignature( const String& signature ) const\\n {\\n-    if(signature.size() >= m_signature.size() &&\\n-       (!memcmp(signature.c_str(), m_signature.c_str(), m_signature.size()) ||\\n-       !memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())))\\n-       return true;\\n+    if (signature.size() >= m_signature.size() &&\\n+        0 == memcmp(signature.c_str(), m_signature.c_str(), m_signature.size())\\n+    )\\n+        return true;\\n+    if (signature.size() >= m_signature_alt.size() &&\\n+        0 == memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())\\n+    )\\n+        return true;\\n     return false;\\n }'}}",
            "message_norm":"imgproc(hdr): fix bounds check in hdrdecoder::checksignature()",
            "language":"en",
            "entities":"[('bounds check', 'SECWORD', ''), ('hdrdecoder::checksignature', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/imgcodecs\/src\/grfmt_hdr.cpp'])",
            "num_files":1.0
        },
        {
            "index":302,
            "vuln_id":"GHSA-3qgw-p4fm-x7gf",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's convolution code ### Impact\nTFLite's [convolution code](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/09c73bca7d648e961dd05898292d91a8322a9d45\/tensorflow\/lite\/kernels\/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. For example:\n\n```cc \nconst int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff489d95a9006be080ad14feb378f2b4dac35552](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ff489d95a9006be080ad14feb378f2b4dac35552",
            "commit_sha":"ff489d95a9006be080ad14feb378f2b4dac35552",
            "patch":"SINGLE",
            "chain_ord":"['ff489d95a9006be080ad14feb378f2b4dac35552']",
            "before_first_fix_commit":"{'09c73bca7d648e961dd05898292d91a8322a9d45'}",
            "last_fix_commit":"ff489d95a9006be080ad14feb378f2b4dac35552",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 19:37:35",
            "message":"Prevent division by 0.\n\nPiperOrigin-RevId: 370962554\nChange-Id: I0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'tensorflow\/lite\/kernels\/conv.cc': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ff489d95a9006be080ad14feb378f2b4dac35552\/tensorflow%2Flite%2Fkernels%2Fconv.cc', 'patch': '@@ -545,6 +545,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\\n     \/\/ Only one scale factor per batch is typically necessary. See optimized\\n     \/\/ implementation for why we need to allocate for the height of the inputs\\n     \/\/ flattened to 2D.\\n+    TF_LITE_ENSURE(context, channels_in != 0);\\n     const int height = NumElements(input) \/ channels_in;\\n     int scaling_dims[1] = {height};\\n     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {\\n@@ -587,6 +588,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\\n       input_offsets->type = kTfLiteInt32;\\n       input_offsets->allocation_type = kTfLiteArenaRw;\\n       \/\/ See above comment for the need to allocate for height of inputs.\\n+      TF_LITE_ENSURE(context, channels_in != 0);\\n       const int height = NumElements(input) \/ channels_in;\\n       const int input_offset_dims[1] = {height};\\n       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,\\n@@ -886,8 +888,9 @@ TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,\\n   CalculateActivationRange(params->activation, &output_activation_min,\\n                            &output_activation_max);\\n \\n-  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\\n   const int batch_size = SizeOfDimension(input, 0);\\n+  TF_LITE_ENSURE(context, batch_size != 0);\\n+  const int input_size = NumElements(input) \/ batch_size;\\n   TfLiteTensor* quantized_input_tensor;\\n   TF_LITE_ENSURE_OK(context,\\n                     GetTemporarySafe(context, node, data->input_quantized_index,\\n@@ -989,8 +992,9 @@ TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node,\\n   CalculateActivationRange(params->activation, &output_activation_min,\\n                            &output_activation_max);\\n \\n-  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\\n   const int batch_size = SizeOfDimension(input, 0);\\n+  TF_LITE_ENSURE(context, batch_size != 0);\\n+  const int input_size = NumElements(input) \/ batch_size;\\n \\n   const float* input_ptr = GetTensorData<float>(input);\\n   TfLiteTensor* quantized_input_tensor;'}}",
            "message_norm":"prevent division by 0.\n\npiperorigin-revid: 370962554\nchange-id: i0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370962554', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/conv.cc'])",
            "num_files":1.0
        },
        {
            "index":1608,
            "vuln_id":"GHSA-cv3v-7846-6pxm",
            "cwe_id":"{'CWE-552'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/gabrielcsapo\/node-git-server\/commit\/ac26650f69bc445d71e4f2c55328676d10a4be43'}",
            "dataset":"osv",
            "summary":"Unauthorized File Access in node-git-server Versions of `node-git-server` prior to 0.6.1 are vulnerable to Unauthorized File Access. It is possible to access any git repository by using absolute paths, which may allow attackers to access private repositories.\n\n\n## Recommendation\n\nUpgrade to version 0.6.1 or later.",
            "published_date":"2020-09-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/gabrielcsapo\/node-git-server",
            "commit_href":"https:\/\/github.com\/gabrielcsapo\/node-git-server\/commit\/ac26650f69bc445d71e4f2c55328676d10a4be43",
            "commit_sha":"ac26650f69bc445d71e4f2c55328676d10a4be43",
            "patch":"SINGLE",
            "chain_ord":"['ac26650f69bc445d71e4f2c55328676d10a4be43']",
            "before_first_fix_commit":"{'e3ae3737fc9de848856e56a3cf624fe014803f25'}",
            "last_fix_commit":"ac26650f69bc445d71e4f2c55328676d10a4be43",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/29\/2020, 17:45:58",
            "message":"Security Issue (#62)\n\nIt is currently possible to overwrite the `repoDir` by sending a repository name that starts with a \"\/\", the `path.resolve` method prioritizes the second argument see the example below.\r\n\r\npath.resolve(\"\/my\/repo\/folder\",\"\/etc\"); \/\/ \/etc\r\n\r\nThis behavior gives an attacker the ability to create\/write\/pull repositories from an arbitrary absolute path, this issue could also impact authentication in some cases as it corrupts the repository name.",
            "author":"Ron Masas",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/git.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gabrielcsapo\/node-git-server\/raw\/ac26650f69bc445d71e4f2c55328676d10a4be43\/lib%2Fgit.js', 'patch': '@@ -143,7 +143,7 @@ class Git extends EventEmitter {\\n         this.dirMap = repoDir;\\n     } else {\\n         this.dirMap = (dir) => {\\n-            return (path.normalize(dir ? path.resolve(repoDir, dir) : repoDir));\\n+            return (path.normalize(dir ? path.join(repoDir, dir) : repoDir));\\n         };\\n     }'}}",
            "message_norm":"security issue (#62)\n\nit is currently possible to overwrite the `repodir` by sending a repository name that starts with a \"\/\", the `path.resolve` method prioritizes the second argument see the example below.\r\n\r\npath.resolve(\"\/my\/repo\/folder\",\"\/etc\"); \/\/ \/etc\r\n\r\nthis behavior gives an attacker the ability to create\/write\/pull repositories from an arbitrary absolute path, this issue could also impact authentication in some cases as it corrupts the repository name.",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#62', 'ISSUE', ''), ('attacker', 'FLAW', ''), ('issue', 'FLAW', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/git.js'])",
            "num_files":1.0
        },
        {
            "index":3148,
            "vuln_id":"GHSA-vmm6-w4cf-7f3x",
            "cwe_id":"{'CWE-285'}",
            "score":8.7,
            "chain":"{'https:\/\/github.com\/opencast\/opencast\/commit\/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8'}",
            "dataset":"osv",
            "summary":"Authentication Bypass For Endpoints With Anonymous Access in Opencast ### Impact\n\nUsing a remember-me cookie with an arbitrary username can cause Opencast to assume proper authentication for that user even if the remember-me cookie was incorrect given that the attacked endpoint also allows anonymous access.\n\nThis way, an attacker can, for example, fake a remember-me token, assume the identity of the global system administrator and request non-public content from the search service without ever providing any proper authentication.\n\n\n### Patches\n\nThis problem is fixed in Opencast 7.6 and Opencast 8.1\n\n\n### Workarounds\n\nAs a workaround for older, unpatched versions, disabling remember-me cookies in `etc\/security\/mh_default_org.xml` will mitigate the problem but will obviously also disable this feature without obvious indication. To deactivate this, remove the following line from the security configuration:\n\n```xml\n<sec:remember-me \u2026 \/>\n```\n\n### References\n\n- [Remember-me cookie in the security configuration file](https:\/\/github.com\/opencast\/opencast\/blob\/161ee619382f144dc35eea211fc6b556025b98e1\/etc\/security\/mh_default_org.xml#L335-L336)\n\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open an issue in [opencast\/opencast](https:\/\/github.com\/opencast\/opencast\/issues)\n- For security-relevant information, email us at security@opencast.org",
            "published_date":"2020-01-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencast\/opencast",
            "commit_href":"https:\/\/github.com\/opencast\/opencast\/commit\/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8",
            "commit_sha":"b157e1fb3b35991ca7bf59f0730329fbe7ce82e8",
            "patch":"SINGLE",
            "chain_ord":"['b157e1fb3b35991ca7bf59f0730329fbe7ce82e8']",
            "before_first_fix_commit":"{'1a7172c95af8d542a77ae5b153e4c834dd4788a6'}",
            "last_fix_commit":"b157e1fb3b35991ca7bf59f0730329fbe7ce82e8",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/13\/2020, 22:55:50",
            "message":"Authentication Bypass For Endpoints With Anonymous Access\n\nUsing a remember-me cookie with an arbitrary username can cause Opencast\nto assume proper authentication for that user even if the remember-me\ncookie was incorrect given that the attacked endpoint also allows\nanonymous access.\n\nThis way, an attacker can, for example, fake a remember-me token, assume\nthe identity of the global system administrator and request non-public\ncontent from the search service without ever providing any proper\nauthentication.\n\nThe reason for this problem is that using a remember-me cookie will\nalways cause the user in the request context to be populated, even if\nthe cookie is invalid by now. This is usually no problem, except in\ncombination with anonymous access where anonymous authentication is\ngranted and the request may continue.\n\nIn such a case, Opencast's security service would just check that a user\nexisted in the request context and assume proper authentication of this\nuser, never checking if it's actually anonymous authentication.\n\nThis patch adds this additional check, falling back to the anonymous\nuser in case of anonymous authentication.",
            "author":"Lars Kiesow",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 6, 'total': 16}",
            "files":"{'modules\/kernel\/src\/main\/java\/org\/opencastproject\/kernel\/security\/SecurityServiceSpringImpl.java': {'additions': 10, 'deletions': 6, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencast\/opencast\/raw\/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8\/modules%2Fkernel%2Fsrc%2Fmain%2Fjava%2Forg%2Fopencastproject%2Fkernel%2Fsecurity%2FSecurityServiceSpringImpl.java', 'patch': '@@ -32,6 +32,7 @@\\n \\n import org.slf4j.Logger;\\n import org.slf4j.LoggerFactory;\\n+import org.springframework.security.authentication.AnonymousAuthenticationToken;\\n import org.springframework.security.core.Authentication;\\n import org.springframework.security.core.GrantedAuthority;\\n import org.springframework.security.core.context.SecurityContextHolder;\\n@@ -94,15 +95,19 @@ public User getUser() throws IllegalStateException {\\n \\n     User delegatedUser = delegatedUserHolder.get();\\n \\n+    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\\n+    if (auth instanceof AnonymousAuthenticationToken) {\\n+      return SecurityUtil.createAnonymousUser(org);\\n+    }\\n+\\n     if (delegatedUser != null) {\\n       return delegatedUser;\\n     }\\n \\n-    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\\n     JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\\n     if (auth != null) {\\n       Object principal = auth.getPrincipal();\\n-      if ((principal != null) && (principal instanceof UserDetails)) {\\n+      if ((principal instanceof UserDetails)) {\\n         UserDetails userDetails = (UserDetails) principal;\\n \\n         User user = null;\\n@@ -111,16 +116,15 @@ public User getUser() throws IllegalStateException {\\n         if (userDirectory != null) {\\n           user = userDirectory.loadUser(userDetails.getUsername());\\n           if (user == null) {\\n-            logger.debug(\\n-                    \"Authenticated user \\'{}\\' could not be found in any of the current UserProviders. Continuing anyway...\",\\n-                    userDetails.getUsername());\\n+            logger.debug(\"Authenticated user \\'{}\\' could not be found in any of the current UserProviders. \"\\n+                + \"Continuing anyway...\", userDetails.getUsername());\\n           }\\n         } else {\\n           logger.debug(\"No UserDirectory was found when trying to search for user \\'{}\\'\", userDetails.getUsername());\\n         }\\n \\n         \/\/ Add the roles (authorities) in the security context\\n-        Set<JaxbRole> roles = new HashSet<JaxbRole>();\\n+        Set<JaxbRole> roles = new HashSet<>();\\n         Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\\n         if (authorities != null) {\\n           for (GrantedAuthority ga : authorities) {'}}",
            "message_norm":"authentication bypass for endpoints with anonymous access\n\nusing a remember-me cookie with an arbitrary username can cause opencast\nto assume proper authentication for that user even if the remember-me\ncookie was incorrect given that the attacked endpoint also allows\nanonymous access.\n\nthis way, an attacker can, for example, fake a remember-me token, assume\nthe identity of the global system administrator and request non-public\ncontent from the search service without ever providing any proper\nauthentication.\n\nthe reason for this problem is that using a remember-me cookie will\nalways cause the user in the request context to be populated, even if\nthe cookie is invalid by now. this is usually no problem, except in\ncombination with anonymous access where anonymous authentication is\ngranted and the request may continue.\n\nin such a case, opencast's security service would just check that a user\nexisted in the request context and assume proper authentication of this\nuser, never checking if it's actually anonymous authentication.\n\nthis patch adds this additional check, falling back to the anonymous\nuser in case of anonymous authentication.",
            "language":"en",
            "entities":"[('authentication bypass', 'SECWORD', ''), ('cookie', 'SECWORD', ''), ('authentication', 'SECWORD', ''), ('cookie', 'SECWORD', ''), ('attacked', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('administrator', 'SECWORD', ''), ('authentication', 'SECWORD', ''), ('problem', 'FLAW', ''), ('cookie', 'SECWORD', ''), ('cookie', 'SECWORD', ''), ('problem', 'FLAW', ''), ('authentication', 'SECWORD', ''), ('security', 'SECWORD', ''), ('authentication', 'SECWORD', ''), ('authentication', 'SECWORD', ''), ('adds', 'ACTION', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/kernel\/src\/main\/java\/org\/opencastproject\/kernel\/security\/SecurityServiceSpringImpl.java'])",
            "num_files":1.0
        },
        {
            "index":2805,
            "vuln_id":"GHSA-qqxp-xp9v-vvx6",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jquery\/jquery-ui\/commit\/f2854408cce7e4b7fc6bf8676761904af9c96bde', 'https:\/\/github.com\/jquery\/jquery-ui\/commit\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects jquery-ui Cross-site scripting (XSS) vulnerability in the default content option in jquery.ui.tooltip.js in the Tooltip widget in jQuery UI before 1.10.0 allows remote attackers to inject arbitrary web script or HTML via the title attribute, which is not properly handled in the autocomplete combo box demo.",
            "published_date":"2017-10-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/jquery\/jquery-ui",
            "commit_href":"https:\/\/github.com\/jquery\/jquery-ui\/commit\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e",
            "commit_sha":"5fee6fd5000072ff32f2d65b6451f39af9e0e39e",
            "patch":"MULTI",
            "chain_ord":"['5fee6fd5000072ff32f2d65b6451f39af9e0e39e', 'f2854408cce7e4b7fc6bf8676761904af9c96bde']",
            "before_first_fix_commit":"{'5fee6fd5000072ff32f2d65b6451f39af9e0e39e'}",
            "last_fix_commit":"f2854408cce7e4b7fc6bf8676761904af9c96bde",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/27\/2012, 15:52:19",
            "message":"Autocomplete demo: Combobox: Encode search term inside tooltips. Fixes #8859 - Autocomplete: XSS in combobox demo.",
            "author":"Scott Gonz\u00e1lez",
            "comments":"{'com_1': {'author': 'jzaefferer', 'datetime': '11\/27\/2012, 16:05:23', 'body': \"Doesn't this just hide the underlying tooltip vulnerability? If so, tooltip would have to use `.text()` instead of `.html()`, and make it sane to override that.\"}, 'com_2': {'author': 'scottgonzalez', 'datetime': '11\/27\/2012, 16:13:04', 'body': \"hmm...yeah, tooltip should handle this in the default `content` option. Good catch, I'll fix that.\"}, 'com_3': {'author': 'scottgonzalez', 'datetime': '11\/27\/2012, 16:22:17', 'body': 'Fixed in f2854408cce7e4b7fc6bf8676761904af9c96bde.'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'demos\/autocomplete\/combobox.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jquery\/jquery-ui\/raw\/5fee6fd5000072ff32f2d65b6451f39af9e0e39e\/demos%2Fautocomplete%2Fcombobox.html', 'patch': '@@ -61,7 +61,7 @@\\n \\t\\t\\t\\t\\t\\t\/\/ remove invalid value, as it didn\\'t match anything\\n \\t\\t\\t\\t\\t\\t$( element )\\n \\t\\t\\t\\t\\t\\t\\t.val( \"\" )\\n-\\t\\t\\t\\t\\t\\t\\t.attr( \"title\", value + \" didn\\'t match any item\" )\\n+\\t\\t\\t\\t\\t\\t\\t.attr( \"title\", $( \"<a>\" ).text( value ).html() + \" didn\\'t match any item\" )\\n \\t\\t\\t\\t\\t\\t\\t.tooltip( \"open\" );\\n \\t\\t\\t\\t\\t\\tselect.val( \"\" );\\n \\t\\t\\t\\t\\t\\tsetTimeout(function() {'}}",
            "message_norm":"autocomplete demo: combobox: encode search term inside tooltips. fixes #8859 - autocomplete: xss in combobox demo.",
            "language":"pt",
            "entities":"[('encode', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#8859', 'ISSUE', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['demos\/autocomplete\/combobox.html'])",
            "num_files":1.0
        },
        {
            "index":2124,
            "vuln_id":"GHSA-hrmm-f4j8-8vxc",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/a9ab1aae31078e80593b9227db11d316c2239ef3'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0912, CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0927, CVE-2019-0933, CVE-2019-0937.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/a9ab1aae31078e80593b9227db11d316c2239ef3",
            "commit_sha":"a9ab1aae31078e80593b9227db11d316c2239ef3",
            "patch":"MULTI",
            "chain_ord":"['a9ab1aae31078e80593b9227db11d316c2239ef3', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
            "before_first_fix_commit":"{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
            "last_fix_commit":"d797e3f00e34c12c8c0ae52f56344325439dccd7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/12\/2019, 23:15:50",
            "message":"[CVE-2019-0922] Type confusion in Edge - Individual",
            "author":"Meghana Gupta",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'lib\/Backend\/GlobOptArrays.cpp': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/a9ab1aae31078e80593b9227db11d316c2239ef3\/lib%2FBackend%2FGlobOptArrays.cpp', 'patch': '@@ -1736,7 +1736,14 @@ void GlobOpt::ArraySrcOpt::Optimize()\\n     {\\n         if (newBaseValueType != baseValueType)\\n         {\\n-            UpdateValue(nullptr, nullptr, nullptr);\\n+            if (globOpt->IsSafeToTransferInPrePass(baseOpnd, baseValue))\\n+            {\\n+                UpdateValue(nullptr, nullptr, nullptr);\\n+            }\\n+            else if (globOpt->IsOperationThatLikelyKillsJsArraysWithNoMissingValues(instr) && baseValueInfo->HasNoMissingValues())\\n+            {\\n+                globOpt->ChangeValueType(nullptr, baseValue, baseValueInfo->Type().SetHasNoMissingValues(false), true);\\n+            }\\n         }\\n \\n         \/\/ For javascript arrays and objects with javascript arrays:'}}",
            "message_norm":"[cve-2019-0922] type confusion in edge - individual",
            "language":"en",
            "entities":"[('cve-2019-0922', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOptArrays.cpp'])",
            "num_files":1.0
        },
        {
            "index":3171,
            "vuln_id":"GHSA-vvg4-vgrv-xfr7",
            "cwe_id":"{'CWE-665'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4504a081af71514bb1828048363e6540f797005b', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14607c0707040d775e06b6817325640cb4b5864c'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `tf.raw_ops.CTCLoss` ### Impact \nIncomplete validation in `tf.raw_ops.CTCLoss` allows an attacker to trigger an OOB read from heap:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[10, 16, 0], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[8, 0], dtype=tf.int64)\nlabels_values = tf.constant([-100] * 8, shape=[8], dtype=tf.int32)\nsequence_length = tf.constant([-100] * 16, shape=[16], dtype=tf.int32)\n  \ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=True, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=True)\n```   \n      \nAn attacker can also trigger a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[7, 2, 0], dtype=tf.float32)\nlabels_indices = tf.constant([-100, -100], shape=[2, 1], dtype=tf.int64)\nlabels_values = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\nFinally, an attacker can trigger a null pointer dereference:\n\n```python \nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\n### Patches\nWe have patched the issue in GitHub commit[14607c0707040d775e06b6817325640cb4b5864c](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/14607c0707040d775e06b6817325640cb4b5864c) followed by GitHub commit [4504a081af71514bb1828048363e6540f797005b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4504a081af71514bb1828048363e6540f797005b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4504a081af71514bb1828048363e6540f797005b",
            "commit_sha":"4504a081af71514bb1828048363e6540f797005b",
            "patch":"MULTI",
            "chain_ord":"['4504a081af71514bb1828048363e6540f797005b', '14607c0707040d775e06b6817325640cb4b5864c']",
            "before_first_fix_commit":"{'8410ce671b48e96965a1e4a97017f8a5bbd03d3a'}",
            "last_fix_commit":"14607c0707040d775e06b6817325640cb4b5864c",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2021, 00:33:47",
            "message":"Fix OOB read issue with `tf.raw_ops.CTCLoss`.\n\nPiperOrigin-RevId: 372242187\nChange-Id: I347228ed8c04e1d2eb9d2479ae52f51d1b512c6e",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/ctc_loss_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4504a081af71514bb1828048363e6540f797005b\/tensorflow%2Fcore%2Fkernels%2Fctc_loss_op.cc', 'patch': '@@ -100,6 +100,10 @@ class CTCLossOp : public OpKernel {\\n                 errors::InvalidArgument(\"sequence_length is not a vector\"));\\n     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(labels_indices->shape()),\\n                 errors::InvalidArgument(\"labels_indices is not a matrix\"));\\n+    OP_REQUIRES(ctx, labels_indices->dim_size(1) > 1,\\n+                errors::InvalidArgument(\\n+                    \"labels_indices second dimension must be >= 1. Received \",\\n+                    labels_indices->dim_size(1)));\\n     OP_REQUIRES(ctx, TensorShapeUtils::IsVector(labels_values->shape()),\\n                 errors::InvalidArgument(\"labels_values is not a vector\"));'}}",
            "message_norm":"fix oob read issue with `tf.raw_ops.ctcloss`.\n\npiperorigin-revid: 372242187\nchange-id: i347228ed8c04e1d2eb9d2479ae52f51d1b512c6e",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('oob', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372242187', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ctc_loss_op.cc'])",
            "num_files":1.0
        },
        {
            "index":624,
            "vuln_id":"GHSA-5fh3-25xr-g85h",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57'}",
            "dataset":"osv",
            "summary":"snipe-it is vulnerable to Cross-site Scripting snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "commit_sha":"ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "patch":"SINGLE",
            "chain_ord":"['ff81e6d5366c2cfb15618793ad919ae4cbb3ac57']",
            "before_first_fix_commit":"{'3b68a6f1befeef504c0a3263e87a2afd55abc430', '00fad35c2a6ddc9813d3322da91086eb06cb7406'}",
            "last_fix_commit":"ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/25\/2021, 03:56:36",
            "message":"Merge pull request #10361 from snipe\/fixes\/xss_in_accessories_checkout_notes\n\nEscape notes in transformCheckedOutAccessory",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Transformers\/AccessoriesTransformer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57\/app%2FHttp%2FTransformers%2FAccessoriesTransformer.php', 'patch': \"@@ -82,7 +82,7 @@ public function transformCheckedoutAccessory ($accessory, $accessory_users, $tot\\n                 'first_name'=> e($user->first_name),\\n                 'last_name'=> e($user->last_name),\\n                 'employee_number' =>  e($user->employee_num),\\n-                'checkout_notes' => $user->pivot->note,\\n+                'checkout_notes' => e($user->pivot->note),\\n                 'last_checkout' => Helper::getFormattedDateObject($user->pivot->created_at, 'datetime'),\\n                 'type' => 'user',\\n                 'available_actions' => ['checkin' => true]\"}}",
            "message_norm":"merge pull request #10361 from snipe\/fixes\/xss_in_accessories_checkout_notes\n\nescape notes in transformcheckedoutaccessory",
            "language":"en",
            "entities":"[('#10361', 'ISSUE', ''), ('xss_in_accessories_checkout_notes', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Transformers\/AccessoriesTransformer.php'])",
            "num_files":1.0
        },
        {
            "index":2747,
            "vuln_id":"GHSA-qfxv-qqvg-24pg",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Turistforeningen\/node-im-metadata\/commit\/ea15dddbe0f65694bfde36b78dd488e90f246639'}",
            "dataset":"osv",
            "summary":"OS Command Injection in im-metadata im-metadata through 3.0.1 allows remote attackers to execute arbitrary commands via the \"exec\" argument. It is possible to inject arbitrary commands as part of the metadata options which is given to the \"exec\" function.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/Turistforeningen\/node-im-metadata",
            "commit_href":"https:\/\/github.com\/Turistforeningen\/node-im-metadata\/commit\/ea15dddbe0f65694bfde36b78dd488e90f246639",
            "commit_sha":"ea15dddbe0f65694bfde36b78dd488e90f246639",
            "patch":"SINGLE",
            "chain_ord":"['ea15dddbe0f65694bfde36b78dd488e90f246639']",
            "before_first_fix_commit":"{'049ce24dbb4302811b9247444347da6561605a8a'}",
            "last_fix_commit":"ea15dddbe0f65694bfde36b78dd488e90f246639",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/03\/2020, 21:26:09",
            "message":"fix: check path argument before processing (#10)\n\nhotfix to re mediate command injection",
            "author":"Sam Sanoop",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'index.js': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Turistforeningen\/node-im-metadata\/raw\/ea15dddbe0f65694bfde36b78dd488e90f246639\/index.js', 'patch': \"@@ -9,15 +9,18 @@ module.exports = function(path, opts, cb) {\\n     opts = {};\\n   }\\n \\n-  var cmd = module.exports.cmd(path, opts);\\n-  opts.timeout = opts.timeout || 5000;\\n-\\n-  exec(cmd, opts, function(e, stdout, stderr) {\\n-    if (e) { return cb(e); }\\n+  if(\/;|&|`|\\\\$|\\\\(|\\\\)|\\\\|\\\\||\\\\||!|>|<|\\\\?|\\\\${\/g.test(JSON.stringify(path))) {\\n+    console.log('Input Validation failed, Suspicious Characters found');\\n+  } else {\\n+    var cmd = module.exports.cmd(path, opts);\\n+    opts.timeout = opts.timeout || 5000;\\n+    exec(cmd, opts, function(e, stdout, stderr) {\\n+      if (e) { return cb(e); }\\n     if (stderr) { return cb(new Error(stderr)); }\\n \\n-    return cb(null, module.exports.parse(path, stdout, opts));\\n+      return cb(null, module.exports.parse(path, stdout, opts));\\n   });\\n+}\\n };\\n \\n module.exports.cmd = function(path, opts) {\"}}",
            "message_norm":"fix: check path argument before processing (#10)\n\nhotfix to re mediate command injection",
            "language":"en",
            "entities":"[('#10', 'ISSUE', ''), ('hotfix', 'ACTION', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1020,
            "vuln_id":"GHSA-7f63-h6g3-7cwm",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\/commits\/133606ffaec2edd9918d9fba5771ed21da7876a5', 'https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073'}",
            "dataset":"osv",
            "summary":"Cross Site Scripting (XSS) in @finastra\/ssr-pages A cross site scripting (XSS) issue can occur when providing untrusted input to the `redirect.link` property as an argument to the `build(MessagePageOptions)` function.\n\n### References\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/2\/commits\/133606ffaec2edd9918d9fba5771ed21da7876a5\n- https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073",
            "published_date":"2022-03-01",
            "chain_len":2,
            "project":"https:\/\/github.com\/Finastra\/ssr-pages",
            "commit_href":"https:\/\/github.com\/Finastra\/ssr-pages\/commit\/98abc59e28fec48246be0d59ac144675d6361073",
            "commit_sha":"98abc59e28fec48246be0d59ac144675d6361073",
            "patch":"MULTI",
            "chain_ord":"['133606ffaec2edd9918d9fba5771ed21da7876a5', '98abc59e28fec48246be0d59ac144675d6361073']",
            "before_first_fix_commit":"{'ea07d3fca4b5b84aab889391c100f9bf71333ded'}",
            "last_fix_commit":"98abc59e28fec48246be0d59ac144675d6361073",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/27\/2022, 18:45:49",
            "message":"fix string encoder",
            "author":"David Bocl\u00e9",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/helpers\/string-encoder.helper.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Finastra\/ssr-pages\/raw\/98abc59e28fec48246be0d59ac144675d6361073\/src%2Fhelpers%2Fstring-encoder.helper.ts', 'patch': \"@@ -2,7 +2,7 @@ export function stringEncode(string: string) {\\n     let encodedString = '';\\r\\n     for (let i = 0; i < string.length; i++) {\\r\\n         let charCodePointHex = string.charCodeAt(i).toString(16);\\r\\n-        encodedString += `\\\\\\\\u${charCodePointHex}`;\\r\\n+        encodedString += `\\\\\\\\u{${charCodePointHex}}`;\\r\\n     }\\r\\n     return encodedString;\\r\\n }\\n\\\\ No newline at end of file\"}}",
            "message_norm":"fix string encoder",
            "language":"da",
            "entities":"[('fix', 'ACTION', ''), ('encoder', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/string-encoder.helper.ts'])",
            "num_files":1.0
        },
        {
            "index":769,
            "vuln_id":"GHSA-66rh-8fw6-59q6",
            "cwe_id":"{'CWE-915', 'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c', 'https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/90bf1c551d05940898168d04066bbf15060f50cc'}",
            "dataset":"osv",
            "summary":"assign-deep Vulnerable to Prototype Pollution Versions of `assign-deep` prior to 1.0.1 and 0.4.8 are vulnerable to Prototype Pollution. The `assign` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n## Recommendation\n\nUpgrade to versions 1.0.1, 0.4.8, or later.",
            "published_date":"2019-08-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/jonschlinkert\/assign-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/assign-deep\/commit\/8e3cc4a34246733672c71e96532105384937e56c",
            "commit_sha":"8e3cc4a34246733672c71e96532105384937e56c",
            "patch":"MULTI",
            "chain_ord":"['90bf1c551d05940898168d04066bbf15060f50cc', '8e3cc4a34246733672c71e96532105384937e56c']",
            "before_first_fix_commit":"{'24412bd2b59bc128437819c4a4518a7b7148d81a'}",
            "last_fix_commit":"8e3cc4a34246733672c71e96532105384937e56c",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/25\/2019, 17:46:37",
            "message":"ensure keys are valid",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 1, 'total': 10}",
            "files":"{'index.js': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/assign-deep\/raw\/8e3cc4a34246733672c71e96532105384937e56c\/index.js', 'patch': \"@@ -37,7 +37,7 @@ function extend(target, obj) {\\n   assignSymbols(target, obj);\\n \\n   for (var key in obj) {\\n-    if (key !== '__proto__' && hasOwn(obj, key)) {\\n+    if (isValidKey(key) && hasOwn(obj, key)) {\\n       var val = obj[key];\\n       if (isObject(val)) {\\n         if (typeOf(target[key]) === 'undefined' && typeOf(val) === 'function') {\\n@@ -68,6 +68,14 @@ function hasOwn(obj, key) {\\n   return Object.prototype.hasOwnProperty.call(obj, key);\\n }\\n \\n+\/**\\n+ * Returns true if the given `key` is a valid key that can be used for assigning properties.\\n+ *\/\\n+\\n+function isValidKey(key) {\\n+  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\\n+}\\n+\\n \/**\\n  * Expose `assign`\\n  *\/\"}}",
            "message_norm":"ensure keys are valid",
            "language":"af",
            "entities":"[('ensure', 'ACTION', ''), ('keys', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":348,
            "vuln_id":"GHSA-43jf-985q-588j",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
            "dataset":"osv",
            "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645",
            "commit_sha":"3d89911481ba6ebe8c88c1c0b595412121e6c645",
            "patch":"MULTI",
            "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
            "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
            "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/12\/2021, 16:12:05",
            "message":"Eliminate `CHECK`-fail from `function.cc`.\n\nPiperOrigin-RevId: 409414744\nChange-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3d89911481ba6ebe8c88c1c0b595412121e6c645\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\\n     DataTypeVector dtypes;\\n     TF_RETURN_IF_ERROR(\\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\\n-    CHECK_GE(dtypes.size(), size_t{1});\\n+    if (dtypes.size() < size_t{1}) {\\n+      return errors::Internal(\"Expected a list of at least one dtype\");\\n+    }\\n     int arg_index = result_.nodes.size();\\n     TF_RETURN_IF_ERROR(\\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));'}}",
            "message_norm":"eliminate `check`-fail from `function.cc`.\n\npiperorigin-revid: 409414744\nchange-id: ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
            "language":"it",
            "entities":"[('409414744', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
            "num_files":1.0
        },
        {
            "index":2045,
            "vuln_id":"GHSA-hf2m-j98r-4fqw",
            "cwe_id":"{'CWE-287'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/NodeBB\/NodeBB\/commit\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500'}",
            "dataset":"osv",
            "summary":"API token verification can be bypassed in NodeBB  ### Impact\nIncorrect logic present in the token verification step unintentionally allowed master token access to the API.\n\n### Patches\nThe vulnerability has been patch as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 04dab1d550cdebf4c1567bca9a51f8b9ca48a500 to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
            "published_date":"2021-11-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/NodeBB\/NodeBB",
            "commit_href":"https:\/\/github.com\/NodeBB\/NodeBB\/commit\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "commit_sha":"04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "patch":"SINGLE",
            "chain_ord":"['04dab1d550cdebf4c1567bca9a51f8b9ca48a500']",
            "before_first_fix_commit":"{'1783f918bc19568f421473824461ff2ed7755e4c'}",
            "last_fix_commit":"04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2021, 17:23:54",
            "message":"fix: token verify",
            "author":"Bar\u0131\u015f Soner U\u015fakl\u0131",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 7, 'total': 10}",
            "files":"{'src\/routes\/authentication.js': {'additions': 3, 'deletions': 7, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NodeBB\/NodeBB\/raw\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500\/src%2Froutes%2Fauthentication.js', 'patch': \"@@ -44,13 +44,9 @@ Auth.getLoginStrategies = function () {\\n };\\n \\n Auth.verifyToken = async function (token, done) {\\n-\\tlet { tokens = [] } = await meta.settings.get('core.api');\\n-\\ttokens = tokens.reduce((memo, cur) => {\\n-\\t\\tmemo[cur.token] = cur.uid;\\n-\\t\\treturn memo;\\n-\\t}, {});\\n-\\n-\\tconst uid = tokens[token];\\n+\\tconst { tokens = [] } = await meta.settings.get('core.api');\\n+\\tconst tokenObj = tokens.find(t => t.token === token);\\n+\\tconst uid = tokenObj ? tokenObj.uid : undefined;\\n \\n \\tif (uid !== undefined) {\\n \\t\\tif (parseInt(uid, 10) > 0) {\"}}",
            "message_norm":"fix: token verify",
            "language":"no",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/routes\/authentication.js'])",
            "num_files":1.0
        },
        {
            "index":156,
            "vuln_id":"GHSA-2wwc-w2gw-4329",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1307, CVE-2019-1308, CVE-2019-1335.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
            "commit_sha":"94181502091b7c22eb86ab1b45ce80bf7ff03aaf",
            "patch":"MULTI",
            "chain_ord":"['94181502091b7c22eb86ab1b45ce80bf7ff03aaf', 'cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d']",
            "before_first_fix_commit":"{'7e9a2ee60baa95ceb4f48f522f823c812ca90c80', '5989c6e038d80f92dcd8e10d725cdf45396201bb'}",
            "last_fix_commit":"cc871514deeaeaedb5b757c2ca8cd4ab9abccb5d",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/30\/2019, 22:55:27",
            "message":"CVE-2019-1366",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/Backend\/GlobOpt.cpp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/94181502091b7c22eb86ab1b45ce80bf7ff03aaf\/lib%2FBackend%2FGlobOpt.cpp', 'patch': '@@ -3603,7 +3603,7 @@ GlobOpt::OptSrc(IR::Opnd *opnd, IR::Instr * *pInstr, Value **indirIndexValRef, I\\n \\n         opnd->SetValueType(valueType);\\n \\n-        if(!IsLoopPrePass() && opnd->IsSymOpnd() && valueType.IsDefinite())\\n+        if(!IsLoopPrePass() && opnd->IsSymOpnd() && (valueType.IsDefinite() || valueType.IsNotTaggedValue()))\\n         {\\n             if (opnd->AsSymOpnd()->m_sym->IsPropertySym())\\n             {'}}",
            "message_norm":"cve-2019-1366",
            "language":"ro",
            "entities":"[('cve-2019-1366', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOpt.cpp'])",
            "num_files":1.0
        },
        {
            "index":2020,
            "vuln_id":"GHSA-h7f9-cvh5-qw7f",
            "cwe_id":"{'CWE-22'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/1786bdd4962ee51544fad537352c2b4223309442'}",
            "dataset":"osv",
            "summary":"Path traversal in pimcore\/pimcore This affects the package pimcore\/pimcore before 6.8.8. A Local FIle Inclusion vulnerability exists in the downloadCsvAction function of the CustomReportController class (bundles\/AdminBundle\/Controller\/Reports\/CustomReportController.php). An authenticated user can reach this function with a GET request at the following endpoint: \/admin\/reports\/custom-report\/download-csv?exportFile=&91;filename]. Since exportFile variable is not sanitized, an attacker can exploit a local file inclusion vulnerability.",
            "published_date":"2021-02-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/1786bdd4962ee51544fad537352c2b4223309442",
            "commit_sha":"1786bdd4962ee51544fad537352c2b4223309442",
            "patch":"SINGLE",
            "chain_ord":"['1786bdd4962ee51544fad537352c2b4223309442']",
            "before_first_fix_commit":"{'3224684a3375c35910f8544943f4c073d30c8bfa'}",
            "last_fix_commit":"1786bdd4962ee51544fad537352c2b4223309442",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/05\/2021, 09:39:02",
            "message":"Fixed LFI in custom report csv download",
            "author":"Bernhard Rusch",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'bundles\/AdminBundle\/Controller\/Reports\/CustomReportController.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/1786bdd4962ee51544fad537352c2b4223309442\/bundles%2FAdminBundle%2FController%2FReports%2FCustomReportController.php', 'patch': \"@@ -433,7 +433,7 @@ public function createCsvAction(Request $request)\\n         $progress = $progress > 1 ? 1 : $progress;\\n \\n         return new JsonResponse([\\n-            'exportFile' => $exportFile,\\n+            'exportFile' => basename($exportFile),\\n             'offset' => $offset,\\n             'progress' => $progress,\\n             'finished' => empty($result['data']) || count($result['data']) < $limit,\\n@@ -451,6 +451,7 @@ public function downloadCsvAction(Request $request)\\n     {\\n         $this->checkPermission('reports');\\n         if ($exportFile = $request->get('exportFile')) {\\n+            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '\/' . basename($exportFile);\\n             $response = new BinaryFileResponse($exportFile);\\n             $response->headers->set('Content-Type', 'text\/csv; charset=UTF-8');\\n             $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\"}}",
            "message_norm":"fixed lfi in custom report csv download",
            "language":"en",
            "entities":"[('fixed', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Reports\/CustomReportController.php'])",
            "num_files":1.0
        },
        {
            "index":826,
            "vuln_id":"GHSA-6fvx-r7hx-3vh6",
            "cwe_id":"{'CWE-611'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/javamelody\/javamelody\/commit\/ef111822562d0b9365bd3e671a75b65bd0613353'}",
            "dataset":"osv",
            "summary":"JavaMelody has XXE via parseSoapMethodName in bull\/javamelody\/PayloadNameRequestWrapper.java. JavaMelody before 1.74.0 has XXE via parseSoapMethodName in bull\/javamelody\/PayloadNameRequestWrapper.java.",
            "published_date":"2018-10-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/javamelody\/javamelody",
            "commit_href":"https:\/\/github.com\/javamelody\/javamelody\/commit\/ef111822562d0b9365bd3e671a75b65bd0613353",
            "commit_sha":"ef111822562d0b9365bd3e671a75b65bd0613353",
            "patch":"SINGLE",
            "chain_ord":"['ef111822562d0b9365bd3e671a75b65bd0613353']",
            "before_first_fix_commit":"{'00dd8d51a6483cb3a5b4c8ae9c24197028401c58'}",
            "last_fix_commit":"ef111822562d0b9365bd3e671a75b65bd0613353",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/04\/2018, 06:31:29",
            "message":"fix for security",
            "author":"evernat",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '10\/12\/2018, 08:21:37', 'body': '[CVE-2018-15531](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2018-15531) was assigned to this issue.'}}",
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/PayloadNameRequestWrapper.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/javamelody\/javamelody\/raw\/ef111822562d0b9365bd3e671a75b65bd0613353\/javamelody-core%2Fsrc%2Fmain%2Fjava%2Fnet%2Fbull%2Fjavamelody%2FPayloadNameRequestWrapper.java', 'patch': '@@ -235,6 +235,8 @@ private static String parseSoapMethodName(InputStream stream, String charEncodin\\n \\t\\ttry {\\r\\n \\t\\t\\t\/\/ newInstance() et pas newFactory() pour java 1.5 (issue 367)\\r\\n \\t\\t\\tfinal XMLInputFactory factory = XMLInputFactory.newInstance();\\r\\n+\\t\\t\\tfactory.setProperty(XMLInputFactory.SUPPORT_DTD, false); \/\/ disable DTDs entirely for that factory\\r\\n+\\t\\t\\tfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); \/\/ disable external entities\\r\\n \\t\\t\\tfinal XMLStreamReader xmlReader;\\r\\n \\t\\t\\tif (charEncoding != null) {\\r\\n \\t\\t\\t\\txmlReader = factory.createXMLStreamReader(stream, charEncoding);'}}",
            "message_norm":"fix for security",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['javamelody-core\/src\/main\/java\/net\/bull\/javamelody\/PayloadNameRequestWrapper.java'])",
            "num_files":1.0
        },
        {
            "index":2924,
            "vuln_id":"GHSA-rf3h-xgv5-2q39",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `DepthwiseConv` ### Impact\nThe implementation of the `DepthwiseConv` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8\/tensorflow\/lite\/kernels\/depthwise_conv.cc#L287-L288):\n\n```cc\nint num_input_channels = SizeOfDimension(input, 3);\nTF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);\n```\n\nAn attacker can craft a model such that `input`'s fourth dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
            "commit_sha":"cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
            "patch":"SINGLE",
            "chain_ord":"['cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0']",
            "before_first_fix_commit":"{'1a8e885b864c818198a5b2c0cbbeca5a1e833bc8'}",
            "last_fix_commit":"cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 22:53:48",
            "message":"Prevent divisions by 0\n\nPiperOrigin-RevId: 371003153\nChange-Id: Idef56c95b9fcaeb97f87e18c7a674dbeb5173204",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'tensorflow\/lite\/kernels\/depthwise_conv.cc': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0\/tensorflow%2Flite%2Fkernels%2Fdepthwise_conv.cc', 'patch': '@@ -285,8 +285,8 @@ TfLiteStatus ComputeDepthMultiplier(TfLiteContext* context,\\n                                     int16* depth_multiplier) {\\n   int num_filter_channels = SizeOfDimension(filter, 3);\\n   int num_input_channels = SizeOfDimension(input, 3);\\n+  TF_LITE_ENSURE(context, num_input_channels != 0);\\n   TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);\\n-\\n   *depth_multiplier = num_filter_channels \/ num_input_channels;\\n   return kTfLiteOk;\\n }\\n@@ -455,8 +455,9 @@ TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,\\n   float output_activation_min, output_activation_max;\\n   CalculateActivationRange(params->activation, &output_activation_min,\\n                            &output_activation_max);\\n-  const int input_size = NumElements(input) \/ SizeOfDimension(input, 0);\\n   const int batch_size = SizeOfDimension(input, 0);\\n+  TF_LITE_ENSURE(context, batch_size != 0);\\n+  const int input_size = NumElements(input) \/ batch_size;\\n   TfLiteTensor* input_quantized;\\n   TF_LITE_ENSURE_OK(context,\\n                     GetTemporarySafe(context, node, data->input_quantized_index,'}}",
            "message_norm":"prevent divisions by 0\n\npiperorigin-revid: 371003153\nchange-id: idef56c95b9fcaeb97f87e18c7a674dbeb5173204",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('divisions by 0', 'SECWORD', ''), ('371003153', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/depthwise_conv.cc'])",
            "num_files":1.0
        },
        {
            "index":780,
            "vuln_id":"GHSA-686f-ch3r-xwmh",
            "cwe_id":"{'CWE-362', 'CWE-119'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/udoprog\/unicycle\/commit\/6a6c367a0c25f86f998fa315ea90c328f685b194', 'https:\/\/github.com\/udoprog\/unicycle\/commit\/92f40b4a2c671553dfa96feacff0265206c44ce5'}",
            "dataset":"osv",
            "summary":"Data races in unicycle Affected versions of this crate unconditionally implemented `Send` & `Sync` for types `PinSlab<T>` & `Unordered<T, S>`. This allows sending non-Send types to other threads and concurrently accessing non-Sync types from multiple threads.\n\nThis can result in a data race & memory corruption when types that provide internal mutability without synchronization are contained within `PinSlab<T>` or `Unordered<T, S>` and accessed concurrently from multiple threads.\n\nThe flaw was corrected in commits 92f40b4 & 6a6c367 by adding trait bound `T: Send` to `Send` impls for `PinSlab<T>` & `Unordered<T, S>` and adding `T: Sync` to `Sync` impls for `PinSlab<T>` & `Unordered<T, S>`.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/udoprog\/unicycle",
            "commit_href":"https:\/\/github.com\/udoprog\/unicycle\/commit\/6a6c367a0c25f86f998fa315ea90c328f685b194",
            "commit_sha":"6a6c367a0c25f86f998fa315ea90c328f685b194",
            "patch":"MULTI",
            "chain_ord":"['92f40b4a2c671553dfa96feacff0265206c44ce5', '6a6c367a0c25f86f998fa315ea90c328f685b194']",
            "before_first_fix_commit":"{'c6a1e1601e8ddfb33d2846abca3c3ddc50e0493c'}",
            "last_fix_commit":"6a6c367a0c25f86f998fa315ea90c328f685b194",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/24\/2021, 03:29:54",
            "message":"Fix trait bounds in Send\/Sync impl: Unordered<T,S>\nThis commit is a follow-up fix for the issue raised in\nhttps:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334 .",
            "author":"JOE1994",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/udoprog\/unicycle\/raw\/6a6c367a0c25f86f998fa315ea90c328f685b194\/src%2Flib.rs', 'patch': '@@ -377,8 +377,8 @@ where\\n     _marker: marker::PhantomData<S>,\\n }\\n \\n-unsafe impl<T, S> Send for Unordered<T, S> where S: Send + Sentinel {}\\n-unsafe impl<T, S> Sync for Unordered<T, S> where S: Sync + Sentinel {}\\n+unsafe impl<T: Send, S> Send for Unordered<T, S> where S: Sentinel {}\\n+unsafe impl<T: Sync, S> Sync for Unordered<T, S> where S: Sentinel {}\\n \\n impl<T, S> Unpin for Unordered<T, S> where S: Sentinel {}'}}",
            "message_norm":"fix trait bounds in send\/sync impl: unordered<t,s>\nthis commit is a follow-up fix for the issue raised in\nhttps:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334 .",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/udoprog\/unicycle\/issues\/8#issuecomment-763780334', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":2955,
            "vuln_id":"GHSA-rhq2-3vr9-6mcr",
            "cwe_id":"{'CWE-22'}",
            "score":8.3,
            "chain":"{'https:\/\/github.com\/gradio-app\/gradio\/commit\/41bd3645bdb616e1248b2167ca83636a2653f781'}",
            "dataset":"osv",
            "summary":"Files on the host computer can be accessed from the Gradio interface ### Impact\nThis is a vulnerability that affects anyone who creates and publicly shares Gradio interfaces using `gradio<2.4.8`. Because of the way that static files were being served, someone who generated a public Gradio link and shared it with others would potentially be exposing the files on the computer that generated the link, while the link was active. An attacker would be able to view the contents of a file on the computer if they knew the exact relative filepath. We do not have any evidence that this was ever exploited, but we treated the issue seriously and immediately took steps to mitigate it (see below)\n\n### Response\n1. We worked with @haby0 to immediately patch the issue and released a new version, `gradio 2.5.0`, within 24 hours of the issue being brought to our attention \n2. We enabled a notification that is printed to anyone using an older version of gradio telling them to upgrade (see screenshot below)\n3. We expanded our test suite to test for this vulnerability ensuring that our patch does not get reverted in future releases of `gradio`\n\n![image](https:\/\/user-images.githubusercontent.com\/1778297\/146251425-f36b519b-6d4a-4dfb-8d89-c1ed005979d3.png)\n\n### Patches\nThe problem has been patched in `gradio>=2.5.0`.",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/gradio-app\/gradio",
            "commit_href":"https:\/\/github.com\/gradio-app\/gradio\/commit\/41bd3645bdb616e1248b2167ca83636a2653f781",
            "commit_sha":"41bd3645bdb616e1248b2167ca83636a2653f781",
            "patch":"SINGLE",
            "chain_ord":"['41bd3645bdb616e1248b2167ca83636a2653f781']",
            "before_first_fix_commit":"{'0b2c4901a63b2e5a7d7b3964d27b8f82d6d330e1'}",
            "last_fix_commit":"41bd3645bdb616e1248b2167ca83636a2653f781",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2021, 21:01:55",
            "message":"secure path hotfix",
            "author":"Ali Abid",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 3, 'total': 5}",
            "files":"{'gradio\/networking.py': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gradio-app\/gradio\/raw\/41bd3645bdb616e1248b2167ca83636a2653f781\/gradio%2Fnetworking.py', 'patch': '@@ -377,15 +377,14 @@ def interpret():\\n @app.route(\"\/file\/<path:path>\", methods=[\"GET\"])\\n @login_check\\n def file(path):\\n-    path = secure_filename(path)\\n     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):\\n-        with open(os.path.join(app.cwd, path), \"rb\") as encrypted_file:\\n+        with open(safe_join(app.cwd, path), \"rb\") as encrypted_file:\\n             encrypted_data = encrypted_file.read()\\n         file_data = encryptor.decrypt(\\n             app.interface.encryption_key, encrypted_data)\\n         return send_file(io.BytesIO(file_data), attachment_filename=os.path.basename(path))\\n     else:\\n-        return send_file(os.path.join(app.cwd, path))\\n+        return send_file(safe_join(app.cwd, path))\\n \\n \\n @app.route(\"\/api\/queue\/push\/\", methods=[\"POST\"])'}}",
            "message_norm":"secure path hotfix",
            "language":"en",
            "entities":"[('secure', 'SECWORD', ''), ('hotfix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['gradio\/networking.py'])",
            "num_files":1.0
        },
        {
            "index":812,
            "vuln_id":"GHSA-6c8f-qphg-qjgp",
            "cwe_id":"{'CWE-668'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/kind-of\/commit\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b'}",
            "dataset":"osv",
            "summary":"Validation Bypass in kind-of Versions of `kind-of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. \n\n\n## Recommendation\n\nUpgrade to versions 6.0.3 or later.",
            "published_date":"2020-03-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/kind-of",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/kind-of\/commit\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "commit_sha":"1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "patch":"SINGLE",
            "chain_ord":"['1df992ce6d5a1292048e5fe9c52c5382f941ee0b']",
            "before_first_fix_commit":"{'975c13a7cfaf25d811475823824af3a9c04b0ba8', '4da96c0047906d22a4d6964a668d3abaca122e50'}",
            "last_fix_commit":"1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/16\/2020, 16:37:23",
            "message":"Merge pull request #31 from xiaofen9\/master\n\nfix type checking vul in ctorName",
            "author":"Brian Woodward",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/kind-of\/raw\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b\/index.js', 'patch': \"@@ -66,7 +66,7 @@ module.exports = function kindOf(val) {\\n };\\n \\n function ctorName(val) {\\n-  return val.constructor ? val.constructor.name : null;\\n+  return val.constructor && typeof val.constructor === 'function' ? val.constructor.name : null;\\n }\\n \\n function isArray(val) {\"}}",
            "message_norm":"merge pull request #31 from xiaofen9\/master\n\nfix type checking vul in ctorname",
            "language":"en",
            "entities":"[('#31', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":3010,
            "vuln_id":"GHSA-rv62-4pmj-xw6h",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/jupyter\/notebook\/commit\/08c4c898182edbe97aadef1815cce50448f975cb', 'https:\/\/github.com\/jupyter\/notebook\/commit\/70fe9f0ddb3023162ece21fbb77d5564306b913b', 'https:\/\/github.com\/jupyter\/notebook\/commit\/d65328d4841892b412aef9015165db1eb029a8ed'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects jupyterhub and notebook An Open Redirect vulnerability for all browsers in Jupyter Notebook before 5.7.8 and some browsers (Chrome, Firefox) in JupyterHub before 0.9.6 allows crafted links to the login page, which will redirect to a malicious site after successful login. Servers running on a base_url prefix are not affected.",
            "published_date":"2019-04-02",
            "chain_len":3,
            "project":"https:\/\/github.com\/jupyter\/notebook",
            "commit_href":"https:\/\/github.com\/jupyter\/notebook\/commit\/08c4c898182edbe97aadef1815cce50448f975cb",
            "commit_sha":"08c4c898182edbe97aadef1815cce50448f975cb",
            "patch":"MULTI",
            "chain_ord":"['70fe9f0ddb3023162ece21fbb77d5564306b913b', 'd65328d4841892b412aef9015165db1eb029a8ed', '08c4c898182edbe97aadef1815cce50448f975cb']",
            "before_first_fix_commit":"{'d65328d4841892b412aef9015165db1eb029a8ed'}",
            "last_fix_commit":"08c4c898182edbe97aadef1815cce50448f975cb",
            "chain_ord_pos":3.0,
            "commit_datetime":"03\/27\/2019, 20:43:40",
            "message":"protect against chrome mishandling backslash as slash in URLs",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'notebook\/auth\/login.py': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyter\/notebook\/raw\/08c4c898182edbe97aadef1815cce50448f975cb\/notebook%2Fauth%2Flogin.py', 'patch': '@@ -39,6 +39,10 @@ def _redirect_safe(self, url, default=None):\\n         \"\"\"\\n         if default is None:\\n             default = self.base_url\\n+        # protect chrome users from mishandling unescaped backslashes.\\n+        # \\\\ is not valid in urls, but some browsers treat it as \/\\n+        # instead of %5C, causing `\\\\\\\\` to behave as `\/\/`\\n+        url = url.replace(\"\\\\\\\\\", \"%5C\")\\n         parsed = urlparse(url)\\n         if parsed.netloc or not (parsed.path + \\'\/\\').startswith(self.base_url):\\n             # require that next_url be absolute path within our path'}}",
            "message_norm":"protect against chrome mishandling backslash as slash in urls",
            "language":"en",
            "entities":"[('protect', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['notebook\/auth\/login.py'])",
            "num_files":1.0
        },
        {
            "index":3022,
            "vuln_id":"GHSA-rwv8-jvff-jq28",
            "cwe_id":"{'CWE-22'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/tnantoka\/public\/commit\/eae8ad8017b260f8667ded5e12801bd72b877af2'}",
            "dataset":"osv",
            "summary":"Path Traversal in public Versions of `public` before 0.1.3 are vulnerable to path traversal. This is due to lack of file path sanitization which could lead to any file the parent process has access to on the server to be read by malicious user.\n\n\n## Recommendation\n\nUpdate to version 0.1.3 or later.",
            "published_date":"2018-07-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/tnantoka\/public",
            "commit_href":"https:\/\/github.com\/tnantoka\/public\/commit\/eae8ad8017b260f8667ded5e12801bd72b877af2",
            "commit_sha":"eae8ad8017b260f8667ded5e12801bd72b877af2",
            "patch":"SINGLE",
            "chain_ord":"['eae8ad8017b260f8667ded5e12801bd72b877af2']",
            "before_first_fix_commit":"{'c5c14107c00eb37c677eabcc5566938a0dee685c'}",
            "last_fix_commit":"eae8ad8017b260f8667ded5e12801bd72b877af2",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/15\/2018, 05:13:37",
            "message":"Fix path traversal",
            "author":"tnantoka",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'bin\/public': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tnantoka\/public\/raw\/eae8ad8017b260f8667ded5e12801bd72b877af2\/bin%2Fpublic', 'patch': \"@@ -67,6 +67,7 @@ switch (args[0]) {\\n       }\\n     }\\n }\\n+var root = path.resolve(dir);\\n \\n if (path) {\\n   http.createServer(function(req, res) {\\n@@ -75,6 +76,13 @@ if (path) {\\n     var base = filePath.replace(dir, ''); \/\/ Base path for browser link\\n     var abs = path.resolve(filePath); \\n     console.log(new Date().toString(), abs);\\n+\\n+    if (abs.indexOf(root) !== 0) {\\n+      res.writeHead(403, { 'Content-Type': 'text\/plain' });\\n+      res.end('Forbidden\\\\n');\\n+      return;\\n+    }\\n+\\n     fs.readFile(filePath, function(err, data) {\\n       if (err) {\\n         res.writeHead(200, { 'Content-Type': 'text\/html' });\"}}",
            "message_norm":"fix path traversal",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bin\/public'])",
            "num_files":1.0
        },
        {
            "index":141,
            "vuln_id":"GHSA-2v5j-q74q-r53f",
            "cwe_id":"{'CWE-79'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/a22eb0673fe0b7784f99c6b5fd343b64a6700f06'}",
            "dataset":"osv",
            "summary":"django-helpdesk is vulnerable to Cross-site Scripting django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/django-helpdesk\/django-helpdesk",
            "commit_href":"https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
            "commit_sha":"a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
            "patch":"SINGLE",
            "chain_ord":"['a22eb0673fe0b7784f99c6b5fd343b64a6700f06']",
            "before_first_fix_commit":"{'7097c9c4c0b255ec1f10f3ea14fa2b9c47f6c706'}",
            "last_fix_commit":"a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/19\/2021, 16:11:33",
            "message":"Update pattern",
            "author":"noobpk",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'helpdesk\/models.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/raw\/a22eb0673fe0b7784f99c6b5fd343b64a6700f06\/helpdesk%2Fmodels.py', 'patch': '@@ -56,7 +56,7 @@ def get_markdown(text):\\n     if not text:\\n         return \"\"\\n \\n-    pattern = fr\\'([\\\\[\\\\s\\\\S\\\\]]*?)\\\\(([\\\\s\\\\S]*?):([\\\\[\\\\s\\\\S\\\\]]*?)\\\\)\\'\\n+    pattern = fr\\'([\\\\[\\\\s\\\\S\\\\]]*?)\\\\(([\\\\s\\\\S]*?):([\\\\s\\\\S]*?)\\\\)\\'\\n     # Regex check\\n     if re.match(pattern, text):\\n         # get get value of group regex'}}",
            "message_norm":"update pattern",
            "language":"it",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"REDUNDANT_MESSAGE",
            "list_files":"dict_keys(['helpdesk\/models.py'])",
            "num_files":1.0
        },
        {
            "index":3313,
            "vuln_id":"GHSA-wqwf-x5cj-rg56",
            "cwe_id":"{'CWE-78'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/kubernetes\/kubernetes\/commit\/d65039c56ce4de5f2efdc38aa1284eeb95f89169'}",
            "dataset":"osv",
            "summary":"Arbitrary Command Injection In Kubernetes versions 1.9.0-1.9.9, 1.10.0-1.10.5, and 1.11.0-1.11.1, user input was handled insecurely while setting up volume mounts on Windows nodes, which could lead to command line argument injection.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/kubernetes\/kubernetes",
            "commit_href":"https:\/\/github.com\/kubernetes\/kubernetes\/commit\/d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "commit_sha":"d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "patch":"SINGLE",
            "chain_ord":"['d65039c56ce4de5f2efdc38aa1284eeb95f89169']",
            "before_first_fix_commit":"{'dc0afb24d138220cb53d9be3298f1539b0be4f7a', '27bc865cc1bffb97d4dff38492aa9f830f859e45'}",
            "last_fix_commit":"d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/03\/2018, 13:16:06",
            "message":"Merge pull request #65751 from andyzhangx\/mount-windows-fix\n\nAutomatic merge from submit-queue (batch tested with PRs 65381, 65751). If you want to cherry-pick this change to another branch, please follow the instructions <a href=\"https:\/\/github.com\/kubernetes\/community\/blob\/master\/contributors\/devel\/cherry-picks.md\">here<\/a>.\n\nfix smb mount security issue\n\n**What this PR does \/ why we need it**:\r\nfix smb mount security issue:\r\nuser PowerShell Environment Variables to store user input string to prevent command line injection, the env var in PowerShell would be taken as literal values and not as executable vulnerable code, this kind of fix is common for command line injection issue (called: parameterized way)\r\n\r\nOriginally use go sdk for `New-SmbGlobalMapping` is best solution, while after discussion with Windows team, go API for `New-SmbGlobalMapping` is not ready yet and the new functionality of basic win32 API [NetUseAdd](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa370645(v=vs.85).aspx) is not public yet, use [PowerShell with Environment Variables](https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1) is also their recommended way.\r\n\r\n**Which issue(s) this PR fixes** *(optional, in `fixes #<issue number>(, fixes #<issue_number>, ...)` format, will close the issue(s) when PR gets merged)*:\r\nFixes #65750 \r\n\r\n**Special notes for your reviewer**:\r\n - This is a security issue fix, no behavior change, E2E test of smb mount passes.\r\n - Original logging as `azureMount` is incorrect since this mount_windows is for mount disk & smb, it's a common feature on Windows, not specific to Azure, I will send another PR to fixing all the logging naming issue, anyway it's not related to this security issue. Let's keep this PR simple.\r\n\r\n**Release note**:\r\n\r\n```\r\nfix smb mount security issue\r\n```\r\n\r\n\/sig windows\r\n\/sig storage\r\n\/kind bug\r\n\r\n@jessfraz \r\n\/assign @jsafrane @msau42",
            "author":"Kubernetes Submit Queue",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 6, 'total': 18}",
            "files":"{'pkg\/util\/mount\/mount_windows.go': {'additions': 12, 'deletions': 6, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kubernetes\/kubernetes\/raw\/d65039c56ce4de5f2efdc38aa1284eeb95f89169\/pkg%2Futil%2Fmount%2Fmount_windows.go', 'patch': '@@ -83,14 +83,20 @@ func (mounter *Mounter) Mount(source string, target string, fstype string, optio\\n \\t\\t\\treturn fmt.Errorf(\"azureMount: only cifs mount is supported now, fstype: %q, mounting source (%q), target (%q), with options (%q)\", fstype, source, target, options)\\n \\t\\t}\\n \\n-\\t\\tcmdLine := fmt.Sprintf(`$User = \"%s\";$PWord = ConvertTo-SecureString -String \"%s\" -AsPlainText -Force;`+\\n-\\t\\t\\t`$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord`,\\n-\\t\\t\\toptions[0], options[1])\\n-\\n \\t\\tbindSource = source\\n-\\t\\tcmdLine += fmt.Sprintf(\";New-SmbGlobalMapping -RemotePath %s -Credential $Credential\", source)\\n \\n-\\t\\tif output, err := exec.Command(\"powershell\", \"\/c\", cmdLine).CombinedOutput(); err != nil {\\n+\\t\\t\/\/ use PowerShell Environment Variables to store user input string to prevent command line injection\\n+\\t\\t\/\/ https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1\\n+\\t\\tcmdLine := fmt.Sprintf(`$PWord = ConvertTo-SecureString -String $Env:smbpassword -AsPlainText -Force` +\\n+\\t\\t\\t`;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Env:smbuser, $PWord` +\\n+\\t\\t\\t`;New-SmbGlobalMapping -RemotePath $Env:smbremotepath -Credential $Credential`)\\n+\\n+\\t\\tcmd := exec.Command(\"powershell\", \"\/c\", cmdLine)\\n+\\t\\tcmd.Env = append(os.Environ(),\\n+\\t\\t\\tfmt.Sprintf(\"smbuser=%s\", options[0]),\\n+\\t\\t\\tfmt.Sprintf(\"smbpassword=%s\", options[1]),\\n+\\t\\t\\tfmt.Sprintf(\"smbremotepath=%s\", source))\\n+\\t\\tif output, err := cmd.CombinedOutput(); err != nil {\\n \\t\\t\\treturn fmt.Errorf(\"azureMount: SmbGlobalMapping failed: %v, only SMB mount is supported now, output: %q\", err, string(output))\\n \\t\\t}\\n \\t}'}}",
            "message_norm":"merge pull request #65751 from andyzhangx\/mount-windows-fix\n\nautomatic merge from submit-queue (batch tested with prs 65381, 65751). if you want to cherry-pick this change to another branch, please follow the instructions <a href=\"https:\/\/github.com\/kubernetes\/community\/blob\/master\/contributors\/devel\/cherry-picks.md\">here<\/a>.\n\nfix smb mount security issue\n\n**what this pr does \/ why we need it**:\r\nfix smb mount security issue:\r\nuser powershell environment variables to store user input string to prevent command line injection, the env var in powershell would be taken as literal values and not as executable vulnerable code, this kind of fix is common for command line injection issue (called: parameterized way)\r\n\r\noriginally use go sdk for `new-smbglobalmapping` is best solution, while after discussion with windows team, go api for `new-smbglobalmapping` is not ready yet and the new functionality of basic win32 api [netuseadd](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa370645(v=vs.85).aspx) is not public yet, use [powershell with environment variables](https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1) is also their recommended way.\r\n\r\n**which issue(s) this pr fixes** *(optional, in `fixes #<issue number>(, fixes #<issue_number>, ...)` format, will close the issue(s) when pr gets merged)*:\r\nfixes #65750 \r\n\r\n**special notes for your reviewer**:\r\n - this is a security issue fix, no behavior change, e2e test of smb mount passes.\r\n - original logging as `azuremount` is incorrect since this mount_windows is for mount disk & smb, it's a common feature on windows, not specific to azure, i will send another pr to fixing all the logging naming issue, anyway it's not related to this security issue. let's keep this pr simple.\r\n\r\n**release note**:\r\n\r\n```\r\nfix smb mount security issue\r\n```\r\n\r\n\/sig windows\r\n\/sig storage\r\n\/kind bug\r\n\r\n@jessfraz \r\n\/assign @jsafrane @msau42",
            "language":"en",
            "entities":"[('#65751', 'ISSUE', ''), ('href=\"https:\/\/github.com', 'URL', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('issue', 'FLAW', ''), ('netuseadd](https:\/\/msdn.microsoft.com', 'URL', ''), ('variables](https:\/\/docs.microsoft.com', 'URL', ''), ('issue(s', 'FLAW', ''), ('fixes', 'ACTION', ''), ('fixes', 'ACTION', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('issue(s', 'FLAW', ''), ('fixes', 'ACTION', ''), ('#65750', 'ISSUE', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fixing', 'ACTION', ''), ('issue', 'FLAW', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pkg\/util\/mount\/mount_windows.go'])",
            "num_files":1.0
        },
        {
            "index":231,
            "vuln_id":"GHSA-39q4-p535-c852",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/locutusjs\/locutus\/commit\/eb863321990e7e5514aa14f68b8d9978ece9e65e'}",
            "dataset":"osv",
            "summary":"Uncontrolled Resource Consumption in locutus The package locutus before 2.0.15 are vulnerable to Regular Expression Denial of Service (ReDoS) via the gopher_parsedir function.",
            "published_date":"2021-06-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/locutusjs\/locutus",
            "commit_href":"https:\/\/github.com\/locutusjs\/locutus\/commit\/eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "commit_sha":"eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "patch":"SINGLE",
            "chain_ord":"['eb863321990e7e5514aa14f68b8d9978ece9e65e']",
            "before_first_fix_commit":"{'243b723896c3c82f5496b6008f9aa1be52741899'}",
            "last_fix_commit":"eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/27\/2021, 06:46:30",
            "message":"Prevent ReDos issue with regex inside gopher_parsedir (#446)",
            "author":"Rafa\u0142 Kukawski",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/php\/net-gopher\/gopher_parsedir.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/locutusjs\/locutus\/raw\/eb863321990e7e5514aa14f68b8d9978ece9e65e\/src%2Fphp%2Fnet-gopher%2Fgopher_parsedir.js', 'patch': '@@ -22,7 +22,7 @@ module.exports = function gopher_parsedir (dirent) { \/\/ eslint-disable-line came\\n    * s = Audio file format, primarily a WAV file\\n    *\/\\n \\n-  const entryPattern = \/^(.)(.*?)\\\\t(.*?)\\\\t(.*?)\\\\t(.*?)\\\\u000d\\\\u000a$\/\\n+  const entryPattern = \/^(.)([^\\\\t]*)\\\\t([^\\\\t]*)\\\\t([^\\\\t]*)\\\\t([^\\\\t]*)\\\\r\\\\n$\/\\n   const entry = dirent.match(entryPattern)\\n \\n   if (entry === null) {'}}",
            "message_norm":"prevent redos issue with regex inside gopher_parsedir (#446)",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('redos', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#446', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/php\/net-gopher\/gopher_parsedir.js'])",
            "num_files":1.0
        },
        {
            "index":2004,
            "vuln_id":"GHSA-h6jh-7gv5-28vg",
            "cwe_id":"{'CWE-681'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c283e542a3f422420cfdb332414543b62fc4e4a5'}",
            "dataset":"osv",
            "summary":"Bad alloc in `StringNGrams` caused by integer conversion ### Impact\nThe implementation of `tf.raw_ops.StringNGrams` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.StringNGrams(\n  data=['',''],\n  data_splits=[0,2],\n  separator=' '*100,\n  ngram_widths=[-80,0,0,-60],\n  left_pad=' ',\n  right_pad=' ',\n  pad_width=100,\n  preserve_short_sequences=False)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/string_ngrams_op.cc#L184) calls `reserve` on a `tstring` with a value that sometimes can be negative if user supplies negative `ngram_widths`. The `reserve` method calls `TF_TString_Reserve` which has an `unsigned long` argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer.\n\n### Patches\nWe have patched the issue in GitHub commit [c283e542a3f422420cfdb332414543b62fc4e4a5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c283e542a3f422420cfdb332414543b62fc4e4a5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c283e542a3f422420cfdb332414543b62fc4e4a5",
            "commit_sha":"c283e542a3f422420cfdb332414543b62fc4e4a5",
            "patch":"SINGLE",
            "chain_ord":"['c283e542a3f422420cfdb332414543b62fc4e4a5']",
            "before_first_fix_commit":"{'9659aea5b5e9de3b417413f69e58dab7a2907912'}",
            "last_fix_commit":"c283e542a3f422420cfdb332414543b62fc4e4a5",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 17:55:35",
            "message":"Disallow negative ngram_widths values in tf.raw_ops.StringNGrams\n\nPiperOrigin-RevId: 387148179\nChange-Id: I641395a09a208be72ef9b3ceb128cf8a83a0775b",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/string_ngrams_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c283e542a3f422420cfdb332414543b62fc4e4a5\/tensorflow%2Fcore%2Fkernels%2Fstring_ngrams_op.cc', 'patch': '@@ -53,6 +53,12 @@ class StringNGramsOp : public tensorflow::OpKernel {\\n   }\\n \\n   void Compute(tensorflow::OpKernelContext* context) override {\\n+    for (int ngram_width : ngram_widths_) {\\n+      OP_REQUIRES(\\n+          context, ngram_width > 0,\\n+          errors::InvalidArgument(\"ngram_widths must contain positive values\"));\\n+    }\\n+\\n     const tensorflow::Tensor* data;\\n     OP_REQUIRES_OK(context, context->input(\"data\", &data));\\n     const auto& input_data = data->flat<tstring>().data();'}}",
            "message_norm":"disallow negative ngram_widths values in tf.raw_ops.stringngrams\n\npiperorigin-revid: 387148179\nchange-id: i641395a09a208be72ef9b3ceb128cf8a83a0775b",
            "language":"en",
            "entities":"[('387148179', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/string_ngrams_op.cc'])",
            "num_files":1.0
        },
        {
            "index":738,
            "vuln_id":"GHSA-63m4-fhf2-cmf7",
            "cwe_id":"{'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/KyleRoss\/windows-cpu\/commit\/b75e19aa2f7459a9506bceb577ba2341fe273117'}",
            "dataset":"osv",
            "summary":"Command Execution in windows-cpu Version of `windows-cpu` before 0.1.5 will execute arbitrary code passed into the first argument of the `findLoad` method, resulting in remote code execution.\n\n## Proof of Concept\n\n```\nvar win = require('windows-cpu');\nwind.findLoad('foo & calc.exe');\n```\n\n\n## Recommendation\n\nUpdate to version 0.1.5 or later.",
            "published_date":"2020-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/KyleRoss\/windows-cpu",
            "commit_href":"https:\/\/github.com\/KyleRoss\/windows-cpu\/commit\/b75e19aa2f7459a9506bceb577ba2341fe273117",
            "commit_sha":"b75e19aa2f7459a9506bceb577ba2341fe273117",
            "patch":"SINGLE",
            "chain_ord":"['b75e19aa2f7459a9506bceb577ba2341fe273117']",
            "before_first_fix_commit":"{'da656c1a9d5edbf4e8bf0640f349aeb714a4f1a0'}",
            "last_fix_commit":"b75e19aa2f7459a9506bceb577ba2341fe273117",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2017, 04:32:09",
            "message":"ES6 Refactor + fix vulnerability",
            "author":"Kyle Ross",
            "comments":null,
            "stats":"{'additions': 120, 'deletions': 143, 'total': 263}",
            "files":"{'index.js': {'additions': 120, 'deletions': 143, 'changes': 263, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/KyleRoss\/windows-cpu\/raw\/b75e19aa2f7459a9506bceb577ba2341fe273117\/index.js', 'patch': '@@ -1,120 +1,92 @@\\n \/**\\n  * windows-cpu module for Node.js to get various load statistics.\\n  * @module windows-cpu\\n- * @version 0.1.4\\n- * @author Kyle Ross <kylerross1324@gmail.com>\\n+ * @version 1.0.0\\n+ * @author Kyle Ross\\n  * @license MIT License\\n- * \\n- * @requires os\\n- * @requires child_process\\n- *\\n- * @example\\n- *\\n- * var cpu = require(\\'windows-cpu\\');\\n  *\/\\n+\"use strict\";\\n \\n-(function() {\\n-    var platform = require(\\'os\\').platform(),\\n-        path     = require(\\'path\\'),\\n-        exec     = require(\\'child_process\\').exec,\\n-        execFile = require(\\'child_process\\').execFile,\\n-        wmic     = platform === \\'win32\\'? path.join(process.env.SystemRoot, \\'System32\\', \\'wbem\\', \\'wmic.exe\\') : null,\\n-        emptyFn  = function(){},\\n-        findLoad;\\n-    \\n-    \/*\\n-     * Checks current platform to ensure we are running on `win32`.\\n-     * @private\\n-     * @param {function} cb A callback function to call if there is an error.\\n-     * @returns {boolean} True if `win32` platform, else false.\\n-     *\/\\n-    function checkPlatform(cb) {\\n-        if(platform !== \\'win32\\') {\\n-            if(isFunction(cb)) cb(new Error(\\'windows-cpu> [ERROR] This module only works on Windows platforms.\\'));\\n-            return false;\\n-        }\\n-        return true;\\n-    }\\n+const fs = require(\\'fs\\');\\n+const path = require(\\'path\\');\\n+const cp = require(\\'child_process\\');\\n+const platform = require(\\'os\\').platform();\\n+\\n+const exec = cp.exec;\\n+const execFile = cp.execFile;\\n+const wmic = path.join(process.env.SystemRoot, \\'System32\\', \\'wbem\\', \\'wmic.exe\\');\\n+\\n+\/**\\n+ * Finds the current processor load of a specific process name or id.\\n+ * @private\\n+ * @param  {String}   arg Process name or id to lookup\\n+ * @param  {Function} cb  Callback to call with results\\n+ *\/\\n+function findLoad(arg, cb) {\\n+    let cmd = `wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime,IDProcess | findstr \/i \/c:${arg}`;\\n     \\n-    \/*\\n-     * Proper checking to see if variable is a function.\\n-     * @private\\n-     * @param {*} fn The variable to check if is a function.\\n-     * @returns {boolean} True if is a function, else false.\\n-     *\/\\n-    function isFunction(fn) {\\n-        var getType = {};\\n-        return fn && getType.toString.call(fn) === \\'[object Function]\\';\\n+    exec(cmd, function(error, res, stderr) {\\n+        if(error !== null || stderr) return cb(error || stderr);\\n+        if(!res) return cb(`Cannot find results for provided arg: ${arg}`, { load: 0, results: [] });\\n+        \\n+        let found = res.replace(\/[^\\\\S\\\\n]+\/g, \\':\\').replace(\/:\\\\s\/g, \\'|\\').split(\\'|\\').filter(function(v) {\\n+            return !!v;\\n+        }).map(function(v) {\\n+            let [pid, proc, load] = v.split(\\':\\');\\n+            return {\\n+                pid: +pid,\\n+                process: proc,\\n+                load: +load\\n+            };\\n+        });\\n+        \\n+        let load = found.reduce((acc, val) => {\\n+            return acc + val.load;\\n+        }, 0);\\n+        \\n+        cb(null, { load, found });\\n+    });\\n+}\\n+\\n+\/**\\n+ * @class Public class for WindowsCPU\\n+ *\/\\n+class WindowsCPU {\\n+    constructor() {\\n+        \/**\\n+         * Access to uninstantiated WindowsCPU class\\n+         * @type {Class}\\n+         *\/\\n+        this.WindowsCPU = WindowsCPU;\\n+        this.checkPlatform();\\n     }\\n     \\n     \/**\\n-     * Gets the total load in percent for process(es) by a specific search parameter.\\n-     * @param {string|number} arg Specific search parameter. Can be a Process ID or Process Name.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n-     * @example\\n-     *\\n-     * var cpu = require(\\'windows-cpu\\');\\n-     *\\n-     * \/\/ Find the total load for \"chrome\" processes\\n-     * cpu.findLoad(\\'chrome\\', function(error, results) {\\n-     *      if(error) {\\n-     *          return console.log(error);\\n-     *      }\\n-     *\\n-     *      \/\/ results =>\\n-     *      \/\/ {\\n-     *      \/\/    load: 8,\\n-     *      \/\/    found: [\\n-     *      \/\/        { pid: \\'900\\', process: \\'chrome\\', load: 4 },\\n-     *      \/\/        { pid: \\'905\\', process: \\'chrome#1\\', load: 0 },\\n-     *      \/\/        { pid: \\'910\\', process: \\'chrome#2\\', load: 4 }\\n-     *      \/\/    ]\\n-     *      \/\/ }\\n-     *\\n-     *      console.log(\\'Google Chrome is currently using \\' + results.load + \\'% of the cpu.\\');\\n-     * });\\n+     * Checks if the current platform is supported by windows-cpu\\n+     * @return {Boolean} Returns `true` if platform is supported\\n+     * @throws {Error} If platform is not Windows\\n+     * @throws {Error} If wmic.exe process does not exist or cannot be accessed\\n      *\/\\n-    findLoad = exports.findLoad = function findLoad(arg, cb) {\\n-        if(!isFunction(cb)) cb = emptyFn;\\n-        if(!checkPlatform(cb)) return;\\n+    checkPlatform() {\\n+        if(platform !== \\'win32\\') \\n+            throw new Error(\\'windows-cpu only works on Windows platforms.\\');\\n         \\n-        var cmd = \"wmic path Win32_PerfFormattedData_PerfProc_Process get Name,PercentProcessorTime,IDProcess | findstr \/i \/c:\" + arg;\\n-        exec(cmd, function (error, res, stderr) {\\n-            if(error !== null || stderr) return cb(error || stderr);\\n-            if(!res) return cb(\\'Cannot find results for provided arg: \\' + arg, { load: 0, results: [] });\\n-            \\n-            var found = res.replace(\/[^\\\\S\\\\n]+\/g, \\':\\').replace(\/\\\\:\\\\s\/g, \\'|\\').split(\\'|\\').filter(function(v) {\\n-                return !!v;\\n-            }).map(function(v) {\\n-                var data = v.split(\\':\\');\\n-                return {\\n-                    pid: +data[0],\\n-                    process: data[1],\\n-                    load: +data[2]\\n-                };\\n-            });\\n-            \\n-            var totalLoad = 0;\\n-            \\n-            found.forEach(function(obj) {\\n-                totalLoad += obj.load;\\n-            });\\n-            \\n-            var output = {\\n-                load: totalLoad,\\n-                found: found\\n-            };\\n-            \\n-            cb(null, output);\\n-        });\\n-    };\\n+        try {\\n+            fs.accessSync(wmic);\\n+        } catch(e) {\\n+            throw new Error(\\'windows-cpu is not supported on your version of Windows or you are not running as administrator.\\');\\n+        }\\n+        \\n+        return true;\\n+    }\\n     \\n     \/**\\n      * Gets the total load in percent for all processes running on the current machine per CPU.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * \/\/ Get total load on server for each CPU\\n      * cpu.totalLoad(function(error, results) {\\n@@ -129,27 +101,27 @@\\n      *      \/\/ [3, 10]\\n      * });\\n      *\/\\n-    exports.totalLoad = function totalLoad(cb) {\\n-        if (!isFunction(cb)) cb = emptyFn;\\n-        if (!checkPlatform(cb)) return;\\n-        \\n-        execFile(wmic, [\\'cpu\\', \\'get\\', \\'loadpercentage\\'], function (error, res, stderr) {\\n+    totalLoad(cb) {\\n+        execFile(wmic, [\\'cpu\\', \\'get\\', \\'loadpercentage\\'], function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n             \\n-            var cpus = (res.match(\/\\\\d+\/g) || []).map(function(x) { \\n+            let cpus = (res.match(\/\\\\d+\/g) || []).map(function(x) { \\n                 return +(x.trim()); \\n             });\\n             \\n             cb(null, cpus);\\n         });\\n-    };\\n+        \\n+        return this;\\n+    }\\n     \\n     \/**\\n-     * Gets the total load in percent for all Node.js processes running on the current machine.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Retrieves the current cpu load for all node processes running on the current machine\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * \/\/ Get total load for all node processes\\n      * cpu.nodeLoad(function(error, results) {\\n@@ -167,19 +139,21 @@\\n      *      \/\/    ]\\n      *      \/\/ }\\n      *\\n-     *      console.log(\\'Total Node.js Load: \\' + results.load);\\n+     *      console.log(`Total Node.js Load: ${results.load}%`);\\n      * });\\n      *\/\\n-    exports.nodeLoad = function nodeLoad(cb) {\\n+    nodeLoad(cb) {\\n         findLoad(\\'node\\', cb);\\n-    };\\n+        return this;\\n+    }\\n     \\n     \/**\\n-     * Gets the total load in percent for all processes running on the current machine per CPU.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Retrieves the current cpu load for this process.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * \/\/ Get load for current running node process\\n      * cpu.processLoad(function(error, results) {\\n@@ -195,19 +169,21 @@\\n      *      \/\/    ]\\n      *      \/\/ }\\n      *\\n-     *      console.log(\\'Total Process Load: \\' + results.load);\\n+     *      console.log(`Total Process Load: ${results.load}%`);\\n      * });\\n      *\/\\n-    exports.processLoad = function processLoad(cb) {\\n+    processLoad(cb) {\\n         findLoad(process.pid, cb);\\n-    };\\n+        return this;\\n+    }\\n     \\n     \/**\\n-     * Gets the name of each processor in the machine.\\n-     * @param {function} cb A callback function to handle the results (error, results).\\n+     * Gets list of all processors in the current machine.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * \/\/ Get listing of processors\\n      * cpu.cpuInfo(function(error, results) {\\n@@ -224,28 +200,28 @@\\n      *      console.log(\\'Installed Processors: \\', results);\\n      * });\\n      *\/\\n-    exports.cpuInfo = function cpuInfo(cb) {\\n-        if(!isFunction(cb)) cb = emptyFn;\\n-        if(!checkPlatform(cb)) return;\\n-        \\n-        execFile(wmic, [\\'cpu\\', \\'get\\', \\'Name\\'], function (error, res, stderr) {\\n+    cpuInfo(cb) {\\n+        execFile(wmic, [\\'cpu\\', \\'get\\', \\'Name\\'], function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n             \\n-            var cpus = res.match(\/[^\\\\r\\\\n]+\/g).map(function(v) {\\n+            let cpus = res.match(\/[^\\\\r\\\\n]+\/g).map(function(v) {\\n                 return v.trim();\\n             });\\n             \\n             cpus.shift();\\n             cb(null, cpus);\\n         });\\n-    };\\n-\\n+        \\n+        return this;\\n+    }\\n+    \\n     \/**\\n-     * Gets the total memory usage value in KB , MB and GB .\\n-     * @param {function} cb A callback function to handle the result (error, results).\\n+     * Gets the total memory usage on the machine in KB, MB and GB.\\n+     * @param  {Function} cb Callback to call with results (error, results)\\n+     * @return {WindowsCPU}  Instance of the WindowsCPU class\\n      * @example\\n      *\\n-     * var cpu = require(\\'windows-cpu\\');\\n+     * const cpu = require(\\'windows-cpu\\');\\n      *\\n      * \/\/ Get the memory usage\\n      * cpu.totalMemoryUsage(function(error, results) {\\n@@ -263,17 +239,14 @@\\n      *      console.log(\\'Total Memory Usage: \\', result);\\n      * });\\n      *\/\\n-    exports.totalMemoryUsage = function totalMemoryUsage(cb) {\\n-        if (!isFunction(cb)) cb = emptyFn;\\n-        if (!checkPlatform(cb)) return;\\n-        \\n-        var cmd = \"tasklist \/FO csv \/nh\";\\n-        exec(cmd, function (error, res, stderr) {\\n+    totalMemoryUsage(cb) {\\n+        let cmd = \\'tasklist \/FO csv \/nh\\';\\n+        exec(cmd, function(error, res, stderr) {\\n             if(error !== null || stderr) return cb(error || stderr);\\n-            var results = { usageInKb: 0 , usageInMb: 0 , usageInGb: 0 };\\n+            let results = { usageInKb: 0 , usageInMb: 0 , usageInGb: 0 };\\n             \\n             results.usageInKb = res.match(\/[^\\\\r\\\\n]+\/g).map(function(v) {\\n-                var amt = +v.split(\\'\",\"\\')[4].replace(\/[^\\\\d]\/g, \\'\\');\\n+                let amt = +v.split(\\'\",\"\\')[4].replace(\/[^\\\\d]\/g, \\'\\');\\n                 return (!isNaN(amt) && typeof amt === \\'number\\')? amt : 0;\\n             }).reduce(function(prev, current) {\\n                 return prev + current;\\n@@ -284,5 +257,9 @@\\n             \\n             cb(null, results);\\n         });\\n-    };\\n-}());\\n+        \\n+        return this;\\n+    }\\n+}\\n+\\n+module.exports = new WindowsCPU();'}}",
            "message_norm":"es6 refactor + fix vulnerability",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1436,
            "vuln_id":"GHSA-9vpm-rcf4-9wqw",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/376c352a37ce5a68b721406dc7e77ac4b6cf483d'}",
            "dataset":"osv",
            "summary":"Division by 0 in `MaxPoolGradWithArgmax` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` is vulnerable to a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nargmax = tf.constant([], shape=[0], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n\ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding='SAME', include_batch_in_index=False)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/279bab6efa22752a2827621b7edb56a730233bd8\/tensorflow\/core\/kernels\/maxpooling_op.cc#L1033-L1034) fails to validate that the batch dimension of the tensor is non-zero, before dividing by this quantity.\n\n### Patches\nWe have patched the issue in GitHub commit [376c352a37ce5a68b721406dc7e77ac4b6cf483d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/376c352a37ce5a68b721406dc7e77ac4b6cf483d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/376c352a37ce5a68b721406dc7e77ac4b6cf483d",
            "commit_sha":"376c352a37ce5a68b721406dc7e77ac4b6cf483d",
            "patch":"SINGLE",
            "chain_ord":"['376c352a37ce5a68b721406dc7e77ac4b6cf483d']",
            "before_first_fix_commit":"{'279bab6efa22752a2827621b7edb56a730233bd8'}",
            "last_fix_commit":"376c352a37ce5a68b721406dc7e77ac4b6cf483d",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 21:34:54",
            "message":"Don't do any work if output tensor is null (prevent div by 0)\n\nPiperOrigin-RevId: 372208700\nChange-Id: Iea6b6293e887ade8538facfdb50fb931e17f511e",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/maxpooling_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/376c352a37ce5a68b721406dc7e77ac4b6cf483d\/tensorflow%2Fcore%2Fkernels%2Fmaxpooling_op.cc', 'patch': '@@ -1088,6 +1088,8 @@ class MaxPoolingGradWithArgmaxOp : public OpKernel {\\n     OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\\n                                 {0}, 0, out_shape, &grad_out));\\n \\n+    if (out_shape.num_elements() == 0) return;  \/\/ nothing to be done\\n+\\n     LaunchMaxPoolingGradWithArgmax<Device, T>::launch(\\n         context, params, grad_in, argmax, grad_out, include_batch_in_index_);\\n   }'}}",
            "message_norm":"don't do any work if output tensor is null (prevent div by 0)\n\npiperorigin-revid: 372208700\nchange-id: iea6b6293e887ade8538facfdb50fb931e17f511e",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('div by 0', 'SECWORD', ''), ('372208700', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/maxpooling_op.cc'])",
            "num_files":1.0
        },
        {
            "index":9,
            "vuln_id":"GHSA-23cm-x6j7-6hq3",
            "cwe_id":"{'CWE-200'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9'}",
            "dataset":"osv",
            "summary":"matrix-js-sdk can be tricked into disclosing E2EE room keys to a participating homeserver ### Impact\n\nA logic error in the room key sharing functionality of matrix-js-sdk before 12.4.1 allows a malicious Matrix homeserver\u2020 participating in an encrypted room to steal room encryption keys from affected Matrix clients participating in that room. This allows the homeserver to decrypt end-to-end encrypted messages sent by affected clients.\n\n\u2020 Or anyone with access to the account of the original recipient of an encrypted message.\n\nKnown clients affected (via their use of vulnerable versions of matrix-js-sdk):\n\n- Element Web (1.8.2 and earlier)\n- Element Desktop (1.8.2 and earlier)\n- SchildiChat Web (1.7.32-sc1 and earlier)\n- SchildiChat Desktop (1.7.32-sc1 and earlier)\n- Cinny (1.2.0 and earlier)\n\n### Patch\n\nThis was fixed in https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9.\n\n### Workarounds\nTo prevent a homeserver from being able to steal the room keys, vulnerable clients can be taken offline or signed out. If signing out, care should be taken to either set up Secure Backup or export E2E room keys in order to preserve access to past messages.",
            "published_date":"2021-09-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/matrix-org\/matrix-js-sdk",
            "commit_href":"https:\/\/github.com\/matrix-org\/matrix-js-sdk\/commit\/894c24880da0e1cc81818f51c0db80e3c9fb2be9",
            "commit_sha":"894c24880da0e1cc81818f51c0db80e3c9fb2be9",
            "patch":"SINGLE",
            "chain_ord":"['894c24880da0e1cc81818f51c0db80e3c9fb2be9']",
            "before_first_fix_commit":"{'f8186add92dd5f0ca2f6a1cda10bc0ece3730f86'}",
            "last_fix_commit":"894c24880da0e1cc81818f51c0db80e3c9fb2be9",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/13\/2021, 11:34:48",
            "message":"Verify target device key on reshare",
            "author":"RiotRobot",
            "comments":null,
            "stats":"{'additions': 29, 'deletions': 9, 'total': 38}",
            "files":"{'src\/crypto\/algorithms\/megolm.ts': {'additions': 29, 'deletions': 9, 'changes': 38, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/matrix-org\/matrix-js-sdk\/raw\/894c24880da0e1cc81818f51c0db80e3c9fb2be9\/src%2Fcrypto%2Falgorithms%2Fmegolm.ts', 'patch': '@@ -101,6 +101,13 @@ interface IPayload extends Partial<IMessage> {\\n }\\n \/* eslint-enable camelcase *\/\\n \\n+interface SharedWithData {\\n+    \/\/ The identity key of the device we shared with\\n+    deviceKey: string;\\n+    \/\/ The message index of the ratchet we shared with that device\\n+    messageIndex: number;\\n+}\\n+\\n \/**\\n  * @private\\n  * @constructor\\n@@ -115,12 +122,12 @@ interface IPayload extends Partial<IMessage> {\\n  *\\n  * @property {object} sharedWithDevices\\n  *    devices with which we have shared the session key\\n- *        userId -> {deviceId -> msgindex}\\n+ *        userId -> {deviceId -> SharedWithData}\\n  *\/\\n class OutboundSessionInfo {\\n     public useCount = 0;\\n     public creationTime: number;\\n-    public sharedWithDevices: Record<string, Record<string, number>> = {};\\n+    public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};\\n     public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};\\n \\n     constructor(public readonly sessionId: string, public readonly sharedHistory = false) {\\n@@ -150,11 +157,11 @@ class OutboundSessionInfo {\\n         return false;\\n     }\\n \\n-    public markSharedWithDevice(userId: string, deviceId: string, chainIndex: number): void {\\n+    public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {\\n         if (!this.sharedWithDevices[userId]) {\\n             this.sharedWithDevices[userId] = {};\\n         }\\n-        this.sharedWithDevices[userId][deviceId] = chainIndex;\\n+        this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };\\n     }\\n \\n     public markNotifiedBlockedDevice(userId: string, deviceId: string): void {\\n@@ -572,6 +579,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n         payload: IPayload,\\n     ): Promise<void> {\\n         const contentMap = {};\\n+        const deviceInfoByDeviceId = new Map<string, DeviceInfo>();\\n \\n         const promises = [];\\n         for (let i = 0; i < userDeviceMap.length; i++) {\\n@@ -584,6 +592,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             const userId = val.userId;\\n             const deviceInfo = val.deviceInfo;\\n             const deviceId = deviceInfo.deviceId;\\n+            deviceInfoByDeviceId.set(deviceId, deviceInfo);\\n \\n             if (!contentMap[userId]) {\\n                 contentMap[userId] = {};\\n@@ -636,7 +645,10 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n                 for (const userId of Object.keys(contentMap)) {\\n                     for (const deviceId of Object.keys(contentMap[userId])) {\\n                         session.markSharedWithDevice(\\n-                            userId, deviceId, chainIndex,\\n+                            userId,\\n+                            deviceId,\\n+                            deviceInfoByDeviceId.get(deviceId).getIdentityKey(),\\n+                            chainIndex,\\n                         );\\n                     }\\n                 }\\n@@ -719,19 +731,27 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);\\n             return;\\n         }\\n-        const sentChainIndex = obSessionInfo.sharedWithDevices[userId][device.deviceId];\\n-        if (sentChainIndex === undefined) {\\n+        const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];\\n+        if (sessionSharedData === undefined) {\\n             logger.debug(\\n                 \"megolm session ID \" + sessionId + \" never shared with device \" +\\n                 userId + \":\" + device.deviceId,\\n             );\\n             return;\\n         }\\n \\n+        if (sessionSharedData.deviceKey !== device.getIdentityKey()) {\\n+            logger.warn(\\n+                `Session has been shared with device ${device.deviceId} but with identity ` +\\n+                `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,\\n+            );\\n+            return;\\n+        }\\n+\\n         \/\/ get the key from the inbound session: the outbound one will already\\n         \/\/ have been ratcheted to the next chain index.\\n         const key = await this.olmDevice.getInboundGroupSessionKey(\\n-            this.roomId, senderKey, sessionId, sentChainIndex,\\n+            this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,\\n         );\\n \\n         if (!key) {\\n@@ -882,7 +902,7 @@ class MegolmEncryption extends EncryptionAlgorithm {\\n             const deviceId = deviceInfo.deviceId;\\n \\n             session.markSharedWithDevice(\\n-                userId, deviceId, key.chain_index,\\n+                userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,\\n             );\\n         }'}}",
            "message_norm":"verify target device key on reshare",
            "language":"en",
            "entities":"[('verify', 'ACTION', ''), ('key', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/crypto\/algorithms\/megolm.ts'])",
            "num_files":1.0
        },
        {
            "index":2945,
            "vuln_id":"GHSA-rgvq-pcvf-hx75",
            "cwe_id":"{'CWE-131'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e'}",
            "dataset":"osv",
            "summary":"Heap OOB and null pointer dereference in `RaggedTensorToTensor` ### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6",
            "commit_sha":"c4d7afb6a5986b04505aca4466ae1951686c80f6",
            "patch":"MULTI",
            "chain_ord":"['f94ef358bb3e91d517446454edff6535bcfe8e4a', 'b761c9b652af2107cfbc33efd19be0ce41daa33e', 'c4d7afb6a5986b04505aca4466ae1951686c80f6']",
            "before_first_fix_commit":"{'50034ad2d55b10eb9d4593374546710b12f134e1'}",
            "last_fix_commit":"c4d7afb6a5986b04505aca4466ae1951686c80f6",
            "chain_ord_pos":3.0,
            "commit_datetime":"05\/11\/2021, 22:22:49",
            "message":"Fix heap OOB \/ undefined behavior in `RaggedTensorToTensor`\n\nPiperOrigin-RevId: 373244623\nChange-Id: I2d6cbbc8c67b238a8815bf58097f7586d87c54f2",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 35, 'deletions': 20, 'total': 55}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc': {'additions': 35, 'deletions': 20, 'changes': 55, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c4d7afb6a5986b04505aca4466ae1951686c80f6\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_tensor_op.cc', 'patch': '@@ -207,8 +207,8 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n     DCHECK_EQ(result->size(), first_dimension);\\n   }\\n \\n-  void CalculateOutputIndexRowSplit(\\n-      OpKernelContext* context, const RowPartitionTensor& row_split,\\n+  Status CalculateOutputIndexRowSplit(\\n+      const RowPartitionTensor& row_split,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n@@ -232,10 +232,11 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n         result->push_back(-1);\\n       }\\n     }\\n-    if (row_split_size > 0) {\\n-      OP_REQUIRES(context, result->size() == row_split(row_split_size - 1),\\n-                  errors::InvalidArgument(\"Invalid row split size.\"));\\n+    if (row_split_size > 0 && result->size() != row_split(row_split_size - 1)) {\\n+      return errors::InvalidArgument(\"Invalid row split size.\");\\n     }\\n+\\n+    return Status::OK();\\n   }\\n \\n   \/\/ Calculate the output index of the first element of a list.\\n@@ -259,20 +260,26 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n   \/\/ result[6] = -1 because parent_output_index[value_rowids[6]] == -1\\n   \/\/ result[7] = -1 because parent_output_index[value_rowids[6]] == -1\\n   \/\/ result[8] = parent_output_index[value_rowids[7]]\\n-  void CalculateOutputIndexValueRowID(\\n-      OpKernelContext* context, const RowPartitionTensor& value_rowids,\\n+  Status CalculateOutputIndexValueRowID(\\n+      const RowPartitionTensor& value_rowids,\\n       const vector<INDEX_TYPE>& parent_output_index,\\n       INDEX_TYPE output_index_multiplier, INDEX_TYPE output_size,\\n       vector<INDEX_TYPE>* result) {\\n     const INDEX_TYPE index_size = value_rowids.size();\\n     result->reserve(index_size);\\n     if (index_size == 0) {\\n-      return;\\n+      return Status::OK();\\n     }\\n \\n     INDEX_TYPE current_output_column = 0;\\n     INDEX_TYPE current_value_rowid = value_rowids(0);\\n-    DCHECK_LT(current_value_rowid, parent_output_index.size());\\n+\\n+    if (current_value_rowid >= parent_output_index.size()) {\\n+      return errors::InvalidArgument(\\n+          \"Got current_value_rowid=\", current_value_rowid,\\n+          \" which is not less than \", parent_output_index.size());\\n+    }\\n+\\n     INDEX_TYPE current_output_index = parent_output_index[current_value_rowid];\\n     result->push_back(current_output_index);\\n     for (INDEX_TYPE i = 1; i < index_size; ++i) {\\n@@ -289,13 +296,23 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n       } else {\\n         current_output_column = 0;\\n         current_value_rowid = next_value_rowid;\\n-        DCHECK_LT(next_value_rowid, parent_output_index.size());\\n+\\n+        if (next_value_rowid >= parent_output_index.size()) {\\n+          return errors::InvalidArgument(\\n+              \"Got next_value_rowid=\", next_value_rowid,\\n+              \" which is not less than \", parent_output_index.size());\\n+        }\\n+\\n         current_output_index = parent_output_index[next_value_rowid];\\n       }\\n       result->push_back(current_output_index);\\n     }\\n-    OP_REQUIRES(context, result->size() == value_rowids.size(),\\n-                errors::InvalidArgument(\"Invalid row ids.\"));\\n+\\n+    if (result->size() != value_rowids.size()) {\\n+      return errors::InvalidArgument(\"Invalid row ids.\");\\n+    }\\n+\\n+    return Status::OK();\\n   }\\n \\n   Status CalculateOutputIndex(OpKernelContext* context, int dimension,\\n@@ -308,21 +325,19 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n     auto partition_type = GetRowPartitionTypeByDimension(dimension);\\n     switch (partition_type) {\\n       case RowPartitionType::VALUE_ROWIDS:\\n-        CalculateOutputIndexValueRowID(\\n-            context, row_partition_tensor, parent_output_index,\\n-            output_index_multiplier, output_size, result);\\n-        return tensorflow::Status::OK();\\n+        return CalculateOutputIndexValueRowID(\\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\\n+            output_size, result);\\n       case RowPartitionType::ROW_SPLITS:\\n         if (row_partition_tensor.size() - 1 > parent_output_index.size()) {\\n           return errors::InvalidArgument(\\n               \"Row partition size is greater than output size: \",\\n               row_partition_tensor.size() - 1, \" > \",\\n               parent_output_index.size());\\n         }\\n-        CalculateOutputIndexRowSplit(\\n-            context, row_partition_tensor, parent_output_index,\\n-            output_index_multiplier, output_size, result);\\n-        return tensorflow::Status::OK();\\n+        return CalculateOutputIndexRowSplit(\\n+            row_partition_tensor, parent_output_index, output_index_multiplier,\\n+            output_size, result);\\n       default:\\n         return errors::InvalidArgument(\\n             \"Unsupported partition type:\",'}}",
            "message_norm":"fix heap oob \/ undefined behavior in `raggedtensortotensor`\n\npiperorigin-revid: 373244623\nchange-id: i2d6cbbc8c67b238a8815bf58097f7586d87c54f2",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('373244623', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1613,
            "vuln_id":"GHSA-cvpc-8phh-8f45",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/00302787b788c5ff04cb6f62aed5a74d936e86c0', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e11f55585f614645b360563072ffeb5c3eeff162', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/46d5b0852528ddfd614ded79bccc75589f801bd9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cd31fd0ce0449a9e0f83dcad08d6ed7f1d6bef3f', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1970c2158b1ffa416d159d03c3370b9a462aee35', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/fff2c8326280c07733828f990548979bdc893859'}",
            "dataset":"osv",
            "summary":"Out of bounds access in tensorflow-lite ### Impact\nIn TensorFlow Lite, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input\/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor:https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0e68f4d3295eb0281a517c3662f6698992b7b2cf\/tensorflow\/lite\/kernels\/kernel_util.cc#L36\n\nHowever, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors:\nhttps:\/\/github.com\/tensorflow\/tensorflow\/blob\/0e68f4d3295eb0281a517c3662f6698992b7b2cf\/tensorflow\/lite\/c\/common.h#L82\n\nThis results in special casing during validation at model loading time: https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0e68f4d3295eb0281a517c3662f6698992b7b2cf\/tensorflow\/lite\/core\/subgraph.cc#L566-L580\n\nUnfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays.\n\nThis results in both read and write gadgets, albeit very limited in scope.\n\n### Patches\nWe have patched the issue in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). We will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### Workarounds\nA potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2020-09-25",
            "chain_len":6,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/00302787b788c5ff04cb6f62aed5a74d936e86c0",
            "commit_sha":"00302787b788c5ff04cb6f62aed5a74d936e86c0",
            "patch":"MULTI",
            "chain_ord":"['46d5b0852528ddfd614ded79bccc75589f801bd9', '00302787b788c5ff04cb6f62aed5a74d936e86c0', 'e11f55585f614645b360563072ffeb5c3eeff162', 'cd31fd0ce0449a9e0f83dcad08d6ed7f1d6bef3f', 'fff2c8326280c07733828f990548979bdc893859', '1970c2158b1ffa416d159d03c3370b9a462aee35']",
            "before_first_fix_commit":"{'fff2c8326280c07733828f990548979bdc893859'}",
            "last_fix_commit":"1970c2158b1ffa416d159d03c3370b9a462aee35",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/18\/2020, 20:16:53",
            "message":"[tflite] Make `GetOptionalInputTensor` the same as `GetInput`.\n\nWith the previous change, there is no more need for two separate APIs. We would deprecate `GetOptionalInputTensor` in the future.\n\nPiperOrigin-RevId: 332513386\nChange-Id: Id7110271c25ebd6126ad8c82a493e37e0e0756b3",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 6, 'total': 7}",
            "files":"{'tensorflow\/lite\/kernels\/kernel_util.cc': {'additions': 1, 'deletions': 6, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/00302787b788c5ff04cb6f62aed5a74d936e86c0\/tensorflow%2Flite%2Fkernels%2Fkernel_util.cc', 'patch': '@@ -75,12 +75,7 @@ TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,\\n \\n const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,\\n                                            const TfLiteNode* node, int index) {\\n-  const bool use_tensor = index < node->inputs->size &&\\n-                          node->inputs->data[index] != kTfLiteOptionalTensor;\\n-  if (use_tensor) {\\n-    return GetMutableInput(context, node, index);\\n-  }\\n-  return nullptr;\\n+  return GetInput(context, node, index);\\n }\\n \\n \/\/ Per-axis'}}",
            "message_norm":"[tflite] make `getoptionalinputtensor` the same as `getinput`.\n\nwith the previous change, there is no more need for two separate apis. we would deprecate `getoptionalinputtensor` in the future.\n\npiperorigin-revid: 332513386\nchange-id: id7110271c25ebd6126ad8c82a493e37e0e0756b3",
            "language":"en",
            "entities":"[('332513386', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/kernel_util.cc'])",
            "num_files":1.0
        },
        {
            "index":108,
            "vuln_id":"GHSA-2jx8-v4hv-gx3h",
            "cwe_id":"{'CWE-611'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/reportportal\/service-api\/commit\/da4a012abdcc69f02f4255d81466f1f473b7f418'}",
            "dataset":"osv",
            "summary":"XXE vulnerability in Launch import | Release Date | Affected Projects | Affected Versions | Access Vector| Security Risk |\n|--------------|-------------------|-------------------|---------------|---------------|\n| Monday, May 4, 2020| [service-api](https:\/\/github.com\/reportportal\/service-api) | Every version, starting from 3.1.0 | Remote | Medium |\n\n### Impact\nStarting from version 3.1.0 we introduced a new feature of JUnit XML launch import. Unfortunately XML parser was not configured properly to prevent XML external entity (XXE) attacks. This allows a user to import a specifically-crafted XML file that uses external entities for extraction of secrets from Report Portal service-api module or server-side request forgery.\n\nReport Portal versions 4.3.12+ and 5.1.1+ disables external entity resolution for theirs XML parser.\n\nWe advise our users install the latest releases we built specifically to address this issue.\n\n### Patches\nFixed with https:\/\/github.com\/reportportal\/service-api\/pull\/1201\n\n### Binary Download\nhttps:\/\/bintray.com\/epam\/reportportal\/service-api\/5.1.1\nhttps:\/\/bintray.com\/epam\/reportportal\/service-api\/4.3.12\n\n### Docker Container Download\n* RP v4: `docker pull reportportal\/service-api:4.3.12`\n* RP v5: `docker pull reportportal\/service-api:5.1.1`\n\n### Acknowledgement\nThe issue was reported to Report Portal Team by an external security researcher.\nOur Team thanks Julien M. for reporting the issue.\n\n### For more information\nIf you have any questions or comments about this advisory email us: [support@reportportal.io](mailto:support@reportportal.io)",
            "published_date":"2021-06-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/reportportal\/service-api",
            "commit_href":"https:\/\/github.com\/reportportal\/service-api\/commit\/da4a012abdcc69f02f4255d81466f1f473b7f418",
            "commit_sha":"da4a012abdcc69f02f4255d81466f1f473b7f418",
            "patch":"SINGLE",
            "chain_ord":"['da4a012abdcc69f02f4255d81466f1f473b7f418']",
            "before_first_fix_commit":"{'afbd14d404c4084cfdd17d60685f8984949b1350', '74a954601ad9eea14a0650f5c1ae9bd91031e2ba'}",
            "last_fix_commit":"da4a012abdcc69f02f4255d81466f1f473b7f418",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/30\/2020, 21:14:46",
            "message":"Merge pull request #1201 from reportportal\/sax-hotfix\n\nsax vulnerability fix",
            "author":"Pavel Bortnik",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'src\/main\/java\/com\/epam\/ta\/reportportal\/core\/imprt\/impl\/junit\/XunitParseJob.java': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/reportportal\/service-api\/raw\/da4a012abdcc69f02f4255d81466f1f473b7f418\/src%2Fmain%2Fjava%2Fcom%2Fepam%2Fta%2Freportportal%2Fcore%2Fimprt%2Fimpl%2Fjunit%2FXunitParseJob.java', 'patch': '@@ -24,8 +24,10 @@\\n import org.springframework.context.annotation.Scope;\\n import org.springframework.stereotype.Component;\\n import org.xml.sax.SAXException;\\n+import org.xml.sax.XMLReader;\\n \\n import javax.xml.parsers.ParserConfigurationException;\\n+import javax.xml.parsers.SAXParser;\\n import javax.xml.parsers.SAXParserFactory;\\n import java.io.IOException;\\n import java.io.InputStream;\\n@@ -43,7 +45,22 @@ public class XunitParseJob implements Callable<ParseResults> {\\n \\t@Override\\n \\tpublic ParseResults call() {\\n \\t\\ttry {\\n-\\t\\t\\tSAXParserFactory.newInstance().newSAXParser().parse(xmlInputStream, handler);\\n+\\t\\t\\tSAXParserFactory spf = SAXParserFactory.newInstance();\\n+\\t\\t\\tSAXParser saxParser = spf.newSAXParser();\\n+\\t\\t\\tXMLReader reader = saxParser.getXMLReader();\\n+\\n+\\t\\t\\t\/\/ Xerces 1 - http:\/\/xerces.apache.org\/xerces-j\/features.html#external-general-entities\\n+\\t\\t\\t\/\/ Xerces 2 - http:\/\/xerces.apache.org\/xerces2-j\/features.html#external-general-entities\\n+\\n+\\t\\t\\t\/\/ Using the SAXParserFactory\\'s setFeature\\n+\\t\\t\\tspf.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+\\t\\t\\t\/\/ Using the XMLReader\\'s setFeature\\n+\\t\\t\\treader.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+\\n+\\t\\t\\t\/\/ Xerces 2 only - http:\/\/xerces.apache.org\/xerces-j\/features.html#external-general-entities\\n+\\t\\t\\tspf.setFeature(\"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\", true);\\n+\\n+\\t\\t\\tsaxParser.parse(xmlInputStream, handler);\\n \\t\\t} catch (SAXException | IOException | ParserConfigurationException e) {\\n \\t\\t\\tthrow new ReportPortalException(ErrorType.PARSING_XML_ERROR, e.getMessage());\\n \\t\\t}'}}",
            "message_norm":"merge pull request #1201 from reportportal\/sax-hotfix\n\nsax vulnerability fix",
            "language":"ca",
            "entities":"[('#1201', 'ISSUE', ''), ('sax', 'SECWORD', ''), ('hotfix', 'ACTION', ''), ('sax', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/epam\/ta\/reportportal\/core\/imprt\/impl\/junit\/XunitParseJob.java'])",
            "num_files":1.0
        },
        {
            "index":694,
            "vuln_id":"GHSA-5rqg-jm4f-cqx7",
            "cwe_id":"{'CWE-835'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75', 'https:\/\/github.com\/Marak\/colors.js\/commit\/137c6dae3339e97f4bbc838c221803c363b0a9fd', 'https:\/\/github.com\/Marak\/colors.js\/commit\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26'}",
            "dataset":"osv",
            "summary":"Infinite loop causing Denial of Service in colors colors is a library for including colored text in node.js consoles. Between 07 and 09 January 2022, colors versions 1.4.1, 1.4.2, and 1.4.44-liberty-2 were published including malicious code that caused a Denial of Service due to an infinite loop. Software dependent on these versions experienced the printing of randomized characters to console and an infinite loop resulting in unbound system resource consumption.\n\nUsers of colors relying on these specific versions should downgrade to version 1.4.0.",
            "published_date":"2022-01-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/Marak\/colors.js",
            "commit_href":"https:\/\/github.com\/Marak\/colors.js\/commit\/137c6dae3339e97f4bbc838c221803c363b0a9fd",
            "commit_sha":"137c6dae3339e97f4bbc838c221803c363b0a9fd",
            "patch":"MULTI",
            "chain_ord":"['137c6dae3339e97f4bbc838c221803c363b0a9fd', '5d2d242f656103ac38086d6b26433a09f1c38c75', '6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26']",
            "before_first_fix_commit":"{'5d2d242f656103ac38086d6b26433a09f1c38c75'}",
            "last_fix_commit":"6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/08\/2022, 04:19:44",
            "message":"Bump to `v1.4.44-liberty`",
            "author":"Marak",
            "comments":"{'com_1': {'author': 'LeviPesin', 'datetime': '01\/12\/2022, 06:18:26', 'body': 'No one have commented on this commit yet :-)'}, 'com_2': {'author': 'hello-smile6', 'datetime': '01\/14\/2022, 04:57:47', 'body': '> No one have commented on this commit yet :-)\\r\\n\\r\\nMake that 2 people'}, 'com_3': {'author': 'hello-smile6', 'datetime': '01\/14\/2022, 04:57:52', 'body': '@LeviPesin'}, 'com_4': {'author': 'TechStudent10', 'datetime': '01\/20\/2022, 14:09:20', 'body': '`liberty-1`'}, 'com_5': {'author': 'Fabrisdev', 'datetime': '01\/23\/2022, 22:51:03', 'body': 'now 5'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'package.json': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Marak\/colors.js\/raw\/137c6dae3339e97f4bbc838c221803c363b0a9fd\/package.json', 'patch': '@@ -1,7 +1,7 @@\\n {\\n     \"name\": \"colors\",\\n     \"description\": \"get colors in your node.js console\",\\n-    \"version\": \"1.4.0\",\\n+    \"version\": \"1.4.44-liberty\",\\n     \"author\": \"Marak Squires\",\\n     \"contributors\": [\\n         {'}}",
            "message_norm":"bump to `v1.4.44-liberty`",
            "language":"en",
            "entities":"[('v1.4.44', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['package.json'])",
            "num_files":1.0
        },
        {
            "index":3059,
            "vuln_id":"GHSA-v659-54cx-g4qr",
            "cwe_id":"{'CWE-1321'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/ASaiAnudeep\/deep-override\/commit\/2aced17651fb684959a6e04b1465a8329b3d5268'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in deep-override Prototype pollution vulnerability in 'deep-override' versions 1.0.0 through 1.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.",
            "published_date":"2021-05-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/ASaiAnudeep\/deep-override",
            "commit_href":"https:\/\/github.com\/ASaiAnudeep\/deep-override\/commit\/2aced17651fb684959a6e04b1465a8329b3d5268",
            "commit_sha":"2aced17651fb684959a6e04b1465a8329b3d5268",
            "patch":"SINGLE",
            "chain_ord":"['2aced17651fb684959a6e04b1465a8329b3d5268']",
            "before_first_fix_commit":"{'393135641fb0891409ac2a53783c553a7ed749a9'}",
            "last_fix_commit":"2aced17651fb684959a6e04b1465a8329b3d5268",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/17\/2020, 17:01:18",
            "message":"Security fix for Prototype Pollution",
            "author":"Arjun Shibu",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'src\/index.js': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ASaiAnudeep\/deep-override\/raw\/2aced17651fb684959a6e04b1465a8329b3d5268\/src%2Findex.js', 'patch': \"@@ -46,6 +46,8 @@ function override(...rawArgs) {\\n       });\\n     } else {\\n       Object.keys(obj).forEach(key => {\\n+        if (key == '__proto__' || key == 'constructor' || key == 'prototype')\\n+          return\\n         src = target[key];\\n         val = obj[key];\\n         if (val === target) {\\n@@ -69,4 +71,4 @@ function override(...rawArgs) {\\n   return target;\\n }\\n \\n-module.exports = override;\\n\\\\ No newline at end of file\\n+module.exports = override;\"}}",
            "message_norm":"security fix for prototype pollution",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.js'])",
            "num_files":1.0
        },
        {
            "index":3157,
            "vuln_id":"GHSA-vpwq-6cp4-ffqc",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/ba45d19e1d77a7eea866dab30eff5da552694891'}",
            "dataset":"osv",
            "summary":"Stored Cross-site Scripting in ShowDoc ShowDoc prior to version 2.10.4 is vulnerable to stored cross-site scripting viva `axd` and `cshtml` file upload.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/ba45d19e1d77a7eea866dab30eff5da552694891",
            "commit_sha":"ba45d19e1d77a7eea866dab30eff5da552694891",
            "patch":"SINGLE",
            "chain_ord":"['ba45d19e1d77a7eea866dab30eff5da552694891']",
            "before_first_fix_commit":"{'4e6b321c0d63ee7c4480409c7a68ae116096c4bc'}",
            "last_fix_commit":"ba45d19e1d77a7eea866dab30eff5da552694891",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 02:52:48",
            "message":"bug",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/ba45d19e1d77a7eea866dab30eff5da552694891\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -309,6 +309,8 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \".aspx\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xsd\")\\n \\t\\t\\t|| $isDangerStr($filename , \".asa\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".cshtml\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".axd\")\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
            "message_norm":"bug",
            "language":"id",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":1570,
            "vuln_id":"GHSA-cmc7-mfmr-xqrx",
            "cwe_id":"{'CWE-480', 'CWE-287'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/abhinavsingh\/proxy.py\/pull\/482\/commits\/9b00093288237f5073c403f2c4f62acfdfa8ed46'}",
            "dataset":"osv",
            "summary":"Logic error in authentication in proxy.py before_upstream_connection in AuthPlugin in http\/proxy\/auth.py in proxy.py before 2.3.1 accepts incorrect Proxy-Authorization header data because of a boolean confusion (and versus or).",
            "published_date":"2021-04-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/abhinavsingh\/proxy.py",
            "commit_href":"https:\/\/github.com\/abhinavsingh\/proxy.py\/pull\/482\/commits\/9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "commit_sha":"9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "patch":"SINGLE",
            "chain_ord":"['9b00093288237f5073c403f2c4f62acfdfa8ed46']",
            "before_first_fix_commit":"{'0f78e74705e295bbfccfba342bf9fd34a9aa9103'}",
            "last_fix_commit":"9b00093288237f5073c403f2c4f62acfdfa8ed46",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/10\/2021, 16:30:14",
            "message":"Fix basic auth condition",
            "author":"Abhinav Singh",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'proxy\/http\/proxy\/auth.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/abhinavsingh\/proxy.py\/raw\/9b00093288237f5073c403f2c4f62acfdfa8ed46\/proxy%2Fhttp%2Fproxy%2Fauth.py', 'patch': \"@@ -35,8 +35,8 @@ def before_upstream_connection(\\n                 raise ProxyAuthenticationFailed()\\n             parts = request.headers[b'proxy-authorization'][1].split()\\n             if len(parts) != 2 \\\\\\n-                    and parts[0].lower() != b'basic' \\\\\\n-                    and parts[1] != self.flags.auth_code:\\n+                    or parts[0].lower() != b'basic' \\\\\\n+                    or parts[1] != self.flags.auth_code:\\n                 raise ProxyAuthenticationFailed()\\n         return request\"}}",
            "message_norm":"fix basic auth condition",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('auth', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['proxy\/http\/proxy\/auth.py'])",
            "num_files":1.0
        },
        {
            "index":1989,
            "vuln_id":"GHSA-h4pc-gx2w-f2xv",
            "cwe_id":"{'CWE-125'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412'}",
            "dataset":"osv",
            "summary":"Heap OOB read in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/c59c37e7b2d563967da813fa50fe20b21f4da683\/tensorflow\/lite\/kernels\/split_v.cc#L99):\n\n```cc\nconst int input_size = SizeOfDimension(input, axis_value);\n``` \n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/102b211d892f3abc14f845a72047809b39cc65ab\/tensorflow\/lite\/kernels\/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:\n\n```cc\ninline int SizeOfDimension(const TfLiteTensor* t, int dim) {\n  return t->dims->data[dim];\n}\n```\n  \n### Patches \nWe have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "commit_sha":"ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "patch":"SINGLE",
            "chain_ord":"['ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412']",
            "before_first_fix_commit":"{'c59c37e7b2d563967da813fa50fe20b21f4da683'}",
            "last_fix_commit":"ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 01:12:15",
            "message":"Prevent array OOB read\/write\n\nPiperOrigin-RevId: 371026165\nChange-Id: I26ac6372c87246e03c7eb8c94e84c84d86054b36",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/split_v.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412\/tensorflow%2Flite%2Fkernels%2Fsplit_v.cc', 'patch': '@@ -96,6 +96,8 @@ TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,\\n     }\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n   const int input_size = SizeOfDimension(input, axis_value);\\n \\n   if (minus_one_index != -1) {'}}",
            "message_norm":"prevent array oob read\/write\n\npiperorigin-revid: 371026165\nchange-id: i26ac6372c87246e03c7eb8c94e84c84d86054b36",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('371026165', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/split_v.cc'])",
            "num_files":1.0
        },
        {
            "index":1235,
            "vuln_id":"GHSA-8p9r-f949-699g",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/browserless\/chrome\/commit\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6'}",
            "dataset":"osv",
            "summary":"Path Traversal in browserless-chrome This affects all versions of browserless-chrome before 1.43.0. User input flowing from the workspace endpoint gets used to create a file path filePath and this is fetched and then sent back to a user. This can be escaped to fetch arbitrary files from a server.",
            "published_date":"2021-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/browserless\/chrome",
            "commit_href":"https:\/\/github.com\/browserless\/chrome\/commit\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "commit_sha":"848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "patch":"SINGLE",
            "chain_ord":"['848b87e5bea4f8473eea85261a5ff922d6ebd2b6']",
            "before_first_fix_commit":"{'6a195ab11d393cefcecf9940b38cf6921e3d38d0'}",
            "last_fix_commit":"848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/26\/2020, 17:28:01",
            "message":"Ensure workspace files are _in_ the workspace DIR",
            "author":"Joel Griffith",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'src\/routes.ts': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/browserless\/chrome\/raw\/848b87e5bea4f8473eea85261a5ff922d6ebd2b6\/src%2Froutes.ts', 'patch': '@@ -157,9 +157,12 @@ export const getRoutes = ({\\n       }\\n \\n       const filePath = path.join(workspaceDir, file);\\n-\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }\\n@@ -185,6 +188,10 @@ export const getRoutes = ({\\n       const filePath = path.join(workspaceDir, file);\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }'}}",
            "message_norm":"ensure workspace files are _in_ the workspace dir",
            "language":"en",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/routes.ts'])",
            "num_files":1.0
        },
        {
            "index":279,
            "vuln_id":"GHSA-3mw4-6rj6-74g5",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TensorFlow ### Impact \nThe [implementation of `QuantizedMaxPool`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/quantized_pooling_ops.cc#L114-L130) has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizedMaxPool(\n    input = tf.constant([[[[4]]]], dtype=tf.quint8),\n    min_input = [],\n    max_input = [1],\n    ksize = [1, 1, 1, 1],\n    strides = [1, 1, 1, 1],\n    padding = \"SAME\", name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [53b0dd6dc5957652f35964af16b892ec9af4a559](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559",
            "commit_sha":"53b0dd6dc5957652f35964af16b892ec9af4a559",
            "patch":"SINGLE",
            "chain_ord":"['53b0dd6dc5957652f35964af16b892ec9af4a559']",
            "before_first_fix_commit":"{'19cff800e5805097da69bb1ad0b0a2dd9f83741a'}",
            "last_fix_commit":"53b0dd6dc5957652f35964af16b892ec9af4a559",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/03\/2021, 18:02:20",
            "message":"Fix nullptr exception in QuantizedMaxPool op when empty list is sent to min_input or max_input parameters.\n\nPiperOrigin-RevId: 413960973\nChange-Id: I9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
            "author":"Isha Arkatkar",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'tensorflow\/core\/kernels\/quantized_pooling_ops.cc': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/53b0dd6dc5957652f35964af16b892ec9af4a559\/tensorflow%2Fcore%2Fkernels%2Fquantized_pooling_ops.cc', 'patch': '@@ -15,6 +15,8 @@ limitations under the License.\\n \\n \/\/ See docs in ..\/ops\/nn_ops.cc.\\n \\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #define EIGEN_USE_THREADS\\n \\n #include \"third_party\/eigen3\/unsupported\/Eigen\/CXX11\/Tensor\"\\n@@ -117,6 +119,18 @@ class QuantizedMaxPoolingOp : public MaxPoolingOp<Device, T> {\\n       : MaxPoolingOp<Device, T>(context) {}\\n \\n   void Compute(OpKernelContext* context) override {\\n+    auto min_input_tensor = context->input(1);\\n+    auto max_input_tensor = context->input(2);\\n+    OP_REQUIRES(\\n+        context, min_input_tensor.NumElements() == 1,\\n+        errors::InvalidArgument(\\n+            \"min_input must be a scalar float value, got tensor with shape \",\\n+            min_input_tensor.shape()));\\n+    OP_REQUIRES(\\n+        context, max_input_tensor.NumElements() == 1,\\n+        errors::InvalidArgument(\\n+            \"max_input must be a scalar float value, got tensor with shape \",\\n+            max_input_tensor.shape()));\\n     const float min_input = context->input(1).flat<float>()(0);\\n     const float max_input = context->input(2).flat<float>()(0);\\n     MaxPoolingOp<Device, T>::Compute(context);'}}",
            "message_norm":"fix nullptr exception in quantizedmaxpool op when empty list is sent to min_input or max_input parameters.\n\npiperorigin-revid: 413960973\nchange-id: i9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('nullptr exception', 'SECWORD', ''), ('413960973', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_pooling_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2937,
            "vuln_id":"GHSA-rg3m-hqc5-344v",
            "cwe_id":"{'CWE-125'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67bfd9feeecfb3c61d80f0e46d89c170fbee682b'}",
            "dataset":"osv",
            "summary":"`SparseFillEmptyRows` heap OOB ### Impact\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e71b86d47f8bc1816bf54d7bddc4170e47670b97\/tensorflow\/core\/kernels\/sparse_fill_empty_rows_op.cc#L194-L241) of `SparseFillEmptyRows` can be made to trigger a heap OOB access:\n\n```python\nimport tensorflow as tf\n  \ndata=tf.raw_ops.SparseFillEmptyRows(\n  indices=[[0,0],[0,0],[0,0]],\n  values=['sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss'],\n  dense_shape=[5,3],\n  default_value='o')\n```\n  \nThis occurs whenever the size of `indices` does not match the size of `values`.\n\n### Patches\nWe have patched the issue in GitHub commit [67bfd9feeecfb3c61d80f0e46d89c170fbee682b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67bfd9feeecfb3c61d80f0e46d89c170fbee682b).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
            "commit_sha":"67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
            "patch":"SINGLE",
            "chain_ord":"['67bfd9feeecfb3c61d80f0e46d89c170fbee682b']",
            "before_first_fix_commit":"{'421fba8888bb8f8724bc2e35ca2fdcde16e1bfe5'}",
            "last_fix_commit":"67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/30\/2021, 17:44:33",
            "message":"Make SparseFillEmptyRows validate that the length of `values` must be equal to the number of index tuples.\n\nPiperOrigin-RevId: 399969549\nChange-Id: I3c2f2ca1c1d2cc88bb5951c6958b38c16e9436c8",
            "author":"Penporn Koanantakool",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'tensorflow\/core\/kernels\/sparse_fill_empty_rows_op.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/67bfd9feeecfb3c61d80f0e46d89c170fbee682b\/tensorflow%2Fcore%2Fkernels%2Fsparse_fill_empty_rows_op.cc', 'patch': '@@ -24,11 +24,13 @@ limitations under the License.\\n #include <vector>\\n \\n #include \"tensorflow\/core\/framework\/op_kernel.h\"\\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n #include \"tensorflow\/core\/framework\/register_types.h\"\\n #include \"tensorflow\/core\/framework\/tensor.h\"\\n #include \"tensorflow\/core\/framework\/tensor_util.h\"\\n #include \"tensorflow\/core\/framework\/types.h\"\\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/util\/sparse\/sparse_tensor.h\"\\n \\n namespace tensorflow {\\n@@ -222,6 +224,12 @@ void SparseFillEmptyRowsOpImpl(OpKernelContext* context,\\n                     errors::InvalidArgument(\"values must be a vector, saw: \",\\n                                             values_t.shape().DebugString()),\\n                     done);\\n+  OP_REQUIRES_ASYNC(\\n+      context, indices_t.dim_size(0) == values_t.dim_size(0),\\n+      errors::InvalidArgument(\"The length of `values` (\", values_t.dim_size(0),\\n+                              \") must match the first dimension of `indices` (\",\\n+                              indices_t.dim_size(0), \").\"),\\n+      done);\\n   OP_REQUIRES_ASYNC(\\n       context, TensorShapeUtils::IsScalar(default_value_t.shape()),\\n       errors::InvalidArgument(\"default_value must be a scalar, saw: \",'}}",
            "message_norm":"make sparsefillemptyrows validate that the length of `values` must be equal to the number of index tuples.\n\npiperorigin-revid: 399969549\nchange-id: i3c2f2ca1c1d2cc88bb5951c6958b38c16e9436c8",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('399969549', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_fill_empty_rows_op.cc'])",
            "num_files":1.0
        },
        {
            "index":255,
            "vuln_id":"GHSA-3h8m-483j-7xxm",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ef0c008ee84bad91ec6725ddc42091e19a30cf0e'}",
            "dataset":"osv",
            "summary":"Heap out of bounds read in `RequantizationRange` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1], shape=[1], dtype=tf.qint32) \ninput_max = tf.constant([], dtype=tf.float32)\ninput_min = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ac328eaa3870491ababc147822cd04e91a790643\/tensorflow\/core\/kernels\/requantization_range_op.cc#L49-L50) assumes that the `input_min` and `input_max` tensors have at least one element, as it accesses the first element in two arrays:\n\n```cc\nconst float input_min_float = ctx->input(1).flat<float>()(0);\nconst float input_max_float = ctx->input(2).flat<float>()(0);\n```\n\nIf the tensors are empty, `.flat<T>()` is an empty object, backed by an empty array. Hence, accesing even the 0th element is a read outside the bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [ef0c008ee84bad91ec6725ddc42091e19a30cf0e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ef0c008ee84bad91ec6725ddc42091e19a30cf0e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
            "commit_sha":"ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
            "patch":"SINGLE",
            "chain_ord":"['ef0c008ee84bad91ec6725ddc42091e19a30cf0e']",
            "before_first_fix_commit":"{'ac328eaa3870491ababc147822cd04e91a790643'}",
            "last_fix_commit":"ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 15:16:13",
            "message":"Fix out of bound read in requantization_range_op.cc\n\nPiperOrigin-RevId: 372129031\nChange-Id: Ie684ab98a3840c5186ead3eafffc0e0ed0e8030d",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/requantization_range_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ef0c008ee84bad91ec6725ddc42091e19a30cf0e\/tensorflow%2Fcore%2Fkernels%2Frequantization_range_op.cc', 'patch': '@@ -46,6 +46,10 @@ class RequantizationRangeOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& input = ctx->input(0);\\n+    OP_REQUIRES(ctx, ctx->input(1).NumElements() > 0,\\n+                errors::InvalidArgument(\"Input min must not be empty.\"));\\n+    OP_REQUIRES(ctx, ctx->input(2).NumElements() > 0,\\n+                errors::InvalidArgument(\"Input max must not be empty.\"));\\n     const float input_min_float = ctx->input(1).flat<float>()(0);\\n     const float input_max_float = ctx->input(2).flat<float>()(0);\\n     Tensor* output_min = nullptr;'}}",
            "message_norm":"fix out of bound read in requantization_range_op.cc\n\npiperorigin-revid: 372129031\nchange-id: ie684ab98a3840c5186ead3eafffc0e0ed0e8030d",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bound read', 'SECWORD', ''), ('372129031', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/requantization_range_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1713,
            "vuln_id":"GHSA-fc38-mxwr-pfhx",
            "cwe_id":"{'CWE-79'}",
            "score":8.0,
            "chain":"{'https:\/\/github.com\/shopware\/platform\/commit\/abe9f69e1f667800f974acccd3047b4930e4b423'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting via SVG media files ### Impact\nCross-Site Scripting via SVG media files\n\n### Patches\nWe recommend updating to the current version 6.4.3.1. You can get the update to 6.4.3.1 regularly via the Auto-Updater or directly via the download overview.\n\nhttps:\/\/www.shopware.com\/en\/download\/#shopware-6\n\n### Workarounds\nFor older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.",
            "published_date":"2021-08-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/shopware\/platform",
            "commit_href":"https:\/\/github.com\/shopware\/platform\/commit\/abe9f69e1f667800f974acccd3047b4930e4b423",
            "commit_sha":"abe9f69e1f667800f974acccd3047b4930e4b423",
            "patch":"SINGLE",
            "chain_ord":"['abe9f69e1f667800f974acccd3047b4930e4b423']",
            "before_first_fix_commit":"{'912b96de3b839c6c5525c98cbb58f537c2d838be'}",
            "last_fix_commit":"abe9f69e1f667800f974acccd3047b4930e4b423",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 13:31:10",
            "message":"NEXT-15677 - Fix XSS for SVG files",
            "author":"Jonas Elfering",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'public\/.htaccess.dist': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/shopware\/platform\/raw\/abe9f69e1f667800f974acccd3047b4930e4b423\/public%2F.htaccess.dist', 'patch': '@@ -36,7 +36,7 @@ DirectoryIndex index.php\\n <\/IfModule>\\n \\n <IfModule mod_headers.c>\\n-    <FilesMatch \"\\\\.svg$\">\\n+    <FilesMatch \"\\\\.(?i:svg)$\">\\n         Header set Content-Security-Policy \"script-src \\'none\\'\"\\n     <\/FilesMatch>\\n <\/IfModule>'}}",
            "message_norm":"next-15677 - fix xss for svg files",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['public\/.htaccess.dist'])",
            "num_files":1.0
        },
        {
            "index":777,
            "vuln_id":"GHSA-67mm-m3wx-j7fr",
            "cwe_id":"{'CWE-77'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/domharrington\/node-gitlog\/pull\/65\/commits\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4'}",
            "dataset":"osv",
            "summary":"Command injection in gitlog The gitlog function in src\/index.ts in gitlog before 4.0.4 has a command injection vulnerability.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/domharrington\/node-gitlog",
            "commit_href":"https:\/\/github.com\/domharrington\/node-gitlog\/pull\/65\/commits\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "commit_sha":"bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "patch":"SINGLE",
            "chain_ord":"['bb22ffb2c907e0284f887ab625e12b88c31f4bf4']",
            "before_first_fix_commit":"{'256a9617fcaa04bba7652ef2a20bc0aa6cc5dbe1'}",
            "last_fix_commit":"bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/17\/2020, 11:48:28",
            "message":"Use child_process.execFile instead of child_process.exec",
            "author":"Ron",
            "comments":null,
            "stats":"{'additions': 24, 'deletions': 22, 'total': 46}",
            "files":"{'src\/index.ts': {'additions': 24, 'deletions': 22, 'changes': 46, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/domharrington\/node-gitlog\/raw\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4\/src%2Findex.ts', 'patch': '@@ -1,4 +1,4 @@\\n-import { exec, execSync, ExecSyncOptions, ExecException } from \"child_process\";\\n+import { execFile, execFileSync, ExecSyncOptions, ExecException } from \"child_process\";\\n import { existsSync } from \"fs\";\\n import createDebugger from \"debug\";\\n \\n@@ -126,8 +126,8 @@ const defaultOptions = {\\n };\\n \\n \/** Add optional parameter to command *\/\\n-function addOptional<Field extends string = DefaultField>(\\n-  command: string,\\n+function addOptionalArgument<Field extends string = DefaultField>(\\n+  command: string[],\\n   options: GitlogOptions<Field>\\n ) {\\n   let commandWithOptions = command;\\n@@ -140,9 +140,9 @@ function addOptional<Field extends string = DefaultField>(\\n     \"committer\",\\n   ] as const;\\n \\n-  for (let i = cmdOptional.length; i--; ) {\\n+  for (let i = cmdOptional.length; i--;) {\\n     if (options[cmdOptional[i]]) {\\n-      commandWithOptions += ` --${cmdOptional[i]}=\"${options[cmdOptional[i]]}\"`;\\n+      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\\n     }\\n   }\\n \\n@@ -234,30 +234,30 @@ const parseCommits = <T extends string>(\\n };\\n \\n \/** Run \"git log\" and return the result as JSON *\/\\n-function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n+function createCommandArguments<T extends CommitField | DefaultField = DefaultField>(\\n   options: GitlogOptions<T>\\n ) {\\n   \/\/ Start constructing command\\n-  let command = \"git log -l0 \";\\n+  let command: string[] = [\"log\", \"-l0\"];\\n \\n   if (options.findCopiesHarder) {\\n-    command += \"--find-copies-harder \";\\n+    command.push(\"--find-copies-harder\");\\n   }\\n \\n   if (options.all) {\\n-    command += \"--all \";\\n+    command.push(\"--all\");\\n   }\\n \\n   if (options.includeMergeCommitFiles) {\\n-    command += \"-m \";\\n+    command.push(\"-m\");\\n   }\\n \\n-  command += `-n ${options.number}`;\\n+  command.push(`-n ${options.number}`);\\n \\n-  command = addOptional(command, options);\\n+  command = addOptionalArgument(command, options);\\n \\n   \/\/ Start of custom format\\n-  command += \\' --pretty=\"@begin@\\';\\n+  let prettyArgument: string = \\'--pretty=@begin@\\';\\n \\n   \/\/ Iterating through the fields and adding them to the custom format\\n   if (options.fields) {\\n@@ -266,29 +266,31 @@ function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n         throw new Error(`Unknown field: ${field}`);\\n       }\\n \\n-      command += delimiter + fieldMap[field];\\n+      prettyArgument += delimiter + fieldMap[field];\\n     });\\n   }\\n \\n   \/\/ Close custom format\\n-  command += \\'@end@\"\\';\\n+  prettyArgument += \\'@end@\\';\\n+  command.push(prettyArgument);\\n \\n   \/\/ Append branch (revision range) if specified\\n   if (options.branch) {\\n-    command += ` ${options.branch}`;\\n+    command.push(options.branch);\\n   }\\n \\n   \/\/ File and file status\\n   if (options.nameStatus && !options.fileLineRange) {\\n-    command += \" --name-status\";\\n+    command.push(\"--name-status\");\\n   }\\n \\n   if (options.fileLineRange) {\\n-    command += ` -L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`;\\n+    command.push(`-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`);\\n   }\\n \\n   if (options.file) {\\n-    command += ` -- ${options.file}`;\\n+    command.push(\"--\");\\n+    command.push(options.file);\\n   }\\n \\n   debug(\"command\", options.execOptions, command);\\n@@ -342,10 +344,10 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     ...userOptions,\\n   };\\n   const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\\n-  const command = createCommand(options);\\n+  const commandArguments = createCommandArguments(options);\\n \\n   if (!cb) {\\n-    const stdout = execSync(command, execOptions).toString();\\n+    const stdout = execFileSync(\"git\", commandArguments, execOptions).toString();\\n     const commits = stdout.split(\"@begin@\");\\n \\n     if (commits[0] === \"\") {\\n@@ -356,7 +358,7 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     return parseCommits(commits, options.fields, options.nameStatus);\\n   }\\n \\n-  exec(command, execOptions, (err, stdout, stderr) => {\\n+  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\\n     debug(\"stdout\", stdout);\\n     const commits = stdout.split(\"@begin@\");'}}",
            "message_norm":"use child_process.execfile instead of child_process.exec",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.ts'])",
            "num_files":1.0
        },
        {
            "index":1649,
            "vuln_id":"GHSA-f2rp-4rv7-fc95",
            "cwe_id":"{'CWE-200'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/pull\/184\/commits\/b7e910bf61563f5d447c71b1b41e2a373a794d7b'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information to an Unauthorized Actor in foreman_fog_proxmox A flaw was found in the Foreman project. The Proxmox compute resource exposes the password through the API to an authenticated local attacker with view_hosts permission. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability. Versions before foreman_fog_proxmox 0.13.1 are affected",
            "published_date":"2021-06-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/theforeman\/foreman_fog_proxmox",
            "commit_href":"https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/pull\/184\/commits\/b7e910bf61563f5d447c71b1b41e2a373a794d7b",
            "commit_sha":"b7e910bf61563f5d447c71b1b41e2a373a794d7b",
            "patch":"SINGLE",
            "chain_ord":"['b7e910bf61563f5d447c71b1b41e2a373a794d7b']",
            "before_first_fix_commit":"{'f131382d265944cda85bb5765a6dc5b0b2715f61'}",
            "last_fix_commit":"b7e910bf61563f5d447c71b1b41e2a373a794d7b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/23\/2021, 21:00:19",
            "message":"Fix clean API result",
            "author":"Markus Bucher",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/theforeman\/foreman_fog_proxmox\/raw\/b7e910bf61563f5d447c71b1b41e2a373a794d7b\/app%2Fviews%2Fapi%2Fv2%2Fcompute_resources%2Fproxmox.json.rabl', 'patch': '@@ -1,3 +1,3 @@\\n # frozen_string_literal: true\\n \\n-attributes :url, :user, :password, :ssl_verify_peer, :ssl_certs, :renew\\n+attributes :url, :user, :ssl_verify_peer, :ssl_certs, :renew'}}",
            "message_norm":"fix clean api result",
            "language":"ro",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/views\/api\/v2\/compute_resources\/proxmox.json.rabl'])",
            "num_files":1.0
        },
        {
            "index":162,
            "vuln_id":"GHSA-2x7h-96h5-rq84",
            "cwe_id":"{'CWE-22'}",
            "score":4.0,
            "chain":"{'https:\/\/github.com\/icsharpcode\/SharpZipLib\/commit\/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78'}",
            "dataset":"osv",
            "summary":"Path Traversal in SharpZipLib SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Starting version 1.3.0 and prior to version 1.3.3, a check was added if the destination file is under destination directory. However, it is not enforced that `destDir` ends with slash. If the `destDir` is not slash terminated like `\/home\/user\/dir` it is possible to create a file with a name thats begins with the destination directory, i.e. `\/home\/user\/dir.sh`. Because of the file name and destination directory constraints, the arbitrary file creation impact is limited and depends on the use case. Version 1.3.3 contains a patch for this vulnerability.",
            "published_date":"2022-02-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/icsharpcode\/SharpZipLib",
            "commit_href":"https:\/\/github.com\/icsharpcode\/SharpZipLib\/commit\/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
            "commit_sha":"5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
            "patch":"SINGLE",
            "chain_ord":"['5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78']",
            "before_first_fix_commit":"{'a0e96de70b5264f4c919b09253b1522bc7a221cc'}",
            "last_fix_commit":"5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/18\/2021, 09:58:11",
            "message":"fix: specialized tar extract traversal",
            "author":"nils m\u00e5s\u00e9n",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/ICSharpCode.SharpZipLib\/Tar\/TarArchive.cs': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/icsharpcode\/SharpZipLib\/raw\/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78\/src%2FICSharpCode.SharpZipLib%2FTar%2FTarArchive.cs', 'patch': '@@ -658,8 +658,9 @@ private void ExtractEntry(string destDir, TarEntry entry, bool allowParentTraver\\n \\t\\t\\tname = name.Replace(\\'\/\\', Path.DirectorySeparatorChar);\\n \\n \\t\\t\\tstring destFile = Path.Combine(destDir, name);\\n+\\t\\t\\tvar destFileDir = Path.GetDirectoryName(Path.GetFullPath(destFile)) ?? \"\";\\n \\n-\\t\\t\\tif (!allowParentTraversal && !Path.GetFullPath(destFile).StartsWith(destDir, StringComparison.InvariantCultureIgnoreCase))\\n+\\t\\t\\tif (!allowParentTraversal && !destFileDir.StartsWith(destDir, StringComparison.InvariantCultureIgnoreCase))\\n \\t\\t\\t{\\n \\t\\t\\t\\tthrow new InvalidNameException(\"Parent traversal in paths is not allowed\");\\n \\t\\t\\t}'}}",
            "message_norm":"fix: specialized tar extract traversal",
            "language":"en",
            "entities":"[('extract traversal', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/ICSharpCode.SharpZipLib\/Tar\/TarArchive.cs'])",
            "num_files":1.0
        },
        {
            "index":573,
            "vuln_id":"GHSA-57f3-gghm-9mhc",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/MrRio\/jsPDF\/commit\/d8bb3b39efcd129994f7a3b01b632164144ec43e'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service (ReDoS) This affects the package jspdf before 2.3.1. ReDoS is possible via the addImage function.",
            "published_date":"2021-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/MrRio\/jsPDF",
            "commit_href":"https:\/\/github.com\/MrRio\/jsPDF\/commit\/d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "commit_sha":"d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "patch":"SINGLE",
            "chain_ord":"['d8bb3b39efcd129994f7a3b01b632164144ec43e']",
            "before_first_fix_commit":"{'c91995de97c598deaf6fda7109ea886a50f50109'}",
            "last_fix_commit":"d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2021, 15:50:17",
            "message":"fix ReDoS-vulnerable regexp in addImage (#3091)",
            "author":"Yeting Li",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/modules\/addimage.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/parallax\/jsPDF\/raw\/d8bb3b39efcd129994f7a3b01b632164144ec43e\/src%2Fmodules%2Faddimage.js', 'patch': '@@ -630,7 +630,7 @@ import { atob, btoa } from \"..\/libs\/AtobBtoa.js\";\\n     var result = null;\\n \\n     if (dataUrlParts.length === 2) {\\n-      var extractedInfo = \/^data:(\\\\w*\\\\\/\\\\w*);*(charset=[\\\\w=-]*)*;*$\/.exec(\\n+      var extractedInfo = \/^data:(\\\\w*\\\\\/\\\\w*);*(charset=(?!charset=)[\\\\w=-]*)*;*$\/.exec(\\n         dataUrlParts[0]\\n       );\\n       if (Array.isArray(extractedInfo)) {'}}",
            "message_norm":"fix redos-vulnerable regexp in addimage (#3091)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('#3091', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/modules\/addimage.js'])",
            "num_files":1.0
        },
        {
            "index":2438,
            "vuln_id":"GHSA-mm4f-47ch-f7hx",
            "cwe_id":"{'CWE-77'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/GuyMograbi\/kill-by-port\/commit\/ea5b1f377e196a4492e05ff070eba8b30b7372c4'}",
            "dataset":"osv",
            "summary":"Arbitrary code execution in kill-by-port This affects the package kill-by-port before 0.0.2. If (attacker-controlled) user input is given to the killByPort function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/GuyMograbi\/kill-by-port",
            "commit_href":"https:\/\/github.com\/GuyMograbi\/kill-by-port\/commit\/ea5b1f377e196a4492e05ff070eba8b30b7372c4",
            "commit_sha":"ea5b1f377e196a4492e05ff070eba8b30b7372c4",
            "patch":"SINGLE",
            "chain_ord":"['ea5b1f377e196a4492e05ff070eba8b30b7372c4']",
            "before_first_fix_commit":"{'16dcbe264b6b4a5ecf409661b42836dd286fd43f'}",
            "last_fix_commit":"ea5b1f377e196a4492e05ff070eba8b30b7372c4",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/24\/2021, 14:00:50",
            "message":"fix kill by port",
            "author":"Guy Mograbi",
            "comments":"{'com_1': {'author': 'abergmann', 'datetime': '03\/31\/2021, 08:07:34', 'body': '[CVE-2021-23363](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2021-23363) was assigned to this commit.'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/GuyMograbi\/kill-by-port\/raw\/ea5b1f377e196a4492e05ff070eba8b30b7372c4\/index.js', 'patch': \"@@ -5,7 +5,7 @@ const exec = require('child_process').execSync\\n exports.killByPort = function (port) {\\n   var processId = null\\n   try {\\n-    processId = exec(`lsof -t -i:${port}`)\\n+    processId = exec(`lsof -t -i:${parseInt(port, 10)}`)\\n   } catch (e) {\\n \\n   }\"}}",
            "message_norm":"fix kill by port",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2928,
            "vuln_id":"GHSA-rf66-hmqf-q3fc",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/pull\/6831\/commits\/5848d9a10c7d62c73ff6a3858edfae96a429402a'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Input During Web Page Generation in Select2 In Select2 through 4.0.5, as used in Snipe-IT and other products, rich selectlists allow XSS. This affects use cases with Ajax remote data loading when HTML templates are used to display listbox data.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/pull\/6831\/commits\/5848d9a10c7d62c73ff6a3858edfae96a429402a",
            "commit_sha":"5848d9a10c7d62c73ff6a3858edfae96a429402a",
            "patch":"SINGLE",
            "chain_ord":"['5848d9a10c7d62c73ff6a3858edfae96a429402a']",
            "before_first_fix_commit":"{'bd8548325d6b4210015bd0ddeb144c61ae8949be'}",
            "last_fix_commit":"5848d9a10c7d62c73ff6a3858edfae96a429402a",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/19\/2019, 02:29:30",
            "message":"Janky fix for Select2 bug",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 1, 'total': 13}",
            "files":"{'resources\/assets\/js\/snipeit.js': {'additions': 12, 'deletions': 1, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/5848d9a10c7d62c73ff6a3858edfae96a429402a\/resources%2Fassets%2Fjs%2Fsnipeit.js', 'patch': '@@ -260,7 +260,18 @@ $(document).ready(function () {\\n     }\\n \\n     function formatDataSelection (datalist) {\\n-        return datalist.text;\\n+        \/\/ This a heinous workaround for a known bug in Select2.\\n+        \/\/ Without this, the rich selectlists are vulnerable to XSS.\\n+        \/\/ Many thanks to @uberbrady for this fix. It ain\\'t pretty,\\n+        \/\/ but it resolves the issue until Select2 addresses it on their end.\\n+        \/\/\\n+        \/\/ Bug was reported in 2016 :{\\n+        \/\/ https:\/\/github.com\/select2\/select2\/issues\/4587\\n+\\n+        return datalist.text.replace(\/>\/g, \\'&gt;\\')\\n+            .replace(\/<\/g, \\'&lt;\\')\\n+            .replace(\/\"\/g, \\'&quot;\\')\\n+            .replace(\/\\'\/g, \\'&#039;\\');\\n     }\\n \\n     \/\/ This handles the radio button selectors for the checkout-to-foo options'}}",
            "message_norm":"janky fix for select2 bug",
            "language":"en",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['resources\/assets\/js\/snipeit.js'])",
            "num_files":1.0
        },
        {
            "index":2059,
            "vuln_id":"GHSA-hgch-jjmr-gp7w",
            "cwe_id":"{'CWE-94'}",
            "score":9.9,
            "chain":"{'https:\/\/github.com\/commenthol\/safer-eval\/commit\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5'}",
            "dataset":"osv",
            "summary":"Sandbox Breakout \/ Arbitrary Code Execution in safer-eval Versions of `safer-eval` before 1.3.2 are vulnerable to Sandbox Escape leading to Remote Code Execution. A payload using constructor properties can escape the sandbox and execute arbitrary code.\n\n\n## Recommendation\n\nUpgrade to version 1.3.2.",
            "published_date":"2019-10-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/commenthol\/safer-eval",
            "commit_href":"https:\/\/github.com\/commenthol\/safer-eval\/commit\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "commit_sha":"1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "patch":"SINGLE",
            "chain_ord":"['1c29f6a6e304fb650c05056e217e457a0d2cc3c5']",
            "before_first_fix_commit":"{'74e5bb845c3cf1cab4f0a5a8dea08685c20970c7'}",
            "last_fix_commit":"1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/09\/2019, 20:54:53",
            "message":"fix: disallow usage of Object.constructor",
            "author":"commenthol",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'src\/index.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/commenthol\/safer-eval\/raw\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5\/src%2Findex.js', 'patch': '@@ -40,8 +40,11 @@ class SaferEval {\\n     if (typeof code !== \\'string\\') {\\n       throw new TypeError(\\'not a string\\')\\n     }\\n+    let src = \\'Object.constructor = function () {};\\\\n\\'\\n+    src += \\'return \\' + code + \\';\\\\n\\'\\n+\\n     return vm.runInContext(\\n-      \\'(function () {\"use strict\"; return \\' + code + \\'})()\\',\\n+      \\'(function () {\"use strict\"; \\' + src + \\'})()\\',\\n       this._context,\\n       this._options\\n     )'}}",
            "message_norm":"fix: disallow usage of object.constructor",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2659,
            "vuln_id":"GHSA-pwwm-pwx2-2hw7",
            "cwe_id":"{'CWE-209'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/178e44095141ab805c282f563fb088df1a10b2e2'}",
            "dataset":"osv",
            "summary":"Generation of Error Message Containing Sensitive Information in Snipe-IT Snipe-IT prior to version 5.3.11 is vulnerable to Generation of Error Message Containing Sensitive Information.",
            "published_date":"2022-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/178e44095141ab805c282f563fb088df1a10b2e2",
            "commit_sha":"178e44095141ab805c282f563fb088df1a10b2e2",
            "patch":"SINGLE",
            "chain_ord":"['178e44095141ab805c282f563fb088df1a10b2e2']",
            "before_first_fix_commit":"{'321be4733d3997fc738f0118e1b9af5905f95439'}",
            "last_fix_commit":"178e44095141ab805c282f563fb088df1a10b2e2",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/16\/2022, 02:09:58",
            "message":"Added usleep :(\n\nSigned-off-by: snipe <snipe@snipe.net>",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'app\/Http\/Controllers\/Auth\/ForgotPasswordController.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/178e44095141ab805c282f563fb088df1a10b2e2\/app%2FHttp%2FControllers%2FAuth%2FForgotPasswordController.php', 'patch': \"@@ -87,6 +87,8 @@ public function sendResetLinkEmail(Request $request)\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').'failed with exception: '.$e );\\n         }\\n \\n+        \/\/ Prevent timing attack to enumerate users.\\n+        usleep(500000 + random_int(0, 1500000));\\n \\n         if ($response === \\\\Password::RESET_LINK_SENT) {\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').' WAS found, password reset sent');\"}}",
            "message_norm":"added usleep :(\n\nsigned-off-by: snipe <snipe@snipe.net>",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Auth\/ForgotPasswordController.php'])",
            "num_files":1.0
        },
        {
            "index":3228,
            "vuln_id":"GHSA-w5cr-frph-hw7f",
            "cwe_id":"{'CWE-908'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/djkoloski\/rkyv\/commit\/f141b560523a20557db6540576d153010bd18712', 'https:\/\/github.com\/djkoloski\/rkyv\/commit\/9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e'}",
            "dataset":"osv",
            "summary":"Use of uninitialized buffer in rkyv An issue was discovered in the rkyv crate before 0.6.0 for Rust. When an archive is created via serialization, the archive content may contain uninitialized values of certain parts of a struct.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/djkoloski\/rkyv",
            "commit_href":"https:\/\/github.com\/djkoloski\/rkyv\/commit\/f141b560523a20557db6540576d153010bd18712",
            "commit_sha":"f141b560523a20557db6540576d153010bd18712",
            "patch":"MULTI",
            "chain_ord":"['f141b560523a20557db6540576d153010bd18712', '9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e']",
            "before_first_fix_commit":"{'f141b560523a20557db6540576d153010bd18712'}",
            "last_fix_commit":"9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 14:44:41",
            "message":"Zero aligned memory before resolving",
            "author":"David Koloski",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'rkyv\/src\/ser\/serializers\/std.rs': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rkyv\/rkyv\/raw\/f141b560523a20557db6540576d153010bd18712\/rkyv%2Fsrc%2Fser%2Fserializers%2Fstd.rs', 'patch': '@@ -116,11 +116,11 @@ impl<A: Borrow<AlignedVec> + BorrowMut<AlignedVec>> Serializer for AlignedSerial\\n         let additional = mem::size_of::<T::Archived>();\\n         vec.reserve(additional);\\n         vec.set_len(vec.len() + additional);\\n-        value.resolve(\\n-            pos,\\n-            resolver,\\n-            &mut *vec.as_mut_ptr().add(pos).cast::<mem::MaybeUninit<T::Archived>>()\\n-        );\\n+\\n+        let ptr = vec.as_mut_ptr().add(pos).cast::<mem::MaybeUninit<T::Archived>>();\\n+        core::ptr::write_bytes(ptr, 0, 1);\\n+\\n+        value.resolve(pos, resolver, &mut *ptr);\\n         Ok(pos)\\n     }'}}",
            "message_norm":"zero aligned memory before resolving",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['rkyv\/src\/ser\/serializers\/std.rs'])",
            "num_files":1.0
        },
        {
            "index":2326,
            "vuln_id":"GHSA-m296-j53x-xv95",
            "cwe_id":"{'CWE-362'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/7ab8a264980d23c2ed64e72f4636f38b7381eb39', 'https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
            "dataset":"osv",
            "summary":"Data races in tiny_future `tiny_future` contains a light-weight implementation of `Future`s. The `Future`\ntype it has lacked bound on its `Send` and `Sync` traits.\n\nThis allows for a bug where non-thread safe types such as `Cell` can be used in\n`Future`s and cause data races in concurrent programs.\n\nThe flaw was corrected in commit `c791919` by adding trait bounds to `Future`'s\n`Send` and `Sync`.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/KizzyCode\/tiny_future",
            "commit_href":"https:\/\/github.com\/KizzyCode\/tiny_future\/commit\/7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "commit_sha":"7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "patch":"MULTI",
            "chain_ord":"['c7919199a0f6d1ce0e3c33499d1b37f862c990e4', '7ab8a264980d23c2ed64e72f4636f38b7381eb39']",
            "before_first_fix_commit":"{'c7919199a0f6d1ce0e3c33499d1b37f862c990e4'}",
            "last_fix_commit":"7ab8a264980d23c2ed64e72f4636f38b7381eb39",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/08\/2020, 16:33:00",
            "message":"Require `Send` for underlying types to fix https:\/\/github.com\/KizzyCode\/tiny_future\/issues\/1",
            "author":"Keziah Biermann",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/KizzyCode\/tiny_future-rust\/raw\/7ab8a264980d23c2ed64e72f4636f38b7381eb39\/src%2Flib.rs', 'patch': \"@@ -178,7 +178,7 @@ pub fn time_remaining(timeout_point: std::time::Instant) -> std::time::Duration\\n \/\/\/ Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n \/\/\/ future. The parameter passed to `job` is a function that returns if the future is still waiting\\n \/\/\/ so that `job` can check for cancellation.\\n-pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n+pub fn async_with_state<T: 'static + Send, U: 'static + Send, F: FnOnce(Future<T, U>) + Send + 'static>(job: F, shared_state: U) -> Future<T, U> {\\n \\tuse std::clone::Clone;\\n \\t\\n \\t\/\/ Create future and spawn job\\n@@ -192,7 +192,7 @@ pub fn async_with_state<T: 'static, U: 'static, F: FnOnce(Future<T, U>) + Send +\\n \/\/\/ Creates a future for `job` and runs `job`. The result of `job` will be set as result into the\\n \/\/\/ future. The parameter passed to `job` is a function that returns if the future is still waiting\\n \/\/\/ so that `job` can check for cancellation.\\n-pub fn async<T: 'static, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n+pub fn async<T: 'static + Send, F: FnOnce(Future<T, ()>) + Send + 'static>(job: F) -> Future<T, ()> {\\n \\tasync_with_state(job, ())\\n }\"}}",
            "message_norm":"require `send` for underlying types to fix https:\/\/github.com\/kizzycode\/tiny_future\/issues\/1",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('https:\/\/github.com\/kizzycode\/tiny_future\/issues\/1', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":2329,
            "vuln_id":"GHSA-m2fc-9h5m-29cm",
            "cwe_id":"{'CWE-77'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/acrontum\/filesystem-template\/pull\/14\/commits\/baeb727b60991ad82d9e63ac660883793abc0acc'}",
            "dataset":"osv",
            "summary":"@acrontum\/filesystem-template vulnerable to Command Injection due to fetchRepo API missing sanitization The package @acrontum\/filesystem-template before 0.0.2 is vulnerable to Arbitrary Command Injection due to the fetchRepo API missing sanitization of the href field of external input.",
            "published_date":"2022-08-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/acrontum\/filesystem-template",
            "commit_href":"https:\/\/github.com\/acrontum\/filesystem-template\/pull\/14\/commits\/baeb727b60991ad82d9e63ac660883793abc0acc",
            "commit_sha":"baeb727b60991ad82d9e63ac660883793abc0acc",
            "patch":"SINGLE",
            "chain_ord":"['baeb727b60991ad82d9e63ac660883793abc0acc']",
            "before_first_fix_commit":"{'7883cb4e87c1bd2bf276f741fa8eeaa2af7565c7'}",
            "last_fix_commit":"baeb727b60991ad82d9e63ac660883793abc0acc",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/04\/2022, 17:45:08",
            "message":"remove url from fetch repo\n\ncloses #13",
            "author":"p-mcgowan",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'src\/lib\/file-utils.ts': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/acrontum\/filesystem-template\/raw\/baeb727b60991ad82d9e63ac660883793abc0acc\/src%2Flib%2Ffile-utils.ts', 'patch': \"@@ -162,7 +162,7 @@ export const fetchSource = async (pathlike: string, options?: SourceOptions): Pr\\n \\n   const cache = getCacheDir(url);\\n   if (!sourceCache[cache?.path]) {\\n-    sourceCache[cache?.path] = isRecipeFile(url.pathname) ? fetchRecipe(url, cache, options) : fetchRepo(url, cache, options);\\n+    sourceCache[cache?.path] = isRecipeFile(url.pathname) ? fetchRecipe(url, cache, options) : fetchRepo(cache, options);\\n   } else {\\n     logger.log(`cache hit on ${cache?.path}`);\\n   }\\n@@ -237,7 +237,7 @@ export const fetchRecipe = async (url: URL, cacheInfo: CacheInfo, options?: Sour\\n  *\\n  * @return {Promise<string>}  The repo.\\n  *\/\\n-export const fetchRepo = async (url: URL, cacheInfo: CacheInfo, options?: SourceOptions): Promise<string> => {\\n+export const fetchRepo = async (cacheInfo: CacheInfo, options?: SourceOptions): Promise<string> => {\\n   let branch = cacheInfo.branch;\\n   const { path: repo, origin, repoName } = cacheInfo;\\n \\n@@ -247,7 +247,7 @@ export const fetchRepo = async (url: URL, cacheInfo: CacheInfo, options?: Source\\n     return repo;\\n   }\\n \\n-  logger.debug({ url, branch, repo, origin });\\n+  logger.debug({ branch, repo, origin });\\n   logger.info(`will clone ${branch ? `${logger.blu(branch)} of ` : ''}${logger.ylw(origin)} into ${logger.grn(repoName)}`);\\n \\n   const cwd = repo;\"}}",
            "message_norm":"remove url from fetch repo\n\ncloses #13",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('#13', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib\/file-utils.ts'])",
            "num_files":1.0
        },
        {
            "index":2338,
            "vuln_id":"GHSA-m3f9-w3p3-p669",
            "cwe_id":"{'CWE-787', 'CWE-131'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/efea03b38fb8d3b81762237dc85e579cc5fc6e87'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `QuantizedMul` ### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedMul` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\ny = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\nmin_x = tf.constant([], dtype=tf.float32)\nmax_x = tf.constant([], dtype=tf.float32)\nmin_y = tf.constant([], dtype=tf.float32)\nmax_y = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/87cf4d3ea9949051e50ca3f071fc909538a51cd0\/tensorflow\/core\/kernels\/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc \nconst float min_x = context->input(2).flat<float>()(0);\nconst float max_x = context->input(3).flat<float>()(0);\nconst float min_y = context->input(4).flat<float>()(0);\nconst float max_y = context->input(5).flat<float>()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat<T>()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [efea03b38fb8d3b81762237dc85e579cc5fc6e87](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/efea03b38fb8d3b81762237dc85e579cc5fc6e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/efea03b38fb8d3b81762237dc85e579cc5fc6e87",
            "commit_sha":"efea03b38fb8d3b81762237dc85e579cc5fc6e87",
            "patch":"SINGLE",
            "chain_ord":"['efea03b38fb8d3b81762237dc85e579cc5fc6e87']",
            "before_first_fix_commit":"{'87cf4d3ea9949051e50ca3f071fc909538a51cd0'}",
            "last_fix_commit":"efea03b38fb8d3b81762237dc85e579cc5fc6e87",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 23:15:46",
            "message":"Validate inputs to `QuantizedMul`\n\nPiperOrigin-RevId: 369756982\nChange-Id: I00d960cc3b9316fd7a86bd37a44e341c96e17624",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 4, 'total': 20}",
            "files":"{'tensorflow\/core\/kernels\/quantized_mul_op.cc': {'additions': 16, 'deletions': 4, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/efea03b38fb8d3b81762237dc85e579cc5fc6e87\/tensorflow%2Fcore%2Fkernels%2Fquantized_mul_op.cc', 'patch': '@@ -284,10 +284,22 @@ class QuantizedMulOp : public OpKernel {\\n   void Compute(OpKernelContext* context) override {\\n     const Tensor& x = context->input(0);\\n     const Tensor& y = context->input(1);\\n-    const float min_x = context->input(2).flat<float>()(0);\\n-    const float max_x = context->input(3).flat<float>()(0);\\n-    const float min_y = context->input(4).flat<float>()(0);\\n-    const float max_y = context->input(5).flat<float>()(0);\\n+    auto& min_x_tensor = context->input(2);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_x_tensor.shape()),\\n+                errors::InvalidArgument(\"min_x must be a scalar\"));\\n+    const float min_x = min_x_tensor.flat<float>()(0);\\n+    auto& max_x_tensor = context->input(3);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_x_tensor.shape()),\\n+                errors::InvalidArgument(\"max_x must be a scalar\"));\\n+    const float max_x = max_x_tensor.flat<float>()(0);\\n+    auto& min_y_tensor = context->input(4);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_y_tensor.shape()),\\n+                errors::InvalidArgument(\"min_y must be a scalar\"));\\n+    const float min_y = min_y_tensor.flat<float>()(0);\\n+    auto& max_y_tensor = context->input(5);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_y_tensor.shape()),\\n+                errors::InvalidArgument(\"max_y must be a scalar\"));\\n+    const float max_y = max_y_tensor.flat<float>()(0);\\n \\n     BCast bcast(BCast::FromShape(x.shape()), BCast::FromShape(y.shape()));\\n     if (!bcast.IsValid()) {'}}",
            "message_norm":"validate inputs to `quantizedmul`\n\npiperorigin-revid: 369756982\nchange-id: i00d960cc3b9316fd7a86bd37a44e341c96e17624",
            "language":"it",
            "entities":"[('validate', 'ACTION', ''), ('369756982', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_mul_op.cc'])",
            "num_files":1.0
        },
        {
            "index":36,
            "vuln_id":"GHSA-25xj-89g5-fm6h",
            "cwe_id":"{'CWE-532', 'CWE-200'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/hashicorp\/vault\/commit\/87f47c216cf1a28f4054b80cff40de8c9e00e36c', 'https:\/\/github.com\/hashicorp\/vault\/commit\/e52f34772affb69f3239b2cdf6523cb7cfd67a92'}",
            "dataset":"osv",
            "summary":"Information Disclosure in HashiCorp Vault HashiCorp Vault and Vault Enterprise before 1.3.6, and 1.4.2 before 1.4.2, insert Sensitive Information into a Log File.",
            "published_date":"2021-05-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/hashicorp\/vault",
            "commit_href":"https:\/\/github.com\/hashicorp\/vault\/commit\/e52f34772affb69f3239b2cdf6523cb7cfd67a92",
            "commit_sha":"e52f34772affb69f3239b2cdf6523cb7cfd67a92",
            "patch":"MULTI",
            "chain_ord":"['e52f34772affb69f3239b2cdf6523cb7cfd67a92', '87f47c216cf1a28f4054b80cff40de8c9e00e36c']",
            "before_first_fix_commit":"{'01a682aa48ede581e12813314e64a75e314e500e'}",
            "last_fix_commit":"87f47c216cf1a28f4054b80cff40de8c9e00e36c",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/19\/2020, 14:07:46",
            "message":"Don't include username or password of proxy env vars when logging them. (#9022)",
            "author":"ncabatoff",
            "comments":null,
            "stats":"{'additions': 27, 'deletions': 7, 'total': 34}",
            "files":"{'command\/server.go': {'additions': 27, 'deletions': 7, 'changes': 34, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hashicorp\/vault\/raw\/e52f34772affb69f3239b2cdf6523cb7cfd67a92\/command%2Fserver.go', 'patch': '@@ -445,9 +445,7 @@ func (c *ServerCommand) runRecoveryMode() int {\\n \\t\\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\\n \\t}\\n \\n-\\tproxyCfg := httpproxy.FromEnvironment()\\n-\\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\\n-\\t\\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\\n+\\tlogProxyEnvironmentVariables(c.logger)\\n \\n \\t\/\/ Initialize the storage backend\\n \\tfactory, exists := c.PhysicalBackends[config.Storage.Type]\\n@@ -684,6 +682,31 @@ func (c *ServerCommand) runRecoveryMode() int {\\n \\treturn 0\\n }\\n \\n+func logProxyEnvironmentVariables(logger hclog.Logger) {\\n+\\tproxyCfg := httpproxy.FromEnvironment()\\n+\\tcfgMap := map[string]string{\\n+\\t\\t\"http_proxy\":  proxyCfg.HTTPProxy,\\n+\\t\\t\"https_proxy\": proxyCfg.HTTPSProxy,\\n+\\t\\t\"no_proxy\":    proxyCfg.NoProxy,\\n+\\t}\\n+\\tfor k, v := range cfgMap {\\n+\\t\\tu, err := url.Parse(v)\\n+\\t\\tif err != nil {\\n+\\t\\t\\t\/\/ Env vars may contain URLs or host:port values.  We only care\\n+\\t\\t\\t\/\/ about the former.\\n+\\t\\t\\tcontinue\\n+\\t\\t}\\n+\\t\\tif _, ok := u.User.Password(); ok {\\n+\\t\\t\\tu.User = url.UserPassword(\"redacted-username\", \"redacted-password\")\\n+\\t\\t} else if user := u.User.Username(); user != \"\" {\\n+\\t\\t\\tu.User = url.User(\"redacted-username\")\\n+\\t\\t}\\n+\\t\\tcfgMap[k] = u.String()\\n+\\t}\\n+\\tlogger.Info(\"proxy environment\", \"http_proxy\", cfgMap[\"http_proxy\"],\\n+\\t\\t\"https_proxy\", cfgMap[\"https_proxy\"], \"no_proxy\", cfgMap[\"no_proxy\"])\\n+}\\n+\\n func (c *ServerCommand) adjustLogLevel(config *server.Config, logLevelWasNotSet bool) (string, error) {\\n \\tvar logLevelString string\\n \\tif config.LogLevel != \"\" && logLevelWasNotSet {\\n@@ -894,10 +917,7 @@ func (c *ServerCommand) Run(args []string) int {\\n \\t\\tvault.DefaultMaxRequestDuration = config.DefaultMaxRequestDuration\\n \\t}\\n \\n-\\t\/\/ log proxy settings\\n-\\tproxyCfg := httpproxy.FromEnvironment()\\n-\\tc.logger.Info(\"proxy environment\", \"http_proxy\", proxyCfg.HTTPProxy,\\n-\\t\\t\"https_proxy\", proxyCfg.HTTPSProxy, \"no_proxy\", proxyCfg.NoProxy)\\n+\\tlogProxyEnvironmentVariables(c.logger)\\n \\n \\t\/\/ If mlockall(2) isn\\'t supported, show a warning. We disable this in dev\\n \\t\/\/ because it is quite scary to see when first using Vault. We also disable'}}",
            "message_norm":"don't include username or password of proxy env vars when logging them. (#9022)",
            "language":"en",
            "entities":"[('password', 'SECWORD', ''), ('#9022', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['command\/server.go'])",
            "num_files":1.0
        },
        {
            "index":525,
            "vuln_id":"GHSA-4xfp-4pfp-89wg",
            "cwe_id":"{'CWE-824'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1071f554dbd09f7e101324d366eec5f4fe5a3ece'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in `RaggedTensorToSparse` ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToSparse`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToSparse(\n  rt_nested_splits=[[0, 38, 0]],\n  rt_dense_values=[])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order.\n\n### Patches\nWe have patched the issue in GitHub commit [1071f554dbd09f7e101324d366eec5f4fe5a3ece](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1071f554dbd09f7e101324d366eec5f4fe5a3ece).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1071f554dbd09f7e101324d366eec5f4fe5a3ece",
            "commit_sha":"1071f554dbd09f7e101324d366eec5f4fe5a3ece",
            "patch":"SINGLE",
            "chain_ord":"['1071f554dbd09f7e101324d366eec5f4fe5a3ece']",
            "before_first_fix_commit":"{'0f387ffa5cc7d30fa1574d12f875ffbb2d1826b4'}",
            "last_fix_commit":"1071f554dbd09f7e101324d366eec5f4fe5a3ece",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 01:23:29",
            "message":"Add missing validation to `RaggedTensorToSparse`.\n\nThere needs to be a check that the splits allow for valid ragged tensors.\n\nPiperOrigin-RevId: 387712169\nChange-Id: I2499175324b82b65d159a260c7f83b98ceb5cc7d",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_sparse_kernel.cc': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1071f554dbd09f7e101324d366eec5f4fe5a3ece\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_sparse_kernel.cc', 'patch': '@@ -21,6 +21,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/register_types.h\"\\n #include \"tensorflow\/core\/framework\/tensor.h\"\\n #include \"tensorflow\/core\/framework\/tensor_shape.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -38,7 +39,8 @@ class RaggedTensorToSparseOp : public OpKernel {\\n     OP_REQUIRES_OK(\\n         context, context->input_list(\"rt_nested_splits\", &rt_nested_splits_in));\\n     const int rt_nested_splits_len = rt_nested_splits_in.size();\\n-    DCHECK_GT(rt_nested_splits_len, 0);  \/\/ Enforced by REGISTER_OP.\\n+    OP_REQUIRES(context, rt_nested_splits_len > 0,\\n+                errors::InvalidArgument(\"rt_nested_splits must be non empty\"));\\n     std::vector<ConstFlatSplits> rt_nested_splits;\\n     rt_nested_splits.reserve(rt_nested_splits_len);\\n     for (int i = 0; i < rt_nested_splits_len; ++i) {\\n@@ -162,6 +164,14 @@ class RaggedTensorToSparseOp : public OpKernel {\\n       if (rt_nested_splits[i](0) != 0) {\\n         return InvalidArgument(\"First value of ragged splits must be 0.\");\\n       }\\n+      for (int j = 1; j < rt_nested_splits[i].size(); ++j) {\\n+        if (rt_nested_splits[i](j) < rt_nested_splits[i](j - 1)) {\\n+          return InvalidArgument(\\n+              \"Ragged splits should be non decreasing, but we got \",\\n+              rt_nested_splits[i](j - 1), \" followed by \",\\n+              rt_nested_splits[i](j));\\n+        }\\n+      }\\n       if (i > 0) {\\n         SPLITS_TYPE last_split =\\n             rt_nested_splits[i - 1](rt_nested_splits[i - 1].size() - 1);'}}",
            "message_norm":"add missing validation to `raggedtensortosparse`.\n\nthere needs to be a check that the splits allow for valid ragged tensors.\n\npiperorigin-revid: 387712169\nchange-id: i2499175324b82b65d159a260c7f83b98ceb5cc7d",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('387712169', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_sparse_kernel.cc'])",
            "num_files":1.0
        },
        {
            "index":3069,
            "vuln_id":"GHSA-v768-w7m9-2vmm",
            "cwe_id":"{'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/578e634b4f1c1c684d4b4294f9e5281b2133b3ed'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in shape inference ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n  \ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.SparseFillEmptyRows(\n  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),\n  values = tf.constant([], shape=[0], dtype=tf.int64),\n  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),\n  default_value = 0)\n```\n  \nThe shape inference [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/ops\/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors.\n\n### Patches \nWe have patched the issue in GitHub commit [578e634b4f1c1c684d4b4294f9e5281b2133b3ed](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/578e634b4f1c1c684d4b4294f9e5281b2133b3ed).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
            "commit_sha":"578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
            "patch":"SINGLE",
            "chain_ord":"['578e634b4f1c1c684d4b4294f9e5281b2133b3ed']",
            "before_first_fix_commit":"{'d7de67733925de196ec8863a33445b73f9562d1d'}",
            "last_fix_commit":"578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:24:08",
            "message":"Prevent a segfault in shape inference due to bad inputs.\n\nPiperOrigin-RevId: 387737970\nChange-Id: Ibd1cf3dbdce1dd2ab47fd633d5c5a57f7d8fb6e9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/ops\/sparse_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/578e634b4f1c1c684d4b4294f9e5281b2133b3ed\/tensorflow%2Fcore%2Fops%2Fsparse_ops.cc', 'patch': '@@ -16,6 +16,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/common_shape_fns.h\"\\n #include \"tensorflow\/core\/framework\/op.h\"\\n #include \"tensorflow\/core\/framework\/shape_inference.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -619,6 +620,8 @@ REGISTER_OP(\"SparseFillEmptyRows\")\\n       DimensionHandle unused_dim;\\n       TF_RETURN_IF_ERROR(c->Merge(c->Dim(input_indices, 1),\\n                                   c->Dim(input_shape, 0), &unused_dim));\\n+      if (c->Value(c->NumElements(input_shape)) == 0)\\n+        return errors::InvalidArgument(\"dense_shape must not be empty\");\\n       ShapeHandle output_indices =\\n           c->Matrix(InferenceContext::kUnknownDim, c->NumElements(input_shape));\\n       ShapeHandle output_values = c->Vector(InferenceContext::kUnknownDim);'}}",
            "message_norm":"prevent a segfault in shape inference due to bad inputs.\n\npiperorigin-revid: 387737970\nchange-id: ibd1cf3dbdce1dd2ab47fd633d5c5a57f7d8fb6e9",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('387737970', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/ops\/sparse_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":5,
            "vuln_id":"GHSA-2363-cqg2-863c",
            "cwe_id":"{'CWE-611'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/hunterhacker\/jdom\/commit\/dd4f3c2fc7893edd914954c73eb577f925a7d361'}",
            "dataset":"osv",
            "summary":"XML External Entity (XXE) Injection in JDOM An XXE issue in SAXBuilder in JDOM through 2.0.6 allows attackers to cause a denial of service via a crafted HTTP request.  At this time there is not released fixed version of JDOM.  As a workaround, to avoid external entities being expanded, one can call `builder.setExpandEntities(false)` and they won't be expanded.",
            "published_date":"2021-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/hunterhacker\/jdom",
            "commit_href":"https:\/\/github.com\/hunterhacker\/jdom\/commit\/dd4f3c2fc7893edd914954c73eb577f925a7d361",
            "commit_sha":"dd4f3c2fc7893edd914954c73eb577f925a7d361",
            "patch":"SINGLE",
            "chain_ord":"['dd4f3c2fc7893edd914954c73eb577f925a7d361']",
            "before_first_fix_commit":"{'1f81562b5cc813bfbacb7e2842b5be17eb34896b'}",
            "last_fix_commit":"dd4f3c2fc7893edd914954c73eb577f925a7d361",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/02\/2021, 03:42:05",
            "message":"Addresses #189 - synchronizes external entity expansion setting",
            "author":"Rolf Lear",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'core\/src\/java\/org\/jdom2\/input\/SAXBuilder.java': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hunterhacker\/jdom\/raw\/dd4f3c2fc7893edd914954c73eb577f925a7d361\/core%2Fsrc%2Fjava%2Forg%2Fjdom2%2Finput%2FSAXBuilder.java', 'patch': '@@ -82,6 +82,7 @@ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\\n import org.jdom2.DocType;\\n import org.jdom2.Document;\\n import org.jdom2.EntityRef;\\n+import org.jdom2.JDOMConstants;\\n import org.jdom2.JDOMException;\\n import org.jdom2.JDOMFactory;\\n import org.jdom2.Verifier;\\n@@ -797,6 +798,11 @@ public void setFastReconfigure(final boolean fastReconfigure) {\\n \\tpublic void setFeature(final String name, final boolean value) {\\n \\t\\t\/\/ Save the specified feature for later.\\n \\t\\tfeatures.put(name, value ? Boolean.TRUE : Boolean.FALSE);\\n+\\t\\tif (JDOMConstants.SAX_FEATURE_EXTERNAL_ENT.equals(name)) {\\n+\\t\\t\\t\/\/ See issue https:\/\/github.com\/hunterhacker\/jdom\/issues\/189\\n+\\t\\t\\t\/\/ And PR https:\/\/github.com\/hunterhacker\/jdom\/pull\/188\\n+\\t\\t\\tsetExpandEntities(value);\\n+\\t\\t}\\n \\t\\tengine = null;\\n \\t}'}}",
            "message_norm":"addresses #189 - synchronizes external entity expansion setting",
            "language":"en",
            "entities":"[('#189', 'ISSUE', ''), ('external entity', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/java\/org\/jdom2\/input\/SAXBuilder.java'])",
            "num_files":1.0
        },
        {
            "index":436,
            "vuln_id":"GHSA-4hvf-hxvg-f67v",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6364463d6f5b6254cac3d6aedf999b6a96225038'}",
            "dataset":"osv",
            "summary":"Read and Write outside of bounds in TensorFlow ### Impact\nAn attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in [the conversion from sparse tensors to dense tensors](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ca6f96b62ad84207fbec580404eaa7dd7403a550\/tensorflow\/lite\/kernels\/internal\/utils\/sparsity_format_converter.cc#L252-L293).\n\n### Patches\nWe have patched the issue in GitHub commit [6364463d6f5b6254cac3d6aedf999b6a96225038](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6364463d6f5b6254cac3d6aedf999b6a96225038).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6364463d6f5b6254cac3d6aedf999b6a96225038",
            "commit_sha":"6364463d6f5b6254cac3d6aedf999b6a96225038",
            "patch":"SINGLE",
            "chain_ord":"['6364463d6f5b6254cac3d6aedf999b6a96225038']",
            "before_first_fix_commit":"{'3e49ff637ad4f05c133d235a568943d19216fa9a'}",
            "last_fix_commit":"6364463d6f5b6254cac3d6aedf999b6a96225038",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/16\/2021, 23:37:14",
            "message":"[lite] Add some safety checks to avoid out of bound access for sparsity format\n\nPiperOrigin-RevId: 416910386\nChange-Id: Ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
            "author":"Karim Nosir",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 7, 'total': 18}",
            "files":"{'tensorflow\/lite\/kernels\/internal\/utils\/sparsity_format_converter.cc': {'additions': 11, 'deletions': 7, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6364463d6f5b6254cac3d6aedf999b6a96225038\/tensorflow%2Flite%2Fkernels%2Finternal%2Futils%2Fsparsity_format_converter.cc', 'patch': '@@ -282,10 +282,12 @@ void FormatConverter<T>::InitSparseToDenseConverter(\\n   block_size_.resize(block_map_.size());\\n   for (int i = 0; i < original_rank; i++) {\\n     if (block_dim < block_map_.size() && block_map_[block_dim] == i) {\\n-      int orig_dim = traversal_order_[original_rank + block_dim];\\n-      block_size_[block_dim] = dense_size[orig_dim];\\n-      blocked_shape_[i] = dense_shape_[i] \/ dense_size[orig_dim];\\n-      block_dim++;\\n+      if (original_rank + block_dim < traversal_order_.size()) {\\n+        int orig_dim = traversal_order_[original_rank + block_dim];\\n+        block_size_[block_dim] = dense_size[orig_dim];\\n+        blocked_shape_[i] = dense_shape_[i] \/ dense_size[orig_dim];\\n+        block_dim++;\\n+      }\\n     } else {\\n       blocked_shape_[i] = dense_shape_[i];\\n     }\\n@@ -328,13 +330,15 @@ void FormatConverter<T>::Populate(const T* src_data, std::vector<int> indices,\\n       Populate(src_data, indices, level + 1, prev_idx * shape_of_level + i,\\n                src_data_ptr, dest_data);\\n     }\\n-  } else {\\n+  } else if (prev_idx + 1 < dim_metadata_[metadata_idx].size()) {\\n     const auto& array_segments = dim_metadata_[metadata_idx];\\n     const auto& array_indices = dim_metadata_[metadata_idx + 1];\\n     for (int i = array_segments[prev_idx]; i < array_segments[prev_idx + 1];\\n          i++) {\\n-      indices[level] = array_indices[i];\\n-      Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);\\n+      if (i < array_indices.size() && level < indices.size()) {\\n+        indices[level] = array_indices[i];\\n+        Populate(src_data, indices, level + 1, i, src_data_ptr, dest_data);\\n+      }\\n     }\\n   }\\n }'}}",
            "message_norm":"[lite] add some safety checks to avoid out of bound access for sparsity format\n\npiperorigin-revid: 416910386\nchange-id: ic0b4dc048dc4b5a6309c572b8c4c9f776e4db60a",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('safety checks', 'SECWORD', ''), ('out of bound access', 'SECWORD', ''), ('416910386', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/internal\/utils\/sparsity_format_converter.cc'])",
            "num_files":1.0
        },
        {
            "index":930,
            "vuln_id":"GHSA-72wf-hwcq-65h9",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/filebrowser\/filebrowser\/commit\/74b7cd8e81840537a8206317344f118093153e8d'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery in Filebrowser A Cross-Site Request Forgery (CSRF) vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim.",
            "published_date":"2022-02-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/filebrowser\/filebrowser",
            "commit_href":"https:\/\/github.com\/filebrowser\/filebrowser\/commit\/74b7cd8e81840537a8206317344f118093153e8d",
            "commit_sha":"74b7cd8e81840537a8206317344f118093153e8d",
            "patch":"SINGLE",
            "chain_ord":"['74b7cd8e81840537a8206317344f118093153e8d']",
            "before_first_fix_commit":"{'6cb51b4eb4751b49e7d3458c4a23589ccf16790b'}",
            "last_fix_commit":"74b7cd8e81840537a8206317344f118093153e8d",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/31\/2021, 16:13:16",
            "message":"fix: security issue in command runner (closes #1621)",
            "author":"Oleg Lobanov",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 6, 'total': 12}",
            "files":"{'http\/commands.go': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/filebrowser\/filebrowser\/raw\/74b7cd8e81840537a8206317344f118093153e8d\/http%2Fcommands.go', 'patch': '@@ -59,19 +59,19 @@ var commandsHandler = withUser(func(w http.ResponseWriter, r *http.Request, d *d\\n \\t\\t}\\n \\t}\\n \\n-\\tif !d.server.EnableExec || !d.user.CanExecute(strings.Split(raw, \" \")[0]) {\\n-\\t\\tif err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { \/\/nolint:govet\\n+\\tcommand, err := runner.ParseCommand(d.settings, raw)\\n+\\tif err != nil {\\n+\\t\\tif err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { \/\/nolint:govet\\n \\t\\t\\twsErr(conn, r, http.StatusInternalServerError, err)\\n \\t\\t}\\n-\\n \\t\\treturn 0, nil\\n \\t}\\n \\n-\\tcommand, err := runner.ParseCommand(d.settings, raw)\\n-\\tif err != nil {\\n-\\t\\tif err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { \/\/nolint:govet\\n+\\tif !d.server.EnableExec || !d.user.CanExecute(command[0]) {\\n+\\t\\tif err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { \/\/nolint:govet\\n \\t\\t\\twsErr(conn, r, http.StatusInternalServerError, err)\\n \\t\\t}\\n+\\n \\t\\treturn 0, nil\\n \\t}'}}",
            "message_norm":"fix: security issue in command runner (closes #1621)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#1621', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['http\/commands.go'])",
            "num_files":1.0
        },
        {
            "index":2162,
            "vuln_id":"GHSA-hxf9-7h4c-f5jv",
            "cwe_id":"{'CWE-200'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b'}",
            "dataset":"osv",
            "summary":"Django-Anymail prone to a timing attack webhooks\/base.py in Anymail (aka django-anymail) before 1.2.1 is prone to a timing attack vulnerability on the WEBHOOK_AUTHORIZATION secret, which allows remote attackers to post arbitrary e-mail tracking events.",
            "published_date":"2018-07-12",
            "chain_len":2,
            "project":"https:\/\/github.com\/anymail\/django-anymail",
            "commit_href":"https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b",
            "commit_sha":"c07998304b4a31df4c61deddcb03d3607a04691b",
            "patch":"MULTI",
            "chain_ord":"['db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'c07998304b4a31df4c61deddcb03d3607a04691b']",
            "before_first_fix_commit":"{'7029298b930620b1655dab2548f72d6640a5905e'}",
            "last_fix_commit":"c07998304b4a31df4c61deddcb03d3607a04691b",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/02\/2018, 19:41:14",
            "message":"Security: prevent timing attack on WEBHOOK_AUTHORIZATION secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n\n(cherry picked from commit db586ede1fbb41dce21310ea28ae15a1cf1286c5)",
            "author":"medmunds",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'anymail\/webhooks\/base.py': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anymail\/django-anymail\/raw\/c07998304b4a31df4c61deddcb03d3607a04691b\/anymail%2Fwebhooks%2Fbase.py', 'patch': '@@ -3,6 +3,7 @@\\n \\n import six\\n from django.http import HttpResponse\\n+from django.utils.crypto import constant_time_compare\\n from django.utils.decorators import method_decorator\\n from django.views.decorators.csrf import csrf_exempt\\n from django.views.generic import View\\n@@ -41,8 +42,13 @@ def __init__(self, **kwargs):\\n     def validate_request(self, request):\\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\\n         if self.basic_auth:\\n-            basic_auth = get_request_basic_auth(request)\\n-            if basic_auth is None or basic_auth not in self.basic_auth:\\n+            request_auth = get_request_basic_auth(request)\\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It\\'s OK that any()\\n+            # can terminate early: we\\'re not trying to protect how many auth strings are allowed,\\n+            # just the contents of each individual auth string.)\\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\\n+                          for allowed_auth in self.basic_auth)\\n+            if not auth_ok:\\n                 # noinspection PyUnresolvedReferences\\n                 raise AnymailWebhookValidationFailure(\\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\\n@@ -78,8 +84,11 @@ def validate_request(self, request):\\n         *All* definitions of this method in the class chain (including mixins)\\n         will be called. There is no need to chain to the superclass.\\n         (See self.run_validators and collect_all_methods.)\\n+\\n+        Security note: use django.utils.crypto.constant_time_compare for string\\n+        comparisons, to avoid exposing your validation to a timing attack.\\n         \"\"\"\\n-        # if request.POST[\\'signature\\'] != expected_signature:\\n+        # if not constant_time_compare(request.POST[\\'signature\\'], expected_signature):\\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\\n         # (else just do nothing)\\n         pass'}}",
            "message_norm":"security: prevent timing attack on webhook_authorization secret\n\nanymail's webhook validation was vulnerable to a timing attack.\nan attacker could have used this to recover your webhook_authorization\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nthere have not been any reports of attempted exploit in the wild. (the\nvulnerability was discovered through code review.) attempts would be\nvisible in http logs as a very large number of 400 responses on\nanymail's webhook urls, or in python error monitoring as a very large\nnumber of anymailwebhookvalidationfailure exceptions.\n\nif you are using anymail's webhooks, you should upgrade to this release.\nin addition, you may want to rotate to a new webhook_authorization\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.\n\n(cherry picked from commit db586ede1fbb41dce21310ea28ae15a1cf1286c5)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attack', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attacker', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('error', 'FLAW', ''), ('upgrade', 'ACTION', ''), ('docs](http:\/\/anymail.readthedocs.io', 'URL', ''), ('exploit', 'SECWORD', ''), ('commit db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'SHA', 'prefix_colon_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['anymail\/webhooks\/base.py'])",
            "num_files":1.0
        },
        {
            "index":284,
            "vuln_id":"GHSA-3p92-886g-qxpq",
            "cwe_id":"{'CWE-201'}",
            "score":5.1,
            "chain":"{'https:\/\/github.com\/soldair\/node-floody\/commit\/6c44722312131f4ac8a1af40f0f861c85efe01b0'}",
            "dataset":"osv",
            "summary":"Remote Memory Exposure in floody Versions of `floody` before 0.1.1 are vulnerable to remote memory exposure.\n\n.write(number)` in the affected `floody` versions passes a number to Buffer constructor, appending a chunk of uninitialized memory.\n\nProof of Concept: \n\n```\nvar f = require('floody')(process.stdout); \nf.write(USERSUPPLIEDINPUT); \n'f.stop();\n\n\n## Recommendation\n\nUpdate to version 0.1.1 or later.",
            "published_date":"2019-06-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/soldair\/node-floody",
            "commit_href":"https:\/\/github.com\/soldair\/node-floody\/commit\/6c44722312131f4ac8a1af40f0f861c85efe01b0",
            "commit_sha":"6c44722312131f4ac8a1af40f0f861c85efe01b0",
            "patch":"SINGLE",
            "chain_ord":"['6c44722312131f4ac8a1af40f0f861c85efe01b0']",
            "before_first_fix_commit":"{'2a150c5552b8ce2f2a12ae4a3fd33882d5827afd'}",
            "last_fix_commit":"6c44722312131f4ac8a1af40f0f861c85efe01b0",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/15\/2016, 13:27:13",
            "message":"adding fix for exposing uninitalized memory found by @chalker",
            "author":"Ryan Day",
            "comments":"{'com_1': {'author': 'ChALkeR', 'datetime': '01\/15\/2016, 20:42:58', 'body': \"POC: `var f = require('floody')(process.stdout); f.write(1000); f.stop();`.\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/soldair\/node-floody\/raw\/6c44722312131f4ac8a1af40f0f861c85efe01b0\/index.js', 'patch': \"@@ -28,7 +28,7 @@ module.exports = function(options){\\n \\n     if(writes.length > windowSize) writes.shift();\\n \\n-    data = data instanceof Buffer ? data : new Buffer(data);\\n+    data = data instanceof Buffer ? data : new Buffer(data+'');\\n     bufLen += data.length;\\n \\n     buf.push(data);\"}}",
            "message_norm":"adding fix for exposing uninitalized memory found by @chalker",
            "language":"en",
            "entities":"[('adding', 'ACTION', ''), ('uninitalized memory', 'SECWORD', ''), ('found', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":688,
            "vuln_id":"GHSA-5rcr-q3rx-j7vr",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/75162b7f2d8ac2b37d17564e9c979ba1bae707e8', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/214dec9461f9acb9a4b9004368d2a81e0c125652'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1062, CVE-2019-1092, CVE-2019-1103, CVE-2019-1106.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/214dec9461f9acb9a4b9004368d2a81e0c125652",
            "commit_sha":"214dec9461f9acb9a4b9004368d2a81e0c125652",
            "patch":"MULTI",
            "chain_ord":"['214dec9461f9acb9a4b9004368d2a81e0c125652', '75162b7f2d8ac2b37d17564e9c979ba1bae707e8']",
            "before_first_fix_commit":"{'12c31f0e83ddc511e57b9aa1e78533899199eb32', 'ba1f4455f921ce5f12091ff8a11c8028c6a64b17'}",
            "last_fix_commit":"75162b7f2d8ac2b37d17564e9c979ba1bae707e8",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/06\/2019, 19:58:34",
            "message":"[CVE-2019-1107] Chakra JIT Type Confusion FinishOptPropOp",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'lib\/Backend\/GlobOptFields.cpp': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/214dec9461f9acb9a4b9004368d2a81e0c125652\/lib%2FBackend%2FGlobOptFields.cpp', 'patch': '@@ -410,6 +410,14 @@ GlobOpt::ProcessFieldKills(IR::Instr *instr, BVSparse<JitArenaAllocator> *bv, bo\\n         if (inGlobOpt)\\n         {\\n             KillObjectHeaderInlinedTypeSyms(this->currentBlock, false);\\n+            if (this->objectTypeSyms)\\n+            {\\n+                if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)\\n+                {\\n+                    this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);\\n+                }\\n+                this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);\\n+            }\\n         }\\n \\n         \/\/ fall through'}}",
            "message_norm":"[cve-2019-1107] chakra jit type confusion finishoptpropop",
            "language":"en",
            "entities":"[('cve-2019-1107', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOptFields.cpp'])",
            "num_files":1.0
        },
        {
            "index":325,
            "vuln_id":"GHSA-3x62-x456-q2vm",
            "cwe_id":"{'CWE-77', 'CWE-78'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/feross\/git-pull-or-clone\/commit\/f9ce092be13cc32e685dfa26e7705e9c6e3108a3'}",
            "dataset":"osv",
            "summary":"OS Command Injection in git-pull-or-clone The package git-pull-or-clone before 2.0.2 is vulnerable to Command Injection due to the use of the --upload-pack feature of git which is also supported for git clone. The source includes the use of the secure child process API spawn(). However, the outpath parameter passed to it may be a command-line argument to the git clone command and result in arbitrary command injection.",
            "published_date":"2022-05-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/feross\/git-pull-or-clone",
            "commit_href":"https:\/\/github.com\/feross\/git-pull-or-clone\/commit\/f9ce092be13cc32e685dfa26e7705e9c6e3108a3",
            "commit_sha":"f9ce092be13cc32e685dfa26e7705e9c6e3108a3",
            "patch":"SINGLE",
            "chain_ord":"['f9ce092be13cc32e685dfa26e7705e9c6e3108a3']",
            "before_first_fix_commit":"{'4f8b9baf295e6d2e5dd987abca820987afb7643c'}",
            "last_fix_commit":"f9ce092be13cc32e685dfa26e7705e9c6e3108a3",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/06\/2022, 10:13:53",
            "message":"fix: fix command injection vector",
            "author":"Liran Tal",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/feross\/git-pull-or-clone\/raw\/f9ce092be13cc32e685dfa26e7705e9c6e3108a3\/index.js', 'patch': \"@@ -28,7 +28,7 @@ function gitPullOrClone (url, outPath, opts, cb) {\\n   function gitClone () {\\n     \/\/ --depth implies --single-branch\\n     const flag = depth < Infinity ? '--depth=' + depth : '--single-branch'\\n-    const args = ['clone', flag, url, outPath]\\n+    const args = ['clone', flag, '--', url, outPath]\\n     debug('git ' + args.join(' '))\\n     spawn('git', args, {}, function (err) {\\n       if (err) err.message += ' (git clone) (' + url + ')'\"}}",
            "message_norm":"fix: fix command injection vector",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2343,
            "vuln_id":"GHSA-m43c-649m-pm48",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/opencv\/opencv\/pull\/9726\/commits\/c58152d94ba878b2d7d76bcac59146312199b9eb'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in OpenCV. In opencv\/modules\/imgcodecs\/src\/utils.cpp, functions FillUniColor and FillUniGray do not check the input length, which can lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Opencv 3.3 (corresponding with OpenCV-Python 3.3.0.9) and earlier.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencv\/opencv",
            "commit_href":"https:\/\/github.com\/opencv\/opencv\/pull\/9726\/commits\/c58152d94ba878b2d7d76bcac59146312199b9eb",
            "commit_sha":"c58152d94ba878b2d7d76bcac59146312199b9eb",
            "patch":"SINGLE",
            "chain_ord":"['c58152d94ba878b2d7d76bcac59146312199b9eb']",
            "before_first_fix_commit":"{'7475d23fec4bb7c7e2b662a0fa022d706dd2b520'}",
            "last_fix_commit":"c58152d94ba878b2d7d76bcac59146312199b9eb",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/27\/2017, 06:04:01",
            "message":"Fix out of bounds write",
            "author":"blendin",
            "comments":"{'com_1': {'author': 'tyomitch', 'datetime': '04\/29\/2019, 11:17:11', 'body': 'CVE-2017-1000450'}}",
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'modules\/imgcodecs\/src\/grfmt_bmp.cpp': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencv\/opencv\/raw\/c58152d94ba878b2d7d76bcac59146312199b9eb\/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_bmp.cpp', 'patch': '@@ -375,6 +375,9 @@ decode_rle4_bad: ;\\n                                                 gray_palette[code] );\\n \\n                         line_end_flag = y - prev_y;\\n+\\n+                        if( y >= m_height )\\n+                            break;\\n                     }\\n                     else if( code > 2 ) \/\/ absolute mode\\n                     {'}}",
            "message_norm":"fix out of bounds write",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bounds write', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/imgcodecs\/src\/grfmt_bmp.cpp'])",
            "num_files":1.0
        },
        {
            "index":2541,
            "vuln_id":"GHSA-p9j6-4pjr-gp48",
            "cwe_id":"{'CWE-22'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/joniles\/mpxj\/commit\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d'}",
            "dataset":"osv",
            "summary":"MPXJ path Traversal vulnerability common\/InputStreamHelper.java in Packwood MPXJ before 8.3.5 allows directory traversal in the zip stream handler flow, leading to the writing of files to arbitrary locations.",
            "published_date":"2020-12-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/joniles\/mpxj",
            "commit_href":"https:\/\/github.com\/joniles\/mpxj\/commit\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "commit_sha":"8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "patch":"SINGLE",
            "chain_ord":"['8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d']",
            "before_first_fix_commit":"{'1eed5f01ac8e49b433e0538bdc079caeda7d6fd7'}",
            "last_fix_commit":"8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2020, 12:13:14",
            "message":"zip slip fix",
            "author":"Jon Iles",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'src\/main\/java\/net\/sf\/mpxj\/common\/InputStreamHelper.java': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/joniles\/mpxj\/raw\/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d\/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fmpxj%2Fcommon%2FInputStreamHelper.java', 'patch': '@@ -114,6 +114,7 @@ public static File writeZipStreamToTempDir(InputStream inputStream) throws IOExc\\n     *\/\\n    private static void processZipStream(File dir, InputStream inputStream) throws IOException\\n    {\\n+      String canonicalDestinationDirPath = dir.getCanonicalPath();\\n       ZipInputStream zip = new ZipInputStream(inputStream);\\n       while (true)\\n       {\\n@@ -124,6 +125,14 @@ private static void processZipStream(File dir, InputStream inputStream) throws I\\n          }\\n \\n          File file = new File(dir, entry.getName());\\n+\\n+         \/\/ https:\/\/snyk.io\/research\/zip-slip-vulnerability\\n+         String canonicalDestinationFile = file.getCanonicalPath();\\n+         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\\n+         {\\n+            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\\n+         }\\n+\\n          if (entry.isDirectory())\\n          {\\n             FileHelper.mkdirsQuietly(file);'}}",
            "message_norm":"zip slip fix",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/net\/sf\/mpxj\/common\/InputStreamHelper.java'])",
            "num_files":1.0
        },
        {
            "index":3194,
            "vuln_id":"GHSA-vxhc-c4qm-647p",
            "cwe_id":"{'CWE-284', 'CWE-863'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/8cc100012d46282799fb19f735a53b7101569377'}",
            "dataset":"osv",
            "summary":"Improper Access Control in Dolibarr In \u201cDolibarr\u201d application, 2.8.1 to 13.0.4 don\u2019t restrict or incorrectly restricts access to a resource from an unauthorized actor. A low privileged attacker can modify the Private Note which only an administrator has rights to do, the affected field is at \u201c\/adherents\/note.php?id=1\u201d endpoint.",
            "published_date":"2021-08-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/Dolibarr\/dolibarr",
            "commit_href":"https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/8cc100012d46282799fb19f735a53b7101569377",
            "commit_sha":"8cc100012d46282799fb19f735a53b7101569377",
            "patch":"SINGLE",
            "chain_ord":"['8cc100012d46282799fb19f735a53b7101569377']",
            "before_first_fix_commit":"{'0271645d8efd5815bbb2d8750c76e8b27ee974be'}",
            "last_fix_commit":"8cc100012d46282799fb19f735a53b7101569377",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2021, 10:50:46",
            "message":"Fix vulnerabiity: External users can set a public note",
            "author":"Laurent Destailleur",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 11, 'total': 24}",
            "files":"{'htdocs\/core\/actions_setnotes.inc.php': {'additions': 13, 'deletions': 11, 'changes': 24, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Dolibarr\/dolibarr\/raw\/8cc100012d46282799fb19f735a53b7101569377\/htdocs%2Fcore%2Factions_setnotes.inc.php', 'patch': \"@@ -67,16 +67,18 @@\\n \\t\\t\\t}\\n \\t\\t}\\n \\t}\\n-} elseif ($action == 'setnote_private' && !empty($permissionnote) && !GETPOST('cancel', 'alpha')) {\\n-\\t\/\/ Set public note\\n-\\tif (empty($action) || !is_object($object) || empty($id)) {\\n-\\t\\tdol_print_error('', 'Include of actions_setnotes.inc.php was done but required variable was not set before');\\n-\\t}\\n-\\tif (empty($object->id)) {\\n-\\t\\t$object->fetch($id); \/\/ Fetch may not be already done\\n-\\t}\\n-\\t$result = $object->update_note(dol_html_entity_decode(GETPOST('note_private', 'restricthtml'), ENT_QUOTES | ENT_HTML5), '_private');\\n-\\tif ($result < 0) {\\n-\\t\\tsetEventMessages($object->error, $object->errors, 'errors');\\n+} elseif ($action == 'setnote_private' && !empty($permissionnote) && !GETPOST('cancel', 'alpha')) {\\t\/\/ Set public note\\n+\\tif (empty($user->socid)) {\\n+\\t\\t\/\/ Private notes (always hidden to external users)\\n+\\t\\tif (empty($action) || !is_object($object) || empty($id)) {\\n+\\t\\t\\tdol_print_error('', 'Include of actions_setnotes.inc.php was done but required variable was not set before');\\n+\\t\\t}\\n+\\t\\tif (empty($object->id)) {\\n+\\t\\t\\t$object->fetch($id); \/\/ Fetch may not be already done\\n+\\t\\t}\\n+\\t\\t$result = $object->update_note(dol_html_entity_decode(GETPOST('note_private', 'restricthtml'), ENT_QUOTES | ENT_HTML5), '_private');\\n+\\t\\tif ($result < 0) {\\n+\\t\\t\\tsetEventMessages($object->error, $object->errors, 'errors');\\n+\\t\\t}\\n \\t}\\n }\"}}",
            "message_norm":"fix vulnerabiity: external users can set a public note",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('vulnerabiity', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['htdocs\/core\/actions_setnotes.inc.php'])",
            "num_files":1.0
        },
        {
            "index":3090,
            "vuln_id":"GHSA-vc2p-r46x-m3vx",
            "cwe_id":"{'CWE-77'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/lettre\/lettre\/pull\/508\/commits\/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b'}",
            "dataset":"osv",
            "summary":"Argument injection in lettre ### Impact\n\nAffected versions of lettre allowed argument injection to the sendmail command. It was possible, using forged to addresses, to pass arbitrary arguments to the sendmail executable.\n\nDepending on the implementation (original sendmail, postfix, exim, etc.) it could be possible in some cases to write email data into abritrary files (using sendmail's logging features).\n\n*NOTE*: This vulnerability only affects the sendmail transport. Others, including smtp, are not affected.\n\n### Fix\n\nThe flaw is corrected by modifying the executed command to stop parsing arguments before passing the destination addresses.\n\n### References\n\n* [RUSTSEC-2020-0069](https:\/\/rustsec.org\/advisories\/RUSTSEC-2020-0069.html)\n* [CVE-2020-28247](https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2020-28247)",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/lettre\/lettre",
            "commit_href":"https:\/\/github.com\/lettre\/lettre\/pull\/508\/commits\/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
            "commit_sha":"bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
            "patch":"SINGLE",
            "chain_ord":"['bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b']",
            "before_first_fix_commit":"{'b187885e70af400d50e3200390306b9bd2109675'}",
            "last_fix_commit":"bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/11\/2020, 15:43:09",
            "message":"fix(transport-sendmail): Stop argument parsing before destination addresses",
            "author":"Alexis Mousset",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/transport\/sendmail\/mod.rs': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/lettre\/lettre\/raw\/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b\/src%2Ftransport%2Fsendmail%2Fmod.rs', 'patch': '@@ -120,6 +120,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());\\n@@ -135,6 +136,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());\\n@@ -150,6 +152,7 @@ impl SendmailTransport {\\n         c.arg(\"-i\")\\n             .arg(\"-f\")\\n             .arg(envelope.from().map(|f| f.as_ref()).unwrap_or(\"\\\\\"\\\\\"\"))\\n+            .arg(\"--\")\\n             .args(envelope.to())\\n             .stdin(Stdio::piped())\\n             .stdout(Stdio::piped());'}}",
            "message_norm":"fix(transport-sendmail): stop argument parsing before destination addresses",
            "language":"fr",
            "entities":"[('fix(transport', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/transport\/sendmail\/mod.rs'])",
            "num_files":1.0
        },
        {
            "index":1182,
            "vuln_id":"GHSA-8c6g-4xc5-w96c",
            "cwe_id":"{'CWE-908'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/ruuda\/claxon\/commit\/8f28ec275e412dd3af4f3cda460605512faf332c'}",
            "dataset":"osv",
            "summary":"Uninitialized memory exposure in claxon An issue was discovered in the claxon crate before 0.4.1 for Rust. Uninitialized memory can be exposed because certain decode buffer sizes are mishandled.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/ruuda\/claxon",
            "commit_href":"https:\/\/github.com\/ruuda\/claxon\/commit\/8f28ec275e412dd3af4f3cda460605512faf332c",
            "commit_sha":"8f28ec275e412dd3af4f3cda460605512faf332c",
            "patch":"SINGLE",
            "chain_ord":"['8f28ec275e412dd3af4f3cda460605512faf332c']",
            "before_first_fix_commit":"{'cd82be35f413940ba446d2a19f10d74b86466487'}",
            "last_fix_commit":"8f28ec275e412dd3af4f3cda460605512faf332c",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/23\/2018, 18:01:40",
            "message":"Fix bug in decoding residuals\n\nA partition order could occur, such that the block size was not a\nmultiple of 2^order. Computation of the number of samples per partition\ndid not account for this case, rounding down due to the bit shift. This\nmeant that we would not fill the entire decode buffer.\n\nClaxon does not zero the decode buffer because it is (should be)\noverwritten anyway, and in the case of a format error, where the buffer\nmight be only partially full, the buffer is not exposed again.\nFurthermore, the way decoding works in most places, is that we fill the\nentire buffer, just by looping to fill it. If the input bitstream does\nnot contain enough data to fill the buffer, then that's a format error.\nIn a few places though, we need to slice up the buffer before decoding\ninto it: for decoding individual channels, and also for decoding\nresiduals, which are split into partitions.\n\nThis particular format error was especially nasty because it did not\ncause a format error down the line. Instead, it caused the buffer to be\nsliced in a way where the slices together did not cover the entire\nbuffer, and so parts of uninitialized memory could remain in the buffer.\n\nThanks a lot to Sergey \"Shnatsel\" Davidoff for reporting this bug,\ntogether with elaborate steps to reproduce that allowed me to pinpoint\nthe cause quickly.",
            "author":"Ruud van Asseldonk",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 6, 'total': 25}",
            "files":"{'src\/subframe.rs': {'additions': 19, 'deletions': 6, 'changes': 25, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ruuda\/claxon\/raw\/8f28ec275e412dd3af4f3cda460605512faf332c\/src%2Fsubframe.rs', 'patch': '@@ -254,35 +254,48 @@ fn decode_residual<R: ReadBytes>(input: &mut Bitstream<R>,\\n     \/\/ most 2^16 - 1 samples in the block. No values have been marked as\\n     \/\/ invalid by the specification though.\\n     let n_partitions = 1u32 << order;\\n-    let n_samples = block_size >> order;\\n+    let n_samples_per_partition = block_size >> order;\\n+\\n+    \/\/ The partitions together must fill the block. If the block size is not a\\n+    \/\/ multiple of 2^order; if we shifted off some bits, then we would not fill\\n+    \/\/ the entire block. Such a partition order is invalid for this block size.\\n+    if block_size & (n_partitions - 1) as u16 != 0 {\\n+        return fmt_err(\"invalid partition order\")\\n+    }\\n+\\n+    \/\/ NOTE: the check above checks that block_size is a multiple of n_partitions\\n+    \/\/ (this works because n_partitions is a power of 2). The check below is\\n+    \/\/ equivalent but more expensive.\\n+    debug_assert_eq!(n_partitions * n_samples_per_partition as u32, block_size as u32);\\n+\\n     let n_warm_up = block_size - buffer.len() as u16;\\n \\n     \/\/ The partition size must be at least as big as the number of warm-up\\n     \/\/ samples, otherwise the size of the first partition is negative.\\n-    if n_warm_up > n_samples {\\n+    if n_warm_up > n_samples_per_partition {\\n         return fmt_err(\"invalid residual\");\\n     }\\n \\n     \/\/ Finally decode the partitions themselves.\\n     match partition_type {\\n         RicePartitionType::Rice => {\\n             let mut start = 0;\\n-            let mut len = n_samples - n_warm_up;\\n+            let mut len = n_samples_per_partition - n_warm_up;\\n             for _ in 0..n_partitions {\\n                 let slice = &mut buffer[start..start + len as usize];\\n                 try!(decode_rice_partition(input, slice));\\n                 start = start + len as usize;\\n-                len = n_samples;\\n+                len = n_samples_per_partition;\\n             }\\n         }\\n         RicePartitionType::Rice2 => {\\n             let mut start = 0;\\n-            let mut len = n_samples - n_warm_up;\\n+            let mut len = n_samples_per_partition - n_warm_up;\\n             for _ in 0..n_partitions {\\n                 let slice = &mut buffer[start..start + len as usize];\\n                 try!(decode_rice2_partition(input, slice));\\n                 start = start + len as usize;\\n-                len = n_samples;\\n+                len = n_samples_per_partition;\\n             }\\n         }\\n     }'}}",
            "message_norm":"fix bug in decoding residuals\n\na partition order could occur, such that the block size was not a\nmultiple of 2^order. computation of the number of samples per partition\ndid not account for this case, rounding down due to the bit shift. this\nmeant that we would not fill the entire decode buffer.\n\nclaxon does not zero the decode buffer because it is (should be)\noverwritten anyway, and in the case of a format error, where the buffer\nmight be only partially full, the buffer is not exposed again.\nfurthermore, the way decoding works in most places, is that we fill the\nentire buffer, just by looping to fill it. if the input bitstream does\nnot contain enough data to fill the buffer, then that's a format error.\nin a few places though, we need to slice up the buffer before decoding\ninto it: for decoding individual channels, and also for decoding\nresiduals, which are split into partitions.\n\nthis particular format error was especially nasty because it did not\ncause a format error down the line. instead, it caused the buffer to be\nsliced in a way where the slices together did not cover the entire\nbuffer, and so parts of uninitialized memory could remain in the buffer.\n\nthanks a lot to sergey \"shnatsel\" davidoff for reporting this bug,\ntogether with elaborate steps to reproduce that allowed me to pinpoint\nthe cause quickly.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('error', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('error', 'FLAW', ''), ('decoding', 'SECWORD', ''), ('decoding', 'SECWORD', ''), ('decoding', 'SECWORD', ''), ('error', 'FLAW', ''), ('error', 'FLAW', ''), ('uninitialized memory', 'SECWORD', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/subframe.rs'])",
            "num_files":1.0
        },
        {
            "index":358,
            "vuln_id":"GHSA-44qp-9wwf-734r",
            "cwe_id":"{'CWE-787', 'CWE-120'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3'}",
            "dataset":"osv",
            "summary":"Heap overflow in Tensorflow ### Impact \nThe [implementation of `SparseCountSparseOutput`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/count_ops.cc#L168-L273) is vulnerable to a heap overflow:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[-1,-1]],\n  values=[2],\n  dense_shape=[1, 1],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
            "commit_sha":"adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
            "patch":"MULTI",
            "chain_ord":"['2b7100d6cdff36aa21010a82269bc05a6d1cc74a', 'adbbabdb0d3abb3cdeac69e38a96de1d678b24b3']",
            "before_first_fix_commit":"{'2b7100d6cdff36aa21010a82269bc05a6d1cc74a'}",
            "last_fix_commit":"adbbabdb0d3abb3cdeac69e38a96de1d678b24b3",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/08\/2021, 03:44:33",
            "message":"Further validate sparse tensor for `SparseCount`: indices must be valid within dense shape.\n\nPiperOrigin-RevId: 414888122\nChange-Id: I4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 17, 'deletions': 3, 'total': 20}",
            "files":"{'tensorflow\/core\/kernels\/count_ops.cc': {'additions': 17, 'deletions': 3, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3\/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -206,6 +206,23 @@ class SparseCount : public OpKernel {\\n     OP_REQUIRES(context, shape.NumElements() > 0,\\n                 errors::InvalidArgument(\\n                     \"The shape argument requires at least one element.\"));\\n+    \/\/ Validate indices: each index must be valid for the corresponding\\n+    \/\/ dimension. This could be possibly done better.\\n+    const auto indices_values = indices.matrix<int64_t>();\\n+    const auto shape_vector = shape.vec<int64_t>();\\n+    int num_values = values.NumElements();  \/\/ same as first dim of indices\\n+    int rank = indices.shape().dim_size(1);\\n+    for (int i = 0; i < num_values; ++i) {\\n+      for (int j = 0; j < rank; ++j) {\\n+        OP_REQUIRES(\\n+            context,\\n+            indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),\\n+            errors::InvalidArgument(\\n+                \"Invalid index value at \", i, \": dimension \", j, \" has value \",\\n+                indices_values(i, j), \" which is not in [0, \", shape_vector(j),\\n+                \") (as given by dense shape \", shape.DebugString()));\\n+      }\\n+    }\\n \\n     if (use_weights) {\\n       OP_REQUIRES(\\n@@ -217,11 +234,8 @@ class SparseCount : public OpKernel {\\n     }\\n \\n     bool is_1d = shape.NumElements() == 1;\\n-    auto shape_vector = shape.flat<int64_t>();\\n     int num_batches = is_1d ? 1 : shape_vector(0);\\n-    int num_values = values.NumElements();\\n \\n-    const auto indices_values = indices.matrix<int64_t>();\\n     const auto values_values = values.flat<T>();\\n     const auto weight_values = weights.flat<W>();'}}",
            "message_norm":"further validate sparse tensor for `sparsecount`: indices must be valid within dense shape.\n\npiperorigin-revid: 414888122\nchange-id: i4552bd74c135ecd4bcb5448acc0a3ce9402d8286",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('414888122', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/count_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":188,
            "vuln_id":"GHSA-338v-3958-8v8r",
            "cwe_id":"{'CWE-362'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/weld\/core\/commit\/6808b11cd6d97c71a2eed754ed4f955acd789086', 'https:\/\/github.com\/weld\/core\/commit\/29fd1107fd30579ad9bb23fae4dc3ba464205745', 'https:\/\/github.com\/weld\/core\/commit\/8e413202fa1af08c09c580f444e4fd16874f9c65'}",
            "dataset":"osv",
            "summary":"Information disclosure in JBoss Weld Race condition in JBoss Weld before 2.2.8 and 3.x before 3.0.0 Alpha3 allows remote attackers to obtain information from a previous conversation via vectors related to a stale thread state.",
            "published_date":"2020-06-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/weld\/core",
            "commit_href":"https:\/\/github.com\/weld\/core\/commit\/6808b11cd6d97c71a2eed754ed4f955acd789086",
            "commit_sha":"6808b11cd6d97c71a2eed754ed4f955acd789086",
            "patch":"MULTI",
            "chain_ord":"['29fd1107fd30579ad9bb23fae4dc3ba464205745', '6808b11cd6d97c71a2eed754ed4f955acd789086', '8e413202fa1af08c09c580f444e4fd16874f9c65']",
            "before_first_fix_commit":"{'6808b11cd6d97c71a2eed754ed4f955acd789086'}",
            "last_fix_commit":"8e413202fa1af08c09c580f444e4fd16874f9c65",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/01\/2014, 16:48:56",
            "message":"WELD-1802 RequestScopedCache - Make sure each request is ended before a new one is started",
            "author":"Jozef Hartinger",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'impl\/src\/main\/java\/org\/jboss\/weld\/context\/cache\/RequestScopedCache.java': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/weld\/core\/raw\/6808b11cd6d97c71a2eed754ed4f955acd789086\/impl%2Fsrc%2Fmain%2Fjava%2Forg%2Fjboss%2Fweld%2Fcontext%2Fcache%2FRequestScopedCache.java', 'patch': '@@ -71,6 +71,8 @@ public void invalidate() {\\n     }\\n \\n     public static void beginRequest() {\\n+        \/\/ if the previous request was not ended properly for some reason, make sure it is ended now\\n+        endRequest();\\n         CACHE.set(new LinkedList<RequestScopedItem>());\\n     }\\n \\n@@ -80,8 +82,8 @@ public static void beginRequest() {\\n      *\/\\n     public static void endRequest() {\\n         final List<RequestScopedItem> result = CACHE.get();\\n-        CACHE.remove();\\n         if (result != null) {\\n+            CACHE.remove();\\n             for (final RequestScopedItem item : result) {\\n                 item.invalidate();\\n             }'}}",
            "message_norm":"weld-1802 requestscopedcache - make sure each request is ended before a new one is started",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['impl\/src\/main\/java\/org\/jboss\/weld\/context\/cache\/RequestScopedCache.java'])",
            "num_files":1.0
        },
        {
            "index":362,
            "vuln_id":"GHSA-4574-qv3w-fcmg",
            "cwe_id":"{'CWE-502'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Codeception\/Codeception\/commit\/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71', 'https:\/\/github.com\/Codeception\/Codeception\/commit\/802a108057d250ee563120eaa5365a519afc0a71'}",
            "dataset":"osv",
            "summary":" Deserialization of Untrusted Data in codeception\/codeception This affects the package codeception\/codeception from 4.0.0 before 4.1.22 and before 3.1.3. The RunProcess class can be leveraged as a gadget to run arbitrary commands on a system that is deserializing user input without validation.",
            "published_date":"2021-09-01",
            "chain_len":2,
            "project":"https:\/\/github.com\/Codeception\/Codeception",
            "commit_href":"https:\/\/github.com\/Codeception\/Codeception\/commit\/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71",
            "commit_sha":"cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71",
            "patch":"MULTI",
            "chain_ord":"['cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71', '802a108057d250ee563120eaa5365a519afc0a71']",
            "before_first_fix_commit":"{'5ea172de7b1b2e61dcdd50d73f8368886c549fb4'}",
            "last_fix_commit":"802a108057d250ee563120eaa5365a519afc0a71",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/06\/2021, 07:46:35",
            "message":"Security: Disable deserialization of RunProcess class (#6241)",
            "author":"Gintautas Miselis",
            "comments":null,
            "stats":"{'additions': 22, 'deletions': 0, 'total': 22}",
            "files":"{'ext\/RunProcess.php': {'additions': 22, 'deletions': 0, 'changes': 22, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Codeception\/Codeception\/raw\/cbce9ea7f4664052fa1ac6b36f5b5a6dbd864d71\/ext%2FRunProcess.php', 'patch': \"@@ -107,4 +107,26 @@ public function stopProcess()\\n         }\\n         $this->processes = [];\\n     }\\n+\\n+    \/**\\n+     * Disable the deserialization of the class to prevent attacker executing\\n+     * code by leveraging the __destruct method.\\n+     *\\n+     * @see https:\/\/owasp.org\/www-community\/vulnerabilities\/PHP_Object_Injection\\n+     *\/\\n+    public function __sleep()\\n+    {\\n+        throw new \\\\BadMethodCallException('Cannot serialize ' . __CLASS__);\\n+    }\\n+\\n+    \/**\\n+     * Disable the deserialization of the class to prevent attacker executing\\n+     * code by leveraging the __destruct method.\\n+     *\\n+     * @see https:\/\/owasp.org\/www-community\/vulnerabilities\/PHP_Object_Injection\\n+     *\/\\n+    public function __wakeup()\\n+    {\\n+        throw new \\\\BadMethodCallException('Cannot unserialize ' . __CLASS__);\\n+    }\\n }\"}}",
            "message_norm":"security: disable deserialization of runprocess class (#6241)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('deserialization', 'SECWORD', ''), ('#6241', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ext\/RunProcess.php'])",
            "num_files":1.0
        },
        {
            "index":1139,
            "vuln_id":"GHSA-85r7-w5mv-c849",
            "cwe_id":"{'CWE-22'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/rack\/rack\/commit\/6f237e4c9fab649d3750482514f0fde76c56ab30'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects rack rack\/file.rb (Rack::File) in Rack 1.5.x before 1.5.2 and 1.4.x before 1.4.5 allows attackers to access arbitrary files outside the intended root directory via a crafted PATH_INFO environment variable, probably a directory traversal vulnerability that is remotely exploitable, aka \"symlink path traversals.\"",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/rack\/rack",
            "commit_href":"https:\/\/github.com\/rack\/rack\/commit\/6f237e4c9fab649d3750482514f0fde76c56ab30",
            "commit_sha":"6f237e4c9fab649d3750482514f0fde76c56ab30",
            "patch":"SINGLE",
            "chain_ord":"['6f237e4c9fab649d3750482514f0fde76c56ab30']",
            "before_first_fix_commit":"{'0cd7e9aa397f8ebb3b8481d67dbac8b4863a7f07'}",
            "last_fix_commit":"6f237e4c9fab649d3750482514f0fde76c56ab30",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2013, 00:25:22",
            "message":"Prevent symlink path traversals\n\n * Closes CVE-2013-0262",
            "author":"James Tucker",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 11, 'total': 17}",
            "files":"{'lib\/rack\/file.rb': {'additions': 6, 'deletions': 11, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rack\/rack\/raw\/6f237e4c9fab649d3750482514f0fde76c56ab30\/lib%2Frack%2Ffile.rb', 'patch': '@@ -41,19 +41,14 @@ def _call(env)\\n       path_info = Utils.unescape(env[\"PATH_INFO\"])\\n       parts = path_info.split SEPS\\n \\n-      parts.inject(0) do |depth, part|\\n-        case part\\n-        when \\'\\', \\'.\\'\\n-          depth\\n-        when \\'..\\'\\n-          return fail(404, \"Not Found\") if depth - 1 < 0\\n-          depth - 1\\n-        else\\n-          depth + 1\\n-        end\\n+      clean = []\\n+\\n+      parts.each do |part|\\n+        next if part.empty? || part == \\'.\\'\\n+        part == \\'..\\' ? clean.pop : clean << part\\n       end\\n \\n-      @path = F.join(@root, *parts)\\n+      @path = F.join(@root, *clean)\\n \\n       available = begin\\n         F.file?(@path) && F.readable?(@path)'}}",
            "message_norm":"prevent symlink path traversals\n\n * closes cve-2013-0262",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('symlink', 'SECWORD', ''), ('path traversals', 'SECWORD', ''), ('cve-2013-0262', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/rack\/file.rb'])",
            "num_files":1.0
        },
        {
            "index":3400,
            "vuln_id":"GHSA-x92h-wmg2-6hp7",
            "cwe_id":"{'CWE-89', 'CWE-79'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/symfony\/symfony\/commit\/944e60f083c3bffbc6a0b5112db127a10a66a8ec'}",
            "dataset":"osv",
            "summary":"Invalid HTTP method overrides allow possible XSS or other attacks in Symfony In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony\/http-foundation.",
            "published_date":"2019-12-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/symfony\/symfony",
            "commit_href":"https:\/\/github.com\/symfony\/symfony\/commit\/944e60f083c3bffbc6a0b5112db127a10a66a8ec",
            "commit_sha":"944e60f083c3bffbc6a0b5112db127a10a66a8ec",
            "patch":"SINGLE",
            "chain_ord":"['944e60f083c3bffbc6a0b5112db127a10a66a8ec']",
            "before_first_fix_commit":"{'b7bdf2ce435b0aeb8edb8349f0456f7ca3d21035'}",
            "last_fix_commit":"944e60f083c3bffbc6a0b5112db127a10a66a8ec",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/02\/2019, 16:28:16",
            "message":"[HttpFoundation] reject invalid method override",
            "author":"Nicolas Grekas",
            "comments":"{'com_1': {'author': 'jirayutza1', 'datetime': '12\/04\/2019, 20:11:46', 'body': '944e60f'}}",
            "stats":"{'additions': 29, 'deletions': 14, 'total': 43}",
            "files":"{'src\/Symfony\/Component\/HttpFoundation\/Request.php': {'additions': 29, 'deletions': 14, 'changes': 43, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/symfony\/symfony\/raw\/944e60f083c3bffbc6a0b5112db127a10a66a8ec\/src%2FSymfony%2FComponent%2FHttpFoundation%2FRequest.php', 'patch': '@@ -1346,22 +1346,37 @@ public function setMethod($method)\\n      *\/\\n     public function getMethod()\\n     {\\n-        if (null === $this->method) {\\n-            $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n-\\n-            if (\\'POST\\' === $this->method) {\\n-                if ($method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\')) {\\n-                    $this->method = strtoupper($method);\\n-                } elseif (self::$httpMethodParameterOverride) {\\n-                    $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n-                    if (\\\\is_string($method)) {\\n-                        $this->method = strtoupper($method);\\n-                    }\\n-                }\\n-            }\\n+        if (null !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n+\\n+        if (\\'POST\\' !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\');\\n+\\n+        if (!$method && self::$httpMethodParameterOverride) {\\n+            $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n+        }\\n+\\n+        if (!\\\\is_string($method)) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = strtoupper($method);\\n+\\n+        if (\\\\in_array($method, [\\'GET\\', \\'HEAD\\', \\'POST\\', \\'PUT\\', \\'DELETE\\', \\'CONNECT\\', \\'OPTIONS\\', \\'PATCH\\', \\'PURGE\\', \\'TRACE\\'], true)) {\\n+            return $this->method = $method;\\n+        }\\n+\\n+        if (!preg_match(\\'\/^[A-Z]++$\/D\\', $method)) {\\n+            throw new SuspiciousOperationException(sprintf(\\'Invalid method override \"%s\".\\', $method));\\n         }\\n \\n-        return $this->method;\\n+        return $this->method = $method;\\n     }\\n \\n     \/**'}}",
            "message_norm":"[httpfoundation] reject invalid method override",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Symfony\/Component\/HttpFoundation\/Request.php'])",
            "num_files":1.0
        },
        {
            "index":1607,
            "vuln_id":"GHSA-cv3f-px9r-54hm",
            "cwe_id":"{'CWE-200'}",
            "score":4.7,
            "chain":"{'https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf'}",
            "dataset":"osv",
            "summary":"Phusion Passenger information disclosure In agent\/Core\/SpawningKit\/Spawner.h in Phusion Passenger 5.1.10 (fixed in Passenger Open Source 5.1.11 and Passenger Enterprise 5.1.10), if Passenger is running as root, it is possible to list the contents of arbitrary files on a system by symlinking a file named REVISION from the application root folder to a file of choice and querying passenger-status --show=xml.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/phusion\/passenger",
            "commit_href":"https:\/\/github.com\/phusion\/passenger\/commit\/4043718264095cde6623c2cbe8c644541036d7bf",
            "commit_sha":"4043718264095cde6623c2cbe8c644541036d7bf",
            "patch":"SINGLE",
            "chain_ord":"['4043718264095cde6623c2cbe8c644541036d7bf']",
            "before_first_fix_commit":"{'a63f1e9cd8148dfaac08b00d74ef2b59bc2c9dd4'}",
            "last_fix_commit":"4043718264095cde6623c2cbe8c644541036d7bf",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/11\/2017, 13:55:07",
            "message":"Disable unused feature.",
            "author":"Daniel Knoppel (Phusion)",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/agent\/Core\/SpawningKit\/Spawner.h': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/phusion\/passenger\/raw\/4043718264095cde6623c2cbe8c644541036d7bf\/src%2Fagent%2FCore%2FSpawningKit%2FSpawner.h', 'patch': '@@ -721,7 +721,6 @@ class Spawner {\\n \\t\\tprepareChroot(info, options);\\n \\t\\tinfo.userSwitching = prepareUserSwitching(options);\\n \\t\\tprepareSwitchingWorkingDirectory(info, options);\\n-\\t\\tinferApplicationInfo(info);\\n \\t\\treturn info;\\n \\t}\\n \\n@@ -775,6 +774,7 @@ class Spawner {\\n \\t\\tassert(info.appRootPathsInsideChroot.back() == info.appRootInsideChroot);\\n \\t}\\n \\n+#ifdef false\\n \\tvoid inferApplicationInfo(SpawnPreparationInfo &info) const {\\n \\t\\tinfo.codeRevision = readFromRevisionFile(info);\\n \\t\\tif (info.codeRevision.empty()) {\\n@@ -817,6 +817,7 @@ class Spawner {\\n \\t\\t\\treturn string();\\n \\t\\t}\\n \\t}\\n+#endif\\n \\n \\tbool shouldLoadShellEnvvars(const Options &options, const SpawnPreparationInfo &preparation) const {\\n \\t\\tif (options.loadShellEnvvars) {'}}",
            "message_norm":"disable unused feature.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/agent\/Core\/SpawningKit\/Spawner.h'])",
            "num_files":1.0
        },
        {
            "index":1931,
            "vuln_id":"GHSA-grvw-q343-58wh",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7e9a2ee60baa95ceb4f48f522f823c812ca90c80', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/95b3e3400afb8fa20743657f3a8057fb451e6f69'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1138, CVE-2019-1217, CVE-2019-1237, CVE-2019-1298.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/95b3e3400afb8fa20743657f3a8057fb451e6f69",
            "commit_sha":"95b3e3400afb8fa20743657f3a8057fb451e6f69",
            "patch":"MULTI",
            "chain_ord":"['95b3e3400afb8fa20743657f3a8057fb451e6f69', '7e9a2ee60baa95ceb4f48f522f823c812ca90c80']",
            "before_first_fix_commit":"{'edf5eeef49168bbcc30dac82f57048ad46988295', 'c5297b86536fbf1a02d27cec28fea3c516e6ab84'}",
            "last_fix_commit":"7e9a2ee60baa95ceb4f48f522f823c812ca90c80",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2019, 15:54:11",
            "message":"[CVE-2019-1300]",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 43, 'deletions': 31, 'total': 74}",
            "files":"{'lib\/Backend\/GlobOpt.cpp': {'additions': 43, 'deletions': 31, 'changes': 74, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/95b3e3400afb8fa20743657f3a8057fb451e6f69\/lib%2FBackend%2FGlobOpt.cpp', 'patch': \"@@ -1167,6 +1167,10 @@ void GlobOpt::InsertValueCompensation(\\n     IR::Instr *insertBeforeInstr = predecessor->GetLastInstr();\\n     Func *const func = insertBeforeInstr->m_func;\\n     bool setLastInstrInPredecessor;\\n+    \/\/ If this is a loop back edge, and the successor has been completed, don't attempt to update its block data.\\n+    \/\/ The update is unnecessary, and the data has likely been freed.\\n+    bool updateSuccessorBlockData = !this->isPerformingLoopBackEdgeCompensation || successor->GetDataUseCount() > 0;\\n+\\n     if(insertBeforeInstr->IsBranchInstr() || insertBeforeInstr->m_opcode == Js::OpCode::BailTarget)\\n     {\\n         \/\/ Don't insert code between the branch and the corresponding ByteCodeUses instructions\\n@@ -1257,29 +1261,33 @@ void GlobOpt::InsertValueCompensation(\\n             \/\/ Merge the head segment length value\\n             Assert(predecessorBlockData.liveVarSyms->Test(predecessorHeadSegmentLengthSym->m_id));\\n             predecessorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n-            successorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n             Value *const predecessorHeadSegmentLengthValue =\\n                 predecessorBlockData.FindValue(predecessorHeadSegmentLengthSym);\\n             Assert(predecessorHeadSegmentLengthValue);\\n             predecessorBlockData.SetValue(predecessorHeadSegmentLengthValue, mergedHeadSegmentLengthSym);\\n-            Value *const mergedHeadSegmentLengthValue = successorBlockData.FindValue(mergedHeadSegmentLengthSym);\\n-            if(mergedHeadSegmentLengthValue)\\n+\\n+            if (updateSuccessorBlockData)\\n             {\\n-                Assert(mergedHeadSegmentLengthValue->GetValueNumber() != predecessorHeadSegmentLengthValue->GetValueNumber());\\n-                if(predecessorHeadSegmentLengthValue->GetValueInfo() != mergedHeadSegmentLengthValue->GetValueInfo())\\n+                successorBlockData.liveVarSyms->Set(mergedHeadSegmentLengthSym->m_id);\\n+                Value *const mergedHeadSegmentLengthValue = successorBlockData.FindValue(mergedHeadSegmentLengthSym);\\n+                if(mergedHeadSegmentLengthValue)\\n                 {\\n-                    mergedHeadSegmentLengthValue->SetValueInfo(\\n-                        ValueInfo::MergeLikelyIntValueInfo(\\n-                            this->alloc,\\n-                            mergedHeadSegmentLengthValue,\\n-                            predecessorHeadSegmentLengthValue,\\n-                            mergedHeadSegmentLengthValue->GetValueInfo()->Type()\\n-                                .Merge(predecessorHeadSegmentLengthValue->GetValueInfo()->Type())));\\n+                    Assert(mergedHeadSegmentLengthValue->GetValueNumber() != predecessorHeadSegmentLengthValue->GetValueNumber());\\n+                    if(predecessorHeadSegmentLengthValue->GetValueInfo() != mergedHeadSegmentLengthValue->GetValueInfo())\\n+                    {\\n+                        mergedHeadSegmentLengthValue->SetValueInfo(\\n+                            ValueInfo::MergeLikelyIntValueInfo(\\n+                                this->alloc,\\n+                                mergedHeadSegmentLengthValue,\\n+                                predecessorHeadSegmentLengthValue,\\n+                                mergedHeadSegmentLengthValue->GetValueInfo()->Type()\\n+                                    .Merge(predecessorHeadSegmentLengthValue->GetValueInfo()->Type())));\\n+                    }\\n+                }\\n+                else\\n+                {\\n+                    successorBlockData.SetValue(CopyValue(predecessorHeadSegmentLengthValue), mergedHeadSegmentLengthSym);\\n                 }\\n-            }\\n-            else\\n-            {\\n-                successorBlockData.SetValue(CopyValue(predecessorHeadSegmentLengthValue), mergedHeadSegmentLengthSym);\\n             }\\n         }\\n \\n@@ -1300,27 +1308,31 @@ void GlobOpt::InsertValueCompensation(\\n             \/\/ Merge the length value\\n             Assert(predecessorBlockData.liveVarSyms->Test(predecessorLengthSym->m_id));\\n             predecessorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n-            successorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n             Value *const predecessorLengthValue = predecessorBlockData.FindValue(predecessorLengthSym);\\n             Assert(predecessorLengthValue);\\n             predecessorBlockData.SetValue(predecessorLengthValue, mergedLengthSym);\\n-            Value *const mergedLengthValue = successorBlockData.FindValue(mergedLengthSym);\\n-            if(mergedLengthValue)\\n+\\n+            if (updateSuccessorBlockData)\\n             {\\n-                Assert(mergedLengthValue->GetValueNumber() != predecessorLengthValue->GetValueNumber());\\n-                if(predecessorLengthValue->GetValueInfo() != mergedLengthValue->GetValueInfo())\\n+                successorBlockData.liveVarSyms->Set(mergedLengthSym->m_id);\\n+                Value *const mergedLengthValue = successorBlockData.FindValue(mergedLengthSym);\\n+                if(mergedLengthValue)\\n                 {\\n-                    mergedLengthValue->SetValueInfo(\\n-                        ValueInfo::MergeLikelyIntValueInfo(\\n-                            this->alloc,\\n-                            mergedLengthValue,\\n-                            predecessorLengthValue,\\n-                            mergedLengthValue->GetValueInfo()->Type().Merge(predecessorLengthValue->GetValueInfo()->Type())));\\n+                    Assert(mergedLengthValue->GetValueNumber() != predecessorLengthValue->GetValueNumber());\\n+                    if(predecessorLengthValue->GetValueInfo() != mergedLengthValue->GetValueInfo())\\n+                    {\\n+                        mergedLengthValue->SetValueInfo(\\n+                            ValueInfo::MergeLikelyIntValueInfo(\\n+                                this->alloc,\\n+                                mergedLengthValue,\\n+                                predecessorLengthValue,\\n+                                mergedLengthValue->GetValueInfo()->Type().Merge(predecessorLengthValue->GetValueInfo()->Type())));\\n+                    }\\n+                }\\n+                else\\n+                {\\n+                    successorBlockData.SetValue(CopyValue(predecessorLengthValue), mergedLengthSym);\\n                 }\\n-            }\\n-            else\\n-            {\\n-                successorBlockData.SetValue(CopyValue(predecessorLengthValue), mergedLengthSym);\\n             }\\n         }\"}}",
            "message_norm":"[cve-2019-1300]",
            "language":"ro",
            "entities":"[('cve-2019-1300', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOpt.cpp'])",
            "num_files":1.0
        },
        {
            "index":684,
            "vuln_id":"GHSA-5r2v-6gm6-vpvh",
            "cwe_id":"{'CWE-200'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945'}",
            "dataset":"osv",
            "summary":"Insecure Permissions in Gogs routes\/api\/v1\/api.go in Gogs 0.11.86 lacks permission checks for routes: deploy keys, collaborators, and hooks.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/gogs\/gogs",
            "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
            "commit_sha":"c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
            "patch":"SINGLE",
            "chain_ord":"['c3af3ff1d0484de3bd789ee6c6e47f35d590e945']",
            "before_first_fix_commit":"{'1592e578ed3ac7190baed6165b093002b931520c'}",
            "last_fix_commit":"c3af3ff1d0484de3bd789ee6c6e47f35d590e945",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2019, 01:36:05",
            "message":"routes\/api: fix permission checks for routes\n\nReported by @ManassehZhou #5764",
            "author":"unknwon",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 5, 'total': 19}",
            "files":"{'routes\/api\/v1\/api.go': {'additions': 14, 'deletions': 5, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/c3af3ff1d0484de3bd789ee6c6e47f35d590e945\/routes%2Fapi%2Fv1%2Fapi.go', 'patch': '@@ -112,6 +112,15 @@ func reqRepoWriter() macaron.Handler {\\n \\t}\\n }\\n \\n+func reqRepoAdmin() macaron.Handler {\\n+\\treturn func(c *context.Context) {\\n+\\t\\tif !c.Repo.IsAdmin() {\\n+\\t\\t\\tc.Error(http.StatusForbidden)\\n+\\t\\t\\treturn\\n+\\t\\t}\\n+\\t}\\n+}\\n+\\n func orgAssignment(args ...bool) macaron.Handler {\\n \\tvar (\\n \\t\\tassignOrg  bool\\n@@ -236,12 +245,12 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tPost(bind(api.CreateHookOption{}), repo.CreateHook)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:id\").Patch(bind(api.EditHookOption{}), repo.EditHook).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteHook)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Group(\"\/collaborators\", func() {\\n \\t\\t\\t\\t\\tm.Get(\"\", repo.ListCollaborators)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:collaborator\").Get(repo.IsCollaborator).Put(bind(api.AddCollaboratorOption{}), repo.AddCollaborator).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteCollaborator)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Get(\"\/raw\/*\", context.RepoRef(), repo.GetRawFile)\\n \\t\\t\\t\\tm.Get(\"\/archive\/*\", repo.GetArchive)\\n \\t\\t\\t\\tm.Get(\"\/forks\", repo.ListForks)\\n@@ -260,7 +269,7 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tPost(bind(api.CreateKeyOption{}), repo.CreateDeployKey)\\n \\t\\t\\t\\t\\tm.Combo(\"\/:id\").Get(repo.GetDeployKey).\\n \\t\\t\\t\\t\\t\\tDelete(repo.DeleteDeploykey)\\n-\\t\\t\\t\\t}, reqAdmin())\\n+\\t\\t\\t\\t}, reqRepoAdmin())\\n \\t\\t\\t\\tm.Group(\"\/issues\", func() {\\n \\t\\t\\t\\t\\tm.Combo(\"\").Get(repo.ListIssues).Post(bind(api.CreateIssueOption{}), repo.CreateIssue)\\n \\t\\t\\t\\t\\tm.Group(\"\/comments\", func() {\\n@@ -300,8 +309,8 @@ func RegisterRoutes(m *macaron.Macaron) {\\n \\t\\t\\t\\t\\t\\tDelete(reqRepoWriter(), repo.DeleteMilestone)\\n \\t\\t\\t\\t})\\n \\n-\\t\\t\\t\\tm.Patch(\"\/issue-tracker\", bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\\n-\\t\\t\\t\\tm.Post(\"\/mirror-sync\", repo.MirrorSync)\\n+\\t\\t\\t\\tm.Patch(\"\/issue-tracker\", reqRepoWriter(), bind(api.EditIssueTrackerOption{}), repo.IssueTracker)\\n+\\t\\t\\t\\tm.Post(\"\/mirror-sync\", reqRepoWriter(), repo.MirrorSync)\\n \\t\\t\\t\\tm.Get(\"\/editorconfig\/:filename\", context.RepoRef(), repo.GetEditorconfig)\\n \\t\\t\\t}, repoAssignment())\\n \\t\\t}, reqToken())'}}",
            "message_norm":"routes\/api: fix permission checks for routes\n\nreported by @manassehzhou #5764",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('permission', 'SECWORD', ''), ('#5764', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['routes\/api\/v1\/api.go'])",
            "num_files":1.0
        },
        {
            "index":1109,
            "vuln_id":"GHSA-8278-88vv-x98r",
            "cwe_id":"{'CWE-502'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/tenable\/integration-jira-cloud\/commit\/f8c2095fd529e664e7fa25403a0a4a85bb3907d0'}",
            "dataset":"osv",
            "summary":"Execution of untrusted code through config file ### Impact\nIt is possible to run arbitrary commands through the yaml.load() method.  This could allow an attacker with local access to the host to run arbitrary code by running the application with a specially crafted YAML configuration file.\n\n### Workarounds\nManually adjust yaml.load() to yaml.safe_load()\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [tenable\/integration-jira-cloud](https:\/\/github.com\/tenable\/integration-jira-cloud\/issues)\n* Email us at [vulnreport@tenable.com](mailto:vulnreport@tenable.com)",
            "published_date":"2021-03-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tenable\/integration-jira-cloud",
            "commit_href":"https:\/\/github.com\/tenable\/integration-jira-cloud\/commit\/f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
            "commit_sha":"f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
            "patch":"SINGLE",
            "chain_ord":"['f8c2095fd529e664e7fa25403a0a4a85bb3907d0']",
            "before_first_fix_commit":"{'fa838db45f1ae5581a47e1965f74919c12488cf5'}",
            "last_fix_commit":"f8c2095fd529e664e7fa25403a0a4a85bb3907d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/04\/2021, 14:58:38",
            "message":"switched yaml.load() to yaml.safe_load() to not load serialized python objects.",
            "author":"Steve McGrath",
            "comments":"{'com_1': {'author': 'rabby28698869', 'datetime': '03\/11\/2021, 03:07:50', 'body': 'f8c2095'}, 'com_2': {'author': 'SteveMcGrath', 'datetime': '03\/11\/2021, 15:23:59', 'body': '?'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tenable_jira\/cli.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tenable\/integration-jira-cloud\/raw\/f8c2095fd529e664e7fa25403a0a4a85bb3907d0\/tenable_jira%2Fcli.py', 'patch': \"@@ -62,7 +62,7 @@ def cli(configfile, observed_since, setup_only=False, troubleshoot=False):\\n     '''\\n     # Load the config, but ensure that any additional fields are additive to the\\n     # basic field set.\\n-    config_from_file = yaml.load(configfile, Loader=yaml.Loader)\\n+    config_from_file = yaml.safe_load(configfile)\\n     fields = config_from_file.pop('custom_fields', list())\\n     config = dict_merge(base_config(), config_from_file)\\n     config['fields'] = config['fields'] + fields\"}}",
            "message_norm":"switched yaml.load() to yaml.safe_load() to not load serialized python objects.",
            "language":"en",
            "entities":"[('serialized', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tenable_jira\/cli.py'])",
            "num_files":1.0
        },
        {
            "index":2574,
            "vuln_id":"GHSA-pgcq-h79j-2f69",
            "cwe_id":"{'CWE-354'}",
            "score":7.0,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a'}",
            "dataset":"osv",
            "summary":"Incomplete validation of shapes in multiple TF ops ### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving\/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-11-10",
            "chain_len":6,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "commit_sha":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "patch":"MULTI",
            "chain_ord":"['579261dcd446385831fe4f7457d802a59685121d', '4d74d8a00b07441cba090a02e0dd9ed385145bf4', '68422b215e618df5ad375bcdc6d2052e9fd3080a', 'da4aad5946be30e5f049920fa076e1f7ef021261', '4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'e7f497570abb6b4ae5af4970620cd880e4c0c904']",
            "before_first_fix_commit":"{'e0214528739cad3bd02fbf2696a793dc342ffb94'}",
            "last_fix_commit":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "chain_ord_pos":6.0,
            "commit_datetime":"10\/20\/2021, 22:41:05",
            "message":"Fix segfault on OOM in Conv2D.\n\nPiperOrigin-RevId: 404655317\nChange-Id: I33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
            "author":"Reed Wanderman-Milne",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'tensorflow\/core\/kernels\/conv_ops.cc': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e7f497570abb6b4ae5af4970620cd880e4c0c904\/tensorflow%2Fcore%2Fkernels%2Fconv_ops.cc', 'patch': '@@ -183,20 +183,29 @@ struct LaunchGrouped {\\n     auto on_shuffled = [&]() { shuffles_completed.DecrementCount(); };\\n \\n     \/\/ Shuffle input into temporary tensor.\\n-    Tensor input_shuffled(input.dtype(), TensorShape(post_shuffle(input)));\\n+    Tensor input_shuffled;\\n+    OP_REQUIRES_OK(\\n+        ctx, ctx->allocate_temp(input.dtype(), TensorShape(post_shuffle(input)),\\n+                                &input_shuffled));\\n     input_shuffled.tensor<T, 5>().device(device, on_shuffled) =\\n         input.shaped<T, 5>(pre_shuffle(input)).shuffle(shuffle);\\n \\n     \/\/ Shuffle filter into temporary tensor.\\n-    Tensor filter_shuffled(filter.dtype(), TensorShape(post_shuffle(filter)));\\n+    Tensor filter_shuffled;\\n+    OP_REQUIRES_OK(ctx, ctx->allocate_temp(filter.dtype(),\\n+                                           TensorShape(post_shuffle(filter)),\\n+                                           &filter_shuffled));\\n     filter_shuffled.tensor<T, 5>().device(device, on_shuffled) =\\n         filter.shaped<T, 5>(pre_shuffle(filter)).shuffle(shuffle);\\n \\n     \/\/ Wait for the completion of input\/filter shuffles.\\n     shuffles_completed.Wait();\\n \\n     \/\/ Write group convolution results into temporary output tensor.\\n-    Tensor output_shuffled(output->dtype(), TensorShape(post_shuffle(*output)));\\n+    Tensor output_shuffled;\\n+    OP_REQUIRES_OK(ctx, ctx->allocate_temp(output->dtype(),\\n+                                           TensorShape(post_shuffle(*output)),\\n+                                           &output_shuffled));\\n \\n     for (int64_t i = 0; i < num_groups; ++i) {\\n       \/\/ TODO(ezhulenev): Run this loop using `parallelFor` (regular parallelFor'}}",
            "message_norm":"fix segfault on oom in conv2d.\n\npiperorigin-revid: 404655317\nchange-id: i33588dbd3f5d0fef980e3c908bf5515a9ee09ce7",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('404655317', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_ops.cc'])",
            "num_files":1.0
        }
    ]
}