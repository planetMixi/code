{
  "schema": {
    "fields": [
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "vuln_id",
        "type": "string"
      },
      {
        "name": "cwe_id",
        "type": "string"
      },
      {
        "name": "score",
        "type": "number"
      },
      {
        "name": "chain",
        "type": "string"
      },
      {
        "name": "dataset",
        "type": "string"
      },
      {
        "name": "summary",
        "type": "string"
      },
      {
        "name": "published_date",
        "type": "string"
      },
      {
        "name": "chain_len",
        "type": "integer"
      },
      {
        "name": "project",
        "type": "string"
      },
      {
        "name": "commit_href",
        "type": "string"
      },
      {
        "name": "commit_sha",
        "type": "string"
      },
      {
        "name": "patch",
        "type": "string"
      },
      {
        "name": "chain_ord",
        "type": "string"
      },
      {
        "name": "before_first_fix_commit",
        "type": "string"
      },
      {
        "name": "last_fix_commit",
        "type": "string"
      },
      {
        "name": "chain_ord_pos",
        "type": "number"
      },
      {
        "name": "commit_datetime",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      },
      {
        "name": "author",
        "type": "string"
      },
      {
        "name": "comments",
        "type": "string"
      },
      {
        "name": "stats",
        "type": "string"
      },
      {
        "name": "files",
        "type": "string"
      },
      {
        "name": "message_norm",
        "type": "string"
      },
      {
        "name": "language",
        "type": "string"
      },
      {
        "name": "entities",
        "type": "string"
      },
      {
        "name": "classification_level_1",
        "type": "string"
      },
      {
        "name": "classification_level_2",
        "type": "string"
      },
      {
        "name": "list_files",
        "type": "string"
      },
      {
        "name": "num_files",
        "type": "number"
      }
    ],
    "primaryKey": [
      "index"
    ],
    "pandas_version": "1.4.0"
  },
  "data": [
    {
      "index": 2811,
      "vuln_id": "GHSA-qr82-2c78-4m8h",
      "cwe_id": "{'CWE-824'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac'}",
      "dataset": "osv",
      "summary": "Reference binding to nullptr in map operations ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  memory_limit=128)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac).\n                       \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac",
      "commit_sha": "532f5c5a547126c634fefd43bbad1dc6417678ac",
      "patch": "SINGLE",
      "chain_ord": "['532f5c5a547126c634fefd43bbad1dc6417678ac']",
      "before_first_fix_commit": "{'a4e138660270e7599793fa438cd7b2fc2ce215a6'}",
      "last_fix_commit": "532f5c5a547126c634fefd43bbad1dc6417678ac",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/30/2021, 05:24:39",
      "message": "Prevent nullptr deref in validation of indexes in map ops.\n\nPiperOrigin-RevId: 387738023\nChange-Id: I83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 6, 'total': 15}",
      "files": "{'tensorflow/core/kernels/map_stage_op.cc': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/532f5c5a547126c634fefd43bbad1dc6417678ac/tensorflow%2Fcore%2Fkernels%2Fmap_stage_op.cc', 'patch': '@@ -210,25 +210,28 @@ class StagingMap : public ResourceBase {\\n                                    const OptionalTuple& tuple)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (tuple[index].has_value()) {\\n-      return Status(errors::InvalidArgument(\\n+      return errors::InvalidArgument(\\n           \"The tensor for index \\'\", index, \"\\' for key \\'\", key.scalar<int64>()(),\\n-          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\"));\\n+          \"\\' was already initialized \\'\", dtypes_.size(), \"\\'.\");\\n     }\\n \\n     return Status::OK();\\n   }\\n \\n   // Check that the indices are strictly ordered\\n   Status check_index_ordering(const Tensor& indices) {\\n+    if (indices.NumElements() == 0) {\\n+      return errors::InvalidArgument(\"Indices are empty\");\\n+    }\\n+\\n     auto findices = indices.flat<int>();\\n \\n     for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {\\n       if (findices(i) < findices(i + 1)) {\\n         continue;\\n       }\\n \\n-      return Status(\\n-          errors::InvalidArgument(\"Indices are not strictly ordered\"));\\n+      return errors::InvalidArgument(\"Indices are not strictly ordered\");\\n     }\\n \\n     return Status::OK();\\n@@ -238,10 +241,10 @@ class StagingMap : public ResourceBase {\\n   Status check_memory_limit(std::size_t bytes)\\n       TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\\n     if (has_memory_limit() && bytes > memory_limit_) {\\n-      return Status(errors::ResourceExhausted(\\n+      return errors::ResourceExhausted(\\n           \"Attempted to insert tensors with combined size of \\'\", bytes,\\n           \"\\' bytes into Staging Area with a memory limit of \\'\", memory_limit_,\\n-          \"\\'.\"));\\n+          \"\\'.\");\\n     }\\n \\n     return Status::OK();'}}",
      "message_norm": "prevent nullptr deref in validation of indexes in map ops.\n\npiperorigin-revid: 387738023\nchange-id: i83d18d36a7b82ffd2a40b5124a4e5b4c72238f27",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('387738023', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/map_stage_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2143,
      "vuln_id": "GHSA-hwch-749c-rv63",
      "cwe_id": "{'CWE-74'}",
      "score": 9.8,
      "chain": "{'https://github.com/github/hubot-scripts/commit/feee5abdb038a229a98969ae443cdb8a61747782'}",
      "dataset": "osv",
      "summary": "Potential Command Injection in hubot-scripts Versions 2.4.3 and earlier of hubot-scripts are vulnerable to a command injection vulnerablity in the `hubot-scripts/package/src/scripts/email.coffee` module.\n\n\n### Mitigating Factors\nThe email script is not enabled by default, it has to be manually added to hubot's list of loaded scripts.\n\n\n## Recommendation\n\nUpdate hubot-scripts to version 2.4.4 or later.",
      "published_date": "2020-08-31",
      "chain_len": 1,
      "project": "https://github.com/github/hubot-scripts",
      "commit_href": "https://github.com/github/hubot-scripts/commit/feee5abdb038a229a98969ae443cdb8a61747782",
      "commit_sha": "feee5abdb038a229a98969ae443cdb8a61747782",
      "patch": "SINGLE",
      "chain_ord": "['feee5abdb038a229a98969ae443cdb8a61747782']",
      "before_first_fix_commit": "{'8f3dd0ab5af14664d317e4925f72aa3f78adb6e9'}",
      "last_fix_commit": "feee5abdb038a229a98969ae443cdb8a61747782",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/26/2013, 19:00:24",
      "message": "Fix code execution issue in email command.",
      "author": "Neal Poole",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 4, 'total': 10}",
      "files": "{'src/scripts/email.coffee': {'additions': 6, 'deletions': 4, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/github/hubot-scripts/raw/feee5abdb038a229a98969ae443cdb8a61747782/src%2Fscripts%2Femail.coffee', 'patch': '@@ -18,16 +18,18 @@\\n \\n util = require \\'util\\'\\n child_process = require \\'child_process\\'\\n-exec = child_process.exec\\n \\n module.exports = (robot) ->\\n   emailTime = null\\n   sendEmail = (recipients, subject, msg, from) ->\\n-    mailCommand = \"\"\"echo \\'#{msg}\\' | mail -s \\'#{subject}\\' -r \\'#{from}\\' \\'#{recipients}\\'\"\"\"\\n-    exec mailCommand, (error, stdout, stderr) ->\\n+    mailArgs = [\\'-s\\', subject, \\'-a\\', \"From: #{from}\", \\'--\\']\\n+    mailArgs = mailArgs.concat recipients\\n+    p = child_process.execFile \\'mail\\', mailArgs, {}, (error, stdout, stderr) ->\\n       util.print \\'stdout: \\' + stdout\\n       util.print \\'stderr: \\' + stderr\\n+    p.stdin.write \"#{msg}\\\\n\"\\n+    p.stdin.end()\\n \\n   robot.respond /email (.*) -s (.*) -m (.*)/i, (msg) ->\\n-    sendEmail msg.match[1], msg.match[2], msg.match[3], msg.message.user.id\\n+    sendEmail msg.match[1].split(\" \"), msg.match[2], msg.match[3], msg.message.user.id\\n     msg.send \"email sent\"'}}",
      "message_norm": "fix code execution issue in email command.",
      "language": "fr",
      "entities": "[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/scripts/email.coffee'])",
      "num_files": 1.0
    },
    {
      "index": 1022,
      "vuln_id": "GHSA-7fc2-rm35-2pp7",
      "cwe_id": "{'CWE-352'}",
      "score": 8.8,
      "chain": "{'https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816', 'https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0'}",
      "dataset": "osv",
      "summary": "IPython vulnerable to cross site request forgery (CSRF) IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.",
      "published_date": "2022-05-17",
      "chain_len": 2,
      "project": "https://github.com/ipython/ipython",
      "commit_href": "https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0",
      "commit_sha": "a05fe052a18810e92d9be8c1185952c13fe4e5b0",
      "patch": "MULTI",
      "chain_ord": "['1415a9710407e7c14900531813c15ba6165f0816', 'a05fe052a18810e92d9be8c1185952c13fe4e5b0']",
      "before_first_fix_commit": "{'6884e8b36dc1e2d59e1d8ddb5e95788728d76e6f'}",
      "last_fix_commit": "a05fe052a18810e92d9be8c1185952c13fe4e5b0",
      "chain_ord_pos": 2.0,
      "commit_datetime": "07/12/2015, 15:36:44",
      "message": "backport origin check for API requests",
      "author": "Min RK",
      "comments": null,
      "stats": "{'additions': 48, 'deletions': 0, 'total': 48}",
      "files": "{'IPython/html/base/handlers.py': {'additions': 48, 'deletions': 0, 'changes': 48, 'status': 'modified', 'raw_url': 'https://github.com/ipython/ipython/raw/a05fe052a18810e92d9be8c1185952c13fe4e5b0/IPython%2Fhtml%2Fbase%2Fhandlers.py', 'patch': '@@ -29,6 +29,10 @@\\n     from http.client import responses\\n except ImportError:\\n     from httplib import responses\\n+try:\\n+    from urllib.parse import urlparse # Py 3\\n+except ImportError:\\n+    from urlparse import urlparse # Py 2\\n \\n from jinja2 import TemplateNotFound\\n from tornado import web\\n@@ -208,6 +212,50 @@ def get_origin(self):\\n             origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\\n         return origin\\n \\n+    def check_origin_api(self):\\n+        \"\"\"Check Origin for cross-site API requests.\\n+        \\n+        Copied from WebSocket with changes:\\n+        \\n+        - allow unspecified host/origin (e.g. scripts)\\n+        \"\"\"\\n+        if self.allow_origin == \\'*\\':\\n+            return True\\n+\\n+        host = self.request.headers.get(\"Host\")\\n+        origin = self.request.headers.get(\"Origin\")\\n+\\n+        # If no header is provided, assume it comes from a script/curl.\\n+        # We are only concerned with cross-site browser stuff here.\\n+        if origin is None or host is None:\\n+            return True\\n+        \\n+        origin = origin.lower()\\n+        origin_host = urlparse(origin).netloc\\n+        \\n+        # OK if origin matches host\\n+        if origin_host == host:\\n+            return True\\n+        \\n+        # Check CORS headers\\n+        if self.allow_origin:\\n+            allow = self.allow_origin == origin\\n+        elif self.allow_origin_pat:\\n+            allow = bool(self.allow_origin_pat.match(origin))\\n+        else:\\n+            # No CORS headers deny the request\\n+            allow = False\\n+        if not allow:\\n+            self.log.warn(\"Blocking Cross Origin API request.  Origin: %s, Host: %s\",\\n+                origin, host,\\n+            )\\n+        return allow\\n+\\n+    def prepare(self):\\n+        if not self.check_origin_api():\\n+            raise web.HTTPError(404)\\n+        return super(IPythonHandler, self).prepare()\\n+\\n     #---------------------------------------------------------------\\n     # template rendering\\n     #---------------------------------------------------------------'}}",
      "message_norm": "backport origin check for api requests",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['IPython/html/base/handlers.py'])",
      "num_files": 1.0
    },
    {
      "index": 2871,
      "vuln_id": "GHSA-r5jw-62xg-j433",
      "cwe_id": "{'CWE-79'}",
      "score": 6.4,
      "chain": "{'https://github.com/kaminari/kaminari/commit/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8'}",
      "dataset": "osv",
      "summary": "Cross-Site Scripting in Kaminari ### Impact\nIn Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1.\n\n### Releases\nThe 1.2.1 gem including the patch has already been released.\nAll past released versions are affected by this vulnerability.\n\n### Workarounds\nApplication developers who can't update the gem can workaround by overriding the `PARAM_KEY_EXCEPT_LIST` constant.\n\n```ruby\nmodule Kaminari::Helpers\n  PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\nend\n```\n\n### Credits\nThanks to Daniel Mircea for finding the issue and sending a patch via GitHub. Also thanks to Aditya Prakash for reporting the vulnerability.",
      "published_date": "2020-05-28",
      "chain_len": 1,
      "project": "https://github.com/kaminari/kaminari",
      "commit_href": "https://github.com/kaminari/kaminari/commit/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
      "commit_sha": "8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
      "patch": "SINGLE",
      "chain_ord": "['8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8']",
      "before_first_fix_commit": "{'04d86ed3f2537aff620941413e5fca254e87aebe'}",
      "last_fix_commit": "8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/21/2020, 21:02:59",
      "message": "Blacklist \"original_script_name\" get param",
      "author": "Daniel Mircea",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'kaminari-core/lib/kaminari/helpers/tags.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/kaminari/kaminari/raw/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8/kaminari-core%2Flib%2Fkaminari%2Fhelpers%2Ftags.rb', 'patch': '@@ -2,7 +2,7 @@\\n \\n module Kaminari\\n   module Helpers\\n-    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze\\n+    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\\n \\n     # A tag stands for an HTML tag inside the paginator.\\n     # Basically, a tag has its own partial template file, so every tag can be'}}",
      "message_norm": "blacklist \"original_script_name\" get param",
      "language": "ca",
      "entities": "[('blacklist', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['kaminari-core/lib/kaminari/helpers/tags.rb'])",
      "num_files": 1.0
    },
    {
      "index": 2807,
      "vuln_id": "GHSA-qr2j-wrhx-4829",
      "cwe_id": "{'CWE-20'}",
      "score": 7.5,
      "chain": "{'https://github.com/ethereum/go-ethereum/commit/106d196ec4a6451efedc60ab15957f231fa85639'}",
      "dataset": "osv",
      "summary": "Improper Input Validation In Go Ethereum (aka geth) before 1.8.14, TraceChain in eth/api_tracer.go does not verify that the end block is after the start block.",
      "published_date": "2021-05-18",
      "chain_len": 1,
      "project": "https://github.com/ethereum/go-ethereum",
      "commit_href": "https://github.com/ethereum/go-ethereum/commit/106d196ec4a6451efedc60ab15957f231fa85639",
      "commit_sha": "106d196ec4a6451efedc60ab15957f231fa85639",
      "patch": "SINGLE",
      "chain_ord": "['106d196ec4a6451efedc60ab15957f231fa85639']",
      "before_first_fix_commit": "{'6d1e292eefa70b5cb76cd03ff61fc6c4550d7c36'}",
      "last_fix_commit": "106d196ec4a6451efedc60ab15957f231fa85639",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/21/2018, 07:48:53",
      "message": "eth: ensure from<to when tracing chain (credits Chen Nan via bugbounty)",
      "author": "Martin Holst Swende",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'eth/api_tracer.go': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/ethereum/go-ethereum/raw/106d196ec4a6451efedc60ab15957f231fa85639/eth%2Fapi_tracer.go', 'patch': '@@ -119,6 +119,9 @@ func (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.Block\\n \\tif to == nil {\\n \\t\\treturn nil, fmt.Errorf(\"end block #%d not found\", end)\\n \\t}\\n+\\tif from.Number().Cmp(to.Number()) >= 0 {\\n+\\t\\treturn nil, fmt.Errorf(\"end block (#%d) needs to come after start block (#%d)\", end, start)\\n+\\t}\\n \\treturn api.traceChain(ctx, from, to, config)\\n }'}}",
      "message_norm": "eth: ensure from<to when tracing chain (credits chen nan via bugbounty)",
      "language": "en",
      "entities": "[('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['eth/api_tracer.go'])",
      "num_files": 1.0
    },
    {
      "index": 400,
      "vuln_id": "GHSA-4c4g-crqm-xrxw",
      "cwe_id": "{'CWE-908'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', 'https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538', 'https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887'}",
      "dataset": "osv",
      "summary": "Use of unitialized value in TFLite ### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast<TfLiteAffineQuantization*>(\n            filter->quantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 3,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
      "commit_sha": "4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
      "patch": "MULTI",
      "chain_ord": "['537bc7c723439b9194a358f64d871dd326c18887', '4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', '8933b8a21280696ab119b63263babdb54c298538']",
      "before_first_fix_commit": "{'e35be978351a8578549d30b6f483825d36dc0f8b'}",
      "last_fix_commit": "8933b8a21280696ab119b63263babdb54c298538",
      "chain_ord_pos": 2.0,
      "commit_datetime": "07/16/2021, 16:59:39",
      "message": "Fix a null pointer exception caused by branching on uninitialized data.\n\nThis is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\n\nPiperOrigin-RevId: 385168337\nChange-Id: I28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 0, 'total': 9}",
      "files": "{'tensorflow/lite/kernels/unidirectional_sequence_lstm.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5/tensorflow%2Flite%2Fkernels%2Funidirectional_sequence_lstm.cc', 'patch': '@@ -62,8 +62,12 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       context,\\n       GetOutputSafe(context, node, lstm::full::kOutputTensor, &output_tensor));\\n \\n+  TF_LITE_ENSURE(context,\\n+                 cell_state->quantization.type != kTfLiteNoQuantization);\\n   auto* cell_state_params =\\n       static_cast<TfLiteAffineQuantization*>(cell_state->quantization.params);\\n+  TF_LITE_ENSURE(context,\\n+                 output_tensor->quantization.type != kTfLiteNoQuantization);\\n   auto* proj_params = static_cast<TfLiteAffineQuantization*>(\\n       output_tensor->quantization.params);\\n   if (cell_clip > 0.0) {\\n@@ -160,6 +164,8 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       TfLiteTensor* intermediate;\\n       TF_LITE_ENSURE_OK(context,\\n                         GetIntermediatesSafe(context, node, i, &intermediate));\\n+      TF_LITE_ENSURE(context,\\n+                     intermediate->quantization.type != kTfLiteNoQuantization);\\n       auto* params = static_cast<TfLiteAffineQuantization*>(\\n           intermediate->quantization.params);\\n       intermediate_scale.push_back(params->scale->data[0]);\\n@@ -174,6 +180,7 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n   // is ignored.\\n   TfLiteTensor* hidden;\\n   TF_LITE_ENSURE_OK(context, GetIntermediatesSafe(context, node, 4, &hidden));\\n+  TF_LITE_ENSURE(context, hidden->quantization.type != kTfLiteNoQuantization);\\n   auto* hidden_params =\\n       static_cast<TfLiteAffineQuantization*>(hidden->quantization.params);\\n   intermediate_scale.push_back(hidden_params->scale->data[0]);\\n@@ -760,6 +767,8 @@ TfLiteStatus PopulatePrecomputedZPTimesWeightsWithBias(TfLiteContext* context,\\n \\n   const TfLiteTensor* intermediate =\\n       &context->tensors[node->intermediates->data[4]];\\n+  TF_LITE_ENSURE(context,\\n+                 intermediate->quantization.type != kTfLiteNoQuantization);\\n   const auto* params =\\n       static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);\\n   const int32_t hidden_zp = params->zero_point->data[0];'}}",
      "message_norm": "fix a null pointer exception caused by branching on uninitialized data.\n\nthis is due to not checking that the params for the quantization exists. if there is no quantization, we should not access the `.params` field.\n\npiperorigin-revid: 385168337\nchange-id: i28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('uninitialized', 'SECWORD', ''), ('385168337', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/unidirectional_sequence_lstm.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2438,
      "vuln_id": "GHSA-mm4f-47ch-f7hx",
      "cwe_id": "{'CWE-77'}",
      "score": 6.3,
      "chain": "{'https://github.com/GuyMograbi/kill-by-port/commit/ea5b1f377e196a4492e05ff070eba8b30b7372c4'}",
      "dataset": "osv",
      "summary": "Arbitrary code execution in kill-by-port This affects the package kill-by-port before 0.0.2. If (attacker-controlled) user input is given to the killByPort function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization.",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/GuyMograbi/kill-by-port",
      "commit_href": "https://github.com/GuyMograbi/kill-by-port/commit/ea5b1f377e196a4492e05ff070eba8b30b7372c4",
      "commit_sha": "ea5b1f377e196a4492e05ff070eba8b30b7372c4",
      "patch": "SINGLE",
      "chain_ord": "['ea5b1f377e196a4492e05ff070eba8b30b7372c4']",
      "before_first_fix_commit": "{'16dcbe264b6b4a5ecf409661b42836dd286fd43f'}",
      "last_fix_commit": "ea5b1f377e196a4492e05ff070eba8b30b7372c4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/24/2021, 14:00:50",
      "message": "fix kill by port",
      "author": "Guy Mograbi",
      "comments": "{'com_1': {'author': 'abergmann', 'datetime': '03/31/2021, 08:07:34', 'body': '[CVE-2021-23363](https://nvd.nist.gov/vuln/detail/CVE-2021-23363) was assigned to this commit.'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/GuyMograbi/kill-by-port/raw/ea5b1f377e196a4492e05ff070eba8b30b7372c4/index.js', 'patch': \"@@ -5,7 +5,7 @@ const exec = require('child_process').execSync\\n exports.killByPort = function (port) {\\n   var processId = null\\n   try {\\n-    processId = exec(`lsof -t -i:${port}`)\\n+    processId = exec(`lsof -t -i:${parseInt(port, 10)}`)\\n   } catch (e) {\\n \\n   }\"}}",
      "message_norm": "fix kill by port",
      "language": "en",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 3080,
      "vuln_id": "GHSA-v89p-5hr2-4rh4",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/6b1250b6ffea7006226dd937e52cf5b353fcfc15', 'https://github.com/chakra-core/ChakraCore/commit/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1131, CVE-2019-1139, CVE-2019-1140, CVE-2019-1141, CVE-2019-1195, CVE-2019-1196.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
      "commit_sha": "bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb",
      "patch": "MULTI",
      "chain_ord": "['bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb', '6b1250b6ffea7006226dd937e52cf5b353fcfc15']",
      "before_first_fix_commit": "{'75162b7f2d8ac2b37d17564e9c979ba1bae707e8', '450a349fda1b153d758a9e01698b977e60870e4c'}",
      "last_fix_commit": "6b1250b6ffea7006226dd937e52cf5b353fcfc15",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/02/2019, 19:08:32",
      "message": "[CVE-2019-1197] Chakra JIT Type Confusion",
      "author": "Michael Holman",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 4, 'total': 15}",
      "files": "{'lib/Backend/GlobOptIntBounds.cpp': {'additions': 11, 'deletions': 4, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/bf52b6cfa96d6395046d0aaf87396cd7ca13f6cb/lib%2FBackend%2FGlobOptIntBounds.cpp', 'patch': '@@ -1278,13 +1278,20 @@ GlobOpt::InvalidateInductionVariables(IR::Instr * instr)\\n     }\\n \\n     // If this is an induction variable, then treat it the way the prepass would have if it had seen\\n-    // the assignment and the resulting change to the value number, and mark it as indeterminate.\\n+    // the assignment and the resulting change to the value number, and mark induction variables\\n+    // for the loop as indeterminate.\\n+    // We need to invalidate all induction variables for the loop, because we might have used the\\n+    // invalidated induction variable to calculate the loopCount, and this now invalid loopCount\\n+    // also impacts bound checks for secondary induction variables\\n     for (Loop * loop = this->currentBlock->loop; loop; loop = loop->parent)\\n     {\\n-        InductionVariable *iv = nullptr;\\n-        if (loop->inductionVariables && loop->inductionVariables->TryGetReference(dstSym->m_id, &iv))\\n+        if (loop->inductionVariables && loop->inductionVariables->ContainsKey(dstSym->m_id))\\n         {\\n-            iv->SetChangeIsIndeterminate();\\n+            for (auto it = loop->inductionVariables->GetIterator(); it.IsValid(); it.MoveNext())\\n+            {\\n+                InductionVariable& inductionVariable = it.CurrentValueReference();\\n+                inductionVariable.SetChangeIsIndeterminate();\\n+            }\\n         }\\n     }\\n }'}}",
      "message_norm": "[cve-2019-1197] chakra jit type confusion",
      "language": "en",
      "entities": "[('cve-2019-1197', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/GlobOptIntBounds.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 1894,
      "vuln_id": "GHSA-gjqc-q9g6-q2j3",
      "cwe_id": "{'CWE-617'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9'}",
      "dataset": "osv",
      "summary": "`CHECK`-failures in binary ops in Tensorflow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [any binary op](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/cwise_ops_common.h#L88-L137) would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved:\n\n```cc\nfunctor::BinaryFunctor<Device, Functor, 1>()(\n    eigen_device, out->template flat<Tout>(),\n    input_0.template flat<Tin>(), input_1.template flat<Tin>(),\n    error_ptr);\n```\nIf `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9](https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
      "commit_sha": "a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
      "patch": "SINGLE",
      "chain_ord": "['a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9']",
      "before_first_fix_commit": "{'c7db81b86b6746b494e5359433aa8e2dd7df25f6'}",
      "last_fix_commit": "a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/12/2021, 08:24:39",
      "message": "Validate real and expected type of arguments to cwise ops.\n\nWithout this validation, it is possible to trigger a `CHECK`-fail denial of service.\n\nThis is a rollforward of a previous commit which was rolled back as it was relying on RTTI. This time we don't use RTTI, we replace `typeid(Tin).name()` with a double function call, `DataTypeString(DataTypeToEnum<Tin>::v())`.\n\nPiperOrigin-RevId: 409340416\nChange-Id: I96080b2796729a3a9b65e7c68307ac276070f2f0",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 0, 'total': 10}",
      "files": "{'tensorflow/core/kernels/cwise_ops_common.h': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9/tensorflow%2Fcore%2Fkernels%2Fcwise_ops_common.h', 'patch': '@@ -87,7 +87,17 @@ class BinaryOp : public BinaryOpShared {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& input_0 = ctx->input(0);\\n+    OP_REQUIRES(ctx, input_0.dtype() == DataTypeToEnum<Tin>::v(),\\n+                errors::InvalidArgument(\\n+                    \"Expected tensor of type \",\\n+                    DataTypeString(DataTypeToEnum<Tin>::v()), \" but got type \",\\n+                    DataTypeString(input_0.dtype())));\\n     const Tensor& input_1 = ctx->input(1);\\n+    OP_REQUIRES(ctx, input_1.dtype() == DataTypeToEnum<Tin>::v(),\\n+                errors::InvalidArgument(\\n+                    \"Expected tensor of type \",\\n+                    DataTypeString(DataTypeToEnum<Tin>::v()), \" but got type \",\\n+                    DataTypeString(input_1.dtype())));\\n     const Device& eigen_device = ctx->eigen_device<Device>();\\n     bool error = false;\\n     bool* const error_ptr = Functor::has_errors ? &error : nullptr;'}}",
      "message_norm": "validate real and expected type of arguments to cwise ops.\n\nwithout this validation, it is possible to trigger a `check`-fail denial of service.\n\nthis is a rollforward of a previous commit which was rolled back as it was relying on rtti. this time we don't use rtti, we replace `typeid(tin).name()` with a double function call, `datatypestring(datatypetoenum<tin>::v())`.\n\npiperorigin-revid: 409340416\nchange-id: i96080b2796729a3a9b65e7c68307ac276070f2f0",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('409340416', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/cwise_ops_common.h'])",
      "num_files": 1.0
    },
    {
      "index": 3267,
      "vuln_id": "GHSA-wf5p-c75w-w3wh",
      "cwe_id": "{'CWE-476'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in TFLite MLIR optimizations ### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\nThis is caused by the MLIR optimization of `L2NormalizeReduceAxis` operator. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:\n\n```cc\nbool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast<ShapedType>().getRank() - 1 ==\n          *axis.getValues<int>().begin() ||\n      *axis.getValues<int>().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d6b57f461b39fd1aa8c1b870f1b974aac3554955](https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n          \n### Attribution              \nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955",
      "commit_sha": "d6b57f461b39fd1aa8c1b870f1b974aac3554955",
      "patch": "SINGLE",
      "chain_ord": "['d6b57f461b39fd1aa8c1b870f1b974aac3554955']",
      "before_first_fix_commit": "{'c26b15e7565e4f50ad6ea25b09127a019ad77c14'}",
      "last_fix_commit": "d6b57f461b39fd1aa8c1b870f1b974aac3554955",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/27/2021, 23:20:45",
      "message": "Prevent nullptr dereference in MLIR TFLite dialect/optimizer.\n\nPiperOrigin-RevId: 387220762\nChange-Id: Id136ef04bb3d36123b4685d316ae81a9ec924d6b",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/compiler/mlir/lite/transforms/optimize.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/d6b57f461b39fd1aa8c1b870f1b974aac3554955/tensorflow%2Fcompiler%2Fmlir%2Flite%2Ftransforms%2Foptimize.cc', 'patch': '@@ -68,6 +68,9 @@ constexpr char kRelu6[] = \"RELU6\";\\n constexpr char kRelu1[] = \"RELU_N1_TO_1\";\\n \\n bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\\n+  if (axis.getNumElements() == 0) {\\n+    return false;\\n+  }\\n   if (sq_op.getType().cast<ShapedType>().getRank() - 1 ==\\n           *axis.getValues<int>().begin() ||\\n       *axis.getValues<int>().begin() == -1) {'}}",
      "message_norm": "prevent nullptr dereference in mlir tflite dialect/optimizer.\n\npiperorigin-revid: 387220762\nchange-id: id136ef04bb3d36123b4685d316ae81a9ec924d6b",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('387220762', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/compiler/mlir/lite/transforms/optimize.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2673,
      "vuln_id": "GHSA-q263-fvxm-m5mw",
      "cwe_id": "{'CWE-908', 'CWE-125'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b'}",
      "dataset": "osv",
      "summary": "Heap out of bounds access in MakeEdge in TensorFlow ### Impact\nUnder certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https://github.com/tensorflow/tensorflow/blob/3616708cb866365301d8e67b43b32b46d94b08a0/tensorflow/core/common_runtime/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:\n\n```cc\n  DataType src_out = src->output_type(output_index);\n  DataType dst_in = dst->input_type(input_index);\n  //...\n```\n\nHowever, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.\n\nIn most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.\n\n### Patches\nWe have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2020-12-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b",
      "commit_sha": "0cc38aaa4064fd9e79101994ce9872c6d91f816b",
      "patch": "SINGLE",
      "chain_ord": "['0cc38aaa4064fd9e79101994ce9872c6d91f816b']",
      "before_first_fix_commit": "{'3616708cb866365301d8e67b43b32b46d94b08a0'}",
      "last_fix_commit": "0cc38aaa4064fd9e79101994ce9872c6d91f816b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/08/2020, 17:31:57",
      "message": "Prevent unitialized memory access in `GraphConstructor::MakeEdge`\n\nThe `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\nPiperOrigin-RevId: 346343288\nChange-Id: I2127da27c2023d27f26efd39afa6c853385cab6f",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 0, 'total': 12}",
      "files": "{'tensorflow/core/common_runtime/graph_constructor.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0cc38aaa4064fd9e79101994ce9872c6d91f816b/tensorflow%2Fcore%2Fcommon_runtime%2Fgraph_constructor.cc', 'patch': '@@ -44,6 +44,7 @@ limitations under the License.\\n #include \"tensorflow/core/lib/gtl/inlined_vector.h\"\\n #include \"tensorflow/core/lib/strings/scanner.h\"\\n #include \"tensorflow/core/lib/strings/str_util.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n #include \"tensorflow/core/platform/logging.h\"\\n #include \"tensorflow/core/platform/macros.h\"\\n #include \"tensorflow/core/public/version.h\"\\n@@ -1425,6 +1426,17 @@ void GraphConstructor::Undo() {\\n \\n Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,\\n                                   int input_index) {\\n+  if (output_index >= src->num_outputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Output \", output_index, \" of node \", src->name(),\\n+        \" does not exist. Node only has \", src->num_outputs(), \" outputs.\");\\n+  }\\n+  if (input_index >= dst->num_inputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Input \", input_index, \" of node \", dst->name(),\\n+        \" does not exist. Node only has \", dst->num_inputs(), \" inputs.\");\\n+  }\\n+\\n   DataType src_out = src->output_type(output_index);\\n   DataType dst_in = dst->input_type(input_index);\\n   if (!TypesCompatible(dst_in, src_out)) {'}}",
      "message_norm": "prevent unitialized memory access in `graphconstructor::makeedge`\n\nthe `makeedge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. however, if this is not the case this results in accessing data out of bounds. because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. however, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\npiperorigin-revid: 346343288\nchange-id: i2127da27c2023d27f26efd39afa6c853385cab6f",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('out of bounds', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('information leakage', 'SECWORD', ''), ('exploits', 'SECWORD', ''), ('346343288', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/common_runtime/graph_constructor.cc'])",
      "num_files": 1.0
    },
    {
      "index": 642,
      "vuln_id": "GHSA-5hj3-vjjf-f5m7",
      "cwe_id": "{'CWE-125'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6'}",
      "dataset": "osv",
      "summary": "Heap OOB in `SdcaOptimizerV2` ### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.SdcaOptimizerV2`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SdcaOptimizerV2(\n  sparse_example_indices=[[1]],\n  sparse_feature_indices=[[1]],\n  sparse_feature_values=[[1.0,2.0]],\n  dense_features=[[1.0]],\n  example_weights=[1.0],\n  example_labels=[],\n  sparse_indices=[1],\n  sparse_weights=[1.0],\n  dense_weights=[[1.0]],\n  example_state_data=[[100.0,100.0,100.0,100.0]],\n  loss_type='logistic_loss',\n  l1=100.0,\n  l2=100.0,\n  num_loss_partitions=1,\n  num_inner_iterations=1,\n  adaptive=True)       \n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of `example_labels` is the same as the number of examples.\n\n### Patches\nWe have patched the issue in GitHub commit [a4e138660270e7599793fa438cd7b2fc2ce215a6](https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6",
      "commit_sha": "a4e138660270e7599793fa438cd7b2fc2ce215a6",
      "patch": "SINGLE",
      "chain_ord": "['a4e138660270e7599793fa438cd7b2fc2ce215a6']",
      "before_first_fix_commit": "{'578e634b4f1c1c684d4b4294f9e5281b2133b3ed'}",
      "last_fix_commit": "a4e138660270e7599793fa438cd7b2fc2ce215a6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/30/2021, 05:24:27",
      "message": "Add remaining validation to `sdca_internal.cc`\n\nPiperOrigin-RevId: 387738010\nChange-Id: I28eedcfd87a53aaf34deb075acea1f8c95470808",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/kernels/sdca_internal.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/a4e138660270e7599793fa438cd7b2fc2ce215a6/tensorflow%2Fcore%2Fkernels%2Fsdca_internal.cc', 'patch': '@@ -380,6 +380,11 @@ Status Examples::Initialize(OpKernelContext* const context,\\n   const Tensor* example_labels_t;\\n   TF_RETURN_IF_ERROR(context->input(\"example_labels\", &example_labels_t));\\n   auto example_labels = example_labels_t->flat<float>();\\n+  if (example_labels.size() != num_examples) {\\n+    return errors::InvalidArgument(\"Expected \", num_examples,\\n+                                   \" example labels but got \",\\n+                                   example_labels.size());\\n+  }\\n \\n   OpInputList dense_features_inputs;\\n   TF_RETURN_IF_ERROR('}}",
      "message_norm": "add remaining validation to `sdca_internal.cc`\n\npiperorigin-revid: 387738010\nchange-id: i28eedcfd87a53aaf34deb075acea1f8c95470808",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('387738010', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sdca_internal.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3452,
      "vuln_id": "GHSA-xjrf-8x4f-43h4",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/spring-projects/spring-framework/commit/9982b4c01a8c7be0961e58b58ed83731c40449ff', 'https://github.com/spring-projects/spring-framework/commit/7a7df6637478607bef0277bf52a4e0a03e20a248', 'https://github.com/spring-projects/spring-framework/commit/f5c9fe69a444607af667911bd4c5074b5b073e7b'}",
      "dataset": "osv",
      "summary": "Improper Neutralization of Input During Web Page Generation in Spring Framework The JavaScriptUtils.javaScriptEscape method in web/util/JavaScriptUtils.java in Spring MVC in Spring Framework before 3.2.2 does not properly escape certain characters, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a (1) line separator or (2) paragraph separator Unicode character or (3) left or (4) right angle bracket.",
      "published_date": "2022-05-05",
      "chain_len": 3,
      "project": "https://github.com/spring-projects/spring-framework",
      "commit_href": "https://github.com/spring-projects/spring-framework/commit/9982b4c01a8c7be0961e58b58ed83731c40449ff",
      "commit_sha": "9982b4c01a8c7be0961e58b58ed83731c40449ff",
      "patch": "MULTI",
      "chain_ord": "['9982b4c01a8c7be0961e58b58ed83731c40449ff', 'f5c9fe69a444607af667911bd4c5074b5b073e7b', '7a7df6637478607bef0277bf52a4e0a03e20a248']",
      "before_first_fix_commit": "{'63bff1f068f0c749f938abacba1d38b7d0ca3cf9'}",
      "last_fix_commit": "7a7df6637478607bef0277bf52a4e0a03e20a248",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/23/2013, 18:35:14",
      "message": "Add BS and VT char escape sequences to JavaScriptUtils\n\nIssue: SPR-9983",
      "author": "Rossen Stoyanchev",
      "comments": null,
      "stats": "{'additions': 14, 'deletions': 7, 'total': 21}",
      "files": "{'spring-web/src/main/java/org/springframework/web/util/JavaScriptUtils.java': {'additions': 14, 'deletions': 7, 'changes': 21, 'status': 'modified', 'raw_url': 'https://github.com/spring-projects/spring-framework/raw/9982b4c01a8c7be0961e58b58ed83731c40449ff/spring-web%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Fweb%2Futil%2FJavaScriptUtils.java', 'patch': '@@ -1,5 +1,5 @@\\n /*\\n- * Copyright 2002-2008 the original author or authors.\\n+ * Copyright 2002-2013 the original author or authors.\\n  *\\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\\n  * you may not use this file except in compliance with the License.\\n@@ -21,21 +21,21 @@\\n  * Escapes based on the JavaScript 1.5 recommendation.\\n  *\\n  * <p>Reference:\\n- * <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Literals#String_Literals\">\\n- * Core JavaScript 1.5 Guide\\n- * </a>\\n+ * <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#String_literals\">\\n+ * JavaScript Guide</a> on Mozilla Developer Network.\\n  *\\n  * @author Juergen Hoeller\\n  * @author Rob Harrop\\n+ * @author Rossen Stoyanchev\\n  * @since 1.1.1\\n  */\\n public class JavaScriptUtils {\\n \\n \\t/**\\n-\\t * Turn special characters into escaped characters conforming to JavaScript.\\n-\\t * Handles complete character set defined in HTML 4.01 recommendation.\\n+\\t * Turn JavaScript special characters into escaped characters.\\n+\\t *\\n \\t * @param input the input string\\n-\\t * @return the escaped string\\n+\\t * @return the string with escaped characters\\n \\t */\\n \\tpublic static String javaScriptEscape(String input) {\\n \\t\\tif (input == null) {\\n@@ -73,6 +73,13 @@ else if (c == \\'\\\\r\\') {\\n \\t\\t\\telse if (c == \\'\\\\f\\') {\\n \\t\\t\\t\\tfiltered.append(\"\\\\\\\\f\");\\n \\t\\t\\t}\\n+\\t\\t\\telse if (c == \\'\\\\b\\') {\\n+\\t\\t\\t\\tfiltered.append(\"\\\\\\\\b\");\\n+\\t\\t\\t}\\n+\\t\\t\\t// No \\'\\\\v\\' in Java, use octal value for VT ascii char\\n+\\t\\t\\telse if (c == \\'\\\\013\\') {\\n+\\t\\t\\t\\tfiltered.append(\"\\\\\\\\v\");\\n+\\t\\t\\t}\\n \\t\\t\\telse {\\n \\t\\t\\t\\tfiltered.append(c);\\n \\t\\t\\t}'}}",
      "message_norm": "add bs and vt char escape sequences to javascriptutils\n\nissue: spr-9983",
      "language": "ca",
      "entities": "[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['spring-web/src/main/java/org/springframework/web/util/JavaScriptUtils.java'])",
      "num_files": 1.0
    },
    {
      "index": 2605,
      "vuln_id": "GHSA-pmpr-55fj-r229",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite's implementation of `SVDF` ### Impact\nThe implementation of the `SVDF` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/7f283ff806b2031f407db64c4d3edcda8fb9f9f5/tensorflow/lite/kernels/svdf.cc#L99-L102):\n\n```cc\nconst int rank = params->rank;\n...\nTF_LITE_ENSURE_EQ(context, num_filters % rank, 0);\n```\n\nAn attacker can craft a model such that `params->rank` would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6841e522a3e7d48706a02e8819836e809f738682](https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682",
      "commit_sha": "6841e522a3e7d48706a02e8819836e809f738682",
      "patch": "SINGLE",
      "chain_ord": "['6841e522a3e7d48706a02e8819836e809f738682']",
      "before_first_fix_commit": "{'7f283ff806b2031f407db64c4d3edcda8fb9f9f5'}",
      "last_fix_commit": "6841e522a3e7d48706a02e8819836e809f738682",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 22:13:03",
      "message": "Prevent division by 0\n\nPiperOrigin-RevId: 370995582\nChange-Id: I670ffaf52d1ff8823ec31ea5f438f9125b402223",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/lite/kernels/svdf.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/6841e522a3e7d48706a02e8819836e809f738682/tensorflow%2Flite%2Fkernels%2Fsvdf.cc', 'patch': '@@ -99,6 +99,7 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n   const int rank = params->rank;\\n   const int batch_size = input->dims->data[0];\\n   const int num_filters = weights_feature->dims->data[0];\\n+  TF_LITE_ENSURE(context, rank != 0);\\n   TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);\\n   const int num_units = num_filters / rank;\\n   const int memory_size = weights_time->dims->data[1];'}}",
      "message_norm": "prevent division by 0\n\npiperorigin-revid: 370995582\nchange-id: i670ffaf52d1ff8823ec31ea5f438f9125b402223",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370995582', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/svdf.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1718,
      "vuln_id": "GHSA-fcwc-p4fc-c5cc",
      "cwe_id": "{'CWE-476'}",
      "score": 7.7,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in `MatrixDiagPartOp` ### Impact\nIf a user does not provide a valid padding value to `tf.raw_ops.MatrixDiagPartOp`, then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagPartV2(\n  input=tf.ones(2,dtype=tf.int32),\n  k=tf.ones(2,dtype=tf.int32),\n  padding_value=[])\n```\n\nAlthough this example is given for `MatrixDiagPartV2`, all versions of the operation are affected.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from.\n\n### Patches\nWe have patched the issue in GitHub commit [482da92095c4d48f8784b1f00dda4f81c28d2988](https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988",
      "commit_sha": "482da92095c4d48f8784b1f00dda4f81c28d2988",
      "patch": "SINGLE",
      "chain_ord": "['482da92095c4d48f8784b1f00dda4f81c28d2988']",
      "before_first_fix_commit": "{'3b4351cc2d8ebf31d28dd78fb2730069d6716ad4'}",
      "last_fix_commit": "482da92095c4d48f8784b1f00dda4f81c28d2988",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/02/2021, 22:07:31",
      "message": "Ensure non-empty padding_value input to tf.raw_ops.MatrixDiagPartV2, if a padding_value is input\n\nPiperOrigin-RevId: 388314614\nChange-Id: If0b51ad58d5d8543a6be6ce8f42ae4755c80d55f",
      "author": "Laura Pak",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 1, 'total': 5}",
      "files": "{'tensorflow/core/kernels/linalg/matrix_diag_op.cc': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/482da92095c4d48f8784b1f00dda4f81c28d2988/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_diag_op.cc', 'patch': '@@ -89,7 +89,10 @@ class MatrixDiagPartOp : public OpKernel {\\n           upper_diag_index = diag_index.flat<int32>()(1);\\n         }\\n       }\\n-      padding_value = context->input(2).flat<T>()(0);\\n+      const Tensor& padding_in = context->input(2);\\n+      OP_REQUIRES(context, padding_in.NumElements() == 1,\\n+                  errors::InvalidArgument(\"Padding must be scalar.\"));\\n+      padding_value = padding_in.flat<T>()(0);\\n     }\\n     const TensorShape& input_shape = input.shape();'}}",
      "message_norm": "ensure non-empty padding_value input to tf.raw_ops.matrixdiagpartv2, if a padding_value is input\n\npiperorigin-revid: 388314614\nchange-id: if0b51ad58d5d8543a6be6ce8f42ae4755c80d55f",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('388314614', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/linalg/matrix_diag_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 955,
      "vuln_id": "GHSA-74qp-233x-p5j8",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/apache/incubator-livy/commit/4d8a912699683b973eee76d4e91447d769a0cb0d'}",
      "dataset": "osv",
      "summary": "Cross-site scripting (XSS) in Apache Livy Livy server version 0.7.0-incubating (only) is vulnerable to a cross site scripting issue in the session name. A malicious user could use this flaw to access logs and results of other users' sessions and run jobs with their privileges. This issue is fixed in Livy 0.7.1-incubating.",
      "published_date": "2021-05-13",
      "chain_len": 1,
      "project": "https://github.com/apache/incubator-livy",
      "commit_href": "https://github.com/apache/incubator-livy/commit/4d8a912699683b973eee76d4e91447d769a0cb0d",
      "commit_sha": "4d8a912699683b973eee76d4e91447d769a0cb0d",
      "patch": "SINGLE",
      "chain_ord": "['4d8a912699683b973eee76d4e91447d769a0cb0d']",
      "before_first_fix_commit": "{'97cf2f75929ef6c152afc468adbead269bd0758f'}",
      "last_fix_commit": "4d8a912699683b973eee76d4e91447d769a0cb0d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/15/2020, 00:25:54",
      "message": "Add html escape to session name\n\n## What changes were proposed in this pull request?\n\nThe PR adds HTML escaping to session names.\n\n## How was this patch tested?\n\nManual test.\n\nAuthor: Marco Gaido <mgaido@apache.org>\n\nCloses #302 from mgaido91/escape_html.",
      "author": "Marco Gaido",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 3, 'total': 10}",
      "files": "{'server/src/main/resources/org/apache/livy/server/ui/static/js/all-sessions.js': {'additions': 7, 'deletions': 3, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/apache/incubator-livy/raw/4d8a912699683b973eee76d4e91447d769a0cb0d/server%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Flivy%2Fserver%2Fui%2Fstatic%2Fjs%2Fall-sessions.js', 'patch': '@@ -15,13 +15,17 @@\\n  * limitations under the License.\\n  */\\n \\n+function escapeHtml(unescapedText) {\\n+  return $(\"<div>\").text(unescapedText).html()\\n+}\\n+\\n function loadSessionsTable(sessions) {\\n   $.each(sessions, function(index, session) {\\n     $(\"#interactive-sessions .sessions-table-body\").append(\\n       \"<tr>\" +\\n         tdWrap(uiLink(\"session/\" + session.id, session.id)) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.kind) +\\n@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {\\n       \"<tr>\" +\\n         tdWrap(session.id) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.state) +\\n@@ -79,4 +83,4 @@ $(document).ready(function () {\\n       $(\"#all-sessions\").append(\\'<h4>No Sessions or Batches have been created yet.</h4>\\');\\n     }\\n   });\\n-});\\n\\\\ No newline at end of file\\n+});'}}",
      "message_norm": "add html escape to session name\n\n## what changes were proposed in this pull request?\n\nthe pr adds html escaping to session names.\n\n## how was this patch tested?\n\nmanual test.\n\nauthor: marco gaido <mgaido@apache.org>\n\ncloses #302 from mgaido91/escape_html.",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/src/main/resources/org/apache/livy/server/ui/static/js/all-sessions.js'])",
      "num_files": 1.0
    },
    {
      "index": 786,
      "vuln_id": "GHSA-68gr-cmcp-g3mj",
      "cwe_id": "{'CWE-22'}",
      "score": 7.5,
      "chain": "{'https://github.com/RetireJS/retire.js/commit/800c8140884eaa5753a49308f560c925fe97b9a5'}",
      "dataset": "osv",
      "summary": "Directory Traversal in lactate A crafted `GET` request can be leveraged to traverse the directory structure of a host using the lactate web server package, and request arbitrary files outside of the specified web root. This allows for a remote attacker to gain access to arbitrary files on the filesystem that the process has access to read.\n\nMitigating factors:\nOnly files that the user running `lactate` has permission to read will be accessible via this vulnerability.\n\n\n[Proof of concept](https://hackerone.com/reports/296645):\nPlease globally install the `lactate` package and `cd` to a directory you wish to serve assets from. Next, run `lactate -p 8081` to start serving files from this location.\n\nThe following cURL request can be used to demonstrate this vulnerability by requesting the target `/etc/passwd` file:\n\n```\ncurl \"http://127.0.0.1:8081/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\"\n```\n```\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\n[...]\n```\n\n\n## Recommendation\n\nAs there is currently no fix for this issue selecting an alternative static web server would be the best choice.",
      "published_date": "2019-06-14",
      "chain_len": 1,
      "project": "https://github.com/RetireJS/retire.js",
      "commit_href": "https://github.com/RetireJS/retire.js/commit/800c8140884eaa5753a49308f560c925fe97b9a5",
      "commit_sha": "800c8140884eaa5753a49308f560c925fe97b9a5",
      "patch": "SINGLE",
      "chain_ord": "['800c8140884eaa5753a49308f560c925fe97b9a5']",
      "before_first_fix_commit": "{'ed3512729af76583b28611a4a1b6a8797d7f074c'}",
      "last_fix_commit": "800c8140884eaa5753a49308f560c925fe97b9a5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/05/2018, 06:47:18",
      "message": "HackerOne Node.js Ecosystem Bug Bounty Program - January 2018 disclosures (#199)",
      "author": "Rafal Janicki",
      "comments": null,
      "stats": "{'additions': 104, 'deletions': 8, 'total': 112}",
      "files": "{'repository/npmrepository.json': {'additions': 104, 'deletions': 8, 'changes': 112, 'status': 'modified', 'raw_url': 'https://github.com/RetireJS/retire.js/raw/800c8140884eaa5753a49308f560c925fe97b9a5/repository%2Fnpmrepository.json', 'patch': '@@ -4461,16 +4461,112 @@\\n         ]\\n       }\\n     ]\\n+  },\\n+  \"fastify\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.38.0\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"CVE\": [\\n+            \"CVE-2018-3711\"\\n+          ],\\n+          \"summary\": \"denial-of-service vulnerability with large JSON payloads\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/303632\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"serve\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"6.4.9\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"CVE\": [\\n+            \"CVE-2018-3712\"\\n+          ],\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/307666\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"augustine\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.2.4\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/296282\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"lactate\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.13.13\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/296645\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"redis-commander\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.4.6\",\\n+        \"severity\": \"low\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Reflected XSS\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/296377\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"featurebook\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.0.33\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/296305\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"serve-here\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"3.2.2\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https://hackerone.com/reports/296254\"\\n+        ]\\n+      }\\n+    ]\\n   }\\n \\n \\n \\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n }'}}",
      "message_norm": "hackerone node.js ecosystem bug bounty program - january 2018 disclosures (#199)",
      "language": "en",
      "entities": "[('bug', 'FLAW', ''), ('#199', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['repository/npmrepository.json'])",
      "num_files": 1.0
    },
    {
      "index": 566,
      "vuln_id": "GHSA-56wv-2wr9-3h9r",
      "cwe_id": "{'CWE-347'}",
      "score": 7.5,
      "chain": "{'https://github.com/AntonKueltz/fastecdsa/commit/e592f106edd5acf6dacedfab2ad16fe6c735c9d1', 'https://github.com/AntonKueltz/fastecdsa/commit/7b64e3efaa806b4daaf73bb5172af3581812f8de', 'https://github.com/AntonKueltz/fastecdsa/commit/4a16daeaf139be20654ef58a9fe4c79dc030458c'}",
      "dataset": "osv",
      "summary": "Improper Verification of Cryptographic Signature in fastecdsa An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",
      "published_date": "2021-10-12",
      "chain_len": 3,
      "project": "https://github.com/AntonKueltz/fastecdsa",
      "commit_href": "https://github.com/AntonKueltz/fastecdsa/commit/e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
      "commit_sha": "e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
      "patch": "MULTI",
      "chain_ord": "['e592f106edd5acf6dacedfab2ad16fe6c735c9d1', '7b64e3efaa806b4daaf73bb5172af3581812f8de', '4a16daeaf139be20654ef58a9fe4c79dc030458c']",
      "before_first_fix_commit": "{'7b64e3efaa806b4daaf73bb5172af3581812f8de'}",
      "last_fix_commit": "4a16daeaf139be20654ef58a9fe4c79dc030458c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/14/2020, 09:15:41",
      "message": "Properly handle the point at infinity",
      "author": "AntonKueltz",
      "comments": null,
      "stats": "{'additions': 50, 'deletions': 1, 'total': 51}",
      "files": "{'src/curveMath.c': {'additions': 50, 'deletions': 1, 'changes': 51, 'status': 'modified', 'raw_url': 'https://github.com/AntonKueltz/fastecdsa/raw/e592f106edd5acf6dacedfab2ad16fe6c735c9d1/src%2FcurveMath.c', 'patch': '@@ -15,7 +15,22 @@ int pointZZ_pEqual(const PointZZ_p * op1, const PointZZ_p * op2) {\\n }\\n \\n \\n+int pointZZ_pIsIdentityElement(const PointZZ_p * op) {\\n+    return mpz_cmp_ui(op->x, 0) == 0 && mpz_cmp_ui(op->y, 0) == 0 ? 1 : 0;\\n+}\\n+\\n+\\n+void pointZZ_pSetToIdentityElement(PointZZ_p * op) {\\n+    mpz_set_ui(op->x, 0);\\n+    mpz_set_ui(op->y, 0);\\n+}\\n+\\n+\\n void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * curve) {\\n+    if(pointZZ_pIsIdentityElement(op)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     mpz_t numer, denom, lambda;\\n     mpz_inits(numer, denom, lambda, NULL);\\n \\n@@ -45,6 +60,35 @@ void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * cu\\n \\n \\n void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2, const CurveZZ_p * curve) {\\n+    // handle identity element cases\\n+    if(pointZZ_pIsIdentityElement(op1) && pointZZ_pIsIdentityElement(op2)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    } else if(pointZZ_pIsIdentityElement(op1)) {\\n+        mpz_set(rop->x, op2->x);\\n+        mpz_set(rop->y, op2->y);\\n+        return;\\n+    } else if(pointZZ_pIsIdentityElement(op2)) {\\n+        mpz_set(rop->x, op1->x);\\n+        mpz_set(rop->y, op1->y);\\n+        return;\\n+    }\\n+\\n+    // use doubling algorithm if points are equal\\n+    if(pointZZ_pEqual(op1, op2)) {\\n+        pointZZ_pDouble(rop, op1, curve);\\n+        return;\\n+    }\\n+\\n+    // check if points sum to identity element\\n+    mpz_t negy;\\n+    mpz_init(negy);\\n+    mpz_sub(negy, curve->p, op2->y);\\n+    if(mpz_cmp(op1->x, op2->x) == 0 && mpz_cmp(op1->y, negy) == 0) {\\n+        mpz_clear(negy);\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n+\\n     mpz_t xdiff, ydiff, lambda;\\n     mpz_inits(xdiff, ydiff, lambda, NULL);\\n \\n@@ -67,11 +111,16 @@ void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2,\\n     mpz_sub(rop->y, rop->y, op1->y);\\n     mpz_mod(rop->y, rop->y, curve->p);\\n \\n-    mpz_clears(xdiff, ydiff, lambda, NULL);\\n+    mpz_clears(negy, xdiff, ydiff, lambda, NULL);\\n }\\n \\n \\n void pointZZ_pMul(PointZZ_p * rop, const PointZZ_p * point, const mpz_t scalar, const CurveZZ_p * curve) {\\n+    // handle the identity element\\n+    if(pointZZ_pIsIdentityElement(point)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     PointZZ_p R0, R1, tmp;\\n     mpz_inits(R1.x, R1.y, tmp.x, tmp.y, NULL);\\n     mpz_init_set(R0.x, point->x);'}}",
      "message_norm": "properly handle the point at infinity",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/curveMath.c'])",
      "num_files": 1.0
    },
    {
      "index": 2080,
      "vuln_id": "GHSA-hj5v-574p-mj7c",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/pytest-dev/py/pull/257/commits/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144'}",
      "dataset": "osv",
      "summary": "Regular expression deinal of service in py A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.",
      "published_date": "2021-04-20",
      "chain_len": 1,
      "project": "https://github.com/pytest-dev/py",
      "commit_href": "https://github.com/pytest-dev/py/pull/257/commits/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
      "commit_sha": "4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
      "patch": "SINGLE",
      "chain_ord": "['4a9017dc6199d2a564b6e4b0aa39d6d8870e4144']",
      "before_first_fix_commit": "{'2da2caea38812eaa3ce09dd5292e3635ce9b16c8'}",
      "last_fix_commit": "4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/04/2020, 10:57:26",
      "message": "svnwc: fix regular expression vulnerable to DoS in blame functionality\n\nThe subpattern `\\d+\\s*\\S+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nSVN blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nFixes #256.",
      "author": "Ran Benita",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'py/_path/svnwc.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/pytest-dev/py/raw/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144/py%2F_path%2Fsvnwc.py', 'patch': '@@ -396,7 +396,7 @@ def makecmdoptions(self):\\n     def __str__(self):\\n         return \"<SvnAuth username=%s ...>\" %(self.username,)\\n \\n-rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s*(\\\\S+) (.*)\\')\\n+rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s+(\\\\S+) (.*)\\')\\n \\n class SvnWCCommandPath(common.PathBase):\\n     \"\"\" path implementation offering access/modification to svn working copies.'}}",
      "message_norm": "svnwc: fix regular expression vulnerable to dos in blame functionality\n\nthe subpattern `\\d+\\s*\\s+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nsvn blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nfixes #256.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('vulnerable', 'SECWORD', ''), ('dos', 'SECWORD', ''), ('user name', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('changing', 'ACTION', ''), ('fixes', 'ACTION', ''), ('#256', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['py/_path/svnwc.py'])",
      "num_files": 1.0
    },
    {
      "index": 2227,
      "vuln_id": "GHSA-jc83-cpf9-q7c6",
      "cwe_id": "{'CWE-697'}",
      "score": 8.6,
      "chain": "{'https://github.com/simpleledger/slpjs/commit/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754'}",
      "dataset": "osv",
      "summary": "False-negative validation results in MINT transactions with invalid baton ### Impact\nUsers could experience false-negative validation outcomes for [MINT](https://github.com/simpleledger/slp-specifications/blob/master/slp-token-type-1.md#mint---extended-minting-transaction) transaction operations.  A poorly implemented SLP wallet could allow spending of the affected tokens which would result in the destruction of a user's minting baton.\n\n### Patches\nnpm package [slpjs](https://www.npmjs.com/package/slpjs) has been patched and published as version 0.27.2.\n\n\n### Workarounds\nUpgrade to slpjs 0.27.2.\n\n### References\n* slpjs [commit](https://github.com/simpleledger/slpjs/commit/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [slp-validate](https://github.com/simpleledger/slp-validate/issues) or [slpjs](https://github.com/simpleledger/slpjs/issues)",
      "published_date": "2020-05-12",
      "chain_len": 1,
      "project": "https://github.com/simpleledger/slpjs",
      "commit_href": "https://github.com/simpleledger/slpjs/commit/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "commit_sha": "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "patch": "SINGLE",
      "chain_ord": "['3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754']",
      "before_first_fix_commit": "{'2653647c7b9ceb7a9c863f9f8b70a5d638634bf5'}",
      "last_fix_commit": "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/29/2020, 16:48:21",
      "message": "fix false negative case for MINT transactions\n\nSee the newly added unit test case for this issue.\nCurrently there are 151 unit tests.",
      "author": "James Cramer",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 6, 'total': 16}",
      "files": "{'lib/localvalidator.ts': {'additions': 10, 'deletions': 6, 'changes': 16, 'status': 'modified', 'raw_url': 'https://github.com/simpleledger/slpjs/raw/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754/lib%2Flocalvalidator.ts', 'patch': '@@ -282,10 +282,10 @@ export class LocalValidator implements SlpValidator {\\n                     }\\n                 } catch (_) {}\\n             }\\n-            if (this.cachedValidations[txid].parents.length !== 1) {\\n+            if (this.cachedValidations[txid].parents.length < 1) {\\n                 this.cachedValidations[txid].validity = false;\\n                 this.cachedValidations[txid].waiting = false;\\n-                this.cachedValidations[txid].invalidReason = \"MINT transaction must have 1 valid baton parent.\";\\n+                this.cachedValidations[txid].invalidReason = \"MINT transaction must have at least 1 candidate baton parent input.\";\\n                 return this.cachedValidations[txid].validity!;\\n             }\\n         }\\n@@ -342,10 +342,14 @@ export class LocalValidator implements SlpValidator {\\n         // Set validity validation-cache for parents, and handle MINT condition with no valid input\\n         // we don\\'t need to check proper token id since we only added parents with same ID in above steps.\\n         const parentTxids = [...new Set(this.cachedValidations[txid].parents.map(p => p.txid))];\\n-        for (let i = 0; i < parentTxids.length; i++) {\\n-            const valid = await this.isValidSlpTxid(parentTxids[i]);\\n-            this.cachedValidations[txid].parents.filter(p => p.txid === parentTxids[i]).map(p => p.valid = valid);\\n-            if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT && !valid) {\\n+        for (const id of parentTxids) {\\n+            const valid = await this.isValidSlpTxid(id);\\n+            this.cachedValidations[txid].parents.filter(p => p.txid === id).map(p => p.valid = valid);\\n+        }\\n+\\n+        // Check MINT for exactly 1 valid MINT baton\\n+        if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT) {\\n+            if (this.cachedValidations[txid].parents.filter(p => p.valid && p.inputQty === null).length !== 1) {\\n                 this.cachedValidations[txid].validity = false;\\n                 this.cachedValidations[txid].waiting = false;\\n                 this.cachedValidations[txid].invalidReason = \"MINT transaction with invalid baton parent.\";'}}",
      "message_norm": "fix false negative case for mint transactions\n\nsee the newly added unit test case for this issue.\ncurrently there are 151 unit tests.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('added', 'ACTION', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/localvalidator.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2575,
      "vuln_id": "GHSA-pgcq-h79j-2f69",
      "cwe_id": "{'CWE-354'}",
      "score": 7.0,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/4d74d8a00b07441cba090a02e0dd9ed385145bf4', 'https://github.com/tensorflow/tensorflow/commit/da4aad5946be30e5f049920fa076e1f7ef021261', 'https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904', 'https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'https://github.com/tensorflow/tensorflow/commit/579261dcd446385831fe4f7457d802a59685121d', 'https://github.com/tensorflow/tensorflow/commit/68422b215e618df5ad375bcdc6d2052e9fd3080a'}",
      "dataset": "osv",
      "summary": "Incomplete validation of shapes in multiple TF ops ### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https://github.com/tensorflow/tensorflow/commit/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https://github.com/tensorflow/tensorflow/commit/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https://github.com/tensorflow/tensorflow/commit/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https://github.com/tensorflow/tensorflow/commit/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2021-11-10",
      "chain_len": 6,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07",
      "commit_sha": "4dddb2fd0b01cdd196101afbba6518658a2c9e07",
      "patch": "MULTI",
      "chain_ord": "['579261dcd446385831fe4f7457d802a59685121d', '4d74d8a00b07441cba090a02e0dd9ed385145bf4', '68422b215e618df5ad375bcdc6d2052e9fd3080a', 'da4aad5946be30e5f049920fa076e1f7ef021261', '4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'e7f497570abb6b4ae5af4970620cd880e4c0c904']",
      "before_first_fix_commit": "{'e0214528739cad3bd02fbf2696a793dc342ffb94'}",
      "last_fix_commit": "e7f497570abb6b4ae5af4970620cd880e4c0c904",
      "chain_ord_pos": 5.0,
      "commit_datetime": "10/20/2021, 21:53:58",
      "message": "Fix segfault in pools on empty shapes when certain dimension were very large.\n\nPooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. This multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\nPiperOrigin-RevId: 404644978\nChange-Id: Ic79f89c970357ca2962b1f231449066db9403146",
      "author": "Reed Wanderman-Milne",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 0, 'total': 9}",
      "files": "{'tensorflow/core/kernels/pooling_ops_common.h': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/4dddb2fd0b01cdd196101afbba6518658a2c9e07/tensorflow%2Fcore%2Fkernels%2Fpooling_ops_common.h', 'patch': \"@@ -189,6 +189,9 @@ class MaxPoolingOp : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     // On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     // EigenMatrix version that is currently faster than Eigen's\\n     // Spatial MaxPooling implementation.\\n@@ -443,6 +446,9 @@ class MaxPoolingV2Op : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     // On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     // EigenMatrix version that is currently faster than Eigen's\\n     // Spatial MaxPooling implementation.\\n@@ -561,6 +567,9 @@ template <typename Device, typename T>\\n void SpatialAvgPool(OpKernelContext* context, Tensor* output,\\n                     const Tensor& input, const PoolParameters& params,\\n                     const Padding& padding) {\\n+  if (output->NumElements() == 0) {\\n+    return;\\n+  }\\n   typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\\n       ConstEigenMatrixMap;\\n   typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\"}}",
      "message_norm": "fix segfault in pools on empty shapes when certain dimension were very large.\n\npooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. this multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\npiperorigin-revid: 404644978\nchange-id: ic79f89c970357ca2962b1f231449066db9403146",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('404644978', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/pooling_ops_common.h'])",
      "num_files": 1.0
    },
    {
      "index": 70,
      "vuln_id": "GHSA-2927-hv3p-f3vp",
      "cwe_id": "{'CWE-601'}",
      "score": 0.0,
      "chain": "{'https://github.com/caddyserver/caddy/pull/4499/commits/b23bdcf99cfbd09d50555a999a16468404789230'}",
      "dataset": "osv",
      "summary": "Open redirect in caddy Caddy v2.4 was discovered to contain an open redirect vulnerability. A remote unauthenticated attacker may exploit this vulnerability to redirect users to arbitrary web URLs by tricking the victim users to click on crafted links.",
      "published_date": "2022-06-03",
      "chain_len": 1,
      "project": "https://github.com/caddyserver/caddy",
      "commit_href": "https://github.com/caddyserver/caddy/pull/4499/commits/b23bdcf99cfbd09d50555a999a16468404789230",
      "commit_sha": "b23bdcf99cfbd09d50555a999a16468404789230",
      "patch": "SINGLE",
      "chain_ord": "['b23bdcf99cfbd09d50555a999a16468404789230']",
      "before_first_fix_commit": "{'5333c3528bd2badf1676efcced322d151e3706c8'}",
      "last_fix_commit": "b23bdcf99cfbd09d50555a999a16468404789230",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/30/2021, 04:31:51",
      "message": "caddyhttp: Fix `MatchPath` sanitizing\n\nThis is a followup to #4407, in response to a report on the forums: https://caddy.community/t/php-fastcgi-phishing-redirection/14542\n\nTurns out that doing `TrimRight` to remove trailing dots, _before_ cleaning the path, will cause double-dots at the end of the path to not be cleaned away as they should. We should instead remove the dots _after_ cleaning.",
      "author": "Francis Lavoie",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 5, 'total': 10}",
      "files": "{'modules/caddyhttp/matchers.go': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/caddyserver/caddy/raw/b23bdcf99cfbd09d50555a999a16468404789230/modules%2Fcaddyhttp%2Fmatchers.go', 'patch': '@@ -325,18 +325,18 @@ func (m MatchPath) Match(r *http.Request) bool {\\n \\n \\tlowerPath := strings.ToLower(unescapedPath)\\n \\n+\\t// Clean the path, merges doubled slashes, etc.\\n+\\t// This ensures maliciously crafted requests can\\'t bypass\\n+\\t// the path matcher. See #4407\\n+\\tlowerPath = path.Clean(lowerPath)\\n+\\n \\t// see #2917; Windows ignores trailing dots and spaces\\n \\t// when accessing files (sigh), potentially causing a\\n \\t// security risk (cry) if PHP files end up being served\\n \\t// as static files, exposing the source code, instead of\\n \\t// being matched by *.php to be treated as PHP scripts\\n \\tlowerPath = strings.TrimRight(lowerPath, \". \")\\n \\n-\\t// Clean the path, merges doubled slashes, etc.\\n-\\t// This ensures maliciously crafted requests can\\'t bypass\\n-\\t// the path matcher. See #4407\\n-\\tlowerPath = path.Clean(lowerPath)\\n-\\n \\t// Cleaning may remove the trailing slash, but we want to keep it\\n \\tif lowerPath != \"/\" && strings.HasSuffix(r.URL.Path, \"/\") {\\n \\t\\tlowerPath = lowerPath + \"/\"'}}",
      "message_norm": "caddyhttp: fix `matchpath` sanitizing\n\nthis is a followup to #4407, in response to a report on the forums: https://caddy.community/t/php-fastcgi-phishing-redirection/14542\n\nturns out that doing `trimright` to remove trailing dots, _before_ cleaning the path, will cause double-dots at the end of the path to not be cleaned away as they should. we should instead remove the dots _after_ cleaning.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('sanitizing', 'SECWORD', ''), ('#4407', 'ISSUE', ''), ('https://caddy.community/t/php-fastcgi-phishing-redirection/14542', 'URL', ''), ('remove', 'ACTION', ''), ('remove', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/caddyhttp/matchers.go'])",
      "num_files": 1.0
    },
    {
      "index": 1952,
      "vuln_id": "GHSA-gx8x-g87m-h5q6",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/sparklemotion/nekohtml/commit/a800fce3b079def130ed42a408ff1d09f89e773d'}",
      "dataset": "osv",
      "summary": "Denial of Service (DoS) in Nokogiri on JRuby ## Summary\n\nNokogiri `v1.13.4` updates the vendored `org.cyberneko.html` library to `1.9.22.noko2` which addresses [CVE-2022-24839](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv). That CVE is rated 7.5 (High Severity).\n\nSee [GHSA-9849-p7jc-9rmv](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv) for more information.\n\nPlease note that this advisory only applies to the **JRuby** implementation of Nokogiri `< 1.13.4`.\n\n\n## Mitigation\n\nUpgrade to Nokogiri `>= 1.13.4`.\n\n\n## Impact\n\n### [CVE-2022-24839](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv) in nekohtml\n\n- **Severity**: High 7.5\n- **Type**: [CWE-400](https://cwe.mitre.org/data/definitions/400.html) Uncontrolled Resource Consumption\n- **Description**: The fork of `org.cyberneko.html` used by Nokogiri (Rubygem) raises a `java.lang.OutOfMemoryError` exception when parsing ill-formed HTML markup.\n- **See also**: [GHSA-9849-p7jc-9rmv](https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv)",
      "published_date": "2022-04-11",
      "chain_len": 1,
      "project": "https://github.com/sparklemotion/nekohtml",
      "commit_href": "https://github.com/sparklemotion/nekohtml/commit/a800fce3b079def130ed42a408ff1d09f89e773d",
      "commit_sha": "a800fce3b079def130ed42a408ff1d09f89e773d",
      "patch": "SINGLE",
      "chain_ord": "['a800fce3b079def130ed42a408ff1d09f89e773d']",
      "before_first_fix_commit": "{'6fe9b53bc289d0e90d684c0f4a8e9f2b19f3460f'}",
      "last_fix_commit": "a800fce3b079def130ed42a408ff1d09f89e773d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/03/2022, 23:03:39",
      "message": "fix: ensure ill-formed PIs are parsed correctly",
      "author": "Mike Dalessio",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/org/cyberneko/html/HTMLScanner.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/sparklemotion/nekohtml/raw/a800fce3b079def130ed42a408ff1d09f89e773d/src%2Forg%2Fcyberneko%2Fhtml%2FHTMLScanner.java', 'patch': \"@@ -2588,7 +2588,7 @@ protected void scanPI() throws IOException {\\n                     if (c == '?' || c == '/') {\\n                         char c0 = (char)c;\\n                         c = fCurrentEntity.read();\\n-                        if (c == '>') {\\n+                        if (c == '>' || c == -1) {\\n                             break;\\n                         }\\n                         fStringBuffer.append(c0);\"}}",
      "message_norm": "fix: ensure ill-formed pis are parsed correctly",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/org/cyberneko/html/HTMLScanner.java'])",
      "num_files": 1.0
    },
    {
      "index": 108,
      "vuln_id": "GHSA-2jx8-v4hv-gx3h",
      "cwe_id": "{'CWE-611'}",
      "score": 7.5,
      "chain": "{'https://github.com/reportportal/service-api/commit/da4a012abdcc69f02f4255d81466f1f473b7f418'}",
      "dataset": "osv",
      "summary": "XXE vulnerability in Launch import | Release Date | Affected Projects | Affected Versions | Access Vector| Security Risk |\n|--------------|-------------------|-------------------|---------------|---------------|\n| Monday, May 4, 2020| [service-api](https://github.com/reportportal/service-api) | Every version, starting from 3.1.0 | Remote | Medium |\n\n### Impact\nStarting from version 3.1.0 we introduced a new feature of JUnit XML launch import. Unfortunately XML parser was not configured properly to prevent XML external entity (XXE) attacks. This allows a user to import a specifically-crafted XML file that uses external entities for extraction of secrets from Report Portal service-api module or server-side request forgery.\n\nReport Portal versions 4.3.12+ and 5.1.1+ disables external entity resolution for theirs XML parser.\n\nWe advise our users install the latest releases we built specifically to address this issue.\n\n### Patches\nFixed with https://github.com/reportportal/service-api/pull/1201\n\n### Binary Download\nhttps://bintray.com/epam/reportportal/service-api/5.1.1\nhttps://bintray.com/epam/reportportal/service-api/4.3.12\n\n### Docker Container Download\n* RP v4: `docker pull reportportal/service-api:4.3.12`\n* RP v5: `docker pull reportportal/service-api:5.1.1`\n\n### Acknowledgement\nThe issue was reported to Report Portal Team by an external security researcher.\nOur Team thanks Julien M. for reporting the issue.\n\n### For more information\nIf you have any questions or comments about this advisory email us: [support@reportportal.io](mailto:support@reportportal.io)",
      "published_date": "2021-06-28",
      "chain_len": 1,
      "project": "https://github.com/reportportal/service-api",
      "commit_href": "https://github.com/reportportal/service-api/commit/da4a012abdcc69f02f4255d81466f1f473b7f418",
      "commit_sha": "da4a012abdcc69f02f4255d81466f1f473b7f418",
      "patch": "SINGLE",
      "chain_ord": "['da4a012abdcc69f02f4255d81466f1f473b7f418']",
      "before_first_fix_commit": "{'afbd14d404c4084cfdd17d60685f8984949b1350', '74a954601ad9eea14a0650f5c1ae9bd91031e2ba'}",
      "last_fix_commit": "da4a012abdcc69f02f4255d81466f1f473b7f418",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/30/2020, 21:14:46",
      "message": "Merge pull request #1201 from reportportal/sax-hotfix\n\nsax vulnerability fix",
      "author": "Pavel Bortnik",
      "comments": null,
      "stats": "{'additions': 18, 'deletions': 1, 'total': 19}",
      "files": "{'src/main/java/com/epam/ta/reportportal/core/imprt/impl/junit/XunitParseJob.java': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/reportportal/service-api/raw/da4a012abdcc69f02f4255d81466f1f473b7f418/src%2Fmain%2Fjava%2Fcom%2Fepam%2Fta%2Freportportal%2Fcore%2Fimprt%2Fimpl%2Fjunit%2FXunitParseJob.java', 'patch': '@@ -24,8 +24,10 @@\\n import org.springframework.context.annotation.Scope;\\n import org.springframework.stereotype.Component;\\n import org.xml.sax.SAXException;\\n+import org.xml.sax.XMLReader;\\n \\n import javax.xml.parsers.ParserConfigurationException;\\n+import javax.xml.parsers.SAXParser;\\n import javax.xml.parsers.SAXParserFactory;\\n import java.io.IOException;\\n import java.io.InputStream;\\n@@ -43,7 +45,22 @@ public class XunitParseJob implements Callable<ParseResults> {\\n \\t@Override\\n \\tpublic ParseResults call() {\\n \\t\\ttry {\\n-\\t\\t\\tSAXParserFactory.newInstance().newSAXParser().parse(xmlInputStream, handler);\\n+\\t\\t\\tSAXParserFactory spf = SAXParserFactory.newInstance();\\n+\\t\\t\\tSAXParser saxParser = spf.newSAXParser();\\n+\\t\\t\\tXMLReader reader = saxParser.getXMLReader();\\n+\\n+\\t\\t\\t// Xerces 1 - http://xerces.apache.org/xerces-j/features.html#external-general-entities\\n+\\t\\t\\t// Xerces 2 - http://xerces.apache.org/xerces2-j/features.html#external-general-entities\\n+\\n+\\t\\t\\t// Using the SAXParserFactory\\'s setFeature\\n+\\t\\t\\tspf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\\n+\\t\\t\\t// Using the XMLReader\\'s setFeature\\n+\\t\\t\\treader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\\n+\\n+\\t\\t\\t// Xerces 2 only - http://xerces.apache.org/xerces-j/features.html#external-general-entities\\n+\\t\\t\\tspf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\\n+\\n+\\t\\t\\tsaxParser.parse(xmlInputStream, handler);\\n \\t\\t} catch (SAXException | IOException | ParserConfigurationException e) {\\n \\t\\t\\tthrow new ReportPortalException(ErrorType.PARSING_XML_ERROR, e.getMessage());\\n \\t\\t}'}}",
      "message_norm": "merge pull request #1201 from reportportal/sax-hotfix\n\nsax vulnerability fix",
      "language": "ca",
      "entities": "[('#1201', 'ISSUE', ''), ('sax', 'SECWORD', ''), ('hotfix', 'ACTION', ''), ('sax', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/com/epam/ta/reportportal/core/imprt/impl/junit/XunitParseJob.java'])",
      "num_files": 1.0
    },
    {
      "index": 1339,
      "vuln_id": "GHSA-98gj-wwxm-cj3h",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/lepture/mistune/commit/5f06d724bc05580e7f203db2d4a4905fc1127f98'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects mistune Cross-site scripting (XSS) vulnerability in the _keyify function in mistune.py in Mistune before 0.8.1 allows remote attackers to inject arbitrary web script or HTML by leveraging failure to escape the \"key\" argument.",
      "published_date": "2019-01-04",
      "chain_len": 1,
      "project": "https://github.com/lepture/mistune",
      "commit_href": "https://github.com/lepture/mistune/commit/5f06d724bc05580e7f203db2d4a4905fc1127f98",
      "commit_sha": "5f06d724bc05580e7f203db2d4a4905fc1127f98",
      "patch": "SINGLE",
      "chain_ord": "['5f06d724bc05580e7f203db2d4a4905fc1127f98']",
      "before_first_fix_commit": "{'7f7f106a717e6cf58012304e56b41d6fb2b98e5f'}",
      "last_fix_commit": "5f06d724bc05580e7f203db2d4a4905fc1127f98",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/20/2017, 15:15:09",
      "message": "Fix CVE-2017-16876",
      "author": "Hsiaoming Yang",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 3, 'total': 8}",
      "files": "{'mistune.py': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/lepture/mistune/raw/5f06d724bc05580e7f203db2d4a4905fc1127f98/mistune.py', 'patch': \"@@ -11,7 +11,7 @@\\n import re\\n import inspect\\n \\n-__version__ = '0.8'\\n+__version__ = '0.8.1'\\n __author__ = 'Hsiaoming Yang <me@lepture.com>'\\n __all__ = [\\n     'BlockGrammar', 'BlockLexer',\\n@@ -48,7 +48,8 @@ def _pure_pattern(regex):\\n \\n \\n def _keyify(key):\\n-    return _key_pattern.sub(' ', key.lower())\\n+    key = escape(key.lower(), quote=True)\\n+    return _key_pattern.sub(' ', key)\\n \\n \\n def escape(text, quote=False, smart_amp=True):\\n@@ -445,7 +446,8 @@ class InlineGrammar(object):\\n     inline_html = re.compile(\\n         r'^(?:%s|%s|%s)' % (\\n             r'<!--[\\\\s\\\\S]*?-->',\\n-            r'<(\\\\w+%s)((?:%s)*?)\\\\s*>([\\\\s\\\\S]*?)<\\\\/\\\\1>' % (_valid_end, _valid_attr),\\n+            r'<(\\\\w+%s)((?:%s)*?)\\\\s*>([\\\\s\\\\S]*?)<\\\\/\\\\1>' % (\\n+                _valid_end, _valid_attr),\\n             r'<\\\\w+%s(?:%s)*?\\\\s*\\\\/?>' % (_valid_end, _valid_attr),\\n         )\\n     )\"}}",
      "message_norm": "fix cve-2017-16876",
      "language": "fr",
      "entities": "[('fix', 'ACTION', ''), ('cve-2017-16876', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['mistune.py'])",
      "num_files": 1.0
    },
    {
      "index": 2323,
      "vuln_id": "GHSA-jxwx-85vp-gvwm",
      "cwe_id": "{'CWE-400'}",
      "score": 0.0,
      "chain": "{'https://github.com/jquery-validation/jquery-validation/commit/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d'}",
      "dataset": "osv",
      "summary": "Regular Expression Denial of Service in jquery-validation The GitHub Security Lab team has identified potential security vulnerabilities in jquery.validation.\n\nThe project contains one or more regular expressions that are vulnerable to ReDoS (Regular Expression Denial of Service)\n\nThis issue was discovered and reported by GitHub team member @erik-krogh (Erik Krogh Kristensen).",
      "published_date": "2021-01-13",
      "chain_len": 1,
      "project": "https://github.com/jquery-validation/jquery-validation",
      "commit_href": "https://github.com/jquery-validation/jquery-validation/commit/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
      "commit_sha": "5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
      "patch": "SINGLE",
      "chain_ord": "['5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d']",
      "before_first_fix_commit": "{'b8d6646ec67c73372dddfbc9aadff45571a96136'}",
      "last_fix_commit": "5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/09/2021, 15:28:00",
      "message": "Core: fixed Regular Expression Denial of Service vulnerability (#2371)\n\nReDoS, or Regular Expression Denial of Service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nGHSL-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
      "author": "Markus Staab",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/core.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/jquery-validation/jquery-validation/raw/5d8f29eef363d043a8fec4eb86d42cadb5fa5f7d/src%2Fcore.js', 'patch': '@@ -1412,7 +1412,7 @@ $.extend( $.validator, {\\n \\t\\t\\t// https://gist.github.com/dperini/729294\\n \\t\\t\\t// see also https://mathiasbynens.be/demo/url-regex\\n \\t\\t\\t// modified to allow protocol-relative URLs\\n-\\t\\t\\treturn this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})).?)(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$/i.test( value );\\n+\\t\\t\\treturn this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\\\\/\\\\/)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z0-9\\\\u00a1-\\\\uffff][a-z0-9\\\\u00a1-\\\\uffff_-]{0,62})?[a-z0-9\\\\u00a1-\\\\uffff]\\\\.)+(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?))(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$/i.test( value );\\n \\t\\t},\\n \\n \\t\\t// https://jqueryvalidation.org/date-method/'}}",
      "message_norm": "core: fixed regular expression denial of service vulnerability (#2371)\n\nredos, or regular expression denial of service, is a vulnerability affecting\r\npoorly constructed and potentially inefficient regular expressions which can\r\nmake them perform extremely badly given a creatively constructed input string.\r\n\r\nghsl-2020-294\r\n\r\ncredits to @erik-krogh for reporting the issue and providing a fix",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#2371', 'ISSUE', ''), ('redos', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/core.js'])",
      "num_files": 1.0
    },
    {
      "index": 2268,
      "vuln_id": "GHSA-jjr8-m8g8-p6wv",
      "cwe_id": "{'CWE-476'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in TFLite's `Reshape` operator ### Impact\nThe fix for [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https://github.com/tensorflow/tensorflow/blob/9c1dc920d8ffb4893d6c9d27d1f039607b326743/tensorflow/lite/core/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:\n\n```cc\nif (tensor->data.raw == nullptr && tensor->bytes > 0) {\n  if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\n    // In general, having a tensor here with no buffer will be an error.\n    // However, for the reshape operator, the second input tensor is only\n    // used for the shape, not for the data. Thus, null buffer is ok.\n    continue;\n  } else {\n    // In all other cases, we need to return an error as otherwise we will\n    // trigger a null pointer dereference (likely).\n    ReportError(\"Input tensor %d lacks data\", tensor_index);\n    return kTfLiteError;\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16",
      "commit_sha": "f8378920345f4f4604202d4ab15ef64b2aceaa16",
      "patch": "SINGLE",
      "chain_ord": "['f8378920345f4f4604202d4ab15ef64b2aceaa16']",
      "before_first_fix_commit": "{'9c1dc920d8ffb4893d6c9d27d1f039607b326743'}",
      "last_fix_commit": "f8378920345f4f4604202d4ab15ef64b2aceaa16",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 00:47:59",
      "message": "Prevent a null pointer dereference in TFLite.\n\nPiperOrigin-RevId: 370800353\nChange-Id: Ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 3, 'total': 13}",
      "files": "{'tensorflow/lite/core/subgraph.cc': {'additions': 10, 'deletions': 3, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/f8378920345f4f4604202d4ab15ef64b2aceaa16/tensorflow%2Flite%2Fcore%2Fsubgraph.cc', 'patch': '@@ -1060,10 +1060,17 @@ TfLiteStatus Subgraph::Invoke() {\\n         TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));\\n       }\\n       if (tensor->data.raw == nullptr && tensor->bytes > 0) {\\n-        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\\n+        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1 &&\\n+            tensor->dims->size != 1) {\\n           // In general, having a tensor here with no buffer will be an error.\\n-          // However, for the reshape operator, the second input tensor is only\\n-          // used for the shape, not for the data. Thus, null buffer is ok.\\n+          // However, for the reshape operator, the second input tensor is\\n+          // sometimes only used for the shape, not for the data. Thus, null\\n+          // buffer is ok in this situation.\\n+          // The situation where null buffer is not ok for reshape operator is\\n+          // only when there are 2 inputs given to the node and the one\\n+          // corresponding to the shape (i == 1) is a vector that contains all\\n+          // dimensions. See `GetOutputShape()` function in\\n+          // `tensorflow/lite/kernels/reshape.cc`\\n           continue;\\n         } else {\\n           // In all other cases, we need to return an error as otherwise we will'}}",
      "message_norm": "prevent a null pointer dereference in tflite.\n\npiperorigin-revid: 370800353\nchange-id: ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('370800353', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/core/subgraph.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3302,
      "vuln_id": "GHSA-wp3c-xw9g-gpcg",
      "cwe_id": "{'CWE-617'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc'}",
      "dataset": "osv",
      "summary": "Lack of validation in `SparseDenseCwiseMul` ### Impact\nDue to lack of validation in `tf.raw_ops.SparseDenseCwiseMul`, an attacker can trigger denial of service via `CHECK`-fails or accesses to outside the bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[10, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\nshape = tf.constant([0, 0], shape=[2], dtype=tf.int64)\ndense = tf.constant([], shape=[0], dtype=tf.int64)\n  \ntf.raw_ops.SparseDenseCwiseMul(\n    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)\n```\n\nSince the [implementation](https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80) only validates the rank of the input arguments but no [constraints between dimensions](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul), an attacker can abuse them to trigger internal `CHECK` assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.\n\n### Patches\nWe have patched the issue in GitHub commit [7ae2af34087fb4b5c8915279efd03da3b81028bc](https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "commit_sha": "7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "patch": "SINGLE",
      "chain_ord": "['7ae2af34087fb4b5c8915279efd03da3b81028bc']",
      "before_first_fix_commit": "{'38178a2f7a681a7835bb0912702a134bfe3b4d84'}",
      "last_fix_commit": "7ae2af34087fb4b5c8915279efd03da3b81028bc",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 04:30:50",
      "message": "Fix heap-buffer-overflow issue with `tf.raw_ops.SparseDenseCwiseMul`.\n\nPiperOrigin-RevId: 372054410\nChange-Id: Ifcce0491e2e3816838c87e73be30a1e61b65174d",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/kernels/sparse_dense_binary_op_shared.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/7ae2af34087fb4b5c8915279efd03da3b81028bc/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -78,6 +78,11 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n                     \"but received shapes: \",\\n                     values_t->shape().DebugString(), \" and \",\\n                     shape_t->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, values_t->dim_size(0) == indices_t->dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"The first dimension of values and indices should match. (\",\\n+            values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\\n \\n     const auto indices_mat = indices_t->matrix<int64>();\\n     const auto shape_vec = shape_t->vec<int64>();'}}",
      "message_norm": "fix heap-buffer-overflow issue with `tf.raw_ops.sparsedensecwisemul`.\n\npiperorigin-revid: 372054410\nchange-id: ifcce0491e2e3816838c87e73be30a1e61b65174d",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372054410', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_dense_binary_op_shared.cc'])",
      "num_files": 1.0
    },
    {
      "index": 466,
      "vuln_id": "GHSA-4r4m-hjwj-43p8",
      "cwe_id": "{'CWE-300'}",
      "score": 0.0,
      "chain": "{'https://github.com/socketio/engine.io-client/commit/2c55b278a491bf45313ecc0825cf800e2f7ff5c1'}",
      "dataset": "osv",
      "summary": "Insecure Defaults Allow MITM Over TLS in engine.io-client Affected versions of `engine.io-client` do not verify certificates by default, and as such may be vulnerable to Man-in-the-Middle attacks.\n\nThe vulnerability is related to the way that node.js handles the `rejectUnauthorized` setting. If the value is something that evaluates to false, such as undefined or null, certificate verification will be disabled. \n\n\n\n## Recommendation\n\nUpdate to version 1.6.9 or later.\n\nIf you are unable to upgrade, ensure all calls to socket.io to have a `rejectedUnauthorized: true` flag.",
      "published_date": "2019-02-18",
      "chain_len": 1,
      "project": "https://github.com/socketio/engine.io-client",
      "commit_href": "https://github.com/socketio/engine.io-client/commit/2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
      "commit_sha": "2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
      "patch": "SINGLE",
      "chain_ord": "['2c55b278a491bf45313ecc0825cf800e2f7ff5c1']",
      "before_first_fix_commit": "{'6045ccf5aa3ad5dbd976acb1e722a9692a5d55fb'}",
      "last_fix_commit": "2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/30/2016, 15:30:14",
      "message": "default `rejectUnauthorized` to `true`",
      "author": "Guillermo Rauch",
      "comments": "{'com_1': {'author': 'andrew-aladev', 'datetime': '09/28/2016, 13:48:33', 'body': 'WAT? I am sure that you haven\\'t tested websocket with this \"patch\".'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/socket.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/socketio/engine.io-client/raw/2c55b278a491bf45313ecc0825cf800e2f7ff5c1/lib%2Fsocket.js', 'patch': \"@@ -90,7 +90,7 @@ function Socket (uri, opts) {\\n   this.cert = opts.cert || null;\\n   this.ca = opts.ca || null;\\n   this.ciphers = opts.ciphers || null;\\n-  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n+  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\\n \\n   // other options for Node.js client\\n   var freeGlobal = typeof global === 'object' && global;\"}}",
      "message_norm": "default `rejectunauthorized` to `true`",
      "language": "ro",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/socket.js'])",
      "num_files": 1.0
    },
    {
      "index": 2845,
      "vuln_id": "GHSA-r35g-4525-29fq",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d'}",
      "dataset": "osv",
      "summary": "Division by 0 in `FusedBatchNorm` ### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.FusedBatchNorm`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n    x=x, scale=scale, offset=offset, mean=mean,\n    variance=variance, epsilon=epsilon,\n    exponential_avg_factor=exponential_avg_factor,\n    data_format=data_format, is_training=is_training)\n``` \n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/828f346274841fa7505f7020e88ca36c22e557ab/tensorflow/core/kernels/fused_batch_norm_op.cc#L295-L297) performs a division based on the last dimension of the `x` tensor:\n\n```cc \nconst int depth = x.dimension(3);\nconst int rest_size = size / depth;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [1a2a87229d1d61e23a39373777c056161eb4084d](https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d",
      "commit_sha": "1a2a87229d1d61e23a39373777c056161eb4084d",
      "patch": "SINGLE",
      "chain_ord": "['1a2a87229d1d61e23a39373777c056161eb4084d']",
      "before_first_fix_commit": "{'828f346274841fa7505f7020e88ca36c22e557ab'}",
      "last_fix_commit": "1a2a87229d1d61e23a39373777c056161eb4084d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 18:30:28",
      "message": "Fix FPE issue with `tf.raw_ops.FusedBatchNorm`.\n\nPiperOrigin-RevId: 370948185\nChange-Id: If0c8e0320062ed6363e94ff5fe38e6a301f69ac2",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/kernels/fused_batch_norm_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1a2a87229d1d61e23a39373777c056161eb4084d/tensorflow%2Fcore%2Fkernels%2Ffused_batch_norm_op.cc', 'patch': '@@ -293,6 +293,9 @@ struct FusedBatchNorm<CPUDevice, T, U, /* is_training= */ false> {\\n     const CPUDevice& d = context->eigen_device<CPUDevice>();\\n \\n     const int depth = x.dimension(3);\\n+    OP_REQUIRES(\\n+        context, depth != 0,\\n+        errors::Internal(\"The 4th element in the input shape cannot be 0.\"));\\n     const int size = x.size();\\n     const int rest_size = size / depth;\\n     Eigen::DSizes<Eigen::Index, 2> rest_by_depth(rest_size, depth);'}}",
      "message_norm": "fix fpe issue with `tf.raw_ops.fusedbatchnorm`.\n\npiperorigin-revid: 370948185\nchange-id: if0c8e0320062ed6363e94ff5fe38e6a301f69ac2",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('issue', 'FLAW', ''), ('370948185', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/fused_batch_norm_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2972,
      "vuln_id": "GHSA-rp34-85x3-3764",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/librenms/librenms/commit/135717a9a05c5bf8921f1389cbb469dcbf300bfd'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in librenms Cross-site Scripting (XSS) - Generic in Packagist librenms/librenms prior to 22.1.0.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/commit/135717a9a05c5bf8921f1389cbb469dcbf300bfd",
      "commit_sha": "135717a9a05c5bf8921f1389cbb469dcbf300bfd",
      "patch": "SINGLE",
      "chain_ord": "['135717a9a05c5bf8921f1389cbb469dcbf300bfd']",
      "before_first_fix_commit": "{'c7b63b574f31efdeaa376d1a1cc0e7da681cba9f'}",
      "last_fix_commit": "135717a9a05c5bf8921f1389cbb469dcbf300bfd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/13/2022, 10:00:56",
      "message": "security - XSS Fix 01\n\nfixing https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/ (#13775)",
      "author": "PipoCanaja",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'includes/html/forms/alert-transports.inc.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/135717a9a05c5bf8921f1389cbb469dcbf300bfd/includes%2Fhtml%2Fforms%2Falert-transports.inc.php', 'patch': \"@@ -34,10 +34,10 @@\\n $status = 'ok';\\n $message = '';\\n \\n-$transport_id = $vars['transport_id'];\\n-$name = $vars['name'];\\n+$transport_id = strip_tags($vars['transport_id']);\\n+$name = strip_tags($vars['name']);\\n $is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');\\n-$transport_type = $vars['transport-type'];\\n+$transport_type = strip_tags($vars['transport-type']);\\n \\n if (empty($name)) {\\n     $status = 'error';\"}}",
      "message_norm": "security - xss fix 01\n\nfixing https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/ (#13775)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixing', 'ACTION', ''), ('https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177/', 'URL', ''), ('#13775', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['includes/html/forms/alert-transports.inc.php'])",
      "num_files": 1.0
    },
    {
      "index": 1233,
      "vuln_id": "GHSA-8p36-q63g-68qh",
      "cwe_id": "{'CWE-915'}",
      "score": 9.1,
      "chain": "{'https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/7eba3c12fed82388f917e8dd9b73e86e3a311e4c'}",
      "dataset": "osv",
      "summary": "Autobinding vulnerability in MITREid Connect org/mitre/oauth2/web/OAuthConfirmationController.java in the OpenID Connect server implementation for MITREid Connect through 1.3.3 contains a Mass Assignment (aka Autobinding) vulnerability. This arises due to unsafe usage of the @ModelAttribute annotation during the OAuth authorization flow, in which HTTP request parameters affect an authorizationRequest.",
      "published_date": "2021-05-13",
      "chain_len": 1,
      "project": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server",
      "commit_href": "https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/commit/7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
      "commit_sha": "7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
      "patch": "SINGLE",
      "chain_ord": "['7eba3c12fed82388f917e8dd9b73e86e3a311e4c']",
      "before_first_fix_commit": "{'0d4ef2cb4f77bea5df9e2d4f1cfff4dffb7045c0'}",
      "last_fix_commit": "7eba3c12fed82388f917e8dd9b73e86e3a311e4c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/12/2021, 15:22:12",
      "message": "Fix Spring Autobinding vulnerability\n\n1. Make authorizationRequest no longer affected by http request parameters due to @ModelAttribute. See http://agrrrdog.blogspot.com/2017/03/autobinding-vulns-and-spring-mvc.html",
      "author": "Michael Stepankin",
      "comments": "{'com_1': {'author': 'abergmann', 'datetime': '02/24/2021, 07:32:35', 'body': '[CVE-2021-27582](https://nvd.nist.gov/vuln/detail/CVE-2021-27582) was assigned to this commit.'}}",
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/raw/7eba3c12fed82388f917e8dd9b73e86e3a311e4c/openid-connect-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fmitre%2Foauth2%2Fweb%2FOAuthConfirmationController.java', 'patch': '@@ -103,9 +103,9 @@ public OAuthConfirmationController(ClientDetailsEntityService clientService) {\\n \\n \\t@PreAuthorize(\"hasRole(\\'ROLE_USER\\')\")\\n \\t@RequestMapping(\"/oauth/confirm_access\")\\n-\\tpublic String confimAccess(Map<String, Object> model, @ModelAttribute(\"authorizationRequest\") AuthorizationRequest authRequest,\\n-\\t\\t\\tPrincipal p) {\\n+\\tpublic String confirmAccess(Map<String, Object> model, Principal p) {\\n \\n+\\t\\tAuthorizationRequest authRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\\n \\t\\t// Check the \"prompt\" parameter to see if we need to do special processing\\n \\n \\t\\tString prompt = (String)authRequest.getExtensions().get(PROMPT);'}}",
      "message_norm": "fix spring autobinding vulnerability\n\n1. make authorizationrequest no longer affected by http request parameters due to @modelattribute. see http://agrrrdog.blogspot.com/2017/03/autobinding-vulns-and-spring-mvc.html",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('http://agrrrdog.blogspot.com/2017/03/autobinding-vulns-and-spring-mvc.html', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['openid-connect-server/src/main/java/org/mitre/oauth2/web/OAuthConfirmationController.java'])",
      "num_files": 1.0
    },
    {
      "index": 361,
      "vuln_id": "GHSA-455w-gv5p-wgg3",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/pimcore/pimcore/commit/665976327ad3c2c87efa2a5a64d696032c0a8109'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in pimcore pimcore is vulnerable to Stored XSS at Name field in the setting tab of the Global Targeting Rules.",
      "published_date": "2022-01-26",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/665976327ad3c2c87efa2a5a64d696032c0a8109",
      "commit_sha": "665976327ad3c2c87efa2a5a64d696032c0a8109",
      "patch": "SINGLE",
      "chain_ord": "['665976327ad3c2c87efa2a5a64d696032c0a8109']",
      "before_first_fix_commit": "{'7f8855719f56c42ee3eda27a84b38ab57890e144'}",
      "last_fix_commit": "665976327ad3c2c87efa2a5a64d696032c0a8109",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/19/2022, 10:36:40",
      "message": "[Targeting] Escape/validate names of rules properly (#11205)\n\n* [Targeting] Escape/validate names of rules properly\r\n\r\n* Update bundles/AdminBundle/Controller/Admin/TargetingController.php\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>",
      "author": "Bernhard Rusch",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 4, 'total': 15}",
      "files": "{'bundles/AdminBundle/Controller/Admin/TargetingController.php': {'additions': 11, 'deletions': 4, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/665976327ad3c2c87efa2a5a64d696032c0a8109/bundles%2FAdminBundle%2FController%2FAdmin%2FTargetingController.php', 'patch': '@@ -37,6 +37,11 @@ class TargetingController extends AdminController implements KernelControllerEve\\n {\\n     // RULES\\n \\n+    private function correctName(string $name): string\\n+    {\\n+        return preg_replace(\\'/[#?*:\\\\\\\\\\\\\\\\<>|\"%&@=;+]/\\', \\'-\\', $name);\\n+    }\\n+\\n     /**\\n      * @Route(\"/rule/list\", name=\"pimcore_admin_targeting_rulelist\", methods={\"GET\"})\\n      *\\n@@ -55,7 +60,7 @@ public function ruleListAction(Request $request)\\n         foreach ($list->load() as $target) {\\n             $targets[] = [\\n                 \\'id\\' => $target->getId(),\\n-                \\'text\\' => $target->getName(),\\n+                \\'text\\' => htmlspecialchars($target->getName()),\\n                 \\'active\\' => $target->getActive(),\\n                 \\'qtip\\' => \\'ID: \\' . $target->getId(),\\n             ];\\n@@ -74,7 +79,7 @@ public function ruleListAction(Request $request)\\n     public function ruleAddAction(Request $request)\\n     {\\n         $target = new Targeting\\\\Rule();\\n-        $target->setName($request->get(\\'name\\'));\\n+        $target->setName($this->correctName($request->get(\\'name\\')));\\n         $target->save();\\n \\n         return $this->adminJson([\\'success\\' => true, \\'id\\' => $target->getId()]);\\n@@ -129,6 +134,7 @@ public function ruleSaveAction(Request $request)\\n         /** @var Targeting\\\\Rule|Targeting\\\\Rule\\\\Dao $target */\\n         $target = Targeting\\\\Rule::getById($request->get(\\'id\\'));\\n         $target->setValues($data[\\'settings\\']);\\n+        $target->setName($this->correctName($target->getName()));\\n         $target->setConditions($data[\\'conditions\\']);\\n         $target->setActions($data[\\'actions\\']);\\n         $target->save();\\n@@ -208,7 +214,7 @@ public function targetGroupListAction(Request $request)\\n         foreach ($list->load() as $targetGroup) {\\n             $targetGroups[] = [\\n                 \\'id\\' => $targetGroup->getId(),\\n-                \\'text\\' => $targetGroup->getName(),\\n+                \\'text\\' => htmlspecialchars($targetGroup->getName()),\\n                 \\'active\\' => $targetGroup->getActive(),\\n                 \\'qtip\\' => $targetGroup->getId(),\\n             ];\\n@@ -230,7 +236,7 @@ public function targetGroupAddAction(Request $request, CoreCacheHandler $cache,\\n     {\\n         /** @var TargetGroup|TargetGroup\\\\Dao $targetGroup */\\n         $targetGroup = new TargetGroup();\\n-        $targetGroup->setName($request->get(\\'name\\'));\\n+        $targetGroup->setName($this->correctName($request->get(\\'name\\')));\\n         $targetGroup->save();\\n \\n         $event = new TargetGroupEvent($targetGroup);\\n@@ -300,6 +306,7 @@ public function targetGroupSaveAction(Request $request, CoreCacheHandler $cache,\\n         /** @var TargetGroup|TargetGroup\\\\Dao $targetGroup */\\n         $targetGroup = TargetGroup::getById($request->get(\\'id\\'));\\n         $targetGroup->setValues($data[\\'settings\\']);\\n+        $targetGroup->setName($this->correctName($targetGroup->getName()));\\n         $targetGroup->save();\\n \\n         $event = new TargetGroupEvent($targetGroup);'}}",
      "message_norm": "[targeting] escape/validate names of rules properly (#11205)\n\n* [targeting] escape/validate names of rules properly\r\n\r\n* update bundles/adminbundle/controller/admin/targetingcontroller.php\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>",
      "language": "en",
      "entities": "[('escape', 'SECWORD', ''), ('validate', 'ACTION', ''), ('#11205', 'ISSUE', ''), ('escape', 'SECWORD', ''), ('validate', 'ACTION', ''), ('update', 'ACTION', ''), ('adminbundle', 'SECWORD', ''), ('admin', 'SECWORD', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['bundles/AdminBundle/Controller/Admin/TargetingController.php'])",
      "num_files": 1.0
    },
    {
      "index": 360,
      "vuln_id": "GHSA-452g-f7fp-9jf7",
      "cwe_id": "{'CWE-476'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489'}",
      "dataset": "osv",
      "summary": "Type confusion during tensor casts lead to dereferencing null pointers ### Impact\nCalling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences.\n\nThere are multiple ways to reproduce this, listing a few examples here:\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.random.truncated_normal(shape=1,mean=np.float32(20.8739),stddev=779.973,dtype=20,seed=64)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata =\ntf.random.stateless_truncated_normal(shape=1,seed=[63,70],mean=np.float32(20.8739),stddev=779.973,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.one_hot(indices=[62,50],depth=136,on_value=np.int32(237),off_value=158,axis=856,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.range(start=np.int32(214),limit=660,delta=129,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.raw_ops.ResourceCountUpTo(resource=np.int32(30), limit=872, T=3)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nwriter_array = np.array([1,2],dtype=np.int32)\nwriter_tensor = tf.convert_to_tensor(writer_array,dtype=tf.resource)\n```\n\nAll these examples and similar ones have the same behavior: the [conversion from Python array to C++ array](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion:\n\n```cc\n  int pyarray_type = PyArray_TYPE(array);\n  PyArray_Descr* descr = PyArray_DESCR(array);\n  switch (pyarray_type) {\n    ...\n    case NPY_VOID:\n      // Quantized types are currently represented as custom struct types.\n      // PyArray_TYPE returns NPY_VOID for structs, and we should look into\n      // descr to derive the actual type.\n      // Direct feeds of certain types of ResourceHandles are represented as a\n      // custom struct type.\n      return PyArrayDescr_to_TF_DataType(descr, out_tf_datatype);\n    ...\n  }\n```\n\nFor the tensor types involved in the above example, the `pyarray_type` is `NPY_VOID` but the `descr` field is such that `descr->field = NULL`. Then [`PyArrayDescr_to_TF_DataType`](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L72-L77) will trigger a null dereference:\n\n```cc\nStatus PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,\n                                   TF_DataType* out_tf_datatype) {\n  PyObject* key;\n  PyObject* value;\n  Py_ssize_t pos = 0;\n  if (PyDict_Next(descr->fields, &pos, &key, &value)) {\n    ...\n  }\n}\n```\n\nThis is because the Python's `PyDict_Next` implementation would dereference the first argument.\n\n### Patches\nWe have patched the issue in GitHub commit [030af767d357d1b4088c4a25c72cb3906abac489](https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360 as well as Ye Zhang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489",
      "commit_sha": "030af767d357d1b4088c4a25c72cb3906abac489",
      "patch": "SINGLE",
      "chain_ord": "['030af767d357d1b4088c4a25c72cb3906abac489']",
      "before_first_fix_commit": "{'ff70c47a396ef1e3cb73c90513da4f5cb71bebba'}",
      "last_fix_commit": "030af767d357d1b4088c4a25c72cb3906abac489",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/13/2021, 21:25:01",
      "message": "Fix `tf.raw_ops.ResourceCountUpTo` null pointer dereference.\n\nPiperOrigin-RevId: 368294347\nChange-Id: I2c16fbfc9b4966c402c3d8e311f0d665a9c852d8",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'tensorflow/python/lib/core/ndarray_tensor.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/030af767d357d1b4088c4a25c72cb3906abac489/tensorflow%2Fpython%2Flib%2Fcore%2Fndarray_tensor.cc', 'patch': '@@ -16,6 +16,7 @@ limitations under the License.\\n #include \"tensorflow/python/lib/core/ndarray_tensor.h\"\\n \\n #include <cstring>\\n+#include <optional>\\n \\n #include \"tensorflow/c/eager/tfe_context_internal.h\"\\n #include \"tensorflow/c/tf_tensor_internal.h\"\\n@@ -74,6 +75,13 @@ Status PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,\\n   PyObject* key;\\n   PyObject* value;\\n   Py_ssize_t pos = 0;\\n+\\n+  // Return an error if the fields attribute is null.\\n+  // Occurs with an improper conversion attempt to resource.\\n+  if (descr->fields == nullptr) {\\n+    return errors::Internal(\"Unexpected numpy data type\");\\n+  }\\n+\\n   if (PyDict_Next(descr->fields, &pos, &key, &value)) {\\n     // In Python 3, the keys of numpy custom struct types are unicode, unlike\\n     // Python 2, where the keys are bytes.'}}",
      "message_norm": "fix `tf.raw_ops.resourcecountupto` null pointer dereference.\n\npiperorigin-revid: 368294347\nchange-id: i2c16fbfc9b4966c402c3d8e311f0d665a9c852d8",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('368294347', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/python/lib/core/ndarray_tensor.cc'])",
      "num_files": 1.0
    },
    {
      "index": 865,
      "vuln_id": "GHSA-6m26-25q2-cq46",
      "cwe_id": "{'CWE-79'}",
      "score": 4.8,
      "chain": "{'https://github.com/microweber/microweber/commit/c897d0dc159849763a813184d9b75b966c6360bf'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in microweber Microweber Cross-site Scripting (XSS) - Stored XSS vulnerability on admin page up to version 1.3.",
      "published_date": "2022-02-27",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/c897d0dc159849763a813184d9b75b966c6360bf",
      "commit_sha": "c897d0dc159849763a813184d9b75b966c6360bf",
      "patch": "SINGLE",
      "chain_ord": "['c897d0dc159849763a813184d9b75b966c6360bf']",
      "before_first_fix_commit": "{'7d3e768be798979e82778c47fbabfbd944ec8ea7'}",
      "last_fix_commit": "c897d0dc159849763a813184d9b75b966c6360bf",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/25/2022, 09:57:42",
      "message": "add xss clean to create media dir method",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'src/MicroweberPackages/Media/MediaManager.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/c897d0dc159849763a813184d9b75b966c6360bf/src%2FMicroweberPackages%2FMedia%2FMediaManager.php', 'patch': \"@@ -4,6 +4,7 @@\\n \\n use Conner\\\\Tagging\\\\Model\\\\Tagged;\\n use \\\\Intervention\\\\Image\\\\ImageManagerStatic as Image;\\n+use MicroweberPackages\\\\Helper\\\\HTMLClean;\\n use MicroweberPackages\\\\Media\\\\Models\\\\Media;\\n use MicroweberPackages\\\\Media\\\\Models\\\\MediaThumbnail;\\n use MicroweberPackages\\\\Utils\\\\Media\\\\Thumbnailer;\\n@@ -1184,6 +1185,10 @@ public function thumbnail_img($params)\\n \\n     public function create_media_dir($params)\\n     {\\n+\\n+        $clean = new HTMLClean();\\n+        $_REQUEST = $clean->cleanArray($_REQUEST);\\n+\\n         must_have_access();\\n         $resp = array();\\n         // $target_path = media_base_path() . 'uploaded' . DS;\\n@@ -1198,7 +1203,7 @@ public function create_media_dir($params)\\n \\n             $target_path = $fn_path;\\n         }\\n-        if (!isset($_REQUEST['name'])) {\\n+        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {\\n             $resp = array('error' => 'You must send new_folder parameter');\\n         } else {\\n             $fn_new_folder_path = $_REQUEST['name'];\"}}",
      "message_norm": "add xss clean to create media dir method",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/Media/MediaManager.php'])",
      "num_files": 1.0
    },
    {
      "index": 3447,
      "vuln_id": "GHSA-xjfw-5vv5-vjq2",
      "cwe_id": "{'CWE-79', 'CWE-116'}",
      "score": 7.4,
      "chain": "{'https://github.com/xwiki/xwiki-platform/commit/21906acb5ee2304552f56f9bbdbf8e7d368f7f3a'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Filter Stream Converter Application in XWiki Platform ### Impact\nWe found a possible XSS vector in the `Filter.FilterStreamDescriptorForm` wiki page related to pretty much all the form fields printed in the home page of the application.\n\n### Patches\nThe issue is patched in versions 12.10.11, 14.0-rc-1, 13.4.7, 13.10.3.\n\n### Workarounds\nThe easiest workaround is to edit the wiki page `Filter.FilterStreamDescriptorForm` (with wiki editor) and change the lines\n\n```\n          <input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\" value=\"#if($request.get($descriptorId))$request.get($descriptorId)#else$descriptor.defaultValue#end\"/>\n        #else\n          <input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\"#if($request.get($descriptorId))value=\"$request.get($descriptorId)\"#end/>\n```\n\ninto\n\n```\n          <input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\" value=\"#if($request.get($descriptorId))$escapetool.xml($request.get($descriptorId))#else$descriptor.defaultValue#end\"/>\n        #else\n          <input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\"#if($request.get($descriptorId))value=\"$escapetool.xml($request.get($descriptorId))\"#end/>\n```",
      "published_date": "2022-06-01",
      "chain_len": 1,
      "project": "https://github.com/xwiki/xwiki-platform",
      "commit_href": "https://github.com/xwiki/xwiki-platform/commit/21906acb5ee2304552f56f9bbdbf8e7d368f7f3a",
      "commit_sha": "21906acb5ee2304552f56f9bbdbf8e7d368f7f3a",
      "patch": "SINGLE",
      "chain_ord": "['21906acb5ee2304552f56f9bbdbf8e7d368f7f3a']",
      "before_first_fix_commit": "{'eed842a0ea9e263548805b908ebbd362213ce0ea'}",
      "last_fix_commit": "21906acb5ee2304552f56f9bbdbf8e7d368f7f3a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/04/2022, 10:33:53",
      "message": "XWIKI-19293: Fix bad escaping",
      "author": "Thomas Mortagne",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'xwiki-platform-core/xwiki-platform-filter/xwiki-platform-filter-ui/src/main/resources/Filter/FilterStreamDescriptorForm.xml': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/xwiki/xwiki-platform/raw/21906acb5ee2304552f56f9bbdbf8e7d368f7f3a/xwiki-platform-core%2Fxwiki-platform-filter%2Fxwiki-platform-filter-ui%2Fsrc%2Fmain%2Fresources%2FFilter%2FFilterStreamDescriptorForm.xml', 'patch': '@@ -58,9 +58,9 @@\\n       &lt;dd&gt;\\n         ## TODO: design a real framework to generate form by type\\n         #if (($descriptor.defaultValue || \"$!descriptor.defaultValue\" != \\'\\') &amp;&amp; ($descriptor.type.getName() == \\'boolean\\' || $descriptor.type.getName() == \\'int\\' || $descriptor.type.getName() == \\'java.lang.String\\'))\\n-          &lt;input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\" value=\"#if($request.get($descriptorId))$request.get($descriptorId)#else$descriptor.defaultValue#end\"/&gt;\\n+          &lt;input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\" value=\"#if($request.get($descriptorId))$escapetool.xml($request.get($descriptorId))#else$descriptor.defaultValue#end\"/&gt;\\n         #else\\n-          &lt;input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\"#if($request.get($descriptorId))value=\"$request.get($descriptorId)\"#end/&gt;\\n+          &lt;input type=\"text\" id=\"$descriptorId\" name=\"$descriptorId\"#if($request.get($descriptorId))value=\"$escapetool.xml($request.get($descriptorId))\"#end/&gt;\\n         #end\\n       &lt;/dd&gt;\\n     #end'}}",
      "message_norm": "xwiki-19293: fix bad escaping",
      "language": "ca",
      "entities": "[('fix', 'ACTION', ''), ('escaping', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['xwiki-platform-core/xwiki-platform-filter/xwiki-platform-filter-ui/src/main/resources/Filter/FilterStreamDescriptorForm.xml'])",
      "num_files": 1.0
    },
    {
      "index": 3069,
      "vuln_id": "GHSA-v768-w7m9-2vmm",
      "cwe_id": "{'CWE-824'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed'}",
      "dataset": "osv",
      "summary": "Reference binding to nullptr in shape inference ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n  \ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.SparseFillEmptyRows(\n  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),\n  values = tf.constant([], shape=[0], dtype=tf.int64),\n  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),\n  default_value = 0)\n```\n  \nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors.\n\n### Patches \nWe have patched the issue in GitHub commit [578e634b4f1c1c684d4b4294f9e5281b2133b3ed](https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
      "commit_sha": "578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
      "patch": "SINGLE",
      "chain_ord": "['578e634b4f1c1c684d4b4294f9e5281b2133b3ed']",
      "before_first_fix_commit": "{'d7de67733925de196ec8863a33445b73f9562d1d'}",
      "last_fix_commit": "578e634b4f1c1c684d4b4294f9e5281b2133b3ed",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/30/2021, 05:24:08",
      "message": "Prevent a segfault in shape inference due to bad inputs.\n\nPiperOrigin-RevId: 387737970\nChange-Id: Ibd1cf3dbdce1dd2ab47fd633d5c5a57f7d8fb6e9",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/ops/sparse_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/578e634b4f1c1c684d4b4294f9e5281b2133b3ed/tensorflow%2Fcore%2Fops%2Fsparse_ops.cc', 'patch': '@@ -16,6 +16,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/common_shape_fns.h\"\\n #include \"tensorflow/core/framework/op.h\"\\n #include \"tensorflow/core/framework/shape_inference.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n \\n namespace tensorflow {\\n \\n@@ -619,6 +620,8 @@ REGISTER_OP(\"SparseFillEmptyRows\")\\n       DimensionHandle unused_dim;\\n       TF_RETURN_IF_ERROR(c->Merge(c->Dim(input_indices, 1),\\n                                   c->Dim(input_shape, 0), &unused_dim));\\n+      if (c->Value(c->NumElements(input_shape)) == 0)\\n+        return errors::InvalidArgument(\"dense_shape must not be empty\");\\n       ShapeHandle output_indices =\\n           c->Matrix(InferenceContext::kUnknownDim, c->NumElements(input_shape));\\n       ShapeHandle output_values = c->Vector(InferenceContext::kUnknownDim);'}}",
      "message_norm": "prevent a segfault in shape inference due to bad inputs.\n\npiperorigin-revid: 387737970\nchange-id: ibd1cf3dbdce1dd2ab47fd633d5c5a57f7d8fb6e9",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('387737970', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/ops/sparse_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2222,
      "vuln_id": "GHSA-j8qh-3xrq-c825",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite's implementation of `OneHot` ### Impact\nThe implementation of the `OneHot` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/f61c57bd425878be108ec787f4d96390579fb83e/tensorflow/lite/kernels/one_hot.cc#L68-L72):\n\n```cc\nint prefix_dim_size = 1;\nfor (int i = 0; i < op_context.axis; ++i) {\n  prefix_dim_size *= op_context.indices->dims->data[i];\n}\nconst int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;\n```\n\nAn attacker can craft a model such that at least one of the dimensions of `indices` would be 0. In turn, the `prefix_dim_size` value would become 0.\n\n### Patches\nWe have patched the issue in GitHub commit [3ebedd7e345453d68e279cfc3e4072648e5e12e5](https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5",
      "commit_sha": "3ebedd7e345453d68e279cfc3e4072648e5e12e5",
      "patch": "SINGLE",
      "chain_ord": "['3ebedd7e345453d68e279cfc3e4072648e5e12e5']",
      "before_first_fix_commit": "{'f61c57bd425878be108ec787f4d96390579fb83e'}",
      "last_fix_commit": "3ebedd7e345453d68e279cfc3e4072648e5e12e5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 19:58:07",
      "message": "Prevent division by 0 in OneHot implementation\n\nIf input indices is degenerate, the implementation would do a divide by zero. See https://github.com/tensorflow/tensorflow/blob/745d57df6d5e9bc568666a2a48ed8dd629c27241/tensorflow/lite/kernels/one_hot.cc#L68-L72\n\nPiperOrigin-RevId: 370966870\nChange-Id: Ie018337811c8016b5a1d3a277d00d5f2e19a2058",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/lite/kernels/one_hot.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/3ebedd7e345453d68e279cfc3e4072648e5e12e5/tensorflow%2Flite%2Fkernels%2Fone_hot.cc', 'patch': '@@ -69,6 +69,11 @@ void OneHotComputeImpl(const OneHotContext& op_context) {\\n   for (int i = 0; i < op_context.axis; ++i) {\\n     prefix_dim_size *= op_context.indices->dims->data[i];\\n   }\\n+  if (prefix_dim_size == 0) {\\n+    // If indices tensor is degenerate, return a degenerate tensor, just like\\n+    // TensorFlow does.\\n+    return;\\n+  }\\n   const int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;\\n   const int depth = *op_context.depth->data.i32;'}}",
      "message_norm": "prevent division by 0 in onehot implementation\n\nif input indices is degenerate, the implementation would do a divide by zero. see https://github.com/tensorflow/tensorflow/blob/745d57df6d5e9bc568666a2a48ed8dd629c27241/tensorflow/lite/kernels/one_hot.cc#l68-l72\n\npiperorigin-revid: 370966870\nchange-id: ie018337811c8016b5a1d3a277d00d5f2e19a2058",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('divide by zero', 'SECWORD', ''), ('https://github.com/tensorflow/tensorflow/blob/745d57df6d5e9bc568666a2a48ed8dd629c27241/tensorflow/lite/kernels/one_hot.cc#l68-l72', 'URL', ''), ('370966870', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/one_hot.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3400,
      "vuln_id": "GHSA-x92h-wmg2-6hp7",
      "cwe_id": "{'CWE-89', 'CWE-79'}",
      "score": 9.8,
      "chain": "{'https://github.com/symfony/symfony/commit/944e60f083c3bffbc6a0b5112db127a10a66a8ec'}",
      "dataset": "osv",
      "summary": "Invalid HTTP method overrides allow possible XSS or other attacks in Symfony In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony/http-foundation.",
      "published_date": "2019-12-02",
      "chain_len": 1,
      "project": "https://github.com/symfony/symfony",
      "commit_href": "https://github.com/symfony/symfony/commit/944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "commit_sha": "944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "patch": "SINGLE",
      "chain_ord": "['944e60f083c3bffbc6a0b5112db127a10a66a8ec']",
      "before_first_fix_commit": "{'b7bdf2ce435b0aeb8edb8349f0456f7ca3d21035'}",
      "last_fix_commit": "944e60f083c3bffbc6a0b5112db127a10a66a8ec",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/02/2019, 16:28:16",
      "message": "[HttpFoundation] reject invalid method override",
      "author": "Nicolas Grekas",
      "comments": "{'com_1': {'author': 'jirayutza1', 'datetime': '12/04/2019, 20:11:46', 'body': '944e60f'}}",
      "stats": "{'additions': 29, 'deletions': 14, 'total': 43}",
      "files": "{'src/Symfony/Component/HttpFoundation/Request.php': {'additions': 29, 'deletions': 14, 'changes': 43, 'status': 'modified', 'raw_url': 'https://github.com/symfony/symfony/raw/944e60f083c3bffbc6a0b5112db127a10a66a8ec/src%2FSymfony%2FComponent%2FHttpFoundation%2FRequest.php', 'patch': '@@ -1346,22 +1346,37 @@ public function setMethod($method)\\n      */\\n     public function getMethod()\\n     {\\n-        if (null === $this->method) {\\n-            $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n-\\n-            if (\\'POST\\' === $this->method) {\\n-                if ($method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\')) {\\n-                    $this->method = strtoupper($method);\\n-                } elseif (self::$httpMethodParameterOverride) {\\n-                    $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n-                    if (\\\\is_string($method)) {\\n-                        $this->method = strtoupper($method);\\n-                    }\\n-                }\\n-            }\\n+        if (null !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $this->method = strtoupper($this->server->get(\\'REQUEST_METHOD\\', \\'GET\\'));\\n+\\n+        if (\\'POST\\' !== $this->method) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = $this->headers->get(\\'X-HTTP-METHOD-OVERRIDE\\');\\n+\\n+        if (!$method && self::$httpMethodParameterOverride) {\\n+            $method = $this->request->get(\\'_method\\', $this->query->get(\\'_method\\', \\'POST\\'));\\n+        }\\n+\\n+        if (!\\\\is_string($method)) {\\n+            return $this->method;\\n+        }\\n+\\n+        $method = strtoupper($method);\\n+\\n+        if (\\\\in_array($method, [\\'GET\\', \\'HEAD\\', \\'POST\\', \\'PUT\\', \\'DELETE\\', \\'CONNECT\\', \\'OPTIONS\\', \\'PATCH\\', \\'PURGE\\', \\'TRACE\\'], true)) {\\n+            return $this->method = $method;\\n+        }\\n+\\n+        if (!preg_match(\\'/^[A-Z]++$/D\\', $method)) {\\n+            throw new SuspiciousOperationException(sprintf(\\'Invalid method override \"%s\".\\', $method));\\n         }\\n \\n-        return $this->method;\\n+        return $this->method = $method;\\n     }\\n \\n     /**'}}",
      "message_norm": "[httpfoundation] reject invalid method override",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Symfony/Component/HttpFoundation/Request.php'])",
      "num_files": 1.0
    },
    {
      "index": 3293,
      "vuln_id": "GHSA-wm7h-9275-46v2",
      "cwe_id": "{'CWE-248'}",
      "score": 7.5,
      "chain": "{'https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac'}",
      "dataset": "osv",
      "summary": "Crash in HeaderParser in dicer This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. A complete denial of service can be achived by sending the malicious form in a loop.",
      "published_date": "2022-05-21",
      "chain_len": 1,
      "project": "https://github.com/mscdex/dicer",
      "commit_href": "https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
      "commit_sha": "b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
      "patch": "SINGLE",
      "chain_ord": "['b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac']",
      "before_first_fix_commit": "{'524254c4af4e8f2ed070facac8f6d91538b41eef'}",
      "last_fix_commit": "b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/10/2021, 09:41:48",
      "message": "removed bug caused by uninitialized variable h in function HeaderParser.prototype._parseHeader",
      "author": "Roland Heinze",
      "comments": null,
      "stats": "{'additions': 20, 'deletions': 18, 'total': 38}",
      "files": "{'lib/HeaderParser.js': {'additions': 20, 'deletions': 18, 'changes': 38, 'status': 'modified', 'raw_url': 'https://github.com/mscdex/dicer/raw/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac/lib%2FHeaderParser.js', 'patch': \"@@ -82,26 +82,28 @@ HeaderParser.prototype._parseHeader = function() {\\n       // folded header content\\n       // RFC2822 says to just remove the CRLF and not the whitespace following\\n       // it, so we follow the RFC and include the leading whitespace ...\\n-      this.header[h][this.header[h].length - 1] += lines[i];\\n-    } else {\\n-      m = RE_HDR.exec(lines[i]);\\n-      if (m) {\\n-        h = m[1].toLowerCase();\\n-        if (m[2]) {\\n-          if (this.header[h] === undefined)\\n-            this.header[h] = [m[2]];\\n-          else\\n-            this.header[h].push(m[2]);\\n-        } else\\n-          this.header[h] = [''];\\n-        if (++this.npairs === this.maxHeaderPairs)\\n-          break;\\n-      } else {\\n-        this.buffer = lines[i];\\n-        modded = true;\\n-        break;\\n+      if (h) {\\n+        this.header[h][this.header[h].length - 1] += lines[i];\\n+        continue;\\n       }\\n     }\\n+    m = RE_HDR.exec(lines[i]);\\n+    if (m) {\\n+      h = m[1].toLowerCase();\\n+      if (m[2]) {\\n+        if (this.header[h] === undefined)\\n+          this.header[h] = [m[2]];\\n+        else\\n+          this.header[h].push(m[2]);\\n+      } else\\n+        this.header[h] = [''];\\n+      if (++this.npairs === this.maxHeaderPairs)\\n+        break;\\n+    } else {\\n+      this.buffer = lines[i];\\n+      modded = true;\\n+      break;\\n+    }\\n   }\\n   if (!modded)\\n     this.buffer = '';\"}}",
      "message_norm": "removed bug caused by uninitialized variable h in function headerparser.prototype._parseheader",
      "language": "en",
      "entities": "[('removed', 'ACTION', ''), ('bug', 'FLAW', ''), ('uninitialized', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/HeaderParser.js'])",
      "num_files": 1.0
    },
    {
      "index": 2219,
      "vuln_id": "GHSA-j8cx-j9j2-f29w",
      "cwe_id": "{'CWE-922'}",
      "score": 0.0,
      "chain": "{'https://github.com/microweber/microweber/commit/b592c86d2b927c0cae5b73b87fb541f25e777aa3'}",
      "dataset": "osv",
      "summary": "Insecure Storage of Sensitive Information in Microweber Microweber prior to version 1.3 does not strip images of EXIF data, exposing information about users' locations, device hardware, and device software.",
      "published_date": "2022-02-24",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/b592c86d2b927c0cae5b73b87fb541f25e777aa3",
      "commit_sha": "b592c86d2b927c0cae5b73b87fb541f25e777aa3",
      "patch": "SINGLE",
      "chain_ord": "['b592c86d2b927c0cae5b73b87fb541f25e777aa3']",
      "before_first_fix_commit": "{'bfb86241bbb8cffe8291822091c6411498ac2a3e'}",
      "last_fix_commit": "b592c86d2b927c0cae5b73b87fb541f25e777aa3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/22/2022, 11:07:12",
      "message": "Update plupload.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'src/MicroweberPackages/App/functions/plupload.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/b592c86d2b927c0cae5b73b87fb541f25e777aa3/src%2FMicroweberPackages%2FApp%2Ffunctions%2Fplupload.php', 'patch': \"@@ -522,22 +522,22 @@\\n                 // This will clear exif data - security issue\\n                 $imgCreatedFromJpeg = @imagecreatefromjpeg($filePath);\\n                 if ($imgCreatedFromJpeg) {\\n-                    imagejpeg($imgCreatedFromJpeg, $filePath,100);\\n+                    imagejpeg($imgCreatedFromJpeg, $filePath,100);  // this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\\n             } else if ($ext === 'png') {\\n \\n                 $imgCreatedFromPng = @imagecreatefrompng($filePath);\\n                 if ($imgCreatedFromPng) {\\n-                    imagepng($imgCreatedFromPng, $filePath,100);\\n+                    imagepng($imgCreatedFromPng, $filePath,100);  // this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\\n \\n             } else if ($ext === 'gif') {\\n \\n                 $imgCreatedFromGif = @imagecreatefromgif($filePath);\\n                 if ($imgCreatedFromGif) {\\n-                    imagegif($imgCreatedFromGif, $filePath,100);\\n+                    imagegif($imgCreatedFromGif, $filePath,100); // this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\"}}",
      "message_norm": "update plupload.php",
      "language": "ro",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/App/functions/plupload.php'])",
      "num_files": 1.0
    },
    {
      "index": 2095,
      "vuln_id": "GHSA-hm45-mgqm-gjm4",
      "cwe_id": "{'CWE-79'}",
      "score": 7.7,
      "chain": "{'https://github.com/Cog-Creators/Red-Dashboard/commit/a6b9785338003ec87fb75305e7d1cc2d40c7ab91', 'https://github.com/Cog-Creators/Red-Dashboard/commit/99d88b840674674166ce005b784ae8e31e955ab1'}",
      "dataset": "osv",
      "summary": "Remote Code Execution (RCE) Exploit on Cross Site Scripting (XSS) Vulnerability ### Impact\nA RCE exploit has been discovered in the Red Discord Bot - Dashboard Webserver: this exploit allows Discord users with specially crafted Server names and Usernames/Nicknames to inject code into the webserver front-end code.  By abusing this exploit, it's possible to perform destructive actions and/or access sensitive information.\n\n### Patches\nThis high severity exploit has been fixed on version `0.1.7a`.\n\n### Workarounds\nThere are no workarounds, bot owners must upgrade their relevant packages (Dashboard module and Dashboard webserver) in order to patch this issue\n\n### References\n- 99d88b8\n- a6b9785\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators/Red-Dashboard](https://github.com/Cog-Creators/Red-Dashboard/issues/new/choose)\n* Over on the official [Red Server](https://discord.gg/red) or at the Third Party Server [Toxic Layer](https://discord.gg/vQZTdB9)",
      "published_date": "2020-12-08",
      "chain_len": 2,
      "project": "https://github.com/Cog-Creators/Red-Dashboard",
      "commit_href": "https://github.com/Cog-Creators/Red-Dashboard/commit/99d88b840674674166ce005b784ae8e31e955ab1",
      "commit_sha": "99d88b840674674166ce005b784ae8e31e955ab1",
      "patch": "MULTI",
      "chain_ord": "['99d88b840674674166ce005b784ae8e31e955ab1', 'a6b9785338003ec87fb75305e7d1cc2d40c7ab91']",
      "before_first_fix_commit": "{'261f00f52bbfee4db67f624fd7409bf08124a6c4'}",
      "last_fix_commit": "a6b9785338003ec87fb75305e7d1cc2d40c7ab91",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/30/2020, 11:49:18",
      "message": "Fix unformatted HTML",
      "author": "NeuroAssassin",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 2, 'total': 8}",
      "files": "{'reddash/app/home/templates/dashboard.html': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/Cog-Creators/Red-Dashboard/raw/99d88b840674674166ce005b784ae8e31e955ab1/reddash%2Fapp%2Fhome%2Ftemplates%2Fdashboard.html', 'patch': '@@ -72,6 +72,7 @@ <h1>{{ _(\\'Loading servers...\\') }}</h1>\\n                 } else {\\r\\n                     var base_guild_url = \"{{ url_for(\\'home_blueprint.guild\\', guild=\\'123456789123456789\\') }}\"\\r\\n                     $(\"#serverrow\").html(\"\")\\r\\n+                    let counter = 0\\r\\n                     for (let g of json.data) {\\r\\n                         var current_guild_url = base_guild_url.replace(\"123456789123456789\", g.id)\\r\\n                         $(\"#serverrow\").append(`\\r\\n@@ -80,13 +81,16 @@ <h1>{{ _(\\'Loading servers...\\') }}</h1>\\n                                     <div class=\"card h-100\" onmouseover=\"playGif(this)\" onmouseout=\"stopGif(this)\">\\r\\n                                         <img class=\"card-img-top\" src=\"${g.icon}png\" alt=\"Card image cap\" data-src-url=\"${g.icon}\" data-is-animated=${g.animated}>\\r\\n                                         <div class=\"card-body\">\\r\\n-                                            <h5 class=\"card-title\">${g.name}</h5>\\r\\n-                                            <p class=\"card-text\">Owner: ${g.owner}</p>\\r\\n+                                            <h5 class=\"card-title\" id=\"guild-counter-${counter}\">Loading...</h5>\\r\\n+                                            <p class=\"card-text\" id=\"owner-counter-${counter}\">Owner: Loading...</p>\\r\\n                                         </div>\\r\\n                                     </div>\\r\\n                                 </a>\\r\\n                             </div>\\r\\n                         `)\\r\\n+                        $(`#guild-counter-${counter}`).text(g.name)\\r\\n+                        $(`#owner-counter-${counter}`).text(g.owner)\\r\\n+                        counter += 1\\r\\n                     }\\r\\n                 }\\r\\n             }'}}",
      "message_norm": "fix unformatted html",
      "language": "en",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['reddash/app/home/templates/dashboard.html'])",
      "num_files": 1.0
    },
    {
      "index": 567,
      "vuln_id": "GHSA-56wv-2wr9-3h9r",
      "cwe_id": "{'CWE-347'}",
      "score": 7.5,
      "chain": "{'https://github.com/AntonKueltz/fastecdsa/commit/e592f106edd5acf6dacedfab2ad16fe6c735c9d1', 'https://github.com/AntonKueltz/fastecdsa/commit/7b64e3efaa806b4daaf73bb5172af3581812f8de', 'https://github.com/AntonKueltz/fastecdsa/commit/4a16daeaf139be20654ef58a9fe4c79dc030458c'}",
      "dataset": "osv",
      "summary": "Improper Verification of Cryptographic Signature in fastecdsa An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",
      "published_date": "2021-10-12",
      "chain_len": 3,
      "project": "https://github.com/AntonKueltz/fastecdsa",
      "commit_href": "https://github.com/AntonKueltz/fastecdsa/commit/7b64e3efaa806b4daaf73bb5172af3581812f8de",
      "commit_sha": "7b64e3efaa806b4daaf73bb5172af3581812f8de",
      "patch": "MULTI",
      "chain_ord": "['e592f106edd5acf6dacedfab2ad16fe6c735c9d1', '7b64e3efaa806b4daaf73bb5172af3581812f8de', '4a16daeaf139be20654ef58a9fe4c79dc030458c']",
      "before_first_fix_commit": "{'7b64e3efaa806b4daaf73bb5172af3581812f8de'}",
      "last_fix_commit": "4a16daeaf139be20654ef58a9fe4c79dc030458c",
      "chain_ord_pos": 2.0,
      "commit_datetime": "04/14/2020, 09:45:48",
      "message": "Update docs to v2.1.2",
      "author": "AntonKueltz",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'docs/conf.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/AntonKueltz/fastecdsa/raw/7b64e3efaa806b4daaf73bb5172af3581812f8de/docs%2Fconf.py', 'patch': \"@@ -64,7 +64,7 @@\\n # The short X.Y version.\\n version = '2.1'\\n # The full version, including alpha/beta/rc tags.\\n-release = '2.1.1'\\n+release = '2.1.2'\\n \\n # The language for content autogenerated by Sphinx. Refer to documentation\\n # for a list of supported languages.\"}}",
      "message_norm": "update docs to v2.1.2",
      "language": "sl",
      "entities": "[('v2.1.2', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['docs/conf.py'])",
      "num_files": 1.0
    },
    {
      "index": 3007,
      "vuln_id": "GHSA-rrx2-r989-2c43",
      "cwe_id": "{'CWE-190'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'https://github.com/tensorflow/tensorflow/commit/e952a89b7026b98fe8cbe626514a93ed68b7c510'}",
      "dataset": "osv",
      "summary": "Integer overflows in Tensorflow ### Impact \nThe [implementations of `Sparse*Cwise*` ops](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    dense=np.array([4]))\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n\n### Patches\nWe have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https://github.com/tensorflow/tensorflow/commit/e952a89b7026b98fe8cbe626514a93ed68b7c510).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
      "published_date": "2022-02-09",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8",
      "commit_sha": "1b54cadd19391b60b6fcccd8d076426f7221d5e8",
      "patch": "MULTI",
      "chain_ord": "['1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'e952a89b7026b98fe8cbe626514a93ed68b7c510']",
      "before_first_fix_commit": "{'1b54cadd19391b60b6fcccd8d076426f7221d5e8'}",
      "last_fix_commit": "e952a89b7026b98fe8cbe626514a93ed68b7c510",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/10/2021, 17:46:39",
      "message": "Add missing validation to sparse dense cwise ops.\n\nPiperOrigin-RevId: 415543133\nChange-Id: I5baf3284e919338afb96178c468ad3d3cb0d956c",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 0, 'total': 13}",
      "files": "{'tensorflow/core/kernels/sparse_dense_binary_op_shared.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1b54cadd19391b60b6fcccd8d076426f7221d5e8/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -78,11 +78,24 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n                     \"but received shapes: \",\\n                     values_t->shape().DebugString(), \" and \",\\n                     shape_t->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, TensorShapeUtils::IsVector(shape_t->shape()),\\n+        errors::InvalidArgument(\"Input sp_shape must be a vector. Got: \",\\n+                                shape_t->shape().DebugString()));\\n     OP_REQUIRES(\\n         ctx, values_t->dim_size(0) == indices_t->dim_size(0),\\n         errors::InvalidArgument(\\n             \"The first dimension of values and indices should match. (\",\\n             values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\\n+    OP_REQUIRES(\\n+        ctx, shape_t->shape().dim_size(0) == indices_t->shape().dim_size(1),\\n+        errors::InvalidArgument(\\n+            \"Number of dimensions must match second dimension of indices. \",\\n+            \"Got \", shape_t->shape().dim_size(0),\\n+            \" dimensions, indices shape: \", indices_t->shape().DebugString()));\\n+    OP_REQUIRES(ctx, shape_t->NumElements() > 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n \\n     const auto indices_mat = indices_t->matrix<int64_t>();\\n     const auto shape_vec = shape_t->vec<int64_t>();'}}",
      "message_norm": "add missing validation to sparse dense cwise ops.\n\npiperorigin-revid: 415543133\nchange-id: i5baf3284e919338afb96178c468ad3d3cb0d956c",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('415543133', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_dense_binary_op_shared.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2965,
      "vuln_id": "GHSA-rmj8-8hhh-gv5h",
      "cwe_id": "{'CWE-200'}",
      "score": 8.0,
      "chain": "{'https://github.com/puma/puma/commit/b70f451fe8abc0cff192c065d549778452e155bb'}",
      "dataset": "osv",
      "summary": "Information Exposure when using Puma with Rails ### Impact\nPrior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly.\n\nFrom Rails:\n\n> Under certain circumstances response bodies will not be closed, for example a bug in a webserver[1] or a bug in a Rack middleware. In the event a response is not notified of a close, ActionDispatch::Executor will not know to reset thread local state for the next request. This can lead to data being leaked to subsequent requests, especially when interacting with ActiveSupport::CurrentAttributes.\n\nThe combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage.\n\n### Patches\nThis problem is fixed in Puma versions 5.6.2 and 4.3.11.\n\nThis problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\nSee: \nhttps://github.com/advisories/GHSA-wh98-p28r-vrc9 \nfor details about the rails vulnerability\n\nUpgrading to a patched Rails _or_ Puma version fixes the vulnerability.\n\n### Workarounds\n\nUpgrade to Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\nThe [Rails CVE](https://groups.google.com/g/ruby-security-ann/c/FkTM-_7zSNA/m/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1) includes a middleware that can be used instead.\n\n### References\n\n* Rails CVE: [CVE-2022-23633](https://groups.google.com/g/ruby-security-ann/c/FkTM-_7zSNA/m/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [puma](https://github.com/puma/puma)\n* See our [security policy](https://github.com/puma/puma/security/policy)",
      "published_date": "2022-02-11",
      "chain_len": 1,
      "project": "https://github.com/puma/puma",
      "commit_href": "https://github.com/puma/puma/commit/b70f451fe8abc0cff192c065d549778452e155bb",
      "commit_sha": "b70f451fe8abc0cff192c065d549778452e155bb",
      "patch": "SINGLE",
      "chain_ord": "['b70f451fe8abc0cff192c065d549778452e155bb']",
      "before_first_fix_commit": "{'15dd1166ac0750e74720fecee7904e6069ad6d7f'}",
      "last_fix_commit": "b70f451fe8abc0cff192c065d549778452e155bb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/11/2022, 14:58:08",
      "message": "Ensure `close` is called on the response body no matter what\n\nAnother fallout from https://github.com/puma/puma/pull/2809 is that\nin some cases the `res_body.close` wasn't called because some previous code\nraised.\n\nFor Rails apps it means CurrentAttributes and a few other important\nstates aren't reset properly.\n\nThis is being improved on the Rails side too, but I believe it would\nbe good to harden this on the puma side as well.",
      "author": "Jean Boussier",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 5, 'total': 15}",
      "files": "{'lib/puma/request.rb': {'additions': 10, 'deletions': 5, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/puma/puma/raw/b70f451fe8abc0cff192c065d549778452e155bb/lib%2Fpuma%2Frequest.rb', 'patch': '@@ -171,11 +171,16 @@ def handle_request(client, lines, requests)\\n         end\\n \\n       ensure\\n-        uncork_socket io\\n-\\n-        body.close\\n-        client.tempfile.unlink if client.tempfile\\n-        res_body.close if res_body.respond_to? :close\\n+        begin\\n+          uncork_socket io\\n+\\n+          body.close\\n+          client.tempfile.unlink if client.tempfile\\n+        ensure\\n+          # Whatever happens, we MUST call `close` on the response body.\\n+          # Otherwise Rack::BodyProxy callbacks may not fire and lead to various state leaks\\n+          res_body.close if res_body.respond_to? :close\\n+        end\\n \\n         after_reply.each { |o| o.call }\\n       end'}}",
      "message_norm": "ensure `close` is called on the response body no matter what\n\nanother fallout from https://github.com/puma/puma/pull/2809 is that\nin some cases the `res_body.close` wasn't called because some previous code\nraised.\n\nfor rails apps it means currentattributes and a few other important\nstates aren't reset properly.\n\nthis is being improved on the rails side too, but i believe it would\nbe good to harden this on the puma side as well.",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('https://github.com/puma/puma/pull/2809', 'URL', ''), ('improved', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/puma/request.rb'])",
      "num_files": 1.0
    },
    {
      "index": 2090,
      "vuln_id": "GHSA-hm37-9xh2-q499",
      "cwe_id": "{'CWE-209'}",
      "score": 7.7,
      "chain": "{'https://github.com/scottcwang/openssh_key_parser/commit/d5b53b4b7e76c5b666fc657019dbf864fb04076c', 'https://github.com/scottcwang/openssh_key_parser/commit/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'https://github.com/scottcwang/openssh_key_parser/commit/274447f91b4037b7050ae634879b657554523b39'}",
      "dataset": "osv",
      "summary": "Possible leak of key's raw field if declared length is incorrect ### Impact\nIf a field of a key is shorter than it is declared to be, the parser raises an error with a message containing the raw field value. An attacker able to modify the declared length of a key's sensitive field can thus expose the raw value of that field.\n\n### Patches\nUpgrade to version 0.0.6, which no longer includes the raw field value in the error message.\n\n### Workarounds\nN/A\n\n### References\nN/A\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [openssh_key_parser](https://github.com/scottcwang/openssh_key_parser)",
      "published_date": "2022-07-06",
      "chain_len": 3,
      "project": "https://github.com/scottcwang/openssh_key_parser",
      "commit_href": "https://github.com/scottcwang/openssh_key_parser/commit/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3",
      "commit_sha": "26e0a471e9fdb23e635bc3014cf4cbd2323a08d3",
      "patch": "MULTI",
      "chain_ord": "['26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'd5b53b4b7e76c5b666fc657019dbf864fb04076c', '274447f91b4037b7050ae634879b657554523b39']",
      "before_first_fix_commit": "{'ae4d131d1cd8fe06325bfd6b749305aca60873bf', '69fe5b7addc21d3f39626ae93c6961811aea9d4c'}",
      "last_fix_commit": "274447f91b4037b7050ae634879b657554523b39",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/22/2022, 14:49:37",
      "message": "Changed an exception message to prevent possible disclosures of keying material.",
      "author": "Michael Doyle",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'openssh_key/pascal_style_byte_stream.py': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/scottcwang/openssh_key_parser/raw/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3/openssh_key%2Fpascal_style_byte_stream.py', 'patch': '@@ -236,7 +236,8 @@ def read_fixed_bytes(self, num_bytes: int) -> bytes:\\n         \"\"\"\\n         read_bytes = self.read(num_bytes)\\n         if len(read_bytes) < num_bytes:\\n-            raise EOFError(read_bytes)\\n+            raise EOFError(\"Fewer than \\'num_bytes\\' bytes remaining in the \"\\n+                    \"underlying bytestream\")\\n         return read_bytes\\n \\n     def read_pascal_bytes(self, string_length_size: int) -> bytes:'}}",
      "message_norm": "changed an exception message to prevent possible disclosures of keying material.",
      "language": "en",
      "entities": "[('changed', 'ACTION', ''), ('prevent', 'ACTION', ''), ('keying', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['openssh_key/pascal_style_byte_stream.py'])",
      "num_files": 1.0
    },
    {
      "index": 3281,
      "vuln_id": "GHSA-whr9-vfh2-7hm6",
      "cwe_id": "{'CWE-787'}",
      "score": 4.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517'}",
      "dataset": "osv",
      "summary": "Memory corruption in `DrawBoundingBoxesV2` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([10, 96, 0, 1], 0.)\nboxes = tf.fill([10, 53, 0], 0.)\ncolors = tf.fill([0, 1], 0.)\n\ntf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of `boxes` input is 4, as required by [the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption:\n\n```cc \nconst auto tboxes = boxes.tensor<T, 3>();\nfor (int64 bb = 0; bb < num_boxes; ++bb) {\n  ...\n  const int64 min_box_row = static_cast<float>(tboxes(b, bb, 0)) * (height - 1);\n  const int64 max_box_row = static_cast<float>(tboxes(b, bb, 2)) * (height - 1);\n  const int64 min_box_col = static_cast<float>(tboxes(b, bb, 1)) * (width - 1);\n  const int64 max_box_col = static_cast<float>(tboxes(b, bb, 3)) * (width - 1);\n  ...\n}\n``` \n\nIf the last dimension in `boxes` is less than 4, accesses similar to `tboxes(b, bb, 3)` will access data outside of bounds. Further during code execution there are also writes to these indices.\n\n### Patches\nWe have patched the issue in GitHub commit [79865b542f9ffdc9caeb255631f7c56f1d4b6517](https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517",
      "commit_sha": "79865b542f9ffdc9caeb255631f7c56f1d4b6517",
      "patch": "SINGLE",
      "chain_ord": "['79865b542f9ffdc9caeb255631f7c56f1d4b6517']",
      "before_first_fix_commit": "{'31bd5026304677faa8a0b77602c6154171b9aec1'}",
      "last_fix_commit": "79865b542f9ffdc9caeb255631f7c56f1d4b6517",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 01:05:46",
      "message": "Fix memory corruption issue with `tf.raw_ops.DrawBoundingBoxesV2`.\n\nPiperOrigin-RevId: 372033910\nChange-Id: I8a9f4efc1c8ddaacbc26ec1fbe4bfdd6791c226d",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'tensorflow/core/kernels/image/draw_bounding_box_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/79865b542f9ffdc9caeb255631f7c56f1d4b6517/tensorflow%2Fcore%2Fkernels%2Fimage%2Fdraw_bounding_box_op.cc', 'patch': '@@ -73,6 +73,12 @@ class DrawBoundingBoxesOp : public OpKernel {\\n         errors::InvalidArgument(\"Channel depth should be either 1 (GRY), \"\\n                                 \"3 (RGB), or 4 (RGBA)\"));\\n \\n+    OP_REQUIRES(\\n+        context, boxes.dim_size(2) == 4,\\n+        errors::InvalidArgument(\\n+            \"The size of the third dimension of the box must be 4. Received: \",\\n+            boxes.dim_size(2)));\\n+\\n     const int64 batch_size = images.dim_size(0);\\n     const int64 height = images.dim_size(1);\\n     const int64 width = images.dim_size(2);'}}",
      "message_norm": "fix memory corruption issue with `tf.raw_ops.drawboundingboxesv2`.\n\npiperorigin-revid: 372033910\nchange-id: i8a9f4efc1c8ddaacbc26ec1fbe4bfdd6791c226d",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('memory corruption', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372033910', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/image/draw_bounding_box_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 804,
      "vuln_id": "GHSA-69c3-5xxf-58q2",
      "cwe_id": "{'CWE-89'}",
      "score": 9.8,
      "chain": "{'https://github.com/moodle/moodle/commit/a0f47c8bc4d6f5971025de7d63f22475701d2f86'}",
      "dataset": "osv",
      "summary": "SQL injection in moodle A flaw was found in moodle where an SQL injection risk was identified in Badges code relating to configuring criteria.",
      "published_date": "2022-05-19",
      "chain_len": 1,
      "project": "https://github.com/moodle/moodle",
      "commit_href": "https://github.com/moodle/moodle/commit/a0f47c8bc4d6f5971025de7d63f22475701d2f86",
      "commit_sha": "a0f47c8bc4d6f5971025de7d63f22475701d2f86",
      "patch": "SINGLE",
      "chain_ord": "['a0f47c8bc4d6f5971025de7d63f22475701d2f86']",
      "before_first_fix_commit": "{'9478dc6b07b162f63b823480aecd4e2fb4e3c59f'}",
      "last_fix_commit": "a0f47c8bc4d6f5971025de7d63f22475701d2f86",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/31/2022, 10:17:31",
      "message": "MDL-74333 badges: Check profile criteria valid when reviewing",
      "author": "Michael Hawkins",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'badges/criteria/award_criteria_profile.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/moodle/moodle/raw/a0f47c8bc4d6f5971025de7d63f22475701d2f86/badges%2Fcriteria%2Faward_criteria_profile.php', 'patch': '@@ -202,8 +202,8 @@ public function review($userid, $filtered = false) {\\n                 $join .= \" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} \";\\n                 $sqlparams[\"fieldid{$idx}\"] = $param[\\'field\\'];\\n                 $whereparts[] = \"uid{$idx}.id IS NOT NULL\";\\n-            } else {\\n-                // This is a field from {user} table.\\n+            } else if (in_array($param[\\'field\\'], $this->allowed_default_fields)) {\\n+                // This is a valid field from {user} table.\\n                 if ($param[\\'field\\'] == \\'picture\\') {\\n                     // The picture field is numeric and requires special handling.\\n                     $whereparts[] = \"u.{$param[\\'field\\']} != 0\";'}}",
      "message_norm": "mdl-74333 badges: check profile criteria valid when reviewing",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['badges/criteria/award_criteria_profile.php'])",
      "num_files": 1.0
    },
    {
      "index": 2129,
      "vuln_id": "GHSA-hv96-xxx2-5v7w",
      "cwe_id": "{'CWE-311'}",
      "score": 8.1,
      "chain": "{'https://github.com/nwjs/npm-installer/commit/adb4df1e012d38a3872578d484291b9af07aad5b'}",
      "dataset": "osv",
      "summary": "Downloads Resources over HTTP in nw Affected versions of `nw` insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `nw`.\n\n\n## Recommendation\n\nUpdate to version 0.23.6-1 or later.",
      "published_date": "2019-02-18",
      "chain_len": 1,
      "project": "https://github.com/nwjs/npm-installer",
      "commit_href": "https://github.com/nwjs/npm-installer/commit/adb4df1e012d38a3872578d484291b9af07aad5b",
      "commit_sha": "adb4df1e012d38a3872578d484291b9af07aad5b",
      "patch": "SINGLE",
      "chain_ord": "['adb4df1e012d38a3872578d484291b9af07aad5b']",
      "before_first_fix_commit": "{'0fe9b728586885f7ab185dc27e60e696381d1b6f'}",
      "last_fix_commit": "adb4df1e012d38a3872578d484291b9af07aad5b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/12/2017, 16:57:53",
      "message": "fix nwjs/npm-installer#2 (start\u00a0using HTTPS: it\u00a0improves security)",
      "author": "Mithgol the Webmaster",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'scripts/install.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/nwjs/npm-installer/raw/adb4df1e012d38a3872578d484291b9af07aad5b/scripts%2Finstall.js', 'patch': \"@@ -33,7 +33,7 @@ if ( version.slice(-4) === '-sdk' ){\\n }\\n \\n var url = false;\\n-var urlBase = process.env.npm_config_nwjs_urlbase || process.env.NWJS_URLBASE ||  'http://dl.nwjs.io/v';\\n+var urlBase = process.env.npm_config_nwjs_urlbase || process.env.NWJS_URLBASE ||  'https://dl.nwjs.io/v';\\n var buildTypeSuffix = buildType === 'normal' ? '' : ('-' + buildType);\\n \\n // Determine download url\"}}",
      "message_norm": "fix nwjs/npm-installer#2 (start\u00a0using https: it\u00a0improves security)",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('improves', 'ACTION', ''), ('security', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['scripts/install.js'])",
      "num_files": 1.0
    },
    {
      "index": 2209,
      "vuln_id": "GHSA-j7rm-8ww4-xx2g",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite's implementation of `SpaceToDepth` ### Impact\nThe `Prepare` step of the `SpaceToDepth` TFLite operator [does not check for 0 before division](https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67).\n\n```cc \nconst int block_size = params->block_size;\nconst int input_height = input->dims->data[1];\nconst int input_width = input->dims->data[2];\nint output_height = input_height / block_size;\nint output_width = input_width / block_size;\n```   \n\nAn attacker can craft a model such that `params->block_size` would be zero.\n\n### Patches\nWe have patched the issue in GitHub commit [0d45ea1ca641b21b73bcf9c00e0179cda284e7e7](https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7",
      "commit_sha": "0d45ea1ca641b21b73bcf9c00e0179cda284e7e7",
      "patch": "SINGLE",
      "chain_ord": "['0d45ea1ca641b21b73bcf9c00e0179cda284e7e7']",
      "before_first_fix_commit": "{'5f7975d09eac0f10ed8a17dbb6f5964977725adc'}",
      "last_fix_commit": "0d45ea1ca641b21b73bcf9c00e0179cda284e7e7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 00:45:57",
      "message": "Prevent one more div by 0 in TFLite\n\nPiperOrigin-RevId: 370800114\nChange-Id: I6b956aeb8c458cc6f514408d2e89ffacfe249e57",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/lite/kernels/space_to_depth.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow%2Flite%2Fkernels%2Fspace_to_depth.cc', 'patch': '@@ -61,6 +61,7 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\\n \\n   const int block_size = params->block_size;\\n+  TF_LITE_ENSURE(context, block_size > 0);\\n   const int input_height = input->dims->data[1];\\n   const int input_width = input->dims->data[2];\\n   int output_height = input_height / block_size;'}}",
      "message_norm": "prevent one more div by 0 in tflite\n\npiperorigin-revid: 370800114\nchange-id: i6b956aeb8c458cc6f514408d2e89ffacfe249e57",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('div by 0', 'SECWORD', ''), ('370800114', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/space_to_depth.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2760,
      "vuln_id": "GHSA-qhmp-h54x-38qr",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/caronc/apprise/commit/e20fce630d55e4ca9b0a1e325a5fea6997489831'}",
      "dataset": "osv",
      "summary": "CWE-730 Regex injection with IFTTT Plugin ### Impact\r\nAnyone _publicly_ hosting the Apprise library and granting them access to the IFTTT notification service.\r\n\r\n### Patches\r\nUpdate to Apprise v0.9.5.1\r\n   ```bash\r\n   # Install Apprise v0.9.5.1 from PyPI\r\n   pip install apprise==0.9.5.1\r\n   ```\r\n\r\nThe patch to the problem was performed [here](https://github.com/caronc/apprise/pull/436/files).\r\n\r\n### Workarounds\r\nAlternatively, if upgrading is not an option, you can safely remove the following file:\r\n- `apprise/plugins/NotifyIFTTT.py` \r\n\r\nThe above will eliminate the ability to use IFTTT, but everything else will work smoothly.\r\n\r\n### For more information\r\nIf you have any questions or comments about this advisory:\r\n* Open an issue in [Apprise](https://github.com/caronc/apprise/issues)\r\n* Email me at [lead2gold@gmail.com](mailto:lead2gold@gmail.com)\r\n\r\n### Additional Credit\r\nGithub would not allow me to additionally credit **Rasmus Petersen**, but I would like to put that here at the very least - thank you for finding and reporting this issue along with those already credited\r\n\r\n## Additional Notes:\r\n- Github would not allow me to add/tag the 2 CWE's this issue is applicable to (only CWE-400).  The other is: CWE-730 (placed in the title)",
      "published_date": "2021-09-20",
      "chain_len": 1,
      "project": "https://github.com/caronc/apprise",
      "commit_href": "https://github.com/caronc/apprise/commit/e20fce630d55e4ca9b0a1e325a5fea6997489831",
      "commit_sha": "e20fce630d55e4ca9b0a1e325a5fea6997489831",
      "patch": "SINGLE",
      "chain_ord": "['e20fce630d55e4ca9b0a1e325a5fea6997489831']",
      "before_first_fix_commit": "{'81d1ea72bcee4441278a809a95fc0f91dc916402'}",
      "last_fix_commit": "e20fce630d55e4ca9b0a1e325a5fea6997489831",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/06/2021, 17:51:32",
      "message": "Slight bulletproofing to IFTTT regex handling (#436)",
      "author": "Chris Caron",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'apprise/plugins/NotifyIFTTT.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/caronc/apprise/raw/e20fce630d55e4ca9b0a1e325a5fea6997489831/apprise%2Fplugins%2FNotifyIFTTT.py', 'patch': \"@@ -355,7 +355,7 @@ def parse_native_url(url):\\n         result = re.match(\\n             r'^https?://maker\\\\.ifttt\\\\.com/use/'\\n             r'(?P<webhook_id>[A-Z0-9_-]+)'\\n-            r'/?(?P<events>([A-Z0-9_-]+/?)+)?'\\n+            r'((?P<events>(/[A-Z0-9_-]+)+))?'\\n             r'/?(?P<params>\\\\?.+)?$', url, re.I)\\n \\n         if result:\"}}",
      "message_norm": "slight bulletproofing to ifttt regex handling (#436)",
      "language": "no",
      "entities": "[('#436', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['apprise/plugins/NotifyIFTTT.py'])",
      "num_files": 1.0
    },
    {
      "index": 1009,
      "vuln_id": "GHSA-7c82-mp33-r854",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/snapappointments/bootstrap-select/commit/ab6e068748040cf3cda5859f6349b382402b8767'}",
      "dataset": "osv",
      "summary": "Cross-site scripting in bootstrap-select bootstrap-select before 1.13.6 allows Cross-Site Scripting (XSS). It does not escape title values in OPTION elements. This may allow attackers to execute arbitrary JavaScript in a victim's browser.",
      "published_date": "2021-05-07",
      "chain_len": 1,
      "project": "https://github.com/snapappointments/bootstrap-select",
      "commit_href": "https://github.com/snapappointments/bootstrap-select/commit/ab6e068748040cf3cda5859f6349b382402b8767",
      "commit_sha": "ab6e068748040cf3cda5859f6349b382402b8767",
      "patch": "SINGLE",
      "chain_ord": "['ab6e068748040cf3cda5859f6349b382402b8767']",
      "before_first_fix_commit": "{'bbd306de22fbcede9016cf7e335fd8ce34d6629d'}",
      "last_fix_commit": "ab6e068748040cf3cda5859f6349b382402b8767",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/07/2019, 23:05:50",
      "message": "add sanitize option for data-content (#2199)",
      "author": "Casey Holzer",
      "comments": null,
      "stats": "{'additions': 167, 'deletions': 6, 'total': 173}",
      "files": "{'js/bootstrap-select.js': {'additions': 167, 'deletions': 6, 'changes': 173, 'status': 'modified', 'raw_url': 'https://github.com/snapappointments/bootstrap-select/raw/ab6e068748040cf3cda5859f6349b382402b8767/js%2Fbootstrap-select.js', 'patch': \"@@ -1,6 +1,128 @@\\n (function ($) {\\n   'use strict';\\n \\n+  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];\\n+\\n+  var uriAttrs = [\\n+    'background',\\n+    'cite',\\n+    'href',\\n+    'itemtype',\\n+    'longdesc',\\n+    'poster',\\n+    'src',\\n+    'xlink:href'\\n+  ];\\n+\\n+  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\\\w-]*$/i;\\n+\\n+  var DefaultWhitelist = {\\n+    // Global attributes allowed on any supplied element below.\\n+    '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],\\n+    a: ['target', 'href', 'title', 'rel'],\\n+    area: [],\\n+    b: [],\\n+    br: [],\\n+    col: [],\\n+    code: [],\\n+    div: [],\\n+    em: [],\\n+    hr: [],\\n+    h1: [],\\n+    h2: [],\\n+    h3: [],\\n+    h4: [],\\n+    h5: [],\\n+    h6: [],\\n+    i: [],\\n+    img: ['src', 'alt', 'title', 'width', 'height'],\\n+    li: [],\\n+    ol: [],\\n+    p: [],\\n+    pre: [],\\n+    s: [],\\n+    small: [],\\n+    span: [],\\n+    sub: [],\\n+    sup: [],\\n+    strong: [],\\n+    u: [],\\n+    ul: []\\n+  }\\n+\\n+  /**\\n+   * A pattern that recognizes a commonly useful subset of URLs that are safe.\\n+   *\\n+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\\n+   */\\n+  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\\n+\\n+  /**\\n+   * A pattern that matches safe data URLs. Only matches image, video and audio types.\\n+   *\\n+   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\\n+   */\\n+  var DATA_URL_PATTERN = /^data:(?:image\\\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\\\/(?:mpeg|mp4|ogg|webm)|audio\\\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;\\n+\\n+  function allowedAttribute (attr, allowedAttributeList) {\\n+    var attrName = attr.nodeName.toLowerCase()\\n+\\n+    if ($.inArray(attrName, allowedAttributeList) !== -1) {\\n+      if ($.inArray(attrName, uriAttrs) !== -1) {\\n+        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))\\n+      }\\n+\\n+      return true\\n+    }\\n+\\n+    var regExp = $(allowedAttributeList).filter(function (index, value) {\\n+      return value instanceof RegExp\\n+    })\\n+\\n+    // Check if a regular expression validates the attribute.\\n+    for (var i = 0, l = regExp.length; i < l; i++) {\\n+      if (attrName.match(regExp[i])) {\\n+        return true\\n+      }\\n+    }\\n+\\n+    return false\\n+  }\\n+\\n+  function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {\\n+    if (sanitizeFn && typeof sanitizeFn === 'function') {\\n+      return sanitizeFn(unsafeElements);\\n+    }\\n+\\n+    var whitelistKeys = Object.keys(whiteList);\\n+\\n+    for (var i = 0, len = unsafeElements.length; i < len; i++) {\\n+      var elements = unsafeElements[i].querySelectorAll('*');\\n+\\n+      for (var j = 0, len2 = elements.length; j < len2; j++) {\\n+        var el = elements[j];\\n+        var elName = el.nodeName.toLowerCase();\\n+\\n+        if (whitelistKeys.indexOf(elName) === -1) {\\n+          el.parentNode.removeChild(el);\\n+\\n+          continue;\\n+        }\\n+\\n+        var attributeList = [].slice.call(el.attributes);\\n+        var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);\\n+\\n+        for (var k = 0, len3 = attributeList.length; k < len3; k++) {\\n+          var attr = attributeList[k];\\n+\\n+          if (!allowedAttribute(attr, whitelistedAttributes)) {\\n+            el.removeAttribute(attr.nodeName);\\n+          }\\n+        }\\n+      }\\n+    }\\n+  }\\n+\\n   // Polyfill for browsers with no classList support\\n   // Remove in v2\\n   if (!('classList' in document.createElement('_'))) {\\n@@ -745,7 +867,10 @@\\n     dropdownAlignRight: false,\\n     windowPadding: 0,\\n     virtualScroll: 600,\\n-    display: false\\n+    display: false,\\n+    sanitize: true,\\n+    sanitizeFn: null,\\n+    whiteList: DefaultWhitelist\\n   };\\n \\n   if (version.major === '4') {\\n@@ -1100,13 +1225,35 @@\\n                 emptyMenu = menuInner.firstChild.cloneNode(false),\\n                 marginTop,\\n                 marginBottom,\\n-                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements;\\n+                elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements,\\n+                toSanitize = [];\\n \\n             // replace the existing UL with an empty one - this is faster than $.empty()\\n             menuInner.replaceChild(emptyMenu, menuInner.firstChild);\\n \\n             for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {\\n-              menuFragment.appendChild(elements[i]);\\n+              var element = elements[i],\\n+                  elText,\\n+                  elementData;\\n+\\n+              if (that.options.sanitize) {\\n+                elText = element.lastChild;\\n+\\n+                if (elText) {\\n+                  elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0].data;\\n+\\n+                  if (elementData && elementData.content && !elementData.sanitized) {\\n+                    toSanitize.push(elText);\\n+                    elementData.sanitized = true;\\n+                  }\\n+                }\\n+              }\\n+\\n+              menuFragment.appendChild(element);\\n+            }\\n+\\n+            if (that.options.sanitize && toSanitize.length) {\\n+              sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);\\n             }\\n \\n             if (isVirtual === true) {\\n@@ -1469,7 +1616,8 @@\\n           multipleSeparator = document.createTextNode(this.options.multipleSeparator),\\n           titleFragment = elementTemplates.fragment.cloneNode(false),\\n           showCount,\\n-          countMax;\\n+          countMax,\\n+          hasContent = false;\\n \\n       this.togglePlaceholder();\\n \\n@@ -1506,6 +1654,7 @@\\n                 titleOptions.text = option.title;\\n               } else if (thisData.content && that.options.showContent) {\\n                 titleOptions.optionContent = thisData.content.toString();\\n+                hasContent = true;\\n               } else {\\n                 if (that.options.showIcon) {\\n                   titleOptions.optionIcon = thisData.icon;\\n@@ -1554,6 +1703,10 @@\\n       // strip all HTML tags and trim the result, then unescape any escaped tags\\n       this.$button[0].title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();\\n \\n+      if (this.options.sanitize && hasContent) {\\n+        sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);\\n+      }\\n+\\n       buttonInner.innerHTML = '';\\n       buttonInner.appendChild(titleFragment);\\n \\n@@ -2833,8 +2986,16 @@\\n             options = typeof _option == 'object' && _option;\\n \\n         if (!data) {\\n-          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);\\n-          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);\\n+          var dataAttributes = $this.data();\\n+\\n+          for (var dataAttr in dataAttributes) {\\n+            if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {\\n+              delete dataAttributes[dataAttr];\\n+            }\\n+          }\\n+\\n+          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);\\n+          config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);\\n           $this.data('selectpicker', (data = new Selectpicker(this, config)));\\n         } else if (options) {\\n           for (var i in options) {\"}}",
      "message_norm": "add sanitize option for data-content (#2199)",
      "language": "it",
      "entities": "[('add', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('#2199', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['js/bootstrap-select.js'])",
      "num_files": 1.0
    },
    {
      "index": 2198,
      "vuln_id": "GHSA-j6p2-cx3w-6jcp",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/jashkenas/backbone/commit/0cdc525961d3fa98e810ffae6bcc8e3838e36d93'}",
      "dataset": "osv",
      "summary": "Cross-Site Scripting in backbone Affected versions of `backbone` are vulnerable to cross-site scripting when users are allowed to supply input to the `Model#Escape` function, and the output is then written to the DOM. \n\nThe vulnerability occurs as a result of the regular expression used to encode metacharacters failing to take HTML Entities such as `&#60;` into account.\n\n\n## Recommendation\n\nUpdate to version 0.5.0 or later.",
      "published_date": "2019-02-18",
      "chain_len": 1,
      "project": "https://github.com/jashkenas/backbone",
      "commit_href": "https://github.com/jashkenas/backbone/commit/0cdc525961d3fa98e810ffae6bcc8e3838e36d93",
      "commit_sha": "0cdc525961d3fa98e810ffae6bcc8e3838e36d93",
      "patch": "SINGLE",
      "chain_ord": "['0cdc525961d3fa98e810ffae6bcc8e3838e36d93']",
      "before_first_fix_commit": "{'7216d993502da2e312fc53f4e8edc8b534c25042'}",
      "last_fix_commit": "0cdc525961d3fa98e810ffae6bcc8e3838e36d93",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/01/2011, 21:12:24",
      "message": "Fixed escapeHTML function\nto skip not only &***;, but also &#***; and &x***;",
      "author": "Dmitry Baranovskiy",
      "comments": "{'com_1': {'author': 'alanhogan', 'datetime': '03/06/2011, 02:31:15', 'body': 'What are your thoughts on escaping single quotes?\\n\\nUsing single quotes around attribute values is less common than double quotes, but is certainly done:\\n\\n```\\n<p id=\\'foo\\'>\u2026</p>\\n```\\n\\nThis can lead to XSS just as unescaped double-quotes can:\\n\\n```\\nvar attack = \" \\' onmouseover=\\'alert(1);\\' foo=\\' \";\\nvar html = \"<p data-user-input=\\'\"+escapeHTML(attack)+\"\\'>Foo</p>\";\\ndocument.write(html);\\n```\\n\\nIMO, single quotes really ought to be escaped, as well.'}, 'com_2': {'author': 'alanhogan', 'datetime': '03/06/2011, 02:37:31', 'body': 'Demo of attack on jsfiddle: http://jsfiddle.net/wEzNJ/'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'backbone.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/jashkenas/backbone/raw/0cdc525961d3fa98e810ffae6bcc8e3838e36d93/backbone.js', 'patch': '@@ -1079,7 +1079,7 @@\\n \\n   // Helper function to escape a string for HTML rendering.\\n   var escapeHTML = function(string) {\\n-    return string.replace(/&(?!\\\\w+;)/g, \\'&amp;\\').replace(/</g, \\'&lt;\\').replace(/>/g, \\'&gt;\\').replace(/\"/g, \\'&quot;\\');\\n+    return string.replace(/&(?!\\\\w+;|#\\\\d+;|#x[\\\\da-f]+;)/gi, \\'&amp;\\').replace(/</g, \\'&lt;\\').replace(/>/g, \\'&gt;\\').replace(/\"/g, \\'&quot;\\');\\n   };\\n \\n }).call(this);'}}",
      "message_norm": "fixed escapehtml function\nto skip not only &***;, but also &#***; and &x***;",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('escapehtml', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['backbone.js'])",
      "num_files": 1.0
    },
    {
      "index": 2765,
      "vuln_id": "GHSA-qhxx-j73r-qpm2",
      "cwe_id": "{'CWE-908'}",
      "score": 4.4,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2'}",
      "dataset": "osv",
      "summary": "Uninitialized memory access in TensorFlow ### Impact\nUnder certain cases, a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers be filled with the default value of the type but forgetting to [default initialize the quantized floating point types in Eigen](https://github.com/tensorflow/tensorflow/blob/f70160322a579144950dff1537dcbe3c7c09d6f5/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h#L61-L104):\n\n```cc\nstruct QUInt8 {\n  QUInt8() {}\n  // ...\n  uint8_t value;\n};\n\nstruct QInt16 {\n  QInt16() {}\n  // ...\n  int16_t value;\n};\n\nstruct QUInt16 {\n  QUInt16() {}\n  // ...\n  uint16_t value;\n};\n\nstruct QInt32 {\n  QInt32() {}\n  // ...\n  int32_t value;\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2](https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2020-12-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2",
      "commit_sha": "ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2",
      "patch": "SINGLE",
      "chain_ord": "['ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2']",
      "before_first_fix_commit": "{'f70160322a579144950dff1537dcbe3c7c09d6f5'}",
      "last_fix_commit": "ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/24/2020, 19:40:42",
      "message": "Default initialize fixed point Eigen types.\n\nIn certain cases, tensors are filled with default values of the type. But, for these fixed point types, these values were uninitialized. Thus, we would have uninitialized memory access bugs, some of which were caught by MSAN.\n\nPiperOrigin-RevId: 344101137\nChange-Id: I14555fda74dca3b5f1582da9008901937e3f14e2",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 5, 'total': 10}",
      "files": "{'third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2/third_party%2Feigen3%2Funsupported%2FEigen%2FCXX11%2Fsrc%2FFixedPoint%2FFixedPointTypes.h', 'patch': '@@ -49,7 +49,7 @@ struct scalar_product_traits<QInt32, double> {\\n // the compiler from silently type cast the mantissa into a bigger or a smaller\\n // representation.\\n struct QInt8 {\\n-  QInt8() {}\\n+  QInt8() : value(0) {}\\n   QInt8(const int8_t v) : value(v) {}\\n   QInt8(const QInt32 v);\\n \\n@@ -59,7 +59,7 @@ struct QInt8 {\\n };\\n \\n struct QUInt8 {\\n-  QUInt8() {}\\n+  QUInt8() : value(0) {}\\n   QUInt8(const uint8_t v) : value(v) {}\\n   QUInt8(const QInt32 v);\\n \\n@@ -69,7 +69,7 @@ struct QUInt8 {\\n };\\n \\n struct QInt16 {\\n-  QInt16() {}\\n+  QInt16() : value(0) {}\\n   QInt16(const int16_t v) : value(v) {}\\n   QInt16(const QInt32 v);\\n   operator int() const { return static_cast<int>(value); }\\n@@ -78,7 +78,7 @@ struct QInt16 {\\n };\\n \\n struct QUInt16 {\\n-  QUInt16() {}\\n+  QUInt16() : value(0) {}\\n   QUInt16(const uint16_t v) : value(v) {}\\n   QUInt16(const QInt32 v);\\n   operator int() const { return static_cast<int>(value); }\\n@@ -87,7 +87,7 @@ struct QUInt16 {\\n };\\n \\n struct QInt32 {\\n-  QInt32() {}\\n+  QInt32() : value(0) {}\\n   QInt32(const int8_t v) : value(v) {}\\n   QInt32(const int32_t v) : value(v) {}\\n   QInt32(const uint32_t v) : value(static_cast<int32_t>(v)) {}'}}",
      "message_norm": "default initialize fixed point eigen types.\n\nin certain cases, tensors are filled with default values of the type. but, for these fixed point types, these values were uninitialized. thus, we would have uninitialized memory access bugs, some of which were caught by msan.\n\npiperorigin-revid: 344101137\nchange-id: i14555fda74dca3b5f1582da9008901937e3f14e2",
      "language": "en",
      "entities": "[('initialize', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('fixed', 'ACTION', ''), ('uninitialized', 'SECWORD', ''), ('uninitialized memory', 'SECWORD', ''), ('bugs', 'FLAW', ''), ('344101137', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h'])",
      "num_files": 1.0
    },
    {
      "index": 2379,
      "vuln_id": "GHSA-m87f-9fvv-2mgg",
      "cwe_id": "{'CWE-502'}",
      "score": 8.4,
      "chain": "{'https://github.com/facebookresearch/ParlAI/commit/4374fa2aba383db6526ab36e939eb1cf8ef99879', 'https://github.com/facebookresearch/ParlAI/commit/507d066ef432ea27d3e201da08009872a2f37725'}",
      "dataset": "osv",
      "summary": "Deserialization of Untrusted Data in parlai ### Impact\nDue to use of unsafe YAML deserialization logic, an attacker with the ability to modify local YAML configuration files could provide malicious input, resulting in remote code execution or similar risks.\n\n### Patches\nThe issue can be patched by upgrading to v1.1.0 or later. It can also be patched by replacing YAML deserialization with equivalent safe_load calls.\n\n### References\n\n- https://github.com/facebookresearch/ParlAI/commit/507d066ef432ea27d3e201da08009872a2f37725\n- https://github.com/facebookresearch/ParlAI/commit/4374fa2aba383db6526ab36e939eb1cf8ef99879\n- https://anon-artist.github.io/blogs/blog3.html",
      "published_date": "2021-09-13",
      "chain_len": 2,
      "project": "https://github.com/facebookresearch/ParlAI",
      "commit_href": "https://github.com/facebookresearch/ParlAI/commit/4374fa2aba383db6526ab36e939eb1cf8ef99879",
      "commit_sha": "4374fa2aba383db6526ab36e939eb1cf8ef99879",
      "patch": "MULTI",
      "chain_ord": "['507d066ef432ea27d3e201da08009872a2f37725', '4374fa2aba383db6526ab36e939eb1cf8ef99879']",
      "before_first_fix_commit": "{'15fbf55f32e64722c452c907425e10fdb977f62e'}",
      "last_fix_commit": "4374fa2aba383db6526ab36e939eb1cf8ef99879",
      "chain_ord_pos": 2.0,
      "commit_datetime": "02/03/2021, 17:52:21",
      "message": "Update model_chat_blueprint.py (#3429)",
      "author": "Abhiram V",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'parlai/crowdsourcing/tasks/model_chat/model_chat_blueprint.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/facebookresearch/ParlAI/raw/4374fa2aba383db6526ab36e939eb1cf8ef99879/parlai%2Fcrowdsourcing%2Ftasks%2Fmodel_chat%2Fmodel_chat_blueprint.py', 'patch': '@@ -453,7 +453,7 @@ def __init__(\\n \\n     def _get_shared_models(self, args: \"DictConfig\") -> Dict[str, dict]:\\n         with open(args.blueprint.model_opt_path) as f:\\n-            all_model_opts = yaml.load(f.read())\\n+            all_model_opts = yaml.safe_load(f.read())\\n         active_model_opts = {\\n             model: opt\\n             for model, opt in all_model_opts.items()\\n@@ -557,5 +557,5 @@ def __init__(\\n \\n     def _get_shared_models(self, args: \"DictConfig\") -> Dict[str, dict]:\\n         with open(args.blueprint.model_opt_path) as f:\\n-            model_opts = yaml.load(f.read())\\n+            model_opts = yaml.safe_load(f.read())\\n         return TurkLikeAgent.get_bot_agents(args=args, model_opts=model_opts)'}}",
      "message_norm": "update model_chat_blueprint.py (#3429)",
      "language": "en",
      "entities": "[('#3429', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['parlai/crowdsourcing/tasks/model_chat/model_chat_blueprint.py'])",
      "num_files": 1.0
    },
    {
      "index": 216,
      "vuln_id": "GHSA-37q6-576q-vgr7",
      "cwe_id": "{'CWE-200'}",
      "score": 7.5,
      "chain": "{'https://github.com/parcel-bundler/parcel/commit/066e0bf6bd26b15c78bd47df023452e4b20073e4'}",
      "dataset": "osv",
      "summary": "Missing Origin Validation in parcel-bundler Versions of `parcel-bundler` before 1.10.0 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.\n\n\n## Recommendation\n\nUpdate to version 1.10.0 or later.",
      "published_date": "2018-10-30",
      "chain_len": 1,
      "project": "https://github.com/parcel-bundler/parcel",
      "commit_href": "https://github.com/parcel-bundler/parcel/commit/066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "commit_sha": "066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "patch": "SINGLE",
      "chain_ord": "['066e0bf6bd26b15c78bd47df023452e4b20073e4']",
      "before_first_fix_commit": "{'948159b99adbc74857b380576e1e104a9097f259'}",
      "last_fix_commit": "066e0bf6bd26b15c78bd47df023452e4b20073e4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/25/2018, 03:49:56",
      "message": "fix security vuln (#1794)",
      "author": "Jasper De Moor",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 1, 'total': 12}",
      "files": "{'packages/core/parcel-bundler/src/HMRServer.js': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/parcel-bundler/parcel/raw/066e0bf6bd26b15c78bd47df023452e4b20073e4/packages%2Fcore%2Fparcel-bundler%2Fsrc%2FHMRServer.js', 'patch': \"@@ -17,7 +17,17 @@ class HMRServer {\\n         this.server = https.createServer(await getCertificate(options.https));\\n       }\\n \\n-      this.wss = new WebSocket.Server({server: this.server});\\n+      let websocketOptions = {\\n+        server: this.server\\n+      };\\n+\\n+      if (options.hmrHostname) {\\n+        websocketOptions.origin = `${options.https ? 'https' : 'http'}://${\\n+          options.hmrHostname\\n+        }`;\\n+      }\\n+\\n+      this.wss = new WebSocket.Server(websocketOptions);\\n       this.server.listen(options.hmrPort, resolve);\\n     });\"}}",
      "message_norm": "fix security vuln (#1794)",
      "language": "ro",
      "entities": "[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('#1794', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['packages/core/parcel-bundler/src/HMRServer.js'])",
      "num_files": 1.0
    },
    {
      "index": 3497,
      "vuln_id": "GHSA-xvjm-fvxx-q3hv",
      "cwe_id": "{'CWE-190'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60'}",
      "dataset": "osv",
      "summary": "CHECK-fail due to integer overflow ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  caused by an integer overflow in constructing a new tensor shape:\n\n```python\nimport tensorflow as tf\n\ninput_layer = 2**60-1\nsparse_data = tf.raw_ops.SparseSplit(\n    split_dim=1, \n    indices=[(0, 0), (0, 1), (0, 2), \n    (4, 3), (5, 0), (5, 1)],\n    values=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    shape=(input_layer, input_layer),\n    num_split=2,\n    name=None\n    )\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/0908c2f2397c099338b901b067f6495a5b96760b/tensorflow/core/kernels/sparse_split_op.cc#L66-L70) builds a dense shape without checking that the dimensions would not result in overflow:\n\n```cc\nsparse::SparseTensor sparse_tensor;\nOP_REQUIRES_OK(context,\n               sparse::SparseTensor::Create(\n                 input_indices, input_values,\n                 TensorShape(input_shape.vec<int64>()), &sparse_tensor));\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n                    \n```cc               \ntemplate <class Shape>\nTensorShapeBase<Shape>::TensorShapeBase(gtl::ArraySlice<int64> dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate <class Shape>\nStatus TensorShapeBase<Shape>::InitDims(gtl::ArraySlice<int64> dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate <class Shape>\nStatus TensorShapeBase<Shape>::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial && (num_elements() < 0 || size < 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements < 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60](https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by researchers from University of Virginia and University of California, Santa Barbara.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
      "commit_sha": "4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
      "patch": "SINGLE",
      "chain_ord": "['4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60']",
      "before_first_fix_commit": "{'0908c2f2397c099338b901b067f6495a5b96760b'}",
      "last_fix_commit": "4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/06/2021, 22:55:00",
      "message": "Prevent overflow in sparse op\n\nPiperOrigin-RevId: 372442006\nChange-Id: I60fe31cd7e56fb3501e97c63500caf902ddeee96",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 3, 'total': 13}",
      "files": "{'tensorflow/core/kernels/sparse_split_op.cc': {'additions': 10, 'deletions': 3, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60/tensorflow%2Fcore%2Fkernels%2Fsparse_split_op.cc', 'patch': '@@ -63,11 +63,18 @@ class SparseSplitOp : public OpKernel {\\n                                         input_shape.vec<int64>()(axis),\\n                                         \"), got \", num_split_));\\n \\n+    // Prevent overflow by constructing the dense shape separately\\n+    TensorShape dense_shape;\\n+    const auto input_shape_flat = input_shape.flat<int64>();\\n+    for (int i = 0; i < input_shape.NumElements(); i++) {\\n+      OP_REQUIRES_OK(context,\\n+                     dense_shape.AddDimWithStatus(input_shape_flat(i)));\\n+    }\\n+\\n     sparse::SparseTensor sparse_tensor;\\n     OP_REQUIRES_OK(context,\\n-                   sparse::SparseTensor::Create(\\n-                       input_indices, input_values,\\n-                       TensorShape(input_shape.vec<int64>()), &sparse_tensor));\\n+                   sparse::SparseTensor::Create(input_indices, input_values,\\n+                                                dense_shape, &sparse_tensor));\\n \\n     std::vector<sparse::SparseTensor> outputs;\\n     OP_REQUIRES_OK(context, sparse::SparseTensor::Split<T>('}}",
      "message_norm": "prevent overflow in sparse op\n\npiperorigin-revid: 372442006\nchange-id: i60fe31cd7e56fb3501e97c63500caf902ddeee96",
      "language": "nl",
      "entities": "[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('372442006', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_split_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 425,
      "vuln_id": "GHSA-4gw3-8f77-f72c",
      "cwe_id": "{'CWE-400'}",
      "score": 5.3,
      "chain": "{'https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb'}",
      "dataset": "osv",
      "summary": "Regular expression denial of service in codemirror This affects the package codemirror before 5.58.2; the package org.apache.marmotta.webjars:codemirror before 5.58.2.\n The vulnerable regular expression is located in https://github.com/codemirror/CodeMirror/blob/cdb228ac736369c685865b122b736cd0d397836c/mode/javascript/javascript.jsL129. The ReDOS vulnerability of the regex is mainly due to the sub-pattern (s|/*.*?*/)*",
      "published_date": "2021-05-10",
      "chain_len": 1,
      "project": "https://github.com/codemirror/CodeMirror",
      "commit_href": "https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb",
      "commit_sha": "55d0333907117c9231ffdf555ae8824705993bbb",
      "patch": "SINGLE",
      "chain_ord": "['55d0333907117c9231ffdf555ae8824705993bbb']",
      "before_first_fix_commit": "{'cdb228ac736369c685865b122b736cd0d397836c'}",
      "last_fix_commit": "55d0333907117c9231ffdf555ae8824705993bbb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/09/2020, 13:38:39",
      "message": "[javascript mode] Fix potentially-exponential regexp",
      "author": "Marijn Haverbeke",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'mode/javascript/javascript.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/codemirror/codemirror5/raw/55d0333907117c9231ffdf555ae8824705993bbb/mode%2Fjavascript%2Fjavascript.js', 'patch': '@@ -126,7 +126,7 @@ CodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\\n           var kw = keywords[word]\\n           return ret(kw.type, kw.style, word)\\n         }\\n-        if (word == \"async\" && stream.match(/^(\\\\s|\\\\/\\\\*.*?\\\\*\\\\/)*[\\\\[\\\\(\\\\w]/, false))\\n+        if (word == \"async\" && stream.match(/^(\\\\s|\\\\/\\\\*([^*]|\\\\*(?!\\\\/))*?\\\\*\\\\/)*[\\\\[\\\\(\\\\w]/, false))\\n           return ret(\"async\", \"keyword\", word)\\n       }\\n       return ret(\"variable\", \"variable\", word)'}}",
      "message_norm": "[javascript mode] fix potentially-exponential regexp",
      "language": "ca",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['mode/javascript/javascript.js'])",
      "num_files": 1.0
    },
    {
      "index": 1204,
      "vuln_id": "GHSA-8fvr-5rqf-3wwh",
      "cwe_id": "{'CWE-285'}",
      "score": 8.4,
      "chain": "{'https://github.com/moby/moby/commit/545b440a80f676a506e5837678dd4c4f65e78660'}",
      "dataset": "osv",
      "summary": "Information Exposure in Docker Engine Docker Engine before 1.6.1 uses weak permissions for (1) /proc/asound, (2) /proc/timer_stats, (3) /proc/latency_stats, and (4) /proc/fs, which allows local users to modify the host, obtain sensitive information, and perform protocol downgrade attacks via a crafted image.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/moby/moby",
      "commit_href": "https://github.com/moby/moby/commit/545b440a80f676a506e5837678dd4c4f65e78660",
      "commit_sha": "545b440a80f676a506e5837678dd4c4f65e78660",
      "patch": "SINGLE",
      "chain_ord": "['545b440a80f676a506e5837678dd4c4f65e78660']",
      "before_first_fix_commit": "{'3162024e28c401750388da3417a44a552c6d5011'}",
      "last_fix_commit": "545b440a80f676a506e5837678dd4c4f65e78660",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/20/2015, 20:33:51",
      "message": "Mount /proc/fs as readonly\n\nSigned-off-by: Michael Crosby <crosbymichael@gmail.com>",
      "author": "Michael Crosby",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'daemon/execdriver/native/template/default_template.go': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/moby/moby/raw/545b440a80f676a506e5837678dd4c4f65e78660/daemon%2Fexecdriver%2Fnative%2Ftemplate%2Fdefault_template.go', 'patch': '@@ -86,6 +86,7 @@ func New() *configs.Config {\\n \\t\\tReadonlyPaths: []string{\\n \\t\\t\\t\"/proc/asound\",\\n \\t\\t\\t\"/proc/bus\",\\n+\\t\\t\\t\"/proc/fs\",\\n \\t\\t\\t\"/proc/irq\",\\n \\t\\t\\t\"/proc/sys\",\\n \\t\\t\\t\"/proc/sysrq-trigger\",'}}",
      "message_norm": "mount /proc/fs as readonly\n\nsigned-off-by: michael crosby <crosbymichael@gmail.com>",
      "language": "en",
      "entities": "[('crosbymichael@gmail.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['daemon/execdriver/native/template/default_template.go'])",
      "num_files": 1.0
    },
    {
      "index": 1522,
      "vuln_id": "GHSA-c9g6-9335-x697",
      "cwe_id": "{'CWE-20'}",
      "score": 5.3,
      "chain": "{'https://github.com/sockjs/sockjs-node/commit/dd7e642cd69ee74385825816d30642c43e051d16'}",
      "dataset": "osv",
      "summary": "Improper Input Validation in SocksJS-Node Incorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/sockjs/sockjs-node",
      "commit_href": "https://github.com/sockjs/sockjs-node/commit/dd7e642cd69ee74385825816d30642c43e051d16",
      "commit_sha": "dd7e642cd69ee74385825816d30642c43e051d16",
      "patch": "SINGLE",
      "chain_ord": "['dd7e642cd69ee74385825816d30642c43e051d16']",
      "before_first_fix_commit": "{'3e975c69cce21092c2ac9aa7a2f9dc40446f5ccd', '68e8fd7a92e0e73cac6894a282b6d84f33e879b3'}",
      "last_fix_commit": "dd7e642cd69ee74385825816d30642c43e051d16",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/09/2020, 01:36:12",
      "message": "Merge pull request #266 from cakoose/backport-writeHead-fix\n\nwriteHead: Don't end() response",
      "author": "Bryce Kahle",
      "comments": null,
      "stats": "{'additions': 0, 'deletions': 3, 'total': 3}",
      "files": "{'src/webjs.coffee': {'additions': 0, 'deletions': 3, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/sockjs/sockjs-node/raw/dd7e642cd69ee74385825816d30642c43e051d16/src%2Fwebjs.coffee', 'patch': \"@@ -45,9 +45,6 @@ fake_response = (req, res) ->\\n             try\\n                 res.write(r.join('\\\\r\\\\n'))\\n             catch x\\n-            try\\n-                res.end()\\n-            catch x\\n         res.setHeader = (k, v) -> headers[k] = v\"}}",
      "message_norm": "merge pull request #266 from cakoose/backport-writehead-fix\n\nwritehead: don't end() response",
      "language": "en",
      "entities": "[('#266', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/webjs.coffee'])",
      "num_files": 1.0
    },
    {
      "index": 2243,
      "vuln_id": "GHSA-jff5-55xj-4jcq",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/jenkinsci/jenkins/commit/307ed31caba68a46426b8c73a787a05add2c7489'}",
      "dataset": "osv",
      "summary": "Improper Neutralization of Input During Web Page Generation in Jenkins jenkins before versions 2.44, 2.32.2 is vulnerable to a persisted cross-site scripting in search suggestions due to improperly escaping users with less-than and greater-than characters in their names (SECURITY-388).",
      "published_date": "2022-05-13",
      "chain_len": 1,
      "project": "https://github.com/jenkinsci/jenkins",
      "commit_href": "https://github.com/jenkinsci/jenkins/commit/307ed31caba68a46426b8c73a787a05add2c7489",
      "commit_sha": "307ed31caba68a46426b8c73a787a05add2c7489",
      "patch": "SINGLE",
      "chain_ord": "['307ed31caba68a46426b8c73a787a05add2c7489']",
      "before_first_fix_commit": "{'97a61a9fe55f4c16168c123f98301a5173b9fa86', '7ae469770fd10c79bebc07511cd0ab1cafd33292'}",
      "last_fix_commit": "307ed31caba68a46426b8c73a787a05add2c7489",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/10/2017, 22:21:40",
      "message": "Merge pull request #98 from jenkinsci-cert/SECURITY-388\n\n[SECURITY-388] Escape metacharacters in the search box",
      "author": "Jesse Glick",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'war/src/main/webapp/scripts/hudson-behavior.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/jenkins/raw/307ed31caba68a46426b8c73a787a05add2c7489/war%2Fsrc%2Fmain%2Fwebapp%2Fscripts%2Fhudson-behavior.js', 'patch': '@@ -2168,6 +2168,7 @@ function createSearchBox(searchURL) {\\n     var ac = new YAHOO.widget.AutoComplete(\"search-box\",\"search-box-completion\",ds);\\n     ac.typeAhead = false;\\n     ac.autoHighlight = false;\\n+    ac.formatResult = ac.formatEscapedResult;\\n \\n     var box   = $(\"search-box\");\\n     var sizer = $(\"search-box-sizer\");'}}",
      "message_norm": "merge pull request #98 from jenkinsci-cert/security-388\n\n[security-388] escape metacharacters in the search box",
      "language": "en",
      "entities": "[('#98', 'ISSUE', ''), ('security-388', 'SECWORD', ''), ('security-388', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['war/src/main/webapp/scripts/hudson-behavior.js'])",
      "num_files": 1.0
    },
    {
      "index": 3347,
      "vuln_id": "GHSA-x2jc-pwfj-h9p3",
      "cwe_id": "{'CWE-89'}",
      "score": 0.0,
      "chain": "{'https://github.com/sequelize/sequelize/commit/c876192aa6ce1f67e22b26a4d175b8478615f42d'}",
      "dataset": "osv",
      "summary": "SQL Injection in sequelize Affected versions of `sequelize` use MySQL's backslash-based escape syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's escape syntax, which can result in a SQL Injection vulnerability.\n\n\n## Recommendation\n\nUpdate to version 1.7.0-alpha3 or later.",
      "published_date": "2019-02-18",
      "chain_len": 1,
      "project": "https://github.com/sequelize/sequelize",
      "commit_href": "https://github.com/sequelize/sequelize/commit/c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "commit_sha": "c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "patch": "SINGLE",
      "chain_ord": "['c876192aa6ce1f67e22b26a4d175b8478615f42d']",
      "before_first_fix_commit": "{'7dc35e3889e3fa0859b96be41092717444cc2a38'}",
      "last_fix_commit": "c876192aa6ce1f67e22b26a4d175b8478615f42d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/15/2013, 03:24:59",
      "message": "Fix string escaping for sqlite\n\nSQLite was defaulting to the MySQL backslash-escaped style, but it uses\npostgres-style escaping. This is a SQL-injection vulnerability, and\nshouldn't be taken lightly (although SQLite is mostly for testing).",
      "author": "Benjamin Woodruff",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'lib/sql-string.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/sequelize/sequelize/raw/c876192aa6ce1f67e22b26a4d175b8478615f42d/lib%2Fsql-string.js', 'patch': '@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\\n     }\\n   }\\n \\n-  if (dialect == \"postgres\") {\\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\\n     // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\\n+    // http://stackoverflow.com/q/603572/130598\\n     val = val.replace(/\\'/g, \"\\'\\'\");\\n   } else {\\n     val = val.replace(/[\\\\0\\\\n\\\\r\\\\b\\\\t\\\\\\\\\\\\\\'\\\\\"\\\\x1a]/g, function(s) {'}}",
      "message_norm": "fix string escaping for sqlite\n\nsqlite was defaulting to the mysql backslash-escaped style, but it uses\npostgres-style escaping. this is a sql-injection vulnerability, and\nshouldn't be taken lightly (although sqlite is mostly for testing).",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/sql-string.js'])",
      "num_files": 1.0
    },
    {
      "index": 2120,
      "vuln_id": "GHSA-hrg5-737c-2p56",
      "cwe_id": "{'CWE-20'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400'}",
      "dataset": "osv",
      "summary": "Missing validation causes denial of service via `UnsortedSegmentJoin` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))\n``` \n  \nThe code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nOP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n            errors::InvalidArgument(\"Number of segments cannot be empty.\"));\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
      "published_date": "2022-05-24",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "commit_sha": "13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "patch": "SINGLE",
      "chain_ord": "['13d38a07ce9143e044aa737cfd7bb759d0e9b400']",
      "before_first_fix_commit": "{'fa57990ccca1fb2b9a1f296183985931746914d3'}",
      "last_fix_commit": "13d38a07ce9143e044aa737cfd7bb759d0e9b400",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2022, 18:37:31",
      "message": "Fix tf.raw_ops.UnsortedSegmentJoin vulnerability with invalid num_segments.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445206880",
      "author": "Alan Liu",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/kernels/unsorted_segment_join_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/13d38a07ce9143e044aa737cfd7bb759d0e9b400/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -92,6 +92,9 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n     const Tensor& num_segments_tensor = context->input(2);\\n     OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n+    OP_REQUIRES(context,\\n+                TensorShapeUtils::IsScalar(num_segments_tensor.shape()),\\n+                errors::InvalidArgument(\"Number of segments must be a scalar\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n     OP_REQUIRES('}}",
      "message_norm": "fix tf.raw_ops.unsortedsegmentjoin vulnerability with invalid num_segments.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445206880",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('445206880', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/unsorted_segment_join_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2423,
      "vuln_id": "GHSA-mh83-jcw5-rjh8",
      "cwe_id": "{'CWE-611'}",
      "score": 6.1,
      "chain": "{'https://github.com/stanfordnlp/corenlp/commit/1f52136321cfca68b991bd7870563d06cf96624d'}",
      "dataset": "osv",
      "summary": "XML External Entity Reference in edu.stanford.nlp:stanford-corenlp The TransformXML() function makes use of SAXParser generated from a SAXParserFactory with no FEATURE_SECURE_PROCESSING set, allowing for XXE attacks.",
      "published_date": "2022-01-14",
      "chain_len": 1,
      "project": "https://github.com/stanfordnlp/corenlp",
      "commit_href": "https://github.com/stanfordnlp/corenlp/commit/1f52136321cfca68b991bd7870563d06cf96624d",
      "commit_sha": "1f52136321cfca68b991bd7870563d06cf96624d",
      "patch": "SINGLE",
      "chain_ord": "['1f52136321cfca68b991bd7870563d06cf96624d']",
      "before_first_fix_commit": "{'76666dd1d1697177585bbc618c21faf998028509'}",
      "last_fix_commit": "1f52136321cfca68b991bd7870563d06cf96624d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/12/2022, 07:13:08",
      "message": "Fix SAXParser security issue",
      "author": "Haxatron",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'src/edu/stanford/nlp/process/TransformXML.java': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/stanfordnlp/CoreNLP/raw/1f52136321cfca68b991bd7870563d06cf96624d/src%2Fedu%2Fstanford%2Fnlp%2Fprocess%2FTransformXML.java', 'patch': '@@ -5,6 +5,7 @@\\n import java.io.*;\\n import java.util.*;\\n \\n+import javax.xml.XMLConstants;\\n import javax.xml.parsers.SAXParser;\\n import javax.xml.parsers.SAXParserFactory;\\n \\n@@ -195,6 +196,8 @@ public void processText(String text) {\\n \\n   public TransformXML() {\\n     try {\\n+      SAXParserFactory spf = SAXParserFactory.newInstance();\\n+      spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\\n       saxParser = SAXParserFactory.newInstance().newSAXParser();\\n     } catch (Exception e) {\\n       log.info(\"Error configuring XML parser: \" + e);'}}",
      "message_norm": "fix saxparser security issue",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/edu/stanford/nlp/process/TransformXML.java'])",
      "num_files": 1.0
    },
    {
      "index": 984,
      "vuln_id": "GHSA-772p-x54p-hjrv",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f'}",
      "dataset": "osv",
      "summary": "Division by zero in `Conv3D` ### Impact\nA malicious user could trigger a division by 0 in `Conv3D` implementation:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 23, 1])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/42033603003965bffac51ae171b51801565e002d/tensorflow/core/kernels/conv_ops_3d.cc#L143-L145) does a modulo operation based on user controlled input:\n\n```cc\n  const int64 out_depth = filter.dim_size(4);\n  OP_REQUIRES(context, in_depth % filter_depth == 0, ...);\n```\n\nThus, when `filter` has a 0 as the fifth element, this results in a division by 0.\n\nAdditionally, if the shape of the two tensors is not valid, an Eigen assertion can be triggered, resulting in a program crash:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])\n```\n\nThe shape of the two tensors must follow the constraints specified in the [op description](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Conv3D).\n\n### Patches\nWe have patched the issue in GitHub commit [799f835a3dfa00a4d852defa29b15841eea9d64f](https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f",
      "commit_sha": "799f835a3dfa00a4d852defa29b15841eea9d64f",
      "patch": "SINGLE",
      "chain_ord": "['799f835a3dfa00a4d852defa29b15841eea9d64f']",
      "before_first_fix_commit": "{'42033603003965bffac51ae171b51801565e002d'}",
      "last_fix_commit": "799f835a3dfa00a4d852defa29b15841eea9d64f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/19/2021, 16:56:46",
      "message": "Fix 2 issues with `Conv3D`.\n\nWe have an issue where the dimensions are not matching and this causes Eigen to crash on an assert.\n\nThen, we have an issue where we accidentally do a division by 0.\n\nPiperOrigin-RevId: 369242785\nChange-Id: Ie94067b2d41f58699af99ebb5af335ad9defd931",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 0, 'total': 7}",
      "files": "{'tensorflow/core/kernels/conv_ops_3d.cc': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/799f835a3dfa00a4d852defa29b15841eea9d64f/tensorflow%2Fcore%2Fkernels%2Fconv_ops_3d.cc', 'patch': '@@ -69,6 +69,11 @@ struct LaunchConvOp<CPUDevice, T> {\\n                 errors::InvalidArgument(\"CPU implementation of Conv3D \"\\n                                         \"currently only supports dilated rates \"\\n                                         \"of 1.\"));\\n+    OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),\\n+                errors::InvalidArgument(\\n+                    \"Number of channels in filter (\", filter.dim_size(3),\\n+                    \") must match last dimension of input (\",\\n+                    input.dim_size(input.dims() - 1), \")\"));\\n     functor::CuboidConvolution<CPUDevice, T>()(\\n         context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),\\n         input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],\\n@@ -142,6 +147,8 @@ class Conv3DOp : public BinaryOp<T> {\\n     const int64 filter_depth = filter.dim_size(3);\\n     const int64 out_depth = filter.dim_size(4);\\n \\n+    OP_REQUIRES(context, filter_depth != 0,\\n+                errors::InvalidArgument(\"filter_depth must be non-zero\"));\\n     OP_REQUIRES(context, in_depth % filter_depth == 0,\\n                 errors::InvalidArgument(\\n                     \"Input depth must be evenly divisible by filter depth: \",'}}",
      "message_norm": "fix 2 issues with `conv3d`.\n\nwe have an issue where the dimensions are not matching and this causes eigen to crash on an assert.\n\nthen, we have an issue where we accidentally do a division by 0.\n\npiperorigin-revid: 369242785\nchange-id: ie94067b2d41f58699af99ebb5af335ad9defd931",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('issues', 'FLAW', ''), ('issue', 'FLAW', ''), ('issue', 'FLAW', ''), ('division by 0', 'SECWORD', ''), ('369242785', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/conv_ops_3d.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1872,
      "vuln_id": "GHSA-gg6x-xx78-448c",
      "cwe_id": "{'CWE-87'}",
      "score": 4.0,
      "chain": "{'https://github.com/octobercms/october/commit/cd0b6a791f995d86071a024464c1702efc50f46c'}",
      "dataset": "osv",
      "summary": "Reflected XSS when importing CSV in OctoberCMS ### Impact\nA user with the ability to use the import functionality of the `ImportExportController` behavior could be socially engineered by an attacker to upload a maliciously crafted CSV file which could result in a reflected XSS attack on the user in question\n\n### Patches\nIssue has been patched in Build 466 (v1.0.466).\n\n### Workarounds\nApply https://github.com/octobercms/october/commit/cd0b6a791f995d86071a024464c1702efc50f46c to your installation manually if unable to upgrade to Build 466.\n\n### References\nReported by [Sivanesh Ashok](https://stazot.com/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1100\" alt=\"Screen Shot 2020-03-31 at 2 01 52 PM\" src=\"https://user-images.githubusercontent.com/7253840/78070158-8f7ef580-7358-11ea-950c-226533f6a0a3.png\">",
      "published_date": "2020-06-03",
      "chain_len": 1,
      "project": "https://github.com/octobercms/october",
      "commit_href": "https://github.com/octobercms/october/commit/cd0b6a791f995d86071a024464c1702efc50f46c",
      "commit_sha": "cd0b6a791f995d86071a024464c1702efc50f46c",
      "patch": "SINGLE",
      "chain_ord": "['cd0b6a791f995d86071a024464c1702efc50f46c']",
      "before_first_fix_commit": "{'6711dae8ef70caf0e94cec434498012a2ccd86b8'}",
      "last_fix_commit": "cd0b6a791f995d86071a024464c1702efc50f46c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/31/2020, 10:17:41",
      "message": "escape import CSV column names",
      "author": "Luke Towers",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'modules/backend/behaviors/importexportcontroller/partials/_import_file_columns.htm': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/octobercms/october/raw/cd0b6a791f995d86071a024464c1702efc50f46c/modules%2Fbackend%2Fbehaviors%2Fimportexportcontroller%2Fpartials%2F_import_file_columns.htm', 'patch': '@@ -22,7 +22,7 @@\\n                                 class=\"column-label\"\\n                                 onclick=\"$.oc.importBehavior.loadFileColumnSample(this)\"\\n                             >\\n-                                <?= $column ?>\\n+                                <?= e($column) ?>\\n                             </a>\\n                         </span>\\n                     </div>'}}",
      "message_norm": "escape import csv column names",
      "language": "ro",
      "entities": "[('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/backend/behaviors/importexportcontroller/partials/_import_file_columns.htm'])",
      "num_files": 1.0
    },
    {
      "index": 2341,
      "vuln_id": "GHSA-m3xv-x3ph-mq22",
      "cwe_id": "{'CWE-94'}",
      "score": 9.8,
      "chain": "{'https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469'}",
      "dataset": "osv",
      "summary": "Server-side Template Injection in nystudio107/craft-seomatic A Server-side Template Injection (SSTI) vulnerability exists in Nystudio107 Seomatic prior to 3.4.12 in src/helpers/UrlHelper.php via the host header.",
      "published_date": "2022-03-12",
      "chain_len": 1,
      "project": "https://github.com/nystudio107/craft-seomatic",
      "commit_href": "https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
      "commit_sha": "0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
      "patch": "SINGLE",
      "chain_ord": "['0c5c0c0e0cb61000d12ec55ebf174745a5bf6469']",
      "before_first_fix_commit": "{'1a47702db9d2df3fa3e12b1c4be09b55d2b6166f'}",
      "last_fix_commit": "0c5c0c0e0cb61000d12ec55ebf174745a5bf6469",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/25/2021, 04:44:33",
      "message": "Sanitize all URLs\n\nSigned-off-by: Andrew Welch <andrew@nystudio107.com>",
      "author": "Andrew Welch",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'src/helpers/UrlHelper.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/nystudio107/craft-seomatic/raw/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469/src%2Fhelpers%2FUrlHelper.php', 'patch': \"@@ -56,7 +56,7 @@ public static function siteUrl(string $path = '', $params = null, string $scheme\\n             return $url;\\n         }\\n \\n-        return parent::siteUrl($path, $params, $scheme, $siteId);\\n+        return DynamicMeta::sanitizeUrl(parent::siteUrl($path, $params, $scheme, $siteId));\\n     }\\n \\n     /**\\n@@ -130,7 +130,7 @@ public static function absoluteUrlWithProtocol($url): string\\n             $url = rtrim($url, '/');\\n         }\\n \\n-        return $url;\\n+        return DynamicMeta::sanitizeUrl($url);\\n     }\\n \\n     /**\"}}",
      "message_norm": "sanitize all urls\n\nsigned-off-by: andrew welch <andrew@nystudio107.com>",
      "language": "en",
      "entities": "[('sanitize', 'SECWORD', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/helpers/UrlHelper.php'])",
      "num_files": 1.0
    },
    {
      "index": 1343,
      "vuln_id": "GHSA-98p5-x8x4-c9m5",
      "cwe_id": "{'CWE-190'}",
      "score": 8.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01', 'https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043', 'https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4'}",
      "dataset": "osv",
      "summary": "Integer overflow in TFLite ### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i < lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape->data.i32[i];\n    lookup_size *= dim;\n    output_shape->data[k] = dim;\n  }\n  for (int i = 1; i < embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape->data[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
      "published_date": "2022-02-09",
      "chain_len": 3,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043",
      "commit_sha": "1de49725a5fc4e48f1a3b902ec3599ee99283043",
      "patch": "MULTI",
      "chain_ord": "['f19be71717c497723ba0cea0379e84f061a75e01', '1de49725a5fc4e48f1a3b902ec3599ee99283043', 'a4e401da71458d253b05e41f28637b65baf64be4']",
      "before_first_fix_commit": "{'f435ae9dee673e83504618b77e1be8cddda73e74'}",
      "last_fix_commit": "a4e401da71458d253b05e41f28637b65baf64be4",
      "chain_ord_pos": 2.0,
      "commit_datetime": "12/21/2021, 16:48:11",
      "message": "[lite] Check for overflow when creating required bytes.\n\nPiperOrigin-RevId: 417629001\nChange-Id: Ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
      "author": "Karim Nosir",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 7, 'total': 23}",
      "files": "{'tensorflow/lite/kernels/embedding_lookup_sparse.cc': {'additions': 16, 'deletions': 7, 'changes': 23, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/1de49725a5fc4e48f1a3b902ec3599ee99283043/tensorflow%2Flite%2Fkernels%2Fembedding_lookup_sparse.cc', 'patch': '@@ -72,6 +72,7 @@ limitations under the License.\\n #include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\\n #include \"tensorflow/lite/kernels/internal/tensor_utils.h\"\\n #include \"tensorflow/lite/kernels/kernel_util.h\"\\n+#include \"tensorflow/lite/util.h\"\\n \\n namespace tflite {\\n namespace ops {\\n@@ -175,25 +176,33 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);\\n   TF_LITE_ENSURE(context, output_shape != nullptr);\\n   int k = 0;\\n-  int embedding_size = 1;\\n-  int lookup_size = 1;\\n+  size_t embedding_size = 1;\\n+  size_t lookup_size = 1;\\n   for (int i = 0; i < lookup_rank - 1; i++, k++) {\\n-    const int dim = dense_shape->data.i32[i];\\n-    lookup_size *= dim;\\n+    const size_t dim = dense_shape->data.i32[i];\\n+    TF_LITE_ENSURE_MSG(\\n+        context,\\n+        MultiplyAndCheckOverflow(lookup_size, dim, &lookup_size) == kTfLiteOk,\\n+        \"Lookup size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   for (int i = 1; i < embedding_rank; i++, k++) {\\n-    const int dim = SizeOfDimension(value, i);\\n-    embedding_size *= dim;\\n+    const size_t dim = SizeOfDimension(value, i);\\n+    TF_LITE_ENSURE_MSG(context,\\n+                       MultiplyAndCheckOverflow(embedding_size, dim,\\n+                                                &embedding_size) == kTfLiteOk,\\n+                       \"Embedding size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_shape));\\n-  const int output_size = lookup_size * embedding_size;\\n+  const size_t output_size = lookup_size * embedding_size;\\n   TfLiteTensorRealloc(output_size * sizeof(float), output);\\n \\n   float* output_ptr = GetTensorData<float>(output);\\n   const float* weights_ptr = GetTensorData<float>(weights);\\n   const float* value_ptr = GetTensorData<float>(value);\\n+  // Makes sure reallocation was successful.\\n+  TF_LITE_ENSURE(context, output_ptr != nullptr);\\n \\n   std::fill_n(output_ptr, output_size, 0.0f);'}}",
      "message_norm": "[lite] check for overflow when creating required bytes.\n\npiperorigin-revid: 417629001\nchange-id: ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
      "language": "en",
      "entities": "[('overflow', 'SECWORD', ''), ('417629001', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/embedding_lookup_sparse.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2314,
      "vuln_id": "GHSA-jwf9-w5xm-f437",
      "cwe_id": "{'CWE-125'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/eb921122119a6b6e470ee98b89e65d721663179d', 'https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f'}",
      "dataset": "osv",
      "summary": "Heap OOB in TFLite's `Gather*` implementations ### Impact\nTFLite's [`GatherNd` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation.\n\nHence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in `indices`.\n\nSimilar issue exists in [`Gather` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc).\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.compat.v1.disable_v2_behavior()\n\nparams = tf.compat.v1.placeholder(name=\"params\", dtype=tf.int64, shape=(1,))\nindices = tf.compat.v1.placeholder(name=\"indices\", dtype=tf.int64, shape=())\n\nout = tf.gather(params, indices, name='out')\n\nwith tf.compat.v1.Session() as sess:\n   converter = tf.compat.v1.lite.TFLiteConverter.from_session(sess, [params, indices], [out])\n   tflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nparams_data = np.reshape(np.array([1], dtype=np.int64), newshape=(1,))\nindices_data = np.reshape(np.array(-10, dtype=np.int64), newshape=())\ninterpreter.set_tensor(input_details[0]['index'], params_data)\ninterpreter.set_tensor(input_details[1]['index'], indices_data)\n\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bb6a0383ed553c286f87ca88c207f6774d5c4a8f](https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f) and [eb921122119a6b6e470ee98b89e65d721663179d](https://github.com/tensorflow/tensorflow/commit/eb921122119a6b6e470ee98b89e65d721663179d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date": "2021-08-25",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
      "commit_sha": "bb6a0383ed553c286f87ca88c207f6774d5c4a8f",
      "patch": "MULTI",
      "chain_ord": "['bb6a0383ed553c286f87ca88c207f6774d5c4a8f', 'eb921122119a6b6e470ee98b89e65d721663179d']",
      "before_first_fix_commit": "{'ac72971cc6fbbfe4df7e67a8347ef1b6ab63b5fd'}",
      "last_fix_commit": "eb921122119a6b6e470ee98b89e65d721663179d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/27/2021, 22:20:26",
      "message": "Prevent heap OOB read in TFLite's `gather_nd.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387208551\nChange-Id: I6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 0, 'total': 11}",
      "files": "{'tensorflow/lite/kernels/gather_nd.cc': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/bb6a0383ed553c286f87ca88c207f6774d5c4a8f/tensorflow%2Flite%2Fkernels%2Fgather_nd.cc', 'patch': '@@ -123,6 +123,17 @@ TfLiteStatus GatherNdString(const TfLiteTensor* params,\\n template <typename IndicesT>\\n TfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,\\n                           const TfLiteTensor* indices, TfLiteTensor* output) {\\n+  bool indices_has_only_positive_elements = true;\\n+  const auto* indices_values = GetTensorData<IndicesT>(indices);\\n+  const size_t num_indices = indices->bytes / sizeof(IndicesT);\\n+  for (size_t i = 0; i < num_indices; i++) {\\n+    if (indices_values[i] < 0) {\\n+      indices_has_only_positive_elements = false;\\n+      break;\\n+    }\\n+  }\\n+  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\\n+\\n   switch (params->type) {\\n     case kTfLiteFloat32:\\n       return GatherNd<float, IndicesT>(params, indices, output);'}}",
      "message_norm": "prevent heap oob read in tflite's `gather_nd.cc`.\n\npassing negative indices is illegal but there was a missing check so that resulted in oob accesses.\n\npiperorigin-revid: 387208551\nchange-id: i6b7a8a62d3e7c13a16d81619e5bc23ae2cdbc7fd",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('missing check', 'SECWORD', ''), ('oob', 'SECWORD', ''), ('387208551', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/gather_nd.cc'])",
      "num_files": 1.0
    },
    {
      "index": 943,
      "vuln_id": "GHSA-73qw-ww62-m54x",
      "cwe_id": "{'CWE-77'}",
      "score": 10.0,
      "chain": "{'https://github.com/quadule/colorscore/commit/570b5e854cecddd44d2047c44126aed951b61718'}",
      "dataset": "osv",
      "summary": "Critical severity vulnerability that affects colorscore The initialize method in the Histogram class in lib/colorscore/histogram.rb in the colorscore gem before 0.0.5 for Ruby allows context-dependent attackers to execute arbitrary code via shell metacharacters in the (1) image_path, (2) colors, or (3) depth variable.",
      "published_date": "2017-10-24",
      "chain_len": 1,
      "project": "https://github.com/quadule/colorscore",
      "commit_href": "https://github.com/quadule/colorscore/commit/570b5e854cecddd44d2047c44126aed951b61718",
      "commit_sha": "570b5e854cecddd44d2047c44126aed951b61718",
      "patch": "SINGLE",
      "chain_ord": "['570b5e854cecddd44d2047c44126aed951b61718']",
      "before_first_fix_commit": "{'d589ce05be678c87174adae013ca5ac79f567828'}",
      "last_fix_commit": "570b5e854cecddd44d2047c44126aed951b61718",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/05/2016, 10:53:22",
      "message": "Fix CVE-2015-7541\n\nAvoid passsing possible user input directly into the shell. Instead\nquote the `image_path` value before calling the `convert` command.\n\nSee here http://rubysec.com/advisories/CVE-2015-7541/ for more\ninformation.",
      "author": "Florian Frank",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'lib/colorscore/histogram.rb': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/quadule/colorscore/raw/570b5e854cecddd44d2047c44126aed951b61718/lib%2Fcolorscore%2Fhistogram.rb', 'patch': '@@ -1,7 +1,9 @@\\n+require \"shellwords\"\\n+\\n module Colorscore\\n   class Histogram\\n     def initialize(image_path, colors=16, depth=8)\\n-      output = `convert #{image_path} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors} -depth #{depth} histogram:info:-`\\n+      output = `convert #{image_path.shellescape} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors.to_i} -depth #{depth.to_i} histogram:info:-`\\n       @lines = output.lines.sort.reverse.map(&:strip).reject(&:empty?)\\n     end'}}",
      "message_norm": "fix cve-2015-7541\n\navoid passsing possible user input directly into the shell. instead\nquote the `image_path` value before calling the `convert` command.\n\nsee here http://rubysec.com/advisories/cve-2015-7541/ for more\ninformation.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('cve-2015-7541', 'VULNID', 'CVE'), ('http://rubysec.com/advisories/cve-2015-7541/', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/colorscore/histogram.rb'])",
      "num_files": 1.0
    },
    {
      "index": 3112,
      "vuln_id": "GHSA-vg44-fw64-cpjx",
      "cwe_id": "{'CWE-287'}",
      "score": 7.5,
      "chain": "{'https://github.com/MetaMask/eth-ledger-bridge-keyring/commit/f32e529d13a53e55f558d903534d631846dc26ce'}",
      "dataset": "osv",
      "summary": "Incorrect Account Used for Signing ### Impact\n\nAnybody using this library to sign with a BIP44 account other than the first account may be affected. If a user is signing with the first account (i.e. the account at index `0`), or with the legacy MEW/MyCrypto HD path, they are not affected.\n\nThe vulnerability impacts cases where the user signs a personal message or transaction without first adding the account. This includes cases where the user has already added the account in a previous session (i.e. they added the account, reset the application, then signed something). The serialization/deserialization process does restore a previously added account, but it doesn&#39;t restore the index instructing the keyring to use that account for signing. As a result, after serializing then deserializing the keyring state, the account at index `0` is always used for signing even if it isn&#39;t the current account.\n\n### Patches\n\nThis has been patched ([#14](https://github.com/MetaMask/eth-ledger-bridge-keyring/pull/14)) in version &gt;=0.2.1 of [`eth-ledger-bridge-keyring`](https://www.npmjs.com/package/eth-ledger-bridge-keyring), and in version &gt;=0.2.2 of [`@metamask/eth-ledger-bridge-keyring`](https://www.npmjs.com/package/@metamask/eth-ledger-bridge-keyring). Users are encouraged to migrate to the new package name.\n\n### Workarounds\n\nTo work around this problem without updating, you should remove then re-add the account before use. As long as the account was added during the lifetime of that process, signing with that account should work correctly.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [MetaMask/eth-ledger-bridge-keyring on GitHub](https://github.com/MetaMask/eth-ledger-bridge-keyring)\n* Email the MetaMask team at [hello@metamask.io](mailto:hello@metamask.io)",
      "published_date": "2020-03-24",
      "chain_len": 1,
      "project": "https://github.com/MetaMask/eth-ledger-bridge-keyring",
      "commit_href": "https://github.com/MetaMask/eth-ledger-bridge-keyring/commit/f32e529d13a53e55f558d903534d631846dc26ce",
      "commit_sha": "f32e529d13a53e55f558d903534d631846dc26ce",
      "patch": "SINGLE",
      "chain_ord": "['f32e529d13a53e55f558d903534d631846dc26ce']",
      "before_first_fix_commit": "{'25d96289bdffb369a70cbafd70b4ca1f1be47fcc'}",
      "last_fix_commit": "f32e529d13a53e55f558d903534d631846dc26ce",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/02/2020, 22:58:21",
      "message": "Always sign transactions and messages with the correct account (#14)\n\nThe account used to sign transactions and messages should be the one\r\nthe transaction or message is from. Instead, the last connected account\r\nwas being used to sign any messages or transactions.\r\n\r\nThis was especially problematic considering the last connected account\r\nwas not persisted, meaning that signatures were being performed with\r\nthe wrong account after a reset (unless the last connected account\r\nhappened to be account 0, which was the default).\r\n\r\nA mapping of addresses to indexes as been added to the keyring state,\r\nand this mapping has been persisted. This should ensure the correct\r\naccount index is used, and thus the correct hd path, each time this\r\nkeyring is used for signing.",
      "author": "Mark Stacey",
      "comments": null,
      "stats": "{'additions': 15, 'deletions': 2, 'total': 17}",
      "files": "{'index.js': {'additions': 15, 'deletions': 2, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/MetaMask/eth-ledger-bridge-keyring/raw/f32e529d13a53e55f558d903534d631846dc26ce/index.js', 'patch': \"@@ -18,6 +18,7 @@ const NETWORK_API_URLS = {\\n class LedgerBridgeKeyring extends EventEmitter {\\n   constructor (opts = {}) {\\n     super()\\n+    this.accountIndexes = {}\\n     this.bridgeUrl = null\\n     this.type = type\\n     this.page = 0\\n@@ -36,6 +37,7 @@ class LedgerBridgeKeyring extends EventEmitter {\\n     return Promise.resolve({\\n       hdPath: this.hdPath,\\n       accounts: this.accounts,\\n+      accountIndexes: this.accountIndexes,\\n       bridgeUrl: this.bridgeUrl,\\n       implementFullBIP44: false,\\n     })\\n@@ -45,6 +47,7 @@ class LedgerBridgeKeyring extends EventEmitter {\\n     this.hdPath = opts.hdPath || hdPathString\\n     this.bridgeUrl = opts.bridgeUrl || BRIDGE_URL\\n     this.accounts = opts.accounts || []\\n+    this.accountIndexes = opts.accountIndexes || {}\\n     this.implementFullBIP44 = opts.implementFullBIP44 || false\\n     return Promise.resolve()\\n   }\\n@@ -100,6 +103,7 @@ class LedgerBridgeKeyring extends EventEmitter {\\n             if (this._isBIP44()) {\\n               const path = this._getPathForIndex(i)\\n               address = await this.unlock(path)\\n+              this.accountIndexes[ethUtil.toChecksumAddress(address)] = i\\n             } else {\\n               address = this._addressFromIndex(pathBase, i)\\n             }\\n@@ -136,6 +140,7 @@ class LedgerBridgeKeyring extends EventEmitter {\\n       throw new Error(`Address ${address} not found in this keyring`)\\n     }\\n     this.accounts = this.accounts.filter(a => a.toLowerCase() !== address.toLowerCase())\\n+    delete this.accountIndexes[ethUtil.toChecksumAddress(address)]\\n   }\\n \\n   // tx is an instance of the ethereumjs-transaction class.\\n@@ -150,7 +155,11 @@ class LedgerBridgeKeyring extends EventEmitter {\\n \\n           let hdPath\\n           if (this._isBIP44()) {\\n-            hdPath = this._getPathForIndex(this.unlockedAccount)\\n+            const checksummedAddress = ethUtil.toChecksumAddress(address)\\n+            if (!this.accountIndexes[checksummedAddress]) {\\n+              reject(new Error(`Ledger: Index for address '${checksummedAddress}' not found`))\\n+            }\\n+            hdPath = this._getPathForIndex(this.accountIndexes[checksummedAddress])\\n           } else {\\n             hdPath = this._toLedgerPath(this._pathFromAddress(address))\\n           }\\n@@ -195,7 +204,11 @@ class LedgerBridgeKeyring extends EventEmitter {\\n         .then(_ => {\\n           let hdPath\\n           if (this._isBIP44()) {\\n-            hdPath = this._getPathForIndex(this.unlockedAccount)\\n+            const checksummedAddress = ethUtil.toChecksumAddress(withAccount)\\n+            if (!this.accountIndexes[checksummedAddress]) {\\n+              reject(new Error(`Ledger: Index for address '${checksummedAddress}' not found`))\\n+            }\\n+            hdPath = this._getPathForIndex(this.accountIndexes[checksummedAddress])\\n           } else {\\n             hdPath = this._toLedgerPath(this._pathFromAddress(withAccount))\\n           }\"}}",
      "message_norm": "always sign transactions and messages with the correct account (#14)\n\nthe account used to sign transactions and messages should be the one\r\nthe transaction or message is from. instead, the last connected account\r\nwas being used to sign any messages or transactions.\r\n\r\nthis was especially problematic considering the last connected account\r\nwas not persisted, meaning that signatures were being performed with\r\nthe wrong account after a reset (unless the last connected account\r\nhappened to be account 0, which was the default).\r\n\r\na mapping of addresses to indexes as been added to the keyring state,\r\nand this mapping has been persisted. this should ensure the correct\r\naccount index is used, and thus the correct hd path, each time this\r\nkeyring is used for signing.",
      "language": "en",
      "entities": "[('#14', 'ISSUE', ''), ('added', 'ACTION', ''), ('keyring', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('keyring', 'SECWORD', ''), ('signing', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 683,
      "vuln_id": "GHSA-5qw5-89mw-wcg2",
      "cwe_id": "{'CWE-787'}",
      "score": 8.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd'}",
      "dataset": "osv",
      "summary": "Out of bounds write in Tensorflow ### Impact\nTensorFlow is vulnerable to a heap OOB write in [Grappler](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/graph_properties.cc#L1132-L1141):\n\n```cc\nStatus SetUnknownShape(const NodeDef* node, int output_port) {\n  shape_inference::ShapeHandle shape = \n      GetUnknownOutputShape(node, output_port);\n  InferenceContext* ctx = GetContext(node);\n  if (ctx == nullptr) {\n    return errors::InvalidArgument(\"Missing context\");\n  }\n  ctx->set_output(output_port, shape);\n  return Status::OK();\n}\n```\n\nThe [`set_output`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.h#L394) function writes to an array at the specified index:\n\n```cc\nvoid set_output(int idx, ShapeHandle shape) { outputs_.at(idx) = shape; }\n```\n\nHence, this gives a malicious user a write primitive.\n\n### Patches\nWe have patched the issue in GitHub commit [97282c6d0d34476b6ba033f961590b783fa184cd](https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd",
      "commit_sha": "97282c6d0d34476b6ba033f961590b783fa184cd",
      "patch": "SINGLE",
      "chain_ord": "['97282c6d0d34476b6ba033f961590b783fa184cd']",
      "before_first_fix_commit": "{'557a09455bc98108bc29b3b78e818f9d7dca920f'}",
      "last_fix_commit": "97282c6d0d34476b6ba033f961590b783fa184cd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/08/2021, 13:48:40",
      "message": "Prevent a crash due to heap OOB write in grappler.\n\nPiperOrigin-RevId: 408318417\nChange-Id: If095feb8c001e3a8ac4a85b7387b81e8309df47d",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'tensorflow/core/grappler/costs/graph_properties.cc': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/97282c6d0d34476b6ba033f961590b783fa184cd/tensorflow%2Fcore%2Fgrappler%2Fcosts%2Fgraph_properties.cc', 'patch': '@@ -1134,7 +1134,12 @@ class SymbolicShapeRefiner {\\n         GetUnknownOutputShape(node, output_port);\\n     InferenceContext* ctx = GetContext(node);\\n     if (ctx == nullptr) {\\n-      return errors::InvalidArgument(\"Missing context\");\\n+      return errors::InvalidArgument(\"SetUnknownShape: Missing context\");\\n+    }\\n+    if (output_port < 0 || output_port >= ctx->num_outputs()) {\\n+      return errors::InvalidArgument(\\n+          \"SetUnknownShape: output_port must be in [0, \", ctx->num_outputs(),\\n+          \") but was \", output_port);\\n     }\\n     ctx->set_output(output_port, shape);\\n     return Status::OK();'}}",
      "message_norm": "prevent a crash due to heap oob write in grappler.\n\npiperorigin-revid: 408318417\nchange-id: if095feb8c001e3a8ac4a85b7387b81e8309df47d",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('408318417', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/grappler/costs/graph_properties.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1671,
      "vuln_id": "GHSA-f5fj-7265-jxhj",
      "cwe_id": "{'CWE-200'}",
      "score": 5.3,
      "chain": "{'https://github.com/go-gitea/gitea/commit/194a11eb110cd98fc2ba52861abf7770db6885a3'}",
      "dataset": "osv",
      "summary": "Information Exposure Gitea version prior to version 1.5.1 contains a CWE-200 vulnerability that can result in Exposure of users private email addresses. This attack appear to be exploitable via Watch a repository to receive email notifications. Emails received contain the other recipients even if they have the email set as private. This vulnerability appears to have been fixed in 1.5.1.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/go-gitea/gitea",
      "commit_href": "https://github.com/go-gitea/gitea/commit/194a11eb110cd98fc2ba52861abf7770db6885a3",
      "commit_sha": "194a11eb110cd98fc2ba52861abf7770db6885a3",
      "patch": "SINGLE",
      "chain_ord": "['194a11eb110cd98fc2ba52861abf7770db6885a3']",
      "before_first_fix_commit": "{'912953e82a851492c7fd1f2e9c10d3a1955b625c'}",
      "last_fix_commit": "194a11eb110cd98fc2ba52861abf7770db6885a3",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/24/2018, 04:41:26",
      "message": "Don't disclose emails of all users when sending out emails (#4664)",
      "author": "techknowlogick",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 2, 'total': 12}",
      "files": "{'models/issue_mail.go': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/go-gitea/gitea/raw/194a11eb110cd98fc2ba52861abf7770db6885a3/models%2Fissue_mail.go', 'patch': '@@ -1,4 +1,5 @@\\n // Copyright 2016 The Gogs Authors. All rights reserved.\\n+// Copyright 2018 The Gitea Authors. All rights reserved.\\n // Use of this source code is governed by a MIT-style\\n // license that can be found in the LICENSE file.\\n \\n@@ -87,7 +88,9 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\t\\tnames = append(names, participants[i].Name)\\n \\t}\\n \\n-\\tSendIssueCommentMail(issue, doer, content, comment, tos)\\n+\\tfor _, to := range tos {\\n+\\t\\tSendIssueCommentMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\t// Mail mentioned people and exclude watchers.\\n \\tnames = append(names, doer.Name)\\n@@ -99,7 +102,12 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\n \\t\\ttos = append(tos, mentions[i])\\n \\t}\\n-\\tSendIssueMentionMail(issue, doer, content, comment, getUserEmailsByNames(e, tos))\\n+\\n+\\temails := getUserEmailsByNames(e, tos)\\n+\\n+\\tfor _, to := range emails {\\n+\\t\\tSendIssueMentionMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\treturn nil\\n }'}}",
      "message_norm": "don't disclose emails of all users when sending out emails (#4664)",
      "language": "en",
      "entities": "[('disclose', 'SECWORD', ''), ('#4664', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['models/issue_mail.go'])",
      "num_files": 1.0
    },
    {
      "index": 3334,
      "vuln_id": "GHSA-wx69-rvg3-x7fc",
      "cwe_id": "{'CWE-79'}",
      "score": 9.0,
      "chain": "{'https://github.com/NodeBB/NodeBB/commit/1783f918bc19568f421473824461ff2ed7755e4c'}",
      "dataset": "osv",
      "summary": "XSS via prototype pollution in NodeBB  ### Impact\nA prototype pollution vulnerability in the uploader module allowed a malicious user to inject arbitrary data (i.e. javascript) into the DOM, theoretically allowing for an account takeover when used in conjunction with a path traversal vulnerability disclosed at the same time as this report.\n\n### Patches\nThe vulnerability has been patched as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 1783f918bc19568f421473824461ff2ed7755e4c to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
      "published_date": "2021-11-30",
      "chain_len": 1,
      "project": "https://github.com/NodeBB/NodeBB",
      "commit_href": "https://github.com/NodeBB/NodeBB/commit/1783f918bc19568f421473824461ff2ed7755e4c",
      "commit_sha": "1783f918bc19568f421473824461ff2ed7755e4c",
      "patch": "SINGLE",
      "chain_ord": "['1783f918bc19568f421473824461ff2ed7755e4c']",
      "before_first_fix_commit": "{'c8b2fc46dc698db687379106b3f01c71b80f495f'}",
      "last_fix_commit": "1783f918bc19568f421473824461ff2ed7755e4c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/25/2021, 17:17:33",
      "message": "fix: guard against prototype pollution",
      "author": "Bar\u0131\u015f Soner U\u015fakl\u0131",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 2, 'total': 5}",
      "files": "{'src/socket.io/uploads.js': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/NodeBB/NodeBB/raw/1783f918bc19568f421473824461ff2ed7755e4c/src%2Fsocket.io%2Fuploads.js', 'patch': \"@@ -15,11 +15,12 @@ uploads.upload = async function (socket, data) {\\n \\t\\t'user.updateCover': socketUser.updateCover,\\n \\t\\t'groups.cover.update': socketGroup.cover.update,\\n \\t};\\n-\\tif (!socket.uid || !data || !data.chunk || !data.params || !data.params.method || !methodToFunc[data.params.method]) {\\n+\\tif (!socket.uid || !data || !data.chunk ||\\n+\\t\\t!data.params || !data.params.method || !methodToFunc.hasOwnProperty(data.params.method)) {\\n \\t\\tthrow new Error('[[error:invalid-data]]');\\n \\t}\\n \\n-\\tinProgress[socket.id] = inProgress[socket.id] || {};\\n+\\tinProgress[socket.id] = inProgress[socket.id] || Object.create(null);\\n \\tconst socketUploads = inProgress[socket.id];\\n \\tconst { method } = data.params;\"}}",
      "message_norm": "fix: guard against prototype pollution",
      "language": "en",
      "entities": "[('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/socket.io/uploads.js'])",
      "num_files": 1.0
    },
    {
      "index": 1443,
      "vuln_id": "GHSA-9w9f-6mg8-jp7w",
      "cwe_id": "{'CWE-306'}",
      "score": 5.5,
      "chain": "{'https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff'}",
      "dataset": "osv",
      "summary": "Missing Role Based Access Control for the REST handlers in bleve/http package ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nBleve includes HTTP utilities under bleve/http package, that are used by its sample application. \n(https://github.com/blevesearch/bleve-explorer)\nThese HTTP methods paves way for exploitation of a node\u2019s filesystem where the bleve index resides, \nif the user has used bleve\u2019s own HTTP (bleve/http) handlers for exposing the access to the indexes. \nFor instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) \nenable an attacker to create a bleve index (directory structure) anywhere where the user running the server \nhas the write permissions and to delete recursively any directory owned by the same user account.\n \nUsers who have used the bleve/http package for exposing access to bleve index without the explicit \nhandling for the Role Based Access Controls(RBAC) of the index assets would be impacted.\n\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\n**No**. The http package is purely intended to be used for demonstration purposes. \nAnd bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. \nHence the collaborators of this project have decided to stay away from adding any authentication or \nauthorization to bleve project at the moment.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nThe bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user \ninputs as well as any authentication and authorization measures. \nSo it is recommended to not use that in production use cases.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue [here](https://github.com/blevesearch/bleve/issues).\n* Email us at [mailto:security@couchbase.com, fts-team@couchbase.com].",
      "published_date": "2022-06-03",
      "chain_len": 1,
      "project": "https://github.com/blevesearch/bleve",
      "commit_href": "https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff",
      "commit_sha": "1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff",
      "patch": "SINGLE",
      "chain_ord": "['1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff']",
      "before_first_fix_commit": "{'3b8127049e42df67c204bfac1d0b037b952e9a55'}",
      "last_fix_commit": "1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/01/2022, 15:49:02",
      "message": "Link security advisory to README (#1694)",
      "author": "Abhinav Dangeti",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 4, 'total': 10}",
      "files": "{'http/README.md': {'additions': 6, 'deletions': 4, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/blevesearch/bleve/raw/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff/http%2FREADME.md', 'patch': '@@ -3,8 +3,10 @@\\n This http package is purely for the demonstration purposes and is used by sample\\n applications like https://github.com/blevesearch/bleve-explorer.\\n \\n-Please be aware that the http handler implementations neither provide exhaustive \\n-user input validations nor authentication or authorization of the user access. \\n+Please be aware that the http handler implementations neither provide exhaustive\\n+user input validations nor authentication or authorization of the user access.\\n \\n-So, it is recommended to remain cautious against the use of the http package in \\n-production use cases.\\n\\\\ No newline at end of file\\n+So, it is strongly recommended that users exercise caution while using the http\\n+package in production situations.\\n+\\n+[Here](https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w) is the security advisory on this.'}}",
      "message_norm": "link security advisory to readme (#1694)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('#1694', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['http/README.md'])",
      "num_files": 1.0
    },
    {
      "index": 478,
      "vuln_id": "GHSA-4rcq-jv2f-898j",
      "cwe_id": "{'CWE-684'}",
      "score": 3.5,
      "chain": "{'https://github.com/qutebrowser/qutebrowser/commit/d28ed758d077a5bf19ddac4da468f7224114df23', 'https://github.com/qutebrowser/qutebrowser/commit/4020210b193f77cf1785b21717f6ef7c5de5f0f8', 'https://github.com/qutebrowser/qutebrowser/commit/f5d801251aa5436aff44660c87d7013e29ac5864', 'https://github.com/qutebrowser/qutebrowser/commit/6821c236f9ae23adf21d46ce0d56768ac8d0c467', 'https://github.com/qutebrowser/qutebrowser/commit/a45ca9c788f648d10cccce2af41405bf25ee2948', 'https://github.com/qutebrowser/qutebrowser/commit/021ab572a319ca3db5907a33a59774f502b3b975', 'https://github.com/qutebrowser/qutebrowser/commit/9bd1cf585fccdfe8318fff7af793730e74a04db3', 'https://github.com/qutebrowser/qutebrowser/commit/1b7946ed14b386a24db050f2d6dba81ba6518755', 'https://github.com/qutebrowser/qutebrowser/commit/2281a205c3e70ec20f35ec8fafecee0d5c4f3478', 'https://github.com/qutebrowser/qutebrowser/commit/19f01bb42d02da539446a52a25bb0c1232b86327'}",
      "dataset": "osv",
      "summary": "Incorrect Provision of Specified Functionality in qutebrowser # Description\n\nAfter a certificate error was overridden by the user, qutebrowser displays the URL as yellow (`colors.statusbar.url.warn.fg`). However, when the affected website was subsequently loaded again, the URL was mistakenly displayed as green (`colors.statusbar.url.success_https`). While the user already has seen a certificate error prompt at this point (or set `content.ssl_strict` to `false` which is not recommended), this could still provide a false sense of security.\n\n# Affected versions and patches\n\nAll versions of qutebrowser are believed to be affected, though versions before v0.11.x couldn't be tested.\n\nThe issue is fixed in qutebrowser v1.11.1 (pending release) and v1.12.0 (unreleased). Backported patches for older versions are available, but no further releases are planned.\n\n# Mitigation\n\nIf you are unable to upgrade:\n\n- Treat any host with a certificate exception as insecure, ignoring the URL color\n- Or set `content.ssl_strict` to `True` (instead of `'ask'`), preventing certificate exceptions\n\n# References\n\n- qutebrowser issue: https://github.com/qutebrowser/qutebrowser/issues/5403\n- Fix (master branch): https://github.com/qutebrowser/qutebrowser/commit/021ab572a319ca3db5907a33a59774f502b3b975\n- Related issue for KDE Falkon: https://bugs.kde.org/show_bug.cgi?id=420902\n- Related issue for eric6 Web Browser: https://tracker.die-offenbachs.homelinux.org/eric/issue328 (fixed in eric6 20.6)",
      "published_date": "2020-05-08",
      "chain_len": 10,
      "project": "https://github.com/qutebrowser/qutebrowser",
      "commit_href": "https://github.com/qutebrowser/qutebrowser/commit/1b7946ed14b386a24db050f2d6dba81ba6518755",
      "commit_sha": "1b7946ed14b386a24db050f2d6dba81ba6518755",
      "patch": "MULTI",
      "chain_ord": "['d28ed758d077a5bf19ddac4da468f7224114df23', '9bd1cf585fccdfe8318fff7af793730e74a04db3', '6821c236f9ae23adf21d46ce0d56768ac8d0c467', '4020210b193f77cf1785b21717f6ef7c5de5f0f8', 'f5d801251aa5436aff44660c87d7013e29ac5864', 'a45ca9c788f648d10cccce2af41405bf25ee2948', '2281a205c3e70ec20f35ec8fafecee0d5c4f3478', '19f01bb42d02da539446a52a25bb0c1232b86327', '021ab572a319ca3db5907a33a59774f502b3b975', '1b7946ed14b386a24db050f2d6dba81ba6518755']",
      "before_first_fix_commit": "{'e15af6cd92d523b22fe9774b653a859b9e33df41'}",
      "last_fix_commit": "1b7946ed14b386a24db050f2d6dba81ba6518755",
      "chain_ord_pos": 10.0,
      "commit_datetime": "05/02/2020, 17:03:20",
      "message": "Update changelog",
      "author": "Florian Bruhin",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 1, 'total': 11}",
      "files": "{'doc/changelog.asciidoc': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/qutebrowser/qutebrowser/raw/1b7946ed14b386a24db050f2d6dba81ba6518755/doc%2Fchangelog.asciidoc', 'patch': '@@ -45,7 +45,16 @@ Fixed\\n v1.11.1 (unreleased)\\n --------------------\\n \\n-No changes yet.\\n+Security\\n+~~~~~~~~\\n+\\n+- After a certificate error was overridden by the user, qutebrowser displays\\n+  the URL as yellow (`colors.statusbar.url.warn.fg`). However, when the\\n+  affected website was subsequently loaded again, the URL was mistakenly\\n+  displayed as green (`colors.statusbar.url.success_https`). While the user\\n+  already has seen a certificate error prompt at this point (or set\\n+  `content.ssl_strict` to `false` which is not recommended), this could still\\n+  provide a false sense of security. This is now fixed.\\n \\n v1.11.0 (2020-04-27)\\n --------------------'}}",
      "message_norm": "update changelog",
      "language": "nl",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['doc/changelog.asciidoc'])",
      "num_files": 1.0
    },
    {
      "index": 1436,
      "vuln_id": "GHSA-9vpm-rcf4-9wqw",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d'}",
      "dataset": "osv",
      "summary": "Division by 0 in `MaxPoolGradWithArgmax` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` is vulnerable to a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nargmax = tf.constant([], shape=[0], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n\ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding='SAME', include_batch_in_index=False)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/279bab6efa22752a2827621b7edb56a730233bd8/tensorflow/core/kernels/maxpooling_op.cc#L1033-L1034) fails to validate that the batch dimension of the tensor is non-zero, before dividing by this quantity.\n\n### Patches\nWe have patched the issue in GitHub commit [376c352a37ce5a68b721406dc7e77ac4b6cf483d](https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d",
      "commit_sha": "376c352a37ce5a68b721406dc7e77ac4b6cf483d",
      "patch": "SINGLE",
      "chain_ord": "['376c352a37ce5a68b721406dc7e77ac4b6cf483d']",
      "before_first_fix_commit": "{'279bab6efa22752a2827621b7edb56a730233bd8'}",
      "last_fix_commit": "376c352a37ce5a68b721406dc7e77ac4b6cf483d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 21:34:54",
      "message": "Don't do any work if output tensor is null (prevent div by 0)\n\nPiperOrigin-RevId: 372208700\nChange-Id: Iea6b6293e887ade8538facfdb50fb931e17f511e",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'tensorflow/core/kernels/maxpooling_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/376c352a37ce5a68b721406dc7e77ac4b6cf483d/tensorflow%2Fcore%2Fkernels%2Fmaxpooling_op.cc', 'patch': '@@ -1088,6 +1088,8 @@ class MaxPoolingGradWithArgmaxOp : public OpKernel {\\n     OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\\n                                 {0}, 0, out_shape, &grad_out));\\n \\n+    if (out_shape.num_elements() == 0) return;  // nothing to be done\\n+\\n     LaunchMaxPoolingGradWithArgmax<Device, T>::launch(\\n         context, params, grad_in, argmax, grad_out, include_batch_in_index_);\\n   }'}}",
      "message_norm": "don't do any work if output tensor is null (prevent div by 0)\n\npiperorigin-revid: 372208700\nchange-id: iea6b6293e887ade8538facfdb50fb931e17f511e",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('div by 0', 'SECWORD', ''), ('372208700', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/maxpooling_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 162,
      "vuln_id": "GHSA-2x7h-96h5-rq84",
      "cwe_id": "{'CWE-22'}",
      "score": 4.0,
      "chain": "{'https://github.com/icsharpcode/SharpZipLib/commit/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78'}",
      "dataset": "osv",
      "summary": "Path Traversal in SharpZipLib SharpZipLib (or #ziplib) is a Zip, GZip, Tar and BZip2 library. Starting version 1.3.0 and prior to version 1.3.3, a check was added if the destination file is under destination directory. However, it is not enforced that `destDir` ends with slash. If the `destDir` is not slash terminated like `/home/user/dir` it is possible to create a file with a name thats begins with the destination directory, i.e. `/home/user/dir.sh`. Because of the file name and destination directory constraints, the arbitrary file creation impact is limited and depends on the use case. Version 1.3.3 contains a patch for this vulnerability.",
      "published_date": "2022-02-01",
      "chain_len": 1,
      "project": "https://github.com/icsharpcode/SharpZipLib",
      "commit_href": "https://github.com/icsharpcode/SharpZipLib/commit/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
      "commit_sha": "5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
      "patch": "SINGLE",
      "chain_ord": "['5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78']",
      "before_first_fix_commit": "{'a0e96de70b5264f4c919b09253b1522bc7a221cc'}",
      "last_fix_commit": "5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/18/2021, 09:58:11",
      "message": "fix: specialized tar extract traversal",
      "author": "nils m\u00e5s\u00e9n",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'src/ICSharpCode.SharpZipLib/Tar/TarArchive.cs': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/icsharpcode/SharpZipLib/raw/5c3b293de5d65b108e7f2cd0ea8f81c1b8273f78/src%2FICSharpCode.SharpZipLib%2FTar%2FTarArchive.cs', 'patch': '@@ -658,8 +658,9 @@ private void ExtractEntry(string destDir, TarEntry entry, bool allowParentTraver\\n \\t\\t\\tname = name.Replace(\\'/\\', Path.DirectorySeparatorChar);\\n \\n \\t\\t\\tstring destFile = Path.Combine(destDir, name);\\n+\\t\\t\\tvar destFileDir = Path.GetDirectoryName(Path.GetFullPath(destFile)) ?? \"\";\\n \\n-\\t\\t\\tif (!allowParentTraversal && !Path.GetFullPath(destFile).StartsWith(destDir, StringComparison.InvariantCultureIgnoreCase))\\n+\\t\\t\\tif (!allowParentTraversal && !destFileDir.StartsWith(destDir, StringComparison.InvariantCultureIgnoreCase))\\n \\t\\t\\t{\\n \\t\\t\\t\\tthrow new InvalidNameException(\"Parent traversal in paths is not allowed\");\\n \\t\\t\\t}'}}",
      "message_norm": "fix: specialized tar extract traversal",
      "language": "en",
      "entities": "[('extract traversal', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/ICSharpCode.SharpZipLib/Tar/TarArchive.cs'])",
      "num_files": 1.0
    },
    {
      "index": 1042,
      "vuln_id": "GHSA-7mpx-vg3c-cmr4",
      "cwe_id": "{'CWE-287'}",
      "score": 8.2,
      "chain": "{'https://github.com/salvoravida/react-adal/commit/74158dba1647b12fe96fa401e306a6287fe9e2a9'}",
      "dataset": "osv",
      "summary": "Improper Authentication in react-adal This affects versions of react-adal < 0.5.1. It is possible for a specially crafted JWT token and request URL can cause the nonce, session and refresh values to be incorrectly validated, causing the application to treat an attacker-generated JWT token as authentic. The logical defect is caused by how the nonce, session and refresh values are stored in the browser local storage or session storage. Each key is automatically appended by ||. When the received nonce and session keys are generated, the list of values is stored in the browser storage, separated by ||, with || always appended to the end of the list. Since || will always be the last 2 characters of the stored values, an empty string (\"\") will always be in the list of the valid values. Therefore, if an empty session parameter is provided in the callback URL, and a specially-crafted JWT token contains an nonce value of \"\" (empty string), then adal.js will consider the JWT token as authentic.",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/salvoravida/react-adal",
      "commit_href": "https://github.com/salvoravida/react-adal/commit/74158dba1647b12fe96fa401e306a6287fe9e2a9",
      "commit_sha": "74158dba1647b12fe96fa401e306a6287fe9e2a9",
      "patch": "SINGLE",
      "chain_ord": "['74158dba1647b12fe96fa401e306a6287fe9e2a9']",
      "before_first_fix_commit": "{'e82bc421d70805ff308e11a1f0f1fcd7fb2b3186'}",
      "last_fix_commit": "74158dba1647b12fe96fa401e306a6287fe9e2a9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/05/2020, 20:19:06",
      "message": "ADAL.js update",
      "author": "Kris Hardy",
      "comments": null,
      "stats": "{'additions': 32, 'deletions': 51, 'total': 83}",
      "files": "{'src/adal.js': {'additions': 32, 'deletions': 51, 'changes': 83, 'status': 'modified', 'raw_url': 'https://github.com/salvoravida/react-adal/raw/74158dba1647b12fe96fa401e306a6287fe9e2a9/src%2Fadal.js', 'patch': \"@@ -135,10 +135,6 @@ var AuthenticationContext = (function () {\\n         this._openedWindows = [];\\n         this._requestType = this.REQUEST_TYPE.LOGIN;\\n         window._adalInstance = this;\\n-        this._storageSupport = {\\n-            localStorage: null,\\n-            sessionStorage: null\\n-        };\\n \\n         // validate before constructor assignments\\n         if (config.displayCall && typeof config.displayCall !== 'function') {\\n@@ -813,7 +809,6 @@ var AuthenticationContext = (function () {\\n      * Clears cache items.\\n      */\\n     AuthenticationContext.prototype.clearCache = function () {\\n-        this._user = null;\\n         this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST, '');\\n         this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST, '');\\n         this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE, '');\\n@@ -860,6 +855,7 @@ var AuthenticationContext = (function () {\\n      */\\n     AuthenticationContext.prototype.logOut = function () {\\n         this.clearCache();\\n+        this._user = null;\\n         var urlNavigate;\\n \\n         if (this.config.logOutUri) {\\n@@ -928,8 +924,7 @@ var AuthenticationContext = (function () {\\n      * @ignore\\n      */\\n     AuthenticationContext.prototype._addHintParameters = function (urlNavigate) {\\n-\\n-        //If you don't use prompt=none, then if the session does not exist, there will be a failure.\\n+        //If you don\ufffdt use prompt=none, then if the session does not exist, there will be a failure.\\n         //If sid is sent alongside domain or login hints, there will be a failure since request is ambiguous.\\n         //If sid is sent with a prompt value other than none or attempt_none, there will be a failure since the request is ambiguous.\\n \\n@@ -1103,7 +1098,7 @@ var AuthenticationContext = (function () {\\n         if (requestNonce) {\\n             requestNonce = requestNonce.split(this.CONSTANTS.CACHE_DELIMETER);\\n             for (var i = 0; i < requestNonce.length; i++) {\\n-                if (requestNonce[i] === user.profile.nonce) {\\n+                if (requestNonce[i] && requestNonce[i] === user.profile.nonce) {\\n                     return true;\\n                 }\\n             }\\n@@ -1122,7 +1117,7 @@ var AuthenticationContext = (function () {\\n         if (loginStates) {\\n             loginStates = loginStates.split(this.CONSTANTS.CACHE_DELIMETER);\\n             for (var i = 0; i < loginStates.length; i++) {\\n-                if (loginStates[i] === requestInfo.stateResponse) {\\n+                if (loginStates[i] && loginStates[i] === requestInfo.stateResponse) {\\n                     requestInfo.requestType = this.REQUEST_TYPE.LOGIN;\\n                     requestInfo.stateMatch = true;\\n                     return true;\\n@@ -1135,7 +1130,7 @@ var AuthenticationContext = (function () {\\n         if (acquireTokenStates) {\\n             acquireTokenStates = acquireTokenStates.split(this.CONSTANTS.CACHE_DELIMETER);\\n             for (var i = 0; i < acquireTokenStates.length; i++) {\\n-                if (acquireTokenStates[i] === requestInfo.stateResponse) {\\n+                if (acquireTokenStates[i] && acquireTokenStates[i] === requestInfo.stateResponse) {\\n                     requestInfo.requestType = this.REQUEST_TYPE.RENEW_TOKEN;\\n                     requestInfo.stateMatch = true;\\n                     return true;\\n@@ -1218,16 +1213,17 @@ var AuthenticationContext = (function () {\\n                             this._user = null;\\n                         } else {\\n                             this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN, requestInfo.parameters[this.CONSTANTS.ID_TOKEN]);\\n+\\n                             // Save idtoken as access token for app itself\\n-                            var idTokenResource = this.config.loginResource ? this.config.loginResource : this.config.clientId;\\n+                            resource = this.config.loginResource ? this.config.loginResource : this.config.clientId;\\n \\n-                            if (!this._hasResource(idTokenResource)) {\\n+                            if (!this._hasResource(resource)) {\\n                                 keys = this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS) || '';\\n-                                this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS, keys + idTokenResource + this.CONSTANTS.RESOURCE_DELIMETER);\\n+                                this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS, keys + resource + this.CONSTANTS.RESOURCE_DELIMETER);\\n                             }\\n \\n-                            this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY + idTokenResource, requestInfo.parameters[this.CONSTANTS.ID_TOKEN]);\\n-                            this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY + idTokenResource, this._user.profile.exp);\\n+                            this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY + resource, requestInfo.parameters[this.CONSTANTS.ID_TOKEN]);\\n+                            this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY + resource, this._user.profile.exp);\\n                         }\\n                     }\\n                     else {\\n@@ -1689,7 +1685,7 @@ var AuthenticationContext = (function () {\\n                 ifr.setAttribute('aria-hidden', 'true');\\n                 ifr.style.visibility = 'hidden';\\n                 ifr.style.position = 'absolute';\\n-                ifr.style.width = ifr.style.height = ifr.style.borderWidth = '0px';\\n+                ifr.style.width = ifr.style.height = ifr.borderWidth = '0px';\\n \\n                 adalFrame = document.getElementsByTagName('body')[0].appendChild(ifr);\\n             }\\n@@ -1764,52 +1760,37 @@ var AuthenticationContext = (function () {\\n     };\\n \\n     /**\\n-     * Returns true if the browser supports given storage type\\n+     * Returns true if browser supports localStorage, false otherwise.\\n      * @ignore\\n      */\\n-    AuthenticationContext.prototype._supportsStorage = function(storageType) {\\n-        if (!(storageType in this._storageSupport)) {\\n-            return false;\\n-        }\\n-\\n-        if (this._storageSupport[storageType] !== null) {\\n-            return this._storageSupport[storageType];\\n-        }\\n-\\n+    AuthenticationContext.prototype._supportsLocalStorage = function () {\\n         try {\\n-            if (!(storageType in window) || window[storageType] === null) {\\n-                throw new Error();\\n-            }\\n-            var testKey = '__storageTest__';\\n-            window[storageType].setItem(testKey, 'A');\\n-            if (window[storageType].getItem(testKey) !== 'A') {\\n-                throw new Error();\\n-            }\\n-            window[storageType].removeItem(testKey);\\n-            if (window[storageType].getItem(testKey)) {\\n-                throw new Error();\\n-            }\\n-            this._storageSupport[storageType] = true;\\n+            if (!window.localStorage) return false; // Test availability\\n+            window.localStorage.setItem('storageTest', 'A'); // Try write\\n+            if (window.localStorage.getItem('storageTest') != 'A') return false; // Test read/write\\n+            window.localStorage.removeItem('storageTest'); // Try delete\\n+            if (window.localStorage.getItem('storageTest')) return false; // Test delete\\n+            return true; // Success\\n         } catch (e) {\\n-            this._storageSupport[storageType] = false;\\n+            return false;\\n         }\\n-        return this._storageSupport[storageType];\\n-    }\\n-\\n-    /**\\n-     * Returns true if browser supports localStorage, false otherwise.\\n-     * @ignore\\n-     */\\n-    AuthenticationContext.prototype._supportsLocalStorage = function () {        \\n-        return this._supportsStorage('localStorage');\\n     };\\n \\n     /**\\n      * Returns true if browser supports sessionStorage, false otherwise.\\n      * @ignore\\n      */\\n     AuthenticationContext.prototype._supportsSessionStorage = function () {\\n-        return this._supportsStorage('sessionStorage');\\n+        try {\\n+            if (!window.sessionStorage) return false; // Test availability\\n+            window.sessionStorage.setItem('storageTest', 'A'); // Try write\\n+            if (window.sessionStorage.getItem('storageTest') != 'A') return false; // Test read/write\\n+            window.sessionStorage.removeItem('storageTest'); // Try delete\\n+            if (window.sessionStorage.getItem('storageTest')) return false; // Test delete\\n+            return true; // Success\\n+        } catch (e) {\\n+            return false;\\n+        }\\n     };\\n \\n     /**\\n@@ -1955,4 +1936,4 @@ var AuthenticationContext = (function () {\\n \\n     return AuthenticationContext;\\n \\n-}());\\n\\\\ No newline at end of file\\n+}());\"}}",
      "message_norm": "adal.js update",
      "language": "id",
      "entities": null,
      "classification_level_1": "POORLY_DOCUMENTED",
      "classification_level_2": "SUBMIT_CENTERED",
      "list_files": "dict_keys(['src/adal.js'])",
      "num_files": 1.0
    },
    {
      "index": 1441,
      "vuln_id": "GHSA-9w7h-3wwh-6m5q",
      "cwe_id": "{'CWE-79'}",
      "score": 6.3,
      "chain": "{'https://github.com/microweber/microweber/commit/ad3928f67b2cd4443f4323d858b666d35a919ba8'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in Microweber Microweber prior to 1.2.15 is vulnerable to reflected cross-site scripting on demo.microweber.org/demo/module/. This allows the execution of arbitrary JavaScript as the attacked user.",
      "published_date": "2022-04-23",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/ad3928f67b2cd4443f4323d858b666d35a919ba8",
      "commit_sha": "ad3928f67b2cd4443f4323d858b666d35a919ba8",
      "patch": "SINGLE",
      "chain_ord": "['ad3928f67b2cd4443f4323d858b666d35a919ba8']",
      "before_first_fix_commit": "{'3e47c4f1933aa3ffd0975e24e34b7af35de947b4'}",
      "last_fix_commit": "ad3928f67b2cd4443f4323d858b666d35a919ba8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/22/2022, 16:26:41",
      "message": "update",
      "author": "Peter Ivanov",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 2, 'total': 9}",
      "files": "{'src/MicroweberPackages/App/Http/Controllers/ApiController.php': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/ad3928f67b2cd4443f4323d858b666d35a919ba8/src%2FMicroweberPackages%2FApp%2FHttp%2FControllers%2FApiController.php', 'patch': \"@@ -611,18 +611,23 @@ public function module()\\n             $request_data_new = [];\\n             $antixss = new AntiXSS();\\n             foreach ($request_data as $k=>$v){\\n-\\n+                if(is_string($v)) {\\n+                    $v = str_replace('<', '-', $v);\\n+                    $v = str_replace('>', '-', $v);\\n+                }\\n                 $v = $antixss->xss_clean($v);\\n \\n                 if(is_string($k)){\\n+                    $k = str_replace('<', '-', $k);\\n+                    $k = str_replace('>', '-', $k);\\n                     $k = $antixss->xss_clean($k);\\n                     if($k){\\n                         $request_data_new[$k] = $v;\\n                     }\\n                 } else {\\n                     $request_data_new[$k] = $v;\\n                 }\\n-                \\n+\\n             }\\n             $request_data = $request_data_new;\\n         }\"}}",
      "message_norm": "update",
      "language": "ro",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/App/Http/Controllers/ApiController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1985,
      "vuln_id": "GHSA-h4j5-c7cj-74xg",
      "cwe_id": "{'CWE-94'}",
      "score": 9.8,
      "chain": "{'https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291', 'https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6'}",
      "dataset": "osv",
      "summary": "Arbitrary Code Injection This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run.",
      "published_date": "2021-05-04",
      "chain_len": 2,
      "project": "https://github.com/driverdan/node-XMLHttpRequest",
      "commit_href": "https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6",
      "commit_sha": "983cfc244c7567ad6a59e366e55a8037e0497fe6",
      "patch": "MULTI",
      "chain_ord": "['983cfc244c7567ad6a59e366e55a8037e0497fe6', 'ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291']",
      "before_first_fix_commit": "{'bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2'}",
      "last_fix_commit": "ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/19/2013, 02:34:33",
      "message": "fix for backslashes in data not encoding correctly",
      "author": "Kris Nye",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/XMLHttpRequest.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/driverdan/node-XMLHttpRequest/raw/983cfc244c7567ad6a59e366e55a8037e0497fe6/lib%2FXMLHttpRequest.js', 'patch': '@@ -477,7 +477,7 @@ exports.XMLHttpRequest = function() {\\n         + \"fs.writeFileSync(\\'\" + contentFile + \"\\', \\'NODE-XMLHTTPREQUEST-ERROR:\\' + JSON.stringify(error), \\'utf8\\');\"\\n         + \"fs.unlinkSync(\\'\" + syncFile + \"\\');\"\\n         + \"});\"\\n-        + (data ? \"req.write(\\'\" + data.replace(/\\'/g, \"\\\\\\\\\\'\") + \"\\');\":\"\")\\n+        + (data ? \"req.write(\\'\" + JSON.stringify(data).slice(1,-1).replace(/\\'/g, \"\\\\\\\\\\'\") + \"\\');\":\"\")\\n         + \"req.end();\";\\n       // Start the other Node Process, executing this string\\n       var syncProc = spawn(process.argv[0], [\"-e\", execString]);'}}",
      "message_norm": "fix for backslashes in data not encoding correctly",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('encoding', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/XMLHttpRequest.js'])",
      "num_files": 1.0
    },
    {
      "index": 2088,
      "vuln_id": "GHSA-hjxc-462x-x77j",
      "cwe_id": "{'CWE-367'}",
      "score": 5.9,
      "chain": "{'https://github.com/yarnpkg/yarn/commit/0474b8c66a8ea298f5e4dedc67b2de464297ad1c'}",
      "dataset": "osv",
      "summary": "TOCTOU Race Condition in Yarn The package integrity validation in yarn &lt; 1.19.0 contains a TOCTOU vulnerability where the hash is computed before writing a package to cache. It&#39;s not computed again when reading from the cache. This may lead to a cache pollution attack. This issue is fixed in 1.19.0.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/yarnpkg/yarn",
      "commit_href": "https://github.com/yarnpkg/yarn/commit/0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
      "commit_sha": "0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
      "patch": "SINGLE",
      "chain_ord": "['0474b8c66a8ea298f5e4dedc67b2de464297ad1c']",
      "before_first_fix_commit": "{'7f606ec3a31b53873056d48840e8acc647dca879'}",
      "last_fix_commit": "0474b8c66a8ea298f5e4dedc67b2de464297ad1c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/28/2019, 12:16:15",
      "message": "Prevents loading the cache if the stored integrity doesnt match",
      "author": "Ma\u00ebl Nison",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 3, 'total': 15}",
      "files": "{'src/package-fetcher.js': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https://github.com/yarnpkg/yarn/raw/0474b8c66a8ea298f5e4dedc67b2de464297ad1c/src%2Fpackage-fetcher.js', 'patch': \"@@ -9,8 +9,17 @@ import * as fetchers from './fetchers/index.js';\\n import * as fs from './util/fs.js';\\n import * as promise from './util/promise.js';\\n \\n-async function fetchCache(dest: string, fetcher: Fetchers, config: Config): Promise<FetchedMetadata> {\\n-  const {hash, package: pkg} = await config.readPackageMetadata(dest);\\n+const ssri = require('ssri');\\n+\\n+async function fetchCache(dest: string, fetcher: Fetchers, config: Config, integrity: ?string): Promise<FetchedMetadata> {\\n+  const {hash, package: pkg, remote} = await config.readPackageMetadata(dest);\\n+\\n+  if (integrity) {\\n+    if (!remote.integrity || !ssri.parse(integrity).match(remote.integrity)) {\\n+      throw new MessageError('Incorrect integrity when fetching from the cache');\\n+    }\\n+  }\\n+\\n   await fetcher.setupMirrorFromCache();\\n   return {\\n     package: pkg,\\n@@ -40,7 +49,7 @@ export async function fetchOneRemote(\\n \\n   const fetcher = new Fetcher(dest, remote, config);\\n   if (await config.isValidModuleDest(dest)) {\\n-    return fetchCache(dest, fetcher, config);\\n+      return fetchCache(dest, fetcher, config, remote.integrity);\\n   }\\n \\n   // remove as the module may be invalid\"}}",
      "message_norm": "prevents loading the cache if the stored integrity doesnt match",
      "language": "en",
      "entities": "[('prevents', 'ACTION', ''), ('integrity', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/package-fetcher.js'])",
      "num_files": 1.0
    },
    {
      "index": 2937,
      "vuln_id": "GHSA-rg3m-hqc5-344v",
      "cwe_id": "{'CWE-125'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b'}",
      "dataset": "osv",
      "summary": "`SparseFillEmptyRows` heap OOB ### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L194-L241) of `SparseFillEmptyRows` can be made to trigger a heap OOB access:\n\n```python\nimport tensorflow as tf\n  \ndata=tf.raw_ops.SparseFillEmptyRows(\n  indices=[[0,0],[0,0],[0,0]],\n  values=['sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss'],\n  dense_shape=[5,3],\n  default_value='o')\n```\n  \nThis occurs whenever the size of `indices` does not match the size of `values`.\n\n### Patches\nWe have patched the issue in GitHub commit [67bfd9feeecfb3c61d80f0e46d89c170fbee682b](https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-11-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
      "commit_sha": "67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
      "patch": "SINGLE",
      "chain_ord": "['67bfd9feeecfb3c61d80f0e46d89c170fbee682b']",
      "before_first_fix_commit": "{'421fba8888bb8f8724bc2e35ca2fdcde16e1bfe5'}",
      "last_fix_commit": "67bfd9feeecfb3c61d80f0e46d89c170fbee682b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/30/2021, 17:44:33",
      "message": "Make SparseFillEmptyRows validate that the length of `values` must be equal to the number of index tuples.\n\nPiperOrigin-RevId: 399969549\nChange-Id: I3c2f2ca1c1d2cc88bb5951c6958b38c16e9436c8",
      "author": "Penporn Koanantakool",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'tensorflow/core/kernels/sparse_fill_empty_rows_op.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/67bfd9feeecfb3c61d80f0e46d89c170fbee682b/tensorflow%2Fcore%2Fkernels%2Fsparse_fill_empty_rows_op.cc', 'patch': '@@ -24,11 +24,13 @@ limitations under the License.\\n #include <vector>\\n \\n #include \"tensorflow/core/framework/op_kernel.h\"\\n+#include \"tensorflow/core/framework/op_requires.h\"\\n #include \"tensorflow/core/framework/register_types.h\"\\n #include \"tensorflow/core/framework/tensor.h\"\\n #include \"tensorflow/core/framework/tensor_util.h\"\\n #include \"tensorflow/core/framework/types.h\"\\n #include \"tensorflow/core/lib/gtl/inlined_vector.h\"\\n+#include \"tensorflow/core/platform/errors.h\"\\n #include \"tensorflow/core/util/sparse/sparse_tensor.h\"\\n \\n namespace tensorflow {\\n@@ -222,6 +224,12 @@ void SparseFillEmptyRowsOpImpl(OpKernelContext* context,\\n                     errors::InvalidArgument(\"values must be a vector, saw: \",\\n                                             values_t.shape().DebugString()),\\n                     done);\\n+  OP_REQUIRES_ASYNC(\\n+      context, indices_t.dim_size(0) == values_t.dim_size(0),\\n+      errors::InvalidArgument(\"The length of `values` (\", values_t.dim_size(0),\\n+                              \") must match the first dimension of `indices` (\",\\n+                              indices_t.dim_size(0), \").\"),\\n+      done);\\n   OP_REQUIRES_ASYNC(\\n       context, TensorShapeUtils::IsScalar(default_value_t.shape()),\\n       errors::InvalidArgument(\"default_value must be a scalar, saw: \",'}}",
      "message_norm": "make sparsefillemptyrows validate that the length of `values` must be equal to the number of index tuples.\n\npiperorigin-revid: 399969549\nchange-id: i3c2f2ca1c1d2cc88bb5951c6958b38c16e9436c8",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('399969549', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_fill_empty_rows_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3024,
      "vuln_id": "GHSA-rwxp-hwwf-653v",
      "cwe_id": "{'CWE-94', 'CWE-200'}",
      "score": 5.4,
      "chain": "{'https://github.com/TryGhost/express-hbs/commit/ff6fad6e357699412d4e916273314e5e7af1500e'}",
      "dataset": "osv",
      "summary": "Insecure template handling in express-hbs express-hbs is an Express handlebars template engine. express-hbs mixes pure template data with engine configuration options through the Express render API. More specifically, the layout parameter may trigger file disclosure vulnerabilities in downstream applications. This potential vulnerability is somewhat restricted in that only files with existing extentions (i.e. file.extension) can be included, files that lack an extension will have .hbs appended to them. For complete details refer to the referenced GHSL-2021-019 report. Notes in documentation have been added to help users of express-hbs avoid this potential information exposure vulnerability.",
      "published_date": "2021-05-17",
      "chain_len": 1,
      "project": "https://github.com/TryGhost/express-hbs",
      "commit_href": "https://github.com/TryGhost/express-hbs/commit/ff6fad6e357699412d4e916273314e5e7af1500e",
      "commit_sha": "ff6fad6e357699412d4e916273314e5e7af1500e",
      "patch": "SINGLE",
      "chain_ord": "['ff6fad6e357699412d4e916273314e5e7af1500e']",
      "before_first_fix_commit": "{'070fe175e8eb866230981b09926a1883517aca11'}",
      "last_fix_commit": "ff6fad6e357699412d4e916273314e5e7af1500e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/22/2021, 12:09:28",
      "message": "\ud83d\udd12 Added notes on a potential security vulnerability\n\n- Express.js never intended for template options to be passed via res.render\n- If you use res.render to pass a layout, the file will be read from disk\n- If you pass user-submitted data as options to res.render e.g. using req.query, then user-submitted file paths will be read\n- This is only a potential security vulnerability, depending on the implementation\n- Further fixes will be pushed to express-hbs to disable this behaviour by default",
      "author": "Hannah Wolfe",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'README.md': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/TryGhost/express-hbs/raw/ff6fad6e357699412d4e916273314e5e7af1500e/README.md', 'patch': \"@@ -99,6 +99,10 @@ There are three ways to use a layout, listed in precedence order\\n \\n 2.  As an option to render\\n \\n+    ## \u26a0\ufe0f This creates a potential security vulnerability:\\n+\\n+    Do not use this option in conjunction with passing user submitted data to res.render e.g. `res.render('index', req.query)`. This allows users to read arbitrary files from your filesystem!\\n+\\n     ```js\\n     res.render('veggies', {\\n       title: 'My favorite veggies',\"}}",
      "message_norm": "\ud83d\udd12 added notes on a potential security vulnerability\n\n- express.js never intended for template options to be passed via res.render\n- if you use res.render to pass a layout, the file will be read from disk\n- if you pass user-submitted data as options to res.render e.g. using req.query, then user-submitted file paths will be read\n- this is only a potential security vulnerability, depending on the implementation\n- further fixes will be pushed to express-hbs to disable this behaviour by default",
      "language": "en",
      "entities": "[('added', 'ACTION', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['README.md'])",
      "num_files": 1.0
    },
    {
      "index": 634,
      "vuln_id": "GHSA-5gjh-5j4f-cpwv",
      "cwe_id": "{'CWE-434', 'CWE-20'}",
      "score": 8.8,
      "chain": "{'https://github.com/gogs/gogs/commit/0fef3c9082269e9a4e817274942a5d7c50617284'}",
      "dataset": "osv",
      "summary": "Unrestricted Upload of File with Dangerous Type in Gogs ### Impact\n\nThe malicious user is able to upload a crafted `config` file into repository's `.git` directory with to gain SSH access to the server. All installations with [repository upload enabled (default)](https://github.com/gogs/gogs/blob/f36eeedbf89328ee70cc3a2e239f6314f9021f58/conf/app.ini#L127-L129) are affected.\n\n### Patches\n\nRepository file uploads are prohibited to its `.git` directory. Users should upgrade to 0.12.6 or the latest 0.13.0+dev.\n\n### Workarounds\n\n[Disable repository files upload](https://github.com/gogs/gogs/blob/f36eeedbf89328ee70cc3a2e239f6314f9021f58/conf/app.ini#L128-L129).\n\n### References\n\nhttps://huntr.dev/bounties/b4928cfe-4110-462f-a180-6d5673797902/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on #6833.",
      "published_date": "2022-03-28",
      "chain_len": 1,
      "project": "https://github.com/gogs/gogs",
      "commit_href": "https://github.com/gogs/gogs/commit/0fef3c9082269e9a4e817274942a5d7c50617284",
      "commit_sha": "0fef3c9082269e9a4e817274942a5d7c50617284",
      "patch": "SINGLE",
      "chain_ord": "['0fef3c9082269e9a4e817274942a5d7c50617284']",
      "before_first_fix_commit": "{'5aca56d2ddafad347dd670f4004ebf367c2c84ef'}",
      "last_fix_commit": "0fef3c9082269e9a4e817274942a5d7c50617284",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/13/2022, 14:18:56",
      "message": "repo_editor: check upload `TreePath` and file name (#6838)",
      "author": "Joe Chen",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 4, 'total': 17}",
      "files": "{'internal/db/repo_editor.go': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/gogs/gogs/raw/0fef3c9082269e9a4e817274942a5d7c50617284/internal%2Fdb%2Frepo_editor.go', 'patch': '@@ -16,16 +16,18 @@ import (\\n \\t\"strings\"\\n \\t\"time\"\\n \\n+\\t\"github.com/pkg/errors\"\\n \\tgouuid \"github.com/satori/go.uuid\"\\n \\t\"github.com/unknwon/com\"\\n \\n \\t\"github.com/gogs/git-module\"\\n \\n \\t\"gogs.io/gogs/internal/conf\"\\n \\t\"gogs.io/gogs/internal/cryptoutil\"\\n-\\t\"gogs.io/gogs/internal/db/errors\"\\n+\\tdberrors \"gogs.io/gogs/internal/db/errors\"\\n \\t\"gogs.io/gogs/internal/gitutil\"\\n \\t\"gogs.io/gogs/internal/osutil\"\\n+\\t\"gogs.io/gogs/internal/pathutil\"\\n \\t\"gogs.io/gogs/internal/process\"\\n \\t\"gogs.io/gogs/internal/tool\"\\n )\\n@@ -134,7 +136,7 @@ func (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (\\n \\tif opts.OldBranch != opts.NewBranch {\\n \\t\\t// Directly return error if new branch already exists in the server\\n \\t\\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\\n-\\t\\t\\treturn errors.BranchAlreadyExists{Name: opts.NewBranch}\\n+\\t\\t\\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\\n \\t\\t}\\n \\n \\t\\t// Otherwise, delete branch from local copy in case out of sync\\n@@ -449,11 +451,16 @@ func isRepositoryGitPath(path string) bool {\\n \\treturn strings.HasSuffix(path, \".git\") || strings.Contains(path, \".git\"+string(os.PathSeparator))\\n }\\n \\n-func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) (err error) {\\n+func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\\n \\tif len(opts.Files) == 0 {\\n \\t\\treturn nil\\n \\t}\\n \\n+\\t// Prevent uploading files into the \".git\" directory\\n+\\tif isRepositoryGitPath(opts.TreePath) {\\n+\\t\\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\\n+\\t}\\n+\\n \\tuploads, err := GetUploadsByUUIDs(opts.Files)\\n \\tif err != nil {\\n \\t\\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\\n@@ -487,7 +494,9 @@ func (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions)\\n \\t\\t\\tcontinue\\n \\t\\t}\\n \\n-\\t\\t// Prevent copying files into .git directory, see https://gogs.io/gogs/issues/5558.\\n+\\t\\tupload.Name = pathutil.Clean(upload.Name)\\n+\\n+\\t\\t// Prevent uploading files into the \".git\" directory\\n \\t\\tif isRepositoryGitPath(upload.Name) {\\n \\t\\t\\tcontinue\\n \\t\\t}'}}",
      "message_norm": "repo_editor: check upload `treepath` and file name (#6838)",
      "language": "en",
      "entities": "[('#6838', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['internal/db/repo_editor.go'])",
      "num_files": 1.0
    },
    {
      "index": 2124,
      "vuln_id": "GHSA-hrmm-f4j8-8vxc",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https://github.com/chakra-core/ChakraCore/commit/a9ab1aae31078e80593b9227db11d316c2239ef3'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0912, CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0927, CVE-2019-0933, CVE-2019-0937.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/a9ab1aae31078e80593b9227db11d316c2239ef3",
      "commit_sha": "a9ab1aae31078e80593b9227db11d316c2239ef3",
      "patch": "MULTI",
      "chain_ord": "['a9ab1aae31078e80593b9227db11d316c2239ef3', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
      "before_first_fix_commit": "{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
      "last_fix_commit": "d797e3f00e34c12c8c0ae52f56344325439dccd7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/12/2019, 23:15:50",
      "message": "[CVE-2019-0922] Type confusion in Edge - Individual",
      "author": "Meghana Gupta",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 1, 'total': 9}",
      "files": "{'lib/Backend/GlobOptArrays.cpp': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/a9ab1aae31078e80593b9227db11d316c2239ef3/lib%2FBackend%2FGlobOptArrays.cpp', 'patch': '@@ -1736,7 +1736,14 @@ void GlobOpt::ArraySrcOpt::Optimize()\\n     {\\n         if (newBaseValueType != baseValueType)\\n         {\\n-            UpdateValue(nullptr, nullptr, nullptr);\\n+            if (globOpt->IsSafeToTransferInPrePass(baseOpnd, baseValue))\\n+            {\\n+                UpdateValue(nullptr, nullptr, nullptr);\\n+            }\\n+            else if (globOpt->IsOperationThatLikelyKillsJsArraysWithNoMissingValues(instr) && baseValueInfo->HasNoMissingValues())\\n+            {\\n+                globOpt->ChangeValueType(nullptr, baseValue, baseValueInfo->Type().SetHasNoMissingValues(false), true);\\n+            }\\n         }\\n \\n         // For javascript arrays and objects with javascript arrays:'}}",
      "message_norm": "[cve-2019-0922] type confusion in edge - individual",
      "language": "en",
      "entities": "[('cve-2019-0922', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Backend/GlobOptArrays.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 3050,
      "vuln_id": "GHSA-v52p-hfjf-wg88",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite's implementation of `SpaceToBatchNd` ### Impact\nThe implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8/tensorflow/lite/kernels/space_to_batch_nd.cc#L82-L83):\n\n```cc\nTF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\noutput_size->data[dim + 1] = final_dim_size / block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708",
      "commit_sha": "6d36ba65577006affb272335b7c1abd829010708",
      "patch": "SINGLE",
      "chain_ord": "['6d36ba65577006affb272335b7c1abd829010708']",
      "before_first_fix_commit": "{'412c7d9bb8f8a762c5b266c9e73bfa165f29aac8'}",
      "last_fix_commit": "6d36ba65577006affb272335b7c1abd829010708",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 21:22:30",
      "message": "Prevent division by 0\n\nPiperOrigin-RevId: 370984990\nChange-Id: Ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/lite/kernels/space_to_batch_nd.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/6d36ba65577006affb272335b7c1abd829010708/tensorflow%2Flite%2Fkernels%2Fspace_to_batch_nd.cc', 'patch': '@@ -79,6 +79,7 @@ TfLiteStatus ResizeOutputTensor(TfLiteContext* context,\\n   for (int dim = 0; dim < spatial_dims_num; ++dim) {\\n     int final_dim_size = (input_size->data[dim + 1] + paddings_data[dim * 2] +\\n                           paddings_data[dim * 2 + 1]);\\n+    TF_LITE_ENSURE(context, block_shape[dim] != 0);\\n     TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\\n     output_size->data[dim + 1] = final_dim_size / block_shape[dim];\\n     output_batch_size *= block_shape[dim];'}}",
      "message_norm": "prevent division by 0\n\npiperorigin-revid: 370984990\nchange-id: ib324955bbeb1cbd97c82fd5d61a00a2697c9a2de",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370984990', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/space_to_batch_nd.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1907,
      "vuln_id": "GHSA-gp67-c7j2-2qg2",
      "cwe_id": "{'CWE-532', 'CWE-319'}",
      "score": 6.5,
      "chain": "{'https://github.com/jenkinsci/mask-passwords-plugin/commit/aadefdbf319954cf0c5acbe032637e1c0a924f37'}",
      "dataset": "osv",
      "summary": "Insertion of Sensitive Information into Log File in Jenkins Mask Passwords Plugin Jenkins Mask Passwords Plugin 2.12.0 and earlier transmits globally configured passwords in plain text as part of the configuration form, potentially resulting in their exposure.",
      "published_date": "2022-05-24",
      "chain_len": 1,
      "project": "https://github.com/jenkinsci/mask-passwords-plugin",
      "commit_href": "https://github.com/jenkinsci/mask-passwords-plugin/commit/aadefdbf319954cf0c5acbe032637e1c0a924f37",
      "commit_sha": "aadefdbf319954cf0c5acbe032637e1c0a924f37",
      "patch": "SINGLE",
      "chain_ord": "['aadefdbf319954cf0c5acbe032637e1c0a924f37']",
      "before_first_fix_commit": "{'3440b0aa5d2553889245327a9d37a006b4b17c3f'}",
      "last_fix_commit": "aadefdbf319954cf0c5acbe032637e1c0a924f37",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/28/2020, 02:43:19",
      "message": "[SECURITY-157] Fix global mask passwords config\n\nSince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nThis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nSee also:\n\n- [SECURITY-157][SECURITY-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https://jenkins.io/security/advisory/2019-08-07/#SECURITY-157\n[SECURITY-157]: https://issues.jenkins-ci.org/browse/SECURITY-157",
      "author": "Sam Gleske",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/main/resources/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsBuildWrapper/global.jelly': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/mask-passwords-plugin/raw/aadefdbf319954cf0c5acbe032637e1c0a924f37/src%2Fmain%2Fresources%2Fcom%2Fmichelin%2Fcio%2Fhudson%2Fplugins%2Fmaskpasswords%2FMaskPasswordsBuildWrapper%2Fglobal.jelly', 'patch': '@@ -51,7 +51,7 @@\\n                         </td>\\n                         <td width=\"10%\" align=\"right\">${%Password}</td>\\n                         <td width=\"30%\">\\n-                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.password?globalVarPasswordPair.password:\\'\\'}\"/>\\n+                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.passwordAsSecret?globalVarPasswordPair.passwordAsSecret.encryptedValue:\\'\\'}\"/>\\n                         </td>\\n                         <td width=\"20%\" align=\"right\"><f:repeatableDeleteButton/></td>\\n                     </tr>'}}",
      "message_norm": "[security-157] fix global mask passwords config\n\nsince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nthis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nsee also:\n\n- [security-157][security-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https://jenkins.io/security/advisory/2019-08-07/#security-157\n[security-157]: https://issues.jenkins-ci.org/browse/security-157",
      "language": "en",
      "entities": "[('security-157', 'SECWORD', ''), ('fix', 'ACTION', ''), ('passwords', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('password', 'SECWORD', ''), ('password', 'SECWORD', ''), ('security-157][security-157', 'SECWORD', ''), ('security', 'SECWORD', ''), ('https://jenkins.io/security/advisory/2019-08-07/#security-157', 'SECWORD', ''), ('security-157', 'SECWORD', ''), ('https://issues.jenkins-ci.org/browse/security-157', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/resources/com/michelin/cio/hudson/plugins/maskpasswords/MaskPasswordsBuildWrapper/global.jelly'])",
      "num_files": 1.0
    },
    {
      "index": 1865,
      "vuln_id": "GHSA-gf2j-f278-xh4v",
      "cwe_id": "{'CWE-369'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite ### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [`BiasAndClamp` implementation](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/internal/common.h#L75):\n\n```cc\ninline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,\n                         const float* bias_data, int array_size,\n                         float* array_data) {\n  // ...\n  TFLITE_DCHECK_EQ((array_size % bias_size), 0);\n  // ...\n} \n```\n  \nThere is no check that the `bias_size` is non zero.\n  \n### Patches\nWe have patched the issue in GitHub commit [8c6f391a2282684a25cbfec7687bd5d35261a209](https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209",
      "commit_sha": "8c6f391a2282684a25cbfec7687bd5d35261a209",
      "patch": "SINGLE",
      "chain_ord": "['8c6f391a2282684a25cbfec7687bd5d35261a209']",
      "before_first_fix_commit": "{'c8dafc9f9ae6658d922e443e59e0f553167c990b'}",
      "last_fix_commit": "8c6f391a2282684a25cbfec7687bd5d35261a209",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/14/2021, 21:40:56",
      "message": "[lite] Add check for bias_size is zero to avoid division by zero. This shouldn't happen for properly converted models. Just safety check\n\nPiperOrigin-RevId: 416383645\nChange-Id: If8e508bf696ae8ecfb927e69c139a8ccf7fe60cb",
      "author": "Karim Nosir",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/lite/kernels/internal/common.h': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/8c6f391a2282684a25cbfec7687bd5d35261a209/tensorflow%2Flite%2Fkernels%2Finternal%2Fcommon.h', 'patch': '@@ -75,6 +75,7 @@ float ActivationFunction(float x) {\\n inline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,\\n                          const float* bias_data, int array_size,\\n                          float* array_data) {\\n+  if (bias_size == 0) return;\\n   // Note: see b/132215220: in May 2019 we thought it would be OK to replace\\n   // this with the Eigen one-liner:\\n   //   return (array.colwise() + bias).cwiseMin(clamp_max).cwiseMin(clamp_max).'}}",
      "message_norm": "[lite] add check for bias_size is zero to avoid division by zero. this shouldn't happen for properly converted models. just safety check\n\npiperorigin-revid: 416383645\nchange-id: if8e508bf696ae8ecfb927e69c139a8ccf7fe60cb",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('safety check', 'SECWORD', ''), ('416383645', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/internal/common.h'])",
      "num_files": 1.0
    },
    {
      "index": 1942,
      "vuln_id": "GHSA-gvmf-wcx6-p974",
      "cwe_id": "{'CWE-89'}",
      "score": 8.1,
      "chain": "{'https://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549'}",
      "dataset": "osv",
      "summary": "Improper quoting of columns when using setOrderBy() or setGroupBy() on listing classes in Pimcore ### Impact\nPimcore offers developers listing classes to make querying data easier. This listing classes also allow to order or group the results based on one or more columns which should be quoted by default. \nThe actual issue is that quoting is not done properly in both cases, so there's the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and  so relies on the auto-quoting being done by the listing classes. \n\n##### Example: \n```php\n// request url: https://example.com/foo?groupBy=o_id`; SELECT SLEEP(20);--\n\n$list = new DataObject\\Car\\Listing();\n$list->setOrderKey($request->get('orderBy'));\n$list->setGroupBy($request->get('groupBy'));\n$list->load();\n```\n\n### Patches\nUpgrade to >= 10.4.4 or apply the following patch manually: \nhttps://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### Workarounds\nApply this patch manually: \nhttps://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### References\nhttps://github.com/pimcore/pimcore/pull/12444",
      "published_date": "2022-06-22",
      "chain_len": 1,
      "project": "https://github.com/pimcore/pimcore",
      "commit_href": "https://github.com/pimcore/pimcore/commit/21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "commit_sha": "21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "patch": "SINGLE",
      "chain_ord": "['21559c6bf0e4e828d33ff7af6e88caecb5ac6549']",
      "before_first_fix_commit": "{'4c66ac7305ee0a5027ade88020d811761555148b'}",
      "last_fix_commit": "21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/20/2022, 13:37:31",
      "message": "[Security] SQL Injection in Data Hub GraphQL (#12444)\n\n* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)\r\n\r\n* Update lib/Model/Listing/AbstractListing.php\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\n\r\n* Update lib/Model/Listing/AbstractListing.php\r\n\r\nCo-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\nCo-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>",
      "author": "mcop1",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 3, 'total': 19}",
      "files": "{'lib/Model/Listing/AbstractListing.php': {'additions': 16, 'deletions': 3, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/pimcore/pimcore/raw/21559c6bf0e4e828d33ff7af6e88caecb5ac6549/lib%2FModel%2FListing%2FAbstractListing.php', 'patch': '@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)\\n                 if ($quote === false) {\\n                     $this->orderKey[] = $o;\\n                 } elseif ($this->isValidOrderKey($o)) {\\n-                    $this->orderKey[] = \\'`\\' . $o . \\'`\\';\\n+                    $this->orderKey[] = $this->quoteIdentifier($o);\\n                 }\\n             }\\n         }\\n@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)\\n         if ($groupBy) {\\n             $this->groupBy = $groupBy;\\n \\n-            if ($qoute && strpos($groupBy, \\'`\\') !== 0) {\\n-                $this->groupBy = \\'`\\' . $this->groupBy . \\'`\\';\\n+          if ($qoute) {\\n+                $quotedParts = [];\\n+                $parts = explode(\",\", trim($groupBy, \\'`\\'));\\n+                foreach($parts as $part) {\\n+                    $quotedParts[] = $this->quoteIdentifier(trim($part));\\n+                }\\n+\\n+                $this->groupBy = implode(\", \", $quotedParts);\\n             }\\n         }\\n \\n@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)\\n         return $this;\\n     }\\n \\n+    public function quoteIdentifier(string $value): string\\n+    {\\n+        $db = Db::get();\\n+\\n+        return $db->quoteIdentifier($value);\\n+    }\\n+\\n     /**\\n      * @param mixed $value\\n      * @param int|null $type'}}",
      "message_norm": "[security] sql injection in data hub graphql (#12444)\n\n* [security] sql injection in data hub graphql (abstractlisting)\r\n\r\n* update lib/model/listing/abstractlisting.php\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\n\r\n* update lib/model/listing/abstractlisting.php\r\n\r\nco-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\nco-authored-by: bernhard rusch <brusch@users.noreply.github.com>",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('#12444', 'ISSUE', ''), ('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Model/Listing/AbstractListing.php'])",
      "num_files": 1.0
    },
    {
      "index": 2534,
      "vuln_id": "GHSA-p885-prv3-m4xv",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/snipe/snipe-it/commit/f211c11034baf4281aa62e7b5e0347248d995ee9'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in snipe-it Stored Cross Site Scripting vulnerability in Item name parameter in GitHub repository snipe/snipe-it prior to v5.4.3. The vulnerability is capable of stolen the user Cookie.",
      "published_date": "2022-04-17",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/f211c11034baf4281aa62e7b5e0347248d995ee9",
      "commit_sha": "f211c11034baf4281aa62e7b5e0347248d995ee9",
      "patch": "SINGLE",
      "chain_ord": "['f211c11034baf4281aa62e7b5e0347248d995ee9']",
      "before_first_fix_commit": "{'698c7f4904f8fd843c5b9761053c9c68819ec288', '7479f5f12d73f73d9bc8c479651e0e5602ad1791'}",
      "last_fix_commit": "f211c11034baf4281aa62e7b5e0347248d995ee9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/15/2022, 11:25:56",
      "message": "Merge pull request #10942 from snipe/fixes/xss_user_requested\n\nFixes potential XSS vuln in user requestable results",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 5, 'total': 10}",
      "files": "{'app/Http/Controllers/Api/ProfileController.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/f211c11034baf4281aa62e7b5e0347248d995ee9/app%2FHttp%2FControllers%2FApi%2FProfileController.php', 'patch': \"@@ -30,11 +30,11 @@ public function requestedAssets()\\n             // Make sure the asset and request still exist\\n             if ($checkoutRequest && $checkoutRequest->itemRequested()) {\\n                 $results['rows'][] = [\\n-                    'image' => $checkoutRequest->itemRequested()->present()->getImageUrl(),\\n-                    'name' => $checkoutRequest->itemRequested()->present()->name(),\\n-                    'type' => $checkoutRequest->itemType(),\\n-                    'qty' => $checkoutRequest->quantity,\\n-                    'location' => ($checkoutRequest->location()) ? $checkoutRequest->location()->name : null,\\n+                    'image' => e($checkoutRequest->itemRequested()->present()->getImageUrl()),\\n+                    'name' => e($checkoutRequest->itemRequested()->present()->name()),\\n+                    'type' => e($checkoutRequest->itemType()),\\n+                    'qty' => (int) $checkoutRequest->quantity,\\n+                    'location' => ($checkoutRequest->location()) ? e($checkoutRequest->location()->name) : null,\\n                     'expected_checkin' => Helper::getFormattedDateObject($checkoutRequest->itemRequested()->expected_checkin, 'datetime'),\\n                     'request_date' => Helper::getFormattedDateObject($checkoutRequest->created_at, 'datetime'),\\n                 ];\"}}",
      "message_norm": "merge pull request #10942 from snipe/fixes/xss_user_requested\n\nfixes potential xss vuln in user requestable results",
      "language": "ca",
      "entities": "[('#10942', 'ISSUE', ''), ('xss_user_requested', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/Api/ProfileController.php'])",
      "num_files": 1.0
    },
    {
      "index": 695,
      "vuln_id": "GHSA-5rqg-jm4f-cqx7",
      "cwe_id": "{'CWE-835'}",
      "score": 0.0,
      "chain": "{'https://github.com/Marak/colors.js/commit/5d2d242f656103ac38086d6b26433a09f1c38c75', 'https://github.com/Marak/colors.js/commit/137c6dae3339e97f4bbc838c221803c363b0a9fd', 'https://github.com/Marak/colors.js/commit/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26'}",
      "dataset": "osv",
      "summary": "Infinite loop causing Denial of Service in colors colors is a library for including colored text in node.js consoles. Between 07 and 09 January 2022, colors versions 1.4.1, 1.4.2, and 1.4.44-liberty-2 were published including malicious code that caused a Denial of Service due to an infinite loop. Software dependent on these versions experienced the printing of randomized characters to console and an infinite loop resulting in unbound system resource consumption.\n\nUsers of colors relying on these specific versions should downgrade to version 1.4.0.",
      "published_date": "2022-01-10",
      "chain_len": 3,
      "project": "https://github.com/Marak/colors.js",
      "commit_href": "https://github.com/Marak/colors.js/commit/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
      "commit_sha": "6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
      "patch": "MULTI",
      "chain_ord": "['137c6dae3339e97f4bbc838c221803c363b0a9fd', '5d2d242f656103ac38086d6b26433a09f1c38c75', '6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26']",
      "before_first_fix_commit": "{'5d2d242f656103ac38086d6b26433a09f1c38c75'}",
      "last_fix_commit": "6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
      "chain_ord_pos": 3.0,
      "commit_datetime": "01/08/2022, 04:22:34",
      "message": "Bump to `v1.4.44-liberty-2`",
      "author": "Marak",
      "comments": "{'com_1': {'author': 'belauzas', 'datetime': '01/08/2022, 09:12:51', 'body': 'What is this? Why console is trashed with all this random shit?'}, 'com_2': {'author': 'legalsec', 'datetime': '01/08/2022, 13:20:11', 'body': '> \\r\\n\\r\\n@belauzas .... See here: https://news.ycombinator.com/item?id=25032105\\r\\nand here: https://github.com/Marak/colors.js/commit/074a0f8ed0c31c35d13d28632bd8a049ff136fb6\\r\\nMillions of downloads a week... not a penny to show for it.'}, 'com_3': {'author': 'atridadl', 'datetime': '01/09/2022, 21:53:33', 'body': 'What a child.'}, 'com_4': {'author': 'zmaktouf', 'datetime': '01/10/2022, 01:18:25', 'body': 'Everyone should contribute with $1 to the author. He will get the money he deserves.\\r\\nI am not using `colors.js`, but I will be happy to contribute'}, 'com_5': {'author': 'ImJustChew', 'datetime': '01/10/2022, 04:06:49', 'body': 'irresponsible, wasted my time.'}, 'com_6': {'author': 'add1609', 'datetime': '01/10/2022, 04:08:27', 'body': '@Marak you 100% deserve to get paid for your work. Please provide someway to send you money.'}, 'com_7': {'author': 'BARMPlus', 'datetime': '01/10/2022, 06:33:52', 'body': 'What really happened with Aaron Swartz?'}, 'com_8': {'author': 'connor-sarah', 'datetime': '01/10/2022, 06:35:44', 'body': 'freeloaders'}, 'com_9': {'author': 'dmitrykurmanov', 'datetime': '01/10/2022, 07:52:07', 'body': \"> Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n\\r\\nand let's pay to terrorists too because that is the same meaning I think\"}, 'com_10': {'author': 'ImJustChew', 'datetime': '01/10/2022, 08:25:47', 'body': \"Paying doesn't solve the problem. Wait till more developers expect people to pay for their open-source code forcefully and see how everything slowly reverts back to closed-source.\"}, 'com_11': {'author': 'piotrtomiak', 'datetime': '01/10/2022, 08:32:28', 'body': \"Just don't use MIT license, if you don't want some corporation to reuse your work and get money for it. Try some other alternatives, which will require consumer to open source their code as well, or a license without permission for commercial use. You can change license at any moment - if I recall that correctly Facebook did something like that with React. Pushing a broken version to NPM is simply wrong.\"}, 'com_12': {'author': 'Fried-Chicken', 'datetime': '01/10/2022, 10:03:13', 'body': 'What happened to `1.4.44-liberty-1`?'}, 'com_13': {'author': 'mirzap', 'datetime': '01/10/2022, 10:47:03', 'body': 'Why did you open source it if you want to get paid for it? Why did you use MIT license? Tantrum that you did does not help OSS developers. This is simply evil.'}, 'com_14': {'author': 'sergeych', 'datetime': '01/10/2022, 11:01:46', 'body': 'When one is publishing something as a free software the LICENSE is supplied which grants everybody a RIGHT to use your code without paying \"a penny\". Any sort of open source license does it one way or another. It protects users. This means, once something is published as free software, this version will remain free and usable to whoever have a copy even if the author changes ones mind to require a payment for it. So, any package or source repository as a _user_ of this free software retains a right to keep publishing it according to the open source license that was (if it was) supplied with original publication. That is why open source still uses licenses. We could not have free software if any author or the heirs could reclaim or make unusable the free software. What was once a gift to the society, should remain a gift. There the gift back is not fair at all, neither is requiring payment for a gift. Too bad, actually, that it is not crystal clear to anybody.'}, 'com_15': {'author': 'Nazehs', 'datetime': '01/10/2022, 12:29:51', 'body': \"at least he has made a name for himself at least... \ud83d\ude06 \ud83d\ude06 and some of us have used his code but we can't admit or say thanks to him... I am not advocating this but it's good we compensate ourselves sometimes to keep maintaining the source code because all of us value our time so do the authors too... $1 dollar will mean a lot to them and encourage them to work on the project... I believe once the author of Open source releases the codebase they have done all they could but if we will be expecting them to fix issues or add features while we are making our money out of it does it make sense at all? Many of us can't even open-source our code....\\r\\nShalom\"}, 'com_16': {'author': 'ddzy', 'datetime': '01/10/2022, 12:31:53', 'body': 'It wasted my whole day looking for the problem of garbled code'}, 'com_17': {'author': 'Nazehs', 'datetime': '01/10/2022, 12:52:25', 'body': '> \\r\\n\\r\\nyeah i know a lot of us will waste hours trying to figure out the issue you know'}, 'com_18': {'author': 'AAGene', 'datetime': '01/10/2022, 13:20:27', 'body': 'To those saying he should release under another license:\\r\\n\\r\\n![image](https://user-images.githubusercontent.com/48164468/148772692-0f4c911b-f277-44f4-8034-16c4b38b0e88.png)'}, 'com_19': {'author': 'ts-3156', 'datetime': '01/10/2022, 13:39:11', 'body': 'I just paid @Marak 100$. If you have a time to have a futile dispute, use that time to help people in need.'}, 'com_20': {'author': 'efriandika', 'datetime': '01/10/2022, 14:17:07', 'body': 'I am wondering if this is the same people?\\r\\nhttps://twitter.com/marak/status/1320465599319990272\\r\\nhttps://nypost.com/2020/09/16/resident-of-nyc-home-with-suspected-bomb-making-materials-charged/'}, 'com_21': {'author': 'timup', 'datetime': '01/10/2022, 14:20:51', 'body': '> I am wondering if this is the same people? https://twitter.com/marak/status/1320465599319990272 https://nypost.com/2020/09/16/resident-of-nyc-home-with-suspected-bomb-making-materials-charged/\\r\\n\\r\\nThat is an unfortunate coincidence.'}, 'com_22': {'author': 'zmaktouf', 'datetime': '01/10/2022, 14:31:46', 'body': \"> > Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n> \\r\\n> and let's pay to terrorists too because that is the same meaning I think\\r\\n\\r\\nWhat are you talking about? This is incomparable. \\r\\nThis is about helping someone from the community, our side, someone who might be in need, we don't know.\\r\\nToday it is him, maybe tomorrow it will be you.\"}, 'com_23': {'author': 'justblender', 'datetime': '01/10/2022, 14:37:11', 'body': '> I am wondering if this is the same people?\\r\\n> https://twitter.com/marak/status/1320465599319990272\\r\\n> https://nypost.com/2020/09/16/resident-of-nyc-home-with-suspected-bomb-making-materials-charged/\\r\\n\\r\\nYes, this is him.'}, 'com_24': {'author': 'degr', 'datetime': '01/10/2022, 14:47:19', 'body': 'post in epic thread'}, 'com_25': {'author': 'rpv-tomsk', 'datetime': '01/10/2022, 15:16:04', 'body': \"> It wasted my whole day looking for the problem of garbled code\\r\\n\\r\\nIt's just a time came to pay your bill for using this library.\\r\\nBefore that, you saved your time by using it.\"}, 'com_26': {'author': 'ademidun', 'datetime': '01/10/2022, 15:31:42', 'body': 'Open source software is a [public good](https://en.wikipedia.org/wiki/Public_good_(economics)). So the paradox which everyone asks themselves is \"if everyone can benefit from it for free why should I have to pay?\".\\r\\n\\r\\nBut conversely, if people are benefitting from something you\\'ve created then it\\'s only fair for the person who created this value to get some financial compensation commensurate to the value they\\'ve created.\\r\\n\\r\\nThe author of this package has chosen a method to get some compensation for their work that has resulted in a lose-lose situation where neither the author nor the users are happy.\\r\\n\\r\\nBut it doesn\\'t have to be this way.\\r\\n\\r\\nThe [Opensource guide](https://opensource.guide/) has some useful tips on [Getting Paid for Open Source Work](https://opensource.guide/getting-paid/). For people interested in web3 and crypto, [Gitcoin](https://gitcoin.co/) is platform where you can [get paid to work on open source software](https://gitcoin.co/grants/).\\r\\n\\r\\nHopefully, by becoming more informed on ways to make money from open source software we can avoid situations like this in the future and create a fairer system that works for everyone.'}, 'com_27': {'author': 'Veetaha', 'datetime': '01/10/2022, 15:50:23', 'body': 'Yo, you should consider rewriting it in Rust =)'}, 'com_28': {'author': 'G2G2G2G', 'datetime': '01/10/2022, 16:47:45', 'body': 'You are a hero, anyone who uses NPM deserves worse than this but at least you make them suffer.'}, 'com_29': {'author': 'Abion47', 'datetime': '01/10/2022, 17:07:04', 'body': \"This package hadn't been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n\\r\\nI'm not buying the moral high road, either. Fortune 500 companies have hundreds of developers and rigorous upgrade paths before any new production build sees the light of day, and this infantile infinite loop of zalgo text would get spotted immediately and fixed. Your little maneuver isn't going to cost them a single dime. All you're doing is being a pain in the ass for smaller companies and independent developers who don't have the luxury of time and resources to be able to put up these kinds of safeguards automatically.\\r\\n\\r\\nI'm fully on board with active contributors to the open-source community getting fair compensation, but this just screams trying to snag a quick and easy buck.\"}, 'com_30': {'author': 'rcollette', 'datetime': '01/10/2022, 17:23:05', 'body': 'If someone wants money for their time, either start a company or work for one.   This behavior is like a childish prank of putting a dollar on the sidewalk on a fishing line and pulling it away.'}, 'com_31': {'author': 'G2G2G2G', 'datetime': '01/10/2022, 17:32:27', 'body': '> If someone wants money for their time, either start a company or work for one. This behavior is like a childish prank of putting a dollar on the sidewalk on a fishing line and pulling it away.\\r\\n\\r\\n@rcollette  AND YOU FELL FOR IT LMAO\\r\\n\\r\\n\\r\\n\\r\\n\u2591\u2591\u2591\u2591\u2588\u2592\u2592\u2584\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2584\\r\\n\u2591\u2591\u2584\u2580\u2592\u2592\u2592\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2588\\r\\n\u2591\u2588\u2592\u2592\u2592\u2592\u2590\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u258c\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2590\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u258c\u2592\u2588\\r\\n\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2592\u2592\u2588\u2592\u2591\u2584\u2592\u2584\u2588\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2592\u2592\u2592\u2588\\r\\n\u2592\u2592\u2590\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2591\u2592\u2592\u2580\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\\r\\n\u2592\u258c\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2592\u2591\u2592\u2584\u2588\u2584\u2588\u2584\u2592\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\\r\\n\u2592\u258c\u2592\u2592\u2592\u2592\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2592\u2592\u2588\u258c\u258c\u258c\u258c\u258c\u2588\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\\r\\n\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2592\u2592\u2580\u2588\u2588\u2588\u2580\u2592\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\\r\\n\u2580\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\\r\\n\u2580\u2584\u2592\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2584\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\\r\\n\u2592\u2592\u2580\u2584\u2592\u2580\u2584\u2580\u2580\u2580\u2584\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2591\u2591\u2591\u2591\u2580\u2580\u2580\u2580\u2580\u2580\\r\\n\u2592\u2592\u2592\u2592\u2580\u2584\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\\r\\n\u2591\u2584\u2584\u2584\u2591\u2591\u2584\u2591\u2591\u2584\u2591\u2584\u2591\u2591\u2584\u2591\u2591\u2584\u2591\u2591\u2591\u2591\u2584\u2584\u2591\u2584\u2584\u2591\u2591\u2591\u2584\u2584\u2584\u2591\u2591\u2591\u2584\u2584\u2584\\r\\n\u2588\u2584\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2588\u2584\u2584\u2584\u2588\u2591\u2588\u2591\u2591\u2591\u2588\\r\\n\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2588\\r\\n\u2580\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2580\u2591\u2580\u2584\u2584\u2584\u2580'}, 'com_32': {'author': 'rcollette', 'datetime': '01/10/2022, 17:38:12', 'body': '@G2G2G2G -Nope.  I pin package versions.\\r\\nhttps://github.com/winstonjs/winston/issues/1995#event-5867271529'}, 'com_33': {'author': 'TechStudent10', 'datetime': '01/10/2022, 20:12:30', 'body': '> > I am wondering if this is the same people? https://twitter.com/marak/status/1320465599319990272 https://nypost.com/2020/09/16/resident-of-nyc-home-with-suspected-bomb-making-materials-charged/\\r\\n> \\r\\n> That is an unfortunate coincidence.\\r\\n\\r\\noh crap'}, 'com_34': {'author': 'skyzyx', 'datetime': '01/10/2022, 20:53:51', 'body': 'Have we learned nothing from left-pad?\\r\\n\\r\\n1. Use a package cache.\\r\\n2. Pin your versions.'}, 'com_35': {'author': 'zmaktouf', 'datetime': '01/10/2022, 22:24:38', 'body': \"> Yo, you should consider rewriting it in Rust =)\\r\\n\\r\\nLet's do it :D https://github.com/zmaktouf/colors.rs\"}, 'com_36': {'author': 'barnaba', 'datetime': '01/11/2022, 02:07:06', 'body': \"> This package hadn't been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n\\r\\nBecause https://web.archive.org/web/20210628030444/https://marak.com/blog/2021-04-25-monetizing-open-source-is-problematic\\r\\n\\r\\nTLDR the dev tried to monetize faker via normal means available to open source projects, but corporations don't play nice.\\r\\n\\r\\nMore important question is: This package hadn't been updated since 2019 before this. Why not pin it? Are you expecting new colors to be invented?\"}, 'com_37': {'author': 'yvesll', 'datetime': '01/11/2022, 05:41:43', 'body': 'Respect'}, 'com_38': {'author': 'Chew', 'datetime': '01/11/2022, 06:12:28', 'body': '> What happened to `1.4.44-liberty-1`?\\r\\n\\r\\nI was hungry, my bad'}, 'com_39': {'author': 'prasannamestha', 'datetime': '01/11/2022, 07:36:56', 'body': 'Why no sell a commercial license to this library via [privjs.com](https://privjs.com) ?'}, 'com_40': {'author': 'artsiom-aliakseichyk', 'datetime': '01/11/2022, 08:40:07', 'body': '> \u041c\u044b \u043f\u043e\u043d\u044f\u043b\u0438 \u043e\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u043d \u043c\u0443\u0434\u0430\u043a \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438 \u043e\u0442\u043a\u0430\u0442\u0438\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u043b\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0443 \u043e\u0442 \u043c\u0435\u043d\u0435\u0435 \u043e\u0442\u0431\u0438\u0442\u044b\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043b\u0430\u0439\u043a \u0438\u043b\u0438 \u043d\u0435 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b\u0438 \u0437\u0430 \u043b\u0438\u0431\u0443 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u0432\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435, \u043d\u0430 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435, \u043f\u043e\u0434 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439, \u0442\u043e \u0443 \u043d\u0435\u0433\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0431\u0430\u0448\u043a\u043e\u0439\\r\\n\\r\\nI understand that it is hard to read licenses nowadays, so I will copypaste one of the interesting part\\r\\n\\r\\n\\'THE SOFTWARE IS PROVIDED **\"AS IS\"**, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\r\\nTHE SOFTWARE.\\''}, 'com_41': {'author': 'kounelios13', 'datetime': '01/11/2022, 10:03:31', 'body': '> You are a hero, anyone who uses NPM deserves worse than this but at least you make them suffer.\\r\\n\\r\\nWhy anyone who uses NPM deserves worse than that? Care to explain ?'}, 'com_42': {'author': 'arinzejustin', 'datetime': '01/11/2022, 14:16:02', 'body': 'I spend through out yesterday and today looking for the issue'}, 'com_43': {'author': 'Abion47', 'datetime': '01/11/2022, 14:46:26', 'body': '> > This package hadn\\'t been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n> \\r\\n> Because https://web.archive.org/web/20210628030444/https://marak.com/blog/2021-04-25-monetizing-open-source-is-problematic\\r\\n> \\r\\n> TLDR the dev tried to monetize faker via normal means available to open source projects, but corporations don\\'t play nice.\\r\\n> \\r\\n> More important question is: This package hadn\\'t been updated since 2019 before this. Why not pin it? Are you expecting new colors to be invented?\\r\\n\\r\\nThat article is referring to Faker where I was referring to Colors. Since you bring it up, however, the amount of recent work on Faker is even less - a bit of work 10-12 months ago, and before that, complete radio silence since 5 years ago. It sucks that the author\\'s attempts to sell faker cloud were met with getting ghosted, but what did he expect? He released a paid service that did little more than the existing package already did for free. He was competing against himself, and he was doing it poorly. And sure, maybe it was poor form on Retool\\'s part to copy FakerCloud using Faker, but at the same time, they were effectively paying him $500 a month which they were under no legal obligation to pay. The only thing his tantrum could\\'ve possibly accomplished was that they would continue to do exactly what they were doing but they would do it without paying him.\\r\\n\\r\\nAn interesting note on that last part, though. I don\\'t know about you, but getting two grand for work I did four years ago seems like a good deal. Not only this, but they were his _second_ biggest donors, meaning that that was less than half of the donation amount he had made from the Faker package alone as of that article\\'s publication date. And now he\\'s threatening to not do any more work when he already hasn\\'t done any work on the Colors or Faker packages in nearly a year and no significant work in nearly three, and he\\'s demanding payment for packages he released under the MIT license years ago _and which he has already received at least $4000 for_. Not to mention I can only imagine how much money he has received from proverbial white knights ever since this whole drama began. (Someone in this thread alone donated $100.)\\r\\n\\r\\nMy takeaway from that article is that Marak bit the hand that fed him. It sounds like he already burned the Retool bridge which was a poor move considering they were his second-biggest donors, and I doubt anyone else who was a repeat donor is likely to continue. He proved nothing with this little stunt - no large company will be hurt by this despite his claims, and everyone else just has to pin their versions and wait until someone else forks his code to continue development and maintenance (not that much maintenance needs to be done as the packages seem pretty stable).\\r\\n\\r\\nHe could\\'ve pinned it. He could\\'ve archived it. He could\\'ve just posted a message saying \"I can\\'t afford to maintain this anymore so it will just sit here in its current state until someone else offers to take ownership\". He could\\'ve done a lot of things. But instead, he chose the nuclear option of holding the package hostage (as ineffective as it is) while causing grief to other developers like him just trying to do their jobs. This doesn\\'t strike me as a man looking to get fair recompense for services rendered. This strikes me as a man desperate for money and looking to get it in any way he can by pulling on some heartstrings. Well, congrats, Marak. Mission accomplished. You may have tanked your career and your standing in the open-source community in the process, but I hope it was worth it in the end.'}, 'com_44': {'author': 'Awilum', 'datetime': '01/11/2022, 17:11:07', 'body': '> What is this? Why console is trashed with all this random shit?\\r\\n\\r\\nThis is Javascript World!'}, 'com_45': {'author': 'zunino', 'datetime': '01/11/2022, 22:26:40', 'body': \"If you were looking for sympathy, you've really messed up. Your attitude is not only immature, but irresponsible and very unprofessional. There are other ways one can turn an open-source project into a business, but it's not by acting out like this. You don't belong in OSS.\"}, 'com_46': {'author': 'rpv-tomsk', 'datetime': '01/12/2022, 04:43:33', 'body': \"@zunino \\r\\n\\r\\n> If you were looking for sympathy, you've really messed up. \\r\\n\\r\\nAgreed. \\r\\nBut:\\r\\n\\r\\n> There are other ways one can turn an open-source project into a business...\\r\\n\\r\\nYou have many OSS project already converted to business?\\r\\nCan you show your results, our you can only speak slogans and loud words?\\r\\n\\r\\nIn my view, there is two kinds of people: who can create software and who can create business. \\r\\nAnd not each developer belongs to both sets simultaneously, these are exceptions, not typical case (and we see this here).\"}, 'com_47': {'author': 'ItzSwirlz', 'datetime': '01/12/2022, 16:21:32', 'body': 'man cant change his license to stop it from being used'}, 'com_48': {'author': 'kctdfh', 'datetime': '01/13/2022, 16:33:36', 'body': \"> > You have many OSS project already converted to business?\\r\\n> \\r\\n> Not so many, but there are a few - rather big - projects that do converted and are doing well now.\\r\\n> \\r\\n> > Can you show your results,\\r\\n> \\r\\n> Discourse, GitLab, NodeBB, Docker. Just from back of my head; sure there are more.\\r\\n\\r\\nAll of the examples you mention sell convenience, not software. \\r\\n\\r\\nFor some software solutions, the user may want to have the luxuries of open-source without having to fully commit full-time resources to the management and maintenance of those people/infrastructures. Marak could have never been RedHat because Faker/Colors are set-it-and-forget-it libraries. For these libraries, most of the work happens prior to release and the user just plugs it into their code. There's near-zero opportunities to monetize them by offering convenience. Mattermost for instance has a paid version that's hosted and has extra features but what can Faker/Colors do? Invent exclusive colors? Implement SSO? Generate entire movie scripts?\\r\\n\\r\\nMaybe he could have started an API for no-code tools but then again, no-code devs are used to extremely generous free-tiers on APIs so it probably won't cover the cost of running a reliable infrastructure to handle usage bursts, etc.\"}, 'com_49': {'author': 'zunino', 'datetime': '01/13/2022, 19:20:25', 'body': \"@kctdfh I see the distinction you are making but, really, nothing justifies the author's rogue actions. I'm sure he would be in a better position if, say, he had decided to start a new, commercial endeavour, having the success of his open-source projects under his wing. The popularity of open-source work can shine on a CV or business proposal.\"}, 'com_50': {'author': 'kctdfh', 'datetime': '01/13/2022, 20:05:06', 'body': '@cronlabspl ?? Have not seen a start-up call themselves \"fully-managed [insert open-source tech]\"?? MongoDB Atlas is a money machine because people like using MongoDB without having to fine-tune their own provisioning, scaling, sharding, replication, security, or correctness. Who can afford reading MongoDB documentations, risk making a rookie mistake, spend hours every week troubleshooting, and basically manage people who manage the code that manages their software? They\\'ll just pay MongoDB to abstract the boring stuff away. It\\'s buying convenience.\\r\\n\\r\\n@zunino Yeah for sure not the best way to handle it and I don\\'t agree with it but I somewhat understand it. I see it like this (conjecture):\\r\\n- Dev isn\\'t doing well and feels unappreciated / feels they are being wronged - maybe even for an unrelated reason.\\r\\n- NPM\\'s weekly download stats says they\\'re appreciated/valued/successful but that number isn\\'t amounting to anything in their day-to-day. They know that this situation isn\\'t unique to them in the FOSS community.\\r\\n- Nuking their popular packages is certainly a good way to remind people that they depend on devs they\\'ve never heard of who may not be doing well. Not an effective form of protest because it ruins their reputation with zero sustained effect but it did rejuvenate the conversation.\\r\\n\\r\\nI wish him luck and hope he\\'s doing well'}, 'com_51': {'author': 'quenbyako', 'datetime': '01/13/2022, 21:08:59', 'body': '@glebfeklistov \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0437\u043e\u0432\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0430 \u0430\u0441\u0445\u043e\u043b\u043e\u043c, \u0437\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430 \u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f, \u0445\u043e\u0442\u044f \u043e\u043d \u0441\u0434\u0435\u043b\u0430\u043b \u043b\u0438\u0431\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043d\u043e\u0434\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438.\\r\\n\\r\\n\u0413\u043b\u0435\u0431, \u043a\u0440\u0430\u0441\u0430\u0432\u0447\u0438\u043a, \u043b\u0443\u0447\u0448\u0438\u0439 \ud83d\udc4d\ud83d\udcaa \u0422\u0430\u043a \u0438\u0445, \u0434\u043e\u043b\u0431\u043e\u0435\u0431\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044f\u0442 \u0432 \u043e\u043f\u0435\u043d\u0441\u0443\u0440\u0441 \u0437\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0430\u043a, \u043f\u043e\u0448\u043b\u0438 \u043e\u043d\u0438, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u043c\u0443\u0436\u0438\u043a\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044f\u0442 \u0440\u0430\u0437 \u0432 \u043f\u043e\u043b\u0433\u043e\u0434\u0430 \u0438 \u043e\u0431\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043c\u0443\u0434\u0430\u043a\u0430\u043c\u0438. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e! \ud83d\udc46'}, 'com_52': {'author': 'Lun3th', 'datetime': '01/13/2022, 23:42:40', 'body': \"So basically... he's own the code so he can do this thing. If you are a big company please support open source projects with MONEY. And also check a code change before you pull it blatantly. :D \\r\\n\\r\\nBtw. If I find his paypal I will donate him with 2-3 dollars because that was a big move :D\"}, 'com_53': {'author': 'hello-smile6', 'datetime': '01/14/2022, 04:25:40', 'body': \"If anyone is in charge of a large corporation's servers and wants to make a splash, just hit production servers with https://gist.github.com/hello-smile6/fa92b539fce2339440bdd75e087cae8b\"}, 'com_54': {'author': 'okyanusoz', 'datetime': '01/14/2022, 15:15:10', 'body': 'stop'}, 'com_55': {'author': 'sech1p', 'datetime': '01/15/2022, 11:20:45', 'body': 'What really happened with Aaron Swartz?'}, 'com_56': {'author': 'sech1p', 'datetime': '01/15/2022, 11:32:09', 'body': '> > What really happened with Aaron Swartz?\\r\\n> \\r\\n> No idea. [this](https://en.wikipedia.org/wiki/Aaron_Swartz) may help\\r\\n\\r\\ntwierdzenie Pitagorasa\\r\\nnie wierz w samob\u00f3jstwo Swartza'}, 'com_57': {'author': 'sech1p', 'datetime': '01/15/2022, 11:42:40', 'body': \"> > nie wierz w samob\u00f3jstwo Swartza\\r\\n> \\r\\n> Nigdzie nie napisa\u0142em \u017ce wierz\u0119 w to. Poda\u0142em tylko linka do artyku\u0142u.\\r\\n\\r\\nchill, chill, I just parafrased a one sentence from polish network, i don't judge whether you believe it or not\\r\\n\\r\\nbtw i read this article already\"}, 'com_58': {'author': 'xpswilllive', 'datetime': '01/18/2022, 06:17:41', 'body': 'u are fine'}, 'com_59': {'author': 'dmitrykurmanov', 'datetime': '01/19/2022, 10:25:52', 'body': \"> > > Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n> > \\r\\n> > \\r\\n> > and let's pay to terrorists too because that is the same meaning I think\\r\\n> \\r\\n> What are you talking about? This is incomparable. This is about helping someone from the community, our side, someone who might be in need, we don't know. Today it is him, maybe tomorrow it will be you.\\r\\n\\r\\nhelp him because he is asking for help is ok for me. I don't hate him personally or anything like that. But I think that it should be asking not demanding/terrorizing. I wish him to be happy. I don't judge him. I judge his act and the situation. And it is a huge difference for me\"}, 'com_60': {'author': 'teror4uks', 'datetime': '01/21/2022, 13:40:37', 'body': '@quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.'}, 'com_61': {'author': 'okyanusoz', 'datetime': '01/22/2022, 06:22:30', 'body': '@cronlabspl Marak should stop this money disaster, not this discussion'}, 'com_62': {'author': 'hello-smile6', 'datetime': '01/22/2022, 06:24:15', 'body': '> @cronlabspl Marak should stop this money disaster, not this discussion\\r\\n\\r\\nHere!\\r\\n![img](https://assets.scratch.mit.edu/045e55e80b60ddd40d5a1a2a1bb3403a.png)'}, 'com_63': {'author': 'WhiteNervosa', 'datetime': '01/23/2022, 07:38:27', 'body': \"Four months ago, Marak [dropped over $10,000 on NFTs](https://opensea.io/Marak?search[chains][0]=ETHEREUM&search[eventTypes][0]=AUCTION_SUCCESSFUL&tab=activity). No matter your opinion of NFTs, if you have that amount of money as disposable income then you're doing alright.\\r\\n\\r\\nHe could have just archived this if it was the feeling that he was giving labor for nothing in return or even tried the [sponsor feature](https://github.com/sponsors), earlier. Earlier because they [currently have 47 sponsors](https://github.com/sponsors/Marak#sponsors).\\r\\n\\r\\nThis is not about money. Worse even, what do those 47 people now think about **sponsoring to support others?**\\r\\n\\r\\nShort sighted, misguided, and harmful. _Bravo_ \ud83c\udf89\"}, 'com_64': {'author': 'G2G2G2G', 'datetime': '01/23/2022, 09:33:54', 'body': '@hello-smile6 what does \"syeal your data\" mean?'}, 'com_65': {'author': 'nacknime-official', 'datetime': '01/23/2022, 09:46:25', 'body': '@teror4uks \u0430 \u0442\u0430\u043c \u0447\u0442\u043e-\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e? \u043f\u0443\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0435\u0442 \u0441 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u043c \u0447\u0442\u043e \u0445\u043e\u0447\u0435\u0442, \u043e\u043d \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d'}, 'com_66': {'author': 'teror4uks', 'datetime': '01/23/2022, 13:49:51', 'body': '@nacknime-official  \u0435\u0449\u0451 \u043a\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043a\u0440\u0430\u0448\u0438\u0442\u0441\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0435\u0433\u043e \u0437\u0430\u0440\u0435\u043b\u0438\u0437\u0438\u0442\u044c \u0438 \u0435\u0441\u0442\u044c \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e.'}, 'com_67': {'author': 'nacknime-official', 'datetime': '01/23/2022, 16:55:02', 'body': '@teror4uks \u0442\u043a\u043d\u0438 \u043d\u043e\u0441\u043e\u043c, \u0447\u0442\u043e \u0442\u0430\u043c \u0442\u0430\u043a\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e'}, 'com_68': {'author': 'hello-smile6', 'datetime': '01/23/2022, 18:15:10', 'body': '> @hello-smile6 what does \"syeal your data\" mean?\\r\\n\\r\\nNot my art, ask the creator.'}, 'com_69': {'author': 'teror4uks', 'datetime': '01/23/2022, 19:52:34', 'body': '@nacknime-official  https://github.com/Marak/colors.js/commit/5d2d242f656103ac38086d6b26433a09f1c38c75'}, 'com_70': {'author': 'nacknime-official', 'datetime': '01/24/2022, 05:43:12', 'body': '@teror4uks \u0438\u043c\u0435\u044e \u0432\u0432\u0438\u0434\u0443 \u0442\u043a\u043d\u0438 \u043d\u043e\u0441\u043e\u043c \u0432 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e, \u0433\u0434\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e'}, 'com_71': {'author': 'teror4uks', 'datetime': '01/24/2022, 09:30:35', 'body': '@nacknime-official \u043b\u043e\u043b, \u043d\u0443 \u0441 \u0442\u043e\u0431\u043e\u0439 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0442\u044b \u043d\u0435 \u0432\u0438\u0434\u0438\u0448\u044c \u0442\u0443\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0434\u0443\u0435\u0442 \u0447\u0442\u043e \"\u043f\u0440\u0430\u0432\u0434\u043e\u0440\u0443\u0431\u044b\" \u0432\u0440\u043e\u0434\u0435 \u0442\u0435\u0431\u044f \u0437\u0434\u0435\u0441\u044c \u0432 \u043c\u0435\u043d\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435, \u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043b\u044e\u0434\u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u044e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0435 \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u043e \u0432 \u0446\u0438\u0432\u0438\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435.'}, 'com_72': {'author': 'wtlgo', 'datetime': '01/26/2022, 10:04:34', 'body': '@teror4uks \u0442\u044b, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u044f\u043b \u0441\u0443\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439. \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f - \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u0440 \u0441\u043e\u0444\u0442\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438, \u0438 \u043b\u044e\u0431\u043e\u0439, \u043a\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u044d\u0442\u0438\u043c\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0410 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u044d\u0442\u0438\u0445 \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0448\u044c \u044d\u0442\u043e\u0442 \u0441\u043e\u0444\u0442, \u0430\u0432\u0442\u043e\u0440 \u0441\u043d\u0438\u043c\u0430\u0435\u0442 \u0441 \u0441\u0435\u0431\u044f \u043b\u044e\u0431\u0443\u044e \u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0432\u0440\u0435\u0434, \u0447\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0442\u0435\u0431\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u0438\u0442\u044c. \u0422\u0430\u043a \u0447\u0442\u043e \u0441 \u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u043c\u0443 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u0438 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0438\u0442\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u043c\u0443 \u0437\u0430\u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0431\u0443\u0434\u044c \u0442\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u043d\u0435 \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0444\u0442\u0430.'}, 'com_73': {'author': 'dmitrykurmanov', 'datetime': '01/26/2022, 10:17:20', 'body': '> @teror4uks \u0442\u044b, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u044f\u043b \u0441\u0443\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439. \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f - \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u0440 \u0441\u043e\u0444\u0442\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438, \u0438 \u043b\u044e\u0431\u043e\u0439, \u043a\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u044d\u0442\u0438\u043c\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0410 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u044d\u0442\u0438\u0445 \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0448\u044c \u044d\u0442\u043e\u0442 \u0441\u043e\u0444\u0442, \u0430\u0432\u0442\u043e\u0440 \u0441\u043d\u0438\u043c\u0430\u0435\u0442 \u0441 \u0441\u0435\u0431\u044f \u043b\u044e\u0431\u0443\u044e \u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0432\u0440\u0435\u0434, \u0447\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0442\u0435\u0431\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u0438\u0442\u044c. \u0422\u0430\u043a \u0447\u0442\u043e \u0441 \u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u043c\u0443 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u0438 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0438\u0442\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u043c\u0443 \u0437\u0430\u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0431\u0443\u0434\u044c \u0442\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u043d\u0435 \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0444\u0442\u0430.\\r\\n\\r\\nhttps://habr.com/en/news/t/599865/#comment_23921173'}, 'com_74': {'author': 'wtlgo', 'datetime': '01/26/2022, 10:47:40', 'body': '@dmitrykurmanov \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043d\u0430 \u0432\u043f\u043e\u043b\u043d\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435:\\r\\n\\r\\n> @quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u041d\u0430\u0441\u0447\u0435\u0442 \u044d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u043a\u0430 \u044f \u0441\u0443\u0434\u0438\u0442\u044c \u043d\u0435 \u0431\u0435\u0440\u0443\u0441\u044c, \u043d\u043e \u0441\u0443\u0442\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0430, \u044d\u0442\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442.'}, 'com_75': {'author': 'G2G2G2G', 'datetime': '01/26/2022, 15:25:31', 'body': 'yo russians, shut the fuck up before I meet up with you in ukraine and make you'}, 'com_76': {'author': 'wtlgo', 'datetime': '01/26/2022, 15:45:14', 'body': '> yo russians, shut the fuck up before I meet up with you in ukraine and make you\\r\\n\\r\\nAre you aware that almost half of Ukrainian people also use Russian as their primary language? How do you know that we are Russians and not someone else?'}, 'com_77': {'author': 'teror4uks', 'datetime': '01/26/2022, 15:55:16', 'body': '@wtlgo \u043d\u0443 \u044f \u043a\u0430\u043a \u0431\u044b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u043a\u0430\u043a\u043e\u0435 \u043f\u0440\u0430\u0432\u043e \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u0435-\u044e\u0440\u0435 \u0438\u043b\u0438 \u0434\u0435-\u0444\u0430\u043a\u0442\u043e :) \u0412 \u043e\u0431\u0449\u0435\u043c \u043f\u0443\u0441\u0442\u044c \u0438 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0435 \u044d\u0442\u0438\u0447\u043d\u043e, \u0432\u0441\u0451 \u0436\u0435 \u043c\u043e\u0440\u0430\u043b\u044c \u0438 \u044d\u0442\u0438\u043a\u0430 \u043d\u0430\u0441 \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u043b\u044e\u0434\u044c\u043c\u0438, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u043e\u0440\u0441\u0442\u043a\u0430 \u0437\u0430\u043a\u043e\u043d\u043e\u0432.'}, 'com_78': {'author': 'wtlgo', 'datetime': '01/27/2022, 10:11:45', 'body': '@teror4uks \u043e\u043f\u044f\u0442\u044c \u0442\u0430\u043a\u0438, \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043f\u0440\u043e \u0442\u0432\u043e\u0439 \u0440\u0430\u0441\u0441\u043a\u0430\u0437 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \"\u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u043d\u0435 \u0443\u043c\u0435\u044e\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438\". \u042d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0443\u043f\u043a\u0430 \u0430\u0432\u0442\u043e\u0440\u0430 \u044f \u0441\u0443\u0434\u0438\u0442\u044c \u043d\u0435 \u0431\u0435\u0440\u0443\u0441\u044c.'}, 'com_79': {'author': 'teror4uks', 'datetime': '01/27/2022, 12:24:45', 'body': '@wtlgo \u0441\u0447\u0438\u0442\u0430\u044e \u0447\u0442\u043e \u0434\u0438\u0441\u043a\u0443\u0441\u0441 \u0441\u0435\u0431\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043b, \u0442\u044b \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u0444\u0440\u0430\u0437\u044b \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443 \u0438 \u043f\u044b\u0442\u0430\u0435\u0448\u044c\u0441\u044f \u0447\u0442\u043e \u0442\u043e \u043c\u043d\u0435 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0447\u0442\u043e, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0442\u0435\u043c\u0443'}, 'com_80': {'author': 'wtlgo', 'datetime': '01/27/2022, 12:40:04', 'body': '@teror4uks \u0447\u0442\u043e-\u0447\u0442\u043e \u044f \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b? \u0414\u0430\u0432\u0430\u0439 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u0412\u043e\u0442 \u0432\u0441\u044f \u0446\u0438\u0442\u0430\u0442\u0430.\\r\\n\\r\\n> @quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u041d\u0443 \u0434\u0430\u0432\u0430\u0439 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043f\u043e \u0447\u0430\u0441\u0442\u044f\u043c, \u0442\u043e\u0431\u043e\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0435\\r\\n\\r\\n> \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c\\r\\n\\r\\n\u0421\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0432\u043e\u0434 \u043e\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0430\u043c \u043d\u0435 \u0441\u0443\u043c\u0435\u043b \u043f\u0440\u043e\u0447\u0435\u0441\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u043e \u0447\u0435\u043c \u043e\u043d\u0430. \u041d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c.\\r\\n\\r\\n> \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u0418\u0437 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0447\u0435\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442 \u043d\u0435 \u044d\u0442\u043e. \u0415\u0441\u043b\u0438 \u0431\u044b \u0442\u044b \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043d\u0435 \u0440\u0443\u0441\u0441\u043a\u0438\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u043c \u0438\u043b\u0438 \u0443\u043c\u0435\u043b \u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e-\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438, \u0442\u043e \u0443\u0432\u0438\u0434\u0435\u043b \u0431\u044b, \u0447\u0442\u043e \u0438\u0437 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0447\u0435\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0430\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439, \u0435\u0441\u043b\u0438 \u0435\u043c\u0443 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0438 \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0432\u0438\u043d\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0440\u0430 \u043d\u0438 \u0432 \u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430\u043d\u0435\u0441\u043b\u0430 \u0435\u043c\u0443 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0440\u0435\u0434. \u0410\u0432\u0442\u043e\u0440 \u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u0430\u0432\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u0433\u043e \u0434\u0443\u0448\u0435 \u0432\u0437\u0434\u0443\u043c\u0430\u0435\u0442\u0441\u044f. \\r\\n\\r\\n\u0418\u0442\u0430\u043a, \u0433\u043e\u0441\u043f\u043e\u0434\u0438\u043d, \u0447\u0442\u043e \u0436\u0435 \u044f \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b \u0442\u0443\u0442 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430? \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0437\u0432\u043e\u043b\u044c \u043d\u0430 \u043c\u0435\u043d\u044f \u0442\u0443\u0442 \u043d\u0435 \u043d\u0430\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c \u0438 \u0433\u043e\u043b\u043e\u0441\u043b\u043e\u0432\u043d\u044b\u043c\u0438 \u043e\u0431\u0432\u0438\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0435 \u0431\u0440\u043e\u0441\u0430\u0442\u044c\u0441\u044f. \u042f \u043d\u0438\u0447\u0435\u0433\u043e \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0435 \u0432\u044b\u0434\u0435\u0440\u0433\u0438\u0432\u0430\u044e, \u0430 \u0435\u0441\u043b\u0438 \u0443 \u0442\u0435\u0431\u044f \u043d\u0435\u0442 \u0434\u043e\u0432\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0442\u0438\u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0435\u043f\u0440\u0430\u0432\u043e\u0442\u044b, \u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u0432\u0435\u0448\u0430\u0442\u044c \u044d\u0442\u043e \u043d\u0430 \u043c\u0435\u043d\u044f. \u042d\u0442\u0438\u043a\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b, \u0442\u044b \u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u043b.\\r\\n\\r\\n\u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u0442\u043e, \u0447\u0442\u043e \u0442\u0430\u043c \u0447\u0430\u0441\u0442\u044c \u0444\u0440\u0430\u0437\u044b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443 - \u0442\u0443\u0442, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u044e, \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0430\u044f \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u044f. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a \u0441\u0442\u0440\u0430\u0448\u043d\u043e, \u0447\u0442\u043e \u043d\u0430 \u0442\u0432\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0435 \u0434\u0430\u0439 \u0411\u043e\u0433 \u043e\u0442\u0432\u0435\u0442\u0438\u0442 \u043a\u0442\u043e-\u0442\u043e \u0435\u0449\u0435, \u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u0442\u0443\u0442: \u043e\u0442\u043e\u0448\u043b\u0438 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a\u0443 e-mail \u0438 \u0435\u0433\u043e \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0438\u043a\u0442\u043e, \u043a\u0440\u043e\u043c\u0435 \u0442\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a\u0430, \u043d\u0435 \u0443\u0432\u0438\u0434\u0438\u0442. \u0410 \u043f\u043e\u043a\u0430 \u043f\u0438\u0448\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0443, \u043d\u0435 \u0443\u0434\u0438\u0432\u043b\u044f\u0439\u0441\u044f, \u0435\u0441\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u043a\u0438 \u0447\u0442\u043e-\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0442\u0435\u0431\u0435.'}, 'com_81': {'author': 'teror4uks', 'datetime': '01/27/2022, 13:26:19', 'body': '@wtlgo \u0442\u0432\u043e\u0451 \u043f\u0440\u0430\u0432\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c, \u043c\u043e\u0451 \u043f\u0440\u0430\u0432\u043e \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0442\u044c \u0442\u043e\u0442 \u0431\u0440\u0435\u0434 \u0447\u0442\u043e \u0442\u044b \u043f\u0438\u0448\u0435\u0448\u044c'}, 'com_82': {'author': 'wtlgo', 'datetime': '01/27/2022, 13:28:13', 'body': '@teror4uks \u044d\u0442\u043e \u043d\u0435 \u0431\u0440\u0435\u0434. \u0411\u0440\u0435\u0434 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0442\u0430\u043a\u0438 \u0442\u044b, \u0447\u0442\u043e \u044f \u0438 \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u0442\u0435\u0431\u0435 \u0434\u043e\u043d\u0435\u0441\u0442\u0438.'}, 'com_83': {'author': 'elegantShock2258', 'datetime': '01/28/2022, 16:20:54', 'body': 'Speak American! Liberty babyyy \ud83c\uddfa\ud83c\uddf8\ud83c\uddfa\ud83c\uddf8\ud83c\uddfa\ud83c\uddf8'}, 'com_84': {'author': 'elegantShock2258', 'datetime': '01/28/2022, 16:24:07', 'body': '> I just paid @Marak 100$. If you have a time to have a futile dispute, use that time to help people in need.\\r\\n\\r\\nYes he needs proper help instead of showing his outbursts up here in the internet and ruining his good name and reputation.'}, 'com_85': {'author': 'Awilum', 'datetime': '02/01/2022, 12:20:19', 'body': '> https://opensea.io/marak\\r\\n> \\r\\n> Are you sure he needs help?\\r\\n@okyanusoz \\r\\n\\r\\nbecause this story about Colors.js and Faker.js is is look like a scam. imho.'}, 'com_86': {'author': 'satouriko', 'datetime': '02/04/2022, 03:20:05', 'body': '> @hello-smile6 what does \"syeal your data\" mean?\\r\\n\\r\\nI guess \"steal\"'}, 'com_87': {'author': 'hello-smile6', 'datetime': '02/08/2022, 01:24:33', 'body': '> > @hello-smile6 what does \"syeal your data\" mean?\\r\\n> \\r\\n> I guess \"steal\"\\r\\n\\r\\nYes. Unfortunately, as I said, I didn\\'t create it, so don\\'t blame me for spelling.'}, 'com_88': {'author': 'Lin2Jing4', 'datetime': '02/12/2022, 16:39:10', 'body': '\"You can feel the regret. With Cuck Licenses, you get the worst of two worlds: You get no credit for your work, nor money for licensing fees like other proprietary software and your software will be used to violate your and other users\\' privacy when it is used in closed-source environments. Oh, no... copes incoming\"\\r\\n(Luke Madison Smith, 2021, \"Why I Use the GPL and Not Cuck Licenses\").'}, 'com_89': {'author': 'elegantShock2258', 'datetime': '03/02/2022, 15:45:11', 'body': \"> there is no american language\\r\\n\\r\\nYes that's the joke\"}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'package.json': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/Marak/colors.js/raw/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26/package.json', 'patch': '@@ -1,7 +1,7 @@\\n {\\n     \"name\": \"colors\",\\n     \"description\": \"get colors in your node.js console\",\\n-    \"version\": \"1.4.44-liberty\",\\n+    \"version\": \"1.4.44-liberty-2\",\\n     \"author\": \"Marak Squires\",\\n     \"contributors\": [\\n         {'}}",
      "message_norm": "bump to `v1.4.44-liberty-2`",
      "language": "en",
      "entities": "[('v1.4.44', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['package.json'])",
      "num_files": 1.0
    },
    {
      "index": 866,
      "vuln_id": "GHSA-6m8p-4fxj-pgc2",
      "cwe_id": "{'CWE-78'}",
      "score": 7.8,
      "chain": "{'https://github.com/mikaelbr/mversion/commit/b7a8b32600e60759a7ad3921ec4a2750bf173482'}",
      "dataset": "osv",
      "summary": "OS Command Injection in mversion The issue occurs because tagName user input is formatted inside the exec function is executed without any checks.",
      "published_date": "2021-05-17",
      "chain_len": 1,
      "project": "https://github.com/mikaelbr/mversion",
      "commit_href": "https://github.com/mikaelbr/mversion/commit/b7a8b32600e60759a7ad3921ec4a2750bf173482",
      "commit_sha": "b7a8b32600e60759a7ad3921ec4a2750bf173482",
      "patch": "SINGLE",
      "chain_ord": "['b7a8b32600e60759a7ad3921ec4a2750bf173482']",
      "before_first_fix_commit": "{'a9ddbc2bc86eb48f6976b85d195b6a94e81ffb22'}",
      "last_fix_commit": "b7a8b32600e60759a7ad3921ec4a2750bf173482",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/23/2020, 22:02:33",
      "message": "Fix Remote Command Execution",
      "author": "hbkhan",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/git.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/mikaelbr/mversion/raw/b7a8b32600e60759a7ad3921ec4a2750bf173482/lib%2Fgit.js', 'patch': '@@ -61,7 +61,7 @@ module.exports.commit = function (files, message, newVer, tagName, callback) {\\n \\n     function (done) {\\n       cp.exec(\\n-        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),\\n+        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),\\n         gitExtra,\\n         done\\n       );'}}",
      "message_norm": "fix remote command execution",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('command execution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/git.js'])",
      "num_files": 1.0
    },
    {
      "index": 1554,
      "vuln_id": "GHSA-cgrj-xjm7-9q27",
      "cwe_id": "{'CWE-601'}",
      "score": 6.1,
      "chain": "{'https://github.com/web2py/web2py/commit/a181b855a43cb8b479d276b082cfcde385768451'}",
      "dataset": "osv",
      "summary": "Open redirect in web2py Open redirect vulnerability in web2py versions prior to 2.22.5 allows a remote attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having a user to access a specially crafted URL.",
      "published_date": "2022-06-28",
      "chain_len": 1,
      "project": "https://github.com/web2py/web2py",
      "commit_href": "https://github.com/web2py/web2py/commit/a181b855a43cb8b479d276b082cfcde385768451",
      "commit_sha": "a181b855a43cb8b479d276b082cfcde385768451",
      "patch": "SINGLE",
      "chain_ord": "['a181b855a43cb8b479d276b082cfcde385768451']",
      "before_first_fix_commit": "{'842994def40ca565aa954a13aa065d2da1090948'}",
      "last_fix_commit": "a181b855a43cb8b479d276b082cfcde385768451",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/04/2022, 17:57:08",
      "message": "added validation of send attribute in admin",
      "author": "Massimo Di Pierro",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'applications/admin/controllers/default.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/web2py/web2py/raw/a181b855a43cb8b479d276b082cfcde385768451/applications%2Fadmin%2Fcontrollers%2Fdefault.py', 'patch': '@@ -12,7 +12,7 @@\\n from gluon.admin import *\\n from gluon.fileutils import abspath, read_file, write_file\\n from gluon.utils import web2py_uuid\\n-from gluon.tools import Config\\n+from gluon.tools import Config, prevent_open_redirect\\n from gluon.compileapp import find_exposed_functions\\n from glob import glob\\n from gluon._compat import iteritems, PY2, pickle, xrange, urlopen, to_bytes, StringIO, to_native, reload\\n@@ -118,7 +118,7 @@ def get_app(name=None):\\n def index():\\n     \"\"\" Index handler \"\"\"\\n \\n-    send = request.vars.send\\n+    send = prevent_open_redirect(request.vars.send)\\n     if DEMO_MODE:\\n         session.authorized = True\\n         session.last_time = t0'}}",
      "message_norm": "added validation of send attribute in admin",
      "language": "en",
      "entities": "[('added', 'ACTION', ''), ('admin', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['applications/admin/controllers/default.py'])",
      "num_files": 1.0
    },
    {
      "index": 1274,
      "vuln_id": "GHSA-8wf2-3ggj-78q9",
      "cwe_id": "{'CWE-287'}",
      "score": 4.3,
      "chain": "{'https://github.com/phpmyadmin/phpmyadmin/commit/ca54f1db050859eb8555875c6aa5d7796fdf4b32'}",
      "dataset": "osv",
      "summary": "Improper Authentication in phpmyadmin An issue was discovered in phpMyAdmin 4.9 before 4.9.8 and 5.1 before 5.1.2. A valid user who is already authenticated to phpMyAdmin can manipulate their account to bypass two-factor authentication for future login instances.",
      "published_date": "2022-01-28",
      "chain_len": 1,
      "project": "https://github.com/phpmyadmin/phpmyadmin",
      "commit_href": "https://github.com/phpmyadmin/phpmyadmin/commit/ca54f1db050859eb8555875c6aa5d7796fdf4b32",
      "commit_sha": "ca54f1db050859eb8555875c6aa5d7796fdf4b32",
      "patch": "SINGLE",
      "chain_ord": "['ca54f1db050859eb8555875c6aa5d7796fdf4b32']",
      "before_first_fix_commit": "{'ae11d5260b4bde42100c8696218a2bfd11a2d740'}",
      "last_fix_commit": "ca54f1db050859eb8555875c6aa5d7796fdf4b32",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/13/2022, 01:59:41",
      "message": "security - Fix - 2FA/U2F can be disabled without any code change\n\nSigned-off-by: William Desportes <williamdes@wdes.fr>",
      "author": "William Desportes",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 11, 'total': 27}",
      "files": "{'libraries/classes/DatabaseInterface.php': {'additions': 16, 'deletions': 11, 'changes': 27, 'status': 'modified', 'raw_url': 'https://github.com/phpmyadmin/phpmyadmin/raw/ca54f1db050859eb8555875c6aa5d7796fdf4b32/libraries%2Fclasses%2FDatabaseInterface.php', 'patch': '@@ -1563,17 +1563,22 @@ public function setCollation($collation)\\n      */\\n     public function initRelationParamsCache()\\n     {\\n-        if (strlen($GLOBALS[\\'db\\'])) {\\n-            $cfgRelation = $this->relation->getRelationsParam();\\n-            if (empty($cfgRelation[\\'db\\'])) {\\n-                $this->relation->fixPmaTables($GLOBALS[\\'db\\'], false);\\n-            }\\n-        }\\n-        $cfgRelation = $this->relation->getRelationsParam();\\n-        if (empty($cfgRelation[\\'db\\']) && isset($GLOBALS[\\'dblist\\'])) {\\n-            if ($GLOBALS[\\'dblist\\']->databases->exists(\\'phpmyadmin\\')) {\\n-                $this->relation->fixPmaTables(\\'phpmyadmin\\', false);\\n-            }\\n+        $storageDbName = $GLOBALS[\\'cfg\\'][\\'Server\\'][\\'pmadb\\'] ?? \\'\\';\\n+        // Use \"phpmyadmin\" as a default database name to check to keep the behavior consistent\\n+        $storageDbName = $storageDbName !== null\\n+                            && is_string($storageDbName)\\n+                            && $storageDbName !== \\'\\' ? $storageDbName : \\'phpmyadmin\\';\\n+\\n+        // This will make users not having explicitly listed databases\\n+        // have config values filled by the default phpMyAdmin storage table name values\\n+        $this->relation->fixPmaTables($storageDbName, false);\\n+\\n+        // This global will be changed if fixPmaTables did find one valid table\\n+        $storageDbName = $GLOBALS[\\'cfg\\'][\\'Server\\'][\\'pmadb\\'] ?? \\'\\';\\n+\\n+        // Empty means that until now no pmadb was found eligible\\n+        if (empty($storageDbName)) {\\n+            $this->relation->fixPmaTables($GLOBALS[\\'db\\'], false);\\n         }\\n     }'}}",
      "message_norm": "security - fix - 2fa/u2f can be disabled without any code change\n\nsigned-off-by: william desportes <williamdes@wdes.fr>",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('williamdes@wdes.fr', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['libraries/classes/DatabaseInterface.php'])",
      "num_files": 1.0
    },
    {
      "index": 1897,
      "vuln_id": "GHSA-gm9x-q798-hmr4",
      "cwe_id": "{'CWE-78'}",
      "score": 7.2,
      "chain": "{'https://github.com/sh0ji/git-tags-remote/commit/a20488960cbd2c98455386108253094897ebfc1c'}",
      "dataset": "osv",
      "summary": "Command Injection in git-tags-remote All versions of `git-tags-remote ` are vulnerable to Command Injection. The package fails to sanitize the repository input and passes it directly to an `exec` call on the `get` function . This may allow attackers to execute arbitrary code in the system if the `repo` value passed to the function is user-controlled.  \n\nThe following proof-of-concept creates a file in `/tmp`:  \n```\nconst gitTagsRemote = require('git-tags-remote');\n\ngitTagsRemote.get('https://github.com/sh0ji/git-tags-remote.git; echo \"Injection Success\" > /tmp/command-injection.test')\n.then(tags => console.log(tags));\n```",
      "published_date": "2020-07-29",
      "chain_len": 1,
      "project": "https://github.com/sh0ji/git-tags-remote",
      "commit_href": "https://github.com/sh0ji/git-tags-remote/commit/a20488960cbd2c98455386108253094897ebfc1c",
      "commit_sha": "a20488960cbd2c98455386108253094897ebfc1c",
      "patch": "SINGLE",
      "chain_ord": "['a20488960cbd2c98455386108253094897ebfc1c']",
      "before_first_fix_commit": "{'c43558b77312a13f69ca25ed965cf4792c239458'}",
      "last_fix_commit": "a20488960cbd2c98455386108253094897ebfc1c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/21/2021, 20:02:24",
      "message": "fix: use spawn for more secure input\n\nresolves #58",
      "author": "Evan Yamanishi",
      "comments": null,
      "stats": "{'additions': 23, 'deletions': 10, 'total': 33}",
      "files": "{'src/index.ts': {'additions': 23, 'deletions': 10, 'changes': 33, 'status': 'modified', 'raw_url': 'https://github.com/sh0ji/git-tags-remote/raw/a20488960cbd2c98455386108253094897ebfc1c/src%2Findex.ts', 'patch': \"@@ -1,17 +1,30 @@\\n import { valid, compare } from 'semver';\\n-import { exec } from 'child_process';\\n+import { spawn } from 'child_process';\\n \\n-const lsRemoteTags = (repo: string): Promise<string> => new Promise(\\n-\\t(resolve, reject) => {\\n-\\t\\texec(`git ls-remote --tags ${repo}`, (_, stdout, stderr) => {\\n-\\t\\t\\tif (stderr) reject(new Error(stderr));\\n-\\t\\t\\tresolve(stdout.toString().trim());\\n-\\t\\t});\\n-\\t},\\n-);\\n+const lsRemoteTags = (repoPath: string): Promise<string> => new Promise((resolve, reject) => {\\n+\\tlet stderr = '';\\n+\\tlet stdout = '';\\n+\\n+\\tconst child = spawn('git', ['ls-remote', '--tags', repoPath]);\\n+\\n+\\tchild.stdout.on('data', (data) => {\\n+\\t\\tstdout += data;\\n+\\t});\\n+\\n+\\tchild.stderr.on('data', (data) => {\\n+\\t\\tstderr += data;\\n+\\t});\\n+\\n+\\tchild.on('error', reject);\\n+\\n+\\tchild.on('close', (exitCode) => {\\n+\\t\\tif (exitCode !== 0 || stderr.length) reject(new Error(stderr));\\n+\\t\\tresolve(stdout.toString().trim());\\n+\\t});\\n+});\\n \\n const parseTags = (tags: string): Map<string, string> => {\\n-\\tconst tagMap = new Map();\\n+\\tconst tagMap = new Map<string, string>();\\n \\ttags.split('\\\\n')\\n \\t\\t.forEach((str) => {\\n \\t\\t\\tconst ref = str.split(/\\\\t/);\"}}",
      "message_norm": "fix: use spawn for more secure input\n\nresolves #58",
      "language": "en",
      "entities": "[('secure', 'SECWORD', ''), ('#58', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2221,
      "vuln_id": "GHSA-j8qc-5fqr-52fp",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96'}",
      "dataset": "osv",
      "summary": "Division by zero in `Conv2DBackpropFilter` ### Impact\nAn attacker can cause a division by zero to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([0, 0, 0, 0], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 1, 1, 1],\n  use_cudnn_on_gpu=False,\n  padding='SAME',\n  explicit_paddings=[],\n  data_format='NHWC',\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments):\n\n```cc\nconst size_t size_A = output_image_size * filter_total_size; \nconst size_t size_B = output_image_size * dims.out_depth;\nconst size_t size_C = filter_total_size * dims.out_depth;\nconst size_t work_unit_size = size_A + size_B + size_C;\nconst size_t shard_size = (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\nIf all shapes are empty then `work_unit_size` is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service. \n\n### Patches\nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96",
      "commit_sha": "c570e2ecfc822941335ad48f6e10df4e21f11c96",
      "patch": "SINGLE",
      "chain_ord": "['c570e2ecfc822941335ad48f6e10df4e21f11c96']",
      "before_first_fix_commit": "{'1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da'}",
      "last_fix_commit": "c570e2ecfc822941335ad48f6e10df4e21f11c96",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/22/2021, 00:50:10",
      "message": "Fix issues in Conv2DBackpropFilter.\n\nPiperOrigin-RevId: 369772454\nChange-Id: I49b465f2ae2ce91def61b56cea8000197d5177d8",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 0, 'total': 13}",
      "files": "{'tensorflow/core/kernels/conv_grad_filter_ops.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c570e2ecfc822941335ad48f6e10df4e21f11c96/tensorflow%2Fcore%2Fkernels%2Fconv_grad_filter_ops.cc', 'patch': '@@ -495,6 +495,14 @@ class Conv2DCustomBackpropFilterOp : public OpKernel {\\n     const int filter_total_size = dims.spatial_dims[0].filter_size *\\n                                   dims.spatial_dims[1].filter_size *\\n                                   dims.in_depth;\\n+    OP_REQUIRES(\\n+        context,\\n+        filter_total_size * dims.out_depth == filter_backprop->NumElements(),\\n+        errors::InvalidArgument(\\n+            \"filter_size does not have enough elements, requested \",\\n+            filter_total_size * dims.out_depth, \", got \",\\n+            filter_backprop->NumElements()));\\n+\\n     // The output image size is the spatial size of the output.\\n     const int output_image_size =\\n         dims.spatial_dims[0].output_size * dims.spatial_dims[1].output_size;\\n@@ -518,6 +526,11 @@ class Conv2DCustomBackpropFilterOp : public OpKernel {\\n \\n     const size_t work_unit_size = size_A + size_B + size_C;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size != 0,\\n+        errors::InvalidArgument(\\n+            \"Work size for convolution would be 0, which is not acceptable\"));\\n+\\n     const size_t shard_size =\\n         (target_working_set_size + work_unit_size - 1) / work_unit_size;'}}",
      "message_norm": "fix issues in conv2dbackpropfilter.\n\npiperorigin-revid: 369772454\nchange-id: i49b465f2ae2ce91def61b56cea8000197d5177d8",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('issues', 'FLAW', ''), ('369772454', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/conv_grad_filter_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1357,
      "vuln_id": "GHSA-9c8h-vvrj-w2p8",
      "cwe_id": "{'CWE-125'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373'}",
      "dataset": "osv",
      "summary": "Heap OOB in `RaggedGather` ### Impact\nIf the arguments to `tf.raw_ops.RaggedGather` don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.\n                                                                                                                                                                                                                                                                                          \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedGather(\n  params_nested_splits = [0,0,0],\n  params_dense_values = [1,1],\n  indices = [0,0,9,0,0],\n  OUTPUT_RAGGED_RANK=0)\n```\n\nIn debug mode, the same code triggers a `CHECK` failure.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by `params_nested_splits` is not an empty list of tensors.\n\n### Patches\nWe have patched the issue in GitHub commit [a2b743f6017d7b97af1fe49087ae15f0ac634373](https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373",
      "commit_sha": "a2b743f6017d7b97af1fe49087ae15f0ac634373",
      "patch": "SINGLE",
      "chain_ord": "['a2b743f6017d7b97af1fe49087ae15f0ac634373']",
      "before_first_fix_commit": "{'4979e3b104cede96958ea88be5ce5fc584949340'}",
      "last_fix_commit": "a2b743f6017d7b97af1fe49087ae15f0ac634373",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/03/2021, 02:05:27",
      "message": "Fix heap OOB in `tf.raw_ops.RaggedGather`\n\nPiperOrigin-RevId: 388355464\nChange-Id: If14d96231d1cd7aad7c4d1c22c1bab1576b75717",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 1, 'total': 8}",
      "files": "{'tensorflow/core/kernels/ragged_gather_op.cc': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/a2b743f6017d7b97af1fe49087ae15f0ac634373/tensorflow%2Fcore%2Fkernels%2Fragged_gather_op.cc', 'patch': '@@ -58,15 +58,21 @@ class RaggedGatherOpBase : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     // Get the input Tensors.\\n+\\n     OpInputList params_nested_splits_in;\\n     OP_REQUIRES_OK(context, context->input_list(\"params_nested_splits\",\\n                                                 &params_nested_splits_in));\\n+    OP_REQUIRES(\\n+        context, params_nested_splits_in.size() > 0,\\n+        errors::InvalidArgument(\"params_nested_splits must be non empty\"));\\n+\\n     const Tensor& params_dense_values_in =\\n         context->input(params_nested_splits_in.size());\\n     const Tensor& indices_in =\\n         context->input(params_nested_splits_in.size() + 1);\\n \\n-    DCHECK_GT(params_nested_splits_in.size(), 0);  // Enforced by REGISTER_OP.\\n+    OP_REQUIRES(context, params_nested_splits_in[0].dims() > 0,\\n+                errors::InvalidArgument(\"Split tensors must not be scalars\"));\\n     SPLITS_TYPE num_params = params_nested_splits_in[0].dim_size(0) - 1;\\n     OP_REQUIRES_OK(context, ValidateIndices(indices_in, num_params));'}}",
      "message_norm": "fix heap oob in `tf.raw_ops.raggedgather`\n\npiperorigin-revid: 388355464\nchange-id: if14d96231d1cd7aad7c4d1c22c1bab1576b75717",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('388355464', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ragged_gather_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2117,
      "vuln_id": "GHSA-hr84-fqvp-48mm",
      "cwe_id": "{'CWE-131'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5'}",
      "dataset": "osv",
      "summary": "Segfault in SparseCountSparseOutput ### Impact\nSpecifying a negative dense shape in `tf.raw_ops.SparseCountSparseOutput` results in a segmentation fault being thrown out from the standard library as `std::vector` invariants are broken.\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0, 0], dtype=tf.int64)\ndense_shape = tf.constant([-100, -100, -100], shape=[3], dtype=tf.int64)\nweights = tf.constant([], shape=[0, 0], dtype=tf.int64)\n\ntf.raw_ops.SparseCountSparseOutput(indices=indices, values=values, dense_shape=dense_shape, weights=weights, minlength=79, maxlength=96, binary_output=False)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L199-L213) assumes the first element of the dense shape is always positive and uses it to initialize a `BatchedMap<T>` (i.e., [`std::vector<absl::flat_hash_map<int64,T>>`](https://github.com/tensorflow/tensorflow/blob/8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624/tensorflow/core/kernels/count_ops.cc#L27)) data structure.\n\n```cc\n  bool is_1d = shape.NumElements() == 1;\n  int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\n  ...\n  auto per_batch_counts = BatchedMap<W>(num_batches); \n```\n\nIf the `shape` tensor has more than one element, `num_batches` is the first value in `shape`.\n                       \nEnsuring that the `dense_shape` argument is a valid tensor shape (that is, all elements are non-negative) solves this issue.\n\n### Patches\nWe have patched the issue in GitHub commit [c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5](https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5",
      "commit_sha": "c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5",
      "patch": "SINGLE",
      "chain_ord": "['c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5']",
      "before_first_fix_commit": "{'8f7b60ee8c0206a2c99802e3a4d1bb55d2bc0624'}",
      "last_fix_commit": "c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/19/2021, 18:33:50",
      "message": "Fix the segfault in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 369264941\nChange-Id: I23a96a15b8370c01ee21ba3841e1c7dcbf55e93d",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 1, 'total': 10}",
      "files": "{'tensorflow/core/kernels/count_ops.cc': {'additions': 9, 'deletions': 1, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c57c0b9f3a4f8684f3489dd9a9ec627ad8b599f5/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -197,9 +197,17 @@ class SparseCount : public OpKernel {\\n                     \"The shape argument requires at least one element.\"));\\n \\n     bool is_1d = shape.NumElements() == 1;\\n-    int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\\n+    auto shape_vector = shape.flat<int64>();\\n+    int num_batches = is_1d ? 1 : shape_vector(0);\\n     int num_values = values.NumElements();\\n \\n+    for (int b = 0; b < shape_vector.size(); b++) {\\n+      OP_REQUIRES(context, shape_vector(b) >= 0,\\n+                  errors::InvalidArgument(\\n+                      \"Elements in dense_shape must be >= 0. Instead got:\",\\n+                      shape.DebugString()));\\n+    }\\n+\\n     OP_REQUIRES(context, num_values == indices.shape().dim_size(0),\\n                 errors::InvalidArgument(\\n                     \"Number of values must match first dimension of indices.\",'}}",
      "message_norm": "fix the segfault in `tf.raw_ops.sparsecountsparseoutput`.\n\npiperorigin-revid: 369264941\nchange-id: i23a96a15b8370c01ee21ba3841e1c7dcbf55e93d",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('369264941', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/count_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1528,
      "vuln_id": "GHSA-cchx-mfrc-fwqr",
      "cwe_id": "{'CWE-200', 'CWE-287'}",
      "score": 7.5,
      "chain": "{'https://github.com/symfony/symfony/commit/a29ce2817cf43bb1850cf6af114004ac26c7a081'}",
      "dataset": "osv",
      "summary": "Improper authentication in Symfony In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, a vulnerability would allow an attacker to authenticate as a privileged user on sites with user registration and remember me login functionality enabled. This is related to symfony/security.",
      "published_date": "2020-02-12",
      "chain_len": 1,
      "project": "https://github.com/symfony/symfony",
      "commit_href": "https://github.com/symfony/symfony/commit/a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "commit_sha": "a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "patch": "SINGLE",
      "chain_ord": "['a29ce2817cf43bb1850cf6af114004ac26c7a081']",
      "before_first_fix_commit": "{'3e0b2354dbc8813a1f5ff91757e1dce40dfe31b4'}",
      "last_fix_commit": "a29ce2817cf43bb1850cf6af114004ac26c7a081",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/06/2019, 10:40:18",
      "message": "[Security] Add a separator in the remember me cookie hash",
      "author": "Pascal Borreli",
      "comments": "{'com_1': {'author': 'simoheinonen', 'datetime': '06/05/2019, 12:10:12', 'body': 'This logs out all users with the old hash. \ud83d\ude10'}, 'com_2': {'author': 'stof', 'datetime': '06/05/2019, 12:18:28', 'body': '@simoheinonen which is better than allowing to spoof remember me cookies'}, 'com_3': {'author': 'simoheinonen', 'datetime': '06/05/2019, 12:24:05', 'body': 'Yeah but worth mentioning imo. Logging out thousands of users might cost a lot'}, 'com_4': {'author': 'stefanospetrakis', 'datetime': '06/25/2019, 16:29:42', 'body': \"One remark regarding this (a bit too late perhaps);\\r\\nI would like this a little bit shorter for readability/redundancy/etc., sth like that:\\r\\n`return hash_hmac('sha256', implode(self::COOKIE_DELIMITER, func_get_args()), $this->getSecret());`\\r\\n\\r\\nAny point to opening a follow-up issue for this?\"}, 'com_5': {'author': 'stof', 'datetime': '06/25/2019, 16:37:07', 'body': '@stefanospetrakis this code is less explicit about what gets included in the hash exactly, due to using `func_get_args` instead of the actual arguments. So to me, this actually makes it less readable.'}, 'com_6': {'author': 'stefanospetrakis', 'datetime': '06/25/2019, 19:53:54', 'body': '@stof Fair enough, how about the following:\\r\\n\\r\\n`implode(self::COOKIE_DELIMITER, [$class, $username, $expires, $password])`'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/Symfony/Component/Security/Http/RememberMe/TokenBasedRememberMeServices.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/symfony/symfony/raw/a29ce2817cf43bb1850cf6af114004ac26c7a081/src%2FSymfony%2FComponent%2FSecurity%2FHttp%2FRememberMe%2FTokenBasedRememberMeServices.php', 'patch': \"@@ -120,6 +120,6 @@ protected function generateCookieValue($class, $username, $expires, $password)\\n      */\\n     protected function generateCookieHash($class, $username, $expires, $password)\\n     {\\n-        return hash_hmac('sha256', $class.$username.$expires.$password, $this->getSecret());\\n+        return hash_hmac('sha256', $class.self::COOKIE_DELIMITER.$username.self::COOKIE_DELIMITER.$expires.self::COOKIE_DELIMITER.$password, $this->getSecret());\\n     }\\n }\"}}",
      "message_norm": "[security] add a separator in the remember me cookie hash",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('add', 'ACTION', ''), ('cookie', 'SECWORD', ''), ('hash', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/Symfony/Component/Security/Http/RememberMe/TokenBasedRememberMeServices.php'])",
      "num_files": 1.0
    }
  ]
}