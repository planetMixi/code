{
  "schema": {
    "fields": [
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "vuln_id",
        "type": "string"
      },
      {
        "name": "cwe_id",
        "type": "string"
      },
      {
        "name": "score",
        "type": "number"
      },
      {
        "name": "chain",
        "type": "string"
      },
      {
        "name": "dataset",
        "type": "string"
      },
      {
        "name": "summary",
        "type": "string"
      },
      {
        "name": "published_date",
        "type": "string"
      },
      {
        "name": "chain_len",
        "type": "integer"
      },
      {
        "name": "project",
        "type": "string"
      },
      {
        "name": "commit_href",
        "type": "string"
      },
      {
        "name": "commit_sha",
        "type": "string"
      },
      {
        "name": "patch",
        "type": "string"
      },
      {
        "name": "chain_ord",
        "type": "string"
      },
      {
        "name": "before_first_fix_commit",
        "type": "string"
      },
      {
        "name": "last_fix_commit",
        "type": "string"
      },
      {
        "name": "chain_ord_pos",
        "type": "number"
      },
      {
        "name": "commit_datetime",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      },
      {
        "name": "author",
        "type": "string"
      },
      {
        "name": "comments",
        "type": "string"
      },
      {
        "name": "stats",
        "type": "string"
      },
      {
        "name": "files",
        "type": "string"
      },
      {
        "name": "message_norm",
        "type": "string"
      },
      {
        "name": "language",
        "type": "string"
      },
      {
        "name": "entities",
        "type": "string"
      },
      {
        "name": "classification_level_1",
        "type": "string"
      },
      {
        "name": "classification_level_2",
        "type": "string"
      },
      {
        "name": "list_files",
        "type": "string"
      },
      {
        "name": "num_files",
        "type": "number"
      }
    ],
    "primaryKey": [
      "index"
    ],
    "pandas_version": "1.4.0"
  },
  "data": [
    {
      "index": 2436,
      "vuln_id": "GHSA-mjvc-j6rv-9xj8",
      "cwe_id": "{'CWE-215'}",
      "score": 8.8,
      "chain": "{'https://github.com/microweber/microweber/commit/b12e1a490c79460bff019f34b2e17112249b16ec'}",
      "dataset": "osv",
      "summary": "Insertion of Sensitive Information Into Debugging Code in Microweber Microweber prior to 1.3 may expose sensitive information about a server and a user when running the server in debug mode.",
      "published_date": "2022-02-24",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/b12e1a490c79460bff019f34b2e17112249b16ec",
      "commit_sha": "b12e1a490c79460bff019f34b2e17112249b16ec",
      "patch": "SINGLE",
      "chain_ord": "['b12e1a490c79460bff019f34b2e17112249b16ec']",
      "before_first_fix_commit": "{'a5925f74d39775771d4c37c8d4c1acbb762fda0a'}",
      "last_fix_commit": "b12e1a490c79460bff019f34b2e17112249b16ec",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/22/2022, 10:35:12",
      "message": "Update Handler.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 5, 'total': 10}",
      "files": "{'src/MicroweberPackages/App/Exceptions/Handler.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/b12e1a490c79460bff019f34b2e17112249b16ec/src%2FMicroweberPackages%2FApp%2FExceptions%2FHandler.php', 'patch': '@@ -12,9 +12,9 @@ class Handler extends ExceptionHandler\\n      *\\n      * @var array\\n      */\\n-//    protected $dontReport = [\\n-//        //\\n-//    ];\\n+    protected $dontReport = [\\n+        \\\\BadMethodCallException::class,\\n+    ];\\n \\n     /**\\n      * A list of the inputs that are never flashed for validation exceptions.\\n@@ -102,10 +102,10 @@ private function getMicroweberErrorBarHtml()\\n                  <a href=\"\\' . api_url(\\'mw_post_update\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload database</a>\\n                  <a href=\"\\' . api_url(\\'mw_reload_modules\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload modules</a>\\n                  <a href=\"\\' . api_url(\\'clearcache\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Clear cache</a>\\n-                 \\n+\\n                  <a href=\"\" class=\"btn\">Refresh</a>\\n             </div>\\n         </div>\\n         \\';\\n     }\\n-}\\n\\\\ No newline at end of file\\n+}'}}",
      "message_norm": "update handler.php",
      "language": "da",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/App/Exceptions/Handler.php'])",
      "num_files": 1.0
    },
    {
      "index": 2255,
      "vuln_id": "GHSA-jhj6-5mh6-4pvf",
      "cwe_id": "{'CWE-476'}",
      "score": 7.5,
      "chain": "{'https://github.com/kitabisa/teler/commit/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e'}",
      "dataset": "osv",
      "summary": "Denial-of-Service within Docker container ### Impact\nIf you run teler inside a Docker container and encounter `errors.Exit` function, it will cause denial-of-service (`SIGSEGV`) because it doesn't get process ID and process group ID of teler properly to kills.\n\n### Patches\nUpgrade to the >= 0.0.1 version.\n\n### Workarounds\nN/A\n\n### References\n- https://github.com/kitabisa/teler/commit/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Issues Section](https://github.com/kitabisa/teler/issues)\n* Email us at [infosec@kitabisa.com](mailto:infosec@kitabisa.com)",
      "published_date": "2021-05-24",
      "chain_len": 1,
      "project": "https://github.com/kitabisa/teler",
      "commit_href": "https://github.com/kitabisa/teler/commit/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
      "commit_sha": "ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
      "patch": "SINGLE",
      "chain_ord": "['ec6082049dba9e44a21f35fb7b123d42ce1a1a7e']",
      "before_first_fix_commit": "{'7be1cb4511a8236d5203a924bc0aa4db008aafb8'}",
      "last_fix_commit": "ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/02/2020, 14:09:38",
      "message": ":hammer: Fix segmentation fault of syscall\n\nIf teler is run via the docker image, the syscall function cannot allocate and return a nil pointer to address.",
      "author": "Dwi Siswanto",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 1, 'total': 9}",
      "files": "{'pkg/errors/abort.go': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/kitabisa/teler/raw/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e/pkg%2Ferrors%2Fabort.go', 'patch': '@@ -2,10 +2,17 @@\\n \\n package errors\\n \\n-import \"syscall\"\\n+import (\\n+\\t\"os\"\\n+\\t\"syscall\"\\n+)\\n \\n // Abort will terminate & sends SIGTERM to process\\n func Abort(i ...int) {\\n+\\tif _, err := os.Stat(\"/.dockerenv\"); err == nil {\\n+\\t\\tos.Exit(i[0])\\n+\\t}\\n+\\n \\tpgid, err := syscall.Getpgid(syscall.Getpid())\\n \\tif err != nil {\\n \\t\\tExit(err.Error())'}}",
      "message_norm": ":hammer: fix segmentation fault of syscall\n\nif teler is run via the docker image, the syscall function cannot allocate and return a nil pointer to address.",
      "language": "en",
      "entities": "[('segmentation fault', 'SECWORD', ''), ('address', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['pkg/errors/abort.go'])",
      "num_files": 1.0
    },
    {
      "index": 973,
      "vuln_id": "GHSA-763g-fqq7-48wg",
      "cwe_id": "{'CWE-611'}",
      "score": 5.3,
      "chain": "{'https://github.com/checkstyle/checkstyle/commit/c46a16d177e6797895b195c288ae9a9a096254b8'}",
      "dataset": "osv",
      "summary": "XML external entity (XXE) processing ('external-parameter-entities' feature was not fully disabled)) Due to an incomplete fix for [CVE-2019-9658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9658), checkstyle was still vulnerable to XML External Entity (XXE) Processing.\n\n### Impact\n\n#### User: Build Maintainers\n\nThis vulnerability probably doesn't impact Maven/Gradle users as, in most cases, these builds are processing files that are trusted, or pre-vetted by a pull request reviewer before being run on internal CI infrastructure.\n\n#### User: Static Analysis as a Service\n\nIf you operate a site/service that parses \"untrusted\" Checkstyle XML configuration files, you are vulnerable to this and should patch.\n\nNote from the discoverer of the original CVE-2019-9658:\n\n> While looking at a few companies that run Checkstyle/PMD/ect... as a service I notice that it's a common pattern to run the static code analysis tool inside of a Docker container with the following flags:\n> ```\n> --net=none \\\n> --privileged=false \\\n> --cap-drop=ALL\n> ```\n> Running the analysis in Docker has the advantage that there should be no sensitive local file information that XXE can exfiltrate from the container. Additionally, these flags prevent vulnerabilities in static analysis tools like Checkstyle from being used to exfiltrate data via XXE or to perform SSRF.\n> \\- [Jonathan Leitschuh](https://twitter.com/jlleitschuh)\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nPatched, will be released with version 8.29 at 26 Jan 2020.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nNo workaround are available\n\n### References\n\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)\n - GitHub Issue https://github.com/checkstyle/checkstyle/issues/7468\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in https://github.com/checkstyle/checkstyle/issues",
      "published_date": "2020-01-31",
      "chain_len": 1,
      "project": "https://github.com/checkstyle/checkstyle",
      "commit_href": "https://github.com/checkstyle/checkstyle/commit/c46a16d177e6797895b195c288ae9a9a096254b8",
      "commit_sha": "c46a16d177e6797895b195c288ae9a9a096254b8",
      "patch": "SINGLE",
      "chain_ord": "['c46a16d177e6797895b195c288ae9a9a096254b8']",
      "before_first_fix_commit": "{'dfed7949c3714dceb0318e4381f00e7fb5d5dfe3'}",
      "last_fix_commit": "c46a16d177e6797895b195c288ae9a9a096254b8",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/19/2020, 01:32:28",
      "message": "Issue #7468: disable 'external-parameter-entities' feature by default",
      "author": "Roman Ivanov",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'src/main/java/com/puppycrawl/tools/checkstyle/XmlLoader.java': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/checkstyle/checkstyle/raw/c46a16d177e6797895b195c288ae9a9a096254b8/src%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2FXmlLoader.java', 'patch': '@@ -124,6 +124,9 @@ public static final class LoadExternalDtdFeatureProvider {\\n         /** Feature that enables including external general entities in XML files. */\\n         public static final String EXTERNAL_GENERAL_ENTITIES =\\n                 \"http://xml.org/sax/features/external-general-entities\";\\n+        /** Feature that enables including external parameter entities in XML files. */\\n+        public static final String EXTERNAL_PARAMETER_ENTITIES =\\n+                \"http://xml.org/sax/features/external-parameter-entities\";\\n \\n         /** Stop instances being created. **/\\n         private LoadExternalDtdFeatureProvider() {\\n@@ -146,6 +149,7 @@ public static void setFeaturesBySystemProperty(SAXParserFactory factory)\\n \\n             factory.setFeature(LOAD_EXTERNAL_DTD, enableExternalDtdLoad);\\n             factory.setFeature(EXTERNAL_GENERAL_ENTITIES, enableExternalDtdLoad);\\n+            factory.setFeature(EXTERNAL_PARAMETER_ENTITIES, enableExternalDtdLoad);\\n         }\\n \\n     }'}}",
      "message_norm": "issue #7468: disable 'external-parameter-entities' feature by default",
      "language": "fr",
      "entities": "[('#7468', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/com/puppycrawl/tools/checkstyle/XmlLoader.java'])",
      "num_files": 1.0
    },
    {
      "index": 2239,
      "vuln_id": "GHSA-jff2-qjw8-5476",
      "cwe_id": "{'CWE-77', 'CWE-78'}",
      "score": 8.9,
      "chain": "{'https://github.com/sebhildebrandt/systeminformation/commit/01ef56cd5824ed6da1c11b37013a027fdef67524', 'https://github.com/sebhildebrandt/systeminformation/commit/0be6fcd575c05687d1076d5cd6d75af2ebae5a46', 'https://github.com/sebhildebrandt/systeminformation/commit/7922366d707de7f20995fc8e30ac3153636bf35f'}",
      "dataset": "osv",
      "summary": "Command Injection Vulnerability in systeminformation ### Impact\ncommand injection vulnerability\n\n### Patches\nProblem was fixed with a parameter check. Please upgrade to version >= 5.6.4\n\n### Workarounds\nIf you cannot upgrade, be sure to check or sanitize service parameters that are passed to si.inetLatency(), si.inetChecksite(), si.services(), si.processLoad() ... do only allow strings, reject any arrays. String sanitation works as expected.",
      "published_date": "2021-04-06",
      "chain_len": 3,
      "project": "https://github.com/sebhildebrandt/systeminformation",
      "commit_href": "https://github.com/sebhildebrandt/systeminformation/commit/01ef56cd5824ed6da1c11b37013a027fdef67524",
      "commit_sha": "01ef56cd5824ed6da1c11b37013a027fdef67524",
      "patch": "MULTI",
      "chain_ord": "['7922366d707de7f20995fc8e30ac3153636bf35f', '0be6fcd575c05687d1076d5cd6d75af2ebae5a46', '01ef56cd5824ed6da1c11b37013a027fdef67524']",
      "before_first_fix_commit": "{'0be6fcd575c05687d1076d5cd6d75af2ebae5a46'}",
      "last_fix_commit": "01ef56cd5824ed6da1c11b37013a027fdef67524",
      "chain_ord_pos": 3.0,
      "commit_datetime": "03/15/2021, 10:51:30",
      "message": "sanitizeShellString() and other security improvements",
      "author": "Sebastian Hildebrandt",
      "comments": "{'com_1': {'author': 'Aaisui', 'datetime': '06/24/2021, 03:57:58', 'body': \"In fact,I think the previous version is also safe,i try to do something bad but can't bypass  sanitizeShellString !! :( @sebhildebrandt\"}, 'com_2': {'author': 'Aaisui', 'datetime': '06/24/2021, 04:01:11', 'body': \"> In fact, I think the previous version is also safe, I try to do something bad but can't bypass sanitizeShellString !! :( @sebhildebrandt\\r\\n\\r\\nI hope you can give some trick for me XDDDD\"}}",
      "stats": "{'additions': 3, 'deletions': 4, 'total': 7}",
      "files": "{'lib/internet.js': {'additions': 3, 'deletions': 4, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/sebhildebrandt/systeminformation/raw/01ef56cd5824ed6da1c11b37013a027fdef67524/lib%2Finternet.js', 'patch': \"@@ -14,7 +14,6 @@\\n // ----------------------------------------------------------------------------------\\n \\n // const exec = require('child_process').exec;\\n-const execFile = require('child_process').execFile;\\n const util = require('./util');\\n \\n let _platform = process.platform;\\n@@ -213,9 +212,9 @@ function inetLatency(host, callback) {\\n         let result = null;\\n         try {\\n           const params = hostSanitized + ' -n 1';\\n-          execFile('ping', params.split(' '), util.execOptsWin, function (error, stdout) {\\n-            if (!error) {\\n-              let lines = stdout.toString().split('\\\\r\\\\n');\\n+          util.execSave('ping', params.split(' '), util.execOptsWin).then((stdout) => {\\n+            if (stdout) {\\n+              let lines = stdout.split('\\\\r\\\\n');\\n               lines.shift();\\n               lines.forEach(function (line) {\\n                 if ((line.toLowerCase().match(/ms/g) || []).length === 3) {\"}}",
      "message_norm": "sanitizeshellstring() and other security improvements",
      "language": "en",
      "entities": "[('sanitizeshellstring', 'SECWORD', ''), ('security', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/internet.js'])",
      "num_files": 1.0
    },
    {
      "index": 824,
      "vuln_id": "GHSA-6fc8-4gx4-v693",
      "cwe_id": "{'CWE-400', 'CWE-345'}",
      "score": 5.3,
      "chain": "{'https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff'}",
      "dataset": "osv",
      "summary": "ReDoS in Sec-Websocket-Protocol header ### Impact\n\nA specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a ws server.\n\n### Proof of concept\n\n```js\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\n  const value = 'b' + ' '.repeat(length) + 'x';\n  const start = process.hrtime.bigint();\n\n  value.trim().split(/ *, */);\n\n  const end = process.hrtime.bigint();\n\n  console.log('length = %d, time = %f ns', length, end - start);\n}\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@7.4.6 (https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff) and backported to ws@6.2.2 (https://github.com/websockets/ws/commit/78c676d2a1acefbc05292e9f7ea0a9457704bf1b) and ws@5.2.3 (https://github.com/websockets/ws/commit/76d47c1479002022a3e4357b3c9f0e23a68d4cd2).\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated by reducing the maximum allowed length of the request headers using the [`--max-http-header-size=size`](https://nodejs.org/api/cli.html#cli_max_http_header_size_size) and/or the [`maxHeaderSize`](https://nodejs.org/api/http.html#http_http_createserver_options_requestlistener) options.\n\n### Credits\n\nThe vulnerability was responsibly disclosed along with a fix in private by [Robert McLaughlin](https://github.com/robmcl4) from University of California, Santa Barbara.",
      "published_date": "2021-05-28",
      "chain_len": 1,
      "project": "https://github.com/websockets/ws",
      "commit_href": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff",
      "commit_sha": "00c425ec77993773d823f018f64a5c44e17023ff",
      "patch": "SINGLE",
      "chain_ord": "['00c425ec77993773d823f018f64a5c44e17023ff']",
      "before_first_fix_commit": "{'990306d1446faf346c76452409a4c11455690514'}",
      "last_fix_commit": "00c425ec77993773d823f018f64a5c44e17023ff",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/25/2021, 09:00:58",
      "message": "[security] Fix ReDoS vulnerability\n\nA specially crafted value of the `Sec-Websocket-Protocol` header could\nbe used to significantly slow down a ws server.\n\nPoC and fix were sent privately by Robert McLaughlin from University of\nCalifornia, Santa Barbara.",
      "author": "Luigi Pinca",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 1, 'total': 14}",
      "files": "{'lib/websocket-server.js': {'additions': 13, 'deletions': 1, 'changes': 14, 'status': 'modified', 'raw_url': 'https://github.com/websockets/ws/raw/00c425ec77993773d823f018f64a5c44e17023ff/lib%2Fwebsocket-server.js', 'patch': \"@@ -286,7 +286,7 @@ class WebSocketServer extends EventEmitter {\\n     let protocol = req.headers['sec-websocket-protocol'];\\n \\n     if (protocol) {\\n-      protocol = protocol.trim().split(/ *, */);\\n+      protocol = protocol.split(',').map(trim);\\n \\n       //\\n       // Optionally call external protocol selection handler.\\n@@ -404,3 +404,15 @@ function abortHandshake(socket, code, message, headers) {\\n   socket.removeListener('error', socketOnError);\\n   socket.destroy();\\n }\\n+\\n+/**\\n+ * Remove whitespace characters from both ends of a string.\\n+ *\\n+ * @param {String} str The string\\n+ * @return {String} A new string representing `str` stripped of whitespace\\n+ *     characters from both its beginning and end\\n+ * @private\\n+ */\\n+function trim(str) {\\n+  return str.trim();\\n+}\"}}",
      "message_norm": "[security] fix redos vulnerability\n\na specially crafted value of the `sec-websocket-protocol` header could\nbe used to significantly slow down a ws server.\n\npoc and fix were sent privately by robert mclaughlin from university of\ncalifornia, santa barbara.",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('protocol', 'SECWORD', ''), ('server', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/websocket-server.js'])",
      "num_files": 1.0
    },
    {
      "index": 3204,
      "vuln_id": "GHSA-w32p-76xr-88pc",
      "cwe_id": "{'CWE-787'}",
      "score": 7.5,
      "chain": "{'https://github.com/chakra-core/ChakraCore/commit/90f67afac6362828c750f3bccbcc1c360caf29e4', 'https://github.com/chakra-core/ChakraCore/commit/3d6226cc2d1077537220361c82e34a362c6c76ee'}",
      "dataset": "osv",
      "summary": "Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0989, CVE-2019-0991, CVE-2019-0992, CVE-2019-0993, CVE-2019-1002, CVE-2019-1024, CVE-2019-1051, CVE-2019-1052.",
      "published_date": "2021-03-29",
      "chain_len": 2,
      "project": "https://github.com/chakra-core/ChakraCore",
      "commit_href": "https://github.com/chakra-core/ChakraCore/commit/90f67afac6362828c750f3bccbcc1c360caf29e4",
      "commit_sha": "90f67afac6362828c750f3bccbcc1c360caf29e4",
      "patch": "MULTI",
      "chain_ord": "['90f67afac6362828c750f3bccbcc1c360caf29e4', '3d6226cc2d1077537220361c82e34a362c6c76ee']",
      "before_first_fix_commit": "{'d797e3f00e34c12c8c0ae52f56344325439dccd7', 'eabf77ad17010f220639e5261798da9ac14e43e3'}",
      "last_fix_commit": "3d6226cc2d1077537220361c82e34a362c6c76ee",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/15/2019, 22:37:38",
      "message": "CVE-2019-1003",
      "author": "Paul Leathers",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'lib/Runtime/Library/JavascriptProxy.cpp': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/chakra-core/ChakraCore/raw/90f67afac6362828c750f3bccbcc1c360caf29e4/lib%2FRuntime%2FLibrary%2FJavascriptProxy.cpp', 'patch': '@@ -392,6 +392,8 @@ namespace Js\\n         }\\n         propertyDescriptor->SetValue(getGetResult);\\n \\n+        threadContext->AddImplicitCallFlags(Js::ImplicitCall_External);\\n+\\n         return TRUE;\\n     }\\n \\n@@ -1907,6 +1909,9 @@ namespace Js\\n                 }\\n             }\\n         }\\n+\\n+        threadContext->AddImplicitCallFlags(Js::ImplicitCall_External);\\n+\\n         return TRUE;\\n \\n     }'}}",
      "message_norm": "cve-2019-1003",
      "language": "ro",
      "entities": "[('cve-2019-1003', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/Runtime/Library/JavascriptProxy.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 1139,
      "vuln_id": "GHSA-85r7-w5mv-c849",
      "cwe_id": "{'CWE-22'}",
      "score": 0.0,
      "chain": "{'https://github.com/rack/rack/commit/6f237e4c9fab649d3750482514f0fde76c56ab30'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects rack rack/file.rb (Rack::File) in Rack 1.5.x before 1.5.2 and 1.4.x before 1.4.5 allows attackers to access arbitrary files outside the intended root directory via a crafted PATH_INFO environment variable, probably a directory traversal vulnerability that is remotely exploitable, aka \"symlink path traversals.\"",
      "published_date": "2017-10-24",
      "chain_len": 1,
      "project": "https://github.com/rack/rack",
      "commit_href": "https://github.com/rack/rack/commit/6f237e4c9fab649d3750482514f0fde76c56ab30",
      "commit_sha": "6f237e4c9fab649d3750482514f0fde76c56ab30",
      "patch": "SINGLE",
      "chain_ord": "['6f237e4c9fab649d3750482514f0fde76c56ab30']",
      "before_first_fix_commit": "{'0cd7e9aa397f8ebb3b8481d67dbac8b4863a7f07'}",
      "last_fix_commit": "6f237e4c9fab649d3750482514f0fde76c56ab30",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/07/2013, 00:25:22",
      "message": "Prevent symlink path traversals\n\n * Closes CVE-2013-0262",
      "author": "James Tucker",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 11, 'total': 17}",
      "files": "{'lib/rack/file.rb': {'additions': 6, 'deletions': 11, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/rack/rack/raw/6f237e4c9fab649d3750482514f0fde76c56ab30/lib%2Frack%2Ffile.rb', 'patch': '@@ -41,19 +41,14 @@ def _call(env)\\n       path_info = Utils.unescape(env[\"PATH_INFO\"])\\n       parts = path_info.split SEPS\\n \\n-      parts.inject(0) do |depth, part|\\n-        case part\\n-        when \\'\\', \\'.\\'\\n-          depth\\n-        when \\'..\\'\\n-          return fail(404, \"Not Found\") if depth - 1 < 0\\n-          depth - 1\\n-        else\\n-          depth + 1\\n-        end\\n+      clean = []\\n+\\n+      parts.each do |part|\\n+        next if part.empty? || part == \\'.\\'\\n+        part == \\'..\\' ? clean.pop : clean << part\\n       end\\n \\n-      @path = F.join(@root, *parts)\\n+      @path = F.join(@root, *clean)\\n \\n       available = begin\\n         F.file?(@path) && F.readable?(@path)'}}",
      "message_norm": "prevent symlink path traversals\n\n * closes cve-2013-0262",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('symlink', 'SECWORD', ''), ('path traversals', 'SECWORD', ''), ('cve-2013-0262', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/rack/file.rb'])",
      "num_files": 1.0
    },
    {
      "index": 920,
      "vuln_id": "GHSA-7257-96vg-qf6x",
      "cwe_id": "{'CWE-74', 'CWE-94'}",
      "score": 8.5,
      "chain": "{'https://github.com/Cog-Creators/Red-DiscordBot/pull/4183/commits/e269ea0d3bc88417163c18431b1df38a9be92bfc'}",
      "dataset": "osv",
      "summary": "Remote Code Execution in Red Discord Bot ### Impact\nA RCE exploit has been discovered in the Streams module: this exploit allows Discord users with specifically crafted \"going live\" messages to inject code into the Streams module's going live message. By abusing this exploit, it's possible to perform destructive actions and/or access sensitive information.\n\n### Patches\nThis critical exploit has been fixed on version ``3.3.12`` & ``3.4``.\n\n### Workarounds\nUnloading the Streams module with ``unload streams`` can render this exploit not accessible. We still highly recommend updating to ``3.3.12`` or ``3.4`` to completely patch this issue.\n\n### References\n* https://github.com/Cog-Creators/Red-DiscordBot/pull/4183\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators/Red-DiscordBot](https://github.com/Cog-Creators/Red-DiscordBot)\n* Over on our [Discord server](https://discord.gg/red)",
      "published_date": "2020-08-21",
      "chain_len": 1,
      "project": "https://github.com/Cog-Creators/Red-DiscordBot",
      "commit_href": "https://github.com/Cog-Creators/Red-DiscordBot/pull/4183/commits/e269ea0d3bc88417163c18431b1df38a9be92bfc",
      "commit_sha": "e269ea0d3bc88417163c18431b1df38a9be92bfc",
      "patch": "SINGLE",
      "chain_ord": "['e269ea0d3bc88417163c18431b1df38a9be92bfc']",
      "before_first_fix_commit": "{'9798538438ceb37c0592aa358f6f0c5784878d71'}",
      "last_fix_commit": "e269ea0d3bc88417163c18431b1df38a9be92bfc",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/11/2020, 22:40:06",
      "message": "Added consume all to streams.",
      "author": "Kowlin",
      "comments": null,
      "stats": "{'additions': 13, 'deletions': 9, 'total': 22}",
      "files": "{'redbot/cogs/streams/streams.py': {'additions': 13, 'deletions': 9, 'changes': 22, 'status': 'modified', 'raw_url': 'https://github.com/Cog-Creators/Red-DiscordBot/raw/e269ea0d3bc88417163c18431b1df38a9be92bfc/redbot%2Fcogs%2Fstreams%2Fstreams.py', 'patch': '@@ -497,14 +497,13 @@ async def message(self, ctx: commands.Context):\\n \\n     @message.command(name=\"mention\")\\n     @commands.guild_only()\\n-    async def with_mention(self, ctx: commands.Context, message: str = None):\\n+    async def with_mention(self, ctx: commands.Context, *, message: str = None):\\n         \"\"\"Set stream alert message when mentions are enabled.\\n \\n         Use `{mention}` in the message to insert the selected mentions.\\n+        Use `{stream}` in the message to insert the channel or user name.\\n \\n-        Use `{stream.name}` in the message to insert the channel or user name.\\n-\\n-        For example: `[p]streamset message mention \"{mention}, {stream.name} is live!\"`\\n+        For example: `[p]streamset message mention \"{mention}, {stream} is live!\"`\\n         \"\"\"\\n         if message is not None:\\n             guild = ctx.guild\\n@@ -515,12 +514,12 @@ async def with_mention(self, ctx: commands.Context, message: str = None):\\n \\n     @message.command(name=\"nomention\")\\n     @commands.guild_only()\\n-    async def without_mention(self, ctx: commands.Context, message: str = None):\\n+    async def without_mention(self, ctx: commands.Context, *, message: str = None):\\n         \"\"\"Set stream alert message when mentions are disabled.\\n \\n-        Use `{stream.name}` in the message to insert the channel or user name.\\n+        Use `{stream}` in the message to insert the channel or user name.\\n \\n-        For example: `[p]streamset message nomention \"{stream.name} is live!\"`\\n+        For example: `[p]streamset message nomention \"{stream} is live!\"`\\n         \"\"\"\\n         if message is not None:\\n             guild = ctx.guild\\n@@ -720,7 +719,10 @@ async def check_streams(self):\\n                                 channel.guild\\n                             ).live_message_mention()\\n                             if alert_msg:\\n-                                content = alert_msg.format(mention=mention_str, stream=stream)\\n+                                content = alert_msg  # Stop bad things from happening here...\\n+                                content = content.replace(\"{stream.name}\", str(stream.name))  # Backwards compatability\\n+                                content = content.replace(\"{stream}\", str(stream.name))\\n+                                content = content.replace(\"{mention}\", mention_str)\\n                             else:\\n                                 content = _(\"{mention}, {stream} is live!\").format(\\n                                     mention=mention_str,\\n@@ -733,7 +735,9 @@ async def check_streams(self):\\n                                 channel.guild\\n                             ).live_message_nomention()\\n                             if alert_msg:\\n-                                content = alert_msg.format(stream=stream)\\n+                                content = alert_msg  # Stop bad things from happening here...\\n+                                content = content.replace(\"{stream.name}\", str(stream.name))  # Backwards compatability\\n+                                content = content.replace(\"{stream}\", str(stream.name))\\n                             else:\\n                                 content = _(\"{stream} is live!\").format(\\n                                     stream=escape('}}",
      "message_norm": "added consume all to streams.",
      "language": "en",
      "entities": "[('added', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['redbot/cogs/streams/streams.py'])",
      "num_files": 1.0
    },
    {
      "index": 1999,
      "vuln_id": "GHSA-h6ch-v84p-w6p9",
      "cwe_id": "{'CWE-400'}",
      "score": 0.0,
      "chain": "{'https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0'}",
      "dataset": "osv",
      "summary": "Regular Expression Denial of Service (ReDoS) A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
      "published_date": "2019-06-13",
      "chain_len": 1,
      "project": "https://github.com/kpdecker/jsdiff",
      "commit_href": "https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0",
      "commit_sha": "2aec4298639bf30fb88a00b356bf404d3551b8c0",
      "patch": "SINGLE",
      "chain_ord": "['2aec4298639bf30fb88a00b356bf404d3551b8c0']",
      "before_first_fix_commit": "{'a47aca9cb199d558e02ce406e9838356803e204f'}",
      "last_fix_commit": "2aec4298639bf30fb88a00b356bf404d3551b8c0",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/05/2018, 04:00:42",
      "message": "Optimize parch header parser",
      "author": "Kevin Decker",
      "comments": "{'com_1': {'author': 'mariosanchezgarcia', 'datetime': '07/30/2019, 17:32:24', 'body': 'Mario'}}",
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'src/patch/parse.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/kpdecker/jsdiff/raw/2aec4298639bf30fb88a00b356bf404d3551b8c0/src%2Fpatch%2Fparse.js', 'patch': '@@ -53,16 +53,16 @@ export function parsePatch(uniDiff, options = {}) {\\n   // Parses the --- and +++ headers, if none are found, no lines\\n   // are consumed.\\n   function parseFileHeader(index) {\\n-    const headerPattern = /^(---|\\\\+\\\\+\\\\+)\\\\s+([\\\\S ]*)(?:\\\\t(.*?)\\\\s*)?$/;\\n-    const fileHeader = headerPattern.exec(diffstr[i]);\\n+    const fileHeader = (/^(---|\\\\+\\\\+\\\\+)\\\\s+(.*)$/).exec(diffstr[i]);\\n     if (fileHeader) {\\n       let keyPrefix = fileHeader[1] === \\'---\\' ? \\'old\\' : \\'new\\';\\n-      let fileName = fileHeader[2].replace(/\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n+      const data = fileHeader[2].split(\\'\\\\t\\', 2);\\n+      let fileName = data[0].replace(/\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n       if (/^\".*\"$/.test(fileName)) {\\n         fileName = fileName.substr(1, fileName.length - 2);\\n       }\\n       index[keyPrefix + \\'FileName\\'] = fileName;\\n-      index[keyPrefix + \\'Header\\'] = fileHeader[3];\\n+      index[keyPrefix + \\'Header\\'] = (data[1] || \\'\\').trim();\\n \\n       i++;\\n     }'}}",
      "message_norm": "optimize parch header parser",
      "language": "en",
      "entities": "[('optimize', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/patch/parse.js'])",
      "num_files": 1.0
    },
    {
      "index": 359,
      "vuln_id": "GHSA-44r7-7p62-q3fr",
      "cwe_id": "{'CWE-330', 'CWE-338'}",
      "score": 5.9,
      "chain": "{'https://github.com/miekg/dns/commit/8ebf2e419df7857ac8919baa05248789a8ffbf33'}",
      "dataset": "osv",
      "summary": "Insecure generation of random numbers The miekg Go DNS package before 1.1.25, as used in CoreDNS before 1.6.6 and other products, improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.",
      "published_date": "2021-05-18",
      "chain_len": 1,
      "project": "https://github.com/miekg/dns",
      "commit_href": "https://github.com/miekg/dns/commit/8ebf2e419df7857ac8919baa05248789a8ffbf33",
      "commit_sha": "8ebf2e419df7857ac8919baa05248789a8ffbf33",
      "patch": "SINGLE",
      "chain_ord": "['8ebf2e419df7857ac8919baa05248789a8ffbf33']",
      "before_first_fix_commit": "{'6d0449f98180253901e9551a10ce679f35ff05be'}",
      "last_fix_commit": "8ebf2e419df7857ac8919baa05248789a8ffbf33",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/11/2019, 07:31:09",
      "message": "Use crypto/rand for random id generation. (#1044)\n\n* Use crypto/rand for random id generation.\r\n\r\nFixes #1043 and #1037\r\n\r\n* Panic on rare crypto/rand error.\r\n\r\n* Fixes in response to review.",
      "author": "Jacob Hoffman-Andrews",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 42, 'total': 52}",
      "files": "{'msg.go': {'additions': 10, 'deletions': 42, 'changes': 52, 'status': 'modified', 'raw_url': 'https://github.com/miekg/dns/raw/8ebf2e419df7857ac8919baa05248789a8ffbf33/msg.go', 'patch': '@@ -11,14 +11,12 @@ package dns\\n //go:generate go run msg_generate.go\\n \\n import (\\n-\\tcrand \"crypto/rand\"\\n+\\t\"crypto/rand\"\\n \\t\"encoding/binary\"\\n \\t\"fmt\"\\n \\t\"math/big\"\\n-\\t\"math/rand\"\\n \\t\"strconv\"\\n \\t\"strings\"\\n-\\t\"sync\"\\n )\\n \\n const (\\n@@ -73,53 +71,23 @@ var (\\n \\tErrTime          error = &Error{err: \"bad time\"}      // ErrTime indicates a timing error in TSIG authentication.\\n )\\n \\n-// Id by default, returns a 16 bits random number to be used as a\\n-// message id. The random provided should be good enough. This being a\\n-// variable the function can be reassigned to a custom function.\\n-// For instance, to make it return a static value:\\n+// Id by default returns a 16-bit random number to be used as a message id. The\\n+// number is drawn from a cryptographically secure random number generator.\\n+// This being a variable the function can be reassigned to a custom function.\\n+// For instance, to make it return a static value for testing:\\n //\\n //\\tdns.Id = func() uint16 { return 3 }\\n var Id = id\\n \\n-var (\\n-\\tidLock sync.Mutex\\n-\\tidRand *rand.Rand\\n-)\\n-\\n // id returns a 16 bits random number to be used as a\\n // message id. The random provided should be good enough.\\n func id() uint16 {\\n-\\tidLock.Lock()\\n-\\n-\\tif idRand == nil {\\n-\\t\\t// This (partially) works around\\n-\\t\\t// https://github.com/golang/go/issues/11833 by only\\n-\\t\\t// seeding idRand upon the first call to id.\\n-\\n-\\t\\tvar seed int64\\n-\\t\\tvar buf [8]byte\\n-\\n-\\t\\tif _, err := crand.Read(buf[:]); err == nil {\\n-\\t\\t\\tseed = int64(binary.LittleEndian.Uint64(buf[:]))\\n-\\t\\t} else {\\n-\\t\\t\\tseed = rand.Int63()\\n-\\t\\t}\\n-\\n-\\t\\tidRand = rand.New(rand.NewSource(seed))\\n+\\tvar output uint16\\n+\\terr := binary.Read(rand.Reader, binary.BigEndian, &output)\\n+\\tif err != nil {\\n+\\t\\tpanic(\"dns: reading random id failed: \" + err.Error())\\n \\t}\\n-\\n-\\t// The call to idRand.Uint32 must be within the\\n-\\t// mutex lock because *rand.Rand is not safe for\\n-\\t// concurrent use.\\n-\\t//\\n-\\t// There is no added performance overhead to calling\\n-\\t// idRand.Uint32 inside a mutex lock over just\\n-\\t// calling rand.Uint32 as the global math/rand rng\\n-\\t// is internally protected by a sync.Mutex.\\n-\\tid := uint16(idRand.Uint32())\\n-\\n-\\tidLock.Unlock()\\n-\\treturn id\\n+\\treturn output\\n }\\n \\n // MsgHdr is a a manually-unpacked version of (id, bits).'}}",
      "message_norm": "use crypto/rand for random id generation. (#1044)\n\n* use crypto/rand for random id generation.\r\n\r\nfixes #1043 and #1037\r\n\r\n* panic on rare crypto/rand error.\r\n\r\n* fixes in response to review.",
      "language": "en",
      "entities": "[('crypto', 'SECWORD', ''), ('#1044', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#1043', 'ISSUE', ''), ('#1037', 'ISSUE', ''), ('crypto', 'SECWORD', ''), ('error', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['msg.go'])",
      "num_files": 1.0
    },
    {
      "index": 3394,
      "vuln_id": "GHSA-x7r7-wmj8-vv5g",
      "cwe_id": "{'CWE-79'}",
      "score": 7.5,
      "chain": "{'https://github.com/octoprint/octoprint/commit/8087528e4a7ddd15c7d95ff662deb5ef7de90045'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in OctoPrint Cross-site Scripting (XSS) - DOM in GitHub repository octoprint/octoprint prior to 1.8.0. The login endpoint allows for javascript injection which may lead to account takeover in a phishing scenario.",
      "published_date": "2022-05-19",
      "chain_len": 1,
      "project": "https://github.com/octoprint/octoprint",
      "commit_href": "https://github.com/octoprint/octoprint/commit/8087528e4a7ddd15c7d95ff662deb5ef7de90045",
      "commit_sha": "8087528e4a7ddd15c7d95ff662deb5ef7de90045",
      "patch": "SINGLE",
      "chain_ord": "['8087528e4a7ddd15c7d95ff662deb5ef7de90045']",
      "before_first_fix_commit": "{'700034d028ff3518b563a7b4ba4dacc920142d07'}",
      "last_fix_commit": "8087528e4a7ddd15c7d95ff662deb5ef7de90045",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/11/2022, 11:02:52",
      "message": "\ud83d\udd12\ufe0f Sanitize and validate login redirect\n\nFixes an XSS and an open redirect issue.",
      "author": "Gina H\u00e4u\u00dfge",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 1, 'total': 12}",
      "files": "{'src/octoprint/server/views.py': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/OctoPrint/OctoPrint/raw/8087528e4a7ddd15c7d95ff662deb5ef7de90045/src%2Foctoprint%2Fserver%2Fviews.py', 'patch': '@@ -8,6 +8,7 @@\\n import os\\n import re\\n from collections import defaultdict\\n+from urllib.parse import urlparse\\n \\n from flask import (\\n     Response,\\n@@ -170,7 +171,16 @@ def _add_additional_assets(hook):\\n def login():\\n     from flask_login import current_user\\n \\n-    redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))\\n+    default_redirect_url = request.script_root + url_for(\"index\")\\n+    redirect_url = request.args.get(\"redirect\", default_redirect_url)\\n+\\n+    parsed = urlparse(redirect_url)  # check if redirect url is valid\\n+    if parsed.scheme != \"\" or parsed.netloc != \"\":\\n+        _logger.warning(\\n+            f\"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}\"\\n+        )\\n+        redirect_url = default_redirect_url\\n+\\n     permissions = sorted(\\n         filter(\\n             lambda x: x is not None and isinstance(x, OctoPrintPermission),'}}",
      "message_norm": "\ud83d\udd12\ufe0f sanitize and validate login redirect\n\nfixes an xss and an open redirect issue.",
      "language": "en",
      "entities": "[('sanitize', 'SECWORD', ''), ('validate', 'ACTION', ''), ('login', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', ''), ('open redirect', 'SECWORD', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/octoprint/server/views.py'])",
      "num_files": 1.0
    },
    {
      "index": 3158,
      "vuln_id": "GHSA-vq2r-5xvm-3hc3",
      "cwe_id": "{'CWE-908'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e'}",
      "dataset": "osv",
      "summary": "Segfault in `CTCBeamSearchDecoder` ### Impact\nDue to lack of validation in `tf.raw_ops.CTCBeamSearchDecoder`, an attacker can trigger denial of service via segmentation faults:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)\nsequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],\nshape=[8], dtype=tf.int32)\nbeam_width = 10\ntop_paths = 3\nmerge_repeated = True\n\ntf.raw_ops.CTCBeamSearchDecoder(\n  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,\n  top_paths=top_paths, merge_repeated=merge_repeated)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7/tensorflow/core/kernels/ctc_decoder_ops.cc#L68-L79) fails to detect cases when the input tensor is empty and proceeds to read data from a null buffer.\n  \n### Patches\nWe have patched the issue in GitHub commit [b1b323042264740c398140da32e93fb9c2c9f33e](https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e",
      "commit_sha": "b1b323042264740c398140da32e93fb9c2c9f33e",
      "patch": "SINGLE",
      "chain_ord": "['b1b323042264740c398140da32e93fb9c2c9f33e']",
      "before_first_fix_commit": "{'a74768f8e4efbda4def9f16ee7e13cf3922ac5f7'}",
      "last_fix_commit": "b1b323042264740c398140da32e93fb9c2c9f33e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/06/2021, 21:51:41",
      "message": "Fix SEGV in CTC ops\n\nPiperOrigin-RevId: 372430279\nChange-Id: I7ec2ad9d6f4d0980c33de45d27c6b17df5c6e26f",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 0, 'total': 3}",
      "files": "{'tensorflow/core/kernels/ctc_decoder_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/b1b323042264740c398140da32e93fb9c2c9f33e/tensorflow%2Fcore%2Fkernels%2Fctc_decoder_ops.cc', 'patch': '@@ -70,6 +70,9 @@ class CTCDecodeHelper {\\n     if (inputs_shape.dims() != 3) {\\n       return errors::InvalidArgument(\"inputs is not a 3-Tensor\");\\n     }\\n+    if (inputs_shape.num_elements() == 0) {\\n+      return errors::InvalidArgument(\"inputs must not be empty\");\\n+    }\\n \\n     const int64 max_time = inputs_shape.dim_size(0);\\n     const int64 batch_size = inputs_shape.dim_size(1);'}}",
      "message_norm": "fix segv in ctc ops\n\npiperorigin-revid: 372430279\nchange-id: i7ec2ad9d6f4d0980c33de45d27c6b17df5c6e26f",
      "language": "ca",
      "entities": "[('fix', 'ACTION', ''), ('372430279', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ctc_decoder_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1746,
      "vuln_id": "GHSA-fm67-cv37-96ff",
      "cwe_id": "{'CWE-415'}",
      "score": 5.9,
      "chain": "{'https://github.com/ultrajson/ultrajson/commit/9c20de0f77b391093967e25d01fb48671104b15b'}",
      "dataset": "osv",
      "summary": "Potential double free of buffer during string decoding ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nWhen an error occurs while reallocating the buffer for string decoding, the buffer gets freed twice.\n\nDue to how UltraJSON uses the internal decoder, this double free is impossible to trigger from Python.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nUsers should upgrade to UltraJSON 5.4.0.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nThere is no workaround.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [UltraJSON](http://github.com/ultrajson/ultrajson/issues)",
      "published_date": "2022-07-05",
      "chain_len": 1,
      "project": "https://github.com/ultrajson/ultrajson",
      "commit_href": "https://github.com/ultrajson/ultrajson/commit/9c20de0f77b391093967e25d01fb48671104b15b",
      "commit_sha": "9c20de0f77b391093967e25d01fb48671104b15b",
      "patch": "SINGLE",
      "chain_ord": "['9c20de0f77b391093967e25d01fb48671104b15b']",
      "before_first_fix_commit": "{'b21da40ead640b6153783dad506e68b4024056ef', '67ec07183342589d602e0fcf7bb1ff3e19272687'}",
      "last_fix_commit": "9c20de0f77b391093967e25d01fb48671104b15b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/02/2022, 05:11:59",
      "message": "Merge pull request from GHSA-fm67-cv37-96ff\n\nFix double free on string decoding if realloc fails",
      "author": "Hugo van Kemenade",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lib/ultrajsondec.c': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/ultrajson/ultrajson/raw/9c20de0f77b391093967e25d01fb48671104b15b/lib%2Fultrajsondec.c', 'patch': '@@ -384,7 +384,7 @@ static FASTCALL_ATTR JSOBJ FASTCALL_MSVC decode_string ( struct DecoderState *ds\\n       escStart = (JSUINT32 *)ds->dec->realloc(ds->escStart, newSize * sizeof(JSUINT32));\\n       if (!escStart)\\n       {\\n-        ds->dec->free(ds->escStart);\\n+        // Don\\'t free ds->escStart here; it gets handled in JSON_DecodeObject.\\n         return SetError(ds, -1, \"Could not reserve memory block\");\\n       }\\n       ds->escStart = escStart;'}}",
      "message_norm": "merge pull request from ghsa-fm67-cv37-96ff\n\nfix double free on string decoding if realloc fails",
      "language": "en",
      "entities": "[('ghsa-fm67-cv37-96ff', 'VULNID', 'GHSA'), ('double free', 'SECWORD', ''), ('decoding', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/ultrajsondec.c'])",
      "num_files": 1.0
    },
    {
      "index": 962,
      "vuln_id": "GHSA-75c5-f4gw-38r9",
      "cwe_id": "{'CWE-74'}",
      "score": 7.8,
      "chain": "{'https://github.com/pear/Archive_Tar/commit/0670a05fdab997036a3fc3ef113b8f5922e574da'}",
      "dataset": "osv",
      "summary": "Multiple vulnerabilities through filename manipulation in Archive_Tar Archive_Tar through 1.4.10 has :// filename sanitization only to address phar attacks, and thus any other stream-wrapper attack (such as file:// to overwrite files) can still succeed. See: https://github.com/pear/Archive_Tar/issues/33",
      "published_date": "2021-04-22",
      "chain_len": 1,
      "project": "https://github.com/pear/Archive_Tar",
      "commit_href": "https://github.com/pear/Archive_Tar/commit/0670a05fdab997036a3fc3ef113b8f5922e574da",
      "commit_sha": "0670a05fdab997036a3fc3ef113b8f5922e574da",
      "patch": "SINGLE",
      "chain_ord": "['0670a05fdab997036a3fc3ef113b8f5922e574da']",
      "before_first_fix_commit": "{'bbb4f10f71a1da2715ec6d9a683f4f23c507a49b'}",
      "last_fix_commit": "0670a05fdab997036a3fc3ef113b8f5922e574da",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/19/2020, 08:52:43",
      "message": "Fixes #33 - ensure we catch additional malicious/crafted filenames",
      "author": "Michiel Rook",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'Archive/Tar.php': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/pear/Archive_Tar/raw/0670a05fdab997036a3fc3ef113b8f5922e574da/Archive%2FTar.php', 'patch': '@@ -1730,7 +1730,7 @@ public function _readHeader($v_binary_data, &$v_header)\\n \\n         // ----- Extract the properties\\n         $v_header[\\'filename\\'] = rtrim($v_data[\\'filename\\'], \"\\\\0\");\\n-        if ($this->_maliciousFilename($v_header[\\'filename\\'])) {\\n+        if ($this->_isMaliciousFilename($v_header[\\'filename\\'])) {\\n             $this->_error(\\n                 \\'Malicious .tar detected, file \"\\' . $v_header[\\'filename\\'] .\\n                 \\'\" will not install in desired directory tree\\'\\n@@ -1800,9 +1800,9 @@ private function _tarRecToSize($tar_size)\\n      *\\n      * @return bool\\n      */\\n-    private function _maliciousFilename($file)\\n+    private function _isMaliciousFilename($file)\\n     {\\n-        if (strpos($file, \\'phar://\\') === 0) {\\n+        if (strpos($file, \\'://\\') !== false) {\\n             return true;\\n         }\\n         if (strpos($file, \\'../\\') !== false || strpos($file, \\'..\\\\\\\\\\') !== false) {\\n@@ -1838,7 +1838,7 @@ public function _readLongHeader(&$v_header)\\n \\n         $v_filename = rtrim(substr($v_filename, 0, $v_filesize), \"\\\\0\");\\n         $v_header[\\'filename\\'] = $v_filename;\\n-        if ($this->_maliciousFilename($v_filename)) {\\n+        if ($this->_isMaliciousFilename($v_filename)) {\\n             $this->_error(\\n                 \\'Malicious .tar detected, file \"\\' . $v_filename .\\n                 \\'\" will not install in desired directory tree\\''}}",
      "message_norm": "fixes #33 - ensure we catch additional malicious/crafted filenames",
      "language": "en",
      "entities": "[('fixes', 'ACTION', ''), ('#33', 'ISSUE', ''), ('ensure', 'ACTION', ''), ('malicious', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['Archive/Tar.php'])",
      "num_files": 1.0
    },
    {
      "index": 1120,
      "vuln_id": "GHSA-83rh-hx5x-q9p5",
      "cwe_id": "{'CWE-125'}",
      "score": 7.5,
      "chain": "{'https://github.com/opencv/opencv/pull/10480/commits/4ca89db22dea962690f31c1781bce5937ee91837'}",
      "dataset": "osv",
      "summary": "Out-of-bounds Read in OpenCV In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer over-read exists in the function cv::HdrDecoder::checkSignature in modules/imgcodecs/src/grfmt_hdr.cpp.",
      "published_date": "2021-10-12",
      "chain_len": 1,
      "project": "https://github.com/opencv/opencv",
      "commit_href": "https://github.com/opencv/opencv/pull/10480/commits/4ca89db22dea962690f31c1781bce5937ee91837",
      "commit_sha": "4ca89db22dea962690f31c1781bce5937ee91837",
      "patch": "SINGLE",
      "chain_ord": "['4ca89db22dea962690f31c1781bce5937ee91837']",
      "before_first_fix_commit": "{'30373d2566a3ec097f0418dc2661ec03fcfb71d6'}",
      "last_fix_commit": "4ca89db22dea962690f31c1781bce5937ee91837",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/01/2018, 13:12:21",
      "message": "imgproc(hdr): fix bounds check in HdrDecoder::checkSignature()",
      "author": "Alexander Alekhin",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 4, 'total': 12}",
      "files": "{'modules/imgcodecs/src/grfmt_hdr.cpp': {'additions': 8, 'deletions': 4, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/opencv/opencv/raw/4ca89db22dea962690f31c1781bce5937ee91837/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_hdr.cpp', 'patch': '@@ -101,10 +101,14 @@ bool HdrDecoder::readData(Mat& _img)\\n \\n bool HdrDecoder::checkSignature( const String& signature ) const\\n {\\n-    if(signature.size() >= m_signature.size() &&\\n-       (!memcmp(signature.c_str(), m_signature.c_str(), m_signature.size()) ||\\n-       !memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())))\\n-       return true;\\n+    if (signature.size() >= m_signature.size() &&\\n+        0 == memcmp(signature.c_str(), m_signature.c_str(), m_signature.size())\\n+    )\\n+        return true;\\n+    if (signature.size() >= m_signature_alt.size() &&\\n+        0 == memcmp(signature.c_str(), m_signature_alt.c_str(), m_signature_alt.size())\\n+    )\\n+        return true;\\n     return false;\\n }'}}",
      "message_norm": "imgproc(hdr): fix bounds check in hdrdecoder::checksignature()",
      "language": "en",
      "entities": "[('bounds check', 'SECWORD', ''), ('hdrdecoder::checksignature', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/imgcodecs/src/grfmt_hdr.cpp'])",
      "num_files": 1.0
    },
    {
      "index": 2873,
      "vuln_id": "GHSA-r626-fc64-3q28",
      "cwe_id": "{'CWE-362', 'CWE-119'}",
      "score": 8.1,
      "chain": "{'https://github.com/SonicFrog/abox/commit/34c2b9e51cd7b85a3366104092ca4e5e9fab227d'}",
      "dataset": "osv",
      "summary": "Data race in abox An issue was discovered in the abox crate before 0.4.1 for Rust. \n\nAffected versions of this crate implements `Send`/`Sync` for `AtomicBox<T>` without requiring `T: Send`/`T: Sync`. This allows to create data races to `T: !Sync` and send `T: !Send` to another thread.\n\nSuch behavior breaks the compile-time thread safety guarantees of Rust, and allows users to incur undefined behavior using safe Rust (e.g. memory corruption from data race).\n\nThe flaw was corrected in commit 34c2b9e by adding trait bound `T: Send` to `Send` impl for `AtomicBox<T>` and trait bound `T: Sync` to `Sync` impl for `AtomicBox<T>`.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/SonicFrog/abox",
      "commit_href": "https://github.com/SonicFrog/abox/commit/34c2b9e51cd7b85a3366104092ca4e5e9fab227d",
      "commit_sha": "34c2b9e51cd7b85a3366104092ca4e5e9fab227d",
      "patch": "SINGLE",
      "chain_ord": "['34c2b9e51cd7b85a3366104092ca4e5e9fab227d']",
      "before_first_fix_commit": "{'5abe75222bc49af6b62ea37f87d7be0c56973310'}",
      "last_fix_commit": "34c2b9e51cd7b85a3366104092ca4e5e9fab227d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/23/2021, 02:40:32",
      "message": "send/sync fix to prevent misuse",
      "author": "JOE1994",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'src/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/SonicFrog/abox/raw/34c2b9e51cd7b85a3366104092ca4e5e9fab227d/src%2Flib.rs', 'patch': '@@ -89,8 +89,8 @@ impl<T: Sized> Drop for AtomicBox<T> {\\n     }\\n }\\n \\n-unsafe impl<T: Sized> Sync for AtomicBox<T> {}\\n-unsafe impl<T: Sized> Send for AtomicBox<T> {}\\n+unsafe impl<T: Sized + Sync> Sync for AtomicBox<T> {}\\n+unsafe impl<T: Sized + Send> Send for AtomicBox<T> {}\\n \\n #[cfg(test)]\\n mod tests {'}}",
      "message_norm": "send/sync fix to prevent misuse",
      "language": "en",
      "entities": "[('prevent', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 1698,
      "vuln_id": "GHSA-f8m6-h2c7-8h9x",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/nltk/nltk/commit/1405aad979c6b8080dbbc8e0858f89b2e3690341'}",
      "dataset": "osv",
      "summary": "Inefficient Regular Expression Complexity in nltk (word_tokenize, sent_tokenize) ### Impact\nThe vulnerability is present in [`PunktSentenceTokenizer`](https://www.nltk.org/api/nltk.tokenize.punkt.html#nltk.tokenize.punkt.PunktSentenceTokenizer), [`sent_tokenize`](https://www.nltk.org/api/nltk.tokenize.html#nltk.tokenize.sent_tokenize)  and [`word_tokenize`](https://www.nltk.org/api/nltk.tokenize.html#nltk.tokenize.word_tokenize). Any users of this class, or these two functions, are vulnerable to a Regular Expression Denial of Service (ReDoS) attack. \nIn short, a specifically crafted long input to any of these vulnerable functions will cause them to take a significant amount of execution time. The effect of this vulnerability is noticeable with the following example:\n```python\nfrom nltk.tokenize import word_tokenize\n\nn = 8\nfor length in [10**i for i in range(2, n)]:\n    # Prepare a malicious input\n    text = \"a\" * length\n    start_t = time.time()\n    # Call `word_tokenize` and naively measure the execution time\n    word_tokenize(text)\n    print(f\"A length of {length:<{n}} takes {time.time() - start_t:.4f}s\")\n```\nWhich gave the following output during testing:\n```python\nA length of 100      takes 0.0060s\nA length of 1000     takes 0.0060s\nA length of 10000    takes 0.6320s\nA length of 100000   takes 56.3322s\n...\n```\nI canceled the execution of the program after running it for several hours.\n\nIf your program relies on any of the vulnerable functions for tokenizing unpredictable user input, then we would strongly recommend upgrading to a version of NLTK without the vulnerability, or applying the workaround described below.\n\n### Patches\nThe problem has been patched in NLTK 3.6.6. After the fix, running the above program gives the following result:\n```python\nA length of 100      takes 0.0070s\nA length of 1000     takes 0.0010s\nA length of 10000    takes 0.0060s\nA length of 100000   takes 0.0400s\nA length of 1000000  takes 0.3520s\nA length of 10000000 takes 3.4641s\n```\nThis output shows a linear relationship in execution time versus input length, which is desirable for regular expressions.\nWe recommend updating to NLTK 3.6.6+ if possible.\n\n### Workarounds\nThe execution time of the vulnerable functions is exponential to the length of a malicious input. With other words, the execution time can be bounded by limiting the maximum length of an input to any of the vulnerable functions. Our recommendation is to implement such a limit.\n\n### References\n* The issue showcasing the vulnerability: https://github.com/nltk/nltk/issues/2866\n* The pull request containing considerably more information on the vulnerability, and the fix: https://github.com/nltk/nltk/pull/2869\n* The commit containing the fix: 1405aad979c6b8080dbbc8e0858f89b2e3690341\n* Information on CWE-1333: Inefficient Regular Expression Complexity: https://cwe.mitre.org/data/definitions/1333.html\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [github.com/nltk/nltk](https://github.com/nltk/nltk)\n* Email us at [nltk.team@gmail.com](mailto:nltk.team@gmail.com)",
      "published_date": "2022-01-06",
      "chain_len": 1,
      "project": "https://github.com/nltk/nltk",
      "commit_href": "https://github.com/nltk/nltk/commit/1405aad979c6b8080dbbc8e0858f89b2e3690341",
      "commit_sha": "1405aad979c6b8080dbbc8e0858f89b2e3690341",
      "patch": "SINGLE",
      "chain_ord": "['1405aad979c6b8080dbbc8e0858f89b2e3690341']",
      "before_first_fix_commit": "{'0b7b076247ec41f9b6b8a94400d48ea299e4b507'}",
      "last_fix_commit": "1405aad979c6b8080dbbc8e0858f89b2e3690341",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/26/2021, 11:58:19",
      "message": "Resolved serious ReDoS in PunktSentenceTokenizer (#2869)\n\n* Resolved serious ReDOS in PunktSentenceTokenizer\r\n\r\n* Improve performance by relying on string split instead of re.search\r\n\r\n* Solved issue if sentence contains just one token",
      "author": "Tom Aarsen",
      "comments": null,
      "stats": "{'additions': 61, 'deletions': 5, 'total': 66}",
      "files": "{'nltk/tokenize/punkt.py': {'additions': 61, 'deletions': 5, 'changes': 66, 'status': 'modified', 'raw_url': 'https://github.com/nltk/nltk/raw/1405aad979c6b8080dbbc8e0858f89b2e3690341/nltk%2Ftokenize%2Fpunkt.py', 'patch': '@@ -266,7 +266,6 @@ def word_tokenize(self, s):\\n         return self._word_tokenizer_re().findall(s)\\n \\n     _period_context_fmt = r\"\"\"\\n-        \\\\S*                          # some word material\\n         %(SentEndChars)s             # a potential sentence ending\\n         (?=(?P<after_tok>\\n             %(NonWord)s              # either other punctuation\\n@@ -1284,8 +1283,7 @@ def debug_decisions(self, text):\\n         See format_debug_decision() to help make this output readable.\\n         \"\"\"\\n \\n-        for match in self._lang_vars.period_context_re().finditer(text):\\n-            decision_text = match.group() + match.group(\"after_tok\")\\n+        for match, decision_text in self._match_potential_end_contexts(text):\\n             tokens = self._tokenize_words(decision_text)\\n             tokens = list(self._annotate_first_pass(tokens))\\n             while tokens and not tokens[0].tok.endswith(self._lang_vars.sent_end_chars):\\n@@ -1333,10 +1331,68 @@ def sentences_from_text(self, text, realign_boundaries=True):\\n         \"\"\"\\n         return [text[s:e] for s, e in self.span_tokenize(text, realign_boundaries)]\\n \\n+    def _match_potential_end_contexts(self, text):\\n+        \"\"\"\\n+        Given a text, find the matches of potential sentence breaks,\\n+        alongside the contexts surrounding these sentence breaks.\\n+\\n+        Since the fix for the ReDOS discovered in issue #2866, we no longer match\\n+        the word before a potential end of sentence token. Instead, we use a separate\\n+        regex for this. As a consequence, `finditer`\\'s desire to find non-overlapping\\n+        matches no longer aids us in finding the single longest match.\\n+        Where previously, we could use::\\n+\\n+            >>> pst = PunktSentenceTokenizer()\\n+            >>> text = \"Very bad acting!!! I promise.\"\\n+            >>> list(pst._lang_vars.period_context_re().finditer(text)) # doctest: +SKIP\\n+            [<re.Match object; span=(9, 18), match=\\'acting!!!\\'>]\\n+\\n+        Now we have to find the word before (i.e. \\'acting\\') separately, and `finditer`\\n+        returns::\\n+\\n+            >>> pst = PunktSentenceTokenizer()\\n+            >>> text = \"Very bad acting!!! I promise.\"\\n+            >>> list(pst._lang_vars.period_context_re().finditer(text)) # doctest: +NORMALIZE_WHITESPACE\\n+            [<re.Match object; span=(15, 16), match=\\'!\\'>,\\n+            <re.Match object; span=(16, 17), match=\\'!\\'>,\\n+            <re.Match object; span=(17, 18), match=\\'!\\'>]\\n+\\n+        So, we need to find the word before the match from right to left, and then manually remove\\n+        the overlaps. That is what this method does::\\n+\\n+            >>> pst = PunktSentenceTokenizer()\\n+            >>> text = \"Very bad acting!!! I promise.\"\\n+            >>> pst._match_potential_end_contexts(text)\\n+            [(<re.Match object; span=(17, 18), match=\\'!\\'>, \\'acting!!! I\\')]\\n+\\n+        :param text: String of one or more sentences\\n+        :type text: str\\n+        :return: List of match-context tuples.\\n+        :rtype: List[Tuple[re.Match, str]]\\n+        \"\"\"\\n+        before_words = {}\\n+        matches = []\\n+        for match in reversed(list(self._lang_vars.period_context_re().finditer(text))):\\n+            # Ignore matches that have already been captured by matches to the right of this match\\n+            if matches and match.end() > before_start:\\n+                continue\\n+            # Find the word before the current match\\n+            split = text[: match.start()].rsplit(maxsplit=1)\\n+            before_start = len(split[0]) if len(split) == 2 else 0\\n+            before_words[match] = split[-1]\\n+            matches.append(match)\\n+\\n+        return [\\n+            (\\n+                match,\\n+                before_words[match] + match.group() + match.group(\"after_tok\"),\\n+            )\\n+            for match in matches[::-1]\\n+        ]\\n+\\n     def _slices_from_text(self, text):\\n         last_break = 0\\n-        for match in self._lang_vars.period_context_re().finditer(text):\\n-            context = match.group() + match.group(\"after_tok\")\\n+        for match, context in self._match_potential_end_contexts(text):\\n             if self.text_contains_sentbreak(context):\\n                 yield slice(last_break, match.end())\\n                 if match.group(\"next_tok\"):'}}",
      "message_norm": "resolved serious redos in punktsentencetokenizer (#2869)\n\n* resolved serious redos in punktsentencetokenizer\r\n\r\n* improve performance by relying on string split instead of re.search\r\n\r\n* solved issue if sentence contains just one token",
      "language": "en",
      "entities": "[('redos', 'SECWORD', ''), ('#2869', 'ISSUE', ''), ('redos', 'SECWORD', ''), ('improve', 'ACTION', ''), ('issue', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['nltk/tokenize/punkt.py'])",
      "num_files": 1.0
    },
    {
      "index": 2717,
      "vuln_id": "GHSA-q85f-69q7-55h2",
      "cwe_id": "{'CWE-908'}",
      "score": 7.6,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b'}",
      "dataset": "osv",
      "summary": "Uninitialized variable access in Tensorflow ### Impact\nThe [implementation of `AssignOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/assign_op.h#L30-L143) can result in copying unitialized data to a new tensor. This later results in undefined behavior.\n\nThe implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized.\n  \n### Patches\nWe have patched the issue in GitHub commit [ef1d027be116f25e25bb94a60da491c2cf55bd0b](https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b).\n    \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b",
      "commit_sha": "ef1d027be116f25e25bb94a60da491c2cf55bd0b",
      "patch": "SINGLE",
      "chain_ord": "['ef1d027be116f25e25bb94a60da491c2cf55bd0b']",
      "before_first_fix_commit": "{'eeb5e2168a5b3a701656b7366e3bc60d5234471e'}",
      "last_fix_commit": "ef1d027be116f25e25bb94a60da491c2cf55bd0b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/09/2021, 19:04:04",
      "message": "Prevent copying uninitialized data in `AssignOp`.\n\nThis prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. Several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\n\nPiperOrigin-RevId: 408654780\nChange-Id: Iad2ec40d43f5fd7ea016c20283356c12d5ddeab1",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 0, 'total': 6}",
      "files": "{'tensorflow/core/kernels/assign_op.h': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ef1d027be116f25e25bb94a60da491c2cf55bd0b/tensorflow%2Fcore%2Fkernels%2Fassign_op.h', 'patch': '@@ -50,6 +50,12 @@ class AssignOp : public OpKernel {\\n     // We always return the input ref.\\n     context->forward_ref_input_to_ref_output(0, 0);\\n \\n+    // Prevent copying uninitialized data, to solve harder to debug undefined\\n+    // behaviors that cannot be traced back to the original tensor.\\n+    OP_REQUIRES(\\n+        context, rhs.IsInitialized(),\\n+        errors::Internal(\"Right hand side of AssignOp is not initialized\"));\\n+\\n     // We can\\'t always know how this value will be used downstream, so make\\n     // conservative assumptions in specifying constraints on the memory\\n     // allocation attributes, unless the Grappler graph analysis determined that'}}",
      "message_norm": "prevent copying uninitialized data in `assignop`.\n\nthis prevents harder to debug undefined behaviors that cannot be traced back to the original tensor after assignments occur earlier in the graph execution. several of these undefined behaviors are just reference bindings to null pointers, which are caught when running under ubsan/asan.\n\npiperorigin-revid: 408654780\nchange-id: iad2ec40d43f5fd7ea016c20283356c12d5ddeab1",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('uninitialized', 'SECWORD', ''), ('prevents', 'ACTION', ''), ('408654780', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/assign_op.h'])",
      "num_files": 1.0
    },
    {
      "index": 164,
      "vuln_id": "GHSA-2xgj-xhgf-ggjv",
      "cwe_id": "{'CWE-120'}",
      "score": 3.6,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0'}",
      "dataset": "osv",
      "summary": "Heap buffer overflow in `BandedTriangularSolve` ### Impact\nAn attacker can trigger a heap buffer overflow in Eigen implementation of `tf.raw_ops.BandedTriangularSolve`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n  \nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(0,1)),dtype=tf.float32)\nrhs_array = np.array([1,1])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(1,2)),dtype=tf.float32)\ntf.raw_ops.BandedTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L269-L278) calls `ValidateInputTensors` for input validation but fails to validate that the two tensors are not empty:\n  \n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0, const Tensor& in1) {\n  OP_REQUIRES(\n      ctx, in0.dims() >= 2, \n      errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() >= 2,\n      errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1.dims()));\n}\n``` \n\nFurthermore, since `OP_REQUIRES` macro only stops execution of current function after setting `ctx->status()` to a non-OK value, callers of helper functions that use `OP_REQUIRES` must check value of `ctx->status()` before continuing. This doesn't happen [in this op's implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L219), hence the validation that is present is also not effective.\n\n### Patches\nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [0ab290774f91a23bebe30a358fde4e53ab4876a0](https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0",
      "commit_sha": "0ab290774f91a23bebe30a358fde4e53ab4876a0",
      "patch": "MULTI",
      "chain_ord": "['ba6822bd7b7324ba201a28b2f278c29a98edbef2', '0ab290774f91a23bebe30a358fde4e53ab4876a0']",
      "before_first_fix_commit": "{'327ef310be67923824814e85e13007e9699f4e0d'}",
      "last_fix_commit": "0ab290774f91a23bebe30a358fde4e53ab4876a0",
      "chain_ord_pos": 2.0,
      "commit_datetime": "05/12/2021, 01:36:43",
      "message": "Ensure validation sticks in banded_triangular_solve_op\n\nPiperOrigin-RevId: 373275480\nChange-Id: Id7717cf275b2d6fdb9441fbbe166d555182d2e79",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0ab290774f91a23bebe30a358fde4e53ab4876a0/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fbanded_triangular_solve_op.cc', 'patch': '@@ -217,6 +217,7 @@ class BandedTriangularSolveOpCpu : public OpKernel {\\n     const Tensor& in1 = ctx->input(1);\\n \\n     ValidateInputTensors(ctx, in0, in1);\\n+    if (!ctx->status().ok()) return;\\n \\n     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\\n     OP_REQUIRES('}}",
      "message_norm": "ensure validation sticks in banded_triangular_solve_op\n\npiperorigin-revid: 373275480\nchange-id: id7717cf275b2d6fdb9441fbbe166d555182d2e79",
      "language": "en",
      "entities": "[('ensure', 'ACTION', ''), ('373275480', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2885,
      "vuln_id": "GHSA-r6pg-pjwc-j585",
      "cwe_id": "{'CWE-476'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f'}",
      "dataset": "osv",
      "summary": "Null pointer dereference in `SparseFillEmptyRows` ### Impact\nAn attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndense_shape = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = 0\n    \ntf.raw_ops.SparseFillEmptyRows(\n    indices=indices, values=values, dense_shape=dense_shape,\n    default_value=default_value)\n```\n\nThis is because of missing [validation](https://github.com/tensorflow/tensorflow/blob/fdc82089d206e281c628a93771336bf87863d5e8/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L230-L231) that was covered under a `TODO`. If the `dense_shape` tensor is empty, then `dense_shape_t.vec<>()` would cause a null pointer dereference in the implementation of the op:\n\n```cc\ntemplate <typename T, typename Tindex>\nstruct SparseFillEmptyRows<CPUDevice, T, Tindex> {\n  Status operator()(OpKernelContext* context, const Tensor& default_value_t,\n                    const Tensor& indices_t, const Tensor& values_t,\n                    const Tensor& dense_shape_t,\n                    typename AsyncOpKernel::DoneCallback done) {\n    ...\n    const auto dense_shape = dense_shape_t.vec<Tindex>();\n    ... \n  }\n}\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [faa76f39014ed3b5e2c158593b1335522e573c7f](https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f",
      "commit_sha": "faa76f39014ed3b5e2c158593b1335522e573c7f",
      "patch": "SINGLE",
      "chain_ord": "['faa76f39014ed3b5e2c158593b1335522e573c7f']",
      "before_first_fix_commit": "{'fdc82089d206e281c628a93771336bf87863d5e8'}",
      "last_fix_commit": "faa76f39014ed3b5e2c158593b1335522e573c7f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/04/2021, 22:35:39",
      "message": "Fix heap-buffer-overflow issue with `tf.raw_ops.SparseFillEmptyRows`.\n\nPiperOrigin-RevId: 372009178\nChange-Id: Ia1a9e9691ecaa072f32fb39a0887b2aabd399210",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 1, 'total': 5}",
      "files": "{'tensorflow/core/kernels/sparse_fill_empty_rows_op.cc': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/faa76f39014ed3b5e2c158593b1335522e573c7f/tensorflow%2Fcore%2Fkernels%2Fsparse_fill_empty_rows_op.cc', 'patch': '@@ -228,7 +228,10 @@ void SparseFillEmptyRowsOpImpl(OpKernelContext* context,\\n                               default_value_t.shape().DebugString()),\\n       done);\\n   // TODO(ebrevdo): add shape checks between values, indices,\\n-  // dense_shape.  Also add check that dense rank > 0.\\n+  // Also add check that dense rank > 0.\\n+  OP_REQUIRES_ASYNC(context, dense_shape_t.NumElements() != 0,\\n+                    errors::InvalidArgument(\"Dense shape cannot be empty.\"),\\n+                    done);\\n \\n   using FunctorType = functor::SparseFillEmptyRows<Device, T, Tindex>;\\n   OP_REQUIRES_OK_ASYNC(context,'}}",
      "message_norm": "fix heap-buffer-overflow issue with `tf.raw_ops.sparsefillemptyrows`.\n\npiperorigin-revid: 372009178\nchange-id: ia1a9e9691ecaa072f32fb39a0887b2aabd399210",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('372009178', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_fill_empty_rows_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2714,
      "vuln_id": "GHSA-q7q9-w24q-cpgh",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting (XSS) in Apache Ambari Views A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
      "published_date": "2022-01-06",
      "chain_len": 1,
      "project": "https://github.com/apache/ambari",
      "commit_href": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
      "commit_sha": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
      "patch": "SINGLE",
      "chain_ord": "['a9cfdb9dcce63a3494c07c81ebb2cf8da218a210']",
      "before_first_fix_commit": "{'9e9ddf752f36aa9340d6dfdc23ecccfcd646fc53'}",
      "last_fix_commit": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/01/2019, 11:43:05",
      "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
      "author": "Alex Antonenko",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 2, 'total': 14}",
      "files": "{'ambari-web/app/views/common/breadcrumbs_view.js': {'additions': 12, 'deletions': 2, 'changes': 14, 'status': 'modified', 'raw_url': 'https://github.com/apache/ambari/raw/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210/ambari-web%2Fapp%2Fviews%2Fcommon%2Fbreadcrumbs_view.js', 'patch': \"@@ -149,8 +149,16 @@ App.BreadcrumbItem = Em.Object.extend({\\n   createLabel() {\\n     let label = this.get('label');\\n     let labelBindingPath = this.get('labelBindingPath');\\n+    let formattedLabel;\\n+\\n+    if (labelBindingPath) {\\n+      formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));\\n+    } else{\\n+      formattedLabel = label;\\n+    }\\n+\\n+\\n \\n-    let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;\\n     this.set('formattedLabel', this.labelPostFormat(formattedLabel));\\n   },\\n \\n@@ -216,7 +224,9 @@ App.BreadcrumbsView = Em.View.extend({\\n       }\\n       currentState = currentState.get('parentState');\\n     }\\n-    items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());\\n+    items.reverse();\\n+    items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));\\n+    items = items.map(item => App.BreadcrumbItem.extend(item).create());\\n     if (items.length) {\\n       items.get('lastObject').setProperties({\\n         disabled: true,\"}}",
      "message_norm": "ambari-25329. ambari breadcrumbs xss vulnerability",
      "language": "ca",
      "entities": "[('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ambari-web/app/views/common/breadcrumbs_view.js'])",
      "num_files": 1.0
    },
    {
      "index": 427,
      "vuln_id": "GHSA-4h44-w6fm-548g",
      "cwe_id": "{'CWE-325', 'CWE-200', 'CWE-502', 'CWE-20'}",
      "score": 9.8,
      "chain": "{'https://github.com/FriendsOfTYPO3/mediace/commit/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75'}",
      "dataset": "osv",
      "summary": "Potential Remote Code Execution in TYPO3 with mediace extension > ### Meta\n> * CVSS: `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C` (9.1)\n> * CWE-325, CWE-20, CWE-200, CWE-502\n\n### Problem\nIt has been discovered that an internal verification mechanism can be used to generate arbitrary checksums. This allows to inject arbitrary data having a valid cryptographic message authentication code (HMAC-SHA1) and can lead to various attack chains as described below.\n\n* [TYPO3-CORE-SA-2020-007](https://typo3.org/security/advisory/typo3-core-sa-2020-007), [CVE-2020-15099](https://nvd.nist.gov/vuln/detail/CVE-2020-15099): Potential Privilege Escalation\n  + the database server used for a TYPO3 installation must be accessible for an attacker (either via internet or shared hosting network)\n  + `CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C` (7.5, high)\n* [TYPO3-CORE-SA-2016-013](https://typo3.org/security/advisory/typo3-core-sa-2016-013), [CVE-2016-5091](https://nvd.nist.gov/vuln/detail/CVE-2016-5091): Insecure Deserialization & Remote Code Execution\n  + an attacker must have access to at least one Extbase plugin or module action in a TYPO3 installation\n  + `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C` (9.1, critical)\n\nThe overall severity of this vulnerability is critical (9.1) based on mentioned attack chains and the fact it does not require any privileges.\n\n### Solution\nIn case the extension is not used and required at all, it is suggested to uninstall and remove it from the system completely. Otherwise, an updated version 7.6.5 is available from the TYPO3 extension manager, Packagist and the TYPO3 extension repository:\n\n* https://extensions.typo3.org/extension/download/mediace/7.6.5/zip/\n* https://packagist.org/packages/friendsoftypo3/mediace#7.6.5\n\nAs a precautionary measure it is advised to change `encryptionKey` and database credentials in `typo3conf/LocalConfiguration.php`.\n\n### Credits\nThanks to TYPO3 security team member Oliver Hader who reported and fixed the issue.\n\n### References\n* [TYPO3-EXT-SA-2020-014](https://typo3.org/security/advisory/typo3-ext-sa-2020-014)",
      "published_date": "2020-07-29",
      "chain_len": 1,
      "project": "https://github.com/FriendsOfTYPO3/mediace",
      "commit_href": "https://github.com/FriendsOfTYPO3/mediace/commit/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "commit_sha": "fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "patch": "SINGLE",
      "chain_ord": "['fa29ffd3e8b275782a8600d2406e1b1e5e16ae75']",
      "before_first_fix_commit": "{'a06c3fdf310ea4d53e193f21a23e630a3cd9f608'}",
      "last_fix_commit": "fa29ffd3e8b275782a8600d2406e1b1e5e16ae75",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/29/2020, 13:39:55",
      "message": "[SECURITY] Restrict file validation hash generation\n\nSecurity-References: CVE-2020-15086",
      "author": "Oliver Hader",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 2, 'total': 9}",
      "files": "{'Resources/PHP/ValidateHashEID.php': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/FriendsOfTYPO3/mediace/raw/fa29ffd3e8b275782a8600d2406e1b1e5e16ae75/Resources%2FPHP%2FValidateHashEID.php', 'patch': \"@@ -14,10 +14,15 @@\\n \\n call_user_func(function() {\\n     $value = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('value');\\n-    $addition = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('addition');\\n     $scope = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::_GET('scope');\\n \\n-    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, $addition);\\n+    if (!is_string($value) || empty($value)) {\\n+        \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::setResponseCodeAndExit(\\n+            \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\HttpUtility::HTTP_STATUS_400\\n+        );\\n+    }\\n+\\n+    $content = \\\\TYPO3\\\\CMS\\\\Core\\\\Utility\\\\GeneralUtility::hmac($value, 'flashvars');\\n \\n     if ($scope === 'flashvars') {\\n         header('Content-type: application/x-www-form-urlencoded');\"}}",
      "message_norm": "[security] restrict file validation hash generation\n\nsecurity-references: cve-2020-15086",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('hash', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cve-2020-15086', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['Resources/PHP/ValidateHashEID.php'])",
      "num_files": 1.0
    },
    {
      "index": 2028,
      "vuln_id": "GHSA-h8v5-p258-pqf4",
      "cwe_id": "{'CWE-327'}",
      "score": 5.4,
      "chain": "{'https://github.com/xwiki/xwiki-platform/commit/26728f3f23658288683667a5182a916c7ecefc52'}",
      "dataset": "osv",
      "summary": "Use of a Broken or Risky Cryptographic Algorithm in XWiki Crypto API ### Impact\nXWiki Crypto API will generate X509 certificates signed by default using SHA1 with RSA, which is not considered safe anymore for use in certificate signatures, due to the risk of collisions with SHA1.\nNote that this API is never used in XWiki Standard but it might be used in some extensions of XWiki.\n\n### Patches\nThe problem has been patched in XWiki version 13.10.6, 14.3.1 and 14.4-rc-1. Since then, the Crypto API will generate X509 certificates signed by default using SHA256 with RSA.\n\n### Workarounds\nAdministrators are advised to upgrade their XWiki installation to one of the patched versions.\nIf the upgrade is not possible, it is possible to patch the module xwiki-platform-crypto in a local installation by applying the change exposed in https://github.com/xwiki/xwiki-platform/commit/26728f3f23658288683667a5182a916c7ecefc52 and re-compiling the module.\n\n### References\nhttps://jira.xwiki.org/browse/XWIKI-19676\nhttps://github.com/openssl/openssl/blob/master/CHANGES.md?plain=1#L938\nhttps://github.com/openssl/openssl/issues/16650\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Jira XWiki](https://jira.xwiki.org)\n* Email us at [security ML](mailto:security@xwiki.org)",
      "published_date": "2022-05-24",
      "chain_len": 1,
      "project": "https://github.com/xwiki/xwiki-platform",
      "commit_href": "https://github.com/xwiki/xwiki-platform/commit/26728f3f23658288683667a5182a916c7ecefc52",
      "commit_sha": "26728f3f23658288683667a5182a916c7ecefc52",
      "patch": "SINGLE",
      "chain_ord": "['26728f3f23658288683667a5182a916c7ecefc52']",
      "before_first_fix_commit": "{'3b871d906e664fa1875fbeb088404cf31e9f0094'}",
      "last_fix_commit": "26728f3f23658288683667a5182a916c7ecefc52",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/30/2022, 10:13:25",
      "message": "XWIKI-19676: Update the RSA Crypto script service to use SHA256 instead of SHA1 for certificate signature",
      "author": "Cl\u00e9ment Aubin",
      "comments": "{'com_1': {'author': 'surli', 'datetime': '05/02/2022, 06:58:35', 'body': \"I don't know much this class, but is that ok in term of backward compatibility? If you have some signed stuff in the wiki with that script service, will it be still be able to verify the signature?\"}, 'com_2': {'author': 'aubincleme', 'datetime': '05/02/2022, 07:27:55', 'body': 'Yes to me it is fine : the SignerFactory is only used to sign certificates, not verify them. For this the CMSSignedDataVerifier is used instead, which is able to verify signatures based on the different algorithms supported by the crypto API.'}, 'com_3': {'author': 'tmortagne', 'datetime': '05/02/2022, 09:10:05', 'body': \"In that case, I'm wondering if this should be cherry-picked in 13.10.x. WDYT @aubincleme ?\"}, 'com_4': {'author': 'aubincleme', 'datetime': '05/02/2022, 09:46:37', 'body': 'Yes why not ; doing it now'}, 'com_5': {'author': 'aubincleme', 'datetime': '05/02/2022, 09:48:21', 'body': 'done as part of a7c3628609f63b04de80935efa2e1f82e1356846 ;\\xa0updating issue + release notes'}}",
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'xwiki-platform-core/xwiki-platform-crypto/xwiki-platform-crypto-script/src/main/java/org/xwiki/crypto/script/RSACryptoScriptService.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/xwiki/xwiki-platform/raw/26728f3f23658288683667a5182a916c7ecefc52/xwiki-platform-core%2Fxwiki-platform-crypto%2Fxwiki-platform-crypto-script%2Fsrc%2Fmain%2Fjava%2Forg%2Fxwiki%2Fcrypto%2Fscript%2FRSACryptoScriptService.java', 'patch': '@@ -86,7 +86,7 @@ public class RSACryptoScriptService implements ScriptService\\n     private KeyPairGenerator keyPairGenerator;\\n \\n     @Inject\\n-    @Named(\"SHA1withRSAEncryption\")\\n+    @Named(\"SHA256withRSAEncryption\")\\n     private SignerFactory signerFactory;\\n \\n     @Inject'}}",
      "message_norm": "xwiki-19676: update the rsa crypto script service to use sha256 instead of sha1 for certificate signature",
      "language": "en",
      "entities": "[('update', 'ACTION', ''), ('rsa', 'SECWORD', ''), ('crypto', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('signature', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['xwiki-platform-core/xwiki-platform-crypto/xwiki-platform-crypto-script/src/main/java/org/xwiki/crypto/script/RSACryptoScriptService.java'])",
      "num_files": 1.0
    },
    {
      "index": 1589,
      "vuln_id": "GHSA-cqhr-jqvc-qw9p",
      "cwe_id": "{'CWE-79'}",
      "score": 10.0,
      "chain": "{'https://github.com/javamelody/javamelody/commit/e0497c1980acebd257d3da78dfde29ae9bdffdf6'}",
      "dataset": "osv",
      "summary": "Java Melody vulnerable to cross-site scripting JavaMelody is a monitoring tool for JavaEE applications. Versions prior to 1.61.0 are vulnerable to a cross-site scripting (XSS) attack. This issue was patched in version 1.61.0, and users are recommended to upgrade to the latest version. There are no known workarounds.",
      "published_date": "2022-07-20",
      "chain_len": 1,
      "project": "https://github.com/javamelody/javamelody",
      "commit_href": "https://github.com/javamelody/javamelody/commit/e0497c1980acebd257d3da78dfde29ae9bdffdf6",
      "commit_sha": "e0497c1980acebd257d3da78dfde29ae9bdffdf6",
      "patch": "SINGLE",
      "chain_ord": "['e0497c1980acebd257d3da78dfde29ae9bdffdf6']",
      "before_first_fix_commit": "{'7f9460e61bc2d942af3fee19041deda6c8f85816'}",
      "last_fix_commit": "e0497c1980acebd257d3da78dfde29ae9bdffdf6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/24/2016, 15:15:22",
      "message": "fix XSS",
      "author": "evernat",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'javamelody-core/src/main/java/net/bull/javamelody/HtmlCoreReport.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/javamelody/javamelody/raw/e0497c1980acebd257d3da78dfde29ae9bdffdf6/javamelody-core%2Fsrc%2Fmain%2Fjava%2Fnet%2Fbull%2Fjavamelody%2FHtmlCoreReport.java', 'patch': '@@ -365,7 +365,7 @@ void writeMessageIfNotNull(String message, String partToRedirectTo,\\n \\t\\tif (message != null) {\\r\\n \\t\\t\\twriteln(SCRIPT_BEGIN);\\r\\n \\t\\t\\t// writeDirectly pour ne pas g\u00e9rer de traductions si le message contient \\'#\\'\\r\\n-\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + javascriptEncode(message) + \"\\\\\");\");\\r\\n+\\t\\t\\twriteDirectly(\"alert(\\\\\"\" + htmlEncodeButNotSpace(javascriptEncode(message)) + \"\\\\\");\");\\r\\n \\t\\t\\twriteln(\"\");\\r\\n \\t\\t\\t// redirect vers une url \u00e9vitant que F5 du navigateur ne refasse l\\'action au lieu de faire un refresh\\r\\n \\t\\t\\tif (partToRedirectTo == null) {'}}",
      "message_norm": "fix xss",
      "language": "ca",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['javamelody-core/src/main/java/net/bull/javamelody/HtmlCoreReport.java'])",
      "num_files": 1.0
    },
    {
      "index": 1149,
      "vuln_id": "GHSA-864j-6qpp-cmrr",
      "cwe_id": "{'CWE-89'}",
      "score": 9.8,
      "chain": "{'https://github.com/alexreisner/geocoder/commit/dcdc3d8675411edce3965941a2ca7c441ca48613'}",
      "dataset": "osv",
      "summary": "SQL Injection in Geocoder sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data.",
      "published_date": "2020-06-10",
      "chain_len": 1,
      "project": "https://github.com/alexreisner/geocoder",
      "commit_href": "https://github.com/alexreisner/geocoder/commit/dcdc3d8675411edce3965941a2ca7c441ca48613",
      "commit_sha": "dcdc3d8675411edce3965941a2ca7c441ca48613",
      "patch": "SINGLE",
      "chain_ord": "['dcdc3d8675411edce3965941a2ca7c441ca48613']",
      "before_first_fix_commit": "{'1ff64c47b6fc21d9c5ce30a6549d9eaa67c81a9e'}",
      "last_fix_commit": "dcdc3d8675411edce3965941a2ca7c441ca48613",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/23/2020, 16:08:45",
      "message": "Sanitize lat/lon for SQL query.",
      "author": "Alex Reisner",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 4, 'total': 8}",
      "files": "{'lib/geocoder/sql.rb': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/alexreisner/geocoder/raw/dcdc3d8675411edce3965941a2ca7c441ca48613/lib%2Fgeocoder%2Fsql.rb', 'patch': '@@ -44,13 +44,13 @@ def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\\n     end\\n \\n     def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\\n-      spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"\\n+      spans = \"#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND \"\\n       # handle box that spans 180 longitude\\n       if sw_lng.to_f > ne_lng.to_f\\n-        spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +\\n-        \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"\\n+        spans + \"(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR \" +\\n+        \"#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})\"\\n       else\\n-        spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\"\\n+        spans + \"#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}\"\\n       end\\n     end'}}",
      "message_norm": "sanitize lat/lon for sql query.",
      "language": "fr",
      "entities": "[('sanitize', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/geocoder/sql.rb'])",
      "num_files": 1.0
    },
    {
      "index": 1578,
      "vuln_id": "GHSA-cpgw-2wxr-pww3",
      "cwe_id": "{'CWE-601'}",
      "score": 6.1,
      "chain": "{'https://github.com/gogs/gogs/commit/1f247cf8139cb483276cd8dd06385a800ce9d4b2'}",
      "dataset": "osv",
      "summary": "Open Redirect Open redirect vulnerability in Gogs before 0.12 allows remote attackers to redirect users to arbitrary websites and conduct phishing attacks via an initial /\\ substring in the user/login redirect_to parameter, related to the function isValidRedirect in routes/user/auth.go.",
      "published_date": "2021-06-29",
      "chain_len": 1,
      "project": "https://github.com/gogs/gogs",
      "commit_href": "https://github.com/gogs/gogs/commit/1f247cf8139cb483276cd8dd06385a800ce9d4b2",
      "commit_sha": "1f247cf8139cb483276cd8dd06385a800ce9d4b2",
      "patch": "SINGLE",
      "chain_ord": "['1f247cf8139cb483276cd8dd06385a800ce9d4b2']",
      "before_first_fix_commit": "{'c9bb33afc3ae35db21b26fd914bd80ca277a4e0d'}",
      "last_fix_commit": "1f247cf8139cb483276cd8dd06385a800ce9d4b2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/06/2018, 09:10:16",
      "message": "routes: fix open redirect vulnerability #5364 (#5365)",
      "author": "chromium1337",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'routes/user/auth.go': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/gogs/gogs/raw/1f247cf8139cb483276cd8dd06385a800ce9d4b2/routes%2Fuser%2Fauth.go', 'patch': \"@@ -73,10 +73,10 @@ func AutoLogin(c *context.Context) (bool, error) {\\n }\\n \\n // isValidRedirect returns false if the URL does not redirect to same site.\\n-// False: //url, http://url\\n+// False: //url, http://url, /\\\\url\\n // True: /url\\n func isValidRedirect(url string) bool {\\n-\\treturn len(url) >= 2 && url[0] == '/' && url[1] != '/'\\n+\\treturn len(url) >= 2 && url[0] == '/' && url[1] != '/' && url[1] != '\\\\\\\\'\\n }\\n \\n func Login(c *context.Context) {\"}}",
      "message_norm": "routes: fix open redirect vulnerability #5364 (#5365)",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('open redirect', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('#5364', 'ISSUE', ''), ('#5365', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['routes/user/auth.go'])",
      "num_files": 1.0
    },
    {
      "index": 2659,
      "vuln_id": "GHSA-pwwm-pwx2-2hw7",
      "cwe_id": "{'CWE-209'}",
      "score": 5.3,
      "chain": "{'https://github.com/snipe/snipe-it/commit/178e44095141ab805c282f563fb088df1a10b2e2'}",
      "dataset": "osv",
      "summary": "Generation of Error Message Containing Sensitive Information in Snipe-IT Snipe-IT prior to version 5.3.11 is vulnerable to Generation of Error Message Containing Sensitive Information.",
      "published_date": "2022-02-18",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/178e44095141ab805c282f563fb088df1a10b2e2",
      "commit_sha": "178e44095141ab805c282f563fb088df1a10b2e2",
      "patch": "SINGLE",
      "chain_ord": "['178e44095141ab805c282f563fb088df1a10b2e2']",
      "before_first_fix_commit": "{'321be4733d3997fc738f0118e1b9af5905f95439'}",
      "last_fix_commit": "178e44095141ab805c282f563fb088df1a10b2e2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/16/2022, 02:09:58",
      "message": "Added usleep :(\n\nSigned-off-by: snipe <snipe@snipe.net>",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'app/Http/Controllers/Auth/ForgotPasswordController.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/178e44095141ab805c282f563fb088df1a10b2e2/app%2FHttp%2FControllers%2FAuth%2FForgotPasswordController.php', 'patch': \"@@ -87,6 +87,8 @@ public function sendResetLinkEmail(Request $request)\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').'failed with exception: '.$e );\\n         }\\n \\n+        // Prevent timing attack to enumerate users.\\n+        usleep(500000 + random_int(0, 1500000));\\n \\n         if ($response === \\\\Password::RESET_LINK_SENT) {\\n             \\\\Log::info('Password reset attempt: User '.$request->input('username').' WAS found, password reset sent');\"}}",
      "message_norm": "added usleep :(\n\nsigned-off-by: snipe <snipe@snipe.net>",
      "language": "en",
      "entities": "[('added', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/Auth/ForgotPasswordController.php'])",
      "num_files": 1.0
    },
    {
      "index": 20,
      "vuln_id": "GHSA-247x-2f9f-5wp7",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c'}",
      "dataset": "osv",
      "summary": "Stack overflow in TensorFlow ### Impact\nThe `GraphDef` format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a `GraphDef` containing a fragment such as the following can be consumed when loading a `SavedModel`:\n\n```\n  library {\n    function {\n      signature {\n        name: \"SomeOp\"\n        description: \"Self recursive op\"\n      }\n      node_def {\n        name: \"1\"\n        op: \"SomeOp\"\n      }\n      node_def {\n        name: \"2\"\n        op: \"SomeOp\"\n      }\n    }\n  } \n```\n\nThis would result in a stack overflow during execution as resolving each `NodeDef` means resolving the function itself and its nodes.\n\n### Patches\nWe have patched the issue in GitHub commit [448a16182065bd08a202d9057dd8ca541e67996c](https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c",
      "commit_sha": "448a16182065bd08a202d9057dd8ca541e67996c",
      "patch": "SINGLE",
      "chain_ord": "['448a16182065bd08a202d9057dd8ca541e67996c']",
      "before_first_fix_commit": "{'7b1eba4193a389c7e92e01e585aeb71be97529cd'}",
      "last_fix_commit": "448a16182065bd08a202d9057dd8ca541e67996c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/08/2021, 00:49:32",
      "message": "Prevent stack overflow when FunctionLib in GraphDef has a self-recursive function.\n\nIt is likely that no recursivity is supported, but we should handle this separately.\n\nPiperOrigin-RevId: 414860329\nChange-Id: I02a2270e86282b37362ddd485eeef16fb986a9e0",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 18, 'deletions': 0, 'total': 18}",
      "files": "{'tensorflow/cc/saved_model/loader.cc': {'additions': 18, 'deletions': 0, 'changes': 18, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/448a16182065bd08a202d9057dd8ca541e67996c/tensorflow%2Fcc%2Fsaved_model%2Floader.cc', 'patch': '@@ -25,6 +25,7 @@ limitations under the License.\\n #include \"tensorflow/core/framework/attr_value.pb.h\"\\n #include \"tensorflow/core/framework/function.pb.h\"\\n #include \"tensorflow/core/framework/node_def.pb.h\"\\n+#include \"tensorflow/core/framework/op_def.pb.h\"\\n #include \"tensorflow/core/framework/tensor.pb.h\"\\n #include \"tensorflow/core/lib/io/path.h\"\\n #include \"tensorflow/core/lib/monitoring/counter.h\"\\n@@ -99,6 +100,19 @@ static Status ValidateNode(const NodeDef& node) {\\n   return Status::OK();\\n }\\n \\n+static Status ValidateFunctionNotRecursive(const FunctionDef& function) {\\n+  const auto& function_name = function.signature().name();\\n+  for (const auto& node : function.node_def()) {\\n+    if (node.op() == function_name) {\\n+      return errors::FailedPrecondition(\\n+          \"Function \", function_name,\\n+          \" is self recursive and TensorFlow does not support this scenario.\");\\n+    }\\n+  }\\n+\\n+  return Status::OK();\\n+}\\n+\\n static Status ValidateSavedTensors(const GraphDef& graph_def) {\\n   for (const auto& node : graph_def.node()) {\\n     TF_RETURN_IF_ERROR(ValidateNode(node));\\n@@ -110,6 +124,10 @@ static Status ValidateSavedTensors(const GraphDef& graph_def) {\\n       for (const auto& node : function.node_def()) {\\n         TF_RETURN_IF_ERROR(ValidateNode(node));\\n       }\\n+\\n+      // Also check that there is no recursivity in the library\\n+      // TODO(mihaimaruseac): Do more than self-recursivity\\n+      TF_RETURN_IF_ERROR(ValidateFunctionNotRecursive(function));\\n     }\\n   }'}}",
      "message_norm": "prevent stack overflow when functionlib in graphdef has a self-recursive function.\n\nit is likely that no recursivity is supported, but we should handle this separately.\n\npiperorigin-revid: 414860329\nchange-id: i02a2270e86282b37362ddd485eeef16fb986a9e0",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('414860329', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/cc/saved_model/loader.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3455,
      "vuln_id": "GHSA-xm2v-8rrw-w9pm",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535'}",
      "dataset": "osv",
      "summary": "Division by 0 in `Conv2DBackpropInput` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,\n                               out_backprop=out_backprop, strides=[1, 1, 1, 1],\n                               use_cudnn_on_gpu=True, padding='SAME',\n                               explicit_paddings=[], data_format='NHWC',\n                               dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b40060c9f697b044e3107917c797ba052f4506ab/tensorflow/core/kernels/conv_grad_input_ops.h#L625-L655) does a division by a quantity that is controlled by the caller:\n\n```cc \n  const size_t size_A = output_image_size * dims.out_depth; \n  const size_t size_B = filter_total_size * dims.out_depth;\n  const size_t size_C = output_image_size * filter_total_size;\n  const size_t work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction ? 1 :\n      (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2be2cdf3a123e231b16f766aa0e27d56b4606535](https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535",
      "commit_sha": "2be2cdf3a123e231b16f766aa0e27d56b4606535",
      "patch": "SINGLE",
      "chain_ord": "['2be2cdf3a123e231b16f766aa0e27d56b4606535']",
      "before_first_fix_commit": "{'b40060c9f697b044e3107917c797ba052f4506ab'}",
      "last_fix_commit": "2be2cdf3a123e231b16f766aa0e27d56b4606535",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/20/2021, 01:13:04",
      "message": "Prevent yet another division by zero\n\nPiperOrigin-RevId: 369343977\nChange-Id: I1a60da4cf512e60fd91e069c16e026544632fe7f",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/kernels/conv_grad_input_ops.h': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/2be2cdf3a123e231b16f766aa0e27d56b4606535/tensorflow%2Fcore%2Fkernels%2Fconv_grad_input_ops.h', 'patch': '@@ -649,6 +649,11 @@ class Conv2DCustomBackpropInputOp : public OpKernel {\\n         dims.batch_size == 1 ||\\n         thread_work_unit_size >= min_thread_work_unit_size;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size > 0,\\n+        errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"\\n+                                \"must all have at least 1 element\"));\\n+\\n     const size_t shard_size =\\n         use_parallel_contraction\\n             ? 1'}}",
      "message_norm": "prevent yet another division by zero\n\npiperorigin-revid: 369343977\nchange-id: i1a60da4cf512e60fd91e069c16e026544632fe7f",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('369343977', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/conv_grad_input_ops.h'])",
      "num_files": 1.0
    },
    {
      "index": 96,
      "vuln_id": "GHSA-2h63-qp69-fwvw",
      "cwe_id": "{'CWE-918', 'CWE-20'}",
      "score": 8.2,
      "chain": "{'https://github.com/apache/xmlgraphics-batik/commit/0ef5b661a1f77772d1110877ea9e0287987098f6'}",
      "dataset": "osv",
      "summary": "Server-side request forgery (SSRF) in Apache Batik Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",
      "published_date": "2022-01-06",
      "chain_len": 1,
      "project": "https://github.com/apache/xmlgraphics-batik",
      "commit_href": "https://github.com/apache/xmlgraphics-batik/commit/0ef5b661a1f77772d1110877ea9e0287987098f6",
      "commit_sha": "0ef5b661a1f77772d1110877ea9e0287987098f6",
      "patch": "SINGLE",
      "chain_ord": "['0ef5b661a1f77772d1110877ea9e0287987098f6']",
      "before_first_fix_commit": "{'f16e092d0c2ccee07360446e0d4adaa4be5daa1b'}",
      "last_fix_commit": "0ef5b661a1f77772d1110877ea9e0287987098f6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/02/2020, 13:59:37",
      "message": "BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "author": "Simon Steiner",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 2, 'total': 6}",
      "files": "{'batik-svgbrowser/src/main/java/org/apache/batik/apps/svgbrowser/NodePickerPanel.java': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/apache/xmlgraphics-batik/raw/0ef5b661a1f77772d1110877ea9e0287987098f6/batik-svgbrowser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbatik%2Fapps%2Fsvgbrowser%2FNodePickerPanel.java', 'patch': '@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\\n         Document doc = null;\\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n         try {\\n-            javax.xml.parsers.DocumentBuilder parser = factory\\n-                    .newDocumentBuilder();\\n+            factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\\n+            factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\\n+            factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\\n             parser.setErrorHandler(new ErrorHandler() {\\n                 public void error(SAXParseException exception)\\n                         throws SAXException {'}}",
      "message_norm": "batik-1284: dont load dtds in nodepickerpanel\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
      "language": "da",
      "entities": "[('https://svn.apache.org/repos/asf/xmlgraphics/batik/trunk@1878396', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['batik-svgbrowser/src/main/java/org/apache/batik/apps/svgbrowser/NodePickerPanel.java'])",
      "num_files": 1.0
    },
    {
      "index": 812,
      "vuln_id": "GHSA-6c8f-qphg-qjgp",
      "cwe_id": "{'CWE-668'}",
      "score": 7.5,
      "chain": "{'https://github.com/jonschlinkert/kind-of/commit/1df992ce6d5a1292048e5fe9c52c5382f941ee0b'}",
      "dataset": "osv",
      "summary": "Validation Bypass in kind-of Versions of `kind-of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. \n\n\n## Recommendation\n\nUpgrade to versions 6.0.3 or later.",
      "published_date": "2020-03-31",
      "chain_len": 1,
      "project": "https://github.com/jonschlinkert/kind-of",
      "commit_href": "https://github.com/jonschlinkert/kind-of/commit/1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
      "commit_sha": "1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
      "patch": "SINGLE",
      "chain_ord": "['1df992ce6d5a1292048e5fe9c52c5382f941ee0b']",
      "before_first_fix_commit": "{'975c13a7cfaf25d811475823824af3a9c04b0ba8', '4da96c0047906d22a4d6964a668d3abaca122e50'}",
      "last_fix_commit": "1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/16/2020, 16:37:23",
      "message": "Merge pull request #31 from xiaofen9/master\n\nfix type checking vul in ctorName",
      "author": "Brian Woodward",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/jonschlinkert/kind-of/raw/1df992ce6d5a1292048e5fe9c52c5382f941ee0b/index.js', 'patch': \"@@ -66,7 +66,7 @@ module.exports = function kindOf(val) {\\n };\\n \\n function ctorName(val) {\\n-  return val.constructor ? val.constructor.name : null;\\n+  return val.constructor && typeof val.constructor === 'function' ? val.constructor.name : null;\\n }\\n \\n function isArray(val) {\"}}",
      "message_norm": "merge pull request #31 from xiaofen9/master\n\nfix type checking vul in ctorname",
      "language": "en",
      "entities": "[('#31', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 2213,
      "vuln_id": "GHSA-j85q-whc9-g4p9",
      "cwe_id": "{'CWE-338'}",
      "score": 5.9,
      "chain": "{'https://github.com/star7th/showdoc/commit/4b962c1740311e0d46775023b6acba39ad60e370'}",
      "dataset": "osv",
      "summary": "Use of Cryptographically Weak Pseudo-Random Number Generator in showdoc showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
      "published_date": "2021-09-02",
      "chain_len": 1,
      "project": "https://github.com/star7th/showdoc",
      "commit_href": "https://github.com/star7th/showdoc/commit/4b962c1740311e0d46775023b6acba39ad60e370",
      "commit_sha": "4b962c1740311e0d46775023b6acba39ad60e370",
      "patch": "SINGLE",
      "chain_ord": "['4b962c1740311e0d46775023b6acba39ad60e370']",
      "before_first_fix_commit": "{'db53edb8323dd358dc955e71d8f1fad5dab4ab7b', '034328ab35fc2bf640bf7fef2be40a5d13123b11'}",
      "last_fix_commit": "4b962c1740311e0d46775023b6acba39ad60e370",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/03/2021, 17:19:35",
      "message": "Merge pull request #1438 from michaellrowley/security-patch\n\nCVE-2021-3678 Patch",
      "author": "star7th",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'server/Application/Api/Controller/AdminSettingController.class.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/star7th/showdoc/raw/4b962c1740311e0d46775023b6acba39ad60e370/server%2FApplication%2FApi%2FController%2FAdminSettingController.class.php', 'patch': '@@ -166,7 +166,7 @@ public function getLoginSecretKey(){\\n         $this->checkAdmin();\\n         $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\\n         if(!$login_secret_key){\\n-            $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\\n+            $login_secret_key = bin2hex( random_bytes( 16 ) );\\n             D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\\n         }\\n         $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\\n@@ -176,7 +176,7 @@ public function getLoginSecretKey(){\\n     public function resetLoginSecretKey(){\\n         $login_user = $this->checkLogin();\\n         $this->checkAdmin();\\n-        $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\\n+        $login_secret_key = bin2hex( random_bytes( 16 ) );\\n         D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\\n         $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));'}}",
      "message_norm": "merge pull request #1438 from michaellrowley/security-patch\n\ncve-2021-3678 patch",
      "language": "en",
      "entities": "[('#1438', 'ISSUE', ''), ('security', 'SECWORD', ''), ('cve-2021-3678', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/Application/Api/Controller/AdminSettingController.class.php'])",
      "num_files": 1.0
    },
    {
      "index": 1348,
      "vuln_id": "GHSA-9959-6p3m-wxpc",
      "cwe_id": "{'CWE-119'}",
      "score": 0.0,
      "chain": "{'https://github.com/netty/netty/commit/2fa9400a59d0563a66908aba55c41e7285a04994'}",
      "dataset": "osv",
      "summary": "Denial of service in Netty The SslHandler in Netty before 3.9.2 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a crafted SSLv2Hello message.",
      "published_date": "2020-06-30",
      "chain_len": 1,
      "project": "https://github.com/netty/netty",
      "commit_href": "https://github.com/netty/netty/commit/2fa9400a59d0563a66908aba55c41e7285a04994",
      "commit_sha": "2fa9400a59d0563a66908aba55c41e7285a04994",
      "patch": "SINGLE",
      "chain_ord": "['2fa9400a59d0563a66908aba55c41e7285a04994']",
      "before_first_fix_commit": "{'129c17aaa4ac5c611519ef480c35a12e8282b807'}",
      "last_fix_commit": "2fa9400a59d0563a66908aba55c41e7285a04994",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/10/2014, 08:55:19",
      "message": "Fix a bug where SslHandler does not handle SSLv2Hello correctly\n\nMotivation:\n\nWhen a SSLv2Hello message is received, SSLEngine expects the application buffer size to be more than 30KB which is larger than what SslBufferPool can provide.  SSLEngine will always return with BUFFER_OVERFLOW status, blocking the SSL session from continuing the handshake.\n\nModifications:\n\nWhen SSLEngine.getSession().getApplicationBufferSize() returns a value larger than what SslBufferPool provides, allocate a temporary heap buffer.\n\nResult:\n\nSSLv2Hello is handled correctly.",
      "author": "Trustin Lee",
      "comments": "{'com_1': {'author': 'normanmaurer', 'datetime': '06/10/2014, 10:12:19', 'body': \"shouldn't this check against remaining() ?\"}, 'com_2': {'author': 'trustin', 'datetime': '06/10/2014, 11:07:26', 'body': 'Not really because we always clear the buffer at the finally block below.'}}",
      "stats": "{'additions': 15, 'deletions': 5, 'total': 20}",
      "files": "{'src/main/java/org/jboss/netty/handler/ssl/SslHandler.java': {'additions': 15, 'deletions': 5, 'changes': 20, 'status': 'modified', 'raw_url': 'https://github.com/netty/netty/raw/2fa9400a59d0563a66908aba55c41e7285a04994/src%2Fmain%2Fjava%2Forg%2Fjboss%2Fnetty%2Fhandler%2Fssl%2FSslHandler.java', 'patch': '@@ -1268,8 +1268,18 @@ private ChannelBuffer unwrap(\\n                     // always contain at least one record in decode().  Therefore, if SSLEngine.unwrap() returns\\n                     // BUFFER_OVERFLOW, it is always resolved by retrying after emptying the application buffer.\\n                     for (;;) {\\n+                        final int outAppBufSize = engine.getSession().getApplicationBufferSize();\\n+                        final ByteBuffer outAppBuf;\\n+                        if (nioOutAppBuf.capacity() < outAppBufSize) {\\n+                            // SSLEngine wants a buffer larger than what the pool can provide.\\n+                            // Allocate a temporary heap buffer.\\n+                            outAppBuf = ByteBuffer.allocate(outAppBufSize);\\n+                        } else {\\n+                            outAppBuf = nioOutAppBuf;\\n+                        }\\n+\\n                         try {\\n-                            result = engine.unwrap(nioInNetBuf, nioOutAppBuf);\\n+                            result = engine.unwrap(nioInNetBuf, outAppBuf);\\n                             switch (result.getStatus()) {\\n                                 case CLOSED:\\n                                     // notify about the CLOSED state of the SSLEngine. See #137\\n@@ -1283,21 +1293,21 @@ private ChannelBuffer unwrap(\\n \\n                             break;\\n                         } finally {\\n-                            nioOutAppBuf.flip();\\n+                            outAppBuf.flip();\\n \\n                             // Sync the offset of the inbound buffer.\\n                             nettyInNetBuf.readerIndex(\\n                                     nettyInNetBufStartOffset + nioInNetBuf.position() - nioInNetBufStartOffset);\\n \\n                             // Copy the unwrapped data into a smaller buffer.\\n-                            if (nioOutAppBuf.hasRemaining()) {\\n+                            if (outAppBuf.hasRemaining()) {\\n                                 if (nettyOutAppBuf == null) {\\n                                     ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();\\n                                     nettyOutAppBuf = factory.getBuffer(initialNettyOutAppBufCapacity);\\n                                 }\\n-                                nettyOutAppBuf.writeBytes(nioOutAppBuf);\\n+                                nettyOutAppBuf.writeBytes(outAppBuf);\\n                             }\\n-                            nioOutAppBuf.clear();\\n+                            outAppBuf.clear();\\n                         }\\n                     }'}}",
      "message_norm": "fix a bug where sslhandler does not handle sslv2hello correctly\n\nmotivation:\n\nwhen a sslv2hello message is received, sslengine expects the application buffer size to be more than 30kb which is larger than what sslbufferpool can provide.  sslengine will always return with buffer_overflow status, blocking the ssl session from continuing the handshake.\n\nmodifications:\n\nwhen sslengine.getsession().getapplicationbuffersize() returns a value larger than what sslbufferpool provides, allocate a temporary heap buffer.\n\nresult:\n\nsslv2hello is handled correctly.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('buffer_overflow', 'SECWORD', ''), ('ssl', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/org/jboss/netty/handler/ssl/SslHandler.java'])",
      "num_files": 1.0
    },
    {
      "index": 974,
      "vuln_id": "GHSA-763j-q7wv-vf3m",
      "cwe_id": "{'CWE-601'}",
      "score": 7.1,
      "chain": "{'https://github.com/DSpace/DSpace/commit/f7758457b7ec3489d525e39aa753cc70809d9ad9', 'https://github.com/DSpace/DSpace/commit/5f72424a478f59061dcc516b866dcc687bc3f9de'}",
      "dataset": "osv",
      "summary": "JSPUI's controlled vocabulary feature vulnerable to Open Redirect before v6.4 and v5.11 ### Impact\nThe JSPUI controlled vocabulary servlet is vulnerable to an open redirect attack, where an attacker can craft a malicious URL that looks like a legitimate DSpace/repository URL.  When that URL is clicked by the target, it redirects them to a site of the attacker's choice.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.x via commit: https://github.com/DSpace/DSpace/commit/f7758457b7ec3489d525e39aa753cc70809d9ad9\n* 6.x patch file: https://github.com/DSpace/DSpace/commit/f7758457b7ec3489d525e39aa753cc70809d9ad9.patch (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n\n_DSpace 5.x:_\n* Fixed in 5.x via commit: https://github.com/DSpace/DSpace/commit/5f72424a478f59061dcc516b866dcc687bc3f9de\n* 5.x patch file: https://github.com/DSpace/DSpace/commit/5f72424a478f59061dcc516b866dcc687bc3f9de.patch (may be applied manually if an immediate upgrade to 5.11 or 6,4 or above is not possible)\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs / configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered and reported by Johannes Moritz of Ripstech.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
      "published_date": "2022-08-06",
      "chain_len": 2,
      "project": "https://github.com/DSpace/DSpace",
      "commit_href": "https://github.com/DSpace/DSpace/commit/f7758457b7ec3489d525e39aa753cc70809d9ad9",
      "commit_sha": "f7758457b7ec3489d525e39aa753cc70809d9ad9",
      "patch": "MULTI",
      "chain_ord": "['f7758457b7ec3489d525e39aa753cc70809d9ad9', '5f72424a478f59061dcc516b866dcc687bc3f9de']",
      "before_first_fix_commit": "{'3b0cdee734d0ee3f2c2cbdcc07c1135c1c048be8'}",
      "last_fix_commit": "5f72424a478f59061dcc516b866dcc687bc3f9de",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/08/2020, 00:48:56",
      "message": "[DS-4133] Improve URL handling in Controlled Vocab JSPUI servlet",
      "author": "Kim Shepherd",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 2, 'total': 12}",
      "files": "{'dspace-jspui/src/main/java/org/dspace/app/webui/servlet/ControlledVocabularyServlet.java': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/DSpace/DSpace/raw/f7758457b7ec3489d525e39aa753cc70809d9ad9/dspace-jspui%2Fsrc%2Fmain%2Fjava%2Forg%2Fdspace%2Fapp%2Fwebui%2Fservlet%2FControlledVocabularyServlet.java', 'patch': '@@ -14,6 +14,7 @@\\n import javax.servlet.http.HttpServletRequest;\\n import javax.servlet.http.HttpServletResponse;\\n \\n+import org.apache.log4j.Logger;\\n import org.dspace.authorize.AuthorizeException;\\n import org.dspace.core.Context;\\n \\n@@ -25,8 +26,8 @@\\n  */\\n public class ControlledVocabularyServlet extends DSpaceServlet\\n {\\n-    // private static Logger log =\\n-    // Logger.getLogger(ControlledVocabularyServlet.class);\\n+    private static Logger log =\\n+    Logger.getLogger(ControlledVocabularyServlet.class);\\n \\n     protected void doDSGet(Context context, HttpServletRequest request,\\n             HttpServletResponse response) throws ServletException, IOException,\\n@@ -37,6 +38,13 @@ protected void doDSGet(Context context, HttpServletRequest request,\\n         String filter = \"\";\\n         String callerUrl = request.getParameter(\"callerUrl\");\\n \\n+        // callerUrl must starts with URL outside DSpace request context path\\n+        if(!callerUrl.startsWith(request.getContextPath())) {\\n+            log.error(\"Controlled vocabulary caller URL would result in redirect outside DSpace web app: \" + callerUrl + \". Rejecting request with 400 Bad Request.\");\\n+            response.sendError(400, \"The caller URL must be within the DSpace base URL of \" + request.getContextPath());\\n+            return;\\n+        }\\n+\\n         if (request.getParameter(\"ID\") != null)\\n         {\\n             ID = request.getParameter(\"ID\");'}}",
      "message_norm": "[ds-4133] improve url handling in controlled vocab jspui servlet",
      "language": "en",
      "entities": "[('improve', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['dspace-jspui/src/main/java/org/dspace/app/webui/servlet/ControlledVocabularyServlet.java'])",
      "num_files": 1.0
    },
    {
      "index": 1755,
      "vuln_id": "GHSA-fphq-gw9m-ghrv",
      "cwe_id": "{'CWE-617'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2'}",
      "dataset": "osv",
      "summary": "CHECK-fail in `CTCGreedyDecoder` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.\n\n### Patches \nWe have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n                      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        \n                      \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "commit_sha": "ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "patch": "SINGLE",
      "chain_ord": "['ea3b43e98c32c97b35d52b4c66f9107452ca8fb2']",
      "before_first_fix_commit": "{'1615440b17b364b875eb06f43d087381f1460a65'}",
      "last_fix_commit": "ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/22/2021, 22:11:05",
      "message": "Fix `tf.raw_ops.CTCGreedyDecoder` CHECK failure.\n\nPiperOrigin-RevId: 369960465\nChange-Id: If0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'tensorflow/core/kernels/ctc_decoder_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2/tensorflow%2Fcore%2Fkernels%2Fctc_decoder_ops.cc', 'patch': '@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {\\n         int prev_indices = -1;\\n         for (int t = 0; t < seq_len_t(b); ++t) {\\n           int max_class_indices;\\n+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\\n+                      errors::InvalidArgument(\"Invalid input dimensions.\"));\\n           log_prob_t(b, 0) +=\\n               -RowMax<T>(input_list_t[t], b, &max_class_indices);\\n           if (max_class_indices != blank_index &&'}}",
      "message_norm": "fix `tf.raw_ops.ctcgreedydecoder` check failure.\n\npiperorigin-revid: 369960465\nchange-id: if0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('tf.raw_ops.ctcgreedydecoder', 'SECWORD', ''), ('369960465', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/ctc_decoder_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1719,
      "vuln_id": "GHSA-fcxw-hhxq-48wx",
      "cwe_id": "{'CWE-200'}",
      "score": 3.3,
      "chain": "{'https://github.com/jenkinsci/git-client-plugin/commit/75ea3fe05650fc6ca09046a72493e2b3f066fb98'}",
      "dataset": "osv",
      "summary": "Insecure temporary file usage in Jenkins Git Client Plugin Jenkins Git Client Plugin 2.4.2 and earlier creates temporary file with insecure permissions resulting in information disclosure",
      "published_date": "2022-05-17",
      "chain_len": 1,
      "project": "https://github.com/jenkinsci/git-client-plugin",
      "commit_href": "https://github.com/jenkinsci/git-client-plugin/commit/75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "commit_sha": "75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "patch": "SINGLE",
      "chain_ord": "['75ea3fe05650fc6ca09046a72493e2b3f066fb98']",
      "before_first_fix_commit": "{'716e3ff56074c018c76cb35826269b976540e7e7'}",
      "last_fix_commit": "75ea3fe05650fc6ca09046a72493e2b3f066fb98",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/13/2017, 04:38:54",
      "message": "[Fix SECURITY-445] better protect temporary files\n\nTemporary files were previously written to the system temporary directory\nwith default permissions.  A malicious actor could have captured sensitive\ninformation by reading files from the temporary directory.  The temporary\nfiles typically are only on the file system for the duration of a single\ncommand line git invocation, but cloning a large git repo could require\nan extended time with those sensitive files in the temporary directory.\n\nThis change sets permissions on the temporary files to be readable only by\nthe file owner. If a workspace is available, a temporary directory adjacent\nto the workspace is used instead of the system temporary directory.",
      "author": "Mark Waite",
      "comments": null,
      "stats": "{'additions': 42, 'deletions': 9, 'total': 51}",
      "files": "{'src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java': {'additions': 42, 'deletions': 9, 'changes': 51, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/git-client-plugin/raw/75ea3fe05650fc6ca09046a72493e2b3f066fb98/src%2Fmain%2Fjava%2Forg%2Fjenkinsci%2Fplugins%2Fgitclient%2FCliGitAPIImpl.java', 'patch': '@@ -42,6 +42,11 @@\\n import java.net.URISyntaxException;\\n import java.nio.charset.Charset;\\n import java.nio.file.Files;\\n+import java.nio.file.Path;\\n+import java.nio.file.Paths;\\n+import java.nio.file.attribute.FileAttribute;\\n+import java.nio.file.attribute.PosixFilePermission;\\n+import java.nio.file.attribute.PosixFilePermissions;\\n import java.text.MessageFormat;\\n import java.util.ArrayList;\\n import java.util.Arrays;\\n@@ -1411,6 +1416,34 @@ public void addNote(String note, String namespace ) throws GitException, Interru\\n         createNote(note,namespace,\"add\");\\n     }\\n \\n+    private File createTempFileInSystemDir(String prefix, String suffix) throws IOException {\\n+        if (isWindows()) {\\n+            return Files.createTempFile(prefix, suffix).toFile();\\n+        }\\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\\n+        return Files.createTempFile(prefix, suffix, fileAttribute).toFile();\\n+    }\\n+\\n+    private File createTempFile(String prefix, String suffix) throws IOException {\\n+        if (workspace == null) {\\n+            return createTempFileInSystemDir(prefix, suffix);\\n+        }\\n+        File workspaceTmp = new File(workspace.getAbsolutePath() + \"@tmp\");\\n+        if (!workspaceTmp.isDirectory() && !workspaceTmp.mkdirs()) {\\n+            if (!workspaceTmp.isDirectory()) {\\n+                return createTempFileInSystemDir(prefix, suffix);\\n+            }\\n+        }\\n+        Path tmpPath = Paths.get(workspaceTmp.getAbsolutePath());\\n+        if (isWindows()) {\\n+            return Files.createTempFile(tmpPath, prefix, suffix).toFile();\\n+        }\\n+        Set<PosixFilePermission> ownerOnly = PosixFilePermissions.fromString(\"rw-------\");\\n+        FileAttribute fileAttribute = PosixFilePermissions.asFileAttribute(ownerOnly);\\n+        return Files.createTempFile(tmpPath, prefix, suffix, fileAttribute).toFile();\\n+    }\\n+\\n     private void deleteTempFile(File tempFile) {\\n         if (tempFile != null && !tempFile.delete() && tempFile.exists()) {\\n             listener.getLogger().println(\"[WARNING] temp file \" + tempFile + \" not deleted\");\\n@@ -1420,7 +1453,7 @@ private void deleteTempFile(File tempFile) {\\n     private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {\\n         File msg = null;\\n         try {\\n-            msg = File.createTempFile(\"git-note\", \"txt\", workspace);\\n+            msg = createTempFile(\"git-note\", \".txt\");\\n             FileUtils.writeStringToFile(msg,note);\\n             launchCommand(\"notes\", \"--ref=\" + namespace, command, \"-F\", msg.getAbsolutePath());\\n         } catch (IOException | GitException e) {\\n@@ -1561,7 +1594,7 @@ private String launchCommandWithCredentials(ArgumentListBuilder args, File workD\\n     }\\n \\n     private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {\\n-        File key = File.createTempFile(\"ssh\", \"key\");\\n+        File key = createTempFile(\"ssh\", \".key\");\\n         try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {\\n             List<String> privateKeys = sshUser.getPrivateKeys();\\n             for (String s : privateKeys) {\\n@@ -1597,7 +1630,7 @@ private String quoteUnixCredentials(String str) {\\n     }\\n \\n     private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\\n-        File ssh = File.createTempFile(\"pass\", \".bat\");\\n+        File ssh = createTempFile(\"pass\", \".bat\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             // avoid echoing command as part of the password\\n             w.println(\"@echo off\");\\n@@ -1610,7 +1643,7 @@ private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOExcepti\\n     }\\n \\n     private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {\\n-        File ssh = File.createTempFile(\"pass\", \".sh\");\\n+        File ssh = createTempFile(\"pass\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             w.println(\"#!/bin/sh\");\\n             w.println(\"echo \\'\" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + \"\\'\");\\n@@ -1621,7 +1654,7 @@ private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException\\n \\n     /* Package protected for testability */\\n     File createWindowsBatFile(String userName, String password) throws IOException {\\n-        File askpass = File.createTempFile(\"pass\", \".bat\");\\n+        File askpass = createTempFile(\"pass\", \".bat\");\\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\\n             w.println(\"@set arg=%~1\");\\n             w.println(\"@if (%arg:~0,8%)==(Username) echo \" + escapeWindowsCharsForUnquotedString(userName));\\n@@ -1636,7 +1669,7 @@ private File createWindowsStandardAskpass(StandardUsernamePasswordCredentials cr\\n     }\\n \\n     private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {\\n-        File askpass = File.createTempFile(\"pass\", \".sh\");\\n+        File askpass = createTempFile(\"pass\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {\\n             w.println(\"#!/bin/sh\");\\n             w.println(\"case \\\\\"$1\\\\\" in\");\\n@@ -1766,7 +1799,7 @@ private File getSSHExeFromGitExeParentDir(String userGitExe) {\\n     }\\n \\n     private File createWindowsGitSSH(File key, String user) throws IOException {\\n-        File ssh = File.createTempFile(\"ssh\", \".bat\");\\n+        File ssh = createTempFile(\"ssh\", \".bat\");\\n \\n         File sshexe = getSSHExecutable();\\n \\n@@ -1779,7 +1812,7 @@ private File createWindowsGitSSH(File key, String user) throws IOException {\\n     }\\n \\n     private File createUnixGitSSH(File key, String user) throws IOException {\\n-        File ssh = File.createTempFile(\"ssh\", \".sh\");\\n+        File ssh = createTempFile(\"ssh\", \".sh\");\\n         try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {\\n             w.println(\"#!/bin/sh\");\\n             // ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set\\n@@ -2383,7 +2416,7 @@ public void branch(String name) throws GitException, InterruptedException {\\n     public void commit(String message) throws GitException, InterruptedException {\\n         File f = null;\\n         try {\\n-            f = File.createTempFile(\"gitcommit\", \".txt\");\\n+            f = createTempFile(\"gitcommit\", \".txt\");\\n             try (OutputStream out = Files.newOutputStream(f.toPath())) {\\n                 out.write(message.getBytes(Charset.defaultCharset().toString()));\\n             }'}}",
      "message_norm": "[fix security-445] better protect temporary files\n\ntemporary files were previously written to the system temporary directory\nwith default permissions.  a malicious actor could have captured sensitive\ninformation by reading files from the temporary directory.  the temporary\nfiles typically are only on the file system for the duration of a single\ncommand line git invocation, but cloning a large git repo could require\nan extended time with those sensitive files in the temporary directory.\n\nthis change sets permissions on the temporary files to be readable only by\nthe file owner. if a workspace is available, a temporary directory adjacent\nto the workspace is used instead of the system temporary directory.",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('security-445', 'SECWORD', ''), ('protect', 'SECWORD', ''), ('permissions', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('sensitive', 'SECWORD', ''), ('permissions', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/org/jenkinsci/plugins/gitclient/CliGitAPIImpl.java'])",
      "num_files": 1.0
    },
    {
      "index": 262,
      "vuln_id": "GHSA-3hxh-8cp2-g4hg",
      "cwe_id": "{'CWE-416'}",
      "score": 6.6,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1'}",
      "dataset": "osv",
      "summary": "Use after free and segfault in shape inference functions ### Impact\nWhen running shape functions, some functions (such as `MutableHashTableShape`) produce extra output information in the form of a `ShapeAndType` struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but we were not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types.\n\n### Patches\nWe have patched the issue in GitHub commit [ee119d4a498979525046fba1c3dd3f13a039fbb1](https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1).                                                                                                          \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1",
      "commit_sha": "ee119d4a498979525046fba1c3dd3f13a039fbb1",
      "patch": "SINGLE",
      "chain_ord": "['ee119d4a498979525046fba1c3dd3f13a039fbb1']",
      "before_first_fix_commit": "{'f118ff1538ac7aa8a628bba03fe66dc6811cc7fc'}",
      "last_fix_commit": "ee119d4a498979525046fba1c3dd3f13a039fbb1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/14/2021, 19:43:17",
      "message": "Fix segmentation fault in shape inference logic.\n\nWhen running shape functions, some functions (such as `MutableHashTableShape`)\nproduce extra output information in the form of a `ShapeAndType` struct.  The\nshapes embedded in this struct are owned by an inference context that is\ncleaned up almost immediately; if the upstream code attempts to access this\nshape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them\n(and thus putting the newly created shape under ownership of an inference\ncontext that will not die), but we were not doing the same for shapes and\ntypes.  This commit fixes that by doing similar logic on output shapes and\ntypes.\n\nPiperOrigin-RevId: 384761124\nChange-Id: I07c0c42d29dfbb55bfa13ec1f09ef825fb0a1a1d",
      "author": "Daniel Ellis",
      "comments": null,
      "stats": "{'additions': 19, 'deletions': 2, 'total': 21}",
      "files": "{'tensorflow/core/common_runtime/shape_refiner.cc': {'additions': 19, 'deletions': 2, 'changes': 21, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ee119d4a498979525046fba1c3dd3f13a039fbb1/tensorflow%2Fcore%2Fcommon_runtime%2Fshape_refiner.cc', 'patch': '@@ -120,9 +120,26 @@ Status ShapeRefiner::InferShapesForFunctionSubNode(\\n     TF_RETURN_IF_ERROR(outer_context->MakeShapeFromShapeProto(proto, &handle));\\n     outer_context->set_output(index, handle);\\n \\n-    auto* resource = node_context->input_handle_shapes_and_types(0);\\n+    const std::vector<ShapeAndType>* resource =\\n+        node_context->input_handle_shapes_and_types(0);\\n     if (resource) {\\n-      outer_context->set_output_handle_shapes_and_types(index, *resource);\\n+      // `ShapesAndType`s contain `ShapeHandle`s.  These `ShapeHandle`s point\\n+      // to `Shape`s that are owned by a different inference context too.  We\\n+      // need to copy them to the outer context to prevent them from being\\n+      // destroyed before they are used.\\n+      std::vector<ShapeAndType> copied_shapes_and_types;\\n+      for (auto& shape_and_type : *resource) {\\n+        ShapeHandle handle;\\n+        TensorShapeProto proto;\\n+        node_context->ShapeHandleToProto(shape_and_type.shape, &proto);\\n+        TF_RETURN_IF_ERROR(\\n+            outer_context->MakeShapeFromShapeProto(proto, &handle));\\n+        copied_shapes_and_types.push_back(\\n+            ShapeAndType(handle, shape_and_type.dtype, shape_and_type.type));\\n+      }\\n+\\n+      outer_context->set_output_handle_shapes_and_types(\\n+          index, copied_shapes_and_types);\\n     }\\n   }'}}",
      "message_norm": "fix segmentation fault in shape inference logic.\n\nwhen running shape functions, some functions (such as `mutablehashtableshape`)\nproduce extra output information in the form of a `shapeandtype` struct.  the\nshapes embedded in this struct are owned by an inference context that is\ncleaned up almost immediately; if the upstream code attempts to access this\nshape information, it can trigger a segfault.\n\n`shaperefiner` is mitigating this for normal output shapes by cloning them\n(and thus putting the newly created shape under ownership of an inference\ncontext that will not die), but we were not doing the same for shapes and\ntypes.  this commit fixes that by doing similar logic on output shapes and\ntypes.\n\npiperorigin-revid: 384761124\nchange-id: i07c0c42d29dfbb55bfa13ec1f09ef825fb0a1a1d",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('segmentation fault', 'SECWORD', ''), ('segfault', 'SECWORD', ''), ('mitigating', 'ACTION', ''), ('fixes', 'ACTION', ''), ('384761124', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/common_runtime/shape_refiner.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2388,
      "vuln_id": "GHSA-m8rp-q82r-c5mf",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/microweber/microweber/commit/b64ef574b82dbf89a908e1569d790c7012d1ccd7'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in microweber Cross-site Scripting (XSS) - Stored in Packagist microweber/microweber prior to 1.2.11.",
      "published_date": "2022-01-21",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/b64ef574b82dbf89a908e1569d790c7012d1ccd7",
      "commit_sha": "b64ef574b82dbf89a908e1569d790c7012d1ccd7",
      "patch": "SINGLE",
      "chain_ord": "['b64ef574b82dbf89a908e1569d790c7012d1ccd7']",
      "before_first_fix_commit": "{'e17f3e94289b2dac7187e8039e1a3429779e273c'}",
      "last_fix_commit": "b64ef574b82dbf89a908e1569d790c7012d1ccd7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/19/2022, 09:56:21",
      "message": "xss on contact form fix",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 3, 'total': 5}",
      "files": "{'userfiles/modules/admin/notifications/notif_form_entry.php': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/b64ef574b82dbf89a908e1569d790c7012d1ccd7/userfiles%2Fmodules%2Fadmin%2Fnotifications%2Fnotif_form_entry.php', 'patch': '@@ -91,7 +91,6 @@\\n             <hr class=\"thin\" />\\n             <div class=\"row\">\\n \\n-\\n                 <?php\\n                 $iformVr=0;\\n                 foreach ($form_values_formated as $form_values_row) {\\n@@ -106,12 +105,12 @@\\n                             <?php if (!is_array($val1)){ ?>\\n                                 <div>\\n                                     <small class=\"text-muted\"><?php echo str_replace(\\'_\\', \\' \\', $key); ?>:</small>\\n-                                    <p><?php print $val1; ?></p>\\n+                                    <p><?php print htmlentities($val1); ?></p>\\n                                 </div>\\n                             <?php } else { ?>\\n                                 <small class=\"text-muted\"><?php echo str_replace(\\'_\\', \\' \\', $key); ?>:</small>\\n                                 <?php foreach ($val1 as $val1_1){ ?>\\n-                                    <p><?php print $val1_1 . \\'<br />\\'; ?></p>\\n+                                    <p><?php print htmlentities($val1_1) . \\'<br />\\'; ?></p>\\n                                 <?php }?>\\n                             <?php } ?>\\n                         <?php } ?>'}}",
      "message_norm": "xss on contact form fix",
      "language": "en",
      "entities": "[('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['userfiles/modules/admin/notifications/notif_form_entry.php'])",
      "num_files": 1.0
    },
    {
      "index": 2628,
      "vuln_id": "GHSA-pqrv-8r2f-7278",
      "cwe_id": "{'CWE-754'}",
      "score": 5.9,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439'}",
      "dataset": "osv",
      "summary": "Crash due to erroneous `StatusOr` in TensorFlow ### Impact\nA `GraphDef` from a TensorFlow `SavedModel` can be maliciously altered to cause a TensorFlow process to crash due to encountering [a `StatusOr` value that is an error and forcibly extracting the value from it](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L560-L567):\n\n```cc\n  if (op_reg_data->type_ctor != nullptr) {\n    VLOG(3) << \"AddNode: found type constructor for \" << node_def.name();\n    const auto ctor_type =\n        full_type::SpecializeType(AttrSlice(node_def), op_reg_data->op_def);\n    const FullTypeDef ctor_typedef = ctor_type.ValueOrDie();\n    if (ctor_typedef.type_id() != TFT_UNSET) {\n      *(node_def.mutable_experimental_type()) = ctor_typedef;\n    }\n  }\n```   \n      \nIf `ctor_type` is an error status, `ValueOrDie` results in a crash.\n        \n### Patches\nWe have patched the issue in GitHub commit [955059813cc325dc1db5e2daa6221271406d4439](https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439).\n  \nWe have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1, as both are affected.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439",
      "commit_sha": "955059813cc325dc1db5e2daa6221271406d4439",
      "patch": "SINGLE",
      "chain_ord": "['955059813cc325dc1db5e2daa6221271406d4439']",
      "before_first_fix_commit": "{'3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
      "last_fix_commit": "955059813cc325dc1db5e2daa6221271406d4439",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/12/2021, 16:17:57",
      "message": "Check for type inference error on node construction.\n\nPiperOrigin-RevId: 409415804\nChange-Id: Ieb6e020906b96f522bf8e2fa103715ddbbdc434a",
      "author": "Dan Moldovan",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/graph/graph.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/955059813cc325dc1db5e2daa6221271406d4439/tensorflow%2Fcore%2Fgraph%2Fgraph.cc', 'patch': '@@ -561,6 +561,11 @@ Node* Graph::AddNode(NodeDef node_def, Status* status) {\\n     VLOG(3) << \"AddNode: found type constructor for \" << node_def.name();\\n     const auto ctor_type =\\n         full_type::SpecializeType(AttrSlice(node_def), op_reg_data->op_def);\\n+    if (!ctor_type.ok()) {\\n+      *status = errors::InvalidArgument(\"type error: \",\\n+                                        ctor_type.status().ToString());\\n+      return nullptr;\\n+    }\\n     const FullTypeDef ctor_typedef = ctor_type.ValueOrDie();\\n     if (ctor_typedef.type_id() != TFT_UNSET) {\\n       *(node_def.mutable_experimental_type()) = ctor_typedef;'}}",
      "message_norm": "check for type inference error on node construction.\n\npiperorigin-revid: 409415804\nchange-id: ieb6e020906b96f522bf8e2fa103715ddbbdc434a",
      "language": "en",
      "entities": "[('error', 'FLAW', ''), ('409415804', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/graph/graph.cc'])",
      "num_files": 1.0
    },
    {
      "index": 2919,
      "vuln_id": "GHSA-rcjj-h6gh-jf3r",
      "cwe_id": "{'CWE-379'}",
      "score": 5.5,
      "chain": "{'https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28'}",
      "dataset": "osv",
      "summary": "Information Disclosure in Apache Groovy Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.",
      "published_date": "2020-12-09",
      "chain_len": 1,
      "project": "https://github.com/apache/groovy",
      "commit_href": "https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28",
      "commit_sha": "bcbe5c4c76db83736166530647c024ac1e47ef28",
      "patch": "SINGLE",
      "chain_ord": "['bcbe5c4c76db83736166530647c024ac1e47ef28']",
      "before_first_fix_commit": "{'e5aabb3a88974a6176a0fe76356c6a0415b5d183'}",
      "last_fix_commit": "bcbe5c4c76db83736166530647c024ac1e47ef28",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/18/2020, 13:08:16",
      "message": "GROOVY-9824: replace some old api usage with newer available variants (closes #1425)",
      "author": "Paul King",
      "comments": null,
      "stats": "{'additions': 14, 'deletions': 33, 'total': 47}",
      "files": "{'src/main/java/org/codehaus/groovy/runtime/DefaultGroovyStaticMethods.java': {'additions': 14, 'deletions': 33, 'changes': 47, 'status': 'modified', 'raw_url': 'https://github.com/apache/groovy/raw/bcbe5c4c76db83736166530647c024ac1e47ef28/src%2Fmain%2Fjava%2Forg%2Fcodehaus%2Fgroovy%2Fruntime%2FDefaultGroovyStaticMethods.java', 'patch': '@@ -27,6 +27,8 @@\\n import java.lang.management.ManagementFactory;\\n import java.lang.management.ThreadInfo;\\n import java.lang.management.ThreadMXBean;\\n+import java.nio.file.Files;\\n+import java.nio.file.Path;\\n import java.util.Arrays;\\n import java.util.Locale;\\n import java.util.ResourceBundle;\\n@@ -211,42 +213,21 @@ public static ResourceBundle getBundle(ResourceBundle self, String bundleName, L\\n     }\\n \\n     public static File createTempDir(File self) throws IOException {\\n-        return createTempDir(self, \"groovy-generated-\", \"-tmpdir\");\\n+        return createTempDir(self, \"groovy-generated-\", \"tmpdir-\");\\n+    }\\n+\\n+    public static File createTempDir(File self, final String prefix) throws IOException {\\n+        return createTempDirNio(prefix);\\n     }\\n \\n     public static File createTempDir(File self, final String prefix, final String suffix) throws IOException {\\n-        final int MAXTRIES = 3;\\n-        int accessDeniedCounter = 0;\\n-        File tempFile=null;\\n-        for (int i=0; i<MAXTRIES; i++) {\\n-            try {\\n-                tempFile = File.createTempFile(prefix, suffix);\\n-                tempFile.delete();\\n-                tempFile.mkdirs();\\n-                break;\\n-            } catch (IOException ioe) {\\n-                if (ioe.getMessage().startsWith(\"Access is denied\")) {\\n-                    accessDeniedCounter++;\\n-                    try {\\n-                        Thread.sleep(100);\\n-                    } catch (InterruptedException ignore) {\\n-                    }\\n-                }\\n-                if (i == MAXTRIES - 1) {\\n-                    if (accessDeniedCounter == MAXTRIES) {\\n-                        String msg = \"Access is denied.\\\\nWe tried \" + accessDeniedCounter +\\n-                                \" times to create a temporary directory and failed each time.\" +\\n-                                \" If you are on Windows, you are possibly victim to\" +\\n-                                \" http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6325169.\" +\\n-                                \" This is not a bug in Groovy.\";\\n-                        throw new IOException(msg);\\n-                    } else {\\n-                        throw ioe;\\n-                    }\\n-                }\\n-            }\\n-        }\\n-        return tempFile;\\n+        // more secure Files api doesn\\'t support suffix, so just append it to the prefix\\n+        return createTempDirNio(prefix + suffix);\\n+    }\\n+\\n+    private static File createTempDirNio(String prefix) throws IOException {\\n+        Path tempPath = Files.createTempDirectory(prefix);\\n+        return tempPath.toFile();\\n     }\\n \\n     /**'}}",
      "message_norm": "groovy-9824: replace some old api usage with newer available variants (closes #1425)",
      "language": "en",
      "entities": "[('#1425', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/org/codehaus/groovy/runtime/DefaultGroovyStaticMethods.java'])",
      "num_files": 1.0
    },
    {
      "index": 2348,
      "vuln_id": "GHSA-m4hj-wg2r-qpcr",
      "cwe_id": "{'CWE-352'}",
      "score": 4.3,
      "chain": "{'https://github.com/star7th/showdoc/commit/67093c879a6563aa6ee08003177777d1975e2351'}",
      "dataset": "osv",
      "summary": "showdoc is vulnerable to Cross-Site Request Forgery (CSRF) showdoc is vulnerable to Cross-Site Request Forgery (CSRF).",
      "published_date": "2021-11-15",
      "chain_len": 1,
      "project": "https://github.com/star7th/showdoc",
      "commit_href": "https://github.com/star7th/showdoc/commit/67093c879a6563aa6ee08003177777d1975e2351",
      "commit_sha": "67093c879a6563aa6ee08003177777d1975e2351",
      "patch": "SINGLE",
      "chain_ord": "['67093c879a6563aa6ee08003177777d1975e2351']",
      "before_first_fix_commit": "{'7e6b547ac23be296f0a6066382eb1fd389af0439'}",
      "last_fix_commit": "67093c879a6563aa6ee08003177777d1975e2351",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/19/2021, 14:19:10",
      "message": "Strict cookie",
      "author": "star7th",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 5, 'total': 21}",
      "files": "{'server/Application/Api/Controller/UserController.class.php': {'additions': 16, 'deletions': 5, 'changes': 21, 'status': 'modified', 'raw_url': 'https://github.com/star7th/showdoc/raw/67093c879a6563aa6ee08003177777d1975e2351/server%2FApplication%2FApi%2FController%2FUserController.class.php', 'patch': '@@ -42,8 +42,12 @@ public function register(){\\n                     unset($ret[\\'password\\']);\\n                     session(\"login_user\" , $ret );\\n                     $token = D(\"UserToken\")->createToken($ret[\\'uid\\']);\\n-                    cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*90,\\'httponly\\'=>\\'httponly\\'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\\n-                  $this->sendResult(array(\\n+                    if(version_compare(PHP_VERSION,\\'7.3.0\\',\\'>\\')){\\n+                        setcookie(\\'cookie_token\\',$token,array(\\'expires\\'=>time()+60*60*24*180,\\'httponly\\'=>\\'httponly\\',\\'samesite\\' => \\'Strict\\',\\'path\\'=>\\'/\\'));\\n+                      }else{\\n+                        cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*180,\\'httponly\\'=>\\'httponly\\'));\\n+                    }\\n+                    $this->sendResult(array(\\n                     \"uid\" => $ret[\\'uid\\'] ,\\n                     \"username\" => $ret[\\'username\\'] ,\\n                     \"name\" => $ret[\\'name\\'] ,\\n@@ -134,7 +138,11 @@ public function login(){\\n           session(\"login_user\" , $ret );\\n           D(\"User\")->setLastTime($ret[\\'uid\\']);\\n           $token = D(\"UserToken\")->createToken($ret[\\'uid\\'],60*60*24*180);\\n-          cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*180,\\'httponly\\'=>\\'httponly\\'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\\n+          if(version_compare(PHP_VERSION,\\'7.3.0\\',\\'>\\')){\\n+            setcookie(\\'cookie_token\\',$token,array(\\'expires\\'=>time()+60*60*24*180,\\'httponly\\'=>\\'httponly\\',\\'samesite\\' => \\'Strict\\',\\'path\\'=>\\'/\\'));\\n+          }else{\\n+            cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*180,\\'httponly\\'=>\\'httponly\\'));\\n+          }\\n           $this->sendResult(array(\\n             \"uid\" => $ret[\\'uid\\'] ,\\n             \"username\" => $ret[\\'username\\'] ,\\n@@ -247,8 +255,11 @@ public function registerByVerify(){\\n                     unset($ret[\\'password\\']);\\n                     session(\"login_user\" , $ret );\\n                     $token = D(\"UserToken\")->createToken($ret[\\'uid\\']);\\n-                    cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*90,\\'httponly\\'=>\\'httponly\\'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\\n-                    \\n+                    if(version_compare(PHP_VERSION,\\'7.3.0\\',\\'>\\')){\\n+                        setcookie(\\'cookie_token\\',$token,array(\\'expires\\'=>time()+60*60*24*180,\\'httponly\\'=>\\'httponly\\',\\'samesite\\' => \\'Strict\\',\\'path\\'=>\\'/\\'));\\n+                      }else{\\n+                        cookie(\\'cookie_token\\',$token,array(\\'expire\\'=>60*60*24*180,\\'httponly\\'=>\\'httponly\\'));\\n+                    }                    \\n                     $this->sendResult(array(\\n                         \"uid\" => $ret[\\'uid\\'] ,\\n                         \"username\" => $ret[\\'username\\'] ,'}}",
      "message_norm": "strict cookie",
      "language": "en",
      "entities": "[('cookie', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/Application/Api/Controller/UserController.class.php'])",
      "num_files": 1.0
    },
    {
      "index": 85,
      "vuln_id": "GHSA-2cqg-q7jm-j35c",
      "cwe_id": "{'CWE-79'}",
      "score": 3.9,
      "chain": "{'https://github.com/snipe/snipe-it/commit/9ed1442bd124710f4178992cc4eca5236c7396b9'}",
      "dataset": "osv",
      "summary": "snipe-it is vulnerable to Cross-site Scripting snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
      "published_date": "2021-11-15",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/9ed1442bd124710f4178992cc4eca5236c7396b9",
      "commit_sha": "9ed1442bd124710f4178992cc4eca5236c7396b9",
      "patch": "SINGLE",
      "chain_ord": "['9ed1442bd124710f4178992cc4eca5236c7396b9']",
      "before_first_fix_commit": "{'edf98cb7951a922cdef7505e1efd115f92d1afd9', '3ea209a507fbcc992e0a9152e2074709e8459b47'}",
      "last_fix_commit": "9ed1442bd124710f4178992cc4eca5236c7396b9",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/09/2021, 04:32:02",
      "message": "Merge pull request #10286 from uberbrady/fix_bulk_audit_xss\n\nEscape asset_tag attribute at controller level for bulk checkout",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'app/Http/Controllers/Api/AssetsController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/9ed1442bd124710f4178992cc4eca5236c7396b9/app%2FHttp%2FControllers%2FApi%2FAssetsController.php', 'patch': \"@@ -910,7 +910,7 @@ public function audit(Request $request) {\\n             }\\n         }\\n \\n-        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.$request->input('asset_tag').' not found'));\\n+        return response()->json(Helper::formatStandardApiResponse('error', ['asset_tag'=> e($request->input('asset_tag'))], 'Asset with tag '.e($request->input('asset_tag')).' not found'));\"}}",
      "message_norm": "merge pull request #10286 from uberbrady/fix_bulk_audit_xss\n\nescape asset_tag attribute at controller level for bulk checkout",
      "language": "en",
      "entities": "[('#10286', 'ISSUE', ''), ('fix_bulk_audit_xss', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/Api/AssetsController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1923,
      "vuln_id": "GHSA-grc3-8q8m-4j7c",
      "cwe_id": "{'CWE-280', 'CWE-732'}",
      "score": 8.1,
      "chain": "{'https://github.com/apache/accumulo/commit/877ad502f6857e48342664e4b0ce83db74e4cda4'}",
      "dataset": "osv",
      "summary": "Improper privilege handling in Apache Accumulo Apache Accumulo versions 1.5.0 through 1.10.0 and version 2.0.0 do not properly check the return value of some policy enforcement functions before permitting an authenticated user to perform certain administrative operations. Specifically, the return values of the 'canFlush' and 'canPerformSystemActions' security functions are not checked in some instances, therefore allowing an authenticated user with insufficient permissions to perform the following actions: flushing a table, shutting down Accumulo or an individual tablet server, and setting or removing system-wide Accumulo configuration properties.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/apache/accumulo",
      "commit_href": "https://github.com/apache/accumulo/commit/877ad502f6857e48342664e4b0ce83db74e4cda4",
      "commit_sha": "877ad502f6857e48342664e4b0ce83db74e4cda4",
      "patch": "SINGLE",
      "chain_ord": "['877ad502f6857e48342664e4b0ce83db74e4cda4']",
      "before_first_fix_commit": "{'024a72ed8b80c21470ab2eed04787e3216b7b606'}",
      "last_fix_commit": "877ad502f6857e48342664e4b0ce83db74e4cda4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/08/2020, 19:08:36",
      "message": "Throw exceptions when permissions checks fail (#1828)\n\n(cherry-picked for 2.0.1)\n\nAdd and throw missing exceptions when permissions checks fail. This\nprevents certain operations that the user does not have privileges to\nperform from succeeding anyway.",
      "author": "Christopher Tubbs",
      "comments": null,
      "stats": "{'additions': 14, 'deletions': 7, 'total': 21}",
      "files": "{'server/master/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java': {'additions': 14, 'deletions': 7, 'changes': 21, 'status': 'modified', 'raw_url': 'https://github.com/apache/accumulo/raw/877ad502f6857e48342664e4b0ce83db74e4cda4/server%2Fmaster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Faccumulo%2Fmaster%2FMasterClientServiceHandler.java', 'patch': '@@ -112,7 +112,8 @@ public long initiateFlush(TInfo tinfo, TCredentials c, String tableIdStr)\\n       throws ThriftSecurityException, ThriftTableOperationException {\\n     TableId tableId = TableId.of(tableIdStr);\\n     NamespaceId namespaceId = getNamespaceIdFromTableId(TableOperation.FLUSH, tableId);\\n-    master.security.canFlush(c, tableId, namespaceId);\\n+    if (!master.security.canFlush(c, tableId, namespaceId))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     String zTablePath = Constants.ZROOT + \"/\" + master.getInstanceID() + Constants.ZTABLES + \"/\"\\n         + tableId + Constants.ZTABLE_FLUSH_ID;\\n@@ -145,7 +146,8 @@ public void waitForFlush(TInfo tinfo, TCredentials c, String tableIdStr, ByteBuf\\n       throws ThriftSecurityException, ThriftTableOperationException {\\n     TableId tableId = TableId.of(tableIdStr);\\n     NamespaceId namespaceId = getNamespaceIdFromTableId(TableOperation.FLUSH, tableId);\\n-    master.security.canFlush(c, tableId, namespaceId);\\n+    if (!master.security.canFlush(c, tableId, namespaceId))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     Text startRow = ByteBufferUtil.toText(startRowBB);\\n     Text endRow = ByteBufferUtil.toText(endRowBB);\\n@@ -247,7 +249,8 @@ public void setTableProperty(TInfo info, TCredentials credentials, String tableN\\n   @Override\\n   public void shutdown(TInfo info, TCredentials c, boolean stopTabletServers)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n     if (stopTabletServers) {\\n       master.setMasterGoalState(MasterGoalState.CLEAN_STOP);\\n       EventCoordinator.Listener eventListener = master.nextEvent.getListener();\\n@@ -261,7 +264,8 @@ public void shutdown(TInfo info, TCredentials c, boolean stopTabletServers)\\n   @Override\\n   public void shutdownTabletServer(TInfo info, TCredentials c, String tabletServer, boolean force)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     final TServerInstance doomed = master.tserverSet.find(tabletServer);\\n     if (!force) {\\n@@ -333,15 +337,17 @@ public void reportTabletStatus(TInfo info, TCredentials credentials, String serv\\n   @Override\\n   public void setMasterGoalState(TInfo info, TCredentials c, MasterGoalState state)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     master.setMasterGoalState(state);\\n   }\\n \\n   @Override\\n   public void removeSystemProperty(TInfo info, TCredentials c, String property)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     try {\\n       SystemPropUtil.removeSystemProperty(master.getContext(), property);\\n@@ -355,7 +361,8 @@ public void removeSystemProperty(TInfo info, TCredentials c, String property)\\n   @Override\\n   public void setSystemProperty(TInfo info, TCredentials c, String property, String value)\\n       throws ThriftSecurityException, TException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     try {\\n       SystemPropUtil.setSystemProperty(master.getContext(), property, value);'}}",
      "message_norm": "throw exceptions when permissions checks fail (#1828)\n\n(cherry-picked for 2.0.1)\n\nadd and throw missing exceptions when permissions checks fail. this\nprevents certain operations that the user does not have privileges to\nperform from succeeding anyway.",
      "language": "en",
      "entities": "[('permissions', 'SECWORD', ''), ('#1828', 'ISSUE', ''), ('2.0.1', 'VERSION', ''), ('add', 'ACTION', ''), ('permissions', 'SECWORD', ''), ('prevents', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['server/master/src/main/java/org/apache/accumulo/master/MasterClientServiceHandler.java'])",
      "num_files": 1.0
    },
    {
      "index": 3276,
      "vuln_id": "GHSA-wgx2-6432-j3fw",
      "cwe_id": "{'CWE-704'}",
      "score": 9.8,
      "chain": "{'https://github.com/paritytech/bigint/commit/7e71521a61b009afc94c91135353102658550d42'}",
      "dataset": "osv",
      "summary": "Unsoundness in bigint An issue was discovered in the bigint crate through 2020-05-07 for Rust. It allows a soundness violation.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/paritytech/bigint",
      "commit_href": "https://github.com/paritytech/bigint/commit/7e71521a61b009afc94c91135353102658550d42",
      "commit_sha": "7e71521a61b009afc94c91135353102658550d42",
      "patch": "SINGLE",
      "chain_ord": "['7e71521a61b009afc94c91135353102658550d42']",
      "before_first_fix_commit": "{'ae4bc3b51d3718abafa89837730e23bd718c6b02'}",
      "last_fix_commit": "7e71521a61b009afc94c91135353102658550d42",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/07/2020, 13:12:33",
      "message": "DEPRECATED: bump to 4.4.3 to update crates.io readme",
      "author": "Andronik Ordian",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 2, 'total': 5}",
      "files": "{'Cargo.toml': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/paritytech/bigint/raw/7e71521a61b009afc94c91135353102658550d42/Cargo.toml', 'patch': '@@ -1,11 +1,12 @@\\n [package]\\n-description = \"Large fixed-size integers arithmetics\"\\n+description = \"DEPRECATED: use uint instead\"\\n homepage = \"http://parity.io\"\\n repository = \"https://github.com/ethcore/bigint\"\\n license = \"MIT/Apache-2.0\"\\n name = \"bigint\"\\n-version = \"4.4.2\"\\n+version = \"4.4.3\"\\n authors = [\"Parity Technologies <admin@parity.io>\"]\\n+readme = \"README.md\"\\n \\n [dependencies]\\n rustc-hex = { version = \"1.0\", optional = true }'}}",
      "message_norm": "deprecated: bump to 4.4.3 to update crates.io readme",
      "language": "en",
      "entities": "[('4.4.3', 'VERSION', ''), ('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['Cargo.toml'])",
      "num_files": 1.0
    },
    {
      "index": 269,
      "vuln_id": "GHSA-3j9m-hcv9-rpj8",
      "cwe_id": "{'CWE-79'}",
      "score": 6.9,
      "chain": "{'https://github.com/grafana/grafana/commit/3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'https://github.com/grafana/grafana/commit/fb85ed691290d211a5baa44d9a641ab137f0de88', 'https://github.com/grafana/grafana/commit/31b78d51c693d828720a5b285107a50e6024c912'}",
      "dataset": "osv",
      "summary": "XSS vulnerability allowing arbitrary JavaScript execution Today we are releasing Grafana 8.2.3. This patch release includes an important security fix for an issue that affects all Grafana versions from 8.0.0-beta1.\n\n[Grafana Cloud](https://grafana.com/cloud) instances have already been patched and an audit did not find any usage of this attack vector. [Grafana Enterprise](https://grafana.com/products/enterprise) customers were provided with updated binaries under embargo.\n\n## CVE-2021-41174 XSS vulnerability on unauthenticated pages\n\n### Summary\n\nCVSS Score: 6.9 Medium\nCVSS:[CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:N/E:U/RL:O/RC:R/CR:L/MAV:N/MAC:H/MPR:N/MUI:R/MS:C/MC:N/MI:H/MA:L](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:N/E:U/RL:O/RC:R/CR:L/MAV:N/MAC:H/MPR:N/MUI:R/MS:C/MC:N/MI:H/MA:L)\n\nWe received a security report to security@grafana.com on 2021-10-21 about a vulnerability in Grafana regarding the XSS vulnerability.\n\nIt was later identified as affecting Grafana versions from 8.0.0-beta1 to 8.2.2. [CVE-2021-41174](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41174) has been assigned to this vulnerability.\n\n### Impact\n\nIf an attacker is able to convince a victim to visit a URL referencing a vulnerable page, arbitrary JavaScript content may be executed within the context of the victim's browser.\n\nThe user visiting the malicious link must be unauthenticated and the link must be for a page that contains the login button in the menu bar.\n\nThere are two ways an unauthenticated user can open a page in Grafana that contains the login button:\n- Anonymous authentication is enabled. This means all pages in Grafana would be open for the attack.\n- The link is to an unauthenticated page. The following pages are vulnerable:\n  - `/dashboard-solo/snapshot/*`\n  - `/dashboard/snapshot/*`\n  - `/invite/:code`\n\nThe url has to be crafted to exploit AngularJS rendering and contain the interpolation binding for AngularJS expressions. AngularJS uses double curly braces for interpolation binding: {{ }} \n\nAn example of an expression would be: `{{constructor.constructor(\u2018alert(1)\u2019)()}}`. This can be included in the link URL like this: \n\nhttps://play.grafana.org/dashboard/snapshot/%7B%7Bconstructor.constructor('alert(1)')()%7D%7D?orgId=1\n\nWhen the user follows the link and the page renders, the login button will contain the original link with a query parameter to force a redirect to the login page. The URL is not validated and the AngularJS rendering engine will execute the JavaScript expression contained in the URL.\n\n### Attack audit\n\nWe can not guarantee that the below will identify all attacks, so if you find something using the audit process described below, you should consider doing a full assessment.\n\n#### Through reverse proxy/load balancer logs\n\nTo determine if your Grafana installation has been exploited for this vulnerability, search through your reverse proxy/load balancer access logs for instances where the path contains `{{` followed by something that would invoke JavaScript code. For example, this could be code that attempts to show a fake login page or to steal browser or session data. The [OWASP cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html) has several examples of XSS attacks.\n\n#### Through the Grafana Enterprise audit feature\n\nIf you enabled \u201cLog web requests\u201d in your configuration with `router_logging = true`, look for requests where `path` contains `{{` followed by something that would invoke JavaScript code.\n\n### Patched versions\n\nRelease 8.2.3:\n\n- [Download Grafana 8.2.3](https://grafana.com/grafana/download/8.2.3)\n- [Release notes](https://grafana.com/docs/grafana/latest/release-notes/release-notes-8-2-3/)\n\n### Solutions and mitigations\n\nDownload and install the appropriate patch for your version of Grafana.\n\n[Grafana Cloud](https://grafana.com/cloud) instances have already been patched, and [Grafana Enterprise](https://grafana.com/products/enterprise) customers were provided with updated binaries under embargo.\n\n### Workaround\n\nIf for some reason you cannot upgrade, you can use a reverse proxy or similar to block access to block the literal string `{{` in the path.\n\nExample of an Nginx rule to block the literal string `{{`:\n\n```\nlocation ~ \\{\\{ {\n    deny all;\n}\n```\n### Timeline and postmortem\n\nHere is a detailed timeline starting from when we originally learned of the issue. All times in UTC. \n\n* 2021-10-21 23:13: Security researcher sends the initial report about an XSS vulnerability.\n* 2021-10-21 23:13: Confirmed to be reproducible in at least versions 8.0.5 and 8.2.2.\n* 2021-10-22 02:02 MEDIUM severity declared.\n* 2021-10-22 09:22: it is discovered that Grafana instances with anonymous auth turned on are vulnerable. This includes https://play.grafana.org/ .\n* 2021-10-22 09:50: Anonymous access disabled for all instances on Grafana Cloud as a mitigation measure.\n* 2021-10-22 11:15: Workaround deployed on Grafana Cloud that blocks malicious requests.\n* 2021-10-22 12:35: Enabled anonymous access for instances on Grafana Cloud. \n* 2021-10-22 12:51: All instances protected by the workaround. From this point forward, Grafana Cloud is no longer affected.\n* 2021-10-22 14:05 Grafana Cloud instances updated with a fix.\n* 2021-10-22 19:23 :Determination that no weekend work is needed as the issue is of MEDIUM severity and the root cause has been identified.\n* 2021-10-25 14:13: Audit of Grafana Cloud concluded, no evidence of exploitation.\n* 2021-10-27 12:00: Grafana Enterprise images released to customers under embargo.\n* 2021-11-03 12:00: Public release.\n\n## Reporting security issues\n\nIf you think you have found a security vulnerability, please send a report to [security@grafana.com](mailto:security@grafana.com). This address can be used for all of\nGrafana Labs' open source and commercial products (including but not limited to Grafana, Tempo, Loki, k6, Tanka, and  Grafana Cloud, Grafana Enterprise, and grafana.com). We only accept vulnerability reports at this address. We would prefer that you encrypt your message to us using our PGP key. The key fingerprint is:\n\nF988 7BEA 027A 049F AE8E  5CAA D125 8932 BE24 C5CA\n\nThe key is available from [ keyserver.ubuntu.com]( https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xD1258932BE24C5CA) by searching for [security@grafana]( https://keyserver.ubuntu.com/pks/lookup?search=security@grafana&fingerprint=on&op=index).\n\n## Security announcements\n\nThere is a Security [category](https://grafana.com/tags/security/) on the Grafana blog where we will post a summary, remediation, and mitigation details for any patch containing security fixes and you can subscribe to updates from our [Security Announcements RSS feed](https://grafana.com/tags/security/index.xml).",
      "published_date": "2021-11-08",
      "chain_len": 3,
      "project": "https://github.com/grafana/grafana",
      "commit_href": "https://github.com/grafana/grafana/commit/fb85ed691290d211a5baa44d9a641ab137f0de88",
      "commit_sha": "fb85ed691290d211a5baa44d9a641ab137f0de88",
      "patch": "MULTI",
      "chain_ord": "['31b78d51c693d828720a5b285107a50e6024c912', '3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'fb85ed691290d211a5baa44d9a641ab137f0de88']",
      "before_first_fix_commit": "{'3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'a3dc30546fce2e437d858c140f1ff307a04365d6'}",
      "last_fix_commit": "fb85ed691290d211a5baa44d9a641ab137f0de88",
      "chain_ord_pos": 3.0,
      "commit_datetime": "10/25/2021, 07:45:05",
      "message": "Merge pull request #147 from grafana/axelav/sanitized-nav-links-8-2-3\n\nSanitized NavBar children links to remove angular interpolation v8.2.3",
      "author": "Oscar Kilhed",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 3, 'total': 8}",
      "files": "{'public/app/core/components/NavBar/DropdownChild.tsx': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/grafana/grafana/raw/fb85ed691290d211a5baa44d9a641ab137f0de88/public%2Fapp%2Fcore%2Fcomponents%2FNavBar%2FDropdownChild.tsx', 'patch': '@@ -1,6 +1,6 @@\\n import React from \\'react\\';\\n import { css } from \\'@emotion/css\\';\\n-import { GrafanaTheme2 } from \\'@grafana/data\\';\\n+import { GrafanaTheme2, textUtil } from \\'@grafana/data\\';\\n import { Icon, IconName, Link, useTheme2 } from \\'@grafana/ui\\';\\n \\n export interface Props {\\n@@ -29,13 +29,15 @@ const DropdownChild = ({ isDivider = false, icon, onClick, target, text, url }:\\n     </button>\\n   );\\n   if (url) {\\n+    const sanitizedUrl = textUtil.sanitizeAngularInterpolation(url);\\n+\\n     element =\\n       !target && url.startsWith(\\'/\\') ? (\\n-        <Link className={styles.element} onClick={onClick} href={url}>\\n+        <Link className={styles.element} onClick={onClick} href={sanitizedUrl}>\\n           {linkContent}\\n         </Link>\\n       ) : (\\n-        <a className={styles.element} href={url} target={target} rel=\"noopener\" onClick={onClick}>\\n+        <a className={styles.element} href={sanitizedUrl} target={target} rel=\"noopener\" onClick={onClick}>\\n           {linkContent}\\n         </a>\\n       );'}}",
      "message_norm": "merge pull request #147 from grafana/axelav/sanitized-nav-links-8-2-3\n\nsanitized navbar children links to remove angular interpolation v8.2.3",
      "language": "en",
      "entities": "[('#147', 'ISSUE', ''), ('sanitized', 'SECWORD', ''), ('sanitized', 'SECWORD', ''), ('remove', 'ACTION', ''), ('v8.2.3', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['public/app/core/components/NavBar/DropdownChild.tsx'])",
      "num_files": 1.0
    },
    {
      "index": 80,
      "vuln_id": "GHSA-2cfc-865j-gm4w",
      "cwe_id": "{'CWE-611'}",
      "score": 7.3,
      "chain": "{'https://github.com/detekt/detekt/commit/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395'}",
      "dataset": "osv",
      "summary": "XML External Entity Reference in detekt Improper Restriction of XML External Entity Reference in GitHub repository detekt/detekt prior to 1.20.0.",
      "published_date": "2022-04-22",
      "chain_len": 1,
      "project": "https://github.com/detekt/detekt",
      "commit_href": "https://github.com/detekt/detekt/commit/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
      "commit_sha": "c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
      "patch": "SINGLE",
      "chain_ord": "['c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395']",
      "before_first_fix_commit": "{'08eac68caa24ced140cc017d4de3b258a470232b'}",
      "last_fix_commit": "c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/18/2022, 17:21:06",
      "message": "Parse Baseline in a secure way (#4499)",
      "author": "Brais Gab\u00edn",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'detekt-core/src/main/kotlin/io/gitlab/arturbosch/detekt/core/baseline/BaselineFormat.kt': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/detekt/detekt/raw/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395/detekt-core%2Fsrc%2Fmain%2Fkotlin%2Fio%2Fgitlab%2Farturbosch%2Fdetekt%2Fcore%2Fbaseline%2FBaselineFormat.kt', 'patch': '@@ -3,6 +3,7 @@ package io.gitlab.arturbosch.detekt.core.baseline\\n import org.xml.sax.SAXParseException\\n import java.nio.file.Files\\n import java.nio.file.Path\\n+import javax.xml.XMLConstants\\n import javax.xml.parsers.SAXParserFactory\\n import javax.xml.stream.XMLStreamException\\n import javax.xml.stream.XMLStreamWriter\\n@@ -17,7 +18,11 @@ internal class BaselineFormat {\\n     fun read(path: Path): Baseline {\\n         try {\\n             Files.newInputStream(path).use {\\n-                val reader = SAXParserFactory.newInstance().newSAXParser()\\n+                val reader = SAXParserFactory.newInstance()\\n+                    .apply {\\n+                        setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)\\n+                    }\\n+                    .newSAXParser()\\n                 val handler = BaselineHandler()\\n                 reader.parse(it, handler)\\n                 return handler.createBaseline()'}}",
      "message_norm": "parse baseline in a secure way (#4499)",
      "language": "en",
      "entities": "[('secure', 'SECWORD', ''), ('#4499', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['detekt-core/src/main/kotlin/io/gitlab/arturbosch/detekt/core/baseline/BaselineFormat.kt'])",
      "num_files": 1.0
    },
    {
      "index": 341,
      "vuln_id": "GHSA-437j-5qc3-c589",
      "cwe_id": "{'CWE-601'}",
      "score": 6.1,
      "chain": "{'https://github.com/microweber/microweber/commit/187e949daf7dea6f10b80da70988f0f86444eeff'}",
      "dataset": "osv",
      "summary": "Open Redirect in microweber Open Redirect in GitHub repository microweber/microweber prior to 1.2.19.",
      "published_date": "2022-06-30",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/187e949daf7dea6f10b80da70988f0f86444eeff",
      "commit_sha": "187e949daf7dea6f10b80da70988f0f86444eeff",
      "patch": "SINGLE",
      "chain_ord": "['187e949daf7dea6f10b80da70988f0f86444eeff']",
      "before_first_fix_commit": "{'e6361e9fdcaaf2b27fb664beaa2fb33d46e3542e'}",
      "last_fix_commit": "187e949daf7dea6f10b80da70988f0f86444eeff",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/29/2022, 15:14:26",
      "message": "update",
      "author": "Peter Ivanov",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'src/MicroweberPackages/Helper/UrlManager.php': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/187e949daf7dea6f10b80da70988f0f86444eeff/src%2FMicroweberPackages%2FHelper%2FUrlManager.php', 'patch': \"@@ -105,7 +105,15 @@ public function redirect($url)\\n \\n         $redirectUrl = site_url();\\n         $parseUrl = parse_url($url);\\n+\\n         if (isset($parseUrl['host'])) {\\n+            if(isset($parseUrl['user']) and $parseUrl['user']){\\n+                return \\\\Redirect::to(site_url());\\n+            }\\n+\\n+            if(isset($parseUrl['pass']) and $parseUrl['pass']){\\n+                return \\\\Redirect::to(site_url());\\n+            }\\n             if ($parseUrl['host'] == site_hostname()) {\\n                 $redirectUrl = $url;\\n             }\"}}",
      "message_norm": "update",
      "language": "ro",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/Helper/UrlManager.php'])",
      "num_files": 1.0
    },
    {
      "index": 2952,
      "vuln_id": "GHSA-rhcw-wjcm-9h6g",
      "cwe_id": "{'CWE-400'}",
      "score": 7.5,
      "chain": "{'https://github.com/undertow-io/undertow/pull/997/commits/98a9ab7f2d7fe7a7254eaf17d47816c452169c90'}",
      "dataset": "osv",
      "summary": "Denial of service in Undertow A flaw was found in the Undertow AJP connector. Malicious requests and abrupt connection closes could be triggered by an attacker using query strings with non-RFC compliant characters resulting in a denial of service. The highest threat from this vulnerability is to system availability. This affects Undertow 2.1.5.SP1, 2.0.33.SP2, and 2.2.3.SP1.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/undertow-io/undertow",
      "commit_href": "https://github.com/undertow-io/undertow/pull/997/commits/98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
      "commit_sha": "98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
      "patch": "SINGLE",
      "chain_ord": "['98a9ab7f2d7fe7a7254eaf17d47816c452169c90']",
      "before_first_fix_commit": "{'47dc5e37cb20d8eeb4d4f632fe959d436f86128a'}",
      "last_fix_commit": "98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/29/2020, 13:24:40",
      "message": "UNDERTOW-1813 Make PathResourceManager.getResource rethrow a SecurityException",
      "author": "Boris Unckel",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 1, 'total': 8}",
      "files": "{'core/src/main/java/io/undertow/server/handlers/resource/PathResourceManager.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/undertow-io/undertow/raw/98a9ab7f2d7fe7a7254eaf17d47816c452169c90/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fserver%2Fhandlers%2Fresource%2FPathResourceManager.java', 'patch': '@@ -230,9 +230,15 @@ public Resource getResource(final String p) {\\n                 log.tracef(\"Failed to get path resource %s from path resource manager with base %s, as the path did not exist\", p, base);\\n                 return null;\\n             }\\n-        } catch (Exception e) {\\n+        } catch (IOException e) {\\n             UndertowLogger.REQUEST_LOGGER.debugf(e, \"Invalid path %s\", p);\\n             return null;\\n+        } catch (SecurityException e) {\\n+            UndertowLogger.REQUEST_LOGGER.errorf(e, \"Missing JSM permissions for path %s\", p);\\n+            throw e;\\n+        } catch (Exception e) {\\n+            UndertowLogger.REQUEST_LOGGER.debugf(e, \"Other issue for path %s\", p);\\n+            return null;\\n         }\\n     }'}}",
      "message_norm": "undertow-1813 make pathresourcemanager.getresource rethrow a securityexception",
      "language": "en",
      "entities": "[('securityexception', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/src/main/java/io/undertow/server/handlers/resource/PathResourceManager.java'])",
      "num_files": 1.0
    },
    {
      "index": 1573,
      "vuln_id": "GHSA-cmgw-8vpc-rc59",
      "cwe_id": "{'CWE-20'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22'}",
      "dataset": "osv",
      "summary": "Segfault on strings tensors with mistmatched dimensions, due to Go code ### Impact\nUnder certain conditions, Go code can trigger a segfault in string deallocation.\n\n\nFor string tensors, `C.TF_TString_Dealloc` is called during garbage collection within a finalizer function.  However, tensor structure isn't checked until encoding to avoid a performance penalty.  The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions).\n\nTo fix this, the call to set the finalizer function is deferred until `NewTensor` returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written.\n\n### Patches\nWe have patched the issue in GitHub commit [8721ba96e5760c229217b594f6d2ba332beedf22](https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22) (merging [#50508](https://github.com/tensorflow/tensorflow/pull/50508)).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, which is the other affected version.                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [fixing PR](https://github.com/tensorflow/tensorflow/pull/50508).",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22",
      "commit_sha": "8721ba96e5760c229217b594f6d2ba332beedf22",
      "patch": "SINGLE",
      "chain_ord": "['8721ba96e5760c229217b594f6d2ba332beedf22']",
      "before_first_fix_commit": "{'5a14b2e21e2026b0838f892fed43c4c0e4b3c299', '49499c17794b39a2a7d5be2b477ed7d5704d0629'}",
      "last_fix_commit": "8721ba96e5760c229217b594f6d2ba332beedf22",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/13/2021, 22:13:47",
      "message": "Merge pull request #50508 from wamuir:fix-tstring-dealloc\n\nPiperOrigin-RevId: 384557722\nChange-Id: I72858edf72952fd4e7e0a1d9776c9408a7081d42",
      "author": "TensorFlower Gardener",
      "comments": null,
      "stats": "{'additions': 17, 'deletions': 13, 'total': 30}",
      "files": "{'tensorflow/go/tensor.go': {'additions': 17, 'deletions': 13, 'changes': 30, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/8721ba96e5760c229217b594f6d2ba332beedf22/tensorflow%2Fgo%2Ftensor.go', 'patch': '@@ -98,9 +98,9 @@ func NewTensor(value interface{}) (*Tensor, error) {\\n \\n \\traw := tensorData(t.c)\\n \\n-\\truntime.SetFinalizer(t, func(t *Tensor) {\\n+\\tdefer runtime.SetFinalizer(t, func(t *Tensor) {\\n \\t\\tif dataType == String {\\n-\\t\\t\\tt.clearTStrings(raw, nflattened)\\n+\\t\\t\\tt.clearTStrings(raw, int64(nbytes/C.sizeof_TF_TString))\\n \\t\\t}\\n \\n \\t\\tt.finalize()\\n@@ -111,15 +111,18 @@ func NewTensor(value interface{}) (*Tensor, error) {\\n \\tif isAllArray(val.Type()) {\\n \\t\\t// We have arrays all the way down, or just primitive types. We can\\n \\t\\t// just copy the memory in as it is all contiguous.\\n-\\t\\tif err := copyPtr(buf, unpackEFace(value).data, int(val.Type().Size())); err != nil {\\n+\\t\\tif _, err := copyPtr(buf, unpackEFace(value).data, int(val.Type().Size())); err != nil {\\n \\t\\t\\treturn nil, err\\n \\t\\t}\\n \\t} else {\\n \\t\\t// When there are slices involved the memory for each leaf slice may\\n \\t\\t// not be contiguous with the others or in the order we might\\n \\t\\t// expect, so we need to work our way down to each slice of\\n \\t\\t// primitives and copy them individually\\n-\\t\\tif err := encodeTensorWithSlices(buf, val, shape); err != nil {\\n+\\t\\tif n, err := encodeTensorWithSlices(buf, val, shape); err != nil {\\n+\\t\\t\\t// Set nbytes to count of bytes written for deferred call to\\n+\\t\\t\\t// runtime.SetFinalizer\\n+\\t\\t\\tnbytes = uintptr(n)\\n \\t\\t\\treturn nil, err\\n \\t\\t}\\n \\t}\\n@@ -486,13 +489,13 @@ func sizeVarUint(v uint64) int {\\n \\n // encodeTensorWithSlices writes v to the specified buffer using the format specified in\\n // c_api.h. Use stringEncoder for String tensors.\\n-func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) error {\\n+func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) (int, error) {\\n \\t// If current dimension is a slice, verify that it has the expected size\\n \\t// Go\\'s type system makes that guarantee for arrays.\\n \\tif v.Kind() == reflect.Slice {\\n \\t\\texpected := int(shape[0])\\n \\t\\tif v.Len() != expected {\\n-\\t\\t\\treturn fmt.Errorf(\"mismatched slice lengths: %d and %d\", v.Len(), expected)\\n+\\t\\t\\treturn 0, fmt.Errorf(\"mismatched slice lengths: %d and %d\", v.Len(), expected)\\n \\t\\t}\\n \\t} else if v.Kind() == reflect.String {\\n \\t\\ts := v.Interface().(string)\\n@@ -501,7 +504,7 @@ func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) err\\n \\t\\tptr := unsafe.Pointer(&tstr)\\n \\t\\treturn copyPtr(w, ptr, C.sizeof_TF_TString)\\n \\t} else if v.Kind() != reflect.Array {\\n-\\t\\treturn fmt.Errorf(\"unsupported type %v\", v.Type())\\n+\\t\\treturn 0, fmt.Errorf(\"unsupported type %v\", v.Type())\\n \\t}\\n \\n \\t// Once we have just a single dimension we can just copy the data\\n@@ -514,15 +517,17 @@ func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) err\\n \\t\\treturn copyPtr(w, ptr, v.Len()*int(elt.Type().Size()))\\n \\t}\\n \\n+\\tn := 0\\n \\tsubShape := shape[1:]\\n \\tfor i := 0; i < v.Len(); i++ {\\n-\\t\\terr := encodeTensorWithSlices(w, v.Index(i), subShape)\\n+\\t\\tj, err := encodeTensorWithSlices(w, v.Index(i), subShape)\\n \\t\\tif err != nil {\\n-\\t\\t\\treturn err\\n+\\t\\t\\treturn n + j, err\\n \\t\\t}\\n+\\t\\tn += j\\n \\t}\\n \\n-\\treturn nil\\n+\\treturn n, nil\\n }\\n \\n // It isn\\'t safe to use reflect.SliceHeader as it uses a uintptr for Data and\\n@@ -536,15 +541,14 @@ type sliceHeader struct {\\n // copyPtr copies the backing data for a slice or array directly into w. Note\\n // we don\\'t need to worry about byte ordering because we want the natural byte\\n // order for the machine we\\'re running on.\\n-func copyPtr(w *bytes.Buffer, ptr unsafe.Pointer, l int) error {\\n+func copyPtr(w *bytes.Buffer, ptr unsafe.Pointer, l int) (int, error) {\\n \\t// Convert our slice header into a []byte so we can call w.Write\\n \\tb := *(*[]byte)(unsafe.Pointer(&sliceHeader{\\n \\t\\tData: ptr,\\n \\t\\tLen:  l,\\n \\t\\tCap:  l,\\n \\t}))\\n-\\t_, err := w.Write(b)\\n-\\treturn err\\n+\\treturn w.Write(b)\\n }\\n \\n func bug(format string, args ...interface{}) error {'}}",
      "message_norm": "merge pull request #50508 from wamuir:fix-tstring-dealloc\n\npiperorigin-revid: 384557722\nchange-id: i72858edf72952fd4e7e0a1d9776c9408a7081d42",
      "language": "en",
      "entities": "[('#50508', 'ISSUE', ''), ('384557722', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/go/tensor.go'])",
      "num_files": 1.0
    },
    {
      "index": 552,
      "vuln_id": "GHSA-54qq-9chj-rxhv",
      "cwe_id": "{'CWE-79'}",
      "score": 5.4,
      "chain": "{'https://github.com/livehelperchat/livehelperchat/commit/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting in LiveHelperChat LiveHelperChat prior to version 3.93 contains a cross-site scripting vulnerability.",
      "published_date": "2022-01-29",
      "chain_len": 1,
      "project": "https://github.com/livehelperchat/livehelperchat",
      "commit_href": "https://github.com/livehelperchat/livehelperchat/commit/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
      "commit_sha": "8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
      "patch": "SINGLE",
      "chain_ord": "['8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb']",
      "before_first_fix_commit": "{'d7b85466c217b3750eaccc8703ce54ba8785c4d3'}",
      "last_fix_commit": "8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/27/2022, 20:08:18",
      "message": "Escape in user box",
      "author": "Remigijus Kiminas",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'lhc_web/design/defaulttheme/tpl/pagelayouts/parts/user_box.tpl.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/LiveHelperChat/livehelperchat/raw/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb/lhc_web%2Fdesign%2Fdefaulttheme%2Ftpl%2Fpagelayouts%2Fparts%2Fuser_box.tpl.php', 'patch': '@@ -12,7 +12,7 @@\\n \\n ?>\\n <li class=\"nav-item dropleft\">\\n-    <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><?php echo htmlspecialchars($UserData->name),\\' \\',htmlspecialchars($UserData->surname)?></a>\\n+    <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\" ng-non-bindable><?php echo htmlspecialchars($UserData->name),\\' \\',htmlspecialchars($UserData->surname)?></a>\\n     <div class=\"dropdown-menu\" style=\"min-width: 25rem;\" role=\"menu\">\\n \\n         <div class=\"row\">'}}",
      "message_norm": "escape in user box",
      "language": "en",
      "entities": "[('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lhc_web/design/defaulttheme/tpl/pagelayouts/parts/user_box.tpl.php'])",
      "num_files": 1.0
    },
    {
      "index": 2205,
      "vuln_id": "GHSA-j7c4-2xj8-wm7r",
      "cwe_id": "{'CWE-20'}",
      "score": 7.5,
      "chain": "{'https://github.com/latchset/kdcproxy/commit/f274aa6787cb8b3ec1cc12c440a56665b7231882'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects kdcproxy python-kdcproxy before 0.3.2 allows remote attackers to cause a denial of service via a large POST request.",
      "published_date": "2018-11-01",
      "chain_len": 1,
      "project": "https://github.com/latchset/kdcproxy",
      "commit_href": "https://github.com/latchset/kdcproxy/commit/f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "commit_sha": "f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "patch": "SINGLE",
      "chain_ord": "['f274aa6787cb8b3ec1cc12c440a56665b7231882']",
      "before_first_fix_commit": "{'e4a71193099cd395578bcf32f4eb8beaa7da3e43'}",
      "last_fix_commit": "f274aa6787cb8b3ec1cc12c440a56665b7231882",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/03/2015, 18:38:49",
      "message": "Enforce a maximum packet length\n\nPermanently fixes CVE-2015-5159 for all applications.",
      "author": "Nathaniel McCallum",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 1, 'total': 7}",
      "files": "{'kdcproxy/__init__.py': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/latchset/kdcproxy/raw/f274aa6787cb8b3ec1cc12c440a56665b7231882/kdcproxy%2F__init__.py', 'patch': '@@ -61,6 +61,7 @@ def __str__(self):\\n \\n \\n class Application:\\n+    MAX_LENGTH = 128 * 1024\\n     SOCKTYPES = {\\n         \"tcp\": socket.SOCK_STREAM,\\n         \"udp\": socket.SOCK_DGRAM,\\n@@ -180,7 +181,11 @@ def __call__(self, env, start_response):\\n             try:\\n                 length = int(env[\"CONTENT_LENGTH\"])\\n             except AttributeError:\\n-                length = -1\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length < 0:\\n+                raise HTTPException(411, \"Length required.\")\\n+            if length > self.MAX_LENGTH:\\n+                raise HTTPException(413, \"Request entity too large.\")\\n             try:\\n                 pr = codec.decode(env[\"wsgi.input\"].read(length))\\n             except codec.ParsingError as e:'}}",
      "message_norm": "enforce a maximum packet length\n\npermanently fixes cve-2015-5159 for all applications.",
      "language": "en",
      "entities": "[('fixes', 'ACTION', ''), ('cve-2015-5159', 'VULNID', 'CVE')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['kdcproxy/__init__.py'])",
      "num_files": 1.0
    },
    {
      "index": 1243,
      "vuln_id": "GHSA-8r7c-3cm2-3h8f",
      "cwe_id": "{'CWE-401'}",
      "score": 4.3,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd'}",
      "dataset": "osv",
      "summary": "Memory leak in Tensorflow ### Impact\nIf a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/common_runtime/immutable_executor_state.cc#L84-L262):\n\n```cc\nStatus s = params_.create_kernel(n->properties(), &item->kernel);\nif (!s.ok()) {\n  item->kernel = nullptr;\n  s = AttachDef(s, *n);\n  return s;           \n}                     \n```\n\nHere, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
      "commit_sha": "c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
      "patch": "SINGLE",
      "chain_ord": "['c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd']",
      "before_first_fix_commit": "{'d781eab54947e82ebf182f28dcdd5b02e6925d46'}",
      "last_fix_commit": "c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/10/2021, 21:51:15",
      "message": "Fix memory leak when a graph node is invalid.\n\nIf a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. Hence, we get a memory leak.\n\nPiperOrigin-RevId: 408968108\nChange-Id: I1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/core/common_runtime/immutable_executor_state.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd/tensorflow%2Fcore%2Fcommon_runtime%2Fimmutable_executor_state.cc', 'patch': '@@ -131,6 +131,7 @@ Status ImmutableExecutorState::Initialize(const Graph& graph) {\\n \\n     Status s = params_.create_kernel(n->properties(), &item->kernel);\\n     if (!s.ok()) {\\n+      params_.delete_kernel(item->kernel);\\n       item->kernel = nullptr;\\n       s = AttachDef(s, *n);\\n       return s;'}}",
      "message_norm": "fix memory leak when a graph node is invalid.\n\nif a graph node is invalid but a kernel is created then we set the kernel back to `nullptr` but we forget to delete it. hence, we get a memory leak.\n\npiperorigin-revid: 408968108\nchange-id: i1d8a9d0d8988ed5e08be8b9f2004ce1b4cd11b7c",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('memory leak', 'SECWORD', ''), ('408968108', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/common_runtime/immutable_executor_state.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3082,
      "vuln_id": "GHSA-v923-w3x8-wh69",
      "cwe_id": "{'CWE-384'}",
      "score": 4.8,
      "chain": "{'https://github.com/jaredhanson/passport/commit/7e9b9cf4d7be02428e963fc729496a45baeea608'}",
      "dataset": "osv",
      "summary": "Passport before 0.6.0 vulnerable to session regeneration when a users logs in or out This affects the package passport before 0.6.0. When a user logs in or logs out, the session is regenerated instead of being closed.",
      "published_date": "2022-07-02",
      "chain_len": 1,
      "project": "https://github.com/jaredhanson/passport",
      "commit_href": "https://github.com/jaredhanson/passport/commit/7e9b9cf4d7be02428e963fc729496a45baeea608",
      "commit_sha": "7e9b9cf4d7be02428e963fc729496a45baeea608",
      "patch": "SINGLE",
      "chain_ord": "['7e9b9cf4d7be02428e963fc729496a45baeea608']",
      "before_first_fix_commit": "{'5e6d92f1ef2adf21b54492cc86a7c066ef3f1e98'}",
      "last_fix_commit": "7e9b9cf4d7be02428e963fc729496a45baeea608",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/17/2022, 15:15:54",
      "message": "Regenerate session on login.",
      "author": "Jared Hanson",
      "comments": null,
      "stats": "{'additions': 20, 'deletions': 10, 'total': 30}",
      "files": "{'lib/sessionmanager.js': {'additions': 20, 'deletions': 10, 'changes': 30, 'status': 'modified', 'raw_url': 'https://github.com/jaredhanson/passport/raw/7e9b9cf4d7be02428e963fc729496a45baeea608/lib%2Fsessionmanager.js', 'patch': \"@@ -10,24 +10,34 @@ function SessionManager(options, serializeUser) {\\n }\\n \\n SessionManager.prototype.logIn = function(req, user, cb) {\\n+  console.log('SM: logIn');\\n+  \\n   var self = this;\\n-  this._serializeUser(user, req, function(err, obj) {\\n+  req.session.regenerate(function(err) {\\n     if (err) {\\n       return cb(err);\\n     }\\n-    // TODO: Error if session isn't available here.\\n-    if (!req.session) {\\n-      req.session = {};\\n-    }\\n-    if (!req.session[self._key]) {\\n-      req.session[self._key] = {};\\n-    }\\n-    req.session[self._key].user = obj;\\n-    cb();\\n+    \\n+    self._serializeUser(user, req, function(err, obj) {\\n+      if (err) {\\n+        return cb(err);\\n+      }\\n+      // TODO: Error if session isn't available here.\\n+      if (!req.session) {\\n+        req.session = {};\\n+      }\\n+      if (!req.session[self._key]) {\\n+        req.session[self._key] = {};\\n+      }\\n+      req.session[self._key].user = obj;\\n+      cb();\\n+    });\\n   });\\n }\\n \\n SessionManager.prototype.logOut = function(req, cb) {\\n+  console.log('SM: logOut');\\n+  \\n   if (req.session && req.session[this._key]) {\\n     delete req.session[this._key].user;\\n   }\"}}",
      "message_norm": "regenerate session on login.",
      "language": "en",
      "entities": "[('login', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/sessionmanager.js'])",
      "num_files": 1.0
    },
    {
      "index": 3064,
      "vuln_id": "GHSA-v6vg-pxvv-g5cq",
      "cwe_id": "{'CWE-269'}",
      "score": 6.5,
      "chain": "{'https://github.com/snipe/snipe-it/commit/db0c0e790892db874573d95f8ae4268b8a011ab1'}",
      "dataset": "osv",
      "summary": "Improper Privilege Management in Snipe-IT Snipe-IT prior to 5.3.9 is vulnerable to improper privilege management. A user who does not have access to the supplier module may view supplier content.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/db0c0e790892db874573d95f8ae4268b8a011ab1",
      "commit_sha": "db0c0e790892db874573d95f8ae4268b8a011ab1",
      "patch": "SINGLE",
      "chain_ord": "['db0c0e790892db874573d95f8ae4268b8a011ab1']",
      "before_first_fix_commit": "{'05c0819776b07425b2831cd31a8a0f4e7ac30c09', 'd77a47765ea1fd112a9b0731a88de1e26ed24256'}",
      "last_fix_commit": "db0c0e790892db874573d95f8ae4268b8a011ab1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/13/2022, 18:56:55",
      "message": "Merge pull request #10665 from snipe/fixes/adds_gate_to_supplier_view\n\nAdds gate to supplier",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'app/Http/Controllers/SuppliersController.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/db0c0e790892db874573d95f8ae4268b8a011ab1/app%2FHttp%2FControllers%2FSuppliersController.php', 'patch': \"@@ -184,6 +184,7 @@ public function destroy($supplierId)\\n      */\\n     public function show($supplierId = null)\\n     {\\n+        $this->authorize('view', Supplier::class);\\n         $supplier = Supplier::find($supplierId);\\n \\n         if (isset($supplier->id)) {\"}}",
      "message_norm": "merge pull request #10665 from snipe/fixes/adds_gate_to_supplier_view\n\nadds gate to supplier",
      "language": "en",
      "entities": "[('#10665', 'ISSUE', ''), ('adds_gate_to_supplier_view', 'ACTION', ''), ('adds', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/SuppliersController.php'])",
      "num_files": 1.0
    },
    {
      "index": 200,
      "vuln_id": "GHSA-35g4-qx3c-vjhx",
      "cwe_id": "{'CWE-306'}",
      "score": 6.5,
      "chain": "{'https://github.com/matrix-org/matrix-appservice-bridge/commit/b69e745584a34fcfd858df33e4631e420da07b9f'}",
      "dataset": "osv",
      "summary": "Automatic room upgrade handling can be used maliciously to bridge a room non-consentually  ### Impact\n\nIf a bridge has room upgrade handling turned on in the configuration (the `roomUpgradeOpts` key when instantiating a new `Bridge` instance.), any `m.room.tombstone` event it encounters will be used to unbridge the current room and bridge into the target room. However, the target room `m.room.create` event is not checked to verify if the `predecessor` field contains the previous room. This means that any mailcious admin of a bridged room can repoint the traffic to a different room without the new room being aware.\n\n\n### Patches\n\nVersions 2.6.1 and greater are patched.\n\n### Workarounds\n\nDisabling the automatic room upgrade handling can be done by removing the `roomUpgradeOpts` key from the `Bridge` class options. \n\n### References\n\nThe issue is patched by https://github.com/matrix-org/matrix-appservice-bridge/pull/330\n\n### For more information]\n\nIf you have any questions or comments about this advisory, email us at security@matrix.org.",
      "published_date": "2021-06-21",
      "chain_len": 1,
      "project": "https://github.com/matrix-org/matrix-appservice-bridge",
      "commit_href": "https://github.com/matrix-org/matrix-appservice-bridge/commit/b69e745584a34fcfd858df33e4631e420da07b9f",
      "commit_sha": "b69e745584a34fcfd858df33e4631e420da07b9f",
      "patch": "SINGLE",
      "chain_ord": "['b69e745584a34fcfd858df33e4631e420da07b9f']",
      "before_first_fix_commit": "{'1b587e2455cbd30779f5052d2d2d46d58463a3e2'}",
      "last_fix_commit": "b69e745584a34fcfd858df33e4631e420da07b9f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/28/2021, 09:32:25",
      "message": "Check m.room.create event on room upgrade",
      "author": "Will Hunt",
      "comments": null,
      "stats": "{'additions': 7, 'deletions': 0, 'total': 7}",
      "files": "{'src/components/room-upgrade-handler.ts': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https://github.com/matrix-org/matrix-appservice-bridge/raw/b69e745584a34fcfd858df33e4631e420da07b9f/src%2Fcomponents%2Froom-upgrade-handler.ts', 'patch': \"@@ -145,6 +145,13 @@ export class RoomUpgradeHandler {\\n     private async onJoinedNewRoom(oldRoomId: string, newRoomId: string) {\\n         log.debug(`Joined ${newRoomId}`);\\n         const intent = this.bridge.getIntent();\\n+        const { predecessor } = await intent.getStateEvent(newRoomId, 'm.room.create');\\n+        if (predecessor.room_id !== oldRoomId) {\\n+            log.error(\\n+    `Room doesn't have a matching predecessor (expected: ${oldRoomId}, got: ${predecessor.room_id}), not bridging.`\\n+            );\\n+            return false;\\n+        }\\n         const asBot = this.bridge.getBot();\\n         if (this.opts.migrateStoreEntries) {\\n             const success = await this.migrateStoreEntries(oldRoomId, newRoomId);\"}}",
      "message_norm": "check m.room.create event on room upgrade",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/components/room-upgrade-handler.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2795,
      "vuln_id": "GHSA-qpv2-jxc7-3638",
      "cwe_id": "{'CWE-200'}",
      "score": 4.3,
      "chain": "{'https://github.com/snipe/snipe-it/commit/05c0819776b07425b2831cd31a8a0f4e7ac30c09'}",
      "dataset": "osv",
      "summary": "Exposure of Sensitive Information in snipe/snipe-it Snipe-IT prior to v5.3.10 is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor.",
      "published_date": "2022-02-15",
      "chain_len": 1,
      "project": "https://github.com/snipe/snipe-it",
      "commit_href": "https://github.com/snipe/snipe-it/commit/05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "commit_sha": "05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "patch": "SINGLE",
      "chain_ord": "['05c0819776b07425b2831cd31a8a0f4e7ac30c09']",
      "before_first_fix_commit": "{'16f963fa3d7c4875e9bccf6926629efe3530d00e'}",
      "last_fix_commit": "05c0819776b07425b2831cd31a8a0f4e7ac30c09",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/11/2022, 23:55:42",
      "message": "Updated language string\n\nSigned-off-by: snipe <snipe@snipe.net>",
      "author": "snipe",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'resources/lang/en/passwords.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/snipe/snipe-it/raw/05c0819776b07425b2831cd31a8a0f4e7ac30c09/resources%2Flang%2Fen%2Fpasswords.php', 'patch': \"@@ -1,6 +1,6 @@\\n <?php\\n \\n return [\\n-    'sent'\\t        => 'Your password link has been sent!',\\n+    'sent'\\t        => 'Success: If that email address exists in our system, a password recovery email has been sent.',\\n     'user'\\t\\t\\t=> 'No matching active user found with that email.',\\n ];\"}}",
      "message_norm": "updated language string\n\nsigned-off-by: snipe <snipe@snipe.net>",
      "language": "en",
      "entities": "[('updated', 'ACTION', ''), ('snipe@snipe.net', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['resources/lang/en/passwords.php'])",
      "num_files": 1.0
    },
    {
      "index": 3107,
      "vuln_id": "GHSA-vfr4-x8j2-3rf9",
      "cwe_id": "{'CWE-369'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d'}",
      "dataset": "osv",
      "summary": "Division by zero in TFLite's implementation of `TransposeConv` ### Impact\nThe optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L5221-L5222):\n\n```cc \nint height_col = (height + pad_t + pad_b - filter_h) / stride_h + 1;\nint width_col = (width + pad_l + pad_r - filter_w) / stride_w + 1;\n```\n\nAn attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d",
      "commit_sha": "801c1c6be5324219689c98e1bd3e0ca365ee834d",
      "patch": "SINGLE",
      "chain_ord": "['801c1c6be5324219689c98e1bd3e0ca365ee834d']",
      "before_first_fix_commit": "{'8e45822aa0b9f5df4b4c64f221e64dc930a70a9d'}",
      "last_fix_commit": "801c1c6be5324219689c98e1bd3e0ca365ee834d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/28/2021, 00:46:25",
      "message": "Fix another division by 0 in TFLite\n\nPiperOrigin-RevId: 370800181\nChange-Id: I924809166a6131f5075e6d45c455106538d755f9",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'tensorflow/lite/kernels/transpose_conv.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/801c1c6be5324219689c98e1bd3e0ca365ee834d/tensorflow%2Flite%2Fkernels%2Ftranspose_conv.cc', 'patch': '@@ -591,6 +591,10 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   const auto* params =\\n       reinterpret_cast<TfLiteTransposeConvParams*>(node->builtin_data);\\n \\n+  // Prevent divisions by 0\\n+  TF_LITE_ENSURE(context, params->stride_height > 0);\\n+  TF_LITE_ENSURE(context, params->stride_width > 0);\\n+\\n   // Resize any deferred dynamic tensors\\n   if (IsDynamicTensor(output)) {\\n     TF_LITE_ENSURE_OK(context, ResizeTensor(context, output_shape, output));'}}",
      "message_norm": "fix another division by 0 in tflite\n\npiperorigin-revid: 370800181\nchange-id: i924809166a6131f5075e6d45c455106538d755f9",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370800181', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/lite/kernels/transpose_conv.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1561,
      "vuln_id": "GHSA-cjc7-49v2-jp64",
      "cwe_id": "{'CWE-787', 'CWE-665'}",
      "score": 5.3,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/6fd02f44810754ae7481838b6a67c5df7f909ca3', 'https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc'}",
      "dataset": "osv",
      "summary": "Incomplete validation in `SparseAdd` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https://github.com/tensorflow/tensorflow/commit/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc",
      "commit_sha": "41727ff06111117bdf86b37db198217fd7a143cc",
      "patch": "MULTI",
      "chain_ord": "['6fd02f44810754ae7481838b6a67c5df7f909ca3', '41727ff06111117bdf86b37db198217fd7a143cc']",
      "before_first_fix_commit": "{'6f432d6334edc93fd5af0070170def56b0413e8a'}",
      "last_fix_commit": "41727ff06111117bdf86b37db198217fd7a143cc",
      "chain_ord_pos": 2.0,
      "commit_datetime": "05/11/2021, 22:41:51",
      "message": "Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373248068\nChange-Id: I0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 12, 'deletions': 5, 'total': 17}",
      "files": "{'tensorflow/core/kernels/sparse_add_op.cc': {'additions': 12, 'deletions': 5, 'changes': 17, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/41727ff06111117bdf86b37db198217fd7a143cc/tensorflow%2Fcore%2Fkernels%2Fsparse_add_op.cc', 'patch': '@@ -44,6 +44,11 @@ class SparseAddOp : public OpKernel {\\n                     b_indices->shape().DebugString()));\\n     const int64 a_nnz = a_indices->dim_size(0);\\n     const int64 b_nnz = b_indices->dim_size(0);\\n+    const int num_dims = a_indices->dim_size(1);\\n+    OP_REQUIRES(ctx, b_indices->dim_size(1) == num_dims,\\n+                errors::InvalidArgument(\\n+                    \"Input indices must have the same dimension, got \",\\n+                    num_dims, \" and \", b_indices->dim_size(1)));\\n \\n     OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\\n     OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\\n@@ -72,6 +77,13 @@ class SparseAddOp : public OpKernel {\\n                     \"Input shapes should be a vector but received shapes \",\\n                     a_shape->shape().DebugString(), \" and \",\\n                     b_shape->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, a_shape->NumElements() == num_dims,\\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\\n+                                \"a_shape must match, got \",\\n+                                num_dims, \" and \", a_shape->NumElements()));\\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Tesors must not be empty\"));\\n     OP_REQUIRES(\\n         ctx, a_shape->IsSameSize(*b_shape),\\n         errors::InvalidArgument(\\n@@ -100,11 +112,6 @@ class SparseAddOp : public OpKernel {\\n     std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx\\n     entries_to_copy.reserve(a_nnz + b_nnz);\\n     std::vector<T> out_values;\\n-    const int num_dims = a_shape->dim_size(0);\\n-\\n-    OP_REQUIRES(ctx, num_dims > 0,\\n-                errors::InvalidArgument(\"Invalid input_a shape. Received: \",\\n-                                        a_shape->DebugString()));\\n \\n     // The input and output sparse tensors are assumed to be ordered along\\n     // increasing dimension number.'}}",
      "message_norm": "validate that a and b are proper sparse tensors\n\npiperorigin-revid: 373248068\nchange-id: i0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('373248068', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/sparse_add_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 3071,
      "vuln_id": "GHSA-v7m9-9497-p9gr",
      "cwe_id": "{'CWE-863'}",
      "score": 6.8,
      "chain": "{'https://github.com/jupyterhub/kubespawner/commit/3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0'}",
      "dataset": "osv",
      "summary": "Possible pod name collisions in jupyterhub-kubespawner ### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nJupyterHub deployments using:\n\n- KubeSpawner <= 0.11.1 (e.g. zero-to-jupyterhub 0.9.0) and\n- enabled named_servers (not default), and\n- an Authenticator that allows:\n  - usernames with hyphens or other characters that require escape (e.g. `user-hyphen` or `user@email`), and\n  - usernames which may match other usernames up to but not including the escaped character (e.g. `user` in the above cases)\n\nIn this circumstance, certain usernames will be able to craft particular server names which will grant them access to the default server of other users who have matching usernames.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nPatch will be released in kubespawner 0.12 and zero-to-jupyterhub 0.9.1\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\n#### KubeSpawner\n\nSpecify configuration:\n\nfor KubeSpawner\n```python\nfrom traitlets import default\nfrom kubespawner import KubeSpawner\n\nclass PatchedKubeSpawner(KubeSpawner):\n    @default(\"pod_name_template\")\n    def _default_pod_name_template(self):\n        if self.name:\n            return \"jupyter-{username}-{servername}\"\n        else:\n            return \"jupyter-{username}\"\n\n    @default(\"pvc_name_template\")\n    def _default_pvc_name_template(self):\n        if self.name:\n            return \"claim-{username}-{servername}\"\n        else:\n            return \"claim-{username}\"\n\nc.JupyterHub.spawner_class = PatchedKubeSpawner\n```\n\n**Note for KubeSpawner:** this configuration will behave differently before and after the upgrade, so will need to be removed when upgrading. Only apply this configuration while still using KubeSpawner \u2264 0.11.1 and remove it after upgrade to ensure consistent pod and pvc naming.\n\nChanging the name template means pvcs for named servers will have different names. This will result in orphaned PVCs for named servers across Hub upgrade! This may appear as data loss for users, depending on configuration, but the orphaned PVCs will still be around and data can be migrated manually (or new PVCs created manually to reference existing PVs) before deleting the old PVCs and/or PVs.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [kubespawner](https://github.com/jupyterhub/kubespawner)\n* Email us at [security@ipython.org](mailto:security@ipython.org)\n\nCredit: Jining Huang",
      "published_date": "2020-07-22",
      "chain_len": 1,
      "project": "https://github.com/jupyterhub/kubespawner",
      "commit_href": "https://github.com/jupyterhub/kubespawner/commit/3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0",
      "commit_sha": "3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0",
      "patch": "SINGLE",
      "chain_ord": "['3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0']",
      "before_first_fix_commit": "{'b7f55eae3d5afb6ac9f2facf76f46239e2f2a38a'}",
      "last_fix_commit": "3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/03/2020, 07:48:42",
      "message": "move delimiter to pvc/pod name templates\n\nand note version change",
      "author": "Min RK",
      "comments": null,
      "stats": "{'additions': 28, 'deletions': 16, 'total': 44}",
      "files": "{'kubespawner/spawner.py': {'additions': 28, 'deletions': 16, 'changes': 44, 'status': 'modified', 'raw_url': 'https://github.com/jupyterhub/kubespawner/raw/3dfe870a7f5e98e2e398b01996ca6b8eff4bb1d0/kubespawner%2Fspawner.py', 'patch': '@@ -307,16 +307,25 @@ def _namespace_default(self):\\n     )\\n \\n     pod_name_template = Unicode(\\n-        \\'jupyter-{username}{servername}\\',\\n+        \\'jupyter-{username}--{servername}\\',\\n         config=True,\\n         help=\"\"\"\\n         Template to use to form the name of user\\'s pods.\\n \\n-        `{username}` is expanded to the escaped, dns-label safe username.\\n+        `{username}` is expanded to the escaped, dns-label-safe username.\\n+        `{servername}` is expanded to the escaped, dns-label-safe server name, if any.\\n+\\n+        Trailing `-` characters are stripped for safe handling of empty server names (user default servers).\\n \\n         This must be unique within the namespace the pods are being spawned\\n         in, so if you are running multiple jupyterhubs spawning in the\\n         same namespace, consider setting this to be something more unique.\\n+\\n+        .. versionchanged:: 0.12\\n+            `--` delimiter added to the template,\\n+            where it was implicitly added to the `servername` field before.\\n+            Additionally, `username--servername` delimiter was `-` instead of `--`,\\n+            allowing collisions in certain circumstances.\\n         \"\"\"\\n     )\\n \\n@@ -332,16 +341,25 @@ def _namespace_default(self):\\n     )\\n \\n     pvc_name_template = Unicode(\\n-        \\'claim-{username}{servername}\\',\\n+        \\'claim-{username}--{servername}\\',\\n         config=True,\\n         help=\"\"\"\\n         Template to use to form the name of user\\'s pvc.\\n \\n         `{username}` is expanded to the escaped, dns-label safe username.\\n+        `{servername}` is expanded to the escaped, dns-label-safe server name, if any.\\n+\\n+        Trailing `-` characters are stripped for safe handling of empty server names (user default servers).\\n \\n         This must be unique within the namespace the pvc are being spawned\\n         in, so if you are running multiple jupyterhubs spawning in the\\n         same namespace, consider setting this to be something more unique.\\n+\\n+        .. versionchanged:: 0.12\\n+            `--` delimiter added to the template,\\n+            where it was implicitly added to the `servername` field before.\\n+            Additionally, `username--servername` delimiter was `-` instead of `--`,\\n+            allowing collisions in certain circumstances.\\n         \"\"\"\\n     )\\n \\n@@ -1313,28 +1331,22 @@ def _expand_user_properties(self, template):\\n         # Note: \\'-\\' is not in safe_chars, as it is being used as escape character\\n         safe_chars = set(string.ascii_lowercase + string.digits)\\n \\n-        # Set servername based on whether named-server initialised\\n-        if self.name:\\n-            # use two -- to ensure no collision possibilities\\n-            # are created by an ambiguous boundary between username and\\n-            # servername.\\n-            # -- cannot occur in a string where - is the escape char.\\n-            servername = \\'--{}\\'.format(self.name)\\n-            safe_servername = \\'--{}\\'.format(escapism.escape(self.name, safe=safe_chars, escape_char=\\'-\\').lower())\\n-        else:\\n-            servername = \\'\\'\\n-            safe_servername = \\'\\'\\n+        raw_servername = self.name or \\'\\'\\n+        safe_servername = escapism.escape(raw_servername, safe=safe_chars, escape_char=\\'-\\').lower()\\n \\n         legacy_escaped_username = \\'\\'.join([s if s in safe_chars else \\'-\\' for s in self.user.name.lower()])\\n         safe_username = escapism.escape(self.user.name, safe=safe_chars, escape_char=\\'-\\').lower()\\n-        return template.format(\\n+        rendered = template.format(\\n             userid=self.user.id,\\n             username=safe_username,\\n             unescaped_username=self.user.name,\\n             legacy_escape_username=legacy_escaped_username,\\n             servername=safe_servername,\\n-            unescaped_servername=servername,\\n+            unescaped_servername=raw_servername,\\n         )\\n+        # strip trailing - delimiter in case of empty servername.\\n+        # k8s object names cannot have trailing -\\n+        return rendered.rstrip(\"-\")\\n \\n     def _expand_all(self, src):\\n         if isinstance(src, list):'}}",
      "message_norm": "move delimiter to pvc/pod name templates\n\nand note version change",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['kubespawner/spawner.py'])",
      "num_files": 1.0
    },
    {
      "index": 950,
      "vuln_id": "GHSA-7488-6x3r-23w5",
      "cwe_id": "{'CWE-22'}",
      "score": 9.3,
      "chain": "{'https://github.com/ganga-devs/ganga/commit/730e7aba192407d35eb37dd7938d49071124be8c'}",
      "dataset": "osv",
      "summary": "ganga before 8.5.10 allows absolute path traversal because the Flask send_file function is used unsafely The ganga-devs/ganga repository before 8.5.10 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.",
      "published_date": "2022-07-13",
      "chain_len": 1,
      "project": "https://github.com/ganga-devs/ganga",
      "commit_href": "https://github.com/ganga-devs/ganga/commit/730e7aba192407d35eb37dd7938d49071124be8c",
      "commit_sha": "730e7aba192407d35eb37dd7938d49071124be8c",
      "patch": "SINGLE",
      "chain_ord": "['730e7aba192407d35eb37dd7938d49071124be8c']",
      "before_first_fix_commit": "{'0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc'}",
      "last_fix_commit": "730e7aba192407d35eb37dd7938d49071124be8c",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/09/2022, 23:19:28",
      "message": "# Absolute Path Traversal due to incorrect use of `send_file` call (#2025)\n\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\r\n\r\n## Common Weakness Enumeration category\r\nCWE - 36\r\n\r\n## Root Cause Analysis\r\n\r\nThe `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  Please see the example below.\r\n```\r\n>>> import os.path\r\n>>> static = \"path/to/mySafeStaticDir\"\r\n>>> malicious = \"/../../../../../etc/passwd\"\r\n>>> os.path.join(t,malicious)\r\n'/../../../../../etc/passwd'\r\n```\r\nSince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks.\r\n\r\nIn this case, the problems occurs due to the following code :\r\nhttps://github.com/ganga-devs/ganga/blob/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc/ganga/GangaGUI/gui/routes.py#L671\r\n\r\nHere, the `path` parameter is attacker controlled. This parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. This leads to a path traversal attack.\r\n\r\n## Proof of Concept\r\n\r\nThe bug can be verified using a proof of concept similar to the one shown below.\r\n\r\n```\r\ncurl --path-as-is 'http://<domain>/job/<int:job_id>/browse///../../../../etc/passwd\"'\r\n```\r\n## Remediation\r\n\r\nThis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `werkzeug.utils.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\r\n\r\n## Common Vulnerability Scoring System Vector\r\n\r\nThe attack can be carried over the network. A complex non-standard configuration or a specialized condition is not required for the attack to be successfully conducted. There is no user interaction required for successful execution. The attack can affect components outside the scope of the target module. The attack can be used to gain access to confidential files like passwords, login credentials and other secrets. It cannot be directly used to affect a change on a system resource. Hence has limited to no impact on integrity. Using this attack vector a attacker may make multiple requests for accessing huge files such as a database. This can lead to a partial system denial service. However, the impact on availability is quite low in this case. Taking this account an appropriate CVSS v3.1 vector would be\r\n\r\n(AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L)[https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L&version=3.1]\r\n\r\nThis gives it a base score of 9.3/10 and a severity rating of critical.\r\n\r\n## References\r\n* [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\r\n* github/securitylab#669\r\n\r\n### This bug was found using *[CodeQL by Github](https://codeql.github.com/)*\r\n\r\nCo-authored-by: Porcupiney Hairs <porucpiney.hairs@protonmail.com>",
      "author": "porcupineyhairs",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'ganga/GangaGUI/gui/routes.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/ganga-devs/ganga/raw/730e7aba192407d35eb37dd7938d49071124be8c/ganga%2FGangaGUI%2Fgui%2Froutes.py', 'patch': '@@ -12,7 +12,7 @@\\n import sys\\n import datetime\\n from functools import wraps\\n-from werkzeug.utils import secure_filename\\n+from werkzeug.utils import secure_filename, safe_join\\n from werkzeug.security import generate_password_hash, check_password_hash\\n from flask import Flask, request, jsonify, render_template, flash, redirect, url_for, session, send_file, make_response\\n from flask_login import login_user, login_required, logout_user, current_user, UserMixin\\n@@ -656,7 +656,7 @@ def job_browse(job_id: int, path):\\n         return redirect(url_for(\"job_page\", job_id=job_id))\\n \\n     # Join the base and the requested path\\n-    abs_path = os.path.join(job_base_dir, path)\\n+    abs_path = safe_join(job_base_dir, path)\\n \\n     # URL path variable for going back\\n     back_path = os.path.dirname(abs_path).replace(job_base_dir, \"\")'}}",
      "message_norm": "# absolute path traversal due to incorrect use of `send_file` call (#2025)\n\na path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. by manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. this attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\r\n\r\n## common weakness enumeration category\r\ncwe - 36\r\n\r\n## root cause analysis\r\n\r\nthe `os.path.join` call is unsafe for use with untrusted input. when the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path.  please see the example below.\r\n```\r\n>>> import os.path\r\n>>> static = \"path/to/mysafestaticdir\"\r\n>>> malicious = \"/../../../../../etc/passwd\"\r\n>>> os.path.join(t,malicious)\r\n'/../../../../../etc/passwd'\r\n```\r\nsince the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks.\r\n\r\nin this case, the problems occurs due to the following code :\r\nhttps://github.com/ganga-devs/ganga/blob/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc/ganga/gangagui/gui/routes.py#l671\r\n\r\nhere, the `path` parameter is attacker controlled. this parameter passes through the unsafe `os.path.join` call making the effective directory and filename passed to the `send_file` call attacker controlled. this leads to a path traversal attack.\r\n\r\n## proof of concept\r\n\r\nthe bug can be verified using a proof of concept similar to the one shown below.\r\n\r\n```\r\ncurl --path-as-is 'http://<domain>/job/<int:job_id>/browse///../../../../etc/passwd\"'\r\n```\r\n## remediation\r\n\r\nthis can be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. in case the application logic necessiates this behaviour, one can either use the `werkzeug.utils.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.\r\n\r\n## common vulnerability scoring system vector\r\n\r\nthe attack can be carried over the network. a complex non-standard configuration or a specialized condition is not required for the attack to be successfully conducted. there is no user interaction required for successful execution. the attack can affect components outside the scope of the target module. the attack can be used to gain access to confidential files like passwords, login credentials and other secrets. it cannot be directly used to affect a change on a system resource. hence has limited to no impact on integrity. using this attack vector a attacker may make multiple requests for accessing huge files such as a database. this can lead to a partial system denial service. however, the impact on availability is quite low in this case. taking this account an appropriate cvss v3.1 vector would be\r\n\r\n(av:n/ac:l/pr:n/ui:n/s:c/c:h/i:n/a:l)[https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=av:n/ac:l/pr:n/ui:n/s:c/c:h/i:n/a:l&version=3.1]\r\n\r\nthis gives it a base score of 9.3/10 and a severity rating of critical.\r\n\r\n## references\r\n* [owasp path traversal](https://owasp.org/www-community/attacks/path_traversal)\r\n* github/securitylab#669\r\n\r\n### this bug was found using *[codeql by github](https://codeql.github.com/)*\r\n\r\nco-authored-by: porcupiney hairs <porucpiney.hairs@protonmail.com>",
      "language": "en",
      "entities": "[('absolute path traversal', 'SECWORD', ''), ('incorrect use', 'SECWORD', ''), ('#2025', 'ISSUE', ''), ('path traversal', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('directory traversal', 'SECWORD', ''), ('manipulating', 'ACTION', ''), ('critical', 'SEVERITY', ''), ('attack', 'SECWORD', ''), ('directory traversal', 'SECWORD', ''), ('common weakness enumeration', 'SECWORD', ''), ('cwe - 36', 'CWEID', 'CWE_flexible'), ('unsafe', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('path traversal', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('problems', 'FLAW', ''), ('https://github.com/ganga-devs/ganga/blob/0c0f9e33b36ee7ead0855f1464f8d4efad26bdbc/ganga/gangagui/gui/routes.py#l671', 'URL', ''), ('attacker', 'SECWORD', ''), ('unsafe', 'SECWORD', ''), ('attacker', 'SECWORD', ''), ('path traversal', 'SECWORD', ''), ('attack', 'FLAW', ''), ('bug', 'FLAW', ''), ('verified', 'ACTION', ''), ('http://<domain>/job/<int', 'URL', ''), ('fixed', 'ACTION', ''), ('preventing', 'ACTION', ''), ('untrusted data', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('untrusted', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'SECWORD', ''), ('attack', 'FLAW', ''), ('confidential', 'SECWORD', ''), ('passwords', 'SECWORD', ''), ('login', 'SECWORD', ''), ('integrity', 'SECWORD', ''), ('attack vector', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('availability', 'SECWORD', ''), ('low', 'SEVERITY', ''), ('v3.1', 'VERSION', ''), ('l)[https://nvd.nist.gov', 'URL', ''), ('critical', 'SEVERITY', ''), ('owasp', 'SECWORD', ''), ('path traversal](https://owasp.org', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('securitylab#669', 'SECWORD', ''), ('bug', 'FLAW', ''), ('found', 'ACTION', ''), ('codeql', 'DETECTION', ''), ('github](https://codeql.github.com/', 'URL', ''), ('porucpiney.hairs@protonmail.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ganga/GangaGUI/gui/routes.py'])",
      "num_files": 1.0
    },
    {
      "index": 305,
      "vuln_id": "GHSA-3qxp-qjq7-w4hf",
      "cwe_id": "{'CWE-754'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1'}",
      "dataset": "osv",
      "summary": "CHECK-fail in tf.raw_ops.EncodePng ### Impact\nAn attacker can trigger a `CHECK` fail in PNG encoding by providing an empty input tensor as the pixel data:\n\n```python\nimport tensorflow as tf\n\nimage = tf.zeros([0, 0, 3])\nimage = tf.cast(image, dtype=tf.uint8) \ntf.raw_ops.EncodePng(image=image) \n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L57-L60) only validates that the total number of pixels in the image does not overflow. Thus, an attacker can send an empty matrix for encoding. However, if the tensor is empty, then the associated buffer is `nullptr`. Hence, when [calling `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L79-L93), the first argument (i.e., `image.flat<T>().data()`) is `NULL`. This then triggers the `CHECK_NOTNULL` in the [first line of `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/lib/png/png_io.cc#L345-L349).\n\n```cc\ntemplate <typename T>\nbool WriteImageToBuffer(\n    const void* image, int width, int height, int row_bytes, int num_channels,\n    int channel_bits, int compression, T* png_string,\n    const std::vector<std::pair<std::string, std::string> >* metadata) {\n  CHECK_NOTNULL(image);\n  ...\n}\n```\n\nSince `image` is null, this results in `abort` being called after printing the stacktrace. Effectively, this allows an attacker to mount a denial of service attack.\n\n### Patches\nWe have patched the issue in GitHub commit [26eb323554ffccd173e8a79a8c05c15b685ae4d1](https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1",
      "commit_sha": "26eb323554ffccd173e8a79a8c05c15b685ae4d1",
      "patch": "SINGLE",
      "chain_ord": "['26eb323554ffccd173e8a79a8c05c15b685ae4d1']",
      "before_first_fix_commit": "{'e312e0791ce486a80c9d23110841525c6f7c3289'}",
      "last_fix_commit": "26eb323554ffccd173e8a79a8c05c15b685ae4d1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/21/2021, 20:03:47",
      "message": "Fix null CHECK issue with `tf.raw_ops.EncodePng`.\n\nPiperOrigin-RevId: 369717714\nChange-Id: I24136cd99c20b8466671f4f93b670ef6f6dd1250",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'tensorflow/core/kernels/image/encode_png_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/26eb323554ffccd173e8a79a8c05c15b685ae4d1/tensorflow%2Fcore%2Fkernels%2Fimage%2Fencode_png_op.cc', 'patch': '@@ -54,6 +54,8 @@ class EncodePngOp : public OpKernel {\\n     OP_REQUIRES(context, image.dims() == 3,\\n                 errors::InvalidArgument(\"image must be 3-dimensional\",\\n                                         image.shape().DebugString()));\\n+    OP_REQUIRES(context, image.NumElements() > 0,\\n+                errors::Internal(\"Invalid image provided.\"));\\n     OP_REQUIRES(\\n         context,\\n         FastBoundsCheck(image.NumElements(), std::numeric_limits<int32>::max()),'}}",
      "message_norm": "fix null check issue with `tf.raw_ops.encodepng`.\n\npiperorigin-revid: 369717714\nchange-id: i24136cd99c20b8466671f4f93b670ef6f6dd1250",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('tf.raw_ops.encodepng', 'SECWORD', ''), ('369717714', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/image/encode_png_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 468,
      "vuln_id": "GHSA-4r65-35qq-ch8j",
      "cwe_id": "{'CWE-209'}",
      "score": 5.5,
      "chain": "{'https://github.com/ansible/ansible/commit/fe28767970c8ec62aabe493c46b53a5de1e5fac0'}",
      "dataset": "osv",
      "summary": "Ansible discloses sensitive information in traceback error message Ansible is an IT automation system that handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration. A flaw was found in Ansible Engine's ansible-connection module where sensitive information, such as the Ansible user credentials, is disclosed by default in the traceback error message when Ansible receives an unexpected response from `set_options`. The highest threat from this vulnerability is confidentiality.",
      "published_date": "2022-03-04",
      "chain_len": 1,
      "project": "https://github.com/ansible/ansible",
      "commit_href": "https://github.com/ansible/ansible/commit/fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "commit_sha": "fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "patch": "SINGLE",
      "chain_ord": "['fe28767970c8ec62aabe493c46b53a5de1e5fac0']",
      "before_first_fix_commit": "{'6d2398db280f145eed70a6618282c9db630a380a'}",
      "last_fix_commit": "fe28767970c8ec62aabe493c46b53a5de1e5fac0",
      "chain_ord_pos": 1.0,
      "commit_datetime": "06/07/2021, 20:43:11",
      "message": "Fixed exposed credentials in exception\n\nUnder certain conditions, sensitive connection parameters are shown in tracebacks when Ansible receives an unexpected response (in my case `None`) from `set_options` in ansible-connection. This patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
      "author": "dalrrard",
      "comments": null,
      "stats": "{'additions': 18, 'deletions': 1, 'total': 19}",
      "files": "{'lib/ansible/module_utils/connection.py': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/ansible/ansible/raw/fe28767970c8ec62aabe493c46b53a5de1e5fac0/lib%2Fansible%2Fmodule_utils%2Fconnection.py', 'patch': '@@ -38,10 +38,13 @@\\n import uuid\\n \\n from functools import partial\\n+from ansible import constants as C\\n from ansible.module_utils._text import to_bytes, to_text\\n from ansible.module_utils.common.json import AnsibleJSONEncoder\\n+from ansible.module_utils.common.parameters import remove_values\\n from ansible.module_utils.six import iteritems\\n from ansible.module_utils.six.moves import cPickle\\n+from ansible.utils.helpers import deduplicate_list\\n \\n \\n def write_to_file_descriptor(fd, obj):\\n@@ -163,12 +166,26 @@ def _exec_jsonrpc(self, name, *args, **kwargs):\\n         try:\\n             response = json.loads(out)\\n         except ValueError:\\n-            params = [repr(arg) for arg in args] + [\\'{0}={1!r}\\'.format(k, v) for k, v in iteritems(kwargs)]\\n+            sensitive_keys = list(\\n+                    C.MAGIC_VARIABLE_MAPPING[\"password\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"private_key_file\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"become_pass\"]\\n+            )\\n+            sensitive_values = [\\n+                v2 \\n+                for k, v in iteritems(kwargs) \\n+                for k2, v2 in iteritems(v) \\n+                if k2 in sensitive_keys\\n+            ]\\n+            params = [repr(remove_values(arg, sensitive_values)) for arg in args] + [\\n+                \"{0}={1!r}\".format(k, remove_values(v, sensitive_values)) \\n+                for k, v in iteritems(kwargs)]\\n             params = \\', \\'.join(params)\\n             raise ConnectionError(\\n                 \"Unable to decode JSON from response to {0}({1}). Received \\'{2}\\'.\".format(name, params, out)\\n             )\\n \\n+\\n         if response[\\'id\\'] != reqid:\\n             raise ConnectionError(\\'invalid json-rpc id received\\')\\n         if \"result_type\" in response:'}}",
      "message_norm": "fixed exposed credentials in exception\n\nunder certain conditions, sensitive connection parameters are shown in tracebacks when ansible receives an unexpected response (in my case `none`) from `set_options` in ansible-connection. this patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
      "language": "en",
      "entities": "[('fixed', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('sensitive', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/ansible/module_utils/connection.py'])",
      "num_files": 1.0
    },
    {
      "index": 820,
      "vuln_id": "GHSA-6cpj-3g83-q2j4",
      "cwe_id": "{'CWE-611'}",
      "score": 0.0,
      "chain": "{'https://github.com/apache/lucene-solr/commit/f230486ce6707762c1a6e81655d0fac52887906d', 'https://github.com/apache/lucene-solr/commit/0d21b900975b7048d2e925d852aeacb9bdc6766c'}",
      "dataset": "osv",
      "summary": "Improper Restriction of XML External Entity Reference in Apache Solr The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor in Apache Solr before 4.1 allows remote attackers to have an unspecified impact via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, different vectors than CVE-2013-6407.",
      "published_date": "2022-05-17",
      "chain_len": 2,
      "project": "https://github.com/apache/lucene-solr",
      "commit_href": "https://github.com/apache/lucene-solr/commit/0d21b900975b7048d2e925d852aeacb9bdc6766c",
      "commit_sha": "0d21b900975b7048d2e925d852aeacb9bdc6766c",
      "patch": "MULTI",
      "chain_ord": "['f230486ce6707762c1a6e81655d0fac52887906d', '0d21b900975b7048d2e925d852aeacb9bdc6766c']",
      "before_first_fix_commit": "{'f230486ce6707762c1a6e81655d0fac52887906d'}",
      "last_fix_commit": "0d21b900975b7048d2e925d852aeacb9bdc6766c",
      "chain_ord_pos": 2.0,
      "commit_datetime": "09/27/2012, 13:15:24",
      "message": "SOLR-3895, SOLR-3614: Fix javadocs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1390991 13f79535-47bb-0310-9956-ffa450edef68",
      "author": "Uwe Schindler",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/apache/lucene-solr/raw/0d21b900975b7048d2e925d852aeacb9bdc6766c/solr%2Fcore%2Fsrc%2Fjava%2Forg%2Fapache%2Fsolr%2Futil%2FEmptyEntityResolver.java', 'patch': '@@ -67,7 +67,7 @@ private static void trySetSAXFeature(SAXParserFactory saxFactory, String feature\\n   }\\n   \\n   /** Configures the given {@link SAXParserFactory} to do secure XML processing of untrusted sources.\\n-   * It is required to also set {@link #SAX_INSTANCE} on the created {@link XMLReader}.\\n+   * It is required to also set {@link #SAX_INSTANCE} on the created {@link org.xml.sax.XMLReader}.\\n    * @see #SAX_INSTANCE\\n    */\\n   public static void configureSAXParserFactory(SAXParserFactory saxFactory) {'}}",
      "message_norm": "solr-3895, solr-3614: fix javadocs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1390991 13f79535-47bb-0310-9956-ffa450edef68",
      "language": "sv",
      "entities": "[('fix', 'ACTION', ''), ('https://svn.apache.org/repos/asf/lucene/dev/trunk@1390991', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['solr/core/src/java/org/apache/solr/util/EmptyEntityResolver.java'])",
      "num_files": 1.0
    },
    {
      "index": 1144,
      "vuln_id": "GHSA-85wq-pqhp-hmq6",
      "cwe_id": "{'CWE-352'}",
      "score": 8.8,
      "chain": "{'https://github.com/jenkinsci/jenkins/commit/3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'https://github.com/jenkinsci/jenkins/commit/e69c28e44dae41322112471e1c80f840bde314d4', 'https://github.com/jenkinsci/jenkins/commit/23f4809e6c10a221e9d67f2e841536845387b42d'}",
      "dataset": "osv",
      "summary": "Cross-Site Request Forgery in Jenkins Jenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an issue in the Jenkins user database authentication realm: create an account if signup is enabled; or create an account if the victim is an administrator, possibly deleting the existing default admin user in the process and allowing a wide variety of impacts.",
      "published_date": "2022-05-14",
      "chain_len": 3,
      "project": "https://github.com/jenkinsci/jenkins",
      "commit_href": "https://github.com/jenkinsci/jenkins/commit/23f4809e6c10a221e9d67f2e841536845387b42d",
      "commit_sha": "23f4809e6c10a221e9d67f2e841536845387b42d",
      "patch": "MULTI",
      "chain_ord": "['3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'e69c28e44dae41322112471e1c80f840bde314d4', '23f4809e6c10a221e9d67f2e841536845387b42d']",
      "before_first_fix_commit": "{'eeb699ed8c2ce937f2b836692b36a98da7bb5622'}",
      "last_fix_commit": "23f4809e6c10a221e9d67f2e841536845387b42d",
      "chain_ord_pos": 3.0,
      "commit_datetime": "04/13/2017, 13:01:32",
      "message": "[SECURITY-412] Simplify implementation as suggested by jglick",
      "author": "Daniel Beck",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 16, 'total': 20}",
      "files": "{'core/src/main/java/jenkins/model/Jenkins.java': {'additions': 4, 'deletions': 16, 'changes': 20, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/jenkins/raw/23f4809e6c10a221e9d67f2e841536845387b42d/core%2Fsrc%2Fmain%2Fjava%2Fjenkins%2Fmodel%2FJenkins.java', 'patch': '@@ -3369,53 +3369,41 @@ public DirectoryBrowserSupport doUserContent() {\\n      *\\n      * This first replaces \"app\" to {@link HudsonIsRestarting}\\n      */\\n+    @CLIMethod(name=\"restart\")\\n     public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\")) {\\n             req.getView(this,\"_restart.jelly\").forward(req,rsp);\\n             return;\\n         }\\n \\n-        if (req != null && req.getMethod().equals(\"POST\")) {\\n+        if (req == null || req.getMethod().equals(\"POST\")) {\\n             restart();\\n         }\\n \\n         rsp.sendRedirect2(\".\");\\n     }\\n \\n-    @CLIMethod(name=\"restart\")\\n-    @Restricted(NoExternalUse.class)\\n-    public void cliRestart() throws RestartNotSupportedException {\\n-        checkPermission(ADMINISTER);\\n-        restart();\\n-    }\\n-\\n     /**\\n      * Queues up a restart of Jenkins for when there are no builds running, if we can.\\n      *\\n      * This first replaces \"app\" to {@link HudsonIsRestarting}\\n      *\\n      * @since 1.332\\n      */\\n+    @CLIMethod(name=\"safe-restart\")\\n     public HttpResponse doSafeRestart(StaplerRequest req) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\"))\\n             return HttpResponses.forwardToView(this,\"_safeRestart.jelly\");\\n \\n-        if (req != null && req.getMethod().equals(\"POST\")) {\\n+        if (req == null || req.getMethod().equals(\"POST\")) {\\n             safeRestart();\\n         }\\n \\n         return HttpResponses.redirectToDot();\\n     }\\n \\n-    @CLIMethod(name=\"safe-restart\")\\n-    @Restricted(NoExternalUse.class)\\n-    public void cliSafeRestart() throws RestartNotSupportedException {\\n-        checkPermission(ADMINISTER);\\n-        safeRestart();\\n-    }\\n-\\n     /**\\n      * Performs a restart.\\n      */'}}",
      "message_norm": "[security-412] simplify implementation as suggested by jglick",
      "language": "en",
      "entities": "[('security-412', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/src/main/java/jenkins/model/Jenkins.java'])",
      "num_files": 1.0
    },
    {
      "index": 733,
      "vuln_id": "GHSA-6346-5r4h-ff5x",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/microweber/microweber/commit/724e2d186a33c0c27273107dc4f160a09384877f'}",
      "dataset": "osv",
      "summary": "Microweber vulnerable to cross-site scripting (XSS) Microweber is a drag and drop website builder and a powerful next generation CMS. Microweber versions 1.2.15 and prior are vulnerable to cross-site scripting. This could lead to injection of arbitrary JaveScript code, defacement of a page, or stealing cookies. A patch is available on the `master` branch of Microweber's GitHub repository.",
      "published_date": "2022-05-05",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/724e2d186a33c0c27273107dc4f160a09384877f",
      "commit_sha": "724e2d186a33c0c27273107dc4f160a09384877f",
      "patch": "SINGLE",
      "chain_ord": "['724e2d186a33c0c27273107dc4f160a09384877f']",
      "before_first_fix_commit": "{'5eb846301d61b22eda84a997026d050a14a518f4'}",
      "last_fix_commit": "724e2d186a33c0c27273107dc4f160a09384877f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/03/2022, 08:41:32",
      "message": "Update order_filtering.blade.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/MicroweberPackages/Order/resources/views/admin/orders/partials/order_filtering.blade.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/724e2d186a33c0c27273107dc4f160a09384877f/src%2FMicroweberPackages%2FOrder%2Fresources%2Fviews%2Fadmin%2Forders%2Fpartials%2Forder_filtering.blade.php', 'patch': '@@ -158,7 +158,7 @@ class=\"btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text\\n             $(document).ready(function () {\\n                 var searchOrdersByProduct = new mw.autoComplete({\\n                     element: \"#js-orders-search-by-products\",\\n-                    placeholder: \"<?php if ($productKeyword) { echo $productKeyword; } else { _e(\"Search by products...\"); }?>\",\\n+                    placeholder: \"<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(\"Search by products...\"); }?>\",\\n                     autoComplete:true,\\n                     ajaxConfig: {\\n                         method: \\'get\\','}}",
      "message_norm": "update order_filtering.blade.php",
      "language": "da",
      "entities": "[('update', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/MicroweberPackages/Order/resources/views/admin/orders/partials/order_filtering.blade.php'])",
      "num_files": 1.0
    },
    {
      "index": 992,
      "vuln_id": "GHSA-77gp-3h4r-6428",
      "cwe_id": "{'CWE-787', 'CWE-125'}",
      "score": 8.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042'}",
      "dataset": "osv",
      "summary": "Out of bounds read and write in Tensorflow ### Impact\nThere is a typo in TensorFlow's [`SpecializeType`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L81-L102) which results in heap OOB read/write:\n\n```cc\nfor (int i = 0; i < op_def.output_arg_size(); i++) {\n  // ...\n  for (int j = 0; j < t->args_size(); j++) {\n    auto* arg = t->mutable_args(i);\n    // ...\n  }\n} \n```\n\nDue to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data.\n\n### Patches\nWe have patched the issue in GitHub commit [0657c83d08845cc434175934c642299de2c0f042](https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042",
      "commit_sha": "0657c83d08845cc434175934c642299de2c0f042",
      "patch": "SINGLE",
      "chain_ord": "['0657c83d08845cc434175934c642299de2c0f042']",
      "before_first_fix_commit": "{'6e65b0b4ad12fdaa223e87b4ae6d8cb762fcae2b'}",
      "last_fix_commit": "0657c83d08845cc434175934c642299de2c0f042",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/09/2021, 12:44:43",
      "message": "Fix heap OOB read/write due to incorrect indexing.\n\nPiperOrigin-RevId: 408578046\nChange-Id: Ifc9ffea49e5890f55fcb2c27568611052c3ddcfa",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'tensorflow/core/framework/full_type_util.cc': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/0657c83d08845cc434175934c642299de2c0f042/tensorflow%2Fcore%2Fframework%2Ffull_type_util.cc', 'patch': '@@ -100,7 +100,7 @@ StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,\\n     // verifications are needed, they should be done by separately, and in a\\n     // way that can be reused for type inference.\\n     for (int j = 0; j < t->args_size(); j++) {\\n-      auto* arg = t->mutable_args(i);\\n+      auto* arg = t->mutable_args(j);\\n       if (arg->type_id() == TFT_VAR) {\\n         const auto* attr = attrs.Find(arg->s());\\n         if (attr == nullptr) {'}}",
      "message_norm": "fix heap oob read/write due to incorrect indexing.\n\npiperorigin-revid: 408578046\nchange-id: ifc9ffea49e5890f55fcb2c27568611052c3ddcfa",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('408578046', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/framework/full_type_util.cc'])",
      "num_files": 1.0
    },
    {
      "index": 1006,
      "vuln_id": "GHSA-79mg-4w23-4fqc",
      "cwe_id": "{'CWE-89', 'CWE-287'}",
      "score": 8.1,
      "chain": "{'https://github.com/fiveai/Cachet/commit/27bca8280419966ba80c6fa283d985ddffa84bb6'}",
      "dataset": "osv",
      "summary": "Unauthenticated SQL Injection in Cachet ### Impact\nIn Cachet versions through 2.3.18, there is a SQL injection which is in the `SearchableTrait#scopeSearch()`. Attackers without authentication can utilize this vulnerability to exfiltrate sensitive data from the database such as administrator's password and session.\n\n### Patches\n\nThe original repository of [https://github.com/CachetHQ/Cachet](https://github.com/CachetHQ/Cachet) is not active, the stable version 2.3.18 and it's developing 2.4 branch is affected. \n\nUpdate to version 2.5 or later in the [https://github.com/fiveai/Cachet fork](https://github.com/fiveai/Cachet) to fix this vulnerability.",
      "published_date": "2021-08-30",
      "chain_len": 1,
      "project": "https://github.com/fiveai/Cachet",
      "commit_href": "https://github.com/fiveai/Cachet/commit/27bca8280419966ba80c6fa283d985ddffa84bb6",
      "commit_sha": "27bca8280419966ba80c6fa283d985ddffa84bb6",
      "patch": "SINGLE",
      "chain_ord": "['27bca8280419966ba80c6fa283d985ddffa84bb6']",
      "before_first_fix_commit": "{'8c1a2c27d4a46777a78bceefa7f3fee297ebe7be'}",
      "last_fix_commit": "27bca8280419966ba80c6fa283d985ddffa84bb6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/15/2021, 14:17:35",
      "message": "Ensure only allowed searchable columns are used in DB Query",
      "author": "Seb Dangerfield",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 2, 'total': 5}",
      "files": "{'app/Models/Traits/SearchableTrait.php': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/fiveai/Cachet/raw/27bca8280419966ba80c6fa283d985ddffa84bb6/app%2FModels%2FTraits%2FSearchableTrait.php', 'patch': '@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])\\n             return $query;\\n         }\\n \\n-        if (!array_intersect(array_keys($search), $this->searchable)) {\\n+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));\\n+        if (! $allowed_search) {\\n             return $query;\\n         }\\n \\n-        return $query->where($search);\\n+        return $query->where($allowed_search);\\n     }\\n }'}}",
      "message_norm": "ensure only allowed searchable columns are used in db query",
      "language": "en",
      "entities": "[('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Models/Traits/SearchableTrait.php'])",
      "num_files": 1.0
    },
    {
      "index": 2541,
      "vuln_id": "GHSA-p9j6-4pjr-gp48",
      "cwe_id": "{'CWE-22'}",
      "score": 5.3,
      "chain": "{'https://github.com/joniles/mpxj/commit/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d'}",
      "dataset": "osv",
      "summary": "MPXJ path Traversal vulnerability common/InputStreamHelper.java in Packwood MPXJ before 8.3.5 allows directory traversal in the zip stream handler flow, leading to the writing of files to arbitrary locations.",
      "published_date": "2020-12-18",
      "chain_len": 1,
      "project": "https://github.com/joniles/mpxj",
      "commit_href": "https://github.com/joniles/mpxj/commit/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
      "commit_sha": "8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
      "patch": "SINGLE",
      "chain_ord": "['8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d']",
      "before_first_fix_commit": "{'1eed5f01ac8e49b433e0538bdc079caeda7d6fd7'}",
      "last_fix_commit": "8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/14/2020, 12:13:14",
      "message": "zip slip fix",
      "author": "Jon Iles",
      "comments": null,
      "stats": "{'additions': 9, 'deletions': 0, 'total': 9}",
      "files": "{'src/main/java/net/sf/mpxj/common/InputStreamHelper.java': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/joniles/mpxj/raw/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fmpxj%2Fcommon%2FInputStreamHelper.java', 'patch': '@@ -114,6 +114,7 @@ public static File writeZipStreamToTempDir(InputStream inputStream) throws IOExc\\n     */\\n    private static void processZipStream(File dir, InputStream inputStream) throws IOException\\n    {\\n+      String canonicalDestinationDirPath = dir.getCanonicalPath();\\n       ZipInputStream zip = new ZipInputStream(inputStream);\\n       while (true)\\n       {\\n@@ -124,6 +125,14 @@ private static void processZipStream(File dir, InputStream inputStream) throws I\\n          }\\n \\n          File file = new File(dir, entry.getName());\\n+\\n+         // https://snyk.io/research/zip-slip-vulnerability\\n+         String canonicalDestinationFile = file.getCanonicalPath();\\n+         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\\n+         {\\n+            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\\n+         }\\n+\\n          if (entry.isDirectory())\\n          {\\n             FileHelper.mkdirsQuietly(file);'}}",
      "message_norm": "zip slip fix",
      "language": "ro",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/main/java/net/sf/mpxj/common/InputStreamHelper.java'])",
      "num_files": 1.0
    },
    {
      "index": 1959,
      "vuln_id": "GHSA-h24f-9mm4-w336",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/omphalos/crud-file-server/commit/4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa'}",
      "dataset": "osv",
      "summary": "Cross-site Scripting (XSS) - Stored in crud-file-server Versions of `crud-file-server` before 0.8.0 are vulnerable to stored cross-site scripting (XSS). This is due to insufficient santiziation of filenames when directory index is served by `crud-file-server`.\n\n\n## Recommendation\n\nUpdate to version 0.8.0 or later.",
      "published_date": "2018-07-18",
      "chain_len": 1,
      "project": "https://github.com/omphalos/crud-file-server",
      "commit_href": "https://github.com/omphalos/crud-file-server/commit/4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa",
      "commit_sha": "4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa",
      "patch": "SINGLE",
      "chain_ord": "['4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa']",
      "before_first_fix_commit": "{'0c45fc64f0c0aeb23fe515c95e29f6485803de65'}",
      "last_fix_commit": "4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/14/2018, 23:29:21",
      "message": "Fix not sanitizing file names rendered in html",
      "author": "omphalos",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'crud-file-server.js': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/omphalos/crud-file-server/raw/4155bfe068bf211b49a0b3ffd06e78cbaf1b40fa/crud-file-server.js', 'patch': '@@ -140,7 +140,9 @@ exports.handleRequest = function(vpath, path, req, res, readOnly, logHeadRequest\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar name = results[f].name;\\r\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar normalized = url + \\'/\\' + name;\\r\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\twhile(normalized[0] == \\'/\\') { normalized = normalized.slice(1, normalized.length); }\\r\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tres.write(\\'\\\\r\\\\n<p><a href=\"/\\' + normalized + \\'\">\\' + name + \\'</a></p>\\');\\r\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif(normalized.indexOf(\\'\"\\') >= 0) throw new Error(\\'unsupported file name\\')\\r\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname = name.replace(/&/g, \\'&amp;\\').replace(/</g, \\'&lt;\\').replace(/>/g, \\'&gt;\\');\\r\\n+\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tres.write(\\'\\\\r\\\\n<p><a href=\"/\\' + normalized + \\'\"><span>\\' + name + \\'</span></a></p>\\');\\r\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tres.end(\\'\\\\r\\\\n</body></html>\\');\\r\\n \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}'}}",
      "message_norm": "fix not sanitizing file names rendered in html",
      "language": "en",
      "entities": "[('sanitizing', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['crud-file-server.js'])",
      "num_files": 1.0
    },
    {
      "index": 428,
      "vuln_id": "GHSA-4h47-h3cr-23wh",
      "cwe_id": "{'CWE-285'}",
      "score": 6.5,
      "chain": "{'https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2'}",
      "dataset": "osv",
      "summary": "Improper Authorization in Jenkins A denial of service vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier in core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java that allows attackers without Overall/Read permission to access a specific URL on instances using the built-in Jenkins user database security realm that results in the creation of an ephemeral user record in memory.",
      "published_date": "2022-05-13",
      "chain_len": 1,
      "project": "https://github.com/jenkinsci/jenkins",
      "commit_href": "https://github.com/jenkinsci/jenkins/commit/01157a699f611ca7492e872103ac01526a982cf2",
      "commit_sha": "01157a699f611ca7492e872103ac01526a982cf2",
      "patch": "SINGLE",
      "chain_ord": "['01157a699f611ca7492e872103ac01526a982cf2']",
      "before_first_fix_commit": "{'df87e12ddcfeafdba6e0de0e07b3e21f8473ece6'}",
      "last_fix_commit": "01157a699f611ca7492e872103ac01526a982cf2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/27/2018, 09:18:42",
      "message": "[SECURITY-1128]",
      "author": "Daniel Beck",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 1, 'total': 3}",
      "files": "{'core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https://github.com/jenkinsci/jenkins/raw/01157a699f611ca7492e872103ac01526a982cf2/core%2Fsrc%2Fmain%2Fjava%2Fhudson%2Fsecurity%2FHudsonPrivateSecurityRealm.java', 'patch': '@@ -475,8 +475,9 @@ public List<User> getAllUsers() {\\n      * This is to map users under the security realm URL.\\n      * This in turn helps us set up the right navigation breadcrumb.\\n      */\\n+    @Restricted(NoExternalUse.class)\\n     public User getUser(String id) {\\n-        return User.getById(id, true);\\n+        return User.getById(id, User.ALLOW_USER_CREATION_VIA_URL && hasPermission(Jenkins.ADMINISTER));\\n     }\\n \\n     // TODO'}}",
      "message_norm": "[security-1128]",
      "language": "en",
      "entities": "[('security-1128', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java'])",
      "num_files": 1.0
    },
    {
      "index": 1768,
      "vuln_id": "GHSA-fqq2-xp7m-xvm8",
      "cwe_id": "{'CWE-362', 'CWE-119'}",
      "score": 8.1,
      "chain": "{'https://github.com/RusPiRo/ruspiro-singleton/commit/b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e'}",
      "dataset": "osv",
      "summary": "Data race in ruspiro-singleton `Singleton<T>` is meant to be a static object that can be initialized lazily. In\norder to satisfy the requirement that `static` items must implement `Sync`,\n`Singleton` implemented both `Sync` and `Send` unconditionally.\n\nThis allows for a bug where non-`Sync` types such as `Cell` can be used in\nsingletons and cause data races in concurrent programs.\n\nThe flaw was corrected in commit `b0d2bd20e` by adding trait bounds, requiring\nthe contaiend type to implement `Sync`.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/RusPiRo/ruspiro-singleton",
      "commit_href": "https://github.com/RusPiRo/ruspiro-singleton/commit/b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e",
      "commit_sha": "b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e",
      "patch": "SINGLE",
      "chain_ord": "['b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e']",
      "before_first_fix_commit": "{'0565f8ef459bd336eda8a6a63d1d50cdb581c2b3'}",
      "last_fix_commit": "b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/16/2020, 20:32:29",
      "message": "fix soundness",
      "author": "2ndTaleStudio",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 2, 'total': 6}",
      "files": "{'src/lib.rs': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/RusPiRo/ruspiro-singleton/raw/b0d2bd20eb40b9cbc2958b981ba2dcd9e6f9396e/src%2Flib.rs', 'patch': \"@@ -81,8 +81,10 @@ pub struct Singleton<T: 'static> {\\n \\n // The Singleton need to implement Send & Sync to ensure cross core compile check mechanics\\n // this is safe as the inner RWLock ensures cross core safety\\n-unsafe impl<T> Sync for Singleton<T> {}\\n-unsafe impl<T> Send for Singleton<T> {}\\n+// but we need to be conditional on the inner type to prevent interior mutable types beeing used\\n+// inside a singleton\\n+unsafe impl<T> Sync for Singleton<T> where T: Sync {}\\n+unsafe impl<T> Send for Singleton<T> where T: Send {}\\n \\n impl<T: 'static> Singleton<T> {\\n     /// Create a new [Singleton] instance to be used in a static variable. Only ``const fn`` constructors are allowed\"}}",
      "message_norm": "fix soundness",
      "language": "en",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib.rs'])",
      "num_files": 1.0
    },
    {
      "index": 1300,
      "vuln_id": "GHSA-934w-hvj4-7fr6",
      "cwe_id": "{'CWE-22'}",
      "score": 6.5,
      "chain": "{'https://github.com/jsreport/jsreport-chrome-pdf/commit/6750b2f77d05cb843aefc1c4a98097a3bd33a6a2'}",
      "dataset": "osv",
      "summary": "Path Traversal in jsreport-chrome-pdf This affects the package jsreport-chrome-pdf before 1.10.0.",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/jsreport/jsreport-chrome-pdf",
      "commit_href": "https://github.com/jsreport/jsreport-chrome-pdf/commit/6750b2f77d05cb843aefc1c4a98097a3bd33a6a2",
      "commit_sha": "6750b2f77d05cb843aefc1c4a98097a3bd33a6a2",
      "patch": "SINGLE",
      "chain_ord": "['6750b2f77d05cb843aefc1c4a98097a3bd33a6a2']",
      "before_first_fix_commit": "{'ba51764dae68403893f9f0e0ce7d060b78ee26c4'}",
      "last_fix_commit": "6750b2f77d05cb843aefc1c4a98097a3bd33a6a2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/30/2020, 16:09:42",
      "message": "block file requests",
      "author": "BJR Matos",
      "comments": null,
      "stats": "{'additions': 19, 'deletions': 0, 'total': 19}",
      "files": "{'lib/conversion.js': {'additions': 19, 'deletions': 0, 'changes': 19, 'status': 'modified', 'raw_url': 'https://github.com/jsreport/jsreport-chrome-pdf/raw/6750b2f77d05cb843aefc1c4a98097a3bd33a6a2/lib%2Fconversion.js', 'patch': \"@@ -38,6 +38,12 @@ module.exports = async ({ reporter, getBrowser, htmlUrl, strategy, timeout, req,\\n       return\\n     }\\n \\n+    await page.setRequestInterception(true)\\n+\\n+    if (executionInfo.error) {\\n+      return\\n+    }\\n+\\n     page.on('pageerror', (err) => {\\n       pageLog('warn', `Page error: ${err.message}${err.stack ? ` , stack: ${err.stack}` : ''}`)\\n     })\\n@@ -64,6 +70,19 @@ module.exports = async ({ reporter, getBrowser, htmlUrl, strategy, timeout, req,\\n       }\\n \\n       pageLog('debug', `Page request: ${r.method()} (${r.resourceType()}) ${trimUrl(r.url())}${detail}`)\\n+\\n+      const isRelativeToHtmlUrl = r.url().lastIndexOf(htmlUrl, 0) === 0\\n+\\n+      if (\\n+        !isRelativeToHtmlUrl &&\\n+        // potentially dangerous request to local file\\n+        r.url().lastIndexOf('file:///', 0) === 0\\n+      ) {\\n+        r.abort('accessdenied')\\n+        return\\n+      }\\n+\\n+      r.continue()\\n     })\\n \\n     page.on('requestfinished', (r) => {\"}}",
      "message_norm": "block file requests",
      "language": "fr",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lib/conversion.js'])",
      "num_files": 1.0
    },
    {
      "index": 855,
      "vuln_id": "GHSA-6jmh-9gqm-5xrx",
      "cwe_id": "{'CWE-352'}",
      "score": 4.3,
      "chain": "{'https://github.com/livehelperchat/livehelperchat/commit/f59ffb02984c0ce2fbb19ac39365066507de9370'}",
      "dataset": "osv",
      "summary": "Cross-Site Request Forgery (CSRF) in livehelperchat A CSRF issue is found in the audit configuration under settings. It was found that no CSRF token validation is getting done on the server-side. If we remove the CSRF token and keep the CSRF token field empty, the action is getting performed.",
      "published_date": "2022-01-26",
      "chain_len": 1,
      "project": "https://github.com/livehelperchat/livehelperchat",
      "commit_href": "https://github.com/livehelperchat/livehelperchat/commit/f59ffb02984c0ce2fbb19ac39365066507de9370",
      "commit_sha": "f59ffb02984c0ce2fbb19ac39365066507de9370",
      "patch": "SINGLE",
      "chain_ord": "['f59ffb02984c0ce2fbb19ac39365066507de9370']",
      "before_first_fix_commit": "{'58df43e89c5b2c11be4994a71e84c93d469dc7bd'}",
      "last_fix_commit": "f59ffb02984c0ce2fbb19ac39365066507de9370",
      "chain_ord_pos": 1.0,
      "commit_datetime": "01/13/2022, 19:04:29",
      "message": "Missing csfr check",
      "author": "Remigijus Kiminas",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'lhc_web/modules/lhaudit/configuration.php': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/LiveHelperChat/livehelperchat/raw/f59ffb02984c0ce2fbb19ac39365066507de9370/lhc_web%2Fmodules%2Flhaudit%2Fconfiguration.php', 'patch': \"@@ -7,6 +7,11 @@\\n \\n if ( isset($_POST['StoreOptions']) ) {\\n \\n+    if (!isset($_POST['csfr_token']) || !$currentUser->validateCSFRToken($_POST['csfr_token'])) {\\n+        erLhcoreClassModule::redirect();\\n+        exit;\\n+    }\\n+    \\n     $definition = array(\\n         'days_log' => new ezcInputFormDefinitionElement(ezcInputFormDefinitionElement::OPTIONAL, 'int'),\\n         'log_js' => new ezcInputFormDefinitionElement(ezcInputFormDefinitionElement::OPTIONAL, 'boolean'),\"}}",
      "message_norm": "missing csfr check",
      "language": "de",
      "entities": "[('csfr', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['lhc_web/modules/lhaudit/configuration.php'])",
      "num_files": 1.0
    },
    {
      "index": 349,
      "vuln_id": "GHSA-43m5-c88r-cjvv",
      "cwe_id": "{'CWE-352'}",
      "score": 6.8,
      "chain": "{'https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618'}",
      "dataset": "osv",
      "summary": "XSS due to lack of CSRF validation for replying/publishing ### Impact\nDue to lack of CSRF validation, a logged in user is potentially vulnerable to an XSS attack which could allow a third party to post on their behalf on the forum.\n\n### Patches\nUpgrade to the latest version v0.7.0\n\n### Workarounds\nYou can cherry-pick the following commit: [https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618](https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618)\n\n### References\nVisit https://community.nodebb.org if you have any questions about this issue or on how to patch / upgrade your instance.",
      "published_date": "2020-08-26",
      "chain_len": 1,
      "project": "https://github.com/psychobunny/nodebb-plugin-blog-comments",
      "commit_href": "https://github.com/psychobunny/nodebb-plugin-blog-comments/commit/cf43beedb05131937ef46f365ab0a0c6fa6ac618",
      "commit_sha": "cf43beedb05131937ef46f365ab0a0c6fa6ac618",
      "patch": "SINGLE",
      "chain_ord": "['cf43beedb05131937ef46f365ab0a0c6fa6ac618']",
      "before_first_fix_commit": "{'ed0156594a44c6429743e314e9b5a313fad60730'}",
      "last_fix_commit": "cf43beedb05131937ef46f365ab0a0c6fa6ac618",
      "chain_ord_pos": 1.0,
      "commit_datetime": "08/20/2020, 05:11:57",
      "message": "fix: CSRF issues",
      "author": "psychobunny",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'library.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/psychobunny/nodebb-plugin-blog-comments/raw/cf43beedb05131937ef46f365ab0a0c6fa6ac618/library.js', 'patch': \"@@ -248,8 +248,8 @@\\n \\t\\t});\\n \\n \\t\\tapp.get('/comments/get/:id/:pagination?', middleware.applyCSRF, Comments.getCommentData);\\n-\\t\\tapp.post('/comments/reply', Comments.replyToComment);\\n-\\t\\tapp.post('/comments/publish', Comments.publishArticle);\\n+\\t\\tapp.post('/comments/reply', middleware.applyCSRF, Comments.replyToComment);\\n+\\t\\tapp.post('/comments/publish', middleware.applyCSRF, Comments.publishArticle);\\n \\n \\t\\tapp.get('/admin/blog-comments', middleware.admin.buildHeader, renderAdmin);\\n \\t\\tapp.get('/api/admin/blog-comments', renderAdmin);\"}}",
      "message_norm": "fix: csrf issues",
      "language": "en",
      "entities": "[('csrf', 'SECWORD', ''), ('issues', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['library.js'])",
      "num_files": 1.0
    },
    {
      "index": 1218,
      "vuln_id": "GHSA-8hfj-j24r-96c4",
      "cwe_id": "{'CWE-27', 'CWE-22'}",
      "score": 7.5,
      "chain": "{'https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5'}",
      "dataset": "osv",
      "summary": "Path Traversal: 'dir/../../filename' in moment.locale ### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user-provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo](https://github.com/moment/moment)",
      "published_date": "2022-04-04",
      "chain_len": 1,
      "project": "https://github.com/moment/moment",
      "commit_href": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5",
      "commit_sha": "4211bfc8f15746be4019bba557e29a7ba83d54c5",
      "patch": "SINGLE",
      "chain_ord": "['4211bfc8f15746be4019bba557e29a7ba83d54c5']",
      "before_first_fix_commit": "{'f2a813afcfd0dd6e63812ea74c46ecc627f6a6a6'}",
      "last_fix_commit": "4211bfc8f15746be4019bba557e29a7ba83d54c5",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/27/2022, 11:46:47",
      "message": "[bugfix] Avoid loading path-looking locales from fs",
      "author": "Iskren Chernev",
      "comments": "{'com_1': {'author': 'kuraga', 'datetime': '05/11/2022, 17:44:47', 'body': '@ichernev , why two `\\\\\\\\`?'}, 'com_2': {'author': 'omoustaouda', 'datetime': '06/19/2022, 12:17:54', 'body': \"@ichernev, thank you for the patch!\\r\\n\\r\\na consideration that come at a first glance: I'd consider allowing only the expected valid characters, \\r\\nlike `it-IT`, `es-ES`, ...\\r\\n\\r\\ninstead of preventing the ones that look not sane,\\r\\nthe reason is that there are uncountable ways to escape chars like `/` and `\\\\` to look different and possibly not being caught by this regexp.\"}}",
      "stats": "{'additions': 7, 'deletions': 1, 'total': 8}",
      "files": "{'src/lib/locale/locales.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/moment/moment/raw/4211bfc8f15746be4019bba557e29a7ba83d54c5/src%2Flib%2Flocale%2Flocales.js', 'patch': \"@@ -62,6 +62,11 @@ function chooseLocale(names) {\\n     return globalLocale;\\n }\\n \\n+function isLocaleNameSane(name) {\\n+    // Prevent names that look like filesystem paths, i.e contain '/' or '\\\\'\\n+    return name.match('^[^/\\\\\\\\\\\\\\\\]*$') != null;\\n+}\\n+\\n function loadLocale(name) {\\n     var oldLocale = null,\\n         aliasedRequire;\\n@@ -70,7 +75,8 @@ function loadLocale(name) {\\n         locales[name] === undefined &&\\n         typeof module !== 'undefined' &&\\n         module &&\\n-        module.exports\\n+        module.exports &&\\n+        isLocaleNameSane(name)\\n     ) {\\n         try {\\n             oldLocale = globalLocale._abbr;\"}}",
      "message_norm": "[bugfix] avoid loading path-looking locales from fs",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/lib/locale/locales.js'])",
      "num_files": 1.0
    },
    {
      "index": 1813,
      "vuln_id": "GHSA-g4h2-gqm3-c9wq",
      "cwe_id": "{'CWE-681'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/4f663d4b8f0bec1b48da6fa091a7d29609980fa4'}",
      "dataset": "osv",
      "summary": "Segfault in tf.raw_ops.ImmutableConst ### Impact\nCalling [`tf.raw_ops.ImmutableConst`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.\n\n```python\n>>> import tensorflow as tf\n>>> tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=\"/tmp/test.txt\")\n...\nSegmentation fault\n```\n\n### Patches\nWe have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### Workarounds\nIf using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
      "commit_sha": "4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
      "patch": "SINGLE",
      "chain_ord": "['4f663d4b8f0bec1b48da6fa091a7d29609980fa4']",
      "before_first_fix_commit": "{'f0e867da82025a97524a233eaedfccfcf6295d5c'}",
      "last_fix_commit": "4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/08/2021, 20:29:30",
      "message": "Allowlist certain data types to avoid a seg fault.\n\nPiperOrigin-RevId: 356326671\nChange-Id: I23b65b52e93798cb5a6744632d31b0f88c6b6b31",
      "author": "Amit Patankar",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'tensorflow/core/kernels/immutable_constant_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/4f663d4b8f0bec1b48da6fa091a7d29609980fa4/tensorflow%2Fcore%2Fkernels%2Fimmutable_constant_op.cc', 'patch': '@@ -17,6 +17,8 @@ limitations under the License.\\n \\n #include <unordered_set>\\n \\n+#include \"tensorflow/core/framework/types.pb.h\"\\n+\\n namespace tensorflow {\\n \\n namespace {\\n@@ -86,6 +88,9 @@ ImmutableConstantOp::ImmutableConstantOp(OpKernelConstruction* context)\\n   OP_REQUIRES_OK(context,\\n                  context->GetAttr(kMemoryRegionNameAttr, &region_name_));\\n   OP_REQUIRES_OK(context, context->GetAttr(kDTypeAttr, &dtype_));\\n+  OP_REQUIRES(context, dtype_ != DT_RESOURCE && dtype_ != DT_VARIANT,\\n+              errors::InvalidArgument(\\n+                  \"Resource and variant dtypes are invalid for this op.\"));\\n   OP_REQUIRES_OK(context, context->GetAttr(kShapeAttr, &shape_));\\n }'}}",
      "message_norm": "allowlist certain data types to avoid a seg fault.\n\npiperorigin-revid: 356326671\nchange-id: i23b65b52e93798cb5a6744632d31b0f88c6b6b31",
      "language": "en",
      "entities": "[('fault', 'FLAW', ''), ('356326671', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/immutable_constant_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 930,
      "vuln_id": "GHSA-72wf-hwcq-65h9",
      "cwe_id": "{'CWE-352'}",
      "score": 8.8,
      "chain": "{'https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d'}",
      "dataset": "osv",
      "summary": "Cross-Site Request Forgery in Filebrowser A Cross-Site Request Forgery (CSRF) vulnerability exists in Filebrowser < 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim.",
      "published_date": "2022-02-05",
      "chain_len": 1,
      "project": "https://github.com/filebrowser/filebrowser",
      "commit_href": "https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d",
      "commit_sha": "74b7cd8e81840537a8206317344f118093153e8d",
      "patch": "SINGLE",
      "chain_ord": "['74b7cd8e81840537a8206317344f118093153e8d']",
      "before_first_fix_commit": "{'6cb51b4eb4751b49e7d3458c4a23589ccf16790b'}",
      "last_fix_commit": "74b7cd8e81840537a8206317344f118093153e8d",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/31/2021, 16:13:16",
      "message": "fix: security issue in command runner (closes #1621)",
      "author": "Oleg Lobanov",
      "comments": null,
      "stats": "{'additions': 6, 'deletions': 6, 'total': 12}",
      "files": "{'http/commands.go': {'additions': 6, 'deletions': 6, 'changes': 12, 'status': 'modified', 'raw_url': 'https://github.com/filebrowser/filebrowser/raw/74b7cd8e81840537a8206317344f118093153e8d/http%2Fcommands.go', 'patch': '@@ -59,19 +59,19 @@ var commandsHandler = withUser(func(w http.ResponseWriter, r *http.Request, d *d\\n \\t\\t}\\n \\t}\\n \\n-\\tif !d.server.EnableExec || !d.user.CanExecute(strings.Split(raw, \" \")[0]) {\\n-\\t\\tif err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet\\n+\\tcommand, err := runner.ParseCommand(d.settings, raw)\\n+\\tif err != nil {\\n+\\t\\tif err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet\\n \\t\\t\\twsErr(conn, r, http.StatusInternalServerError, err)\\n \\t\\t}\\n-\\n \\t\\treturn 0, nil\\n \\t}\\n \\n-\\tcommand, err := runner.ParseCommand(d.settings, raw)\\n-\\tif err != nil {\\n-\\t\\tif err := conn.WriteMessage(websocket.TextMessage, []byte(err.Error())); err != nil { //nolint:govet\\n+\\tif !d.server.EnableExec || !d.user.CanExecute(command[0]) {\\n+\\t\\tif err := conn.WriteMessage(websocket.TextMessage, cmdNotAllowed); err != nil { //nolint:govet\\n \\t\\t\\twsErr(conn, r, http.StatusInternalServerError, err)\\n \\t\\t}\\n+\\n \\t\\treturn 0, nil\\n \\t}'}}",
      "message_norm": "fix: security issue in command runner (closes #1621)",
      "language": "en",
      "entities": "[('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#1621', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['http/commands.go'])",
      "num_files": 1.0
    },
    {
      "index": 141,
      "vuln_id": "GHSA-2v5j-q74q-r53f",
      "cwe_id": "{'CWE-79'}",
      "score": 8.8,
      "chain": "{'https://github.com/django-helpdesk/django-helpdesk/commit/a22eb0673fe0b7784f99c6b5fd343b64a6700f06'}",
      "dataset": "osv",
      "summary": "django-helpdesk is vulnerable to Cross-site Scripting django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
      "published_date": "2021-12-03",
      "chain_len": 1,
      "project": "https://github.com/django-helpdesk/django-helpdesk",
      "commit_href": "https://github.com/django-helpdesk/django-helpdesk/commit/a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
      "commit_sha": "a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
      "patch": "SINGLE",
      "chain_ord": "['a22eb0673fe0b7784f99c6b5fd343b64a6700f06']",
      "before_first_fix_commit": "{'7097c9c4c0b255ec1f10f3ea14fa2b9c47f6c706'}",
      "last_fix_commit": "a22eb0673fe0b7784f99c6b5fd343b64a6700f06",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/19/2021, 16:11:33",
      "message": "Update pattern",
      "author": "noobpk",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'helpdesk/models.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/django-helpdesk/django-helpdesk/raw/a22eb0673fe0b7784f99c6b5fd343b64a6700f06/helpdesk%2Fmodels.py', 'patch': '@@ -56,7 +56,7 @@ def get_markdown(text):\\n     if not text:\\n         return \"\"\\n \\n-    pattern = fr\\'([\\\\[\\\\s\\\\S\\\\]]*?)\\\\(([\\\\s\\\\S]*?):([\\\\[\\\\s\\\\S\\\\]]*?)\\\\)\\'\\n+    pattern = fr\\'([\\\\[\\\\s\\\\S\\\\]]*?)\\\\(([\\\\s\\\\S]*?):([\\\\s\\\\S]*?)\\\\)\\'\\n     # Regex check\\n     if re.match(pattern, text):\\n         # get get value of group regex'}}",
      "message_norm": "update pattern",
      "language": "it",
      "entities": null,
      "classification_level_1": "POORLY_DOCUMENTED",
      "classification_level_2": "REDUNDANT_MESSAGE",
      "list_files": "dict_keys(['helpdesk/models.py'])",
      "num_files": 1.0
    },
    {
      "index": 1508,
      "vuln_id": "GHSA-c7pp-g2v2-2766",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/KartikTalwar/gmail.js/commit/a83436f499f9c01b04280af945a5a81137b6baf1'}",
      "dataset": "osv",
      "summary": "DOM-based XSS in gmail-js Affected versions of `gmail-js` are vulnerable to cross-site scripting in the `tools.parse_response`, `helper.get.visible_emails_post`, and `helper.get.email_data_post` functions, which pass user input directly into the Function constructor.\n\n\n\n## Recommendation\n\nUpdate to version 0.6.5 or later.",
      "published_date": "2020-09-01",
      "chain_len": 1,
      "project": "https://github.com/KartikTalwar/gmail.js",
      "commit_href": "https://github.com/KartikTalwar/gmail.js/commit/a83436f499f9c01b04280af945a5a81137b6baf1",
      "commit_sha": "a83436f499f9c01b04280af945a5a81137b6baf1",
      "patch": "SINGLE",
      "chain_ord": "['a83436f499f9c01b04280af945a5a81137b6baf1']",
      "before_first_fix_commit": "{'0e4732cb6c6c447d7f0487580ad7ada33184be92'}",
      "last_fix_commit": "a83436f499f9c01b04280af945a5a81137b6baf1",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/29/2016, 08:36:02",
      "message": "Replace new Function() with JSON.parse()",
      "author": "Jostein Kj\u00f8nigsen",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 15, 'total': 23}",
      "files": "{'src/gmail.js': {'additions': 8, 'deletions': 15, 'changes': 23, 'status': 'modified', 'raw_url': 'https://github.com/KartikTalwar/gmail.js/raw/a83436f499f9c01b04280af945a5a81137b6baf1/src%2Fgmail.js', 'patch': '@@ -891,10 +891,8 @@ var Gmail_ = function(localJQuery) {\\n                 endIndex = (parseInt(dataLength, 10) - 2) + response.indexOf(\"[\");\\n                 data = response.substring(response.indexOf(\"[\"), endIndex);\\n \\n-                var get_data = new Function(\"\\\\\"use strict\\\\\"; return \" + data);\\n-                realData = get_data();\\n-\\n-                parsedResponse.push(realData);\\n+                var json = JSON.parse(data);\\n+                parsedResponse.push(json);\\n \\n                 // prepare response for next loop\\n                 response = response.substring(response.indexOf(\"[\"), response.length);\\n@@ -1684,11 +1682,9 @@ var Gmail_ = function(localJQuery) {\\n             return emails;\\n         }\\n \\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        api.tracker.view_data = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n+        api.tracker.view_data = json;\\n \\n         for(var i in api.tracker.view_data) {\\n             if (typeof(api.tracker.view_data[i]) === \"function\") {\\n@@ -1934,13 +1930,10 @@ var Gmail_ = function(localJQuery) {\\n         if (!get_data) {\\n             return {};\\n         }\\n-        get_data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n-        get_data = \"\\\\\"use strict\\\\\"; return \" + get_data;\\n-        get_data = new Function(get_data);\\n-\\n-        var cdata = get_data();\\n+        var data = get_data.substring(get_data.indexOf(\"[\"), get_data.length);\\n+        var json = JSON.parse(data);\\n \\n-        api.tracker.email_data = cdata[0];\\n+        api.tracker.email_data = json[0];\\n         return api.tools.parse_email_data(api.tracker.email_data);\\n     };'}}",
      "message_norm": "replace new function() with json.parse()",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/gmail.js'])",
      "num_files": 1.0
    },
    {
      "index": 1362,
      "vuln_id": "GHSA-9cx9-x2gp-9qvh",
      "cwe_id": "{'CWE-74', 'CWE-93'}",
      "score": 4.2,
      "chain": "{'https://github.com/gofiber/fiber/pull/579/commits/f698b5d5066cfe594102ae252cd58a1fe57cf56f'}",
      "dataset": "osv",
      "summary": "CRLF vulnerability in Fiber ### Impact\nThe filename that is given in [c.Attachment()](https://docs.gofiber.io/ctx#attachment) is not escaped, and therefore vulnerable for a CRLF injection attack. I.e. an attacker could upload a custom filename and then give the link to the victim. With this filename, the attacker can change the name of the downloaded file, redirect to another site, change the authorization header, etc.\n\n### Steps to reproduce\n```go\npackage main\n\nimport \"github.com/gofiber/fiber\"\n\nconst badFileName = \"another secret document.pdf\\\"\\r\\nLocation: google.com\\r\\nAuthorization: \\\"example_of_session_fixation\"\n\nfunc splitTheResponse(c *fiber.Ctx) {\n\tc.Attachment(badFileName)\n}\n\nfunc main() {\n\tapp := fiber.New()\n\tapp.Get(\"/attack\", splitTheResponse)\n\tapp.Listen(\"127.0.0.1:8080\")\n}\n```\n```\nHTTP/1.1 200 OK\nDate: Fri, 10 Jul 2020 19:47:04 GMT\nContent-Type: application/octet-stream\nContent-Length: 0\nContent-Disposition: attachment; filename=\"another secret document.pdf\"\nLocation: google.com\nAuthorization: \"example_of_session_fixation\"\n```\n\n### Patches\nThis issue has been patched in `v1.12.6` with commit [579](https://github.com/gofiber/fiber/pull/579/commits/f698b5d5066cfe594102ae252cd58a1fe57cf56f) escaping the filename by default.\n\n### Workarounds\nYou could of course serialize the input yourself before passing it to `ctx.Attachment()`, this is actually a good practice by default. But in case you forget, we got you covered \ud83d\udc4d \n\n### References\nA CRLF injection attack is one of several types of injection attacks. It can be used to escalate to more malicious attacks such as Cross-site Scripting (XSS), page injection, web cache poisoning, cache-based defacement, and more. A CRLF injection vulnerability exists if an attacker can inject the CRLF characters into a web application, for example using a user input form or an HTTP request, [see acunetix](https://www.acunetix.com/websitesecurity/crlf-injection/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [gofiber/fiber](https://github.com/gofiber/fiber)\n* Join us on [Discord](https://gofiber.io/discord)",
      "published_date": "2021-06-29",
      "chain_len": 1,
      "project": "https://github.com/gofiber/fiber",
      "commit_href": "https://github.com/gofiber/fiber/pull/579/commits/f698b5d5066cfe594102ae252cd58a1fe57cf56f",
      "commit_sha": "f698b5d5066cfe594102ae252cd58a1fe57cf56f",
      "patch": "SINGLE",
      "chain_ord": "['f698b5d5066cfe594102ae252cd58a1fe57cf56f']",
      "before_first_fix_commit": "{'fc5d2d7e6690ba74ad01ba0cd80e853ad451d153'}",
      "last_fix_commit": "f698b5d5066cfe594102ae252cd58a1fe57cf56f",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/10/2020, 20:25:10",
      "message": "\ud83d\udc1b Escape fname",
      "author": "Fenny",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'ctx.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/gofiber/fiber/raw/f698b5d5066cfe594102ae252cd58a1fe57cf56f/ctx.go', 'patch': '@@ -196,7 +196,7 @@ func (ctx *Ctx) Attachment(filename ...string) {\\n \\tif len(filename) > 0 {\\n \\t\\tfname := filepath.Base(filename[0])\\n \\t\\tctx.Type(filepath.Ext(fname))\\n-\\t\\tctx.Set(HeaderContentDisposition, `attachment; filename=\"`+fname+`\"`)\\n+\\t\\tctx.Set(HeaderContentDisposition, `attachment; filename=\"`+url.QueryEscape(fname)+`\"`)\\n \\t\\treturn\\n \\t}\\n \\tctx.Set(HeaderContentDisposition, \"attachment\")'}}",
      "message_norm": "\ud83d\udc1b escape fname",
      "language": "es",
      "entities": "[('escape', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['ctx.go'])",
      "num_files": 1.0
    },
    {
      "index": 348,
      "vuln_id": "GHSA-43jf-985q-588j",
      "cwe_id": "{'CWE-617'}",
      "score": 6.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
      "dataset": "osv",
      "summary": "Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https://github.com/tensorflow/tensorflow/commit/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
      "published_date": "2022-02-09",
      "chain_len": 2,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645",
      "commit_sha": "3d89911481ba6ebe8c88c1c0b595412121e6c645",
      "patch": "MULTI",
      "chain_ord": "['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
      "before_first_fix_commit": "{'955059813cc325dc1db5e2daa6221271406d4439'}",
      "last_fix_commit": "dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/12/2021, 16:12:05",
      "message": "Eliminate `CHECK`-fail from `function.cc`.\n\nPiperOrigin-RevId: 409414744\nChange-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 1, 'total': 4}",
      "files": "{'tensorflow/core/framework/function.cc': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/3d89911481ba6ebe8c88c1c0b595412121e6c645/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\\n     DataTypeVector dtypes;\\n     TF_RETURN_IF_ERROR(\\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\\n-    CHECK_GE(dtypes.size(), size_t{1});\\n+    if (dtypes.size() < size_t{1}) {\\n+      return errors::Internal(\"Expected a list of at least one dtype\");\\n+    }\\n     int arg_index = result_.nodes.size();\\n     TF_RETURN_IF_ERROR(\\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));'}}",
      "message_norm": "eliminate `check`-fail from `function.cc`.\n\npiperorigin-revid: 409414744\nchange-id: ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
      "language": "it",
      "entities": "[('409414744', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/framework/function.cc'])",
      "num_files": 1.0
    },
    {
      "index": 777,
      "vuln_id": "GHSA-67mm-m3wx-j7fr",
      "cwe_id": "{'CWE-77'}",
      "score": 9.8,
      "chain": "{'https://github.com/domharrington/node-gitlog/pull/65/commits/bb22ffb2c907e0284f887ab625e12b88c31f4bf4'}",
      "dataset": "osv",
      "summary": "Command injection in gitlog The gitlog function in src/index.ts in gitlog before 4.0.4 has a command injection vulnerability.",
      "published_date": "2021-04-13",
      "chain_len": 1,
      "project": "https://github.com/domharrington/node-gitlog",
      "commit_href": "https://github.com/domharrington/node-gitlog/pull/65/commits/bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
      "commit_sha": "bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
      "patch": "SINGLE",
      "chain_ord": "['bb22ffb2c907e0284f887ab625e12b88c31f4bf4']",
      "before_first_fix_commit": "{'256a9617fcaa04bba7652ef2a20bc0aa6cc5dbe1'}",
      "last_fix_commit": "bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/17/2020, 11:48:28",
      "message": "Use child_process.execFile instead of child_process.exec",
      "author": "Ron",
      "comments": null,
      "stats": "{'additions': 24, 'deletions': 22, 'total': 46}",
      "files": "{'src/index.ts': {'additions': 24, 'deletions': 22, 'changes': 46, 'status': 'modified', 'raw_url': 'https://github.com/domharrington/node-gitlog/raw/bb22ffb2c907e0284f887ab625e12b88c31f4bf4/src%2Findex.ts', 'patch': '@@ -1,4 +1,4 @@\\n-import { exec, execSync, ExecSyncOptions, ExecException } from \"child_process\";\\n+import { execFile, execFileSync, ExecSyncOptions, ExecException } from \"child_process\";\\n import { existsSync } from \"fs\";\\n import createDebugger from \"debug\";\\n \\n@@ -126,8 +126,8 @@ const defaultOptions = {\\n };\\n \\n /** Add optional parameter to command */\\n-function addOptional<Field extends string = DefaultField>(\\n-  command: string,\\n+function addOptionalArgument<Field extends string = DefaultField>(\\n+  command: string[],\\n   options: GitlogOptions<Field>\\n ) {\\n   let commandWithOptions = command;\\n@@ -140,9 +140,9 @@ function addOptional<Field extends string = DefaultField>(\\n     \"committer\",\\n   ] as const;\\n \\n-  for (let i = cmdOptional.length; i--; ) {\\n+  for (let i = cmdOptional.length; i--;) {\\n     if (options[cmdOptional[i]]) {\\n-      commandWithOptions += ` --${cmdOptional[i]}=\"${options[cmdOptional[i]]}\"`;\\n+      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\\n     }\\n   }\\n \\n@@ -234,30 +234,30 @@ const parseCommits = <T extends string>(\\n };\\n \\n /** Run \"git log\" and return the result as JSON */\\n-function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n+function createCommandArguments<T extends CommitField | DefaultField = DefaultField>(\\n   options: GitlogOptions<T>\\n ) {\\n   // Start constructing command\\n-  let command = \"git log -l0 \";\\n+  let command: string[] = [\"log\", \"-l0\"];\\n \\n   if (options.findCopiesHarder) {\\n-    command += \"--find-copies-harder \";\\n+    command.push(\"--find-copies-harder\");\\n   }\\n \\n   if (options.all) {\\n-    command += \"--all \";\\n+    command.push(\"--all\");\\n   }\\n \\n   if (options.includeMergeCommitFiles) {\\n-    command += \"-m \";\\n+    command.push(\"-m\");\\n   }\\n \\n-  command += `-n ${options.number}`;\\n+  command.push(`-n ${options.number}`);\\n \\n-  command = addOptional(command, options);\\n+  command = addOptionalArgument(command, options);\\n \\n   // Start of custom format\\n-  command += \\' --pretty=\"@begin@\\';\\n+  let prettyArgument: string = \\'--pretty=@begin@\\';\\n \\n   // Iterating through the fields and adding them to the custom format\\n   if (options.fields) {\\n@@ -266,29 +266,31 @@ function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n         throw new Error(`Unknown field: ${field}`);\\n       }\\n \\n-      command += delimiter + fieldMap[field];\\n+      prettyArgument += delimiter + fieldMap[field];\\n     });\\n   }\\n \\n   // Close custom format\\n-  command += \\'@end@\"\\';\\n+  prettyArgument += \\'@end@\\';\\n+  command.push(prettyArgument);\\n \\n   // Append branch (revision range) if specified\\n   if (options.branch) {\\n-    command += ` ${options.branch}`;\\n+    command.push(options.branch);\\n   }\\n \\n   // File and file status\\n   if (options.nameStatus && !options.fileLineRange) {\\n-    command += \" --name-status\";\\n+    command.push(\"--name-status\");\\n   }\\n \\n   if (options.fileLineRange) {\\n-    command += ` -L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`;\\n+    command.push(`-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`);\\n   }\\n \\n   if (options.file) {\\n-    command += ` -- ${options.file}`;\\n+    command.push(\"--\");\\n+    command.push(options.file);\\n   }\\n \\n   debug(\"command\", options.execOptions, command);\\n@@ -342,10 +344,10 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     ...userOptions,\\n   };\\n   const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\\n-  const command = createCommand(options);\\n+  const commandArguments = createCommandArguments(options);\\n \\n   if (!cb) {\\n-    const stdout = execSync(command, execOptions).toString();\\n+    const stdout = execFileSync(\"git\", commandArguments, execOptions).toString();\\n     const commits = stdout.split(\"@begin@\");\\n \\n     if (commits[0] === \"\") {\\n@@ -356,7 +358,7 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     return parseCommits(commits, options.fields, options.nameStatus);\\n   }\\n \\n-  exec(command, execOptions, (err, stdout, stderr) => {\\n+  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\\n     debug(\"stdout\", stdout);\\n     const commits = stdout.split(\"@begin@\");'}}",
      "message_norm": "use child_process.execfile instead of child_process.exec",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/index.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2899,
      "vuln_id": "GHSA-r89v-cgv7-3jhx",
      "cwe_id": "{'CWE-862'}",
      "score": 5.2,
      "chain": "{'https://github.com/octobercms/october/commit/d34fb8ab51108495a9a651b841202d935f4e12f7'}",
      "dataset": "osv",
      "summary": "Bypass of fix for CVE-2020-15247, Twig sandbox escape ### Impact\nA bypass of CVE-2020-15247 (fixed in 1.0.469 and 1.1.0) was discovered that has the same impact as CVE-2020-15247:\n\nAn authenticated backend user with the `cms.manage_pages`, `cms.manage_layouts`, or `cms.manage_partials` permissions who would **normally** not be permitted to provide PHP code to be executed by the CMS due to `cms.enableSafeMode` being enabled is able to write specific Twig code to escape the Twig sandbox and execute arbitrary PHP.\n\nThis is not a problem for anyone that trusts their users with those permissions to normally write & manage PHP within the CMS by not having `cms.enableSafeMode` enabled, but would be a problem for anyone relying on `cms.enableSafeMode` to ensure that users with those permissions in production do not have access to write & execute arbitrary PHP.\n\n### Patches\nIssue has been patched in Build 470 (v1.0.470) and v1.1.1.\n\n### Workarounds\nApply https://github.com/octobercms/october/commit/d34fb8ab51108495a9a651b841202d935f4e12f7 to your installation manually if unable to upgrade to Build 470 or v1.1.1.\n\n### References\nReported by [ka1n4t](https://github.com/ka1n4t)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1108\" alt=\"Screen Shot 2020-10-10 at 1 21 13 PM\" src=\"https://user-images.githubusercontent.com/7253840/95663316-7de28b80-0afb-11eb-999d-a6526cf78709.png\">",
      "published_date": "2020-11-23",
      "chain_len": 1,
      "project": "https://github.com/octobercms/october",
      "commit_href": "https://github.com/octobercms/october/commit/d34fb8ab51108495a9a651b841202d935f4e12f7",
      "commit_sha": "d34fb8ab51108495a9a651b841202d935f4e12f7",
      "patch": "SINGLE",
      "chain_ord": "['d34fb8ab51108495a9a651b841202d935f4e12f7']",
      "before_first_fix_commit": "{'16e0bd4d094264fd00d0af86180bde4e0c73b4be'}",
      "last_fix_commit": "d34fb8ab51108495a9a651b841202d935f4e12f7",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/13/2020, 09:48:27",
      "message": "Improve Twig security policy\n\nFollow up to https://github.com/octobercms/october/compare/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca. Thanks to @ka1n4t for the additional review.",
      "author": "Luke Towers",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 0, 'total': 2}",
      "files": "{'modules/system/twig/SecurityPolicy.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/octobercms/october/raw/d34fb8ab51108495a9a651b841202d935f4e12f7/modules%2Fsystem%2Ftwig%2FSecurityPolicy.php', 'patch': \"@@ -20,6 +20,8 @@ final class SecurityPolicy implements SecurityPolicyInterface\\n     protected $blockedMethods = [\\n         'addDynamicMethod',\\n         'addDynamicProperty',\\n+        'bindEvent',\\n+        'bindEventOnce',\\n     ];\\n \\n     /**\"}}",
      "message_norm": "improve twig security policy\n\nfollow up to https://github.com/octobercms/october/compare/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca. thanks to @ka1n4t for the additional review.",
      "language": "en",
      "entities": "[('improve', 'ACTION', ''), ('security', 'SECWORD', ''), ('https://github.com/octobercms/october/compare/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca', 'URL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/system/twig/SecurityPolicy.php'])",
      "num_files": 1.0
    },
    {
      "index": 454,
      "vuln_id": "GHSA-4p8f-mmfj-r45g",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65'}",
      "dataset": "osv",
      "summary": "Cross-site scripting in fat_free_crm Fat Free CRM before 0.18.1 has XSS in the tags_helper in app/helpers/tags_helper.rb.",
      "published_date": "2019-08-21",
      "chain_len": 1,
      "project": "https://github.com/fatfreecrm/fat_free_crm",
      "commit_href": "https://github.com/fatfreecrm/fat_free_crm/commit/6d60bc8ed010c4eda05d6645c64849f415f68d65",
      "commit_sha": "6d60bc8ed010c4eda05d6645c64849f415f68d65",
      "patch": "SINGLE",
      "chain_ord": "['6d60bc8ed010c4eda05d6645c64849f415f68d65']",
      "before_first_fix_commit": "{'557fe238a65ca94ce21e3940724ab96e55e1b27d'}",
      "last_fix_commit": "6d60bc8ed010c4eda05d6645c64849f415f68d65",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/26/2018, 23:55:55",
      "message": "Context-sensitive XSS bugfix.",
      "author": "Antonin Steinhauser",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'app/helpers/tags_helper.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/fatfreecrm/fat_free_crm/raw/6d60bc8ed010c4eda05d6645c64849f415f68d65/app%2Fhelpers%2Ftags_helper.rb', 'patch': '@@ -17,7 +17,7 @@ def tags_for_index(model)\\n       elsif !query.include?(hashtag)\\n         query += \" #{hashtag}\"\\n       end\\n-      out << link_to_function(tag, \"crm.search_tagged(\\'#{query}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n+      out << link_to_function(tag, \"crm.search_tagged(\\'#{escape_javascript(query)}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n     end\\n   end'}}",
      "message_norm": "context-sensitive xss bugfix.",
      "language": "fr",
      "entities": "[('sensitive', 'SECWORD', ''), ('xss', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/helpers/tags_helper.rb'])",
      "num_files": 1.0
    },
    {
      "index": 328,
      "vuln_id": "GHSA-3xgx-r9j4-qw9w",
      "cwe_id": "{'CWE-1321'}",
      "score": 7.3,
      "chain": "{'https://github.com/dexie/Dexie.js/commit/1d655a69b9f28c3af6fae10cf5c61df387dc689b'}",
      "dataset": "osv",
      "summary": "Prototype Pollution in Dexie Dexie is a minimalistic wrapper for IndexedDB. The package dexie before 3.2.2, from 4.0.0-alpha.1 and before 4.0.0-alpha.3 are vulnerable to Prototype Pollution in the Dexie.setByKeyPath(obj, keyPath, value) function which does not properly check the keys being set (like __proto__ or constructor). This can allow an attacker to add/modify properties of the Object.prototype leading to prototype pollution vulnerability. **Note:** This vulnerability can occur in multiple ways, for example when modifying a collection with untrusted user input.",
      "published_date": "2022-05-03",
      "chain_len": 1,
      "project": "https://github.com/dexie/Dexie.js",
      "commit_href": "https://github.com/dexie/Dexie.js/commit/1d655a69b9f28c3af6fae10cf5c61df387dc689b",
      "commit_sha": "1d655a69b9f28c3af6fae10cf5c61df387dc689b",
      "patch": "SINGLE",
      "chain_ord": "['1d655a69b9f28c3af6fae10cf5c61df387dc689b']",
      "before_first_fix_commit": "{'b350b8cbc8a926b46c20f3a569555c4660a99ca4'}",
      "last_fix_commit": "1d655a69b9f28c3af6fae10cf5c61df387dc689b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/27/2022, 10:26:44",
      "message": "Prohibit prototype pollution",
      "author": "dfahlander",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/functions/utils.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/dexie/Dexie.js/raw/1d655a69b9f28c3af6fae10cf5c61df387dc689b/src%2Ffunctions%2Futils.ts', 'patch': '@@ -151,7 +151,7 @@ export function setByKeyPath(obj, keyPath, value) {\\n                 } else obj[currentKeyPath] = value;\\n             else {\\n                 var innerObj = obj[currentKeyPath];\\n-                if (!innerObj) innerObj = (obj[currentKeyPath] = {});\\n+                if (!innerObj || !hasOwn(obj, currentKeyPath)) innerObj = (obj[currentKeyPath] = {});\\n                 setByKeyPath(innerObj, remainingKeyPath, value);\\n             }\\n         } else {'}}",
      "message_norm": "prohibit prototype pollution",
      "language": "en",
      "entities": "[('prototype pollution', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/functions/utils.ts'])",
      "num_files": 1.0
    },
    {
      "index": 2373,
      "vuln_id": "GHSA-m7fm-4jfh-jrg6",
      "cwe_id": "{'CWE-416'}",
      "score": 7.8,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab'}",
      "dataset": "osv",
      "summary": "Use after free in boosted trees creation ### Impact\nThe implementation for `tf.raw_ops.BoostedTreesCreateEnsemble` can result in a use after free error if an attacker supplies specially crafted arguments:\n\n```python\nimport tensorflow as tf\n\nv= tf.Variable([0.0])\ntf.raw_ops.BoostedTreesCreateEnsemble(\n  tree_ensemble_handle=v.handle,\n  stamp_token=[0],\n  tree_ensemble_serialized=['0']) \n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the  resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent `free`-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed.\n\n### Patches\nWe have patched the issue in GitHub commit [5ecec9c6fbdbc6be03295685190a45e7eee726ab](https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab",
      "commit_sha": "5ecec9c6fbdbc6be03295685190a45e7eee726ab",
      "patch": "SINGLE",
      "chain_ord": "['5ecec9c6fbdbc6be03295685190a45e7eee726ab']",
      "before_first_fix_commit": "{'d8a39f2dc1cba935ba153092a09e7d4bb2ce5ee2'}",
      "last_fix_commit": "5ecec9c6fbdbc6be03295685190a45e7eee726ab",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/31/2021, 02:13:19",
      "message": "Prevent use after free.\n\nA very old version of the code used `result` as a simple pointer to a resource. Two years later, the pointer got changed to a `unique_ptr` but author forgot to remove the call to `Unref`. Three years after that, we finally uncover the UAF.\n\nPiperOrigin-RevId: 387924872\nChange-Id: I70fb6f199164de49fac20c168132a07b84903f9b",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 0, 'total': 1}",
      "files": "{'tensorflow/core/kernels/boosted_trees/resource_ops.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/5ecec9c6fbdbc6be03295685190a45e7eee726ab/tensorflow%2Fcore%2Fkernels%2Fboosted_trees%2Fresource_ops.cc', 'patch': '@@ -53,6 +53,7 @@ class BoostedTreesCreateEnsembleOp : public OpKernel {\\n     if (!result->InitFromSerialized(\\n             tree_ensemble_serialized_t->scalar<tstring>()(), stamp_token)) {\\n       result->Unref();\\n+      result.release();  // Needed due to the `->Unref` above, to prevent UAF\\n       OP_REQUIRES(\\n           context, false,\\n           errors::InvalidArgument(\"Unable to parse tree ensemble proto.\"));'}}",
      "message_norm": "prevent use after free.\n\na very old version of the code used `result` as a simple pointer to a resource. two years later, the pointer got changed to a `unique_ptr` but author forgot to remove the call to `unref`. three years after that, we finally uncover the uaf.\n\npiperorigin-revid: 387924872\nchange-id: i70fb6f199164de49fac20c168132a07b84903f9b",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('use after free', 'SECWORD', ''), ('changed', 'ACTION', ''), ('remove', 'ACTION', ''), ('387924872', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/boosted_trees/resource_ops.cc'])",
      "num_files": 1.0
    },
    {
      "index": 322,
      "vuln_id": "GHSA-3wwj-wh2w-g4xp",
      "cwe_id": "{'CWE-93'}",
      "score": 7.6,
      "chain": "{'https://github.com/microweber/microweber/commit/f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128'}",
      "dataset": "osv",
      "summary": "CRLF Injection in microweber CRLF Injection leads to Stack Trace Exposure due to lack of filtering at https://demo.microweber.org/ in Packagist microweber/microweber prior to 1.2.11.",
      "published_date": "2022-02-19",
      "chain_len": 1,
      "project": "https://github.com/microweber/microweber",
      "commit_href": "https://github.com/microweber/microweber/commit/f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128",
      "commit_sha": "f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128",
      "patch": "SINGLE",
      "chain_ord": "['f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128']",
      "before_first_fix_commit": "{'7bdd97ec1ff4740ac8fa898b74ef9bce56bcf193'}",
      "last_fix_commit": "f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/17/2022, 14:49:46",
      "message": "Update UrlManager.php",
      "author": "Bozhidar Slaveykov",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 3, 'total': 5}",
      "files": "{'src/MicroweberPackages/Helper/UrlManager.php': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/microweber/microweber/raw/f0e338f1b7dc5ec9d99231f4ed3fa6245a5eb128/src%2FMicroweberPackages%2FHelper%2FUrlManager.php', 'patch': '@@ -111,9 +111,8 @@ public function redirect($url)\\n             }\\n         }\\n \\n-        if (!filter_var($redirectUrl, FILTER_VALIDATE_URL)) {\\n-            $redirectUrl = site_url();\\n-        }\\n+        $redirectUrl = str_replace(\"\\\\r\", \"\", $redirectUrl);\\n+        $redirectUrl = str_replace(\"\\\\n\", \"\", $redirectUrl);\\n \\n         if (headers_sent()) {\\n             echo \\'<meta http-equiv=\"refresh\" content=\"0;url=\\' . $redirectUrl . \\'\">\\';'}}",
      "message_norm": "update urlmanager.php",
      "language": "sv",
      "entities": null,
      "classification_level_1": "POORLY_DOCUMENTED",
      "classification_level_2": "SUBMIT_CENTERED",
      "list_files": "dict_keys(['src/MicroweberPackages/Helper/UrlManager.php'])",
      "num_files": 1.0
    },
    {
      "index": 1207,
      "vuln_id": "GHSA-8g7p-74h8-hg48",
      "cwe_id": "{'CWE-400', 'CWE-125'}",
      "score": 9.1,
      "chain": "{'https://github.com/TooTallNate/node-https-proxy-agent/commit/1c24219df87524e6ed973127e81f30801d658f07'}",
      "dataset": "osv",
      "summary": "Denial of Service in https-proxy-agent Versions of `https-proxy-agent` before 2.2.0 are vulnerable to denial of service. This is due to unsanitized options (proxy.auth) being passed to `Buffer()`.\n\n\n## Recommendation\n\nUpdate to version 2.2.0 or later.",
      "published_date": "2018-07-27",
      "chain_len": 1,
      "project": "https://github.com/TooTallNate/node-https-proxy-agent",
      "commit_href": "https://github.com/TooTallNate/node-https-proxy-agent/commit/1c24219df87524e6ed973127e81f30801d658f07",
      "commit_sha": "1c24219df87524e6ed973127e81f30801d658f07",
      "patch": "SINGLE",
      "chain_ord": "['1c24219df87524e6ed973127e81f30801d658f07']",
      "before_first_fix_commit": "{'c58d365dd153104d1147967a0a6b4e1dd1698e50'}",
      "last_fix_commit": "1c24219df87524e6ed973127e81f30801d658f07",
      "chain_ord_pos": 1.0,
      "commit_datetime": "03/03/2018, 19:31:04",
      "message": "Use `Buffer.from()`\n\n`new Buffer()` is deprecated and unsafe.",
      "author": "Nathan Rajlich",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/TooTallNate/node-https-proxy-agent/raw/1c24219df87524e6ed973127e81f30801d658f07/index.js', 'patch': \"@@ -204,7 +204,7 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\\n   var headers = Object.assign({}, proxy.headers);\\n   if (proxy.auth) {\\n     headers['Proxy-Authorization'] =\\n-      'Basic ' + new Buffer(proxy.auth).toString('base64');\\n+      'Basic ' + Buffer.from(proxy.auth).toString('base64');\\n   }\\n \\n   // the Host header should only include the port\"}}",
      "message_norm": "use `buffer.from()`\n\n`new buffer()` is deprecated and unsafe.",
      "language": "en",
      "entities": "[('unsafe', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['index.js'])",
      "num_files": 1.0
    },
    {
      "index": 5250,
      "vuln_id": "GHSA-v5c9-mmw9-829q",
      "cwe_id": "{'CWE-94'}",
      "score": null,
      "chain": "{'https://github.com/PHPMailer/PHPMailer/commit/8beacc646acb67c995aea10ac5585970efc7355a'}",
      "dataset": "osv",
      "summary": "PHPMailer susceptible to arbitrary code execution html2text.php in Chuggnutt HTML to Text Converter, as used in PHPMailer before 5.2.10, RoundCube Webmail (roundcubemail) 0.2-1.alpha and 0.2-3.beta, Mahara, and AtMail Open 1.03, allows remote attackers to execute arbitrary code via crafted input that is processed by the preg_replace function with the eval switch.",
      "published_date": "2022-05-14",
      "chain_len": 1,
      "project": "https://github.com/PHPMailer/PHPMailer",
      "commit_href": "https://github.com/PHPMailer/PHPMailer/commit/8beacc646acb67c995aea10ac5585970efc7355a",
      "commit_sha": "8beacc646acb67c995aea10ac5585970efc7355a",
      "patch": "SINGLE",
      "chain_ord": "['8beacc646acb67c995aea10ac5585970efc7355a']",
      "before_first_fix_commit": "{'d7c9ad524c3bf519985a7f257fc831b52a20ec69'}",
      "last_fix_commit": "8beacc646acb67c995aea10ac5585970efc7355a",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/22/2016, 10:05:21",
      "message": "Add security notices",
      "author": "Marcus Bointon",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 0, 'total': 8}",
      "files": "{'README.md': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https://github.com/PHPMailer/PHPMailer/raw/8beacc646acb67c995aea10ac5585970efc7355a/README.md', 'patch': \"@@ -139,6 +139,14 @@ Build status: [![Build Status](https://travis-ci.org/PHPMailer/PHPMailer.svg)](h\\n \\n If this isn't passing, is there something you can do to help?\\n \\n+## Security\\n+\\n+Please follow responsible disclosure - report any security problems found to the maintainers privately.\\n+\\n+PHPMailer versions prior to 5.2.14 (released November 2015) are vulnerable to [CVE-2015-8476](https://web.nvd.nist.gov/view/vuln/detail?vulnId=) an SMTP injection bug.\\n+\\n+PHPMailer versions prior to 5.2.10 (released May 2015) are vulnerable to [CVE-2008-5619](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-5619), a remote code execution vulnerability in the bundled html2text library. This file was removed in 5.2.10, so if you are using a version prior to that and make use of the html2text function, it's vitally important that you upgrade and remove this file.\\n+\\n ## Contributing\\n \\n Please submit bug reports, suggestions and pull requests to the [GitHub issue tracker](https://github.com/PHPMailer/PHPMailer/issues).\"}}",
      "message_norm": "add security notices",
      "language": "en",
      "entities": "[('add', 'ACTION', ''), ('security', 'SECWORD', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['README.md'])",
      "num_files": 1.0
    },
    {
      "index": 91,
      "vuln_id": "GHSA-2gqg-2rg7-gh33",
      "cwe_id": "{'CWE-79'}",
      "score": 6.1,
      "chain": "{'https://github.com/librenms/librenms/commit/cc6112b8fb36039b862b42d86eb79ef7ee89d31b'}",
      "dataset": "osv",
      "summary": "Cross site scripting in librenms LibreNMS v22.3.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the component /Table/GraylogController.php.",
      "published_date": "2022-06-03",
      "chain_len": 1,
      "project": "https://github.com/librenms/librenms",
      "commit_href": "https://github.com/librenms/librenms/commit/cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
      "commit_sha": "cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
      "patch": "SINGLE",
      "chain_ord": "['cc6112b8fb36039b862b42d86eb79ef7ee89d31b']",
      "before_first_fix_commit": "{'9c126572a2aebd43838aab9bf6abc09719ce983e'}",
      "last_fix_commit": "cc6112b8fb36039b862b42d86eb79ef7ee89d31b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/19/2022, 23:10:02",
      "message": "fix graylog xss (#13931)",
      "author": "Tony Murray",
      "comments": null,
      "stats": "{'additions': 2, 'deletions': 2, 'total': 4}",
      "files": "{'app/Http/Controllers/Table/GraylogController.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/librenms/librenms/raw/cc6112b8fb36039b862b42d86eb79ef7ee89d31b/app%2FHttp%2FControllers%2FTable%2FGraylogController.php', 'patch': '@@ -118,8 +118,8 @@ private function formatMessage($message)\\n         return [\\n             \\'severity\\'  => $this->severityLabel($level),\\n             \\'timestamp\\' => $displayTime,\\n-            \\'source\\'    => $device ? Url::deviceLink($device) : $message[\\'message\\'][\\'source\\'],\\n-            \\'message\\'   => $message[\\'message\\'][\\'message\\'] ?? \\'\\',\\n+            \\'source\\'    => $device ? Url::deviceLink($device) : htmlspecialchars($message[\\'message\\'][\\'source\\']),\\n+            \\'message\\'   => htmlspecialchars($message[\\'message\\'][\\'message\\'] ?? \\'\\'),\\n             \\'facility\\'  => is_numeric($facility) ? \"($facility) \" . __(\"syslog.facility.$facility\") : $facility,\\n             \\'level\\'     => (is_numeric($level) && $level >= 0) ? \"($level) \" . __(\"syslog.severity.$level\") : $level,\\n         ];'}}",
      "message_norm": "fix graylog xss (#13931)",
      "language": "no",
      "entities": "[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('#13931', 'ISSUE', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/Http/Controllers/Table/GraylogController.php'])",
      "num_files": 1.0
    },
    {
      "index": 1235,
      "vuln_id": "GHSA-8p9r-f949-699g",
      "cwe_id": "{'CWE-22'}",
      "score": 7.5,
      "chain": "{'https://github.com/browserless/chrome/commit/848b87e5bea4f8473eea85261a5ff922d6ebd2b6'}",
      "dataset": "osv",
      "summary": "Path Traversal in browserless-chrome This affects all versions of browserless-chrome before 1.43.0. User input flowing from the workspace endpoint gets used to create a file path filePath and this is fetched and then sent back to a user. This can be escaped to fetch arbitrary files from a server.",
      "published_date": "2021-05-10",
      "chain_len": 1,
      "project": "https://github.com/browserless/chrome",
      "commit_href": "https://github.com/browserless/chrome/commit/848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
      "commit_sha": "848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
      "patch": "SINGLE",
      "chain_ord": "['848b87e5bea4f8473eea85261a5ff922d6ebd2b6']",
      "before_first_fix_commit": "{'6a195ab11d393cefcecf9940b38cf6921e3d38d0'}",
      "last_fix_commit": "848b87e5bea4f8473eea85261a5ff922d6ebd2b6",
      "chain_ord_pos": 1.0,
      "commit_datetime": "10/26/2020, 17:28:01",
      "message": "Ensure workspace files are _in_ the workspace DIR",
      "author": "Joel Griffith",
      "comments": null,
      "stats": "{'additions': 8, 'deletions': 1, 'total': 9}",
      "files": "{'src/routes.ts': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https://github.com/browserless/chrome/raw/848b87e5bea4f8473eea85261a5ff922d6ebd2b6/src%2Froutes.ts', 'patch': '@@ -157,9 +157,12 @@ export const getRoutes = ({\\n       }\\n \\n       const filePath = path.join(workspaceDir, file);\\n-\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }\\n@@ -185,6 +188,10 @@ export const getRoutes = ({\\n       const filePath = path.join(workspaceDir, file);\\n       const hasFile = await exists(filePath);\\n \\n+      if (!filePath.includes(workspaceDir)) {\\n+        return res.sendStatus(404);\\n+      }\\n+\\n       if (!hasFile) {\\n         return res.sendStatus(404);\\n       }'}}",
      "message_norm": "ensure workspace files are _in_ the workspace dir",
      "language": "en",
      "entities": "[('ensure', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/routes.ts'])",
      "num_files": 1.0
    },
    {
      "index": 449,
      "vuln_id": "GHSA-4mv4-gmmf-q382",
      "cwe_id": "{'CWE-79'}",
      "score": 0.0,
      "chain": "{'https://github.com/DataTables/DataTablesSrc/commit/ccf86dc5982bd8e16d11a0815c940f5b256874c9', 'https://github.com/DataTables/DataTablesSrc/commit/9780a3693572757d87bf70e48bd7555faf974f28'}",
      "dataset": "osv",
      "summary": "DataTable Vulnerable to Cross-Site Scripting Cross-site scripting (XSS) vulnerability in the DataTables plugin 1.10.8 and earlier for jQuery allows remote attackers to inject arbitrary web script or HTML via the scripts parameter to media/unit_testing/templates/6776.php.\n\n\n## Recommendation\n\nUpdate to a version greater than 1.10.8. A [fix](https://github.com/DataTables/DataTablesSrc/commit/ccf86dc5982bd8e16d) appears in [version 1.10.10](https://github.com/DataTables/DataTablesSrc/commits/1.10.10?after=9780a3693572757d87bf70e48bd7555faf974f28+34&branch=1.10.10&qualified_name=refs%2Ftags%2F1.10.10).",
      "published_date": "2020-08-31",
      "chain_len": 2,
      "project": "https://github.com/DataTables/DataTablesSrc",
      "commit_href": "https://github.com/DataTables/DataTablesSrc/commit/9780a3693572757d87bf70e48bd7555faf974f28",
      "commit_sha": "9780a3693572757d87bf70e48bd7555faf974f28",
      "patch": "MULTI",
      "chain_ord": "['ccf86dc5982bd8e16d11a0815c940f5b256874c9', '9780a3693572757d87bf70e48bd7555faf974f28']",
      "before_first_fix_commit": "{'51fa58e1c6baf456fe83fbfc7bfa4082be850365'}",
      "last_fix_commit": "9780a3693572757d87bf70e48bd7555faf974f28",
      "chain_ord_pos": 2.0,
      "commit_datetime": "11/06/2015, 15:33:43",
      "message": "Version - 1.10.10 ready",
      "author": "Allan Jardine",
      "comments": null,
      "stats": "{'additions': 3, 'deletions': 3, 'total': 6}",
      "files": "{'js/DataTables.js': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https://github.com/DataTables/DataTablesSrc/raw/9780a3693572757d87bf70e48bd7555faf974f28/js%2FDataTables.js', 'patch': '@@ -1,11 +1,11 @@\\n-/*! DataTables 1.10.10-dev\\n+/*! DataTables 1.10.10\\n  * \u00a92008-2015 SpryMedia Ltd - datatables.net/license\\n  */\\n \\n /**\\n  * @summary     DataTables\\n  * @description Paginate, search and order HTML tables\\n- * @version     1.10.10-dev\\n+ * @version     1.10.10\\n  * @file        jquery.dataTables.js\\n  * @author      SpryMedia Ltd (www.sprymedia.co.uk)\\n  * @contact     www.sprymedia.co.uk/contact\\n@@ -170,7 +170,7 @@\\n \\t *  @type string\\n \\t *  @default Version number\\n \\t */\\n-\\tDataTable.version = \"1.10.10-dev\";\\n+\\tDataTable.version = \"1.10.10\";\\n \\n \\t/**\\n \\t * Private data store, containing all of the settings objects that are'}}",
      "message_norm": "version - 1.10.10 ready",
      "language": "en",
      "entities": "[('1.10.10', 'VERSION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['js/DataTables.js'])",
      "num_files": 1.0
    },
    {
      "index": 2325,
      "vuln_id": "GHSA-m242-wc86-8768",
      "cwe_id": "{'CWE-601'}",
      "score": 6.1,
      "chain": "{'https://github.com/fedora-infra/python-fedora/commit/b27f38a67573f4c989710c9bfb726dd4c1eeb929'}",
      "dataset": "osv",
      "summary": "Moderate severity vulnerability that affects python-fedora python-fedora 0.8.0 and lower is vulnerable to an open redirect resulting in loss of CSRF protection",
      "published_date": "2018-07-13",
      "chain_len": 1,
      "project": "https://github.com/fedora-infra/python-fedora",
      "commit_href": "https://github.com/fedora-infra/python-fedora/commit/b27f38a67573f4c989710c9bfb726dd4c1eeb929",
      "commit_sha": "b27f38a67573f4c989710c9bfb726dd4c1eeb929",
      "patch": "SINGLE",
      "chain_ord": "['b27f38a67573f4c989710c9bfb726dd4c1eeb929']",
      "before_first_fix_commit": "{'6cf9094e12361a0aa306752e9d9fd8bfaaf51c85'}",
      "last_fix_commit": "b27f38a67573f4c989710c9bfb726dd4c1eeb929",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/11/2017, 13:52:01",
      "message": "Disable covert redirects and CSRF token leaking\n\nThis disallows the url() function from returning any remote URLs.\nThis prevents covert redirects, and also prevents us from leaking\nCSRF tokens to outside parties.\n\nSigned-off-by: Patrick Uiterwijk <puiterwijk@redhat.com>",
      "author": "Patrick Uiterwijk",
      "comments": null,
      "stats": "{'additions': 5, 'deletions': 0, 'total': 5}",
      "files": "{'fedora/tg/utils.py': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https://github.com/fedora-infra/python-fedora/raw/b27f38a67573f4c989710c9bfb726dd4c1eeb929/fedora%2Ftg%2Futils.py', 'patch': \"@@ -81,6 +81,11 @@ def url(tgpath, tgparams=None, **kwargs):\\n     '''\\n     if not isinstance(tgpath, six.string_types):\\n         tgpath = '/'.join(list(tgpath))\\n+    if not tgpath.startswith('/'):\\n+        # Do not allow the url() function to be used for external urls.\\n+        # This function is primarily used in redirect() calls, so this prevents\\n+        # covert redirects and thus CSRF leaking.\\n+        tgpath = '/'\\n     if tgpath.startswith('/'):\\n         webpath = (config.get('server.webpath') or '').rstrip('/')\\n         if tg_util.request_available():\"}}",
      "message_norm": "disable covert redirects and csrf token leaking\n\nthis disallows the url() function from returning any remote urls.\nthis prevents covert redirects, and also prevents us from leaking\ncsrf tokens to outside parties.\n\nsigned-off-by: patrick uiterwijk <puiterwijk@redhat.com>",
      "language": "en",
      "entities": "[('csrf', 'SECWORD', ''), ('prevents', 'ACTION', ''), ('prevents', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('puiterwijk@redhat.com', 'EMAIL', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['fedora/tg/utils.py'])",
      "num_files": 1.0
    },
    {
      "index": 1649,
      "vuln_id": "GHSA-f2rp-4rv7-fc95",
      "cwe_id": "{'CWE-200'}",
      "score": 7.8,
      "chain": "{'https://github.com/theforeman/foreman_fog_proxmox/pull/184/commits/b7e910bf61563f5d447c71b1b41e2a373a794d7b'}",
      "dataset": "osv",
      "summary": "Exposure of Sensitive Information to an Unauthorized Actor in foreman_fog_proxmox A flaw was found in the Foreman project. The Proxmox compute resource exposes the password through the API to an authenticated local attacker with view_hosts permission. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability. Versions before foreman_fog_proxmox 0.13.1 are affected",
      "published_date": "2021-06-10",
      "chain_len": 1,
      "project": "https://github.com/theforeman/foreman_fog_proxmox",
      "commit_href": "https://github.com/theforeman/foreman_fog_proxmox/pull/184/commits/b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "commit_sha": "b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "patch": "SINGLE",
      "chain_ord": "['b7e910bf61563f5d447c71b1b41e2a373a794d7b']",
      "before_first_fix_commit": "{'f131382d265944cda85bb5765a6dc5b0b2715f61'}",
      "last_fix_commit": "b7e910bf61563f5d447c71b1b41e2a373a794d7b",
      "chain_ord_pos": 1.0,
      "commit_datetime": "02/23/2021, 21:00:19",
      "message": "Fix clean API result",
      "author": "Markus Bucher",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'app/views/api/v2/compute_resources/proxmox.json.rabl': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/theforeman/foreman_fog_proxmox/raw/b7e910bf61563f5d447c71b1b41e2a373a794d7b/app%2Fviews%2Fapi%2Fv2%2Fcompute_resources%2Fproxmox.json.rabl', 'patch': '@@ -1,3 +1,3 @@\\n # frozen_string_literal: true\\n \\n-attributes :url, :user, :password, :ssl_verify_peer, :ssl_certs, :renew\\n+attributes :url, :user, :ssl_verify_peer, :ssl_certs, :renew'}}",
      "message_norm": "fix clean api result",
      "language": "ro",
      "entities": "[('fix', 'ACTION', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['app/views/api/v2/compute_resources/proxmox.json.rabl'])",
      "num_files": 1.0
    },
    {
      "index": 3161,
      "vuln_id": "GHSA-vqw6-72r7-fgw7",
      "cwe_id": "{'CWE-125'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68'}",
      "dataset": "osv",
      "summary": "OOB read in `MatrixTriangularSolve` ### Impact\nThe implementation of [`MatrixTriangularSolve`](https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails:\n\n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,\n                            const Tensor& in1) override {\n  OP_REQUIRES(\n      ctx, in0.dims() >= 2,\n      errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() >= 2,\n      errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));\n}\n  \nvoid Compute(OpKernelContext* ctx) override {\n  const Tensor& in0 = ctx->input(0);\n  const Tensor& in1 = ctx->input(1);\n\n  ValidateInputTensors(ctx, in0, in1);\n\n  MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\n  ...\n}\n```\n  \nSince `OP_REQUIRES` only sets `ctx->status()` to a non-OK value and calls `return`, this allows malicious attackers to trigger an out of bounds read:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)\nrhs_array = np.array([])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)\n\ntf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)\n```\n\nAs the two input tensors are empty, the `OP_REQUIRES` in `ValidateInputTensors` should fire and interrupt execution. However, given the implementation of `OP_REQUIRES`, after the `in0.dims() >= 2` fails, execution moves to the initialization of the `bcast` object. This initialization is done with invalid data and results in heap OOB read.\n\n### Patches\nWe have patched the issue in GitHub commit [480641e3599775a8895254ffbc0fc45621334f68](https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68",
      "commit_sha": "480641e3599775a8895254ffbc0fc45621334f68",
      "patch": "SINGLE",
      "chain_ord": "['480641e3599775a8895254ffbc0fc45621334f68']",
      "before_first_fix_commit": "{'8cae746d8449c7dda5298327353d68613f16e798'}",
      "last_fix_commit": "480641e3599775a8895254ffbc0fc45621334f68",
      "chain_ord_pos": 1.0,
      "commit_datetime": "04/24/2021, 23:47:25",
      "message": "Validate (and ensure validation sticks) inputs for `MatrixTriangularSolve`.\n\nPiperOrigin-RevId: 370282444\nChange-Id: Iaed61a0b0727cc42c830658b72eb69f785f48dc5",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 16, 'deletions': 4, 'total': 20}",
      "files": "{'tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h': {'additions': 16, 'deletions': 4, 'changes': 20, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/480641e3599775a8895254ffbc0fc45621334f68/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_triangular_solve_op_impl.h', 'patch': '@@ -162,6 +162,9 @@ class BaseMatrixTriangularSolveOp : public OpKernel {\\n     const Tensor& in1 = ctx->input(1);\\n \\n     ValidateInputTensors(ctx, in0, in1);\\n+    if (!ctx->status().ok()) {\\n+      return;\\n+    }\\n \\n     MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\\n     OP_REQUIRES(\\n@@ -230,13 +233,22 @@ class MatrixTriangularSolveOp\\n  private:\\n   void ValidateInputTensors(OpKernelContext* ctx, const Tensor& in0,\\n                             const Tensor& in1) override {\\n+    const auto in0_num_dims = in0.dims();\\n     OP_REQUIRES(\\n-        ctx, in0.dims() >= 2,\\n-        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0.dims()));\\n+        ctx, in0_num_dims >= 2,\\n+        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in0_num_dims));\\n \\n+    const auto in1_num_dims = in1.dims();\\n     OP_REQUIRES(\\n-        ctx, in1.dims() >= 2,\\n-        errors::InvalidArgument(\"In[0] ndims must be >= 2: \", in1.dims()));\\n+        ctx, in1_num_dims >= 2,\\n+        errors::InvalidArgument(\"In[1] ndims must be >= 2: \", in1_num_dims));\\n+\\n+    const auto in0_last_dim = in0.dim_size(in0_num_dims - 1);\\n+    const auto in0_prev_dim = in0.dim_size(in0_num_dims - 2);\\n+    OP_REQUIRES(ctx, in0_last_dim == in0_prev_dim,\\n+                errors::InvalidArgument(\\n+                    \"In[0] matrices in the last dimensions must be square (\",\\n+                    in0_last_dim, \" =/= \", in0_prev_dim, \")\"));\\n   }\\n };'}}",
      "message_norm": "validate (and ensure validation sticks) inputs for `matrixtriangularsolve`.\n\npiperorigin-revid: 370282444\nchange-id: iaed61a0b0727cc42c830658b72eb69f785f48dc5",
      "language": "en",
      "entities": "[('validate', 'ACTION', ''), ('ensure', 'ACTION', ''), ('370282444', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h'])",
      "num_files": 1.0
    },
    {
      "index": 208,
      "vuln_id": "GHSA-374m-jm66-3vj8",
      "cwe_id": "{'CWE-125'}",
      "score": 7.1,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba'}",
      "dataset": "osv",
      "summary": "Heap OOB in `SparseBinCount` ### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/bincount_op.cc#L353-L417) of `SparseBinCount` is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n  \n  \ntf.raw_ops.SparseBincount(\n  indices=[[0],[1],[2]]\n  values=[0,-10000000]\n  dense_shape=[1,1]\n  size=[1]\n  weights=[3,2,1]\n  binary_output=False)\n```\n\nThis is because of missing validation between the elements of the `values` argument and the shape of the sparse output:\n\n\n```cc\nfor (int64_t i = 0; i < indices_mat.dimension(0); ++i) {\n  const int64_t batch = indices_mat(i, 0);\n  const Tidx bin = values(i);\n  ...\n  out(batch, bin) = ...;\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f410212e373eb2aec4c9e60bf3702eba99a38aba](https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
      "published_date": "2021-11-10",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba",
      "commit_sha": "f410212e373eb2aec4c9e60bf3702eba99a38aba",
      "patch": "SINGLE",
      "chain_ord": "['f410212e373eb2aec4c9e60bf3702eba99a38aba']",
      "before_first_fix_commit": "{'4656caa7d74420454da967288af143ec73fb4c9b'}",
      "last_fix_commit": "f410212e373eb2aec4c9e60bf3702eba99a38aba",
      "chain_ord_pos": 1.0,
      "commit_datetime": "09/30/2021, 13:36:55",
      "message": "Prevent out-of-bound accesses in SparseBincount.\n\nPiperOrigin-RevId: 399918616\nChange-Id: I11d154f4444d3fde1f09c5c40628b8671791a30d",
      "author": "Penporn Koanantakool",
      "comments": null,
      "stats": "{'additions': 10, 'deletions': 0, 'total': 10}",
      "files": "{'tensorflow/core/kernels/bincount_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/f410212e373eb2aec4c9e60bf3702eba99a38aba/tensorflow%2Fcore%2Fkernels%2Fbincount_op.cc', 'patch': '@@ -405,6 +405,16 @@ class SparseBincountOp : public OpKernel {\\n       for (int64_t i = 0; i < indices_mat.dimension(0); ++i) {\\n         const int64_t batch = indices_mat(i, 0);\\n         const Tidx bin = values(i);\\n+        OP_REQUIRES(\\n+            ctx, batch < out.dimension(0),\\n+            errors::InvalidArgument(\"Index out of bound. `batch` (\", batch,\\n+                                    \") must be less than the dimension size (\",\\n+                                    out.dimension(0), \").\"));\\n+        OP_REQUIRES(\\n+            ctx, bin < out.dimension(1),\\n+            errors::InvalidArgument(\"Index out ouf bound. `bin` (\", bin,\\n+                                    \") must be less then the dimension size (\",\\n+                                    out.dimension(1), \").\"));\\n         if (bin < size) {\\n           if (binary_output_) {\\n             out(batch, bin) = T(1);'}}",
      "message_norm": "prevent out-of-bound accesses in sparsebincount.\n\npiperorigin-revid: 399918616\nchange-id: i11d154f4444d3fde1f09c5c40628b8671791a30d",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('out-of-bound', 'SECWORD', ''), ('399918616', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/bincount_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 255,
      "vuln_id": "GHSA-3h8m-483j-7xxm",
      "cwe_id": "{'CWE-125'}",
      "score": 2.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e'}",
      "dataset": "osv",
      "summary": "Heap out of bounds read in `RequantizationRange` ### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1], shape=[1], dtype=tf.qint32) \ninput_max = tf.constant([], dtype=tf.float32)\ninput_min = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ac328eaa3870491ababc147822cd04e91a790643/tensorflow/core/kernels/requantization_range_op.cc#L49-L50) assumes that the `input_min` and `input_max` tensors have at least one element, as it accesses the first element in two arrays:\n\n```cc\nconst float input_min_float = ctx->input(1).flat<float>()(0);\nconst float input_max_float = ctx->input(2).flat<float>()(0);\n```\n\nIf the tensors are empty, `.flat<T>()` is an empty object, backed by an empty array. Hence, accesing even the 0th element is a read outside the bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [ef0c008ee84bad91ec6725ddc42091e19a30cf0e](https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
      "published_date": "2021-05-21",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
      "commit_sha": "ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
      "patch": "SINGLE",
      "chain_ord": "['ef0c008ee84bad91ec6725ddc42091e19a30cf0e']",
      "before_first_fix_commit": "{'ac328eaa3870491ababc147822cd04e91a790643'}",
      "last_fix_commit": "ef0c008ee84bad91ec6725ddc42091e19a30cf0e",
      "chain_ord_pos": 1.0,
      "commit_datetime": "05/05/2021, 15:16:13",
      "message": "Fix out of bound read in requantization_range_op.cc\n\nPiperOrigin-RevId: 372129031\nChange-Id: Ie684ab98a3840c5186ead3eafffc0e0ed0e8030d",
      "author": "Laura Pak",
      "comments": null,
      "stats": "{'additions': 4, 'deletions': 0, 'total': 4}",
      "files": "{'tensorflow/core/kernels/requantization_range_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/ef0c008ee84bad91ec6725ddc42091e19a30cf0e/tensorflow%2Fcore%2Fkernels%2Frequantization_range_op.cc', 'patch': '@@ -46,6 +46,10 @@ class RequantizationRangeOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& input = ctx->input(0);\\n+    OP_REQUIRES(ctx, ctx->input(1).NumElements() > 0,\\n+                errors::InvalidArgument(\"Input min must not be empty.\"));\\n+    OP_REQUIRES(ctx, ctx->input(2).NumElements() > 0,\\n+                errors::InvalidArgument(\"Input max must not be empty.\"));\\n     const float input_min_float = ctx->input(1).flat<float>()(0);\\n     const float input_max_float = ctx->input(2).flat<float>()(0);\\n     Tensor* output_min = nullptr;'}}",
      "message_norm": "fix out of bound read in requantization_range_op.cc\n\npiperorigin-revid: 372129031\nchange-id: ie684ab98a3840c5186ead3eafffc0e0ed0e8030d",
      "language": "en",
      "entities": "[('fix', 'ACTION', ''), ('out of bound read', 'SECWORD', ''), ('372129031', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/kernels/requantization_range_op.cc'])",
      "num_files": 1.0
    },
    {
      "index": 354,
      "vuln_id": "GHSA-44cw-p2hm-gpf6",
      "cwe_id": "{'CWE-297'}",
      "score": 4.8,
      "chain": "{'https://github.com/opencast/opencast/commit/4225bf90af74557deaf8fb6b80b0705c9621acfc'}",
      "dataset": "osv",
      "summary": "Disabled Hostname Verification in Opencast Opencast before version 8.9 and 7.9 disables HTTPS hostname verification of its HTTP client used for a large portion of Opencast's HTTP requests.\n\nHostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks.\n\n### Patches\n\nThis problem is fixed in Opencast 7.9 and Opencast 8.9\n\n### Self-Signed Certificates\n\nPlease be aware that fixing the problem means that Opencast will not simply accept any self-signed certificates any longer without properly importing them. If you need those, please make sure to import them into the Java key store. Better yet, get a valid certificate e.g. from [Let's Encrypt](https://letsencrypt.org).",
      "published_date": "2020-12-08",
      "chain_len": 1,
      "project": "https://github.com/opencast/opencast",
      "commit_href": "https://github.com/opencast/opencast/commit/4225bf90af74557deaf8fb6b80b0705c9621acfc",
      "commit_sha": "4225bf90af74557deaf8fb6b80b0705c9621acfc",
      "patch": "SINGLE",
      "chain_ord": "['4225bf90af74557deaf8fb6b80b0705c9621acfc']",
      "before_first_fix_commit": "{'4b905437e90bd19700a6a6688f227f9efb20e153'}",
      "last_fix_commit": "4225bf90af74557deaf8fb6b80b0705c9621acfc",
      "chain_ord_pos": 1.0,
      "commit_datetime": "11/17/2020, 17:03:36",
      "message": "Re-Enable Hostname Verification\n\nThis patch is a minimal change to re-enable HTTPS hostname verification\nof Opencast's HTTP client used for a large portion its HTTP requests.\n\nHostname verification is an important part when using HTTPS to ensure\nthat the presented certificate is valid for the host. Disabling it can\nallow for man-in-the-middle attacks.",
      "author": "Lars Kiesow",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 136, 'total': 137}",
      "files": "{'modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java': {'additions': 1, 'deletions': 136, 'changes': 137, 'status': 'modified', 'raw_url': 'https://github.com/opencast/opencast/raw/4225bf90af74557deaf8fb6b80b0705c9621acfc/modules%2Fkernel%2Fsrc%2Fmain%2Fjava%2Forg%2Fopencastproject%2Fkernel%2Fhttp%2Fimpl%2FHttpClientImpl.java', 'patch': '@@ -27,28 +27,12 @@\\n import org.apache.http.client.CredentialsProvider;\\n import org.apache.http.client.methods.HttpUriRequest;\\n import org.apache.http.conn.ClientConnectionManager;\\n-import org.apache.http.conn.scheme.Scheme;\\n-import org.apache.http.conn.scheme.SchemeRegistry;\\n-import org.apache.http.conn.ssl.SSLSocketFactory;\\n-import org.apache.http.conn.ssl.X509HostnameVerifier;\\n import org.apache.http.impl.client.DefaultHttpClient;\\n import org.apache.http.params.HttpParams;\\n import org.slf4j.Logger;\\n import org.slf4j.LoggerFactory;\\n \\n import java.io.IOException;\\n-import java.security.KeyManagementException;\\n-import java.security.NoSuchAlgorithmException;\\n-import java.security.SecureRandom;\\n-import java.security.cert.CertificateException;\\n-import java.security.cert.X509Certificate;\\n-\\n-import javax.net.ssl.SSLContext;\\n-import javax.net.ssl.SSLException;\\n-import javax.net.ssl.SSLSession;\\n-import javax.net.ssl.SSLSocket;\\n-import javax.net.ssl.TrustManager;\\n-import javax.net.ssl.X509TrustManager;\\n \\n /** Implementation of HttpClient that makes http requests. */\\n public class HttpClientImpl implements HttpClient {\\n@@ -57,7 +41,7 @@ public class HttpClientImpl implements HttpClient {\\n   private static final Logger logger = LoggerFactory.getLogger(HttpClientImpl.class);\\n \\n   /** client used for all http requests. */\\n-  private DefaultHttpClient defaultHttpClient = makeHttpClient();\\n+  private DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\\n \\n   /** See org.opencastproject.kernel.http.api.HttpClient */\\n   @Override\\n@@ -83,123 +67,4 @@ public ClientConnectionManager getConnectionManager() {\\n     return defaultHttpClient.getConnectionManager();\\n   }\\n \\n-  /**\\n-   * Creates a new client that can deal with all kinds of oddities with regards to http/https connections.\\n-   *\\n-   * @return the client\\n-   */\\n-  private DefaultHttpClient makeHttpClient() {\\n-\\n-    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\\n-    try {\\n-      logger.debug(\"Installing forgiving hostname verifier and trust managers\");\\n-      X509TrustManager trustManager = createTrustManager();\\n-      X509HostnameVerifier hostNameVerifier = createHostNameVerifier();\\n-      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\\n-      sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());\\n-      SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);\\n-      ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();\\n-      SchemeRegistry sr = ccm.getSchemeRegistry();\\n-      sr.register(new Scheme(\"https\", 443, ssf));\\n-    } catch (NoSuchAlgorithmException e) {\\n-      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\\n-    } catch (KeyManagementException e) {\\n-      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\\n-    }\\n-\\n-    return defaultHttpClient;\\n-  }\\n-\\n-  /**\\n-   * Returns a new trust manager which will be in charge of checking the SSL certificates that are being presented by\\n-   * SSL enabled hosts.\\n-   *\\n-   * @return the trust manager\\n-   */\\n-  private X509TrustManager createTrustManager() {\\n-    X509TrustManager trustManager = new X509TrustManager() {\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)\\n-       */\\n-      public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {\\n-        logger.trace(\"Skipping trust check on client certificate {}\", string);\\n-      }\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)\\n-       */\\n-      public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {\\n-        logger.trace(\"Skipping trust check on server certificate {}\", string);\\n-      }\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()\\n-       */\\n-      public X509Certificate[] getAcceptedIssuers() {\\n-        logger.trace(\"Returning empty list of accepted issuers\");\\n-        return null;\\n-      }\\n-\\n-    };\\n-\\n-    return trustManager;\\n-  }\\n-\\n-  /**\\n-   * Creates a host name verifier that will make sure the SSL host\\'s name matches the name in the SSL certificate.\\n-   *\\n-   * @return the host name verifier\\n-   */\\n-  private X509HostnameVerifier createHostNameVerifier() {\\n-    X509HostnameVerifier verifier = new X509HostnameVerifier() {\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSocket)\\n-       */\\n-      public void verify(String host, SSLSocket ssl) throws IOException {\\n-        logger.trace(\"Skipping SSL host name check on {}\", host);\\n-      }\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.security.cert.X509Certificate)\\n-       */\\n-      public void verify(String host, X509Certificate xc) throws SSLException {\\n-        logger.trace(\"Skipping X509 certificate host name check on {}\", host);\\n-      }\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.lang.String[],\\n-       *      java.lang.String[])\\n-       */\\n-      public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\\n-        logger.trace(\"Skipping DNS host name check on {}\", host);\\n-      }\\n-\\n-      /**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSession)\\n-       */\\n-      public boolean verify(String host, SSLSession ssl) {\\n-        logger.trace(\"Skipping SSL session host name check on {}\", host);\\n-        return true;\\n-      }\\n-    };\\n-\\n-    return verifier;\\n-  }\\n-\\n }'}}",
      "message_norm": "re-enable hostname verification\n\nthis patch is a minimal change to re-enable https hostname verification\nof opencast's http client used for a large portion its http requests.\n\nhostname verification is an important part when using https to ensure\nthat the presented certificate is valid for the host. disabling it can\nallow for man-in-the-middle attacks.",
      "language": "en",
      "entities": "[('hostname', 'SECWORD', ''), ('hostname', 'SECWORD', ''), ('hostname', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('certificate', 'SECWORD', ''), ('man-in-the-middle', 'SECWORD', ''), ('attacks', 'FLAW', '')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java'])",
      "num_files": 1.0
    },
    {
      "index": 1409,
      "vuln_id": "GHSA-9p47-w5xp-f4xr",
      "cwe_id": "{'CWE-311'}",
      "score": 0.0,
      "chain": "{'https://github.com/felixrieseberg/windows-build-tools/commit/9835d33e68f2cb5e4d148e954bb3ed0221d98e90'}",
      "dataset": "osv",
      "summary": "Downloads Resources over HTTP in windows-build-tools Affected versions of `windows-build-tools` insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `windows-build-tools`.\n\n\n## Recommendation\n\nUpdate to version 1.0.0 or later.",
      "published_date": "2018-11-09",
      "chain_len": 1,
      "project": "https://github.com/felixrieseberg/windows-build-tools",
      "commit_href": "https://github.com/felixrieseberg/windows-build-tools/commit/9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
      "commit_sha": "9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
      "patch": "SINGLE",
      "chain_ord": "['9835d33e68f2cb5e4d148e954bb3ed0221d98e90']",
      "before_first_fix_commit": "{'3a97ea156d07aaccca101ed8f0a1606eea8dfc2d'}",
      "last_fix_commit": "9835d33e68f2cb5e4d148e954bb3ed0221d98e90",
      "chain_ord_pos": 1.0,
      "commit_datetime": "12/22/2016, 17:19:25",
      "message": ":wrench: Use HTTPS - Thanks to @grander",
      "author": "Felix Rieseberg",
      "comments": null,
      "stats": "{'additions': 1, 'deletions': 1, 'total': 2}",
      "files": "{'src/constants.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https://github.com/felixrieseberg/windows-build-tools/raw/9835d33e68f2cb5e4d148e954bb3ed0221d98e90/src%2Fconstants.js', 'patch': \"@@ -2,7 +2,7 @@ var pythonMirror = process.env.npm_config_python_mirror || process.env.PYTHON_MI\\n \\n var buildTools = {\\n   installerName: 'BuildTools_Full.exe',\\n-  installerUrl: 'http://download.microsoft.com/download/5/f/7/5f7acaeb-8363-451f-9425-68a90f98b238/visualcppbuildtools_full.exe',\\n+  installerUrl: 'https://download.microsoft.com/download/5/f/7/5f7acaeb-8363-451f-9425-68a90f98b238/visualcppbuildtools_full.exe',\\n   logName: 'build-tools-log.txt'\\n }\"}}",
      "message_norm": ":wrench: use https - thanks to @grander",
      "language": "en",
      "entities": null,
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['src/constants.js'])",
      "num_files": 1.0
    },
    {
      "index": 1356,
      "vuln_id": "GHSA-9c8h-2mv3-49ww",
      "cwe_id": "{'CWE-369'}",
      "score": 5.5,
      "chain": "{'https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4'}",
      "dataset": "osv",
      "summary": "Division by 0 in most convolution operators ### Impact\nMost implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  padding = \"SAME\")\n```\n\nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations.\n\n### Patches\nWe have patched the issue in GitHub commit [8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4](https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
      "published_date": "2021-08-25",
      "chain_len": 1,
      "project": "https://github.com/tensorflow/tensorflow",
      "commit_href": "https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
      "commit_sha": "8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
      "patch": "SINGLE",
      "chain_ord": "['8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4']",
      "before_first_fix_commit": "{'1071f554dbd09f7e101324d366eec5f4fe5a3ece'}",
      "last_fix_commit": "8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4",
      "chain_ord_pos": 1.0,
      "commit_datetime": "07/30/2021, 01:23:45",
      "message": "Prevent division by 0 in common shape functions.\n\nPiperOrigin-RevId: 387712197\nChange-Id: Id25c7460e35b68aeeeac23b9a88e455b443ee149",
      "author": "Mihai Maruseac",
      "comments": null,
      "stats": "{'additions': 11, 'deletions': 0, 'total': 11}",
      "files": "{'tensorflow/core/framework/common_shape_fns.cc': {'additions': 11, 'deletions': 0, 'changes': 11, 'status': 'modified', 'raw_url': 'https://github.com/tensorflow/tensorflow/raw/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4/tensorflow%2Fcore%2Fframework%2Fcommon_shape_fns.cc', 'patch': '@@ -672,6 +672,8 @@ Status Conv2DShapeImpl(shape_inference::InferenceContext* c,\\n   if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {\\n     int64_t input_depth_value = c->Value(input_depth_dim),\\n             filter_input_depth_value = c->Value(filter_input_depth_dim);\\n+    if (filter_input_depth_value == 0)\\n+      return errors::InvalidArgument(\"Depth of filter must not be 0\");\\n     if (input_depth_value % filter_input_depth_value != 0)\\n       return errors::InvalidArgument(\\n           \"Depth of input (\", input_depth_value,\\n@@ -681,6 +683,8 @@ Status Conv2DShapeImpl(shape_inference::InferenceContext* c,\\n       int64_t num_groups = input_depth_value / filter_input_depth_value;\\n       if (c->ValueKnown(output_depth_dim)) {\\n         int64_t output_depth_value = c->Value(output_depth_dim);\\n+        if (num_groups == 0)\\n+          return errors::InvalidArgument(\"Number of groups must not be 0\");\\n         if (output_depth_value % num_groups != 0)\\n           return errors::InvalidArgument(\\n               \"Depth of output (\", output_depth_value,\\n@@ -816,6 +820,8 @@ Status Conv3DShape(shape_inference::InferenceContext* c) {\\n   if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {\\n     int64_t input_depth_value = c->Value(input_depth_dim),\\n             filter_input_depth_value = c->Value(filter_input_depth_dim);\\n+    if (filter_input_depth_value == 0)\\n+      return errors::InvalidArgument(\"Depth of filter must not be 0\");\\n     if (input_depth_value % filter_input_depth_value != 0)\\n       return errors::InvalidArgument(\\n           \"Depth of input (\", input_depth_value,\\n@@ -825,6 +831,8 @@ Status Conv3DShape(shape_inference::InferenceContext* c) {\\n       int64_t num_groups = input_depth_value / filter_input_depth_value;\\n       if (c->ValueKnown(output_depth_dim)) {\\n         int64_t output_depth_value = c->Value(output_depth_dim);\\n+        if (num_groups == 0)\\n+          return errors::InvalidArgument(\"Number of groups must not be 0\");\\n         if (output_depth_value % num_groups != 0)\\n           return errors::InvalidArgument(\\n               \"Depth of output (\", output_depth_value,\\n@@ -2456,6 +2464,9 @@ Status SparseReduceShapeFn(InferenceContext* c) {\\n \\n     int64_t ndims = shape_vec.size();\\n     absl::flat_hash_set<int64> axes;\\n+    if (ndims == 0)\\n+      return errors::InvalidArgument(\\n+          \"Number of dims in shape tensor must not be 0\");\\n     for (int i = 0; i < axes_vec.size(); i++) {\\n       axes.insert((axes_vec(i) + ndims) % ndims);\\n     }'}}",
      "message_norm": "prevent division by 0 in common shape functions.\n\npiperorigin-revid: 387712197\nchange-id: id25c7460e35b68aeeeac23b9a88e455b443ee149",
      "language": "en",
      "entities": "[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('387712197', 'SHA', 'generic_sha')]",
      "classification_level_1": null,
      "classification_level_2": null,
      "list_files": "dict_keys(['tensorflow/core/framework/common_shape_fns.cc'])",
      "num_files": 1.0
    }
  ]
}