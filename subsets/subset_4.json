{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":2080,
            "vuln_id":"GHSA-hj5v-574p-mj7c",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/pytest-dev\/py\/pull\/257\/commits\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144'}",
            "dataset":"osv",
            "summary":"Regular expression deinal of service in py A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.",
            "published_date":"2021-04-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/pytest-dev\/py",
            "commit_href":"https:\/\/github.com\/pytest-dev\/py\/pull\/257\/commits\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "commit_sha":"4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "patch":"SINGLE",
            "chain_ord":"['4a9017dc6199d2a564b6e4b0aa39d6d8870e4144']",
            "before_first_fix_commit":"{'2da2caea38812eaa3ce09dd5292e3635ce9b16c8'}",
            "last_fix_commit":"4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/04\/2020, 10:57:26",
            "message":"svnwc: fix regular expression vulnerable to DoS in blame functionality\n\nThe subpattern `\\d+\\s*\\S+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nSVN blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nFixes #256.",
            "author":"Ran Benita",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'py\/_path\/svnwc.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pytest-dev\/py\/raw\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144\/py%2F_path%2Fsvnwc.py', 'patch': '@@ -396,7 +396,7 @@ def makecmdoptions(self):\\n     def __str__(self):\\n         return \"<SvnAuth username=%s ...>\" %(self.username,)\\n \\n-rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s*(\\\\S+) (.*)\\')\\n+rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s+(\\\\S+) (.*)\\')\\n \\n class SvnWCCommandPath(common.PathBase):\\n     \"\"\" path implementation offering access\/modification to svn working copies.'}}",
            "message_norm":"svnwc: fix regular expression vulnerable to dos in blame functionality\n\nthe subpattern `\\d+\\s*\\s+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nsvn blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nfixes #256.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerable', 'SECWORD', ''), ('dos', 'SECWORD', ''), ('user name', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('changing', 'ACTION', ''), ('fixes', 'ACTION', ''), ('#256', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['py\/_path\/svnwc.py'])",
            "num_files":1.0
        },
        {
            "index":744,
            "vuln_id":"GHSA-6465-r752-2h8v",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/neorazorx\/facturascripts\/commit\/8e31d8434014a6d1e8791a489d84268fd74b0c9a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in facturascripts Reflected cross-site scripting using url based payload in GitHub repository neorazorx\/facturascripts prior to 2022.08. This can lead to theft of a user's cookies, which in turn could lead to account takeover or do other malicious activities in a victim's browser.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/neorazorx\/facturascripts",
            "commit_href":"https:\/\/github.com\/neorazorx\/facturascripts\/commit\/8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "commit_sha":"8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "patch":"SINGLE",
            "chain_ord":"['8e31d8434014a6d1e8791a489d84268fd74b0c9a']",
            "before_first_fix_commit":"{'ec88bc72ff2f6eb79a27112c777a7d601e946ed5'}",
            "last_fix_commit":"8e31d8434014a6d1e8791a489d84268fd74b0c9a",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 22:12:41",
            "message":"We check the url parameter of the link to ensure that it is a valid controller.\n------\nComprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
            "author":"Carlos Garcia Gomez",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'Core\/Controller\/EditPageOption.php': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NeoRazorX\/facturascripts\/raw\/8e31d8434014a6d1e8791a489d84268fd74b0c9a\/Core%2FController%2FEditPageOption.php', 'patch': \"@@ -24,6 +24,7 @@\\n use FacturaScripts\\\\Core\\\\Base\\\\DataBase\\\\DataBaseWhere;\\n use FacturaScripts\\\\Core\\\\Lib\\\\Widget\\\\VisualItemLoadEngine;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\CodeModel;\\n+use FacturaScripts\\\\Dinamic\\\\Model\\\\Page;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\PageOption;\\n use FacturaScripts\\\\Dinamic\\\\Model\\\\User;\\n use Symfony\\\\Component\\\\HttpFoundation\\\\Response;\\n@@ -121,7 +122,7 @@ public function privateCore(&$response, $user, $permissions)\\n         parent::privateCore($response, $user, $permissions);\\n         $this->model = new PageOption();\\n         $this->loadSelectedViewName();\\n-        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;\\n+        $this->setBackPage();\\n         $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;\\n         $this->loadPageOptions();\\n \\n@@ -275,6 +276,22 @@ private function loadPageOptionsForUser(): bool\\n         return true;\\n     }\\n \\n+    private function setBackPage()\\n+    {\\n+        \/\/ check if the url is a real controller name\\n+        $url = $this->request->get('url', '');\\n+        $pageModel = new Page();\\n+        foreach ($pageModel->all([], [], 0, 0) as $page) {\\n+            if (substr($url, 0, strlen($page->name)) === $page->name) {\\n+                $this->backPage = $url;\\n+                return;\\n+            }\\n+        }\\n+\\n+        \/\/ set the default back page\\n+        $this->backPage = $this->selectedViewName;\\n+    }\\n+\\n     \/**\\n      * @param array $column\\n      * @param string $name\"}}",
            "message_norm":"we check the url parameter of the link to ensure that it is a valid controller.\n------\ncomprobamos el par\u00e1metro url del enlace para asegurar que sea un controlador v\u00e1lido.",
            "language":"es",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Core\/Controller\/EditPageOption.php'])",
            "num_files":1.0
        },
        {
            "index":268,
            "vuln_id":"GHSA-3j9m-hcv9-rpj8",
            "cwe_id":"{'CWE-79'}",
            "score":6.9,
            "chain":"{'https:\/\/github.com\/grafana\/grafana\/commit\/3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'https:\/\/github.com\/grafana\/grafana\/commit\/fb85ed691290d211a5baa44d9a641ab137f0de88', 'https:\/\/github.com\/grafana\/grafana\/commit\/31b78d51c693d828720a5b285107a50e6024c912'}",
            "dataset":"osv",
            "summary":"XSS vulnerability allowing arbitrary JavaScript execution Today we are releasing Grafana 8.2.3. This patch release includes an important security fix for an issue that affects all Grafana versions from 8.0.0-beta1.\n\n[Grafana Cloud](https:\/\/grafana.com\/cloud) instances have already been patched and an audit did not find any usage of this attack vector. [Grafana Enterprise](https:\/\/grafana.com\/products\/enterprise) customers were provided with updated binaries under embargo.\n\n## CVE-2021-41174 XSS vulnerability on unauthenticated pages\n\n### Summary\n\nCVSS Score: 6.9 Medium\nCVSS:[CVSS:3.0\/AV:N\/AC:H\/PR:N\/UI:R\/S:C\/C:L\/I:H\/A:N\/E:U\/RL:O\/RC:R\/CR:L\/MAV:N\/MAC:H\/MPR:N\/MUI:R\/MS:C\/MC:N\/MI:H\/MA:L](https:\/\/www.first.org\/cvss\/calculator\/3.0#CVSS:3.0\/AV:N\/AC:H\/PR:N\/UI:R\/S:C\/C:L\/I:H\/A:N\/E:U\/RL:O\/RC:R\/CR:L\/MAV:N\/MAC:H\/MPR:N\/MUI:R\/MS:C\/MC:N\/MI:H\/MA:L)\n\nWe received a security report to security@grafana.com on 2021-10-21 about a vulnerability in Grafana regarding the XSS vulnerability.\n\nIt was later identified as affecting Grafana versions from 8.0.0-beta1 to 8.2.2. [CVE-2021-41174](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2021-41174) has been assigned to this vulnerability.\n\n### Impact\n\nIf an attacker is able to convince a victim to visit a URL referencing a vulnerable page, arbitrary JavaScript content may be executed within the context of the victim's browser.\n\nThe user visiting the malicious link must be unauthenticated and the link must be for a page that contains the login button in the menu bar.\n\nThere are two ways an unauthenticated user can open a page in Grafana that contains the login button:\n- Anonymous authentication is enabled. This means all pages in Grafana would be open for the attack.\n- The link is to an unauthenticated page. The following pages are vulnerable:\n  - `\/dashboard-solo\/snapshot\/*`\n  - `\/dashboard\/snapshot\/*`\n  - `\/invite\/:code`\n\nThe url has to be crafted to exploit AngularJS rendering and contain the interpolation binding for AngularJS expressions. AngularJS uses double curly braces for interpolation binding: {{ }} \n\nAn example of an expression would be: `{{constructor.constructor(\u2018alert(1)\u2019)()}}`. This can be included in the link URL like this: \n\nhttps:\/\/play.grafana.org\/dashboard\/snapshot\/%7B%7Bconstructor.constructor('alert(1)')()%7D%7D?orgId=1\n\nWhen the user follows the link and the page renders, the login button will contain the original link with a query parameter to force a redirect to the login page. The URL is not validated and the AngularJS rendering engine will execute the JavaScript expression contained in the URL.\n\n### Attack audit\n\nWe can not guarantee that the below will identify all attacks, so if you find something using the audit process described below, you should consider doing a full assessment.\n\n#### Through reverse proxy\/load balancer logs\n\nTo determine if your Grafana installation has been exploited for this vulnerability, search through your reverse proxy\/load balancer access logs for instances where the path contains `{{` followed by something that would invoke JavaScript code. For example, this could be code that attempts to show a fake login page or to steal browser or session data. The [OWASP cheat sheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/XSS_Filter_Evasion_Cheat_Sheet.html) has several examples of XSS attacks.\n\n#### Through the Grafana Enterprise audit feature\n\nIf you enabled \u201cLog web requests\u201d in your configuration with `router_logging = true`, look for requests where `path` contains `{{` followed by something that would invoke JavaScript code.\n\n### Patched versions\n\nRelease 8.2.3:\n\n- [Download Grafana 8.2.3](https:\/\/grafana.com\/grafana\/download\/8.2.3)\n- [Release notes](https:\/\/grafana.com\/docs\/grafana\/latest\/release-notes\/release-notes-8-2-3\/)\n\n### Solutions and mitigations\n\nDownload and install the appropriate patch for your version of Grafana.\n\n[Grafana Cloud](https:\/\/grafana.com\/cloud) instances have already been patched, and [Grafana Enterprise](https:\/\/grafana.com\/products\/enterprise) customers were provided with updated binaries under embargo.\n\n### Workaround\n\nIf for some reason you cannot upgrade, you can use a reverse proxy or similar to block access to block the literal string `{{` in the path.\n\nExample of an Nginx rule to block the literal string `{{`:\n\n```\nlocation ~ \\{\\{ {\n    deny all;\n}\n```\n### Timeline and postmortem\n\nHere is a detailed timeline starting from when we originally learned of the issue. All times in UTC. \n\n* 2021-10-21 23:13: Security researcher sends the initial report about an XSS vulnerability.\n* 2021-10-21 23:13: Confirmed to be reproducible in at least versions 8.0.5 and 8.2.2.\n* 2021-10-22 02:02 MEDIUM severity declared.\n* 2021-10-22 09:22: it is discovered that Grafana instances with anonymous auth turned on are vulnerable. This includes https:\/\/play.grafana.org\/ .\n* 2021-10-22 09:50: Anonymous access disabled for all instances on Grafana Cloud as a mitigation measure.\n* 2021-10-22 11:15: Workaround deployed on Grafana Cloud that blocks malicious requests.\n* 2021-10-22 12:35: Enabled anonymous access for instances on Grafana Cloud. \n* 2021-10-22 12:51: All instances protected by the workaround. From this point forward, Grafana Cloud is no longer affected.\n* 2021-10-22 14:05 Grafana Cloud instances updated with a fix.\n* 2021-10-22 19:23 :Determination that no weekend work is needed as the issue is of MEDIUM severity and the root cause has been identified.\n* 2021-10-25 14:13: Audit of Grafana Cloud concluded, no evidence of exploitation.\n* 2021-10-27 12:00: Grafana Enterprise images released to customers under embargo.\n* 2021-11-03 12:00: Public release.\n\n## Reporting security issues\n\nIf you think you have found a security vulnerability, please send a report to [security@grafana.com](mailto:security@grafana.com). This address can be used for all of\nGrafana Labs' open source and commercial products (including but not limited to Grafana, Tempo, Loki, k6, Tanka, and  Grafana Cloud, Grafana Enterprise, and grafana.com). We only accept vulnerability reports at this address. We would prefer that you encrypt your message to us using our PGP key. The key fingerprint is:\n\nF988 7BEA 027A 049F AE8E  5CAA D125 8932 BE24 C5CA\n\nThe key is available from [ keyserver.ubuntu.com]( https:\/\/keyserver.ubuntu.com\/pks\/lookup?op=get&fingerprint=on&search=0xD1258932BE24C5CA) by searching for [security@grafana]( https:\/\/keyserver.ubuntu.com\/pks\/lookup?search=security@grafana&fingerprint=on&op=index).\n\n## Security announcements\n\nThere is a Security [category](https:\/\/grafana.com\/tags\/security\/) on the Grafana blog where we will post a summary, remediation, and mitigation details for any patch containing security fixes and you can subscribe to updates from our [Security Announcements RSS feed](https:\/\/grafana.com\/tags\/security\/index.xml).",
            "published_date":"2021-11-08",
            "chain_len":3,
            "project":"https:\/\/github.com\/grafana\/grafana",
            "commit_href":"https:\/\/github.com\/grafana\/grafana\/commit\/3cb5214fa45eb5a571fd70d6c6edf0d729983f82",
            "commit_sha":"3cb5214fa45eb5a571fd70d6c6edf0d729983f82",
            "patch":"MULTI",
            "chain_ord":"['31b78d51c693d828720a5b285107a50e6024c912', '3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'fb85ed691290d211a5baa44d9a641ab137f0de88']",
            "before_first_fix_commit":"{'3cb5214fa45eb5a571fd70d6c6edf0d729983f82', 'a3dc30546fce2e437d858c140f1ff307a04365d6'}",
            "last_fix_commit":"fb85ed691290d211a5baa44d9a641ab137f0de88",
            "chain_ord_pos":2.0,
            "commit_datetime":"10\/25\/2021, 07:16:51",
            "message":"Merge pull request #151 from grafana\/dcech\/sanitize-replaceAll\n\nuse global replace when sanitizing urls in 8.2.3",
            "author":"Dimitris Sotirakis",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'packages\/grafana-data\/src\/text\/sanitize.ts': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/grafana\/grafana\/raw\/3cb5214fa45eb5a571fd70d6c6edf0d729983f82\/packages%2Fgrafana-data%2Fsrc%2Ftext%2Fsanitize.ts', 'patch': \"@@ -40,5 +40,5 @@ export function escapeHtml(str: string): string {\\n }\\n \\n export function sanitizeAngularInterpolation(url: string): string {\\n-  return url.replace('{{', '%7B%7B').replace('}}', '%7D%7D');\\n+  return url.replace(\/\\\\{\\\\{\/g, '%7B%7B').replace(\/\\\\}\\\\}\/g, '%7D%7D');\\n }\"}}",
            "message_norm":"merge pull request #151 from grafana\/dcech\/sanitize-replaceall\n\nuse global replace when sanitizing urls in 8.2.3",
            "language":"en",
            "entities":"[('#151', 'ISSUE', ''), ('sanitize', 'SECWORD', ''), ('sanitizing', 'SECWORD', ''), ('8.2.3', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/grafana-data\/src\/text\/sanitize.ts'])",
            "num_files":1.0
        },
        {
            "index":3133,
            "vuln_id":"GHSA-vjj6-5m9f-wqjw",
            "cwe_id":"{'CWE-476'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/hyperledger\/fabric\/pull\/2838\/commits\/ebf94b10ecc86d3a91619b98befc52277b1e3474'}",
            "dataset":"osv",
            "summary":"NULL Pointer Dereference in HyperLedger Fabric A vulnerability has been detected in HyperLedger Fabric v1.4.0, v2.0.0, v2.1.0. This bug can be leveraged by constructing a message whose payload is nil and sending this message with the method 'forwardToLeader'. This bug has been admitted and fixed by the developers of Fabric. If leveraged, any leader node will crash.",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/hyperledger\/fabric",
            "commit_href":"https:\/\/github.com\/hyperledger\/fabric\/pull\/2838\/commits\/ebf94b10ecc86d3a91619b98befc52277b1e3474",
            "commit_sha":"ebf94b10ecc86d3a91619b98befc52277b1e3474",
            "patch":"SINGLE",
            "chain_ord":"['ebf94b10ecc86d3a91619b98befc52277b1e3474']",
            "before_first_fix_commit":"{'bb8bada7b864d4135aafe1785674be31d6cc78cb'}",
            "last_fix_commit":"ebf94b10ecc86d3a91619b98befc52277b1e3474",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/18\/2021, 14:18:10",
            "message":"FAB18529 added nil check in channel header parsing\n\nFuzz testing has reported SEGV while sending incomplete\/null\nmessage request to orderer.\n\nSigned-off-by: Parameswaran Selvam <parselva@in.ibm.com>",
            "author":"Parameswaran Selvam",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'protoutil\/commonutils.go': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hyperledger\/fabric\/raw\/ebf94b10ecc86d3a91619b98befc52277b1e3474\/protoutil%2Fcommonutils.go', 'patch': '@@ -212,6 +212,10 @@ func IsConfigBlock(block *cb.Block) bool {\\n \\n \/\/ ChannelHeader returns the *cb.ChannelHeader for a given *cb.Envelope.\\n func ChannelHeader(env *cb.Envelope) (*cb.ChannelHeader, error) {\\n+\\tif env == nil {\\n+\\t\\treturn nil, errors.New(\"Invalid envelope payload. can\\'t be nil\")\\n+\\t}\\n+\\n \\tenvPayload, err := UnmarshalPayload(env.Payload)\\n \\tif err != nil {\\n \\t\\treturn nil, err'}}",
            "message_norm":"fab18529 added nil check in channel header parsing\n\nfuzz testing has reported segv while sending incomplete\/null\nmessage request to orderer.\n\nsigned-off-by: parameswaran selvam <parselva@in.ibm.com>",
            "language":"en",
            "entities":"[('fab18529', 'SHA', 'generic_sha'), ('added', 'ACTION', ''), ('fuzz', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['protoutil\/commonutils.go'])",
            "num_files":1.0
        },
        {
            "index":1437,
            "vuln_id":"GHSA-9vwf-54m9-gc4f",
            "cwe_id":"{'CWE-862', 'CWE-284'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/1699c09758e56f740437674a8d6ba36443399f24'}",
            "dataset":"osv",
            "summary":"snipe-it is vulnerable to Improper Access Control snipe-it prior to version 5.3.4 is vulnerable to Improper Access Control. Regular users with `DENY` set to all models permissions can still view model information via the \/models\/{id}\/clone endpoint due to no authorize('view') permission being set.",
            "published_date":"2021-12-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/1699c09758e56f740437674a8d6ba36443399f24",
            "commit_sha":"1699c09758e56f740437674a8d6ba36443399f24",
            "patch":"SINGLE",
            "chain_ord":"['1699c09758e56f740437674a8d6ba36443399f24']",
            "before_first_fix_commit":"{'918e7c8dae4d41935f534901a582ea8488bbf603'}",
            "last_fix_commit":"1699c09758e56f740437674a8d6ba36443399f24",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/09\/2021, 13:42:18",
            "message":"Update AssetModelsController.php",
            "author":"Haxatron",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Controllers\/AssetModelsController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/1699c09758e56f740437674a8d6ba36443399f24\/app%2FHttp%2FControllers%2FAssetModelsController.php', 'patch': \"@@ -269,7 +269,7 @@ public function show($modelId = null)\\n     *\/\\n     public function getClone($modelId = null)\\n     {\\n-        $this->authorize('view', AssetModel::class);\\n+        $this->authorize('create', AssetModel::class);\\n         \/\/ Check if the model exists\\n         if (is_null($model_to_clone = AssetModel::find($modelId))) {\\n             return redirect()->route('models.index')->with('error', trans('admin\/models\/message.does_not_exist'));\"}}",
            "message_norm":"update assetmodelscontroller.php",
            "language":"it",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/AssetModelsController.php'])",
            "num_files":1.0
        },
        {
            "index":1737,
            "vuln_id":"GHSA-fj59-f6c3-3vw4",
            "cwe_id":"{'CWE-78'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/sebhildebrandt\/systeminformation\/commit\/bad372e654cdd549e7d786acbba0035ded54c607'}",
            "dataset":"osv",
            "summary":"Command Injection in systeminformation ### Impact\ncommand injection vulnerability\n\n### Patches\nProblem was fixed with a shell string sanitation fix. Please upgrade to version >= 4.26.2\n\n### Workarounds\nIf you cannot upgrade, be sure to check or sanitize service parameter strings that are passed to `is.services()`, `is.inetChecksite()`, `si.inetLatency()`, `si.networkStats()`, `is.services()` and `si.processLoad()`\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [systeminformation](https:\/\/github.com\/sebhildebrandt\/systeminformation)",
            "published_date":"2020-10-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/sebhildebrandt\/systeminformation",
            "commit_href":"https:\/\/github.com\/sebhildebrandt\/systeminformation\/commit\/bad372e654cdd549e7d786acbba0035ded54c607",
            "commit_sha":"bad372e654cdd549e7d786acbba0035ded54c607",
            "patch":"SINGLE",
            "chain_ord":"['bad372e654cdd549e7d786acbba0035ded54c607']",
            "before_first_fix_commit":"{'147550532ab11cac4b609844a519a1d945f5c103'}",
            "last_fix_commit":"bad372e654cdd549e7d786acbba0035ded54c607",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/19\/2020, 15:02:51",
            "message":"improved shell sanitation",
            "author":"Sebastian Hildebrandt",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'lib\/util.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sebhildebrandt\/systeminformation\/raw\/bad372e654cdd549e7d786acbba0035ded54c607\/lib%2Futil.js', 'patch': '@@ -503,6 +503,9 @@ function sanitizeShellString(str) {\\n   result = result.replace(\/\\\\$\/g, \"\");\\n   result = result.replace(\/#\/g, \"\");\\n   result = result.replace(\/\\\\\\\\\/g, \"\");\\n+  result = result.replace(\/\\\\t\/g, \"\");\\n+  result = result.replace(\/\\\\n\/g, \"\");\\n+  result = result.replace(\/\\\\\"\/g, \"\");\\n   return result\\n }'}}",
            "message_norm":"improved shell sanitation",
            "language":"en",
            "entities":"[('improved', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/util.js'])",
            "num_files":1.0
        },
        {
            "index":1244,
            "vuln_id":"GHSA-8r7q-r9mx-35rh",
            "cwe_id":"{'CWE-134'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0'}",
            "dataset":"osv",
            "summary":"Mishandling of format strings in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated because rusqlite::trace::log mishandles format strings.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rusqlite\/rusqlite",
            "commit_href":"https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0",
            "commit_sha":"2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0",
            "patch":"SINGLE",
            "chain_ord":"['2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0']",
            "before_first_fix_commit":"{'abbab7216a8b47108a0e1b7a26e429d6a990d7a6'}",
            "last_fix_commit":"2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/14\/2020, 19:08:26",
            "message":"Fix format string error in rusqlite::trace::log",
            "author":"Thom Chiovoloni",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/trace.rs': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rusqlite\/rusqlite\/raw\/2327d3b774927fdf48903c0bdc1ca7ec93c7c8d0\/src%2Ftrace.rs', 'patch': '@@ -61,7 +61,7 @@ pub unsafe fn config_log(callback: Option<fn(c_int, &str)>) -> Result<()> {\\n pub fn log(err_code: c_int, msg: &str) {\\n     let msg = CString::new(msg).expect(\"SQLite log messages cannot contain embedded zeroes\");\\n     unsafe {\\n-        ffi::sqlite3_log(err_code, msg.as_ptr());\\n+        ffi::sqlite3_log(err_code, b\"%s\\\\0\" as *const _ as *const c_char, msg.as_ptr());\\n     }\\n }'}}",
            "message_norm":"fix format string error in rusqlite::trace::log",
            "language":"en",
            "entities":"[('error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/trace.rs'])",
            "num_files":1.0
        },
        {
            "index":1018,
            "vuln_id":"GHSA-7f62-4887-cfv5",
            "cwe_id":"{'CWE-269'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526'}",
            "dataset":"osv",
            "summary":"Privilege escalation in easyappointments The Easy!Appointments API authorization is checked against the user's existence, without validating the permissions. As a result, a low privileged user (eg. provider) can create a new admin user via the \"\/api\/v1\/admins\/\" endpoint and take over the system. A [patch](https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526) is available on the `develop` branch of the repository.",
            "published_date":"2022-05-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/alextselegidis\/easyappointments",
            "commit_href":"https:\/\/github.com\/alextselegidis\/easyappointments\/commit\/63dbb51decfcc1631c398ecd6d30e3a337845526",
            "commit_sha":"63dbb51decfcc1631c398ecd6d30e3a337845526",
            "patch":"SINGLE",
            "chain_ord":"['63dbb51decfcc1631c398ecd6d30e3a337845526']",
            "before_first_fix_commit":"{'f0e976c9ac9be2a7e7626d2112c71042ba087dfa'}",
            "last_fix_commit":"63dbb51decfcc1631c398ecd6d30e3a337845526",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2022, 21:26:28",
            "message":"Check the role slug in Api.php",
            "author":"Alex Tselegidis",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'application\/libraries\/Api.php': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alextselegidis\/easyappointments\/raw\/63dbb51decfcc1631c398ecd6d30e3a337845526\/application%2Flibraries%2FApi.php', 'patch': \"@@ -77,7 +77,9 @@ public function auth()\\n \\n             $password = $_SERVER['PHP_AUTH_PW'];\\n \\n-            if ( ! $this->CI->accounts->check_login($username, $password))\\n+            $userdata = $this->CI->accounts->check_login($username, $password);\\n+\\n+            if (empty($userdata['role_slug']) || $userdata['role_slug'] !== DB_SLUG_ADMIN)\\n             {\\n                 throw new RuntimeException('The provided credentials do not match any admin user!', 401, 'Unauthorized');\\n             }\"}}",
            "message_norm":"check the role slug in api.php",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['application\/libraries\/Api.php'])",
            "num_files":1.0
        },
        {
            "index":2213,
            "vuln_id":"GHSA-j85q-whc9-g4p9",
            "cwe_id":"{'CWE-338'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/4b962c1740311e0d46775023b6acba39ad60e370'}",
            "dataset":"osv",
            "summary":"Use of Cryptographically Weak Pseudo-Random Number Generator in showdoc showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
            "published_date":"2021-09-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/4b962c1740311e0d46775023b6acba39ad60e370",
            "commit_sha":"4b962c1740311e0d46775023b6acba39ad60e370",
            "patch":"SINGLE",
            "chain_ord":"['4b962c1740311e0d46775023b6acba39ad60e370']",
            "before_first_fix_commit":"{'db53edb8323dd358dc955e71d8f1fad5dab4ab7b', '034328ab35fc2bf640bf7fef2be40a5d13123b11'}",
            "last_fix_commit":"4b962c1740311e0d46775023b6acba39ad60e370",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/03\/2021, 17:19:35",
            "message":"Merge pull request #1438 from michaellrowley\/security-patch\n\nCVE-2021-3678 Patch",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'server\/Application\/Api\/Controller\/AdminSettingController.class.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/4b962c1740311e0d46775023b6acba39ad60e370\/server%2FApplication%2FApi%2FController%2FAdminSettingController.class.php', 'patch': '@@ -166,7 +166,7 @@ public function getLoginSecretKey(){\\n         $this->checkAdmin();\\n         $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\\n         if(!$login_secret_key){\\n-            $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\\n+            $login_secret_key = bin2hex( random_bytes( 16 ) );\\n             D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\\n         }\\n         $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\\n@@ -176,7 +176,7 @@ public function getLoginSecretKey(){\\n     public function resetLoginSecretKey(){\\n         $login_user = $this->checkLogin();\\n         $this->checkAdmin();\\n-        $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\\n+        $login_secret_key = bin2hex( random_bytes( 16 ) );\\n         D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\\n         $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));'}}",
            "message_norm":"merge pull request #1438 from michaellrowley\/security-patch\n\ncve-2021-3678 patch",
            "language":"en",
            "entities":"[('#1438', 'ISSUE', ''), ('security', 'SECWORD', ''), ('cve-2021-3678', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Controller\/AdminSettingController.class.php'])",
            "num_files":1.0
        },
        {
            "index":2227,
            "vuln_id":"GHSA-jc83-cpf9-q7c6",
            "cwe_id":"{'CWE-697'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/simpleledger\/slpjs\/commit\/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754'}",
            "dataset":"osv",
            "summary":"False-negative validation results in MINT transactions with invalid baton ### Impact\nUsers could experience false-negative validation outcomes for [MINT](https:\/\/github.com\/simpleledger\/slp-specifications\/blob\/master\/slp-token-type-1.md#mint---extended-minting-transaction) transaction operations.  A poorly implemented SLP wallet could allow spending of the affected tokens which would result in the destruction of a user's minting baton.\n\n### Patches\nnpm package [slpjs](https:\/\/www.npmjs.com\/package\/slpjs) has been patched and published as version 0.27.2.\n\n\n### Workarounds\nUpgrade to slpjs 0.27.2.\n\n### References\n* slpjs [commit](https:\/\/github.com\/simpleledger\/slpjs\/commit\/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [slp-validate](https:\/\/github.com\/simpleledger\/slp-validate\/issues) or [slpjs](https:\/\/github.com\/simpleledger\/slpjs\/issues)",
            "published_date":"2020-05-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/simpleledger\/slpjs",
            "commit_href":"https:\/\/github.com\/simpleledger\/slpjs\/commit\/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
            "commit_sha":"3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
            "patch":"SINGLE",
            "chain_ord":"['3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754']",
            "before_first_fix_commit":"{'2653647c7b9ceb7a9c863f9f8b70a5d638634bf5'}",
            "last_fix_commit":"3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2020, 16:48:21",
            "message":"fix false negative case for MINT transactions\n\nSee the newly added unit test case for this issue.\nCurrently there are 151 unit tests.",
            "author":"James Cramer",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 6, 'total': 16}",
            "files":"{'lib\/localvalidator.ts': {'additions': 10, 'deletions': 6, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/simpleledger\/slpjs\/raw\/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754\/lib%2Flocalvalidator.ts', 'patch': '@@ -282,10 +282,10 @@ export class LocalValidator implements SlpValidator {\\n                     }\\n                 } catch (_) {}\\n             }\\n-            if (this.cachedValidations[txid].parents.length !== 1) {\\n+            if (this.cachedValidations[txid].parents.length < 1) {\\n                 this.cachedValidations[txid].validity = false;\\n                 this.cachedValidations[txid].waiting = false;\\n-                this.cachedValidations[txid].invalidReason = \"MINT transaction must have 1 valid baton parent.\";\\n+                this.cachedValidations[txid].invalidReason = \"MINT transaction must have at least 1 candidate baton parent input.\";\\n                 return this.cachedValidations[txid].validity!;\\n             }\\n         }\\n@@ -342,10 +342,14 @@ export class LocalValidator implements SlpValidator {\\n         \/\/ Set validity validation-cache for parents, and handle MINT condition with no valid input\\n         \/\/ we don\\'t need to check proper token id since we only added parents with same ID in above steps.\\n         const parentTxids = [...new Set(this.cachedValidations[txid].parents.map(p => p.txid))];\\n-        for (let i = 0; i < parentTxids.length; i++) {\\n-            const valid = await this.isValidSlpTxid(parentTxids[i]);\\n-            this.cachedValidations[txid].parents.filter(p => p.txid === parentTxids[i]).map(p => p.valid = valid);\\n-            if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT && !valid) {\\n+        for (const id of parentTxids) {\\n+            const valid = await this.isValidSlpTxid(id);\\n+            this.cachedValidations[txid].parents.filter(p => p.txid === id).map(p => p.valid = valid);\\n+        }\\n+\\n+        \/\/ Check MINT for exactly 1 valid MINT baton\\n+        if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT) {\\n+            if (this.cachedValidations[txid].parents.filter(p => p.valid && p.inputQty === null).length !== 1) {\\n                 this.cachedValidations[txid].validity = false;\\n                 this.cachedValidations[txid].waiting = false;\\n                 this.cachedValidations[txid].invalidReason = \"MINT transaction with invalid baton parent.\";'}}",
            "message_norm":"fix false negative case for mint transactions\n\nsee the newly added unit test case for this issue.\ncurrently there are 151 unit tests.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('added', 'ACTION', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/localvalidator.ts'])",
            "num_files":1.0
        },
        {
            "index":1450,
            "vuln_id":"GHSA-9xh4-23q4-v6wr",
            "cwe_id":"{'CWE-476', 'CWE-787', 'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow and undefined behavior in `FusedBatchNorm` ### Impact\nThe implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow:\n      \n```python\nimport tensorflow as tf\n\nx = tf.zeros([10, 10, 10, 6], dtype=tf.float32)\nscale = tf.constant([0.0], shape=[1], dtype=tf.float32)\noffset = tf.constant([0.0], shape=[1], dtype=tf.float32)\nmean = tf.constant([0.0], shape=[1], dtype=tf.float32)\nvariance = tf.constant([0.0], shape=[1], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n    \ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance,\n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n```\n  \nIf the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers:\n\n```python \nimport tensorflow as tf\nimport numpy as np\n\nx = tf.zeros([10, 10, 10, 1], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance, \n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n``` \n\nThe  [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7\/tensorflow\/core\/kernels\/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary.\n\nIf the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [6972f9dfe325636b3db4e0bc517ee22a159365c0](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "commit_sha":"6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "patch":"SINGLE",
            "chain_ord":"['6972f9dfe325636b3db4e0bc517ee22a159365c0']",
            "before_first_fix_commit":"{'57d86e0db5d1365f19adcce848dfc1bf89fdd4c7'}",
            "last_fix_commit":"6972f9dfe325636b3db4e0bc517ee22a159365c0",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/07\/2021, 00:45:51",
            "message":"Add missing valuidation to FusedBatchNorm.\n\nPiperOrigin-RevId: 372460336\nChange-Id: Ic8c4e4de67c58a741bd87f2e182bed07247d1126",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 27, 'deletions': 1, 'total': 28}",
            "files":"{'tensorflow\/core\/kernels\/fused_batch_norm_op.cc': {'additions': 27, 'deletions': 1, 'changes': 28, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6972f9dfe325636b3db4e0bc517ee22a159365c0\/tensorflow%2Fcore%2Fkernels%2Ffused_batch_norm_op.cc', 'patch': '@@ -1282,6 +1282,32 @@ class FusedBatchNormOpBase : public OpKernel {\\n                   errors::InvalidArgument(\"Error during tensor copy.\"));\\n     }\\n \\n+    const auto num_channels = GetTensorDim(x, tensor_format_, \\'C\\');\\n+    OP_REQUIRES(\\n+        context, scale.NumElements() == num_channels,\\n+        errors::InvalidArgument(\"scale must have the same number of elements \"\\n+                                \"as the channels of x, got \",\\n+                                scale.NumElements(), \" and \", num_channels));\\n+    OP_REQUIRES(\\n+        context, offset.NumElements() == num_channels,\\n+        errors::InvalidArgument(\"offset must have the same number of elements \"\\n+                                \"as the channels of x, got \",\\n+                                offset.NumElements(), \" and \", num_channels));\\n+    if (estimated_mean.NumElements() != 0) {\\n+      OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,\\n+                  errors::InvalidArgument(\\n+                      \"mean must be empty or have the same number of \"\\n+                      \"elements as the channels of x, got \",\\n+                      estimated_mean.NumElements(), \" and \", num_channels));\\n+    }\\n+    if (estimated_variance.NumElements() != 0) {\\n+      OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,\\n+                  errors::InvalidArgument(\\n+                      \"variance must be empty or have the same number of \"\\n+                      \"elements as the channels of x, got \",\\n+                      estimated_variance.NumElements(), \" and \", num_channels));\\n+    }\\n+\\n     if (has_side_input_) {\\n       OP_REQUIRES(context, side_input->shape() == x.shape(),\\n                   errors::InvalidArgument(\\n@@ -1294,7 +1320,7 @@ class FusedBatchNormOpBase : public OpKernel {\\n       \/\/ NOTE(ezhulenev): This requirement is coming from implementation\\n       \/\/ details of cudnnBatchNormalizationForwardTrainingEx.\\n       OP_REQUIRES(\\n-          context, !is_training_ || x.dim_size(3) % 4 == 0,\\n+          context, !is_training_ || num_channels % 4 == 0,\\n           errors::InvalidArgument(\"FusedBatchNorm with activation requires \"\\n                                   \"channel dimension to be a multiple of 4.\"));\\n     }'}}",
            "message_norm":"add missing valuidation to fusedbatchnorm.\n\npiperorigin-revid: 372460336\nchange-id: ic8c4e4de67c58a741bd87f2e182bed07247d1126",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('372460336', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/fused_batch_norm_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2171,
            "vuln_id":"GHSA-j259-6c58-9m58",
            "cwe_id":"{'CWE-20'}",
            "score":9.3,
            "chain":"{'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5'}",
            "dataset":"osv",
            "summary":"loopback-connector-postgresql Vulnerable to Improper Sanitization of `contains` Filter Improper input validation on the `contains` LoopBack filter may allow for arbitrary SQL injection.\n\n### Impact\n\nWhen the extended filter property `contains` is permitted to be interpreted by the Postgres connector, it is possible to inject arbitrary SQL which may affect the confidentiality and integrity of data stored on the connected database.\n\nThis affects users who does any of the following:\n\n- Connect to the database via the DataSource with `allowExtendedProperties: true` setting OR\n- Uses the connector's CRUD methods directly OR\n- Uses the connector's other methods to interpret the LoopBack filter.\n\n### Patches\n\nPatch release `loopback-connector-postgresql@5.5.1` has been published of which resolves this issue.\n\n### Workarounds\n\nUsers who are unable to upgrade should do the following if applicable:\n\n- Remove `allowExtendedProperties: true` DataSource setting\n- Add `allowExtendedProperties: false` DataSource setting\n- When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand.",
            "published_date":"2022-08-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql",
            "commit_href":"https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/commit\/d57406c6737692a3a106b58a35406290cddb23e5",
            "commit_sha":"d57406c6737692a3a106b58a35406290cddb23e5",
            "patch":"SINGLE",
            "chain_ord":"['d57406c6737692a3a106b58a35406290cddb23e5']",
            "before_first_fix_commit":"{'1a863f3df332f1732e8fec519f1d686561313a3e'}",
            "last_fix_commit":"d57406c6737692a3a106b58a35406290cddb23e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/04\/2022, 11:27:20",
            "message":"fix: improve filter sanitisation\n\nAdd sanitisation of user-input for `contains` LoopBack filter which may allow for arbitrary SQL injection.\n\nSigned-off-by: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>",
            "author":"Rifa Achrinza",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'lib\/postgresql.js': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/loopbackio\/loopback-connector-postgresql\/raw\/d57406c6737692a3a106b58a35406290cddb23e5\/lib%2Fpostgresql.js', 'patch': \"@@ -545,10 +545,11 @@ PostgreSQL.prototype.buildExpression = function(columnName, operator,\\n       return new ParameterizedSQL(columnName + regexOperator,\\n         [operatorValue.source]);\\n     case 'contains':\\n-      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map((v) => `'${v}'`) + ']::'\\n-        + propertyDefinition.postgresql.dataType);\\n+      return new ParameterizedSQL(columnName + ' @> array[' + operatorValue.map(() => '?') + ']::'\\n+        + propertyDefinition.postgresql.dataType,\\n+        operatorValue);\\n     case 'match':\\n-      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery('${operatorValue}')`);\\n+      return new ParameterizedSQL(`to_tsvector(${columnName}) @@ to_tsquery(?)`, [operatorValue]);\\n     default:\\n       \/\/ invoke the base implementation of `buildExpression`\\n       return this.invokeSuper('buildExpression', columnName, operator,\"}}",
            "message_norm":"fix: improve filter sanitisation\n\nadd sanitisation of user-input for `contains` loopback filter which may allow for arbitrary sql injection.\n\nsigned-off-by: rifa achrinza <25147899+achrinza@users.noreply.github.com>",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('improve', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('add', 'ACTION', ''), ('sanitisation', 'SECWORD', ''), ('sql injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/postgresql.js'])",
            "num_files":1.0
        },
        {
            "index":2774,
            "vuln_id":"GHSA-qjw2-hr98-qgfh",
            "cwe_id":"{'CWE-502'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/ad5a630174f08d279504bc51ebba8772fd71b86b', 'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/2118e71325486c68f089a9761c9d8a11b4ddd1cb'}",
            "dataset":"osv",
            "summary":"Unsafe Deserialization in jackson-databind FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
            "published_date":"2021-12-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/FasterXML\/jackson-databind",
            "commit_href":"https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/ad5a630174f08d279504bc51ebba8772fd71b86b",
            "commit_sha":"ad5a630174f08d279504bc51ebba8772fd71b86b",
            "patch":"MULTI",
            "chain_ord":"['ad5a630174f08d279504bc51ebba8772fd71b86b', '2118e71325486c68f089a9761c9d8a11b4ddd1cb']",
            "before_first_fix_commit":"{'8069e46dd9c288d4a52911ebdc52192cd3d0e96c'}",
            "last_fix_commit":"2118e71325486c68f089a9761c9d8a11b4ddd1cb",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/18\/2020, 17:17:24",
            "message":"Add cve id for #2798",
            "author":"Tatu Saloranta",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'release-notes\/VERSION-2.x': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FasterXML\/jackson-databind\/raw\/ad5a630174f08d279504bc51ebba8772fd71b86b\/release-notes%2FVERSION-2.x', 'patch': '@@ -11,7 +11,7 @@ Project: jackson-databind\\n \\n 2.9.10.6 (24-Aug-2020)\\n \\n-#2798: Block one more gadget type (xxx, CVE-xxxx-xxx)\\n+#2798: Block one more gadget type (com.pastdev.httpcomponents, CVE-2020-24750)\\n  (reported by Al1ex@knownsec)\\n #2814: Block one more gadget type (Anteros-DBCP, CVE-2020-24616)\\n  (reported by ChenZhaojun)'}}",
            "message_norm":"add cve id for #2798",
            "language":"cy",
            "entities":"[('add', 'ACTION', ''), ('cve', 'SECWORD', ''), ('#2798', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['release-notes\/VERSION-2.x'])",
            "num_files":1.0
        },
        {
            "index":878,
            "vuln_id":"GHSA-6pqm-xvfc-w7p4",
            "cwe_id":"{'CWE-352'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/654e871a3923e79076818a9a03533fe88222c871'}",
            "dataset":"osv",
            "summary":"showdoc is vulnerable to Cross-Site Request Forgery (CSRF) showdoc is vulnerable to Cross-Site Request Forgery (CSRF).",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/654e871a3923e79076818a9a03533fe88222c871",
            "commit_sha":"654e871a3923e79076818a9a03533fe88222c871",
            "patch":"SINGLE",
            "chain_ord":"['654e871a3923e79076818a9a03533fe88222c871']",
            "before_first_fix_commit":"{'a9886f26c08225e0adca75c67dfca3f7c42b87d0'}",
            "last_fix_commit":"654e871a3923e79076818a9a03533fe88222c871",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/22\/2021, 12:22:29",
            "message":"Cookie security \/Cookie \u5b89\u5168",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'server\/index.php': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/654e871a3923e79076818a9a03533fe88222c871\/server%2Findex.php', 'patch': \"@@ -8,6 +8,18 @@\\n     require '.\/vendor\/autoload.php';\\n }\\n \\n+\/\/ cookie\u5b89\u5168\uff0c\u7ed9PHPSESSID\u52a0\u4e0aStrict\\n+if (PHP_VERSION_ID >= 70300) {\\n+    session_set_cookie_params([\\n+        'samesite' => 'Strict'\\n+    ]);\\n+} else { \\n+    session_set_cookie_params(\\n+        NULL,\\n+        '\/; samesite=Strict',\\n+    );\\n+}\\n+\\n \/\/ \u5f00\u542f\u8c03\u8bd5\u6a21\u5f0f \u5efa\u8bae\u5f00\u53d1\u9636\u6bb5\u5f00\u542f \u90e8\u7f72\u9636\u6bb5\u6ce8\u91ca\u6216\u8005\u8bbe\u4e3afalse\\n define('APP_DEBUG',True);\"}}",
            "message_norm":"cookie security \/cookie \u5b89\u5168",
            "language":"en",
            "entities":"[('cookie', 'SECWORD', ''), ('security', 'SECWORD', ''), ('\/cookie', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/index.php'])",
            "num_files":1.0
        },
        {
            "index":452,
            "vuln_id":"GHSA-4p4p-www8-8fv9",
            "cwe_id":"{'CWE-824'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8'}",
            "dataset":"osv",
            "summary":"Reference binding to null in `ParameterizedTruncatedNormal` ### Impact\nAn attacker can trigger undefined behavior by binding to null pointer in `tf.raw_ops.ParameterizedTruncatedNormal`:\n\n```python\nimport tensorflow as tf\n    \nshape = tf.constant([], shape=[0], dtype=tf.int32)\nmeans = tf.constant((1), dtype=tf.float32)\nstdevs = tf.constant((1), dtype=tf.float32)\nminvals = tf.constant((1), dtype=tf.float32)\nmaxvals = tf.constant((1), dtype=tf.float32)\n  \ntf.raw_ops.ParameterizedTruncatedNormal(\n  shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/3f6fe4dfef6f57e768260b48166c27d148f3015f\/tensorflow\/core\/kernels\/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of `shape`:\n\n```cc\nint32 num_batches = shape_tensor.flat<int32>()(0);\n``` \n\nIf `shape` argument is empty, then `shape_tensor.flat<T>()` is an empty array.\n\n### Patches\nWe have patched the issue in GitHub commit [5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8",
            "commit_sha":"5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8",
            "patch":"SINGLE",
            "chain_ord":"['5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8']",
            "before_first_fix_commit":"{'3f6fe4dfef6f57e768260b48166c27d148f3015f'}",
            "last_fix_commit":"5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 02:14:24",
            "message":"Fix breakage in parameterized_truncated_normal_op.cc\n\nPiperOrigin-RevId: 372041718\nChange-Id: Iff79e77a2bb27032423eefcb84211627b27dfe81",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/parameterized_truncated_normal_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8\/tensorflow%2Fcore%2Fkernels%2Fparameterized_truncated_normal_op.cc', 'patch': '@@ -627,6 +627,9 @@ class ParameterizedTruncatedNormalOp : public OpKernel {\\n         ctx, TensorShapeUtils::IsVector(shape_tensor.shape()),\\n         errors::InvalidArgument(\"Input shape should be a vector, got shape: \",\\n                                 shape_tensor.shape().DebugString()));\\n+    OP_REQUIRES(ctx, shape_tensor.NumElements() > 0,\\n+                errors::InvalidArgument(\"Shape tensor must not be empty, got \",\\n+                                        shape_tensor.DebugString()));\\n     int32 num_batches = shape_tensor.flat<int32>()(0);\\n \\n     int32 samples_per_batch = 1;'}}",
            "message_norm":"fix breakage in parameterized_truncated_normal_op.cc\n\npiperorigin-revid: 372041718\nchange-id: iff79e77a2bb27032423eefcb84211627b27dfe81",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372041718', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/parameterized_truncated_normal_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2783,
            "vuln_id":"GHSA-qmv4-jgp7-mf68",
            "cwe_id":"{'CWE-284'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails\/commit\/0057123a0321be6758845abbeb4290bf418ce542'}",
            "dataset":"osv",
            "summary":"Sails before 0.12.7 vulnerable to Broken CORS Affected versions of `sails` have an issue with the CORS configuration where the value of the origin header is reflected as the value for the `Access-Control-Allow-Origin` header. This may allow an attacker to make AJAX requests to vulnerable hosts through cross-site scripting or a malicious HTML Document, effectively bypassing the Same Origin Policy. \n\n## Mitigating Factors\n\nThis is only an issue when `allRoutes` is set to `true` and `origin` is set to `*` or left commented out in the sails CORS config file. \n\nThe problem can be compounded when the cors `credentials` setting is not provided, because at that point authenticated cross domain requests are possible.\n\n\n## Recommendation\n\nUpdate to version 0.12.7 or later.\n\nAs this vulnerability is primarily a user error, the patch for the vulnerability will simply cause the application to write an error message to the console when a vulnerable configuration is used in a production environment.\n\nWriting a proper CORS configuration is still the responsibility of the user, so it is necessary to check for the error message after installing the patch. Be sure you are not using `allRoutes: true` with `origin:'*'`, and that you uncomment `origin` and set it to a reasonable value. Ensure that if `origin` is set to `*` that you truly mean for all other websites to be able to make cross-domain requests to your API.\n\nLikewise, ensure `credentials` is uncommented out and set to the appropriate value. Make sure to explicitly set which origins may request resources via CORS.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/balderdashy\/sails",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails\/commit\/0057123a0321be6758845abbeb4290bf418ce542",
            "commit_sha":"0057123a0321be6758845abbeb4290bf418ce542",
            "patch":"SINGLE",
            "chain_ord":"['0057123a0321be6758845abbeb4290bf418ce542']",
            "before_first_fix_commit":"{'8d642f1ab3d46491cf7b73af1ec54941ff0eb84b'}",
            "last_fix_commit":"0057123a0321be6758845abbeb4290bf418ce542",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/05\/2016, 23:16:26",
            "message":"Warn about overly-permissive CORS settings when lifting in production",
            "author":"Scott Gress",
            "comments":null,
            "stats":"{'additions': 48, 'deletions': 0, 'total': 48}",
            "files":"{'lib\/hooks\/cors\/index.js': {'additions': 48, 'deletions': 0, 'changes': 48, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails\/raw\/0057123a0321be6758845abbeb4290bf418ce542\/lib%2Fhooks%2Fcors%2Findex.js', 'patch': \"@@ -44,6 +44,9 @@ module.exports = function(sails) {\\n      *\/\\n     initialize: function(cb) {\\n \\n+      \/\/ Declare an array to hold info about unsafely-configured routes.\\n+      var unsafeRoutes = [];\\n+\\n       \/\/ Once it's time to bind shadow routes, get to bindin'.\\n       sails.on('router:before', function () {\\n         \/\/ (TODO: consider changing this ^^ to `sails.after()` for consistency)\\n@@ -112,10 +115,55 @@ module.exports = function(sails) {\\n               sails.log.warn('Invalid CORS settings for route '+route);\\n             }\\n \\n+            \/\/ If the global CORS defaults are not overly permissive, check this individual route's settings.\\n+            if (sails.config.cors.allRoutes === false || sails.config.cors.origin !== '*' || sails.config.cors.credentials === false) {\\n+              var routeCorsConfig = _.defaults(optionsRouteConfigs[path][verb || 'default'], sails.config.cors);\\n+              \/\/ If they are too permissive, add the route to a list of unsafe routes to warn the user about\\n+              \/\/ when running in the production environment.\\n+              if (routeCorsConfig.origin === '*' && routeCorsConfig.credentials === true) {\\n+                unsafeRoutes.push((verb ? (verb + ' ') : '') + path);\\n+              }\\n+            }\\n+\\n           }\\n \\n         });\\n \\n+        \/\/ Log a warning if your default CORS settings are super permissive in the production environment.\\n+        if (sails.config.environment === 'production') {\\n+          \/\/ If the global CORS defaults are permissive, log a warning about that.\\n+          if (\\n+            sails.config.cors.allRoutes === true &&\\n+            sails.config.cors.origin === '*' &&\\n+            sails.config.cors.credentials === true\\n+          ) {\\n+          sails.log.error('\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                         'WARNING: You currently have your default CORS settings configured to allow\\\\n' +\\n+                         'all requests from all origins, with credentials.  This may leave your app\\\\n' +\\n+                         'open to attack by third-party sites!  Consider making your `origins` setting\\\\n' +\\n+                         'more restrictive or setting `credentials` to false, or else make certain that\\\\n' +\\n+                         'none of your routes perform sensitive actions or reveal secure information.\\\\n' +\\n+                         '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n');\\n+          }\\n+          \/\/ Otherwise log a warning mentioning the particular routes that are too permissive.\\n+          else if (unsafeRoutes.length) {\\n+            sails.log.error('\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n' +\\n+                           'WARNING: You currently have CORS settings on the following routes configured\\\\n' +\\n+                           'to allow all requests from all origins, with credentials:\\\\n\\\\n' + unsafeRoutes.join('\\\\n') + '\\\\n\\\\n' +\\n+                           'This may leave these routes open to attack by third-party sites!  Consider\\\\n'+\\n+                           'making the `origins` settings more restrictive or setting `credentials` to\\\\n' +\\n+                           'false, or else make certain that none of these routes perform sensitive\\\\n' +\\n+                           'actions or reveal secure information.\\\\n' +\\n+                           '=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=\\\\n'\\n+                           );\\n+          }\\n+        }\\n+\\n+\\n+\\n+\\n         _.each(optionsRouteConfigs, function(config, path) {\\n           sails.router.bind('options '+path, prepareSendHeaders(config, true), null, {_middlewareType: 'CORS HOOK: preflight'});\\n         });\"}}",
            "message_norm":"warn about overly-permissive cors settings when lifting in production",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/hooks\/cors\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1933,
            "vuln_id":"GHSA-gv26-jpj9-c8gq",
            "cwe_id":"{'CWE-754'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseSparseMinimum` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python \nimport tensorflow as tf\n\na_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    b_shape=b_shape)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches \nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6fde895ef9c77d848061c0517f19d0ec2682f3a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2022-03-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ba6822bd7b7324ba201a28b2f278c29a98edbef2",
            "commit_sha":"ba6822bd7b7324ba201a28b2f278c29a98edbef2",
            "patch":"MULTI",
            "chain_ord":"['ba6822bd7b7324ba201a28b2f278c29a98edbef2', 'f6fde895ef9c77d848061c0517f19d0ec2682f3a']",
            "before_first_fix_commit":"{'cae81a7ae3ca6207396d5c893e8163f4acb34037'}",
            "last_fix_commit":"f6fde895ef9c77d848061c0517f19d0ec2682f3a",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 23:06:54",
            "message":"Fix OOB issue with `tf.raw_ops.SparseSparseMinimum`.\n\nPiperOrigin-RevId: 371005787\nChange-Id: Ib686ccc077836e8b980b8b5a03936d36a8ecaf71",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ba6822bd7b7324ba201a28b2f278c29a98edbef2\/tensorflow%2Fcore%2Fkernels%2Fsparse_sparse_binary_op_shared.cc', 'patch': '@@ -180,6 +180,11 @@ class SparseSparseBinaryOpShared : public OpKernel {\\n                                           \" for dimension \", i));\\n     }\\n \\n+    OP_REQUIRES(\\n+        ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),\\n+        errors::InvalidArgument(\\n+            \"Indices\\' dimensions do not match: got \", a_indices_t->dim_size(1),\\n+            \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));\\n     const int num_dims = a_indices_t->dim_size(1);\\n     const auto a_indices_mat = a_indices_t->matrix<int64>();\\n     const auto b_indices_mat = b_indices_t->matrix<int64>();'}}",
            "message_norm":"fix oob issue with `tf.raw_ops.sparsesparseminimum`.\n\npiperorigin-revid: 371005787\nchange-id: ib686ccc077836e8b980b8b5a03936d36a8ecaf71",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('oob', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371005787', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_sparse_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":2099,
            "vuln_id":"GHSA-hp4c-x6r7-6555",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d9204be9f49520cdaaeb2541d1dc5187b23f31d9'}",
            "dataset":"osv",
            "summary":"Floating point exception in `SparseDenseCwiseDiv` ### Impact\nThe implementation of `tf.raw_ops.SparseDenseCwiseDiv` is vulnerable to a division by 0 error:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv( \n  sp_indices=np.array([[4]]),\n  sp_values=np.array([-400]),\n  sp_shape=np.array([647.]),\n  dense=np.array([0]))\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1bc56203f21a5a4995311825ffaba7a670d7747\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately.\n\n### Patches\nWe have patched the issue in GitHub commit [d9204be9f49520cdaaeb2541d1dc5187b23f31d9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d9204be9f49520cdaaeb2541d1dc5187b23f31d9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d9204be9f49520cdaaeb2541d1dc5187b23f31d9",
            "commit_sha":"d9204be9f49520cdaaeb2541d1dc5187b23f31d9",
            "patch":"SINGLE",
            "chain_ord":"['d9204be9f49520cdaaeb2541d1dc5187b23f31d9']",
            "before_first_fix_commit":"{'a95743ddba81449601bc32f249d979a944502de6'}",
            "last_fix_commit":"d9204be9f49520cdaaeb2541d1dc5187b23f31d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/10\/2021, 01:27:22",
            "message":"Disallow division by zero FPE in tf.raw_ops.SparseDenseCwiseDiv\n\nPiperOrigin-RevId: 383959809\nChange-Id: Ibe88458bdf66a686c93e354b8255dec94285c560",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 1, 'total': 11}",
            "files":"{'tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d9204be9f49520cdaaeb2541d1dc5187b23f31d9\/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -114,7 +114,10 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n     OP_REQUIRES_OK(\\n         ctx, ctx->allocate_temp(DataTypeToEnum<T>::value, TensorShape({nnz}),\\n                                 &dense_gathered));\\n-\\n+    bool op_is_div = false;\\n+    if (absl::StrContains(ctx->op_kernel().type_string_view(), \"Div\")) {\\n+      op_is_div = true;\\n+    }\\n     \/\/ Pulls relevant entries from the dense side, with reshape and broadcasting\\n     \/\/ *of the dense side* taken into account.  Use a TensorRef to avoid blowing\\n     \/\/ up memory.\\n@@ -143,6 +146,12 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n           errors::InvalidArgument(\"Provided indices are out-of-bounds w.r.t. \" \\\\\\n                                   \"dense side with broadcasted shape\"));       \\\\\\n       dense_gathered_flat(i) = rhs_ref.coeff(idx);                             \\\\\\n+      if (op_is_div) {                                                         \\\\\\n+        OP_REQUIRES(ctx, dense_gathered_flat(i) != 0,                          \\\\\\n+                    errors::InvalidArgument(                                   \\\\\\n+                        \"SparseDenseCwiseDiv cannot divide by zero,\"           \\\\\\n+                        \"but input dense tensor contains zero \"));             \\\\\\n+      }                                                                        \\\\\\n     }                                                                          \\\\\\n     break;                                                                     \\\\\\n   }'}}",
            "message_norm":"disallow division by zero fpe in tf.raw_ops.sparsedensecwisediv\n\npiperorigin-revid: 383959809\nchange-id: ibe88458bdf66a686c93e354b8255dec94285c560",
            "language":"en",
            "entities":"[('division by zero', 'SECWORD', ''), ('fpe', 'SECWORD', ''), ('383959809', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":693,
            "vuln_id":"GHSA-5rqg-jm4f-cqx7",
            "cwe_id":"{'CWE-835'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75', 'https:\/\/github.com\/Marak\/colors.js\/commit\/137c6dae3339e97f4bbc838c221803c363b0a9fd', 'https:\/\/github.com\/Marak\/colors.js\/commit\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26'}",
            "dataset":"osv",
            "summary":"Infinite loop causing Denial of Service in colors colors is a library for including colored text in node.js consoles. Between 07 and 09 January 2022, colors versions 1.4.1, 1.4.2, and 1.4.44-liberty-2 were published including malicious code that caused a Denial of Service due to an infinite loop. Software dependent on these versions experienced the printing of randomized characters to console and an infinite loop resulting in unbound system resource consumption.\n\nUsers of colors relying on these specific versions should downgrade to version 1.4.0.",
            "published_date":"2022-01-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/Marak\/colors.js",
            "commit_href":"https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75",
            "commit_sha":"5d2d242f656103ac38086d6b26433a09f1c38c75",
            "patch":"MULTI",
            "chain_ord":"['137c6dae3339e97f4bbc838c221803c363b0a9fd', '5d2d242f656103ac38086d6b26433a09f1c38c75', '6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26']",
            "before_first_fix_commit":"{'5d2d242f656103ac38086d6b26433a09f1c38c75'}",
            "last_fix_commit":"6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/08\/2022, 04:21:02",
            "message":"Fix bug",
            "author":"Marak",
            "comments":"{'com_1': {'author': 'bacloud22', 'datetime': '01\/08\/2022, 07:00:53', 'body': 'oops, now it works \ud83e\udd23'}, 'com_2': {'author': 'AuroPick', 'datetime': '01\/10\/2022, 01:19:13', 'body': 'delete this shit'}, 'com_3': {'author': 'KeZengOo', 'datetime': '01\/10\/2022, 02:21:07', 'body': 'Amazing\uff01'}, 'com_4': {'author': 'summic', 'datetime': '01\/10\/2022, 02:48:32', 'body': 'Disgusting!'}, 'com_5': {'author': 'zhang354455288', 'datetime': '01\/10\/2022, 06:50:25', 'body': 'niubi laotie'}, 'com_6': {'author': 'yyg1219', 'datetime': '01\/10\/2022, 07:10:16', 'body': 'niua niua'}, 'com_7': {'author': 'zhangwenwen12138', 'datetime': '01\/10\/2022, 08:10:05', 'body': '\u94c1\u5b50\uff0c\u4f60\u600e\u4e48\u4e86'}, 'com_8': {'author': 'vaecebyZ', 'datetime': '01\/10\/2022, 09:31:36', 'body': \"While we sympathize with you, you're doing a disservice to other developers.\ud83d\ude28\"}, 'com_9': {'author': 'chen-fac', 'datetime': '01\/10\/2022, 09:37:07', 'body': '\u524d\u6392\u51fa\u552e\u82b1\u751f\u74dc\u5b50'}, 'com_10': {'author': 'DragonCat1', 'datetime': '01\/10\/2022, 09:52:22', 'body': '\u5e7f\u544a\u4f4d\u62db\u79df'}, 'com_11': {'author': 'evanchen0629', 'datetime': '01\/10\/2022, 09:53:53', 'body': '\u524d\u9762\u7684\u540c\u5fd7\u628a\u811a\u6536\u4e00\u6536'}, 'com_12': {'author': 'wokalek', 'datetime': '01\/10\/2022, 09:58:35', 'body': 'Starege'}, 'com_13': {'author': 'brolnickij', 'datetime': '01\/10\/2022, 10:17:54', 'body': 'nice trolling :D'}, 'com_14': {'author': 'withsalt', 'datetime': '01\/10\/2022, 10:26:09', 'body': 'nice code!'}, 'com_15': {'author': 'Ansen', 'datetime': '01\/10\/2022, 10:29:24', 'body': 'six six six'}, 'com_16': {'author': 'SheltonZhu', 'datetime': '01\/10\/2022, 10:39:39', 'body': 'brilliant !!!!!'}, 'com_17': {'author': 'mxj1337', 'datetime': '01\/10\/2022, 11:00:51', 'body': 'LIKE'}, 'com_18': {'author': 'WeirdConstructor', 'datetime': '01\/10\/2022, 12:33:35', 'body': 'Obviously this bugfix is missing a regression test! ;-)'}, 'com_19': {'author': 'wuzhidexiaolang', 'datetime': '01\/10\/2022, 14:28:13', 'body': 'nice'}, 'com_20': {'author': 'manudevcode', 'datetime': '01\/10\/2022, 16:02:59', 'body': \"Lol, when your intentional error, doesn't work xD\"}, 'com_21': {'author': 'LuciusChen', 'datetime': '01\/10\/2022, 16:18:08', 'body': '\u725b\u903c\u554a'}, 'com_22': {'author': 'golangboy', 'datetime': '01\/10\/2022, 17:01:00', 'body': '\u524d\u7aef\u5708\u771f\u70ed\u95f9'}, 'com_23': {'author': 'prietales', 'datetime': '01\/10\/2022, 17:53:17', 'body': 'let am should be const.'}, 'com_24': {'author': 'xinx1n', 'datetime': '01\/11\/2022, 02:20:44', 'body': '\u82df\u5229\u56fd\u5bb6\u751f\u6b7b\u4ee5'}, 'com_25': {'author': 'paoqi1997', 'datetime': '01\/11\/2022, 02:20:59', 'body': '12, 3456'}, 'com_26': {'author': 'manudevcode', 'datetime': '01\/11\/2022, 03:31:54', 'body': '> 12, 3456\\r\\n\\r\\nLa tuya por si las dudas xD'}, 'com_27': {'author': '949nb', 'datetime': '01\/11\/2022, 06:47:08', 'body': 'nice code!'}, 'com_28': {'author': 'npljy', 'datetime': '01\/11\/2022, 08:20:14', 'body': \"If you want to make money from open source, then don't open source\"}, 'com_29': {'author': 'machinebitezz', 'datetime': '01\/11\/2022, 14:24:03', 'body': 'Power to you tbh'}, 'com_30': {'author': 'ethnh', 'datetime': '01\/11\/2022, 16:19:27', 'body': '\ud83d\udd34\ud83d\udfe0\ud83d\udfe1\ud83d\udfe2\ud83d\udd35\ud83d\udfe3\ud83d\udfe4\u26ab\u26aa nice colors'}, 'com_31': {'author': 'zhushiqiang', 'datetime': '01\/12\/2022, 01:47:25', 'body': '666'}, 'com_32': {'author': 'zhushiqiang', 'datetime': '01\/12\/2022, 13:39:52', 'body': '\u8fd9\u662f\u6765\u81eaQQ\u90ae\u7bb1\u7684\u5047\u671f\u81ea\u52a8\u56de\u590d\u90ae\u4ef6\u3002\\n\\xa0\\n\u60a8\u597d\uff0c\u6211\u6700\u8fd1\u6b63\u5728\u4f11\u5047\u4e2d\uff0c\u65e0\u6cd5\u4eb2\u81ea\u56de\u590d\u60a8\u7684\u90ae\u4ef6\u3002\u6211\u5c06\u5728\u5047\u671f\u7ed3\u675f\u540e\uff0c\u5c3d\u5feb\u7ed9\u60a8\u56de\u590d\u3002'}, 'com_33': {'author': 'joaodematejr', 'datetime': '01\/13\/2022, 02:30:37', 'body': '@brunoibias'}, 'com_34': {'author': 'Rusnura', 'datetime': '01\/13\/2022, 03:18:05', 'body': 'Hello World!'}, 'com_35': {'author': 'a6513375', 'datetime': '01\/13\/2022, 13:39:17', 'body': '> \\r\\n\\r\\n\u6211\u8d85'}, 'com_36': {'author': 'zbeanbean', 'datetime': '01\/14\/2022, 06:26:34', 'body': 'wondeful'}, 'com_37': {'author': 'PalmDevs', 'datetime': '01\/19\/2022, 09:58:13', 'body': 'Reject `let`, `const`. Return to `var`. \ud83d\ude0f'}, 'com_38': {'author': 'TechStudent10', 'datetime': '01\/19\/2022, 12:10:56', 'body': 'What bug are you fixing exactly?'}, 'com_39': {'author': 'frankhasen', 'datetime': '01\/19\/2022, 14:07:04', 'body': '> What bug are you fixing exactly?\\r\\n\\r\\nfixing capitalizm bro'}, 'com_40': {'author': 'TechStudent10', 'datetime': '01\/19\/2022, 14:48:09', 'body': '> > What bug are you fixing exactly?\\r\\n> \\r\\n> fixing capitalizm bro\\r\\n\\r\\ntrue i guess.'}, 'com_41': {'author': 'joerez', 'datetime': '01\/20\/2022, 21:33:57', 'body': 'put me in the screencap'}, 'com_42': {'author': 'aaj', 'datetime': '01\/20\/2022, 21:38:03', 'body': 'witnessed'}, 'com_43': {'author': 'yasath', 'datetime': '01\/28\/2022, 14:20:12', 'body': 'so real bestie'}, 'com_44': {'author': 'N1ark', 'datetime': '01\/28\/2022, 14:21:12', 'body': 'we stan'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Marak\/colors.js\/raw\/5d2d242f656103ac38086d6b26433a09f1c38c75\/lib%2Findex.js', 'patch': \"@@ -15,7 +15,7 @@ require('.\/extendStringPrototype')();\\n \/* remove this line after testing *\/\\n let am = require('..\/lib\/custom\/american');\\n am();\\n-for (let i = 666; i < Infinity; i++;) {\\n+for (let i = 666; i < Infinity; i++) {\\n   if (i % 333) {\\n     \/\/ console.log('testing'.zalgo.rainbow)\\n   }\"}}",
            "message_norm":"fix bug",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2120,
            "vuln_id":"GHSA-hrg5-737c-2p56",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400'}",
            "dataset":"osv",
            "summary":"Missing validation causes denial of service via `UnsortedSegmentJoin` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))\n``` \n  \nThe code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nOP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n            errors::InvalidArgument(\"Number of segments cannot be empty.\"));\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/13d38a07ce9143e044aa737cfd7bb759d0e9b400",
            "commit_sha":"13d38a07ce9143e044aa737cfd7bb759d0e9b400",
            "patch":"SINGLE",
            "chain_ord":"['13d38a07ce9143e044aa737cfd7bb759d0e9b400']",
            "before_first_fix_commit":"{'fa57990ccca1fb2b9a1f296183985931746914d3'}",
            "last_fix_commit":"13d38a07ce9143e044aa737cfd7bb759d0e9b400",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2022, 18:37:31",
            "message":"Fix tf.raw_ops.UnsortedSegmentJoin vulnerability with invalid num_segments.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445206880",
            "author":"Alan Liu",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/13d38a07ce9143e044aa737cfd7bb759d0e9b400\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -92,6 +92,9 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n     const Tensor& num_segments_tensor = context->input(2);\\n     OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n+    OP_REQUIRES(context,\\n+                TensorShapeUtils::IsScalar(num_segments_tensor.shape()),\\n+                errors::InvalidArgument(\"Number of segments must be a scalar\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n     OP_REQUIRES('}}",
            "message_norm":"fix tf.raw_ops.unsortedsegmentjoin vulnerability with invalid num_segments.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445206880",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('445206880', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3082,
            "vuln_id":"GHSA-v923-w3x8-wh69",
            "cwe_id":"{'CWE-384'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/jaredhanson\/passport\/commit\/7e9b9cf4d7be02428e963fc729496a45baeea608'}",
            "dataset":"osv",
            "summary":"Passport before 0.6.0 vulnerable to session regeneration when a users logs in or out This affects the package passport before 0.6.0. When a user logs in or logs out, the session is regenerated instead of being closed.",
            "published_date":"2022-07-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/jaredhanson\/passport",
            "commit_href":"https:\/\/github.com\/jaredhanson\/passport\/commit\/7e9b9cf4d7be02428e963fc729496a45baeea608",
            "commit_sha":"7e9b9cf4d7be02428e963fc729496a45baeea608",
            "patch":"SINGLE",
            "chain_ord":"['7e9b9cf4d7be02428e963fc729496a45baeea608']",
            "before_first_fix_commit":"{'5e6d92f1ef2adf21b54492cc86a7c066ef3f1e98'}",
            "last_fix_commit":"7e9b9cf4d7be02428e963fc729496a45baeea608",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/17\/2022, 15:15:54",
            "message":"Regenerate session on login.",
            "author":"Jared Hanson",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 10, 'total': 30}",
            "files":"{'lib\/sessionmanager.js': {'additions': 20, 'deletions': 10, 'changes': 30, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jaredhanson\/passport\/raw\/7e9b9cf4d7be02428e963fc729496a45baeea608\/lib%2Fsessionmanager.js', 'patch': \"@@ -10,24 +10,34 @@ function SessionManager(options, serializeUser) {\\n }\\n \\n SessionManager.prototype.logIn = function(req, user, cb) {\\n+  console.log('SM: logIn');\\n+  \\n   var self = this;\\n-  this._serializeUser(user, req, function(err, obj) {\\n+  req.session.regenerate(function(err) {\\n     if (err) {\\n       return cb(err);\\n     }\\n-    \/\/ TODO: Error if session isn't available here.\\n-    if (!req.session) {\\n-      req.session = {};\\n-    }\\n-    if (!req.session[self._key]) {\\n-      req.session[self._key] = {};\\n-    }\\n-    req.session[self._key].user = obj;\\n-    cb();\\n+    \\n+    self._serializeUser(user, req, function(err, obj) {\\n+      if (err) {\\n+        return cb(err);\\n+      }\\n+      \/\/ TODO: Error if session isn't available here.\\n+      if (!req.session) {\\n+        req.session = {};\\n+      }\\n+      if (!req.session[self._key]) {\\n+        req.session[self._key] = {};\\n+      }\\n+      req.session[self._key].user = obj;\\n+      cb();\\n+    });\\n   });\\n }\\n \\n SessionManager.prototype.logOut = function(req, cb) {\\n+  console.log('SM: logOut');\\n+  \\n   if (req.session && req.session[this._key]) {\\n     delete req.session[this._key].user;\\n   }\"}}",
            "message_norm":"regenerate session on login.",
            "language":"en",
            "entities":"[('login', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/sessionmanager.js'])",
            "num_files":1.0
        },
        {
            "index":1676,
            "vuln_id":"GHSA-f6g6-54hm-fhxv",
            "cwe_id":"{'CWE-362', 'CWE-119'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/mvertescher\/libsbc-rs\/commit\/a34d6e10f6f5654ed01a35288cf683d014ebc9c4'}",
            "dataset":"osv",
            "summary":"Data races in libsbc Affected versions of this crate implements `Send` for `Decoder<R>` for any `R: Read`. This allows `Decoder<R>` to contain `R: !Send` and carry (move) it to another thread.\n\nThis can result in undefined behavior such as memory corruption from data race on `R`, or dropping `R = MutexGuard<_>` from a thread that didn't lock the mutex.\n\nThe flaw was corrected in commit a34d6e1 by adding trait bound `R: Send` to the `Send` impl for `Decoder<R>`.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/mvertescher\/libsbc-rs",
            "commit_href":"https:\/\/github.com\/mvertescher\/libsbc-rs\/commit\/a34d6e10f6f5654ed01a35288cf683d014ebc9c4",
            "commit_sha":"a34d6e10f6f5654ed01a35288cf683d014ebc9c4",
            "patch":"SINGLE",
            "chain_ord":"['a34d6e10f6f5654ed01a35288cf683d014ebc9c4']",
            "before_first_fix_commit":"{'7278b23901f93d956d9739fdfc4ced147cc3f242'}",
            "last_fix_commit":"a34d6e10f6f5654ed01a35288cf683d014ebc9c4",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/23\/2021, 02:06:34",
            "message":"Add R: Send bound to Send impl of Decoder<R>\nfixes issue #4",
            "author":"JOE1994",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/lib.rs': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mvertescher\/libsbc-rs\/raw\/a34d6e10f6f5654ed01a35288cf683d014ebc9c4\/src%2Flib.rs', 'patch': '@@ -33,7 +33,7 @@ where\\n \\n unsafe impl<R> Send for Decoder<R>\\n where\\n-        R: Read,\\n+        R: Read + Send,\\n {\\n }'}}",
            "message_norm":"add r: send bound to send impl of decoder<r>\nfixes issue #4",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('decoder', 'SECWORD', ''), ('#4', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":32,
            "vuln_id":"GHSA-25fx-mxc2-76g7",
            "cwe_id":"{'CWE-200'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/Sylius\/PayPalPlugin\/commit\/814923c2e9d97fe6279dcee866c34ced3d2fb7a7', 'https:\/\/github.com\/Sylius\/PayPalPlugin\/commit\/2adc46be2764ccee22b4247139b8056fb8d1afff'}",
            "dataset":"osv",
            "summary":"Unauthorized access to Credit card form exposing payer name and not requiring 3DS ### Impact\nURL to the payment page done after checkout was created with autoincremented payment id (`\/pay-with-paypal\/{id}`) and therefore it was easy to access for anyone, not even the order's customer. The problem was, the Credit card form has prefilled \"credit card holder\" field with the Customer's first and last name.\nAdditionally, the mentioned form did not require a 3D Secure authentication, as well as did not checked the result of the 3D Secure authentication.\n\n### Patches\nThe problem has been patched in Sylius\/PayPalPlugin **1.2.4** and **1.3.1**\n\n### Workarounds\nOne can override a `sylius_paypal_plugin_pay_with_paypal_form` route and change its URL parameters to (for example) `{orderToken}\/{paymentId}`, then override the `Sylius\\PayPalPlugin\\Controller\\PayWithPayPalFormAction` service, to operate on the payment taken from the repository by these 2 values. It would also require usage of custom repository method.\nAdditionally, one could override the `@SyliusPayPalPlugin\/payWithPaypal.html.twig` template, to add `contingencies: ['SCA_ALWAYS']` line in `hostedFields.submit(...)` function call (line 421). It would then have to be handled in the function callback.\n\n### For more information\nIf you have any questions or comments about this advisory:\n- Open an issue in Sylius\/PayPalPlugin issues\n- Email us at security at sylius dot com",
            "published_date":"2021-10-06",
            "chain_len":2,
            "project":"https:\/\/github.com\/Sylius\/PayPalPlugin",
            "commit_href":"https:\/\/github.com\/Sylius\/PayPalPlugin\/commit\/2adc46be2764ccee22b4247139b8056fb8d1afff",
            "commit_sha":"2adc46be2764ccee22b4247139b8056fb8d1afff",
            "patch":"MULTI",
            "chain_ord":"['2adc46be2764ccee22b4247139b8056fb8d1afff', '814923c2e9d97fe6279dcee866c34ced3d2fb7a7']",
            "before_first_fix_commit":"{'2adc46be2764ccee22b4247139b8056fb8d1afff', 'a375013be7a740bef132927d74a1e03fd78a60ef'}",
            "last_fix_commit":"814923c2e9d97fe6279dcee866c34ced3d2fb7a7",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/04\/2021, 13:57:45",
            "message":"Require 3D Secure and process its response correctly",
            "author":"Mateusz Zalewski",
            "comments":"{'com_1': {'author': 'Maseeullahz', 'datetime': '01\/29\/2022, 00:49:58', 'body': 'IKSDKN'}}",
            "stats":"{'additions': 33, 'deletions': 13, 'total': 46}",
            "files":"{'src\/Resources\/views\/payWithPaypal.html.twig': {'additions': 33, 'deletions': 13, 'changes': 46, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Sylius\/PayPalPlugin\/raw\/2adc46be2764ccee22b4247139b8056fb8d1afff\/src%2FResources%2Fviews%2FpayWithPaypal.html.twig', 'patch': \"@@ -329,6 +329,8 @@\\n         });\\n \\n         if (paypal.HostedFields.isEligible() === true) {\\n+            let processingOrderId;\\n+\\n             paypal.HostedFields.render({\\n                 createOrder: function(data, actions) {\\n                     document.querySelector('#paypal-payment-container').classList.add('loading');\\n@@ -339,6 +341,8 @@\\n                     }).then(function(res) {\\n                         return res.json();\\n                     }).then(function(data) {\\n+                        processingOrderId = data.orderID;\\n+\\n                         return data.orderID;\\n                     });\\n                 },\\n@@ -419,6 +423,7 @@\\n \\n                     if (formValid) {\\n                         hostedFields.submit({\\n+                            contingencies: ['SCA_ALWAYS'],\\n                             cardholderName: document.getElementById('card-holder-name').value,\\n                             billingAddress: {\\n                                 streetAddress: document.getElementById('card-billing-address-street').value,\\n@@ -428,20 +433,35 @@\\n                                 countryCodeAlpha2: document.getElementById('card-billing-address-country').value\\n                             }\\n                         }).then(payload => {\\n-                            return fetch(completePayPalOrderUrl, {\\n-                                method: 'post'\\n-                            }).then(function(res) {\\n-                                return res.json();\\n+                            if (payload.authenticationReason == 'SUCCESSFUL' && payload.authenticationStatus == 'YES') {\\n+                                return fetch(completePayPalOrderUrl, {\\n+                                    method: 'post'\\n+                                }).then(function(res) {\\n+                                    return res.json();\\n+                                }).then(function(data) {\\n+                                    if (data.status == 'processing') {\\n+                                        return fetch(cancelPayPalPaymentUrl, {\\n+                                            method: 'post',\\n+                                            headers: { 'content-type': 'application\/json' },\\n+                                            body: JSON.stringify({ payPalOrderId: data.orderID })\\n+                                        }).then(window.location.reload());\\n+                                    }\\n+\\n+                                    window.location.href = data.return_url;\\n+                                });\\n+                            }\\n+\\n+\\n+                            return fetch(errorPayPalPaymentUrl, {\\n+                                method: 'post',\\n+                                headers: { 'content-type': 'application\/json' },\\n+                                body: JSON.stringify('Invalid 3D Secure authentication.')\\n                             }).then(function(data) {\\n-                                if (data.status == 'processing') {\\n-                                    return fetch(cancelPayPalPaymentUrl, {\\n-                                        method: 'post',\\n-                                        headers: { 'content-type': 'application\/json' },\\n-                                        body: JSON.stringify({ payPalOrderId: data.orderID })\\n-                                    }).then(window.location.reload());\\n-                                }\\n-\\n-                                window.location.href = data.return_url;\\n+                                return fetch(cancelPayPalPaymentUrl, {\\n+                                    method: 'post',\\n+                                    headers: { 'content-type': 'application\/json' },\\n+                                    body: JSON.stringify({ payPalOrderId: processingOrderId })\\n+                                }).then(window.location.reload());\\n                             });\\n                         });\\n                     } else {\"}}",
            "message_norm":"require 3d secure and process its response correctly",
            "language":"en",
            "entities":"[('secure', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Resources\/views\/payWithPaypal.html.twig'])",
            "num_files":1.0
        },
        {
            "index":371,
            "vuln_id":"GHSA-46hv-7769-j7rx",
            "cwe_id":"{'CWE-548'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/sintaxi\/harp\/commit\/1ec790baeeb2bfdb4584f1998af3d10a8fa31210'}",
            "dataset":"osv",
            "summary":"Unauthorized File Access in harp Affected versions of `harp` are vulnerable to Unauthorized File Access. The package states that it ignores files and directories with names that start with an underscore, such as `_secret-folder`. If the underscore character is URL encoded the server delivers the file.\n\n## Recommendation\n\nUpgrade to version `0.40.2` or later.",
            "published_date":"2019-06-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/sintaxi\/harp",
            "commit_href":"https:\/\/github.com\/sintaxi\/harp\/commit\/1ec790baeeb2bfdb4584f1998af3d10a8fa31210",
            "commit_sha":"1ec790baeeb2bfdb4584f1998af3d10a8fa31210",
            "patch":"SINGLE",
            "chain_ord":"['1ec790baeeb2bfdb4584f1998af3d10a8fa31210']",
            "before_first_fix_commit":"{'d3f7ba27c7554251a91f2987d702a6d4cfe8f081'}",
            "last_fix_commit":"1ec790baeeb2bfdb4584f1998af3d10a8fa31210",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/02\/2021, 18:56:59",
            "message":"Resolves serving private file via encoded underscore. #646",
            "author":"Brock Whitten",
            "comments":null,
            "stats":"{'additions': 867, 'deletions': 1027, 'total': 1894}",
            "files":"{'package-lock.json': {'additions': 867, 'deletions': 1027, 'changes': 1894, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sintaxi\/harp\/raw\/1ec790baeeb2bfdb4584f1998af3d10a8fa31210\/package-lock.json', 'patch': None}}",
            "message_norm":"resolves serving private file via encoded underscore. #646",
            "language":"it",
            "entities":"[('private file', 'SECWORD', ''), ('encoded', 'SECWORD', ''), ('#646', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['package-lock.json'])",
            "num_files":1.0
        },
        {
            "index":93,
            "vuln_id":"GHSA-2gw2-8q9w-cw8p",
            "cwe_id":"{'CWE-426'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/ffi\/ffi\/commit\/e0fe486df0e117ed67b0282b6ada04b7214ca05c', 'https:\/\/github.com\/ffi\/ffi\/commit\/09e0c6076466b4383da7fa4e13f714311109945a'}",
            "dataset":"osv",
            "summary":"Ruby-ffi has a DLL loading issue  ruby-ffi version 1.9.23 and earlier has a DLL loading issue which can be hijacked on Windows OS, when a Symbol is used as DLL name instead of a String This vulnerability appears to have been fixed in v1.9.24 and later.",
            "published_date":"2018-08-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/ffi\/ffi",
            "commit_href":"https:\/\/github.com\/ffi\/ffi\/commit\/09e0c6076466b4383da7fa4e13f714311109945a",
            "commit_sha":"09e0c6076466b4383da7fa4e13f714311109945a",
            "patch":"MULTI",
            "chain_ord":"['e0fe486df0e117ed67b0282b6ada04b7214ca05c', '09e0c6076466b4383da7fa4e13f714311109945a']",
            "before_first_fix_commit":"{'e0fe486df0e117ed67b0282b6ada04b7214ca05c'}",
            "last_fix_commit":"09e0c6076466b4383da7fa4e13f714311109945a",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/01\/2018, 20:31:40",
            "message":"Don't search in hardcoded paths on Windows\n\nNative Windows apps don't use \"\/usr\" path to store system dlls.\nIt's even more harm than good to search through these directories,\nsince they are used in Cygwin and it can lead to accidentaly loading\nCygwin DLLs into native Windows apps.\n\nHardcoded paths are disabled for MINGW and MSWIN environments only.\nThey are still present on Cygwin and MSYS2, because these POSIX-API\nbased environments don't use LoadLibrary() but dl_open() to load DLLs.",
            "author":"Lars Kanis",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/ffi\/library.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ffi\/ffi\/raw\/09e0c6076466b4383da7fa4e13f714311109945a\/lib%2Fffi%2Flibrary.rb', 'patch': '@@ -125,7 +125,7 @@ def ffi_lib(*names)\\n                 retry\\n               else\\n                 # TODO better library lookup logic\\n-                unless libname.start_with?(\"\/\")\\n+                unless libname.start_with?(\"\/\") || FFI::Platform.windows?\\n                   path = [\\'\/usr\/lib\/\\',\\'\/usr\/local\/lib\/\\'].find do |pth|\\n                     File.exist?(pth + libname)\\n                   end'}}",
            "message_norm":"don't search in hardcoded paths on windows\n\nnative windows apps don't use \"\/usr\" path to store system dlls.\nit's even more harm than good to search through these directories,\nsince they are used in cygwin and it can lead to accidentaly loading\ncygwin dlls into native windows apps.\n\nhardcoded paths are disabled for mingw and mswin environments only.\nthey are still present on cygwin and msys2, because these posix-api\nbased environments don't use loadlibrary() but dl_open() to load dlls.",
            "language":"en",
            "entities":"[('hardcoded', 'SECWORD', ''), ('hardcoded', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ffi\/library.rb'])",
            "num_files":1.0
        },
        {
            "index":3314,
            "vuln_id":"GHSA-wrp6-9w7f-3wxg",
            "cwe_id":"{'CWE-79'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/7ad419dc8c12180e842a82118f4866ac3d074bc5'}",
            "dataset":"osv",
            "summary":"calibre-web is vulnerable to Cross-site Scripting calibre-web is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/janeczku\/calibre-web",
            "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/7ad419dc8c12180e842a82118f4866ac3d074bc5",
            "commit_sha":"7ad419dc8c12180e842a82118f4866ac3d074bc5",
            "patch":"SINGLE",
            "chain_ord":"['7ad419dc8c12180e842a82118f4866ac3d074bc5']",
            "before_first_fix_commit":"{'bcdc97641447965af486964537f3821f47b28874'}",
            "last_fix_commit":"7ad419dc8c12180e842a82118f4866ac3d074bc5",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/20\/2021, 12:40:23",
            "message":"Fix upload of cover and book formats containing html characters",
            "author":"Ozzie Isaacs",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'cps\/static\/js\/edit_books.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/7ad419dc8c12180e842a82118f4866ac3d074bc5\/cps%2Fstatic%2Fjs%2Fedit_books.js', 'patch': '@@ -248,15 +248,15 @@ $(\"#btn-upload-format\").on(\"change\", function () {\\n     if (filename.substring(3, 11) === \"fakepath\") {\\n         filename = filename.substring(12);\\n     } \/\/ Remove c:\\\\fake at beginning from localhost chrome\\n-    $(\"#upload-format\").html(filename);\\n+    $(\"#upload-format\").text(filename);\\n });\\n \\n $(\"#btn-upload-cover\").on(\"change\", function () {\\n     var filename = $(this).val();\\n     if (filename.substring(3, 11) === \"fakepath\") {\\n         filename = filename.substring(12);\\n     } \/\/ Remove c:\\\\fake at beginning from localhost chrome\\n-    $(\"#upload-cover\").html(filename);\\n+    $(\"#upload-cover\").text(filename);\\n });\\n \\n $(\"#xchange\").click(function () {'}}",
            "message_norm":"fix upload of cover and book formats containing html characters",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['cps\/static\/js\/edit_books.js'])",
            "num_files":1.0
        },
        {
            "index":723,
            "vuln_id":"GHSA-5xvc-vgmp-jgc3",
            "cwe_id":"{'CWE-284'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/9e200d974e0cb85d828a6afedb8ab90a37878f28', 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "dataset":"osv",
            "summary":"Improper Access Control in jupyterhub-firstuseauthenticator ### Impact\n\nWhen JupyterHub is used with FirstUseAuthenticator, the vulnerability allows unauthorized access to any user's account if `create_users=True` and the username is known or guessed.\n\n### Patches\n\nUpgrade to jupyterhub-firstuseauthenticator to 1.0, or apply patch https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38.patch\n\n### Workarounds\n\nIf you cannot upgrade, there is no complete workaround, but it can be mitigated.\n\nIf you cannot upgrade yet, you can disable user creation with `c.FirstUseAuthenticator.create_users = False`, which will only allow login with fully normalized usernames for already existing users prior to jupyterhub-firstuserauthenticator 1.0. If any users have never logged in with their normalized username (i.e. lowercase), they will still be vulnerable until you can patch or upgrade.",
            "published_date":"2021-10-28",
            "chain_len":2,
            "project":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator",
            "commit_href":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "commit_sha":"9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "patch":"MULTI",
            "chain_ord":"['32b21898fb2b53b1a2e36270de6854ad70e9e9bf', '9e200d974e0cb85d828a6afedb8ab90a37878f28']",
            "before_first_fix_commit":"{'32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "last_fix_commit":"9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "chain_ord_pos":2.0,
            "commit_datetime":"10\/26\/2021, 07:00:03",
            "message":"Use normalize_username instead of .lower\n\nallows for following normalization changes",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'firstuseauthenticator\/firstuseauthenticator.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/raw\/9e200d974e0cb85d828a6afedb8ab90a37878f28\/firstuseauthenticator%2Ffirstuseauthenticator.py', 'patch': \"@@ -138,7 +138,7 @@ def validate_username(self, name):\\n \\n     @gen.coroutine\\n     def authenticate(self, handler, data):\\n-        username = data['username'].lower()\\n+        username = self.normalize_username(data['username'])\\n \\n         if not self.create_users:\\n             if not self._user_exists(username):\"}}",
            "message_norm":"use normalize_username instead of .lower\n\nallows for following normalization changes",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['firstuseauthenticator\/firstuseauthenticator.py'])",
            "num_files":1.0
        },
        {
            "index":327,
            "vuln_id":"GHSA-3xc7-xg67-pw99",
            "cwe_id":"{'CWE-532'}",
            "score":3.5,
            "chain":"{'https:\/\/github.com\/FelixLC\/cli\/commit\/da59652c061a798282e18efad0b6d0afefa15465'}",
            "dataset":"osv",
            "summary":"Sensitive Data Exposure in sequelize-cli Versions of `sequelize-cli` prior to 5.5.0 are vulnerable to Sensitive Data Exposure. The function `filteredURL()` does not properly sanitize the `config.password` value which may cause passwords with special characters to be logged in plain text.\n\n\n## Recommendation\n\nUpgrade to version 5.5.0 or later.",
            "published_date":"2019-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/FelixLC\/cli",
            "commit_href":"https:\/\/github.com\/FelixLC\/cli\/commit\/da59652c061a798282e18efad0b6d0afefa15465",
            "commit_sha":"da59652c061a798282e18efad0b6d0afefa15465",
            "patch":"SINGLE",
            "chain_ord":"['da59652c061a798282e18efad0b6d0afefa15465']",
            "before_first_fix_commit":"{'139f854f05b76367a0bb5bfcc5a9cf549879f432'}",
            "last_fix_commit":"da59652c061a798282e18efad0b6d0afefa15465",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/04\/2018, 10:53:36",
            "message":"Bug Fix: Special characters in password are not escaped\n\nhttps:\/\/github.com\/sequelize\/cli\/issues\/172 is stil open when special characters find their way in a password",
            "author":"FelixLC",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/helpers\/config-helper.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FelixLC\/cli\/raw\/da59652c061a798282e18efad0b6d0afefa15465\/src%2Fhelpers%2Fconfig-helper.js', 'patch': \"@@ -152,7 +152,7 @@ const api = {\\n   },\\n \\n   filteredUrl (uri, config) {\\n-    const regExp = new RegExp(':?' + (config.password || '') + '@');\\n+    const regExp = new RegExp(':?' + _.escapeRegExp(config.password) + '@');\\n     return uri.replace(regExp, ':*****@');\\n   },\"}}",
            "message_norm":"bug fix: special characters in password are not escaped\n\nhttps:\/\/github.com\/sequelize\/cli\/issues\/172 is stil open when special characters find their way in a password",
            "language":"en",
            "entities":"[('bug', 'FLAW', ''), ('password', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('https:\/\/github.com\/sequelize\/cli\/issues\/172', 'URL', ''), ('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/config-helper.js'])",
            "num_files":1.0
        },
        {
            "index":2304,
            "vuln_id":"GHSA-jv6v-fvvx-4932",
            "cwe_id":"{'CWE-610', 'CWE-73'}",
            "score":6.2,
            "chain":"{'https:\/\/github.com\/octobercms\/october\/commit\/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc'}",
            "dataset":"osv",
            "summary":"Arbitrary File Deletion vulnerability in OctoberCMS ### Impact\nAn attacker can exploit this vulnerability to delete arbitrary local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission.\n\n### Patches\nIssue has been patched in Build 466 (v1.0.466).\n\n### Workarounds\nApply https:\/\/github.com\/octobercms\/october\/commit\/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc to your installation manually if unable to upgrade to Build 466.\n\n### References\nReported by [Sivanesh Ashok](https:\/\/stazot.com\/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1241\" alt=\"Screen Shot 2020-03-31 at 12 16 53 PM\" src=\"https:\/\/user-images.githubusercontent.com\/7253840\/78060872-89354d00-7349-11ea-8c2b-5881b0a50736.png\">",
            "published_date":"2020-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/october",
            "commit_href":"https:\/\/github.com\/octobercms\/october\/commit\/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
            "commit_sha":"2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
            "patch":"SINGLE",
            "chain_ord":"['2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc']",
            "before_first_fix_commit":"{'a9b4a5b2c77afe5ad974455bec69da620b443a5d'}",
            "last_fix_commit":"2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/31\/2020, 09:37:31",
            "message":"Improve asset file path handling",
            "author":"Luke Towers",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'modules\/cms\/classes\/Asset.php': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/october\/raw\/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc\/modules%2Fcms%2Fclasses%2FAsset.php', 'patch': \"@@ -285,7 +285,14 @@ public function getFilePath($fileName = null)\\n             $fileName = $this->fileName;\\n         }\\n \\n-        return $this->theme->getPath().'\/'.$this->dirName.'\/'.$fileName;\\n+        \/\/ Limit paths to those under the assets directory\\n+        $directory = $this->theme->getPath() . '\/' . $this->dirName . '\/';\\n+        $path = realpath($directory . $fileName);\\n+        if (!starts_with($path, $directory)) {\\n+            return false;\\n+        }\\n+\\n+        return $path;\\n     }\\n \\n     \/**\"}}",
            "message_norm":"improve asset file path handling",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('asset', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/cms\/classes\/Asset.php'])",
            "num_files":1.0
        },
        {
            "index":2289,
            "vuln_id":"GHSA-jppv-gw3r-w3q8",
            "cwe_id":"{'CWE-78'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/ruby\/rake\/commit\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee'}",
            "dataset":"osv",
            "summary":"OS Command Injection in Rake There is an OS command injection vulnerability in Ruby Rake before 12.3.3 in Rake::FileList when supplying a filename that begins with the pipe character `|`.",
            "published_date":"2020-02-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/ruby\/rake",
            "commit_href":"https:\/\/github.com\/ruby\/rake\/commit\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "commit_sha":"5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "patch":"SINGLE",
            "chain_ord":"['5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee']",
            "before_first_fix_commit":"{'6497ba4d94d12c123df48cc8ab40f0a4eb7fb337'}",
            "last_fix_commit":"5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/22\/2019, 01:23:43",
            "message":"Use File.open explicitly.",
            "author":"Hiroshi SHIBATA",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/rake\/file_list.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ruby\/rake\/raw\/5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee\/lib%2Frake%2Ffile_list.rb', 'patch': '@@ -294,7 +294,7 @@ def egrep(pattern, *options)\\n       matched = 0\\n       each do |fn|\\n         begin\\n-          open(fn, \"r\", *options) do |inf|\\n+          File.open(fn, \"r\", *options) do |inf|\\n             count = 0\\n             inf.each do |line|\\n               count += 1'}}",
            "message_norm":"use file.open explicitly.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/rake\/file_list.rb'])",
            "num_files":1.0
        },
        {
            "index":3135,
            "vuln_id":"GHSA-vjv6-gq77-3mjw",
            "cwe_id":"{'CWE-611'}",
            "score":9.3,
            "chain":"{'https:\/\/github.com\/mapfish\/mapfish-print\/pull\/1397\/commits\/e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e'}",
            "dataset":"osv",
            "summary":"XXE attack in Mapfish Print ### Impact\nA user can do to an XML External Entity (XXE) attack with the provided SDL style.\n\n### Patches\nUse version >= 3.24\n\n### Workarounds\nNo\n\n### References\n* https:\/\/cwe.mitre.org\/data\/definitions\/611.html\n* https:\/\/github.com\/mapfish\/mapfish-print\/pull\/1397\/commits\/e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e\n\n### For more information\nIf you have any questions or comments about this advisory Comment the pull request: https:\/\/github.com\/mapfish\/mapfish-print\/pull\/1397",
            "published_date":"2020-07-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/mapfish\/mapfish-print",
            "commit_href":"https:\/\/github.com\/mapfish\/mapfish-print\/pull\/1397\/commits\/e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e",
            "commit_sha":"e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e",
            "patch":"SINGLE",
            "chain_ord":"['e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e']",
            "before_first_fix_commit":"{'4b59454140e1bd312c728d99d7de82714000c195'}",
            "last_fix_commit":"e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/02\/2020, 14:25:50",
            "message":"See: https:\/\/github.com\/mapfish\/mapfish-print\/security\/code-scanning\/3?query=ref%3Arefs%2Fheads%2Fmaster",
            "author":"St\u00e9phane Brunner",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'core\/src\/main\/java\/org\/mapfish\/print\/map\/style\/SLDParserPlugin.java': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mapfish\/mapfish-print\/raw\/e1d0527d13db06b2b62ca7d6afb9e97dacd67a0e\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fmapfish%2Fprint%2Fmap%2Fstyle%2FSLDParserPlugin.java', 'patch': '@@ -94,6 +94,7 @@ private Optional<Style> tryLoadSLD(\\n             \/\/ by setting a custom error handler.\\n             DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\\n             dbf.setNamespaceAware(true);\\n+            dbf.setFeature(\"http:\/\/apache.org\/xml\/features\/disallow-doctype-decl\", true);\\n             DocumentBuilder db = dbf.newDocumentBuilder();\\n             db.setErrorHandler(new ErrorHandler());\\n             db.parse(new ByteArrayInputStream(bytes));'}}",
            "message_norm":"see: https:\/\/github.com\/mapfish\/mapfish-print\/security\/code-scanning\/3?query=ref%3arefs%2fheads%2fmaster",
            "language":"en",
            "entities":"[('https:\/\/github.com\/mapfish\/mapfish-print\/security\/code-scanning\/3?query=ref%3arefs%2fheads%2fmaster', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/mapfish\/print\/map\/style\/SLDParserPlugin.java'])",
            "num_files":1.0
        },
        {
            "index":1714,
            "vuln_id":"GHSA-fc42-h7q4-qp8h",
            "cwe_id":"{'CWE-77'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/ssnau\/killport\/commit\/bec8e371f170a12e11cd222ffc7a6e1ae9942638'}",
            "dataset":"osv",
            "summary":"Command Injection in killport This affects the package killport before 1.0.2. If (attacker-controlled) user input is given, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. Running this PoC will cause the command touch success to be executed, leading to the creation of a file called success.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/ssnau\/killport",
            "commit_href":"https:\/\/github.com\/ssnau\/killport\/commit\/bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "commit_sha":"bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "patch":"SINGLE",
            "chain_ord":"['bec8e371f170a12e11cd222ffc7a6e1ae9942638']",
            "before_first_fix_commit":"{'5268f23ea8f152e47182b263d8f7ef20c12a9f28'}",
            "last_fix_commit":"bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2021, 17:26:35",
            "message":"fix a vulnerability issue if a provided port is not a number",
            "author":"ssnau",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'index.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ssnau\/killport\/raw\/bec8e371f170a12e11cd222ffc7a6e1ae9942638\/index.js', 'patch': \"@@ -5,6 +5,7 @@ var notEmpty = function(x) {return x};\\n \\n module.exports = function killport(port) {\\n   return (new Promise(function(resolve, reject) {\\n+    if (!\/^\\\\d+$\/.test(port)) throw new Error('port must be a number.');\\n     var cmd = 'lsof -i:' + port; \\n     cp.exec(cmd, function(err, stdout, stderr){\\n       \/\/ do not check `err`, if no process found\"}}",
            "message_norm":"fix a vulnerability issue if a provided port is not a number",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2952,
            "vuln_id":"GHSA-rhcw-wjcm-9h6g",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/undertow-io\/undertow\/pull\/997\/commits\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90'}",
            "dataset":"osv",
            "summary":"Denial of service in Undertow A flaw was found in the Undertow AJP connector. Malicious requests and abrupt connection closes could be triggered by an attacker using query strings with non-RFC compliant characters resulting in a denial of service. The highest threat from this vulnerability is to system availability. This affects Undertow 2.1.5.SP1, 2.0.33.SP2, and 2.2.3.SP1.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/undertow-io\/undertow",
            "commit_href":"https:\/\/github.com\/undertow-io\/undertow\/pull\/997\/commits\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "commit_sha":"98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "patch":"SINGLE",
            "chain_ord":"['98a9ab7f2d7fe7a7254eaf17d47816c452169c90']",
            "before_first_fix_commit":"{'47dc5e37cb20d8eeb4d4f632fe959d436f86128a'}",
            "last_fix_commit":"98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/29\/2020, 13:24:40",
            "message":"UNDERTOW-1813 Make PathResourceManager.getResource rethrow a SecurityException",
            "author":"Boris Unckel",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'core\/src\/main\/java\/io\/undertow\/server\/handlers\/resource\/PathResourceManager.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/undertow-io\/undertow\/raw\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90\/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fserver%2Fhandlers%2Fresource%2FPathResourceManager.java', 'patch': '@@ -230,9 +230,15 @@ public Resource getResource(final String p) {\\n                 log.tracef(\"Failed to get path resource %s from path resource manager with base %s, as the path did not exist\", p, base);\\n                 return null;\\n             }\\n-        } catch (Exception e) {\\n+        } catch (IOException e) {\\n             UndertowLogger.REQUEST_LOGGER.debugf(e, \"Invalid path %s\", p);\\n             return null;\\n+        } catch (SecurityException e) {\\n+            UndertowLogger.REQUEST_LOGGER.errorf(e, \"Missing JSM permissions for path %s\", p);\\n+            throw e;\\n+        } catch (Exception e) {\\n+            UndertowLogger.REQUEST_LOGGER.debugf(e, \"Other issue for path %s\", p);\\n+            return null;\\n         }\\n     }'}}",
            "message_norm":"undertow-1813 make pathresourcemanager.getresource rethrow a securityexception",
            "language":"en",
            "entities":"[('securityexception', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/io\/undertow\/server\/handlers\/resource\/PathResourceManager.java'])",
            "num_files":1.0
        },
        {
            "index":469,
            "vuln_id":"GHSA-4r8q-gv9j-3xx6",
            "cwe_id":"{'CWE-601'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/tenancy\/multi-tenant\/commit\/9c837a21bccce9bcaeb90033ef200d84f0d9e164'}",
            "dataset":"osv",
            "summary":"Open Redirect ### Impact\nIn some situations, it is possible to have open redirects where users can be redirected from your site to any other site using a specially crafted URL.\nThis is only the case for installations where the default Hostname Identification is used and the environment uses tenants that have `force_https` set to `true` (default: `false`)\n\n### Patches\nVersion 5.7.2 contains the relevant patches to fix this bug. Stripping the URL from special characters to prevent specially crafted URL's from being redirected to.\n\n### Workarounds\nThere is a simple way to work around the security issue\n- Set the `force_https` to every tenant to `false`\n\n### References\nhttps:\/\/nvd.nist.gov\/vuln\/detail\/CVE-2018-11784\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Contact us in Discord: https:\/\/tenancy.dev\/chat",
            "published_date":"2022-03-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/tenancy\/multi-tenant",
            "commit_href":"https:\/\/github.com\/tenancy\/multi-tenant\/commit\/9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "commit_sha":"9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "patch":"SINGLE",
            "chain_ord":"['9c837a21bccce9bcaeb90033ef200d84f0d9e164']",
            "before_first_fix_commit":"{'41150dce84288f24ff68c8df433a45f966a60865'}",
            "last_fix_commit":"9c837a21bccce9bcaeb90033ef200d84f0d9e164",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/27\/2021, 04:40:08",
            "message":"Trim slashes from request uri before redirecting (#1001)",
            "author":"Jasper Zonneveld",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/Middleware\/HostnameActions.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tenancy\/multi-tenant\/raw\/9c837a21bccce9bcaeb90033ef200d84f0d9e164\/src%2FMiddleware%2FHostnameActions.php', 'patch': \"@@ -95,7 +95,7 @@ protected function secure(Hostname $hostname, Request $request)\\n     {\\n         $this->emitEvent(new Secured($hostname));\\n \\n-        return $this->redirect->secure($request->getRequestUri());\\n+        return $this->redirect->secure(ltrim($request->getRequestUri(), '\/'));\\n     }\\n \\n     \/**\"}}",
            "message_norm":"trim slashes from request uri before redirecting (#1001)",
            "language":"en",
            "entities":"[('#1001', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Middleware\/HostnameActions.php'])",
            "num_files":1.0
        },
        {
            "index":3293,
            "vuln_id":"GHSA-wm7h-9275-46v2",
            "cwe_id":"{'CWE-248'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mscdex\/dicer\/pull\/22\/commits\/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac'}",
            "dataset":"osv",
            "summary":"Crash in HeaderParser in dicer This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. A complete denial of service can be achived by sending the malicious form in a loop.",
            "published_date":"2022-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/mscdex\/dicer",
            "commit_href":"https:\/\/github.com\/mscdex\/dicer\/pull\/22\/commits\/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
            "commit_sha":"b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
            "patch":"SINGLE",
            "chain_ord":"['b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac']",
            "before_first_fix_commit":"{'524254c4af4e8f2ed070facac8f6d91538b41eef'}",
            "last_fix_commit":"b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/10\/2021, 09:41:48",
            "message":"removed bug caused by uninitialized variable h in function HeaderParser.prototype._parseHeader",
            "author":"Roland Heinze",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 18, 'total': 38}",
            "files":"{'lib\/HeaderParser.js': {'additions': 20, 'deletions': 18, 'changes': 38, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mscdex\/dicer\/raw\/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac\/lib%2FHeaderParser.js', 'patch': \"@@ -82,26 +82,28 @@ HeaderParser.prototype._parseHeader = function() {\\n       \/\/ folded header content\\n       \/\/ RFC2822 says to just remove the CRLF and not the whitespace following\\n       \/\/ it, so we follow the RFC and include the leading whitespace ...\\n-      this.header[h][this.header[h].length - 1] += lines[i];\\n-    } else {\\n-      m = RE_HDR.exec(lines[i]);\\n-      if (m) {\\n-        h = m[1].toLowerCase();\\n-        if (m[2]) {\\n-          if (this.header[h] === undefined)\\n-            this.header[h] = [m[2]];\\n-          else\\n-            this.header[h].push(m[2]);\\n-        } else\\n-          this.header[h] = [''];\\n-        if (++this.npairs === this.maxHeaderPairs)\\n-          break;\\n-      } else {\\n-        this.buffer = lines[i];\\n-        modded = true;\\n-        break;\\n+      if (h) {\\n+        this.header[h][this.header[h].length - 1] += lines[i];\\n+        continue;\\n       }\\n     }\\n+    m = RE_HDR.exec(lines[i]);\\n+    if (m) {\\n+      h = m[1].toLowerCase();\\n+      if (m[2]) {\\n+        if (this.header[h] === undefined)\\n+          this.header[h] = [m[2]];\\n+        else\\n+          this.header[h].push(m[2]);\\n+      } else\\n+        this.header[h] = [''];\\n+      if (++this.npairs === this.maxHeaderPairs)\\n+        break;\\n+    } else {\\n+      this.buffer = lines[i];\\n+      modded = true;\\n+      break;\\n+    }\\n   }\\n   if (!modded)\\n     this.buffer = '';\"}}",
            "message_norm":"removed bug caused by uninitialized variable h in function headerparser.prototype._parseheader",
            "language":"en",
            "entities":"[('removed', 'ACTION', ''), ('bug', 'FLAW', ''), ('uninitialized', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/HeaderParser.js'])",
            "num_files":1.0
        },
        {
            "index":1167,
            "vuln_id":"GHSA-88cw-3m6x-49f7",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/pull\/6528\/commits\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1'}",
            "dataset":"osv",
            "summary":"Out-of-bounds Write in ChakraCore Chakra Scripting Engine Memory Corruption Vulnerability This CVE ID is unique from CVE-2020-17048.",
            "published_date":"2021-08-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/pull\/6528\/commits\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "commit_sha":"e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "patch":"SINGLE",
            "chain_ord":"['e81e8a51ec7ba3d0dfb6089254f166c2733216e1']",
            "before_first_fix_commit":"{'90e222e9a9ba64bd808666f44e6a0913d6318f78'}",
            "last_fix_commit":"e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/30\/2020, 22:00:01",
            "message":"[CVE-2020-17054]",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 2, 'total': 7}",
            "files":"{'lib\/Backend\/Lower.cpp': {'additions': 5, 'deletions': 2, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1\/lib%2FBackend%2FLower.cpp', 'patch': '@@ -27152,8 +27152,11 @@ void Lowerer::LowerLdFrameDisplay(IR::Instr *instr, bool doStackFrameDisplay)\\n         if (instr->m_func != this->m_func && this->m_func->DoStackFrameDisplay())\\n         {\\n             StackSym * inlineeFrameDisplaySym = instr->m_func->GetLocalFrameDisplaySym();\\n-            Assert(inlineeFrameDisplaySym->IsAllocated());\\n-            InsertMove(IR::SymOpnd::New(inlineeFrameDisplaySym, TyMachReg, m_func), dstOpnd, instr);\\n+            Assert((inlineeFrameDisplaySym && inlineeFrameDisplaySym->IsAllocated()) || this->m_func->IsLoopBody());\\n+            if (inlineeFrameDisplaySym && inlineeFrameDisplaySym->IsAllocated())\\n+            {\\n+                InsertMove(IR::SymOpnd::New(inlineeFrameDisplaySym, TyMachReg, m_func), dstOpnd, instr);\\n+            }\\n         }\\n     }'}}",
            "message_norm":"[cve-2020-17054]",
            "language":"ro",
            "entities":"[('cve-2020-17054', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/Lower.cpp'])",
            "num_files":1.0
        },
        {
            "index":1724,
            "vuln_id":"GHSA-ffhg-7mh4-33c4",
            "cwe_id":"{'CWE-347'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/golang\/crypto\/commit\/bac4c82f69751a6dd76e702d54b3ceb88adab236'}",
            "dataset":"osv",
            "summary":"Improper Verification of Cryptographic Signature in golang.org\/x\/crypto golang.org\/x\/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org\/x\/crypto\/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/golang\/crypto",
            "commit_href":"https:\/\/github.com\/golang\/crypto\/commit\/bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "commit_sha":"bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "patch":"SINGLE",
            "chain_ord":"['bac4c82f69751a6dd76e702d54b3ceb88adab236']",
            "before_first_fix_commit":"{'1ad67e1f0ef495d4014b6ffd8f2cf80f91fffbce'}",
            "last_fix_commit":"bac4c82f69751a6dd76e702d54b3ceb88adab236",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2020, 23:53:37",
            "message":"ssh: return an error for malformed ed25519 public keys rather than panic\n\nAn attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. Clients can deliver such a public key and signature\nto any golang.org\/x\/crypto\/ssh server with a PublicKeyCallback, and\nservers can deliver them to any golang.org\/x\/crypto\/ssh client.\n\nThis issue was discovered and reported by Alex Gaynor, Fish in a Barrel,\nand is tracked as CVE-2020-9283.\n\nChange-Id: Ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nReviewed-on: https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357\nRun-TryBot: Filippo Valsorda <filippo@golang.org>\nReviewed-by: Katie Hockman <katie@golang.org>\nTryBot-Result: Gobot Gobot <gobot@golang.org>",
            "author":"Filippo Valsorda",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 8, 'total': 28}",
            "files":"{'ssh\/keys.go': {'additions': 20, 'deletions': 8, 'changes': 28, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/golang\/crypto\/raw\/bac4c82f69751a6dd76e702d54b3ceb88adab236\/ssh%2Fkeys.go', 'patch': '@@ -562,9 +562,11 @@ func parseED25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n-\\tkey := ed25519.PublicKey(w.KeyBytes)\\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\treturn (ed25519PublicKey)(key), w.Rest, nil\\n+\\treturn ed25519PublicKey(w.KeyBytes), w.Rest, nil\\n }\\n \\n func (k ed25519PublicKey) Marshal() []byte {\\n@@ -582,9 +584,11 @@ func (k ed25519PublicKey) Verify(b []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n-\\tedKey := (ed25519.PublicKey)(k)\\n-\\tif ok := ed25519.Verify(edKey, b, sig.Blob); !ok {\\n+\\tif ok := ed25519.Verify(ed25519.PublicKey(k), b, sig.Blob); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -838,6 +842,10 @@ func parseSKEd25519(in []byte) (out PublicKey, rest []byte, err error) {\\n \\t\\treturn nil, nil, err\\n \\t}\\n \\n+\\tif l := len(w.KeyBytes); l != ed25519.PublicKeySize {\\n+\\t\\treturn nil, nil, fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n+\\n \\tkey := new(skEd25519PublicKey)\\n \\tkey.application = w.Application\\n \\tkey.PublicKey = ed25519.PublicKey(w.KeyBytes)\\n@@ -862,6 +870,9 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\tif sig.Format != k.Type() {\\n \\t\\treturn fmt.Errorf(\"ssh: signature type %s for key type %s\", sig.Format, k.Type())\\n \\t}\\n+\\tif l := len(k.PublicKey); l != ed25519.PublicKeySize {\\n+\\t\\treturn fmt.Errorf(\"invalid size %d for Ed25519 public key\", l)\\n+\\t}\\n \\n \\th := sha256.New()\\n \\th.Write([]byte(k.application))\\n@@ -898,8 +909,7 @@ func (k *skEd25519PublicKey) Verify(data []byte, sig *Signature) error {\\n \\n \\toriginal := Marshal(blob)\\n \\n-\\tedKey := (ed25519.PublicKey)(k.PublicKey)\\n-\\tif ok := ed25519.Verify(edKey, original, edSig.Signature); !ok {\\n+\\tif ok := ed25519.Verify(k.PublicKey, original, edSig.Signature); !ok {\\n \\t\\treturn errors.New(\"ssh: signature did not verify\")\\n \\t}\\n \\n@@ -1051,7 +1061,10 @@ func NewPublicKey(key interface{}) (PublicKey, error) {\\n \\tcase *dsa.PublicKey:\\n \\t\\treturn (*dsaPublicKey)(key), nil\\n \\tcase ed25519.PublicKey:\\n-\\t\\treturn (ed25519PublicKey)(key), nil\\n+\\t\\tif l := len(key); l != ed25519.PublicKeySize {\\n+\\t\\t\\treturn nil, fmt.Errorf(\"ssh: invalid size %d for Ed25519 public key\", l)\\n+\\t\\t}\\n+\\t\\treturn ed25519PublicKey(key), nil\\n \\tdefault:\\n \\t\\treturn nil, fmt.Errorf(\"ssh: unsupported key type %T\", key)\\n \\t}\\n@@ -1304,7 +1317,6 @@ func parseOpenSSHPrivateKey(key []byte, decrypt openSSHDecryptFunc) (crypto.Priv\\n \\t\\treturn nil, errors.New(\"ssh: malformed OpenSSH key\")\\n \\t}\\n \\n-\\t\/\/ we only handle ed25519 and rsa keys currently\\n \\tswitch pk1.Keytype {\\n \\tcase KeyAlgoRSA:\\n \\t\\t\/\/ https:\/\/github.com\/openssh\/openssh-portable\/blob\/master\/sshkey.c#L2760-L2773'}}",
            "message_norm":"ssh: return an error for malformed ed25519 public keys rather than panic\n\nan attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com\npublic key, such that the library will panic when trying to verify a\nsignature with it. clients can deliver such a public key and signature\nto any golang.org\/x\/crypto\/ssh server with a publickeycallback, and\nservers can deliver them to any golang.org\/x\/crypto\/ssh client.\n\nthis issue was discovered and reported by alex gaynor, fish in a barrel,\nand is tracked as cve-2020-9283.\n\nchange-id: ie25b78a0b0181fbbc8cc7de4f4e27d908777529c\nreviewed-on: https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357\nrun-trybot: filippo valsorda <filippo@golang.org>\nreviewed-by: katie hockman <katie@golang.org>\ntrybot-result: gobot gobot <gobot@golang.org>",
            "language":"en",
            "entities":"[('ssh', 'SECWORD', ''), ('error', 'FLAW', ''), ('ed25519', 'SHA', 'generic_sha'), ('public keys', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('ssh', 'SECWORD', ''), ('ed25519', 'SHA', 'generic_sha'), ('public key', 'SECWORD', ''), ('verify', 'ACTION', ''), ('signature', 'SECWORD', ''), ('public key', 'SECWORD', ''), ('signature', 'SECWORD', ''), ('golang.org\/x\/crypto\/ssh', 'SECWORD', ''), ('server', 'SECWORD', ''), ('publickeycallback', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('golang.org\/x\/crypto\/ssh', 'SECWORD', ''), ('issue', 'FLAW', ''), ('cve-2020-9283', 'VULNID', 'CVE'), ('https:\/\/go-review.googlesource.com\/c\/crypto\/+\/220357', 'SECWORD', ''), ('filippo@golang.org', 'EMAIL', ''), ('katie@golang.org', 'EMAIL', ''), ('gobot@golang.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ssh\/keys.go'])",
            "num_files":1.0
        },
        {
            "index":782,
            "vuln_id":"GHSA-686h-j8r8-wmfm",
            "cwe_id":"{'CWE-362', 'CWE-77'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/Xudong-Huang\/rcu_cell\/pull\/4\/commits\/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2'}",
            "dataset":"osv",
            "summary":"Data races in rcu_cell Affected versions of this crate unconditionally implement Send\/Sync for `RcuCell<T>`.\nThis allows users to send `T: !Send` to other threads (while `T` enclosed within `RcuCell<T>`), and allows users to concurrently access `T: !Sync` by using the APIs of `RcuCell<T>` that provide access to `&T`.\n\nThis can result in memory corruption caused by data races.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/Xudong-Huang\/rcu_cell",
            "commit_href":"https:\/\/github.com\/Xudong-Huang\/rcu_cell\/pull\/4\/commits\/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
            "commit_sha":"1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
            "patch":"SINGLE",
            "chain_ord":"['1faf18eee11f14969b77ae0f76dcd9ebd437d0c2']",
            "before_first_fix_commit":"{'0e4dc8cd07002a583462994ab4bcfecdf3338fae'}",
            "last_fix_commit":"1faf18eee11f14969b77ae0f76dcd9ebd437d0c2",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/20\/2021, 03:33:02",
            "message":"Fix Send\/Sync impl of RcuCell<T>",
            "author":"JOE1994",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Xudong-Huang\/rcu_cell\/raw\/1faf18eee11f14969b77ae0f76dcd9ebd437d0c2\/src%2Flib.rs', 'patch': '@@ -372,8 +372,8 @@ pub struct RcuCell<T> {\\n     link: LinkWrapper<T>,\\n }\\n \\n-unsafe impl<T> Send for RcuCell<T> {}\\n-unsafe impl<T> Sync for RcuCell<T> {}\\n+unsafe impl<T: Send> Send for RcuCell<T> {}\\n+unsafe impl<T: Sync> Sync for RcuCell<T> {}\\n \\n impl<T> Default for RcuCell<T> {\\n     fn default() -> Self {'}}",
            "message_norm":"fix send\/sync impl of rcucell<t>",
            "language":"en",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":1684,
            "vuln_id":"GHSA-f7f6-xrwc-9c57",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier bundled a version of the commons-fileupload library with the denial-of-service vulnerability known as CVE-2016-3092. The fix for that vulnerability has been backported to the version of the library bundled with Jenkins.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "commit_sha":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "patch":"SINGLE",
            "chain_ord":"['ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b']",
            "before_first_fix_commit":"{'fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0'}",
            "last_fix_commit":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/29\/2017, 13:41:00",
            "message":"[SECURITY-490] Patch Commons File Upload 1.3.x.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'core\/pom.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b\/core%2Fpom.xml', 'patch': '@@ -588,7 +588,7 @@ THE SOFTWARE.\\n     <dependency>\\n       <groupId>commons-fileupload<\/groupId>\\n       <artifactId>commons-fileupload<\/artifactId>\\n-      <version>1.3.1-jenkins-1<\/version>\\n+      <version>1.3.1-jenkins-2<\/version> \\n     <\/dependency>\\n \\n     <!-- offline profiler API to put in the classpath if we need it -->'}}",
            "message_norm":"[security-490] patch commons file upload 1.3.x.",
            "language":"en",
            "entities":"[('security-490', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/pom.xml'])",
            "num_files":1.0
        },
        {
            "index":124,
            "vuln_id":"GHSA-2p9q-h29j-3f5v",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7'}",
            "dataset":"osv",
            "summary":"Missing validation causes `TensorSummaryV2` to crash ### Impact\nThe implementation of [`tf.raw_ops.TensorSummaryV2`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array('test'),\n  tensor=np.array(3),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))\n```\n\nThe code assumes `axis` is a scalar but there is no validation for this.\n\n```cc\n    const Tensor& serialized_summary_metadata_tensor = c->input(2);\n    \/\/ ...\n    ParseFromTString(serialized_summary_metadata_tensor.scalar<tstring>()(),\n                     v->mutable_metadata());\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University.",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
            "commit_sha":"290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
            "patch":"SINGLE",
            "chain_ord":"['290bb05c80c327ed74fae1d089f1001b1e2a4ef7']",
            "before_first_fix_commit":"{'263ad6ad211921b34c5fa5c3460e177d855d1101'}",
            "last_fix_commit":"290bb05c80c327ed74fae1d089f1001b1e2a4ef7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2022, 18:02:25",
            "message":"Fix tf.raw_ops.TensorSummaryV2 vulnerability with invalid serialized_summary_metadata.\n\nCheck that input is actually a scalar before treating it as such.\n\nPiperOrigin-RevId: 445197183",
            "author":"Alan Liu",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/summary_tensor_op.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/290bb05c80c327ed74fae1d089f1001b1e2a4ef7\/tensorflow%2Fcore%2Fkernels%2Fsummary_tensor_op.cc', 'patch': '@@ -36,6 +36,10 @@ class SummaryTensorOpV2 : public OpKernel {\\n                 errors::InvalidArgument(\"tag must be scalar\"));\\n     const Tensor& tensor = c->input(1);\\n     const Tensor& serialized_summary_metadata_tensor = c->input(2);\\n+    OP_REQUIRES(\\n+        c,\\n+        TensorShapeUtils::IsScalar(serialized_summary_metadata_tensor.shape()),\\n+        errors::InvalidArgument(\"serialized_summary_metadata must be scalar\"));\\n \\n     Summary s;\\n     Summary::Value* v = s.add_value();'}}",
            "message_norm":"fix tf.raw_ops.tensorsummaryv2 vulnerability with invalid serialized_summary_metadata.\n\ncheck that input is actually a scalar before treating it as such.\n\npiperorigin-revid: 445197183",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('serialized_summary_metadata', 'SECWORD', ''), ('445197183', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/summary_tensor_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1932,
            "vuln_id":"GHSA-grw5-g9h2-wpg8",
            "cwe_id":"{'CWE-79'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/wenzhixin\/bootstrap-table\/commit\/b4a1e5dd332be652e0bc376fd9256886cf4bbde9'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in bootstrap-table Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin\/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties.",
            "published_date":"2022-05-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/wenzhixin\/bootstrap-table",
            "commit_href":"https:\/\/github.com\/wenzhixin\/bootstrap-table\/commit\/b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
            "commit_sha":"b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
            "patch":"SINGLE",
            "chain_ord":"['b4a1e5dd332be652e0bc376fd9256886cf4bbde9']",
            "before_first_fix_commit":"{'55d3760df3d226ac1150d7ddcbfd0ff6bd1c53c2'}",
            "last_fix_commit":"b4a1e5dd332be652e0bc376fd9256886cf4bbde9",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/10\/2022, 02:59:07",
            "message":"Fixed XSS vulnerability bug by onCellHtmlData",
            "author":"zhixin",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 16, 'total': 20}",
            "files":"{'src\/extensions\/export\/bootstrap-table-export.js': {'additions': 4, 'deletions': 16, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/wenzhixin\/bootstrap-table\/raw\/b4a1e5dd332be652e0bc376fd9256886cf4bbde9\/src%2Fextensions%2Fexport%2Fbootstrap-table-export.js', 'patch': \"@@ -23,15 +23,7 @@ $.extend($.fn.bootstrapTable.defaults, {\\n   showExport: false,\\n   exportDataType: 'basic', \/\/ basic, all, selected\\n   exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],\\n-  exportOptions: {\\n-    onCellHtmlData (cell, rowIndex, colIndex, htmlData) {\\n-      if (cell.is('th')) {\\n-        return cell.find('.th-inner').text()\\n-      }\\n-\\n-      return htmlData\\n-    }\\n-  },\\n+  exportOptions: {},\\n   exportFooter: false\\n })\\n \\n@@ -162,13 +154,9 @@ $.BootstrapTable = class extends $.BootstrapTable {\\n     $exportButtons.click(e => {\\n       e.preventDefault()\\n \\n-      const type = $(e.currentTarget).data('type')\\n-      const exportOptions = {\\n-        type,\\n-        escape: false\\n-      }\\n-\\n-      this.exportTable(exportOptions)\\n+      this.exportTable({\\n+        type: $(e.currentTarget).data('type')\\n+      })\\n     })\\n     this.handleToolbar()\\n   }\"}}",
            "message_norm":"fixed xss vulnerability bug by oncellhtmldata",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/extensions\/export\/bootstrap-table-export.js'])",
            "num_files":1.0
        },
        {
            "index":349,
            "vuln_id":"GHSA-43m5-c88r-cjvv",
            "cwe_id":"{'CWE-352'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments\/commit\/cf43beedb05131937ef46f365ab0a0c6fa6ac618'}",
            "dataset":"osv",
            "summary":"XSS due to lack of CSRF validation for replying\/publishing ### Impact\nDue to lack of CSRF validation, a logged in user is potentially vulnerable to an XSS attack which could allow a third party to post on their behalf on the forum.\n\n### Patches\nUpgrade to the latest version v0.7.0\n\n### Workarounds\nYou can cherry-pick the following commit: [https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments\/commit\/cf43beedb05131937ef46f365ab0a0c6fa6ac618](https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments\/commit\/cf43beedb05131937ef46f365ab0a0c6fa6ac618)\n\n### References\nVisit https:\/\/community.nodebb.org if you have any questions about this issue or on how to patch \/ upgrade your instance.",
            "published_date":"2020-08-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments",
            "commit_href":"https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments\/commit\/cf43beedb05131937ef46f365ab0a0c6fa6ac618",
            "commit_sha":"cf43beedb05131937ef46f365ab0a0c6fa6ac618",
            "patch":"SINGLE",
            "chain_ord":"['cf43beedb05131937ef46f365ab0a0c6fa6ac618']",
            "before_first_fix_commit":"{'ed0156594a44c6429743e314e9b5a313fad60730'}",
            "last_fix_commit":"cf43beedb05131937ef46f365ab0a0c6fa6ac618",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/20\/2020, 05:11:57",
            "message":"fix: CSRF issues",
            "author":"psychobunny",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'library.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/psychobunny\/nodebb-plugin-blog-comments\/raw\/cf43beedb05131937ef46f365ab0a0c6fa6ac618\/library.js', 'patch': \"@@ -248,8 +248,8 @@\\n \\t\\t});\\n \\n \\t\\tapp.get('\/comments\/get\/:id\/:pagination?', middleware.applyCSRF, Comments.getCommentData);\\n-\\t\\tapp.post('\/comments\/reply', Comments.replyToComment);\\n-\\t\\tapp.post('\/comments\/publish', Comments.publishArticle);\\n+\\t\\tapp.post('\/comments\/reply', middleware.applyCSRF, Comments.replyToComment);\\n+\\t\\tapp.post('\/comments\/publish', middleware.applyCSRF, Comments.publishArticle);\\n \\n \\t\\tapp.get('\/admin\/blog-comments', middleware.admin.buildHeader, renderAdmin);\\n \\t\\tapp.get('\/api\/admin\/blog-comments', renderAdmin);\"}}",
            "message_norm":"fix: csrf issues",
            "language":"en",
            "entities":"[('csrf', 'SECWORD', ''), ('issues', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['library.js'])",
            "num_files":1.0
        },
        {
            "index":208,
            "vuln_id":"GHSA-374m-jm66-3vj8",
            "cwe_id":"{'CWE-125'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f410212e373eb2aec4c9e60bf3702eba99a38aba'}",
            "dataset":"osv",
            "summary":"Heap OOB in `SparseBinCount` ### Impact\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e71b86d47f8bc1816bf54d7bddc4170e47670b97\/tensorflow\/core\/kernels\/bincount_op.cc#L353-L417) of `SparseBinCount` is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n  \n  \ntf.raw_ops.SparseBincount(\n  indices=[[0],[1],[2]]\n  values=[0,-10000000]\n  dense_shape=[1,1]\n  size=[1]\n  weights=[3,2,1]\n  binary_output=False)\n```\n\nThis is because of missing validation between the elements of the `values` argument and the shape of the sparse output:\n\n\n```cc\nfor (int64_t i = 0; i < indices_mat.dimension(0); ++i) {\n  const int64_t batch = indices_mat(i, 0);\n  const Tidx bin = values(i);\n  ...\n  out(batch, bin) = ...;\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f410212e373eb2aec4c9e60bf3702eba99a38aba](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f410212e373eb2aec4c9e60bf3702eba99a38aba).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f410212e373eb2aec4c9e60bf3702eba99a38aba",
            "commit_sha":"f410212e373eb2aec4c9e60bf3702eba99a38aba",
            "patch":"SINGLE",
            "chain_ord":"['f410212e373eb2aec4c9e60bf3702eba99a38aba']",
            "before_first_fix_commit":"{'4656caa7d74420454da967288af143ec73fb4c9b'}",
            "last_fix_commit":"f410212e373eb2aec4c9e60bf3702eba99a38aba",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/30\/2021, 13:36:55",
            "message":"Prevent out-of-bound accesses in SparseBincount.\n\nPiperOrigin-RevId: 399918616\nChange-Id: I11d154f4444d3fde1f09c5c40628b8671791a30d",
            "author":"Penporn Koanantakool",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/bincount_op.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f410212e373eb2aec4c9e60bf3702eba99a38aba\/tensorflow%2Fcore%2Fkernels%2Fbincount_op.cc', 'patch': '@@ -405,6 +405,16 @@ class SparseBincountOp : public OpKernel {\\n       for (int64_t i = 0; i < indices_mat.dimension(0); ++i) {\\n         const int64_t batch = indices_mat(i, 0);\\n         const Tidx bin = values(i);\\n+        OP_REQUIRES(\\n+            ctx, batch < out.dimension(0),\\n+            errors::InvalidArgument(\"Index out of bound. `batch` (\", batch,\\n+                                    \") must be less than the dimension size (\",\\n+                                    out.dimension(0), \").\"));\\n+        OP_REQUIRES(\\n+            ctx, bin < out.dimension(1),\\n+            errors::InvalidArgument(\"Index out ouf bound. `bin` (\", bin,\\n+                                    \") must be less then the dimension size (\",\\n+                                    out.dimension(1), \").\"));\\n         if (bin < size) {\\n           if (binary_output_) {\\n             out(batch, bin) = T(1);'}}",
            "message_norm":"prevent out-of-bound accesses in sparsebincount.\n\npiperorigin-revid: 399918616\nchange-id: i11d154f4444d3fde1f09c5c40628b8671791a30d",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('out-of-bound', 'SECWORD', ''), ('399918616', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/bincount_op.cc'])",
            "num_files":1.0
        },
        {
            "index":784,
            "vuln_id":"GHSA-6898-wx94-8jq8",
            "cwe_id":"{'CWE-74'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mytrile\/node-libnotify\/commit\/dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448'}",
            "dataset":"osv",
            "summary":"Potential Command Injection in libnotify Versions 1.0.3 and earlier of libnotify are affected by a shell command injection vulnerability. This may result in execution of arbitrary shell commands, if user input is passed into libnotify.notify.\n\nUntrusted input passed in the call to libnotify.notify could result in execution of shell commands. Callers may be unaware of this.\n\n### Example\n```\nvar libnotify = require('libnotify')\nlibnotify.notify('UNTRUSTED INPUT', { title: \\\"\\\" }, function () {\n    console.log(arguments);\n})\n```\n\nSpecial thanks to Neal Poole for submitting the pull request to fix this issue.\n\n\n## Recommendation\n\nUpdate to version 1.0.4 or greater",
            "published_date":"2020-08-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/mytrile\/node-libnotify",
            "commit_href":"https:\/\/github.com\/mytrile\/node-libnotify\/commit\/dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448",
            "commit_sha":"dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448",
            "patch":"SINGLE",
            "chain_ord":"['dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448']",
            "before_first_fix_commit":"{'8e2e7306088624503ba5eec592b502c4f97d8846', '688e135134c4e45abf18d42ddb85a7ab8c9a7ab8'}",
            "last_fix_commit":"dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/14\/2013, 19:46:34",
            "message":"Merge pull request #4 from nealpoole\/exec-fix\n\nReplacing call to exec with execFile.",
            "author":"Dimitar Kostov",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 5, 'total': 9}",
            "files":"{'lib\/libnotify.js': {'additions': 4, 'deletions': 5, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mytrile\/node-libnotify\/raw\/dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448\/lib%2Flibnotify.js', 'patch': '@@ -55,18 +55,17 @@ exports.binVersion = function(callback) {\\n \\n exports.notify = function(msg, options, callback) {\\n   var image,\\n-      args = [\\'notify-send\\',\\'\"\\' + msg + \\'\"\\'],\\n+      args = [msg],\\n       options = options || {}\\n   this.binVersion(function(err, version){\\n     if (err) return callback(err)\\n-    if (image = options.image) args.push(\\'-i \\' + image)\\n+    if (image = options.image) args.push(\\'-i\\', image)\\n     if (options.time) args.push(\\'-t\\', options.time)\\n     if (options.category) args.push(\\'-c\\', options.category)\\n     if (options.urgency) args.push(\\'-u\\', options.urgency)\\n     if (options.title) {\\n-      args.shift()\\n-      args.unshift(\\'notify-send\\', \\'\"\\'+ options.title +\\'\"\\')\\n+      args.unshift(options.title)\\n     }\\n-    child_process.exec(args.join(\\' \\'), callback)\\n+    child_process.execFile(\\'notify-send\\', args, {}, callback)\\n   })\\n }'}}",
            "message_norm":"merge pull request #4 from nealpoole\/exec-fix\n\nreplacing call to exec with execfile.",
            "language":"en",
            "entities":"[('#4', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/libnotify.js'])",
            "num_files":1.0
        },
        {
            "index":3029,
            "vuln_id":"GHSA-v222-6mr4-qj29",
            "cwe_id":"{'CWE-78'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee', 'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/c7ea001a597c7033575342c51483dab7b87ae155'}",
            "dataset":"osv",
            "summary":"Command Injection vulnerability in asciidoctor-include-ext ### Impact\n\nApplications using [Asciidoctor (Ruby)](https:\/\/github.com\/asciidoctor\/asciidoctor) with [asciidoctor-include-ext](https:\/\/github.com\/jirutka\/asciidoctor-include-ext) (prior to version 0.4.0), which render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. ~~This attack is possible even when `allow-uri-read` is disabled!~~ (EDIT: it\u2019s not)\n\n\n### Patches\n\nThe vulnerability has been fixed in commit c7ea001 (and further improved in cbaccf3), which is included in version [0.4.0](https:\/\/rubygems.org\/gems\/asciidoctor-include-ext\/versions\/0.4.0).\n\n### Workarounds\n\n```rb\nrequire 'asciidoctor\/include_ext'\n\nclass Asciidoctor::IncludeExt::IncludeProcessor\n  # Overrides superclass private method to mitigate Command Injection\n  # vulnerability in asciidoctor-include-ext <0.4.0.\n  def target_uri?(target)\n    target.downcase.start_with?('http:\/\/', 'https:\/\/') \\\n      && URI.parse(target).is_a?(URI::HTTP)\n  rescue URI::InvalidURIError\n    false\n  end\nend\n```\n\n### References\n\n* https:\/\/sakurity.com\/blog\/2015\/02\/28\/openuri.html\n\n### Credits\n\nThis vulnerability was discovered by Joern Schneeweisz from the GitLab Security Research Team.\n\n\n### For more information\n\nSee commit message c7ea001.\n\nIf you have any questions or comments about this advisory open an issue in [jirutka\/asciidoctor-include-ext](https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/issues\/).",
            "published_date":"2022-03-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/jirutka\/asciidoctor-include-ext",
            "commit_href":"https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/commit\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "commit_sha":"cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "patch":"MULTI",
            "chain_ord":"['c7ea001a597c7033575342c51483dab7b87ae155', 'cbaccf3de533cbca224bf61d0b74e4b84d41d8ee']",
            "before_first_fix_commit":"{'c7ea001a597c7033575342c51483dab7b87ae155'}",
            "last_fix_commit":"cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/29\/2022, 22:50:30",
            "message":"Make #read_lines code more robust, avoid using IO.open directly",
            "author":"Jakub Jirutka",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 4, 'total': 14}",
            "files":"{'lib\/asciidoctor\/include_ext\/include_processor.rb': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jirutka\/asciidoctor-include-ext\/raw\/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee\/lib%2Fasciidoctor%2Finclude_ext%2Finclude_processor.rb', 'patch': \"@@ -113,10 +113,16 @@ def resolve_target_path(target, reader)\\n     #   the line number. If `nil` is given, all lines are passed.\\n     # @return [Array<String>] an array of read lines.\\n     def read_lines(path, selector)\\n-      if selector\\n-        IO.foreach(path).select.with_index(1, &selector)\\n-      else\\n-        URI.open(path, &:read)\\n+      # IO.open is deliberately not used directly to avoid potential security risks.\\n+      # TODO: Get rid of 'open-uri' (URI.open).\\n+      io = target_http?(path) ? URI : File\\n+\\n+      io.open(path) do |f|\\n+        if selector\\n+          f.each.select.with_index(1, &selector)\\n+        else\\n+          f.read\\n+        end\\n       end\\n     end\"}}",
            "message_norm":"make #read_lines code more robust, avoid using io.open directly",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/asciidoctor\/include_ext\/include_processor.rb'])",
            "num_files":1.0
        },
        {
            "index":2965,
            "vuln_id":"GHSA-rmj8-8hhh-gv5h",
            "cwe_id":"{'CWE-200'}",
            "score":8.0,
            "chain":"{'https:\/\/github.com\/puma\/puma\/commit\/b70f451fe8abc0cff192c065d549778452e155bb'}",
            "dataset":"osv",
            "summary":"Information Exposure when using Puma with Rails ### Impact\nPrior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly.\n\nFrom Rails:\n\n> Under certain circumstances response bodies will not be closed, for example a bug in a webserver[1] or a bug in a Rack middleware. In the event a response is not notified of a close, ActionDispatch::Executor will not know to reset thread local state for the next request. This can lead to data being leaked to subsequent requests, especially when interacting with ActiveSupport::CurrentAttributes.\n\nThe combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage.\n\n### Patches\nThis problem is fixed in Puma versions 5.6.2 and 4.3.11.\n\nThis problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\nSee: \nhttps:\/\/github.com\/advisories\/GHSA-wh98-p28r-vrc9 \nfor details about the rails vulnerability\n\nUpgrading to a patched Rails _or_ Puma version fixes the vulnerability.\n\n### Workarounds\n\nUpgrade to Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\nThe [Rails CVE](https:\/\/groups.google.com\/g\/ruby-security-ann\/c\/FkTM-_7zSNA\/m\/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1) includes a middleware that can be used instead.\n\n### References\n\n* Rails CVE: [CVE-2022-23633](https:\/\/groups.google.com\/g\/ruby-security-ann\/c\/FkTM-_7zSNA\/m\/K2RiMJBlBAAJ?utm_medium=email&utm_source=footer&pli=1)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [puma](https:\/\/github.com\/puma\/puma)\n* See our [security policy](https:\/\/github.com\/puma\/puma\/security\/policy)",
            "published_date":"2022-02-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/puma\/puma",
            "commit_href":"https:\/\/github.com\/puma\/puma\/commit\/b70f451fe8abc0cff192c065d549778452e155bb",
            "commit_sha":"b70f451fe8abc0cff192c065d549778452e155bb",
            "patch":"SINGLE",
            "chain_ord":"['b70f451fe8abc0cff192c065d549778452e155bb']",
            "before_first_fix_commit":"{'15dd1166ac0750e74720fecee7904e6069ad6d7f'}",
            "last_fix_commit":"b70f451fe8abc0cff192c065d549778452e155bb",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2022, 14:58:08",
            "message":"Ensure `close` is called on the response body no matter what\n\nAnother fallout from https:\/\/github.com\/puma\/puma\/pull\/2809 is that\nin some cases the `res_body.close` wasn't called because some previous code\nraised.\n\nFor Rails apps it means CurrentAttributes and a few other important\nstates aren't reset properly.\n\nThis is being improved on the Rails side too, but I believe it would\nbe good to harden this on the puma side as well.",
            "author":"Jean Boussier",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 5, 'total': 15}",
            "files":"{'lib\/puma\/request.rb': {'additions': 10, 'deletions': 5, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/puma\/puma\/raw\/b70f451fe8abc0cff192c065d549778452e155bb\/lib%2Fpuma%2Frequest.rb', 'patch': '@@ -171,11 +171,16 @@ def handle_request(client, lines, requests)\\n         end\\n \\n       ensure\\n-        uncork_socket io\\n-\\n-        body.close\\n-        client.tempfile.unlink if client.tempfile\\n-        res_body.close if res_body.respond_to? :close\\n+        begin\\n+          uncork_socket io\\n+\\n+          body.close\\n+          client.tempfile.unlink if client.tempfile\\n+        ensure\\n+          # Whatever happens, we MUST call `close` on the response body.\\n+          # Otherwise Rack::BodyProxy callbacks may not fire and lead to various state leaks\\n+          res_body.close if res_body.respond_to? :close\\n+        end\\n \\n         after_reply.each { |o| o.call }\\n       end'}}",
            "message_norm":"ensure `close` is called on the response body no matter what\n\nanother fallout from https:\/\/github.com\/puma\/puma\/pull\/2809 is that\nin some cases the `res_body.close` wasn't called because some previous code\nraised.\n\nfor rails apps it means currentattributes and a few other important\nstates aren't reset properly.\n\nthis is being improved on the rails side too, but i believe it would\nbe good to harden this on the puma side as well.",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('https:\/\/github.com\/puma\/puma\/pull\/2809', 'URL', ''), ('improved', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/puma\/request.rb'])",
            "num_files":1.0
        },
        {
            "index":3409,
            "vuln_id":"GHSA-xc7v-wxcw-j472",
            "cwe_id":"{'CWE-200'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/request\/tunnel-agent\/commit\/9ca95ec7219daface8a6fc2674000653de0922c0'}",
            "dataset":"osv",
            "summary":"Memory Exposure in tunnel-agent Versions of `tunnel-agent` before 0.6.0 are vulnerable to memory exposure.\n\nThis is exploitable if user supplied input is provided to the auth value and is a number.\n\nProof-of-concept:\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http:\/\/www.example.com',\n  tunnel: true,\n  proxy:{\n    protocol: 'http:',\n    host:'127.0.0.1',\n    port:8080,\n    auth:USERSUPPLIEDINPUT \/\/ number\n  }\n});\n```\n\n\n## Recommendation\n\nUpdate to version 0.6.0 or later.",
            "published_date":"2019-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/request\/tunnel-agent",
            "commit_href":"https:\/\/github.com\/request\/tunnel-agent\/commit\/9ca95ec7219daface8a6fc2674000653de0922c0",
            "commit_sha":"9ca95ec7219daface8a6fc2674000653de0922c0",
            "patch":"SINGLE",
            "chain_ord":"['9ca95ec7219daface8a6fc2674000653de0922c0']",
            "before_first_fix_commit":"{'8a7c86e6e2a1c3fa8577e5b0e14923d54c659552'}",
            "last_fix_commit":"9ca95ec7219daface8a6fc2674000653de0922c0",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/05\/2017, 00:29:52",
            "message":"Use .from",
            "author":"Mikeal Rogers",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/request\/tunnel-agent\/raw\/9ca95ec7219daface8a6fc2674000653de0922c0\/index.js', 'patch': \"@@ -128,7 +128,7 @@ TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\\n   if (connectOptions.proxyAuth) {\\n     connectOptions.headers = connectOptions.headers || {}\\n     connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\\n-        new Buffer(connectOptions.proxyAuth).toString('base64')\\n+        Buffer.from(connectOptions.proxyAuth).toString('base64')\\n   }\\n \\n   debug('making CONNECT request')\"}}",
            "message_norm":"use .from",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":2244,
            "vuln_id":"GHSA-jfp7-4j67-8r3q",
            "cwe_id":"{'CWE-193', 'CWE-131'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow caused by rounding ### Impact\nAn attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:\n\n```python\nimport tensorflow as tf\n\nl = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]\nimages = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)\nsize = tf.constant([12, 6], shape=[2], dtype=tf.int32)\nmin = tf.constant(80.22522735595703)\nmax = tf.constant(80.39215850830078)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,\n                                   align_corners=True, half_pixel_centers=True)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:\n\n```cc\nconst float in_f = std::floor(in);\ninterpolation->lower[i] = std::max(static_cast<int64>(in_f), static_cast<int64>(0));\ninterpolation->upper[i] = std::min(static_cast<int64>(std::ceil(in)), in_size - 1);\n```\n  \nFor some values of `in`, `interpolation->upper[i]` might be smaller than `interpolation->lower[i]`. This is an issue if `interpolation->upper[i]` is capped at `in_size-1` as it means that `interpolation->lower[i]` points outside of the image. Then, [in the interpolation code](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:\n\n```cc\ntemplate <int RESOLUTION, typename T, typename T_SCALE, typename T_CALC>\ninline void OutputLerpForChannels(const InterpolationCache<T_SCALE>& xs,\n                                  const int64 x, const T_SCALE ys_ilerp,\n                                  const int channels, const float min,\n                                  const float max, const T* ys_input_lower_ptr,\n                                  const T* ys_input_upper_ptr,\n                                  T* output_y_ptr) {\n  const int64 xs_lower = xs.lower[x];\n  ...\n  for (int c = 0; c < channels; ++c) {\n    const T top_left = ys_input_lower_ptr[xs_lower + c];\n    ...\n  }\n}\n```\n\nFor the other cases where `interpolation->upper[i]` is smaller than `interpolation->lower[i]`, we can set them to be equal without affecting the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "commit_sha":"f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "patch":"SINGLE",
            "chain_ord":"['f851613f8f0fb0c838d160ced13c134f778e3ce7']",
            "before_first_fix_commit":"{'44b7f486c0143f68b56c34e2d01e146ee445134a'}",
            "last_fix_commit":"f851613f8f0fb0c838d160ced13c134f778e3ce7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 23:20:48",
            "message":"Fix heap buffer overflow caused by rounding.\n\nThis was hard to fix. Due to the way we compute the pixels that influence an output pixel in resized images, for certain input configuration we might have issued a read to a pixel that is outside of boundary of the original image. This is because of floating errors that affected truncation results.\n\nPiperOrigin-RevId: 369757871\nChange-Id: If89425fff930983829a2168203c11858883eebc9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f851613f8f0fb0c838d160ced13c134f778e3ce7\/tensorflow%2Fcore%2Fkernels%2Fquantized_resize_bilinear_op.cc', 'patch': '@@ -64,6 +64,8 @@ inline void ComputeInterpolationWeights(\\n         std::max(static_cast<int64>(in_f), static_cast<int64>(0));\\n     interpolation->upper[i] =\\n         std::min(static_cast<int64>(std::ceil(in)), in_size - 1);\\n+    interpolation->lower[i] =\\n+        std::min(interpolation->lower[i], interpolation->upper[i]);\\n     interpolation->lerp[i] = in - in_f;\\n     interpolation->ilerp[i] =\\n         static_cast<T_SCALE>((in - in_f) * (1 << resolution));'}}",
            "message_norm":"fix heap buffer overflow caused by rounding.\n\nthis was hard to fix. due to the way we compute the pixels that influence an output pixel in resized images, for certain input configuration we might have issued a read to a pixel that is outside of boundary of the original image. this is because of floating errors that affected truncation results.\n\npiperorigin-revid: 369757871\nchange-id: if89425fff930983829a2168203c11858883eebc9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('fix', 'ACTION', ''), ('outside of boundary', 'SECWORD', ''), ('errors', 'FLAW', ''), ('369757871', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1985,
            "vuln_id":"GHSA-h4j5-c7cj-74xg",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mjwwit\/node-XMLHttpRequest\/commit\/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291', 'https:\/\/github.com\/driverdan\/node-XMLHttpRequest\/commit\/983cfc244c7567ad6a59e366e55a8037e0497fe6'}",
            "dataset":"osv",
            "summary":"Arbitrary Code Injection This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run.",
            "published_date":"2021-05-04",
            "chain_len":2,
            "project":"https:\/\/github.com\/driverdan\/node-XMLHttpRequest",
            "commit_href":"https:\/\/github.com\/driverdan\/node-XMLHttpRequest\/commit\/983cfc244c7567ad6a59e366e55a8037e0497fe6",
            "commit_sha":"983cfc244c7567ad6a59e366e55a8037e0497fe6",
            "patch":"MULTI",
            "chain_ord":"['983cfc244c7567ad6a59e366e55a8037e0497fe6', 'ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291']",
            "before_first_fix_commit":"{'bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2'}",
            "last_fix_commit":"ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/19\/2013, 02:34:33",
            "message":"fix for backslashes in data not encoding correctly",
            "author":"Kris Nye",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/XMLHttpRequest.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/driverdan\/node-XMLHttpRequest\/raw\/983cfc244c7567ad6a59e366e55a8037e0497fe6\/lib%2FXMLHttpRequest.js', 'patch': '@@ -477,7 +477,7 @@ exports.XMLHttpRequest = function() {\\n         + \"fs.writeFileSync(\\'\" + contentFile + \"\\', \\'NODE-XMLHTTPREQUEST-ERROR:\\' + JSON.stringify(error), \\'utf8\\');\"\\n         + \"fs.unlinkSync(\\'\" + syncFile + \"\\');\"\\n         + \"});\"\\n-        + (data ? \"req.write(\\'\" + data.replace(\/\\'\/g, \"\\\\\\\\\\'\") + \"\\');\":\"\")\\n+        + (data ? \"req.write(\\'\" + JSON.stringify(data).slice(1,-1).replace(\/\\'\/g, \"\\\\\\\\\\'\") + \"\\');\":\"\")\\n         + \"req.end();\";\\n       \/\/ Start the other Node Process, executing this string\\n       var syncProc = spawn(process.argv[0], [\"-e\", execString]);'}}",
            "message_norm":"fix for backslashes in data not encoding correctly",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('encoding', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/XMLHttpRequest.js'])",
            "num_files":1.0
        },
        {
            "index":1495,
            "vuln_id":"GHSA-c65v-p733-9796",
            "cwe_id":"{'CWE-79'}",
            "score":8.0,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in snipe\/snipe-it snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2021-11-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e",
            "commit_sha":"7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e",
            "patch":"SINGLE",
            "chain_ord":"['7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e']",
            "before_first_fix_commit":"{'e75a5f13ecb77a53d93d67c23e9f1b3580fe8092', 'f7b483358ff114b56c753ee9c2964059a55a3bd2'}",
            "last_fix_commit":"7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/16\/2021, 04:33:51",
            "message":"Merge pull request #10315 from snipe\/fixes\/escape_custom_fields_in_api_response\n\nEscape custom field values in API response",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'app\/Http\/Transformers\/AssetsTransformer.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/7ce5993f5ae9d713a0955c2fd8e2dff7a7ce886e\/app%2FHttp%2FTransformers%2FAssetsTransformer.php', 'patch': \"@@ -93,15 +93,15 @@ public function transformAsset(Asset $asset)\\n                     $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin\/custom_fields\/general.encrypted'));\\n \\n                     $fields_array[$field->name] = [\\n-                            'field' => $field->convertUnicodeDbSlug(),\\n-                            'value' => $value,\\n+                            'field' => e($field->convertUnicodeDbSlug()),\\n+                            'value' => e($value),\\n                             'field_format' => $field->format,\\n                         ];\\n \\n                 } else {\\n                     $fields_array[$field->name] = [\\n-                        'field' => $field->convertUnicodeDbSlug(),\\n-                        'value' => $asset->{$field->convertUnicodeDbSlug()},\\n+                        'field' => e($field->convertUnicodeDbSlug()),\\n+                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),\\n                         'field_format' => $field->format,\\n                     ];\\n \\n@@ -134,7 +134,7 @@ public function transformAsset(Asset $asset)\\n                         \\n                             'id' => $component->id,\\n                             'pivot_id' => $component->pivot->id,\\n-                            'name' => $component->name,\\n+                            'name' => e($component->name),\\n                             'qty' => $component->pivot->assigned_qty,\\n                             'price_cost' => $component->purchase_cost,\\n                             'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,\"}}",
            "message_norm":"merge pull request #10315 from snipe\/fixes\/escape_custom_fields_in_api_response\n\nescape custom field values in api response",
            "language":"ca",
            "entities":"[('#10315', 'ISSUE', ''), ('escape_custom_fields_in_api_response', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Transformers\/AssetsTransformer.php'])",
            "num_files":1.0
        },
        {
            "index":25,
            "vuln_id":"GHSA-24x6-8c7m-hv3f",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578'}",
            "dataset":"osv",
            "summary":"Heap OOB read in TFLite's implementation of `Minimum` or `Maximum` ### Impact\nThe implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty.\n\nThis is because [the broadcasting implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/reference\/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds:\n\n```cc\nauto maxmin_func = [&](int indexes[N]) {\n  output_data[SubscriptToIndex(output_desc, indexes)] =\n    op(input1_data[SubscriptToIndex(desc1, indexes)],\n        input2_data[SubscriptToIndex(desc2, indexes)]);\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [953f28dca13c92839ba389c055587cfe6c723578](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/953f28dca13c92839ba389c055587cfe6c723578",
            "commit_sha":"953f28dca13c92839ba389c055587cfe6c723578",
            "patch":"SINGLE",
            "chain_ord":"['953f28dca13c92839ba389c055587cfe6c723578']",
            "before_first_fix_commit":"{'801c1c6be5324219689c98e1bd3e0ca365ee834d'}",
            "last_fix_commit":"953f28dca13c92839ba389c055587cfe6c723578",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:38",
            "message":"Prevent a null pointer exception in TFLite\n\nPiperOrigin-RevId: 370800206\nChange-Id: Idd437ebce4ff224120d8eefc1c14c062173b71d6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 31, 'deletions': 29, 'total': 60}",
            "files":"{'tensorflow\/lite\/kernels\/maximum_minimum.cc': {'additions': 31, 'deletions': 29, 'changes': 60, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/953f28dca13c92839ba389c055587cfe6c723578\/tensorflow%2Flite%2Fkernels%2Fmaximum_minimum.cc', 'patch': '@@ -157,35 +157,37 @@ template <KernelType kernel_type, typename OpType>\\n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   OpContext op_context(context, node);\\n \\n-    switch (op_context.output->type) {\\n-      case kTfLiteFloat32:\\n-        TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);\\n-        break;\\n-      case kTfLiteUInt8:\\n-        TFLiteOperation<kernel_type, uint8_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt8:\\n-        TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);\\n-        break;\\n-      case kTfLiteInt32:\\n-        TFLiteOperation<kernel_type, int32_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt64:\\n-        TFLiteOperation<kernel_type, int64_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      case kTfLiteInt16:\\n-        TFLiteOperation<kernel_type, int16_t, OpType>(context, node,\\n-                                                      op_context);\\n-        break;\\n-      default:\\n-        context->ReportError(context,\\n-                             \"Type %d is currently not supported by Maximum.\",\\n-                             op_context.output->type);\\n-        return kTfLiteError;\\n-    }\\n+  \/\/ If inputs have no element, shortcircuit.\\n+  if (NumElements(op_context.input1) == 0 ||\\n+      NumElements(op_context.input2) == 0) {\\n+    return kTfLiteOk;\\n+  }\\n+\\n+  switch (op_context.output->type) {\\n+    case kTfLiteFloat32:\\n+      TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteUInt8:\\n+      TFLiteOperation<kernel_type, uint8_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt8:\\n+      TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt32:\\n+      TFLiteOperation<kernel_type, int32_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt64:\\n+      TFLiteOperation<kernel_type, int64_t, OpType>(context, node, op_context);\\n+      break;\\n+    case kTfLiteInt16:\\n+      TFLiteOperation<kernel_type, int16_t, OpType>(context, node, op_context);\\n+      break;\\n+    default:\\n+      context->ReportError(context,\\n+                           \"Type %d is currently not supported by Maximum.\",\\n+                           op_context.output->type);\\n+      return kTfLiteError;\\n+  }\\n   return kTfLiteOk;\\n }'}}",
            "message_norm":"prevent a null pointer exception in tflite\n\npiperorigin-revid: 370800206\nchange-id: idd437ebce4ff224120d8eefc1c14c062173b71d6",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('370800206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/maximum_minimum.cc'])",
            "num_files":1.0
        },
        {
            "index":3008,
            "vuln_id":"GHSA-rrx2-r989-2c43",
            "cwe_id":"{'CWE-190'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e952a89b7026b98fe8cbe626514a93ed68b7c510'}",
            "dataset":"osv",
            "summary":"Integer overflows in Tensorflow ### Impact \nThe [implementations of `Sparse*Cwise*` ops](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    dense=np.array([4]))\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n\n### Patches\nWe have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e952a89b7026b98fe8cbe626514a93ed68b7c510).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e952a89b7026b98fe8cbe626514a93ed68b7c510",
            "commit_sha":"e952a89b7026b98fe8cbe626514a93ed68b7c510",
            "patch":"MULTI",
            "chain_ord":"['1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'e952a89b7026b98fe8cbe626514a93ed68b7c510']",
            "before_first_fix_commit":"{'1b54cadd19391b60b6fcccd8d076426f7221d5e8'}",
            "last_fix_commit":"e952a89b7026b98fe8cbe626514a93ed68b7c510",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/10\/2021, 17:46:48",
            "message":"Prevent overflow in sparse dense cwise ops.\n\nPiperOrigin-RevId: 415543171\nChange-Id: I22dab7c41be2121ab5efe5403ca0e2f9b7cb24b8",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e952a89b7026b98fe8cbe626514a93ed68b7c510\/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -99,7 +99,9 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n \\n     const auto indices_mat = indices_t->matrix<int64_t>();\\n     const auto shape_vec = shape_t->vec<int64_t>();\\n-    const auto lhs_dims = BCast::FromShape(TensorShape(shape_vec));\\n+    TensorShape lhs_shape;\\n+    OP_REQUIRES_OK(ctx, TensorShape::BuildTensorShape(shape_vec, &lhs_shape));\\n+    const auto lhs_dims = BCast::FromShape(lhs_shape);\\n     const auto rhs_dims = BCast::FromShape(dense_t->shape());\\n     BCast b(lhs_dims, rhs_dims, false);  \/\/ false for keeping the same num dims.'}}",
            "message_norm":"prevent overflow in sparse dense cwise ops.\n\npiperorigin-revid: 415543171\nchange-id: i22dab7c41be2121ab5efe5403ca0e2f9b7cb24b8",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('415543171', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":3323,
            "vuln_id":"GHSA-wvh5-78h5-gmgr",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/moodle\/moodle\/commit\/6abe964bbac41b5e40a81b40962f7044b0dc201e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in moodle A flaw was found in moodle where ID numbers displayed when bulk allocating markers to assignments required additional sanitizing to prevent a stored XSS risk.",
            "published_date":"2022-05-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/moodle\/moodle",
            "commit_href":"https:\/\/github.com\/moodle\/moodle\/commit\/6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "commit_sha":"6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "patch":"SINGLE",
            "chain_ord":"['6abe964bbac41b5e40a81b40962f7044b0dc201e']",
            "before_first_fix_commit":"{'11b2cc4cb5cf0693414f0e84cb790e487ae33a24'}",
            "last_fix_commit":"6abe964bbac41b5e40a81b40962f7044b0dc201e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/15\/2022, 00:10:25",
            "message":"MDL-74204 mod_assign: escape identity fields in allocate marker form.",
            "author":"Paul Holden",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'mod\/assign\/classes\/output\/renderer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moodle\/moodle\/raw\/6abe964bbac41b5e40a81b40962f7044b0dc201e\/mod%2Fassign%2Fclasses%2Foutput%2Frenderer.php', 'patch': \"@@ -168,7 +168,7 @@ public function render_assign_user_summary(\\\\assign_user_summary $summary) {\\n             $fullname = fullname($summary->user, $summary->viewfullnames);\\n             $extrainfo = array();\\n             foreach ($summary->extrauserfields as $extrafield) {\\n-                $extrainfo[] = $summary->user->$extrafield;\\n+                $extrainfo[] = s($summary->user->$extrafield);\\n             }\\n             if (count($extrainfo)) {\\n                 $fullname .= ' (' . implode(', ', $extrainfo) . ')';\"}}",
            "message_norm":"mdl-74204 mod_assign: escape identity fields in allocate marker form.",
            "language":"en",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mod\/assign\/classes\/output\/renderer.php'])",
            "num_files":1.0
        },
        {
            "index":2379,
            "vuln_id":"GHSA-m87f-9fvv-2mgg",
            "cwe_id":"{'CWE-502'}",
            "score":8.4,
            "chain":"{'https:\/\/github.com\/facebookresearch\/ParlAI\/commit\/4374fa2aba383db6526ab36e939eb1cf8ef99879', 'https:\/\/github.com\/facebookresearch\/ParlAI\/commit\/507d066ef432ea27d3e201da08009872a2f37725'}",
            "dataset":"osv",
            "summary":"Deserialization of Untrusted Data in parlai ### Impact\nDue to use of unsafe YAML deserialization logic, an attacker with the ability to modify local YAML configuration files could provide malicious input, resulting in remote code execution or similar risks.\n\n### Patches\nThe issue can be patched by upgrading to v1.1.0 or later. It can also be patched by replacing YAML deserialization with equivalent safe_load calls.\n\n### References\n\n- https:\/\/github.com\/facebookresearch\/ParlAI\/commit\/507d066ef432ea27d3e201da08009872a2f37725\n- https:\/\/github.com\/facebookresearch\/ParlAI\/commit\/4374fa2aba383db6526ab36e939eb1cf8ef99879\n- https:\/\/anon-artist.github.io\/blogs\/blog3.html",
            "published_date":"2021-09-13",
            "chain_len":2,
            "project":"https:\/\/github.com\/facebookresearch\/ParlAI",
            "commit_href":"https:\/\/github.com\/facebookresearch\/ParlAI\/commit\/4374fa2aba383db6526ab36e939eb1cf8ef99879",
            "commit_sha":"4374fa2aba383db6526ab36e939eb1cf8ef99879",
            "patch":"MULTI",
            "chain_ord":"['507d066ef432ea27d3e201da08009872a2f37725', '4374fa2aba383db6526ab36e939eb1cf8ef99879']",
            "before_first_fix_commit":"{'15fbf55f32e64722c452c907425e10fdb977f62e'}",
            "last_fix_commit":"4374fa2aba383db6526ab36e939eb1cf8ef99879",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/03\/2021, 17:52:21",
            "message":"Update model_chat_blueprint.py (#3429)",
            "author":"Abhiram V",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'parlai\/crowdsourcing\/tasks\/model_chat\/model_chat_blueprint.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/facebookresearch\/ParlAI\/raw\/4374fa2aba383db6526ab36e939eb1cf8ef99879\/parlai%2Fcrowdsourcing%2Ftasks%2Fmodel_chat%2Fmodel_chat_blueprint.py', 'patch': '@@ -453,7 +453,7 @@ def __init__(\\n \\n     def _get_shared_models(self, args: \"DictConfig\") -> Dict[str, dict]:\\n         with open(args.blueprint.model_opt_path) as f:\\n-            all_model_opts = yaml.load(f.read())\\n+            all_model_opts = yaml.safe_load(f.read())\\n         active_model_opts = {\\n             model: opt\\n             for model, opt in all_model_opts.items()\\n@@ -557,5 +557,5 @@ def __init__(\\n \\n     def _get_shared_models(self, args: \"DictConfig\") -> Dict[str, dict]:\\n         with open(args.blueprint.model_opt_path) as f:\\n-            model_opts = yaml.load(f.read())\\n+            model_opts = yaml.safe_load(f.read())\\n         return TurkLikeAgent.get_bot_agents(args=args, model_opts=model_opts)'}}",
            "message_norm":"update model_chat_blueprint.py (#3429)",
            "language":"en",
            "entities":"[('#3429', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['parlai\/crowdsourcing\/tasks\/model_chat\/model_chat_blueprint.py'])",
            "num_files":1.0
        },
        {
            "index":385,
            "vuln_id":"GHSA-48mj-p7x2-5jfm",
            "cwe_id":"{'CWE-306'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/esphome\/esphome\/pull\/2409\/commits\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e', 'https:\/\/github.com\/esphome\/esphome\/commit\/be965a60eba6bb769e2a5afdbc8eed132f077a59'}",
            "dataset":"osv",
            "summary":"Basic auth bypass in esphome ### Impact\n\nAnyone with web_server enabled and HTTP basic auth configured on 2021.9.1 or older\n\n`web_server` allows OTA update without checking user defined basic auth username & password\n\n### Patches\n\nPatch released in 2021.9.2\n\n### Workarounds\n\nDisable\/remove `web_server`",
            "published_date":"2021-09-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/esphome\/esphome",
            "commit_href":"https:\/\/github.com\/esphome\/esphome\/pull\/2409\/commits\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "commit_sha":"207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "patch":"MULTI",
            "chain_ord":"['be965a60eba6bb769e2a5afdbc8eed132f077a59', '207cde1667d8c799a197b78ca8a5a14de8d5ca1e']",
            "before_first_fix_commit":"{'be965a60eba6bb769e2a5afdbc8eed132f077a59'}",
            "last_fix_commit":"207cde1667d8c799a197b78ca8a5a14de8d5ca1e",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/28\/2021, 01:02:04",
            "message":"Fix lint issues in web_server_base",
            "author":"Jesse Hills",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'esphome\/components\/web_server_base\/web_server_base.h': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/esphome\/esphome\/raw\/207cde1667d8c799a197b78ca8a5a14de8d5ca1e\/esphome%2Fcomponents%2Fweb_server_base%2Fweb_server_base.h', 'patch': '@@ -3,6 +3,7 @@\\n #ifdef USE_ARDUINO\\n \\n #include <memory>\\n+#include <utility>\\n #include \"esphome\/core\/component.h\"\\n \\n #include <ESPAsyncWebServer.h>\\n@@ -96,8 +97,8 @@ class WebServerBase : public Component {\\n   std::shared_ptr<AsyncWebServer> get_server() const { return server_; }\\n   float get_setup_priority() const override;\\n \\n-  void set_auth_username(std::string auth_username) { credentials_.username = auth_username; }\\n-  void set_auth_password(std::string auth_password) { credentials_.password = auth_password; }\\n+  void set_auth_username(std::string auth_username) { credentials_.username = std::move(auth_username); }\\n+  void set_auth_password(std::string auth_password) { credentials_.password = std::move(auth_password); }\\n \\n   void add_handler(AsyncWebHandler *handler);'}}",
            "message_norm":"fix lint issues in web_server_base",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issues', 'FLAW', ''), ('web_server_base', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['esphome\/components\/web_server_base\/web_server_base.h'])",
            "num_files":1.0
        },
        {
            "index":1682,
            "vuln_id":"GHSA-f7f4-hqp2-7prc",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
            "published_date":"2020-07-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e",
            "commit_sha":"ff02114eaec090ee51db48435cc32d451662606e",
            "patch":"MULTI",
            "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
            "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
            "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/23\/2018, 21:18:38",
            "message":"Define req.path for socket requests.",
            "author":"Mike McNeil",
            "comments":"{'com_1': {'author': 'mikermcneil', 'datetime': '10\/01\/2018, 15:34:06', 'body': 'Thanks Ali!'}}",
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/ff02114eaec090ee51db48435cc32d451662606e\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -3,6 +3,7 @@\\n  *\/\\n \\n var util = require('util');\\n+var url = require('url');\\n var _ = require('@sailshq\/lodash');\\n var semver = require('semver');\\n var parseSdkMetadata = require('.\/parse-sdk-metadata');\\n@@ -105,6 +106,8 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+\\n       method  : options.eventName,\\n \\n       \/\/ Attached data becomes simulated HTTP body (`req.body`)\"}}",
            "message_norm":"define req.path for socket requests.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
            "num_files":1.0
        },
        {
            "index":786,
            "vuln_id":"GHSA-68gr-cmcp-g3mj",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/RetireJS\/retire.js\/commit\/800c8140884eaa5753a49308f560c925fe97b9a5'}",
            "dataset":"osv",
            "summary":"Directory Traversal in lactate A crafted `GET` request can be leveraged to traverse the directory structure of a host using the lactate web server package, and request arbitrary files outside of the specified web root. This allows for a remote attacker to gain access to arbitrary files on the filesystem that the process has access to read.\n\nMitigating factors:\nOnly files that the user running `lactate` has permission to read will be accessible via this vulnerability.\n\n\n[Proof of concept](https:\/\/hackerone.com\/reports\/296645):\nPlease globally install the `lactate` package and `cd` to a directory you wish to serve assets from. Next, run `lactate -p 8081` to start serving files from this location.\n\nThe following cURL request can be used to demonstrate this vulnerability by requesting the target `\/etc\/passwd` file:\n\n```\ncurl \"http:\/\/127.0.0.1:8081\/%2e%2e\/%2e%2e\/%2e%2e\/%2e%2e\/%2e%2e\/etc\/passwd\"\n```\n```\nroot:x:0:0:root:\/root:\/bin\/bash\ndaemon:x:1:1:daemon:\/usr\/sbin:\/usr\/sbin\/nologin\nbin:x:2:2:bin:\/bin:\/usr\/sbin\/nologin\nsys:x:3:3:sys:\/dev:\/usr\/sbin\/nologin\n[...]\n```\n\n\n## Recommendation\n\nAs there is currently no fix for this issue selecting an alternative static web server would be the best choice.",
            "published_date":"2019-06-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/RetireJS\/retire.js",
            "commit_href":"https:\/\/github.com\/RetireJS\/retire.js\/commit\/800c8140884eaa5753a49308f560c925fe97b9a5",
            "commit_sha":"800c8140884eaa5753a49308f560c925fe97b9a5",
            "patch":"SINGLE",
            "chain_ord":"['800c8140884eaa5753a49308f560c925fe97b9a5']",
            "before_first_fix_commit":"{'ed3512729af76583b28611a4a1b6a8797d7f074c'}",
            "last_fix_commit":"800c8140884eaa5753a49308f560c925fe97b9a5",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/05\/2018, 06:47:18",
            "message":"HackerOne Node.js Ecosystem Bug Bounty Program - January 2018 disclosures (#199)",
            "author":"Rafal Janicki",
            "comments":null,
            "stats":"{'additions': 104, 'deletions': 8, 'total': 112}",
            "files":"{'repository\/npmrepository.json': {'additions': 104, 'deletions': 8, 'changes': 112, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/RetireJS\/retire.js\/raw\/800c8140884eaa5753a49308f560c925fe97b9a5\/repository%2Fnpmrepository.json', 'patch': '@@ -4461,16 +4461,112 @@\\n         ]\\n       }\\n     ]\\n+  },\\n+  \"fastify\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.38.0\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"CVE\": [\\n+            \"CVE-2018-3711\"\\n+          ],\\n+          \"summary\": \"denial-of-service vulnerability with large JSON payloads\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/303632\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"serve\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"6.4.9\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"CVE\": [\\n+            \"CVE-2018-3712\"\\n+          ],\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/307666\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"augustine\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.2.4\",\\n+        \"severity\": \"critical\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/296282\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"lactate\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.13.13\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/296645\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"redis-commander\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.4.6\",\\n+        \"severity\": \"low\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Reflected XSS\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/296377\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"featurebook\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"0.0.33\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/296305\"\\n+        ]\\n+      }\\n+    ]\\n+  },\\n+  \"serve-here\": {\\n+    \"vulnerabilities\": [\\n+      {\\n+        \"below\": \"3.2.2\",\\n+        \"severity\": \"medium\",\\n+        \"identifiers\": {\\n+          \"summary\": \"Path Traversal\"\\n+        },\\n+        \"info\": [\\n+          \"https:\/\/hackerone.com\/reports\/296254\"\\n+        ]\\n+      }\\n+    ]\\n   }\\n \\n \\n \\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n-\\n }'}}",
            "message_norm":"hackerone node.js ecosystem bug bounty program - january 2018 disclosures (#199)",
            "language":"en",
            "entities":"[('bug', 'FLAW', ''), ('#199', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['repository\/npmrepository.json'])",
            "num_files":1.0
        },
        {
            "index":1369,
            "vuln_id":"GHSA-9g8h-pjm4-q92p",
            "cwe_id":"{'CWE-787'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/opencv\/opencv\/pull\/10566\/commits\/435a3e337bd9d4e11af61cf8b8afca067bf1a8aa'}",
            "dataset":"osv",
            "summary":"Out-of-bounds Write in OpenCV. In OpenCV 3.3.1 (corresponding with OpenCV-Python 3.3.1.11), a heap-based buffer overflow happens in cv::Jpeg2KDecoder::readComponent8u in modules\/imgcodecs\/src\/grfmt_jpeg2000.cpp when parsing a crafted image file.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencv\/opencv",
            "commit_href":"https:\/\/github.com\/opencv\/opencv\/pull\/10566\/commits\/435a3e337bd9d4e11af61cf8b8afca067bf1a8aa",
            "commit_sha":"435a3e337bd9d4e11af61cf8b8afca067bf1a8aa",
            "patch":"SINGLE",
            "chain_ord":"['435a3e337bd9d4e11af61cf8b8afca067bf1a8aa']",
            "before_first_fix_commit":"{'f34a0a874a029a6201df0acbf46eeeaab8686e4d'}",
            "last_fix_commit":"435a3e337bd9d4e11af61cf8b8afca067bf1a8aa",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/09\/2018, 14:36:57",
            "message":"imgcodecs: add more Jasper checks for supported and tested cases",
            "author":"Alexander Alekhin",
            "comments":null,
            "stats":"{'additions': 39, 'deletions': 7, 'total': 46}",
            "files":"{'modules\/imgcodecs\/src\/grfmt_jpeg2000.cpp': {'additions': 39, 'deletions': 7, 'changes': 46, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencv\/opencv\/raw\/435a3e337bd9d4e11af61cf8b8afca067bf1a8aa\/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_jpeg2000.cpp', 'patch': '@@ -77,7 +77,8 @@ static JasperInitializer initialize_jasper;\\n \\n Jpeg2KDecoder::Jpeg2KDecoder()\\n {\\n-    m_signature = \\'\\\\0\\' + String() + \\'\\\\0\\' + String() + \\'\\\\0\\' + String(\"\\\\x0cjP  \\\\r\\\\n\\\\x87\\\\n\");\\n+    static const unsigned char signature_[12] = { 0, 0, 0, 0x0c, \\'j\\', \\'P\\', \\' \\', \\' \\', 13, 10, 0x87, 10};\\n+    m_signature = String((const char*)signature_, (const char*)signature_ + sizeof(signature_));\\n     m_stream = 0;\\n     m_image = 0;\\n }\\n@@ -121,6 +122,8 @@ bool  Jpeg2KDecoder::readHeader()\\n         jas_image_t* image = jas_image_decode( stream, -1, 0 );\\n         m_image = image;\\n         if( image ) {\\n+            CV_Assert(0 == (jas_image_tlx(image)) && \"not supported\");\\n+            CV_Assert(0 == (jas_image_tly(image)) && \"not supported\");\\n             m_width = jas_image_width( image );\\n             m_height = jas_image_height( image );\\n \\n@@ -130,14 +133,31 @@ bool  Jpeg2KDecoder::readHeader()\\n             for( int i = 0; i < numcmpts; i++ )\\n             {\\n                 int depth_i = jas_image_cmptprec( image, i );\\n+                CV_Assert(depth == 0 || depth == depth_i); \/\/ component data type mismatch\\n                 depth = MAX(depth, depth_i);\\n                 if( jas_image_cmpttype( image, i ) > 2 )\\n                     continue;\\n+                int sgnd = jas_image_cmptsgnd(image, i);\\n+                int xstart = jas_image_cmpttlx(image, i);\\n+                int xend = jas_image_cmptbrx(image, i);\\n+                int xstep = jas_image_cmpthstep(image, i);\\n+                int ystart = jas_image_cmpttly(image, i);\\n+                int yend = jas_image_cmptbry(image, i);\\n+                int ystep = jas_image_cmptvstep(image, i);\\n+                CV_Assert(sgnd == 0 && \"not supported\");\\n+                CV_Assert(xstart == 0 && \"not supported\");\\n+                CV_Assert(ystart == 0 && \"not supported\");\\n+                CV_Assert(xstep == 1 && \"not supported\");\\n+                CV_Assert(ystep == 1 && \"not supported\");\\n+                CV_Assert(xend == m_width);\\n+                CV_Assert(yend == m_height);\\n                 cntcmpts++;\\n             }\\n \\n             if( cntcmpts )\\n             {\\n+                CV_Assert(depth == 8 || depth == 16);\\n+                CV_Assert(cntcmpts == 1 || cntcmpts == 3);\\n                 m_type = CV_MAKETYPE(depth <= 8 ? CV_8U : CV_16U, cntcmpts > 1 ? 3 : 1);\\n                 result = true;\\n             }\\n@@ -150,9 +170,14 @@ bool  Jpeg2KDecoder::readHeader()\\n     return result;\\n }\\n \\n+static void Jpeg2KDecoder_close(Jpeg2KDecoder* ptr)\\n+{\\n+    ptr->close();\\n+}\\n \\n bool  Jpeg2KDecoder::readData( Mat& img )\\n {\\n+    Ptr<Jpeg2KDecoder> close_this(this, Jpeg2KDecoder_close);\\n     bool result = false;\\n     int color = img.channels() > 1;\\n     uchar* data = img.ptr();\\n@@ -204,11 +229,16 @@ bool  Jpeg2KDecoder::readData( Mat& img )\\n                     result = true;\\n                 }\\n                 else\\n-                    fprintf(stderr, \"JPEG 2000 LOADER ERROR: cannot convert colorspace\\\\n\");\\n+                {\\n+                    jas_cmprof_destroy(clrprof);\\n+                    CV_Error(Error::StsError, \"JPEG 2000 LOADER ERROR: cannot convert colorspace\");\\n+                }\\n                 jas_cmprof_destroy( clrprof );\\n             }\\n             else\\n-                fprintf(stderr, \"JPEG 2000 LOADER ERROR: unable to create colorspace\\\\n\");\\n+            {\\n+                CV_Error(Error::StsError, \"JPEG 2000 LOADER ERROR: unable to create colorspace\");\\n+            }\\n         }\\n         else\\n             result = true;\\n@@ -257,8 +287,8 @@ bool  Jpeg2KDecoder::readData( Mat& img )\\n                                 result = readComponent16u( ((unsigned short *)data) + i, buffer, validateToInt(step \/ 2), cmptlut[i], maxval, offset, ncmpts );\\n                             if( !result )\\n                             {\\n-                                i = ncmpts;\\n-                                result = false;\\n+                                jas_matrix_destroy( buffer );\\n+                                CV_Error(Error::StsError, \"JPEG2000 LOADER ERROR: failed to read component\");\\n                             }\\n                         }\\n                         jas_matrix_destroy( buffer );\\n@@ -267,10 +297,12 @@ bool  Jpeg2KDecoder::readData( Mat& img )\\n             }\\n         }\\n         else\\n-            fprintf(stderr, \"JPEG2000 LOADER ERROR: colorspace conversion failed\\\\n\" );\\n+        {\\n+            CV_Error(Error::StsError, \"JPEG2000 LOADER ERROR: colorspace conversion failed\");\\n+        }\\n     }\\n \\n-    close();\\n+    CV_Assert(result == true);\\n \\n #ifndef _WIN32\\n     if (!clr.empty())'}}",
            "message_norm":"imgcodecs: add more jasper checks for supported and tested cases",
            "language":"en",
            "entities":"[('add', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/imgcodecs\/src\/grfmt_jpeg2000.cpp'])",
            "num_files":1.0
        },
        {
            "index":1579,
            "vuln_id":"GHSA-cph5-m8f7-6c5x",
            "cwe_id":"{'CWE-697', 'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/axios\/axios\/commit\/5b457116e31db0e88fede6c428e969e87f290929'}",
            "dataset":"osv",
            "summary":"Incorrect Comparison in axios axios is vulnerable to Inefficient Regular Expression Complexity",
            "published_date":"2021-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/axios\/axios",
            "commit_href":"https:\/\/github.com\/axios\/axios\/commit\/5b457116e31db0e88fede6c428e969e87f290929",
            "commit_sha":"5b457116e31db0e88fede6c428e969e87f290929",
            "patch":"SINGLE",
            "chain_ord":"['5b457116e31db0e88fede6c428e969e87f290929']",
            "before_first_fix_commit":"{'5bc9ea24dda14e74def0b8ae9cdb3fa1a0c77773'}",
            "last_fix_commit":"5b457116e31db0e88fede6c428e969e87f290929",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/30\/2021, 12:33:43",
            "message":"Security fix for ReDoS (#3980)",
            "author":"ready-research",
            "comments":"{'com_1': {'author': 'kanatBektursyn', 'datetime': '09\/02\/2021, 07:27:22', 'body': 'What is the usage of self made trim function?'}, 'com_2': {'author': 'muditjuneja', 'datetime': '09\/03\/2021, 13:40:44', 'body': 'Something related to this : https:\/\/app.snyk.io\/vuln\/SNYK-JS-AXIOS-1579269?'}, 'com_3': {'author': 'vargaurav', 'datetime': '09\/05\/2021, 05:56:14', 'body': 'This is getting flagged in snyk.'}, 'com_4': {'author': 'tbogard', 'datetime': '09\/06\/2021, 01:01:48', 'body': '> What is the usage of self made trim function?\\r\\n\\r\\nProbably an intended custom made trim function with the intention to be faster... but ended in bloating resources...'}, 'com_5': {'author': 'catscarlet', 'datetime': '09\/08\/2021, 03:25:02', 'body': 'But, but `str.trim()` should not only deal with \\\\s but also deal with \\\\uFEFF and \\\\xA0. \\r\\n\\r\\nThe trim Polyfill was:\\r\\n\\r\\n```\\r\\nif (!String.prototype.trim) {\\r\\n  String.prototype.trim = function () {\\r\\n    return this.replace(\/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$\/g, \\'\\');\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\nMDN(en) removed this part because of \"outdated with WebView Android 37\".\\r\\nThe other languages still have this Polyfill part.\\r\\n\\r\\nSee mdn\/content#7602'}, 'com_6': {'author': 'Teej42', 'datetime': '09\/09\/2021, 17:15:48', 'body': 'It is not clear to me, but was this fix added in v0.21.4 release, or will be added in the next release?'}, 'com_7': {'author': 'jasonsaayman', 'datetime': '09\/09\/2021, 17:57:06', 'body': \"Already added :) I think the custom trim function was used like this incase a browser or version of node did not have native support. I don't think we can drop it just yet due to supporting a pretty large range of browsers. However I will review some of that code when I have a chance and see if it would be possible to get rid of it.\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/utils.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/axios\/axios\/raw\/5b457116e31db0e88fede6c428e969e87f290929\/lib%2Futils.js', 'patch': \"@@ -185,7 +185,7 @@ function isURLSearchParams(val) {\\n  * @returns {String} The String freed of excess whitespace\\n  *\/\\n function trim(str) {\\n-  return str.replace(\/^\\\\s*\/, '').replace(\/\\\\s*$\/, '');\\n+  return str.trim ? str.trim() : str.replace(\/^\\\\s+|\\\\s+$\/g, '');\\n }\\n \\n \/**\"}}",
            "message_norm":"security fix for redos (#3980)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('#3980', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/utils.js'])",
            "num_files":1.0
        },
        {
            "index":10,
            "vuln_id":"GHSA-23f2-vgr6-fwv7",
            "cwe_id":"{'CWE-74'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/8b82341cb742e7bd4966964b399012f7ba017e0b'}",
            "dataset":"osv",
            "summary":"Command injection in librenms LibreNMS v22.3.0 was discovered to contain multiple command injection vulnerabilities via the service_ip, hostname, and service_param parameters.",
            "published_date":"2022-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/8b82341cb742e7bd4966964b399012f7ba017e0b",
            "commit_sha":"8b82341cb742e7bd4966964b399012f7ba017e0b",
            "patch":"SINGLE",
            "chain_ord":"['8b82341cb742e7bd4966964b399012f7ba017e0b']",
            "before_first_fix_commit":"{'3d0e095eb777845c39ed11d0981e0cef143d9f66'}",
            "last_fix_commit":"8b82341cb742e7bd4966964b399012f7ba017e0b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2022, 02:32:36",
            "message":"Fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* Clean more variables\r\n\r\n* Update services.inc.php\r\n\r\n* Update services.inc.php",
            "author":"Tony Murray",
            "comments":"{'com_1': {'author': 'bakerds', 'datetime': '04\/22\/2022, 11:25:17', 'body': 'Hey @murrant, it looks like this breaks using IPv6 literals in the IP field of a service'}}",
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'includes\/services.inc.php': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/8b82341cb742e7bd4966964b399012f7ba017e0b\/includes%2Fservices.inc.php', 'patch': \"@@ -4,6 +4,7 @@\\n use LibreNMS\\\\Alert\\\\AlertRules;\\n use LibreNMS\\\\Config;\\n use LibreNMS\\\\RRD\\\\RrdDefinition;\\n+use LibreNMS\\\\Util\\\\Clean;\\n \\n function get_service_status($device = null)\\n {\\n@@ -120,6 +121,10 @@ function poll_service($service)\\n {\\n     $update = [];\\n     $old_status = $service['service_status'];\\n+    $service['service_type'] = Clean::fileName($service['service_type']);\\n+    $service['service_ip'] = Clean::fileName($service['service_ip']);\\n+    $service['hostname'] = Clean::fileName($service['hostname']);\\n+    $service['overwrite_ip'] = Clean::fileName($service['overwrite_ip']);\\n     $check_cmd = '';\\n \\n     \/\/ if we have a script for this check, use it.\\n@@ -130,7 +135,7 @@ function poll_service($service)\\n \\n     \/\/ If we do not have a cmd from the check script, build one.\\n     if ($check_cmd == '') {\\n-        $check_cmd = Config::get('nagios_plugins') . '\/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ? $service['service_ip'] : $service['hostname']);\\n+        $check_cmd = Config::get('nagios_plugins') . '\/check_' . $service['service_type'] . ' -H ' . ($service['service_ip'] ?: $service['hostname']);\\n         $check_cmd .= ' ' . $service['service_param'];\\n     }\"}}",
            "message_norm":"fix services command injection (#13932)\n\n* fix services command injection\r\n\r\n* clean more variables\r\n\r\n* update services.inc.php\r\n\r\n* update services.inc.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('command injection', 'SECWORD', ''), ('#13932', 'ISSUE', ''), ('command injection', 'SECWORD', ''), ('update', 'ACTION', ''), ('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/services.inc.php'])",
            "num_files":1.0
        },
        {
            "index":2799,
            "vuln_id":"GHSA-qq74-vgcf-54c3",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/e5d575928b1371a7e07b09b6592822298335062a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in ShowDoc ShowDoc is vulnerable to stored cross-site scripting via viva cshtm file upload in in versions 2.10.3 and prior. A patch is available and anticipated to be part of version 2.10.4.",
            "published_date":"2022-03-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/e5d575928b1371a7e07b09b6592822298335062a",
            "commit_sha":"e5d575928b1371a7e07b09b6592822298335062a",
            "patch":"SINGLE",
            "chain_ord":"['e5d575928b1371a7e07b09b6592822298335062a']",
            "before_first_fix_commit":"{'ba45d19e1d77a7eea866dab30eff5da552694891'}",
            "last_fix_commit":"e5d575928b1371a7e07b09b6592822298335062a",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 05:07:40",
            "message":"bug",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/e5d575928b1371a7e07b09b6592822298335062a\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -311,6 +311,7 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \".asa\")\\n \\t\\t\\t|| $isDangerStr($filename , \".cshtml\")\\n \\t\\t\\t|| $isDangerStr($filename , \".axd\")\\n+\\t\\t\\t|| $isDangerStr($filename , \"htm\")\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
            "message_norm":"bug",
            "language":"id",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":1121,
            "vuln_id":"GHSA-83rx-c8cr-6j8q",
            "cwe_id":"{'CWE-829'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/naptha\/tesseract.js\/commit\/679eba055f2a4271558e86beec3d1b70cae3fb28'}",
            "dataset":"osv",
            "summary":"Insecure Default Configuration in tesseract.js Versions of `tesseract.js` prior to 1.0.19 default to using a third-party proxy.  Requests may be proxied through `crossorigin.me` which clearly states is not suitable for production use. This may lead to instability and privacy violations.\n\n\n## Recommendation\n\nUpgrade to version 1.0.19 or later.",
            "published_date":"2019-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/naptha\/tesseract.js",
            "commit_href":"https:\/\/github.com\/naptha\/tesseract.js\/commit\/679eba055f2a4271558e86beec3d1b70cae3fb28",
            "commit_sha":"679eba055f2a4271558e86beec3d1b70cae3fb28",
            "patch":"SINGLE",
            "chain_ord":"['679eba055f2a4271558e86beec3d1b70cae3fb28']",
            "before_first_fix_commit":"{'06d32c6804acbf1f5af1c13966cb72a4ff864ecb'}",
            "last_fix_commit":"679eba055f2a4271558e86beec3d1b70cae3fb28",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/16\/2019, 12:34:36",
            "message":"Add stubs for error handling",
            "author":"HoldYourWaffle",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 6, 'total': 17}",
            "files":"{'src\/browser\/index.js': {'additions': 11, 'deletions': 6, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/naptha\/tesseract.js\/raw\/679eba055f2a4271558e86beec3d1b70cae3fb28\/src%2Fbrowser%2Findex.js', 'patch': '@@ -52,25 +52,30 @@ function loadImage(image, cb){\\n             var im = new Image\\n             im.src = image;\\n             im.onload = e => loadImage(im, cb);\\n+            \/\/im.onerror = e => ?; TODO handle error\\n             return\\n         }else{\\n             var xhr = new XMLHttpRequest();\\n             xhr.open(\\'GET\\', image, true)\\n             xhr.responseType = \"blob\";\\n-            xhr.onload = e => loadImage(xhr.response, cb);\\n-            xhr.onerror = function(e){\\n-                if(\/^https?:\\\\\/\\\\\/\/.test(image) && !\/^https:\\\\\/\\\\\/crossorigin.me\/.test(image)){\\n-                    console.debug(\\'Attempting to load image with CORS proxy\\')\\n-                    loadImage(\\'https:\/\/crossorigin.me\/\\' + image, cb)\\n+            \\n+            xhr.onload = e => {\\n+                if (xhr.status >= 400){\\n+                    \/\/TODO handle error\\n+                }else{\\n+                    loadImage(xhr.response, cb);\\n                 }\\n-            }\\n+            };\\n+            \/\/xhr.onerror = e => ?; TODO handle error\\n+            \\n             xhr.send(null)\\n             return\\n         }\\n     }else if(image instanceof File){\\n         \/\/ files\\n         var fr = new FileReader()\\n         fr.onload = e => loadImage(fr.result, cb);\\n+        \/\/fr.onerror = e => ?; TODO handle error\\n         fr.readAsDataURL(image)\\n         return\\n     }else if(image instanceof Blob){'}}",
            "message_norm":"add stubs for error handling",
            "language":"da",
            "entities":"[('add', 'ACTION', ''), ('error handling', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/browser\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1262,
            "vuln_id":"GHSA-8v99-48m9-c8pm",
            "cwe_id":"{'CWE-863'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/containerd\/imgcrypt\/commit\/6fdd9818a4d8142107b7ecd767d839c9707700d9'}",
            "dataset":"osv",
            "summary":"Incorrect Authorization in imgcrypt Imgcrypt implements a function `CheckAuthorization()` that is supposed to check whether a user is authorized to access an encrypted image given the keys that the user has provided on the command line that would enable decryption of the image. The check is to prevent that a user can start a container from an image that has previously been decrypted by another user on the same system and therefore a decrypted version of the image layers may be already available in the cache locally.\n\nThe failure occurs when an image with a ManifestList is used and the architecture of the local host is not the first one in the ManifestList. In the version prior to the fix, only the first architecture in the list was tested, which may not have its layers available locally (were not pulled) since it cannot be run on the host architecture. Therefore, the verdict on unavailable layers was that the image could be run anticipating that image run failure would occur later due to the layers not being available. However, this verdict to allow the image to run lead to other architectures in the ManifestList be able to run an image without providing keys if that image had previously been decrypted. The fixed version now skips over irrelevant architectures and tests the Manifest of the local architecture, if available.\n\nKnown projects that use the `CheckAuthorization()` of imgcrypt is for example the ctr-enc client tool provided by imgcrypt. In this implementation, the call to `CheckAuthorization()` is used on the client side and could therefore also be easily circumvented by a modified client tool not calling this function.\n\nIn relation to the vulnerability in ctr-enc, affected environments would have to allow different users to invoke ctr-enc indirectly using some sort of management stack that gives user indirect access to ctr-enc.\n\nThe patch has been applied to imgcrypt v1.1.4. Workarounds may include usage of different namespaces for each remote user.",
            "published_date":"2022-03-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/containerd\/imgcrypt",
            "commit_href":"https:\/\/github.com\/containerd\/imgcrypt\/commit\/6fdd9818a4d8142107b7ecd767d839c9707700d9",
            "commit_sha":"6fdd9818a4d8142107b7ecd767d839c9707700d9",
            "patch":"SINGLE",
            "chain_ord":"['6fdd9818a4d8142107b7ecd767d839c9707700d9']",
            "before_first_fix_commit":"{'f4400580b658c1fcb3cacc52dfb6104ea3c3aa82'}",
            "last_fix_commit":"6fdd9818a4d8142107b7ecd767d839c9707700d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2022, 19:52:56",
            "message":"images: Add list of Platforms to CheckAuthorization()\n\nTo be able to properly perform an authorization check on an image we need\nto know the platform to perform check when in cryptManifestList(). Extend\nthe logic for cryptoOp == cryptoOpUnwrapOnly to skip over manifests that\ndo not correspond to the local platform and return an error if no manifest\nwas found that matches the local platform.\n\nThe following projects seem NOT to be affect due to the change in the code\npath of CheckAuthorization() since they are not using it:\n\n- cri-o\n- nerdctl\n- skopeo\n- buildah\n- podman\n\nThe impact on imgcrypt via ctr-enc is not so clear either since\nCheckAuthorization() is not called on the server side but by the ctr-enc\nclient, thus can be modified easily.\n\nResolves: https:\/\/github.com\/containerd\/imgcrypt\/issues\/69\nSigned-off-by: Stefan Berger <stefanb@linux.ibm.com>",
            "author":"Stefan Berger",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'images\/encryption\/encryption.go': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/containerd\/imgcrypt\/raw\/6fdd9818a4d8142107b7ecd767d839c9707700d9\/images%2Fencryption%2Fencryption.go', 'patch': '@@ -50,6 +50,13 @@ const (\\n \/\/ LayerFilter allows to select Layers by certain criteria\\n type LayerFilter func(desc ocispec.Descriptor) bool\\n \\n+\/\/ isLocalPlatform determines whether the given platform matches the local one\\n+func isLocalPlatform(platform *ocispec.Platform) bool {\\n+\\tmatcher := platforms.NewMatcher(*platform)\\n+\\n+\\treturn matcher.Match(platforms.DefaultSpec())\\n+}\\n+\\n \/\/ IsEncryptedDiff returns true if mediaType is a known encrypted media type.\\n func IsEncryptedDiff(ctx context.Context, mediaType string) bool {\\n \\tswitch mediaType {\\n@@ -380,6 +387,9 @@ func cryptManifestList(ctx context.Context, cs content.Store, desc ocispec.Descr\\n \\tvar newManifests []ocispec.Descriptor\\n \\tmodified := false\\n \\tfor _, manifest := range index.Manifests {\\n+\\t\\tif cryptoOp == cryptoOpUnwrapOnly && !isLocalPlatform(manifest.Platform) {\\n+\\t\\t\\tcontinue\\n+\\t\\t}\\n \\t\\tnewManifest, m, err := cryptChildren(ctx, cs, manifest, cc, lf, cryptoOp, manifest.Platform)\\n \\t\\tif err != nil || cryptoOp == cryptoOpUnwrapOnly {\\n \\t\\t\\treturn ocispec.Descriptor{}, false, err\\n@@ -389,6 +399,9 @@ func cryptManifestList(ctx context.Context, cs content.Store, desc ocispec.Descr\\n \\t\\t}\\n \\t\\tnewManifests = append(newManifests, newManifest)\\n \\t}\\n+\\tif cryptoOp == cryptoOpUnwrapOnly {\\n+\\t\\treturn ocispec.Descriptor{}, false, fmt.Errorf(\"No manifest found for local platform\")\\n+\\t}\\n \\n \\tif modified {\\n \\t\\t\/\/ we need to update the index'}}",
            "message_norm":"images: add list of platforms to checkauthorization()\n\nto be able to properly perform an authorization check on an image we need\nto know the platform to perform check when in cryptmanifestlist(). extend\nthe logic for cryptoop == cryptoopunwraponly to skip over manifests that\ndo not correspond to the local platform and return an error if no manifest\nwas found that matches the local platform.\n\nthe following projects seem not to be affect due to the change in the code\npath of checkauthorization() since they are not using it:\n\n- cri-o\n- nerdctl\n- skopeo\n- buildah\n- podman\n\nthe impact on imgcrypt via ctr-enc is not so clear either since\ncheckauthorization() is not called on the server side but by the ctr-enc\nclient, thus can be modified easily.\n\nresolves: https:\/\/github.com\/containerd\/imgcrypt\/issues\/69\nsigned-off-by: stefan berger <stefanb@linux.ibm.com>",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('cryptoop', 'SECWORD', ''), ('cryptoopunwraponly', 'SECWORD', ''), ('error', 'FLAW', ''), ('found', 'ACTION', ''), ('server', 'SECWORD', ''), ('https:\/\/github.com\/containerd\/imgcrypt\/issues\/69', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['images\/encryption\/encryption.go'])",
            "num_files":1.0
        },
        {
            "index":2376,
            "vuln_id":"GHSA-m7j4-fhg6-xf5v",
            "cwe_id":"{'CWE-1321'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/DataTables\/DataTablesSrc\/commit\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03'}",
            "dataset":"osv",
            "summary":"Prototype pollution in datatables.net All versions of package datatables.net are vulnerable to Prototype Pollution due to an incomplete fix for https:\/\/snyk.io\/vuln\/SNYK-JS-DATATABLESNET-598806.",
            "published_date":"2020-12-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/DataTables\/DataTablesSrc",
            "commit_href":"https:\/\/github.com\/DataTables\/DataTablesSrc\/commit\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "commit_sha":"a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "patch":"SINGLE",
            "chain_ord":"['a51cbe99fd3d02aa5582f97d4af1615d11a1ea03']",
            "before_first_fix_commit":"{'d878f888142e4811f839ea3e099ad1de64d74698'}",
            "last_fix_commit":"a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2020, 10:00:54",
            "message":"Fix: Possible prototype pollution if `constructor` were used in a data property name\n\nhttps:\/\/github.com\/418sec\/huntr\/pull\/827",
            "author":"Allan Jardine",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'js\/core\/core.data.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DataTables\/DataTablesSrc\/raw\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03\/js%2Fcore%2Fcore.data.js', 'patch': \"@@ -357,7 +357,7 @@ function _fnSetObjectDataFn( mSource )\\n \\t\\t\\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\\n \\t\\t\\t{\\n \\t\\t\\t\\t\/\/ Protect against prototype pollution\\n-\\t\\t\\t\\tif (a[i] === '__proto__') {\\n+\\t\\t\\t\\tif (a[i] === '__proto__' || a[i] === 'constructor') {\\n \\t\\t\\t\\t\\tthrow new Error('Cannot set prototype values');\\n \\t\\t\\t\\t}\"}}",
            "message_norm":"fix: possible prototype pollution if `constructor` were used in a data property name\n\nhttps:\/\/github.com\/418sec\/huntr\/pull\/827",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('https:\/\/github.com\/418sec\/huntr\/pull\/827', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['js\/core\/core.data.js'])",
            "num_files":1.0
        },
        {
            "index":1942,
            "vuln_id":"GHSA-gvmf-wcx6-p974",
            "cwe_id":"{'CWE-89'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549'}",
            "dataset":"osv",
            "summary":"Improper quoting of columns when using setOrderBy() or setGroupBy() on listing classes in Pimcore ### Impact\nPimcore offers developers listing classes to make querying data easier. This listing classes also allow to order or group the results based on one or more columns which should be quoted by default. \nThe actual issue is that quoting is not done properly in both cases, so there's the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and  so relies on the auto-quoting being done by the listing classes. \n\n##### Example: \n```php\n\/\/ request url: https:\/\/example.com\/foo?groupBy=o_id`; SELECT SLEEP(20);--\n\n$list = new DataObject\\Car\\Listing();\n$list->setOrderKey($request->get('orderBy'));\n$list->setGroupBy($request->get('groupBy'));\n$list->load();\n```\n\n### Patches\nUpgrade to >= 10.4.4 or apply the following patch manually: \nhttps:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### Workarounds\nApply this patch manually: \nhttps:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549.patch\n\n### References\nhttps:\/\/github.com\/pimcore\/pimcore\/pull\/12444",
            "published_date":"2022-06-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
            "commit_sha":"21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
            "patch":"SINGLE",
            "chain_ord":"['21559c6bf0e4e828d33ff7af6e88caecb5ac6549']",
            "before_first_fix_commit":"{'4c66ac7305ee0a5027ade88020d811761555148b'}",
            "last_fix_commit":"21559c6bf0e4e828d33ff7af6e88caecb5ac6549",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/20\/2022, 13:37:31",
            "message":"[Security] SQL Injection in Data Hub GraphQL (#12444)\n\n* [Security] SQL Injection in Data Hub GraphQL (AbstractListing)\r\n\r\n* Update lib\/Model\/Listing\/AbstractListing.php\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\n\r\n* Update lib\/Model\/Listing\/AbstractListing.php\r\n\r\nCo-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nCo-authored-by: Jacob Dreesen <j.dreesen@neusta.de>\r\nCo-authored-by: Bernhard Rusch <brusch@users.noreply.github.com>",
            "author":"mcop1",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 3, 'total': 19}",
            "files":"{'lib\/Model\/Listing\/AbstractListing.php': {'additions': 16, 'deletions': 3, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/21559c6bf0e4e828d33ff7af6e88caecb5ac6549\/lib%2FModel%2FListing%2FAbstractListing.php', 'patch': '@@ -235,7 +235,7 @@ public function setOrderKey($orderKey, $quote = true)\\n                 if ($quote === false) {\\n                     $this->orderKey[] = $o;\\n                 } elseif ($this->isValidOrderKey($o)) {\\n-                    $this->orderKey[] = \\'`\\' . $o . \\'`\\';\\n+                    $this->orderKey[] = $this->quoteIdentifier($o);\\n                 }\\n             }\\n         }\\n@@ -411,8 +411,14 @@ public function setGroupBy($groupBy, $qoute = true)\\n         if ($groupBy) {\\n             $this->groupBy = $groupBy;\\n \\n-            if ($qoute && strpos($groupBy, \\'`\\') !== 0) {\\n-                $this->groupBy = \\'`\\' . $this->groupBy . \\'`\\';\\n+          if ($qoute) {\\n+                $quotedParts = [];\\n+                $parts = explode(\",\", trim($groupBy, \\'`\\'));\\n+                foreach($parts as $part) {\\n+                    $quotedParts[] = $this->quoteIdentifier(trim($part));\\n+                }\\n+\\n+                $this->groupBy = implode(\", \", $quotedParts);\\n             }\\n         }\\n \\n@@ -431,6 +437,13 @@ public function setValidOrders($validOrders)\\n         return $this;\\n     }\\n \\n+    public function quoteIdentifier(string $value): string\\n+    {\\n+        $db = Db::get();\\n+\\n+        return $db->quoteIdentifier($value);\\n+    }\\n+\\n     \/**\\n      * @param mixed $value\\n      * @param int|null $type'}}",
            "message_norm":"[security] sql injection in data hub graphql (#12444)\n\n* [security] sql injection in data hub graphql (abstractlisting)\r\n\r\n* update lib\/model\/listing\/abstractlisting.php\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\n\r\n* update lib\/model\/listing\/abstractlisting.php\r\n\r\nco-authored-by: mcop1 <89011527+mcop1@users.noreply.github.com>\r\n\r\nco-authored-by: jacob dreesen <j.dreesen@neusta.de>\r\nco-authored-by: bernhard rusch <brusch@users.noreply.github.com>",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('#12444', 'ISSUE', ''), ('security', 'SECWORD', ''), ('sql injection', 'SECWORD', ''), ('j.dreesen@neusta.de', 'EMAIL', ''), ('j.dreesen@neusta.de', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Model\/Listing\/AbstractListing.php'])",
            "num_files":1.0
        },
        {
            "index":234,
            "vuln_id":"GHSA-3c33-3465-fhx2",
            "cwe_id":"{'CWE-668'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/e5bb6d80bc308fc56b9a01ffb76c34159995353c'}",
            "dataset":"osv",
            "summary":"Exposure of Resource to Wrong Sphere in LibreNMS An issue was discovered in LibreNMS before 1.65.1. It has insufficient access control for normal users because of \"'guard' => 'admin'\" instead of \"'middleware' => ['can:admin']\" in routes\/web.php.",
            "published_date":"2021-09-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/e5bb6d80bc308fc56b9a01ffb76c34159995353c",
            "commit_sha":"e5bb6d80bc308fc56b9a01ffb76c34159995353c",
            "patch":"SINGLE",
            "chain_ord":"['e5bb6d80bc308fc56b9a01ffb76c34159995353c']",
            "before_first_fix_commit":"{'a30fcbde0a0f8a2109cbd4edb2b27b118190b3ca'}",
            "last_fix_commit":"e5bb6d80bc308fc56b9a01ffb76c34159995353c",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2020, 23:04:48",
            "message":"Fix settings access (#11915)\n\nnormal users could access",
            "author":"Tony Murray",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'routes\/web.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/e5bb6d80bc308fc56b9a01ffb76c34159995353c\/routes%2Fweb.php', 'patch': \"@@ -43,7 +43,7 @@\\n     });\\n \\n     \/\/ admin pages\\n-    Route::group(['guard' => 'admin'], function () {\\n+    Route::group(['middleware' => ['can:admin']], function () {\\n         Route::get('settings\/{tab?}\/{section?}', 'SettingsController@index')->name('settings');\\n         Route::put('settings\/{name}', 'SettingsController@update')->name('settings.update');\\n         Route::delete('settings\/{name}', 'SettingsController@destroy')->name('settings.destroy');\"}}",
            "message_norm":"fix settings access (#11915)\n\nnormal users could access",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#11915', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['routes\/web.php'])",
            "num_files":1.0
        },
        {
            "index":2575,
            "vuln_id":"GHSA-pgcq-h79j-2f69",
            "cwe_id":"{'CWE-354'}",
            "score":7.0,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a'}",
            "dataset":"osv",
            "summary":"Incomplete validation of shapes in multiple TF ops ### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving\/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-11-10",
            "chain_len":6,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4dddb2fd0b01cdd196101afbba6518658a2c9e07",
            "commit_sha":"4dddb2fd0b01cdd196101afbba6518658a2c9e07",
            "patch":"MULTI",
            "chain_ord":"['579261dcd446385831fe4f7457d802a59685121d', '4d74d8a00b07441cba090a02e0dd9ed385145bf4', '68422b215e618df5ad375bcdc6d2052e9fd3080a', 'da4aad5946be30e5f049920fa076e1f7ef021261', '4dddb2fd0b01cdd196101afbba6518658a2c9e07', 'e7f497570abb6b4ae5af4970620cd880e4c0c904']",
            "before_first_fix_commit":"{'e0214528739cad3bd02fbf2696a793dc342ffb94'}",
            "last_fix_commit":"e7f497570abb6b4ae5af4970620cd880e4c0c904",
            "chain_ord_pos":5.0,
            "commit_datetime":"10\/20\/2021, 21:53:58",
            "message":"Fix segfault in pools on empty shapes when certain dimension were very large.\n\nPooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. This multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\nPiperOrigin-RevId: 404644978\nChange-Id: Ic79f89c970357ca2962b1f231449066db9403146",
            "author":"Reed Wanderman-Milne",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/core\/kernels\/pooling_ops_common.h': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4dddb2fd0b01cdd196101afbba6518658a2c9e07\/tensorflow%2Fcore%2Fkernels%2Fpooling_ops_common.h', 'patch': \"@@ -189,6 +189,9 @@ class MaxPoolingOp : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     \/\/ On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     \/\/ EigenMatrix version that is currently faster than Eigen's\\n     \/\/ Spatial MaxPooling implementation.\\n@@ -443,6 +446,9 @@ class MaxPoolingV2Op : public OpKernel {\\n   void SpatialMaxPool(OpKernelContext* context, Tensor* output,\\n                       const Tensor& tensor_in, const PoolParameters& params,\\n                       const Padding& padding) {\\n+    if (output->NumElements() == 0) {\\n+      return;\\n+    }\\n     \/\/ On GPU, use Eigen's Spatial Max Pooling.  On CPU, use an\\n     \/\/ EigenMatrix version that is currently faster than Eigen's\\n     \/\/ Spatial MaxPooling implementation.\\n@@ -561,6 +567,9 @@ template <typename Device, typename T>\\n void SpatialAvgPool(OpKernelContext* context, Tensor* output,\\n                     const Tensor& input, const PoolParameters& params,\\n                     const Padding& padding) {\\n+  if (output->NumElements() == 0) {\\n+    return;\\n+  }\\n   typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\\n       ConstEigenMatrixMap;\\n   typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\"}}",
            "message_norm":"fix segfault in pools on empty shapes when certain dimension were very large.\n\npooling ops multiply certain components of the input shape, e.g. by multiplying input.shape[1] * input.shape[2] * input.shape[3]. this multiplication could overflow an int64 value if shape[0] was 0 but shape[1], shape[2], and shape[3] were very large, e.g. by passing an input with shape (0, 2**25, 2**25, 2**25).\n\npiperorigin-revid: 404644978\nchange-id: ic79f89c970357ca2962b1f231449066db9403146",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('segfault', 'SECWORD', ''), ('overflow', 'SECWORD', ''), ('404644978', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/pooling_ops_common.h'])",
            "num_files":1.0
        },
        {
            "index":727,
            "vuln_id":"GHSA-627q-g293-49q7",
            "cwe_id":"{'CWE-400'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1361fb7e29449629e1df94d44e0427ebec8c83c7'}",
            "dataset":"osv",
            "summary":"Abort caused by allocating a vector that is too large in Tensorflow ### Impact\nDuring shape inference, TensorFlow can [allocate a large vector](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/shape_inference.cc#L788-L790) based on a value from a tensor controlled by the user:\n\n```cc\n  const auto num_dims = Value(shape_dim);\n  std::vector<DimensionHandle> dims;\n  dims.reserve(num_dims);\n``` \n  \n### Patches           \nWe have patched the issue in GitHub commit [1361fb7e29449629e1df94d44e0427ebec8c83c7](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1361fb7e29449629e1df94d44e0427ebec8c83c7).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1361fb7e29449629e1df94d44e0427ebec8c83c7",
            "commit_sha":"1361fb7e29449629e1df94d44e0427ebec8c83c7",
            "patch":"SINGLE",
            "chain_ord":"['1361fb7e29449629e1df94d44e0427ebec8c83c7']",
            "before_first_fix_commit":"{'f6e7c84316c9fe416ea32086fa3c64fee21fafab'}",
            "last_fix_commit":"1361fb7e29449629e1df94d44e0427ebec8c83c7",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/10\/2021, 23:52:57",
            "message":"Fix abort caused by allocating a too large vector.\n\nWe need to make sure that the number of dimensions in a shape is within limits.\n\nPiperOrigin-RevId: 408997911\nChange-Id: If59e1c23f2ec9c2d4ff4d8632fd62b2a7773a4eb",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 15, 'deletions': 0, 'total': 15}",
            "files":"{'tensorflow\/core\/framework\/shape_inference.cc': {'additions': 15, 'deletions': 0, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1361fb7e29449629e1df94d44e0427ebec8c83c7\/tensorflow%2Fcore%2Fframework%2Fshape_inference.cc', 'patch': '@@ -14,6 +14,8 @@ limitations under the License.\\n ==============================================================================*\/\\n #include \"tensorflow\/core\/framework\/shape_inference.h\"\\n \\n+#include <cstdint>\\n+\\n #include \"tensorflow\/core\/framework\/bounds_check.h\"\\n #include \"tensorflow\/core\/framework\/full_type_util.h\"\\n #include \"tensorflow\/core\/framework\/node_def.pb.h\"\\n@@ -789,6 +791,19 @@ Status InferenceContext::InternalMakeShapeFromTensor(\\n       return ReturnUnknownShape(out);\\n     }\\n     const auto num_dims = Value(shape_dim);\\n+    \/\/ TODO(mihaimaruseac): Should be `TensorShape::MaxDimensions()` as we are\\n+    \/\/ not able to materialize shapes with more than this number of dimensions\\n+    \/\/ but then shape inference would fail for operations such as\\n+    \/\/ `tf.range`\/`tf.ones`, etc. where the shape is not really materialized,\\n+    \/\/ only used during the inference. Hence, just prevent doing a `reserve`\\n+    \/\/ with a very large argument.\\n+    const int64_t max_dimensions = 1 << 20;\\n+    if (num_dims >= max_dimensions) {\\n+      return errors::Internal(\\n+          \"Cannot create a tensor with \", num_dims,\\n+          \" dimensions, as these would be more than maximum of \",\\n+          max_dimensions);\\n+    }\\n     std::vector<DimensionHandle> dims;\\n     dims.reserve(num_dims);\\n     for (int i = 0; i < num_dims; i++) dims.push_back(UnknownDim());'}}",
            "message_norm":"fix abort caused by allocating a too large vector.\n\nwe need to make sure that the number of dimensions in a shape is within limits.\n\npiperorigin-revid: 408997911\nchange-id: if59e1c23f2ec9c2d4ff4d8632fd62b2a7773a4eb",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('408997911', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/shape_inference.cc'])",
            "num_files":1.0
        },
        {
            "index":2673,
            "vuln_id":"GHSA-q263-fvxm-m5mw",
            "cwe_id":"{'CWE-908', 'CWE-125'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b'}",
            "dataset":"osv",
            "summary":"Heap out of bounds access in MakeEdge in TensorFlow ### Impact\nUnder certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/3616708cb866365301d8e67b43b32b46d94b08a0\/tensorflow\/core\/common_runtime\/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:\n\n```cc\n  DataType src_out = src->output_type(output_index);\n  DataType dst_in = dst->input_type(input_index);\n  \/\/...\n```\n\nHowever, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.\n\nIn most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.\n\n### Patches\nWe have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2020-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "commit_sha":"0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "patch":"SINGLE",
            "chain_ord":"['0cc38aaa4064fd9e79101994ce9872c6d91f816b']",
            "before_first_fix_commit":"{'3616708cb866365301d8e67b43b32b46d94b08a0'}",
            "last_fix_commit":"0cc38aaa4064fd9e79101994ce9872c6d91f816b",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2020, 17:31:57",
            "message":"Prevent unitialized memory access in `GraphConstructor::MakeEdge`\n\nThe `MakeEdge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. However, if this is not the case this results in accessing data out of bounds. Because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. However, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\nPiperOrigin-RevId: 346343288\nChange-Id: I2127da27c2023d27f26efd39afa6c853385cab6f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'tensorflow\/core\/common_runtime\/graph_constructor.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0cc38aaa4064fd9e79101994ce9872c6d91f816b\/tensorflow%2Fcore%2Fcommon_runtime%2Fgraph_constructor.cc', 'patch': '@@ -44,6 +44,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/lib\/gtl\/inlined_vector.h\"\\n #include \"tensorflow\/core\/lib\/strings\/scanner.h\"\\n #include \"tensorflow\/core\/lib\/strings\/str_util.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/platform\/logging.h\"\\n #include \"tensorflow\/core\/platform\/macros.h\"\\n #include \"tensorflow\/core\/public\/version.h\"\\n@@ -1425,6 +1426,17 @@ void GraphConstructor::Undo() {\\n \\n Status GraphConstructor::MakeEdge(Node* src, int output_index, Node* dst,\\n                                   int input_index) {\\n+  if (output_index >= src->num_outputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Output \", output_index, \" of node \", src->name(),\\n+        \" does not exist. Node only has \", src->num_outputs(), \" outputs.\");\\n+  }\\n+  if (input_index >= dst->num_inputs()) {\\n+    return errors::InvalidArgument(\\n+        \"Input \", input_index, \" of node \", dst->name(),\\n+        \" does not exist. Node only has \", dst->num_inputs(), \" inputs.\");\\n+  }\\n+\\n   DataType src_out = src->output_type(output_index);\\n   DataType dst_in = dst->input_type(input_index);\\n   if (!TypesCompatible(dst_in, src_out)) {'}}",
            "message_norm":"prevent unitialized memory access in `graphconstructor::makeedge`\n\nthe `makeedge` implementation assumes that there exists an output at `output_index` of `src` node and an input at `input_index` of `dst` node. however, if this is not the case this results in accessing data out of bounds. because we are accessing an array that is a private member of a class and only in read only mode, this usually results only in unitialized memory access. however, it is reasonable to think that malicious users could manipulate these indexes to actually read data outside the class, thus resulting in information leakage and further exploits.\n\npiperorigin-revid: 346343288\nchange-id: i2127da27c2023d27f26efd39afa6c853385cab6f",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('out of bounds', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('manipulate', 'ACTION', ''), ('information leakage', 'SECWORD', ''), ('exploits', 'SECWORD', ''), ('346343288', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/graph_constructor.cc'])",
            "num_files":1.0
        },
        {
            "index":1907,
            "vuln_id":"GHSA-gp67-c7j2-2qg2",
            "cwe_id":"{'CWE-532', 'CWE-319'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/commit\/aadefdbf319954cf0c5acbe032637e1c0a924f37'}",
            "dataset":"osv",
            "summary":"Insertion of Sensitive Information into Log File in Jenkins Mask Passwords Plugin Jenkins Mask Passwords Plugin 2.12.0 and earlier transmits globally configured passwords in plain text as part of the configuration form, potentially resulting in their exposure.",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/mask-passwords-plugin",
            "commit_href":"https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/commit\/aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "commit_sha":"aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "patch":"SINGLE",
            "chain_ord":"['aadefdbf319954cf0c5acbe032637e1c0a924f37']",
            "before_first_fix_commit":"{'3440b0aa5d2553889245327a9d37a006b4b17c3f'}",
            "last_fix_commit":"aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/28\/2020, 02:43:19",
            "message":"[SECURITY-157] Fix global mask passwords config\n\nSince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nThis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nSee also:\n\n- [SECURITY-157][SECURITY-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#SECURITY-157\n[SECURITY-157]: https:\/\/issues.jenkins-ci.org\/browse\/SECURITY-157",
            "author":"Sam Gleske",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/main\/resources\/com\/michelin\/cio\/hudson\/plugins\/maskpasswords\/MaskPasswordsBuildWrapper\/global.jelly': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/raw\/aadefdbf319954cf0c5acbe032637e1c0a924f37\/src%2Fmain%2Fresources%2Fcom%2Fmichelin%2Fcio%2Fhudson%2Fplugins%2Fmaskpasswords%2FMaskPasswordsBuildWrapper%2Fglobal.jelly', 'patch': '@@ -51,7 +51,7 @@\\n                         <\/td>\\n                         <td width=\"10%\" align=\"right\">${%Password}<\/td>\\n                         <td width=\"30%\">\\n-                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.password?globalVarPasswordPair.password:\\'\\'}\"\/>\\n+                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.passwordAsSecret?globalVarPasswordPair.passwordAsSecret.encryptedValue:\\'\\'}\"\/>\\n                         <\/td>\\n                         <td width=\"20%\" align=\"right\"><f:repeatableDeleteButton\/><\/td>\\n                     <\/tr>'}}",
            "message_norm":"[security-157] fix global mask passwords config\n\nsince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nthis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nsee also:\n\n- [security-157][security-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#security-157\n[security-157]: https:\/\/issues.jenkins-ci.org\/browse\/security-157",
            "language":"en",
            "entities":"[('security-157', 'SECWORD', ''), ('fix', 'ACTION', ''), ('passwords', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('password', 'SECWORD', ''), ('password', 'SECWORD', ''), ('security-157][security-157', 'SECWORD', ''), ('security', 'SECWORD', ''), ('https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#security-157', 'SECWORD', ''), ('security-157', 'SECWORD', ''), ('https:\/\/issues.jenkins-ci.org\/browse\/security-157', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/resources\/com\/michelin\/cio\/hudson\/plugins\/maskpasswords\/MaskPasswordsBuildWrapper\/global.jelly'])",
            "num_files":1.0
        },
        {
            "index":102,
            "vuln_id":"GHSA-2hxv-mx8x-mcj9",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/denkGroot\/Spina\/commit\/bfe44f289e336f80b6593032679300c493735e75'}",
            "dataset":"osv",
            "summary":"Spina vulnerable to a cross-site request forgery (CSRF) vulnerability Cross-site request forgery (CSRF) vulnerability in Spina before commit bfe44f289e336f80b6593032679300c493735e75.",
            "published_date":"2018-08-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/denkGroot\/Spina",
            "commit_href":"https:\/\/github.com\/denkGroot\/Spina\/commit\/bfe44f289e336f80b6593032679300c493735e75",
            "commit_sha":"bfe44f289e336f80b6593032679300c493735e75",
            "patch":"SINGLE",
            "chain_ord":"['bfe44f289e336f80b6593032679300c493735e75']",
            "before_first_fix_commit":"{'2b3e8f724a97b312a61503f378a5ce6def58bfe2'}",
            "last_fix_commit":"bfe44f289e336f80b6593032679300c493735e75",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/16\/2015, 14:23:27",
            "message":"protect from forgery",
            "author":"Bram Jetten",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'app\/controllers\/spina\/application_controller.rb': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/denkGroot\/Spina\/raw\/bfe44f289e336f80b6593032679300c493735e75\/app%2Fcontrollers%2Fspina%2Fapplication_controller.rb', 'patch': '@@ -1,5 +1,7 @@\\n module Spina\\n   class ApplicationController < ActionController::Base\\n+    protect_from_forgery\\n+    \\n     include ApplicationHelper\\n \\n     private'}}",
            "message_norm":"protect from forgery",
            "language":"en",
            "entities":"[('protect', 'SECWORD', ''), ('forgery', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/controllers\/spina\/application_controller.rb'])",
            "num_files":1.0
        },
        {
            "index":1021,
            "vuln_id":"GHSA-7fc2-rm35-2pp7",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/ipython\/ipython\/commit\/1415a9710407e7c14900531813c15ba6165f0816', 'https:\/\/github.com\/ipython\/ipython\/commit\/a05fe052a18810e92d9be8c1185952c13fe4e5b0'}",
            "dataset":"osv",
            "summary":"IPython vulnerable to cross site request forgery (CSRF) IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.",
            "published_date":"2022-05-17",
            "chain_len":2,
            "project":"https:\/\/github.com\/ipython\/ipython",
            "commit_href":"https:\/\/github.com\/ipython\/ipython\/commit\/1415a9710407e7c14900531813c15ba6165f0816",
            "commit_sha":"1415a9710407e7c14900531813c15ba6165f0816",
            "patch":"MULTI",
            "chain_ord":"['1415a9710407e7c14900531813c15ba6165f0816', 'a05fe052a18810e92d9be8c1185952c13fe4e5b0']",
            "before_first_fix_commit":"{'6884e8b36dc1e2d59e1d8ddb5e95788728d76e6f'}",
            "last_fix_commit":"a05fe052a18810e92d9be8c1185952c13fe4e5b0",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2015, 07:11:16",
            "message":"check origin of API requests\n\nprotects agains CSRF on POST endpoints via forms.",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 48, 'deletions': 1, 'total': 49}",
            "files":"{'IPython\/html\/base\/handlers.py': {'additions': 48, 'deletions': 1, 'changes': 49, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ipython\/ipython\/raw\/1415a9710407e7c14900531813c15ba6165f0816\/IPython%2Fhtml%2Fbase%2Fhandlers.py', 'patch': '@@ -5,7 +5,6 @@\\n \\n import functools\\n import json\\n-import logging\\n import os\\n import re\\n import sys\\n@@ -15,6 +14,10 @@\\n     from http.client import responses\\n except ImportError:\\n     from httplib import responses\\n+try:\\n+    from urllib.parse import urlparse # Py 3\\n+except ImportError:\\n+    from urlparse import urlparse # Py 2\\n \\n from jinja2 import TemplateNotFound\\n from tornado import web\\n@@ -320,6 +323,50 @@ def write_error(self, status_code, **kwargs):\\n class APIHandler(IPythonHandler):\\n     \"\"\"Base class for API handlers\"\"\"\\n     \\n+    def check_origin(self):\\n+        \"\"\"Check Origin for cross-site API requests.\\n+        \\n+        Copied from WebSocket with changes:\\n+        \\n+        - allow unspecified host\/origin (e.g. scripts)\\n+        \"\"\"\\n+        if self.allow_origin == \\'*\\':\\n+            return True\\n+\\n+        host = self.request.headers.get(\"Host\")\\n+        origin = self.request.headers.get(\"Origin\")\\n+\\n+        # If no header is provided, assume it comes from a script\/curl.\\n+        # We are only concerned with cross-site browser stuff here.\\n+        if origin is None or host is None:\\n+            return True\\n+        \\n+        origin = origin.lower()\\n+        origin_host = urlparse(origin).netloc\\n+        \\n+        # OK if origin matches host\\n+        if origin_host == host:\\n+            return True\\n+        \\n+        # Check CORS headers\\n+        if self.allow_origin:\\n+            allow = self.allow_origin == origin\\n+        elif self.allow_origin_pat:\\n+            allow = bool(self.allow_origin_pat.match(origin))\\n+        else:\\n+            # No CORS headers deny the request\\n+            allow = False\\n+        if not allow:\\n+            self.log.warn(\"Blocking Cross Origin API request.  Origin: %s, Host: %s\",\\n+                origin, host,\\n+            )\\n+        return allow\\n+\\n+    def prepare(self):\\n+        if not self.check_origin():\\n+            raise web.HTTPError(404)\\n+        return super(APIHandler, self).prepare()\\n+\\n     @property\\n     def content_security_policy(self):\\n         csp = \\'; \\'.join(['}}",
            "message_norm":"check origin of api requests\n\nprotects agains csrf on post endpoints via forms.",
            "language":"en",
            "entities":"[('protects', 'ACTION', ''), ('csrf', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['IPython\/html\/base\/handlers.py'])",
            "num_files":1.0
        },
        {
            "index":539,
            "vuln_id":"GHSA-53m6-44rc-h2q5",
            "cwe_id":"{'CWE-347'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/octobercms\/october\/commit\/e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a'}",
            "dataset":"osv",
            "summary":"Missing server signature validation in OctoberCMS ### Impact\n\nThis advisory affects authors of plugins and themes listed on the October CMS marketplace where an end-user will inadvertently expose authors to potential financial loss by entering their private license key into a compromised server.\n\nIt has been disclosed that a project fork of October CMS v1.0 is using a compromised gateway to access the October CMS marketplace service. The compromised gateway captures the personal\/business information of users and authors, including private source code files. It was also disclosed that captured plugin files are freely redistributed to other users without authorization.\n\n1. End-users are provided with a forked version of October CMS v1.0. The provided software is modified to use a compromised gateway server.\n\n2. The user is instructed to enter their October CMS license key into the administration panel to access the October CMS marketplace. The key is sent to the compromised server while appearing to access the genuine October CMS gateway server.\n\n3. The compromised gateway server uses a \"man in the middle\" mechanism that captures information while forwarding the request to the genuine October CMS gateway and relaying the response back to the client.\n\n4. The compromised gateway server stores the license key and other information about the user account including client name, email address and contents of purchased plugins and privately uploaded plugin files. \n\n5. The stored plugin files are made available to other users of the compromised gateway server.\n\n### Patches\n\nThe issue has been patched in Build 475 (v1.0.475) and v1.1.11.\n\n### Workarounds\n\nApply https:\/\/github.com\/octobercms\/october\/commit\/e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a to your installation manually if unable to upgrade to Build 475 or v1.1.11.\n\n### Recommendations\n\nWe recommend the following steps to make sure your account information stays secure:\n\n- Do not share your license key with anyone except October CMS.\n- Check to make sure that your gateway update server has not been modified.\n- Be aware of phishing websites, including other platforms that use the same appearance.\n- For authors, you may contact us for help requesting the removal of affected plugins.\n- Before providing plugin support, verify that the user holds a legitimate copy of the plugin.\n\n### References\n\nCredits for research on this exploit:\n\u2022 Nikita Khaetsky\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/october",
            "commit_href":"https:\/\/github.com\/octobercms\/october\/commit\/e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a",
            "commit_sha":"e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a",
            "patch":"SINGLE",
            "chain_ord":"['e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a']",
            "before_first_fix_commit":"{'e6867a5eb69f5c723adb33b6ca97fcda99634446'}",
            "last_fix_commit":"e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/20\/2022, 01:54:45",
            "message":"Checks gateway server has a valid signature",
            "author":"Sam Georges",
            "comments":null,
            "stats":"{'additions': 38, 'deletions': 2, 'total': 40}",
            "files":"{'modules\/system\/classes\/UpdateManager.php': {'additions': 38, 'deletions': 2, 'changes': 40, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/october\/raw\/e3b455ad587282f0fbcb7763c6d9c3d000ca1e6a\/modules%2Fsystem%2Fclasses%2FUpdateManager.php', 'patch': \"@@ -8,6 +8,7 @@\\n use Cache;\\n use Schema;\\n use Config;\\n+use Request;\\n use ApplicationException;\\n use Cms\\\\Classes\\\\ThemeManager;\\n use System\\\\Models\\\\Parameter;\\n@@ -885,6 +886,10 @@ public function requestServerData($uri, $postData = [])\\n             throw new ApplicationException(Lang::get('system::lang.server.response_invalid'));\\n         }\\n \\n+        if (!$this->validateServerSignature($resultData, $result->headers['Rest-Sign'] ?? '')) {\\n+            throw new ApplicationException(Lang::get('system::lang.server.response_invalid') . ' (Bad signature)');\\n+        }\\n+\\n         return $resultData;\\n     }\\n \\n@@ -963,12 +968,13 @@ protected function createServerUrl($uri)\\n      *\/\\n     protected function applyHttpAttributes($http, $postData)\\n     {\\n-        $postData['protocol_version'] = '1.2';\\n-        $postData['client'] = 'october';\\n+        $postData['protocol_version'] = '1.3';\\n+        $postData['client'] = 'October CMS';\\n \\n         $postData['server'] = base64_encode(json_encode([\\n             'php'   => PHP_VERSION,\\n             'url'   => Url::to('\/'),\\n+            'ip'    => Request::ip(),\\n             'since' => PluginVersion::orderBy('created_at')->value('created_at')\\n         ]));\\n \\n@@ -1070,4 +1076,34 @@ protected function printMessages()\\n             }\\n         }\\n     }\\n+\\n+    \/**\\n+     * validateServerSignature checks the server has provided a valid signature\\n+     *\\n+     * @return bool\\n+     *\/\\n+    protected function validateServerSignature($data, $signature)\\n+    {\\n+        if (!$signature) {\\n+            return false;\\n+        }\\n+\\n+        $signature = base64_decode($signature);\\n+\\n+        $pubKey = '-----BEGIN PUBLIC KEY-----\\n+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt+KwvTXqC8Mz9vV4KIvX\\n+3y+aZusrlg26jdbNVUuhXNFbt1VisjJydHW2+WGsiEHSy2s61ZAV2dICR6f3huSw\\n+jY\/MH9j23Oo\/u61CBpvIS3Q8uC+TLtJl4\/F9eqlnzocfMoKe8NmcBbUR3TKQoIok\\n+xbSMl6jiE2k5TJdzhHUxjZRIeeLDLMKYX6xt37LdhuM8zO6sXQmCGg4J6LmHTJph\\n+96H11gBvcFSFJSmIiDykJOELZl\/aVcY1g3YgpL0mw5Bw1VTmKaRdz1eBi9DmKrKX\\n+UijG4gD8eLRV\/FS\/sZCFNR\/evbQXvTBxO0TOIVi85PlQEcMl4SBj0CoTyNbcAGtz\\n+4wIDAQAB\\n+-----END PUBLIC KEY-----';\\n+\\n+        $pubKey = Config::get('system.update_gateway_key', $pubKey);\\n+\\n+        $data = base64_encode(json_encode($data));\\n+\\n+        return openssl_verify($data, $signature, $pubKey) === 1;\\n+    }\\n }\"}}",
            "message_norm":"checks gateway server has a valid signature",
            "language":"en",
            "entities":"[('server', 'SECWORD', ''), ('signature', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/system\/classes\/UpdateManager.php'])",
            "num_files":1.0
        },
        {
            "index":1904,
            "vuln_id":"GHSA-gp2m-7cfp-h6gf",
            "cwe_id":"{'CWE-384'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/90dca835158495b173808273e7df127303b8b953'}",
            "dataset":"osv",
            "summary":"Incorrect persistent NameID generation in SimpleSAMLphp ### Background\nWhen a SimpleSAMLphp Identity Provider is misconfigured, a bug in the software when trying to build a persistent `NameID` to univocally identify the authenticating subject could cause different users to get the same identifier generated, depending on the attributes available for them right after authentication.\n\nPlease note that even though this is possible thanks to a bug, **an IdP must be misconfigured** to release persistent `NameID`s even if it is not properly configured to generate them based on the specifics of the deployment.\n\n### Description\nPersistent `NameID`s will typically be sent as part of the `Subject` element of a SAML assertion, or as the contents of the `eduPersonTargetedID` attribute. Here is an example of such a `NameID`:\n\n    <NameID Format=\u201curn:oasis:names:tc:SAML:2.0:nameid-format:persistent\u201c>\n        zbonsm0Yn9Gnw14uQEEPr6AO7d+IvxwCQN3t+o24jYs=\n    <\/NameID>\n\nSome service providers will use this information to identify a user across sessions because a persistent `NameID` will never change for a given user. This could lead to different users accessing the same account in those service providers.\n\nIn order to be affected by this issue, the following circumstances must concur:\n\n- SimpleSAMLphp acts as an identity provider.\n- The service provider asking for authentication requests a persistent `NameID`.\n- No `saml:PersistentNameID` authentication processing filter is configured (neither for the whole IdP, nor for a given SP).\n- No `simplesaml.nameidattribute` configuration option is set (neither for the whole IdP, nor for a given SP).\n- One of the following alternatives:\n  - No `userid.attribute` configuration option is set **and** the users don't have an `eduPersonPrincipalName` attribute in the users backend, **or**\n  - the `userid.attribute` configuration option is set to an empty or missing attribute.\n\nIf all these requirements are met, the `SimpleSAML_Auth_ProcessingChain` class will try to keep a unique user identifier in the state array (`addUserID()` method). Bear in mind that this code is executed **before** all the authentication processing filters configured, meaning that only those attributes retrieved for the user during **initial authentication** will be available. If no `userid.attribute` configuration option is set, the default `eduPersonPrincipalName` will then be used. However, since it is missing, no identifier will be kept. Alternatively, if `userid.attribute` is set to a missing or empty attribute, the `addUserID()` method will abort trying to register an identifier.\n\nAfter executing all authentication processing filters, SimpleSAMLphp will build a SAML assertion. If the service provider requests persistent `NameID`s, SimpleSAMLphp will attempt to generate one given that none is already available (because the `saml:PersistentNameID` filter was not used). At this point, the code will look for the `simplesaml.nameidattribute` configuration option in either the local IdP metadata or in the remote SP metadata. If none of them are configured, it will default to the unique user identifier previously registered by `SimpleSAML_Auth_ProcessingChain`. If no identifier was kept there, the code will log an error message:\n\n    Unable to generate NameID. Check the userid.attribute option.\n\nHowever, instead of aborting the `NameID` generation at that point, it will go on and use a value missing from the state array as the source for the computation, meaning the `null` type will be used. Hence, all users connecting to a given service provider will get the same `NameID` generated, because all the input parameters will be the same:\n\n- The SP's entity identifier.\n- The IdP's entity identifier.\n- The `null` value.\n- The common secret salt from the main configuration.\n\n### Affected versions\nAll SimpleSAMLphp versions between 1.7.0 and 1.14.10, inclusive.\n\n### Impact\nThose identity providers affected by this bug and misconfigured as previously described could be issuing SAML assertions with common `NameID`s for all or a subset of their users. If a service provider uses those `NameID`s to identify the users of the affected IdP, all the users will be associated with the same user account at the service provider, causing all sorts of potential security issues like information disclosure or unauthorized access.\n\nWhile we can consider this unlikely to happen, some cases have been already observed. In particular, some identity providers using default configurations and consuming metadata automatically (i.e. using the _metarefresh_ module) while using a user backend like _Active Directory_ that does not populate `eduPersonPrincipalName` are particularly sensitive to this issue.\n\n### Resolution\nUpgrade to the latest version.\n\nConfigure a `saml:PersistentNameID` authentication processing filter according to your needs. Remember to check that **the attribute used as the source** for the `NameID` **is present at the moment the `saml:PersistentNameID` filter is executed**. The attribute used must be **unique** per user, and **must not change** over time.",
            "published_date":"2020-01-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/simplesamlphp\/simplesamlphp",
            "commit_href":"https:\/\/github.com\/simplesamlphp\/simplesamlphp\/commit\/90dca835158495b173808273e7df127303b8b953",
            "commit_sha":"90dca835158495b173808273e7df127303b8b953",
            "patch":"SINGLE",
            "chain_ord":"['90dca835158495b173808273e7df127303b8b953']",
            "before_first_fix_commit":"{'300d8aa48fe93706ade95be481c68e9cf2f32d1f'}",
            "last_fix_commit":"90dca835158495b173808273e7df127303b8b953",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/12\/2016, 11:21:31",
            "message":"bugfix: Make sure a persistent NameID is not generated by default when the UserID is missing in the state array.\n\nThis allowed misconfigured IdPs (i.e. those without both a PersistenNameID authproc filter, a \u201cuserid.attribute\u201d configuration option and no \u201ceduPersonPrincipalName\u201d attribute available after running all the authentication processing filters) to generate a persistent NameID based on \u201cnull\u201d, effectively giving all users the same identifier.",
            "author":"Jaime Pe\u0301rez",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'modules\/saml\/lib\/IdP\/SAML2.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/simplesamlphp\/simplesamlphp\/raw\/90dca835158495b173808273e7df127303b8b953\/modules%2Fsaml%2Flib%2FIdP%2FSAML2.php', 'patch': \"@@ -623,6 +623,7 @@ private static function generateNameIdValue(SimpleSAML_Configuration $idpMetadat\\n \\t\\t\\tif ($attribute === NULL) {\\n \\t\\t\\t\\tif (!isset($state['UserID'])) {\\n \\t\\t\\t\\t\\tSimpleSAML_Logger::error('Unable to generate NameID. Check the userid.attribute option.');\\n+\\t\\t\\t\\t\\treturn NULL;\\n \\t\\t\\t\\t}\\n \\t\\t\\t\\t$attributeValue = $state['UserID'];\\n \\t\\t\\t\\t$idpEntityId = $idpMetadata->getString('entityid');\"}}",
            "message_norm":"bugfix: make sure a persistent nameid is not generated by default when the userid is missing in the state array.\n\nthis allowed misconfigured idps (i.e. those without both a persistennameid authproc filter, a \u201cuserid.attribute\u201d configuration option and no \u201cedupersonprincipalname\u201d attribute available after running all the authentication processing filters) to generate a persistent nameid based on \u201cnull\u201d, effectively giving all users the same identifier.",
            "language":"en",
            "entities":"[('bugfix', 'FLAW', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/saml\/lib\/IdP\/SAML2.php'])",
            "num_files":1.0
        },
        {
            "index":822,
            "vuln_id":"GHSA-6f84-42vf-ppwp",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6'}",
            "dataset":"osv",
            "summary":"Division by 0 in `QuantizedMul` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedMul`:\n\n```python\nimport tensorflow as tf\n\nx = tf.zeros([4, 1], dtype=tf.quint8)\ny = tf.constant([], dtype=tf.quint8)\nmin_x = tf.constant(0.0)\nmax_x = tf.constant(0.0010000000474974513)\nmin_y = tf.constant(0.0)\nmax_y = tf.constant(0.0010000000474974513)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```                            \n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/55900e961ed4a23b438392024912154a2c2f5e85\/tensorflow\/core\/kernels\/quantized_mul_op.cc#L188-L198) does a division by a quantity that is controlled by the caller:\n\n```cc\ntemplate <class T, class Toutput>\nvoid VectorTensorMultiply(const T* vector_data, int32 vector_offset,\n                          int64 vector_num_elements, const T* tensor_data,\n                          int32 tensor_offset, int64 tensor_num_elements,\n                          Toutput* output) {\n  for (int i = 0; i < tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "commit_sha":"a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "patch":"SINGLE",
            "chain_ord":"['a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6']",
            "before_first_fix_commit":"{'55900e961ed4a23b438392024912154a2c2f5e85'}",
            "last_fix_commit":"a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 17:52:46",
            "message":"Fix one division by zero\n\nPiperOrigin-RevId: 369474832\nChange-Id: I1082858ed78d9b2e4738ce30b231955973d49e1e",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/quantized_mul_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6\/tensorflow%2Fcore%2Fkernels%2Fquantized_mul_op.cc', 'patch': '@@ -347,6 +347,11 @@ class QuantizedMulOp : public OpKernel {\\n         tensor_num_elements = x.NumElements();\\n         tensor_offset = offset_x;\\n       }\\n+      if (vector_num_elements == 0) {\\n+        context->SetStatus(\\n+            errors::InvalidArgument(\"vector must have at least 1 element\"));\\n+        return;\\n+      }\\n       VectorTensorMultiply<T, Toutput>(\\n           vector_data, vector_offset, vector_num_elements, tensor_data,\\n           tensor_offset, tensor_num_elements, z_data);'}}",
            "message_norm":"fix one division by zero\n\npiperorigin-revid: 369474832\nchange-id: i1082858ed78d9b2e4738ce30b231955973d49e1e",
            "language":"it",
            "entities":"[('fix', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('369474832', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_mul_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1026,
            "vuln_id":"GHSA-7fvx-3jfc-2cpc",
            "cwe_id":"{'CWE-125'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/01cff3f986259d661103412a20745928c727326f'}",
            "dataset":"osv",
            "summary":"Heap OOB in `ResourceScatterUpdate` ### Impact\nAn attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to `tf.raw_ops.ResourceScatterUpdate`:\n\n```python\nimport tensorflow as tf\n\nv = tf.Variable([b'vvv'])\ntf.raw_ops.ResourceScatterUpdate(\n  resource=v.handle,\n  indices=[0],\n  updates=['1', '2', '3', '4', '5'])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f24faa153ad31a4b51578f8181d3aaab77a1ddeb\/tensorflow\/core\/kernels\/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of `indices` and `updates`: instead of checking that the shape of `indices` is a prefix of the shape of `updates` (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship.\n\n### Patches \nWe have patched the issue in GitHub commit [01cff3f986259d661103412a20745928c727326f](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/01cff3f986259d661103412a20745928c727326f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/01cff3f986259d661103412a20745928c727326f",
            "commit_sha":"01cff3f986259d661103412a20745928c727326f",
            "patch":"SINGLE",
            "chain_ord":"['01cff3f986259d661103412a20745928c727326f']",
            "before_first_fix_commit":"{'96f364a1ca3009f98980021c4b32be5fdcca33a1'}",
            "last_fix_commit":"01cff3f986259d661103412a20745928c727326f",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2021, 20:33:05",
            "message":"Fix heap OOB due to dimension mismatch in `ResourceScatterUpdate`\n\nPiperOrigin-RevId: 388292801\nChange-Id: Id9bd7244d98d41b1517d4771850b32782c0cc949",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 5, 'total': 11}",
            "files":"{'tensorflow\/core\/kernels\/resource_variable_ops.cc': {'additions': 6, 'deletions': 5, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/01cff3f986259d661103412a20745928c727326f\/tensorflow%2Fcore%2Fkernels%2Fresource_variable_ops.cc', 'patch': '@@ -955,11 +955,12 @@ class ResourceScatterUpdateOp : public OpKernel {\\n                         params->dim_size(0), \")\"));\\n       } else {\\n         int64_t num_updates = updates.NumElements();\\n-        OP_REQUIRES(c, num_updates % N == 0,\\n-                    errors::InvalidArgument(\\n-                        \"shape of indices (\", indices.shape().DebugString(),\\n-                        \") is not compatible with the shape of updates (\",\\n-                        updates.shape().DebugString(), \")\"));\\n+        OP_REQUIRES(\\n+            c, TensorShapeUtils::StartsWith(updates.shape(), indices.shape()),\\n+            errors::InvalidArgument(\\n+                \"The shape of indices (\", indices.shape().DebugString(),\\n+                \") must be a prefix of the shape of updates (\",\\n+                updates.shape().DebugString(), \")\"));\\n         auto updates_flat = updates.shaped<T, 2>({N, num_updates \/ N});\\n \\n         functor::ScatterFunctor<Device, T, Index, op> functor;'}}",
            "message_norm":"fix heap oob due to dimension mismatch in `resourcescatterupdate`\n\npiperorigin-revid: 388292801\nchange-id: id9bd7244d98d41b1517d4771850b32782c0cc949",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('388292801', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/resource_variable_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":96,
            "vuln_id":"GHSA-2h63-qp69-fwvw",
            "cwe_id":"{'CWE-918', 'CWE-20'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6'}",
            "dataset":"osv",
            "summary":"Server-side request forgery (SSRF) in Apache Batik Apache Batik 1.13 is vulnerable to server-side request forgery, caused by improper input validation by the NodePickerPanel. By using a specially-crafted argument, an attacker could exploit this vulnerability to cause the underlying server to make arbitrary GET requests.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/xmlgraphics-batik",
            "commit_href":"https:\/\/github.com\/apache\/xmlgraphics-batik\/commit\/0ef5b661a1f77772d1110877ea9e0287987098f6",
            "commit_sha":"0ef5b661a1f77772d1110877ea9e0287987098f6",
            "patch":"SINGLE",
            "chain_ord":"['0ef5b661a1f77772d1110877ea9e0287987098f6']",
            "before_first_fix_commit":"{'f16e092d0c2ccee07360446e0d4adaa4be5daa1b'}",
            "last_fix_commit":"0ef5b661a1f77772d1110877ea9e0287987098f6",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/02\/2020, 13:59:37",
            "message":"BATIK-1284: Dont load DTDs in NodePickerPanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
            "author":"Simon Steiner",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/xmlgraphics-batik\/raw\/0ef5b661a1f77772d1110877ea9e0287987098f6\/batik-svgbrowser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbatik%2Fapps%2Fsvgbrowser%2FNodePickerPanel.java', 'patch': '@@ -847,8 +847,10 @@ private Element parseXml(String xmlString) {\\n         Document doc = null;\\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n         try {\\n-            javax.xml.parsers.DocumentBuilder parser = factory\\n-                    .newDocumentBuilder();\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-general-entities\", false);\\n+            factory.setFeature(\"http:\/\/xml.org\/sax\/features\/external-parameter-entities\", false);\\n+            factory.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\", false);\\n+            javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder();\\n             parser.setErrorHandler(new ErrorHandler() {\\n                 public void error(SAXParseException exception)\\n                         throws SAXException {'}}",
            "message_norm":"batik-1284: dont load dtds in nodepickerpanel\n\ngit-svn-id: https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396 13f79535-47bb-0310-9956-ffa450edef68",
            "language":"da",
            "entities":"[('https:\/\/svn.apache.org\/repos\/asf\/xmlgraphics\/batik\/trunk@1878396', 'URL', ''), ('13f79535', 'SHA', 'generic_sha'), ('ffa450edef68', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['batik-svgbrowser\/src\/main\/java\/org\/apache\/batik\/apps\/svgbrowser\/NodePickerPanel.java'])",
            "num_files":1.0
        },
        {
            "index":2670,
            "vuln_id":"GHSA-pxpf-v376-7xx5",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/yairEO\/tagify\/commit\/198c0451fad188390390395ccfc84ab371def4c7'}",
            "dataset":"osv",
            "summary":"tagify can pass a malicious placeholder to initiate the cross-site scripting (XSS) payload This affects the package @yaireo\/tagify before 4.9.8. The package is used for rendering UI components inside the input or text fields, and an attacker can pass a malicious placeholder value to it to fire the cross-site scripting (XSS) payload.",
            "published_date":"2022-04-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/yairEO\/tagify",
            "commit_href":"https:\/\/github.com\/yairEO\/tagify\/commit\/198c0451fad188390390395ccfc84ab371def4c7",
            "commit_sha":"198c0451fad188390390395ccfc84ab371def4c7",
            "patch":"SINGLE",
            "chain_ord":"['198c0451fad188390390395ccfc84ab371def4c7']",
            "before_first_fix_commit":"{'93f729c6d1bf45666a1dc21d5cae3aefe1b18043'}",
            "last_fix_commit":"198c0451fad188390390395ccfc84ab371def4c7",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/17\/2022, 08:16:09",
            "message":"fixes #989 - fix XSS",
            "author":"Yair Even Or",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/tagify.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/yairEO\/tagify\/raw\/198c0451fad188390390395ccfc84ab371def4c7\/src%2Ftagify.js', 'patch': '@@ -101,7 +101,7 @@ Tagify.prototype = {\\n \\n         _s.disabled = input.hasAttribute(\\'disabled\\')\\n         _s.readonly = _s.readonly || input.hasAttribute(\\'readonly\\')\\n-        _s.placeholder = input.getAttribute(\\'placeholder\\') || _s.placeholder || \"\"\\n+        _s.placeholder = escapeHTML(input.getAttribute(\\'placeholder\\') || _s.placeholder || \"\")\\n         _s.required = input.hasAttribute(\\'required\\')\\n \\n         for( let name in _s.classNames )'}}",
            "message_norm":"fixes #989 - fix xss",
            "language":"ca",
            "entities":"[('fixes', 'ACTION', ''), ('#989', 'ISSUE', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/tagify.js'])",
            "num_files":1.0
        },
        {
            "index":1915,
            "vuln_id":"GHSA-gq4h-f254-7cw9",
            "cwe_id":"{'CWE-362'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/kvark\/ticketed_lock\/pull\/8\/commits\/a986a9335d591fa5c826157d1674d47aa525357f'}",
            "dataset":"osv",
            "summary":"Data races in ticketed_lock Affected versions of this crate unconditionally implemented `Send` for `ReadTicket<T>` & `WriteTicket<T>`.\nThis allows to send non-Send `T` to other threads.\n\nThis can allows creating data races by cloning types with internal mutability and sending them to other threads (as `T` of `ReadTicket<T>`\/`WriteTicket<T>`). Such data races can cause memory corruption or other undefined behavior.\n\nThe flaw was corrected in commit a986a93 by adding `T: Send` bounds to `Send` impls of `ReadTicket<T>`\/`WriteTicket<T>`.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/kvark\/ticketed_lock",
            "commit_href":"https:\/\/github.com\/kvark\/ticketed_lock\/pull\/8\/commits\/a986a9335d591fa5c826157d1674d47aa525357f",
            "commit_sha":"a986a9335d591fa5c826157d1674d47aa525357f",
            "patch":"SINGLE",
            "chain_ord":"['a986a9335d591fa5c826157d1674d47aa525357f']",
            "before_first_fix_commit":"{'6d85af9eb5d8bb7cf142de8e832ce3af7e47e306'}",
            "last_fix_commit":"a986a9335d591fa5c826157d1674d47aa525357f",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/24\/2021, 04:07:17",
            "message":"'T: Send' to prevent misuse",
            "author":"JOE1994",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/lib.rs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kvark\/ticketed_lock\/raw\/a986a9335d591fa5c826157d1674d47aa525357f\/src%2Flib.rs', 'patch': '@@ -50,7 +50,7 @@ pub struct ReadTicket<T> {\\n     data: Arc<UnsafeCell<T>>,\\n }\\n \\n-unsafe impl<T> Send for ReadTicket<T> {}\\n+unsafe impl<T: Send> Send for ReadTicket<T> {}\\n \\n #[cfg(not(feature = \"futures\"))]\\n impl<T> ReadTicket<T> {\\n@@ -112,7 +112,7 @@ pub struct WriteTicket<T> {\\n     data: Arc<UnsafeCell<T>>,\\n }\\n \\n-unsafe impl<T> Send for WriteTicket<T> {}\\n+unsafe impl<T: Send> Send for WriteTicket<T> {}\\n \\n #[cfg(not(feature = \"futures\"))]\\n impl<T> WriteTicket<T> {'}}",
            "message_norm":"'t: send' to prevent misuse",
            "language":"en",
            "entities":"[('prevent', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib.rs'])",
            "num_files":1.0
        },
        {
            "index":1073,
            "vuln_id":"GHSA-7r8m-45gc-m2c8",
            "cwe_id":"{'CWE-311'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Janpot\/mongodb-instance\/commit\/c8fea750f8020ace8410c442b2684b33a9fddd3b'}",
            "dataset":"osv",
            "summary":"Downloads Resources over HTTP in mongodb-instance Affected versions of `mongodb-instance` insecurely download an executable over an unencrypted HTTP connection. \n\nIn scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running `mongodb-instance`.\n\n\n## Recommendation\n\nUpdate to version 0.0.3 or later.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/Janpot\/mongodb-instance",
            "commit_href":"https:\/\/github.com\/Janpot\/mongodb-instance\/commit\/c8fea750f8020ace8410c442b2684b33a9fddd3b",
            "commit_sha":"c8fea750f8020ace8410c442b2684b33a9fddd3b",
            "patch":"SINGLE",
            "chain_ord":"['c8fea750f8020ace8410c442b2684b33a9fddd3b']",
            "before_first_fix_commit":"{'02ce5a3c48d7ac1f6c33819b0c79afecbacace70'}",
            "last_fix_commit":"c8fea750f8020ace8410c442b2684b33a9fddd3b",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/02\/2016, 14:19:21",
            "message":"use https",
            "author":"Jan Potoms",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'install.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Janpot\/mongodb-instance\/raw\/c8fea750f8020ace8410c442b2684b33a9fddd3b\/install.js', 'patch': \"@@ -37,7 +37,7 @@ if (process.platform === 'linux' && process.arch === 'x64') {\\n \\n \\n var downloadUrl = util.format(\\n-  'http:\/\/downloads.mongodb.org\/osx\/mongodb-%s-%s.%s',\\n+  'https:\/\/fastdl.mongodb.org\/osx\/mongodb-%s-%s.%s',\\n   platformPart,\\n   versionPart,\\n   extension\"}}",
            "message_norm":"use https",
            "language":"et",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['install.js'])",
            "num_files":1.0
        },
        {
            "index":2089,
            "vuln_id":"GHSA-hm37-9xh2-q499",
            "cwe_id":"{'CWE-209'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/d5b53b4b7e76c5b666fc657019dbf864fb04076c', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/274447f91b4037b7050ae634879b657554523b39'}",
            "dataset":"osv",
            "summary":"Possible leak of key's raw field if declared length is incorrect ### Impact\nIf a field of a key is shorter than it is declared to be, the parser raises an error with a message containing the raw field value. An attacker able to modify the declared length of a key's sensitive field can thus expose the raw value of that field.\n\n### Patches\nUpgrade to version 0.0.6, which no longer includes the raw field value in the error message.\n\n### Workarounds\nN\/A\n\n### References\nN\/A\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [openssh_key_parser](https:\/\/github.com\/scottcwang\/openssh_key_parser)",
            "published_date":"2022-07-06",
            "chain_len":3,
            "project":"https:\/\/github.com\/scottcwang\/openssh_key_parser",
            "commit_href":"https:\/\/github.com\/scottcwang\/openssh_key_parser\/commit\/d5b53b4b7e76c5b666fc657019dbf864fb04076c",
            "commit_sha":"d5b53b4b7e76c5b666fc657019dbf864fb04076c",
            "patch":"MULTI",
            "chain_ord":"['26e0a471e9fdb23e635bc3014cf4cbd2323a08d3', 'd5b53b4b7e76c5b666fc657019dbf864fb04076c', '274447f91b4037b7050ae634879b657554523b39']",
            "before_first_fix_commit":"{'ae4d131d1cd8fe06325bfd6b749305aca60873bf', '69fe5b7addc21d3f39626ae93c6961811aea9d4c'}",
            "last_fix_commit":"274447f91b4037b7050ae634879b657554523b39",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/22\/2022, 14:59:49",
            "message":"Improved error handling to prevent unhandled exceptions in calling code.",
            "author":"Michael Doyle",
            "comments":null,
            "stats":"{'additions': 95, 'deletions': 86, 'total': 181}",
            "files":"{'openssh_key\/private_key_list.py': {'additions': 95, 'deletions': 86, 'changes': 181, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/scottcwang\/openssh_key_parser\/raw\/d5b53b4b7e76c5b666fc657019dbf864fb04076c\/openssh_key%2Fprivate_key_list.py', 'patch': '@@ -221,118 +221,127 @@ def from_bytes(\\n \\n         Raises:\\n             ValueError: The provided byte string is not an ``openssh-key-v1``\\n-                key list or the declared key count is negative.\\n+                key list, when the declared key count is negative, or when an\\n+                EOF is found while parsing the key.\\n+\\n             UserWarning: The check numbers in the decrypted private byte string\\n                 do not match (likely due to an incorrect passphrase), the key\\n                 type or parameter values of a private key do not match that of\\n                 the corresponding public key in the list, or the padding bytes\\n                 at the end of the decrypted private byte string are not as\\n                 expected.\\n         \"\"\"\\n-        byte_stream = PascalStyleByteStream(byte_string)\\n+        try:\\n+            byte_stream = PascalStyleByteStream(byte_string)\\n \\n-        header = byte_stream.read_from_format_instructions_dict(\\n-            cls.HEADER_FORMAT_INSTRUCTIONS_DICT\\n-        )\\n+            header = byte_stream.read_from_format_instructions_dict(\\n+                cls.HEADER_FORMAT_INSTRUCTIONS_DICT\\n+            )\\n+\\n+            if header[\\'auth_magic\\'] != b\\'openssh-key-v1\\\\x00\\':\\n+                raise ValueError(\\'Not an openssh-key-v1 key\\')\\n \\n-        if header[\\'auth_magic\\'] != b\\'openssh-key-v1\\\\x00\\':\\n-            raise ValueError(\\'Not an openssh-key-v1 key\\')\\n+            num_keys = header[\\'num_keys\\']\\n \\n-        num_keys = header[\\'num_keys\\']\\n+            if num_keys < 0:\\n+                raise ValueError(\\'Cannot parse negative number of keys\\')\\n \\n-        if num_keys < 0:\\n-            raise ValueError(\\'Cannot parse negative number of keys\\')\\n+            public_key_list = []\\n+            for i in range(num_keys):\\n+                public_key_bytes = byte_stream.read_from_format_instruction(\\n+                    PascalStyleFormatInstruction.BYTES\\n+                )\\n+                public_key_list.append(\\n+                    PublicKey.from_bytes(public_key_bytes)\\n+                )\\n \\n-        public_key_list = []\\n-        for i in range(num_keys):\\n-            public_key_bytes = byte_stream.read_from_format_instruction(\\n+            cipher_bytes = byte_stream.read_from_format_instruction(\\n                 PascalStyleFormatInstruction.BYTES\\n             )\\n-            public_key_list.append(\\n-                PublicKey.from_bytes(public_key_bytes)\\n-            )\\n \\n-        cipher_bytes = byte_stream.read_from_format_instruction(\\n-            PascalStyleFormatInstruction.BYTES\\n-        )\\n-\\n-        kdf_class = get_kdf_options_class(header[\\'kdf\\'])\\n-        kdf_options = kdf_class(\\n-            PascalStyleByteStream(\\n-                header[\\'kdf_options\\']\\n-            ).read_from_format_instructions_dict(\\n-                kdf_class.FORMAT_INSTRUCTIONS_DICT\\n+            kdf_class = get_kdf_options_class(header[\\'kdf\\'])\\n+            kdf_options = kdf_class(\\n+                PascalStyleByteStream(\\n+                    header[\\'kdf_options\\']\\n+                ).read_from_format_instructions_dict(\\n+                    kdf_class.FORMAT_INSTRUCTIONS_DICT\\n+                )\\n             )\\n-        )\\n \\n-        cipher_class = get_cipher_class(header[\\'cipher\\'])\\n+            cipher_class = get_cipher_class(header[\\'cipher\\'])\\n \\n-        if kdf_class == NoneKDFOptions:\\n-            passphrase = \\'\\'\\n-        elif passphrase is None:\\n-            passphrase = getpass.getpass(\\'Key passphrase: \\')\\n+            if kdf_class == NoneKDFOptions:\\n+                passphrase = \\'\\'\\n+            elif passphrase is None:\\n+                passphrase = getpass.getpass(\\'Key passphrase: \\')\\n \\n-        if issubclass(cipher_class, ConfidentialityIntegrityCipher):\\n-            cipher_bytes += byte_stream.read_fixed_bytes(\\n-                cipher_class.TAG_LENGTH\\n-            )\\n-\\n-        decipher_bytes = cipher_class.decrypt(\\n-            kdf_class(kdf_options),\\n-            passphrase,\\n-            cipher_bytes\\n-        )\\n-\\n-        decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\\n+            if issubclass(cipher_class, ConfidentialityIntegrityCipher):\\n+                cipher_bytes += byte_stream.read_fixed_bytes(\\n+                    cipher_class.TAG_LENGTH\\n+                )\\n \\n-        decipher_bytes_header = \\\\\\n-            decipher_byte_stream.read_from_format_instructions_dict(\\n-                cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\\n+            decipher_bytes = cipher_class.decrypt(\\n+                kdf_class(kdf_options),\\n+                passphrase,\\n+                cipher_bytes\\n             )\\n \\n-        if decipher_bytes_header[\\'check_int_1\\'] \\\\\\n-                != decipher_bytes_header[\\'check_int_2\\']:\\n-            warnings.warn(\\'Cipher header check numbers do not match\\')\\n+            decipher_byte_stream = PascalStyleByteStream(decipher_bytes)\\n \\n-        initlist = []\\n-        for i in range(num_keys):\\n-            initlist.append(\\n-                PublicPrivateKeyPair(\\n-                    public_key_list[i],\\n-                    PrivateKey.from_byte_stream(decipher_byte_stream)\\n-                )\\n-            )\\n-            if initlist[i].public.header[\\'key_type\\'] \\\\\\n-                    != initlist[i].private.header[\\'key_type\\']:\\n-                warnings.warn(\\n-                    f\\'Inconsistency between private and public \\'\\n-                    f\\'key types for key {i}\\'\\n+            decipher_bytes_header = \\\\\\n+                decipher_byte_stream.read_from_format_instructions_dict(\\n+                    cls.DECIPHER_BYTES_HEADER_FORMAT_INSTRUCTIONS_DICT\\n                 )\\n-            if not all(\\n-                (\\n-                    initlist[i].public.params[k] ==\\n-                    initlist[i].private.params[k]\\n-                ) for k in (\\n-                    initlist[i].public.params.keys() &\\n-                    initlist[i].private.params.keys()\\n+\\n+            if decipher_bytes_header[\\'check_int_1\\'] \\\\\\n+                    != decipher_bytes_header[\\'check_int_2\\']:\\n+                warnings.warn(\\'Cipher header check numbers do not match\\')\\n+\\n+            initlist = []\\n+            for i in range(num_keys):\\n+                initlist.append(\\n+                    PublicPrivateKeyPair(\\n+                        public_key_list[i],\\n+                        PrivateKey.from_byte_stream(decipher_byte_stream)\\n+                    )\\n                 )\\n+                if initlist[i].public.header[\\'key_type\\'] \\\\\\n+                        != initlist[i].private.header[\\'key_type\\']:\\n+                    warnings.warn(\\n+                        f\\'Inconsistency between private and public \\'\\n+                        f\\'key types for key {i}\\'\\n+                    )\\n+                if not all(\\n+                    (\\n+                        initlist[i].public.params[k] ==\\n+                        initlist[i].private.params[k]\\n+                    ) for k in (\\n+                        initlist[i].public.params.keys() &\\n+                        initlist[i].private.params.keys()\\n+                    )\\n+                ):\\n+                    warnings.warn(\\n+                        f\\'Inconsistency between private and public \\'\\n+                        f\\'values for key {i}\\'\\n+                    )\\n+\\n+            decipher_padding = decipher_byte_stream.read()\\n+\\n+            if (\\n+                len(decipher_byte_stream.getvalue()) %\\n+                    cipher_class.BLOCK_SIZE != 0\\n+            ) or not (\\n+                bytes(\\n+                    range(1, 1 + cipher_class.BLOCK_SIZE)\\n+                ).startswith(decipher_padding)\\n             ):\\n-                warnings.warn(\\n-                    f\\'Inconsistency between private and public \\'\\n-                    f\\'values for key {i}\\'\\n-                )\\n-\\n-        decipher_padding = decipher_byte_stream.read()\\n-\\n-        if (\\n-            len(decipher_byte_stream.getvalue()) %\\n-                cipher_class.BLOCK_SIZE != 0\\n-        ) or not (\\n-            bytes(\\n-                range(1, 1 + cipher_class.BLOCK_SIZE)\\n-            ).startswith(decipher_padding)\\n-        ):\\n-            warnings.warn(\\'Incorrect padding at end of ciphertext\\')\\n+                warnings.warn(\\'Incorrect padding at end of ciphertext\\')\\n+        except ValueError as e:\\n+            raise e\\n+        except EOFError as e:\\n+            raise ValueError(\\'Premature EOF detected while parsing key.\\')\\n+        except e:\\n+            raise ValueError(\\'Unexpected error condition reached.\\')\\n \\n         return cls(\\n             initlist,'}}",
            "message_norm":"improved error handling to prevent unhandled exceptions in calling code.",
            "language":"en",
            "entities":"[('improved', 'ACTION', ''), ('error handling', 'SECWORD', ''), ('prevent', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['openssh_key\/private_key_list.py'])",
            "num_files":1.0
        },
        {
            "index":59,
            "vuln_id":"GHSA-27qf-jwm8-g7f3",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0575b640091680cfb70f4dd93e70658de43b94f9'}",
            "dataset":"osv",
            "summary":"FPE in LSH in TFLite ### Impact\nAn attacker can craft a TFLite model that would trigger a division by zero error in LSH  [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/lsh_projection.cc#L118).\n\n```cc\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  int input_item_bytes = input->bytes \/ SizeOfDimension(input, 0);\n  \/\/ ...\n}\n```\n          \nThere is no check that the first dimension of the input is non zero.\n      \n### Patches\nWe have patched the issue in GitHub commit [0575b640091680cfb70f4dd93e70658de43b94f9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0575b640091680cfb70f4dd93e70658de43b94f9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/0575b640091680cfb70f4dd93e70658de43b94f9",
            "commit_sha":"0575b640091680cfb70f4dd93e70658de43b94f9",
            "patch":"SINGLE",
            "chain_ord":"['0575b640091680cfb70f4dd93e70658de43b94f9']",
            "before_first_fix_commit":"{'13aec9e4558d83fedac084ad66e32daf8bbcde0f'}",
            "last_fix_commit":"0575b640091680cfb70f4dd93e70658de43b94f9",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 23:45:20",
            "message":"Prevent division by 0 in LSH projection.\n\nPiperOrigin-RevId: 387225857\nChange-Id: Iaeb572a763618c64f503e0026f6dd9fd769bf50c",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/lsh_projection.cc': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/0575b640091680cfb70f4dd93e70658de43b94f9\/tensorflow%2Flite%2Fkernels%2Flsh_projection.cc', 'patch': '@@ -28,7 +28,7 @@ limitations under the License.\\n \/\/\\n \/\/ Input:\\n \/\/   Tensor[0]: Hash functions. Dim.size == 2, DataType: Float.\\n-\/\/              Tensor[0].Dim[0]: Num of hash functions.\\n+\/\/              Tensor[0].Dim[0]: Num of hash functions. Must be at least 1.\\n \/\/              Tensor[0].Dim[1]: Num of projected output bits generated by\\n \/\/                                each hash function.\\n \/\/   In sparse case, Tensor[0].Dim[1] + ceil( log2(Tensor[0].Dim[0] )) <= 32.\\n@@ -82,6 +82,7 @@ TfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\\n   const TfLiteTensor* input;\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\\n   TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\\n+  TF_LITE_ENSURE(context, SizeOfDimension(input, 0) >= 1);\\n \\n   if (NumInputs(node) == 3) {\\n     const TfLiteTensor* weight;'}}",
            "message_norm":"prevent division by 0 in lsh projection.\n\npiperorigin-revid: 387225857\nchange-id: iaeb572a763618c64f503e0026f6dd9fd769bf50c",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('387225857', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/lsh_projection.cc'])",
            "num_files":1.0
        },
        {
            "index":1739,
            "vuln_id":"GHSA-fj7c-vg2v-ccrm",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/undertow-io\/undertow\/commit\/c7e84a0b7efced38506d7d1dfea5902366973877'}",
            "dataset":"osv",
            "summary":"Undertow vulnerable to memory exhaustion due to buffer leak Buffer leak on incoming WebSocket PONG message(s) in Undertow before 2.0.40 and 2.2.10 can lead to memory exhaustion and allow a denial of service.",
            "published_date":"2022-07-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/undertow-io\/undertow",
            "commit_href":"https:\/\/github.com\/undertow-io\/undertow\/commit\/c7e84a0b7efced38506d7d1dfea5902366973877",
            "commit_sha":"c7e84a0b7efced38506d7d1dfea5902366973877",
            "patch":"SINGLE",
            "chain_ord":"['c7e84a0b7efced38506d7d1dfea5902366973877']",
            "before_first_fix_commit":"{'87f31ddaac835e3b41db339c1841760a1bac004f'}",
            "last_fix_commit":"c7e84a0b7efced38506d7d1dfea5902366973877",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 21:26:57",
            "message":"[UNDERTOW-1935] - buffer leak on incoming websocket PONG message",
            "author":"Andrey Marinchuk",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'websockets-jsr\/src\/main\/java\/io\/undertow\/websockets\/jsr\/FrameHandler.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/undertow-io\/undertow\/raw\/c7e84a0b7efced38506d7d1dfea5902366973877\/websockets-jsr%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fwebsockets%2Fjsr%2FFrameHandler.java', 'patch': '@@ -152,6 +152,8 @@ public void run() {\\n                     }\\n                 }\\n             });\\n+        } else {\\n+            bufferedBinaryMessage.getData().free();\\n         }\\n     }'}}",
            "message_norm":"[undertow-1935] - buffer leak on incoming websocket pong message",
            "language":"en",
            "entities":"[('leak', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['websockets-jsr\/src\/main\/java\/io\/undertow\/websockets\/jsr\/FrameHandler.java'])",
            "num_files":1.0
        },
        {
            "index":1880,
            "vuln_id":"GHSA-gh6x-4whr-2qv4",
            "cwe_id":"{'CWE-476', 'CWE-125'}",
            "score":8.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622'}",
            "dataset":"osv",
            "summary":"Null pointer dereference and heap OOB read in operations restoring tensors ### Impact\nWhen restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=['\/tmp'],\n  tensor_name=[], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=1)\n```\n  \nThe same undefined behavior can be triggered by `tf.raw_ops.RestoreSlice`:\n  \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RestoreSlice(\n  file_pattern=['\/tmp'],\n  tensor_name=[], \n  shape_and_slice='2',\n  dt=inp.array([tf.int]),\n  preferred_shard=1)\n```\n\nAlternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=['\/tmp'],\n  tensor_name=['x'], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=42)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/47a06f40411a69c99f381495f490536972152ac0\/tensorflow\/core\/kernels\/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the `tensor_name` user controlled input and immediately retrieves the tensor at the restoration index (controlled via `preferred_shard` argument). This occurs without validating that the provided list has enough values.\n\nIf the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements, if the restoration index is outside the bounds this results in heap OOB read.\n\n### Patches \nWe have patched the issue in GitHub commit [9e82dce6e6bd1f36a57e08fa85af213e2b2f2622](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622",
            "commit_sha":"9e82dce6e6bd1f36a57e08fa85af213e2b2f2622",
            "patch":"SINGLE",
            "chain_ord":"['9e82dce6e6bd1f36a57e08fa85af213e2b2f2622']",
            "before_first_fix_commit":"{'e86605c0a336c088b638da02135ea6f9f6753618'}",
            "last_fix_commit":"9e82dce6e6bd1f36a57e08fa85af213e2b2f2622",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2021, 21:21:41",
            "message":"Fix NPE in restoring code.\n\nPiperOrigin-RevId: 388303253\nChange-Id: Ia8c68568cb854bca538909a182b31a618d68ce55",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'tensorflow\/core\/kernels\/save_restore_tensor.cc': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622\/tensorflow%2Fcore%2Fkernels%2Fsave_restore_tensor.cc', 'patch': '@@ -151,11 +151,18 @@ void RestoreTensor(OpKernelContext* context,\\n         context, size == 1,\\n         errors::InvalidArgument(\\n             \"Input 0 (file_pattern) must be a string scalar; got a tensor of \",\\n-            size, \"elements\"));\\n+            size, \" elements\"));\\n   }\\n   const string& file_pattern = file_pattern_t.flat<tstring>()(0);\\n \\n   const Tensor& tensor_name_t = context->input(1);\\n+  {\\n+    const int64_t size = tensor_name_t.NumElements();\\n+    OP_REQUIRES(context, size > restore_index,\\n+                errors::InvalidArgument(\\n+                    \"Input 1 (file_pattern) must be a have at least \",\\n+                    restore_index + 1, \" elements\"));\\n+  }\\n   const string& tensor_name = tensor_name_t.flat<tstring>()(restore_index);\\n \\n   \/\/ If we cannot find a cached reader we will allocate our own.'}}",
            "message_norm":"fix npe in restoring code.\n\npiperorigin-revid: 388303253\nchange-id: ia8c68568cb854bca538909a182b31a618d68ce55",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('npe', 'SECWORD', ''), ('388303253', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/save_restore_tensor.cc'])",
            "num_files":1.0
        },
        {
            "index":1561,
            "vuln_id":"GHSA-cjc7-49v2-jp64",
            "cwe_id":"{'CWE-787', 'CWE-665'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseAdd` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc",
            "commit_sha":"41727ff06111117bdf86b37db198217fd7a143cc",
            "patch":"MULTI",
            "chain_ord":"['6fd02f44810754ae7481838b6a67c5df7f909ca3', '41727ff06111117bdf86b37db198217fd7a143cc']",
            "before_first_fix_commit":"{'6f432d6334edc93fd5af0070170def56b0413e8a'}",
            "last_fix_commit":"41727ff06111117bdf86b37db198217fd7a143cc",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/11\/2021, 22:41:51",
            "message":"Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373248068\nChange-Id: I0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 5, 'total': 17}",
            "files":"{'tensorflow\/core\/kernels\/sparse_add_op.cc': {'additions': 12, 'deletions': 5, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/41727ff06111117bdf86b37db198217fd7a143cc\/tensorflow%2Fcore%2Fkernels%2Fsparse_add_op.cc', 'patch': '@@ -44,6 +44,11 @@ class SparseAddOp : public OpKernel {\\n                     b_indices->shape().DebugString()));\\n     const int64 a_nnz = a_indices->dim_size(0);\\n     const int64 b_nnz = b_indices->dim_size(0);\\n+    const int num_dims = a_indices->dim_size(1);\\n+    OP_REQUIRES(ctx, b_indices->dim_size(1) == num_dims,\\n+                errors::InvalidArgument(\\n+                    \"Input indices must have the same dimension, got \",\\n+                    num_dims, \" and \", b_indices->dim_size(1)));\\n \\n     OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\\n     OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\\n@@ -72,6 +77,13 @@ class SparseAddOp : public OpKernel {\\n                     \"Input shapes should be a vector but received shapes \",\\n                     a_shape->shape().DebugString(), \" and \",\\n                     b_shape->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, a_shape->NumElements() == num_dims,\\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\\n+                                \"a_shape must match, got \",\\n+                                num_dims, \" and \", a_shape->NumElements()));\\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Tesors must not be empty\"));\\n     OP_REQUIRES(\\n         ctx, a_shape->IsSameSize(*b_shape),\\n         errors::InvalidArgument(\\n@@ -100,11 +112,6 @@ class SparseAddOp : public OpKernel {\\n     std::vector<std::pair<bool, int64>> entries_to_copy;  \/\/ from_a?, idx\\n     entries_to_copy.reserve(a_nnz + b_nnz);\\n     std::vector<T> out_values;\\n-    const int num_dims = a_shape->dim_size(0);\\n-\\n-    OP_REQUIRES(ctx, num_dims > 0,\\n-                errors::InvalidArgument(\"Invalid input_a shape. Received: \",\\n-                                        a_shape->DebugString()));\\n \\n     \/\/ The input and output sparse tensors are assumed to be ordered along\\n     \/\/ increasing dimension number.'}}",
            "message_norm":"validate that a and b are proper sparse tensors\n\npiperorigin-revid: 373248068\nchange-id: i0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('373248068', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_add_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1059,
            "vuln_id":"GHSA-7q4h-pj78-j7vg",
            "cwe_id":"{'CWE-400', 'CWE-918'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/apache\/cxf\/commit\/aa789c5c4686597a7bdef2443909ab491fc2bc04', 'https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286'}",
            "dataset":"osv",
            "summary":"Authorization service vulnerable to DDos attacks in Apache CFX CXF supports (via JwtRequestCodeFilter) passing OAuth 2 parameters via a JWT token as opposed to query parameters (see: The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)). Instead of sending a JWT token as a \"request\" parameter, the spec also supports specifying a URI from which to retrieve a JWT token from via the \"request_uri\" parameter. CXF was not validating the \"request_uri\" parameter (apart from ensuring it uses \"https) and was making a REST request to the parameter in the request to retrieve a token. This means that CXF was vulnerable to DDos attacks on the authorization server, as specified in section 10.4.1 of the spec. This issue affects Apache CXF versions prior to 3.4.3; Apache CXF versions prior to 3.3.10.",
            "published_date":"2021-05-13",
            "chain_len":2,
            "project":"https:\/\/github.com\/apache\/cxf",
            "commit_href":"https:\/\/github.com\/apache\/cxf\/commit\/40503a53914758759894f704bbf139ae89ace286",
            "commit_sha":"40503a53914758759894f704bbf139ae89ace286",
            "patch":"MULTI",
            "chain_ord":"['40503a53914758759894f704bbf139ae89ace286', 'aa789c5c4686597a7bdef2443909ab491fc2bc04']",
            "before_first_fix_commit":"{'40503a53914758759894f704bbf139ae89ace286'}",
            "last_fix_commit":"aa789c5c4686597a7bdef2443909ab491fc2bc04",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/06\/2021, 09:30:08",
            "message":"Disallow OAuth2 request_uri by default",
            "author":"Colm O hEigeartaigh",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 4, 'total': 17}",
            "files":"{'rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java': {'additions': 13, 'deletions': 4, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/cxf\/raw\/40503a53914758759894f704bbf139ae89ace286\/rt%2Frs%2Fsecurity%2Foauth-parent%2Foauth2%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcxf%2Frs%2Fsecurity%2Foauth2%2Fgrants%2Fcode%2FJwtRequestCodeFilter.java', 'patch': '@@ -42,6 +42,7 @@\\n import org.apache.cxf.rt.security.crypto.CryptoUtils;\\n \\n public class JwtRequestCodeFilter extends OAuthJoseJwtConsumer implements AuthorizationRequestFilter {\\n+    private static final String REQUEST_URI_CONTENT_TYPE = \"application\/oauth-authz-req+jwt\";\\n     private static final String REQUEST_PARAM = \"request\";\\n     private static final String REQUEST_URI_PARAM = \"request_uri\";\\n     private boolean verifyWithClientCertificates;\\n@@ -55,7 +56,7 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         if (requestToken == null) {\\n             String requestUri = params.getFirst(REQUEST_URI_PARAM);\\n             if (isRequestUriValid(client, requestUri)) {\\n-                requestToken = WebClient.create(requestUri).get(String.class);\\n+                requestToken = WebClient.create(requestUri).accept(REQUEST_URI_CONTENT_TYPE).get(String.class);\\n             }\\n         }\\n         if (requestToken != null) {\\n@@ -101,9 +102,17 @@ public MultivaluedMap<String, String> process(MultivaluedMap<String, String> par\\n         }\\n         return params;\\n     }\\n-    private boolean isRequestUriValid(Client client, String requestUri) {\\n-        \/\/TODO: consider restricting to specific hosts\\n-        return requestUri != null && requestUri.startsWith(\"https:\/\/\");\\n+\\n+    \/**\\n+     * This method must be overridden to support request_uri. Take care to validate the request_uri properly,\\n+     * as otherwise it could lead to a security problem\\n+     * (https:\/\/tools.ietf.org\/html\/draft-ietf-oauth-jwsreq-30#section-10.4)\\n+     * @param client the Client object\\n+     * @param requestUri the request_uri parameter to validate\\n+     * @return whether the requestUri is permitted or not\\n+     *\/\\n+    protected boolean isRequestUriValid(Client client, String requestUri) {\\n+        return false;\\n     }\\n     protected JwsSignatureVerifier getInitializedSigVerifier(Client c) {\\n         if (verifyWithClientCertificates) {'}}",
            "message_norm":"disallow oauth2 request_uri by default",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['rt\/rs\/security\/oauth-parent\/oauth2\/src\/main\/java\/org\/apache\/cxf\/rs\/security\/oauth2\/grants\/code\/JwtRequestCodeFilter.java'])",
            "num_files":1.0
        },
        {
            "index":466,
            "vuln_id":"GHSA-4r4m-hjwj-43p8",
            "cwe_id":"{'CWE-300'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/socketio\/engine.io-client\/commit\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1'}",
            "dataset":"osv",
            "summary":"Insecure Defaults Allow MITM Over TLS in engine.io-client Affected versions of `engine.io-client` do not verify certificates by default, and as such may be vulnerable to Man-in-the-Middle attacks.\n\nThe vulnerability is related to the way that node.js handles the `rejectUnauthorized` setting. If the value is something that evaluates to false, such as undefined or null, certificate verification will be disabled. \n\n\n\n## Recommendation\n\nUpdate to version 1.6.9 or later.\n\nIf you are unable to upgrade, ensure all calls to socket.io to have a `rejectedUnauthorized: true` flag.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/socketio\/engine.io-client",
            "commit_href":"https:\/\/github.com\/socketio\/engine.io-client\/commit\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "commit_sha":"2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "patch":"SINGLE",
            "chain_ord":"['2c55b278a491bf45313ecc0825cf800e2f7ff5c1']",
            "before_first_fix_commit":"{'6045ccf5aa3ad5dbd976acb1e722a9692a5d55fb'}",
            "last_fix_commit":"2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/30\/2016, 15:30:14",
            "message":"default `rejectUnauthorized` to `true`",
            "author":"Guillermo Rauch",
            "comments":"{'com_1': {'author': 'andrew-aladev', 'datetime': '09\/28\/2016, 13:48:33', 'body': 'WAT? I am sure that you haven\\'t tested websocket with this \"patch\".'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/socket.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/socketio\/engine.io-client\/raw\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1\/lib%2Fsocket.js', 'patch': \"@@ -90,7 +90,7 @@ function Socket (uri, opts) {\\n   this.cert = opts.cert || null;\\n   this.ca = opts.ca || null;\\n   this.ciphers = opts.ciphers || null;\\n-  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n+  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\\n \\n   \/\/ other options for Node.js client\\n   var freeGlobal = typeof global === 'object' && global;\"}}",
            "message_norm":"default `rejectunauthorized` to `true`",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/socket.js'])",
            "num_files":1.0
        },
        {
            "index":70,
            "vuln_id":"GHSA-2927-hv3p-f3vp",
            "cwe_id":"{'CWE-601'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/caddyserver\/caddy\/pull\/4499\/commits\/b23bdcf99cfbd09d50555a999a16468404789230'}",
            "dataset":"osv",
            "summary":"Open redirect in caddy Caddy v2.4 was discovered to contain an open redirect vulnerability. A remote unauthenticated attacker may exploit this vulnerability to redirect users to arbitrary web URLs by tricking the victim users to click on crafted links.",
            "published_date":"2022-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/caddyserver\/caddy",
            "commit_href":"https:\/\/github.com\/caddyserver\/caddy\/pull\/4499\/commits\/b23bdcf99cfbd09d50555a999a16468404789230",
            "commit_sha":"b23bdcf99cfbd09d50555a999a16468404789230",
            "patch":"SINGLE",
            "chain_ord":"['b23bdcf99cfbd09d50555a999a16468404789230']",
            "before_first_fix_commit":"{'5333c3528bd2badf1676efcced322d151e3706c8'}",
            "last_fix_commit":"b23bdcf99cfbd09d50555a999a16468404789230",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/30\/2021, 04:31:51",
            "message":"caddyhttp: Fix `MatchPath` sanitizing\n\nThis is a followup to #4407, in response to a report on the forums: https:\/\/caddy.community\/t\/php-fastcgi-phishing-redirection\/14542\n\nTurns out that doing `TrimRight` to remove trailing dots, _before_ cleaning the path, will cause double-dots at the end of the path to not be cleaned away as they should. We should instead remove the dots _after_ cleaning.",
            "author":"Francis Lavoie",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'modules\/caddyhttp\/matchers.go': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/caddyserver\/caddy\/raw\/b23bdcf99cfbd09d50555a999a16468404789230\/modules%2Fcaddyhttp%2Fmatchers.go', 'patch': '@@ -325,18 +325,18 @@ func (m MatchPath) Match(r *http.Request) bool {\\n \\n \\tlowerPath := strings.ToLower(unescapedPath)\\n \\n+\\t\/\/ Clean the path, merges doubled slashes, etc.\\n+\\t\/\/ This ensures maliciously crafted requests can\\'t bypass\\n+\\t\/\/ the path matcher. See #4407\\n+\\tlowerPath = path.Clean(lowerPath)\\n+\\n \\t\/\/ see #2917; Windows ignores trailing dots and spaces\\n \\t\/\/ when accessing files (sigh), potentially causing a\\n \\t\/\/ security risk (cry) if PHP files end up being served\\n \\t\/\/ as static files, exposing the source code, instead of\\n \\t\/\/ being matched by *.php to be treated as PHP scripts\\n \\tlowerPath = strings.TrimRight(lowerPath, \". \")\\n \\n-\\t\/\/ Clean the path, merges doubled slashes, etc.\\n-\\t\/\/ This ensures maliciously crafted requests can\\'t bypass\\n-\\t\/\/ the path matcher. See #4407\\n-\\tlowerPath = path.Clean(lowerPath)\\n-\\n \\t\/\/ Cleaning may remove the trailing slash, but we want to keep it\\n \\tif lowerPath != \"\/\" && strings.HasSuffix(r.URL.Path, \"\/\") {\\n \\t\\tlowerPath = lowerPath + \"\/\"'}}",
            "message_norm":"caddyhttp: fix `matchpath` sanitizing\n\nthis is a followup to #4407, in response to a report on the forums: https:\/\/caddy.community\/t\/php-fastcgi-phishing-redirection\/14542\n\nturns out that doing `trimright` to remove trailing dots, _before_ cleaning the path, will cause double-dots at the end of the path to not be cleaned away as they should. we should instead remove the dots _after_ cleaning.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('sanitizing', 'SECWORD', ''), ('#4407', 'ISSUE', ''), ('https:\/\/caddy.community\/t\/php-fastcgi-phishing-redirection\/14542', 'URL', ''), ('remove', 'ACTION', ''), ('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/caddyhttp\/matchers.go'])",
            "num_files":1.0
        },
        {
            "index":1281,
            "vuln_id":"GHSA-8x44-pwr2-rgc6",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/832c34aeb9f21f213295a0c28377132df996352a'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in pimcore Pimcore settings module is vulnerable to stored cross site scripting",
            "published_date":"2022-01-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/832c34aeb9f21f213295a0c28377132df996352a",
            "commit_sha":"832c34aeb9f21f213295a0c28377132df996352a",
            "patch":"SINGLE",
            "chain_ord":"['832c34aeb9f21f213295a0c28377132df996352a']",
            "before_first_fix_commit":"{'e94591dd8f5006452667a04c93e4422b05234eea'}",
            "last_fix_commit":"832c34aeb9f21f213295a0c28377132df996352a",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2022, 13:08:27",
            "message":"added escape function to the icon field",
            "author":"Jia Jia Ji",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/832c34aeb9f21f213295a0c28377132df996352a\/bundles%2FAdminBundle%2FController%2FAdmin%2FDataObject%2FClassController.php', 'patch': \"@@ -119,7 +119,7 @@ public function getTreeAction(Request $request)\\n                 'id' => $class->getId(),\\n                 'text' => $text,\\n                 'leaf' => true,\\n-                'icon' => $class->getIcon() ? $class->getIcon() : $defaultIcon,\\n+                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,\\n                 'cls' => 'pimcore_class_icon',\\n                 'propertyVisibility' => $class->getPropertyVisibility(),\\n                 'enableGridLocking' => $class->isEnableGridLocking(),\"}}",
            "message_norm":"added escape function to the icon field",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/DataObject\/ClassController.php'])",
            "num_files":1.0
        },
        {
            "index":2222,
            "vuln_id":"GHSA-j8qh-3xrq-c825",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3ebedd7e345453d68e279cfc3e4072648e5e12e5'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `OneHot` ### Impact\nThe implementation of the `OneHot` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f61c57bd425878be108ec787f4d96390579fb83e\/tensorflow\/lite\/kernels\/one_hot.cc#L68-L72):\n\n```cc\nint prefix_dim_size = 1;\nfor (int i = 0; i < op_context.axis; ++i) {\n  prefix_dim_size *= op_context.indices->dims->data[i];\n}\nconst int suffix_dim_size = NumElements(op_context.indices) \/ prefix_dim_size;\n```\n\nAn attacker can craft a model such that at least one of the dimensions of `indices` would be 0. In turn, the `prefix_dim_size` value would become 0.\n\n### Patches\nWe have patched the issue in GitHub commit [3ebedd7e345453d68e279cfc3e4072648e5e12e5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3ebedd7e345453d68e279cfc3e4072648e5e12e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3ebedd7e345453d68e279cfc3e4072648e5e12e5",
            "commit_sha":"3ebedd7e345453d68e279cfc3e4072648e5e12e5",
            "patch":"SINGLE",
            "chain_ord":"['3ebedd7e345453d68e279cfc3e4072648e5e12e5']",
            "before_first_fix_commit":"{'f61c57bd425878be108ec787f4d96390579fb83e'}",
            "last_fix_commit":"3ebedd7e345453d68e279cfc3e4072648e5e12e5",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 19:58:07",
            "message":"Prevent division by 0 in OneHot implementation\n\nIf input indices is degenerate, the implementation would do a divide by zero. See https:\/\/github.com\/tensorflow\/tensorflow\/blob\/745d57df6d5e9bc568666a2a48ed8dd629c27241\/tensorflow\/lite\/kernels\/one_hot.cc#L68-L72\n\nPiperOrigin-RevId: 370966870\nChange-Id: Ie018337811c8016b5a1d3a277d00d5f2e19a2058",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/lite\/kernels\/one_hot.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3ebedd7e345453d68e279cfc3e4072648e5e12e5\/tensorflow%2Flite%2Fkernels%2Fone_hot.cc', 'patch': '@@ -69,6 +69,11 @@ void OneHotComputeImpl(const OneHotContext& op_context) {\\n   for (int i = 0; i < op_context.axis; ++i) {\\n     prefix_dim_size *= op_context.indices->dims->data[i];\\n   }\\n+  if (prefix_dim_size == 0) {\\n+    \/\/ If indices tensor is degenerate, return a degenerate tensor, just like\\n+    \/\/ TensorFlow does.\\n+    return;\\n+  }\\n   const int suffix_dim_size = NumElements(op_context.indices) \/ prefix_dim_size;\\n   const int depth = *op_context.depth->data.i32;'}}",
            "message_norm":"prevent division by 0 in onehot implementation\n\nif input indices is degenerate, the implementation would do a divide by zero. see https:\/\/github.com\/tensorflow\/tensorflow\/blob\/745d57df6d5e9bc568666a2a48ed8dd629c27241\/tensorflow\/lite\/kernels\/one_hot.cc#l68-l72\n\npiperorigin-revid: 370966870\nchange-id: ie018337811c8016b5a1d3a277d00d5f2e19a2058",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('divide by zero', 'SECWORD', ''), ('https:\/\/github.com\/tensorflow\/tensorflow\/blob\/745d57df6d5e9bc568666a2a48ed8dd629c27241\/tensorflow\/lite\/kernels\/one_hot.cc#l68-l72', 'URL', ''), ('370966870', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/one_hot.cc'])",
            "num_files":1.0
        },
        {
            "index":2711,
            "vuln_id":"GHSA-q73m-3q7r-fpf7",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/d1c9ed0d77ea5d56f09be0c492361dca8af745bb'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in ShowDoc ShowDoc prior to 2.10.4 is vulnerable to stored cross-site scripting via file upload.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/d1c9ed0d77ea5d56f09be0c492361dca8af745bb",
            "commit_sha":"d1c9ed0d77ea5d56f09be0c492361dca8af745bb",
            "patch":"SINGLE",
            "chain_ord":"['d1c9ed0d77ea5d56f09be0c492361dca8af745bb']",
            "before_first_fix_commit":"{'56e450c3adf75c707500d7231a78c9fc894c7f13', 'aa41c83e0cc5079fb39e04d9f630571ffb8bbf22'}",
            "last_fix_commit":"d1c9ed0d77ea5d56f09be0c492361dca8af745bb",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 12:29:34",
            "message":"Merge pull request #1632 from ajaysenr\/master\n\nUpdate AttachmentModel.class.php",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/d1c9ed0d77ea5d56f09be0c492361dca8af745bb\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': \"@@ -325,7 +325,7 @@ public function isAllowedFilename($filename){\\n \\t\\t$allow_array = array(\\n \\t\\t\\t'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',\\n \\t\\t\\t'.mp3','.wav','.m4a','.ogg','.webma','.mp4','.flv',\\n-\\t\\t\\t'.mov','.webmv','.m3u8a','.flac','.mkv',\\n+\\t\\t\\t'.mov','.webmv','.flac','.mkv',\\n \\t\\t\\t'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso','.bz2','.epub',\\n \\t\\t\\t'.pdf','.ofd','.swf','.epub','.xps',\\n \\t\\t\\t'.doc','.docx','.odt','.rtf','.docm','.dotm','.dot','.dotx','.wps','.wpt',\"}}",
            "message_norm":"merge pull request #1632 from ajaysenr\/master\n\nupdate attachmentmodel.class.php",
            "language":"en",
            "entities":"[('#1632', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":2074,
            "vuln_id":"GHSA-hhrj-wp42-32v3",
            "cwe_id":"{'CWE-209'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a'}",
            "dataset":"osv",
            "summary":"Generation of Error Message Containing Sensitive Information in microweber Generation of Error Message Containing Sensitive Information in Packagist microweber\/microweber prior to 1.2.11.",
            "published_date":"2022-02-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
            "commit_sha":"2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
            "patch":"SINGLE",
            "chain_ord":"['2417bd2eda2aa2868c1dad1abf62341f22bfc20a']",
            "before_first_fix_commit":"{'8adc9da7307c89d7cb7b309f69d0c2922a56aa2e'}",
            "last_fix_commit":"2417bd2eda2aa2868c1dad1abf62341f22bfc20a",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/17\/2022, 09:15:14",
            "message":"Update Comment.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'src\/MicroweberPackages\/Comment\/Models\/Comment.php': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/2417bd2eda2aa2868c1dad1abf62341f22bfc20a\/src%2FMicroweberPackages%2FComment%2FModels%2FComment.php', 'patch': \"@@ -5,10 +5,12 @@\\n use EloquentFilter\\\\Filterable;\\n use Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n use MicroweberPackages\\\\Content\\\\Models\\\\ModelFilters\\\\ContentFilter;\\n+use MicroweberPackages\\\\Core\\\\Models\\\\HasSearchableTrait;\\n \\n class Comment extends Model\\n {\\n     use Filterable;\\n+    use HasSearchableTrait;\\n \\n     public $table = 'comments';\\n \\n@@ -21,6 +23,13 @@ class Comment extends Model\\n         'comment_body',\\n     ];\\n \\n+    protected $searchable = [\\n+        'comment_name',\\n+        'comment_email',\\n+        'comment_website',\\n+        'comment_body',\\n+    ];\\n+\\n     public function modelFilter()\\n     {\\n         return $this->provideFilter(ContentFilter::class);\"}}",
            "message_norm":"update comment.php",
            "language":"fr",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Comment\/Models\/Comment.php'])",
            "num_files":1.0
        },
        {
            "index":3326,
            "vuln_id":"GHSA-wvjw-p9f5-vq28",
            "cwe_id":"{'CWE-755'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9'}",
            "dataset":"osv",
            "summary":"Segfault in `tf.raw_ops.SparseCountSparseOutput` ### Impact\nPassing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [82e6203221865de4008445b13c69b6826d2b28d9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/82e6203221865de4008445b13c69b6826d2b28d9",
            "commit_sha":"82e6203221865de4008445b13c69b6826d2b28d9",
            "patch":"SINGLE",
            "chain_ord":"['82e6203221865de4008445b13c69b6826d2b28d9']",
            "before_first_fix_commit":"{'0e182ba66c18db83668c05d26ee0c84ca9e2dbff'}",
            "last_fix_commit":"82e6203221865de4008445b13c69b6826d2b28d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/03\/2021, 01:02:03",
            "message":"Fix segfaults in `tf.raw_ops.SparseCountSparseOutput`.\n\nPiperOrigin-RevId: 360547563\nChange-Id: I781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'tensorflow\/core\/kernels\/count_ops.cc': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/82e6203221865de4008445b13c69b6826d2b28d9\/tensorflow%2Fcore%2Fkernels%2Fcount_ops.cc', 'patch': '@@ -192,6 +192,10 @@ class SparseCount : public OpKernel {\\n               \"; values shape: \", values.shape().DebugString()));\\n     }\\n \\n+    OP_REQUIRES(context, shape.NumElements() != 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n+\\n     bool is_1d = shape.NumElements() == 1;\\n     int num_batches = is_1d ? 1 : shape.flat<int64>()(0);\\n     int num_values = values.NumElements();\\n@@ -212,6 +216,14 @@ class SparseCount : public OpKernel {\\n \\n     for (int idx = 0; idx < num_values; ++idx) {\\n       int batch = is_1d ? 0 : indices_values(idx, 0);\\n+      if (batch >= num_batches) {\\n+        OP_REQUIRES(context, batch < num_batches,\\n+                    errors::InvalidArgument(\\n+                        \"Indices value along the first dimension must be \",\\n+                        \"lower than the first index of the shape.\", \"Got \",\\n+                        batch, \" as batch and \", num_batches,\\n+                        \" as the first dimension of the shape.\"));\\n+      }\\n       const auto& value = values_values(idx);\\n       if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\\n         if (binary_output_) {'}}",
            "message_norm":"fix segfaults in `tf.raw_ops.sparsecountsparseoutput`.\n\npiperorigin-revid: 360547563\nchange-id: i781c7af4b54a63d867c6e18d43a44d64a5c4e7c9",
            "language":"en",
            "entities":"[('segfaults', 'SECWORD', ''), ('360547563', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/count_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1072,
            "vuln_id":"GHSA-7r87-cj48-wj45",
            "cwe_id":"{'CWE-253', 'CWE-394', 'CWE-754'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/Tethik\/flask-session-captcha\/commit\/2811ae23a38d33b620fb7a07de8837c6d65c13e4'}",
            "dataset":"osv",
            "summary":"Potential Captcha Validate Bypass in flask-session-captcha ### Impact\nflask-session-captcha is a package which allows users to extend Flask by adding an image based captcha stored in a server side session.\n\nThe `captcha.validate()` function would return `None` if passed no value (e.g. by submitting a request with an empty form).\n\nIf implementing users were checking the return value to be **False**, the captcha verification check could be bypassed.\n\nSample vulnerable code:\n```python\nif captcha.validate() == False:\n    ... # abort\nelse:\n   ... # do stuff\n```\n\n### Patches\nA new version (1.2.1) is available that fixes the issue.\n\n### Workarounds\nUsers can workaround the issue by not explicitly checking that the value is False. \n\nChecking the return value less explicitly should still work. \n\n```python\nif not captcha.validate():\n    ... # abort\nelse:\n   ... # do stuff\n```\n\n```python\nif captcha.validate():\n    ... # do stuff\nelse:\n   ... # abort\n```\n\n### References\nhttps:\/\/github.com\/Tethik\/flask-session-captcha\/pull\/27\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the github repo](https:\/\/github.com\/Tethik\/flask-session-captcha)",
            "published_date":"2022-04-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/Tethik\/flask-session-captcha",
            "commit_href":"https:\/\/github.com\/Tethik\/flask-session-captcha\/commit\/2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "commit_sha":"2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "patch":"SINGLE",
            "chain_ord":"['2811ae23a38d33b620fb7a07de8837c6d65c13e4']",
            "before_first_fix_commit":"{'50b4053766b89e9322cfbd281c91cb4e8898d3f7'}",
            "last_fix_commit":"2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2022, 21:40:14",
            "message":"add some extra tests to ensure False is returned",
            "author":"Joakim Uddholm",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'test_flask_session_captcha.py': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Tethik\/flask-session-captcha\/raw\/2811ae23a38d33b620fb7a07de8837c6d65c13e4\/test_flask_session_captcha.py', 'patch': '@@ -98,7 +98,13 @@ def test_captcha_validate_value(self):\\n         with self.app.test_request_context(\\'\/\\'):\\n             captcha.generate()\\n             answer = captcha.get_answer()\\n-            assert not captcha.validate(value=\"wrong\")\\n+            assert captcha.validate(value=None) == False\\n+            captcha.generate()\\n+            answer = captcha.get_answer()\\n+            assert captcha.validate(value=\"\") == False\\n+            captcha.generate()\\n+            answer = captcha.get_answer()\\n+            assert captcha.validate(value=\"wrong\") == False\\n             captcha.generate()\\n             answer = captcha.get_answer()\\n             assert captcha.validate(value=answer)'}}",
            "message_norm":"add some extra tests to ensure false is returned",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['test_flask_session_captcha.py'])",
            "num_files":1.0
        },
        {
            "index":1554,
            "vuln_id":"GHSA-cgrj-xjm7-9q27",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/web2py\/web2py\/commit\/a181b855a43cb8b479d276b082cfcde385768451'}",
            "dataset":"osv",
            "summary":"Open redirect in web2py Open redirect vulnerability in web2py versions prior to 2.22.5 allows a remote attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having a user to access a specially crafted URL.",
            "published_date":"2022-06-28",
            "chain_len":1,
            "project":"https:\/\/github.com\/web2py\/web2py",
            "commit_href":"https:\/\/github.com\/web2py\/web2py\/commit\/a181b855a43cb8b479d276b082cfcde385768451",
            "commit_sha":"a181b855a43cb8b479d276b082cfcde385768451",
            "patch":"SINGLE",
            "chain_ord":"['a181b855a43cb8b479d276b082cfcde385768451']",
            "before_first_fix_commit":"{'842994def40ca565aa954a13aa065d2da1090948'}",
            "last_fix_commit":"a181b855a43cb8b479d276b082cfcde385768451",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/04\/2022, 17:57:08",
            "message":"added validation of send attribute in admin",
            "author":"Massimo Di Pierro",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'applications\/admin\/controllers\/default.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/web2py\/web2py\/raw\/a181b855a43cb8b479d276b082cfcde385768451\/applications%2Fadmin%2Fcontrollers%2Fdefault.py', 'patch': '@@ -12,7 +12,7 @@\\n from gluon.admin import *\\n from gluon.fileutils import abspath, read_file, write_file\\n from gluon.utils import web2py_uuid\\n-from gluon.tools import Config\\n+from gluon.tools import Config, prevent_open_redirect\\n from gluon.compileapp import find_exposed_functions\\n from glob import glob\\n from gluon._compat import iteritems, PY2, pickle, xrange, urlopen, to_bytes, StringIO, to_native, reload\\n@@ -118,7 +118,7 @@ def get_app(name=None):\\n def index():\\n     \"\"\" Index handler \"\"\"\\n \\n-    send = request.vars.send\\n+    send = prevent_open_redirect(request.vars.send)\\n     if DEMO_MODE:\\n         session.authorized = True\\n         session.last_time = t0'}}",
            "message_norm":"added validation of send attribute in admin",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('admin', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['applications\/admin\/controllers\/default.py'])",
            "num_files":1.0
        },
        {
            "index":2233,
            "vuln_id":"GHSA-jcxv-2j3h-mg59",
            "cwe_id":"{'CWE-119'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/opencv\/opencv\/pull\/10369\/commits\/7bbe1a53cfc097b82b1589f7915a2120de39274c'}",
            "dataset":"osv",
            "summary":"Improper Restriction of Operations within the Bounds of a Memory Buffer in OpenCV OpenCV 3.3.1 (corresponding with opencv-python and opencv-contrib-python 3.3.1.11) has a Buffer Overflow in the cv::PxMDecoder::readData function in grfmt_pxm.cpp, because an incorrect size value is used.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencv\/opencv",
            "commit_href":"https:\/\/github.com\/opencv\/opencv\/pull\/10369\/commits\/7bbe1a53cfc097b82b1589f7915a2120de39274c",
            "commit_sha":"7bbe1a53cfc097b82b1589f7915a2120de39274c",
            "patch":"SINGLE",
            "chain_ord":"['7bbe1a53cfc097b82b1589f7915a2120de39274c']",
            "before_first_fix_commit":"{'eecb64a97313bcc0221db20c9cd0636f1c27a6d8'}",
            "last_fix_commit":"7bbe1a53cfc097b82b1589f7915a2120de39274c",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/21\/2017, 01:10:24",
            "message":"imgcodecs(pxm): fix memcpy size",
            "author":"Alexander Alekhin",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'modules\/imgcodecs\/src\/grfmt_pxm.cpp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencv\/opencv\/raw\/7bbe1a53cfc097b82b1589f7915a2120de39274c\/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_pxm.cpp', 'patch': '@@ -333,7 +333,7 @@ bool PxMDecoder::readData( Mat& img )\\n                         }\\n                     }\\n                     else\\n-                        memcpy( data, src, CV_ELEM_SIZE1(m_type)*m_width);\\n+                        memcpy(data, src, img.elemSize1()*m_width);\\n                 }\\n                 else\\n                 {'}}",
            "message_norm":"imgcodecs(pxm): fix memcpy size",
            "language":"ca",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/imgcodecs\/src\/grfmt_pxm.cpp'])",
            "num_files":1.0
        },
        {
            "index":3034,
            "vuln_id":"GHSA-v2p6-4mp7-3r9v",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/epeli\/underscore.string\/commit\/f486cd684c94c12db48b45d52b1472a1b9661029'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in underscore.string Versions of `underscore.string` prior to *3.3.5* are vulnerable to Regular Expression Denial of Service (ReDoS).\n\nThe function `unescapeHTML` is vulnerable to ReDoS due to an overly-broad regex. The slowdown is approximately 2s for 50,000 characters but grows exponentially with larger inputs.\n\n\n## Recommendation\n\nUpgrade to version 3.3.5 or higher.",
            "published_date":"2019-06-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/epeli\/underscore.string",
            "commit_href":"https:\/\/github.com\/epeli\/underscore.string\/commit\/f486cd684c94c12db48b45d52b1472a1b9661029",
            "commit_sha":"f486cd684c94c12db48b45d52b1472a1b9661029",
            "patch":"SINGLE",
            "chain_ord":"['f486cd684c94c12db48b45d52b1472a1b9661029']",
            "before_first_fix_commit":"{'2f78f0d6e36d553484a1bf5fe5ed1998f013dea5'}",
            "last_fix_commit":"f486cd684c94c12db48b45d52b1472a1b9661029",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/03\/2018, 21:34:42",
            "message":"Try to fix regexp redos\n\nfixes  #510",
            "author":"Esa-Matti Suuronen",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'unescapeHTML.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/esamattis\/underscore.string\/raw\/f486cd684c94c12db48b45d52b1472a1b9661029\/unescapeHTML.js', 'patch': \"@@ -2,7 +2,7 @@ var makeString = require('.\/helper\/makeString');\\n var htmlEntities = require('.\/helper\/htmlEntities');\\n \\n module.exports = function unescapeHTML(str) {\\n-  return makeString(str).replace(\/\\\\&([^;]+);\/g, function(entity, entityCode) {\\n+  return makeString(str).replace(\/\\\\&([^;]{1,10});\/g, function(entity, entityCode) {\\n     var match;\\n \\n     if (entityCode in htmlEntities) {\"}}",
            "message_norm":"try to fix regexp redos\n\nfixes  #510",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('#510', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['unescapeHTML.js'])",
            "num_files":1.0
        },
        {
            "index":2951,
            "vuln_id":"GHSA-rh9j-f5f8-rvgc",
            "cwe_id":"{'CWE-295', 'CWE-287'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/parse-community\/parse-server\/commit\/ba2b0a9cb9a568817a114b132a4c2e0911d76df1', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/2084b7c569697a5230e42511799eeac9219db5a9'}",
            "dataset":"osv",
            "summary":"Authentication bypass vulnerability in Apple Game Center auth adapter  ### Impact\nThe certificate in Apple Game Center auth adapter not validated. As a result, authentication could potentially be bypassed by making a fake certificate accessible via certain Apple domains and providing the URL to that certificate in an authData object.\n\n### Patches\nTo prevent this, a new `rootCertificateUrl` property is introduced to the Parse Server Apple Game Center auth adapter which takes the URL to the root certificate of Apple's Game Center authentication certificate. If no value is set, the `rootCertificateUrl` property defaults to the URL of the [current root certificate](https:\/\/developer.apple.com\/news\/?id=stttq465) as of May 27, 2022.\n\nKeep in mind that the root certificate can change at any time (expected to be announced by Apple) and that it is the developer's responsibility to keep the root certificate URL up-to-date when using the Parse Server Apple Game Center auth adapter.\n\n### Workarounds\nNone.\n\n### References\n- https:\/\/github.com\/parse-community\/parse-server\/security\/advisories\/GHSA-rh9j-f5f8-rvgc\n- https:\/\/developer.apple.com\/news\/?id=stttq465\n- https:\/\/github.com\/parse-community\/parse-server\n\n### More information\n* For questions or comments about this vulnerability visit our [community forum](http:\/\/community.parseplatform.org) or [community chat](http:\/\/chat.parseplatform.org)\n* Report other vulnerabilities at [report.parseplatform.org](https:\/\/report.parseplatform.org)",
            "published_date":"2022-06-17",
            "chain_len":3,
            "project":"https:\/\/github.com\/parse-community\/parse-server",
            "commit_href":"https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/2084b7c569697a5230e42511799eeac9219db5a9",
            "commit_sha":"2084b7c569697a5230e42511799eeac9219db5a9",
            "patch":"MULTI",
            "chain_ord":"['2084b7c569697a5230e42511799eeac9219db5a9', '0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'ba2b0a9cb9a568817a114b132a4c2e0911d76df1']",
            "before_first_fix_commit":"{'a8aef820afa2c8d87683668c2961e523016bad9b'}",
            "last_fix_commit":"ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/17\/2022, 14:16:52",
            "message":"Create game_center.pem",
            "author":"Manuel Trezza",
            "comments":null,
            "stats":"{'additions': 28, 'deletions': 0, 'total': 28}",
            "files":"{'spec\/support\/cert\/game_center.pem': {'additions': 28, 'deletions': 0, 'changes': 28, 'status': 'added', 'raw_url': 'https:\/\/github.com\/parse-community\/parse-server\/raw\/2084b7c569697a5230e42511799eeac9219db5a9\/spec%2Fsupport%2Fcert%2Fgame_center.pem', 'patch': '@@ -0,0 +1,28 @@\\n+-----BEGIN CERTIFICATE-----\\n+MIIEvDCCA6SgAwIBAgIQXRHxNXkw1L9z5\/3EZ\/T\/hDANBgkqhkiG9w0BAQsFADB\/\\n+MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd\\n+BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVj\\n+IENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xODA5MTcwMDAwMDBa\\n+Fw0xOTA5MTcyMzU5NTlaMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y\\n+bmlhMRIwEAYDVQQHDAlDdXBlcnRpbm8xFDASBgNVBAoMC0FwcGxlLCBJbmMuMQ8w\\n+DQYDVQQLDAZHQyBTUkUxFDASBgNVBAMMC0FwcGxlLCBJbmMuMIIBIjANBgkqhkiG\\n+9w0BAQEFAAOCAQ8AMIIBCgKCAQEA06fwIi8fgKrTQu7cBcFkJVF6+Tqvkg7MKJTM\\n+IOYPPQtPF3AZYPsbUoRKAD7\/JXrxxOSVJ7vU1mP77tYG8TcUteZ3sAwvt2dkRbm7\\n+ZO6DcmSggv1Dg4k3goNw4GYyCY4Z2\/8JSmsQ80Iv\/UOOwynpBziEeZmJ4uck6zlA\\n+17cDkH48LBpKylaqthym5bFs9gj11pto7mvyb5BTcVuohwi6qosvbs\/4VGbC2Nsz\\n+ie416nUZfv+xxoXH995gxR2mw5cDdeCew7pSKxEhvYjT2nVdQF0q\/hnPMFnOaEyT\\n+q79n3gwFXyt0dy8eP6KBF7EW9J6b7ubu\/j7h+tQfxPM+gTXOBQIDAQABo4IBPjCC\\n+ATowCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH\\n+AwMwYQYDVR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYXaHR0cHM6Ly9k\\n+LnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNv\\n+bS9ycGEwHwYDVR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYDVR0fBCQw\\n+IjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwVwYIKwYBBQUHAQEE\\n+SzBJMB8GCCsGAQUFBzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUFBzAC\\n+hhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDANBgkqhkiG9w0BAQsFAAOCAQEA\\n+I\/j\/PcCNPebSAGrcqSFBSa2mmbusOX01eVBg8X0G\/z8Z+ZWUfGFzDG0GQf89MPxV\\n+woec+nZuqui7o9Bg8s8JbHV0TC52X14CbTj9w\/qBF748WbH9gAaTkrJYPm+MlNhu\\n+tjEuQdNl\/YXVMvQW4O8UMHTi09GyJQ0NC4q92Wxvx1m\/qzjvTLvrXHGQ9pEHhPyz\\n+vfBLxQkWpNoCNKU7UeESyH06XOrGc9MsII9deeKsDJp9a0jtx+pP4MFVtFME9SSQ\\n+tMBs0It7WwEf7qcRLpialxKwY2EzQ9g4WnANHqo18PrDBE10TFpZPzUh7JhMViVr\\n+EEbl0YdElmF8Hlamah\/yNw==\\n+-----END CERTIFICATE-----'}}",
            "message_norm":"create game_center.pem",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['spec\/support\/cert\/game_center.pem'])",
            "num_files":1.0
        },
        {
            "index":430,
            "vuln_id":"GHSA-4h66-vghf-xg5x",
            "cwe_id":"{'CWE-77'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/49459d4a3ce68587d48ffa8dead86fc9ed58e965', 'https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec'}",
            "dataset":"osv",
            "summary":"get-npm-package-version Command Injection vulnerability The package get-npm-package-version before 1.0.7 is vulnerable to Command Injection via the `main` function in index.js.",
            "published_date":"2022-08-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/hoperyy\/get-npm-package-version",
            "commit_href":"https:\/\/github.com\/hoperyy\/get-npm-package-version\/commit\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
            "commit_sha":"40b1cf31a0607ea66f9e30a0c3af1383b52b2dec",
            "patch":"MULTI",
            "chain_ord":"['40b1cf31a0607ea66f9e30a0c3af1383b52b2dec', '49459d4a3ce68587d48ffa8dead86fc9ed58e965']",
            "before_first_fix_commit":"{'52797864df09049ea28d65d14620774257a965b0'}",
            "last_fix_commit":"49459d4a3ce68587d48ffa8dead86fc9ed58e965",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2021, 03:48:05",
            "message":"feat: add defence to Command Injection\n\nadd defence to Command Injection",
            "author":"DuLinRain",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'index.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hoperyy\/get-npm-package-version\/raw\/40b1cf31a0607ea66f9e30a0c3af1383b52b2dec\/index.js', 'patch': \"@@ -1,5 +1,8 @@\\n module.exports = function (packageName, { registry = '', timeout = null } = {}) {\\n     try {\\n+        if (\/[`$&{}[;|]\/g.test(packageName) || \/[`$&{}[;|]\/g.test(registry)) {\\n+            return null\\n+        }\\n         let version;\\n \\n         const config = {\"}}",
            "message_norm":"feat: add defence to command injection\n\nadd defence to command injection",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', ''), ('add', 'ACTION', ''), ('defence', 'SECWORD', ''), ('command injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":42,
            "vuln_id":"GHSA-26cm-qrc6-mfgj",
            "cwe_id":"{'CWE-74', 'CWE-90'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/StevenWeathers\/thunderdome-planning-poker\/commit\/f1524d01e8a0f2d6c3db5461c742456c692dd8c1'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Special Elements used in an LDAP Query in stevenweathers\/thunderdome-planning-poker ### Impact\nLDAP injection vulnerability, only affects instances with LDAP authentication enabled.\n\n### Patches\nPatch for vulnerability released with v1.16.3.\n\n### Workarounds\nDisable LDAP feature if in use\n\n### References\n[OWASP LDAP Injection Prevention Cheat Sheet](https:\/\/cheatsheetseries.owasp.org\/cheatsheets\/LDAP_Injection_Prevention_Cheat_Sheet.html\n)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Thunderdome Github Repository](https:\/\/github.com\/StevenWeathers\/thunderdome-planning-poker)\n* Email us at [steven@weathers.me](mailto:steven@weathers.me)",
            "published_date":"2021-11-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/StevenWeathers\/thunderdome-planning-poker",
            "commit_href":"https:\/\/github.com\/StevenWeathers\/thunderdome-planning-poker\/commit\/f1524d01e8a0f2d6c3db5461c742456c692dd8c1",
            "commit_sha":"f1524d01e8a0f2d6c3db5461c742456c692dd8c1",
            "patch":"SINGLE",
            "chain_ord":"['f1524d01e8a0f2d6c3db5461c742456c692dd8c1']",
            "before_first_fix_commit":"{'2b9ae2e1e70e0fde47d459aa0c16b768c253e51d'}",
            "last_fix_commit":"f1524d01e8a0f2d6c3db5461c742456c692dd8c1",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/02\/2021, 00:48:52",
            "message":"Fix LDAP vulnerability",
            "author":"Steven Weathers",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'auth.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/StevenWeathers\/thunderdome-planning-poker\/raw\/f1524d01e8a0f2d6c3db5461c742456c692dd8c1\/auth.go', 'patch': '@@ -68,7 +68,7 @@ func (s *server) authAndCreateUserLdap(UserName string, UserPassword string) (*d\\n \\n \\tsearchRequest := ldap.NewSearchRequest(viper.GetString(\"auth.ldap.basedn\"),\\n \\t\\tldap.ScopeWholeSubtree, ldap.NeverDerefAliases, 0, 0, false,\\n-\\t\\tfmt.Sprintf(viper.GetString(\"auth.ldap.filter\"), UserName),\\n+\\t\\tfmt.Sprintf(viper.GetString(\"auth.ldap.filter\"), ldap.EscapeFilter(UserName)),\\n \\t\\t[]string{\"dn\", viper.GetString(\"auth.ldap.mail_attr\"), viper.GetString(\"auth.ldap.cn_attr\")},\\n \\t\\tnil,\\n \\t)'}}",
            "message_norm":"fix ldap vulnerability",
            "language":"ca",
            "entities":"[('ldap', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['auth.go'])",
            "num_files":1.0
        }
    ]
}