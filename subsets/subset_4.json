{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":552,
            "vuln_id":"GHSA-54qq-9chj-rxhv",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/livehelperchat\/livehelperchat\/commit\/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in LiveHelperChat LiveHelperChat prior to version 3.93 contains a cross-site scripting vulnerability.",
            "published_date":"2022-01-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/livehelperchat\/livehelperchat",
            "commit_href":"https:\/\/github.com\/livehelperchat\/livehelperchat\/commit\/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
            "commit_sha":"8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
            "patch":"SINGLE",
            "chain_ord":"['8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb']",
            "before_first_fix_commit":"{'d7b85466c217b3750eaccc8703ce54ba8785c4d3'}",
            "last_fix_commit":"8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/27\/2022, 20:08:18",
            "message":"Escape in user box",
            "author":"Remigijus Kiminas",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lhc_web\/design\/defaulttheme\/tpl\/pagelayouts\/parts\/user_box.tpl.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/LiveHelperChat\/livehelperchat\/raw\/8fdb4f67ac1a095331aa0fb4630ef9dfe8e75dcb\/lhc_web%2Fdesign%2Fdefaulttheme%2Ftpl%2Fpagelayouts%2Fparts%2Fuser_box.tpl.php', 'patch': '@@ -12,7 +12,7 @@\\n \\n ?>\\n <li class=\"nav-item dropleft\">\\n-    <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\"><?php echo htmlspecialchars($UserData->name),\\' \\',htmlspecialchars($UserData->surname)?><\/a>\\n+    <a href=\"#\" class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\" ng-non-bindable><?php echo htmlspecialchars($UserData->name),\\' \\',htmlspecialchars($UserData->surname)?><\/a>\\n     <div class=\"dropdown-menu\" style=\"min-width: 25rem;\" role=\"menu\">\\n \\n         <div class=\"row\">'}}",
            "message_norm":"escape in user box",
            "language":"en",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lhc_web\/design\/defaulttheme\/tpl\/pagelayouts\/parts\/user_box.tpl.php'])",
            "num_files":1.0
        },
        {
            "index":463,
            "vuln_id":"GHSA-4q97-fh3f-j294",
            "cwe_id":"{'CWE-1321'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/tiny-conf\/tiny-conf\/commit\/1f7be78bc68927996647cd45b4367f8975a3ea05'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in tiny-conf All versions of package tiny-conf up to and including version 1.1.0 are vulnerable to Prototype Pollution via the set function.",
            "published_date":"2021-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tiny-conf\/tiny-conf",
            "commit_href":"https:\/\/github.com\/tiny-conf\/tiny-conf\/commit\/1f7be78bc68927996647cd45b4367f8975a3ea05",
            "commit_sha":"1f7be78bc68927996647cd45b4367f8975a3ea05",
            "patch":"SINGLE",
            "chain_ord":"['1f7be78bc68927996647cd45b4367f8975a3ea05']",
            "before_first_fix_commit":"{'c4d8b44ab53b9810b76a04caec249762d8c7fbc7', 'c1f4181bc3583fff49fe6e34c6e745479c569eb2'}",
            "last_fix_commit":"1f7be78bc68927996647cd45b4367f8975a3ea05",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/01\/2020, 08:21:02",
            "message":"Merge pull request #1 from d3m0n-r00t\/master\n\nFixed prototype pollution",
            "author":"Maxime Tricoire",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tiny-conf.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tiny-conf\/tiny-conf\/raw\/1f7be78bc68927996647cd45b4367f8975a3ea05\/tiny-conf.js', 'patch': \"@@ -44,6 +44,9 @@ Store.prototype = {\\n    * @return {boolean} true if set; false otherwise\\n    *\/\\n   set: function (key, val) {\\n+    if (key.includes('__proto__') || key.includes('prototype') || key.includes('constructor')){\\n+      return undefined;\\n+    }\\n     if (val === undefined) {\\n       val = key;\\n       key = null;\"}}",
            "message_norm":"merge pull request #1 from d3m0n-r00t\/master\n\nfixed prototype pollution",
            "language":"en",
            "entities":"[('#1', 'ISSUE', ''), ('fixed', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tiny-conf.js'])",
            "num_files":1.0
        },
        {
            "index":455,
            "vuln_id":"GHSA-4p92-fv6v-fhfj",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/15e519a86e4b24526abaf9e6dc81cb1af86843a5'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber Microweber prior to 1.2.11 is vulnerable to reflected cross-site scripting.",
            "published_date":"2022-02-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/15e519a86e4b24526abaf9e6dc81cb1af86843a5",
            "commit_sha":"15e519a86e4b24526abaf9e6dc81cb1af86843a5",
            "patch":"SINGLE",
            "chain_ord":"['15e519a86e4b24526abaf9e6dc81cb1af86843a5']",
            "before_first_fix_commit":"{'c897d0dc159849763a813184d9b75b966c6360bf'}",
            "last_fix_commit":"15e519a86e4b24526abaf9e6dc81cb1af86843a5",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/25\/2022, 10:57:48",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 0, 'total': 0}",
            "files":"{'.github\/workflows\/templates.yml': {'additions': 0, 'deletions': 0, 'changes': 0, 'status': 'renamed', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/15e519a86e4b24526abaf9e6dc81cb1af86843a5\/.github%2Fworkflows%2Ftemplates.yml', 'patch': None}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['.github\/workflows\/templates.yml'])",
            "num_files":1.0
        },
        {
            "index":675,
            "vuln_id":"GHSA-5q5w-mqp6-g2gh",
            "cwe_id":"{'CWE-434', 'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/jsdecena\/laracom\/commit\/256026193ce994dc4c1365e02f414d8a0cd77ae8'}",
            "dataset":"osv",
            "summary":"Unrestricted Upload of File with Dangerous Type in jsdecena\/laracom jsdecena\/laracom prior to version 2.0.9 is vulnerable to Unrestricted Upload of File with Dangerous Type.",
            "published_date":"2022-02-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/jsdecena\/laracom",
            "commit_href":"https:\/\/github.com\/jsdecena\/laracom\/commit\/256026193ce994dc4c1365e02f414d8a0cd77ae8",
            "commit_sha":"256026193ce994dc4c1365e02f414d8a0cd77ae8",
            "patch":"SINGLE",
            "chain_ord":"['256026193ce994dc4c1365e02f414d8a0cd77ae8']",
            "before_first_fix_commit":"{'8ef50622cb9c696d79a7a6b37e9b43266da6545d'}",
            "last_fix_commit":"256026193ce994dc4c1365e02f414d8a0cd77ae8",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/01\/2022, 22:16:55",
            "message":"Fix vulnerability report from hunter.dev",
            "author":"Roland Jeffrey Decena",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'project\/app\/Shop\/Products\/Requests\/UpdateProductRequest.php': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jsdecena\/laracom\/raw\/256026193ce994dc4c1365e02f414d8a0cd77ae8\/project%2Fapp%2FShop%2FProducts%2FRequests%2FUpdateProductRequest.php', 'patch': \"@@ -20,7 +20,9 @@ public function rules()\\n             'quantity' => ['required', 'integer', 'min:0'],\\n             'price' => ['required', 'numeric', 'min:0'],\\n             'sale_price' => ['nullable', 'numeric'],\\n-            'weight' => ['nullable', 'numeric', 'min:0']\\n+            'weight' => ['nullable', 'numeric', 'min:0'],\\n+            'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',\\n+            'cover' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',\\n         ];\\n     }\\n }\"}}",
            "message_norm":"fix vulnerability report from hunter.dev",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['project\/app\/Shop\/Products\/Requests\/UpdateProductRequest.php'])",
            "num_files":1.0
        },
        {
            "index":1714,
            "vuln_id":"GHSA-fc42-h7q4-qp8h",
            "cwe_id":"{'CWE-77'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/ssnau\/killport\/commit\/bec8e371f170a12e11cd222ffc7a6e1ae9942638'}",
            "dataset":"osv",
            "summary":"Command Injection in killport This affects the package killport before 1.0.2. If (attacker-controlled) user input is given, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization. Running this PoC will cause the command touch success to be executed, leading to the creation of a file called success.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/ssnau\/killport",
            "commit_href":"https:\/\/github.com\/ssnau\/killport\/commit\/bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "commit_sha":"bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "patch":"SINGLE",
            "chain_ord":"['bec8e371f170a12e11cd222ffc7a6e1ae9942638']",
            "before_first_fix_commit":"{'5268f23ea8f152e47182b263d8f7ef20c12a9f28'}",
            "last_fix_commit":"bec8e371f170a12e11cd222ffc7a6e1ae9942638",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/17\/2021, 17:26:35",
            "message":"fix a vulnerability issue if a provided port is not a number",
            "author":"ssnau",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'index.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ssnau\/killport\/raw\/bec8e371f170a12e11cd222ffc7a6e1ae9942638\/index.js', 'patch': \"@@ -5,6 +5,7 @@ var notEmpty = function(x) {return x};\\n \\n module.exports = function killport(port) {\\n   return (new Promise(function(resolve, reject) {\\n+    if (!\/^\\\\d+$\/.test(port)) throw new Error('port must be a number.');\\n     var cmd = 'lsof -i:' + port; \\n     cp.exec(cmd, function(err, stdout, stderr){\\n       \/\/ do not check `err`, if no process found\"}}",
            "message_norm":"fix a vulnerability issue if a provided port is not a number",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1599,
            "vuln_id":"GHSA-crch-j389-5f84",
            "cwe_id":"{'CWE-787'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683'}",
            "dataset":"osv",
            "summary":"Heap OOB write in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`\/`ArgMax`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/102b211d892f3abc14f845a72047809b39cc65ab\/tensorflow\/lite\/kernels\/arg_min_max.cc#L52-L59):\n\n```cc\nTfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\nint j = 0;\nfor (int i = 0; i < NumDimensions(input); ++i) { \n  if (i != axis_value) {\n    output_dims->data[j] = SizeOfDimension(input, i);\n    ++j;\n  }\n}\n```\n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`.\n  \n### Patches \nWe have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683",
            "commit_sha":"c59c37e7b2d563967da813fa50fe20b21f4da683",
            "patch":"SINGLE",
            "chain_ord":"['c59c37e7b2d563967da813fa50fe20b21f4da683']",
            "before_first_fix_commit":"{'102b211d892f3abc14f845a72047809b39cc65ab'}",
            "last_fix_commit":"c59c37e7b2d563967da813fa50fe20b21f4da683",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 00:50:10",
            "message":"Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/arg_min_max.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c59c37e7b2d563967da813fa50fe20b21f4da683\/tensorflow%2Flite%2Fkernels%2Farg_min_max.cc', 'patch': '@@ -48,6 +48,9 @@ TfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\\n     axis_value += NumDimensions(input);\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n+\\n   \/\/ Copy the input dimensions to output except the axis dimension.\\n   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\\n   int j = 0;'}}",
            "message_norm":"prevent array write out-of-bounds.\n\nif user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\npiperorigin-revid: 371023299\nchange-id: i9eca37ffc2b29e8e48710f500701270ef0790224",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('issues', 'FLAW', ''), ('371023299', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/arg_min_max.cc'])",
            "num_files":1.0
        },
        {
            "index":1952,
            "vuln_id":"GHSA-gx8x-g87m-h5q6",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/sparklemotion\/nekohtml\/commit\/a800fce3b079def130ed42a408ff1d09f89e773d'}",
            "dataset":"osv",
            "summary":"Denial of Service (DoS) in Nokogiri on JRuby ## Summary\n\nNokogiri `v1.13.4` updates the vendored `org.cyberneko.html` library to `1.9.22.noko2` which addresses [CVE-2022-24839](https:\/\/github.com\/sparklemotion\/nekohtml\/security\/advisories\/GHSA-9849-p7jc-9rmv). That CVE is rated 7.5 (High Severity).\n\nSee [GHSA-9849-p7jc-9rmv](https:\/\/github.com\/sparklemotion\/nekohtml\/security\/advisories\/GHSA-9849-p7jc-9rmv) for more information.\n\nPlease note that this advisory only applies to the **JRuby** implementation of Nokogiri `< 1.13.4`.\n\n\n## Mitigation\n\nUpgrade to Nokogiri `>= 1.13.4`.\n\n\n## Impact\n\n### [CVE-2022-24839](https:\/\/github.com\/sparklemotion\/nekohtml\/security\/advisories\/GHSA-9849-p7jc-9rmv) in nekohtml\n\n- **Severity**: High 7.5\n- **Type**: [CWE-400](https:\/\/cwe.mitre.org\/data\/definitions\/400.html) Uncontrolled Resource Consumption\n- **Description**: The fork of `org.cyberneko.html` used by Nokogiri (Rubygem) raises a `java.lang.OutOfMemoryError` exception when parsing ill-formed HTML markup.\n- **See also**: [GHSA-9849-p7jc-9rmv](https:\/\/github.com\/sparklemotion\/nekohtml\/security\/advisories\/GHSA-9849-p7jc-9rmv)",
            "published_date":"2022-04-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/sparklemotion\/nekohtml",
            "commit_href":"https:\/\/github.com\/sparklemotion\/nekohtml\/commit\/a800fce3b079def130ed42a408ff1d09f89e773d",
            "commit_sha":"a800fce3b079def130ed42a408ff1d09f89e773d",
            "patch":"SINGLE",
            "chain_ord":"['a800fce3b079def130ed42a408ff1d09f89e773d']",
            "before_first_fix_commit":"{'6fe9b53bc289d0e90d684c0f4a8e9f2b19f3460f'}",
            "last_fix_commit":"a800fce3b079def130ed42a408ff1d09f89e773d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/03\/2022, 23:03:39",
            "message":"fix: ensure ill-formed PIs are parsed correctly",
            "author":"Mike Dalessio",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/org\/cyberneko\/html\/HTMLScanner.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sparklemotion\/nekohtml\/raw\/a800fce3b079def130ed42a408ff1d09f89e773d\/src%2Forg%2Fcyberneko%2Fhtml%2FHTMLScanner.java', 'patch': \"@@ -2588,7 +2588,7 @@ protected void scanPI() throws IOException {\\n                     if (c == '?' || c == '\/') {\\n                         char c0 = (char)c;\\n                         c = fCurrentEntity.read();\\n-                        if (c == '>') {\\n+                        if (c == '>' || c == -1) {\\n                             break;\\n                         }\\n                         fStringBuffer.append(c0);\"}}",
            "message_norm":"fix: ensure ill-formed pis are parsed correctly",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/org\/cyberneko\/html\/HTMLScanner.java'])",
            "num_files":1.0
        },
        {
            "index":2714,
            "vuln_id":"GHSA-q7q9-w24q-cpgh",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/apache\/ambari\/pull\/3040\/commits\/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting (XSS) in Apache Ambari Views A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/ambari",
            "commit_href":"https:\/\/github.com\/apache\/ambari\/pull\/3040\/commits\/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
            "commit_sha":"a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
            "patch":"SINGLE",
            "chain_ord":"['a9cfdb9dcce63a3494c07c81ebb2cf8da218a210']",
            "before_first_fix_commit":"{'9e9ddf752f36aa9340d6dfdc23ecccfcd646fc53'}",
            "last_fix_commit":"a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/01\/2019, 11:43:05",
            "message":"AMBARI-25329. Ambari breadcrumbs xss vulnerability",
            "author":"Alex Antonenko",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 2, 'total': 14}",
            "files":"{'ambari-web\/app\/views\/common\/breadcrumbs_view.js': {'additions': 12, 'deletions': 2, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/ambari\/raw\/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210\/ambari-web%2Fapp%2Fviews%2Fcommon%2Fbreadcrumbs_view.js', 'patch': \"@@ -149,8 +149,16 @@ App.BreadcrumbItem = Em.Object.extend({\\n   createLabel() {\\n     let label = this.get('label');\\n     let labelBindingPath = this.get('labelBindingPath');\\n+    let formattedLabel;\\n+\\n+    if (labelBindingPath) {\\n+      formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));\\n+    } else{\\n+      formattedLabel = label;\\n+    }\\n+\\n+\\n \\n-    let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;\\n     this.set('formattedLabel', this.labelPostFormat(formattedLabel));\\n   },\\n \\n@@ -216,7 +224,9 @@ App.BreadcrumbsView = Em.View.extend({\\n       }\\n       currentState = currentState.get('parentState');\\n     }\\n-    items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());\\n+    items.reverse();\\n+    items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));\\n+    items = items.map(item => App.BreadcrumbItem.extend(item).create());\\n     if (items.length) {\\n       items.get('lastObject').setProperties({\\n         disabled: true,\"}}",
            "message_norm":"ambari-25329. ambari breadcrumbs xss vulnerability",
            "language":"ca",
            "entities":"[('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ambari-web\/app\/views\/common\/breadcrumbs_view.js'])",
            "num_files":1.0
        },
        {
            "index":2157,
            "vuln_id":"GHSA-hx9q-2mx4-m4pg",
            "cwe_id":"{'CWE-191', 'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943'}",
            "dataset":"osv",
            "summary":"Missing validation causes denial of service via `Conv3DBackpropFilterV2` ### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/f3b9bf4c3c0597563b289c0512e98d4ce81f886e\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=['123'],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n\/\/ ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https:\/\/github.com\/tensorflow\/tensorflow\/issues\/55305).",
            "published_date":"2022-05-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "commit_sha":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "patch":"MULTI",
            "chain_ord":"['84563f265f28b3c36a15335c8b005d405260e943', '20cb18724b0bf6c09071a3f53434c4eec53cc147']",
            "before_first_fix_commit":"{'3f30e4965889b1b86b1d56392e437ccc08907f65'}",
            "last_fix_commit":"20cb18724b0bf6c09071a3f53434c4eec53cc147",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/20\/2022, 19:05:26",
            "message":"Allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nRelated to the fix for #55305\n\nPiperOrigin-RevId: 443157549",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/20cb18724b0bf6c09071a3f53434c4eec53cc147\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -94,8 +94,10 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n                 errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n-    OP_REQUIRES(context, num_segments > 0,\\n-                errors::InvalidArgument(\"Number of segments must be positive\"));\\n+    OP_REQUIRES(\\n+        context, num_segments >= 0,\\n+        errors::InvalidArgument(\\n+            \"Number of segments must be non-negative but got \", num_segments));\\n     OP_REQUIRES(context, segment_dims != 0,\\n                 errors::InvalidArgument(\"Segment_id cannot have rank 0\"));'}}",
            "message_norm":"allow 0 for number of segments in `unsorted_segment_join_op.cc`\n\nrelated to the fix for #55305\n\npiperorigin-revid: 443157549",
            "language":"en",
            "entities":"[('#55305', 'ISSUE', ''), ('443157549', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3269,
            "vuln_id":"GHSA-wf5x-cr3r-xr77",
            "cwe_id":"{'CWE-674'}",
            "score":8.3,
            "chain":"{'https:\/\/github.com\/patriksimek\/vm2\/commit\/4b22d704e4794af63a5a2d633385fd20948f6f90'}",
            "dataset":"osv",
            "summary":"vm2 before 3.6.11 vulnerable to sandbox escape This affects the package vm2 before 3.6.11. It is possible to trigger a RangeError exception from the host rather than the \"sandboxed\" context by reaching the stack call limit with an infinite recursion. The returned object is then used to reference the mainModule property of the host code running the script allowing it to spawn a child_process and execute arbitrary code.",
            "published_date":"2022-07-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/patriksimek\/vm2",
            "commit_href":"https:\/\/github.com\/patriksimek\/vm2\/commit\/4b22d704e4794af63a5a2d633385fd20948f6f90",
            "commit_sha":"4b22d704e4794af63a5a2d633385fd20948f6f90",
            "patch":"SINGLE",
            "chain_ord":"['4b22d704e4794af63a5a2d633385fd20948f6f90']",
            "before_first_fix_commit":"{'2ac8ff254a71e516e83f6496635fa61420447fa9'}",
            "last_fix_commit":"4b22d704e4794af63a5a2d633385fd20948f6f90",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/07\/2019, 23:46:03",
            "message":"Fixes sandbox escape (#197)",
            "author":"Patrik Simek",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 16, 'total': 32}",
            "files":"{'lib\/contextify.js': {'additions': 16, 'deletions': 16, 'changes': 32, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/patriksimek\/vm2\/raw\/4b22d704e4794af63a5a2d633385fd20948f6f90\/lib%2Fcontextify.js', 'patch': \"@@ -327,15 +327,15 @@ Decontextify.object = (object, traps, deepTraps, flags, mock) => {\\n \\treturn proxy;\\n };\\n Decontextify.value = (value, traps, deepTraps, flags, mock) => {\\n-\\tif (Contextified.has(value)) {\\n-\\t\\t\/\/ Contextified object has returned back from vm\\n-\\t\\treturn Contextified.get(value);\\n-\\t} else if (Decontextify.proxies.has(value)) {\\n-\\t\\t\/\/ Decontextified proxy already exists, reuse\\n-\\t\\treturn Decontextify.proxies.get(value);\\n-\\t}\\n-\\n \\ttry {\\n+\\t\\tif (Contextified.has(value)) {\\n+\\t\\t\\t\/\/ Contextified object has returned back from vm\\n+\\t\\t\\treturn Contextified.get(value);\\n+\\t\\t} else if (Decontextify.proxies.has(value)) {\\n+\\t\\t\\t\/\/ Decontextified proxy already exists, reuse\\n+\\t\\t\\treturn Decontextify.proxies.get(value);\\n+\\t\\t}\\n+\\n \\t\\tswitch (typeof value) {\\n \\t\\t\\tcase 'object':\\n \\t\\t\\t\\tif (value === null) {\\n@@ -621,15 +621,15 @@ Contextify.object = (object, traps, deepTraps, flags, mock) => {\\n \\treturn proxy;\\n };\\n Contextify.value = (value, traps, deepTraps, flags, mock) => {\\n-\\tif (Decontextified.has(value)) {\\n-\\t\\t\/\/ Decontextified object has returned back to vm\\n-\\t\\treturn Decontextified.get(value);\\n-\\t} else if (Contextify.proxies.has(value)) {\\n-\\t\\t\/\/ Contextified proxy already exists, reuse\\n-\\t\\treturn Contextify.proxies.get(value);\\n-\\t}\\n-\\n \\ttry {\\n+\\t\\tif (Decontextified.has(value)) {\\n+\\t\\t\\t\/\/ Decontextified object has returned back to vm\\n+\\t\\t\\treturn Decontextified.get(value);\\n+\\t\\t} else if (Contextify.proxies.has(value)) {\\n+\\t\\t\\t\/\/ Contextified proxy already exists, reuse\\n+\\t\\t\\treturn Contextify.proxies.get(value);\\n+\\t\\t}\\n+\\n \\t\\tswitch (typeof value) {\\n \\t\\t\\tcase 'object':\\n \\t\\t\\t\\tif (value === null) {\"}}",
            "message_norm":"fixes sandbox escape (#197)",
            "language":"ca",
            "entities":"[('fixes', 'ACTION', ''), ('sandbox', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('#197', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/contextify.js'])",
            "num_files":1.0
        },
        {
            "index":3349,
            "vuln_id":"GHSA-x2mc-8fgj-3wmr",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mafintosh\/tar-fs\/commit\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in tar-fs A vulnerability was found in tar-fs before 1.16.2. An Arbitrary File Overwrite issue exists when extracting a tarball containing a hardlink to a file that already exists on the system, in conjunction with a later plain file with the same name as the hardlink. This plain file content replaces the existing file content.",
            "published_date":"2019-05-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/mafintosh\/tar-fs",
            "commit_href":"https:\/\/github.com\/mafintosh\/tar-fs\/commit\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
            "commit_sha":"06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
            "patch":"SINGLE",
            "chain_ord":"['06672828e6fa29ac8551b1b6f36c852a9a3c58a2']",
            "before_first_fix_commit":"{'7b4ab17e950832cfd3e67421e48898fdb50318fc'}",
            "last_fix_commit":"06672828e6fa29ac8551b1b6f36c852a9a3c58a2",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/30\/2018, 11:20:56",
            "message":"force hardlink targets to be in the tar",
            "author":"Mathias Buus",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/tar-fs\/raw\/06672828e6fa29ac8551b1b6f36c852a9a3c58a2\/index.js', 'patch': \"@@ -261,7 +261,7 @@ exports.extract = function (cwd, opts) {\\n     var onlink = function () {\\n       if (win32) return next() \/\/ skip links on win for now before it can be tested\\n       xfs.unlink(name, function () {\\n-        var srcpath = path.resolve(cwd, header.linkname)\\n+        var srcpath = path.join(cwd, path.join('\/', header.linkname))\\n \\n         xfs.link(srcpath, name, function (err) {\\n           if (err && err.code === 'EPERM' && opts.hardlinkAsFilesFallback) {\"}}",
            "message_norm":"force hardlink targets to be in the tar",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1207,
            "vuln_id":"GHSA-8g7p-74h8-hg48",
            "cwe_id":"{'CWE-400', 'CWE-125'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/commit\/1c24219df87524e6ed973127e81f30801d658f07'}",
            "dataset":"osv",
            "summary":"Denial of Service in https-proxy-agent Versions of `https-proxy-agent` before 2.2.0 are vulnerable to denial of service. This is due to unsanitized options (proxy.auth) being passed to `Buffer()`.\n\n\n## Recommendation\n\nUpdate to version 2.2.0 or later.",
            "published_date":"2018-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/TooTallNate\/node-https-proxy-agent",
            "commit_href":"https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/commit\/1c24219df87524e6ed973127e81f30801d658f07",
            "commit_sha":"1c24219df87524e6ed973127e81f30801d658f07",
            "patch":"SINGLE",
            "chain_ord":"['1c24219df87524e6ed973127e81f30801d658f07']",
            "before_first_fix_commit":"{'c58d365dd153104d1147967a0a6b4e1dd1698e50'}",
            "last_fix_commit":"1c24219df87524e6ed973127e81f30801d658f07",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/03\/2018, 19:31:04",
            "message":"Use `Buffer.from()`\n\n`new Buffer()` is deprecated and unsafe.",
            "author":"Nathan Rajlich",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TooTallNate\/node-https-proxy-agent\/raw\/1c24219df87524e6ed973127e81f30801d658f07\/index.js', 'patch': \"@@ -204,7 +204,7 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\\n   var headers = Object.assign({}, proxy.headers);\\n   if (proxy.auth) {\\n     headers['Proxy-Authorization'] =\\n-      'Basic ' + new Buffer(proxy.auth).toString('base64');\\n+      'Basic ' + Buffer.from(proxy.auth).toString('base64');\\n   }\\n \\n   \/\/ the Host header should only include the port\"}}",
            "message_norm":"use `buffer.from()`\n\n`new buffer()` is deprecated and unsafe.",
            "language":"en",
            "entities":"[('unsafe', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1487,
            "vuln_id":"GHSA-c558-5gfm-p2r8",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a'}",
            "dataset":"osv",
            "summary":"JSPUI spellcheck and autocomplete tools vulnerable to Cross Site Scripting ### Impact\nThe JSPUI spellcheck \"Did you mean\" HTML escapes the data-spell attribute in the link, but not the actual displayed text.  Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.4 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7\n* 6.x patch files available (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7.patch\n\n_DSpace 5.x:_\n* Fixed in 5.11 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5\n* 5.x patch files available (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5.patch\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs \/ configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered & reported by Hassan Bhuiyan (Brunel University London)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
            "published_date":"2022-08-06",
            "chain_len":4,
            "project":"https:\/\/github.com\/DSpace\/DSpace",
            "commit_href":"https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a",
            "commit_sha":"c89e493e517b424dea6175caba54e91d3847fc3a",
            "patch":"MULTI",
            "chain_ord":"['ebb83a75234d3de9be129464013e998dc929b68d', '35030a23e48b5946f5853332c797e1c4adea7bb7', 'c89e493e517b424dea6175caba54e91d3847fc3a', '6f75bb084ab1937d094208c55cd84340040bcbb5']",
            "before_first_fix_commit":"{'d1dd7d23329ef055069759df15cfa200c8e32e54'}",
            "last_fix_commit":"6f75bb084ab1937d094208c55cd84340040bcbb5",
            "chain_ord_pos":3.0,
            "commit_datetime":"07\/26\/2022, 04:25:18",
            "message":"[DS-4453] Escape spellcheck, autocomplete HTML (JSPUI)",
            "author":"Kim Shepherd",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DSpace\/DSpace\/raw\/c89e493e517b424dea6175caba54e91d3847fc3a\/dspace-jspui%2Fsrc%2Fmain%2Fwebapp%2Fsearch%2Fdiscovery.jsp', 'patch': '@@ -196,7 +196,7 @@\\n                                 <input type=\"text\" size=\"50\" id=\"query\" name=\"query\" value=\"<%= (query==null ? \"\" : Utils.addEntities(query)) %>\"\/>\\n                                 <input type=\"submit\" id=\"main-query-submit\" class=\"btn btn-primary\" value=\"<fmt:message key=\"jsp.general.go\"\/>\" \/>\\n <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>\\n-\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= spellCheckQuery %><\/a><\/fmt:param><\/fmt:message><\/p>\\n+\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%=Utils.addEntities(spellCheckQuery) %><\/a><\/fmt:param><\/fmt:message><\/p>\\n <% } %>                  \\n                                 <input type=\"hidden\" value=\"<%= rpp %>\" name=\"rpp\" \/>\\n                                 <input type=\"hidden\" value=\"<%= Utils.addEntities(sortedBy) %>\" name=\"sort_by\" \/>'}}",
            "message_norm":"[ds-4453] escape spellcheck, autocomplete html (jspui)",
            "language":"fr",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp'])",
            "num_files":1.0
        },
        {
            "index":2168,
            "vuln_id":"GHSA-hxp5-8pgq-mgv9",
            "cwe_id":"{'CWE-295'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/apache\/calcite\/commit\/43eeafcbac29d02c72bd520c003cdfc571de2d15'}",
            "dataset":"osv",
            "summary":"Missing Authentication for Critical Function in Apache Calcite \"HttpUtils#getURLConnection method disables explicitly hostname verification for HTTPS connections making clients vulnerable to man-in-the-middle attacks. Calcite uses this method internally to connect with Druid and Splunk so information leakage may happen when using the respective Calcite adapters. The method itself is in a utility class so people may use it to create vulnerable HTTPS connections for other applications. From Apache Calcite 1.26 onwards, the hostname verification will be performed using the default JVM truststore.\"",
            "published_date":"2021-04-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/calcite",
            "commit_href":"https:\/\/github.com\/apache\/calcite\/commit\/43eeafcbac29d02c72bd520c003cdfc571de2d15",
            "commit_sha":"43eeafcbac29d02c72bd520c003cdfc571de2d15",
            "patch":"SINGLE",
            "chain_ord":"['43eeafcbac29d02c72bd520c003cdfc571de2d15']",
            "before_first_fix_commit":"{'ab19f98172848fe303a18173946c2def0b0d0312'}",
            "last_fix_commit":"43eeafcbac29d02c72bd520c003cdfc571de2d15",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/22\/2020, 21:42:06",
            "message":"[CALCITE-4298] Avoid disabling hostname verification on HTTPS connections",
            "author":"Stamatis Zampetakis",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 16, 'total': 17}",
            "files":"{'core\/src\/main\/java\/org\/apache\/calcite\/runtime\/HttpUtils.java': {'additions': 1, 'deletions': 16, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/calcite\/raw\/43eeafcbac29d02c72bd520c003cdfc571de2d15\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcalcite%2Fruntime%2FHttpUtils.java', 'patch': \"@@ -23,11 +23,9 @@\\n import java.io.Writer;\\n import java.net.HttpURLConnection;\\n import java.net.URL;\\n-import java.net.URLConnection;\\n import java.net.URLEncoder;\\n import java.nio.charset.StandardCharsets;\\n import java.util.Map;\\n-import javax.net.ssl.HttpsURLConnection;\\n \\n \/**\\n  * Utilities for connecting to REST services such as Splunk via HTTP.\\n@@ -37,20 +35,7 @@ private HttpUtils() {}\\n \\n   public static HttpURLConnection getURLConnection(String url)\\n       throws IOException {\\n-    URLConnection conn = new URL(url).openConnection();\\n-    final HttpURLConnection httpConn = (HttpURLConnection) conn;\\n-\\n-    \/\/ take care of https stuff - most of the time it's only needed to\\n-    \/\/ secure client\/server comm\\n-    \/\/ not to establish the identity of the server\\n-    if (httpConn instanceof HttpsURLConnection) {\\n-      HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;\\n-      httpsConn.setSSLSocketFactory(\\n-          TrustAllSslSocketFactory.createSSLSocketFactory());\\n-      httpsConn.setHostnameVerifier((arg0, arg1) -> true);\\n-    }\\n-\\n-    return httpConn;\\n+    return (HttpURLConnection) new URL(url).openConnection();\\n   }\\n \\n   public static void appendURLEncodedArgs(\"}}",
            "message_norm":"[calcite-4298] avoid disabling hostname verification on https connections",
            "language":"en",
            "entities":"[('hostname', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/apache\/calcite\/runtime\/HttpUtils.java'])",
            "num_files":1.0
        },
        {
            "index":1359,
            "vuln_id":"GHSA-9cq5-xgg4-x477",
            "cwe_id":"{'CWE-89'}",
            "score":6.7,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/2b34e267e4186125f99bfa420140634ad45801fb'}",
            "dataset":"osv",
            "summary":"SQL Injection in showdoc Showdoc verions 2.10.2 and prior is vulnerable to SQL injection. A patch is available in the `master` branch of the repository.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/2b34e267e4186125f99bfa420140634ad45801fb",
            "commit_sha":"2b34e267e4186125f99bfa420140634ad45801fb",
            "patch":"SINGLE",
            "chain_ord":"['2b34e267e4186125f99bfa420140634ad45801fb']",
            "before_first_fix_commit":"{'409c8a1208bbb847046a9496303192980f2e6219'}",
            "last_fix_commit":"2b34e267e4186125f99bfa420140634ad45801fb",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/25\/2022, 12:34:52",
            "message":"bug",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'server\/Application\/Api\/Controller\/AdminUserController.class.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/2b34e267e4186125f99bfa420140634ad45801fb\/server%2FApplication%2FApi%2FController%2FAdminUserController.class.php', 'patch': '@@ -76,7 +76,7 @@ public function addUser(){\\n         $this->checkAdmin();\\n         $username = I(\"post.username\");\\n         $password = I(\"post.password\");\\n-        $uid = I(\"post.uid\");\\n+        $uid = I(\"post.uid\/d\");\\n         $name = I(\"post.name\");\\n         if(!$username){\\n             $this->sendError(10101,\\'\u7528\u6237\u540d\u4e0d\u5141\u8bb8\u4e3a\u7a7a\\');'}}",
            "message_norm":"bug",
            "language":"id",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Controller\/AdminUserController.class.php'])",
            "num_files":1.0
        },
        {
            "index":1684,
            "vuln_id":"GHSA-f7f6-xrwc-9c57",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in Jenkins Jenkins 2.73.1 and earlier, 2.83 and earlier bundled a version of the commons-fileupload library with the denial-of-service vulnerability known as CVE-2016-3092. The fix for that vulnerability has been backported to the version of the library bundled with Jenkins.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "commit_sha":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "patch":"SINGLE",
            "chain_ord":"['ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b']",
            "before_first_fix_commit":"{'fe77d1c3dbf91ddf2a9f8e5ed882611455ab00d0'}",
            "last_fix_commit":"ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/29\/2017, 13:41:00",
            "message":"[SECURITY-490] Patch Commons File Upload 1.3.x.",
            "author":"Jesse Glick",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'core\/pom.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/ea981a029cb985b71f3a0dc0f9ce3b3e3e6c001b\/core%2Fpom.xml', 'patch': '@@ -588,7 +588,7 @@ THE SOFTWARE.\\n     <dependency>\\n       <groupId>commons-fileupload<\/groupId>\\n       <artifactId>commons-fileupload<\/artifactId>\\n-      <version>1.3.1-jenkins-1<\/version>\\n+      <version>1.3.1-jenkins-2<\/version> \\n     <\/dependency>\\n \\n     <!-- offline profiler API to put in the classpath if we need it -->'}}",
            "message_norm":"[security-490] patch commons file upload 1.3.x.",
            "language":"en",
            "entities":"[('security-490', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/pom.xml'])",
            "num_files":1.0
        },
        {
            "index":646,
            "vuln_id":"GHSA-5j3g-jfq3-7jwx",
            "cwe_id":"{'CWE-94'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/hapijs\/bassmaster\/commit\/b751602d8cb7194ee62a61e085069679525138c4'}",
            "dataset":"osv",
            "summary":"Arbitrary JavaScript Execution in bassmaster A vulnerability exists in bassmaster <= 1.5.1 that allows for an attacker to provide arbitrary JavaScript that is then executed server side via eval.\n\n\n## Recommendation\n\nUpdate to bassmaster version 1.5.2 or greater.",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/hapijs\/bassmaster",
            "commit_href":"https:\/\/github.com\/hapijs\/bassmaster\/commit\/b751602d8cb7194ee62a61e085069679525138c4",
            "commit_sha":"b751602d8cb7194ee62a61e085069679525138c4",
            "patch":"SINGLE",
            "chain_ord":"['b751602d8cb7194ee62a61e085069679525138c4']",
            "before_first_fix_commit":"{'83f02417beab924ce2fe6ee7d6fcfab11d2dafd5'}",
            "last_fix_commit":"b751602d8cb7194ee62a61e085069679525138c4",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/25\/2014, 23:06:07",
            "message":"Remove eval statement",
            "author":"nvcexploder",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 8, 'total': 10}",
            "files":"{'lib\/batch.js': {'additions': 2, 'deletions': 8, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/outmoded\/bassmaster\/raw\/b751602d8cb7194ee62a61e085069679525138c4\/lib%2Fbatch.js', 'patch': \"@@ -146,16 +146,10 @@ internals.batch = function (batchRequest, resultsData, pos, parts, callback) {\\n             var ref = resultsData.resultsMap[parts[i].index];\\n \\n             if (ref) {\\n-                var value = null;\\n-\\n-                try {\\n-                    eval('value = ref.' + parts[i].value + ';');\\n-                }\\n-                catch (e) {\\n-                    error = new Error(e.message);\\n-                }\\n+                var value = ref[parts[i].value]||null;\\n \\n                 if (value) {\\n+\\n                     if (value.match && value.match(\/^[\\\\w:]+$\/)) {\\n                         path += value;\\n                     }\"}}",
            "message_norm":"remove eval statement",
            "language":"sl",
            "entities":"[('remove', 'ACTION', ''), ('eval', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/batch.js'])",
            "num_files":1.0
        },
        {
            "index":334,
            "vuln_id":"GHSA-4284-jfhc-f854",
            "cwe_id":"{'CWE-732'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/phusion\/passenger\/commit\/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8'}",
            "dataset":"osv",
            "summary":"Phusion Passenger incorrect permission assignment An issue was discovered in switchGroup() in agent\/ExecHelper\/ExecHelperMain.cpp in Phusion Passenger before 5.3.2. The set of groups (gidset) is not set correctly, leaving it up to randomness (i.e., uninitialized memory) which supplementary groups are actually being set while lowering privileges.",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/phusion\/passenger",
            "commit_href":"https:\/\/github.com\/phusion\/passenger\/commit\/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
            "commit_sha":"4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
            "patch":"SINGLE",
            "chain_ord":"['4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8']",
            "before_first_fix_commit":"{'6120509d3dca78b959135529262047febe884498'}",
            "last_fix_commit":"4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/29\/2018, 13:33:50",
            "message":"ExecHelperMain: fix privilege lowering code",
            "author":"Hongli Lai (Phusion)",
            "comments":"{'com_1': {'author': 'kbabioch', 'datetime': '06\/21\/2018, 14:31:00', 'body': 'CVE-2018-12615 has been assigned to this.'}, 'com_2': {'author': 'CamJN', 'datetime': '06\/21\/2018, 14:33:35', 'body': \"Where was this reported? Mitre isn't showing a listing for CVE-2018-12615.\"}, 'com_3': {'author': 'kbabioch', 'datetime': '06\/21\/2018, 14:37:46', 'body': \"It was reported through MITRE and will be displayed in the usual places, once it is synced, which usually takes a couple of hours. I've just added the comment as a reference, in case someone will be looking for it in the future.\"}, 'com_4': {'author': 'kbabioch', 'datetime': '06\/21\/2018, 14:39:14', 'body': 'By the way: While looking at the code we also realized that there might be other issues with the privilege drop, e.g. #2096'}}",
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/agent\/ExecHelper\/ExecHelperMain.cpp': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/phusion\/passenger\/raw\/4e97fdb86d0a0141ec9a052c6e691fcd07bb45c8\/src%2Fagent%2FExecHelper%2FExecHelperMain.cpp', 'patch': '@@ -201,6 +201,9 @@ switchGroup(uid_t uid, const struct passwd *userInfo, gid_t gid) {\\n \\t\\t\\tif (ngroups <= NGROUPS_MAX) {\\n \\t\\t\\t\\tsetgroupsCalled = true;\\n \\t\\t\\t\\tgidset.reset(new gid_t[ngroups]);\\n+\\t\\t\\t\\tfor (int i = 0; i < ngroups; i++) {\\n+\\t\\t\\t\\t\\tgidset[i] = groups[i];\\n+\\t\\t\\t\\t}\\n \\t\\t\\t\\tif (setgroups(ngroups, gidset.get()) == -1) {\\n \\t\\t\\t\\t\\tint e = errno;\\n \\t\\t\\t\\t\\tfprintf(stderr, \"ERROR: setgroups(%d, ...) failed: %s (errno=%d)\\\\n\",'}}",
            "message_norm":"exechelpermain: fix privilege lowering code",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('privilege', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/agent\/ExecHelper\/ExecHelperMain.cpp'])",
            "num_files":1.0
        },
        {
            "index":1765,
            "vuln_id":"GHSA-fq86-3f29-px2c",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082'}",
            "dataset":"osv",
            "summary":"`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-07",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082",
            "commit_sha":"1fb27733f943295d874417630edd3b38b34ce082",
            "patch":"MULTI",
            "chain_ord":"['ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', '1fb27733f943295d874417630edd3b38b34ce082', '240655511cd3e701155f944a972db71b6c0b1bb6']",
            "before_first_fix_commit":"{'1fb27733f943295d874417630edd3b38b34ce082'}",
            "last_fix_commit":"240655511cd3e701155f944a972db71b6c0b1bb6",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/11\/2021, 17:16:14",
            "message":"Remove `CHECK`-fails from `IsSimplifiableReshape`\n\nPiperOrigin-RevId: 409164987\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1fb27733f943295d874417630edd3b38b34ce082\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1689,7 +1689,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!IsReshape(node)) {\\n     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");\\n   }\\n-  CHECK_LE(2, node.input_size());\\n+  if (2 > node.input_size()) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have at most 2 inputs but has \",\\n+                            node.input_size());\\n+  }\\n   const NodeDef* new_shape = node_map_->GetNode(node.input(1));\\n   if (!IsReallyConstant(*new_shape)) {\\n     return errors::Internal(\"Node \", node.name(), \" has shape \",\\n@@ -1707,7 +1711,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!s.ok()) {\\n     return errors::Internal(\"Could not evaluate node \", node.name());\\n   }\\n-  CHECK_EQ(1, outputs.size());\\n+  if (outputs.size() != 1) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have exactly 1 output but has \",\\n+                            outputs.size());\\n+  }\\n \\n   const std::vector<OpInfo::TensorProperties>& props =\\n       properties.GetInputProperties(node.name());'}}",
            "message_norm":"remove `check`-fails from `issimplifiablereshape`\n\npiperorigin-revid: 409164987\nchange-id: i58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('409164987', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":2593,
            "vuln_id":"GHSA-pjc4-3w99-j7v4",
            "cwe_id":"{'CWE-601'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/briancappello\/flask-unchained\/commit\/2bfeedf1bc31df851cab8c66df0c432b10406aad', 'https:\/\/github.com\/briancappello\/flask-unchained\/commit\/71e36b28166f9ffbe0a991f51127f0984f7e6a40'}",
            "dataset":"osv",
            "summary":"Open redirect in Flask-Unchained This affects the package Flask-Unchained before 0.9.0. When using the the _validate_redirect_url function, it is possible to bypass URL validation and redirect a user to an arbitrary URL by providing multiple back slashes such as \\\\\\evil.com\/path. This vulnerability is only exploitable if an alternative WSGI server other than Werkzeug is used, or the default behaviour of Werkzeug is modified using 'autocorrect_location_header=False.",
            "published_date":"2021-06-15",
            "chain_len":2,
            "project":"https:\/\/github.com\/briancappello\/flask-unchained",
            "commit_href":"https:\/\/github.com\/briancappello\/flask-unchained\/commit\/2bfeedf1bc31df851cab8c66df0c432b10406aad",
            "commit_sha":"2bfeedf1bc31df851cab8c66df0c432b10406aad",
            "patch":"MULTI",
            "chain_ord":"['2bfeedf1bc31df851cab8c66df0c432b10406aad', '71e36b28166f9ffbe0a991f51127f0984f7e6a40']",
            "before_first_fix_commit":"{'2bfeedf1bc31df851cab8c66df0c432b10406aad'}",
            "last_fix_commit":"71e36b28166f9ffbe0a991f51127f0984f7e6a40",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/27\/2021, 17:47:52",
            "message":"security fixes",
            "author":"Brian Cappello",
            "comments":null,
            "stats":"{'additions': 27, 'deletions': 8, 'total': 35}",
            "files":"{'flask_unchained\/bundles\/controller\/utils.py': {'additions': 27, 'deletions': 8, 'changes': 35, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/briancappello\/flask-unchained\/raw\/2bfeedf1bc31df851cab8c66df0c432b10406aad\/flask_unchained%2Fbundles%2Fcontroller%2Futils.py', 'patch': '@@ -6,7 +6,7 @@\\n from flask_unchained._compat import is_local_proxy\\n from py_meta_utils import _missing\\n from typing import *\\n-from urllib.parse import urlsplit\\n+from urllib.parse import urlsplit, quote as urlquote\\n from werkzeug.routing import BuildError, UnicodeConverter\\n \\n from .attr_constants import CONTROLLER_ROUTES_ATTR, REMOVE_SUFFIXES_ATTR\\n@@ -183,6 +183,11 @@ def method_name_to_url(method_name) -> str:\\n     return \\'\/\\' + kebab_case(method_name).strip(\\'-\\')\\n \\n \\n+def encode_non_url_reserved_characters(url):\\n+    # safe url reserved characters: https:\/\/datatracker.ietf.org\/doc\/html\/rfc3986#section-2.2\\n+    return urlquote(url, safe=\":\/?#[]@!$&\\'()*+,;=\")\\n+\\n+\\n # modified from flask_security.utils.get_post_action_redirect\\n def redirect(where: Optional[str] = None,\\n              default: Optional[str] = None,\\n@@ -235,7 +240,7 @@ def redirect(where: Optional[str] = None,\\n \\n     for url in urls:\\n         if _validate_redirect_url(url, _external_host):\\n-            return flask_redirect(url)\\n+            return flask_redirect(encode_non_url_reserved_characters(url))\\n     return flask_redirect(\\'\/\\')\\n \\n \\n@@ -289,15 +294,29 @@ def _url_for(endpoint: str, **values) -> Union[str, None]:\\n \\n # modified from flask_security.utils.validate_redirect_url\\n def _validate_redirect_url(url, _external_host=None):\\n-    if url is None or url.strip() == \\'\\':\\n+    url = (url or \\'\\').strip().replace(\\'\\\\\\\\\\', \\'\/\\')\\n+\\n+    # reject empty urls and urls starting with 3+ slashes or a control character\\n+    if not url or url.startswith(\\'\/\/\/\\') or ord(url[0]) <= 32:\\n         return False\\n+\\n     url_next = urlsplit(url)\\n     url_base = urlsplit(request.host_url)\\n-    external_host = _external_host or current_app.config.get(\\'EXTERNAL_SERVER_NAME\\', \\'\\')\\n-    if ((url_next.netloc or url_next.scheme)\\n-            and url_next.netloc != url_base.netloc\\n-            and url_next.netloc not in external_host):\\n-        return False\\n+    if url_next.netloc or url_next.scheme:\\n+        # require both netloc and scheme\\n+        if not url_next.netloc or not url_next.scheme:\\n+            return False\\n+\\n+        # if external host, require same netloc and scheme\\n+        external_host = _external_host or current_app.config.get(\\'EXTERNAL_SERVER_NAME\\', \\'\\')\\n+        if external_host:\\n+            url_external = urlsplit(external_host)\\n+            if url_next.netloc == url_external.netloc and url_next.scheme == url_external.scheme:\\n+                return True\\n+\\n+        # require same netloc and scheme\\n+        if url_next.netloc != url_base.netloc or url_next.scheme != url_base.scheme:\\n+            return False\\n     return True'}}",
            "message_norm":"security fixes",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('fixes', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['flask_unchained\/bundles\/controller\/utils.py'])",
            "num_files":1.0
        },
        {
            "index":1666,
            "vuln_id":"GHSA-f55g-x8qq-2569",
            "cwe_id":"{'CWE-1236'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d9e136ff228e3760fd6dd7572869ac38e9a81809'}",
            "dataset":"osv",
            "summary":"CSV-Safe improperly filters special characters potentially leading to CSV injection CSV-Safe gem < 3.0.0 doesn't filter out special characters which could trigger CSV Injection.",
            "published_date":"2022-05-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/WeblateOrg\/weblate",
            "commit_href":"https:\/\/github.com\/WeblateOrg\/weblate\/commit\/d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "commit_sha":"d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "patch":"SINGLE",
            "chain_ord":"['d9e136ff228e3760fd6dd7572869ac38e9a81809']",
            "before_first_fix_commit":"{'66f55341916de8a9e9125bb4af661373fb5c525b'}",
            "last_fix_commit":"d9e136ff228e3760fd6dd7572869ac38e9a81809",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2017, 15:19:46",
            "message":"Improve filter on CSV formulas\n\nIt seems that Excel is interpreting way more than I originally thought.\n\nFixes https:\/\/hackerone.com\/reports\/223999\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
            "author":"Michal \u010ciha\u0159",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'weblate\/trans\/exporters.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/WeblateOrg\/weblate\/raw\/d9e136ff228e3760fd6dd7572869ac38e9a81809\/weblate%2Ftrans%2Fexporters.py', 'patch': '@@ -279,6 +279,6 @@ def string_filter(self, text):\\n         used at first position of translatable strings, so the harm is not\\n         that big.\\n         \"\"\"\\n-        if text and text[0] in (\\'=\\', \\'+\\', \\'-\\', \\'@\\'):\\n-            return \"\\'\" + text\\n+        if text and text[0] in (\\'=\\', \\'+\\', \\'-\\', \\'@\\', \\'|\\', \\'%\\'):\\n+            return \"\\'{0}\\'\".format(text.replace(\\'|\\', \\'\\\\|\\'))\\n         return text'}}",
            "message_norm":"improve filter on csv formulas\n\nit seems that excel is interpreting way more than i originally thought.\n\nfixes https:\/\/hackerone.com\/reports\/223999\n\nsigned-off-by: michal \u010diha\u0159 <michal@cihar.com>",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('fixes', 'ACTION', ''), ('https:\/\/hackerone.com\/reports\/223999', 'URL', ''), ('michal@cihar.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['weblate\/trans\/exporters.py'])",
            "num_files":1.0
        },
        {
            "index":849,
            "vuln_id":"GHSA-6hjc-m38h-7jhh",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/4e46b792ce973ac0c652fb330055f41aca1981c8', 'https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in SEOmatic plugin A cross-site scripting (XSS) vulnerability in the SEOmatic plugin 3.4.10 for Craft CMS 3 allows remote attackers to inject arbitrary web script via a GET to \/index.php?action=seomatic\/file\/seo-file-link with url parameter containing the base64 encoded URL of a malicious web page \/ file and fileName parameter containing an arbitrary filename with the intended content-type to be rendered in the user's browser as the extension.",
            "published_date":"2022-06-13",
            "chain_len":2,
            "project":"https:\/\/github.com\/nystudio107\/craft-seomatic",
            "commit_href":"https:\/\/github.com\/nystudio107\/craft-seomatic\/commit\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873",
            "commit_sha":"5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873",
            "patch":"MULTI",
            "chain_ord":"['5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873', '4e46b792ce973ac0c652fb330055f41aca1981c8']",
            "before_first_fix_commit":"{'8c0dc48d026fd076cd0a8fae917bdadc8d67cfa6'}",
            "last_fix_commit":"4e46b792ce973ac0c652fb330055f41aca1981c8",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/24\/2021, 01:25:40",
            "message":"Ensure that only files with the extensions listed in `allowedFileExtensions` General Config setting can be used with the SEO File Link controller\n\nSigned-off-by: Andrew Welch <andrew@nystudio107.com>",
            "author":"Andrew Welch",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'src\/controllers\/FileController.php': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nystudio107\/craft-seomatic\/raw\/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873\/src%2Fcontrollers%2FFileController.php', 'patch': '@@ -15,12 +15,15 @@\\n use nystudio107\\\\seomatic\\\\Seomatic;\\n \\n use Craft;\\n+use craft\\\\elements\\\\Asset;\\n use craft\\\\helpers\\\\FileHelper;\\n+use craft\\\\helpers\\\\Assets as AssetsHelper;\\n use craft\\\\web\\\\Controller;\\n \\n use yii\\\\web\\\\NotFoundHttpException;\\n use yii\\\\web\\\\HttpException;\\n use yii\\\\web\\\\Response;\\n+use yii\\\\web\\\\ServerErrorHttpException;\\n \\n \/**\\n  * @author    nystudio107\\n@@ -87,6 +90,15 @@ public function actionSeoFileLink($url, $robots = \\'\\', $canonical = \\'\\', $inline =\\n                 $headerValue = \\'<\\'.$canonical.\\'>; rel=\"canonical\"\\';\\n                 $response->headers->add(\\'Link\\', $headerValue);\\n             }\\n+            \/\/ Ensure the file type is allowed\\n+            \/\/ ref: https:\/\/craftcms.com\/docs\/3.x\/config\/config-settings.html#allowedfileextensions\\n+            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;\\n+            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== \\'\\') {\\n+                $ext = strtolower($ext);\\n+            }\\n+            if ($ext === \\'\\' || !in_array($ext, $allowedExtensions, true)) {\\n+                throw new ServerErrorHttpException(Craft::t(\\'seomatic\\', \\'File format not allowed.\\'));\\n+            }\\n             \/\/ Send the file as a stream, so it can exist anywhere\\n             $response->sendContentAsFile(\\n                 $contents,'}}",
            "message_norm":"ensure that only files with the extensions listed in `allowedfileextensions` general config setting can be used with the seo file link controller\n\nsigned-off-by: andrew welch <andrew@nystudio107.com>",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('andrew@nystudio107.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/controllers\/FileController.php'])",
            "num_files":1.0
        },
        {
            "index":755,
            "vuln_id":"GHSA-65mj-7c86-79jf",
            "cwe_id":"{'CWE-305', 'CWE-287'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/ADOdb\/ADOdb\/commit\/952de6c4273d9b1e91c2b838044f8c2111150c29', 'https:\/\/github.com\/ADOdb\/ADOdb\/commit\/b4d5ce70034c5aac3a1d51d317d93c037a0938d2'}",
            "dataset":"osv",
            "summary":"Authentication Bypass in ADOdb\/ADOdb ### Impact\n\nAn attacker can inject values into a PostgreSQL connection string by providing a parameter surrounded by single quotes.\n\nDepending on how the library is used in the client software, this may allow an attacker to bypass the login process, gain access to the server's IP address, etc.\n\n### Patches\n\nThe vulnerability is fixed in ADOdb versions 5.20.21 (952de6c4273d9b1e91c2b838044f8c2111150c29) and 5.21.4 or later (b4d5ce70034c5aac3a1d51d317d93c037a0938d2).\n\nThe simplest patch is to delete line 29 in `drivers\/adodb-postgres64.inc.php`:\n\n```php\ndiff --git a\/drivers\/adodb-postgres64.inc.php b\/drivers\/adodb-postgres64.inc.php\nindex d04b7f67..729d7141 100644\n--- a\/drivers\/adodb-postgres64.inc.php\n+++ b\/drivers\/adodb-postgres64.inc.php\n@@ -26,7 +26,6 @@ function adodb_addslashes($s)\n {\n    $len = strlen($s);\n    if ($len == 0) return \"''\";\n-   if (strncmp($s,\"'\",1) === 0 && substr($s,$len-1) == \"'\") return $s; \/\/ already quoted\n \n    return \"'\".addslashes($s).\"'\";\n }\n```\n\n### Workarounds\n\nEnsure the parameters passed to *ADOConnection::connect()* or related functions (_nConnect()_, _pConnect()_) are not surrounded by single quotes.\n\n### Credits\n\nThanks to **Emmet Leahy** (@meme-lord) of Sorcery Ltd for reporting this vulnerability, and to the [huntr](https:\/\/huntr.dev\/) team for their support.\n\n### References\n\n- Original issue report https:\/\/huntr.dev\/bounties\/bdf5f216-4499-4225-a737-b28bc6f5801c\/\n- ADOdb reference issue #793 \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Add a note in issue #793\n* Contact the maintainers on [Gitter](https:\/\/gitter.im\/adodb\/adodb)",
            "published_date":"2022-01-27",
            "chain_len":2,
            "project":"https:\/\/github.com\/ADOdb\/ADOdb",
            "commit_href":"https:\/\/github.com\/ADOdb\/ADOdb\/commit\/952de6c4273d9b1e91c2b838044f8c2111150c29",
            "commit_sha":"952de6c4273d9b1e91c2b838044f8c2111150c29",
            "patch":"MULTI",
            "chain_ord":"['952de6c4273d9b1e91c2b838044f8c2111150c29', 'b4d5ce70034c5aac3a1d51d317d93c037a0938d2']",
            "before_first_fix_commit":"{'c5415722049f36c446a4034d15f1d17943f11458'}",
            "last_fix_commit":"b4d5ce70034c5aac3a1d51d317d93c037a0938d2",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/10\/2022, 08:41:32",
            "message":"Prevent auth bypass with PostgreSQL connections\n\nThanks to Emmet Leahy of Sorcery Ltd for reporting this vulnerability\n(CVE-2021-3850).\n\nThis is a minimalistic approach to patch the issue, to reduce the risk\nof causing regressions in the legacy stable branch.\n\nFixes #793",
            "author":"Damien Regad",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 1, 'total': 1}",
            "files":"{'drivers\/adodb-postgres64.inc.php': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ADOdb\/ADOdb\/raw\/952de6c4273d9b1e91c2b838044f8c2111150c29\/drivers%2Fadodb-postgres64.inc.php', 'patch': '@@ -51,7 +51,6 @@ function adodb_addslashes($s)\\n {\\n \\t$len = strlen($s);\\n \\tif ($len == 0) return \"\\'\\'\";\\n-\\tif (strncmp($s,\"\\'\",1) === 0 && substr($s,$len-1) == \"\\'\") return $s; \/\/ already quoted\\n \\n \\treturn \"\\'\".addslashes($s).\"\\'\";\\n }'}}",
            "message_norm":"prevent auth bypass with postgresql connections\n\nthanks to emmet leahy of sorcery ltd for reporting this vulnerability\n(cve-2021-3850).\n\nthis is a minimalistic approach to patch the issue, to reduce the risk\nof causing regressions in the legacy stable branch.\n\nfixes #793",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('auth', 'SECWORD', ''), ('bypass', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('cve-2021-3850', 'VULNID', 'CVE'), ('patch', 'ACTION', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('#793', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['drivers\/adodb-postgres64.inc.php'])",
            "num_files":1.0
        },
        {
            "index":3081,
            "vuln_id":"GHSA-v8v8-6859-qxm4",
            "cwe_id":"{'CWE-94'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/zamotany\/logkitty\/commit\/ef2f673e25c629544dd3de6429999318447dd6bf'}",
            "dataset":"osv",
            "summary":"Arbitrary shell command execution in logkitty Lack of output sanitization allowed an attack to execute arbitrary shell commands via the logkitty npm package before version 0.7.1.",
            "published_date":"2020-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/zamotany\/logkitty",
            "commit_href":"https:\/\/github.com\/zamotany\/logkitty\/commit\/ef2f673e25c629544dd3de6429999318447dd6bf",
            "commit_sha":"ef2f673e25c629544dd3de6429999318447dd6bf",
            "patch":"SINGLE",
            "chain_ord":"['ef2f673e25c629544dd3de6429999318447dd6bf']",
            "before_first_fix_commit":"{'e1e229687472d8c9266d17f2969ff7431a78db86'}",
            "last_fix_commit":"ef2f673e25c629544dd3de6429999318447dd6bf",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/07\/2020, 09:35:09",
            "message":"huntr - Command Injection Fix (#18)\n\nCo-authored-by: jammy <jammy@loves.shib.es>\r\nCo-authored-by: Pawe\u0142 Trys\u0142a <zamotany@users.noreply.github.com>",
            "author":"huntr-helper",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 6, 'total': 15}",
            "files":"{'src\/android\/adb.ts': {'additions': 9, 'deletions': 6, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/zamotany\/logkitty\/raw\/ef2f673e25c629544dd3de6429999318447dd6bf\/src%2Fandroid%2Fadb.ts', 'patch': \"@@ -1,4 +1,4 @@\\n-import { spawn, execSync, ChildProcess } from 'child_process';\\n+import { spawn, execFileSync, ChildProcess } from 'child_process';\\n import path from 'path';\\n import {\\n   CodeError,\\n@@ -25,7 +25,7 @@ export function getAdbPath(customPath?: string): string {\\n \\n export function spawnLogcatProcess(adbPath: string): ChildProcess {\\n   try {\\n-    execSync(`${adbPath} logcat -c`);\\n+    execFileSync(adbPath, ['logcat', '-c']);\\n   } catch (error) {\\n     throw new CodeError(\\n       ERR_ANDROID_CANNOT_CLEAN_LOGCAT_BUFFER,\\n@@ -49,11 +49,14 @@ export function getApplicationPid(\\n   applicationId: string,\\n   adbPath?: string\\n ): number {\\n-  let output: Buffer | undefined;\\n+  let output: Buffer | String | undefined;\\n   try {\\n-    output = execSync(\\n-      `'${getAdbPath(adbPath)}' shell pidof -s ${applicationId}`\\n-    );\\n+    output = execFileSync(getAdbPath(adbPath), [\\n+      'shell',\\n+      'pidof',\\n+      '-s',\\n+      applicationId,\\n+    ]);\\n   } catch (error) {\\n     throw new CodeError(\\n       ERR_ANDROID_CANNOT_GET_APP_PID,\"}}",
            "message_norm":"huntr - command injection fix (#18)\n\nco-authored-by: jammy <jammy@loves.shib.es>\r\nco-authored-by: pawe\u0142 trys\u0142a <zamotany@users.noreply.github.com>",
            "language":"en",
            "entities":"[('command injection', 'SECWORD', ''), ('#18', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/android\/adb.ts'])",
            "num_files":1.0
        },
        {
            "index":336,
            "vuln_id":"GHSA-428x-9xc2-m8mj",
            "cwe_id":"{'CWE-369'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e5b0eec199c2d03de54fd6a7fd9275692218e2bc'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite ### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [the implementation of depthwise convolutions](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/lite\/kernels\/depthwise_conv.cc#L96).\n\nThe parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is stricly positive.\n\n### Patches              \nWe have patched the issue in GitHub commit [e5b0eec199c2d03de54fd6a7fd9275692218e2bc](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e5b0eec199c2d03de54fd6a7fd9275692218e2bc).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e5b0eec199c2d03de54fd6a7fd9275692218e2bc",
            "commit_sha":"e5b0eec199c2d03de54fd6a7fd9275692218e2bc",
            "patch":"SINGLE",
            "chain_ord":"['e5b0eec199c2d03de54fd6a7fd9275692218e2bc']",
            "before_first_fix_commit":"{'ece78f4001dd87f50daab1d1b43f70a51726b8fb'}",
            "last_fix_commit":"e5b0eec199c2d03de54fd6a7fd9275692218e2bc",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/15\/2021, 01:04:19",
            "message":"[lite] Add validation check for dilation height\/width to be positive integers.\n\nPiperOrigin-RevId: 416429178\nChange-Id: If7cdcddca54486434d9b2f06e7e2b401d7c3ee25",
            "author":"Karim Nosir",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/depthwise_conv.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e5b0eec199c2d03de54fd6a7fd9275692218e2bc\/tensorflow%2Flite%2Fkernels%2Fdepthwise_conv.cc', 'patch': '@@ -115,6 +115,8 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n \\n   TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\\n   TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);\\n+  TF_LITE_ENSURE(context, params->dilation_height_factor > 0);\\n+  TF_LITE_ENSURE(context, params->dilation_width_factor > 0);\\n \\n   const TfLiteType data_type = input->type;'}}",
            "message_norm":"[lite] add validation check for dilation height\/width to be positive integers.\n\npiperorigin-revid: 416429178\nchange-id: if7cdcddca54486434d9b2f06e7e2b401d7c3ee25",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('416429178', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/depthwise_conv.cc'])",
            "num_files":1.0
        },
        {
            "index":206,
            "vuln_id":"GHSA-36vm-xw34-x4pj",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `tf.raw_ops.IRFFT` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:\n    \n```python\nimport tensorflow as tf\n\nvalues = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)\n``` \n    \nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n\n### Patches\nWe have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "commit_sha":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "patch":"SINGLE",
            "chain_ord":"['1c56f53be0b722ca657cbc7df461ed676c8642a2']",
            "before_first_fix_commit":"{'8926cbdbbff8b9975d63a41569d51c50a9806d9d'}",
            "last_fix_commit":"1c56f53be0b722ca657cbc7df461ed676c8642a2",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 00:11:46",
            "message":"Fix a check fail in Fast Fourier implementation\n\nPiperOrigin-RevId: 372026629\nChange-Id: Id05c3362aa575271bc3e06b16316c9037085fc11",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/fft_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1c56f53be0b722ca657cbc7df461ed676c8642a2\/tensorflow%2Fcore%2Fkernels%2Ffft_ops.cc', 'patch': '@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\\n limitations under the License.\\n ==============================================================================*\/\\n \\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #define EIGEN_USE_THREADS\\n \\n \/\/ See docs in ..\/ops\/fft_ops.cc.\\n@@ -261,6 +262,9 @@ class FFTCPU : public FFTBase {\\n           i == FFTRank ? fft_shape[i - 1] \/ 2 + 1 : fft_shape[i - 1];\\n       full_fft_shape.AddDim(fft_shape[i - 1]);\\n     }\\n+    OP_REQUIRES(ctx, full_fft_shape.num_elements() > 0,\\n+                errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \",\\n+                                        full_fft_shape.DebugString()));\\n \\n     Tensor temp;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),'}}",
            "message_norm":"fix a check fail in fast fourier implementation\n\npiperorigin-revid: 372026629\nchange-id: id05c3362aa575271bc3e06b16316c9037085fc11",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372026629', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/fft_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1682,
            "vuln_id":"GHSA-f7f4-hqp2-7prc",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
            "published_date":"2020-07-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e",
            "commit_sha":"ff02114eaec090ee51db48435cc32d451662606e",
            "patch":"MULTI",
            "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
            "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
            "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/23\/2018, 21:18:38",
            "message":"Define req.path for socket requests.",
            "author":"Mike McNeil",
            "comments":"{'com_1': {'author': 'mikermcneil', 'datetime': '10\/01\/2018, 15:34:06', 'body': 'Thanks Ali!'}}",
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/ff02114eaec090ee51db48435cc32d451662606e\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -3,6 +3,7 @@\\n  *\/\\n \\n var util = require('util');\\n+var url = require('url');\\n var _ = require('@sailshq\/lodash');\\n var semver = require('semver');\\n var parseSdkMetadata = require('.\/parse-sdk-metadata');\\n@@ -105,6 +106,8 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+\\n       method  : options.eventName,\\n \\n       \/\/ Attached data becomes simulated HTTP body (`req.body`)\"}}",
            "message_norm":"define req.path for socket requests.",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
            "num_files":1.0
        },
        {
            "index":130,
            "vuln_id":"GHSA-2r2c-g63r-vccr",
            "cwe_id":"{'CWE-347'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/digitalbazaar\/forge\/commit\/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1', 'https:\/\/github.com\/digitalbazaar\/forge\/commit\/bb822c02df0b61211836472e29b9790cc541cdb2'}",
            "dataset":"osv",
            "summary":"Improper Verification of Cryptographic Signature in `node-forge` ### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https:\/\/github.com\/digitalbazaar\/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)",
            "published_date":"2022-03-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/digitalbazaar\/forge",
            "commit_href":"https:\/\/github.com\/digitalbazaar\/forge\/commit\/bb822c02df0b61211836472e29b9790cc541cdb2",
            "commit_sha":"bb822c02df0b61211836472e29b9790cc541cdb2",
            "patch":"MULTI",
            "chain_ord":"['3f0b49a0573ef1bb7af7f5673c0cfebf00424df1', 'bb822c02df0b61211836472e29b9790cc541cdb2']",
            "before_first_fix_commit":"{'d4395fec831622837ecfec9e428d4620e208f9a8'}",
            "last_fix_commit":"bb822c02df0b61211836472e29b9790cc541cdb2",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/17\/2022, 22:54:51",
            "message":"Add advisory links.",
            "author":"David I. Lehn",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'CHANGELOG.md': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/digitalbazaar\/forge\/raw\/bb822c02df0b61211836472e29b9790cc541cdb2\/CHANGELOG.md', 'patch': '@@ -15,6 +15,8 @@ Forge ChangeLog\\n     [\"Bleichenbacher\\'s RSA signature forgery based on implementation\\n     error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\\n     by Hal Finney.\\n+  - CVE ID: [CVE-2022-24771](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2022-24771)\\n+  - GHSA ID: [GHSA-cfm4-qjh2-4765](https:\/\/github.com\/digitalbazaar\/forge\/security\/advisories\/GHSA-cfm4-qjh2-4765)\\n - **HIGH**: Failing to check tailing garbage bytes can lead to signature\\n   forgery.\\n   - The code does not check for tailing garbage bytes after decoding a\\n@@ -24,10 +26,14 @@ Forge ChangeLog\\n     signature forgery based on implementation\\n     error\"](https:\/\/mailarchive.ietf.org\/arch\/msg\/openpgp\/5rnE9ZRN1AokBVj3VqblGlP63QE\/)\\n     by Hal Finney.\\n+  - CVE ID: [CVE-2022-24772](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2022-24772)\\n+  - GHSA ID: [GHSA-x4jg-mjrx-434g](https:\/\/github.com\/digitalbazaar\/forge\/security\/advisories\/GHSA-x4jg-mjrx-434g)\\n - **MEDIUM**: Leniency in checking type octet.\\n   - `DigestInfo` is not properly checked for proper ASN.1 structure. This can\\n     lead to successful verification with signatures that contain invalid\\n     structures but a valid digest.\\n+  - CVE ID: [CVE-2022-24773](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2022-24773)\\n+  - GHSA ID: [GHSA-2r2c-g63r-vccr](https:\/\/github.com\/digitalbazaar\/forge\/security\/advisories\/GHSA-2r2c-g63r-vccr)\\n \\n ### Fixed\\n - [asn1] Add fallback to pretty print invalid UTF8 data.'}}",
            "message_norm":"add advisory links.",
            "language":"sv",
            "entities":"[('add', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['CHANGELOG.md'])",
            "num_files":1.0
        },
        {
            "index":2268,
            "vuln_id":"GHSA-jjr8-m8g8-p6wv",
            "cwe_id":"{'CWE-476'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TFLite's `Reshape` operator ### Impact\nThe fix for [CVE-2020-15209](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/9c1dc920d8ffb4893d6c9d27d1f039607b326743\/tensorflow\/lite\/core\/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:\n\n```cc\nif (tensor->data.raw == nullptr && tensor->bytes > 0) {\n  if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\n    \/\/ In general, having a tensor here with no buffer will be an error.\n    \/\/ However, for the reshape operator, the second input tensor is only\n    \/\/ used for the shape, not for the data. Thus, null buffer is ok.\n    continue;\n  } else {\n    \/\/ In all other cases, we need to return an error as otherwise we will\n    \/\/ trigger a null pointer dereference (likely).\n    ReportError(\"Input tensor %d lacks data\", tensor_index);\n    return kTfLiteError;\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "commit_sha":"f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "patch":"SINGLE",
            "chain_ord":"['f8378920345f4f4604202d4ab15ef64b2aceaa16']",
            "before_first_fix_commit":"{'9c1dc920d8ffb4893d6c9d27d1f039607b326743'}",
            "last_fix_commit":"f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:47:59",
            "message":"Prevent a null pointer dereference in TFLite.\n\nPiperOrigin-RevId: 370800353\nChange-Id: Ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 3, 'total': 13}",
            "files":"{'tensorflow\/lite\/core\/subgraph.cc': {'additions': 10, 'deletions': 3, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f8378920345f4f4604202d4ab15ef64b2aceaa16\/tensorflow%2Flite%2Fcore%2Fsubgraph.cc', 'patch': '@@ -1060,10 +1060,17 @@ TfLiteStatus Subgraph::Invoke() {\\n         TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));\\n       }\\n       if (tensor->data.raw == nullptr && tensor->bytes > 0) {\\n-        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\\n+        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1 &&\\n+            tensor->dims->size != 1) {\\n           \/\/ In general, having a tensor here with no buffer will be an error.\\n-          \/\/ However, for the reshape operator, the second input tensor is only\\n-          \/\/ used for the shape, not for the data. Thus, null buffer is ok.\\n+          \/\/ However, for the reshape operator, the second input tensor is\\n+          \/\/ sometimes only used for the shape, not for the data. Thus, null\\n+          \/\/ buffer is ok in this situation.\\n+          \/\/ The situation where null buffer is not ok for reshape operator is\\n+          \/\/ only when there are 2 inputs given to the node and the one\\n+          \/\/ corresponding to the shape (i == 1) is a vector that contains all\\n+          \/\/ dimensions. See `GetOutputShape()` function in\\n+          \/\/ `tensorflow\/lite\/kernels\/reshape.cc`\\n           continue;\\n         } else {\\n           \/\/ In all other cases, we need to return an error as otherwise we will'}}",
            "message_norm":"prevent a null pointer dereference in tflite.\n\npiperorigin-revid: 370800353\nchange-id: ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('370800353', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/core\/subgraph.cc'])",
            "num_files":1.0
        },
        {
            "index":2764,
            "vuln_id":"GHSA-qhx9-7hx7-cp4r",
            "cwe_id":"{'CWE-444'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/bottlepy\/bottle\/commit\/57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b'}",
            "dataset":"osv",
            "summary":"HTTP Request smuggling in bottle The package bottle before 0.12.19 are vulnerable to Web Cache Poisoning by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter.",
            "published_date":"2021-04-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/bottlepy\/bottle",
            "commit_href":"https:\/\/github.com\/bottlepy\/bottle\/commit\/57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b",
            "commit_sha":"57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b",
            "patch":"SINGLE",
            "chain_ord":"['57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b']",
            "before_first_fix_commit":"{'2d6acef676d35611dc58ca9c3bac51789adbcce8'}",
            "last_fix_commit":"57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/11\/2020, 18:24:29",
            "message":"Do not split query strings on `;` anymore.\n\nUsing `;` as a separator instead of `&` was allowed a long time ago,\nbut is now obsolete and actually invalid according to the 2014 W3C\nrecommendations. Even if this change is technically backwards-incompatible,\nno real-world application should depend on broken behavior. If you REALLY\nneed this functionality, monkey-patch the _parse_qsl() function.",
            "author":"Marcel Hellkamp",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'bottle.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bottlepy\/bottle\/raw\/57a2f22e0c1d2b328c4f54bf75741d74f47f1a6b\/bottle.py', 'patch': \"@@ -2585,7 +2585,7 @@ def parse_range_header(header, maxlen=0):\\n \\n def _parse_qsl(qs):\\n     r = []\\n-    for pair in qs.replace(';','&').split('&'):\\n+    for pair in qs.split('&'):\\n         if not pair: continue\\n         nv = pair.split('=', 1)\\n         if len(nv) != 2: nv.append('')\"}}",
            "message_norm":"do not split query strings on `;` anymore.\n\nusing `;` as a separator instead of `&` was allowed a long time ago,\nbut is now obsolete and actually invalid according to the 2014 w3c\nrecommendations. even if this change is technically backwards-incompatible,\nno real-world application should depend on broken behavior. if you really\nneed this functionality, monkey-patch the _parse_qsl() function.",
            "language":"en",
            "entities":"[('monkey', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bottle.py'])",
            "num_files":1.0
        },
        {
            "index":2161,
            "vuln_id":"GHSA-hxf9-7h4c-f5jv",
            "cwe_id":"{'CWE-200'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'https:\/\/github.com\/anymail\/django-anymail\/commit\/c07998304b4a31df4c61deddcb03d3607a04691b'}",
            "dataset":"osv",
            "summary":"Django-Anymail prone to a timing attack webhooks\/base.py in Anymail (aka django-anymail) before 1.2.1 is prone to a timing attack vulnerability on the WEBHOOK_AUTHORIZATION secret, which allows remote attackers to post arbitrary e-mail tracking events.",
            "published_date":"2018-07-12",
            "chain_len":2,
            "project":"https:\/\/github.com\/anymail\/django-anymail",
            "commit_href":"https:\/\/github.com\/anymail\/django-anymail\/commit\/db586ede1fbb41dce21310ea28ae15a1cf1286c5",
            "commit_sha":"db586ede1fbb41dce21310ea28ae15a1cf1286c5",
            "patch":"MULTI",
            "chain_ord":"['db586ede1fbb41dce21310ea28ae15a1cf1286c5', 'c07998304b4a31df4c61deddcb03d3607a04691b']",
            "before_first_fix_commit":"{'7029298b930620b1655dab2548f72d6640a5905e'}",
            "last_fix_commit":"c07998304b4a31df4c61deddcb03d3607a04691b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/02\/2018, 19:41:14",
            "message":"Security: prevent timing attack on WEBHOOK_AUTHORIZATION secret\n\nAnymail's webhook validation was vulnerable to a timing attack.\nAn attacker could have used this to recover your WEBHOOK_AUTHORIZATION\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nThere have not been any reports of attempted exploit in the wild. (The\nvulnerability was discovered through code review.) Attempts would be\nvisible in http logs as a very large number of 400 responses on\nAnymail's webhook urls, or in Python error monitoring as a very large\nnumber of AnymailWebhookValidationFailure exceptions.\n\nIf you are using Anymail's webhooks, you should upgrade to this release.\nIn addition, you may want to rotate to a new WEBHOOK_AUTHORIZATION\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
            "author":"medmunds",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 3, 'total': 15}",
            "files":"{'anymail\/webhooks\/base.py': {'additions': 12, 'deletions': 3, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/anymail\/django-anymail\/raw\/db586ede1fbb41dce21310ea28ae15a1cf1286c5\/anymail%2Fwebhooks%2Fbase.py', 'patch': '@@ -2,6 +2,7 @@\\n \\n import six\\n from django.http import HttpResponse\\n+from django.utils.crypto import constant_time_compare\\n from django.utils.decorators import method_decorator\\n from django.views.decorators.csrf import csrf_exempt\\n from django.views.generic import View\\n@@ -40,8 +41,13 @@ def __init__(self, **kwargs):\\n     def validate_request(self, request):\\n         \"\"\"If configured for webhook basic auth, validate request has correct auth.\"\"\"\\n         if self.basic_auth:\\n-            basic_auth = get_request_basic_auth(request)\\n-            if basic_auth is None or basic_auth not in self.basic_auth:\\n+            request_auth = get_request_basic_auth(request)\\n+            # Use constant_time_compare to avoid timing attack on basic auth. (It\\'s OK that any()\\n+            # can terminate early: we\\'re not trying to protect how many auth strings are allowed,\\n+            # just the contents of each individual auth string.)\\n+            auth_ok = any(constant_time_compare(request_auth, allowed_auth)\\n+                          for allowed_auth in self.basic_auth)\\n+            if not auth_ok:\\n                 # noinspection PyUnresolvedReferences\\n                 raise AnymailWebhookValidationFailure(\\n                     \"Missing or invalid basic auth in Anymail %s webhook\" % self.esp_name)\\n@@ -77,8 +83,11 @@ def validate_request(self, request):\\n         *All* definitions of this method in the class chain (including mixins)\\n         will be called. There is no need to chain to the superclass.\\n         (See self.run_validators and collect_all_methods.)\\n+\\n+        Security note: use django.utils.crypto.constant_time_compare for string\\n+        comparisons, to avoid exposing your validation to a timing attack.\\n         \"\"\"\\n-        # if request.POST[\\'signature\\'] != expected_signature:\\n+        # if not constant_time_compare(request.POST[\\'signature\\'], expected_signature):\\n         #     raise AnymailWebhookValidationFailure(\"...message...\")\\n         # (else just do nothing)\\n         pass'}}",
            "message_norm":"security: prevent timing attack on webhook_authorization secret\n\nanymail's webhook validation was vulnerable to a timing attack.\nan attacker could have used this to recover your webhook_authorization\nshared secret, potentially allowing them to post fabricated or malicious\nemail tracking events to your app.\n\nthere have not been any reports of attempted exploit in the wild. (the\nvulnerability was discovered through code review.) attempts would be\nvisible in http logs as a very large number of 400 responses on\nanymail's webhook urls, or in python error monitoring as a very large\nnumber of anymailwebhookvalidationfailure exceptions.\n\nif you are using anymail's webhooks, you should upgrade to this release.\nin addition, you may want to rotate to a new webhook_authorization\nsecret ([docs](http:\/\/anymail.readthedocs.io\/en\/stable\/tips\/securing_webhooks\/#use-a-shared-authorization-secret)),\nparticularly if your logs indicate attempted exploit.",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('attack', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attacker', 'SECWORD', ''), ('malicious', 'SECWORD', ''), ('exploit', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('error', 'FLAW', ''), ('upgrade', 'ACTION', ''), ('docs](http:\/\/anymail.readthedocs.io', 'URL', ''), ('exploit', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['anymail\/webhooks\/base.py'])",
            "num_files":1.0
        },
        {
            "index":1547,
            "vuln_id":"GHSA-cfx7-2xpc-8w4h",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2c74674348a4708ced58ad6eb1b23354df8ee044'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `BatchToSpaceNd` ### Impact\nThe implementation of the `BatchToSpaceNd` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/b5ed552fe55895aee8bd8b191f744a069957d18d\/tensorflow\/lite\/kernels\/batch_to_space_nd.cc#L81-L82):\n\n```cc\nTF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\noutput_batch_size = output_batch_size \/ block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [2c74674348a4708ced58ad6eb1b23354df8ee044](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2c74674348a4708ced58ad6eb1b23354df8ee044).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2c74674348a4708ced58ad6eb1b23354df8ee044",
            "commit_sha":"2c74674348a4708ced58ad6eb1b23354df8ee044",
            "patch":"SINGLE",
            "chain_ord":"['2c74674348a4708ced58ad6eb1b23354df8ee044']",
            "before_first_fix_commit":"{'b5ed552fe55895aee8bd8b191f744a069957d18d'}",
            "last_fix_commit":"2c74674348a4708ced58ad6eb1b23354df8ee044",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 20:57:37",
            "message":"Prevent division by 0\n\nPiperOrigin-RevId: 370979352\nChange-Id: Ic79191c316d986fc6072ecaebfec9d5f2b924d00",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/batch_to_space_nd.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/2c74674348a4708ced58ad6eb1b23354df8ee044\/tensorflow%2Flite%2Fkernels%2Fbatch_to_space_nd.cc', 'patch': '@@ -78,6 +78,7 @@ TfLiteStatus ResizeOutputTensor(TfLiteContext* context,\\n   int output_batch_size = input_size->data[0];\\n   for (int dim = 0; dim < spatial_dims_num; ++dim) {\\n     \/\/ Number of batch must be multiple of (block_shape[dim]).\\n+    TF_LITE_ENSURE(context, block_shape[dim] != 0);\\n     TF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\\n     output_batch_size = output_batch_size \/ block_shape[dim];\\n     output_size->data[dim + 1] = input_size->data[dim + 1] * block_shape[dim] -'}}",
            "message_norm":"prevent division by 0\n\npiperorigin-revid: 370979352\nchange-id: ic79191c316d986fc6072ecaebfec9d5f2b924d00",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370979352', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/batch_to_space_nd.cc'])",
            "num_files":1.0
        },
        {
            "index":2431,
            "vuln_id":"GHSA-mj63-64x7-57xf",
            "cwe_id":"{'CWE-22'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/49c643bf66620646884ed141c94e5fdd85bcdd2f', 'https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/99bd29e3995c254e2d6f6c2e3454e4271665955a'}",
            "dataset":"osv",
            "summary":"Path traversal in impacket Multiple path traversal vulnerabilities exist in smbserver.py in Impacket before 0.9.23. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ..\/ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing \/etc\/shadow or an SSH authorized key.",
            "published_date":"2021-06-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/SecureAuthCorp\/impacket",
            "commit_href":"https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/49c643bf66620646884ed141c94e5fdd85bcdd2f",
            "commit_sha":"49c643bf66620646884ed141c94e5fdd85bcdd2f",
            "patch":"MULTI",
            "chain_ord":"['99bd29e3995c254e2d6f6c2e3454e4271665955a', '49c643bf66620646884ed141c94e5fdd85bcdd2f']",
            "before_first_fix_commit":"{'6688da5d97592269aae72b3a00dc1ab186c0b33d', '91902eafb68fea932cf2350cab329f15afa554e5'}",
            "last_fix_commit":"49c643bf66620646884ed141c94e5fdd85bcdd2f",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/03\/2021, 15:43:02",
            "message":"Merge pull request #1066 from omriinbar\/master\n\nFix Path Traversal vulnerabilities by checking path prefix against in\u2026",
            "author":"0xdeaddood",
            "comments":null,
            "stats":"{'additions': 2012, 'deletions': 1937, 'total': 3949}",
            "files":"{'impacket\/smbserver.py': {'additions': 2012, 'deletions': 1937, 'changes': 3949, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/SecureAuthCorp\/impacket\/raw\/49c643bf66620646884ed141c94e5fdd85bcdd2f\/impacket%2Fsmbserver.py', 'patch': None}}",
            "message_norm":"merge pull request #1066 from omriinbar\/master\n\nfix path traversal vulnerabilities by checking path prefix against in\u2026",
            "language":"en",
            "entities":"[('#1066', 'ISSUE', ''), ('path traversal', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['impacket\/smbserver.py'])",
            "num_files":1.0
        },
        {
            "index":2935,
            "vuln_id":"GHSA-rfw2-x9f8-2f6m",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/linkedin\/oncall\/commit\/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting LinkedIn Oncall through 1.4.0 allows reflected XSS via \/query because of mishandling of the \"No results found for\" message in the search bar.",
            "published_date":"2021-04-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/linkedin\/oncall",
            "commit_href":"https:\/\/github.com\/linkedin\/oncall\/commit\/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
            "commit_sha":"843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
            "patch":"SINGLE",
            "chain_ord":"['843bc106a1c1b1699e9e52b6b0d01c7efe1d6225']",
            "before_first_fix_commit":"{'605d10ef5d68181b2c516dc857fdc3c8575539cd'}",
            "last_fix_commit":"843bc106a1c1b1699e9e52b6b0d01c7efe1d6225",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/05\/2021, 23:30:43",
            "message":"prevent potential XSS from searchbar results (#342)\n\n* prevent potential XSS from searchbar results\r\n\r\n* use built in handlebars expression escaping\r\n\r\n* use handlebars encodeURIComponent",
            "author":"Diego Cepeda",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'src\/oncall\/ui\/static\/js\/oncall.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/linkedin\/oncall\/raw\/843bc106a1c1b1699e9e52b6b0d01c7efe1d6225\/src%2Foncall%2Fui%2Fstatic%2Fjs%2Foncall.js', 'patch': '@@ -579,11 +579,11 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (teamsCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + resp.query + \\'\/teams\" data-navigo> See all \\' + teamsCt + \\' results for teams \u00bb<\/a><\/div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'\/teams\" data-navigo> See all \\' + teamsCt + \\' results for teams \u00bb<\/a><\/div>\\';\\n                 }\\n               },\\n               empty: function(resp){\\n-                return \\'<h4> No results found for \"\\' + resp.query + \\'\" <\/h4>\\';\\n+                return \\'<h4> No results found for \"\\' + Handlebars.escapeExpression(resp.query) + \\'\" <\/h4>\\';\\n               }\\n             }\\n           },\\n@@ -604,7 +604,7 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (servicesCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + resp.query + \\'\/services\" data-navigo> See all \\' + servicesCt + \\' results for services \u00bb<\/a><\/div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'\/services\" data-navigo> See all \\' + servicesCt + \\' results for services \u00bb<\/a><\/div>\\';\\n                 }\\n               }\\n             }\\n@@ -626,7 +626,7 @@ var oncall = {\\n               },\\n               footer: function(resp){\\n                 if (usersCt > typeaheadLimit) {\\n-                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + resp.query + \\'\/users\" data-navigo> See all \\' + usersCt + \\' results for users \u00bb<\/a><\/div>\\';\\n+                  return \\'<div class=\"tt-see-all\"><a href=\"\/query\/\\' + Handlebars.escapeExpression(encodeURIComponent(resp.query)) + \\'\/users\" data-navigo> See all \\' + usersCt + \\' results for users \u00bb<\/a><\/div>\\';\\n                 }\\n               }\\n             }'}}",
            "message_norm":"prevent potential xss from searchbar results (#342)\n\n* prevent potential xss from searchbar results\r\n\r\n* use built in handlebars expression escaping\r\n\r\n* use handlebars encodeuricomponent",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('#342', 'ISSUE', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('encodeuricomponent', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/oncall\/ui\/static\/js\/oncall.js'])",
            "num_files":1.0
        },
        {
            "index":2219,
            "vuln_id":"GHSA-j8cx-j9j2-f29w",
            "cwe_id":"{'CWE-922'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/b592c86d2b927c0cae5b73b87fb541f25e777aa3'}",
            "dataset":"osv",
            "summary":"Insecure Storage of Sensitive Information in Microweber Microweber prior to version 1.3 does not strip images of EXIF data, exposing information about users' locations, device hardware, and device software.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/b592c86d2b927c0cae5b73b87fb541f25e777aa3",
            "commit_sha":"b592c86d2b927c0cae5b73b87fb541f25e777aa3",
            "patch":"SINGLE",
            "chain_ord":"['b592c86d2b927c0cae5b73b87fb541f25e777aa3']",
            "before_first_fix_commit":"{'bfb86241bbb8cffe8291822091c6411498ac2a3e'}",
            "last_fix_commit":"b592c86d2b927c0cae5b73b87fb541f25e777aa3",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 11:07:12",
            "message":"Update plupload.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'src\/MicroweberPackages\/App\/functions\/plupload.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/b592c86d2b927c0cae5b73b87fb541f25e777aa3\/src%2FMicroweberPackages%2FApp%2Ffunctions%2Fplupload.php', 'patch': \"@@ -522,22 +522,22 @@\\n                 \/\/ This will clear exif data - security issue\\n                 $imgCreatedFromJpeg = @imagecreatefromjpeg($filePath);\\n                 if ($imgCreatedFromJpeg) {\\n-                    imagejpeg($imgCreatedFromJpeg, $filePath,100);\\n+                    imagejpeg($imgCreatedFromJpeg, $filePath,100);  \/\/ this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\\n             } else if ($ext === 'png') {\\n \\n                 $imgCreatedFromPng = @imagecreatefrompng($filePath);\\n                 if ($imgCreatedFromPng) {\\n-                    imagepng($imgCreatedFromPng, $filePath,100);\\n+                    imagepng($imgCreatedFromPng, $filePath,100);  \/\/ this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\\n \\n             } else if ($ext === 'gif') {\\n \\n                 $imgCreatedFromGif = @imagecreatefromgif($filePath);\\n                 if ($imgCreatedFromGif) {\\n-                    imagegif($imgCreatedFromGif, $filePath,100);\\n+                    imagegif($imgCreatedFromGif, $filePath,100); \/\/ this will create fresh new image without exif sensitive data\\n                     $valid = true;\\n                 }\"}}",
            "message_norm":"update plupload.php",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/App\/functions\/plupload.php'])",
            "num_files":1.0
        },
        {
            "index":3350,
            "vuln_id":"GHSA-x2p8-rgfm-qw3v",
            "cwe_id":"{'CWE-863'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/stanfordnlp\/CoreNLP\/commit\/5ee097dbede547023e88f60ed3f430ff09398b87'}",
            "dataset":"osv",
            "summary":"Access Control vulnerability within CoreNLP An Incorrect Access Control vulnerability exists in CoreNLP 4.3.2 via the classifier in NERServlet.java (lines 158 and 159).",
            "published_date":"2022-02-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/stanfordnlp\/CoreNLP",
            "commit_href":"https:\/\/github.com\/stanfordnlp\/CoreNLP\/commit\/5ee097dbede547023e88f60ed3f430ff09398b87",
            "commit_sha":"5ee097dbede547023e88f60ed3f430ff09398b87",
            "patch":"SINGLE",
            "chain_ord":"['5ee097dbede547023e88f60ed3f430ff09398b87']",
            "before_first_fix_commit":"{'85e305bf63b3954e6266801175579a8b81769709'}",
            "last_fix_commit":"5ee097dbede547023e88f60ed3f430ff09398b87",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/26\/2021, 22:07:33",
            "message":"Address issue #1222: verify that classifier and outputFormat are valid values before returning them in headers.  Should sanitize malicious output",
            "author":"John Bauer",
            "comments":null,
            "stats":"{'additions': 15, 'deletions': 7, 'total': 22}",
            "files":"{'src\/edu\/stanford\/nlp\/ie\/ner\/webapp\/NERServlet.java': {'additions': 15, 'deletions': 7, 'changes': 22, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/stanfordnlp\/CoreNLP\/raw\/5ee097dbede547023e88f60ed3f430ff09398b87\/src%2Fedu%2Fstanford%2Fnlp%2Fie%2Fner%2Fwebapp%2FNERServlet.java', 'patch': '@@ -63,9 +63,9 @@ public void init() throws ServletException {\\n       log(classifier);\\n     }\\n \\n-    ners = Generics.newHashMap();\\n+    ners = new HashMap<>();\\n     for (String classifier : classifiers) {\\n-      CRFClassifier model = null;\\n+      CRFClassifier<CoreMap> model = null;\\n       String filename = \"\/WEB-INF\/data\/models\/\" + classifier;\\n       InputStream is = getServletConfig().getServletContext().getResourceAsStream(filename);\\n \\n@@ -154,15 +154,23 @@ private void addResults(HttpServletRequest request,\\n       classifier = this.defaultClassifier;\\n     }\\n \\n-    response.addHeader(\"classifier\", classifier);\\n-    response.addHeader(\"outputFormat\", outputFormat);\\n-    response.addHeader(\"preserveSpacing\", String.valueOf(preserveSpacing));\\n+    CRFClassifier<CoreMap> nerModel = ners.get(classifier);\\n+    \/\/ check that we weren\\'t asked for a classifier that doesn\\'t exist\\n+    if (nerModel == null) {\\n+      out.print(StringEscapeUtils.escapeHtml4(\"Unknown model \" + classifier));\\n+      return;\\n+    }\\n \\n     if (outputFormat.equals(\"highlighted\")) {\\n-      outputHighlighting(out, ners.get(classifier), input);\\n+      outputHighlighting(out, nerModel, input);\\n     } else {\\n-      out.print(StringEscapeUtils.escapeHtml4(ners.get(classifier).classifyToString(input, outputFormat, preserveSpacing)));\\n+      out.print(StringEscapeUtils.escapeHtml4(nerModel.classifyToString(input, outputFormat, preserveSpacing)));\\n     }\\n+\\n+    response.addHeader(\"classifier\", classifier);\\n+    \/\/ a non-existent outputFormat would have just thrown an exception\\n+    response.addHeader(\"outputFormat\", outputFormat);\\n+    response.addHeader(\"preserveSpacing\", String.valueOf(preserveSpacing));\\n   }\\n \\n   private static void outputHighlighting(PrintWriter out,'}}",
            "message_norm":"address issue #1222: verify that classifier and outputformat are valid values before returning them in headers.  should sanitize malicious output",
            "language":"en",
            "entities":"[('issue', 'FLAW', ''), ('#1222', 'ISSUE', ''), ('verify', 'ACTION', ''), ('sanitize', 'SECWORD', ''), ('malicious', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/edu\/stanford\/nlp\/ie\/ner\/webapp\/NERServlet.java'])",
            "num_files":1.0
        },
        {
            "index":1790,
            "vuln_id":"GHSA-fx5c-h9f6-rv7c",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6b5adc0877de832b2a7c189532dbbbc64622eeb6'}",
            "dataset":"osv",
            "summary":"`CHECK`-fails due to attempting to build a reference tensor ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [Grappler optimizer would attempt to build a tensor using a reference `dtype`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L1328-L1402). This would result in a crash due to a `CHECK`-fail [in the `Tensor` constructor](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/tensor.cc#L733-L781) as reference types are not allowed.\n### Patches\nWe have patched the issue in GitHub commit [6b5adc0877de832b2a7c189532dbbbc64622eeb6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6b5adc0877de832b2a7c189532dbbbc64622eeb6).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6b5adc0877de832b2a7c189532dbbbc64622eeb6",
            "commit_sha":"6b5adc0877de832b2a7c189532dbbbc64622eeb6",
            "patch":"SINGLE",
            "chain_ord":"['6b5adc0877de832b2a7c189532dbbbc64622eeb6']",
            "before_first_fix_commit":"{'af2cab9355e8d5bf48c2c7042b3faaf31262ea8c'}",
            "last_fix_commit":"6b5adc0877de832b2a7c189532dbbbc64622eeb6",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2021, 15:28:58",
            "message":"Prevent `CHECK`-fail when building reference tensor.\n\nThe tensor constructor does not allow reference dtypes, as these should not show up explicitly. However, when passed these invalid types instead of building an invalid object the constructor crashes via a `CHECK`-fail. We have a static builder that properly handles this case but is not applicable given current usage.\n\nInstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\nPiperOrigin-RevId: 409662503\nChange-Id: I5892f831fde7f276cd7ab34519cf6b8061c71a59",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6b5adc0877de832b2a7c189532dbbbc64622eeb6\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1363,6 +1363,11 @@ Status ConstantFolding::EvaluateOneFoldable(const NodeDef& node,\\n                           input_tensor.ToString(),\\n                           \" has a dtype of DT_INVALID.\"));\\n     }\\n+    if (IsRefType(raw_val.dtype())) {\\n+      return errors::InvalidArgument(\\n+          \"Not allowed to construct a tensor with reference dtype, got \",\\n+          DataTypeString(raw_val.dtype()));\\n+    }\\n     Tensor* value = new Tensor(raw_val.dtype(), raw_val.tensor_shape());\\n     if (!value->FromProto(raw_val)) {\\n       delete (value);'}}",
            "message_norm":"prevent `check`-fail when building reference tensor.\n\nthe tensor constructor does not allow reference dtypes, as these should not show up explicitly. however, when passed these invalid types instead of building an invalid object the constructor crashes via a `check`-fail. we have a static builder that properly handles this case but is not applicable given current usage.\n\ninstead, before calling the constructor, we can check that the dtype is not a reference type and return an error otherwise, given that the dtype is user controlled so malicious users can trigger denial of service.\n\npiperorigin-revid: 409662503\nchange-id: i5892f831fde7f276cd7ab34519cf6b8061c71a59",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('error', 'FLAW', ''), ('malicious', 'SECWORD', ''), ('denial of service', 'SECWORD', ''), ('409662503', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":1551,
            "vuln_id":"GHSA-cgfm-62j4-v4rf",
            "cwe_id":"{'CWE-125'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/87158f43f05f2720a374f3e6d22a7aaa3a33f750'}",
            "dataset":"osv",
            "summary":"Heap out of bounds access in sparse reduction operations ### Impact\nThe implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nx = tf.SparseTensor(\n      indices=[[773, 773, 773], [773, 773, 773]],\n      values=[1, 1],\n      dense_shape=[337, 337, 337])\ntf.sparse.reduce_sum(x, 1)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1bc56203f21a5a4995311825ffaba7a670d7747\/tensorflow\/core\/kernels\/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [87158f43f05f2720a374f3e6d22a7aaa3a33f750](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/87158f43f05f2720a374f3e6d22a7aaa3a33f750). \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/87158f43f05f2720a374f3e6d22a7aaa3a33f750",
            "commit_sha":"87158f43f05f2720a374f3e6d22a7aaa3a33f750",
            "patch":"SINGLE",
            "chain_ord":"['87158f43f05f2720a374f3e6d22a7aaa3a33f750']",
            "before_first_fix_commit":"{'9c7f40e5f1b5b74156ad4d7bc20b8d69bdedbe29'}",
            "last_fix_commit":"87158f43f05f2720a374f3e6d22a7aaa3a33f750",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 04:11:18",
            "message":"Prevent heap OOB in sparse reduction ops.\n\nPiperOrigin-RevId: 387934524\nChange-Id: I894aa30f1e454f09b471d565b4a325da49322c1a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/sparse_reduce_op.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/87158f43f05f2720a374f3e6d22a7aaa3a33f750\/tensorflow%2Fcore%2Fkernels%2Fsparse_reduce_op.cc', 'patch': '@@ -219,7 +219,20 @@ class SparseReduceOp : public OpKernel {\\n     sp.Reorder<T>(reduction.reorder_dims);\\n     for (const auto &g : sp.group(reduction.group_by_dims)) {\\n       Op::template Run<T>(ctx, reduced_val, g.template values<T>());\\n+      OP_REQUIRES(ctx,\\n+                  output_strides.empty() ||\\n+                  (g.group().size() == output_strides.size()),\\n+                  errors::Internal(\\n+                      \"Expected group size and output_strides size to match\",\\n+                      \", but got \", g.group().size(), \" and \",\\n+                      output_strides.size()));\\n       const int64_t idx = CoordinatesToFlatIndex(g.group(), output_strides);\\n+      OP_REQUIRES(ctx,\\n+                  idx >= 0 && idx < out_flat.size(),\\n+                  errors::Internal(\\n+                      \"Obtained a write index of \", idx,\\n+                      \" which is outside of bounds of [0, \",\\n+                      out_flat.size(), \")\"));\\n       out_flat(idx) = reduced_val();\\n       VLOG(2) << \"coords: \" << absl::StrJoin(g.group(), \",\")\\n               << \"; idx: \" << idx << \"; group \" << Op::Name() << \": \"'}}",
            "message_norm":"prevent heap oob in sparse reduction ops.\n\npiperorigin-revid: 387934524\nchange-id: i894aa30f1e454f09b471d565b4a325da49322c1a",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387934524', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_reduce_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2674,
            "vuln_id":"GHSA-q26w-wjj2-22vv",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/laurent22\/joplin\/commit\/fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in Joplin Joplin allows XSS via a LINK element in a note.",
            "published_date":"2021-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/laurent22\/joplin",
            "commit_href":"https:\/\/github.com\/laurent22\/joplin\/commit\/fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13",
            "commit_sha":"fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13",
            "patch":"SINGLE",
            "chain_ord":"['fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13']",
            "before_first_fix_commit":"{'4a184721e4e4aa00a39d508cdc1a3ae660d3610e'}",
            "last_fix_commit":"fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/29\/2020, 16:19:56",
            "message":"All: Security: Remove \"link\" and \"meta\" tags from notes to prevent XSS",
            "author":"Laurent Cozic",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 5, 'total': 15}",
            "files":"{'ReactNativeClient\/lib\/joplin-renderer\/htmlUtils.js': {'additions': 10, 'deletions': 5, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/laurent22\/joplin\/raw\/fd90a490c0e5cacd17bfe0ffc422be1d2a9b1c13\/ReactNativeClient%2Flib%2Fjoplin-renderer%2FhtmlUtils.js', 'patch': '@@ -87,11 +87,16 @@ class HtmlUtils {\\n \\t\\t\\treturn tagStack[tagStack.length - 1];\\n \\t\\t};\\n \\n-\\t\\t\/\/ The BASE tag allows changing the base URL from which files are loaded, and\\n-\\t\\t\/\/ that can break several plugins, such as Katex (which needs to load CSS\\n-\\t\\t\/\/ files using a relative URL). For that reason it is disabled.\\n-\\t\\t\/\/ More info: https:\/\/github.com\/laurent22\/joplin\/issues\/3021\\n-\\t\\tconst disallowedTags = [\\'script\\', \\'iframe\\', \\'frameset\\', \\'frame\\', \\'object\\', \\'base\\', \\'embed\\'];\\n+\\t\\t\/\/ The BASE tag allows changing the base URL from which files are\\n+\\t\\t\/\/ loaded, and that can break several plugins, such as Katex (which\\n+\\t\\t\/\/ needs to load CSS files using a relative URL). For that reason\\n+\\t\\t\/\/ it is disabled. More info:\\n+\\t\\t\/\/ https:\/\/github.com\/laurent22\/joplin\/issues\/3021\\n+\\t\\t\/\/\\n+\\t\\t\/\/ \"link\" can be used to escape the parser and inject JavaScript.\\n+\\t\\t\/\/ Adding \"meta\" too for the same reason as it shouldn\\'t be used in\\n+\\t\\t\/\/ notes anyway.\\n+\\t\\tconst disallowedTags = [\\'script\\', \\'iframe\\', \\'frameset\\', \\'frame\\', \\'object\\', \\'base\\', \\'embed\\', \\'link\\', \\'meta\\'];\\n \\n \\t\\tconst parser = new htmlparser2.Parser({'}}",
            "message_norm":"all: security: remove \"link\" and \"meta\" tags from notes to prevent xss",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('remove', 'ACTION', ''), ('prevent', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ReactNativeClient\/lib\/joplin-renderer\/htmlUtils.js'])",
            "num_files":1.0
        },
        {
            "index":2376,
            "vuln_id":"GHSA-m7j4-fhg6-xf5v",
            "cwe_id":"{'CWE-1321'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/DataTables\/DataTablesSrc\/commit\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03'}",
            "dataset":"osv",
            "summary":"Prototype pollution in datatables.net All versions of package datatables.net are vulnerable to Prototype Pollution due to an incomplete fix for https:\/\/snyk.io\/vuln\/SNYK-JS-DATATABLESNET-598806.",
            "published_date":"2020-12-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/DataTables\/DataTablesSrc",
            "commit_href":"https:\/\/github.com\/DataTables\/DataTablesSrc\/commit\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "commit_sha":"a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "patch":"SINGLE",
            "chain_ord":"['a51cbe99fd3d02aa5582f97d4af1615d11a1ea03']",
            "before_first_fix_commit":"{'d878f888142e4811f839ea3e099ad1de64d74698'}",
            "last_fix_commit":"a51cbe99fd3d02aa5582f97d4af1615d11a1ea03",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2020, 10:00:54",
            "message":"Fix: Possible prototype pollution if `constructor` were used in a data property name\n\nhttps:\/\/github.com\/418sec\/huntr\/pull\/827",
            "author":"Allan Jardine",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'js\/core\/core.data.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DataTables\/DataTablesSrc\/raw\/a51cbe99fd3d02aa5582f97d4af1615d11a1ea03\/js%2Fcore%2Fcore.data.js', 'patch': \"@@ -357,7 +357,7 @@ function _fnSetObjectDataFn( mSource )\\n \\t\\t\\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\\n \\t\\t\\t{\\n \\t\\t\\t\\t\/\/ Protect against prototype pollution\\n-\\t\\t\\t\\tif (a[i] === '__proto__') {\\n+\\t\\t\\t\\tif (a[i] === '__proto__' || a[i] === 'constructor') {\\n \\t\\t\\t\\t\\tthrow new Error('Cannot set prototype values');\\n \\t\\t\\t\\t}\"}}",
            "message_norm":"fix: possible prototype pollution if `constructor` were used in a data property name\n\nhttps:\/\/github.com\/418sec\/huntr\/pull\/827",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('https:\/\/github.com\/418sec\/huntr\/pull\/827', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['js\/core\/core.data.js'])",
            "num_files":1.0
        },
        {
            "index":320,
            "vuln_id":"GHSA-3wfj-vh84-732p",
            "cwe_id":"{'CWE-78'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/apache\/activemq\/commit\/00921f22ff9a8792d7663ef8fadd4823402a6324'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Special Elements used in an OS Command in Apache ActiveMQ The processControlCommand function in broker\/TransportConnection.java in Apache ActiveMQ before 5.11.0 allows remote attackers to cause a denial of service (shutdown) via a shutdown command.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/activemq",
            "commit_href":"https:\/\/github.com\/apache\/activemq\/commit\/00921f22ff9a8792d7663ef8fadd4823402a6324",
            "commit_sha":"00921f22ff9a8792d7663ef8fadd4823402a6324",
            "patch":"SINGLE",
            "chain_ord":"['00921f22ff9a8792d7663ef8fadd4823402a6324']",
            "before_first_fix_commit":"{'9a6d444e0a492231ad1f4833448b3bbacd839bce'}",
            "last_fix_commit":"00921f22ff9a8792d7663ef8fadd4823402a6324",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/13\/2014, 15:15:29",
            "message":"Remove unused ConnectionControl handling.",
            "author":"Timothy Bish",
            "comments":"{'com_1': {'author': 'tritschler', 'datetime': '11\/10\/2015, 09:33:23', 'body': 'No more shutdown ?'}, 'com_2': {'author': 'Hvnt3r', 'datetime': '07\/18\/2019, 08:46:59', 'body': '> No more shutdown ?\\r\\n\\r\\nyes'}}",
            "stats":"{'additions': 0, 'deletions': 4, 'total': 4}",
            "files":"{'activemq-broker\/src\/main\/java\/org\/apache\/activemq\/broker\/TransportConnection.java': {'additions': 0, 'deletions': 4, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/activemq\/raw\/00921f22ff9a8792d7663ef8fadd4823402a6324\/activemq-broker%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Factivemq%2Fbroker%2FTransportConnection.java', 'patch': '@@ -1534,10 +1534,6 @@ public int getProtocolVersion() {\\n \\n     @Override\\n     public Response processControlCommand(ControlCommand command) throws Exception {\\n-        String control = command.getCommand();\\n-        if (control != null && control.equals(\"shutdown\")) {\\n-            System.exit(0);\\n-        }\\n         return null;\\n     }'}}",
            "message_norm":"remove unused connectioncontrol handling.",
            "language":"en",
            "entities":"[('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['activemq-broker\/src\/main\/java\/org\/apache\/activemq\/broker\/TransportConnection.java'])",
            "num_files":1.0
        },
        {
            "index":1374,
            "vuln_id":"GHSA-9gwx-9cwp-5c2m",
            "cwe_id":"{'CWE-776'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/opencast\/opencast\/commit\/8ae27da5a6f658011a5741b3210e715b0dc6213e', 'https:\/\/github.com\/opencast\/opencast\/commit\/16b0d641713fe31b8518fcf14fc5e4e815d81206'}",
            "dataset":"osv",
            "summary":"Billion laughs attack (XML bomb) ### Impact\n\nOpencast is vulnerable to the [Billion laughs attack](https:\/\/en.wikipedia.org\/wiki\/Billion_laughs_attack)  which allows an attacker to easily execute a (seemingly permanent) denial of service attack, essentially taking down Opencast using a single HTTP request.\n\nConsider an XML file (`createMediaPackage.xml`) like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE lolz [\n <!ENTITY lol \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. \">\n <!ELEMENT title (#PCDATA)>\n <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\n <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\n <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\n <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\n]>\n<mediapackage xmlns=\"http:\/\/mediapackage.opencastproject.org\" id=\"d162d5b2-b54f-4400-a268-ee6565b0e6e7\" start=\"2020-01-23T23:08:37Z\">\n  <title>&lol5;<\/title>\n  <media\/>\n  <metadata\/>\n  <attachments\/>\n  <publications\/>\n<\/mediapackage>\n```\n\nThrowing this at Opencast will cause Opencast to parse the XML and expand the Lorem Ipsum about 100\u00a0000 times, instantly consuming a huge amount of memory:\n\n```sh\ncurl -i -u admin:opencast https:\/\/develop.opencast.org\/ingestdownload\/ingestdownload \\\n  -F 'mediapackage=<createMediaPackage.xml' \\\n  -F sourceFlavors=\"\" \\\n  -F sourceTags=\"\" \\\n  -F deleteExternal=\"\" \\\n  -F tagsAndFlavor='' \\\n  -o out.xml\n```\n\nAdditional notes:\n\n- You can likely use other endpoints accepting XML (this was just the first one I tried) and depending on how much memory you want to consume, you might want to enlarge the lorem ipsum text.\n- Opencast's XML parser does limit the expansion to 100\u00a0000 times, already limiting the attack. Nevertheless, this can already harm the system. \n- To exploit this, users need to have ingest privileges, limiting the group of potential attackers\n\n### Patches\n\nThe problem has been fixed in Opencast 9.6. Older versions of Opencast are not patched sue to the extent of this patch.\n\n### Workarounds\n\nThere is no known workaround for this issue.\n\n### References\n\n- [Billion laughs attack explained](https:\/\/en.wikipedia.org\/wiki\/Billion_laughs_attack)\n- For technical details, take a look at the patch fixing the issue: https:\/\/github.com\/opencast\/opencast\/commit\/_________\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open an issue in [our issue tracker](https:\/\/github.com\/opencast\/opencast\/issues)\n- Email us at [security@opencast.org](mailto:security@opencast.org)",
            "published_date":"2021-06-17",
            "chain_len":2,
            "project":"https:\/\/github.com\/opencast\/opencast",
            "commit_href":"https:\/\/github.com\/opencast\/opencast\/commit\/8ae27da5a6f658011a5741b3210e715b0dc6213e",
            "commit_sha":"8ae27da5a6f658011a5741b3210e715b0dc6213e",
            "patch":"MULTI",
            "chain_ord":"['16b0d641713fe31b8518fcf14fc5e4e815d81206', '8ae27da5a6f658011a5741b3210e715b0dc6213e']",
            "before_first_fix_commit":"{'27f401f37e92564d5a89ef71ab6a5aa6c59ee6fc'}",
            "last_fix_commit":"8ae27da5a6f658011a5741b3210e715b0dc6213e",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/15\/2021, 10:36:31",
            "message":"Clarifies debug options in setenv file (#2735)\n\nCo-authored-by: Lars Kiesow <lkiesow@uos.de>",
            "author":"Maximiliano Lira Del Canto",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'assemblies\/resources\/bin\/setenv': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencast\/opencast\/raw\/8ae27da5a6f658011a5741b3210e715b0dc6213e\/assemblies%2Fresources%2Fbin%2Fsetenv', 'patch': '@@ -31,8 +31,12 @@\\n # export KARAF_BASE        # Karaf base folder\\n # export KARAF_ETC         # Karaf etc  folder\\n # export KARAF_OPTS        # Additional Karaf options\\n-# export KARAF_DEBUG       # Enable debug mode\\n # export KARAF_REDIRECT    # Enable\/set the std\/err redirection when using bin\/start\\n+#\\n+# Debug options\\n+# export KARAF_DEBUG       # Enable debug mode\\n+# export JAVA_DEBUG_PORT   # Set debug port (defaults to 5005)\\n+\\n \\n export EXTRA_JAVA_OPTS=\"${EXTRA_JAVA_OPTS} -Dorg.eclipse.jetty.server.Request.maxFormContentSize=1500000 -Dfile.encoding=UTF-8\"\\n export JAVA_MAX_MEM=\"${JAVA_MAX_MEM:-1G}\"'}}",
            "message_norm":"clarifies debug options in setenv file (#2735)\n\nco-authored-by: lars kiesow <lkiesow@uos.de>",
            "language":"en",
            "entities":"[('#2735', 'ISSUE', ''), ('lkiesow@uos.de', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['assemblies\/resources\/bin\/setenv'])",
            "num_files":1.0
        },
        {
            "index":1210,
            "vuln_id":"GHSA-8gv3-57p6-g35r",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a84358aa12f0b1518e606095ab9cfddbf597c121'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `RaggedTensorToTensor` ### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([10, 10], shape=[2], dtype=tf.int64)\nvalues = tf.constant(0, shape=[1], dtype=tf.int64)\ndefault_value = tf.constant(0, dtype=tf.int64)\nl = [849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nrow = tf.constant(l, shape=[5, 43], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n    shape=shape, values=values, default_value=default_value,\n    row_partition_tensors=rows, row_partition_types=types) \n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/d94227d43aa125ad8b54115c03cece54f6a1977b\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel:\n\n```cc\nfor (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {\n  INDEX_TYPE row_length = row_split(i + 1) - row_split(i);\n  INDEX_TYPE real_length = std::min(output_size, row_length);\n  INDEX_TYPE parent_output_index_current = parent_output_index[i];\n  ...\n}\n```\n\nSince the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when `parent_output_index` is shorter than `row_split`.\n\n### Patches\nWe have patched the issue in GitHub commit [a84358aa12f0b1518e606095ab9cfddbf597c121](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a84358aa12f0b1518e606095ab9cfddbf597c121).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a84358aa12f0b1518e606095ab9cfddbf597c121",
            "commit_sha":"a84358aa12f0b1518e606095ab9cfddbf597c121",
            "patch":"SINGLE",
            "chain_ord":"['a84358aa12f0b1518e606095ab9cfddbf597c121']",
            "before_first_fix_commit":"{'d94227d43aa125ad8b54115c03cece54f6a1977b'}",
            "last_fix_commit":"a84358aa12f0b1518e606095ab9cfddbf597c121",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/04\/2021, 20:45:57",
            "message":"Fix heap-buffer-overflow issue with `tf.raw_ops.RaggedTensorToTensor`.\n\nPiperOrigin-RevId: 371986929\nChange-Id: I79ab962a22c5867f36f7f45b780a1ac881b1dbdd",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/a84358aa12f0b1518e606095ab9cfddbf597c121\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_tensor_op.cc', 'patch': '@@ -313,6 +313,12 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n             output_index_multiplier, output_size, result);\\n         return tensorflow::Status::OK();\\n       case RowPartitionType::ROW_SPLITS:\\n+        if (row_partition_tensor.size() - 1 > parent_output_index.size()) {\\n+          return errors::InvalidArgument(\\n+              \"Row partition size is greater than output size: \",\\n+              row_partition_tensor.size() - 1, \" > \",\\n+              parent_output_index.size());\\n+        }\\n         CalculateOutputIndexRowSplit(\\n             context, row_partition_tensor, parent_output_index,\\n             output_index_multiplier, output_size, result);'}}",
            "message_norm":"fix heap-buffer-overflow issue with `tf.raw_ops.raggedtensortotensor`.\n\npiperorigin-revid: 371986929\nchange-id: i79ab962a22c5867f36f7f45b780a1ac881b1dbdd",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371986929', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1739,
            "vuln_id":"GHSA-fj7c-vg2v-ccrm",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/undertow-io\/undertow\/commit\/c7e84a0b7efced38506d7d1dfea5902366973877'}",
            "dataset":"osv",
            "summary":"Undertow vulnerable to memory exhaustion due to buffer leak Buffer leak on incoming WebSocket PONG message(s) in Undertow before 2.0.40 and 2.2.10 can lead to memory exhaustion and allow a denial of service.",
            "published_date":"2022-07-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/undertow-io\/undertow",
            "commit_href":"https:\/\/github.com\/undertow-io\/undertow\/commit\/c7e84a0b7efced38506d7d1dfea5902366973877",
            "commit_sha":"c7e84a0b7efced38506d7d1dfea5902366973877",
            "patch":"SINGLE",
            "chain_ord":"['c7e84a0b7efced38506d7d1dfea5902366973877']",
            "before_first_fix_commit":"{'87f31ddaac835e3b41db339c1841760a1bac004f'}",
            "last_fix_commit":"c7e84a0b7efced38506d7d1dfea5902366973877",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 21:26:57",
            "message":"[UNDERTOW-1935] - buffer leak on incoming websocket PONG message",
            "author":"Andrey Marinchuk",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'websockets-jsr\/src\/main\/java\/io\/undertow\/websockets\/jsr\/FrameHandler.java': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/undertow-io\/undertow\/raw\/c7e84a0b7efced38506d7d1dfea5902366973877\/websockets-jsr%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fwebsockets%2Fjsr%2FFrameHandler.java', 'patch': '@@ -152,6 +152,8 @@ public void run() {\\n                     }\\n                 }\\n             });\\n+        } else {\\n+            bufferedBinaryMessage.getData().free();\\n         }\\n     }'}}",
            "message_norm":"[undertow-1935] - buffer leak on incoming websocket pong message",
            "language":"en",
            "entities":"[('leak', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['websockets-jsr\/src\/main\/java\/io\/undertow\/websockets\/jsr\/FrameHandler.java'])",
            "num_files":1.0
        },
        {
            "index":1327,
            "vuln_id":"GHSA-9697-98pf-4rw7",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38'}",
            "dataset":"osv",
            "summary":"Heap OOB in `UpperBound` and `LowerBound` ### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.UpperBound`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  out_type=tf.int64)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/searchsorted_op.cc#L85-L104) does not validate the rank of `sorted_input` argument:\n\n```cc\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& sorted_inputs_t = ctx->input(0);\n    \/\/ ...\n    OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\n                Status(error::INVALID_ARGUMENT,\n                       \"Leading dim_size of both tensors must match.\"));\n    \/\/ ...\n    if (output_t->dtype() == DT_INT32) {\n      OP_REQUIRES(ctx,\n                  FastBoundsCheck(sorted_inputs_t.dim_size(1), ...));\n      \/\/ ...\n    }\n```\n\nAs we access the first two dimensions of `sorted_inputs_t` tensor, it must have rank at least 2.\n\nA similar issue occurs in `tf.raw_ops.LowerBound`.\n\n### Patches\nWe have patched the issue in GitHub commit [42459e4273c2e47a3232cc16c4f4fff3b3a35c38](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "commit_sha":"42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "patch":"SINGLE",
            "chain_ord":"['42459e4273c2e47a3232cc16c4f4fff3b3a35c38']",
            "before_first_fix_commit":"{'b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58'}",
            "last_fix_commit":"42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:25:05",
            "message":"Prevent CHECK-fail\/heap OOB in UpperBound and LowerBound\n\nPiperOrigin-RevId: 387738073\nChange-Id: Iee74de95ddad18440d052a75a5a1cb67544f490a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'tensorflow\/core\/kernels\/searchsorted_op.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38\/tensorflow%2Fcore%2Fkernels%2Fsearchsorted_op.cc', 'patch': '@@ -86,6 +86,10 @@ class UpperBoundOp : public OpKernel {\\n     const Tensor& sorted_inputs_t = ctx->input(0);\\n     const Tensor& values_t = ctx->input(1);\\n \\n+    \/\/ inputs must be at least a matrix\\n+    OP_REQUIRES(\\n+        ctx, sorted_inputs_t.shape().dims() >= 2,\\n+        errors::InvalidArgument(\"sorted input argument must be a matrix\"));\\n     \/\/ must have same batch dim_size for both\\n     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\\n                 Status(error::INVALID_ARGUMENT,\\n@@ -127,6 +131,10 @@ class LowerBoundOp : public OpKernel {\\n     const Tensor& sorted_inputs_t = ctx->input(0);\\n     const Tensor& values_t = ctx->input(1);\\n \\n+    \/\/ inputs must be at least a matrix\\n+    OP_REQUIRES(\\n+        ctx, sorted_inputs_t.shape().dims() >= 2,\\n+        errors::InvalidArgument(\"sorted input argument must be a matrix\"));\\n     \/\/ must have same batch dim_size for both\\n     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\\n                 Status(error::INVALID_ARGUMENT,'}}",
            "message_norm":"prevent check-fail\/heap oob in upperbound and lowerbound\n\npiperorigin-revid: 387738073\nchange-id: iee74de95ddad18440d052a75a5a1cb67544f490a",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387738073', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/searchsorted_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3303,
            "vuln_id":"GHSA-wp77-4gmm-7cq8",
            "cwe_id":"{'CWE-476'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986'}",
            "dataset":"osv",
            "summary":"Incorrect validation of `SaveV2` inputs ### Impact\nThe code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SaveV2(\n  prefix=['tensorflow'],\n  tensor_name=['v'],\n  shape_and_slices=[],\n  tensors=[1,2,3])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.\n\nHowever, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.\n      \n### Patches\nWe have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986",
            "commit_sha":"9728c60e136912a12d99ca56e106b7cce7af5986",
            "patch":"SINGLE",
            "chain_ord":"['9728c60e136912a12d99ca56e106b7cce7af5986']",
            "before_first_fix_commit":"{'f2a673bd34f0d64b8e40a551ac78989d16daad09'}",
            "last_fix_commit":"9728c60e136912a12d99ca56e106b7cce7af5986",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 02:05:41",
            "message":"Ensure validation sticks in `save_restore_v2_ops.cc`\n\nPiperOrigin-RevId: 387924206\nChange-Id: I6156842eb3230076b5812c0815f3e66bd5241454",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/save_restore_v2_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/9728c60e136912a12d99ca56e106b7cce7af5986\/tensorflow%2Fcore%2Fkernels%2Fsave_restore_v2_ops.cc', 'patch': '@@ -98,6 +98,7 @@ class SaveV2 : public OpKernel {\\n     const Tensor& shape_and_slices = context->input(2);\\n     ValidateInputs(true \/* is save op *\/, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const int kFixedInputs = 3;  \/\/ Prefix, tensor names, shape_and_slices.\\n     const int num_tensors = static_cast<int>(tensor_names.NumElements());\\n@@ -177,6 +178,7 @@ class RestoreV2 : public OpKernel {\\n                                         \" expected dtypes.\"));\\n     ValidateInputs(false \/* not save op *\/, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const string& prefix_string = prefix.scalar<tstring>()();'}}",
            "message_norm":"ensure validation sticks in `save_restore_v2_ops.cc`\n\npiperorigin-revid: 387924206\nchange-id: i6156842eb3230076b5812c0815f3e66bd5241454",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('387924206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/save_restore_v2_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3426,
            "vuln_id":"GHSA-xg72-6c83-ghh4",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/d35e691e72d358430abc8e99f5ba9eb374423b9f'}",
            "dataset":"osv",
            "summary":"Microweber Stored Cross-site Scripting before v1.2.20 Microwerber prior to version 1.2.20 is vulnerable to stored Cross-site Scripting (XSS).",
            "published_date":"2022-07-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/d35e691e72d358430abc8e99f5ba9eb374423b9f",
            "commit_sha":"d35e691e72d358430abc8e99f5ba9eb374423b9f",
            "patch":"SINGLE",
            "chain_ord":"['d35e691e72d358430abc8e99f5ba9eb374423b9f']",
            "before_first_fix_commit":"{'b39736f1191589e89eb4e54f5f6f05b6349626e3'}",
            "last_fix_commit":"d35e691e72d358430abc8e99f5ba9eb374423b9f",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2022, 13:41:01",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 4, 'total': 16}",
            "files":"{'src\/MicroweberPackages\/App\/functions\/plupload.php': {'additions': 12, 'deletions': 4, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/d35e691e72d358430abc8e99f5ba9eb374423b9f\/src%2FMicroweberPackages%2FApp%2Ffunctions%2Fplupload.php', 'patch': \"@@ -563,17 +563,25 @@\\n                 }\\n \\n             } else if ($ext === 'svg') {\\n-\\n+                $valid = false;\\n                 if (is_file($filePath)) {\\n                     $sanitizer = new \\\\enshrined\\\\svgSanitize\\\\Sanitizer();\\n                     \/\/ Load the dirty svg\\n                     $dirtySVG = file_get_contents($filePath);\\n                      \/\/ Pass it to the sanitizer and get it back clean\\n-                    $cleanSVG = $sanitizer->sanitize($dirtySVG);\\n-                    file_put_contents($filePath, $cleanSVG);\\n+                    try {\\n+                        $cleanSVG = $sanitizer->sanitize($dirtySVG);\\n+                        $valid = true;\\n+                    } catch (\\\\Exception $e) {\\n+                        $valid = false;\\n+                    }\\n+\\n+                    if ($valid) {\\n+                        file_put_contents($filePath, $cleanSVG);\\n+                    }\\n \\n                 }\\n-               $valid = true;\\n+\\n \\n             } else {\\n                 $valid = false;\"}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/App\/functions\/plupload.php'])",
            "num_files":1.0
        },
        {
            "index":187,
            "vuln_id":"GHSA-3374-7h99-xr85",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/forkcms\/forkcms\/commit\/6ec6171206a7507a39695edc8bbd1b97ef1041c6'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in forkcms Fork CMS Content Management System v5.8.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the `Displayname` field when using the `Add`, `Edit` or `Register' functions. This vulnerability allows attackers to execute arbitrary web scripts or HTML.",
            "published_date":"2021-10-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/forkcms\/forkcms",
            "commit_href":"https:\/\/github.com\/forkcms\/forkcms\/commit\/6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "commit_sha":"6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "patch":"SINGLE",
            "chain_ord":"['6ec6171206a7507a39695edc8bbd1b97ef1041c6']",
            "before_first_fix_commit":"{'f439d630c2f46a85b251488cd7073068a66fae5c'}",
            "last_fix_commit":"6ec6171206a7507a39695edc8bbd1b97ef1041c6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2020, 10:44:12",
            "message":"Fix xss in profiles display name",
            "author":"Jelmer Prins",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'src\/Backend\/Modules\/Profiles\/Actions\/Index.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/forkcms\/forkcms\/raw\/6ec6171206a7507a39695edc8bbd1b97ef1041c6\/src%2FBackend%2FModules%2FProfiles%2FActions%2FIndex.php', 'patch': \"@@ -128,6 +128,7 @@ private function loadDataGrid(): void\\n             'registered_on',\\n             true\\n         );\\n+        $this->dgProfiles->setColumnFunction('htmlspecialchars', ['[display_name]'], 'display_name');\\n \\n         \/\/ add the mass action controls\\n         $this->dgProfiles->setMassActionCheckboxes('check', '[id]');\"}}",
            "message_norm":"fix xss in profiles display name",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Backend\/Modules\/Profiles\/Actions\/Index.php'])",
            "num_files":1.0
        },
        {
            "index":2602,
            "vuln_id":"GHSA-pm77-c4q7-3fwj",
            "cwe_id":"{'CWE-295'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/globalpayments\/php-sdk\/pull\/8\/commits\/c86e18f28c5eba0d6ede7d557756d978ea83d3c9'}",
            "dataset":"osv",
            "summary":"Improper Certificate Validation in Heartland & Global Payments PHP SDK Gateways\/Gateway.php in Heartland & Global Payments PHP SDK before 2.0.0 does not enforce SSL certificate validations.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/globalpayments\/php-sdk",
            "commit_href":"https:\/\/github.com\/globalpayments\/php-sdk\/pull\/8\/commits\/c86e18f28c5eba0d6ede7d557756d978ea83d3c9",
            "commit_sha":"c86e18f28c5eba0d6ede7d557756d978ea83d3c9",
            "patch":"SINGLE",
            "chain_ord":"['c86e18f28c5eba0d6ede7d557756d978ea83d3c9']",
            "before_first_fix_commit":"{'b860aca9b7ed1aeb5a13b5ef52120f5d15efd2f7'}",
            "last_fix_commit":"c86e18f28c5eba0d6ede7d557756d978ea83d3c9",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/26\/2019, 23:32:57",
            "message":"Remove unsecure CURLOPT_SSL_VERIFY* options\n\nVerification of peer certificate against trusted CAs and hostname verification should never be turned off otherwise MITM attacks are possible.",
            "author":"oldpec",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 2, 'total': 2}",
            "files":"{'src\/Gateways\/Gateway.php': {'additions': 0, 'deletions': 2, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/globalpayments\/php-sdk\/raw\/c86e18f28c5eba0d6ede7d557756d978ea83d3c9\/src%2FGateways%2FGateway.php', 'patch': '@@ -77,8 +77,6 @@ protected function sendRequest(\\n             curl_setopt($request, CURLOPT_CONNECTTIMEOUT, $this->timeout);\\n             curl_setopt($request, CURLOPT_TIMEOUT, $this->timeout);\\n             curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\\n-            curl_setopt($request, CURLOPT_SSL_VERIFYPEER, false); \/\/true,);\\n-            curl_setopt($request, CURLOPT_SSL_VERIFYHOST, false); \/\/2,);\\n             curl_setopt($request, CURLOPT_CUSTOMREQUEST, strtoupper($verb));\\n             curl_setopt($request, CURLOPT_POSTFIELDS, $data);\\n             curl_setopt($request, CURLOPT_HTTPHEADER, $headers);'}}",
            "message_norm":"remove unsecure curlopt_ssl_verify* options\n\nverification of peer certificate against trusted cas and hostname verification should never be turned off otherwise mitm attacks are possible.",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('unsecure', 'SECWORD', ''), ('certificate', 'SECWORD', ''), ('hostname', 'SECWORD', ''), ('mitm', 'SECWORD', ''), ('attacks', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Gateways\/Gateway.php'])",
            "num_files":1.0
        },
        {
            "index":1229,
            "vuln_id":"GHSA-8m5h-hrqm-pxm2",
            "cwe_id":"{'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/ESAPI\/esapi-java-legacy\/commit\/a0d67b75593878b1b6e39e2acc1773b3effedb2a'}",
            "dataset":"osv",
            "summary":"Path traversal in the OWASP Enterprise Security API ### Impact\nThe default implementation of `Validator.getValidDirectoryPath(String, String, File, boolean)` may incorrectly treat the tested input string as a child of the specified parent directory. This potentially could allow control-flow bypass checks to be defeated if an attack can specify the entire string representing the 'input' path.\n\n### Patches\nThis vulnerability is patched in release 2.3.0.0 of ESAPI. See https:\/\/github.com\/ESAPI\/esapi-java-legacy\/releases\/tag\/esapi-2.3.0.0 for details.\n\n### Workarounds\nYes; in theory, one _could_ write the own implementation of the Validator interface. This would most easily be done by sub-classing a version of the affected `DefaultValidator` class and then overriding the affected `getValidDirectoryPath()` to correct the issue. However, this is not recommended.\n\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email one of the project co-leaders. See email addresses listed on  the [OWASP ESAPI wiki](https:\/\/owasp.org\/www-project-enterprise-security-api\/) page, under \"Leaders\".\n* Send email to one of the two ESAPI related Google Groups listed under [Where to Find More Information on ESAPI](https:\/\/github.com\/ESAPI\/esapi-java-legacy#where-to-find-more-information-on-esapi) on our [README.md](https:\/\/github.com\/ESAPI\/esapi-java-legacy#readme) page.",
            "published_date":"2022-04-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/ESAPI\/esapi-java-legacy",
            "commit_href":"https:\/\/github.com\/ESAPI\/esapi-java-legacy\/commit\/a0d67b75593878b1b6e39e2acc1773b3effedb2a",
            "commit_sha":"a0d67b75593878b1b6e39e2acc1773b3effedb2a",
            "patch":"SINGLE",
            "chain_ord":"['a0d67b75593878b1b6e39e2acc1773b3effedb2a']",
            "before_first_fix_commit":"{'657c2a751c0b8dbd70b8da1bba246d86f7ad3b20'}",
            "last_fix_commit":"a0d67b75593878b1b6e39e2acc1773b3effedb2a",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2022, 04:32:15",
            "message":"Fix for GHSL-2022-008 vulnerability.",
            "author":"kwwall",
            "comments":"{'com_1': {'author': 'JLLeitschuh', 'datetime': '04\/29\/2022, 00:50:01', 'body': 'For back tracking this is related to CVE-2022-23457\\r\\n\\r\\nhttps:\/\/github.com\/ESAPI\/esapi-java-legacy\/security\/advisories\/GHSA-8m5h-hrqm-pxm2'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/main\/java\/org\/owasp\/esapi\/reference\/DefaultValidator.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ESAPI\/esapi-java-legacy\/raw\/a0d67b75593878b1b6e39e2acc1773b3effedb2a\/src%2Fmain%2Fjava%2Forg%2Fowasp%2Fesapi%2Freference%2FDefaultValidator.java', 'patch': '@@ -466,7 +466,7 @@ public String getValidDirectoryPath(String context, String input, File parent, b\\n \\t\\t\\tif ( !parent.isDirectory() ) {\\n \\t\\t\\t\\tthrow new ValidationException( context + \": Invalid directory name\", \"Invalid directory, specified parent is not a directory: context=\" + context + \", input=\" + input + \", parent=\" + parent );\\n \\t\\t\\t}\\n-\\t\\t\\tif ( !dir.getCanonicalPath().startsWith(parent.getCanonicalPath() ) ) {\\n+\\t\\t\\tif ( !dir.getCanonicalFile().toPath().startsWith( parent.getCanonicalFile().toPath() ) ) { \/\/ Fixes GHSL-2022-008\\n \\t\\t\\t\\tthrow new ValidationException( context + \": Invalid directory name\", \"Invalid directory, not inside specified parent: context=\" + context + \", input=\" + input + \", parent=\" + parent );\\n \\t\\t\\t}'}}",
            "message_norm":"fix for ghsl-2022-008 vulnerability.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/org\/owasp\/esapi\/reference\/DefaultValidator.java'])",
            "num_files":1.0
        },
        {
            "index":1686,
            "vuln_id":"GHSA-f7q6-xxph-mfm8",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/3ae96b9d41c117aafa45873ad10077d4b873a3cb'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Pimcore Pimcore prior to version 10.2.10 contains a cross-site scripting vulnerability.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "commit_sha":"3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "patch":"SINGLE",
            "chain_ord":"['3ae96b9d41c117aafa45873ad10077d4b873a3cb']",
            "before_first_fix_commit":"{'fbb2badbb05ec80e4f6f15b52fb2f58cbbf379c4'}",
            "last_fix_commit":"3ae96b9d41c117aafa45873ad10077d4b873a3cb",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/25\/2022, 11:20:25",
            "message":"disallow html entity names on import - follow up to #11217",
            "author":"Divesh",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'models\/DataObject\/ClassDefinition\/Service.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/3ae96b9d41c117aafa45873ad10077d4b873a3cb\/models%2FDataObject%2FClassDefinition%2FService.php', 'patch': \"@@ -315,11 +315,11 @@ public static function generateLayoutTreeFromArray($array, $throwException = fal\\n     {\\n         if (is_array($array) && count($array) > 0) {\\n             if ($name = $array['name'] ?? false) {\\n-                $sanitizedName = htmlentities($name);\\n-                if ($sanitizedName !== $name) {\\n+                if (preg_match('\/<.+?>\/', $name)) {\\n                     throw new \\\\Exception('not a valid name:' . htmlentities($name));\\n                 }\\n             }\\n+\\n             \/** @var LoaderInterface $loader *\/\\n             $loader = \\\\Pimcore::getContainer()->get('pimcore.implementation_loader.object.' . $array['datatype']);\"}}",
            "message_norm":"disallow html entity names on import - follow up to #11217",
            "language":"en",
            "entities":"[('#11217', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['models\/DataObject\/ClassDefinition\/Service.php'])",
            "num_files":1.0
        },
        {
            "index":400,
            "vuln_id":"GHSA-4c4g-crqm-xrxw",
            "cwe_id":"{'CWE-908'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887'}",
            "dataset":"osv",
            "summary":"Use of unitialized value in TFLite ### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/lite\/kernels\/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast<TfLiteAffineQuantization*>(\n            filter->quantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
            "commit_sha":"4a91f2069f7145aab6ba2d8cfe41be8a110c18a5",
            "patch":"MULTI",
            "chain_ord":"['537bc7c723439b9194a358f64d871dd326c18887', '4a91f2069f7145aab6ba2d8cfe41be8a110c18a5', '8933b8a21280696ab119b63263babdb54c298538']",
            "before_first_fix_commit":"{'e35be978351a8578549d30b6f483825d36dc0f8b'}",
            "last_fix_commit":"8933b8a21280696ab119b63263babdb54c298538",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/16\/2021, 16:59:39",
            "message":"Fix a null pointer exception caused by branching on uninitialized data.\n\nThis is due to not checking that the params for the quantization exists. If there is no quantization, we should not access the `.params` field.\n\nPiperOrigin-RevId: 385168337\nChange-Id: I28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 0, 'total': 9}",
            "files":"{'tensorflow\/lite\/kernels\/unidirectional_sequence_lstm.cc': {'additions': 9, 'deletions': 0, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5\/tensorflow%2Flite%2Fkernels%2Funidirectional_sequence_lstm.cc', 'patch': '@@ -62,8 +62,12 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       context,\\n       GetOutputSafe(context, node, lstm::full::kOutputTensor, &output_tensor));\\n \\n+  TF_LITE_ENSURE(context,\\n+                 cell_state->quantization.type != kTfLiteNoQuantization);\\n   auto* cell_state_params =\\n       static_cast<TfLiteAffineQuantization*>(cell_state->quantization.params);\\n+  TF_LITE_ENSURE(context,\\n+                 output_tensor->quantization.type != kTfLiteNoQuantization);\\n   auto* proj_params = static_cast<TfLiteAffineQuantization*>(\\n       output_tensor->quantization.params);\\n   if (cell_clip > 0.0) {\\n@@ -160,6 +164,8 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n       TfLiteTensor* intermediate;\\n       TF_LITE_ENSURE_OK(context,\\n                         GetIntermediatesSafe(context, node, i, &intermediate));\\n+      TF_LITE_ENSURE(context,\\n+                     intermediate->quantization.type != kTfLiteNoQuantization);\\n       auto* params = static_cast<TfLiteAffineQuantization*>(\\n           intermediate->quantization.params);\\n       intermediate_scale.push_back(params->scale->data[0]);\\n@@ -174,6 +180,7 @@ TfLiteStatus PopulateQuantizedLstmParams8x8_16(\\n   \/\/ is ignored.\\n   TfLiteTensor* hidden;\\n   TF_LITE_ENSURE_OK(context, GetIntermediatesSafe(context, node, 4, &hidden));\\n+  TF_LITE_ENSURE(context, hidden->quantization.type != kTfLiteNoQuantization);\\n   auto* hidden_params =\\n       static_cast<TfLiteAffineQuantization*>(hidden->quantization.params);\\n   intermediate_scale.push_back(hidden_params->scale->data[0]);\\n@@ -760,6 +767,8 @@ TfLiteStatus PopulatePrecomputedZPTimesWeightsWithBias(TfLiteContext* context,\\n \\n   const TfLiteTensor* intermediate =\\n       &context->tensors[node->intermediates->data[4]];\\n+  TF_LITE_ENSURE(context,\\n+                 intermediate->quantization.type != kTfLiteNoQuantization);\\n   const auto* params =\\n       static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);\\n   const int32_t hidden_zp = params->zero_point->data[0];'}}",
            "message_norm":"fix a null pointer exception caused by branching on uninitialized data.\n\nthis is due to not checking that the params for the quantization exists. if there is no quantization, we should not access the `.params` field.\n\npiperorigin-revid: 385168337\nchange-id: i28661e4f12ba1c92cfeae23d22a3fb2df2a2c6a4",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('null pointer exception', 'SECWORD', ''), ('uninitialized', 'SECWORD', ''), ('385168337', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/unidirectional_sequence_lstm.cc'])",
            "num_files":1.0
        },
        {
            "index":2779,
            "vuln_id":"GHSA-qm58-cvvm-c5qr",
            "cwe_id":"{'CWE-434'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1'}",
            "dataset":"osv",
            "summary":"elFinder unsafe upload filtering leading to remote code execution ### Impact\n\nBefore elFinder 2.1.58, the upload filter did not disallow the upload of `.phar` files. As several Linux distributions are now shipping Apache configured in a way it will process these files as PHP scripts, attackers could gain arbitrary code execution on the server hosting the PHP connector (even in minimal configuration).\n\n### Patches\n\nThe issue has been addressed with https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1, associating `.phar` files to the right MIME type. Unless explicitly allowed in the configuration, such files cannot be uploaded anymore. This patch is part of the last release of elFinder, 2.1.58.\n\n### Workarounds\n\nIf you can't update to 2.1.58, make sure your connector is not exposed without authentication.\n\n### Important tips\n\nServer-side scripts can often be created as text files. Currently, elFinder has an appropriate MIME type set for file extensions that are generally runnable on a web server.\n\nHowever, the server has various settings. In some cases, the executable file may be judged as \"text\/plain\". Therefore, elFinder installers should understand the extensions that can be executed on the web server where elFinder is installed, and check if there are any missing items in the elFinder settings.\n\nThe elFinder PHP connector has an option \"additionalMimeMap\" that specifies the MIME type for each extension. See [#3295(comment)](https:\/\/github.com\/Studio-42\/elFinder\/issues\/3295#issuecomment-853042139) for more information.\n\n### References\n\n- https:\/\/snyk.io\/vuln\/composer:studio-42%2Felfinder\n- https:\/\/github.com\/Studio-42\/elFinder\/issues\/3295\n- Further technical details will be disclosed on https:\/\/blog.sonarsource.com\/tag\/security after some time.\n\n### For more information\n\nIf you have any questions or comments about this advisory, you can contact:\n- The original reporters, by sending an email to  support [at] snyk.io or vulnerability.research [at] sonarsource.com;\n- The maintainers, by opening an issue on this repository.",
            "published_date":"2021-06-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Studio-42\/elFinder",
            "commit_href":"https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "commit_sha":"75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "patch":"SINGLE",
            "chain_ord":"['75ea92decc16a5daf7f618f85dc621d1b534b5e1']",
            "before_first_fix_commit":"{'6a97635e590b5882bf95f62f8e70e7230bbc625e'}",
            "last_fix_commit":"75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/31\/2021, 11:50:39",
            "message":"[VD:abstract] add `'phar:*' => 'text\/x-php'` into 'staticMineMap'\n\nrel. #3295",
            "author":"nao-pon",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'php\/elFinderVolumeDriver.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Studio-42\/elFinder\/raw\/75ea92decc16a5daf7f618f85dc621d1b534b5e1\/php%2FelFinderVolumeDriver.class.php', 'patch': \"@@ -281,6 +281,7 @@ abstract class elFinderVolumeDriver\\n             'php5:*' => 'text\/x-php',\\n             'php7:*' => 'text\/x-php',\\n             'phtml:*' => 'text\/x-php',\\n+            'phar:*' => 'text\/x-php',\\n             'cgi:*' => 'text\/x-httpd-cgi',\\n             'pl:*' => 'text\/x-perl',\\n             'asp:*' => 'text\/x-asap',\"}}",
            "message_norm":"[vd:abstract] add `'phar:*' => 'text\/x-php'` into 'staticminemap'\n\nrel. #3295",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('#3295', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['php\/elFinderVolumeDriver.class.php'])",
            "num_files":1.0
        },
        {
            "index":3024,
            "vuln_id":"GHSA-rwxp-hwwf-653v",
            "cwe_id":"{'CWE-94', 'CWE-200'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/TryGhost\/express-hbs\/commit\/ff6fad6e357699412d4e916273314e5e7af1500e'}",
            "dataset":"osv",
            "summary":"Insecure template handling in express-hbs express-hbs is an Express handlebars template engine. express-hbs mixes pure template data with engine configuration options through the Express render API. More specifically, the layout parameter may trigger file disclosure vulnerabilities in downstream applications. This potential vulnerability is somewhat restricted in that only files with existing extentions (i.e. file.extension) can be included, files that lack an extension will have .hbs appended to them. For complete details refer to the referenced GHSL-2021-019 report. Notes in documentation have been added to help users of express-hbs avoid this potential information exposure vulnerability.",
            "published_date":"2021-05-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/TryGhost\/express-hbs",
            "commit_href":"https:\/\/github.com\/TryGhost\/express-hbs\/commit\/ff6fad6e357699412d4e916273314e5e7af1500e",
            "commit_sha":"ff6fad6e357699412d4e916273314e5e7af1500e",
            "patch":"SINGLE",
            "chain_ord":"['ff6fad6e357699412d4e916273314e5e7af1500e']",
            "before_first_fix_commit":"{'070fe175e8eb866230981b09926a1883517aca11'}",
            "last_fix_commit":"ff6fad6e357699412d4e916273314e5e7af1500e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2021, 12:09:28",
            "message":"\ud83d\udd12 Added notes on a potential security vulnerability\n\n- Express.js never intended for template options to be passed via res.render\n- If you use res.render to pass a layout, the file will be read from disk\n- If you pass user-submitted data as options to res.render e.g. using req.query, then user-submitted file paths will be read\n- This is only a potential security vulnerability, depending on the implementation\n- Further fixes will be pushed to express-hbs to disable this behaviour by default",
            "author":"Hannah Wolfe",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'README.md': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TryGhost\/express-hbs\/raw\/ff6fad6e357699412d4e916273314e5e7af1500e\/README.md', 'patch': \"@@ -99,6 +99,10 @@ There are three ways to use a layout, listed in precedence order\\n \\n 2.  As an option to render\\n \\n+    ## \u26a0\ufe0f This creates a potential security vulnerability:\\n+\\n+    Do not use this option in conjunction with passing user submitted data to res.render e.g. `res.render('index', req.query)`. This allows users to read arbitrary files from your filesystem!\\n+\\n     ```js\\n     res.render('veggies', {\\n       title: 'My favorite veggies',\"}}",
            "message_norm":"\ud83d\udd12 added notes on a potential security vulnerability\n\n- express.js never intended for template options to be passed via res.render\n- if you use res.render to pass a layout, the file will be read from disk\n- if you pass user-submitted data as options to res.render e.g. using req.query, then user-submitted file paths will be read\n- this is only a potential security vulnerability, depending on the implementation\n- further fixes will be pushed to express-hbs to disable this behaviour by default",
            "language":"en",
            "entities":"[('added', 'ACTION', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', ''), ('security', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['README.md'])",
            "num_files":1.0
        },
        {
            "index":757,
            "vuln_id":"GHSA-662x-fhqg-9p8v",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/faisalman\/ua-parser-js\/commit\/233d3bae22a795153a7e6638887ce159c63e557d'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in ua-parser-js The package ua-parser-js before 0.7.22 are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.",
            "published_date":"2021-05-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/faisalman\/ua-parser-js",
            "commit_href":"https:\/\/github.com\/faisalman\/ua-parser-js\/commit\/233d3bae22a795153a7e6638887ce159c63e557d",
            "commit_sha":"233d3bae22a795153a7e6638887ce159c63e557d",
            "patch":"SINGLE",
            "chain_ord":"['233d3bae22a795153a7e6638887ce159c63e557d']",
            "before_first_fix_commit":"{'5230745280ba8aee775b0f5d2c8a2332f8ef2c4e'}",
            "last_fix_commit":"233d3bae22a795153a7e6638887ce159c63e557d",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/12\/2020, 08:47:15",
            "message":"Fix potential ReDoS vulnerability",
            "author":"Faisal Salman",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/ua-parser.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/faisalman\/ua-parser-js\/raw\/233d3bae22a795153a7e6638887ce159c63e557d\/src%2Fua-parser.js', 'patch': \"@@ -585,9 +585,9 @@\\n             \/android.+(hm[\\\\s\\\\-_]*note?[\\\\s_]*(?:\\\\d\\\\w)?)\\\\s+build\/i,               \/\/ Xiaomi Hongmi\\n             \/android.+(mi[\\\\s\\\\-_]*(?:a\\\\d|one|one[\\\\s_]plus|note lte)?[\\\\s_]*(?:\\\\d?\\\\w?)[\\\\s_]*(?:plus)?)\\\\s+build\/i,    \\n                                                                                 \/\/ Xiaomi Mi\\n-            \/android.+(redmi[\\\\s\\\\-_]*(?:note)?(?:[\\\\s_]*[\\\\w\\\\s]+))\\\\s+build\/i       \/\/ Redmi Phones\\n+            \/android.+(redmi[\\\\s\\\\-_]*(?:note)?(?:[\\\\s_]?[\\\\w\\\\s]+))\\\\s+build\/i       \/\/ Redmi Phones\\n             ], [[MODEL, \/_\/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [\\n-            \/android.+(mi[\\\\s\\\\-_]*(?:pad)(?:[\\\\s_]*[\\\\w\\\\s]+))\\\\s+build\/i            \/\/ Mi Pad tablets\\n+            \/android.+(mi[\\\\s\\\\-_]*(?:pad)(?:[\\\\s_]?[\\\\w\\\\s]+))\\\\s+build\/i            \/\/ Mi Pad tablets\\n             ],[[MODEL, \/_\/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, TABLET]], [\\n             \/android.+;\\\\s(m[1-5]\\\\snote)\\\\sbuild\/i                                \/\/ Meizu\\n             ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\"}}",
            "message_norm":"fix potential redos vulnerability",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/ua-parser.js'])",
            "num_files":1.0
        },
        {
            "index":3012,
            "vuln_id":"GHSA-rv62-4pmj-xw6h",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/jupyter\/notebook\/commit\/08c4c898182edbe97aadef1815cce50448f975cb', 'https:\/\/github.com\/jupyter\/notebook\/commit\/70fe9f0ddb3023162ece21fbb77d5564306b913b', 'https:\/\/github.com\/jupyter\/notebook\/commit\/d65328d4841892b412aef9015165db1eb029a8ed'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects jupyterhub and notebook An Open Redirect vulnerability for all browsers in Jupyter Notebook before 5.7.8 and some browsers (Chrome, Firefox) in JupyterHub before 0.9.6 allows crafted links to the login page, which will redirect to a malicious site after successful login. Servers running on a base_url prefix are not affected.",
            "published_date":"2019-04-02",
            "chain_len":3,
            "project":"https:\/\/github.com\/jupyter\/notebook",
            "commit_href":"https:\/\/github.com\/jupyter\/notebook\/commit\/d65328d4841892b412aef9015165db1eb029a8ed",
            "commit_sha":"d65328d4841892b412aef9015165db1eb029a8ed",
            "patch":"MULTI",
            "chain_ord":"['70fe9f0ddb3023162ece21fbb77d5564306b913b', 'd65328d4841892b412aef9015165db1eb029a8ed', '08c4c898182edbe97aadef1815cce50448f975cb']",
            "before_first_fix_commit":"{'d65328d4841892b412aef9015165db1eb029a8ed'}",
            "last_fix_commit":"08c4c898182edbe97aadef1815cce50448f975cb",
            "chain_ord_pos":2.0,
            "commit_datetime":"03\/27\/2019, 15:19:10",
            "message":"changelog for redirect check\n\nand update cve for 5.7.6",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'docs\/source\/changelog.rst': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyter\/notebook\/raw\/d65328d4841892b412aef9015165db1eb029a8ed\/docs%2Fsource%2Fchangelog.rst', 'patch': '@@ -31,21 +31,21 @@ We strongly recommend that you upgrade pip to version 9+ of pip before upgrading\\n - Further improve compatibility with tornado 6 with improved\\n   checks for when websockets are closed.\\n - Fix regression in 5.7.6 on Windows where .js files could have the wrong mime-type.\\n+- Fix Open Redirect vulnerability where certain malicious URLs could redirect from the Jupyter login page to a malicious site after a successful login. A CVE has been requested for this vulnerability.\\n \\n .. _release-5.7.6:\\n \\n 5.7.6\\n -----\\n \\n-5.7.6 contains a security fix for a cross-site inclusion (XSSI) vulnerability,\\n+5.7.6 contains a security fix for a cross-site inclusion (XSSI) vulnerability (CVE-2019\u20139644),\\n where files at a known URL could be included in a page from an unauthorized website if the user is logged into a Jupyter server.\\n The fix involves setting the ``X-Content-Type-Options: nosniff``\\n header, and applying CSRF checks previously on all non-GET\\n API requests to GET requests to API endpoints and the \/files\/ endpoint.\\n \\n The attacking page is able to access some contents of files when using Internet Explorer through script errors,\\n but this has not been demonstrated with other browsers.\\n-A CVE has been requested for this vulnerability.\\n \\n .. _release-5.7.5:'}}",
            "message_norm":"changelog for redirect check\n\nand update cve for 5.7.6",
            "language":"en",
            "entities":"[('changelog', 'ACTION', ''), ('update', 'ACTION', ''), ('cve', 'SECWORD', ''), ('5.7.6', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['docs\/source\/changelog.rst'])",
            "num_files":1.0
        },
        {
            "index":1817,
            "vuln_id":"GHSA-g4w7-3qr8-5623",
            "cwe_id":"{'CWE-351'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/rusqlite\/rusqlite\/commit\/71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0'}",
            "dataset":"osv",
            "summary":"Improper type usage in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via the repr(Rust) type.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rusqlite\/rusqlite",
            "commit_href":"https:\/\/github.com\/rusqlite\/rusqlite\/commit\/71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0",
            "commit_sha":"71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0",
            "patch":"SINGLE",
            "chain_ord":"['71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0']",
            "before_first_fix_commit":"{'38aea89809ea4154975d853bffe3cb7715fe84d6'}",
            "last_fix_commit":"71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/12\/2020, 18:17:56",
            "message":"Ensure type use for auxdata is repr(C)",
            "author":"Thom Chiovoloni",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 6, 'total': 22}",
            "files":"{'src\/functions.rs': {'additions': 16, 'deletions': 6, 'changes': 22, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rusqlite\/rusqlite\/raw\/71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0\/src%2Ffunctions.rs', 'patch': '@@ -67,6 +67,7 @@\\n \/\/!     Ok(())\\n \/\/! }\\n \/\/! ```\\n+use std::any::TypeId;\\n use std::os::raw::{c_int, c_void};\\n use std::panic::{catch_unwind, RefUnwindSafe, UnwindSafe};\\n use std::ptr;\\n@@ -177,13 +178,16 @@ impl Context<\\'_> {\\n     \/\/\/ https:\/\/www.sqlite.org\/c3ref\/get_auxdata.html for a discussion of\\n     \/\/\/ this feature, or the unit tests of this module for an example.\\n     pub fn set_aux<T: \\'static>(&self, arg: c_int, value: T) {\\n-        let boxed = Box::into_raw(Box::new((std::any::TypeId::of::<T>(), value)));\\n+        let boxed = Box::into_raw(Box::new(AuxData {\\n+            id: TypeId::of::<T>(),\\n+            value,\\n+        }));\\n         unsafe {\\n             ffi::sqlite3_set_auxdata(\\n                 self.ctx,\\n                 arg,\\n                 boxed as *mut c_void,\\n-                Some(free_boxed_value::<(std::any::TypeId, T)>),\\n+                Some(free_boxed_value::<AuxData<T>>),\\n             )\\n         };\\n     }\\n@@ -192,20 +196,26 @@ impl Context<\\'_> {\\n     \/\/\/ via `set_aux`. Returns `Ok(None)` if no data has been associated,\\n     \/\/\/ and .\\n     pub fn get_aux<T: \\'static>(&self, arg: c_int) -> Result<Option<&T>> {\\n-        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *mut (std::any::TypeId, T) };\\n+        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *const AuxData<T> };\\n         if p.is_null() {\\n             Ok(None)\\n         } else {\\n-            let id_val = unsafe { &*p };\\n-            if std::any::TypeId::of::<T>() != id_val.0 {\\n+            let id = unsafe { (*p).id };\\n+            if TypeId::of::<T>() != id {\\n                 Err(Error::GetAuxWrongType)\\n             } else {\\n-                Ok(Some(&id_val.1))\\n+                Ok(Some(unsafe { &(*p).value }))\\n             }\\n         }\\n     }\\n }\\n \\n+#[repr(C)]\\n+struct AuxData<T: \\'static> {\\n+    id: TypeId,\\n+    value: T,\\n+}\\n+\\n \/\/\/ `feature = \"functions\"` Aggregate is the callback interface for user-defined\\n \/\/\/ aggregate function.\\n \/\/\/'}}",
            "message_norm":"ensure type use for auxdata is repr(c)",
            "language":"fr",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/functions.rs'])",
            "num_files":1.0
        },
        {
            "index":1753,
            "vuln_id":"GHSA-fp76-f299-v3hj",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/neorazorx\/facturascripts\/commit\/1d1edb40b40016d7fd2893b410b98569d7facca1'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in FacturaScripts Cross-site Scripting (XSS) - Stored in GitHub repository neorazorx\/facturascripts prior to 2022.06.",
            "published_date":"2022-06-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/neorazorx\/facturascripts",
            "commit_href":"https:\/\/github.com\/neorazorx\/facturascripts\/commit\/1d1edb40b40016d7fd2893b410b98569d7facca1",
            "commit_sha":"1d1edb40b40016d7fd2893b410b98569d7facca1",
            "patch":"SINGLE",
            "chain_ord":"['1d1edb40b40016d7fd2893b410b98569d7facca1']",
            "before_first_fix_commit":"{'73a6595ca85984d65f656c6356fabb23d1936c54'}",
            "last_fix_commit":"1d1edb40b40016d7fd2893b410b98569d7facca1",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2022, 09:55:32",
            "message":"Force to download SVG files to prevent security problems.\n------\nForzamos a descargar los archivos SVG para evitar problemas de seguridad.",
            "author":"Carlos Garcia Gomez",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 10, 'total': 29}",
            "files":"{'Core\/App\/AppRouter.php': {'additions': 19, 'deletions': 10, 'changes': 29, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NeoRazorX\/facturascripts\/raw\/1d1edb40b40016d7fd2893b410b98569d7facca1\/Core%2FApp%2FAppRouter.php', 'patch': '@@ -127,8 +127,7 @@ public function getFile(): bool\\n         $allowedFolders = [\\'node_modules\\', \\'vendor\\', \\'Dinamic\\', \\'Core\\', \\'Plugins\\', \\'MyFiles\/Public\\'];\\n         foreach ($allowedFolders as $folder) {\\n             if (\\'\/\\' . $folder === substr($uri, 0, 1 + strlen($folder))) {\\n-                header(\\'Content-Type: \\' . $this->getMime($filePath));\\n-                readfile($filePath);\\n+                $this->download($filePath);\\n                 return true;\\n             }\\n         }\\n@@ -137,14 +136,7 @@ public function getFile(): bool\\n         $token = filter_input(INPUT_GET, \\'myft\\');\\n         $fixedFilePath = substr(urldecode($uri), 1);\\n         if (\\'\/MyFiles\/\\' === substr($uri, 0, 9) && $token && MyFilesToken::validate($fixedFilePath, $token)) {\\n-            header(\\'Content-Type: \\' . $this->getMime($filePath));\\n-\\n-            \/\/ disable the buffer if enabled\\n-            if (ob_get_contents()) {\\n-                ob_end_flush();\\n-            }\\n-\\n-            readfile($filePath);\\n+            $this->download($filePath);\\n             return true;\\n         }\\n \\n@@ -205,6 +197,23 @@ private function deploy()\\n         }\\n     }\\n \\n+    private function download(string $filePath)\\n+    {\\n+        header(\\'Content-Type: \\' . $this->getMime($filePath));\\n+\\n+        \/\/ disable the buffer if enabled\\n+        if (ob_get_contents()) {\\n+            ob_end_flush();\\n+        }\\n+\\n+        \/\/ force to download svg files to prevent XSS attacks\\n+        if (strpos($filePath, \\'.svg\\') !== false) {\\n+            header(\\'Content-Disposition: attachment; filename=\"\\' . basename($filePath) . \\'\"\\');\\n+        }\\n+\\n+        readfile($filePath);\\n+    }\\n+\\n     \/**\\n      * Return the mime type from given file.\\n      *'}}",
            "message_norm":"force to download svg files to prevent security problems.\n------\nforzamos a descargar los archivos svg para evitar problemas de seguridad.",
            "language":"es",
            "entities":"[('prevent', 'ACTION', ''), ('security', 'SECWORD', ''), ('problems', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Core\/App\/AppRouter.php'])",
            "num_files":1.0
        },
        {
            "index":2325,
            "vuln_id":"GHSA-m242-wc86-8768",
            "cwe_id":"{'CWE-601'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/fedora-infra\/python-fedora\/commit\/b27f38a67573f4c989710c9bfb726dd4c1eeb929'}",
            "dataset":"osv",
            "summary":"Moderate severity vulnerability that affects python-fedora python-fedora 0.8.0 and lower is vulnerable to an open redirect resulting in loss of CSRF protection",
            "published_date":"2018-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/fedora-infra\/python-fedora",
            "commit_href":"https:\/\/github.com\/fedora-infra\/python-fedora\/commit\/b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "commit_sha":"b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "patch":"SINGLE",
            "chain_ord":"['b27f38a67573f4c989710c9bfb726dd4c1eeb929']",
            "before_first_fix_commit":"{'6cf9094e12361a0aa306752e9d9fd8bfaaf51c85'}",
            "last_fix_commit":"b27f38a67573f4c989710c9bfb726dd4c1eeb929",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/11\/2017, 13:52:01",
            "message":"Disable covert redirects and CSRF token leaking\n\nThis disallows the url() function from returning any remote URLs.\nThis prevents covert redirects, and also prevents us from leaking\nCSRF tokens to outside parties.\n\nSigned-off-by: Patrick Uiterwijk <puiterwijk@redhat.com>",
            "author":"Patrick Uiterwijk",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'fedora\/tg\/utils.py': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fedora-infra\/python-fedora\/raw\/b27f38a67573f4c989710c9bfb726dd4c1eeb929\/fedora%2Ftg%2Futils.py', 'patch': \"@@ -81,6 +81,11 @@ def url(tgpath, tgparams=None, **kwargs):\\n     '''\\n     if not isinstance(tgpath, six.string_types):\\n         tgpath = '\/'.join(list(tgpath))\\n+    if not tgpath.startswith('\/'):\\n+        # Do not allow the url() function to be used for external urls.\\n+        # This function is primarily used in redirect() calls, so this prevents\\n+        # covert redirects and thus CSRF leaking.\\n+        tgpath = '\/'\\n     if tgpath.startswith('\/'):\\n         webpath = (config.get('server.webpath') or '').rstrip('\/')\\n         if tg_util.request_available():\"}}",
            "message_norm":"disable covert redirects and csrf token leaking\n\nthis disallows the url() function from returning any remote urls.\nthis prevents covert redirects, and also prevents us from leaking\ncsrf tokens to outside parties.\n\nsigned-off-by: patrick uiterwijk <puiterwijk@redhat.com>",
            "language":"en",
            "entities":"[('csrf', 'SECWORD', ''), ('prevents', 'ACTION', ''), ('prevents', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('puiterwijk@redhat.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['fedora\/tg\/utils.py'])",
            "num_files":1.0
        },
        {
            "index":1218,
            "vuln_id":"GHSA-8hfj-j24r-96c4",
            "cwe_id":"{'CWE-27', 'CWE-22'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/moment\/moment\/commit\/4211bfc8f15746be4019bba557e29a7ba83d54c5'}",
            "dataset":"osv",
            "summary":"Path Traversal: 'dir\/..\/..\/filename' in moment.locale ### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user-provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo](https:\/\/github.com\/moment\/moment)",
            "published_date":"2022-04-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/moment\/moment",
            "commit_href":"https:\/\/github.com\/moment\/moment\/commit\/4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "commit_sha":"4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "patch":"SINGLE",
            "chain_ord":"['4211bfc8f15746be4019bba557e29a7ba83d54c5']",
            "before_first_fix_commit":"{'f2a813afcfd0dd6e63812ea74c46ecc627f6a6a6'}",
            "last_fix_commit":"4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/27\/2022, 11:46:47",
            "message":"[bugfix] Avoid loading path-looking locales from fs",
            "author":"Iskren Chernev",
            "comments":"{'com_1': {'author': 'kuraga', 'datetime': '05\/11\/2022, 17:44:47', 'body': '@ichernev , why two `\\\\\\\\`?'}, 'com_2': {'author': 'omoustaouda', 'datetime': '06\/19\/2022, 12:17:54', 'body': \"@ichernev, thank you for the patch!\\r\\n\\r\\na consideration that come at a first glance: I'd consider allowing only the expected valid characters, \\r\\nlike `it-IT`, `es-ES`, ...\\r\\n\\r\\ninstead of preventing the ones that look not sane,\\r\\nthe reason is that there are uncountable ways to escape chars like `\/` and `\\\\` to look different and possibly not being caught by this regexp.\"}}",
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'src\/lib\/locale\/locales.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moment\/moment\/raw\/4211bfc8f15746be4019bba557e29a7ba83d54c5\/src%2Flib%2Flocale%2Flocales.js', 'patch': \"@@ -62,6 +62,11 @@ function chooseLocale(names) {\\n     return globalLocale;\\n }\\n \\n+function isLocaleNameSane(name) {\\n+    \/\/ Prevent names that look like filesystem paths, i.e contain '\/' or '\\\\'\\n+    return name.match('^[^\/\\\\\\\\\\\\\\\\]*$') != null;\\n+}\\n+\\n function loadLocale(name) {\\n     var oldLocale = null,\\n         aliasedRequire;\\n@@ -70,7 +75,8 @@ function loadLocale(name) {\\n         locales[name] === undefined &&\\n         typeof module !== 'undefined' &&\\n         module &&\\n-        module.exports\\n+        module.exports &&\\n+        isLocaleNameSane(name)\\n     ) {\\n         try {\\n             oldLocale = globalLocale._abbr;\"}}",
            "message_norm":"[bugfix] avoid loading path-looking locales from fs",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/lib\/locale\/locales.js'])",
            "num_files":1.0
        },
        {
            "index":1343,
            "vuln_id":"GHSA-98p5-x8x4-c9m5",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4'}",
            "dataset":"osv",
            "summary":"Integer overflow in TFLite ### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ca6f96b62ad84207fbec580404eaa7dd7403a550\/tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i < lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape->data.i32[i];\n    lookup_size *= dim;\n    output_shape->data[k] = dim;\n  }\n  for (int i = 1; i < embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape->data[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read\/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043",
            "commit_sha":"1de49725a5fc4e48f1a3b902ec3599ee99283043",
            "patch":"MULTI",
            "chain_ord":"['f19be71717c497723ba0cea0379e84f061a75e01', '1de49725a5fc4e48f1a3b902ec3599ee99283043', 'a4e401da71458d253b05e41f28637b65baf64be4']",
            "before_first_fix_commit":"{'f435ae9dee673e83504618b77e1be8cddda73e74'}",
            "last_fix_commit":"a4e401da71458d253b05e41f28637b65baf64be4",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/21\/2021, 16:48:11",
            "message":"[lite] Check for overflow when creating required bytes.\n\nPiperOrigin-RevId: 417629001\nChange-Id: Ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
            "author":"Karim Nosir",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 7, 'total': 23}",
            "files":"{'tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc': {'additions': 16, 'deletions': 7, 'changes': 23, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1de49725a5fc4e48f1a3b902ec3599ee99283043\/tensorflow%2Flite%2Fkernels%2Fembedding_lookup_sparse.cc', 'patch': '@@ -72,6 +72,7 @@ limitations under the License.\\n #include \"tensorflow\/lite\/kernels\/internal\/tensor_ctypes.h\"\\n #include \"tensorflow\/lite\/kernels\/internal\/tensor_utils.h\"\\n #include \"tensorflow\/lite\/kernels\/kernel_util.h\"\\n+#include \"tensorflow\/lite\/util.h\"\\n \\n namespace tflite {\\n namespace ops {\\n@@ -175,25 +176,33 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);\\n   TF_LITE_ENSURE(context, output_shape != nullptr);\\n   int k = 0;\\n-  int embedding_size = 1;\\n-  int lookup_size = 1;\\n+  size_t embedding_size = 1;\\n+  size_t lookup_size = 1;\\n   for (int i = 0; i < lookup_rank - 1; i++, k++) {\\n-    const int dim = dense_shape->data.i32[i];\\n-    lookup_size *= dim;\\n+    const size_t dim = dense_shape->data.i32[i];\\n+    TF_LITE_ENSURE_MSG(\\n+        context,\\n+        MultiplyAndCheckOverflow(lookup_size, dim, &lookup_size) == kTfLiteOk,\\n+        \"Lookup size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   for (int i = 1; i < embedding_rank; i++, k++) {\\n-    const int dim = SizeOfDimension(value, i);\\n-    embedding_size *= dim;\\n+    const size_t dim = SizeOfDimension(value, i);\\n+    TF_LITE_ENSURE_MSG(context,\\n+                       MultiplyAndCheckOverflow(embedding_size, dim,\\n+                                                &embedding_size) == kTfLiteOk,\\n+                       \"Embedding size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_shape));\\n-  const int output_size = lookup_size * embedding_size;\\n+  const size_t output_size = lookup_size * embedding_size;\\n   TfLiteTensorRealloc(output_size * sizeof(float), output);\\n \\n   float* output_ptr = GetTensorData<float>(output);\\n   const float* weights_ptr = GetTensorData<float>(weights);\\n   const float* value_ptr = GetTensorData<float>(value);\\n+  \/\/ Makes sure reallocation was successful.\\n+  TF_LITE_ENSURE(context, output_ptr != nullptr);\\n \\n   std::fill_n(output_ptr, output_size, 0.0f);'}}",
            "message_norm":"[lite] check for overflow when creating required bytes.\n\npiperorigin-revid: 417629001\nchange-id: ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
            "language":"en",
            "entities":"[('overflow', 'SECWORD', ''), ('417629001', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc'])",
            "num_files":1.0
        },
        {
            "index":2167,
            "vuln_id":"GHSA-hxmr-5gv9-6p8v",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/4f86915866703e2fcd1e34b3fc1181ec2ad78e54'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in librenms Cross-site Scripting (XSS) - Stored in Packagist librenms\/librenms prior to 22.2.0.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
            "commit_sha":"4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
            "patch":"SINGLE",
            "chain_ord":"['4f86915866703e2fcd1e34b3fc1181ec2ad78e54']",
            "before_first_fix_commit":"{'3ac0de16b2767d4d4df25b89aa9439daf070b24c'}",
            "last_fix_commit":"4f86915866703e2fcd1e34b3fc1181ec2ad78e54",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/13\/2022, 18:07:37",
            "message":"XSS fix, cont. (#13776)\n\nhttps:\/\/huntr.dev\/bounties\/13951f51-deed-4a3d-8275-52306cc5a87d\/",
            "author":"PipoCanaja",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'includes\/html\/pages\/addhost.inc.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/4f86915866703e2fcd1e34b3fc1181ec2ad78e54\/includes%2Fhtml%2Fpages%2Faddhost.inc.php', 'patch': \"@@ -45,9 +45,9 @@\\n             $snmpver = 'v2c';\\n             $additional = [\\n                 'snmp_disable' => 1,\\n-                'os'           => $_POST['os'] ? $_POST['os_id'] : 'ping',\\n-                'hardware'     => $_POST['hardware'],\\n-                'sysName'      => $_POST['sysName'],\\n+                'os'           => $_POST['os'] ? strip_tags($_POST['os_id']) : 'ping',\\n+                'hardware'     => strip_tags($_POST['hardware']),\\n+                'sysName'      => strip_tags($_POST['sysName']),\\n             ];\\n         } elseif ($_POST['snmpver'] === 'v2c' || $_POST['snmpver'] === 'v1') {\\n             if ($_POST['community']) {\"}}",
            "message_norm":"xss fix, cont. (#13776)\n\nhttps:\/\/huntr.dev\/bounties\/13951f51-deed-4a3d-8275-52306cc5a87d\/",
            "language":"ca",
            "entities":"[('xss', 'SECWORD', ''), ('#13776', 'ISSUE', ''), ('https:\/\/huntr.dev\/bounties\/13951f51-deed-4a3d-8275-52306cc5a87d\/', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/pages\/addhost.inc.php'])",
            "num_files":1.0
        },
        {
            "index":2826,
            "vuln_id":"GHSA-qwpp-fgrj-h78q",
            "cwe_id":"{'CWE-209', 'CWE-200'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/shopware\/shopware\/commit\/dcb24eb5ec757c991b5a4e2ddced379e5820744d'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information to an Unauthorized Actor Shopware is an open source eCommerce platform. Versions prior to 5.6.10 are vulnerable to system information leakage in error handling. Users are recommend to update to version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview.",
            "published_date":"2021-09-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/shopware\/shopware",
            "commit_href":"https:\/\/github.com\/shopware\/shopware\/commit\/dcb24eb5ec757c991b5a4e2ddced379e5820744d",
            "commit_sha":"dcb24eb5ec757c991b5a4e2ddced379e5820744d",
            "patch":"SINGLE",
            "chain_ord":"['dcb24eb5ec757c991b5a4e2ddced379e5820744d']",
            "before_first_fix_commit":"{'a0d02194b3c255bc28661daa090656aecacf8608'}",
            "last_fix_commit":"dcb24eb5ec757c991b5a4e2ddced379e5820744d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2021, 13:25:37",
            "message":"SW-26001 - Adjust error controller",
            "author":"Philip Gatzka",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 4, 'total': 5}",
            "files":"{'engine\/Shopware\/Controllers\/Frontend\/Error.php': {'additions': 1, 'deletions': 4, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/shopware\/shopware\/raw\/dcb24eb5ec757c991b5a4e2ddced379e5820744d\/engine%2FShopware%2FControllers%2FFrontend%2FError.php', 'patch': \"@@ -50,10 +50,7 @@ public function preDispatch()\\n             $this->enableBackendTheme();\\n         }\\n \\n-        if (strpos($this->Request()->getHeader('Content-Type'), 'application\/json') === 0) {\\n-            $this->Front()->Plugins()->Json()->setRenderer();\\n-            $this->View()->assign('success', false);\\n-        } elseif ($this->Request()->isXmlHttpRequest() || !Shopware()->Container()->initialized('db')) {\\n+        if ($this->Request()->isXmlHttpRequest() || !Shopware()->Container()->initialized('db')) {\\n             $this->View()->loadTemplate($templateModule . '\/error\/exception.tpl');\\n         } elseif (isset($_ENV['SHELL']) || PHP_SAPI === 'cli') {\\n             $this->View()->loadTemplate($templateModule . '\/error\/cli.tpl');\"}}",
            "message_norm":"sw-26001 - adjust error controller",
            "language":"fr",
            "entities":"[('error', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['engine\/Shopware\/Controllers\/Frontend\/Error.php'])",
            "num_files":1.0
        },
        {
            "index":3265,
            "vuln_id":"GHSA-wcv5-vrvr-3rx2",
            "cwe_id":"{'CWE-190'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in TensorFlow ### Impact\nThe Grappler component of TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) in [constant folding](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L963-L1035):\n\n```cc\n  for (const auto& output_prop : output_props) {\n    const PartialTensorShape output_shape(output_prop.shape());\n    \/\/ ...\n  }\n```\n  \nThe `output_prop` tensor has a shape that is controlled by user input and this can result in triggering one of the `CHECK`s in the `PartialTensorShape` constructor. This is an instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197).\n\n### Patches\nWe have patched the issue in GitHub commit [be7b286d40bc68cb0b56f702186cc4837d508058](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058",
            "commit_sha":"be7b286d40bc68cb0b56f702186cc4837d508058",
            "patch":"SINGLE",
            "chain_ord":"['be7b286d40bc68cb0b56f702186cc4837d508058']",
            "before_first_fix_commit":"{'6381a7b127bd276a3817a93e5423b15a06c33419'}",
            "last_fix_commit":"be7b286d40bc68cb0b56f702186cc4837d508058",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/15\/2021, 21:55:14",
            "message":"Fix `CHECK`-failure caused by constant folding code.\n\nWe're losing a `const` qualifier here, but unless we get to use more `StatusOr` objects, this is the best alternative.\n\nPiperOrigin-RevId: 410072241\nChange-Id: I69535c91490f0d23facb9587d2ff59db0782cda6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/be7b286d40bc68cb0b56f702186cc4837d508058\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1017,7 +1017,12 @@ bool ConstantFolding::IsFoldableUncached(\\n       }\\n     }\\n     for (const auto& output_prop : output_props) {\\n-      const PartialTensorShape output_shape(output_prop.shape());\\n+      PartialTensorShape output_shape;\\n+      if (!PartialTensorShape::BuildPartialTensorShape(output_prop.shape(),\\n+                                                       &output_shape)\\n+               .ok()) {\\n+        return false;\\n+      }\\n       if (output_shape.IsFullyDefined()) {\\n         const int64_t num_bytes =\\n             output_shape.num_elements() * DataTypeSize(output_prop.dtype());'}}",
            "message_norm":"fix `check`-failure caused by constant folding code.\n\nwe're losing a `const` qualifier here, but unless we get to use more `statusor` objects, this is the best alternative.\n\npiperorigin-revid: 410072241\nchange-id: i69535c91490f0d23facb9587d2ff59db0782cda6",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('410072241', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":98,
            "vuln_id":"GHSA-2hjr-fg6c-v2h6",
            "cwe_id":"{'CWE-200'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/HubSpot\/jinjava\/pull\/435\/commits\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165', 'https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b'}",
            "dataset":"osv",
            "summary":"Unauthorized access to Class instance in Jinjava Jinjava before 2.5.4 allow access to arbitrary classes by calling Java methods on objects passed into a Jinjava context. This could allow for abuse of the application class loader, including Arbitrary File Disclosure.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/HubSpot\/jinjava",
            "commit_href":"https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b",
            "commit_sha":"5dfa5b87318744a4d020b66d5f7747acc36b213b",
            "patch":"MULTI",
            "chain_ord":"['5dfa5b87318744a4d020b66d5f7747acc36b213b', '1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165']",
            "before_first_fix_commit":"{'bfc6ecde3a98db02a00c87a3b905a0af907188f0'}",
            "last_fix_commit":"1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2020, 17:49:08",
            "message":"add method to blacklist",
            "author":"Matt Coley",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/HubSpot\/jinjava\/raw\/5dfa5b87318744a4d020b66d5f7747acc36b213b\/src%2Fmain%2Fjava%2Fcom%2Fhubspot%2Fjinjava%2Fel%2Fext%2FJinjavaBeanELResolver.java', 'patch': '@@ -2,6 +2,7 @@\\n \\n import com.google.common.base.CaseFormat;\\n import com.google.common.collect.ImmutableSet;\\n+import java.lang.reflect.Method;\\n import java.util.Set;\\n import javax.el.BeanELResolver;\\n import javax.el.ELContext;\\n@@ -111,7 +112,12 @@ private String transformPropertyName(Object property) {\\n   }\\n \\n   private void checkRestrictedClass(Object o, Object method) {\\n-    if (o instanceof Class || o instanceof ClassLoader || o instanceof Thread) {\\n+    if (\\n+      o instanceof Class ||\\n+      o instanceof ClassLoader ||\\n+      o instanceof Thread ||\\n+      o instanceof Method\\n+    ) {\\n       throw new MethodNotFoundException(\\n         \"Cannot find method \\'\" + method + \"\\' in \" + o.getClass()\\n       );'}}",
            "message_norm":"add method to blacklist",
            "language":"cy",
            "entities":"[('add', 'ACTION', ''), ('blacklist', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java'])",
            "num_files":1.0
        },
        {
            "index":794,
            "vuln_id":"GHSA-694p-xrhg-x3wm",
            "cwe_id":"{'CWE-444'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add'}",
            "dataset":"osv",
            "summary":"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request Header Injection') ### Vulnerability\n\nMicronaut's HTTP client is vulnerable to \"HTTP Request Header Injection\" due to not validating request headers passed to the client.\n\nExample of vulnerable code:\n\n```java\n@Controller(\"\/hello\")\npublic class HelloController {\n\n    @Inject\n    @Client(\"\/\")\n    RxHttpClient client;\n\n    @Get(\"\/external-exploit\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String externalExploit(@QueryValue(\"header-value\") String headerValue) {\n        return client.toBlocking().retrieve(\n            HttpRequest.GET(\"\/hello\")\n                .header(\"Test\", headerValue)\n        );\n    }\n}\n```\n\nIn the above case a query value received from a user is passed as a header value to the client. Since the client doesn't validate the header value the request headers and body have the potential to be manipulated.\n\nFor example, a user that supplies the following payload, can force the client to make multiple attacker-controlled HTTP requests.\n\n```java\nList<String> headerData = List.of(\n    \"Connection: Keep-Alive\", \/\/ This keeps the connection open so another request can be stuffed in.\n    \"\",\n    \"\",\n    \"POST \/hello\/super-secret HTTP\/1.1\",\n    \"Host: 127.0.0.1\",\n    \"Content-Length: 31\",\n    \"\",\n    \"{\\\"new\\\":\\\"json\\\",\\\"content\\\":\\\"here\\\"}\",\n    \"\",\n    \"\"\n);\nString headerValue = \"H\\r\\n\" + String.join(\"\\r\\n\", headerData);;\nURI theURI =\n    UriBuilder\n        .of(\"\/hello\/external-exploit\")\n        .queryParam(\"header-value\", headerValue) \/\/ Automatically URL encodes data\n        .build();\nHttpRequest<String> request = HttpRequest.GET(theURI);\nString body = client.toBlocking().retrieve(request);\n```\n\nNote that using `@HeaderValue` instead of `@QueryValue` is not vulnerable since Micronaut's HTTP server does validate the headers passed to the server, so the exploit can only be triggered by using user data that is not an HTTP header (query values, form data etc.).\n\n### Impact\n\nThe attacker is able to control the entirety of the HTTP body for their custom requests.\nAs such, this vulnerability enables attackers to perform a variant of [Server Side Request Forgery](https:\/\/cwe.mitre.org\/data\/definitions\/918.html).\n\n### Patches\n\nThe problem has been patched in the `micronaut-http-client` versions 1.2.11 and 1.3.2 and above.\n\n### Workarounds\n\nDo not pass user data directly received from HTTP request parameters as headers in the HTTP client.\n\n### References\n\nFix commits\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [micronaut-core](https:\/\/github.com\/micronaut-projects\/micronaut-core)\n* Email us at [info@micronaut.io](mailto:info@micronaut.io)\n\n### Credit\n\nOriginally reported by @JLLeitschuh",
            "published_date":"2020-03-30",
            "chain_len":3,
            "project":"https:\/\/github.com\/micronaut-projects\/micronaut-core",
            "commit_href":"https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add",
            "commit_sha":"bc855e439c4a5ced3d83195bb59d0679cbd95add",
            "patch":"MULTI",
            "chain_ord":"['6deb60b75517f80c57b42d935f07955c773b766d', 'bc855e439c4a5ced3d83195bb59d0679cbd95add', '9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1']",
            "before_first_fix_commit":"{'a2392f4289f7777c4a310c3ae3bb4bc0ce5a65c2'}",
            "last_fix_commit":"9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "chain_ord_pos":2.0,
            "commit_datetime":"02\/20\/2020, 19:20:37",
            "message":"Add test for client header validation",
            "author":"jameskleeh",
            "comments":"{'com_1': {'author': 'JLLeitschuh', 'datetime': '03\/09\/2020, 19:23:22', 'body': 'Would be good to put in an assertion that this method is never called.'}, 'com_2': {'author': 'JLLeitschuh', 'datetime': '03\/09\/2020, 19:23:55', 'body': \"Instead of doing this, I'd advise that you let the exception get thrown and assert in the test that this fails appropriately.\"}, 'com_3': {'author': 'JLLeitschuh', 'datetime': '03\/09\/2020, 19:24:09', 'body': 'Same comment here as above.'}}",
            "stats":"{'additions': 160, 'deletions': 0, 'total': 160}",
            "files":"{'http-client\/src\/test\/groovy\/io\/micronaut\/http\/client\/HeaderValidationSpec.groovy': {'additions': 160, 'deletions': 0, 'changes': 160, 'status': 'added', 'raw_url': 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/raw\/bc855e439c4a5ced3d83195bb59d0679cbd95add\/http-client%2Fsrc%2Ftest%2Fgroovy%2Fio%2Fmicronaut%2Fhttp%2Fclient%2FHeaderValidationSpec.groovy', 'patch': '@@ -0,0 +1,160 @@\\n+package io.micronaut.http.client\\n+\\n+import io.micronaut.context.ApplicationContext\\n+import io.micronaut.context.annotation.Requires\\n+import io.micronaut.http.HttpRequest\\n+import io.micronaut.http.MediaType\\n+import io.micronaut.http.annotation.Body\\n+import io.micronaut.http.annotation.Controller\\n+import io.micronaut.http.annotation.Get\\n+import io.micronaut.http.annotation.Post\\n+import io.micronaut.http.annotation.Produces\\n+import io.micronaut.http.annotation.QueryValue\\n+import io.micronaut.http.client.annotation.Client\\n+import io.micronaut.http.uri.UriBuilder\\n+import io.micronaut.runtime.server.EmbeddedServer\\n+import spock.lang.AutoCleanup\\n+import spock.lang.Shared\\n+import spock.lang.Specification\\n+\\n+import javax.inject.Inject\\n+\\n+class HeaderValidationSpec extends Specification {\\n+\\n+    @Shared @AutoCleanup EmbeddedServer embeddedServer =\\n+            ApplicationContext.run(EmbeddedServer, [\"spec.name\": HeaderValidationSpec.simpleName])\\n+\\n+    @Shared @AutoCleanup HttpClient client = embeddedServer.applicationContext.createBean(HttpClient, embeddedServer.getURL())\\n+\\n+    void \"test hello\"() {\\n+        HttpRequest<String> request = HttpRequest.GET(\"\/hello\");\\n+        String body = client.toBlocking().retrieve(request);\\n+\\n+        expect:\\n+        body == \"Hello World\"\\n+    }\\n+\\n+    \/**\\n+     * This test demonstrates self exploitation.\\n+     * Not really practical, but it proves the point.\\n+     *\/\\n+    void \"test self exploitation\"() {\\n+        HttpRequest<String> request = HttpRequest.GET(\"\/hello\/self-exploit\");\\n+        String body = client.toBlocking().retrieve(request);\\n+\\n+        expect:\\n+        body == \"Hello World\"\\n+    }\\n+\\n+    \/**\\n+     * This test demonstrates an example of this vulnerability actually being abused since an attacker\\n+     * could make the server make an additional unexpected request.\\n+     *\/\\n+    void \"test external exploit\"() {\\n+        List<String> headerData = [\\n+                \"Connection: Keep-Alive\", \/\/ This keeps the connection open so another request can be stuffed in.\\n+                \"\",\\n+                \"\",\\n+                \"POST \/hello\/super-secret HTTP\/1.1\",\\n+                \"Host: 127.0.0.1\",\\n+                \"Content-Length: 31\",\\n+                \"\",\\n+                \"{\\\\\"new\\\\\":\\\\\"json\\\\\",\\\\\"content\\\\\":\\\\\"here\\\\\"}\",\\n+                \"\",\\n+                \"\"\\n+        ]\\n+        String fullHeaderValue = String.join(\"\\\\r\\\\n\", headerData);\\n+        String headerValue = \"H\\\\r\\\\n\" + fullHeaderValue;\\n+        URI theURI =\\n+                UriBuilder\\n+                        .of(\"\/hello\/external-exploit\")\\n+                        .queryParam(\"header-value\", headerValue)\\n+                        .build();\\n+        HttpRequest<String> request = HttpRequest.GET(theURI)\\n+        String body = client.toBlocking().retrieve(request)\\n+\\n+        expect:\\n+        body == \"Hello World\"\\n+    }\\n+\\n+\\n+    @Requires(property = \"spec.name\", value = \"HeaderValidationSpec\")\\n+    @Controller(\"\/hello\")\\n+    static class HelloController {\\n+\\n+        \/**\\n+         * Imagine that this client actually points to another micro-service instead of pointing back to itself.\\n+         *\/\\n+        @Inject\\n+        @Client(\"\/\")\\n+        HttpClient client\\n+\\n+        \/**\\n+         * Imagine in a micro-services architecture, this method exists in some other application.\\n+         * This method is safe to be called by the other services that use it.\\n+         *\/\\n+        @Get\\n+        @Produces(MediaType.TEXT_PLAIN)\\n+        String index() {\\n+            \"Hello World\"\\n+        }\\n+\\n+        \/**\\n+         * Imagine in a micro-services architecture, this method exists in some other application.\\n+         * This method is <b>incredibly sensitive<\/b> and should <b>not<\/b> be called by outside code, ever.\\n+         *\/\\n+        @Post(\"\/super-secret\")\\n+        @Produces(MediaType.TEXT_PLAIN)\\n+        String superSecretEndpoint(@Body String body) {\\n+            println(\"This method was called but it shouldn\\'t have been!\")\\n+            println(body)\\n+\\n+            body\\n+        }\\n+\\n+        \/**\\n+         * This is a simple demonstration of exploiting ourselves.\\n+         * Totally impractical, but this demonstrates the vulnerability in the simplest way.\\n+         *\/\\n+        @Get(\"\/self-exploit\")\\n+        @Produces(MediaType.TEXT_PLAIN)\\n+        String selfExploit() {\\n+            List<String> headerData = [\\n+                    \"Connection: Keep-Alive\", \/\/ This keeps the connection open so another request can be stuffed in.\\n+                    \"\",\\n+                    \"\",\\n+                    \"POST \/hello\/super-secret HTTP\/1.1\",\\n+                    \"Host: 127.0.0.1\",\\n+                    \"Content-Length: 31\",\\n+                    \"\",\\n+                    \"{\\\\\"new\\\\\":\\\\\"json\\\\\",\\\\\"content\\\\\":\\\\\"here\\\\\"}\",\\n+                    \"\",\\n+                    \"\"\\n+            ]\\n+            String fullHeaderValue = String.join(\"\\\\r\\\\n\", headerData)\\n+            String headerValue = \"H\\\\r\\\\n\" + fullHeaderValue\\n+\\n+            HttpRequest request = HttpRequest.GET(\"\/hello\")\\n+            try {\\n+                request.header(\"Test\", headerValue)\\n+            } catch (IllegalArgumentException e) {\\n+            }\\n+            client.toBlocking().retrieve(request)\\n+        }\\n+\\n+        \/**\\n+         * This is a more practical example of simplified user code that could reasonably exist in the wild.\\n+         * This method demonstrates how external user supplied data flowing to a header value could be dangerous.\\n+         *\/\\n+        @Get(\"\/external-exploit\")\\n+        @Produces(MediaType.TEXT_PLAIN)\\n+        String externalExploit(@QueryValue(\"header-value\") String headerValue) {\\n+            HttpRequest request = HttpRequest.GET(\"\/hello\")\\n+            try {\\n+                request.header(\"Test\", headerValue)\\n+            } catch (IllegalArgumentException e) {\\n+            }\\n+            client.toBlocking().retrieve(request)\\n+        }\\n+    }\\n+}'}}",
            "message_norm":"add test for client header validation",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('header validation', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['http-client\/src\/test\/groovy\/io\/micronaut\/http\/client\/HeaderValidationSpec.groovy'])",
            "num_files":1.0
        },
        {
            "index":866,
            "vuln_id":"GHSA-6m8p-4fxj-pgc2",
            "cwe_id":"{'CWE-78'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/mikaelbr\/mversion\/commit\/b7a8b32600e60759a7ad3921ec4a2750bf173482'}",
            "dataset":"osv",
            "summary":"OS Command Injection in mversion The issue occurs because tagName user input is formatted inside the exec function is executed without any checks.",
            "published_date":"2021-05-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/mikaelbr\/mversion",
            "commit_href":"https:\/\/github.com\/mikaelbr\/mversion\/commit\/b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "commit_sha":"b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "patch":"SINGLE",
            "chain_ord":"['b7a8b32600e60759a7ad3921ec4a2750bf173482']",
            "before_first_fix_commit":"{'a9ddbc2bc86eb48f6976b85d195b6a94e81ffb22'}",
            "last_fix_commit":"b7a8b32600e60759a7ad3921ec4a2750bf173482",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/23\/2020, 22:02:33",
            "message":"Fix Remote Command Execution",
            "author":"hbkhan",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/git.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mikaelbr\/mversion\/raw\/b7a8b32600e60759a7ad3921ec4a2750bf173482\/lib%2Fgit.js', 'patch': '@@ -61,7 +61,7 @@ module.exports.commit = function (files, message, newVer, tagName, callback) {\\n \\n     function (done) {\\n       cp.exec(\\n-        [gitApp, \"tag\", \"-a\", tagName, \"-m\", message].join(\" \"),\\n+        [gitApp, \"tag\", \"-a\", escapeQuotes(tagName), \"-m\", message].join(\" \"),\\n         gitExtra,\\n         done\\n       );'}}",
            "message_norm":"fix remote command execution",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('command execution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/git.js'])",
            "num_files":1.0
        },
        {
            "index":1706,
            "vuln_id":"GHSA-f98m-q3hr-p5wq",
            "cwe_id":"{'CWE-915', 'CWE-20'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/locutusjs\/locutus\/commit\/0eb16d8541838e80f3c2340a9ef93ded7c97290f'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in locutus All versions of package locutus prior to version 2.0.12 are vulnerable to Prototype Pollution via the php.strings.parse_str function.",
            "published_date":"2021-05-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/locutusjs\/locutus",
            "commit_href":"https:\/\/github.com\/locutusjs\/locutus\/commit\/0eb16d8541838e80f3c2340a9ef93ded7c97290f",
            "commit_sha":"0eb16d8541838e80f3c2340a9ef93ded7c97290f",
            "patch":"SINGLE",
            "chain_ord":"['0eb16d8541838e80f3c2340a9ef93ded7c97290f']",
            "before_first_fix_commit":"{'3f14dc5d142f5dcbdf36b4271c21a850a4a259da'}",
            "last_fix_commit":"0eb16d8541838e80f3c2340a9ef93ded7c97290f",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/25\/2020, 14:48:03",
            "message":"fixed prototype pollution",
            "author":"Asjid Kalam",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'src\/php\/strings\/parse_str.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/locutusjs\/locutus\/raw\/0eb16d8541838e80f3c2340a9ef93ded7c97290f\/src%2Fphp%2Fstrings%2Fparse_str.js', 'patch': \"@@ -74,6 +74,10 @@ module.exports = function parse_str (str, array) { \/\/ eslint-disable-line camelc\\n     key = _fixStr(tmp[0])\\n     value = (tmp.length < 2) ? '' : _fixStr(tmp[1])\\n \\n+    if (key.includes('__proto__') || key.includes('constructor') || key.includes('prototype')) {\\n+      break;\\n+    }\\n+\\n     while (key.charAt(0) === ' ') {\\n       key = key.slice(1)\\n     }\"}}",
            "message_norm":"fixed prototype pollution",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/php\/strings\/parse_str.js'])",
            "num_files":1.0
        },
        {
            "index":1537,
            "vuln_id":"GHSA-cf6r-3wgc-h863",
            "cwe_id":"{'CWE-502'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/41b7f9b90149e9d44a65a8261a8deedc7186f6af', 'https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/819cdbcab51c6da9fb896380f2d46e9b7d4fdc3b'}",
            "dataset":"osv",
            "summary":"Polymorphic deserialization of malicious object in jackson-databind A flaw was discovered in jackson-databind in versions before 2.9.10, 2.8.11.5 and 2.6.7.3, where it would permit polymorphic deserialization of a malicious object using commons-configuration 1 and 2 JNDI classes. An attacker could use this flaw to execute arbitrary code.",
            "published_date":"2020-05-15",
            "chain_len":2,
            "project":"https:\/\/github.com\/FasterXML\/jackson-databind",
            "commit_href":"https:\/\/github.com\/FasterXML\/jackson-databind\/commit\/41b7f9b90149e9d44a65a8261a8deedc7186f6af",
            "commit_sha":"41b7f9b90149e9d44a65a8261a8deedc7186f6af",
            "patch":"MULTI",
            "chain_ord":"['41b7f9b90149e9d44a65a8261a8deedc7186f6af', '819cdbcab51c6da9fb896380f2d46e9b7d4fdc3b']",
            "before_first_fix_commit":"{'41b7f9b90149e9d44a65a8261a8deedc7186f6af', 'f4f4a4e035ada20a532a5400e5f093a5a575a0ed'}",
            "last_fix_commit":"819cdbcab51c6da9fb896380f2d46e9b7d4fdc3b",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/20\/2019, 05:57:18",
            "message":"Actual #2462 fix (prev commit only updates release notes)",
            "author":"Tatu Saloranta",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'src\/main\/java\/com\/fasterxml\/jackson\/databind\/jsontype\/impl\/SubTypeValidator.java': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FasterXML\/jackson-databind\/raw\/41b7f9b90149e9d44a65a8261a8deedc7186f6af\/src%2Fmain%2Fjava%2Fcom%2Ffasterxml%2Fjackson%2Fdatabind%2Fjsontype%2Fimpl%2FSubTypeValidator.java', 'patch': '@@ -106,7 +106,11 @@\\n \\n         \/\/ [databind#2420]: CXF\/JAX-RS provider\/XSLT\\n         s.add(\"org.apache.cxf.jaxrs.provider.XSLTJaxbProvider\");\\n-        \\n+\\n+        \/\/ [databind#2462]: commons-configuration \/ -2\\n+        s.add(\"org.apache.commons.configuration.JNDIConfiguration\");\\n+        s.add(\"org.apache.commons.configuration2.JNDIConfiguration\");\\n+\\n         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);\\n     }'}}",
            "message_norm":"actual #2462 fix (prev commit only updates release notes)",
            "language":"en",
            "entities":"[('#2462', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/fasterxml\/jackson\/databind\/jsontype\/impl\/SubTypeValidator.java'])",
            "num_files":1.0
        },
        {
            "index":2093,
            "vuln_id":"GHSA-hm3x-jwwf-jpr9",
            "cwe_id":"{'CWE-200', 'CWE-668'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/160936df134a471cfd245bd60964046027a571ea', 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information to an Unauthorized Actor in OpenStack tripleo-heat-templates An information exposure flaw in openstack-tripleo-heat-templates allows an external user to discover the internal IP or hostname. An attacker could exploit this by checking the `www_authenticate_uri parameter` (which is visible to all end users) in configuration files. This would give sensitive information which may aid in additional system exploitation. A patch is available on the `master` branch and anticipated to be part of version 11.6.1.",
            "published_date":"2022-03-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/openstack\/tripleo-heat-templates",
            "commit_href":"https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "commit_sha":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "patch":"MULTI",
            "chain_ord":"['160936df134a471cfd245bd60964046027a571ea', '2b9461e97fc5c4ceb0848d1cc4484f656bb85515']",
            "before_first_fix_commit":"{'ea4d002dde779e84c25c983aa3534cf62fe9386f'}",
            "last_fix_commit":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/06\/2022, 01:32:48",
            "message":"Fix remaining usage of internal url for www_authenticate_uri\n\nThis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nRelated-Bug: #1955397\nChange-Id: Ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
            "author":"Takashi Kajinami",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'deployment\/ironic\/ironic-api-container-puppet.yaml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/raw\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515\/deployment%2Fironic%2Fironic-api-container-puppet.yaml', 'patch': \"@@ -163,7 +163,7 @@ outputs:\\n             ironic::api::authtoken::user_domain_name: 'Default'\\n             ironic::api::authtoken::project_domain_name: 'Default'\\n             ironic::api::authtoken::username: 'ironic'\\n-            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n+            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix]}\\n             ironic::api::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n             ironic::api::authtoken::region_name: {get_param: KeystoneRegion}\\n             ironic::api::authtoken::interface: 'internal'\"}}",
            "message_norm":"fix remaining usage of internal url for www_authenticate_uri\n\nthis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nrelated-bug: #1955397\nchange-id: ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('160936df134a471cfd245bd60964046027a571ea', 'SHA', 'generic_sha'), ('fixes', 'ACTION', ''), ('keystone_authtoken', 'SECWORD', ''), ('bug', 'FLAW', ''), ('#1955397', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['deployment\/ironic\/ironic-api-container-puppet.yaml'])",
            "num_files":1.0
        },
        {
            "index":1204,
            "vuln_id":"GHSA-8fvr-5rqf-3wwh",
            "cwe_id":"{'CWE-285'}",
            "score":8.4,
            "chain":"{'https:\/\/github.com\/moby\/moby\/commit\/545b440a80f676a506e5837678dd4c4f65e78660'}",
            "dataset":"osv",
            "summary":"Information Exposure in Docker Engine Docker Engine before 1.6.1 uses weak permissions for (1) \/proc\/asound, (2) \/proc\/timer_stats, (3) \/proc\/latency_stats, and (4) \/proc\/fs, which allows local users to modify the host, obtain sensitive information, and perform protocol downgrade attacks via a crafted image.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/moby\/moby",
            "commit_href":"https:\/\/github.com\/moby\/moby\/commit\/545b440a80f676a506e5837678dd4c4f65e78660",
            "commit_sha":"545b440a80f676a506e5837678dd4c4f65e78660",
            "patch":"SINGLE",
            "chain_ord":"['545b440a80f676a506e5837678dd4c4f65e78660']",
            "before_first_fix_commit":"{'3162024e28c401750388da3417a44a552c6d5011'}",
            "last_fix_commit":"545b440a80f676a506e5837678dd4c4f65e78660",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2015, 20:33:51",
            "message":"Mount \/proc\/fs as readonly\n\nSigned-off-by: Michael Crosby <crosbymichael@gmail.com>",
            "author":"Michael Crosby",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'daemon\/execdriver\/native\/template\/default_template.go': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moby\/moby\/raw\/545b440a80f676a506e5837678dd4c4f65e78660\/daemon%2Fexecdriver%2Fnative%2Ftemplate%2Fdefault_template.go', 'patch': '@@ -86,6 +86,7 @@ func New() *configs.Config {\\n \\t\\tReadonlyPaths: []string{\\n \\t\\t\\t\"\/proc\/asound\",\\n \\t\\t\\t\"\/proc\/bus\",\\n+\\t\\t\\t\"\/proc\/fs\",\\n \\t\\t\\t\"\/proc\/irq\",\\n \\t\\t\\t\"\/proc\/sys\",\\n \\t\\t\\t\"\/proc\/sysrq-trigger\",'}}",
            "message_norm":"mount \/proc\/fs as readonly\n\nsigned-off-by: michael crosby <crosbymichael@gmail.com>",
            "language":"en",
            "entities":"[('crosbymichael@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['daemon\/execdriver\/native\/template\/default_template.go'])",
            "num_files":1.0
        },
        {
            "index":2972,
            "vuln_id":"GHSA-rp34-85x3-3764",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/librenms\/librenms\/commit\/135717a9a05c5bf8921f1389cbb469dcbf300bfd'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in librenms Cross-site Scripting (XSS) - Generic in Packagist librenms\/librenms prior to 22.1.0.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/librenms\/librenms",
            "commit_href":"https:\/\/github.com\/librenms\/librenms\/commit\/135717a9a05c5bf8921f1389cbb469dcbf300bfd",
            "commit_sha":"135717a9a05c5bf8921f1389cbb469dcbf300bfd",
            "patch":"SINGLE",
            "chain_ord":"['135717a9a05c5bf8921f1389cbb469dcbf300bfd']",
            "before_first_fix_commit":"{'c7b63b574f31efdeaa376d1a1cc0e7da681cba9f'}",
            "last_fix_commit":"135717a9a05c5bf8921f1389cbb469dcbf300bfd",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/13\/2022, 10:00:56",
            "message":"security - XSS Fix 01\n\nfixing https:\/\/huntr.dev\/bounties\/114ba055-a2f0-4db9-aafb-95df944ba177\/ (#13775)",
            "author":"PipoCanaja",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'includes\/html\/forms\/alert-transports.inc.php': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/librenms\/librenms\/raw\/135717a9a05c5bf8921f1389cbb469dcbf300bfd\/includes%2Fhtml%2Fforms%2Falert-transports.inc.php', 'patch': \"@@ -34,10 +34,10 @@\\n $status = 'ok';\\n $message = '';\\n \\n-$transport_id = $vars['transport_id'];\\n-$name = $vars['name'];\\n+$transport_id = strip_tags($vars['transport_id']);\\n+$name = strip_tags($vars['name']);\\n $is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');\\n-$transport_type = $vars['transport-type'];\\n+$transport_type = strip_tags($vars['transport-type']);\\n \\n if (empty($name)) {\\n     $status = 'error';\"}}",
            "message_norm":"security - xss fix 01\n\nfixing https:\/\/huntr.dev\/bounties\/114ba055-a2f0-4db9-aafb-95df944ba177\/ (#13775)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('xss', 'SECWORD', ''), ('fix', 'ACTION', ''), ('fixing', 'ACTION', ''), ('https:\/\/huntr.dev\/bounties\/114ba055-a2f0-4db9-aafb-95df944ba177\/', 'URL', ''), ('#13775', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['includes\/html\/forms\/alert-transports.inc.php'])",
            "num_files":1.0
        },
        {
            "index":1167,
            "vuln_id":"GHSA-88cw-3m6x-49f7",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/pull\/6528\/commits\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1'}",
            "dataset":"osv",
            "summary":"Out-of-bounds Write in ChakraCore Chakra Scripting Engine Memory Corruption Vulnerability This CVE ID is unique from CVE-2020-17048.",
            "published_date":"2021-08-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/pull\/6528\/commits\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "commit_sha":"e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "patch":"SINGLE",
            "chain_ord":"['e81e8a51ec7ba3d0dfb6089254f166c2733216e1']",
            "before_first_fix_commit":"{'90e222e9a9ba64bd808666f44e6a0913d6318f78'}",
            "last_fix_commit":"e81e8a51ec7ba3d0dfb6089254f166c2733216e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/30\/2020, 22:00:01",
            "message":"[CVE-2020-17054]",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 2, 'total': 7}",
            "files":"{'lib\/Backend\/Lower.cpp': {'additions': 5, 'deletions': 2, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/e81e8a51ec7ba3d0dfb6089254f166c2733216e1\/lib%2FBackend%2FLower.cpp', 'patch': '@@ -27152,8 +27152,11 @@ void Lowerer::LowerLdFrameDisplay(IR::Instr *instr, bool doStackFrameDisplay)\\n         if (instr->m_func != this->m_func && this->m_func->DoStackFrameDisplay())\\n         {\\n             StackSym * inlineeFrameDisplaySym = instr->m_func->GetLocalFrameDisplaySym();\\n-            Assert(inlineeFrameDisplaySym->IsAllocated());\\n-            InsertMove(IR::SymOpnd::New(inlineeFrameDisplaySym, TyMachReg, m_func), dstOpnd, instr);\\n+            Assert((inlineeFrameDisplaySym && inlineeFrameDisplaySym->IsAllocated()) || this->m_func->IsLoopBody());\\n+            if (inlineeFrameDisplaySym && inlineeFrameDisplaySym->IsAllocated())\\n+            {\\n+                InsertMove(IR::SymOpnd::New(inlineeFrameDisplaySym, TyMachReg, m_func), dstOpnd, instr);\\n+            }\\n         }\\n     }'}}",
            "message_norm":"[cve-2020-17054]",
            "language":"ro",
            "entities":"[('cve-2020-17054', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/Lower.cpp'])",
            "num_files":1.0
        },
        {
            "index":2479,
            "vuln_id":"GHSA-mw7r-3g6w-85qg",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/6b1250b6ffea7006226dd937e52cf5b353fcfc15', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/242c59ea40c0428e1ced7366bf2c28bfbdda1999'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1139, CVE-2019-1140, CVE-2019-1141, CVE-2019-1195, CVE-2019-1196, CVE-2019-1197.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/242c59ea40c0428e1ced7366bf2c28bfbdda1999",
            "commit_sha":"242c59ea40c0428e1ced7366bf2c28bfbdda1999",
            "patch":"MULTI",
            "chain_ord":"['242c59ea40c0428e1ced7366bf2c28bfbdda1999', '6b1250b6ffea7006226dd937e52cf5b353fcfc15']",
            "before_first_fix_commit":"{'75162b7f2d8ac2b37d17564e9c979ba1bae707e8', '450a349fda1b153d758a9e01698b977e60870e4c'}",
            "last_fix_commit":"6b1250b6ffea7006226dd937e52cf5b353fcfc15",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/02\/2019, 20:12:05",
            "message":"[CVE-2019-1131] Chakra Type confusion",
            "author":"Taylor Woll",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 4, 'total': 5}",
            "files":"{'lib\/Parser\/Parse.cpp': {'additions': 1, 'deletions': 4, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/242c59ea40c0428e1ced7366bf2c28bfbdda1999\/lib%2FParser%2FParse.cpp', 'patch': '@@ -4664,10 +4664,7 @@ ParseNodePtr Parser::ParseMemberList(LPCOLESTR pNameHint, uint32* pNameHintLengt\\n                     }\\n                 }\\n \\n-                if (buildAST)\\n-                {\\n-                    CheckArgumentsUse(pidHint, GetCurrentFunctionNode());\\n-                }\\n+                CheckArgumentsUse(pidHint, GetCurrentFunctionNode());\\n \\n                 bool couldBeObjectPattern = !isObjectPattern && m_token.tk == tkAsg;\\n                 \/\/ Saving the current state as we may change the isObjectPattern down below.'}}",
            "message_norm":"[cve-2019-1131] chakra type confusion",
            "language":"en",
            "entities":"[('cve-2019-1131', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Parser\/Parse.cpp'])",
            "num_files":1.0
        },
        {
            "index":3147,
            "vuln_id":"GHSA-vmjw-c2vp-p33c",
            "cwe_id":"{'CWE-681'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d'}",
            "dataset":"osv",
            "summary":"Crash in NMS ops caused by integer conversion to unsigned ### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.NonMaxSuppressionV5` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],\n  scores=[1.0,2.0,3.0],\n  max_output_size=-1,\n  iou_threshold=0.5,\n  score_threshold=0.5,\n  soft_nms_sigma=1.0,\n  pad_to_max_output_size=True)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a `std::vector`:\n\n```cc\n  const int output_size = max_output_size.scalar<int>()();\n  \/\/ ...\n  std::vector<int> selected;\n  \/\/ ...\n  if (pad_to_max_output_size) {\n    selected.resize(output_size, 0);\n    \/\/ ...\n  }\n```\n    \nHowever, as `std::vector::resize` takes the size argument as a `size_t` and `output_size` is an `int`, there is an implicit conversion to usigned. If the attacker supplies a negative value, this conversion results in a crash.\n\nA similar issue occurs in `CombinedNonMaxSuppression`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  clip_boxes=True)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d) and commit [b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d",
            "commit_sha":"3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d",
            "patch":"MULTI",
            "chain_ord":"['b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58', '3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d']",
            "before_first_fix_commit":"{'a87fa31dc3becc97c7e945b9b8c8711acb92fc12'}",
            "last_fix_commit":"3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/31\/2021, 05:02:22",
            "message":"Prevent crash\/heap OOB due to integer conversion to unsigned in NMS kernels\n\nPiperOrigin-RevId: 387938262\nChange-Id: Id361a715307e7179977cf5c64391c199a966f2ad",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fnon_max_suppression_op.cc', 'patch': '@@ -169,6 +169,8 @@ void DoNonMaxSuppressionOp(OpKernelContext* context, const Tensor& scores,\\n                            bool pad_to_max_output_size = false,\\n                            int* ptr_num_valid_outputs = nullptr) {\\n   const int output_size = max_output_size.scalar<int>()();\\n+  OP_REQUIRES(context, output_size >= 0,\\n+              errors::InvalidArgument(\"output size must be non-negative\"));\\n \\n   std::vector<T> scores_data(num_boxes);\\n   std::copy_n(scores.flat<T>().data(), num_boxes, scores_data.begin());\\n@@ -768,6 +770,9 @@ class NonMaxSuppressionV4Op : public OpKernel {\\n         context, scores, num_boxes, max_output_size, iou_threshold_val,\\n         score_threshold_val, dummy_soft_nms_sigma, similarity_fn,\\n         return_scores_tensor_, pad_to_max_output_size_, &num_valid_outputs);\\n+    if (!context->status().ok()) {\\n+      return;\\n+    }\\n \\n     \/\/ Allocate scalar output tensor for number of indices computed.\\n     Tensor* num_outputs_t = nullptr;\\n@@ -845,6 +850,9 @@ class NonMaxSuppressionV5Op : public OpKernel {\\n         context, scores, num_boxes, max_output_size, iou_threshold_val,\\n         score_threshold_val, soft_nms_sigma_val, similarity_fn,\\n         return_scores_tensor_, pad_to_max_output_size_, &num_valid_outputs);\\n+    if (!context->status().ok()) {\\n+      return;\\n+    }\\n \\n     \/\/ Allocate scalar output tensor for number of indices computed.\\n     Tensor* num_outputs_t = nullptr;'}}",
            "message_norm":"prevent crash\/heap oob due to integer conversion to unsigned in nms kernels\n\npiperorigin-revid: 387938262\nchange-id: id361a715307e7179977cf5c64391c199a966f2ad",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387938262', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/non_max_suppression_op.cc'])",
            "num_files":1.0
        },
        {
            "index":804,
            "vuln_id":"GHSA-69c3-5xxf-58q2",
            "cwe_id":"{'CWE-89'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/moodle\/moodle\/commit\/a0f47c8bc4d6f5971025de7d63f22475701d2f86'}",
            "dataset":"osv",
            "summary":"SQL injection in moodle A flaw was found in moodle where an SQL injection risk was identified in Badges code relating to configuring criteria.",
            "published_date":"2022-05-19",
            "chain_len":1,
            "project":"https:\/\/github.com\/moodle\/moodle",
            "commit_href":"https:\/\/github.com\/moodle\/moodle\/commit\/a0f47c8bc4d6f5971025de7d63f22475701d2f86",
            "commit_sha":"a0f47c8bc4d6f5971025de7d63f22475701d2f86",
            "patch":"SINGLE",
            "chain_ord":"['a0f47c8bc4d6f5971025de7d63f22475701d2f86']",
            "before_first_fix_commit":"{'9478dc6b07b162f63b823480aecd4e2fb4e3c59f'}",
            "last_fix_commit":"a0f47c8bc4d6f5971025de7d63f22475701d2f86",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/31\/2022, 10:17:31",
            "message":"MDL-74333 badges: Check profile criteria valid when reviewing",
            "author":"Michael Hawkins",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'badges\/criteria\/award_criteria_profile.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moodle\/moodle\/raw\/a0f47c8bc4d6f5971025de7d63f22475701d2f86\/badges%2Fcriteria%2Faward_criteria_profile.php', 'patch': '@@ -202,8 +202,8 @@ public function review($userid, $filtered = false) {\\n                 $join .= \" LEFT JOIN {user_info_data} uid{$idx} ON uid{$idx}.userid = u.id AND uid{$idx}.fieldid = :fieldid{$idx} \";\\n                 $sqlparams[\"fieldid{$idx}\"] = $param[\\'field\\'];\\n                 $whereparts[] = \"uid{$idx}.id IS NOT NULL\";\\n-            } else {\\n-                \/\/ This is a field from {user} table.\\n+            } else if (in_array($param[\\'field\\'], $this->allowed_default_fields)) {\\n+                \/\/ This is a valid field from {user} table.\\n                 if ($param[\\'field\\'] == \\'picture\\') {\\n                     \/\/ The picture field is numeric and requires special handling.\\n                     $whereparts[] = \"u.{$param[\\'field\\']} != 0\";'}}",
            "message_norm":"mdl-74333 badges: check profile criteria valid when reviewing",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['badges\/criteria\/award_criteria_profile.php'])",
            "num_files":1.0
        },
        {
            "index":134,
            "vuln_id":"GHSA-2rfj-2mwp-787v",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/3d6226cc2d1077537220361c82e34a362c6c76ee', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/36644ee0d4cc2bc97a3cd49c3540e6eea193182a'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0989, CVE-2019-0991, CVE-2019-0992, CVE-2019-1002, CVE-2019-1003, CVE-2019-1024, CVE-2019-1051, CVE-2019-1052.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/36644ee0d4cc2bc97a3cd49c3540e6eea193182a",
            "commit_sha":"36644ee0d4cc2bc97a3cd49c3540e6eea193182a",
            "patch":"MULTI",
            "chain_ord":"['36644ee0d4cc2bc97a3cd49c3540e6eea193182a', '3d6226cc2d1077537220361c82e34a362c6c76ee']",
            "before_first_fix_commit":"{'d797e3f00e34c12c8c0ae52f56344325439dccd7', 'eabf77ad17010f220639e5261798da9ac14e43e3'}",
            "last_fix_commit":"3d6226cc2d1077537220361c82e34a362c6c76ee",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/15\/2019, 23:54:48",
            "message":"CVE-2019-0993",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'lib\/Runtime\/Language\/JavascriptOperators.cpp': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/36644ee0d4cc2bc97a3cd49c3540e6eea193182a\/lib%2FRuntime%2FLanguage%2FJavascriptOperators.cpp', 'patch': \"@@ -9655,6 +9655,10 @@ using namespace Js;\\n             Var result = CALL_ENTRYPOINT(threadContext, marshalledFunction->GetEntryPoint(), function, CallInfo(flags, 1), thisVar);\\n             result = CrossSite::MarshalVar(requestContext, result);\\n \\n+            \/\/ Set implicit call flags so we bail out if we're trying to propagate the value forward, e.g., from a compare. Subsequent calls\\n+            \/\/ to the getter may produce different results.\\n+            threadContext->AddImplicitCallFlags(ImplicitCall_Accessor);\\n+\\n             return result;\\n         });\\n     }\"}}",
            "message_norm":"cve-2019-0993",
            "language":"ro",
            "entities":"[('cve-2019-0993', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Runtime\/Language\/JavascriptOperators.cpp'])",
            "num_files":1.0
        },
        {
            "index":2951,
            "vuln_id":"GHSA-rh9j-f5f8-rvgc",
            "cwe_id":"{'CWE-295', 'CWE-287'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/parse-community\/parse-server\/commit\/ba2b0a9cb9a568817a114b132a4c2e0911d76df1', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/2084b7c569697a5230e42511799eeac9219db5a9'}",
            "dataset":"osv",
            "summary":"Authentication bypass vulnerability in Apple Game Center auth adapter  ### Impact\nThe certificate in Apple Game Center auth adapter not validated. As a result, authentication could potentially be bypassed by making a fake certificate accessible via certain Apple domains and providing the URL to that certificate in an authData object.\n\n### Patches\nTo prevent this, a new `rootCertificateUrl` property is introduced to the Parse Server Apple Game Center auth adapter which takes the URL to the root certificate of Apple's Game Center authentication certificate. If no value is set, the `rootCertificateUrl` property defaults to the URL of the [current root certificate](https:\/\/developer.apple.com\/news\/?id=stttq465) as of May 27, 2022.\n\nKeep in mind that the root certificate can change at any time (expected to be announced by Apple) and that it is the developer's responsibility to keep the root certificate URL up-to-date when using the Parse Server Apple Game Center auth adapter.\n\n### Workarounds\nNone.\n\n### References\n- https:\/\/github.com\/parse-community\/parse-server\/security\/advisories\/GHSA-rh9j-f5f8-rvgc\n- https:\/\/developer.apple.com\/news\/?id=stttq465\n- https:\/\/github.com\/parse-community\/parse-server\n\n### More information\n* For questions or comments about this vulnerability visit our [community forum](http:\/\/community.parseplatform.org) or [community chat](http:\/\/chat.parseplatform.org)\n* Report other vulnerabilities at [report.parseplatform.org](https:\/\/report.parseplatform.org)",
            "published_date":"2022-06-17",
            "chain_len":3,
            "project":"https:\/\/github.com\/parse-community\/parse-server",
            "commit_href":"https:\/\/github.com\/parse-community\/parse-server\/pull\/8054\/commits\/2084b7c569697a5230e42511799eeac9219db5a9",
            "commit_sha":"2084b7c569697a5230e42511799eeac9219db5a9",
            "patch":"MULTI",
            "chain_ord":"['2084b7c569697a5230e42511799eeac9219db5a9', '0cc299f82e367518f2fe7a53b99f3f801a338cf4', 'ba2b0a9cb9a568817a114b132a4c2e0911d76df1']",
            "before_first_fix_commit":"{'a8aef820afa2c8d87683668c2961e523016bad9b'}",
            "last_fix_commit":"ba2b0a9cb9a568817a114b132a4c2e0911d76df1",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/17\/2022, 14:16:52",
            "message":"Create game_center.pem",
            "author":"Manuel Trezza",
            "comments":null,
            "stats":"{'additions': 28, 'deletions': 0, 'total': 28}",
            "files":"{'spec\/support\/cert\/game_center.pem': {'additions': 28, 'deletions': 0, 'changes': 28, 'status': 'added', 'raw_url': 'https:\/\/github.com\/parse-community\/parse-server\/raw\/2084b7c569697a5230e42511799eeac9219db5a9\/spec%2Fsupport%2Fcert%2Fgame_center.pem', 'patch': '@@ -0,0 +1,28 @@\\n+-----BEGIN CERTIFICATE-----\\n+MIIEvDCCA6SgAwIBAgIQXRHxNXkw1L9z5\/3EZ\/T\/hDANBgkqhkiG9w0BAQsFADB\/\\n+MQswCQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAd\\n+BgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVj\\n+IENsYXNzIDMgU0hBMjU2IENvZGUgU2lnbmluZyBDQTAeFw0xODA5MTcwMDAwMDBa\\n+Fw0xOTA5MTcyMzU5NTlaMHMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9y\\n+bmlhMRIwEAYDVQQHDAlDdXBlcnRpbm8xFDASBgNVBAoMC0FwcGxlLCBJbmMuMQ8w\\n+DQYDVQQLDAZHQyBTUkUxFDASBgNVBAMMC0FwcGxlLCBJbmMuMIIBIjANBgkqhkiG\\n+9w0BAQEFAAOCAQ8AMIIBCgKCAQEA06fwIi8fgKrTQu7cBcFkJVF6+Tqvkg7MKJTM\\n+IOYPPQtPF3AZYPsbUoRKAD7\/JXrxxOSVJ7vU1mP77tYG8TcUteZ3sAwvt2dkRbm7\\n+ZO6DcmSggv1Dg4k3goNw4GYyCY4Z2\/8JSmsQ80Iv\/UOOwynpBziEeZmJ4uck6zlA\\n+17cDkH48LBpKylaqthym5bFs9gj11pto7mvyb5BTcVuohwi6qosvbs\/4VGbC2Nsz\\n+ie416nUZfv+xxoXH995gxR2mw5cDdeCew7pSKxEhvYjT2nVdQF0q\/hnPMFnOaEyT\\n+q79n3gwFXyt0dy8eP6KBF7EW9J6b7ubu\/j7h+tQfxPM+gTXOBQIDAQABo4IBPjCC\\n+ATowCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH\\n+AwMwYQYDVR0gBFowWDBWBgZngQwBBAEwTDAjBggrBgEFBQcCARYXaHR0cHM6Ly9k\\n+LnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGQwXaHR0cHM6Ly9kLnN5bWNiLmNv\\n+bS9ycGEwHwYDVR0jBBgwFoAUljtT8Hkzl699g+8uK8zKt4YecmYwKwYDVR0fBCQw\\n+IjAgoB6gHIYaaHR0cDovL3N2LnN5bWNiLmNvbS9zdi5jcmwwVwYIKwYBBQUHAQEE\\n+SzBJMB8GCCsGAQUFBzABhhNodHRwOi8vc3Yuc3ltY2QuY29tMCYGCCsGAQUFBzAC\\n+hhpodHRwOi8vc3Yuc3ltY2IuY29tL3N2LmNydDANBgkqhkiG9w0BAQsFAAOCAQEA\\n+I\/j\/PcCNPebSAGrcqSFBSa2mmbusOX01eVBg8X0G\/z8Z+ZWUfGFzDG0GQf89MPxV\\n+woec+nZuqui7o9Bg8s8JbHV0TC52X14CbTj9w\/qBF748WbH9gAaTkrJYPm+MlNhu\\n+tjEuQdNl\/YXVMvQW4O8UMHTi09GyJQ0NC4q92Wxvx1m\/qzjvTLvrXHGQ9pEHhPyz\\n+vfBLxQkWpNoCNKU7UeESyH06XOrGc9MsII9deeKsDJp9a0jtx+pP4MFVtFME9SSQ\\n+tMBs0It7WwEf7qcRLpialxKwY2EzQ9g4WnANHqo18PrDBE10TFpZPzUh7JhMViVr\\n+EEbl0YdElmF8Hlamah\/yNw==\\n+-----END CERTIFICATE-----'}}",
            "message_norm":"create game_center.pem",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['spec\/support\/cert\/game_center.pem'])",
            "num_files":1.0
        },
        {
            "index":1072,
            "vuln_id":"GHSA-7r87-cj48-wj45",
            "cwe_id":"{'CWE-253', 'CWE-394', 'CWE-754'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/Tethik\/flask-session-captcha\/commit\/2811ae23a38d33b620fb7a07de8837c6d65c13e4'}",
            "dataset":"osv",
            "summary":"Potential Captcha Validate Bypass in flask-session-captcha ### Impact\nflask-session-captcha is a package which allows users to extend Flask by adding an image based captcha stored in a server side session.\n\nThe `captcha.validate()` function would return `None` if passed no value (e.g. by submitting a request with an empty form).\n\nIf implementing users were checking the return value to be **False**, the captcha verification check could be bypassed.\n\nSample vulnerable code:\n```python\nif captcha.validate() == False:\n    ... # abort\nelse:\n   ... # do stuff\n```\n\n### Patches\nA new version (1.2.1) is available that fixes the issue.\n\n### Workarounds\nUsers can workaround the issue by not explicitly checking that the value is False. \n\nChecking the return value less explicitly should still work. \n\n```python\nif not captcha.validate():\n    ... # abort\nelse:\n   ... # do stuff\n```\n\n```python\nif captcha.validate():\n    ... # do stuff\nelse:\n   ... # abort\n```\n\n### References\nhttps:\/\/github.com\/Tethik\/flask-session-captcha\/pull\/27\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the github repo](https:\/\/github.com\/Tethik\/flask-session-captcha)",
            "published_date":"2022-04-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/Tethik\/flask-session-captcha",
            "commit_href":"https:\/\/github.com\/Tethik\/flask-session-captcha\/commit\/2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "commit_sha":"2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "patch":"SINGLE",
            "chain_ord":"['2811ae23a38d33b620fb7a07de8837c6d65c13e4']",
            "before_first_fix_commit":"{'50b4053766b89e9322cfbd281c91cb4e8898d3f7'}",
            "last_fix_commit":"2811ae23a38d33b620fb7a07de8837c6d65c13e4",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/23\/2022, 21:40:14",
            "message":"add some extra tests to ensure False is returned",
            "author":"Joakim Uddholm",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'test_flask_session_captcha.py': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Tethik\/flask-session-captcha\/raw\/2811ae23a38d33b620fb7a07de8837c6d65c13e4\/test_flask_session_captcha.py', 'patch': '@@ -98,7 +98,13 @@ def test_captcha_validate_value(self):\\n         with self.app.test_request_context(\\'\/\\'):\\n             captcha.generate()\\n             answer = captcha.get_answer()\\n-            assert not captcha.validate(value=\"wrong\")\\n+            assert captcha.validate(value=None) == False\\n+            captcha.generate()\\n+            answer = captcha.get_answer()\\n+            assert captcha.validate(value=\"\") == False\\n+            captcha.generate()\\n+            answer = captcha.get_answer()\\n+            assert captcha.validate(value=\"wrong\") == False\\n             captcha.generate()\\n             answer = captcha.get_answer()\\n             assert captcha.validate(value=answer)'}}",
            "message_norm":"add some extra tests to ensure false is returned",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['test_flask_session_captcha.py'])",
            "num_files":1.0
        },
        {
            "index":1158,
            "vuln_id":"GHSA-86wf-436m-h424",
            "cwe_id":"{'CWE-665'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/TooTallNate\/node-http-proxy-agent\/commit\/b7b7cc793c3226aa83f820ce5c277e81862d32eb'}",
            "dataset":"osv",
            "summary":"Resource Exhaustion Denial of Service in http-proxy-agent  A flaw was found in http-proxy-agent, prior to version 2.1.0. It was discovered http-proxy-agent passes an auth option to the Buffer constructor without proper sanitization. This could result in a Denial of Service through the usage of all available CPU resources and data exposure through an uninitialized memory leak in setups where an attacker could submit typed input to the auth parameter.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/TooTallNate\/node-http-proxy-agent",
            "commit_href":"https:\/\/github.com\/TooTallNate\/node-http-proxy-agent\/commit\/b7b7cc793c3226aa83f820ce5c277e81862d32eb",
            "commit_sha":"b7b7cc793c3226aa83f820ce5c277e81862d32eb",
            "patch":"SINGLE",
            "chain_ord":"['b7b7cc793c3226aa83f820ce5c277e81862d32eb']",
            "before_first_fix_commit":"{'687da671c075cde76be2d3e907d5384c970efadc'}",
            "last_fix_commit":"b7b7cc793c3226aa83f820ce5c277e81862d32eb",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/03\/2018, 23:47:26",
            "message":"Use `Buffer.from()`\n\n`new Buffer()` is deprecated and unsafe.",
            "author":"Nathan Rajlich",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 3, 'total': 8}",
            "files":"{'index.js': {'additions': 5, 'deletions': 3, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TooTallNate\/node-http-proxy-agent\/raw\/b7b7cc793c3226aa83f820ce5c277e81862d32eb\/index.js', 'patch': \"@@ -75,9 +75,11 @@ HttpProxyAgent.prototype.callback = function connect (req, opts, fn) {\\n   req.path = absolute;\\n \\n   \/\/ inject the `Proxy-Authorization` header if necessary\\n-  var auth = proxy.auth;\\n-  if (auth) {\\n-    req.setHeader('Proxy-Authorization', 'Basic ' + new Buffer(auth).toString('base64'));\\n+  if (proxy.auth) {\\n+    req.setHeader(\\n+      'Proxy-Authorization',\\n+      'Basic ' + Buffer.from(proxy.auth).toString('base64')\\n+    );\\n   }\\n \\n   \/\/ create a socket connection to the proxy server\"}}",
            "message_norm":"use `buffer.from()`\n\n`new buffer()` is deprecated and unsafe.",
            "language":"en",
            "entities":"[('unsafe', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":733,
            "vuln_id":"GHSA-6346-5r4h-ff5x",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/724e2d186a33c0c27273107dc4f160a09384877f'}",
            "dataset":"osv",
            "summary":"Microweber vulnerable to cross-site scripting (XSS) Microweber is a drag and drop website builder and a powerful next generation CMS. Microweber versions 1.2.15 and prior are vulnerable to cross-site scripting. This could lead to injection of arbitrary JaveScript code, defacement of a page, or stealing cookies. A patch is available on the `master` branch of Microweber's GitHub repository.",
            "published_date":"2022-05-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/724e2d186a33c0c27273107dc4f160a09384877f",
            "commit_sha":"724e2d186a33c0c27273107dc4f160a09384877f",
            "patch":"SINGLE",
            "chain_ord":"['724e2d186a33c0c27273107dc4f160a09384877f']",
            "before_first_fix_commit":"{'5eb846301d61b22eda84a997026d050a14a518f4'}",
            "last_fix_commit":"724e2d186a33c0c27273107dc4f160a09384877f",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/03\/2022, 08:41:32",
            "message":"Update order_filtering.blade.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/MicroweberPackages\/Order\/resources\/views\/admin\/orders\/partials\/order_filtering.blade.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/724e2d186a33c0c27273107dc4f160a09384877f\/src%2FMicroweberPackages%2FOrder%2Fresources%2Fviews%2Fadmin%2Forders%2Fpartials%2Forder_filtering.blade.php', 'patch': '@@ -158,7 +158,7 @@ class=\"btn btn-link btn-sm <?php if (isset($abandoned)): ?>font-weight-bold text\\n             $(document).ready(function () {\\n                 var searchOrdersByProduct = new mw.autoComplete({\\n                     element: \"#js-orders-search-by-products\",\\n-                    placeholder: \"<?php if ($productKeyword) { echo $productKeyword; } else { _e(\"Search by products...\"); }?>\",\\n+                    placeholder: \"<?php if ($productKeyword) { echo xss_clean($productKeyword); } else { _e(\"Search by products...\"); }?>\",\\n                     autoComplete:true,\\n                     ajaxConfig: {\\n                         method: \\'get\\','}}",
            "message_norm":"update order_filtering.blade.php",
            "language":"da",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Order\/resources\/views\/admin\/orders\/partials\/order_filtering.blade.php'])",
            "num_files":1.0
        },
        {
            "index":1086,
            "vuln_id":"GHSA-7vvq-7r29-5vg3",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/mrdoob\/three.js\/commit\/0c31bc605e21965aad8a6479bb1969351773f76d'}",
            "dataset":"osv",
            "summary":"Cross site scripting in three.js # CVE has been withdrawn\n\nVersions of three.js prior to 0.137.0 load untrusted iframes and allow for attackers to inject arbitrary javascript into a users browser.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/mrdoob\/three.js",
            "commit_href":"https:\/\/github.com\/mrdoob\/three.js\/commit\/0c31bc605e21965aad8a6479bb1969351773f76d",
            "commit_sha":"0c31bc605e21965aad8a6479bb1969351773f76d",
            "patch":"SINGLE",
            "chain_ord":"['0c31bc605e21965aad8a6479bb1969351773f76d']",
            "before_first_fix_commit":"{'55d4f24cb50e995b0dfee73979305e8237384a53'}",
            "last_fix_commit":"0c31bc605e21965aad8a6479bb1969351773f76d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/24\/2022, 17:39:24",
            "message":"Only load trusted iframe (#23245)",
            "author":"Rohan Sharma",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'docs\/index.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mrdoob\/three.js\/raw\/0c31bc605e21965aad8a6479bb1969351773f76d\/docs%2Findex.html', 'patch': '@@ -498,7 +498,7 @@ <h1><a href=\"https:\/\/threejs.org\">three.js<\/a><\/h1>\\n \\t\\t\\tconst oldIframe = iframe;\\n \\t\\t\\tiframe = oldIframe.cloneNode();\\n \\n-\\t\\t\\tif ( hash ) {\\n+\\t\\t\\tif ( hash && titles[ splitHash[ 0 ] ] ) {\\n \\n \\t\\t\\t\\tiframe.src = splitHash[ 0 ] + \\'.html\\' + splitHash[ 1 ];\\n \\t\\t\\t\\tsubtitle = titles[ splitHash[ 0 ] ] + splitHash[ 1 ] + \\' \u2013 \\';'}}",
            "message_norm":"only load trusted iframe (#23245)",
            "language":"en",
            "entities":"[('#23245', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['docs\/index.html'])",
            "num_files":1.0
        },
        {
            "index":2534,
            "vuln_id":"GHSA-p885-prv3-m4xv",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/f211c11034baf4281aa62e7b5e0347248d995ee9'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in snipe-it Stored Cross Site Scripting vulnerability in Item name parameter in GitHub repository snipe\/snipe-it prior to v5.4.3. The vulnerability is capable of stolen the user Cookie.",
            "published_date":"2022-04-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/f211c11034baf4281aa62e7b5e0347248d995ee9",
            "commit_sha":"f211c11034baf4281aa62e7b5e0347248d995ee9",
            "patch":"SINGLE",
            "chain_ord":"['f211c11034baf4281aa62e7b5e0347248d995ee9']",
            "before_first_fix_commit":"{'698c7f4904f8fd843c5b9761053c9c68819ec288', '7479f5f12d73f73d9bc8c479651e0e5602ad1791'}",
            "last_fix_commit":"f211c11034baf4281aa62e7b5e0347248d995ee9",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2022, 11:25:56",
            "message":"Merge pull request #10942 from snipe\/fixes\/xss_user_requested\n\nFixes potential XSS vuln in user requestable results",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'app\/Http\/Controllers\/Api\/ProfileController.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/f211c11034baf4281aa62e7b5e0347248d995ee9\/app%2FHttp%2FControllers%2FApi%2FProfileController.php', 'patch': \"@@ -30,11 +30,11 @@ public function requestedAssets()\\n             \/\/ Make sure the asset and request still exist\\n             if ($checkoutRequest && $checkoutRequest->itemRequested()) {\\n                 $results['rows'][] = [\\n-                    'image' => $checkoutRequest->itemRequested()->present()->getImageUrl(),\\n-                    'name' => $checkoutRequest->itemRequested()->present()->name(),\\n-                    'type' => $checkoutRequest->itemType(),\\n-                    'qty' => $checkoutRequest->quantity,\\n-                    'location' => ($checkoutRequest->location()) ? $checkoutRequest->location()->name : null,\\n+                    'image' => e($checkoutRequest->itemRequested()->present()->getImageUrl()),\\n+                    'name' => e($checkoutRequest->itemRequested()->present()->name()),\\n+                    'type' => e($checkoutRequest->itemType()),\\n+                    'qty' => (int) $checkoutRequest->quantity,\\n+                    'location' => ($checkoutRequest->location()) ? e($checkoutRequest->location()->name) : null,\\n                     'expected_checkin' => Helper::getFormattedDateObject($checkoutRequest->itemRequested()->expected_checkin, 'datetime'),\\n                     'request_date' => Helper::getFormattedDateObject($checkoutRequest->created_at, 'datetime'),\\n                 ];\"}}",
            "message_norm":"merge pull request #10942 from snipe\/fixes\/xss_user_requested\n\nfixes potential xss vuln in user requestable results",
            "language":"ca",
            "entities":"[('#10942', 'ISSUE', ''), ('xss_user_requested', 'SECWORD', ''), ('fixes', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Api\/ProfileController.php'])",
            "num_files":1.0
        },
        {
            "index":2689,
            "vuln_id":"GHSA-q3x2-jvp3-wj78",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/975fc1d6d3fba598ee550849ceb81af23ce72e08'}",
            "dataset":"osv",
            "summary":"Unrestricted XML files leading to cross-site scripting in Microweber Microweber prior to 1.2.12 allows unrestricted upload of XML files, which malicious actors can exploit to cause a stored cross-site scripting attack.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/975fc1d6d3fba598ee550849ceb81af23ce72e08",
            "commit_sha":"975fc1d6d3fba598ee550849ceb81af23ce72e08",
            "patch":"SINGLE",
            "chain_ord":"['975fc1d6d3fba598ee550849ceb81af23ce72e08']",
            "before_first_fix_commit":"{'27622f02c39d4cce67c43e5da38a6ab504202e13'}",
            "last_fix_commit":"975fc1d6d3fba598ee550849ceb81af23ce72e08",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 15:29:28",
            "message":"Update Files.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/MicroweberPackages\/Utils\/System\/Files.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/975fc1d6d3fba598ee550849ceb81af23ce72e08\/src%2FMicroweberPackages%2FUtils%2FSystem%2FFiles.php', 'patch': \"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA\\n                 break;\\n             case 'file':\\n             case 'files':\\n-                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';\\n+                $are_allowed .= ',doc,docx,pdf,json,rtf,txt,zip,gzip,rar,cad,psd,xlsx,csv,7z'; \\n                 break;\\n             case 'documents':\\n             case 'doc':\\n-                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,xlr,xls,xlsx';\\n+                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xlr,xls,xlsx';\\n                 break;\\n             case 'archives':\\n             case 'arc':\"}}",
            "message_norm":"update files.php",
            "language":"fr",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Utils\/System\/Files.php'])",
            "num_files":1.0
        },
        {
            "index":2996,
            "vuln_id":"GHSA-rr8m-29g8-8cgc",
            "cwe_id":"{'CWE-89'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/forkcms\/forkcms\/commit\/6aca30e10b4181534f73f96d6e2ebeb45ec15069'}",
            "dataset":"osv",
            "summary":"SQL Injection in Fork CMS Fork CMS is vulnerable to SQL injection through marking blog comments on bulk as spam in versions prior to 5.11.1.",
            "published_date":"2022-03-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/forkcms\/forkcms",
            "commit_href":"https:\/\/github.com\/forkcms\/forkcms\/commit\/6aca30e10b4181534f73f96d6e2ebeb45ec15069",
            "commit_sha":"6aca30e10b4181534f73f96d6e2ebeb45ec15069",
            "patch":"SINGLE",
            "chain_ord":"['6aca30e10b4181534f73f96d6e2ebeb45ec15069']",
            "before_first_fix_commit":"{'1b38e33a98992793e998a937b717355212346993'}",
            "last_fix_commit":"6aca30e10b4181534f73f96d6e2ebeb45ec15069",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/23\/2022, 12:21:47",
            "message":"Prevent sql injection through the ids of the blog comments",
            "author":"Jelmer Prins",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/Backend\/Modules\/Blog\/Engine\/Model.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/forkcms\/forkcms\/raw\/6aca30e10b4181534f73f96d6e2ebeb45ec15069\/src%2FBackend%2FModules%2FBlog%2FEngine%2FModel.php', 'patch': \"@@ -501,7 +501,7 @@ public static function getComments(array $ids): array\\n             'SELECT *\\n              FROM blog_comments AS i\\n              WHERE i.id IN (' . implode(', ', array_fill(0, count($ids), '?')) . ')',\\n-            $ids\\n+            array_map('intval', $ids)\\n         );\\n     }\"}}",
            "message_norm":"prevent sql injection through the ids of the blog comments",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('sql injection', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Backend\/Modules\/Blog\/Engine\/Model.php'])",
            "num_files":1.0
        },
        {
            "index":327,
            "vuln_id":"GHSA-3xc7-xg67-pw99",
            "cwe_id":"{'CWE-532'}",
            "score":3.5,
            "chain":"{'https:\/\/github.com\/FelixLC\/cli\/commit\/da59652c061a798282e18efad0b6d0afefa15465'}",
            "dataset":"osv",
            "summary":"Sensitive Data Exposure in sequelize-cli Versions of `sequelize-cli` prior to 5.5.0 are vulnerable to Sensitive Data Exposure. The function `filteredURL()` does not properly sanitize the `config.password` value which may cause passwords with special characters to be logged in plain text.\n\n\n## Recommendation\n\nUpgrade to version 5.5.0 or later.",
            "published_date":"2019-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/FelixLC\/cli",
            "commit_href":"https:\/\/github.com\/FelixLC\/cli\/commit\/da59652c061a798282e18efad0b6d0afefa15465",
            "commit_sha":"da59652c061a798282e18efad0b6d0afefa15465",
            "patch":"SINGLE",
            "chain_ord":"['da59652c061a798282e18efad0b6d0afefa15465']",
            "before_first_fix_commit":"{'139f854f05b76367a0bb5bfcc5a9cf549879f432'}",
            "last_fix_commit":"da59652c061a798282e18efad0b6d0afefa15465",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/04\/2018, 10:53:36",
            "message":"Bug Fix: Special characters in password are not escaped\n\nhttps:\/\/github.com\/sequelize\/cli\/issues\/172 is stil open when special characters find their way in a password",
            "author":"FelixLC",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/helpers\/config-helper.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/FelixLC\/cli\/raw\/da59652c061a798282e18efad0b6d0afefa15465\/src%2Fhelpers%2Fconfig-helper.js', 'patch': \"@@ -152,7 +152,7 @@ const api = {\\n   },\\n \\n   filteredUrl (uri, config) {\\n-    const regExp = new RegExp(':?' + (config.password || '') + '@');\\n+    const regExp = new RegExp(':?' + _.escapeRegExp(config.password) + '@');\\n     return uri.replace(regExp, ':*****@');\\n   },\"}}",
            "message_norm":"bug fix: special characters in password are not escaped\n\nhttps:\/\/github.com\/sequelize\/cli\/issues\/172 is stil open when special characters find their way in a password",
            "language":"en",
            "entities":"[('bug', 'FLAW', ''), ('password', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('https:\/\/github.com\/sequelize\/cli\/issues\/172', 'URL', ''), ('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/config-helper.js'])",
            "num_files":1.0
        },
        {
            "index":80,
            "vuln_id":"GHSA-2cfc-865j-gm4w",
            "cwe_id":"{'CWE-611'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/detekt\/detekt\/commit\/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395'}",
            "dataset":"osv",
            "summary":"XML External Entity Reference in detekt Improper Restriction of XML External Entity Reference in GitHub repository detekt\/detekt prior to 1.20.0.",
            "published_date":"2022-04-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/detekt\/detekt",
            "commit_href":"https:\/\/github.com\/detekt\/detekt\/commit\/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
            "commit_sha":"c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
            "patch":"SINGLE",
            "chain_ord":"['c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395']",
            "before_first_fix_commit":"{'08eac68caa24ced140cc017d4de3b258a470232b'}",
            "last_fix_commit":"c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/18\/2022, 17:21:06",
            "message":"Parse Baseline in a secure way (#4499)",
            "author":"Brais Gab\u00edn",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'detekt-core\/src\/main\/kotlin\/io\/gitlab\/arturbosch\/detekt\/core\/baseline\/BaselineFormat.kt': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/detekt\/detekt\/raw\/c965a8d2a6bbdb9bcfc6acfa7bbffd3da81f5395\/detekt-core%2Fsrc%2Fmain%2Fkotlin%2Fio%2Fgitlab%2Farturbosch%2Fdetekt%2Fcore%2Fbaseline%2FBaselineFormat.kt', 'patch': '@@ -3,6 +3,7 @@ package io.gitlab.arturbosch.detekt.core.baseline\\n import org.xml.sax.SAXParseException\\n import java.nio.file.Files\\n import java.nio.file.Path\\n+import javax.xml.XMLConstants\\n import javax.xml.parsers.SAXParserFactory\\n import javax.xml.stream.XMLStreamException\\n import javax.xml.stream.XMLStreamWriter\\n@@ -17,7 +18,11 @@ internal class BaselineFormat {\\n     fun read(path: Path): Baseline {\\n         try {\\n             Files.newInputStream(path).use {\\n-                val reader = SAXParserFactory.newInstance().newSAXParser()\\n+                val reader = SAXParserFactory.newInstance()\\n+                    .apply {\\n+                        setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)\\n+                    }\\n+                    .newSAXParser()\\n                 val handler = BaselineHandler()\\n                 reader.parse(it, handler)\\n                 return handler.createBaseline()'}}",
            "message_norm":"parse baseline in a secure way (#4499)",
            "language":"en",
            "entities":"[('secure', 'SECWORD', ''), ('#4499', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['detekt-core\/src\/main\/kotlin\/io\/gitlab\/arturbosch\/detekt\/core\/baseline\/BaselineFormat.kt'])",
            "num_files":1.0
        },
        {
            "index":3425,
            "vuln_id":"GHSA-xg6r-5gx4-qxjm",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/invoiceninja\/invoiceninja\/commit\/1186eaa82375692d01d5ef3369c5b7bc7315b55f'}",
            "dataset":"osv",
            "summary":"invoiceninja is vulnerable to Cross-site Scripting invoiceninja is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/invoiceninja\/invoiceninja",
            "commit_href":"https:\/\/github.com\/invoiceninja\/invoiceninja\/commit\/1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "commit_sha":"1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "patch":"SINGLE",
            "chain_ord":"['1186eaa82375692d01d5ef3369c5b7bc7315b55f']",
            "before_first_fix_commit":"{'ac194665de6728e4091f273ef2e01b4c48369fcd'}",
            "last_fix_commit":"1186eaa82375692d01d5ef3369c5b7bc7315b55f",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/10\/2021, 03:00:22",
            "message":"Fixes for client password reset",
            "author":"David Bomba",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 6, 'total': 13}",
            "files":"{'app\/Http\/Controllers\/Auth\/ContactForgotPasswordController.php': {'additions': 7, 'deletions': 6, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/invoiceninja\/invoiceninja\/raw\/1186eaa82375692d01d5ef3369c5b7bc7315b55f\/app%2FHttp%2FControllers%2FAuth%2FContactForgotPasswordController.php', 'patch': \"@@ -93,14 +93,15 @@ public function broker()\\n \\n     public function sendResetLinkEmail(ContactPasswordResetRequest $request)\\n     {\\n-\\n-        if(Ninja::isHosted() && $request->session()->has('company_key'))\\n-            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));\\n+        if(Ninja::isHosted() && $request->has('company_key'))\\n+            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));\\n         \\n         $this->validateEmail($request);\\n \\n-        $company = Company::where('company_key', $request->session()->get('company_key'))->first();\\n-        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\\n+        \/\/ $company = Company::where('company_key', $request->input('company_key'))->first();\\n+        \/\/ $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\\n+\\n+        $contact = ClientContact::where(['email' => $request->input('email')])->first();\\n \\n         $response = false;\\n \\n@@ -117,7 +118,7 @@ public function sendResetLinkEmail(ContactPasswordResetRequest $request)\\n             return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);\\n \\n         \/\/ We will send the password reset link to this user. Once we have attempted\\n-        \/\/ to send the link, we will examine the response then see the message we\\n+        \/\/ to send the link, we will examine thuser@example.ce response then see the message we\\n         \/\/ need to show to the user. Finally, we'll send out a proper response.\\n         \/\/ $response = $this->broker()->sendResetLink(\\n         \/\/     $this->credentials($request)\"}}",
            "message_norm":"fixes for client password reset",
            "language":"en",
            "entities":"[('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/Auth\/ContactForgotPasswordController.php'])",
            "num_files":1.0
        },
        {
            "index":2045,
            "vuln_id":"GHSA-hf2m-j98r-4fqw",
            "cwe_id":"{'CWE-287'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/NodeBB\/NodeBB\/commit\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500'}",
            "dataset":"osv",
            "summary":"API token verification can be bypassed in NodeBB  ### Impact\nIncorrect logic present in the token verification step unintentionally allowed master token access to the API.\n\n### Patches\nThe vulnerability has been patch as of v1.18.5.\n\n### Workarounds\nCherry-pick commit hash 04dab1d550cdebf4c1567bca9a51f8b9ca48a500 to receive this patch in lieu of a full upgrade.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@nodebb.org](mailto:security@nodebb.org)",
            "published_date":"2021-11-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/NodeBB\/NodeBB",
            "commit_href":"https:\/\/github.com\/NodeBB\/NodeBB\/commit\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "commit_sha":"04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "patch":"SINGLE",
            "chain_ord":"['04dab1d550cdebf4c1567bca9a51f8b9ca48a500']",
            "before_first_fix_commit":"{'1783f918bc19568f421473824461ff2ed7755e4c'}",
            "last_fix_commit":"04dab1d550cdebf4c1567bca9a51f8b9ca48a500",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/25\/2021, 17:23:54",
            "message":"fix: token verify",
            "author":"Bar\u0131\u015f Soner U\u015fakl\u0131",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 7, 'total': 10}",
            "files":"{'src\/routes\/authentication.js': {'additions': 3, 'deletions': 7, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NodeBB\/NodeBB\/raw\/04dab1d550cdebf4c1567bca9a51f8b9ca48a500\/src%2Froutes%2Fauthentication.js', 'patch': \"@@ -44,13 +44,9 @@ Auth.getLoginStrategies = function () {\\n };\\n \\n Auth.verifyToken = async function (token, done) {\\n-\\tlet { tokens = [] } = await meta.settings.get('core.api');\\n-\\ttokens = tokens.reduce((memo, cur) => {\\n-\\t\\tmemo[cur.token] = cur.uid;\\n-\\t\\treturn memo;\\n-\\t}, {});\\n-\\n-\\tconst uid = tokens[token];\\n+\\tconst { tokens = [] } = await meta.settings.get('core.api');\\n+\\tconst tokenObj = tokens.find(t => t.token === token);\\n+\\tconst uid = tokenObj ? tokenObj.uid : undefined;\\n \\n \\tif (uid !== undefined) {\\n \\t\\tif (parseInt(uid, 10) > 0) {\"}}",
            "message_norm":"fix: token verify",
            "language":"no",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/routes\/authentication.js'])",
            "num_files":1.0
        },
        {
            "index":13,
            "vuln_id":"GHSA-23hm-7w47-xw72",
            "cwe_id":"{'CWE-125'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/23968a8bf65b009120c43b5ebcceaf52dbc9e943'}",
            "dataset":"osv",
            "summary":"Out of bounds read in Tensorflow ### Impact \nThe [implementation of `Dequantize`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/dequantize_op.cc#L92-L153) does not fully validate the value of `axis` and can result in heap OOB accesses:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=tf.constant([1,1],dtype=tf.qint32),\n    min_range=[1.0],\n    max_range=[10.0],\n    mode='MIN_COMBINED',\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\ntest()\n```\n\nThe `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor:\n    \n```cc   \n  if (axis_ > -1) {\n    num_slices = input.dim_size(axis_);\n  }\n  \/\/ ...\n  int64_t pre_dim = 1, post_dim = 1;\n  for (int i = 0; i < axis_; ++i) {\n    pre_dim *= float_output.dim_size(i);\n  }\n  for (int i = axis_ + 1; i < float_output.dims(); ++i) {\n    post_dim *= float_output.dim_size(i);\n  }\n``` \n      \n### Patches\nWe have patched the issue in GitHub commit [23968a8bf65b009120c43b5ebcceaf52dbc9e943](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/23968a8bf65b009120c43b5ebcceaf52dbc9e943).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n      \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/23968a8bf65b009120c43b5ebcceaf52dbc9e943",
            "commit_sha":"23968a8bf65b009120c43b5ebcceaf52dbc9e943",
            "patch":"SINGLE",
            "chain_ord":"['23968a8bf65b009120c43b5ebcceaf52dbc9e943']",
            "before_first_fix_commit":"{'566576746f47ebf42c38ebe01cca6dbb8832a9ef'}",
            "last_fix_commit":"23968a8bf65b009120c43b5ebcceaf52dbc9e943",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/20\/2021, 07:16:11",
            "message":"Fix out of bound access in DequantizeOp by adding check for axis < input dimension\n\nPiperOrigin-RevId: 411214268\nChange-Id: I3249d2a69ddc82f182c589a3a5bbfb71543f4b29",
            "author":"Isha Arkatkar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/dequantize_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/23968a8bf65b009120c43b5ebcceaf52dbc9e943\/tensorflow%2Fcore%2Fkernels%2Fdequantize_op.cc', 'patch': '@@ -94,6 +94,11 @@ class DequantizeOp : public OpKernel {\\n     const Tensor& input_min_tensor = ctx->input(1);\\n     const Tensor& input_max_tensor = ctx->input(2);\\n \\n+    OP_REQUIRES(\\n+        ctx, axis_ < input.dims(),\\n+        errors::InvalidArgument(\"Axis must be less than input dimension(\",\\n+                                input.dims(), \"), got \", axis_));\\n+\\n     int num_slices = 1;\\n     if (axis_ > -1) {\\n       num_slices = input.dim_size(axis_);'}}",
            "message_norm":"fix out of bound access in dequantizeop by adding check for axis < input dimension\n\npiperorigin-revid: 411214268\nchange-id: i3249d2a69ddc82f182c589a3a5bbfb71543f4b29",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bound access', 'SECWORD', ''), ('adding', 'ACTION', ''), ('411214268', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/dequantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1175,
            "vuln_id":"GHSA-896r-f27r-55mw",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/kriszyp\/json-schema\/commit\/b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/22f146111f541d9737e832823699ad3528ca7741', 'https:\/\/github.com\/kriszyp\/json-schema\/commit\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa'}",
            "dataset":"osv",
            "summary":"json-schema is vulnerable to Prototype Pollution json-schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').",
            "published_date":"2021-11-19",
            "chain_len":3,
            "project":"https:\/\/github.com\/kriszyp\/json-schema",
            "commit_href":"https:\/\/github.com\/kriszyp\/json-schema\/commit\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "commit_sha":"f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "patch":"MULTI",
            "chain_ord":"['22f146111f541d9737e832823699ad3528ca7741', 'b62f1da1ff5442f23443d6be6a92d00e65cba93a', 'f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa']",
            "before_first_fix_commit":"{'ef60987a9a14b9d9c739384460044ba53cd9b9a2'}",
            "last_fix_commit":"f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa",
            "chain_ord_pos":3.0,
            "commit_datetime":"11\/02\/2021, 02:47:49",
            "message":"Use a little more robust method of checking instances",
            "author":"Kris Zyp",
            "comments":"{'com_1': {'author': 'JamieSlome', 'datetime': '11\/02\/2021, 10:48:47', 'body': '@kriszyp - just to confirm, does this fix the report submitted by the researcher [here](https:\/\/huntr.dev\/bounties\/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\/)?'}, 'com_2': {'author': 'kriszyp', 'datetime': '11\/02\/2021, 11:20:36', 'body': '> does this fix the report submitted by the researcher here?\\r\\n\\r\\nYes, along with https:\/\/github.com\/kriszyp\/json-schema\/commit\/22f146111f541d9737e832823699ad3528ca7741, that is intended to fix that security issue.'}, 'com_3': {'author': 'JamieSlome', 'datetime': '11\/02\/2021, 12:10:20', 'body': '@kriszyp - thanks for the heads up! Are you able to confirm this on the report, and we can go ahead and publish a CVE \/ make the report public?\\r\\n\\r\\n(cc @yoshino-s)'}, 'com_4': {'author': 'kriszyp', 'datetime': '11\/09\/2021, 02:04:23', 'body': 'Yes, I have published the updated version with the fix.'}, 'com_5': {'author': 'JamieSlome', 'datetime': '11\/09\/2021, 07:55:24', 'body': '@kriszyp - could you update this on the report: https:\/\/huntr.dev\/bounties\/bb6ccd63-f505-4e3a-b55f-cd2662c261a9\/\\r\\n\\r\\nYou can also decide if you would like to keep the bounty for yourself or return it to the prize pot \ud83d\udc4c'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/validate.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kriszyp\/json-schema\/raw\/f6f6a3b02d667aa4ba2d5d50cc19208c4462abfa\/lib%2Fvalidate.js', 'patch': \"@@ -208,7 +208,7 @@ var validate = exports._validate = function(\/*Any*\/instance,\/*Object*\/schema,\/*O\\n \\t\\t\\t\\n \\t\\t\\tfor(var i in objTypeDef){ \\n \\t\\t\\t\\tif(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){\\n-\\t\\t\\t\\t\\tvar value = instance[i];\\n+\\t\\t\\t\\t\\tvar value = instance.hasOwnProperty(i) ? instance[i] : undefined;\\n \\t\\t\\t\\t\\t\/\/ skip _not_ specified properties\\n \\t\\t\\t\\t\\tif (value === undefined && options.existingOnly) continue;\\n \\t\\t\\t\\t\\tvar propDef = objTypeDef[i];\"}}",
            "message_norm":"use a little more robust method of checking instances",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/validate.js'])",
            "num_files":1.0
        },
        {
            "index":573,
            "vuln_id":"GHSA-57f3-gghm-9mhc",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/MrRio\/jsPDF\/commit\/d8bb3b39efcd129994f7a3b01b632164144ec43e'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service (ReDoS) This affects the package jspdf before 2.3.1. ReDoS is possible via the addImage function.",
            "published_date":"2021-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/MrRio\/jsPDF",
            "commit_href":"https:\/\/github.com\/MrRio\/jsPDF\/commit\/d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "commit_sha":"d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "patch":"SINGLE",
            "chain_ord":"['d8bb3b39efcd129994f7a3b01b632164144ec43e']",
            "before_first_fix_commit":"{'c91995de97c598deaf6fda7109ea886a50f50109'}",
            "last_fix_commit":"d8bb3b39efcd129994f7a3b01b632164144ec43e",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2021, 15:50:17",
            "message":"fix ReDoS-vulnerable regexp in addImage (#3091)",
            "author":"Yeting Li",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/modules\/addimage.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/parallax\/jsPDF\/raw\/d8bb3b39efcd129994f7a3b01b632164144ec43e\/src%2Fmodules%2Faddimage.js', 'patch': '@@ -630,7 +630,7 @@ import { atob, btoa } from \"..\/libs\/AtobBtoa.js\";\\n     var result = null;\\n \\n     if (dataUrlParts.length === 2) {\\n-      var extractedInfo = \/^data:(\\\\w*\\\\\/\\\\w*);*(charset=[\\\\w=-]*)*;*$\/.exec(\\n+      var extractedInfo = \/^data:(\\\\w*\\\\\/\\\\w*);*(charset=(?!charset=)[\\\\w=-]*)*;*$\/.exec(\\n         dataUrlParts[0]\\n       );\\n       if (Array.isArray(extractedInfo)) {'}}",
            "message_norm":"fix redos-vulnerable regexp in addimage (#3091)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('#3091', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/modules\/addimage.js'])",
            "num_files":1.0
        },
        {
            "index":754,
            "vuln_id":"GHSA-65f3-3278-7m65",
            "cwe_id":"{'CWE-285', 'CWE-863'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/gogs\/gogs\/commit\/64102be2c90e1b47dbdd379873ba76c80d4b0e78'}",
            "dataset":"osv",
            "summary":"Improper Authorization in Gogs ### Impact\n\nExpired PAM accounts and accounts with expired passwords are continued to be seen as valid. Installations use PAM as authentication sources are affected.\n\n### Patches\n\nExpired PAM accounts and accounts with expired passwords are no longer being seen as valid. Users should upgrade to 0.12.5 or the latest 0.13.0+dev.\n\n### Workarounds\n\nIn addition to marking PAM accounts as expired, also disable\/lock them. Running `usermod -L <username>` will add an exclamation mark to the password hash and would result in wrong passwords responses when trying to login. \n\n### References\n\nhttps:\/\/huntr.dev\/bounties\/ea82cfc9-b55c-41fe-ae58-0d0e0bd7ab62\/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on https:\/\/github.com\/gogs\/gogs\/issues\/6810.",
            "published_date":"2022-03-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/gogs\/gogs",
            "commit_href":"https:\/\/github.com\/gogs\/gogs\/commit\/64102be2c90e1b47dbdd379873ba76c80d4b0e78",
            "commit_sha":"64102be2c90e1b47dbdd379873ba76c80d4b0e78",
            "patch":"SINGLE",
            "chain_ord":"['64102be2c90e1b47dbdd379873ba76c80d4b0e78']",
            "before_first_fix_commit":"{'91f2cde5e95f146bfe4765e837e7282df6c7cabb'}",
            "last_fix_commit":"64102be2c90e1b47dbdd379873ba76c80d4b0e78",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/08\/2022, 12:02:01",
            "message":"security: fix improper PAM authorization handling (#6819)\n\nCo-authored-by: Joe Chen <jc@unknwon.io>\n# Conflicts:\n#\tCHANGELOG.md\n#\tinternal\/auth\/pam\/pam.go",
            "author":"ysf",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 3, 'total': 6}",
            "files":"{'internal\/auth\/pam\/pam.go': {'additions': 3, 'deletions': 3, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gogs\/gogs\/raw\/64102be2c90e1b47dbdd379873ba76c80d4b0e78\/internal%2Fauth%2Fpam%2Fpam.go', 'patch': '@@ -27,9 +27,9 @@ func PAMAuth(serviceName, userName, passwd string) error {\\n \\t\\treturn err\\n \\t}\\n \\n-\\tif err = t.Authenticate(0); err != nil {\\n+\\terr = t.Authenticate(0)\\n+\\tif err != nil {\\n \\t\\treturn err\\n \\t}\\n-\\n-\\treturn nil\\n+\\treturn t.AcctMgmt(0)\\n }'}}",
            "message_norm":"security: fix improper pam authorization handling (#6819)\n\nco-authored-by: joe chen <jc@unknwon.io>\n# conflicts:\n#\tchangelog.md\n#\tinternal\/auth\/pam\/pam.go",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('#6819', 'ISSUE', ''), ('jc@unknwon.io', 'EMAIL', ''), ('auth', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['internal\/auth\/pam\/pam.go'])",
            "num_files":1.0
        },
        {
            "index":955,
            "vuln_id":"GHSA-74qp-233x-p5j8",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/apache\/incubator-livy\/commit\/4d8a912699683b973eee76d4e91447d769a0cb0d'}",
            "dataset":"osv",
            "summary":"Cross-site scripting (XSS) in Apache Livy Livy server version 0.7.0-incubating (only) is vulnerable to a cross site scripting issue in the session name. A malicious user could use this flaw to access logs and results of other users' sessions and run jobs with their privileges. This issue is fixed in Livy 0.7.1-incubating.",
            "published_date":"2021-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/incubator-livy",
            "commit_href":"https:\/\/github.com\/apache\/incubator-livy\/commit\/4d8a912699683b973eee76d4e91447d769a0cb0d",
            "commit_sha":"4d8a912699683b973eee76d4e91447d769a0cb0d",
            "patch":"SINGLE",
            "chain_ord":"['4d8a912699683b973eee76d4e91447d769a0cb0d']",
            "before_first_fix_commit":"{'97cf2f75929ef6c152afc468adbead269bd0758f'}",
            "last_fix_commit":"4d8a912699683b973eee76d4e91447d769a0cb0d",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/15\/2020, 00:25:54",
            "message":"Add html escape to session name\n\n## What changes were proposed in this pull request?\n\nThe PR adds HTML escaping to session names.\n\n## How was this patch tested?\n\nManual test.\n\nAuthor: Marco Gaido <mgaido@apache.org>\n\nCloses #302 from mgaido91\/escape_html.",
            "author":"Marco Gaido",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 3, 'total': 10}",
            "files":"{'server\/src\/main\/resources\/org\/apache\/livy\/server\/ui\/static\/js\/all-sessions.js': {'additions': 7, 'deletions': 3, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/incubator-livy\/raw\/4d8a912699683b973eee76d4e91447d769a0cb0d\/server%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Flivy%2Fserver%2Fui%2Fstatic%2Fjs%2Fall-sessions.js', 'patch': '@@ -15,13 +15,17 @@\\n  * limitations under the License.\\n  *\/\\n \\n+function escapeHtml(unescapedText) {\\n+  return $(\"<div>\").text(unescapedText).html()\\n+}\\n+\\n function loadSessionsTable(sessions) {\\n   $.each(sessions, function(index, session) {\\n     $(\"#interactive-sessions .sessions-table-body\").append(\\n       \"<tr>\" +\\n         tdWrap(uiLink(\"session\/\" + session.id, session.id)) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.kind) +\\n@@ -38,7 +42,7 @@ function loadBatchesTable(sessions) {\\n       \"<tr>\" +\\n         tdWrap(session.id) +\\n         tdWrap(appIdLink(session)) +\\n-        tdWrap(session.name) +\\n+        tdWrap(escapeHtml(session.name)) +\\n         tdWrap(session.owner) +\\n         tdWrap(session.proxyUser) +\\n         tdWrap(session.state) +\\n@@ -79,4 +83,4 @@ $(document).ready(function () {\\n       $(\"#all-sessions\").append(\\'<h4>No Sessions or Batches have been created yet.<\/h4>\\');\\n     }\\n   });\\n-});\\n\\\\ No newline at end of file\\n+});'}}",
            "message_norm":"add html escape to session name\n\n## what changes were proposed in this pull request?\n\nthe pr adds html escaping to session names.\n\n## how was this patch tested?\n\nmanual test.\n\nauthor: marco gaido <mgaido@apache.org>\n\ncloses #302 from mgaido91\/escape_html.",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('escape', 'SECWORD', ''), ('adds', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('mgaido@apache.org', 'EMAIL', ''), ('#302', 'ISSUE', ''), ('escape_html', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/src\/main\/resources\/org\/apache\/livy\/server\/ui\/static\/js\/all-sessions.js'])",
            "num_files":1.0
        },
        {
            "index":792,
            "vuln_id":"GHSA-694p-xrhg-x3wm",
            "cwe_id":"{'CWE-444'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add'}",
            "dataset":"osv",
            "summary":"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request Header Injection') ### Vulnerability\n\nMicronaut's HTTP client is vulnerable to \"HTTP Request Header Injection\" due to not validating request headers passed to the client.\n\nExample of vulnerable code:\n\n```java\n@Controller(\"\/hello\")\npublic class HelloController {\n\n    @Inject\n    @Client(\"\/\")\n    RxHttpClient client;\n\n    @Get(\"\/external-exploit\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String externalExploit(@QueryValue(\"header-value\") String headerValue) {\n        return client.toBlocking().retrieve(\n            HttpRequest.GET(\"\/hello\")\n                .header(\"Test\", headerValue)\n        );\n    }\n}\n```\n\nIn the above case a query value received from a user is passed as a header value to the client. Since the client doesn't validate the header value the request headers and body have the potential to be manipulated.\n\nFor example, a user that supplies the following payload, can force the client to make multiple attacker-controlled HTTP requests.\n\n```java\nList<String> headerData = List.of(\n    \"Connection: Keep-Alive\", \/\/ This keeps the connection open so another request can be stuffed in.\n    \"\",\n    \"\",\n    \"POST \/hello\/super-secret HTTP\/1.1\",\n    \"Host: 127.0.0.1\",\n    \"Content-Length: 31\",\n    \"\",\n    \"{\\\"new\\\":\\\"json\\\",\\\"content\\\":\\\"here\\\"}\",\n    \"\",\n    \"\"\n);\nString headerValue = \"H\\r\\n\" + String.join(\"\\r\\n\", headerData);;\nURI theURI =\n    UriBuilder\n        .of(\"\/hello\/external-exploit\")\n        .queryParam(\"header-value\", headerValue) \/\/ Automatically URL encodes data\n        .build();\nHttpRequest<String> request = HttpRequest.GET(theURI);\nString body = client.toBlocking().retrieve(request);\n```\n\nNote that using `@HeaderValue` instead of `@QueryValue` is not vulnerable since Micronaut's HTTP server does validate the headers passed to the server, so the exploit can only be triggered by using user data that is not an HTTP header (query values, form data etc.).\n\n### Impact\n\nThe attacker is able to control the entirety of the HTTP body for their custom requests.\nAs such, this vulnerability enables attackers to perform a variant of [Server Side Request Forgery](https:\/\/cwe.mitre.org\/data\/definitions\/918.html).\n\n### Patches\n\nThe problem has been patched in the `micronaut-http-client` versions 1.2.11 and 1.3.2 and above.\n\n### Workarounds\n\nDo not pass user data directly received from HTTP request parameters as headers in the HTTP client.\n\n### References\n\nFix commits\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [micronaut-core](https:\/\/github.com\/micronaut-projects\/micronaut-core)\n* Email us at [info@micronaut.io](mailto:info@micronaut.io)\n\n### Credit\n\nOriginally reported by @JLLeitschuh",
            "published_date":"2020-03-30",
            "chain_len":3,
            "project":"https:\/\/github.com\/micronaut-projects\/micronaut-core",
            "commit_href":"https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "commit_sha":"9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "patch":"MULTI",
            "chain_ord":"['6deb60b75517f80c57b42d935f07955c773b766d', 'bc855e439c4a5ced3d83195bb59d0679cbd95add', '9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1']",
            "before_first_fix_commit":"{'a2392f4289f7777c4a310c3ae3bb4bc0ce5a65c2'}",
            "last_fix_commit":"9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "chain_ord_pos":3.0,
            "commit_datetime":"03\/09\/2020, 18:20:28",
            "message":"Validate client headers",
            "author":"jameskleeh",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'http-netty\/src\/main\/java\/io\/micronaut\/http\/netty\/NettyHttpHeaders.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/raw\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1\/http-netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fmicronaut%2Fhttp%2Fnetty%2FNettyHttpHeaders.java', 'patch': '@@ -53,7 +53,7 @@ public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, Co\\n      * Default constructor.\\n      *\/\\n     public NettyHttpHeaders() {\\n-        this.nettyHeaders = new DefaultHttpHeaders(false);\\n+        this.nettyHeaders = new DefaultHttpHeaders();\\n         this.conversionService = ConversionService.SHARED;\\n     }'}}",
            "message_norm":"validate client headers",
            "language":"nl",
            "entities":"[('validate', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['http-netty\/src\/main\/java\/io\/micronaut\/http\/netty\/NettyHttpHeaders.java'])",
            "num_files":1.0
        },
        {
            "index":1608,
            "vuln_id":"GHSA-cv3v-7846-6pxm",
            "cwe_id":"{'CWE-552'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/gabrielcsapo\/node-git-server\/commit\/ac26650f69bc445d71e4f2c55328676d10a4be43'}",
            "dataset":"osv",
            "summary":"Unauthorized File Access in node-git-server Versions of `node-git-server` prior to 0.6.1 are vulnerable to Unauthorized File Access. It is possible to access any git repository by using absolute paths, which may allow attackers to access private repositories.\n\n\n## Recommendation\n\nUpgrade to version 0.6.1 or later.",
            "published_date":"2020-09-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/gabrielcsapo\/node-git-server",
            "commit_href":"https:\/\/github.com\/gabrielcsapo\/node-git-server\/commit\/ac26650f69bc445d71e4f2c55328676d10a4be43",
            "commit_sha":"ac26650f69bc445d71e4f2c55328676d10a4be43",
            "patch":"SINGLE",
            "chain_ord":"['ac26650f69bc445d71e4f2c55328676d10a4be43']",
            "before_first_fix_commit":"{'e3ae3737fc9de848856e56a3cf624fe014803f25'}",
            "last_fix_commit":"ac26650f69bc445d71e4f2c55328676d10a4be43",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/29\/2020, 17:45:58",
            "message":"Security Issue (#62)\n\nIt is currently possible to overwrite the `repoDir` by sending a repository name that starts with a \"\/\", the `path.resolve` method prioritizes the second argument see the example below.\r\n\r\npath.resolve(\"\/my\/repo\/folder\",\"\/etc\"); \/\/ \/etc\r\n\r\nThis behavior gives an attacker the ability to create\/write\/pull repositories from an arbitrary absolute path, this issue could also impact authentication in some cases as it corrupts the repository name.",
            "author":"Ron Masas",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/git.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gabrielcsapo\/node-git-server\/raw\/ac26650f69bc445d71e4f2c55328676d10a4be43\/lib%2Fgit.js', 'patch': '@@ -143,7 +143,7 @@ class Git extends EventEmitter {\\n         this.dirMap = repoDir;\\n     } else {\\n         this.dirMap = (dir) => {\\n-            return (path.normalize(dir ? path.resolve(repoDir, dir) : repoDir));\\n+            return (path.normalize(dir ? path.join(repoDir, dir) : repoDir));\\n         };\\n     }'}}",
            "message_norm":"security issue (#62)\n\nit is currently possible to overwrite the `repodir` by sending a repository name that starts with a \"\/\", the `path.resolve` method prioritizes the second argument see the example below.\r\n\r\npath.resolve(\"\/my\/repo\/folder\",\"\/etc\"); \/\/ \/etc\r\n\r\nthis behavior gives an attacker the ability to create\/write\/pull repositories from an arbitrary absolute path, this issue could also impact authentication in some cases as it corrupts the repository name.",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#62', 'ISSUE', ''), ('attacker', 'FLAW', ''), ('issue', 'FLAW', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/git.js'])",
            "num_files":1.0
        },
        {
            "index":3240,
            "vuln_id":"GHSA-w74j-v8xh-3w5h",
            "cwe_id":"{'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in unicode encoding ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_string_ops\n\ngen_string_ops.unicode_encode(\n  input_values=[],\n  input_splits=[],\n  output_encoding='UTF-8',\n  errors='ignore',\n  replacement_char='a')\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/unicode_ops.cc#L533-L539) reads the first dimension of the `input_splits` tensor before validating that this tensor is not empty: \n\n```cc\n  const Tensor& input_splits = context->input(1);\n  const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();\n  TensorShape output_shape({input_splits.dim_size(0) - 1});\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2e0ee46f1a47675152d3d865797a18358881d7a6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6",
            "commit_sha":"2e0ee46f1a47675152d3d865797a18358881d7a6",
            "patch":"SINGLE",
            "chain_ord":"['2e0ee46f1a47675152d3d865797a18358881d7a6']",
            "before_first_fix_commit":"{'9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad'}",
            "last_fix_commit":"2e0ee46f1a47675152d3d865797a18358881d7a6",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 19:30:33",
            "message":"Ensure non-empty input_splits in tf.raw_ops.UnicodeEncode\n\nPiperOrigin-RevId: 387170080\nChange-Id: I3b489acc51c5cb4124c535b9df7cc6e62ef21766",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/unicode_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/2e0ee46f1a47675152d3d865797a18358881d7a6\/tensorflow%2Fcore%2Fkernels%2Funicode_ops.cc', 'patch': '@@ -533,6 +533,10 @@ class UnicodeEncodeOp : public OpKernel {\\n     const Tensor& input_splits = context->input(1);\\n     const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();\\n \\n+    OP_REQUIRES(\\n+        context, input_splits.NumElements() > 0,\\n+        errors::InvalidArgument(\"Input_splits should contain elements, but \"\\n+                                \"given input_values has 0 elements\"));\\n     \/\/ Operation will treat first argument in input_splits as if it were zero\\n     \/\/ regardless of its actual value since splits should begin with zero and\\n     \/\/ end with the length of the input values vector.'}}",
            "message_norm":"ensure non-empty input_splits in tf.raw_ops.unicodeencode\n\npiperorigin-revid: 387170080\nchange-id: i3b489acc51c5cb4124c535b9df7cc6e62ef21766",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('tf.raw_ops.unicodeencode', 'SECWORD', ''), ('387170080', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unicode_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2186,
            "vuln_id":"GHSA-j47f-4232-hvv8",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a'}",
            "dataset":"osv",
            "summary":"Heap out of bounds read in `RaggedCross` ### Impact\nAn attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:\n\n```python\nimport tensorflow as tf\n\nragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    out_row_splits_type=tf.int64)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/efea03b38fb8d3b81762237dc85e579cc5fc6e87\/tensorflow\/core\/kernels\/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:\n\n```cc\nint next_ragged = 0;\nint next_sparse = 0;\nint next_dense = 0;\nfor (char c : input_order_) {\n  if (c == 'R') {\n    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n        features));\n    next_ragged++;\n  } else if (c == 'S') {\n    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n        batch_size, features));\n    next_sparse++;\n  } else if (c == 'D') {\n    TF_RETURN_IF_ERROR(\n        BuildDenseFeatureReader(dense_list[next_dense++], features));\n  }\n  ...\n}\n```\n\nEach of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.\n\n### Patches\nWe have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a",
            "commit_sha":"44b7f486c0143f68b56c34e2d01e146ee445134a",
            "patch":"SINGLE",
            "chain_ord":"['44b7f486c0143f68b56c34e2d01e146ee445134a']",
            "before_first_fix_commit":"{'efea03b38fb8d3b81762237dc85e579cc5fc6e87'}",
            "last_fix_commit":"44b7f486c0143f68b56c34e2d01e146ee445134a",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 23:19:54",
            "message":"Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 30, 'deletions': 0, 'total': 30}",
            "files":"{'tensorflow\/core\/kernels\/ragged_cross_op.cc': {'additions': 30, 'deletions': 0, 'changes': 30, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow%2Fcore%2Fkernels%2Fragged_cross_op.cc', 'patch': '@@ -21,6 +21,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/register_types.h\"\\n #include \"tensorflow\/core\/framework\/tensor.h\"\\n #include \"tensorflow\/core\/framework\/tensor_shape.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/platform\/fingerprint.h\"\\n #include \"tensorflow\/core\/util\/util.h\"\\n #include \"tensorflow\/core\/util\/work_sharder.h\"\\n@@ -466,16 +467,45 @@ class RaggedCrossOp : public OpKernel {\\n     int next_dense = 0;\\n     for (char c : input_order_) {\\n       if (c == \\'R\\') {\\n+        if (next_ragged >= ragged_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor value at index \",\\n+              next_ragged, \" from a list of \", ragged_values_list.size(),\\n+              \" values.\");\\n+        if (next_ragged >= ragged_splits_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor split at index \",\\n+              next_ragged, \" from a list of \", ragged_splits_list.size(),\\n+              \" splits.\");\\n         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\\n             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\\n             features));\\n         next_ragged++;\\n       } else if (c == \\'S\\') {\\n+        if (next_sparse >= sparse_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor value at index \",\\n+              next_sparse, \" from a list of \", sparse_values_list.size(),\\n+              \" values.\");\\n+        if (next_sparse >= sparse_indices_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor index at index \",\\n+              next_sparse, \" from a list of \", sparse_indices_list.size(),\\n+              \" indices.\");\\n         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\\n             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\\n             batch_size, features));\\n         next_sparse++;\\n       } else if (c == \\'D\\') {\\n+        if (next_dense >= dense_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a dense tensor at index \", next_dense,\\n+              \" from a list of \", dense_list.size(), \" tensors.\");\\n         TF_RETURN_IF_ERROR(\\n             BuildDenseFeatureReader(dense_list[next_dense++], features));\\n       } else {'}}",
            "message_norm":"fix out of bounds read in `ragged_cross_op.cc`.\n\npiperorigin-revid: 369757702\nchange-id: ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bounds read', 'SECWORD', ''), ('369757702', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_cross_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1679,
            "vuln_id":"GHSA-f78f-353m-cf4j",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mithunsatheesh\/node-rules\/commit\/100862223904bb6478fcc33b701c7dee11f7b832'}",
            "dataset":"osv",
            "summary":"Code Injection in node-rules node-rules including 3.0.0 and prior to 5.0.0 allows injection of arbitrary commands. The argument rules of function \"fromJSON()\" can be controlled by users without any sanitization.",
            "published_date":"2021-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/mithunsatheesh\/node-rules",
            "commit_href":"https:\/\/github.com\/mithunsatheesh\/node-rules\/commit\/100862223904bb6478fcc33b701c7dee11f7b832",
            "commit_sha":"100862223904bb6478fcc33b701c7dee11f7b832",
            "patch":"SINGLE",
            "chain_ord":"['100862223904bb6478fcc33b701c7dee11f7b832']",
            "before_first_fix_commit":"{'1b07c48336ce30aa6d3b6b3be1850cd292860dbb'}",
            "last_fix_commit":"100862223904bb6478fcc33b701c7dee11f7b832",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/16\/2020, 13:43:37",
            "message":"Remove fromJSON and toJSON from exposed APIs\n\nRemove fromJSON and toJSON from exposed APIs in V5.0.0",
            "author":"Mithun Satheesh",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 31, 'total': 31}",
            "files":"{'lib\/node-rules.js': {'additions': 0, 'deletions': 31, 'changes': 31, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mithunsatheesh\/node-rules\/raw\/100862223904bb6478fcc33b701c7dee11f7b832\/lib%2Fnode-rules.js', 'patch': '@@ -128,36 +128,5 @@\\n         }\\n         this.sync();\\n     }\\n-    RuleEngine.prototype.toJSON = function() {\\n-        var rules = this.rules;\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = rule.condition.toString();\\n-                rule.consequence = rule.consequence.toString();\\n-                return rule;\\n-            });\\n-        } else if (typeof(rules) != \"undefined\") {\\n-            rules.condition = rules.condition.toString();\\n-            rules.consequence = rules.consequence.toString();\\n-        }\\n-        return rules;\\n-    };\\n-    RuleEngine.prototype.fromJSON = function(rules) {\\n-        this.init();\\n-        if (typeof(rules) == \"string\") {\\n-            rules = JSON.parse(rules);\\n-        }\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = eval(\"(\" + rule.condition + \")\");\\n-                rule.consequence = eval(\"(\" + rule.consequence + \")\");\\n-                return rule;\\n-            });\\n-        } else if (rules !== null && typeof(rules) == \"object\") {\\n-            rules.condition = eval(\"(\" + rules.condition + \")\");\\n-            rules.consequence = eval(\"(\" + rules.consequence + \")\");\\n-        }\\n-        this.register(rules);\\n-    };\\n     module.exports = RuleEngine;\\n }(module.exports));'}}",
            "message_norm":"remove fromjson and tojson from exposed apis\n\nremove fromjson and tojson from exposed apis in v5.0.0",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('exposed apis', 'SECWORD', ''), ('exposed apis', 'SECWORD', ''), ('v5.0.0', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/node-rules.js'])",
            "num_files":1.0
        },
        {
            "index":93,
            "vuln_id":"GHSA-2gw2-8q9w-cw8p",
            "cwe_id":"{'CWE-426'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/ffi\/ffi\/commit\/e0fe486df0e117ed67b0282b6ada04b7214ca05c', 'https:\/\/github.com\/ffi\/ffi\/commit\/09e0c6076466b4383da7fa4e13f714311109945a'}",
            "dataset":"osv",
            "summary":"Ruby-ffi has a DLL loading issue  ruby-ffi version 1.9.23 and earlier has a DLL loading issue which can be hijacked on Windows OS, when a Symbol is used as DLL name instead of a String This vulnerability appears to have been fixed in v1.9.24 and later.",
            "published_date":"2018-08-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/ffi\/ffi",
            "commit_href":"https:\/\/github.com\/ffi\/ffi\/commit\/09e0c6076466b4383da7fa4e13f714311109945a",
            "commit_sha":"09e0c6076466b4383da7fa4e13f714311109945a",
            "patch":"MULTI",
            "chain_ord":"['e0fe486df0e117ed67b0282b6ada04b7214ca05c', '09e0c6076466b4383da7fa4e13f714311109945a']",
            "before_first_fix_commit":"{'e0fe486df0e117ed67b0282b6ada04b7214ca05c'}",
            "last_fix_commit":"09e0c6076466b4383da7fa4e13f714311109945a",
            "chain_ord_pos":2.0,
            "commit_datetime":"06\/01\/2018, 20:31:40",
            "message":"Don't search in hardcoded paths on Windows\n\nNative Windows apps don't use \"\/usr\" path to store system dlls.\nIt's even more harm than good to search through these directories,\nsince they are used in Cygwin and it can lead to accidentaly loading\nCygwin DLLs into native Windows apps.\n\nHardcoded paths are disabled for MINGW and MSWIN environments only.\nThey are still present on Cygwin and MSYS2, because these POSIX-API\nbased environments don't use LoadLibrary() but dl_open() to load DLLs.",
            "author":"Lars Kanis",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/ffi\/library.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ffi\/ffi\/raw\/09e0c6076466b4383da7fa4e13f714311109945a\/lib%2Fffi%2Flibrary.rb', 'patch': '@@ -125,7 +125,7 @@ def ffi_lib(*names)\\n                 retry\\n               else\\n                 # TODO better library lookup logic\\n-                unless libname.start_with?(\"\/\")\\n+                unless libname.start_with?(\"\/\") || FFI::Platform.windows?\\n                   path = [\\'\/usr\/lib\/\\',\\'\/usr\/local\/lib\/\\'].find do |pth|\\n                     File.exist?(pth + libname)\\n                   end'}}",
            "message_norm":"don't search in hardcoded paths on windows\n\nnative windows apps don't use \"\/usr\" path to store system dlls.\nit's even more harm than good to search through these directories,\nsince they are used in cygwin and it can lead to accidentaly loading\ncygwin dlls into native windows apps.\n\nhardcoded paths are disabled for mingw and mswin environments only.\nthey are still present on cygwin and msys2, because these posix-api\nbased environments don't use loadlibrary() but dl_open() to load dlls.",
            "language":"en",
            "entities":"[('hardcoded', 'SECWORD', ''), ('hardcoded', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ffi\/library.rb'])",
            "num_files":1.0
        }
    ]
}