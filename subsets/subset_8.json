{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":3007,
            "vuln_id":"GHSA-rrx2-r989-2c43",
            "cwe_id":"{'CWE-190'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e952a89b7026b98fe8cbe626514a93ed68b7c510'}",
            "dataset":"osv",
            "summary":"Integer overflows in Tensorflow ### Impact \nThe [implementations of `Sparse*Cwise*` ops](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    dense=np.array([4]))\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n\n### Patches\nWe have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e952a89b7026b98fe8cbe626514a93ed68b7c510).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1b54cadd19391b60b6fcccd8d076426f7221d5e8",
            "commit_sha":"1b54cadd19391b60b6fcccd8d076426f7221d5e8",
            "patch":"MULTI",
            "chain_ord":"['1b54cadd19391b60b6fcccd8d076426f7221d5e8', 'e952a89b7026b98fe8cbe626514a93ed68b7c510']",
            "before_first_fix_commit":"{'1b54cadd19391b60b6fcccd8d076426f7221d5e8'}",
            "last_fix_commit":"e952a89b7026b98fe8cbe626514a93ed68b7c510",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/10\/2021, 17:46:39",
            "message":"Add missing validation to sparse dense cwise ops.\n\nPiperOrigin-RevId: 415543133\nChange-Id: I5baf3284e919338afb96178c468ad3d3cb0d956c",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1b54cadd19391b60b6fcccd8d076426f7221d5e8\/tensorflow%2Fcore%2Fkernels%2Fsparse_dense_binary_op_shared.cc', 'patch': '@@ -78,11 +78,24 @@ class SparseDenseBinaryOpShared : public OpKernel {\\n                     \"but received shapes: \",\\n                     values_t->shape().DebugString(), \" and \",\\n                     shape_t->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, TensorShapeUtils::IsVector(shape_t->shape()),\\n+        errors::InvalidArgument(\"Input sp_shape must be a vector. Got: \",\\n+                                shape_t->shape().DebugString()));\\n     OP_REQUIRES(\\n         ctx, values_t->dim_size(0) == indices_t->dim_size(0),\\n         errors::InvalidArgument(\\n             \"The first dimension of values and indices should match. (\",\\n             values_t->dim_size(0), \" vs. \", indices_t->dim_size(0), \")\"));\\n+    OP_REQUIRES(\\n+        ctx, shape_t->shape().dim_size(0) == indices_t->shape().dim_size(1),\\n+        errors::InvalidArgument(\\n+            \"Number of dimensions must match second dimension of indices. \",\\n+            \"Got \", shape_t->shape().dim_size(0),\\n+            \" dimensions, indices shape: \", indices_t->shape().DebugString()));\\n+    OP_REQUIRES(ctx, shape_t->NumElements() > 0,\\n+                errors::InvalidArgument(\\n+                    \"The shape argument requires at least one element.\"));\\n \\n     const auto indices_mat = indices_t->matrix<int64_t>();\\n     const auto shape_vec = shape_t->vec<int64_t>();'}}",
            "message_norm":"add missing validation to sparse dense cwise ops.\n\npiperorigin-revid: 415543133\nchange-id: i5baf3284e919338afb96178c468ad3d3cb0d956c",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('missing validation', 'SECWORD', ''), ('415543133', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_dense_binary_op_shared.cc'])",
            "num_files":1.0
        },
        {
            "index":3273,
            "vuln_id":"GHSA-wg6g-ppvx-927h",
            "cwe_id":"{'CWE-1321'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/ashaffer\/cached-path-relative\/commit\/40c73bf70c58add5aec7d11e4f36b93d144bb760'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in cached-path-relative The package cached-path-relative before 1.1.0 is vulnerable to Prototype Pollution via the cache variable that is set as {} instead of Object.create(null) in the cachedPathRelative function, which allows access to the parent prototype properties when the object is used to create the cached relative path. When using the origin path as __proto__, the attribute of the object is accessed instead of a path. **Note:** This vulnerability derives from an incomplete fix in https:\/\/security.snyk.io\/vuln\/SNYK-JS-CACHEDPATHRELATIVE-72573",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/ashaffer\/cached-path-relative",
            "commit_href":"https:\/\/github.com\/ashaffer\/cached-path-relative\/commit\/40c73bf70c58add5aec7d11e4f36b93d144bb760",
            "commit_sha":"40c73bf70c58add5aec7d11e4f36b93d144bb760",
            "patch":"SINGLE",
            "chain_ord":"['40c73bf70c58add5aec7d11e4f36b93d144bb760']",
            "before_first_fix_commit":"{'dfc753a020508cf42cde98024c68bf16bed12edc'}",
            "last_fix_commit":"40c73bf70c58add5aec7d11e4f36b93d144bb760",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/19\/2022, 19:12:34",
            "message":"Fix other instances of prototype pollution vulnerability",
            "author":"Andrew",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'lib\/index.js': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ashaffer\/cached-path-relative\/raw\/40c73bf70c58add5aec7d11e4f36b93d144bb760\/lib%2Findex.js', 'patch': '@@ -27,15 +27,15 @@ function cachedPathRelative (from, to) {\\n   \/\/ to invalidate the cache\\n   var cwd = process.cwd()\\n   if (cwd !== lastCwd) {\\n-    cache = {}\\n+    cache = Object.create(null)\\n     lastCwd = cwd\\n   }\\n \\n   if (cache[from] && cache[from][to]) return cache[from][to]\\n \\n   var result = relative.call(path, from, to)\\n \\n-  cache[from] = cache[from] || {}\\n+  cache[from] = cache[from] || Object.create(null)\\n   cache[from][to] = result\\n \\n   return result'}}",
            "message_norm":"fix other instances of prototype pollution vulnerability",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('prototype pollution', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1254,
            "vuln_id":"GHSA-8rq8-f485-7v8x",
            "cwe_id":"{'CWE-502'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd'}",
            "dataset":"osv",
            "summary":"rpc.py 0.6.0 vulnerable to Deserialization of Untrusted Data rpc.py through 0.6.0 allows Remote Code Execution because an unpickle occurs when the \"serializer: pickle\" HTTP header is sent. In other words, although JSON (not Pickle) is the default data format, an unauthenticated client can cause the data to be processed with unpickle.\n\n[Per the maintainer](https:\/\/github.com\/abersheeran\/rpc.py\/issues\/22), rpc.py is not designed for an API that is open to the outside world, and external requests cannot reach rpc.py in real world use.\n\nA [fix](https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd) exists on the `master` branch. As a workaround, use the following code to turn off pickle in older versions:\n```\ndel SERIALIZER_NAMES[PickleSerializer.name]\ndel SERIALIZER_TYPES[PickleSerializer.content_type]",
            "published_date":"2022-07-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/abersheeran\/rpc.py",
            "commit_href":"https:\/\/github.com\/abersheeran\/rpc.py\/commit\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "commit_sha":"491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "patch":"SINGLE",
            "chain_ord":"['491e7a841ed9a754796d6ab047a9fb16e23bf8bd']",
            "before_first_fix_commit":"{'3d5c31916a597f8bdd3260c50d6ec398da1c421c'}",
            "last_fix_commit":"491e7a841ed9a754796d6ab047a9fb16e23bf8bd",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/06\/2022, 04:55:59",
            "message":"PickleSerializer is turned off by default",
            "author":"Aber",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 2, 'total': 9}",
            "files":"{'rpcpy\/serializers.py': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/abersheeran\/rpc.py\/raw\/491e7a841ed9a754796d6ab047a9fb16e23bf8bd\/rpcpy%2Fserializers.py', 'patch': '@@ -108,16 +108,21 @@ def decode(self, data: bytes) -> typing.Any:\\n         return cbor.loads(data)\\n \\n \\n+# Since the release of pickle to the external network may lead to\\n+# arbitrary code execution vulnerabilities, this serialization\\n+# method is not enabled by default. It is recommended to turn it on\\n+# when there is physical isolation from the outside.\\n+\\n SERIALIZER_NAMES = {\\n     JSONSerializer.name: JSONSerializer(),\\n-    PickleSerializer.name: PickleSerializer(),\\n+    # PickleSerializer.name: PickleSerializer(),\\n     MsgpackSerializer.name: MsgpackSerializer(),\\n     CBORSerializer.name: CBORSerializer(),\\n }\\n \\n SERIALIZER_TYPES = {\\n     JSONSerializer.content_type: JSONSerializer(),\\n-    PickleSerializer.content_type: PickleSerializer(),\\n+    # PickleSerializer.content_type: PickleSerializer(),\\n     MsgpackSerializer.content_type: MsgpackSerializer(),\\n     CBORSerializer.content_type: CBORSerializer(),\\n }'}}",
            "message_norm":"pickleserializer is turned off by default",
            "language":"en",
            "entities":"[('pickleserializer', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['rpcpy\/serializers.py'])",
            "num_files":1.0
        },
        {
            "index":3363,
            "vuln_id":"GHSA-x4g7-fvjj-prg8",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cfa91be9863a91d5105a3b4941096044ab32036b'}",
            "dataset":"osv",
            "summary":"Division by 0 in `QuantizedConv2D` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedConv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)\n```\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/00e9a4d67d76703fa1aee33dac582acf317e0e81\/tensorflow\/core\/kernels\/quantized_conv_ops.cc#L257-L259) does a division by a quantity that is controlled by the caller: \n\n```cc\nconst int filter_value_count = filter_width * filter_height * input_depth;\nconst int64 patches_per_chunk = kMaxChunkSize \/ (filter_value_count * sizeof(T1));\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [cfa91be9863a91d5105a3b4941096044ab32036b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cfa91be9863a91d5105a3b4941096044ab32036b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/cfa91be9863a91d5105a3b4941096044ab32036b",
            "commit_sha":"cfa91be9863a91d5105a3b4941096044ab32036b",
            "patch":"SINGLE",
            "chain_ord":"['cfa91be9863a91d5105a3b4941096044ab32036b']",
            "before_first_fix_commit":"{'00e9a4d67d76703fa1aee33dac582acf317e0e81'}",
            "last_fix_commit":"cfa91be9863a91d5105a3b4941096044ab32036b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 01:58:47",
            "message":"Fix one FPE and remove two CHECK-fails.\n\nPiperOrigin-RevId: 369349640\nChange-Id: I1fedbfc2b5bab635c5cb51f103d7c9176f79831a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 2, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/quantized_conv_ops.cc': {'additions': 11, 'deletions': 2, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/cfa91be9863a91d5105a3b4941096044ab32036b\/tensorflow%2Fcore%2Fkernels%2Fquantized_conv_ops.cc', 'patch': '@@ -18,6 +18,8 @@ limitations under the License.\\n #include <algorithm>\\n #include <vector>\\n \\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n+\\n #define EIGEN_USE_THREADS\\n \\n #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\\n@@ -227,8 +229,12 @@ class Im2ColConvFunctor {\\n       return;\\n     }\\n \\n-    CHECK_GT(output_width, 0);\\n-    CHECK_GT(output_height, 0);\\n+    OP_REQUIRES(\\n+        context, output_width > 0,\\n+        errors::InvalidArgument(\"output_width must be strictly positive\"));\\n+    OP_REQUIRES(\\n+        context, output_height > 0,\\n+        errors::InvalidArgument(\"output_height must be strictly positive\"));\\n     int filter_left_offset;\\n     int filter_top_offset;\\n     if (padding == VALID) {\\n@@ -255,6 +261,9 @@ class Im2ColConvFunctor {\\n     \/\/ by the width, then the height. This is the standard memory order in the\\n     \/\/ image world if it helps to visualize it.\\n     const int filter_value_count = filter_width * filter_height * input_depth;\\n+    OP_REQUIRES(context, filter_value_count > 0,\\n+                errors::InvalidArgument(\\n+                    \"filter patch must contain at least one element\"));\\n     const int64 patches_per_chunk =\\n         kMaxChunkSize \/ (filter_value_count * sizeof(T1));\\n     const int64 chunk_value_count ='}}",
            "message_norm":"fix one fpe and remove two check-fails.\n\npiperorigin-revid: 369349640\nchange-id: i1fedbfc2b5bab635c5cb51f103d7c9176f79831a",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('remove', 'ACTION', ''), ('369349640', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_conv_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":495,
            "vuln_id":"GHSA-4vf2-4xcg-65cx",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Conv2D` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n                               \ntf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)\n```                            \n                               \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/988087bd83f144af14087fe4fecee2d250d93737\/tensorflow\/core\/kernels\/conv_ops.cc#L261-L263) does a division by a quantity that is controlled by the caller:\n```cc\n  const int64 patch_depth = filter.dim_size(2);\n  if (in_depth % patch_depth != 0) { ... }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b12aa1d44352de21d1a6faaf04172d8c2508b42b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "commit_sha":"b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "patch":"SINGLE",
            "chain_ord":"['b12aa1d44352de21d1a6faaf04172d8c2508b42b']",
            "before_first_fix_commit":"{'988087bd83f144af14087fe4fecee2d250d93737'}",
            "last_fix_commit":"b12aa1d44352de21d1a6faaf04172d8c2508b42b",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 01:32:56",
            "message":"Fix one more FPE.\n\nPiperOrigin-RevId: 369346568\nChange-Id: I840fd575962adc879713a4c9cc59e6da3331caa7",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/conv_ops.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b12aa1d44352de21d1a6faaf04172d8c2508b42b\/tensorflow%2Fcore%2Fkernels%2Fconv_ops.cc', 'patch': '@@ -260,6 +260,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\\n     const int64 out_depth = output->dim_size(3);\\n     const int64 patch_depth = filter.dim_size(2);\\n \\n+    if (patch_depth <= 0) {\\n+      ctx->SetStatus(errors::InvalidArgument(\\n+          \"filter depth must be stricly positive, got \", patch_depth));\\n+      return;\\n+    }\\n     if (in_depth % patch_depth != 0) {\\n       ctx->SetStatus(errors::InvalidArgument(\\n           \"input depth must be evenly divisible by filter depth: \", in_depth,\\n@@ -268,6 +273,11 @@ struct LaunchConv2DOp<CPUDevice, T> {\\n     }\\n \\n     const int64 num_groups = in_depth \/ patch_depth;\\n+    if (num_groups <= 0) {\\n+      ctx->SetStatus(errors::InvalidArgument(\\n+          \"number of groups must be stricly positive, got \", num_groups));\\n+      return;\\n+    }\\n     if (out_depth % num_groups != 0 || out_depth < num_groups) {\\n       ctx->SetStatus(errors::InvalidArgument(\\n           \"output depth must be evenly divisible by number of groups: \",\\n@@ -536,6 +546,9 @@ Status ComputeConv2DDimension(const Conv2DParameters& params,\\n               errors::InvalidArgument(\"Patch depth too large\"));\\n   const int in_depth = static_cast<int>(in_depth_raw);\\n   const int patch_depth = static_cast<int>(patch_depth_raw);\\n+  TF_REQUIRES(patch_depth > 0,\\n+              errors::InvalidArgument(\\n+                  \"filter depth must be stricly positive, got \", patch_depth));\\n   TF_REQUIRES(in_depth % patch_depth == 0,\\n               errors::InvalidArgument(\\n                   \"input depth must be evenly divisible by filter depth: \",'}}",
            "message_norm":"fix one more fpe.\n\npiperorigin-revid: 369346568\nchange-id: i840fd575962adc879713a4c9cc59e6da3331caa7",
            "language":"it",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('369346568', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1483,
            "vuln_id":"GHSA-c545-c4f9-rf6v",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257'}",
            "dataset":"osv",
            "summary":"Heap OOB in TFLite ### Impact\nTFLite's [`expand_dims.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data:\n\n```cc\n  if (axis < 0) { \n    axis = input_dims.size + 1 + axis;\n  }   \n  TF_LITE_ENSURE(context, axis <= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i < output_dims->size; ++i) {\n    if (i < axis) {\n      output_dims->data[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims->data[i] = 1;\n    } else {\n      output_dims->data[i] = input_dims.data[i - 1];\n    }\n  }\n```\n\nIf `axis` is a large negative value (e.g., `-100000`), then after the first `if` it would still be negative. The check following the `if` statement will pass and the `for` loop would read one element before the start of `input_dims.data` (when `i = 0`).\n\n### Patches\nWe have patched the issue in GitHub commit [d94ffe08a65400f898241c0374e9edc6fa8ed257](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "commit_sha":"d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "patch":"SINGLE",
            "chain_ord":"['d94ffe08a65400f898241c0374e9edc6fa8ed257']",
            "before_first_fix_commit":"{'e95fc647063378993ec84d41cbbda6dcb60bad4e'}",
            "last_fix_commit":"d94ffe08a65400f898241c0374e9edc6fa8ed257",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 21:42:54",
            "message":"Prevent an OOB read in `expand_dims.cc`\n\nThe for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. If user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in Python one can do `l[-3]` to mean `l[-3 + len(l)]`).\n\nPiperOrigin-RevId: 387200206\nChange-Id: I162f4feba12d547c3a4340833ae682016a2ebfab",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/expand_dims.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d94ffe08a65400f898241c0374e9edc6fa8ed257\/tensorflow%2Flite%2Fkernels%2Fexpand_dims.cc', 'patch': '@@ -37,6 +37,7 @@ TfLiteStatus ExpandTensorDim(TfLiteContext* context, const TfLiteTensor& input,\\n     axis = input_dims.size + 1 + axis;\\n   }\\n   TF_LITE_ENSURE(context, axis <= input_dims.size);\\n+  TF_LITE_ENSURE(context, axis >= 0);\\n \\n   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\\n   for (int i = 0; i < output_dims->size; ++i) {'}}",
            "message_norm":"prevent an oob read in `expand_dims.cc`\n\nthe for loop that follows this check assumes that `axis` is between `0` and `input_dims.size`. if user supplied `axis` is negative, the if code before this check is supposed to bring it back to positive (similar to how in python one can do `l[-3]` to mean `l[-3 + len(l)]`).\n\npiperorigin-revid: 387200206\nchange-id: i162f4feba12d547c3a4340833ae682016a2ebfab",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('oob', 'SECWORD', ''), ('387200206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/expand_dims.cc'])",
            "num_files":1.0
        },
        {
            "index":1126,
            "vuln_id":"GHSA-8462-q7x7-g2x4",
            "cwe_id":"{'CWE-400', 'CWE-185'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mongodb\/js-bson\/commit\/bd61c45157c53a1698ff23770160cf4783e9ea4a'}",
            "dataset":"osv",
            "summary":"High severity vulnerability that affects bson The MongoDB bson JavaScript module (also known as js-bson) versions 0.5.0 to 1.0.x before 1.0.5 is vulnerable to a Regular Expression Denial of Service (ReDoS) in lib\/bson\/decimal128.js. The flaw is triggered when the Decimal128.fromString() function is called to parse a long untrusted string.",
            "published_date":"2018-09-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/mongodb\/js-bson",
            "commit_href":"https:\/\/github.com\/mongodb\/js-bson\/commit\/bd61c45157c53a1698ff23770160cf4783e9ea4a",
            "commit_sha":"bd61c45157c53a1698ff23770160cf4783e9ea4a",
            "patch":"SINGLE",
            "chain_ord":"['bd61c45157c53a1698ff23770160cf4783e9ea4a']",
            "before_first_fix_commit":"{'e403bd94faadee80cd82bae888e28b8b4d6d1e8d'}",
            "last_fix_commit":"bd61c45157c53a1698ff23770160cf4783e9ea4a",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/26\/2018, 20:09:27",
            "message":"fix(decimal128): add basic guard against REDOS attacks\n\nThis is a naive approach to reducing the efficacy of a REDOS attack\nagainst this module. A refactor of the regular expression or a\ncustom parser substitute would be ideal, however this solution\nsuffices as a stopgap until such work is completed.\n\nMany thanks to James Davis who graciously alterted us to the\nattack",
            "author":"Matt Broadstone",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 0, 'total': 7}",
            "files":"{'lib\/bson\/decimal128.js': {'additions': 7, 'deletions': 0, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mongodb\/js-bson\/raw\/bd61c45157c53a1698ff23770160cf4783e9ea4a\/lib%2Fbson%2Fdecimal128.js', 'patch': \"@@ -235,6 +235,13 @@ Decimal128.fromString = function(string) {\\n   \/\/ Trim the string\\n   string = string.trim();\\n \\n+  \/\/ Naively prevent against REDOS attacks.\\n+  \/\/ TODO: implementing a custom parsing for this, or refactoring the regex would yield\\n+  \/\/       further gains.\\n+  if (string.length >= 7000) {\\n+    throw new Error('' + string + ' not a valid Decimal128 string');\\n+  }\\n+\\n   \/\/ Results\\n   var stringMatch = string.match(PARSE_STRING_REGEXP);\\n   var infMatch = string.match(PARSE_INF_REGEXP);\"}}",
            "message_norm":"fix(decimal128): add basic guard against redos attacks\n\nthis is a naive approach to reducing the efficacy of a redos attack\nagainst this module. a refactor of the regular expression or a\ncustom parser substitute would be ideal, however this solution\nsuffices as a stopgap until such work is completed.\n\nmany thanks to james davis who graciously alterted us to the\nattack",
            "language":"en",
            "entities":"[('fix(decimal128', 'ACTION', ''), ('add', 'ACTION', ''), ('redos', 'SECWORD', ''), ('attacks', 'FLAW', ''), ('redos', 'SECWORD', ''), ('attack', 'FLAW', ''), ('attack', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/bson\/decimal128.js'])",
            "num_files":1.0
        },
        {
            "index":566,
            "vuln_id":"GHSA-56wv-2wr9-3h9r",
            "cwe_id":"{'CWE-347'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1', 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/7b64e3efaa806b4daaf73bb5172af3581812f8de', 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/4a16daeaf139be20654ef58a9fe4c79dc030458c'}",
            "dataset":"osv",
            "summary":"Improper Verification of Cryptographic Signature in fastecdsa An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",
            "published_date":"2021-10-12",
            "chain_len":3,
            "project":"https:\/\/github.com\/AntonKueltz\/fastecdsa",
            "commit_href":"https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
            "commit_sha":"e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
            "patch":"MULTI",
            "chain_ord":"['e592f106edd5acf6dacedfab2ad16fe6c735c9d1', '7b64e3efaa806b4daaf73bb5172af3581812f8de', '4a16daeaf139be20654ef58a9fe4c79dc030458c']",
            "before_first_fix_commit":"{'7b64e3efaa806b4daaf73bb5172af3581812f8de'}",
            "last_fix_commit":"4a16daeaf139be20654ef58a9fe4c79dc030458c",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/14\/2020, 09:15:41",
            "message":"Properly handle the point at infinity",
            "author":"AntonKueltz",
            "comments":null,
            "stats":"{'additions': 50, 'deletions': 1, 'total': 51}",
            "files":"{'src\/curveMath.c': {'additions': 50, 'deletions': 1, 'changes': 51, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/raw\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1\/src%2FcurveMath.c', 'patch': '@@ -15,7 +15,22 @@ int pointZZ_pEqual(const PointZZ_p * op1, const PointZZ_p * op2) {\\n }\\n \\n \\n+int pointZZ_pIsIdentityElement(const PointZZ_p * op) {\\n+    return mpz_cmp_ui(op->x, 0) == 0 && mpz_cmp_ui(op->y, 0) == 0 ? 1 : 0;\\n+}\\n+\\n+\\n+void pointZZ_pSetToIdentityElement(PointZZ_p * op) {\\n+    mpz_set_ui(op->x, 0);\\n+    mpz_set_ui(op->y, 0);\\n+}\\n+\\n+\\n void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * curve) {\\n+    if(pointZZ_pIsIdentityElement(op)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     mpz_t numer, denom, lambda;\\n     mpz_inits(numer, denom, lambda, NULL);\\n \\n@@ -45,6 +60,35 @@ void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * cu\\n \\n \\n void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2, const CurveZZ_p * curve) {\\n+    \/\/ handle identity element cases\\n+    if(pointZZ_pIsIdentityElement(op1) && pointZZ_pIsIdentityElement(op2)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    } else if(pointZZ_pIsIdentityElement(op1)) {\\n+        mpz_set(rop->x, op2->x);\\n+        mpz_set(rop->y, op2->y);\\n+        return;\\n+    } else if(pointZZ_pIsIdentityElement(op2)) {\\n+        mpz_set(rop->x, op1->x);\\n+        mpz_set(rop->y, op1->y);\\n+        return;\\n+    }\\n+\\n+    \/\/ use doubling algorithm if points are equal\\n+    if(pointZZ_pEqual(op1, op2)) {\\n+        pointZZ_pDouble(rop, op1, curve);\\n+        return;\\n+    }\\n+\\n+    \/\/ check if points sum to identity element\\n+    mpz_t negy;\\n+    mpz_init(negy);\\n+    mpz_sub(negy, curve->p, op2->y);\\n+    if(mpz_cmp(op1->x, op2->x) == 0 && mpz_cmp(op1->y, negy) == 0) {\\n+        mpz_clear(negy);\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n+\\n     mpz_t xdiff, ydiff, lambda;\\n     mpz_inits(xdiff, ydiff, lambda, NULL);\\n \\n@@ -67,11 +111,16 @@ void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2,\\n     mpz_sub(rop->y, rop->y, op1->y);\\n     mpz_mod(rop->y, rop->y, curve->p);\\n \\n-    mpz_clears(xdiff, ydiff, lambda, NULL);\\n+    mpz_clears(negy, xdiff, ydiff, lambda, NULL);\\n }\\n \\n \\n void pointZZ_pMul(PointZZ_p * rop, const PointZZ_p * point, const mpz_t scalar, const CurveZZ_p * curve) {\\n+    \/\/ handle the identity element\\n+    if(pointZZ_pIsIdentityElement(point)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     PointZZ_p R0, R1, tmp;\\n     mpz_inits(R1.x, R1.y, tmp.x, tmp.y, NULL);\\n     mpz_init_set(R0.x, point->x);'}}",
            "message_norm":"properly handle the point at infinity",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/curveMath.c'])",
            "num_files":1.0
        },
        {
            "index":1261,
            "vuln_id":"GHSA-8v7h-cpc2-r8jp",
            "cwe_id":"{'CWE-362'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/octobercms\/library\/commit\/fe569f3babf3f593be2b1e0a4ae0283506127a83'}",
            "dataset":"osv",
            "summary":"October CMS upload process vulnerable to RCE via Race Condition ### Impact\n\nThis advisory affects plugins that expose the `October\\Rain\\Database\\Attach\\File::fromData` as a public interface. This vulnerability does not affect vanilla installations of October CMS since this method is not exposed or used by the system internally or externally.\n\nWhen the developer allows the user to specify their own filename in the `fromData` method, an unauthenticated user can perform remote code execution (RCE) by exploiting a race condition in the temporary storage directory.\n\n### Patches\n\nThe issue has been patched in Build 476 (v1.0.476) and v1.1.12 and v2.2.15.\n\n### Workarounds\n\nApply https:\/\/github.com\/octobercms\/library\/commit\/fe569f3babf3f593be2b1e0a4ae0283506127a83 to your installation manually if unable to upgrade to Build 476 (v1.0.476) or v1.1.12 or v2.2.15.\n\n### References\n\nCredits to:\n- DucNT, HungTD and GiangVQ from RedTeam@VNG Security Response Center.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n- Email us at [hello@octobercms.com](mailto:hello@octobercms.com)",
            "published_date":"2022-07-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/library",
            "commit_href":"https:\/\/github.com\/octobercms\/library\/commit\/fe569f3babf3f593be2b1e0a4ae0283506127a83",
            "commit_sha":"fe569f3babf3f593be2b1e0a4ae0283506127a83",
            "patch":"SINGLE",
            "chain_ord":"['fe569f3babf3f593be2b1e0a4ae0283506127a83']",
            "before_first_fix_commit":"{'95ce496038c104571362c92418783b81889a8b9d'}",
            "last_fix_commit":"fe569f3babf3f593be2b1e0a4ae0283506127a83",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/29\/2022, 01:51:19",
            "message":"Refactor",
            "author":"Sam Georges",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 4, 'total': 9}",
            "files":"{'src\/Database\/Attach\/File.php': {'additions': 5, 'deletions': 4, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/library\/raw\/fe569f3babf3f593be2b1e0a4ae0283506127a83\/src%2FDatabase%2FAttach%2FFile.php', 'patch': \"@@ -124,14 +124,14 @@ public function fromPost($uploadedFile)\\n     \/**\\n      * fromFile creates a file object from a file on the disk\\n      *\/\\n-    public function fromFile($filePath)\\n+    public function fromFile($filePath, $filename = null)\\n     {\\n         if ($filePath === null) {\\n             return;\\n         }\\n \\n         $file = new FileObj($filePath);\\n-        $this->file_name = $file->getFilename();\\n+        $this->file_name = empty($filename) ? $file->getFilename() : $filename;\\n         $this->file_size = $file->getSize();\\n         $this->content_type = $file->getMimeType();\\n         $this->disk_name = $this->getDiskName();\\n@@ -152,10 +152,11 @@ public function fromData($data, $filename)\\n             return;\\n         }\\n \\n-        $tempPath = temp_path(basename($filename));\\n+        $tempName = str_replace('.', '', uniqid('', true)) . '.tmp';\\n+        $tempPath = temp_path($tempName);\\n         FileHelper::put($tempPath, $data);\\n \\n-        $file = $this->fromFile($tempPath);\\n+        $file = $this->fromFile($tempPath, basename($filename));\\n         FileHelper::delete($tempPath);\\n \\n         return $file;\"}}",
            "message_norm":"refactor",
            "language":"ro",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SINGLE_WORD",
            "list_files":"dict_keys(['src\/Database\/Attach\/File.php'])",
            "num_files":1.0
        },
        {
            "index":2436,
            "vuln_id":"GHSA-mjvc-j6rv-9xj8",
            "cwe_id":"{'CWE-215'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/b12e1a490c79460bff019f34b2e17112249b16ec'}",
            "dataset":"osv",
            "summary":"Insertion of Sensitive Information Into Debugging Code in Microweber Microweber prior to 1.3 may expose sensitive information about a server and a user when running the server in debug mode.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/b12e1a490c79460bff019f34b2e17112249b16ec",
            "commit_sha":"b12e1a490c79460bff019f34b2e17112249b16ec",
            "patch":"SINGLE",
            "chain_ord":"['b12e1a490c79460bff019f34b2e17112249b16ec']",
            "before_first_fix_commit":"{'a5925f74d39775771d4c37c8d4c1acbb762fda0a'}",
            "last_fix_commit":"b12e1a490c79460bff019f34b2e17112249b16ec",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/22\/2022, 10:35:12",
            "message":"Update Handler.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 5, 'total': 10}",
            "files":"{'src\/MicroweberPackages\/App\/Exceptions\/Handler.php': {'additions': 5, 'deletions': 5, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/b12e1a490c79460bff019f34b2e17112249b16ec\/src%2FMicroweberPackages%2FApp%2FExceptions%2FHandler.php', 'patch': '@@ -12,9 +12,9 @@ class Handler extends ExceptionHandler\\n      *\\n      * @var array\\n      *\/\\n-\/\/    protected $dontReport = [\\n-\/\/        \/\/\\n-\/\/    ];\\n+    protected $dontReport = [\\n+        \\\\BadMethodCallException::class,\\n+    ];\\n \\n     \/**\\n      * A list of the inputs that are never flashed for validation exceptions.\\n@@ -102,10 +102,10 @@ private function getMicroweberErrorBarHtml()\\n                  <a href=\"\\' . api_url(\\'mw_post_update\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload database<\/a>\\n                  <a href=\"\\' . api_url(\\'mw_reload_modules\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Reload modules<\/a>\\n                  <a href=\"\\' . api_url(\\'clearcache\\') . \\'?redirect_to=\\'.url_current().\\'\" class=\"btn\">Clear cache<\/a>\\n-                 \\n+\\n                  <a href=\"\" class=\"btn\">Refresh<\/a>\\n             <\/div>\\n         <\/div>\\n         \\';\\n     }\\n-}\\n\\\\ No newline at end of file\\n+}'}}",
            "message_norm":"update handler.php",
            "language":"da",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/App\/Exceptions\/Handler.php'])",
            "num_files":1.0
        },
        {
            "index":1118,
            "vuln_id":"GHSA-832h-xg76-4gv6",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/juliangruber\/brace-expansion\/pull\/35\/commits\/b13381281cead487cbdbfd6a69fb097ea5e456c3'}",
            "dataset":"osv",
            "summary":"ReDoS in brace-expansion Affected versions of `brace-expansion` are vulnerable to a regular expression denial of service condition.\n\n## Proof of Concept\n\n```\nvar expand = require('brace-expansion');\nexpand('{,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\n}');\n```\n\n\n## Recommendation\n\nUpdate to version 1.1.7 or later.",
            "published_date":"2018-01-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/juliangruber\/brace-expansion",
            "commit_href":"https:\/\/github.com\/juliangruber\/brace-expansion\/pull\/35\/commits\/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "commit_sha":"b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "patch":"SINGLE",
            "chain_ord":"['b13381281cead487cbdbfd6a69fb097ea5e456c3']",
            "before_first_fix_commit":"{'265f6cd6586383eebebbfc3c45da2eaa153d9e63'}",
            "last_fix_commit":"b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/07\/2017, 02:32:55",
            "message":"fix bug in https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33",
            "author":"mengyuan.ymy",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/juliangruber\/brace-expansion\/raw\/b13381281cead487cbdbfd6a69fb097ea5e456c3\/index.js', 'patch': \"@@ -106,7 +106,7 @@ function expand(str, isTop) {\\n   var isNumericSequence = \/^-?\\\\d+\\\\.\\\\.-?\\\\d+(?:\\\\.\\\\.-?\\\\d+)?$\/.test(m.body);\\n   var isAlphaSequence = \/^[a-zA-Z]\\\\.\\\\.[a-zA-Z](?:\\\\.\\\\.-?\\\\d+)?$\/.test(m.body);\\n   var isSequence = isNumericSequence || isAlphaSequence;\\n-  var isOptions = \/^(.*,)+(.+)?$\/.test(m.body);\\n+  var isOptions = m.body.indexOf(',') >= 0;\\n   if (!isSequence && !isOptions) {\\n     \/\/ {a},b}\\n     if (m.post.match(\/,.*\\\\}\/)) {\"}}",
            "message_norm":"fix bug in https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('https:\/\/github.com\/juliangruber\/brace-expansion\/issues\/33', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":98,
            "vuln_id":"GHSA-2hjr-fg6c-v2h6",
            "cwe_id":"{'CWE-200'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/HubSpot\/jinjava\/pull\/435\/commits\/1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165', 'https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b'}",
            "dataset":"osv",
            "summary":"Unauthorized access to Class instance in Jinjava Jinjava before 2.5.4 allow access to arbitrary classes by calling Java methods on objects passed into a Jinjava context. This could allow for abuse of the application class loader, including Arbitrary File Disclosure.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/HubSpot\/jinjava",
            "commit_href":"https:\/\/github.com\/HubSpot\/jinjava\/pull\/426\/commits\/5dfa5b87318744a4d020b66d5f7747acc36b213b",
            "commit_sha":"5dfa5b87318744a4d020b66d5f7747acc36b213b",
            "patch":"MULTI",
            "chain_ord":"['5dfa5b87318744a4d020b66d5f7747acc36b213b', '1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165']",
            "before_first_fix_commit":"{'bfc6ecde3a98db02a00c87a3b905a0af907188f0'}",
            "last_fix_commit":"1b9aaa4b420c58b4a301cf4b7d26207f1c8d1165",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2020, 17:49:08",
            "message":"add method to blacklist",
            "author":"Matt Coley",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/HubSpot\/jinjava\/raw\/5dfa5b87318744a4d020b66d5f7747acc36b213b\/src%2Fmain%2Fjava%2Fcom%2Fhubspot%2Fjinjava%2Fel%2Fext%2FJinjavaBeanELResolver.java', 'patch': '@@ -2,6 +2,7 @@\\n \\n import com.google.common.base.CaseFormat;\\n import com.google.common.collect.ImmutableSet;\\n+import java.lang.reflect.Method;\\n import java.util.Set;\\n import javax.el.BeanELResolver;\\n import javax.el.ELContext;\\n@@ -111,7 +112,12 @@ private String transformPropertyName(Object property) {\\n   }\\n \\n   private void checkRestrictedClass(Object o, Object method) {\\n-    if (o instanceof Class || o instanceof ClassLoader || o instanceof Thread) {\\n+    if (\\n+      o instanceof Class ||\\n+      o instanceof ClassLoader ||\\n+      o instanceof Thread ||\\n+      o instanceof Method\\n+    ) {\\n       throw new MethodNotFoundException(\\n         \"Cannot find method \\'\" + method + \"\\' in \" + o.getClass()\\n       );'}}",
            "message_norm":"add method to blacklist",
            "language":"cy",
            "entities":"[('add', 'ACTION', ''), ('blacklist', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/java\/com\/hubspot\/jinjava\/el\/ext\/JinjavaBeanELResolver.java'])",
            "num_files":1.0
        },
        {
            "index":2727,
            "vuln_id":"GHSA-q99r-j969-6jwr",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7e9a2ee60baa95ceb4f48f522f823c812ca90c80', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/31f2588c7ba5b446bccf2769e9ecf4d444b73045'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-1138, CVE-2019-1217, CVE-2019-1298, CVE-2019-1300.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/31f2588c7ba5b446bccf2769e9ecf4d444b73045",
            "commit_sha":"31f2588c7ba5b446bccf2769e9ecf4d444b73045",
            "patch":"MULTI",
            "chain_ord":"['31f2588c7ba5b446bccf2769e9ecf4d444b73045', '7e9a2ee60baa95ceb4f48f522f823c812ca90c80']",
            "before_first_fix_commit":"{'edf5eeef49168bbcc30dac82f57048ad46988295', 'c5297b86536fbf1a02d27cec28fea3c516e6ab84'}",
            "last_fix_commit":"7e9a2ee60baa95ceb4f48f522f823c812ca90c80",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/26\/2019, 22:39:34",
            "message":"[CVE-2019-1237]",
            "author":"Michael Holman",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'lib\/Runtime\/Library\/BoundFunction.cpp': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/31f2588c7ba5b446bccf2769e9ecf4d444b73045\/lib%2FRuntime%2FLibrary%2FBoundFunction.cpp', 'patch': \"@@ -354,6 +354,12 @@ namespace Js\\n             Var varLength;\\n             if (targetFunction->GetProperty(targetFunction, PropertyIds::length, &varLength, nullptr, requestContext))\\n             {\\n+                if (!TaggedInt::Is(varLength))\\n+                {\\n+                    \/\/ ToInt32 conversion on non-primitive length can invalidate assumptions made by the JIT,\\n+                    \/\/ so add implicit call flag if length isn't a TaggedInt already\\n+                    requestContext->GetThreadContext()->AddImplicitCallFlags(ImplicitCall_Accessor);\\n+                }\\n                 len = JavascriptConversion::ToInt32(varLength, requestContext);\\n             }\"}}",
            "message_norm":"[cve-2019-1237]",
            "language":"ro",
            "entities":"[('cve-2019-1237', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Runtime\/Library\/BoundFunction.cpp'])",
            "num_files":1.0
        },
        {
            "index":792,
            "vuln_id":"GHSA-694p-xrhg-x3wm",
            "cwe_id":"{'CWE-444'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d', 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add'}",
            "dataset":"osv",
            "summary":"CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request Header Injection') ### Vulnerability\n\nMicronaut's HTTP client is vulnerable to \"HTTP Request Header Injection\" due to not validating request headers passed to the client.\n\nExample of vulnerable code:\n\n```java\n@Controller(\"\/hello\")\npublic class HelloController {\n\n    @Inject\n    @Client(\"\/\")\n    RxHttpClient client;\n\n    @Get(\"\/external-exploit\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String externalExploit(@QueryValue(\"header-value\") String headerValue) {\n        return client.toBlocking().retrieve(\n            HttpRequest.GET(\"\/hello\")\n                .header(\"Test\", headerValue)\n        );\n    }\n}\n```\n\nIn the above case a query value received from a user is passed as a header value to the client. Since the client doesn't validate the header value the request headers and body have the potential to be manipulated.\n\nFor example, a user that supplies the following payload, can force the client to make multiple attacker-controlled HTTP requests.\n\n```java\nList<String> headerData = List.of(\n    \"Connection: Keep-Alive\", \/\/ This keeps the connection open so another request can be stuffed in.\n    \"\",\n    \"\",\n    \"POST \/hello\/super-secret HTTP\/1.1\",\n    \"Host: 127.0.0.1\",\n    \"Content-Length: 31\",\n    \"\",\n    \"{\\\"new\\\":\\\"json\\\",\\\"content\\\":\\\"here\\\"}\",\n    \"\",\n    \"\"\n);\nString headerValue = \"H\\r\\n\" + String.join(\"\\r\\n\", headerData);;\nURI theURI =\n    UriBuilder\n        .of(\"\/hello\/external-exploit\")\n        .queryParam(\"header-value\", headerValue) \/\/ Automatically URL encodes data\n        .build();\nHttpRequest<String> request = HttpRequest.GET(theURI);\nString body = client.toBlocking().retrieve(request);\n```\n\nNote that using `@HeaderValue` instead of `@QueryValue` is not vulnerable since Micronaut's HTTP server does validate the headers passed to the server, so the exploit can only be triggered by using user data that is not an HTTP header (query values, form data etc.).\n\n### Impact\n\nThe attacker is able to control the entirety of the HTTP body for their custom requests.\nAs such, this vulnerability enables attackers to perform a variant of [Server Side Request Forgery](https:\/\/cwe.mitre.org\/data\/definitions\/918.html).\n\n### Patches\n\nThe problem has been patched in the `micronaut-http-client` versions 1.2.11 and 1.3.2 and above.\n\n### Workarounds\n\nDo not pass user data directly received from HTTP request parameters as headers in the HTTP client.\n\n### References\n\nFix commits\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/6deb60b75517f80c57b42d935f07955c773b766d\n- https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/bc855e439c4a5ced3d83195bb59d0679cbd95add\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [micronaut-core](https:\/\/github.com\/micronaut-projects\/micronaut-core)\n* Email us at [info@micronaut.io](mailto:info@micronaut.io)\n\n### Credit\n\nOriginally reported by @JLLeitschuh",
            "published_date":"2020-03-30",
            "chain_len":3,
            "project":"https:\/\/github.com\/micronaut-projects\/micronaut-core",
            "commit_href":"https:\/\/github.com\/micronaut-projects\/micronaut-core\/commit\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "commit_sha":"9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "patch":"MULTI",
            "chain_ord":"['6deb60b75517f80c57b42d935f07955c773b766d', 'bc855e439c4a5ced3d83195bb59d0679cbd95add', '9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1']",
            "before_first_fix_commit":"{'a2392f4289f7777c4a310c3ae3bb4bc0ce5a65c2'}",
            "last_fix_commit":"9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1",
            "chain_ord_pos":3.0,
            "commit_datetime":"03\/09\/2020, 18:20:28",
            "message":"Validate client headers",
            "author":"jameskleeh",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'http-netty\/src\/main\/java\/io\/micronaut\/http\/netty\/NettyHttpHeaders.java': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/micronaut-projects\/micronaut-core\/raw\/9d1eff5c8df1d6cda1fe00ef046729b2a6abe7f1\/http-netty%2Fsrc%2Fmain%2Fjava%2Fio%2Fmicronaut%2Fhttp%2Fnetty%2FNettyHttpHeaders.java', 'patch': '@@ -53,7 +53,7 @@ public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, Co\\n      * Default constructor.\\n      *\/\\n     public NettyHttpHeaders() {\\n-        this.nettyHeaders = new DefaultHttpHeaders(false);\\n+        this.nettyHeaders = new DefaultHttpHeaders();\\n         this.conversionService = ConversionService.SHARED;\\n     }'}}",
            "message_norm":"validate client headers",
            "language":"nl",
            "entities":"[('validate', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['http-netty\/src\/main\/java\/io\/micronaut\/http\/netty\/NettyHttpHeaders.java'])",
            "num_files":1.0
        },
        {
            "index":2740,
            "vuln_id":"GHSA-qf2g-q4mc-w7rr",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/forkcms\/forkcms\/commit\/981730f1a3d59b423ca903b1f4bf79b848a1766e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Fork CMS Fork CMS prior to 5.11.1 is vulnerable to stored cross-site scripting. When uploading a new module, the description of the module can contain JavaScript code. The JavaScript code may be executed after uploading the new module and looking at the `Details` page.",
            "published_date":"2022-03-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/forkcms\/forkcms",
            "commit_href":"https:\/\/github.com\/forkcms\/forkcms\/commit\/981730f1a3d59b423ca903b1f4bf79b848a1766e",
            "commit_sha":"981730f1a3d59b423ca903b1f4bf79b848a1766e",
            "patch":"SINGLE",
            "chain_ord":"['981730f1a3d59b423ca903b1f4bf79b848a1766e']",
            "before_first_fix_commit":"{'1b38e33a98992793e998a937b717355212346993'}",
            "last_fix_commit":"981730f1a3d59b423ca903b1f4bf79b848a1766e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/23\/2022, 13:20:39",
            "message":"Fix xss though the description in the info.xml file of a theme or module",
            "author":"Jelmer Prins",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/Backend\/Modules\/Extensions\/Engine\/Model.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/forkcms\/forkcms\/raw\/981730f1a3d59b423ca903b1f4bf79b848a1766e\/src%2FBackend%2FModules%2FExtensions%2FEngine%2FModel.php', 'patch': \"@@ -839,7 +839,7 @@ public static function processModuleXml(\\\\SimpleXMLElement $xml): array\\n         $information['name'] = (string) $module->name;\\n         $information['version'] = (string) $module->version;\\n         $information['requirements'] = (array) $module->requirements;\\n-        $information['description'] = (string) $module->description;\\n+        $information['description'] = strip_tags((string) $module->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');\\n         $information['cronjobs'] = [];\\n \\n         \/\/ authors\\n@@ -900,7 +900,7 @@ public static function processThemeXml(\\\\SimpleXMLElement $xml): array\\n         $information['version'] = (string) $theme->version;\\n         $information['requirements'] = (array) $theme->requirements;\\n         $information['thumbnail'] = (string) $theme->thumbnail;\\n-        $information['description'] = (string) $theme->description;\\n+        $information['description'] = strip_tags((string) $theme->description, '<h1><h2><h3><h4><h5><h6><p><li><a>');\\n \\n         \/\/ authors\\n         foreach ($xml->xpath('\/theme\/authors\/author') as $author) {\"}}",
            "message_norm":"fix xss though the description in the info.xml file of a theme or module",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Backend\/Modules\/Extensions\/Engine\/Model.php'])",
            "num_files":1.0
        },
        {
            "index":628,
            "vuln_id":"GHSA-5fw9-fq32-wv5p",
            "cwe_id":"{'CWE-78'}",
            "score":5.6,
            "chain":"{'https:\/\/github.com\/mikaelbr\/node-notifier\/commit\/5d62799dab88505a709cd032653b2320c5813fce'}",
            "dataset":"osv",
            "summary":"OS Command Injection in node-notifier This affects the package node-notifier before 8.0.1. It allows an attacker to run arbitrary commands on Linux machines due to the options params not being sanitised when being passed an array.",
            "published_date":"2020-12-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/mikaelbr\/node-notifier",
            "commit_href":"https:\/\/github.com\/mikaelbr\/node-notifier\/commit\/5d62799dab88505a709cd032653b2320c5813fce",
            "commit_sha":"5d62799dab88505a709cd032653b2320c5813fce",
            "patch":"SINGLE",
            "chain_ord":"['5d62799dab88505a709cd032653b2320c5813fce']",
            "before_first_fix_commit":"{'0c4a80df9a3b5015cd1e1ab858e008be3fece082'}",
            "last_fix_commit":"5d62799dab88505a709cd032653b2320c5813fce",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/15\/2020, 15:30:54",
            "message":"v8.0.1",
            "author":"Mikael Brevik",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'package.json': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mikaelbr\/node-notifier\/raw\/5d62799dab88505a709cd032653b2320c5813fce\/package.json', 'patch': '@@ -1,6 +1,6 @@\\n {\\n   \"name\": \"node-notifier\",\\n-  \"version\": \"8.0.0\",\\n+  \"version\": \"8.0.1\",\\n   \"description\": \"A Node.js module for sending notifications on native Mac, Windows (post and pre 8) and Linux (or Growl as fallback)\",\\n   \"main\": \"index.js\",\\n   \"scripts\": {'}}",
            "message_norm":"v8.0.1",
            "language":"sk",
            "entities":"[('v8.0.1', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['package.json'])",
            "num_files":1.0
        },
        {
            "index":2256,
            "vuln_id":"GHSA-jhq9-wm9m-cf89",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe'}",
            "dataset":"osv",
            "summary":"CHECK-failure in `UnsortedSegmentJoin` ### Impact\nAn attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], dtype=tf.string)\nsegment_ids = tf.constant([], dtype=tf.int32)\nnum_segments = tf.constant([], dtype=tf.int32)\nseparator = ''\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=inputs, segment_ids=segment_ids,\n  num_segments=num_segments, separator=separator)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a2a607db15c7cd01d754d37e5448d72a13491bdb\/tensorflow\/core\/kernels\/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar:\n\n```cc\nconst Tensor& num_segments_tensor = context->input(2);\nauto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\n```\n\nSince the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination.\n\n### Patches\nWe have patched the issue in GitHub commit [704866eabe03a9aeda044ec91a8d0c83fc1ebdbe](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
            "commit_sha":"704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
            "patch":"SINGLE",
            "chain_ord":"['704866eabe03a9aeda044ec91a8d0c83fc1ebdbe']",
            "before_first_fix_commit":"{'a2a607db15c7cd01d754d37e5448d72a13491bdb'}",
            "last_fix_commit":"704866eabe03a9aeda044ec91a8d0c83fc1ebdbe",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/27\/2021, 21:41:40",
            "message":"Fix overflow CHECK issue with `tf.raw_ops.UnsortedSegmentJoin`.\n\nPiperOrigin-RevId: 370766155\nChange-Id: I33e7c6626224e1060a8a4ab51ad5d861c6d4c63e",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/unsorted_segment_join_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe\/tensorflow%2Fcore%2Fkernels%2Funsorted_segment_join_op.cc', 'patch': '@@ -90,6 +90,8 @@ class UnsortedSegmentJoinOp : public OpKernel {\\n     const int32 segment_dims = segment_id_shape.dims();\\n \\n     const Tensor& num_segments_tensor = context->input(2);\\n+    OP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\\n+                errors::InvalidArgument(\"Number of segments cannot be empty.\"));\\n     auto num_segments = num_segments_tensor.scalar<NUM_SEGMENTS_TYPE>()();\\n \\n     OP_REQUIRES(context, segment_dims != 0,'}}",
            "message_norm":"fix overflow check issue with `tf.raw_ops.unsortedsegmentjoin`.\n\npiperorigin-revid: 370766155\nchange-id: i33e7c6626224e1060a8a4ab51ad5d861c6d4c63e",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('overflow', 'SECWORD', ''), ('issue', 'FLAW', ''), ('370766155', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unsorted_segment_join_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3240,
            "vuln_id":"GHSA-w74j-v8xh-3w5h",
            "cwe_id":"{'CWE-824'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in unicode encoding ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_string_ops\n\ngen_string_ops.unicode_encode(\n  input_values=[],\n  input_splits=[],\n  output_encoding='UTF-8',\n  errors='ignore',\n  replacement_char='a')\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/unicode_ops.cc#L533-L539) reads the first dimension of the `input_splits` tensor before validating that this tensor is not empty: \n\n```cc\n  const Tensor& input_splits = context->input(1);\n  const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();\n  TensorShape output_shape({input_splits.dim_size(0) - 1});\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2e0ee46f1a47675152d3d865797a18358881d7a6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2e0ee46f1a47675152d3d865797a18358881d7a6",
            "commit_sha":"2e0ee46f1a47675152d3d865797a18358881d7a6",
            "patch":"SINGLE",
            "chain_ord":"['2e0ee46f1a47675152d3d865797a18358881d7a6']",
            "before_first_fix_commit":"{'9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad'}",
            "last_fix_commit":"2e0ee46f1a47675152d3d865797a18358881d7a6",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/27\/2021, 19:30:33",
            "message":"Ensure non-empty input_splits in tf.raw_ops.UnicodeEncode\n\nPiperOrigin-RevId: 387170080\nChange-Id: I3b489acc51c5cb4124c535b9df7cc6e62ef21766",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/kernels\/unicode_ops.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/2e0ee46f1a47675152d3d865797a18358881d7a6\/tensorflow%2Fcore%2Fkernels%2Funicode_ops.cc', 'patch': '@@ -533,6 +533,10 @@ class UnicodeEncodeOp : public OpKernel {\\n     const Tensor& input_splits = context->input(1);\\n     const auto input_splits_flat = input_splits.flat<SPLITS_TYPE>();\\n \\n+    OP_REQUIRES(\\n+        context, input_splits.NumElements() > 0,\\n+        errors::InvalidArgument(\"Input_splits should contain elements, but \"\\n+                                \"given input_values has 0 elements\"));\\n     \/\/ Operation will treat first argument in input_splits as if it were zero\\n     \/\/ regardless of its actual value since splits should begin with zero and\\n     \/\/ end with the length of the input values vector.'}}",
            "message_norm":"ensure non-empty input_splits in tf.raw_ops.unicodeencode\n\npiperorigin-revid: 387170080\nchange-id: i3b489acc51c5cb4124c535b9df7cc6e62ef21766",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('tf.raw_ops.unicodeencode', 'SECWORD', ''), ('387170080', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/unicode_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1141,
            "vuln_id":"GHSA-85rr-4rh9-hhwh",
            "cwe_id":"{'CWE-119', 'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/nanopb\/nanopb\/commit\/4fe23595732b6f1254cfc11a9b8d6da900b55b0c'}",
            "dataset":"osv",
            "summary":"Memory leak in Nanopb ### Impact\nDecoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed.\n\n### Patches\nPreliminary patch is [available on git](https:\/\/github.com\/nanopb\/nanopb\/commit\/edf6dcbffee4d614ac0c2c1b258ab95185bdb6e9) and problem will be patched in versions 0.3.9.7 and 0.4.4 once testing has been completed.\n\n### Workarounds\nFollowing workarounds are available:\n* Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code.\n* Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed.\n* Use an arena allocator for nanopb, to make sure all memory can be released afterwards.\n\n### References\nBug report: https:\/\/github.com\/nanopb\/nanopb\/issues\/615\n\n### For more information\nIf you have any questions or comments about this advisory, comment on the bug report linked above.",
            "published_date":"2020-11-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/nanopb\/nanopb",
            "commit_href":"https:\/\/github.com\/nanopb\/nanopb\/commit\/4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
            "commit_sha":"4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
            "patch":"SINGLE",
            "chain_ord":"['4fe23595732b6f1254cfc11a9b8d6da900b55b0c']",
            "before_first_fix_commit":"{'d9d5dfd869aca4d00a81f671b2445fb4cea0352f'}",
            "last_fix_commit":"4fe23595732b6f1254cfc11a9b8d6da900b55b0c",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/25\/2020, 09:38:40",
            "message":"Fix memory leak with oneofs and PB_ENABLE_MALLOC (#615)\n\nNanopb would leak memory when all of the following conditions were true:\n- PB_ENABLE_MALLOC is defined at the compile time\n- Message definitions contains an oneof field,\n  the oneof contains a static submessage, and\n  the static submessage contains a pointer field.\n- Data being decoded contains two values for the submessage.\n\nThe logic in pb_release_union_field would detect that the same\nsubmessage occurs twice, and wouldn't release it because keeping\nthe old values is necessary to match the C++ library behavior\nregarding message merges.\n\nBut then decode_static_field() would go to memset() the whole\nsubmessage to zero, because it unconditionally assumed it to\nbe uninitialized memory. This would normally happen when the\ncontents of the union field is switched to a different oneof\nitem, instead of merging with the same one.\n\nThis commit changes it so that the field is memset() only when\n`which_field` contains a different tag.",
            "author":"Petteri Aimonen",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 3, 'total': 9}",
            "files":"{'pb_decode.c': {'additions': 6, 'deletions': 3, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nanopb\/nanopb\/raw\/4fe23595732b6f1254cfc11a9b8d6da900b55b0c\/pb_decode.c', 'patch': '@@ -464,14 +464,17 @@ static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t\\n             }\\n \\n         case PB_HTYPE_ONEOF:\\n-            *(pb_size_t*)iter->pSize = iter->pos->tag;\\n-            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)\\n+            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE &&\\n+                *(pb_size_t*)iter->pSize != iter->pos->tag)\\n             {\\n                 \/* We memset to zero so that any callbacks are set to NULL.\\n-                 * Then set any default values. *\/\\n+                 * This is because the callbacks might otherwise have values\\n+                 * from some other union field. *\/\\n                 memset(iter->pData, 0, iter->pos->data_size);\\n                 pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);\\n             }\\n+            *(pb_size_t*)iter->pSize = iter->pos->tag;\\n+\\n             return func(stream, iter->pos, iter->pData);\\n \\n         default:'}}",
            "message_norm":"fix memory leak with oneofs and pb_enable_malloc (#615)\n\nnanopb would leak memory when all of the following conditions were true:\n- pb_enable_malloc is defined at the compile time\n- message definitions contains an oneof field,\n  the oneof contains a static submessage, and\n  the static submessage contains a pointer field.\n- data being decoded contains two values for the submessage.\n\nthe logic in pb_release_union_field would detect that the same\nsubmessage occurs twice, and wouldn't release it because keeping\nthe old values is necessary to match the c++ library behavior\nregarding message merges.\n\nbut then decode_static_field() would go to memset() the whole\nsubmessage to zero, because it unconditionally assumed it to\nbe uninitialized memory. this would normally happen when the\ncontents of the union field is switched to a different oneof\nitem, instead of merging with the same one.\n\nthis commit changes it so that the field is memset() only when\n`which_field` contains a different tag.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('memory leak', 'SECWORD', ''), ('#615', 'ISSUE', ''), ('leak', 'SECWORD', ''), ('decoded', 'SECWORD', ''), ('decode_static_field', 'SECWORD', ''), ('uninitialized memory', 'SECWORD', ''), ('changes', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pb_decode.c'])",
            "num_files":1.0
        },
        {
            "index":1988,
            "vuln_id":"GHSA-h4mx-xv96-2jgm",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/TYPO3\/typo3\/commit\/da611775f92102d7602713003f4c79606c8a445d'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in TYPO3's Frontend Login Mailer > ### Meta\n> * CVSS: `CVSS:3.1\/AV:N\/AC:L\/PR:L\/UI:R\/S:C\/C:L\/I:L\/A:N\/E:F\/RL:O\/RC:C` (4.9)\n\n### Problem\nUser submitted content was used without being properly encoded in HTML emails sent to users. The actually affected components were mail clients used to view those messages.\n\n### Solution\nUpdate to TYPO3 versions 9.5.35 ELTS, 10.4.29, 11.5.11 that fix the problem described above.\n\n### Credits\nThanks to Christian Seifert who reported this issue and to TYPO3 framework merger Andreas Fernandez who fixed the issue.\n\n### References\n* [TYPO3-CORE-SA-2022-004](https:\/\/typo3.org\/security\/advisory\/typo3-core-sa-2022-004)",
            "published_date":"2022-06-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/TYPO3\/typo3",
            "commit_href":"https:\/\/github.com\/TYPO3\/typo3\/commit\/da611775f92102d7602713003f4c79606c8a445d",
            "commit_sha":"da611775f92102d7602713003f4c79606c8a445d",
            "patch":"SINGLE",
            "chain_ord":"['da611775f92102d7602713003f4c79606c8a445d']",
            "before_first_fix_commit":"{'6f2554dc4ea0b670fd5599c54fd788d4db96c4a0'}",
            "last_fix_commit":"da611775f92102d7602713003f4c79606c8a445d",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/14\/2022, 07:18:04",
            "message":"[SECURITY] Avoid HTML injection in password recovery mail\n\nThe `receiverName` variable used in the password recovery mail of the\nExtbase felogin plugin was susceptible to HTML injection due to\nmissing sanitization. The variable is now passed thru the\n`f:format.htmlspecialchars` ViewHelper.\n\nResolves: #96559\nReleases: main, 11.5, 10.4\nChange-Id: I60e23c161f7f2fcc87b8870345b10a4c31d7b8db\nSecurity-Bulletin: TYPO3-CORE-SA-2022-004\nSecurity-References: CVE-2022-31049\nReviewed-on: https:\/\/review.typo3.org\/c\/Packages\/TYPO3.CMS\/+\/74904\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
            "author":"Andreas Fernandez",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'typo3\/sysext\/felogin\/Resources\/Private\/Email\/Templates\/PasswordRecovery.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TYPO3\/typo3\/raw\/da611775f92102d7602713003f4c79606c8a445d\/typo3%2Fsysext%2Ffelogin%2FResources%2FPrivate%2FEmail%2FTemplates%2FPasswordRecovery.html', 'patch': '@@ -9,7 +9,7 @@\\n         {f:translate(\\n         key: \\'forgot_validate_reset_password_html\\',\\n         extensionName: \\'felogin\\',\\n-        arguments: \\'{ 0: receiverName, 1: recoveryLink, 2: validUntil }\\'\\n+        arguments: \\'{ 0: \"{receiverName -> f:format.htmlspecialchars()}\", 1: recoveryLink, 2: validUntil }\\'\\n         ) -> f:format.html()}\\n     <\/f:spaceless>\\n <\/f:section>'}}",
            "message_norm":"[security] avoid html injection in password recovery mail\n\nthe `receivername` variable used in the password recovery mail of the\nextbase felogin plugin was susceptible to html injection due to\nmissing sanitization. the variable is now passed thru the\n`f:format.htmlspecialchars` viewhelper.\n\nresolves: #96559\nreleases: main, 11.5, 10.4\nchange-id: i60e23c161f7f2fcc87b8870345b10a4c31d7b8db\nsecurity-bulletin: typo3-core-sa-2022-004\nsecurity-references: cve-2022-31049\nreviewed-on: https:\/\/review.typo3.org\/c\/packages\/typo3.cms\/+\/74904\ntested-by: oliver hader <oliver.hader@typo3.org>\nreviewed-by: oliver hader <oliver.hader@typo3.org>",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('password', 'SECWORD', ''), ('password', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('sanitization', 'SECWORD', ''), ('format.htmlspecialchars', 'SECWORD', ''), ('#96559', 'ISSUE', ''), ('security', 'SECWORD', ''), ('security', 'SECWORD', ''), ('cve-2022-31049', 'VULNID', 'CVE'), ('https:\/\/review.typo3.org\/c\/packages\/typo3.cms\/+\/74904', 'URL', ''), ('oliver.hader@typo3.org', 'EMAIL', ''), ('oliver.hader@typo3.org', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['typo3\/sysext\/felogin\/Resources\/Private\/Email\/Templates\/PasswordRecovery.html'])",
            "num_files":1.0
        },
        {
            "index":3109,
            "vuln_id":"GHSA-vfrc-ggmc-5jwv",
            "cwe_id":"{'CWE-79'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/04483bdac3b5196737516398b5ce0383875a5c60'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in django-helpdesk django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2021-11-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/django-helpdesk\/django-helpdesk",
            "commit_href":"https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/04483bdac3b5196737516398b5ce0383875a5c60",
            "commit_sha":"04483bdac3b5196737516398b5ce0383875a5c60",
            "patch":"SINGLE",
            "chain_ord":"['04483bdac3b5196737516398b5ce0383875a5c60']",
            "before_first_fix_commit":"{'2c7065e0c4296e0c692fb4a7ee19c7357583af30'}",
            "last_fix_commit":"04483bdac3b5196737516398b5ce0383875a5c60",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/18\/2021, 03:42:02",
            "message":"Add `att.full_clean()` before saving\n\nFix issue https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983\r\nAlso, fix bug stored XSS disclosure: https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/",
            "author":"lethanhphuc",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'helpdesk\/lib.py': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/raw\/04483bdac3b5196737516398b5ce0383875a5c60\/helpdesk%2Flib.py', 'patch': \"@@ -145,6 +145,7 @@ def process_attachments(followup, attached_files):\\n                 'application\/octet-stream',\\n                 size=attached.size,\\n             )\\n+            att.full_clean()\\n             att.save()\\n \\n             if attached.size < max_email_attachment_size:\"}}",
            "message_norm":"add `att.full_clean()` before saving\n\nfix issue https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983\r\nalso, fix bug stored xss disclosure: https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/django-helpdesk\/django-helpdesk\/issues\/983', 'URL', ''), ('fix', 'ACTION', ''), ('bug', 'FLAW', ''), ('xss', 'SECWORD', ''), ('disclosure', 'SECWORD', ''), ('https:\/\/huntr.dev\/bounties\/4d7a5fdd-b2de-467a-ade0-3f2fb386638e\/', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['helpdesk\/lib.py'])",
            "num_files":1.0
        },
        {
            "index":1212,
            "vuln_id":"GHSA-8gvg-8vhf-h26g",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7827e117753052d479fabe19a25cfece88059bca'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0912, CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0922, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0927, CVE-2019-0933.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/7827e117753052d479fabe19a25cfece88059bca",
            "commit_sha":"7827e117753052d479fabe19a25cfece88059bca",
            "patch":"MULTI",
            "chain_ord":"['7827e117753052d479fabe19a25cfece88059bca', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
            "before_first_fix_commit":"{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
            "last_fix_commit":"d797e3f00e34c12c8c0ae52f56344325439dccd7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/17\/2019, 22:42:35",
            "message":"[CVE-2019-0937]",
            "author":"Paul Leathers",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'lib\/Runtime\/ByteCode\/ByteCodeEmitter.cpp': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/7827e117753052d479fabe19a25cfece88059bca\/lib%2FRuntime%2FByteCode%2FByteCodeEmitter.cpp', 'patch': '@@ -4006,6 +4006,11 @@ void ByteCodeGenerator::StartEmitCatch(ParseNodeCatch *pnodeCatch)\\n                 sym->SetIsGlobalCatch(true);\\n             }\\n \\n+            if (sym->NeedsScopeObject())\\n+            {\\n+                scope->SetIsObject();\\n+            }\\n+\\n             Assert(sym->GetScopeSlot() == Js::Constants::NoProperty);\\n             if (sym->NeedsSlotAlloc(this, funcInfo))\\n             {\\n@@ -4029,6 +4034,11 @@ void ByteCodeGenerator::StartEmitCatch(ParseNodeCatch *pnodeCatch)\\n             sym->SetIsGlobalCatch(true);\\n         }\\n \\n+        if (sym->NeedsScopeObject())\\n+        {\\n+            scope->SetIsObject();\\n+        }\\n+\\n         if (scope->GetMustInstantiate())\\n         {\\n             if (sym->IsInSlot(this, funcInfo))'}}",
            "message_norm":"[cve-2019-0937]",
            "language":"ro",
            "entities":"[('cve-2019-0937', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Runtime\/ByteCode\/ByteCodeEmitter.cpp'])",
            "num_files":1.0
        },
        {
            "index":1546,
            "vuln_id":"GHSA-cfpj-3q4c-jhvr",
            "cwe_id":"{'CWE-369'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/718721986aa137691ee23f03638867151f74935f'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite ### Impact\nThe implementation of fully connected layers in TFLite is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/lite\/kernels\/fully_connected.cc#L226):\n\n```cc\nconst int batch_size = input_size \/ filter->dims->data[1];\n```\n\nAn attacker can craft a model such that `filter->dims->data[1]` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [718721986aa137691ee23f03638867151f74935f](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/718721986aa137691ee23f03638867151f74935f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it has also been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/718721986aa137691ee23f03638867151f74935f",
            "commit_sha":"718721986aa137691ee23f03638867151f74935f",
            "patch":"SINGLE",
            "chain_ord":"['718721986aa137691ee23f03638867151f74935f']",
            "before_first_fix_commit":"{'985f07145a0cab0fd6018fdfc0b221b17e0c5a88'}",
            "last_fix_commit":"718721986aa137691ee23f03638867151f74935f",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/16\/2021, 13:49:45",
            "message":"Prevent division by 0 in `fully_connected.cc`\n\nPiperOrigin-RevId: 385137282\nChange-Id: If201e69b6e0048f0be001330b4b977e2b46db2cb",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/fully_connected.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/718721986aa137691ee23f03638867151f74935f\/tensorflow%2Flite%2Fkernels%2Ffully_connected.cc', 'patch': '@@ -223,6 +223,7 @@ TfLiteStatus PrepareImpl(TfLiteContext* context, TfLiteNode* node) {\\n   }\\n \\n   TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 2);\\n+  TF_LITE_ENSURE(context, filter->dims->data[1] != 0);\\n   const int batch_size = input_size \/ filter->dims->data[1];\\n   const int num_units = filter->dims->data[0];'}}",
            "message_norm":"prevent division by 0 in `fully_connected.cc`\n\npiperorigin-revid: 385137282\nchange-id: if201e69b6e0048f0be001330b4b977e2b46db2cb",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('385137282', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/fully_connected.cc'])",
            "num_files":1.0
        },
        {
            "index":518,
            "vuln_id":"GHSA-4wpp-w5r4-7v5v",
            "cwe_id":"{'CWE-918'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3'}",
            "dataset":"osv",
            "summary":"Server-Side Request Forgery in charm We've discovered a vulnerability in which attackers could forge HTTP requests to manipulate the `charm` data directory to access or delete anything on the server. This has been patched in https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3 and is available in release [v0.12.1](https:\/\/github.com\/charmbracelet\/charm\/releases\/tag\/v0.12.1). We recommend that all users running self-hosted `charm` instances update immediately.\n\nThis vulnerability was found in-house and we haven't been notified of any potential exploiters.\n\n### Additional notes\n\n* Encrypted user data uploaded to the Charm server is safe as Charm servers cannot decrypt user data. This includes filenames, paths, and all key-value data.\n* Users running the official Charm [Docker images](https:\/\/github.com\/charmbracelet\/charm\/blob\/main\/docker.md) are at minimal risk because the exploit is limited to the containerized filesystem.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open a [discussion](https:\/\/github.com\/charmbracelet\/charm\/discussions)\n* Email us at [vt100@charm.sh](mailto:vt100@charm.sh)\n* Chat with us on [Slack](https:\/\/charm.sh\/slack)\n\n* * *\n\n<a href=\"https:\/\/charm.sh\/\"><img alt=\"the Charm logo\" src=\"https:\/\/stuff.charm.sh\/charm-badge.jpg\" width=\"400\"><\/a>\n\nCharm\u70ed\u7231\u5f00\u6e90 \u2022 Charm loves open source",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/charmbracelet\/charm",
            "commit_href":"https:\/\/github.com\/charmbracelet\/charm\/commit\/3c90668f955c7ce5ef721e4fc9faee7053232fd3",
            "commit_sha":"3c90668f955c7ce5ef721e4fc9faee7053232fd3",
            "patch":"SINGLE",
            "chain_ord":"['3c90668f955c7ce5ef721e4fc9faee7053232fd3']",
            "before_first_fix_commit":"{'9c620ae07e7f7d7f3c0f6e52166b8b5f899d55d1'}",
            "last_fix_commit":"3c90668f955c7ce5ef721e4fc9faee7053232fd3",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2022, 01:23:14",
            "message":"fix: clean path before accessing file store",
            "author":"Christian Muehlhaeuser",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 3, 'total': 7}",
            "files":"{'server\/http.go': {'additions': 4, 'deletions': 3, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/charmbracelet\/charm\/raw\/3c90668f955c7ce5ef721e4fc9faee7053232fd3\/server%2Fhttp.go', 'patch': '@@ -10,6 +10,7 @@ import (\\n \\t\"io\/ioutil\"\\n \\t\"log\"\\n \\t\"net\/http\"\\n+\\t\"path\/filepath\"\\n \\t\"strconv\"\\n \\t\"strings\"\\n \\n@@ -279,7 +280,7 @@ func (s *HTTPServer) handlePostSeq(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\tms := r.URL.Query().Get(\"mode\")\\n \\tm, err := strconv.ParseUint(ms, 10, 32)\\n \\tif err != nil {\\n@@ -316,7 +317,7 @@ func (s *HTTPServer) handlePostFile(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\tf, err := s.cfg.FileStore.Get(u.CharmID, path)\\n \\tif errors.Is(err, fs.ErrNotExist) {\\n \\t\\ts.renderCustomError(w, \"file not found\", http.StatusNotFound)\\n@@ -353,7 +354,7 @@ func (s *HTTPServer) handleGetFile(w http.ResponseWriter, r *http.Request) {\\n \\n func (s *HTTPServer) handleDeleteFile(w http.ResponseWriter, r *http.Request) {\\n \\tu := s.charmUserFromRequest(w, r)\\n-\\tpath := pattern.Path(r.Context())\\n+\\tpath := filepath.Clean(pattern.Path(r.Context()))\\n \\terr := s.cfg.FileStore.Delete(u.CharmID, path)\\n \\tif err != nil {\\n \\t\\tlog.Printf(\"cannot delete file: %s\", err)'}}",
            "message_norm":"fix: clean path before accessing file store",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/http.go'])",
            "num_files":1.0
        },
        {
            "index":2899,
            "vuln_id":"GHSA-r89v-cgv7-3jhx",
            "cwe_id":"{'CWE-862'}",
            "score":5.2,
            "chain":"{'https:\/\/github.com\/octobercms\/october\/commit\/d34fb8ab51108495a9a651b841202d935f4e12f7'}",
            "dataset":"osv",
            "summary":"Bypass of fix for CVE-2020-15247, Twig sandbox escape ### Impact\nA bypass of CVE-2020-15247 (fixed in 1.0.469 and 1.1.0) was discovered that has the same impact as CVE-2020-15247:\n\nAn authenticated backend user with the `cms.manage_pages`, `cms.manage_layouts`, or `cms.manage_partials` permissions who would **normally** not be permitted to provide PHP code to be executed by the CMS due to `cms.enableSafeMode` being enabled is able to write specific Twig code to escape the Twig sandbox and execute arbitrary PHP.\n\nThis is not a problem for anyone that trusts their users with those permissions to normally write & manage PHP within the CMS by not having `cms.enableSafeMode` enabled, but would be a problem for anyone relying on `cms.enableSafeMode` to ensure that users with those permissions in production do not have access to write & execute arbitrary PHP.\n\n### Patches\nIssue has been patched in Build 470 (v1.0.470) and v1.1.1.\n\n### Workarounds\nApply https:\/\/github.com\/octobercms\/october\/commit\/d34fb8ab51108495a9a651b841202d935f4e12f7 to your installation manually if unable to upgrade to Build 470 or v1.1.1.\n\n### References\nReported by [ka1n4t](https:\/\/github.com\/ka1n4t)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1108\" alt=\"Screen Shot 2020-10-10 at 1 21 13 PM\" src=\"https:\/\/user-images.githubusercontent.com\/7253840\/95663316-7de28b80-0afb-11eb-999d-a6526cf78709.png\">",
            "published_date":"2020-11-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/october",
            "commit_href":"https:\/\/github.com\/octobercms\/october\/commit\/d34fb8ab51108495a9a651b841202d935f4e12f7",
            "commit_sha":"d34fb8ab51108495a9a651b841202d935f4e12f7",
            "patch":"SINGLE",
            "chain_ord":"['d34fb8ab51108495a9a651b841202d935f4e12f7']",
            "before_first_fix_commit":"{'16e0bd4d094264fd00d0af86180bde4e0c73b4be'}",
            "last_fix_commit":"d34fb8ab51108495a9a651b841202d935f4e12f7",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2020, 09:48:27",
            "message":"Improve Twig security policy\n\nFollow up to https:\/\/github.com\/octobercms\/october\/compare\/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca. Thanks to @ka1n4t for the additional review.",
            "author":"Luke Towers",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'modules\/system\/twig\/SecurityPolicy.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/october\/raw\/d34fb8ab51108495a9a651b841202d935f4e12f7\/modules%2Fsystem%2Ftwig%2FSecurityPolicy.php', 'patch': \"@@ -20,6 +20,8 @@ final class SecurityPolicy implements SecurityPolicyInterface\\n     protected $blockedMethods = [\\n         'addDynamicMethod',\\n         'addDynamicProperty',\\n+        'bindEvent',\\n+        'bindEventOnce',\\n     ];\\n \\n     \/**\"}}",
            "message_norm":"improve twig security policy\n\nfollow up to https:\/\/github.com\/octobercms\/october\/compare\/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca. thanks to @ka1n4t for the additional review.",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('security', 'SECWORD', ''), ('https:\/\/github.com\/octobercms\/october\/compare\/106daa2930de4cebb18732732d47d4056f01dd5b...7cb148c1677373ac30ccfd3069d18098e403e1ca', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/system\/twig\/SecurityPolicy.php'])",
            "num_files":1.0
        },
        {
            "index":1679,
            "vuln_id":"GHSA-f78f-353m-cf4j",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/mithunsatheesh\/node-rules\/commit\/100862223904bb6478fcc33b701c7dee11f7b832'}",
            "dataset":"osv",
            "summary":"Code Injection in node-rules node-rules including 3.0.0 and prior to 5.0.0 allows injection of arbitrary commands. The argument rules of function \"fromJSON()\" can be controlled by users without any sanitization.",
            "published_date":"2021-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/mithunsatheesh\/node-rules",
            "commit_href":"https:\/\/github.com\/mithunsatheesh\/node-rules\/commit\/100862223904bb6478fcc33b701c7dee11f7b832",
            "commit_sha":"100862223904bb6478fcc33b701c7dee11f7b832",
            "patch":"SINGLE",
            "chain_ord":"['100862223904bb6478fcc33b701c7dee11f7b832']",
            "before_first_fix_commit":"{'1b07c48336ce30aa6d3b6b3be1850cd292860dbb'}",
            "last_fix_commit":"100862223904bb6478fcc33b701c7dee11f7b832",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/16\/2020, 13:43:37",
            "message":"Remove fromJSON and toJSON from exposed APIs\n\nRemove fromJSON and toJSON from exposed APIs in V5.0.0",
            "author":"Mithun Satheesh",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 31, 'total': 31}",
            "files":"{'lib\/node-rules.js': {'additions': 0, 'deletions': 31, 'changes': 31, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mithunsatheesh\/node-rules\/raw\/100862223904bb6478fcc33b701c7dee11f7b832\/lib%2Fnode-rules.js', 'patch': '@@ -128,36 +128,5 @@\\n         }\\n         this.sync();\\n     }\\n-    RuleEngine.prototype.toJSON = function() {\\n-        var rules = this.rules;\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = rule.condition.toString();\\n-                rule.consequence = rule.consequence.toString();\\n-                return rule;\\n-            });\\n-        } else if (typeof(rules) != \"undefined\") {\\n-            rules.condition = rules.condition.toString();\\n-            rules.consequence = rules.consequence.toString();\\n-        }\\n-        return rules;\\n-    };\\n-    RuleEngine.prototype.fromJSON = function(rules) {\\n-        this.init();\\n-        if (typeof(rules) == \"string\") {\\n-            rules = JSON.parse(rules);\\n-        }\\n-        if (rules instanceof Array) {\\n-            rules = rules.map(function(rule) {\\n-                rule.condition = eval(\"(\" + rule.condition + \")\");\\n-                rule.consequence = eval(\"(\" + rule.consequence + \")\");\\n-                return rule;\\n-            });\\n-        } else if (rules !== null && typeof(rules) == \"object\") {\\n-            rules.condition = eval(\"(\" + rules.condition + \")\");\\n-            rules.consequence = eval(\"(\" + rules.consequence + \")\");\\n-        }\\n-        this.register(rules);\\n-    };\\n     module.exports = RuleEngine;\\n }(module.exports));'}}",
            "message_norm":"remove fromjson and tojson from exposed apis\n\nremove fromjson and tojson from exposed apis in v5.0.0",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('exposed apis', 'SECWORD', ''), ('exposed apis', 'SECWORD', ''), ('v5.0.0', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/node-rules.js'])",
            "num_files":1.0
        },
        {
            "index":1327,
            "vuln_id":"GHSA-9697-98pf-4rw7",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38'}",
            "dataset":"osv",
            "summary":"Heap OOB in `UpperBound` and `LowerBound` ### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.UpperBound`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  out_type=tf.int64)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/searchsorted_op.cc#L85-L104) does not validate the rank of `sorted_input` argument:\n\n```cc\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& sorted_inputs_t = ctx->input(0);\n    \/\/ ...\n    OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\n                Status(error::INVALID_ARGUMENT,\n                       \"Leading dim_size of both tensors must match.\"));\n    \/\/ ...\n    if (output_t->dtype() == DT_INT32) {\n      OP_REQUIRES(ctx,\n                  FastBoundsCheck(sorted_inputs_t.dim_size(1), ...));\n      \/\/ ...\n    }\n```\n\nAs we access the first two dimensions of `sorted_inputs_t` tensor, it must have rank at least 2.\n\nA similar issue occurs in `tf.raw_ops.LowerBound`.\n\n### Patches\nWe have patched the issue in GitHub commit [42459e4273c2e47a3232cc16c4f4fff3b3a35c38](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "commit_sha":"42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "patch":"SINGLE",
            "chain_ord":"['42459e4273c2e47a3232cc16c4f4fff3b3a35c38']",
            "before_first_fix_commit":"{'b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58'}",
            "last_fix_commit":"42459e4273c2e47a3232cc16c4f4fff3b3a35c38",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:25:05",
            "message":"Prevent CHECK-fail\/heap OOB in UpperBound and LowerBound\n\nPiperOrigin-RevId: 387738073\nChange-Id: Iee74de95ddad18440d052a75a5a1cb67544f490a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 0, 'total': 8}",
            "files":"{'tensorflow\/core\/kernels\/searchsorted_op.cc': {'additions': 8, 'deletions': 0, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/42459e4273c2e47a3232cc16c4f4fff3b3a35c38\/tensorflow%2Fcore%2Fkernels%2Fsearchsorted_op.cc', 'patch': '@@ -86,6 +86,10 @@ class UpperBoundOp : public OpKernel {\\n     const Tensor& sorted_inputs_t = ctx->input(0);\\n     const Tensor& values_t = ctx->input(1);\\n \\n+    \/\/ inputs must be at least a matrix\\n+    OP_REQUIRES(\\n+        ctx, sorted_inputs_t.shape().dims() >= 2,\\n+        errors::InvalidArgument(\"sorted input argument must be a matrix\"));\\n     \/\/ must have same batch dim_size for both\\n     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\\n                 Status(error::INVALID_ARGUMENT,\\n@@ -127,6 +131,10 @@ class LowerBoundOp : public OpKernel {\\n     const Tensor& sorted_inputs_t = ctx->input(0);\\n     const Tensor& values_t = ctx->input(1);\\n \\n+    \/\/ inputs must be at least a matrix\\n+    OP_REQUIRES(\\n+        ctx, sorted_inputs_t.shape().dims() >= 2,\\n+        errors::InvalidArgument(\"sorted input argument must be a matrix\"));\\n     \/\/ must have same batch dim_size for both\\n     OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\\n                 Status(error::INVALID_ARGUMENT,'}}",
            "message_norm":"prevent check-fail\/heap oob in upperbound and lowerbound\n\npiperorigin-revid: 387738073\nchange-id: iee74de95ddad18440d052a75a5a1cb67544f490a",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('387738073', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/searchsorted_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2093,
            "vuln_id":"GHSA-hm3x-jwwf-jpr9",
            "cwe_id":"{'CWE-200', 'CWE-668'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/160936df134a471cfd245bd60964046027a571ea', 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515'}",
            "dataset":"osv",
            "summary":"Exposure of Sensitive Information to an Unauthorized Actor in OpenStack tripleo-heat-templates An information exposure flaw in openstack-tripleo-heat-templates allows an external user to discover the internal IP or hostname. An attacker could exploit this by checking the `www_authenticate_uri parameter` (which is visible to all end users) in configuration files. This would give sensitive information which may aid in additional system exploitation. A patch is available on the `master` branch and anticipated to be part of version 11.6.1.",
            "published_date":"2022-03-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/openstack\/tripleo-heat-templates",
            "commit_href":"https:\/\/github.com\/openstack\/tripleo-heat-templates\/commit\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "commit_sha":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "patch":"MULTI",
            "chain_ord":"['160936df134a471cfd245bd60964046027a571ea', '2b9461e97fc5c4ceb0848d1cc4484f656bb85515']",
            "before_first_fix_commit":"{'ea4d002dde779e84c25c983aa3534cf62fe9386f'}",
            "last_fix_commit":"2b9461e97fc5c4ceb0848d1cc4484f656bb85515",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/06\/2022, 01:32:48",
            "message":"Fix remaining usage of internal url for www_authenticate_uri\n\nThis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nRelated-Bug: #1955397\nChange-Id: Ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
            "author":"Takashi Kajinami",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'deployment\/ironic\/ironic-api-container-puppet.yaml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/openstack\/tripleo-heat-templates\/raw\/2b9461e97fc5c4ceb0848d1cc4484f656bb85515\/deployment%2Fironic%2Fironic-api-container-puppet.yaml', 'patch': \"@@ -163,7 +163,7 @@ outputs:\\n             ironic::api::authtoken::user_domain_name: 'Default'\\n             ironic::api::authtoken::project_domain_name: 'Default'\\n             ironic::api::authtoken::username: 'ironic'\\n-            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n+            ironic::api::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix]}\\n             ironic::api::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}\\n             ironic::api::authtoken::region_name: {get_param: KeystoneRegion}\\n             ironic::api::authtoken::interface: 'internal'\"}}",
            "message_norm":"fix remaining usage of internal url for www_authenticate_uri\n\nthis is follow-up of 160936df134a471cfd245bd60964046027a571ea and fixes\nremaining usage of internal endpoint url for [keystone_authtoken]\nwww_authenticate_uri.\n\nrelated-bug: #1955397\nchange-id: ib2ee7295c7fcda276e4fcf011a9e427e041f4848",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('160936df134a471cfd245bd60964046027a571ea', 'SHA', 'generic_sha'), ('fixes', 'ACTION', ''), ('keystone_authtoken', 'SECWORD', ''), ('bug', 'FLAW', ''), ('#1955397', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['deployment\/ironic\/ironic-api-container-puppet.yaml'])",
            "num_files":1.0
        },
        {
            "index":614,
            "vuln_id":"GHSA-5crj-c72x-m7gq",
            "cwe_id":"{'CWE-476'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff'}",
            "dataset":"osv",
            "summary":"Null pointer exception when `Exit` node is not preceded by `Enter` op ### Impact\nThe [process of building the control flow graph](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/common_runtime\/immutable_executor_state.cc#L284-L346) for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not:\n  \n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.Exit(data=[False,False])\n    \nfunc()\n```\n\nThis occurs because the code assumes that the first node in the pairing (e.g., an `Enter` node) always exists when encountering the second node (e.g., an `Exit` node):\n  \n```cc\n  ...\n} else if (IsExit(curr_node)) {\n  \/\/ Exit to the parent frame.\n  parent = parent_nodes[curr_id];         \n  frame_name = cf_info->frame_names[parent->id()];\n  ...                \n```\n\nWhen this is not the case, `parent` is `nullptr` so dereferencing it causes a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [05cbebd3c6bb8f517a158b0155debb8df79017ff](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-11-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "commit_sha":"05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "patch":"SINGLE",
            "chain_ord":"['05cbebd3c6bb8f517a158b0155debb8df79017ff']",
            "before_first_fix_commit":"{'3586950728a5e7cda93d9eeeedfec59ddb30883c'}",
            "last_fix_commit":"05cbebd3c6bb8f517a158b0155debb8df79017ff",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/18\/2021, 23:17:46",
            "message":"Fix a NPE issue in invalid Exit op. Now it will report an error instead of crash.\n\nPiperOrigin-RevId: 404089902\nChange-Id: Ia6ec55445ea70ad045a4d339d354959ad0618f2a",
            "author":"Xiao Yu",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/core\/common_runtime\/immutable_executor_state.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/05cbebd3c6bb8f517a158b0155debb8df79017ff\/tensorflow%2Fcore%2Fcommon_runtime%2Fimmutable_executor_state.cc', 'patch': '@@ -316,6 +316,10 @@ Status ImmutableExecutorState::BuildControlFlowInfo(const Graph* g,\\n     } else if (IsExit(curr_node)) {\\n       \/\/ Exit to the parent frame.\\n       parent = parent_nodes[curr_id];\\n+      if (!parent) {\\n+        return errors::InvalidArgument(\\n+            \"Invalid Exit op: Cannot find a corresponding Enter op.\");\\n+      }\\n       frame_name = cf_info->frame_names[parent->id()];\\n       parent = parent_nodes[parent->id()];\\n     } else {'}}",
            "message_norm":"fix a npe issue in invalid exit op. now it will report an error instead of crash.\n\npiperorigin-revid: 404089902\nchange-id: ia6ec55445ea70ad045a4d339d354959ad0618f2a",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('npe issue', 'SECWORD', ''), ('error', 'FLAW', ''), ('404089902', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/common_runtime\/immutable_executor_state.cc'])",
            "num_files":1.0
        },
        {
            "index":2147,
            "vuln_id":"GHSA-hwj9-h5mp-3pm3",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/postcss\/postcss\/commit\/54cbf3c4847eb0fb1501b9d2337465439e849734', 'https:\/\/github.com\/postcss\/postcss\/commit\/b6f3e4d5a8d7504d553267f80384373af3a3dec5', 'https:\/\/github.com\/postcss\/postcss\/commit\/8682b1e4e328432ba692bed52326e84439cec9e4'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in postcss The npm package `postcss` from 7.0.0 and before versions 7.0.36 and 8.2.10 is vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.",
            "published_date":"2021-05-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/postcss\/postcss",
            "commit_href":"https:\/\/github.com\/postcss\/postcss\/commit\/b6f3e4d5a8d7504d553267f80384373af3a3dec5",
            "commit_sha":"b6f3e4d5a8d7504d553267f80384373af3a3dec5",
            "patch":"MULTI",
            "chain_ord":"['8682b1e4e328432ba692bed52326e84439cec9e4', 'b6f3e4d5a8d7504d553267f80384373af3a3dec5', '54cbf3c4847eb0fb1501b9d2337465439e849734']",
            "before_first_fix_commit":"{'12832f3d203474bd273bd06bd3b2407567bfe09e'}",
            "last_fix_commit":"54cbf3c4847eb0fb1501b9d2337465439e849734",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/11\/2021, 13:03:12",
            "message":"Fix unsafe regexp in getAnnotationURL() too",
            "author":"Andrey Sitnik",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 3, 'total': 4}",
            "files":"{'lib\/previous-map.js': {'additions': 1, 'deletions': 3, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/postcss\/postcss\/raw\/b6f3e4d5a8d7504d553267f80384373af3a3dec5\/lib%2Fprevious-map.js', 'patch': '@@ -48,9 +48,7 @@ class PreviousMap {\\n   }\\n \\n   getAnnotationURL(sourceMapString) {\\n-    return sourceMapString\\n-      .match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=(.*)\\\\s*\\\\*\\\\\/\/)[1]\\n-      .trim()\\n+    return sourceMapString.match(\/\\\\\/\\\\*\\\\s*# sourceMappingURL=(.*)\\\\*\\\\\/\/)[1].trim()\\n   }\\n \\n   loadAnnotation(css) {'}}",
            "message_norm":"fix unsafe regexp in getannotationurl() too",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('unsafe', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/previous-map.js'])",
            "num_files":1.0
        },
        {
            "index":318,
            "vuln_id":"GHSA-3wcq-x3mq-6r9p",
            "cwe_id":"{'CWE-908', 'CWE-200'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d', 'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56'}",
            "dataset":"osv",
            "summary":"Potential memory exposure in dns-packet This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.",
            "published_date":"2021-05-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/mafintosh\/dns-packet",
            "commit_href":"https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d",
            "commit_sha":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
            "patch":"MULTI",
            "chain_ord":"['25f15dd0fedc53688b25fd053ebbdffe3d5c1c56', '0d0d593f8df4e2712c43957a6c62e95047f12b2d']",
            "before_first_fix_commit":"{'7f35bac5b4680d7bfbb34fbc475ecfdbf9d25092'}",
            "last_fix_commit":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/25\/2021, 08:35:02",
            "message":"backport encodingLength fix to v1",
            "author":"Mathias Buus",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'index.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/dns-packet\/raw\/0d0d593f8df4e2712c43957a6c62e95047f12b2d\/index.js', 'patch': \"@@ -74,7 +74,8 @@ name.decode = function (buf, offset) {\\n name.decode.bytes = 0\\n \\n name.encodingLength = function (n) {\\n-  return Buffer.byteLength(n) + 2\\n+  if (n === '.') return 1\\n+  return Buffer.byteLength(n.replace(\/^\\\\.|\\\\.$\/gm, '')) + 2\\n }\\n \\n var string = {}\"}}",
            "message_norm":"backport encodinglength fix to v1",
            "language":"en",
            "entities":"[('encodinglength', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1383,
            "vuln_id":"GHSA-9hr3-j9mc-xmq2",
            "cwe_id":"{'CWE-29', 'CWE-22'}",
            "score":6.9,
            "chain":"{'https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/359603b63fc6c59d8b57e061c171954bab3433bf', 'https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe'}",
            "dataset":"osv",
            "summary":"Path Traversal in com.alibaba.oneagent:one-java-agent-plugin All versions of package `com.alibaba.oneagent:one-java-agent-plugin` are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) using a specially crafted archive that holds directory traversal filenames (e.g. `..\/..\/evil.exe`). The attacker can overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u2019s machine.",
            "published_date":"2022-05-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/alibaba\/one-java-agent",
            "commit_href":"https:\/\/github.com\/alibaba\/one-java-agent\/pull\/29\/commits\/359603b63fc6c59d8b57e061c171954bab3433bf",
            "commit_sha":"359603b63fc6c59d8b57e061c171954bab3433bf",
            "patch":"MULTI",
            "chain_ord":"['359603b63fc6c59d8b57e061c171954bab3433bf', 'b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe']",
            "before_first_fix_commit":"{'52f2506c7cbcfbbe342ddf9d35a915fc49e6fa48'}",
            "last_fix_commit":"b5b437f9f4c8cbfe7bdbe266e975a4bd513c13fe",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/07\/2022, 02:28:31",
            "message":"remove unused IOUtils.unzip",
            "author":"luyanbo",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 56, 'total': 56}",
            "files":"{'one-java-agent-plugin\/src\/main\/java\/com\/alibaba\/oneagent\/utils\/IOUtils.java': {'additions': 0, 'deletions': 56, 'changes': 56, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/alibaba\/one-java-agent\/raw\/359603b63fc6c59d8b57e061c171954bab3433bf\/one-java-agent-plugin%2Fsrc%2Fmain%2Fjava%2Fcom%2Falibaba%2Foneagent%2Futils%2FIOUtils.java', 'patch': '@@ -103,60 +103,4 @@ public static IOException close(URLClassLoader urlClassLoader) {\\n \\t\\treturn null;\\n \\t}\\n \\n-\\tpublic static void unzip(String zipFile, String extractFolder) throws IOException {\\n-\\t\\tFile file = new File(zipFile);\\n-\\t\\tZipFile zip = null;\\n-\\t\\ttry {\\n-\\t\\t\\tint BUFFER = 1024 * 8;\\n-\\n-\\t\\t\\tzip = new ZipFile(file);\\n-\\t\\t\\tString newPath = extractFolder;\\n-\\n-\\t\\t\\tnew File(newPath).mkdir();\\n-\\t\\t\\tEnumeration<? extends ZipEntry> zipFileEntries = zip.entries();\\n-\\n-\\t\\t\\t\/\/ Process each entry\\n-\\t\\t\\twhile (zipFileEntries.hasMoreElements()) {\\n-\\t\\t\\t\\t\/\/ grab a zip file entry\\n-\\t\\t\\t\\tZipEntry entry = (ZipEntry) zipFileEntries.nextElement();\\n-\\t\\t\\t\\tString currentEntry = entry.getName();\\n-\\n-\\t\\t\\t\\tFile destFile = new File(newPath, currentEntry);\\n-\\t\\t\\t\\t\/\/ destFile = new File(newPath, destFile.getName());\\n-\\t\\t\\t\\tFile destinationParent = destFile.getParentFile();\\n-\\n-\\t\\t\\t\\t\/\/ create the parent directory structure if needed\\n-\\t\\t\\t\\tdestinationParent.mkdirs();\\n-\\n-\\t\\t\\t\\tif (!entry.isDirectory()) {\\n-\\t\\t\\t\\t\\tBufferedInputStream is = null;\\n-\\t\\t\\t\\t\\tBufferedOutputStream dest = null;\\n-\\t\\t\\t\\t\\ttry {\\n-\\t\\t\\t\\t\\t\\tis = new BufferedInputStream(zip.getInputStream(entry));\\n-\\t\\t\\t\\t\\t\\tint currentByte;\\n-\\t\\t\\t\\t\\t\\t\/\/ establish buffer for writing file\\n-\\t\\t\\t\\t\\t\\tbyte data[] = new byte[BUFFER];\\n-\\n-\\t\\t\\t\\t\\t\\t\/\/ write the current file to disk\\n-\\t\\t\\t\\t\\t\\tFileOutputStream fos = new FileOutputStream(destFile);\\n-\\t\\t\\t\\t\\t\\tdest = new BufferedOutputStream(fos, BUFFER);\\n-\\n-\\t\\t\\t\\t\\t\\t\/\/ read and write until last byte is encountered\\n-\\t\\t\\t\\t\\t\\twhile ((currentByte = is.read(data, 0, BUFFER)) != -1) {\\n-\\t\\t\\t\\t\\t\\t\\tdest.write(data, 0, currentByte);\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\tdest.flush();\\n-\\t\\t\\t\\t\\t} finally {\\n-\\t\\t\\t\\t\\t\\tclose(dest);\\n-\\t\\t\\t\\t\\t\\tclose(is);\\n-\\t\\t\\t\\t\\t}\\n-\\n-\\t\\t\\t\\t}\\n-\\n-\\t\\t\\t}\\n-\\t\\t} finally {\\n-\\t\\t\\tclose(zip);\\n-\\t\\t}\\n-\\n-\\t}\\n }'}}",
            "message_norm":"remove unused ioutils.unzip",
            "language":"en",
            "entities":"[('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['one-java-agent-plugin\/src\/main\/java\/com\/alibaba\/oneagent\/utils\/IOUtils.java'])",
            "num_files":1.0
        },
        {
            "index":2186,
            "vuln_id":"GHSA-j47f-4232-hvv8",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a'}",
            "dataset":"osv",
            "summary":"Heap out of bounds read in `RaggedCross` ### Impact\nAn attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:\n\n```python\nimport tensorflow as tf\n\nragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    out_row_splits_type=tf.int64)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/efea03b38fb8d3b81762237dc85e579cc5fc6e87\/tensorflow\/core\/kernels\/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:\n\n```cc\nint next_ragged = 0;\nint next_sparse = 0;\nint next_dense = 0;\nfor (char c : input_order_) {\n  if (c == 'R') {\n    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n        features));\n    next_ragged++;\n  } else if (c == 'S') {\n    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n        batch_size, features));\n    next_sparse++;\n  } else if (c == 'D') {\n    TF_RETURN_IF_ERROR(\n        BuildDenseFeatureReader(dense_list[next_dense++], features));\n  }\n  ...\n}\n```\n\nEach of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.\n\n### Patches\nWe have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/44b7f486c0143f68b56c34e2d01e146ee445134a",
            "commit_sha":"44b7f486c0143f68b56c34e2d01e146ee445134a",
            "patch":"SINGLE",
            "chain_ord":"['44b7f486c0143f68b56c34e2d01e146ee445134a']",
            "before_first_fix_commit":"{'efea03b38fb8d3b81762237dc85e579cc5fc6e87'}",
            "last_fix_commit":"44b7f486c0143f68b56c34e2d01e146ee445134a",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 23:19:54",
            "message":"Fix out of bounds read in `ragged_cross_op.cc`.\n\nPiperOrigin-RevId: 369757702\nChange-Id: Ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 30, 'deletions': 0, 'total': 30}",
            "files":"{'tensorflow\/core\/kernels\/ragged_cross_op.cc': {'additions': 30, 'deletions': 0, 'changes': 30, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/44b7f486c0143f68b56c34e2d01e146ee445134a\/tensorflow%2Fcore%2Fkernels%2Fragged_cross_op.cc', 'patch': '@@ -21,6 +21,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/register_types.h\"\\n #include \"tensorflow\/core\/framework\/tensor.h\"\\n #include \"tensorflow\/core\/framework\/tensor_shape.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #include \"tensorflow\/core\/platform\/fingerprint.h\"\\n #include \"tensorflow\/core\/util\/util.h\"\\n #include \"tensorflow\/core\/util\/work_sharder.h\"\\n@@ -466,16 +467,45 @@ class RaggedCrossOp : public OpKernel {\\n     int next_dense = 0;\\n     for (char c : input_order_) {\\n       if (c == \\'R\\') {\\n+        if (next_ragged >= ragged_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor value at index \",\\n+              next_ragged, \" from a list of \", ragged_values_list.size(),\\n+              \" values.\");\\n+        if (next_ragged >= ragged_splits_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a ragged tensor split at index \",\\n+              next_ragged, \" from a list of \", ragged_splits_list.size(),\\n+              \" splits.\");\\n         TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\\n             ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\\n             features));\\n         next_ragged++;\\n       } else if (c == \\'S\\') {\\n+        if (next_sparse >= sparse_values_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor value at index \",\\n+              next_sparse, \" from a list of \", sparse_values_list.size(),\\n+              \" values.\");\\n+        if (next_sparse >= sparse_indices_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a sparse tensor index at index \",\\n+              next_sparse, \" from a list of \", sparse_indices_list.size(),\\n+              \" indices.\");\\n         TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\\n             sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\\n             batch_size, features));\\n         next_sparse++;\\n       } else if (c == \\'D\\') {\\n+        if (next_dense >= dense_list.size())\\n+          return errors::InvalidArgument(\\n+              \"input_order \\\\\"\", input_order_,\\n+              \"\\\\\" specifies reading a dense tensor at index \", next_dense,\\n+              \" from a list of \", dense_list.size(), \" tensors.\");\\n         TF_RETURN_IF_ERROR(\\n             BuildDenseFeatureReader(dense_list[next_dense++], features));\\n       } else {'}}",
            "message_norm":"fix out of bounds read in `ragged_cross_op.cc`.\n\npiperorigin-revid: 369757702\nchange-id: ie6e5d2c21513a8d56bf41fcf35960caf76e890f9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bounds read', 'SECWORD', ''), ('369757702', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_cross_op.cc'])",
            "num_files":1.0
        },
        {
            "index":557,
            "vuln_id":"GHSA-55j9-849x-26h4",
            "cwe_id":"{'CWE-74'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\/commits\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81'}",
            "dataset":"osv",
            "summary":"Remote Code Execution in Red Discord Bot ### Impact\nA RCE exploit has been discovered in the Trivia module: this exploit allows Discord users with specifically crafted usernames to inject code into the Trivia module's leaderboard command. By abusing this exploit, it's possible to perform destructive actions and\/or access sensitive information.\n\n### Patches\nThis critical exploit has been fixed on version 3.3.11.\n\n### Workarounds\nUnloading the Trivia module with ``unload trivia`` can render this exploit not accessible. We still highly recommend updating to 3.3.11 to completely patch this issue.\n\n### References\nhttps:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Cog-Creators\/Red-DiscordBot](https:\/\/github.com\/Cog-Creators\/Red-DiscordBot)\n* Over on our [Discord server](https:\/\/discord.gg\/red)",
            "published_date":"2020-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot",
            "commit_href":"https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/pull\/4175\/commits\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "commit_sha":"9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "patch":"SINGLE",
            "chain_ord":"['9ab536235bafc2b42c3c17d7ce26f1cc64482a81']",
            "before_first_fix_commit":"{'c8526d42b4299d50b0c69f86204723cc82754453'}",
            "last_fix_commit":"9ab536235bafc2b42c3c17d7ce26f1cc64482a81",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/09\/2020, 23:11:15",
            "message":"Remove an unnecessary `.format`",
            "author":"Flame442",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'redbot\/cogs\/trivia\/trivia.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Cog-Creators\/Red-DiscordBot\/raw\/9ab536235bafc2b42c3c17d7ce26f1cc64482a81\/redbot%2Fcogs%2Ftrivia%2Ftrivia.py', 'patch': '@@ -539,7 +539,7 @@ def _get_leaderboard(data: dict, key: str, top: int):\\n             )\\n             padding = [\" \" * (len(h) - len(f)) for h, f in zip(headers, fields)]\\n             fields = tuple(f + padding[i] for i, f in enumerate(fields))\\n-            lines.append(\" | \".join(fields).format(member=member, **m_data))\\n+            lines.append(\" | \".join(fields))\\n             if rank == top:\\n                 break\\n         return \"\\\\n\".join(lines)'}}",
            "message_norm":"remove an unnecessary `.format`",
            "language":"en",
            "entities":"[('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['redbot\/cogs\/trivia\/trivia.py'])",
            "num_files":1.0
        },
        {
            "index":454,
            "vuln_id":"GHSA-4p8f-mmfj-r45g",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/fatfreecrm\/fat_free_crm\/commit\/6d60bc8ed010c4eda05d6645c64849f415f68d65'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in fat_free_crm Fat Free CRM before 0.18.1 has XSS in the tags_helper in app\/helpers\/tags_helper.rb.",
            "published_date":"2019-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/fatfreecrm\/fat_free_crm",
            "commit_href":"https:\/\/github.com\/fatfreecrm\/fat_free_crm\/commit\/6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "commit_sha":"6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "patch":"SINGLE",
            "chain_ord":"['6d60bc8ed010c4eda05d6645c64849f415f68d65']",
            "before_first_fix_commit":"{'557fe238a65ca94ce21e3940724ab96e55e1b27d'}",
            "last_fix_commit":"6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/26\/2018, 23:55:55",
            "message":"Context-sensitive XSS bugfix.",
            "author":"Antonin Steinhauser",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/helpers\/tags_helper.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fatfreecrm\/fat_free_crm\/raw\/6d60bc8ed010c4eda05d6645c64849f415f68d65\/app%2Fhelpers%2Ftags_helper.rb', 'patch': '@@ -17,7 +17,7 @@ def tags_for_index(model)\\n       elsif !query.include?(hashtag)\\n         query += \" #{hashtag}\"\\n       end\\n-      out << link_to_function(tag, \"crm.search_tagged(\\'#{query}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n+      out << link_to_function(tag, \"crm.search_tagged(\\'#{escape_javascript(query)}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n     end\\n   end'}}",
            "message_norm":"context-sensitive xss bugfix.",
            "language":"fr",
            "entities":"[('sensitive', 'SECWORD', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/helpers\/tags_helper.rb'])",
            "num_files":1.0
        },
        {
            "index":531,
            "vuln_id":"GHSA-52q8-877j-gghq",
            "cwe_id":"{'CWE-22'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/moinwiki\/moin-1.9\/commit\/6b96a9060069302996b5af47fd4a388fc80172b7'}",
            "dataset":"osv",
            "summary":"remote code execution via cache action in MoinMoin ### Impact\nThe cache action in action\/cache.py allows directory traversal through a crafted HTTP request. An attacker who can upload attachments to\nthe wiki can use this to achieve remote code execution.\n\n### Patches\nUsers are strongly advised to upgrade to a patched version.\n\nMoinMoin Wiki 1.9.11 has the necessary fixes and also contains other important fixes.\n\n### Workarounds\nIt is not advised to work around this, but to upgrade MoinMoin to a patched version.\n\nThat said, a work around via disabling the `cache` or the `AttachFile` action might be possible.\n\nAlso, it is of course helpful if you give `write` permissions (which include uploading attachments) only to trusted users.\n\n### Credits\n\nThis vulnerability was discovered by Michael Chapman.\n\n### For more information\nIf you have any questions or comments about this advisory, email me at [twaldmann@thinkmo.de](mailto:twaldmann@thinkmo.de).",
            "published_date":"2020-11-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/moinwiki\/moin-1.9",
            "commit_href":"https:\/\/github.com\/moinwiki\/moin-1.9\/commit\/6b96a9060069302996b5af47fd4a388fc80172b7",
            "commit_sha":"6b96a9060069302996b5af47fd4a388fc80172b7",
            "patch":"SINGLE",
            "chain_ord":"['6b96a9060069302996b5af47fd4a388fc80172b7']",
            "before_first_fix_commit":"{'d1e5fc7d3708d877353ca64dd4aa7cfd1cde4cb4', '31de9139d0aabc171e94032168399b4a0b2a88a2'}",
            "last_fix_commit":"6b96a9060069302996b5af47fd4a388fc80172b7",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/08\/2020, 16:21:56",
            "message":"Merge pull request from GHSA-52q8-877j-gghq\n\nsecurity: fix remote code execution via cache action, CVE-2020-25074",
            "author":"TW",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 7, 'total': 27}",
            "files":"{'MoinMoin\/action\/cache.py': {'additions': 20, 'deletions': 7, 'changes': 27, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/moinwiki\/moin-1.9\/raw\/6b96a9060069302996b5af47fd4a388fc80172b7\/MoinMoin%2Faction%2Fcache.py', 'patch': \"@@ -103,6 +103,19 @@ def key(request, wikiname=None, itemname=None, attachname=None, content=None, se\\n     return key\\n \\n \\n+def valid_key(key):\\n+    # make sure the key looks like keys generated by key()\\n+    if not isinstance(key, unicode):\\n+        # key is None (not given in url args) or something unexpected\\n+        return False\\n+    try:\\n+        int(key, 16)  # try to evaluate as hex number\\n+    except ValueError:\\n+        # was not a hex number\\n+        return False\\n+    return len(key) == 40  # hmac-sha1 hexdigest == 40 hex chars\\n+\\n+\\n def put(request, key, data,\\n         filename=None,\\n         content_type=None,\\n@@ -234,14 +247,14 @@ def _do_remove(request, key):\\n     remove(request, key)\\n \\n \\n-def _do(request, do, key):\\n-    if do == 'get':\\n-        _do_get(request, key)\\n-    elif do == 'remove':\\n-        _do_remove(request, key)\\n-\\n def execute(pagename, request):\\n     do = request.values.get('do')\\n     key = request.values.get('key')\\n-    _do(request, do, key)\\n+    valid = valid_key(key)  # validate untrusted input\\n+    if valid and do == 'get':\\n+        _do_get(request, key)\\n+    elif valid and do == 'remove':\\n+        _do_remove(request, key)\\n+    else:\\n+        request.status_code = 404\"}}",
            "message_norm":"merge pull request from ghsa-52q8-877j-gghq\n\nsecurity: fix remote code execution via cache action, cve-2020-25074",
            "language":"en",
            "entities":"[('ghsa-52q8-877j-gghq', 'VULNID', 'GHSA'), ('security', 'SECWORD', ''), ('fix', 'ACTION', ''), ('remote code execution', 'SECWORD', ''), ('cve-2020-25074', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['MoinMoin\/action\/cache.py'])",
            "num_files":1.0
        },
        {
            "index":2779,
            "vuln_id":"GHSA-qm58-cvvm-c5qr",
            "cwe_id":"{'CWE-434'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1'}",
            "dataset":"osv",
            "summary":"elFinder unsafe upload filtering leading to remote code execution ### Impact\n\nBefore elFinder 2.1.58, the upload filter did not disallow the upload of `.phar` files. As several Linux distributions are now shipping Apache configured in a way it will process these files as PHP scripts, attackers could gain arbitrary code execution on the server hosting the PHP connector (even in minimal configuration).\n\n### Patches\n\nThe issue has been addressed with https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1, associating `.phar` files to the right MIME type. Unless explicitly allowed in the configuration, such files cannot be uploaded anymore. This patch is part of the last release of elFinder, 2.1.58.\n\n### Workarounds\n\nIf you can't update to 2.1.58, make sure your connector is not exposed without authentication.\n\n### Important tips\n\nServer-side scripts can often be created as text files. Currently, elFinder has an appropriate MIME type set for file extensions that are generally runnable on a web server.\n\nHowever, the server has various settings. In some cases, the executable file may be judged as \"text\/plain\". Therefore, elFinder installers should understand the extensions that can be executed on the web server where elFinder is installed, and check if there are any missing items in the elFinder settings.\n\nThe elFinder PHP connector has an option \"additionalMimeMap\" that specifies the MIME type for each extension. See [#3295(comment)](https:\/\/github.com\/Studio-42\/elFinder\/issues\/3295#issuecomment-853042139) for more information.\n\n### References\n\n- https:\/\/snyk.io\/vuln\/composer:studio-42%2Felfinder\n- https:\/\/github.com\/Studio-42\/elFinder\/issues\/3295\n- Further technical details will be disclosed on https:\/\/blog.sonarsource.com\/tag\/security after some time.\n\n### For more information\n\nIf you have any questions or comments about this advisory, you can contact:\n- The original reporters, by sending an email to  support [at] snyk.io or vulnerability.research [at] sonarsource.com;\n- The maintainers, by opening an issue on this repository.",
            "published_date":"2021-06-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Studio-42\/elFinder",
            "commit_href":"https:\/\/github.com\/Studio-42\/elFinder\/commit\/75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "commit_sha":"75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "patch":"SINGLE",
            "chain_ord":"['75ea92decc16a5daf7f618f85dc621d1b534b5e1']",
            "before_first_fix_commit":"{'6a97635e590b5882bf95f62f8e70e7230bbc625e'}",
            "last_fix_commit":"75ea92decc16a5daf7f618f85dc621d1b534b5e1",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/31\/2021, 11:50:39",
            "message":"[VD:abstract] add `'phar:*' => 'text\/x-php'` into 'staticMineMap'\n\nrel. #3295",
            "author":"nao-pon",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'php\/elFinderVolumeDriver.class.php': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Studio-42\/elFinder\/raw\/75ea92decc16a5daf7f618f85dc621d1b534b5e1\/php%2FelFinderVolumeDriver.class.php', 'patch': \"@@ -281,6 +281,7 @@ abstract class elFinderVolumeDriver\\n             'php5:*' => 'text\/x-php',\\n             'php7:*' => 'text\/x-php',\\n             'phtml:*' => 'text\/x-php',\\n+            'phar:*' => 'text\/x-php',\\n             'cgi:*' => 'text\/x-httpd-cgi',\\n             'pl:*' => 'text\/x-perl',\\n             'asp:*' => 'text\/x-asap',\"}}",
            "message_norm":"[vd:abstract] add `'phar:*' => 'text\/x-php'` into 'staticminemap'\n\nrel. #3295",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('#3295', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['php\/elFinderVolumeDriver.class.php'])",
            "num_files":1.0
        },
        {
            "index":1718,
            "vuln_id":"GHSA-fcwc-p4fc-c5cc",
            "cwe_id":"{'CWE-476'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/482da92095c4d48f8784b1f00dda4f81c28d2988'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in `MatrixDiagPartOp` ### Impact\nIf a user does not provide a valid padding value to `tf.raw_ops.MatrixDiagPartOp`, then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagPartV2(\n  input=tf.ones(2,dtype=tf.int32),\n  k=tf.ones(2,dtype=tf.int32),\n  padding_value=[])\n```\n\nAlthough this example is given for `MatrixDiagPartV2`, all versions of the operation are affected.\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from.\n\n### Patches\nWe have patched the issue in GitHub commit [482da92095c4d48f8784b1f00dda4f81c28d2988](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/482da92095c4d48f8784b1f00dda4f81c28d2988).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/482da92095c4d48f8784b1f00dda4f81c28d2988",
            "commit_sha":"482da92095c4d48f8784b1f00dda4f81c28d2988",
            "patch":"SINGLE",
            "chain_ord":"['482da92095c4d48f8784b1f00dda4f81c28d2988']",
            "before_first_fix_commit":"{'3b4351cc2d8ebf31d28dd78fb2730069d6716ad4'}",
            "last_fix_commit":"482da92095c4d48f8784b1f00dda4f81c28d2988",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2021, 22:07:31",
            "message":"Ensure non-empty padding_value input to tf.raw_ops.MatrixDiagPartV2, if a padding_value is input\n\nPiperOrigin-RevId: 388314614\nChange-Id: If0b51ad58d5d8543a6be6ce8f42ae4755c80d55f",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/482da92095c4d48f8784b1f00dda4f81c28d2988\/tensorflow%2Fcore%2Fkernels%2Flinalg%2Fmatrix_diag_op.cc', 'patch': '@@ -89,7 +89,10 @@ class MatrixDiagPartOp : public OpKernel {\\n           upper_diag_index = diag_index.flat<int32>()(1);\\n         }\\n       }\\n-      padding_value = context->input(2).flat<T>()(0);\\n+      const Tensor& padding_in = context->input(2);\\n+      OP_REQUIRES(context, padding_in.NumElements() == 1,\\n+                  errors::InvalidArgument(\"Padding must be scalar.\"));\\n+      padding_value = padding_in.flat<T>()(0);\\n     }\\n     const TensorShape& input_shape = input.shape();'}}",
            "message_norm":"ensure non-empty padding_value input to tf.raw_ops.matrixdiagpartv2, if a padding_value is input\n\npiperorigin-revid: 388314614\nchange-id: if0b51ad58d5d8543a6be6ce8f42ae4755c80d55f",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('388314614', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/linalg\/matrix_diag_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3286,
            "vuln_id":"GHSA-wjh9-344g-vc49",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/francoisjacquet\/rosariosis\/commit\/6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in RosarioSIS Cross-site Scripting (XSS) - Stored in GitHub repository francoisjacquet\/rosariosis prior to 9.0.",
            "published_date":"2022-06-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/francoisjacquet\/rosariosis",
            "commit_href":"https:\/\/github.com\/francoisjacquet\/rosariosis\/commit\/6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8",
            "commit_sha":"6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8",
            "patch":"SINGLE",
            "chain_ord":"['6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8']",
            "before_first_fix_commit":"{'25eb3196e26df31917dfef87aa9f66f78c1646ea'}",
            "last_fix_commit":"6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/04\/2022, 11:44:21",
            "message":"Fix stored XSS security issue: remove inline JS from URL in PreparePHP_SELF.fnc.php",
            "author":"Fran\u00e7ois Jacquet",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'functions\/PreparePHP_SELF.fnc.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/francoisjacquet\/rosariosis\/raw\/6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8\/functions%2FPreparePHP_SELF.fnc.php', 'patch': \"@@ -200,7 +200,7 @@ function( $match ) {\\n \\n \\tforeach ( $remove as $remove_string )\\n \\t{\\n-\\t\\twhile ( strpos( $string, $remove_string ) !== false )\\n+\\t\\twhile ( stripos( $string, $remove_string ) !== false )\\n \\t\\t{\\n \\t\\t\\t$string = str_ireplace( $remove, '', $string );\\n \\t\\t}\"}}",
            "message_norm":"fix stored xss security issue: remove inline js from url in preparephp_self.fnc.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('remove', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['functions\/PreparePHP_SELF.fnc.php'])",
            "num_files":1.0
        },
        {
            "index":1257,
            "vuln_id":"GHSA-8v5f-hp78-jgxq",
            "cwe_id":"{'CWE-347'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/hokaccha\/node-jwt-simple\/commit\/ead36e1d687645da9c3be8befdaaef622ea33106'}",
            "dataset":"osv",
            "summary":"Signature Verification Bypass in jwt-simple Versions of `jwt-simple` prior to 0.5.3 are vulnerable to Signature Verification Bypass. If no algorithm is specified in the `decode()` function, the packages uses the algorithm in the JWT to decode tokens. This allows an attacker to create a HS256 (symmetric algorithm) JWT with the server's public key as secret, and the package will verify it as HS256 instead of RS256 (asymmetric algorithm).\n\n\n## Recommendation\n\nUpgrade to version 0.5.3 or later.",
            "published_date":"2019-06-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/hokaccha\/node-jwt-simple",
            "commit_href":"https:\/\/github.com\/hokaccha\/node-jwt-simple\/commit\/ead36e1d687645da9c3be8befdaaef622ea33106",
            "commit_sha":"ead36e1d687645da9c3be8befdaaef622ea33106",
            "patch":"SINGLE",
            "chain_ord":"['ead36e1d687645da9c3be8befdaaef622ea33106']",
            "before_first_fix_commit":"{'ecb19a046432f3e9d9490c10c74c1d6f123c18e0'}",
            "last_fix_commit":"ead36e1d687645da9c3be8befdaaef622ea33106",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2017, 01:56:51",
            "message":"Use RS256 if algorithm is undefined but key is RSA",
            "author":"Daniel",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'lib\/jwt.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hokaccha\/node-jwt-simple\/raw\/ead36e1d687645da9c3be8befdaaef622ea33106\/lib%2Fjwt.js', 'patch': \"@@ -76,6 +76,10 @@ jwt.decode = function jwt_decode(token, key, noVerify, algorithm) {\\n   var payload = JSON.parse(base64urlDecode(payloadSeg));\\n \\n   if (!noVerify) {\\n+    if (!algorithm && \/BEGIN( RSA)? PUBLIC KEY\/.test(key.toString())) {\\n+      algorithm = 'RS256';\\n+    }\\n+\\n     var signingMethod = algorithmMap[algorithm || header.alg];\\n     var signingType = typeMap[algorithm || header.alg];\\n     if (!signingMethod || !signingType) {\"}}",
            "message_norm":"use rs256 if algorithm is undefined but key is rsa",
            "language":"en",
            "entities":"[('key', 'SECWORD', ''), ('rsa', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/jwt.js'])",
            "num_files":1.0
        },
        {
            "index":3279,
            "vuln_id":"GHSA-wh98-p28r-vrc9",
            "cwe_id":"{'CWE-200'}",
            "score":7.4,
            "chain":"{'https:\/\/github.com\/rails\/rails\/commit\/f9a2ad03943d5c2ba54e1d45f155442b519c75da'}",
            "dataset":"osv",
            "summary":"Exposure of information in Action Pack ### Impact\n\nUnder certain circumstances response bodies will not be closed, for example a [bug in a webserver](https:\/\/github.com\/puma\/puma\/pull\/2812) or a bug in a Rack middleware.  In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request.  This can lead to data being leaked to subsequent requests, especially when interacting with `ActiveSupport::CurrentAttributes`.\n\nUpgrading to the FIXED versions of Rails will ensure mitigation of this issue even in the context of a buggy webserver or middleware implementation.\n\n### Patches\n\nThis has been fixed in Rails 7.0.2.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\n### Workarounds\n\nUpgrading is highly recommended, but to work around this problem the following middleware can be used:\n\n```ruby\nclass GuardedExecutor < ActionDispatch::Executor\n  def call(env)\n    ensure_completed!\n    super\n  end\n\n  private\n\n    def ensure_completed!\n      @executor.new.complete! if @executor.active?\n    end\nend\n\n# Ensure the guard is inserted before ActionDispatch::Executor\nRails.application.configure do\n  config.middleware.swap ActionDispatch::Executor, GuardedExecutor, executor\nend\n```",
            "published_date":"2022-02-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/rails\/rails",
            "commit_href":"https:\/\/github.com\/rails\/rails\/commit\/f9a2ad03943d5c2ba54e1d45f155442b519c75da",
            "commit_sha":"f9a2ad03943d5c2ba54e1d45f155442b519c75da",
            "patch":"SINGLE",
            "chain_ord":"['f9a2ad03943d5c2ba54e1d45f155442b519c75da']",
            "before_first_fix_commit":"{'761a2e25520566d932c41c740b8a5c513d839de8'}",
            "last_fix_commit":"f9a2ad03943d5c2ba54e1d45f155442b519c75da",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/11\/2022, 19:23:01",
            "message":"Fix reloader to work with new Executor signature\n\nThis is a follow up to [CVE-2022-23633].",
            "author":"Aaron Patterson",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'activesupport\/lib\/active_support\/reloader.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rails\/rails\/raw\/f9a2ad03943d5c2ba54e1d45f155442b519c75da\/activesupport%2Flib%2Factive_support%2Freloader.rb', 'patch': '@@ -58,7 +58,7 @@ def self.reload!\\n       prepare!\\n     end\\n \\n-    def self.run! # :nodoc:\\n+    def self.run!(reset: false) # :nodoc:\\n       if check!\\n         super\\n       else'}}",
            "message_norm":"fix reloader to work with new executor signature\n\nthis is a follow up to [cve-2022-23633].",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('signature', 'SECWORD', ''), ('cve-2022-23633', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['activesupport\/lib\/active_support\/reloader.rb'])",
            "num_files":1.0
        },
        {
            "index":3107,
            "vuln_id":"GHSA-vfr4-x8j2-3rf9",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `TransposeConv` ### Impact\nThe optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/optimized\/optimized_ops.h#L5221-L5222):\n\n```cc \nint height_col = (height + pad_t + pad_b - filter_h) \/ stride_h + 1;\nint width_col = (width + pad_l + pad_r - filter_w) \/ stride_w + 1;\n```\n\nAn attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "commit_sha":"801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "patch":"SINGLE",
            "chain_ord":"['801c1c6be5324219689c98e1bd3e0ca365ee834d']",
            "before_first_fix_commit":"{'8e45822aa0b9f5df4b4c64f221e64dc930a70a9d'}",
            "last_fix_commit":"801c1c6be5324219689c98e1bd3e0ca365ee834d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:25",
            "message":"Fix another division by 0 in TFLite\n\nPiperOrigin-RevId: 370800181\nChange-Id: I924809166a6131f5075e6d45c455106538d755f9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'tensorflow\/lite\/kernels\/transpose_conv.cc': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/801c1c6be5324219689c98e1bd3e0ca365ee834d\/tensorflow%2Flite%2Fkernels%2Ftranspose_conv.cc', 'patch': '@@ -591,6 +591,10 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   const auto* params =\\n       reinterpret_cast<TfLiteTransposeConvParams*>(node->builtin_data);\\n \\n+  \/\/ Prevent divisions by 0\\n+  TF_LITE_ENSURE(context, params->stride_height > 0);\\n+  TF_LITE_ENSURE(context, params->stride_width > 0);\\n+\\n   \/\/ Resize any deferred dynamic tensors\\n   if (IsDynamicTensor(output)) {\\n     TF_LITE_ENSURE_OK(context, ResizeTensor(context, output_shape, output));'}}",
            "message_norm":"fix another division by 0 in tflite\n\npiperorigin-revid: 370800181\nchange-id: i924809166a6131f5075e6d45c455106538d755f9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('370800181', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/transpose_conv.cc'])",
            "num_files":1.0
        },
        {
            "index":1763,
            "vuln_id":"GHSA-fq86-3f29-px2c",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082'}",
            "dataset":"osv",
            "summary":"`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-07",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6",
            "commit_sha":"240655511cd3e701155f944a972db71b6c0b1bb6",
            "patch":"MULTI",
            "chain_ord":"['ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', '1fb27733f943295d874417630edd3b38b34ce082', '240655511cd3e701155f944a972db71b6c0b1bb6']",
            "before_first_fix_commit":"{'1fb27733f943295d874417630edd3b38b34ce082'}",
            "last_fix_commit":"240655511cd3e701155f944a972db71b6c0b1bb6",
            "chain_ord_pos":3.0,
            "commit_datetime":"11\/11\/2021, 17:24:31",
            "message":"Eliminate `CHECK`-fails from `IsSimplifiableReshape` via `MakeShape(<invalid shape>)`\n\nPiperOrigin-RevId: 409166738\nChange-Id: I7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 2, 'total': 6}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 4, 'deletions': 2, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/240655511cd3e701155f944a972db71b6c0b1bb6\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1741,14 +1741,16 @@ Status ConstantFolding::IsSimplifiableReshape(\\n       int32_t dim = outputs[0]->flat<int32>()(i);\\n       shp.push_back(dim);\\n     }\\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\\n+    if (!s.ok()) return s;\\n   } else {\\n     std::vector<int64_t> shp;\\n     for (int i = 0; i < outputs[0]->NumElements(); ++i) {\\n       int64_t dim = outputs[0]->flat<int64_t>()(i);\\n       shp.push_back(dim);\\n     }\\n-    TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));\\n+    s = TensorShapeUtils::MakeShape(shp, &new_dims);\\n+    if (!s.ok()) return s;\\n   }\\n \\n   if (!shape.IsCompatibleWith(new_dims)) {'}}",
            "message_norm":"eliminate `check`-fails from `issimplifiablereshape` via `makeshape(<invalid shape>)`\n\npiperorigin-revid: 409166738\nchange-id: i7f0a3590b8acae3f3e3e2fe636e1f5ef285693cf",
            "language":"en",
            "entities":"[('409166738', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":2587,
            "vuln_id":"GHSA-ph5x-h23x-7q5q",
            "cwe_id":"{'CWE-79', 'CWE-116'}",
            "score":7.4,
            "chain":"{'https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/27f839133d41877e538d35fa88274b50a1c00b9b'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in wiki manager join wiki page ### Impact\nWe found a possible XSS vector in the `WikiManager.JoinWiki ` wiki page related to the \"requestJoin\" field.\n\n### Patches\nThe issue is patched in versions 12.10.11, 14.0-rc-1, 13.4.7, 13.10.3.\n\n### Workarounds\nThe easiest workaround is to edit the wiki page `WikiManager.JoinWiki` (with wiki editor) and change the line\n\n```\n<input type='hidden' name='requestJoin' value=\"$!request.requestJoin\"\/>\n```\n\ninto\n\n```\n<input type='hidden' name='requestJoin' value=\"$escapetool.xml($!request.requestJoin)\">\n```\n\n### References\n  * https:\/\/jira.xwiki.org\/browse\/XWIKI-19292\n  * https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/27f839133d41877e538d35fa88274b50a1c00b9b\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Jira XWiki](https:\/\/jira.xwiki.org)\n* Email us at [security mailing list](mailto:security@xwiki.org)",
            "published_date":"2022-05-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/xwiki\/xwiki-platform",
            "commit_href":"https:\/\/github.com\/xwiki\/xwiki-platform\/commit\/27f839133d41877e538d35fa88274b50a1c00b9b",
            "commit_sha":"27f839133d41877e538d35fa88274b50a1c00b9b",
            "patch":"SINGLE",
            "chain_ord":"['27f839133d41877e538d35fa88274b50a1c00b9b']",
            "before_first_fix_commit":"{'bd935320bee3c27cf7548351b1d0f935f116d437'}",
            "last_fix_commit":"27f839133d41877e538d35fa88274b50a1c00b9b",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/04\/2022, 10:35:46",
            "message":"XWIKI-19292: Fix bad escaping",
            "author":"Thomas Mortagne",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'xwiki-platform-core\/xwiki-platform-wiki\/xwiki-platform-wiki-ui\/xwiki-platform-wiki-ui-mainwiki\/src\/main\/resources\/WikiManager\/JoinWiki.xml': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/xwiki\/xwiki-platform\/raw\/27f839133d41877e538d35fa88274b50a1c00b9b\/xwiki-platform-core%2Fxwiki-platform-wiki%2Fxwiki-platform-wiki-ui%2Fxwiki-platform-wiki-ui-mainwiki%2Fsrc%2Fmain%2Fresources%2FWikiManager%2FJoinWiki.xml', 'patch': '@@ -245,7 +245,7 @@\\n                   &lt;a href=\"$backUrl\" class=\\'button secondary\\'&gt;{{translation key=\"platform.wiki.users.join.request.cancel.label\"\/}}&lt;\/a&gt;\\n                 &lt;\/span&gt;\\n                 &lt;input type=\\'hidden\\' name=\\'wikiId\\' value=\"$!wikiId\"\/&gt;\\n-                &lt;input type=\\'hidden\\' name=\\'requestJoin\\' value=\"$!request.requestJoin\"\/&gt;\\n+                &lt;input type=\\'hidden\\' name=\\'requestJoin\\' value=\"$escapetool.xml($!request.requestJoin)\"\/&gt;\\n                 &lt;input type=\"hidden\" name=\"form_token\" value=\"$!escapetool.xml($services.csrf.getToken())\" \/&gt;\\n               &lt;\/dl&gt;\\n             &lt;\/form&gt;'}}",
            "message_norm":"xwiki-19292: fix bad escaping",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('escaping', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['xwiki-platform-core\/xwiki-platform-wiki\/xwiki-platform-wiki-ui\/xwiki-platform-wiki-ui-mainwiki\/src\/main\/resources\/WikiManager\/JoinWiki.xml'])",
            "num_files":1.0
        },
        {
            "index":1343,
            "vuln_id":"GHSA-98p5-x8x4-c9m5",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4'}",
            "dataset":"osv",
            "summary":"Integer overflow in TFLite ### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/ca6f96b62ad84207fbec580404eaa7dd7403a550\/tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i < lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape->data.i32[i];\n    lookup_size *= dim;\n    output_shape->data[k] = dim;\n  }\n  for (int i = 1; i < embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape->data[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read\/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1de49725a5fc4e48f1a3b902ec3599ee99283043",
            "commit_sha":"1de49725a5fc4e48f1a3b902ec3599ee99283043",
            "patch":"MULTI",
            "chain_ord":"['f19be71717c497723ba0cea0379e84f061a75e01', '1de49725a5fc4e48f1a3b902ec3599ee99283043', 'a4e401da71458d253b05e41f28637b65baf64be4']",
            "before_first_fix_commit":"{'f435ae9dee673e83504618b77e1be8cddda73e74'}",
            "last_fix_commit":"a4e401da71458d253b05e41f28637b65baf64be4",
            "chain_ord_pos":2.0,
            "commit_datetime":"12\/21\/2021, 16:48:11",
            "message":"[lite] Check for overflow when creating required bytes.\n\nPiperOrigin-RevId: 417629001\nChange-Id: Ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
            "author":"Karim Nosir",
            "comments":null,
            "stats":"{'additions': 16, 'deletions': 7, 'total': 23}",
            "files":"{'tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc': {'additions': 16, 'deletions': 7, 'changes': 23, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1de49725a5fc4e48f1a3b902ec3599ee99283043\/tensorflow%2Flite%2Fkernels%2Fembedding_lookup_sparse.cc', 'patch': '@@ -72,6 +72,7 @@ limitations under the License.\\n #include \"tensorflow\/lite\/kernels\/internal\/tensor_ctypes.h\"\\n #include \"tensorflow\/lite\/kernels\/internal\/tensor_utils.h\"\\n #include \"tensorflow\/lite\/kernels\/kernel_util.h\"\\n+#include \"tensorflow\/lite\/util.h\"\\n \\n namespace tflite {\\n namespace ops {\\n@@ -175,25 +176,33 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);\\n   TF_LITE_ENSURE(context, output_shape != nullptr);\\n   int k = 0;\\n-  int embedding_size = 1;\\n-  int lookup_size = 1;\\n+  size_t embedding_size = 1;\\n+  size_t lookup_size = 1;\\n   for (int i = 0; i < lookup_rank - 1; i++, k++) {\\n-    const int dim = dense_shape->data.i32[i];\\n-    lookup_size *= dim;\\n+    const size_t dim = dense_shape->data.i32[i];\\n+    TF_LITE_ENSURE_MSG(\\n+        context,\\n+        MultiplyAndCheckOverflow(lookup_size, dim, &lookup_size) == kTfLiteOk,\\n+        \"Lookup size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   for (int i = 1; i < embedding_rank; i++, k++) {\\n-    const int dim = SizeOfDimension(value, i);\\n-    embedding_size *= dim;\\n+    const size_t dim = SizeOfDimension(value, i);\\n+    TF_LITE_ENSURE_MSG(context,\\n+                       MultiplyAndCheckOverflow(embedding_size, dim,\\n+                                                &embedding_size) == kTfLiteOk,\\n+                       \"Embedding size overflowed.\");\\n     output_shape->data[k] = dim;\\n   }\\n   TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_shape));\\n-  const int output_size = lookup_size * embedding_size;\\n+  const size_t output_size = lookup_size * embedding_size;\\n   TfLiteTensorRealloc(output_size * sizeof(float), output);\\n \\n   float* output_ptr = GetTensorData<float>(output);\\n   const float* weights_ptr = GetTensorData<float>(weights);\\n   const float* value_ptr = GetTensorData<float>(value);\\n+  \/\/ Makes sure reallocation was successful.\\n+  TF_LITE_ENSURE(context, output_ptr != nullptr);\\n \\n   std::fill_n(output_ptr, output_size, 0.0f);'}}",
            "message_norm":"[lite] check for overflow when creating required bytes.\n\npiperorigin-revid: 417629001\nchange-id: ia7feb3ea8e988f4fd4b3c98c1a1fed4557d99fd7",
            "language":"en",
            "entities":"[('overflow', 'SECWORD', ''), ('417629001', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/embedding_lookup_sparse.cc'])",
            "num_files":1.0
        },
        {
            "index":354,
            "vuln_id":"GHSA-44cw-p2hm-gpf6",
            "cwe_id":"{'CWE-297'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/opencast\/opencast\/commit\/4225bf90af74557deaf8fb6b80b0705c9621acfc'}",
            "dataset":"osv",
            "summary":"Disabled Hostname Verification in Opencast Opencast before version 8.9 and 7.9 disables HTTPS hostname verification of its HTTP client used for a large portion of Opencast's HTTP requests.\n\nHostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks.\n\n### Patches\n\nThis problem is fixed in Opencast 7.9 and Opencast 8.9\n\n### Self-Signed Certificates\n\nPlease be aware that fixing the problem means that Opencast will not simply accept any self-signed certificates any longer without properly importing them. If you need those, please make sure to import them into the Java key store. Better yet, get a valid certificate e.g. from [Let's Encrypt](https:\/\/letsencrypt.org).",
            "published_date":"2020-12-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencast\/opencast",
            "commit_href":"https:\/\/github.com\/opencast\/opencast\/commit\/4225bf90af74557deaf8fb6b80b0705c9621acfc",
            "commit_sha":"4225bf90af74557deaf8fb6b80b0705c9621acfc",
            "patch":"SINGLE",
            "chain_ord":"['4225bf90af74557deaf8fb6b80b0705c9621acfc']",
            "before_first_fix_commit":"{'4b905437e90bd19700a6a6688f227f9efb20e153'}",
            "last_fix_commit":"4225bf90af74557deaf8fb6b80b0705c9621acfc",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/17\/2020, 17:03:36",
            "message":"Re-Enable Hostname Verification\n\nThis patch is a minimal change to re-enable HTTPS hostname verification\nof Opencast's HTTP client used for a large portion its HTTP requests.\n\nHostname verification is an important part when using HTTPS to ensure\nthat the presented certificate is valid for the host. Disabling it can\nallow for man-in-the-middle attacks.",
            "author":"Lars Kiesow",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 136, 'total': 137}",
            "files":"{'modules\/kernel\/src\/main\/java\/org\/opencastproject\/kernel\/http\/impl\/HttpClientImpl.java': {'additions': 1, 'deletions': 136, 'changes': 137, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencast\/opencast\/raw\/4225bf90af74557deaf8fb6b80b0705c9621acfc\/modules%2Fkernel%2Fsrc%2Fmain%2Fjava%2Forg%2Fopencastproject%2Fkernel%2Fhttp%2Fimpl%2FHttpClientImpl.java', 'patch': '@@ -27,28 +27,12 @@\\n import org.apache.http.client.CredentialsProvider;\\n import org.apache.http.client.methods.HttpUriRequest;\\n import org.apache.http.conn.ClientConnectionManager;\\n-import org.apache.http.conn.scheme.Scheme;\\n-import org.apache.http.conn.scheme.SchemeRegistry;\\n-import org.apache.http.conn.ssl.SSLSocketFactory;\\n-import org.apache.http.conn.ssl.X509HostnameVerifier;\\n import org.apache.http.impl.client.DefaultHttpClient;\\n import org.apache.http.params.HttpParams;\\n import org.slf4j.Logger;\\n import org.slf4j.LoggerFactory;\\n \\n import java.io.IOException;\\n-import java.security.KeyManagementException;\\n-import java.security.NoSuchAlgorithmException;\\n-import java.security.SecureRandom;\\n-import java.security.cert.CertificateException;\\n-import java.security.cert.X509Certificate;\\n-\\n-import javax.net.ssl.SSLContext;\\n-import javax.net.ssl.SSLException;\\n-import javax.net.ssl.SSLSession;\\n-import javax.net.ssl.SSLSocket;\\n-import javax.net.ssl.TrustManager;\\n-import javax.net.ssl.X509TrustManager;\\n \\n \/** Implementation of HttpClient that makes http requests. *\/\\n public class HttpClientImpl implements HttpClient {\\n@@ -57,7 +41,7 @@ public class HttpClientImpl implements HttpClient {\\n   private static final Logger logger = LoggerFactory.getLogger(HttpClientImpl.class);\\n \\n   \/** client used for all http requests. *\/\\n-  private DefaultHttpClient defaultHttpClient = makeHttpClient();\\n+  private DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\\n \\n   \/** See org.opencastproject.kernel.http.api.HttpClient *\/\\n   @Override\\n@@ -83,123 +67,4 @@ public ClientConnectionManager getConnectionManager() {\\n     return defaultHttpClient.getConnectionManager();\\n   }\\n \\n-  \/**\\n-   * Creates a new client that can deal with all kinds of oddities with regards to http\/https connections.\\n-   *\\n-   * @return the client\\n-   *\/\\n-  private DefaultHttpClient makeHttpClient() {\\n-\\n-    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\\n-    try {\\n-      logger.debug(\"Installing forgiving hostname verifier and trust managers\");\\n-      X509TrustManager trustManager = createTrustManager();\\n-      X509HostnameVerifier hostNameVerifier = createHostNameVerifier();\\n-      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\\n-      sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());\\n-      SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);\\n-      ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();\\n-      SchemeRegistry sr = ccm.getSchemeRegistry();\\n-      sr.register(new Scheme(\"https\", 443, ssf));\\n-    } catch (NoSuchAlgorithmException e) {\\n-      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\\n-    } catch (KeyManagementException e) {\\n-      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\\n-    }\\n-\\n-    return defaultHttpClient;\\n-  }\\n-\\n-  \/**\\n-   * Returns a new trust manager which will be in charge of checking the SSL certificates that are being presented by\\n-   * SSL enabled hosts.\\n-   *\\n-   * @return the trust manager\\n-   *\/\\n-  private X509TrustManager createTrustManager() {\\n-    X509TrustManager trustManager = new X509TrustManager() {\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)\\n-       *\/\\n-      public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {\\n-        logger.trace(\"Skipping trust check on client certificate {}\", string);\\n-      }\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)\\n-       *\/\\n-      public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {\\n-        logger.trace(\"Skipping trust check on server certificate {}\", string);\\n-      }\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()\\n-       *\/\\n-      public X509Certificate[] getAcceptedIssuers() {\\n-        logger.trace(\"Returning empty list of accepted issuers\");\\n-        return null;\\n-      }\\n-\\n-    };\\n-\\n-    return trustManager;\\n-  }\\n-\\n-  \/**\\n-   * Creates a host name verifier that will make sure the SSL host\\'s name matches the name in the SSL certificate.\\n-   *\\n-   * @return the host name verifier\\n-   *\/\\n-  private X509HostnameVerifier createHostNameVerifier() {\\n-    X509HostnameVerifier verifier = new X509HostnameVerifier() {\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSocket)\\n-       *\/\\n-      public void verify(String host, SSLSocket ssl) throws IOException {\\n-        logger.trace(\"Skipping SSL host name check on {}\", host);\\n-      }\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.security.cert.X509Certificate)\\n-       *\/\\n-      public void verify(String host, X509Certificate xc) throws SSLException {\\n-        logger.trace(\"Skipping X509 certificate host name check on {}\", host);\\n-      }\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.lang.String[],\\n-       *      java.lang.String[])\\n-       *\/\\n-      public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\\n-        logger.trace(\"Skipping DNS host name check on {}\", host);\\n-      }\\n-\\n-      \/**\\n-       * {@InheritDoc}\\n-       *\\n-       * @see javax.net.ssl.HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSession)\\n-       *\/\\n-      public boolean verify(String host, SSLSession ssl) {\\n-        logger.trace(\"Skipping SSL session host name check on {}\", host);\\n-        return true;\\n-      }\\n-    };\\n-\\n-    return verifier;\\n-  }\\n-\\n }'}}",
            "message_norm":"re-enable hostname verification\n\nthis patch is a minimal change to re-enable https hostname verification\nof opencast's http client used for a large portion its http requests.\n\nhostname verification is an important part when using https to ensure\nthat the presented certificate is valid for the host. disabling it can\nallow for man-in-the-middle attacks.",
            "language":"en",
            "entities":"[('hostname', 'SECWORD', ''), ('hostname', 'SECWORD', ''), ('hostname', 'SECWORD', ''), ('ensure', 'ACTION', ''), ('certificate', 'SECWORD', ''), ('man-in-the-middle', 'SECWORD', ''), ('attacks', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/kernel\/src\/main\/java\/org\/opencastproject\/kernel\/http\/impl\/HttpClientImpl.java'])",
            "num_files":1.0
        },
        {
            "index":1683,
            "vuln_id":"GHSA-f7f4-hqp2-7prc",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/ff02114eaec090ee51db48435cc32d451662606e', 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in sails-hook-sockets Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.",
            "published_date":"2020-07-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/balderdashy\/sails-hook-sockets",
            "commit_href":"https:\/\/github.com\/balderdashy\/sails-hook-sockets\/commit\/0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "commit_sha":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "patch":"MULTI",
            "chain_ord":"['ff02114eaec090ee51db48435cc32d451662606e', '0533a4864b1920fd8fbb5287bc0889193c5faf44']",
            "before_first_fix_commit":"{'4f78b7946f7a7ac4c762936d7633298606c1e4a7'}",
            "last_fix_commit":"0533a4864b1920fd8fbb5287bc0889193c5faf44",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/23\/2018, 21:38:55",
            "message":"Follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
            "author":"Mike McNeil",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'lib\/receive-incoming-sails-io-msg.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/balderdashy\/sails-hook-sockets\/raw\/0533a4864b1920fd8fbb5287bc0889193c5faf44\/lib%2Freceive-incoming-sails-io-msg.js', 'patch': \"@@ -106,7 +106,10 @@ module.exports = function ToReceiveIncomingSailsIOMsg(app) {\\n \\n       url     : options.incomingSailsIOMsg.url,\\n \\n-      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\\n+      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '\/',\\n+      \/\/ ^^ Uses || '\/' because otherwise url.parse returns `null`,\\n+      \/\/ which is not a string and thus bad when you try to check\\n+      \/\/ .match() of it.\\n \\n       method  : options.eventName,\"}}",
            "message_norm":"follow up to ff02114eaec090ee51db48435cc32d451662606e to ensure req.path is good and stringy.",
            "language":"en",
            "entities":"[('ff02114eaec090ee51db48435cc32d451662606e', 'SHA', 'generic_sha'), ('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/receive-incoming-sails-io-msg.js'])",
            "num_files":1.0
        },
        {
            "index":1410,
            "vuln_id":"GHSA-9p77-mmrw-69c7",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a513cec4bec15961fbfdedcaa5376522980455c'}",
            "dataset":"osv",
            "summary":"Null-dereference in Tensorflow ### Impact\nWhen decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is [guarded by a `DCHECK`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/full_type_util.cc#L104-L106):\n\n```cc\n  const auto* attr = attrs.Find(arg->s()); \n  DCHECK(attr != nullptr);\n  if (attr->value_case() == AttrValue::kList) {\n    \/\/ ...\n  }\n```\nHowever, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure.\n\n### Patches\nWe have patched the issue in GitHub commit [8a513cec4bec15961fbfdedcaa5376522980455c](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a513cec4bec15961fbfdedcaa5376522980455c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a513cec4bec15961fbfdedcaa5376522980455c",
            "commit_sha":"8a513cec4bec15961fbfdedcaa5376522980455c",
            "patch":"SINGLE",
            "chain_ord":"['8a513cec4bec15961fbfdedcaa5376522980455c']",
            "before_first_fix_commit":"{'258112d838f008a632fe0dc43fc9ebecb9b0b869'}",
            "last_fix_commit":"8a513cec4bec15961fbfdedcaa5376522980455c",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/08\/2021, 18:35:47",
            "message":"Prevent null dereference read in `SpecializeType()`\n\nFor some adversarial protos, the attribute for a key might not exist.\n\nPiperOrigin-RevId: 408382090\nChange-Id: Ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'tensorflow\/core\/framework\/full_type_util.cc': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8a513cec4bec15961fbfdedcaa5376522980455c\/tensorflow%2Fcore%2Fframework%2Ffull_type_util.cc', 'patch': '@@ -22,6 +22,7 @@ limitations under the License.\\n #include \"tensorflow\/core\/framework\/op_def.pb.h\"\\n #include \"tensorflow\/core\/framework\/types.h\"\\n #include \"tensorflow\/core\/platform\/statusor.h\"\\n+#include \"tensorflow\/core\/protobuf\/error_codes.pb.h\"\\n \\n namespace tensorflow {\\n \\n@@ -102,7 +103,11 @@ StatusOr<FullTypeDef> SpecializeType(const AttrSlice& attrs,\\n       auto* arg = t->mutable_args(i);\\n       if (arg->type_id() == TFT_VAR) {\\n         const auto* attr = attrs.Find(arg->s());\\n-        DCHECK(attr != nullptr);\\n+        if (attr == nullptr) {\\n+          return Status(\\n+              error::INVALID_ARGUMENT,\\n+              absl::StrCat(\"Could not find an attribute for key \", arg->s()));\\n+        }\\n         if (attr->value_case() == AttrValue::kList) {\\n           const auto& attr_list = attr->list();\\n           arg->set_type_id(TFT_PRODUCT);'}}",
            "message_norm":"prevent null dereference read in `specializetype()`\n\nfor some adversarial protos, the attribute for a key might not exist.\n\npiperorigin-revid: 408382090\nchange-id: ie7eabe532c9ff280fce5dce1f6cdb93c76c2e040",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null dereference', 'SECWORD', ''), ('adversarial', 'SECWORD', ''), ('key', 'SECWORD', ''), ('408382090', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/full_type_util.cc'])",
            "num_files":1.0
        },
        {
            "index":2119,
            "vuln_id":"GHSA-hrf4-hcpc-3345",
            "cwe_id":"{'CWE-190'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/f7acbd075dff4825b35b597b74958de9edce67fc'}",
            "dataset":"osv",
            "summary":"Denial of service in microweber Microweber is drag and drop website builder and CMS with E-commerce. The microweber prior 1.2.12 application allows large characters to insert in the input field \"post title\" which can allow attackers to cause a Denial of Service (DoS) via a crafted HTTP request. The post title input can be limited to 500 characters or max 1000 characters as a workaround.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/f7acbd075dff4825b35b597b74958de9edce67fc",
            "commit_sha":"f7acbd075dff4825b35b597b74958de9edce67fc",
            "patch":"SINGLE",
            "chain_ord":"['f7acbd075dff4825b35b597b74958de9edce67fc']",
            "before_first_fix_commit":"{'14e960d184e681507f5293be86446d18d1c125b5'}",
            "last_fix_commit":"f7acbd075dff4825b35b597b74958de9edce67fc",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 15:00:22",
            "message":"Update PostRequest.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'src\/MicroweberPackages\/Post\/Http\/Requests\/PostRequest.php': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/f7acbd075dff4825b35b597b74958de9edce67fc\/src%2FMicroweberPackages%2FPost%2FHttp%2FRequests%2FPostRequest.php', 'patch': \"@@ -22,8 +22,15 @@ public function authorize()\\n      *\/\\n     public function rules()\\n     {\\n+        \/\/ todo with multilanguage\\n+\\n         $rules = [\\n-           \/\/ 'title' => 'required', \/\/ todo with multilanguage\\n+            'title' => 'required|max:500',\\n+            'url' => 'max:500',\\n+            'description' => 'max:500',\\n+            'content_meta_title' => 'max:500',\\n+            'content_meta_keywords' => 'max:500',\\n+            'original_link' => 'max:500',\\n         ];\\n \\n         return $rules;\"}}",
            "message_norm":"update postrequest.php",
            "language":"fr",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Post\/Http\/Requests\/PostRequest.php'])",
            "num_files":1.0
        },
        {
            "index":2025,
            "vuln_id":"GHSA-h8hx-2c5r-32cf",
            "cwe_id":"{'CWE-352'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/TrestleAdmin\/trestle-auth\/commit\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery (CSRF) in trestle-auth ### Impact\nA vulnerability in trestle-auth versions 0.4.0 and 0.4.1 allows an attacker to create a form that will bypass Rails' built-in CSRF protection when submitted by a victim with a trestle-auth admin session. This potentially allows an attacker to alter protected data, including admin account credentials.\n\n### Patches\nThe vulnerability has been fixed in trestle-auth 0.4.2 released to RubyGems.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [trestle-auth](https:\/\/github.com\/TrestleAdmin\/trestle-auth\/issues)\n* Email the maintainer at [sam@sampohlenz.com](mailto:sam@sampohlenz.com)",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/TrestleAdmin\/trestle-auth",
            "commit_href":"https:\/\/github.com\/TrestleAdmin\/trestle-auth\/commit\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "commit_sha":"cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "patch":"SINGLE",
            "chain_ord":"['cb95b05cdb2609052207af07b4b8dfe3a23c11dc']",
            "before_first_fix_commit":"{'021955aa5d67260d6ba1faf2b5d59b9772164968'}",
            "last_fix_commit":"cb95b05cdb2609052207af07b4b8dfe3a23c11dc",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/12\/2021, 10:12:49",
            "message":"Ensure CSRF protection is prepended before authentication before_actions",
            "author":"Sam Pohlenz",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'lib\/trestle\/auth\/controller\/authentication.rb': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/TrestleAdmin\/trestle-auth\/raw\/cb95b05cdb2609052207af07b4b8dfe3a23c11dc\/lib%2Ftrestle%2Fauth%2Fcontroller%2Fauthentication.rb', 'patch': '@@ -9,6 +9,9 @@ module Authentication\\n \\n           prepend_before_action :require_authenticated_user\\n           prepend_before_action :authenticate_user\\n+\\n+          # Ensure that CSRF protection happens before authentication\\n+          protect_from_forgery prepend: true\\n         end\\n \\n       protected'}}",
            "message_norm":"ensure csrf protection is prepended before authentication before_actions",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('protection', 'SECWORD', ''), ('authentication', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/trestle\/auth\/controller\/authentication.rb'])",
            "num_files":1.0
        },
        {
            "index":2143,
            "vuln_id":"GHSA-hwch-749c-rv63",
            "cwe_id":"{'CWE-74'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/github\/hubot-scripts\/commit\/feee5abdb038a229a98969ae443cdb8a61747782'}",
            "dataset":"osv",
            "summary":"Potential Command Injection in hubot-scripts Versions 2.4.3 and earlier of hubot-scripts are vulnerable to a command injection vulnerablity in the `hubot-scripts\/package\/src\/scripts\/email.coffee` module.\n\n\n### Mitigating Factors\nThe email script is not enabled by default, it has to be manually added to hubot's list of loaded scripts.\n\n\n## Recommendation\n\nUpdate hubot-scripts to version 2.4.4 or later.",
            "published_date":"2020-08-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/github\/hubot-scripts",
            "commit_href":"https:\/\/github.com\/github\/hubot-scripts\/commit\/feee5abdb038a229a98969ae443cdb8a61747782",
            "commit_sha":"feee5abdb038a229a98969ae443cdb8a61747782",
            "patch":"SINGLE",
            "chain_ord":"['feee5abdb038a229a98969ae443cdb8a61747782']",
            "before_first_fix_commit":"{'8f3dd0ab5af14664d317e4925f72aa3f78adb6e9'}",
            "last_fix_commit":"feee5abdb038a229a98969ae443cdb8a61747782",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2013, 19:00:24",
            "message":"Fix code execution issue in email command.",
            "author":"Neal Poole",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 4, 'total': 10}",
            "files":"{'src\/scripts\/email.coffee': {'additions': 6, 'deletions': 4, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/github\/hubot-scripts\/raw\/feee5abdb038a229a98969ae443cdb8a61747782\/src%2Fscripts%2Femail.coffee', 'patch': '@@ -18,16 +18,18 @@\\n \\n util = require \\'util\\'\\n child_process = require \\'child_process\\'\\n-exec = child_process.exec\\n \\n module.exports = (robot) ->\\n   emailTime = null\\n   sendEmail = (recipients, subject, msg, from) ->\\n-    mailCommand = \"\"\"echo \\'#{msg}\\' | mail -s \\'#{subject}\\' -r \\'#{from}\\' \\'#{recipients}\\'\"\"\"\\n-    exec mailCommand, (error, stdout, stderr) ->\\n+    mailArgs = [\\'-s\\', subject, \\'-a\\', \"From: #{from}\", \\'--\\']\\n+    mailArgs = mailArgs.concat recipients\\n+    p = child_process.execFile \\'mail\\', mailArgs, {}, (error, stdout, stderr) ->\\n       util.print \\'stdout: \\' + stdout\\n       util.print \\'stderr: \\' + stderr\\n+    p.stdin.write \"#{msg}\\\\n\"\\n+    p.stdin.end()\\n \\n   robot.respond \/email (.*) -s (.*) -m (.*)\/i, (msg) ->\\n-    sendEmail msg.match[1], msg.match[2], msg.match[3], msg.message.user.id\\n+    sendEmail msg.match[1].split(\" \"), msg.match[2], msg.match[3], msg.message.user.id\\n     msg.send \"email sent\"'}}",
            "message_norm":"fix code execution issue in email command.",
            "language":"fr",
            "entities":"[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/scripts\/email.coffee'])",
            "num_files":1.0
        },
        {
            "index":1525,
            "vuln_id":"GHSA-c9qf-r67m-p7cg",
            "cwe_id":"{'CWE-476'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5dc7f6981fdaf74c8c5be41f393df705841fb7c5'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in `CompressElement` ### Impact\nIt is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.CompressElement(components=[[]])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/47a06f40411a69c99f381495f490536972152ac0\/tensorflow\/core\/data\/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [5dc7f6981fdaf74c8c5be41f393df705841fb7c5](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5dc7f6981fdaf74c8c5be41f393df705841fb7c5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it was resolved in `master` branch as it was also discovered internally and fixed before the report was handled.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
            "commit_sha":"5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
            "patch":"SINGLE",
            "chain_ord":"['5dc7f6981fdaf74c8c5be41f393df705841fb7c5']",
            "before_first_fix_commit":"{'de9a4335c96bec8fa69abb89618b1daa4b2459fa'}",
            "last_fix_commit":"5dc7f6981fdaf74c8c5be41f393df705841fb7c5",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/15\/2021, 05:07:07",
            "message":"Fix accessing possible nullptr in tensorflow::data::CompressElement and UncompressElement which are used in tf.data.service.\n\nPiperOrigin-RevId: 373920841\nChange-Id: Ia88d78aee09fa19bb53a0f163fd19620d0c68743",
            "author":"A. Unique TensorFlower",
            "comments":null,
            "stats":"{'additions': 15, 'deletions': 7, 'total': 22}",
            "files":"{'tensorflow\/core\/data\/compression_utils.cc': {'additions': 15, 'deletions': 7, 'changes': 22, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5dc7f6981fdaf74c8c5be41f393df705841fb7c5\/tensorflow%2Fcore%2Fdata%2Fcompression_utils.cc', 'patch': '@@ -29,9 +29,10 @@ Status CompressElement(const std::vector<Tensor>& element,\\n   int64 total_size = 0;\\n   for (auto& component : element) {\\n     if (DataTypeCanUseMemcpy(component.dtype())) {\\n-      \/\/ Some datatypes can be memcopied, allowing us to save two copies\\n-      \/\/ (AsProtoTensorContent and SerializeToArray).\\n-      total_size += DMAHelper::buffer(&component)->size();\\n+      const TensorBuffer* buffer = DMAHelper::buffer(&component);\\n+      if (buffer) {\\n+        total_size += buffer->size();\\n+      }\\n     } else {\\n       non_memcpy_components.emplace_back();\\n       component.AsProtoTensorContent(&non_memcpy_components.back());\\n@@ -53,8 +54,10 @@ Status CompressElement(const std::vector<Tensor>& element,\\n     component.shape().AsProto(metadata->mutable_tensor_shape());\\n     if (DataTypeCanUseMemcpy(component.dtype())) {\\n       const TensorBuffer* buffer = DMAHelper::buffer(&component);\\n-      memcpy(position, buffer->data(), buffer->size());\\n-      metadata->set_tensor_size_bytes(buffer->size());\\n+      if (buffer) {\\n+        memcpy(position, buffer->data(), buffer->size());\\n+        metadata->set_tensor_size_bytes(buffer->size());\\n+      }\\n     } else {\\n       TensorProto& proto = non_memcpy_components[non_memcpy_component_index++];\\n       proto.SerializeToArray(position, proto.ByteSizeLong());\\n@@ -94,8 +97,13 @@ Status UncompressElement(const CompressedElement& compressed,\\n     if (DataTypeCanUseMemcpy(metadata.dtype())) {\\n       out->emplace_back(metadata.dtype(), metadata.tensor_shape());\\n       TensorBuffer* buffer = DMAHelper::buffer(&out->back());\\n-      iov[i].iov_base = buffer->data();\\n-      iov[i].iov_len = buffer->size();\\n+      if (buffer) {\\n+        iov[i].iov_base = buffer->data();\\n+        iov[i].iov_len = buffer->size();\\n+      } else {\\n+        iov[i].iov_base = nullptr;\\n+        iov[i].iov_len = 0;\\n+      }\\n     } else {\\n       \/\/ Allocate an empty Tensor. We will fill it out later after\\n       \/\/ uncompressing into the tensor_proto_str.'}}",
            "message_norm":"fix accessing possible nullptr in tensorflow::data::compresselement and uncompresselement which are used in tf.data.service.\n\npiperorigin-revid: 373920841\nchange-id: ia88d78aee09fa19bb53a0f163fd19620d0c68743",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('tensorflow::data::compresselement', 'SECWORD', ''), ('uncompresselement', 'SECWORD', ''), ('373920841', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/data\/compression_utils.cc'])",
            "num_files":1.0
        },
        {
            "index":1325,
            "vuln_id":"GHSA-9689-rx4v-cqgc",
            "cwe_id":"{'CWE-601'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/concourse\/concourse\/pull\/5350\/commits\/38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb'}",
            "dataset":"osv",
            "summary":"Open Redirect Pivotal Concourse Release, versions 4.x prior to 4.2.2, login flow allows redirects to untrusted websites. A remote unauthenticated attacker could convince a user to click on a link using the oAuth redirect link with an untrusted website and gain access to that user's access token in Concourse.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/concourse\/concourse",
            "commit_href":"https:\/\/github.com\/concourse\/concourse\/pull\/5350\/commits\/38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb",
            "commit_sha":"38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb",
            "patch":"SINGLE",
            "chain_ord":"['38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb']",
            "before_first_fix_commit":"{'091671e19b3779e439f5ad4a6b4b89aa20a33778'}",
            "last_fix_commit":"38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/20\/2020, 16:32:09",
            "message":"skymarshal: use escaped path for redirect URI\n\nSigned-off-by: Rui Yang <ryang@pivotal.io>",
            "author":"Rui Yang",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'skymarshal\/skyserver\/skyserver.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/concourse\/concourse\/raw\/38cb4cc025e5ed28764b4adc363a0bbf41f3c7cb\/skymarshal%2Fskyserver%2Fskyserver.go', 'patch': '@@ -257,7 +257,7 @@ func (s *SkyServer) Redirect(w http.ResponseWriter, r *http.Request, token *oaut\\n \\tparams := redirectURL.Query()\\n \\tparams.Set(\"csrf_token\", csrfToken)\\n \\n-\\thttp.Redirect(w, r, redirectURL.Path+\"?\"+params.Encode(), http.StatusTemporaryRedirect)\\n+\\thttp.Redirect(w, r, redirectURL.EscapedPath()+\"?\"+params.Encode(), http.StatusTemporaryRedirect)\\n }\\n \\n func (s *SkyServer) Token(w http.ResponseWriter, r *http.Request) {'}}",
            "message_norm":"skymarshal: use escaped path for redirect uri\n\nsigned-off-by: rui yang <ryang@pivotal.io>",
            "language":"en",
            "entities":"[('escaped', 'SECWORD', ''), ('ryang@pivotal.io', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['skymarshal\/skyserver\/skyserver.go'])",
            "num_files":1.0
        },
        {
            "index":1868,
            "vuln_id":"GHSA-gf88-j2mg-cc82",
            "cwe_id":"{'CWE-681'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992'}",
            "dataset":"osv",
            "summary":"Crash caused by integer conversion to unsigned ### Impact\nAn attacker can cause a denial of service in `boosted_trees_create_quantile_stream_resource` by using negative arguments:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_boosted_trees_ops\nimport numpy as np\n\nv= tf.Variable([0.0, 0.0, 0.0, 0.0, 0.0])\ngen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource(\n  quantile_stream_resource_handle = v.handle,\n  epsilon = [74.82224],\n  num_streams = [-49], \n  max_elements = np.int32(586))\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/boosted_trees\/quantile_ops.cc#L96) does not validate that `num_streams` only contains non-negative numbers. In turn, [this results in using this value to allocate memory](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/boosted_trees\/quantiles\/quantile_stream_resource.h#L31-L40):\n\n```cc\nclass BoostedTreesQuantileStreamResource : public ResourceBase {\n public:\n  BoostedTreesQuantileStreamResource(const float epsilon,\n                                     const int64 max_elements,\n                                     const int64 num_streams)\n      : are_buckets_ready_(false),\n        epsilon_(epsilon),\n        num_streams_(num_streams),\n        max_elements_(max_elements) {\n    streams_.reserve(num_streams_);\n    ...\n  }\n}\n```\n\nHowever, `reserve` receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library.\n\n### Patches\nWe have patched the issue in GitHub commit [8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992",
            "commit_sha":"8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992",
            "patch":"SINGLE",
            "chain_ord":"['8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992']",
            "before_first_fix_commit":"{'f8a1ac8d75f9b3d00c90148ca1e91b735b6d542c'}",
            "last_fix_commit":"8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/28\/2021, 22:34:04",
            "message":"Ensure num_streams >= 0 in tf.raw_ops.BoostedTreesCreateQuantileStreamResource\n\nPiperOrigin-RevId: 387452765\nChange-Id: I9990c760e177fabca6a3b9b4612ceeaeeba51495",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/core\/kernels\/boosted_trees\/quantile_ops.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992\/tensorflow%2Fcore%2Fkernels%2Fboosted_trees%2Fquantile_ops.cc', 'patch': '@@ -116,6 +116,9 @@ class BoostedTreesCreateQuantileStreamResourceOp : public OpKernel {\\n     const Tensor* num_streams_t;\\n     OP_REQUIRES_OK(context, context->input(kNumStreamsName, &num_streams_t));\\n     int64_t num_streams = num_streams_t->scalar<int64>()();\\n+    OP_REQUIRES(context, num_streams >= 0,\\n+                errors::InvalidArgument(\\n+                    \"Num_streams input cannot be a negative integer\"));\\n \\n     auto result =\\n         new QuantileStreamResource(epsilon, max_elements_, num_streams);'}}",
            "message_norm":"ensure num_streams >= 0 in tf.raw_ops.boostedtreescreatequantilestreamresource\n\npiperorigin-revid: 387452765\nchange-id: i9990c760e177fabca6a3b9b4612ceeaeeba51495",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('387452765', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/boosted_trees\/quantile_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1086,
            "vuln_id":"GHSA-7vvq-7r29-5vg3",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/mrdoob\/three.js\/commit\/0c31bc605e21965aad8a6479bb1969351773f76d'}",
            "dataset":"osv",
            "summary":"Cross site scripting in three.js # CVE has been withdrawn\n\nVersions of three.js prior to 0.137.0 load untrusted iframes and allow for attackers to inject arbitrary javascript into a users browser.",
            "published_date":"2022-01-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/mrdoob\/three.js",
            "commit_href":"https:\/\/github.com\/mrdoob\/three.js\/commit\/0c31bc605e21965aad8a6479bb1969351773f76d",
            "commit_sha":"0c31bc605e21965aad8a6479bb1969351773f76d",
            "patch":"SINGLE",
            "chain_ord":"['0c31bc605e21965aad8a6479bb1969351773f76d']",
            "before_first_fix_commit":"{'55d4f24cb50e995b0dfee73979305e8237384a53'}",
            "last_fix_commit":"0c31bc605e21965aad8a6479bb1969351773f76d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/24\/2022, 17:39:24",
            "message":"Only load trusted iframe (#23245)",
            "author":"Rohan Sharma",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'docs\/index.html': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mrdoob\/three.js\/raw\/0c31bc605e21965aad8a6479bb1969351773f76d\/docs%2Findex.html', 'patch': '@@ -498,7 +498,7 @@ <h1><a href=\"https:\/\/threejs.org\">three.js<\/a><\/h1>\\n \\t\\t\\tconst oldIframe = iframe;\\n \\t\\t\\tiframe = oldIframe.cloneNode();\\n \\n-\\t\\t\\tif ( hash ) {\\n+\\t\\t\\tif ( hash && titles[ splitHash[ 0 ] ] ) {\\n \\n \\t\\t\\t\\tiframe.src = splitHash[ 0 ] + \\'.html\\' + splitHash[ 1 ];\\n \\t\\t\\t\\tsubtitle = titles[ splitHash[ 0 ] ] + splitHash[ 1 ] + \\' \u2013 \\';'}}",
            "message_norm":"only load trusted iframe (#23245)",
            "language":"en",
            "entities":"[('#23245', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['docs\/index.html'])",
            "num_files":1.0
        },
        {
            "index":496,
            "vuln_id":"GHSA-4vhw-4rw7-jfpv",
            "cwe_id":"{'CWE-22'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/NilsIrl\/MozWire\/pull\/17\/commits\/dd0639bf2876773b66382f47285f7db701f628d9'}",
            "dataset":"osv",
            "summary":"Path traversal in mozwire An issue was discovered in the mozwire crate through 2020-08-18 for Rust. A ..\/ directory-traversal situation allows overwriting local files that have .conf at the end of the filename.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/NilsIrl\/MozWire",
            "commit_href":"https:\/\/github.com\/NilsIrl\/MozWire\/pull\/17\/commits\/dd0639bf2876773b66382f47285f7db701f628d9",
            "commit_sha":"dd0639bf2876773b66382f47285f7db701f628d9",
            "patch":"SINGLE",
            "chain_ord":"['dd0639bf2876773b66382f47285f7db701f628d9']",
            "before_first_fix_commit":"{'1e58d8ba41268b36232e6830808565850ec65587'}",
            "last_fix_commit":"dd0639bf2876773b66382f47285f7db701f628d9",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/18\/2020, 19:05:11",
            "message":"Validate server hostnames to prevent path traversal\n\nIf Mozilla servers were compromised, hostnames could be used for path\ntraversal attacks. The impact would be very low as it would only be\npossible to write wireguard configs.\n\nFix #14",
            "author":"Nils",
            "comments":null,
            "stats":"{'additions': 23, 'deletions': 2, 'total': 25}",
            "files":"{'src\/main.rs': {'additions': 23, 'deletions': 2, 'changes': 25, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/NilsIrl\/MozWire\/raw\/dd0639bf2876773b66382f47285f7db701f628d9\/src%2Fmain.rs', 'patch': '@@ -106,6 +106,14 @@ struct Server {\\n     port_ranges: Vec<(u16, u16)>,\\n }\\n \\n+impl Server {\\n+    fn validate_hostname(&self) -> bool {\\n+        self.hostname\\n+            .chars()\\n+            .all(|c| c.is_ascii_alphanumeric() || c == \\'-\\')\\n+    }\\n+}\\n+\\n \/\/ latitude and longitude omitted\\n #[derive(serde::Deserialize)]\\n struct City {\\n@@ -130,13 +138,26 @@ struct ServerList {\\n \\n impl ServerList {\\n     fn new(client: reqwest::blocking::Client, token: &str) -> Self {\\n-        client\\n+        let server_list = client\\n             .get(&format!(\"{}\/vpn\/servers\", BASE_URL))\\n             .bearer_auth(token)\\n             .send()\\n             .unwrap()\\n             .json::<ServerList>()\\n-            .unwrap()\\n+            .unwrap();\\n+        if let Some(server) = server_list\\n+            .countries\\n+            .iter()\\n+            .flat_map(|country| country.cities.iter().flat_map(|city| city.servers.iter()))\\n+            .find(|server| !server.validate_hostname())\\n+        {\\n+            eprintln!(\\n+                \"A server contains invalid characters in its hostname: {}\",\\n+                server.hostname\\n+            );\\n+            std::process::exit(3);\\n+        }\\n+        server_list\\n     }\\n }'}}",
            "message_norm":"validate server hostnames to prevent path traversal\n\nif mozilla servers were compromised, hostnames could be used for path\ntraversal attacks. the impact would be very low as it would only be\npossible to write wireguard configs.\n\nfix #14",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('server', 'SECWORD', ''), ('prevent', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('servers', 'SECWORD', ''), ('attacks', 'SECWORD', ''), ('low', 'SEVERITY', ''), ('fix', 'ACTION', ''), ('#14', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main.rs'])",
            "num_files":1.0
        },
        {
            "index":2261,
            "vuln_id":"GHSA-jjcx-999m-35hc",
            "cwe_id":"{'CWE-20'}",
            "score":3.3,
            "chain":"{'https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/e80d616ef4397e6e764f6b7b7a5b30121244933c'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in Firefly III Firefly III 4.7.17.3 is vulnerable to local file enumeration. An attacker can enumerate local files due to the lack of protocol scheme sanitization, such as for file:\/\/\/ URLs. This is related to fints_url to import\/job\/configuration, and import\/create\/fints.",
            "published_date":"2021-09-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/firefly-iii\/firefly-iii",
            "commit_href":"https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/e80d616ef4397e6e764f6b7b7a5b30121244933c",
            "commit_sha":"e80d616ef4397e6e764f6b7b7a5b30121244933c",
            "patch":"SINGLE",
            "chain_ord":"['e80d616ef4397e6e764f6b7b7a5b30121244933c']",
            "before_first_fix_commit":"{'2ddf48f15cbdbb475221c299872420f625c3bc3f'}",
            "last_fix_commit":"e80d616ef4397e6e764f6b7b7a5b30121244933c",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/02\/2019, 15:05:54",
            "message":"Fix #2367",
            "author":"James Cole",
            "comments":null,
            "stats":"{'additions': 20, 'deletions': 0, 'total': 20}",
            "files":"{'app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php': {'additions': 20, 'deletions': 0, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/firefly-iii\/firefly-iii\/raw\/e80d616ef4397e6e764f6b7b7a5b30121244933c\/app%2FSupport%2FImport%2FJobConfiguration%2FFinTS%2FNewFinTSJobHandler.php', 'patch': \"@@ -60,6 +60,9 @@ public function configureJob(array $data): MessageBag\\n         $config['fints_password']  = (string)(Crypt::encrypt($data['fints_password']) ?? '');\\n         $config['apply-rules']     = 1 === (int)$data['apply_rules'];\\n \\n+        \/\/ sanitize FinTS URL.\\n+        $config['fints_url'] = $this->validURI($config['fints_url']) ? $config['fints_url'] : '';\\n+\\n         $this->repository->setConfiguration($this->importJob, $config);\\n \\n \\n@@ -108,4 +111,21 @@ public function setImportJob(ImportJob $importJob): void\\n         $this->repository->setUser($importJob->user);\\n     }\\n \\n+    \/**\\n+     * @param string $fints_url\\n+     *\\n+     * @return bool\\n+     *\/\\n+    private function validURI(string $fintsUri): bool\\n+    {\\n+        $res = filter_var($fintsUri, FILTER_VALIDATE_URL);\\n+        if (false === $res) {\\n+            return false;\\n+        }\\n+        $scheme = parse_url($fintsUri, PHP_URL_SCHEME);\\n+\\n+        return 'https' === $scheme;\\n+    }\\n+\\n+\\n }\"}}",
            "message_norm":"fix #2367",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('#2367', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Support\/Import\/JobConfiguration\/FinTS\/NewFinTSJobHandler.php'])",
            "num_files":1.0
        },
        {
            "index":2484,
            "vuln_id":"GHSA-mxjj-953w-2c2v",
            "cwe_id":"{'CWE-787', 'CWE-125'}",
            "score":7.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ee24e7949a203d234489f9da2c5bf45a7d5157d'}",
            "dataset":"osv",
            "summary":"Data corruption in tensorflow-lite ### Impact\nWhen determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:\nhttps:\/\/github.com\/tensorflow\/tensorflow\/blob\/0e68f4d3295eb0281a517c3662f6698992b7b2cf\/tensorflow\/lite\/kernels\/internal\/types.h#L437-L442\n\nSince the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads\/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.\n\n### Patches\nWe have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2020-09-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "commit_sha":"8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "patch":"SINGLE",
            "chain_ord":"['8ee24e7949a203d234489f9da2c5bf45a7d5157d']",
            "before_first_fix_commit":"{'0b5662bc2be13a8c8f044d925d87fb6e56247cd8'}",
            "last_fix_commit":"8ee24e7949a203d234489f9da2c5bf45a7d5157d",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/18\/2020, 21:19:26",
            "message":"[tflite] Ensure `MatchingDim` does not allow buffer overflow.\n\nWe check in `MatchingDim` that both arguments have the same dimensionality, however that is a `DCHECK` only enabled if building in debug mode. Hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. To fix, we now make `MatchingDim` return the minimum of the two sizes.\n\nA much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\nPiperOrigin-RevId: 332526127\nChange-Id: If627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/internal\/types.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8ee24e7949a203d234489f9da2c5bf45a7d5157d\/tensorflow%2Flite%2Fkernels%2Finternal%2Ftypes.h', 'patch': '@@ -438,7 +438,7 @@ int MatchingArraySize(const ArrayType1& array1, int index1,\\n inline int MatchingDim(const RuntimeShape& shape1, int index1,\\n                        const RuntimeShape& shape2, int index2) {\\n   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));\\n-  return shape1.Dims(index1);\\n+  return std::min(shape1.Dims(index1), shape2.Dims(index2));\\n }\\n \\n template <typename... Args>'}}",
            "message_norm":"[tflite] ensure `matchingdim` does not allow buffer overflow.\n\nwe check in `matchingdim` that both arguments have the same dimensionality, however that is a `dcheck` only enabled if building in debug mode. hence, it could be possible to cause buffer overflows by passing in a tensor with larger dimensions as the second argument. to fix, we now make `matchingdim` return the minimum of the two sizes.\n\na much better fix would be to return a status object but that requires refactoring a large part of the codebase for minor benefits.\n\npiperorigin-revid: 332526127\nchange-id: if627d0d2c80a685217b6e0d1e64b0872dbf1c5e4",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('buffer overflow', 'SECWORD', ''), ('buffer overflows', 'SECWORD', ''), ('fix', 'ACTION', ''), ('332526127', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/internal\/types.h'])",
            "num_files":1.0
        },
        {
            "index":1305,
            "vuln_id":"GHSA-93q8-gq69-wqmw",
            "cwe_id":"{'CWE-697', 'CWE-1333'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chalk\/ansi-regex\/commit\/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9'}",
            "dataset":"osv",
            "summary":"Inefficient Regular Expression Complexity in chalk\/ansi-regex ansi-regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service.",
            "published_date":"2021-09-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/chalk\/ansi-regex",
            "commit_href":"https:\/\/github.com\/chalk\/ansi-regex\/commit\/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "commit_sha":"8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "patch":"SINGLE",
            "chain_ord":"['8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9']",
            "before_first_fix_commit":"{'c1b5e45f7c65a332ffb03ac8e5804ad37c579cdc'}",
            "last_fix_commit":"8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/10\/2021, 20:23:24",
            "message":"Fix potential ReDoS (#37)",
            "author":"Yeting Li",
            "comments":"{'com_1': {'author': 'BeigeBox', 'datetime': '09\/23\/2021, 21:00:58', 'body': \"Which versions of ansi-regex are impacted by this vulnerability?  Several scanners are flagging all versions of this library other than 5.0.1 and 6.0.1.  I suspect some of the older versions aren't impacted, because the pattern variable is different (just spot checked I think v2.1.1 and v3).\"}, 'com_2': {'author': 'Qix-', 'datetime': '09\/26\/2021, 15:10:07', 'body': \"Not sure because the security researchers are not doing their due diligence and are instead farming bounty money on e.g. huntr.dev, targeting the most used repositories for clout.\\r\\n\\r\\nI'm really not sure what to do about this and it's eating a lot of time away. The vulnerability itself is not major - unless you're allowing long AND unsanitized user input to hit the API directly, the vulnerability doesn't affect you.\\r\\n\\r\\nI have no idea which versions it actually affects because they didn't test it correctly.\"}, 'com_3': {'author': 'thoger', 'datetime': '09\/27\/2021, 18:07:58', 'body': \"Confirmed 4.1.0 and 3.0.0 as affected testing using the provided reproducer.  2.1.1 does not reproduce the issue.\\r\\n\\r\\n3.0.0 is the first affected, as that's the first version that includes 69bebf6b8 that the problematic part of the regex.\"}, 'com_4': {'author': 'Qix-', 'datetime': '09\/27\/2021, 18:22:35', 'body': 'Thank you @thoger. \ud83d\ude42'}, 'com_5': {'author': 'arungpro', 'datetime': '10\/12\/2021, 11:28:32', 'body': '@thoger Does 5.0.0 or above, are not affected this? Can you confirm on the same?'}, 'com_6': {'author': 'Qix-', 'datetime': '10\/12\/2021, 11:51:24', 'body': '@arungpro `5.0.0` is affected, `5.0.1` is not. Likewise, `6.0.0` is affected, `6.0.1` is not.'}, 'com_7': {'author': 'OnlineCop', 'datetime': '01\/10\/2022, 17:01:46', 'body': 'Would someone be able to help me understand the exact formatting going on here?\\r\\n\\r\\nI assume that the `\\\\` backslashes are escaped because this is within a string, meaning `\\\\u001B` must be represented as `\\\\\\\\u001B` ?\\r\\n\\r\\nI copied the \"proposed\" escaped original into [regex101](https:\/\/regex101.com\/r\/UR7Ma5\/1) and removed the escape characters to produce this:\\r\\n\\r\\n```[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]*)*)?\\\\u0007)```\\r\\n\\r\\nI then plugged that unescaped version [back in](https:\/\/regex101.com\/r\/UR7Ma5\/2) to determine whether there were any problems with the pattern itself, and see that there is an incomplete\/unclosed `(?:` which should probably be removed:\\r\\n\\r\\n```[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]*)*)?\\\\u0007```\\r\\n\\r\\nThe next outer `(?: ... )` group appears to have no alternations or quantifiers, so can probably also be removed:\\r\\n\\r\\n```(?:(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]*)*)?\\\\u0007)```\\r\\n\\r\\nThe next `(?: ... | ... )?` group does contain an alternation, and is qualified by its `?` quantifier. Immediately after this optional group, it looks for `\\\\u0007` at the end.\\r\\n\\r\\nWithin both alternations, the character groups `[-a-zA-Z\\\\d\\\\\/#&.:=?%@~_]` can be shortened: `[a-zA-Z0-9_]` or `[a-zA-Z\\\\d_]` can be replaced with `\\\\w`, so: `[-\\\\w\\\\\/#&.:=?%@~]`.\\r\\n\\r\\nThat would look like this:\\r\\n\\r\\n```[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:;[-\\\\w\\\\\/#&.:=?%@~]+)*|[a-zA-Z\\\\d]+(?:;[-\\\\w\\\\\/#&.:=?%@~]*)*)?\\\\u0007```\\r\\n\\r\\nSo, within the first alternation, it matches a semicolon `;` followed by **one** or more of those character-group characters. Within the second alternation, it first looks for letters or numbers, followed by any number of semicolon `;` followed by **zero** or more of those character-group characters. I\\'m not sure whether that would want to be a `+` one-or-more, since that would allow \"abc;;;;;;;;;\" to match there instead of requiring characters between those semicolons.\\r\\n\\r\\nIf you look at [this example](https:\/\/regex101.com\/r\/UR7Ma5\/3), I\\'ve changed the outer non-capturing `(?: ... )?` to a capturing group just for illustrative purposes so you can see how the semicolon is matched in one case but not in the other due to this **zero** or more quantifiers. You can see this when the semicolon is added to the text in [this next example](https:\/\/regex101.com\/r\/UR7Ma5\/4).\\r\\n\\r\\nIf both `;[-\\\\w\\\\\/#&.:=?%@~]` character groups are quantified with zero-or-more `*`, then subsequent semicolons `;;` will match, while if they are quantified with one-or-more `+`, the match fails due to subsequent semicolons `;;`.'}, 'com_8': {'author': 'lorand-horvath', 'datetime': '04\/02\/2022, 07:47:22', 'body': 'ansi-regex v3 and v4 should now include the vulnerability fixes:\\r\\n`3.0.1` in https:\/\/github.com\/chalk\/ansi-regex\/commit\/419250fa510bf31b4cc672e76537a64f9332e1f1 and https:\/\/github.com\/chalk\/ansi-regex\/commit\/c57d4c2fdbe0357a0f6dd42d1160defdc9fffdf5\\r\\n`4.1.1` in https:\/\/github.com\/chalk\/ansi-regex\/commit\/75a657da7af875b2e2724fd6331bf0a4b23d3c9a'}, 'com_9': {'author': 'romans-ovo', 'datetime': '07\/13\/2022, 15:36:46', 'body': '> ansi-regex v3 and v4 should now include the vulnerability fixes: `3.0.1` in [419250f](https:\/\/github.com\/chalk\/ansi-regex\/commit\/419250fa510bf31b4cc672e76537a64f9332e1f1) and [c57d4c2](https:\/\/github.com\/chalk\/ansi-regex\/commit\/c57d4c2fdbe0357a0f6dd42d1160defdc9fffdf5) `4.1.1` in [75a657d](https:\/\/github.com\/chalk\/ansi-regex\/commit\/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\\r\\n\\r\\nNeither 3.0.1, nor 4.1.1 are listed on https:\/\/www.npmjs.com\/package\/ansi-regex (under Versions), btw.'}, 'com_10': {'author': 'Qix-', 'datetime': '07\/13\/2022, 15:42:41', 'body': '<img width=\"614\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/885648\/178775021-919b8738-8879-4edc-8507-a6b2475c5631.png\">\\r\\nYou sure?'}, 'com_11': {'author': 'papb', 'datetime': '08\/01\/2022, 02:05:09', 'body': \"> Would someone be able to help me understand the exact formatting going on here?\\r\\n\\r\\n@OnlineCop can you first help me understand what exactly is your question here? Are you trying to understand what the code is doing? Are you proposing a readability improvement? Or performance improvement? Sorry, you said a lot of things but I couldn't even understand what is your goal, roughly...\\r\\n\\r\\n> I assume that the `\\\\` backslashes are escaped because this is within a string, meaning `\\\\u001B` must be represented as `\\\\\\\\u001B` ?\\r\\n\\r\\nYes, exactly.\"}, 'com_12': {'author': 'OnlineCop', 'datetime': '08\/01\/2022, 14:23:36', 'body': \"In the original, lines 2-5 were looking for:\\r\\n1. either `\\\\u001B` (ESC) or `\\\\u009B` (\u00a2 cent sign) followed by 0 or more of these characters: `[]()#;?`\\r\\n\\r\\nAfter that, it was looking for either:\\r\\n2. any number of letters, numbers, semi-colons, or special characters that came before `\\\\u0007` (BEL)\\r\\n    - There were a _lot_ of 0-or-more groups, all of which was also within its own `(?:...)?` 0-or-1 (optional) group, before that BEL.\\r\\n    - It was definitely something that could cause ReDoS.\\r\\n3. or an optional group of digits and semi-colons, followed by a single character in the range `[\\\\dA-PR-TZcf-ntqry=><~]`.\\r\\n    - This optional group also had potential for a ReDoS.\\r\\n\\r\\nIn the revised version, lines 2-5 were looking for the same characters as 1. above, but increased the variety of characters allowed before `\\\\u0007` and still has a lot of potential for ReDoS (possibly more than before).\\r\\n\\r\\nI don't understand what exactly is supposed to be matched here. Both BEFORE and AFTER versions have a high probability to cause catastrophic backtracking. Are there any tests that should match either of the BEFORE or AFTER regexes?\"}, 'com_13': {'author': 'Qix-', 'datetime': '08\/02\/2022, 22:47:38', 'body': \"Feel free to create a reproduction case that exploits exponential time complexity and file an issue. Otherwise I'm not sure what you're trying to say.\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chalk\/ansi-regex\/raw\/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\/index.js', 'patch': \"@@ -1,6 +1,6 @@\\n export default function ansiRegex({onlyFirst = false} = {}) {\\n \\tconst pattern = [\\n-\\t\\t'[\\\\\\\\u001B\\\\\\\\u009B][[\\\\\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\\\\\d]*(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]*)*)?\\\\\\\\u0007)',\\n+\\t    '[\\\\\\\\u001B\\\\\\\\u009B][[\\\\\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\\\\\d]+(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\\/#&.:=?%@~_]*)*)?\\\\\\\\u0007)',\\n \\t\\t'(?:(?:\\\\\\\\d{1,4}(?:;\\\\\\\\d{0,4})*)?[\\\\\\\\dA-PR-TZcf-ntqry=><~]))'\\n \\t].join('|');\"}}",
            "message_norm":"fix potential redos (#37)",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('#37', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":216,
            "vuln_id":"GHSA-37q6-576q-vgr7",
            "cwe_id":"{'CWE-200'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/parcel-bundler\/parcel\/commit\/066e0bf6bd26b15c78bd47df023452e4b20073e4'}",
            "dataset":"osv",
            "summary":"Missing Origin Validation in parcel-bundler Versions of `parcel-bundler` before 1.10.0 are missing origin validation on the websocket server. This vulnerability allows a remote attacker to steal a developer's source code because the origin of requests to the websocket server that is used for Hot Module Replacement (HMR) are not validated.\n\n\n## Recommendation\n\nUpdate to version 1.10.0 or later.",
            "published_date":"2018-10-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/parcel-bundler\/parcel",
            "commit_href":"https:\/\/github.com\/parcel-bundler\/parcel\/commit\/066e0bf6bd26b15c78bd47df023452e4b20073e4",
            "commit_sha":"066e0bf6bd26b15c78bd47df023452e4b20073e4",
            "patch":"SINGLE",
            "chain_ord":"['066e0bf6bd26b15c78bd47df023452e4b20073e4']",
            "before_first_fix_commit":"{'948159b99adbc74857b380576e1e104a9097f259'}",
            "last_fix_commit":"066e0bf6bd26b15c78bd47df023452e4b20073e4",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/25\/2018, 03:49:56",
            "message":"fix security vuln (#1794)",
            "author":"Jasper De Moor",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 1, 'total': 12}",
            "files":"{'packages\/core\/parcel-bundler\/src\/HMRServer.js': {'additions': 11, 'deletions': 1, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/parcel-bundler\/parcel\/raw\/066e0bf6bd26b15c78bd47df023452e4b20073e4\/packages%2Fcore%2Fparcel-bundler%2Fsrc%2FHMRServer.js', 'patch': \"@@ -17,7 +17,17 @@ class HMRServer {\\n         this.server = https.createServer(await getCertificate(options.https));\\n       }\\n \\n-      this.wss = new WebSocket.Server({server: this.server});\\n+      let websocketOptions = {\\n+        server: this.server\\n+      };\\n+\\n+      if (options.hmrHostname) {\\n+        websocketOptions.origin = `${options.https ? 'https' : 'http'}:\/\/${\\n+          options.hmrHostname\\n+        }`;\\n+      }\\n+\\n+      this.wss = new WebSocket.Server(websocketOptions);\\n       this.server.listen(options.hmrPort, resolve);\\n     });\"}}",
            "message_norm":"fix security vuln (#1794)",
            "language":"ro",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('#1794', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/core\/parcel-bundler\/src\/HMRServer.js'])",
            "num_files":1.0
        },
        {
            "index":1197,
            "vuln_id":"GHSA-8cxv-76p7-jxwr",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250'}",
            "dataset":"osv",
            "summary":"Null-dereference in Tensorflow ### Impact\nThe [implementation of `GetInitOp`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/cc\/saved_model\/loader_util.cc#L31-L61) is vulnerable to a crash caused by dereferencing a null pointer:\n\n```cc\nconst auto& init_op_sig_it =\n    meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\nif (init_op_sig_it != sig_def_map.end()) {\n  *init_op_name = init_op_sig_it->second.outputs()\n                      .find(kSavedModelInitOpSignatureKey)\n                      ->second.name();\n  return Status::OK();\n}\n```\n\nHere, we have a nested map and we assume that if the first `.find` succeeds then so would be the search in the internal map. However, the maps are built based on the `SavedModel` protobuf format and a malicious user can alter that on disk before loading to cause the second `.find` to return `nullptr`.\n### Patches\nWe have patched the issue in GitHub commit [4f38b1ac8e42727e18a2f0bde06d3bee8e77b250](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250",
            "commit_sha":"4f38b1ac8e42727e18a2f0bde06d3bee8e77b250",
            "patch":"SINGLE",
            "chain_ord":"['4f38b1ac8e42727e18a2f0bde06d3bee8e77b250']",
            "before_first_fix_commit":"{'7b84b7c651dc2ecc1e28f2acc65bfe371a04ecfc'}",
            "last_fix_commit":"4f38b1ac8e42727e18a2f0bde06d3bee8e77b250",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/10\/2021, 00:56:28",
            "message":"Prevent null dereference read in `GetInitOp`.\n\nWe have a map of maps. We test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. In the scenarios where this is not the case, we'll dereference a nullptr, if we don't have this check\n\nPiperOrigin-RevId: 408739325\nChange-Id: If9bb7ed759aba1f3b56a34913f209508dbaf65ce",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 3, 'total': 11}",
            "files":"{'tensorflow\/cc\/saved_model\/loader_util.cc': {'additions': 8, 'deletions': 3, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250\/tensorflow%2Fcc%2Fsaved_model%2Floader_util.cc', 'patch': '@@ -34,9 +34,14 @@ Status GetInitOp(const string& export_dir, const MetaGraphDef& meta_graph_def,\\n   const auto& init_op_sig_it =\\n       meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\\n   if (init_op_sig_it != sig_def_map.end()) {\\n-    *init_op_name = init_op_sig_it->second.outputs()\\n-                        .find(kSavedModelInitOpSignatureKey)\\n-                        ->second.name();\\n+    const auto& sig_def_outputs = init_op_sig_it->second.outputs();\\n+    const auto& sig_def_outputs_it =\\n+        sig_def_outputs.find(kSavedModelInitOpSignatureKey);\\n+    if (sig_def_outputs_it == sig_def_outputs.end()) {\\n+      return errors::FailedPrecondition(\"Could not find output \",\\n+                                        kSavedModelInitOpSignatureKey);\\n+    }\\n+    *init_op_name = sig_def_outputs_it->second.name();\\n     return Status::OK();\\n   }'}}",
            "message_norm":"prevent null dereference read in `getinitop`.\n\nwe have a map of maps. we test that the key exists in the first map but then we don't have any validation that this also means the second map has the needed key. in the scenarios where this is not the case, we'll dereference a nullptr, if we don't have this check\n\npiperorigin-revid: 408739325\nchange-id: if9bb7ed759aba1f3b56a34913f209508dbaf65ce",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null dereference', 'SECWORD', ''), ('key', 'SECWORD', ''), ('key', 'SECWORD', ''), ('nullptr', 'SECWORD', ''), ('408739325', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/cc\/saved_model\/loader_util.cc'])",
            "num_files":1.0
        },
        {
            "index":305,
            "vuln_id":"GHSA-3qxp-qjq7-w4hf",
            "cwe_id":"{'CWE-754'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/26eb323554ffccd173e8a79a8c05c15b685ae4d1'}",
            "dataset":"osv",
            "summary":"CHECK-fail in tf.raw_ops.EncodePng ### Impact\nAn attacker can trigger a `CHECK` fail in PNG encoding by providing an empty input tensor as the pixel data:\n\n```python\nimport tensorflow as tf\n\nimage = tf.zeros([0, 0, 3])\nimage = tf.cast(image, dtype=tf.uint8) \ntf.raw_ops.EncodePng(image=image) \n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e312e0791ce486a80c9d23110841525c6f7c3289\/tensorflow\/core\/kernels\/image\/encode_png_op.cc#L57-L60) only validates that the total number of pixels in the image does not overflow. Thus, an attacker can send an empty matrix for encoding. However, if the tensor is empty, then the associated buffer is `nullptr`. Hence, when [calling `png::WriteImageToBuffer`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e312e0791ce486a80c9d23110841525c6f7c3289\/tensorflow\/core\/kernels\/image\/encode_png_op.cc#L79-L93), the first argument (i.e., `image.flat<T>().data()`) is `NULL`. This then triggers the `CHECK_NOTNULL` in the [first line of `png::WriteImageToBuffer`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/e312e0791ce486a80c9d23110841525c6f7c3289\/tensorflow\/core\/lib\/png\/png_io.cc#L345-L349).\n\n```cc\ntemplate <typename T>\nbool WriteImageToBuffer(\n    const void* image, int width, int height, int row_bytes, int num_channels,\n    int channel_bits, int compression, T* png_string,\n    const std::vector<std::pair<std::string, std::string> >* metadata) {\n  CHECK_NOTNULL(image);\n  ...\n}\n```\n\nSince `image` is null, this results in `abort` being called after printing the stacktrace. Effectively, this allows an attacker to mount a denial of service attack.\n\n### Patches\nWe have patched the issue in GitHub commit [26eb323554ffccd173e8a79a8c05c15b685ae4d1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/26eb323554ffccd173e8a79a8c05c15b685ae4d1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/26eb323554ffccd173e8a79a8c05c15b685ae4d1",
            "commit_sha":"26eb323554ffccd173e8a79a8c05c15b685ae4d1",
            "patch":"SINGLE",
            "chain_ord":"['26eb323554ffccd173e8a79a8c05c15b685ae4d1']",
            "before_first_fix_commit":"{'e312e0791ce486a80c9d23110841525c6f7c3289'}",
            "last_fix_commit":"26eb323554ffccd173e8a79a8c05c15b685ae4d1",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/21\/2021, 20:03:47",
            "message":"Fix null CHECK issue with `tf.raw_ops.EncodePng`.\n\nPiperOrigin-RevId: 369717714\nChange-Id: I24136cd99c20b8466671f4f93b670ef6f6dd1250",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/image\/encode_png_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/26eb323554ffccd173e8a79a8c05c15b685ae4d1\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fencode_png_op.cc', 'patch': '@@ -54,6 +54,8 @@ class EncodePngOp : public OpKernel {\\n     OP_REQUIRES(context, image.dims() == 3,\\n                 errors::InvalidArgument(\"image must be 3-dimensional\",\\n                                         image.shape().DebugString()));\\n+    OP_REQUIRES(context, image.NumElements() > 0,\\n+                errors::Internal(\"Invalid image provided.\"));\\n     OP_REQUIRES(\\n         context,\\n         FastBoundsCheck(image.NumElements(), std::numeric_limits<int32>::max()),'}}",
            "message_norm":"fix null check issue with `tf.raw_ops.encodepng`.\n\npiperorigin-revid: 369717714\nchange-id: i24136cd99c20b8466671f4f93b670ef6f6dd1250",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('issue', 'FLAW', ''), ('tf.raw_ops.encodepng', 'SECWORD', ''), ('369717714', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/encode_png_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2268,
            "vuln_id":"GHSA-jjr8-m8g8-p6wv",
            "cwe_id":"{'CWE-476'}",
            "score":4.4,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TFLite's `Reshape` operator ### Impact\nThe fix for [CVE-2020-15209](https:\/\/cve.mitre.org\/cgi-bin\/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/9c1dc920d8ffb4893d6c9d27d1f039607b326743\/tensorflow\/lite\/core\/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:\n\n```cc\nif (tensor->data.raw == nullptr && tensor->bytes > 0) {\n  if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\n    \/\/ In general, having a tensor here with no buffer will be an error.\n    \/\/ However, for the reshape operator, the second input tensor is only\n    \/\/ used for the shape, not for the data. Thus, null buffer is ok.\n    continue;\n  } else {\n    \/\/ In all other cases, we need to return an error as otherwise we will\n    \/\/ trigger a null pointer dereference (likely).\n    ReportError(\"Input tensor %d lacks data\", tensor_index);\n    return kTfLiteError;\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "commit_sha":"f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "patch":"SINGLE",
            "chain_ord":"['f8378920345f4f4604202d4ab15ef64b2aceaa16']",
            "before_first_fix_commit":"{'9c1dc920d8ffb4893d6c9d27d1f039607b326743'}",
            "last_fix_commit":"f8378920345f4f4604202d4ab15ef64b2aceaa16",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:47:59",
            "message":"Prevent a null pointer dereference in TFLite.\n\nPiperOrigin-RevId: 370800353\nChange-Id: Ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 3, 'total': 13}",
            "files":"{'tensorflow\/lite\/core\/subgraph.cc': {'additions': 10, 'deletions': 3, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f8378920345f4f4604202d4ab15ef64b2aceaa16\/tensorflow%2Flite%2Fcore%2Fsubgraph.cc', 'patch': '@@ -1060,10 +1060,17 @@ TfLiteStatus Subgraph::Invoke() {\\n         TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));\\n       }\\n       if (tensor->data.raw == nullptr && tensor->bytes > 0) {\\n-        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\\n+        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1 &&\\n+            tensor->dims->size != 1) {\\n           \/\/ In general, having a tensor here with no buffer will be an error.\\n-          \/\/ However, for the reshape operator, the second input tensor is only\\n-          \/\/ used for the shape, not for the data. Thus, null buffer is ok.\\n+          \/\/ However, for the reshape operator, the second input tensor is\\n+          \/\/ sometimes only used for the shape, not for the data. Thus, null\\n+          \/\/ buffer is ok in this situation.\\n+          \/\/ The situation where null buffer is not ok for reshape operator is\\n+          \/\/ only when there are 2 inputs given to the node and the one\\n+          \/\/ corresponding to the shape (i == 1) is a vector that contains all\\n+          \/\/ dimensions. See `GetOutputShape()` function in\\n+          \/\/ `tensorflow\/lite\/kernels\/reshape.cc`\\n           continue;\\n         } else {\\n           \/\/ In all other cases, we need to return an error as otherwise we will'}}",
            "message_norm":"prevent a null pointer dereference in tflite.\n\npiperorigin-revid: 370800353\nchange-id: ic9c9712ce5c6e384c954dcd640a5bd9ff05c9a05",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('null pointer dereference', 'SECWORD', ''), ('370800353', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/core\/subgraph.cc'])",
            "num_files":1.0
        },
        {
            "index":1400,
            "vuln_id":"GHSA-9jjr-qqfp-ppwx",
            "cwe_id":"{'CWE-94'}",
            "score":9.6,
            "chain":"{'https:\/\/github.com\/jupyterhub\/binderhub\/commit\/195caac172690456dcdc8cc7a6ca50e05abf8182'}",
            "dataset":"osv",
            "summary":"remote code execution via git repo provider ### Impact\n\nA remote code execution vulnerability has been identified in BinderHub, where providing BinderHub with maliciously crafted input could execute code in the BinderHub context, with the potential to egress credentials of the BinderHub deployment, including JupyterHub API tokens, kubernetes service accounts, and docker registry credentials. This may provide the ability to manipulate images and other user created pods in the deployment, with the potential to escalate to the host depending on the underlying kubernetes configuration.\n\n### Patches\n\nPatch below, or [on GitHub](https:\/\/github.com\/jupyterhub\/binderhub\/commit\/195caac172690456dcdc8cc7a6ca50e05abf8182.patch)\n\n```diff\nFrom 9f4043d9dddc1174920e687773f27b7933f48ab6 Mon Sep 17 00:00:00 2001\nFrom: Riccardo Castellotti <rcastell@cern.ch>\nDate: Thu, 19 Aug 2021 15:49:43 +0200\nSubject: [PATCH] Explicitly separate git-ls-remote options from positional\n arguments\n\n---\n binderhub\/repoproviders.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a\/binderhub\/repoproviders.py b\/binderhub\/repoproviders.py\nindex f33347b..5d4b87c 100755\n--- a\/binderhub\/repoproviders.py\n+++ b\/binderhub\/repoproviders.py\n@@ -484,7 +484,7 @@ class GitRepoProvider(RepoProvider):\n             self.sha1_validate(self.unresolved_ref)\n         except ValueError:\n             # The ref is a head\/tag and we resolve it using `git ls-remote`\n-            command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]\n+            command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]\n             result = subprocess.run(command, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n             if result.returncode:\n                 raise RuntimeError(\"Unable to run git ls-remote to get the `resolved_ref`: {}\".format(result.stderr))\n-- \n2.25.1\n\n```\n\n### Workarounds\n\nDisable the git repo provider by specifying the `BinderHub.repo_providers` config, e.g.:\n\n```python\nfrom binderhub.repoproviders import (GitHubRepoProvider,\n                            GitLabRepoProvider, GistRepoProvider,\n                            ZenodoProvider, FigshareProvider, HydroshareProvider,\n                            DataverseProvider)\n\nc.BinderHub.repo_providers =  {\n            'gh': GitHubRepoProvider,\n            'gist': GistRepoProvider,\n            'gl': GitLabRepoProvider,\n            'zenodo': ZenodoProvider,\n            'figshare': FigshareProvider,\n            'hydroshare': HydroshareProvider,\n            'dataverse': DataverseProvider,\n        }\n```\n\n### References\n\nCredit: Jose Carlos Luna Duran (CERN) and Riccardo Castellotti (CERN).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Email us at [security@ipython.org](mailto:security@ipython.org)",
            "published_date":"2021-08-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/jupyterhub\/binderhub",
            "commit_href":"https:\/\/github.com\/jupyterhub\/binderhub\/commit\/195caac172690456dcdc8cc7a6ca50e05abf8182",
            "commit_sha":"195caac172690456dcdc8cc7a6ca50e05abf8182",
            "patch":"SINGLE",
            "chain_ord":"['195caac172690456dcdc8cc7a6ca50e05abf8182']",
            "before_first_fix_commit":"{'034430adc8ed379135f3ef46ee6ca650781ef67c'}",
            "last_fix_commit":"195caac172690456dcdc8cc7a6ca50e05abf8182",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/19\/2021, 13:49:43",
            "message":"Explicitly separate git-ls-remote options from positional arguments",
            "author":"Riccardo Castellotti",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'binderhub\/repoproviders.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyterhub\/binderhub\/raw\/195caac172690456dcdc8cc7a6ca50e05abf8182\/binderhub%2Frepoproviders.py', 'patch': '@@ -484,7 +484,7 @@ async def get_resolved_ref(self):\\n             self.sha1_validate(self.unresolved_ref)\\n         except ValueError:\\n             # The ref is a head\/tag and we resolve it using `git ls-remote`\\n-            command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]\\n+            command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]\\n             result = subprocess.run(command, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n             if result.returncode:\\n                 raise RuntimeError(\"Unable to run git ls-remote to get the `resolved_ref`: {}\".format(result.stderr))'}}",
            "message_norm":"explicitly separate git-ls-remote options from positional arguments",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['binderhub\/repoproviders.py'])",
            "num_files":1.0
        },
        {
            "index":1755,
            "vuln_id":"GHSA-fphq-gw9m-ghrv",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `CTCGreedyDecoder` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)\n```\n  \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/1615440b17b364b875eb06f43d087381f1460a65\/tensorflow\/core\/kernels\/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.\n\n### Patches \nWe have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n                      \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        \n                      \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
            "commit_sha":"ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
            "patch":"SINGLE",
            "chain_ord":"['ea3b43e98c32c97b35d52b4c66f9107452ca8fb2']",
            "before_first_fix_commit":"{'1615440b17b364b875eb06f43d087381f1460a65'}",
            "last_fix_commit":"ea3b43e98c32c97b35d52b4c66f9107452ca8fb2",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2021, 22:11:05",
            "message":"Fix `tf.raw_ops.CTCGreedyDecoder` CHECK failure.\n\nPiperOrigin-RevId: 369960465\nChange-Id: If0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/ctc_decoder_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2\/tensorflow%2Fcore%2Fkernels%2Fctc_decoder_ops.cc', 'patch': '@@ -232,6 +232,8 @@ class CTCGreedyDecoderOp : public OpKernel {\\n         int prev_indices = -1;\\n         for (int t = 0; t < seq_len_t(b); ++t) {\\n           int max_class_indices;\\n+          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\\n+                      errors::InvalidArgument(\"Invalid input dimensions.\"));\\n           log_prob_t(b, 0) +=\\n               -RowMax<T>(input_list_t[t], b, &max_class_indices);\\n           if (max_class_indices != blank_index &&'}}",
            "message_norm":"fix `tf.raw_ops.ctcgreedydecoder` check failure.\n\npiperorigin-revid: 369960465\nchange-id: if0b8b3264d5a47a24ac0970ed7b81ce6b4921fae",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('tf.raw_ops.ctcgreedydecoder', 'SECWORD', ''), ('369960465', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ctc_decoder_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":2297,
            "vuln_id":"GHSA-jr37-66pj-36v7",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/Bottelet\/DaybydayCRM\/commit\/002dc75f400cf307bd00b71a5a93f1e26e52cee2'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in DayByDay CRM In Daybyday CRM, version 2.2.0 is vulnerable to Stored Cross-Site Scripting (XSS) vulnerability that allows low privileged application users to store malicious scripts in the title field of new tasks. These scripts are executed in a victim\u2019s browser when they open the \u201c\/tasks\u201d page to view all the tasks.",
            "published_date":"2022-01-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/Bottelet\/DaybydayCRM",
            "commit_href":"https:\/\/github.com\/Bottelet\/DaybydayCRM\/commit\/002dc75f400cf307bd00b71a5a93f1e26e52cee2",
            "commit_sha":"002dc75f400cf307bd00b71a5a93f1e26e52cee2",
            "patch":"SINGLE",
            "chain_ord":"['002dc75f400cf307bd00b71a5a93f1e26e52cee2']",
            "before_first_fix_commit":"{'fe842ea5ede237443f1f45a99aeb839133115d8b'}",
            "last_fix_commit":"002dc75f400cf307bd00b71a5a93f1e26e52cee2",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/25\/2021, 19:53:06",
            "message":"fix xss for tasks index",
            "author":"Casper Bottelet",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Controllers\/TasksController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Bottelet\/DaybydayCRM\/raw\/002dc75f400cf307bd00b71a5a93f1e26e52cee2\/app%2FHttp%2FControllers%2FTasksController.php', 'patch': '@@ -82,7 +82,7 @@ public function anyData()\\n             })\\n             ->addColumn(\\'view\\', function ($tasks) {\\n                 return \\'<a href=\"\\' . route(\"tasks.show\", $tasks->external_id) . \\'\" class=\"btn btn-link\">\\' . __(\\'View\\') .\\'<\/a>\\'\\n-                . \\'<a data-toggle=\"modal\" data-id=\"\\'. route(\\'tasks.destroy\\',$tasks->external_id) . \\'\" data-title=\"\\'. $tasks->title . \\'\" data-target=\"#deletion\" class=\"btn btn-link\">\\' . __(\\'Delete\\') .\\'<\/a>\\'\\n+                . \\'<a data-toggle=\"modal\" data-id=\"\\'. route(\\'tasks.destroy\\',$tasks->external_id) . \\'\" data-target=\"#deletion\" class=\"btn btn-link\">\\' . __(\\'Delete\\') .\\'<\/a>\\'\\n                 ;\\n             })\\n             ->rawColumns([\\'titlelink\\',\\'view\\', \\'status_id\\'])'}}",
            "message_norm":"fix xss for tasks index",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/TasksController.php'])",
            "num_files":1.0
        },
        {
            "index":1463,
            "vuln_id":"GHSA-c32w-3cqh-f6jx",
            "cwe_id":"{'CWE-640'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/87f9530272925f0d651f59337a35661faeb6f377'}",
            "dataset":"osv",
            "summary":"Weak Password Recovery Mechanism for Forgotten Password In \u201cDolibarr\u201d application, v2.8.1 to v13.0.2 are vulnerable to account takeover via password reset functionality. A low privileged attacker can reset the password of any user in the application using the password reset link the user received through email when requested for a forgotten password.",
            "published_date":"2021-09-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/Dolibarr\/dolibarr",
            "commit_href":"https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/87f9530272925f0d651f59337a35661faeb6f377",
            "commit_sha":"87f9530272925f0d651f59337a35661faeb6f377",
            "patch":"SINGLE",
            "chain_ord":"['87f9530272925f0d651f59337a35661faeb6f377']",
            "before_first_fix_commit":"{'8b07e99e05a9ed3c57bdc00c6a469fbbaa5672ef'}",
            "last_fix_commit":"87f9530272925f0d651f59337a35661faeb6f377",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/05\/2021, 15:29:10",
            "message":"Fix report by Ahsan Aziz (can reset the password of another user that\ndid not request password reset).",
            "author":"Laurent Destailleur",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'htdocs\/user\/passwordforgotten.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Dolibarr\/dolibarr\/raw\/87f9530272925f0d651f59337a35661faeb6f377\/htdocs%2Fuser%2Fpasswordforgotten.php', 'patch': '@@ -87,14 +87,14 @@\\n \\t\/\/ Validate new password\\n \\tif ($action == \\'validatenewpassword\\' && $username && $passworduidhash) {\\n \\t\\t$edituser = new User($db);\\n-\\t\\t$result = $edituser->fetch(\\'\\', $_GET[\"username\"]);\\n+\\t\\t$result = $edituser->fetch(\\'\\', $username);\\n \\t\\tif ($result < 0) {\\n \\t\\t\\t$message = \\'<div class=\"error\">\\'.dol_escape_htmltag($langs->trans(\"ErrorLoginDoesNotExists\", $username)).\\'<\/div>\\';\\n \\t\\t} else {\\n \\t\\t\\tglobal $dolibarr_main_instance_unique_id;\\n \\n \\t\\t\\t\/\/print $edituser->pass_temp.\\'-\\'.$edituser->id.\\'-\\'.$dolibarr_main_instance_unique_id.\\' \\'.$passworduidhash;\\n-\\t\\t\\tif (dol_verifyHash($edituser->pass_temp.\\'-\\'.$edituser->id.\\'-\\'.$dolibarr_main_instance_unique_id, $passworduidhash)) {\\n+\\t\\t\\tif ($edituser->pass_temp && dol_verifyHash($edituser->pass_temp.\\'-\\'.$edituser->id.\\'-\\'.$dolibarr_main_instance_unique_id, $passworduidhash)) {\\n \\t\\t\\t\\t\/\/ Clear session\\n \\t\\t\\t\\tunset($_SESSION[\\'dol_login\\']);\\n \\t\\t\\t\\t$_SESSION[\\'dol_loginmesg\\'] = $langs->trans(\\'NewPasswordValidated\\'); \/\/ Save message for the session page'}}",
            "message_norm":"fix report by ahsan aziz (can reset the password of another user that\ndid not request password reset).",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('password', 'SECWORD', ''), ('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['htdocs\/user\/passwordforgotten.php'])",
            "num_files":1.0
        },
        {
            "index":107,
            "vuln_id":"GHSA-2jx3-5j9v-prpp",
            "cwe_id":"{'CWE-89'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084'}",
            "dataset":"osv",
            "summary":"BlockWishList SQL Injection vulnerability ### Impact\nAn authenticated customer can perform SQL injection\n\n### Patches\nIssue is fixed in 2.1.1",
            "published_date":"2022-06-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/blockwishlist",
            "commit_href":"https:\/\/github.com\/PrestaShop\/blockwishlist\/commit\/b3ec4b85af5fd73f74d55390b226d221298ca084",
            "commit_sha":"b3ec4b85af5fd73f74d55390b226d221298ca084",
            "patch":"SINGLE",
            "chain_ord":"['b3ec4b85af5fd73f74d55390b226d221298ca084']",
            "before_first_fix_commit":"{'13e64b2709544354fd116927b80bc3fa249bc5b4', 'be79516175d564f60a657627482b0a60c3da353e'}",
            "last_fix_commit":"b3ec4b85af5fd73f74d55390b226d221298ca084",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/24\/2022, 08:04:52",
            "message":"Merge pull request from GHSA-2jx3-5j9v-prpp\n\nValidate order by and order way",
            "author":"atomiix",
            "comments":"{'com_1': {'author': 'doekia', 'datetime': '07\/22\/2022, 17:26:35', 'body': \"So apparently there is unfiltered value returned by toLegacyOrderWay() (I'm doubt full of it see below)\\r\\nIf this is the case CHANGE the function, not simply one module otherwise it is an open door for other modules.\\r\\n\\r\\nWhy I'm doubtfull ? Because toLegacyOrderWay() calls getDirection() which return $this->direction. $this->direction is set by setDirection() (during construct) and tests are done against values asc, desc, random otherwise exception. How can this lead to sql injection\"}, 'com_2': {'author': 'infiniweb', 'datetime': '07\/22\/2022, 21:40:39', 'body': '@doekia this issue is not with `toLegacyOrderWay`. The SQL injection can be reproduced because of the usage of `toLegacyOrderBy` (not `toLegacyOrderWay`) combined with a wrong usage of `getLegacyPrefix`. I can confirm the exploit. The usage of `Validate::isOrderBy($sortOrder)` is fixing the issue.'}, 'com_3': {'author': 'doekia', 'datetime': '07\/25\/2022, 18:07:12', 'body': 'Therefore I repeat, the function that need to be patched SHOULD BE toLegacyOrderBy() that should implement the Validate::isOrderBy() before returning values.\\r\\nSuch way will protect ANY modules that use the framework function toLegacyOrderBy()'}, 'com_4': {'author': 'Pilypas', 'datetime': '07\/27\/2022, 11:25:43', 'body': 'Can you tell me if the vulnerability in the module is also in Prestashop 1.6.1.24 version of blockwishlist 1.3.2 ?'}, 'com_5': {'author': 'infiniweb', 'datetime': '07\/27\/2022, 11:27:28', 'body': \"@Pilypas . No it's not. Please refer to https:\/\/github.com\/PrestaShop\/blockwishlist\/security\/advisories\/GHSA-2jx3-5j9v-prpp\"}}",
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'src\/Search\/WishListProductSearchProvider.php': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/blockwishlist\/raw\/b3ec4b85af5fd73f74d55390b226d221298ca084\/src%2FSearch%2FWishListProductSearchProvider.php', 'patch': \"@@ -35,6 +35,7 @@\\n use Product;\\n use Shop;\\n use Symfony\\\\Component\\\\Translation\\\\TranslatorInterface;\\n+use Validate;\\n use WishList;\\n \\n \/**\\n@@ -167,7 +168,10 @@ private function getProductsOrCount(\\n \\n         if ('products' === $type) {\\n             $sortOrder = $query->getSortOrder()->toLegacyOrderBy(true);\\n-            $querySearch->orderBy($sortOrder . ' ' . $query->getSortOrder()->toLegacyOrderWay());\\n+            $sortWay = $query->getSortOrder()->toLegacyOrderWay();\\n+            if (Validate::isOrderBy($sortOrder) && Validate::isOrderWay($sortWay)) {\\n+                $querySearch->orderBy($sortOrder . ' ' . $sortWay);\\n+            }\\n             $querySearch->limit((int) $query->getResultsPerPage(), ((int) $query->getPage() - 1) * (int) $query->getResultsPerPage());\\n             $products = $this->db->executeS($querySearch);\"}}",
            "message_norm":"merge pull request from ghsa-2jx3-5j9v-prpp\n\nvalidate order by and order way",
            "language":"no",
            "entities":"[('ghsa-2jx3-5j9v-prpp', 'VULNID', 'GHSA')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Search\/WishListProductSearchProvider.php'])",
            "num_files":1.0
        },
        {
            "index":2036,
            "vuln_id":"GHSA-h9px-9vqg-222h",
            "cwe_id":"{'CWE-125'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/99085e8ff02c3763a0ec2263e44daec416f6a387'}",
            "dataset":"osv",
            "summary":"Heap OOB in `QuantizeAndDequantizeV3` ### Impact\nAn attacker can read data outside of bounds of heap allocated buffer in `tf.raw_ops.QuantizeAndDequantizeV3`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV3(\n  input=[2.5,2.5], input_min=[0,0], input_max=[1,1], num_bits=[30],\n  signed_input=False, range_given=False, narrow_range=False, axis=3)\n```   \n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/11ff7f80667e6490d7b5174aa6bf5e01886e770f\/tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc#L237) does not validate the value of user supplied `axis` attribute before using it to index in the array backing the `input` argument:\n\n```cc\nconst int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [99085e8ff02c3763a0ec2263e44daec416f6a387](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/99085e8ff02c3763a0ec2263e44daec416f6a387).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/99085e8ff02c3763a0ec2263e44daec416f6a387",
            "commit_sha":"99085e8ff02c3763a0ec2263e44daec416f6a387",
            "patch":"SINGLE",
            "chain_ord":"['99085e8ff02c3763a0ec2263e44daec416f6a387']",
            "before_first_fix_commit":"{'11ff7f80667e6490d7b5174aa6bf5e01886e770f'}",
            "last_fix_commit":"99085e8ff02c3763a0ec2263e44daec416f6a387",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/27\/2021, 00:32:41",
            "message":"Fix `tf.raw_ops.QuantizeAndDequantizeV3` array index failure.\n\nPiperOrigin-RevId: 370577691\nChange-Id: Ifeae64212f6bcd139435824fa2748d1329213c4c",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/99085e8ff02c3763a0ec2263e44daec416f6a387\/tensorflow%2Fcore%2Fkernels%2Fquantize_and_dequantize_op.cc', 'patch': '@@ -13,6 +13,7 @@ See the License for the specific language governing permissions and\\n limitations under the License.\\n ==============================================================================*\/\\n \\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n #define EIGEN_USE_THREADS\\n \\n #if (defined(GOOGLE_CUDA) && GOOGLE_CUDA) || \\\\\\n@@ -234,6 +235,10 @@ class QuantizeAndDequantizeV3Op : public OpKernel {\\n \\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& input = ctx->input(0);\\n+    OP_REQUIRES(ctx, axis_ < input.dims(),\\n+                errors::InvalidArgument(\\n+                    \"Axis requested is larger than input dimensions. Axis: \",\\n+                    axis_, \" Input Dimensions: \", input.dims()));\\n     const int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\\n     Tensor* output = nullptr;\\n     OP_REQUIRES_OK(ctx, ctx->allocate_output(0, input.shape(), &output));'}}",
            "message_norm":"fix `tf.raw_ops.quantizeanddequantizev3` array index failure.\n\npiperorigin-revid: 370577691\nchange-id: ifeae64212f6bcd139435824fa2748d1329213c4c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('370577691', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantize_and_dequantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":942,
            "vuln_id":"GHSA-73q9-7pwj-gm46",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/icecoder\/icecoder\/commit\/51cf24b2a39138e6a7b5739ef59eb38cd7c39763'}",
            "dataset":"osv",
            "summary":"icecoder is vulnerable to Cross-site Scripting icecoder is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/icecoder\/icecoder",
            "commit_href":"https:\/\/github.com\/icecoder\/icecoder\/commit\/51cf24b2a39138e6a7b5739ef59eb38cd7c39763",
            "commit_sha":"51cf24b2a39138e6a7b5739ef59eb38cd7c39763",
            "patch":"SINGLE",
            "chain_ord":"['51cf24b2a39138e6a7b5739ef59eb38cd7c39763']",
            "before_first_fix_commit":"{'cd964f816f31828011593405e024ee3b4c0f6ed3'}",
            "last_fix_commit":"51cf24b2a39138e6a7b5739ef59eb38cd7c39763",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/17\/2022, 12:38:29",
            "message":"rXSS cleaned username in editor info display",
            "author":"Matt Pass",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'editor.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/icecoder\/ICEcoder\/raw\/51cf24b2a39138e6a7b5739ef59eb38cd7c39763\/editor.php', 'patch': '@@ -150,7 +150,7 @@\\n             ?>\\n             <h2><?php echo $t[\\'multi-user\\']; ?><\/h2>\\n             <span class=\"heading\"><?php echo $t[\\'Username\\']; ?><\/span><br>\\n-            <?php echo $_SESSION[\\'username\\'];?><br><br>\\n+            <?php echo xssClean($_SESSION[\\'username\\'], \"html\");?><br><br>\\n             <?php\\n         }\\n         ?>'}}",
            "message_norm":"rxss cleaned username in editor info display",
            "language":"en",
            "entities":"[('rxss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['editor.php'])",
            "num_files":1.0
        },
        {
            "index":2313,
            "vuln_id":"GHSA-jwf9-w5xm-f437",
            "cwe_id":"{'CWE-125'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eb921122119a6b6e470ee98b89e65d721663179d', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bb6a0383ed553c286f87ca88c207f6774d5c4a8f'}",
            "dataset":"osv",
            "summary":"Heap OOB in TFLite's `Gather*` implementations ### Impact\nTFLite's [`GatherNd` implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation.\n\nHence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in `indices`.\n\nSimilar issue exists in [`Gather` implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/gather.cc).\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.compat.v1.disable_v2_behavior()\n\nparams = tf.compat.v1.placeholder(name=\"params\", dtype=tf.int64, shape=(1,))\nindices = tf.compat.v1.placeholder(name=\"indices\", dtype=tf.int64, shape=())\n\nout = tf.gather(params, indices, name='out')\n\nwith tf.compat.v1.Session() as sess:\n   converter = tf.compat.v1.lite.TFLiteConverter.from_session(sess, [params, indices], [out])\n   tflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nparams_data = np.reshape(np.array([1], dtype=np.int64), newshape=(1,))\nindices_data = np.reshape(np.array(-10, dtype=np.int64), newshape=())\ninterpreter.set_tensor(input_details[0]['index'], params_data)\ninterpreter.set_tensor(input_details[1]['index'], indices_data)\n\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bb6a0383ed553c286f87ca88c207f6774d5c4a8f](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/bb6a0383ed553c286f87ca88c207f6774d5c4a8f) and [eb921122119a6b6e470ee98b89e65d721663179d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eb921122119a6b6e470ee98b89e65d721663179d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/eb921122119a6b6e470ee98b89e65d721663179d",
            "commit_sha":"eb921122119a6b6e470ee98b89e65d721663179d",
            "patch":"MULTI",
            "chain_ord":"['bb6a0383ed553c286f87ca88c207f6774d5c4a8f', 'eb921122119a6b6e470ee98b89e65d721663179d']",
            "before_first_fix_commit":"{'ac72971cc6fbbfe4df7e67a8347ef1b6ab63b5fd'}",
            "last_fix_commit":"eb921122119a6b6e470ee98b89e65d721663179d",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/28\/2021, 00:11:14",
            "message":"Prevent heap OOB read in TFLite's `gather.cc`.\n\nPassing negative indices is illegal but there was a missing check so that resulted in OOB accesses.\n\nPiperOrigin-RevId: 387231300\nChange-Id: I3111b54b2f232638d795be17efc46abe4ede6bf8",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 53, 'deletions': 16, 'total': 69}",
            "files":"{'tensorflow\/lite\/kernels\/gather.cc': {'additions': 53, 'deletions': 16, 'changes': 69, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/eb921122119a6b6e470ee98b89e65d721663179d\/tensorflow%2Flite%2Fkernels%2Fgather.cc', 'patch': '@@ -117,8 +117,20 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\\n }\\n \\n template <typename InputT, typename PositionsT>\\n-TfLiteStatus Gather(const TfLiteGatherParams& params, const TfLiteTensor* input,\\n-                    const TfLiteTensor* positions, TfLiteTensor* output) {\\n+TfLiteStatus Gather(TfLiteContext* context, const TfLiteGatherParams& params,\\n+                    const TfLiteTensor* input, const TfLiteTensor* positions,\\n+                    TfLiteTensor* output) {\\n+  const PositionsT* indexes = GetTensorData<PositionsT>(positions);\\n+  bool indices_has_only_positive_elements = true;\\n+  const size_t num_indices = positions->bytes \/ sizeof(PositionsT);\\n+  for (size_t i = 0; i < num_indices; i++) {\\n+    if (indexes[i] < 0) {\\n+      indices_has_only_positive_elements = false;\\n+      break;\\n+    }\\n+  }\\n+  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\\n+\\n   tflite::GatherParams op_params;\\n   op_params.axis = params.axis;\\n   op_params.batch_dims = params.batch_dims;\\n@@ -134,7 +146,18 @@ TfLiteStatus GatherStrings(TfLiteContext* context, const TfLiteTensor* input,\\n                            const TfLiteTensor* positions,\\n                            TfLiteTensor* output) {\\n   DynamicBuffer buffer;\\n+\\n   const PositionT* indexes = GetTensorData<PositionT>(positions);\\n+  bool indices_has_only_positive_elements = true;\\n+  const size_t num_indices = positions->bytes \/ sizeof(PositionT);\\n+  for (size_t i = 0; i < num_indices; i++) {\\n+    if (indexes[i] < 0) {\\n+      indices_has_only_positive_elements = false;\\n+      break;\\n+    }\\n+  }\\n+  TF_LITE_ENSURE(context, indices_has_only_positive_elements);\\n+\\n   const PositionT num_strings = GetStringCount(input);\\n   const int num_indexes = NumElements(positions);\\n \\n@@ -163,19 +186,26 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   if (positions->type == kTfLiteInt32) {\\n     switch (input->type) {\\n       case kTfLiteFloat32:\\n-        return Gather<float, int32_t>(*params, input, positions, output);\\n+        return Gather<float, int32_t>(context, *params, input, positions,\\n+                                      output);\\n       case kTfLiteUInt8:\\n-        return Gather<uint8_t, int32_t>(*params, input, positions, output);\\n+        return Gather<uint8_t, int32_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt8:\\n-        return Gather<int8_t, int32_t>(*params, input, positions, output);\\n+        return Gather<int8_t, int32_t>(context, *params, input, positions,\\n+                                       output);\\n       case kTfLiteInt16:\\n-        return Gather<int16_t, int32_t>(*params, input, positions, output);\\n+        return Gather<int16_t, int32_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt32:\\n-        return Gather<int32_t, int32_t>(*params, input, positions, output);\\n+        return Gather<int32_t, int32_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt64:\\n-        return Gather<int64_t, int32_t>(*params, input, positions, output);\\n+        return Gather<int64_t, int32_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteBool:\\n-        return Gather<bool, int32_t>(*params, input, positions, output);\\n+        return Gather<bool, int32_t>(context, *params, input, positions,\\n+                                     output);\\n       case kTfLiteString:\\n         return GatherStrings<int32_t>(context, input, positions, output);\\n       default:\\n@@ -187,19 +217,26 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   if (positions->type == kTfLiteInt64) {\\n     switch (input->type) {\\n       case kTfLiteFloat32:\\n-        return Gather<float, int64_t>(*params, input, positions, output);\\n+        return Gather<float, int64_t>(context, *params, input, positions,\\n+                                      output);\\n       case kTfLiteUInt8:\\n-        return Gather<uint8_t, int64_t>(*params, input, positions, output);\\n+        return Gather<uint8_t, int64_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt8:\\n-        return Gather<int8_t, int64_t>(*params, input, positions, output);\\n+        return Gather<int8_t, int64_t>(context, *params, input, positions,\\n+                                       output);\\n       case kTfLiteInt16:\\n-        return Gather<int16_t, int64_t>(*params, input, positions, output);\\n+        return Gather<int16_t, int64_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt32:\\n-        return Gather<int32_t, int64_t>(*params, input, positions, output);\\n+        return Gather<int32_t, int64_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteInt64:\\n-        return Gather<int64_t, int64_t>(*params, input, positions, output);\\n+        return Gather<int64_t, int64_t>(context, *params, input, positions,\\n+                                        output);\\n       case kTfLiteBool:\\n-        return Gather<bool, int64_t>(*params, input, positions, output);\\n+        return Gather<bool, int64_t>(context, *params, input, positions,\\n+                                     output);\\n       case kTfLiteString:\\n         return GatherStrings<int64_t>(context, input, positions, output);\\n       default:'}}",
            "message_norm":"prevent heap oob read in tflite's `gather.cc`.\n\npassing negative indices is illegal but there was a missing check so that resulted in oob accesses.\n\npiperorigin-revid: 387231300\nchange-id: i3111b54b2f232638d795be17efc46abe4ede6bf8",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('heap oob', 'SECWORD', ''), ('missing check', 'SECWORD', ''), ('oob', 'SECWORD', ''), ('387231300', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/gather.cc'])",
            "num_files":1.0
        },
        {
            "index":1405,
            "vuln_id":"GHSA-9m95-8hx6-7p9v",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57'}",
            "dataset":"osv",
            "summary":"Improper input validation in umoci ### Impact\n\numoci 0.4.6 and earlier can be tricked into modifying host files by\ncreating a malicious layer that has a symlink with the name \".\" (or\n\"\/\"). Because umoci deletes inodes if they change types, this results in\nthe rootfs directory being replaced with an attacker-controlled symlink.\nSubsequent image layers will then be applied on top of the target of the\nsymlink (which could be any directory on the host filesystem the user\nrunning umoci has access to).\n\nWhile umoci does have defences against symlink-based attacks, they are\nall implemented by resolving things relative to the rootfs directory --\nif the rootfs itself is a symlink, umoci resolves it first.\n\nThis vulnerability affects both \"umoci unpack\" and \"umoci raw unpack\".\n\n### Patches\nThis issue has been patched in umoci 0.4.7, see the references section\nfor the specific commit which fixed this vulnerability.\n\n### Workarounds\nNote that if you use umoci as an unprivileged user (using the --rootless\nflag) then umoci will not be able to overwrite any files that your user\ndoesn't have access to. Other possible mitigations are to run umoci\nunder an LSM profile such as AppArmor or SELinux to restrict the level\nof access it has outside of container image directories.\n\n### References\n* [oss-security public disclosure](https:\/\/www.openwall.com\/lists\/oss-security\/2021\/04\/06\/2)\n* [patch](https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57)\n\n### Credits\nThanks to Robin Peraglie from Cure53 for discovering and reporting this\nvulnerability.\n\n### For more information\n\nIf you have any questions or comments about this advisory\n* Open an issue in <https:\/\/github.com\/opencontainers\/umoci>.\n* Email us at <security@opencontainers.org>.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencontainers\/umoci",
            "commit_href":"https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "commit_sha":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "patch":"SINGLE",
            "chain_ord":"['d9efc31daf2206f7d3fdb839863cf7a576a2eb57']",
            "before_first_fix_commit":"{'07fa845e5b068dee64dcbf391b456a564a6fcfa6'}",
            "last_fix_commit":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/23\/2021, 13:17:06",
            "message":"layer: don't permit \/ type to be changed on extraction\n\nIf users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. This is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nFixes: CVE-2021-29136\nReported-by: Robin Peraglie <robin@cure53.de>\nTested-by: Daniel Dao <dqminh89@gmail.com>\nReviewed-by: Tycho Andersen <tycho@tycho.pizza>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
            "author":"Aleksa Sarai",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'oci\/layer\/tar_extract.go': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencontainers\/umoci\/raw\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57\/oci%2Flayer%2Ftar_extract.go', 'patch': '@@ -404,6 +404,11 @@ func (te *TarExtractor) UnpackEntry(root string, hdr *tar.Header, r io.Reader) (\\n \\tif filepath.Join(\"\/\", hdr.Name) == \"\/\" {\\n \\t\\t\/\/ If we got an entry for the root, then unsafeDir is the full path.\\n \\t\\tunsafeDir, file = hdr.Name, \".\"\\n+\\t\\t\/\/ If we\\'re being asked to change the root type, bail because they may\\n+\\t\\t\/\/ change it to a symlink which we could inadvertently follow.\\n+\\t\\tif hdr.Typeflag != tar.TypeDir {\\n+\\t\\t\\treturn errors.New(\"malicious tar entry -- refusing to change type of root directory\")\\n+\\t\\t}\\n \\t}\\n \\tdir, err := securejoin.SecureJoinVFS(root, unsafeDir, te.fsEval)\\n \\tif err != nil {'}}",
            "message_norm":"layer: don't permit \/ type to be changed on extraction\n\nif users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. this is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nfixes: cve-2021-29136\nreported-by: robin peraglie <robin@cure53.de>\ntested-by: daniel dao <dqminh89@gmail.com>\nreviewed-by: tycho andersen <tycho@tycho.pizza>\nsigned-off-by: aleksa sarai <cyphar@cyphar.com>",
            "language":"en",
            "entities":"[('changed', 'ACTION', ''), ('change', 'ACTION', ''), ('symlink', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('changed', 'ACTION', ''), ('fixes', 'ACTION', ''), ('cve-2021-29136', 'VULNID', 'CVE'), ('robin@cure53.de', 'EMAIL', ''), ('dqminh89@gmail.com', 'EMAIL', ''), ('cyphar@cyphar.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['oci\/layer\/tar_extract.go'])",
            "num_files":1.0
        },
        {
            "index":1599,
            "vuln_id":"GHSA-crch-j389-5f84",
            "cwe_id":"{'CWE-787'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683'}",
            "dataset":"osv",
            "summary":"Heap OOB write in TFLite ### Impact\nA specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`\/`ArgMax`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/102b211d892f3abc14f845a72047809b39cc65ab\/tensorflow\/lite\/kernels\/arg_min_max.cc#L52-L59):\n\n```cc\nTfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\nint j = 0;\nfor (int i = 0; i < NumDimensions(input); ++i) { \n  if (i != axis_value) {\n    output_dims->data[j] = SizeOfDimension(input, i);\n    ++j;\n  }\n}\n```\n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`.\n  \n### Patches \nWe have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c59c37e7b2d563967da813fa50fe20b21f4da683",
            "commit_sha":"c59c37e7b2d563967da813fa50fe20b21f4da683",
            "patch":"SINGLE",
            "chain_ord":"['c59c37e7b2d563967da813fa50fe20b21f4da683']",
            "before_first_fix_commit":"{'102b211d892f3abc14f845a72047809b39cc65ab'}",
            "last_fix_commit":"c59c37e7b2d563967da813fa50fe20b21f4da683",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 00:50:10",
            "message":"Prevent array write out-of-bounds.\n\nIf user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. Even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\nPiperOrigin-RevId: 371023299\nChange-Id: I9eca37ffc2b29e8e48710f500701270ef0790224",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/arg_min_max.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c59c37e7b2d563967da813fa50fe20b21f4da683\/tensorflow%2Flite%2Fkernels%2Farg_min_max.cc', 'patch': '@@ -48,6 +48,9 @@ TfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\\n     axis_value += NumDimensions(input);\\n   }\\n \\n+  TF_LITE_ENSURE(context, axis_value >= 0);\\n+  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\\n+\\n   \/\/ Copy the input dimensions to output except the axis dimension.\\n   TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\\n   int j = 0;'}}",
            "message_norm":"prevent array write out-of-bounds.\n\nif user passes an invalid axis, then we copy one too many dimensions to the output in the loop below these checks. even if we didn't do that, there will be further issues with an invalid axis, so we check for that right now.\n\npiperorigin-revid: 371023299\nchange-id: i9eca37ffc2b29e8e48710f500701270ef0790224",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('out-of-bounds', 'SECWORD', ''), ('issues', 'FLAW', ''), ('371023299', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/arg_min_max.cc'])",
            "num_files":1.0
        },
        {
            "index":3265,
            "vuln_id":"GHSA-wcv5-vrvr-3rx2",
            "cwe_id":"{'CWE-190'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in TensorFlow ### Impact\nThe Grappler component of TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) in [constant folding](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L963-L1035):\n\n```cc\n  for (const auto& output_prop : output_props) {\n    const PartialTensorShape output_shape(output_prop.shape());\n    \/\/ ...\n  }\n```\n  \nThe `output_prop` tensor has a shape that is controlled by user input and this can result in triggering one of the `CHECK`s in the `PartialTensorShape` constructor. This is an instance of [TFSA-2021-198](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/security\/advisory\/tfsa-2021-198.md) (CVE-2021-41197).\n\n### Patches\nWe have patched the issue in GitHub commit [be7b286d40bc68cb0b56f702186cc4837d508058](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/be7b286d40bc68cb0b56f702186cc4837d508058",
            "commit_sha":"be7b286d40bc68cb0b56f702186cc4837d508058",
            "patch":"SINGLE",
            "chain_ord":"['be7b286d40bc68cb0b56f702186cc4837d508058']",
            "before_first_fix_commit":"{'6381a7b127bd276a3817a93e5423b15a06c33419'}",
            "last_fix_commit":"be7b286d40bc68cb0b56f702186cc4837d508058",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/15\/2021, 21:55:14",
            "message":"Fix `CHECK`-failure caused by constant folding code.\n\nWe're losing a `const` qualifier here, but unless we get to use more `StatusOr` objects, this is the best alternative.\n\nPiperOrigin-RevId: 410072241\nChange-Id: I69535c91490f0d23facb9587d2ff59db0782cda6",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 1, 'total': 7}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 6, 'deletions': 1, 'changes': 7, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/be7b286d40bc68cb0b56f702186cc4837d508058\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1017,7 +1017,12 @@ bool ConstantFolding::IsFoldableUncached(\\n       }\\n     }\\n     for (const auto& output_prop : output_props) {\\n-      const PartialTensorShape output_shape(output_prop.shape());\\n+      PartialTensorShape output_shape;\\n+      if (!PartialTensorShape::BuildPartialTensorShape(output_prop.shape(),\\n+                                                       &output_shape)\\n+               .ok()) {\\n+        return false;\\n+      }\\n       if (output_shape.IsFullyDefined()) {\\n         const int64_t num_bytes =\\n             output_shape.num_elements() * DataTypeSize(output_prop.dtype());'}}",
            "message_norm":"fix `check`-failure caused by constant folding code.\n\nwe're losing a `const` qualifier here, but unless we get to use more `statusor` objects, this is the best alternative.\n\npiperorigin-revid: 410072241\nchange-id: i69535c91490f0d23facb9587d2ff59db0782cda6",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('410072241', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":1688,
            "vuln_id":"GHSA-f7r3-p866-q9qr",
            "cwe_id":"{'CWE-400'}",
            "score":3.7,
            "chain":"{'https:\/\/github.com\/Twipped\/ircdkit\/pull\/2\/commits\/595ed02cde517fad57854d2ac2855a09a626e665', 'https:\/\/github.com\/Twipped\/ircdkit\/commit\/f0cc6dc913ec17b499fa33a676bb72c624456f2c'}",
            "dataset":"osv",
            "summary":"ircdkit vulnerable to Denial of Service due to unhandled connection end event Versions of `ircdkit` 1.0.3 and prior are vulnerable to a remote denial of service.\n\n\n## Recommendation\n\nUpgrade to version 1.0.4.",
            "published_date":"2019-06-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/Twipped\/ircdkit",
            "commit_href":"https:\/\/github.com\/Twipped\/ircdkit\/commit\/f0cc6dc913ec17b499fa33a676bb72c624456f2c",
            "commit_sha":"f0cc6dc913ec17b499fa33a676bb72c624456f2c",
            "patch":"MULTI",
            "chain_ord":"['f0cc6dc913ec17b499fa33a676bb72c624456f2c', '595ed02cde517fad57854d2ac2855a09a626e665']",
            "before_first_fix_commit":"{'74aa751e75a90af34ef63377fcbd41285d155380'}",
            "last_fix_commit":"595ed02cde517fad57854d2ac2855a09a626e665",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/30\/2019, 03:09:45",
            "message":"DOS fix\n\ncorrected unhandled connection 'end' event, fixes issue #1",
            "author":"Trinity Fox",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Twipped\/ircdkit\/raw\/f0cc6dc913ec17b499fa33a676bb72c624456f2c\/lib%2Findex.js', 'patch': \"@@ -47,7 +47,7 @@ function create (options) {\\n \\n \\t\\tclient.on('end', function () {\\n \\t\\t\\tdebug('connection ended');\\n-\\t\\t\\tremoveClient(client);\\n+\\t\\t\\tclient.close();\\n \\t\\t\\tapp.emit('connection:end', client);\\n \\t\\t});\"}}",
            "message_norm":"dos fix\n\ncorrected unhandled connection 'end' event, fixes issue #1",
            "language":"en",
            "entities":"[('dos', 'SECWORD', ''), ('fix', 'ACTION', ''), ('#1', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":38,
            "vuln_id":"GHSA-2647-c639-qv2j",
            "cwe_id":"{'CWE-918'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8'}",
            "dataset":"osv",
            "summary":"Server-Side Request Forgery in calibreweb calibreweb prior to version 0.6.17 is vulnerable to server-side request forgery (SSRF). This is due to an incomplete fix for [CVE-2022-0339](https:\/\/github.com\/advisories\/GHSA-4w8p-x6g8-fv64). The blacklist does not check for `0.0.0.0`, which would result in a payload of `0.0.0.0` resolving to `localhost`.",
            "published_date":"2022-03-08",
            "chain_len":1,
            "project":"https:\/\/github.com\/janeczku\/calibre-web",
            "commit_href":"https:\/\/github.com\/janeczku\/calibre-web\/commit\/965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "commit_sha":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "patch":"SINGLE",
            "chain_ord":"['965352c8d96c9eae7a6867ff76b0db137d04b0b8']",
            "before_first_fix_commit":"{'8007e450b3178f517b83b0989744c6df38867932'}",
            "last_fix_commit":"965352c8d96c9eae7a6867ff76b0db137d04b0b8",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/26\/2022, 07:05:35",
            "message":"Don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
            "author":"Ozzie Isaacs",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'cps\/helper.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/janeczku\/calibre-web\/raw\/965352c8d96c9eae7a6867ff76b0db137d04b0b8\/cps%2Fhelper.py', 'patch': '@@ -734,10 +734,10 @@ def save_cover_from_url(url, book_path):\\n         if not cli.allow_localhost:\\n             # 127.0.x.x, localhost, [::1], [::ffff:7f00:1]\\n             ip = socket.getaddrinfo(urlparse(url).hostname, 0)[0][4][0]\\n-            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\":\\n+            if ip.startswith(\"127.\") or ip.startswith(\\'::ffff:7f\\') or ip == \"::1\" or ip == \"0.0.0.0\" or ip == \"::\":\\n                 log.error(\"Localhost was accessed for cover upload\")\\n                 return False, _(\"You are not allowed to access localhost for cover uploads\")\\n-        img = requests.get(url, timeout=(10, 200))      # ToDo: Error Handling\\n+        img = requests.get(url, timeout=(10, 200), allow_redirects=False)      # ToDo: Error Handling\\n         img.raise_for_status()\\n         return save_cover(img, book_path)\\n     except (socket.gaierror,'}}",
            "message_norm":"don't allow redirects on cover uploads, catch more addresses which resolve to localhost",
            "language":"en",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"REDUNDANT_MESSAGE",
            "list_files":"dict_keys(['cps\/helper.py'])",
            "num_files":1.0
        },
        {
            "index":3303,
            "vuln_id":"GHSA-wp77-4gmm-7cq8",
            "cwe_id":"{'CWE-476'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986'}",
            "dataset":"osv",
            "summary":"Incorrect validation of `SaveV2` inputs ### Impact\nThe code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SaveV2(\n  prefix=['tensorflow'],\n  tensor_name=['v'],\n  shape_and_slices=[],\n  tensors=[1,2,3])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/8d72537c6abf5a44103b57b9c2e22c14f5f49698\/tensorflow\/core\/kernels\/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.\n\nHowever, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.\n      \n### Patches\nWe have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9728c60e136912a12d99ca56e106b7cce7af5986",
            "commit_sha":"9728c60e136912a12d99ca56e106b7cce7af5986",
            "patch":"SINGLE",
            "chain_ord":"['9728c60e136912a12d99ca56e106b7cce7af5986']",
            "before_first_fix_commit":"{'f2a673bd34f0d64b8e40a551ac78989d16daad09'}",
            "last_fix_commit":"9728c60e136912a12d99ca56e106b7cce7af5986",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 02:05:41",
            "message":"Ensure validation sticks in `save_restore_v2_ops.cc`\n\nPiperOrigin-RevId: 387924206\nChange-Id: I6156842eb3230076b5812c0815f3e66bd5241454",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/save_restore_v2_ops.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/9728c60e136912a12d99ca56e106b7cce7af5986\/tensorflow%2Fcore%2Fkernels%2Fsave_restore_v2_ops.cc', 'patch': '@@ -98,6 +98,7 @@ class SaveV2 : public OpKernel {\\n     const Tensor& shape_and_slices = context->input(2);\\n     ValidateInputs(true \/* is save op *\/, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const int kFixedInputs = 3;  \/\/ Prefix, tensor names, shape_and_slices.\\n     const int num_tensors = static_cast<int>(tensor_names.NumElements());\\n@@ -177,6 +178,7 @@ class RestoreV2 : public OpKernel {\\n                                         \" expected dtypes.\"));\\n     ValidateInputs(false \/* not save op *\/, context, prefix, tensor_names,\\n                    shape_and_slices);\\n+    if (!context->status().ok()) return;\\n \\n     const string& prefix_string = prefix.scalar<tstring>()();'}}",
            "message_norm":"ensure validation sticks in `save_restore_v2_ops.cc`\n\npiperorigin-revid: 387924206\nchange-id: i6156842eb3230076b5812c0815f3e66bd5241454",
            "language":"en",
            "entities":"[('ensure', 'ACTION', ''), ('387924206', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/save_restore_v2_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":1328,
            "vuln_id":"GHSA-9722-rr68-rfpg",
            "cwe_id":"{'CWE-610', 'CWE-73'}",
            "score":3.4,
            "chain":"{'https:\/\/github.com\/octobercms\/october\/commit\/6711dae8ef70caf0e94cec434498012a2ccd86b8'}",
            "dataset":"osv",
            "summary":"Upload whitelisted files to any directory in OctoberCMS ### Impact\nAn attacker can exploit this vulnerability to upload jpg, jpeg, bmp, png, webp, gif, ico, css, js, woff, woff2, svg, ttf, eot, json, md, less, sass, scss, xml files to any directory of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission.\n\n### Patches\nIssue has been patched in Build 466 (v1.0.466).\n\n### Workarounds\nApply https:\/\/github.com\/octobercms\/october\/commit\/6711dae8ef70caf0e94cec434498012a2ccd86b8 to your installation manually if unable to upgrade to Build 466.\n\n### References\nReported by [Sivanesh Ashok](https:\/\/stazot.com\/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [hello@octobercms.com](mailto:hello@octobercms.com)\n\n### Threat assessment:\n<img width=\"1241\" alt=\"Screen Shot 2020-03-31 at 12 21 10 PM\" src=\"https:\/\/user-images.githubusercontent.com\/7253840\/78061230-255f5400-734a-11ea-92b4-1120f6960505.png\">",
            "published_date":"2020-06-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/october",
            "commit_href":"https:\/\/github.com\/octobercms\/october\/commit\/6711dae8ef70caf0e94cec434498012a2ccd86b8",
            "commit_sha":"6711dae8ef70caf0e94cec434498012a2ccd86b8",
            "patch":"SINGLE",
            "chain_ord":"['6711dae8ef70caf0e94cec434498012a2ccd86b8']",
            "before_first_fix_commit":"{'2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc'}",
            "last_fix_commit":"6711dae8ef70caf0e94cec434498012a2ccd86b8",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/31\/2020, 10:09:18",
            "message":"Improve asset file path handling when moving assets",
            "author":"Luke Towers",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'modules\/cms\/widgets\/AssetList.php': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/october\/raw\/6711dae8ef70caf0e94cec434498012a2ccd86b8\/modules%2Fcms%2Fwidgets%2FAssetList.php', 'patch': \"@@ -333,13 +333,20 @@ public function onMove()\\n \\n             $basename = basename($path);\\n             $originalFullPath = $this->getFullPath($path);\\n-            $newFullPath = rtrim($destinationFullPath, '\/').'\/'.$basename;\\n+            $newFullPath = realpath(rtrim($destinationFullPath, '\/')) . '\/' . $basename;\\n             $safeDir = $this->getAssetsPath();\\n \\n             if ($originalFullPath == $newFullPath) {\\n                 continue;\\n             }\\n \\n+            if (!starts_with($newFullPath, $safeDir)) {\\n+                throw new ApplicationException(Lang::get(\\n+                    'cms::lang.asset.error_moving_file',\\n+                    ['file' => $basename]\\n+                ));\\n+            }\\n+\\n             if (is_file($originalFullPath)) {\\n                 if (!@File::move($originalFullPath, $newFullPath)) {\\n                     throw new ApplicationException(Lang::get(\"}}",
            "message_norm":"improve asset file path handling when moving assets",
            "language":"en",
            "entities":"[('improve', 'ACTION', ''), ('asset', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/cms\/widgets\/AssetList.php'])",
            "num_files":1.0
        },
        {
            "index":24,
            "vuln_id":"GHSA-24x4-6qmh-88qg",
            "cwe_id":"{'CWE-416'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b'}",
            "dataset":"osv",
            "summary":"Use after free in `DecodePng` kernel ### Impact\nA malicious user can cause a use after free behavior when [decoding PNG images](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/kernels\/image\/decode_image_op.cc#L339-L346):\n```cc\nif (\/* ... error conditions ... *\/) {\n  png::CommonFreeDecode(&decode);\n  OP_REQUIRES(context, false,\n              errors::InvalidArgument(\"PNG size too large for int: \",\n                                      decode.width, \" by \", decode.height));\n}   \n```\nAfter `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state.\n\n### Patches\nWe have patched the issue in GitHub commit [e746adbfcfee15e9cfdb391ff746c765b99bdf9b](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "commit_sha":"e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "patch":"SINGLE",
            "chain_ord":"['e746adbfcfee15e9cfdb391ff746c765b99bdf9b']",
            "before_first_fix_commit":"{'3098fd96f45207b030c48ac78922d6221a4c421a'}",
            "last_fix_commit":"e746adbfcfee15e9cfdb391ff746c765b99bdf9b",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/12\/2021, 03:12:19",
            "message":"Prevent use after free in `DecodePng` kernel.\n\nWe are cleaning up the memory in `decode` and then we are using an `OP_REQUIRES` to check an invariant on the `decode` data.\n\nPiperOrigin-RevId: 409299145\nChange-Id: I4eb93aaca52483eb202e89b78df07fbb2f6cb254",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 0, 'deletions': 1, 'total': 1}",
            "files":"{'tensorflow\/core\/kernels\/image\/decode_image_op.cc': {'additions': 0, 'deletions': 1, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/e746adbfcfee15e9cfdb391ff746c765b99bdf9b\/tensorflow%2Fcore%2Fkernels%2Fimage%2Fdecode_image_op.cc', 'patch': '@@ -339,7 +339,6 @@ class DecodeImageV2Op : public OpKernel {\\n     if (width != static_cast<int64_t>(decode.width) || width <= 0 ||\\n         width >= (1LL << 27) || height != static_cast<int64_t>(decode.height) ||\\n         height <= 0 || height >= (1LL << 27) || total_size >= (1LL << 29)) {\\n-      png::CommonFreeDecode(&decode);\\n       OP_REQUIRES(context, false,\\n                   errors::InvalidArgument(\"PNG size too large for int: \",\\n                                           decode.width, \" by \", decode.height));'}}",
            "message_norm":"prevent use after free in `decodepng` kernel.\n\nwe are cleaning up the memory in `decode` and then we are using an `op_requires` to check an invariant on the `decode` data.\n\npiperorigin-revid: 409299145\nchange-id: i4eb93aaca52483eb202e89b78df07fbb2f6cb254",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('use after free', 'SECWORD', ''), ('decodepng', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('decode', 'SECWORD', ''), ('409299145', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/image\/decode_image_op.cc'])",
            "num_files":1.0
        },
        {
            "index":695,
            "vuln_id":"GHSA-5rqg-jm4f-cqx7",
            "cwe_id":"{'CWE-835'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75', 'https:\/\/github.com\/Marak\/colors.js\/commit\/137c6dae3339e97f4bbc838c221803c363b0a9fd', 'https:\/\/github.com\/Marak\/colors.js\/commit\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26'}",
            "dataset":"osv",
            "summary":"Infinite loop causing Denial of Service in colors colors is a library for including colored text in node.js consoles. Between 07 and 09 January 2022, colors versions 1.4.1, 1.4.2, and 1.4.44-liberty-2 were published including malicious code that caused a Denial of Service due to an infinite loop. Software dependent on these versions experienced the printing of randomized characters to console and an infinite loop resulting in unbound system resource consumption.\n\nUsers of colors relying on these specific versions should downgrade to version 1.4.0.",
            "published_date":"2022-01-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/Marak\/colors.js",
            "commit_href":"https:\/\/github.com\/Marak\/colors.js\/commit\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "commit_sha":"6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "patch":"MULTI",
            "chain_ord":"['137c6dae3339e97f4bbc838c221803c363b0a9fd', '5d2d242f656103ac38086d6b26433a09f1c38c75', '6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26']",
            "before_first_fix_commit":"{'5d2d242f656103ac38086d6b26433a09f1c38c75'}",
            "last_fix_commit":"6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "chain_ord_pos":3.0,
            "commit_datetime":"01\/08\/2022, 04:22:34",
            "message":"Bump to `v1.4.44-liberty-2`",
            "author":"Marak",
            "comments":"{'com_1': {'author': 'belauzas', 'datetime': '01\/08\/2022, 09:12:51', 'body': 'What is this? Why console is trashed with all this random shit?'}, 'com_2': {'author': 'legalsec', 'datetime': '01\/08\/2022, 13:20:11', 'body': '> \\r\\n\\r\\n@belauzas .... See here: https:\/\/news.ycombinator.com\/item?id=25032105\\r\\nand here: https:\/\/github.com\/Marak\/colors.js\/commit\/074a0f8ed0c31c35d13d28632bd8a049ff136fb6\\r\\nMillions of downloads a week... not a penny to show for it.'}, 'com_3': {'author': 'atridadl', 'datetime': '01\/09\/2022, 21:53:33', 'body': 'What a child.'}, 'com_4': {'author': 'zmaktouf', 'datetime': '01\/10\/2022, 01:18:25', 'body': 'Everyone should contribute with $1 to the author. He will get the money he deserves.\\r\\nI am not using `colors.js`, but I will be happy to contribute'}, 'com_5': {'author': 'ImJustChew', 'datetime': '01\/10\/2022, 04:06:49', 'body': 'irresponsible, wasted my time.'}, 'com_6': {'author': 'add1609', 'datetime': '01\/10\/2022, 04:08:27', 'body': '@Marak you 100% deserve to get paid for your work. Please provide someway to send you money.'}, 'com_7': {'author': 'BARMPlus', 'datetime': '01\/10\/2022, 06:33:52', 'body': 'What really happened with Aaron Swartz?'}, 'com_8': {'author': 'connor-sarah', 'datetime': '01\/10\/2022, 06:35:44', 'body': 'freeloaders'}, 'com_9': {'author': 'dmitrykurmanov', 'datetime': '01\/10\/2022, 07:52:07', 'body': \"> Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n\\r\\nand let's pay to terrorists too because that is the same meaning I think\"}, 'com_10': {'author': 'ImJustChew', 'datetime': '01\/10\/2022, 08:25:47', 'body': \"Paying doesn't solve the problem. Wait till more developers expect people to pay for their open-source code forcefully and see how everything slowly reverts back to closed-source.\"}, 'com_11': {'author': 'piotrtomiak', 'datetime': '01\/10\/2022, 08:32:28', 'body': \"Just don't use MIT license, if you don't want some corporation to reuse your work and get money for it. Try some other alternatives, which will require consumer to open source their code as well, or a license without permission for commercial use. You can change license at any moment - if I recall that correctly Facebook did something like that with React. Pushing a broken version to NPM is simply wrong.\"}, 'com_12': {'author': 'Fried-Chicken', 'datetime': '01\/10\/2022, 10:03:13', 'body': 'What happened to `1.4.44-liberty-1`?'}, 'com_13': {'author': 'mirzap', 'datetime': '01\/10\/2022, 10:47:03', 'body': 'Why did you open source it if you want to get paid for it? Why did you use MIT license? Tantrum that you did does not help OSS developers. This is simply evil.'}, 'com_14': {'author': 'sergeych', 'datetime': '01\/10\/2022, 11:01:46', 'body': 'When one is publishing something as a free software the LICENSE is supplied which grants everybody a RIGHT to use your code without paying \"a penny\". Any sort of open source license does it one way or another. It protects users. This means, once something is published as free software, this version will remain free and usable to whoever have a copy even if the author changes ones mind to require a payment for it. So, any package or source repository as a _user_ of this free software retains a right to keep publishing it according to the open source license that was (if it was) supplied with original publication. That is why open source still uses licenses. We could not have free software if any author or the heirs could reclaim or make unusable the free software. What was once a gift to the society, should remain a gift. There the gift back is not fair at all, neither is requiring payment for a gift. Too bad, actually, that it is not crystal clear to anybody.'}, 'com_15': {'author': 'Nazehs', 'datetime': '01\/10\/2022, 12:29:51', 'body': \"at least he has made a name for himself at least... \ud83d\ude06 \ud83d\ude06 and some of us have used his code but we can't admit or say thanks to him... I am not advocating this but it's good we compensate ourselves sometimes to keep maintaining the source code because all of us value our time so do the authors too... $1 dollar will mean a lot to them and encourage them to work on the project... I believe once the author of Open source releases the codebase they have done all they could but if we will be expecting them to fix issues or add features while we are making our money out of it does it make sense at all? Many of us can't even open-source our code....\\r\\nShalom\"}, 'com_16': {'author': 'ddzy', 'datetime': '01\/10\/2022, 12:31:53', 'body': 'It wasted my whole day looking for the problem of garbled code'}, 'com_17': {'author': 'Nazehs', 'datetime': '01\/10\/2022, 12:52:25', 'body': '> \\r\\n\\r\\nyeah i know a lot of us will waste hours trying to figure out the issue you know'}, 'com_18': {'author': 'AAGene', 'datetime': '01\/10\/2022, 13:20:27', 'body': 'To those saying he should release under another license:\\r\\n\\r\\n![image](https:\/\/user-images.githubusercontent.com\/48164468\/148772692-0f4c911b-f277-44f4-8034-16c4b38b0e88.png)'}, 'com_19': {'author': 'ts-3156', 'datetime': '01\/10\/2022, 13:39:11', 'body': 'I just paid @Marak 100$. If you have a time to have a futile dispute, use that time to help people in need.'}, 'com_20': {'author': 'efriandika', 'datetime': '01\/10\/2022, 14:17:07', 'body': 'I am wondering if this is the same people?\\r\\nhttps:\/\/twitter.com\/marak\/status\/1320465599319990272\\r\\nhttps:\/\/nypost.com\/2020\/09\/16\/resident-of-nyc-home-with-suspected-bomb-making-materials-charged\/'}, 'com_21': {'author': 'timup', 'datetime': '01\/10\/2022, 14:20:51', 'body': '> I am wondering if this is the same people? https:\/\/twitter.com\/marak\/status\/1320465599319990272 https:\/\/nypost.com\/2020\/09\/16\/resident-of-nyc-home-with-suspected-bomb-making-materials-charged\/\\r\\n\\r\\nThat is an unfortunate coincidence.'}, 'com_22': {'author': 'zmaktouf', 'datetime': '01\/10\/2022, 14:31:46', 'body': \"> > Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n> \\r\\n> and let's pay to terrorists too because that is the same meaning I think\\r\\n\\r\\nWhat are you talking about? This is incomparable. \\r\\nThis is about helping someone from the community, our side, someone who might be in need, we don't know.\\r\\nToday it is him, maybe tomorrow it will be you.\"}, 'com_23': {'author': 'justblender', 'datetime': '01\/10\/2022, 14:37:11', 'body': '> I am wondering if this is the same people?\\r\\n> https:\/\/twitter.com\/marak\/status\/1320465599319990272\\r\\n> https:\/\/nypost.com\/2020\/09\/16\/resident-of-nyc-home-with-suspected-bomb-making-materials-charged\/\\r\\n\\r\\nYes, this is him.'}, 'com_24': {'author': 'degr', 'datetime': '01\/10\/2022, 14:47:19', 'body': 'post in epic thread'}, 'com_25': {'author': 'rpv-tomsk', 'datetime': '01\/10\/2022, 15:16:04', 'body': \"> It wasted my whole day looking for the problem of garbled code\\r\\n\\r\\nIt's just a time came to pay your bill for using this library.\\r\\nBefore that, you saved your time by using it.\"}, 'com_26': {'author': 'ademidun', 'datetime': '01\/10\/2022, 15:31:42', 'body': 'Open source software is a [public good](https:\/\/en.wikipedia.org\/wiki\/Public_good_(economics)). So the paradox which everyone asks themselves is \"if everyone can benefit from it for free why should I have to pay?\".\\r\\n\\r\\nBut conversely, if people are benefitting from something you\\'ve created then it\\'s only fair for the person who created this value to get some financial compensation commensurate to the value they\\'ve created.\\r\\n\\r\\nThe author of this package has chosen a method to get some compensation for their work that has resulted in a lose-lose situation where neither the author nor the users are happy.\\r\\n\\r\\nBut it doesn\\'t have to be this way.\\r\\n\\r\\nThe [Opensource guide](https:\/\/opensource.guide\/) has some useful tips on [Getting Paid for Open Source Work](https:\/\/opensource.guide\/getting-paid\/). For people interested in web3 and crypto, [Gitcoin](https:\/\/gitcoin.co\/) is platform where you can [get paid to work on open source software](https:\/\/gitcoin.co\/grants\/).\\r\\n\\r\\nHopefully, by becoming more informed on ways to make money from open source software we can avoid situations like this in the future and create a fairer system that works for everyone.'}, 'com_27': {'author': 'Veetaha', 'datetime': '01\/10\/2022, 15:50:23', 'body': 'Yo, you should consider rewriting it in Rust =)'}, 'com_28': {'author': 'G2G2G2G', 'datetime': '01\/10\/2022, 16:47:45', 'body': 'You are a hero, anyone who uses NPM deserves worse than this but at least you make them suffer.'}, 'com_29': {'author': 'Abion47', 'datetime': '01\/10\/2022, 17:07:04', 'body': \"This package hadn't been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n\\r\\nI'm not buying the moral high road, either. Fortune 500 companies have hundreds of developers and rigorous upgrade paths before any new production build sees the light of day, and this infantile infinite loop of zalgo text would get spotted immediately and fixed. Your little maneuver isn't going to cost them a single dime. All you're doing is being a pain in the ass for smaller companies and independent developers who don't have the luxury of time and resources to be able to put up these kinds of safeguards automatically.\\r\\n\\r\\nI'm fully on board with active contributors to the open-source community getting fair compensation, but this just screams trying to snag a quick and easy buck.\"}, 'com_30': {'author': 'rcollette', 'datetime': '01\/10\/2022, 17:23:05', 'body': 'If someone wants money for their time, either start a company or work for one.   This behavior is like a childish prank of putting a dollar on the sidewalk on a fishing line and pulling it away.'}, 'com_31': {'author': 'G2G2G2G', 'datetime': '01\/10\/2022, 17:32:27', 'body': '> If someone wants money for their time, either start a company or work for one. This behavior is like a childish prank of putting a dollar on the sidewalk on a fishing line and pulling it away.\\r\\n\\r\\n@rcollette  AND YOU FELL FOR IT LMAO\\r\\n\\r\\n\\r\\n\\r\\n\u2591\u2591\u2591\u2591\u2588\u2592\u2592\u2584\u2580\u2580\u2580\u2580\u2580\u2584\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2584\\r\\n\u2591\u2591\u2584\u2580\u2592\u2592\u2592\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2588\\r\\n\u2591\u2588\u2592\u2592\u2592\u2592\u2590\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u258c\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2590\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u258c\u2592\u2588\\r\\n\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2592\u2592\u2588\u2592\u2591\u2584\u2592\u2584\u2588\u2592\u2592\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2592\u2592\u2592\u2588\\r\\n\u2592\u2592\u2590\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2591\u2592\u2592\u2580\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\\r\\n\u2592\u258c\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2592\u2591\u2592\u2584\u2588\u2584\u2588\u2584\u2592\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\\r\\n\u2592\u258c\u2592\u2592\u2592\u2592\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2592\u2592\u2588\u258c\u258c\u258c\u258c\u258c\u2588\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\\r\\n\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2592\u2592\u2580\u2588\u2588\u2588\u2580\u2592\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\\r\\n\u2580\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\\r\\n\u2580\u2584\u2592\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2584\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\\r\\n\u2592\u2592\u2580\u2584\u2592\u2580\u2584\u2580\u2580\u2580\u2584\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2591\u2591\u2591\u2591\u2580\u2580\u2580\u2580\u2580\u2580\\r\\n\u2592\u2592\u2592\u2592\u2580\u2584\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2590\\r\\n\u2591\u2584\u2584\u2584\u2591\u2591\u2584\u2591\u2591\u2584\u2591\u2584\u2591\u2591\u2584\u2591\u2591\u2584\u2591\u2591\u2591\u2591\u2584\u2584\u2591\u2584\u2584\u2591\u2591\u2591\u2584\u2584\u2584\u2591\u2591\u2591\u2584\u2584\u2584\\r\\n\u2588\u2584\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2588\u2584\u2584\u2584\u2588\u2591\u2588\u2591\u2591\u2591\u2588\\r\\n\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2588\\r\\n\u2580\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2580\u2591\u2580\u2584\u2584\u2584\u2580'}, 'com_32': {'author': 'rcollette', 'datetime': '01\/10\/2022, 17:38:12', 'body': '@G2G2G2G -Nope.  I pin package versions.\\r\\nhttps:\/\/github.com\/winstonjs\/winston\/issues\/1995#event-5867271529'}, 'com_33': {'author': 'TechStudent10', 'datetime': '01\/10\/2022, 20:12:30', 'body': '> > I am wondering if this is the same people? https:\/\/twitter.com\/marak\/status\/1320465599319990272 https:\/\/nypost.com\/2020\/09\/16\/resident-of-nyc-home-with-suspected-bomb-making-materials-charged\/\\r\\n> \\r\\n> That is an unfortunate coincidence.\\r\\n\\r\\noh crap'}, 'com_34': {'author': 'skyzyx', 'datetime': '01\/10\/2022, 20:53:51', 'body': 'Have we learned nothing from left-pad?\\r\\n\\r\\n1. Use a package cache.\\r\\n2. Pin your versions.'}, 'com_35': {'author': 'zmaktouf', 'datetime': '01\/10\/2022, 22:24:38', 'body': \"> Yo, you should consider rewriting it in Rust =)\\r\\n\\r\\nLet's do it :D https:\/\/github.com\/zmaktouf\/colors.rs\"}, 'com_36': {'author': 'barnaba', 'datetime': '01\/11\/2022, 02:07:06', 'body': \"> This package hadn't been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n\\r\\nBecause https:\/\/web.archive.org\/web\/20210628030444\/https:\/\/marak.com\/blog\/2021-04-25-monetizing-open-source-is-problematic\\r\\n\\r\\nTLDR the dev tried to monetize faker via normal means available to open source projects, but corporations don't play nice.\\r\\n\\r\\nMore important question is: This package hadn't been updated since 2019 before this. Why not pin it? Are you expecting new colors to be invented?\"}, 'com_37': {'author': 'yvesll', 'datetime': '01\/11\/2022, 05:41:43', 'body': 'Respect'}, 'com_38': {'author': 'Chew', 'datetime': '01\/11\/2022, 06:12:28', 'body': '> What happened to `1.4.44-liberty-1`?\\r\\n\\r\\nI was hungry, my bad'}, 'com_39': {'author': 'prasannamestha', 'datetime': '01\/11\/2022, 07:36:56', 'body': 'Why no sell a commercial license to this library via [privjs.com](https:\/\/privjs.com) ?'}, 'com_40': {'author': 'artsiom-aliakseichyk', 'datetime': '01\/11\/2022, 08:40:07', 'body': '> \u041c\u044b \u043f\u043e\u043d\u044f\u043b\u0438 \u043e\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u043d \u043c\u0443\u0434\u0430\u043a \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438 \u043e\u0442\u043a\u0430\u0442\u0438\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u043b\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0443 \u043e\u0442 \u043c\u0435\u043d\u0435\u0435 \u043e\u0442\u0431\u0438\u0442\u044b\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043b\u0430\u0439\u043a \u0438\u043b\u0438 \u043d\u0435 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b\u0438 \u0437\u0430 \u043b\u0438\u0431\u0443 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u0432\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435, \u043d\u0430 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435, \u043f\u043e\u0434 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439, \u0442\u043e \u0443 \u043d\u0435\u0433\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0441 \u0431\u0430\u0448\u043a\u043e\u0439\\r\\n\\r\\nI understand that it is hard to read licenses nowadays, so I will copypaste one of the interesting part\\r\\n\\r\\n\\'THE SOFTWARE IS PROVIDED **\"AS IS\"**, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\r\\nTHE SOFTWARE.\\''}, 'com_41': {'author': 'kounelios13', 'datetime': '01\/11\/2022, 10:03:31', 'body': '> You are a hero, anyone who uses NPM deserves worse than this but at least you make them suffer.\\r\\n\\r\\nWhy anyone who uses NPM deserves worse than that? Care to explain ?'}, 'com_42': {'author': 'arinzejustin', 'datetime': '01\/11\/2022, 14:16:02', 'body': 'I spend through out yesterday and today looking for the issue'}, 'com_43': {'author': 'Abion47', 'datetime': '01\/11\/2022, 14:46:26', 'body': '> > This package hadn\\'t been updated since 2019 before this. You want to suddenly be paid after 2-3 years of doing no work? And why now, all of a sudden?\\r\\n> \\r\\n> Because https:\/\/web.archive.org\/web\/20210628030444\/https:\/\/marak.com\/blog\/2021-04-25-monetizing-open-source-is-problematic\\r\\n> \\r\\n> TLDR the dev tried to monetize faker via normal means available to open source projects, but corporations don\\'t play nice.\\r\\n> \\r\\n> More important question is: This package hadn\\'t been updated since 2019 before this. Why not pin it? Are you expecting new colors to be invented?\\r\\n\\r\\nThat article is referring to Faker where I was referring to Colors. Since you bring it up, however, the amount of recent work on Faker is even less - a bit of work 10-12 months ago, and before that, complete radio silence since 5 years ago. It sucks that the author\\'s attempts to sell faker cloud were met with getting ghosted, but what did he expect? He released a paid service that did little more than the existing package already did for free. He was competing against himself, and he was doing it poorly. And sure, maybe it was poor form on Retool\\'s part to copy FakerCloud using Faker, but at the same time, they were effectively paying him $500 a month which they were under no legal obligation to pay. The only thing his tantrum could\\'ve possibly accomplished was that they would continue to do exactly what they were doing but they would do it without paying him.\\r\\n\\r\\nAn interesting note on that last part, though. I don\\'t know about you, but getting two grand for work I did four years ago seems like a good deal. Not only this, but they were his _second_ biggest donors, meaning that that was less than half of the donation amount he had made from the Faker package alone as of that article\\'s publication date. And now he\\'s threatening to not do any more work when he already hasn\\'t done any work on the Colors or Faker packages in nearly a year and no significant work in nearly three, and he\\'s demanding payment for packages he released under the MIT license years ago _and which he has already received at least $4000 for_. Not to mention I can only imagine how much money he has received from proverbial white knights ever since this whole drama began. (Someone in this thread alone donated $100.)\\r\\n\\r\\nMy takeaway from that article is that Marak bit the hand that fed him. It sounds like he already burned the Retool bridge which was a poor move considering they were his second-biggest donors, and I doubt anyone else who was a repeat donor is likely to continue. He proved nothing with this little stunt - no large company will be hurt by this despite his claims, and everyone else just has to pin their versions and wait until someone else forks his code to continue development and maintenance (not that much maintenance needs to be done as the packages seem pretty stable).\\r\\n\\r\\nHe could\\'ve pinned it. He could\\'ve archived it. He could\\'ve just posted a message saying \"I can\\'t afford to maintain this anymore so it will just sit here in its current state until someone else offers to take ownership\". He could\\'ve done a lot of things. But instead, he chose the nuclear option of holding the package hostage (as ineffective as it is) while causing grief to other developers like him just trying to do their jobs. This doesn\\'t strike me as a man looking to get fair recompense for services rendered. This strikes me as a man desperate for money and looking to get it in any way he can by pulling on some heartstrings. Well, congrats, Marak. Mission accomplished. You may have tanked your career and your standing in the open-source community in the process, but I hope it was worth it in the end.'}, 'com_44': {'author': 'Awilum', 'datetime': '01\/11\/2022, 17:11:07', 'body': '> What is this? Why console is trashed with all this random shit?\\r\\n\\r\\nThis is Javascript World!'}, 'com_45': {'author': 'zunino', 'datetime': '01\/11\/2022, 22:26:40', 'body': \"If you were looking for sympathy, you've really messed up. Your attitude is not only immature, but irresponsible and very unprofessional. There are other ways one can turn an open-source project into a business, but it's not by acting out like this. You don't belong in OSS.\"}, 'com_46': {'author': 'rpv-tomsk', 'datetime': '01\/12\/2022, 04:43:33', 'body': \"@zunino \\r\\n\\r\\n> If you were looking for sympathy, you've really messed up. \\r\\n\\r\\nAgreed. \\r\\nBut:\\r\\n\\r\\n> There are other ways one can turn an open-source project into a business...\\r\\n\\r\\nYou have many OSS project already converted to business?\\r\\nCan you show your results, our you can only speak slogans and loud words?\\r\\n\\r\\nIn my view, there is two kinds of people: who can create software and who can create business. \\r\\nAnd not each developer belongs to both sets simultaneously, these are exceptions, not typical case (and we see this here).\"}, 'com_47': {'author': 'ItzSwirlz', 'datetime': '01\/12\/2022, 16:21:32', 'body': 'man cant change his license to stop it from being used'}, 'com_48': {'author': 'kctdfh', 'datetime': '01\/13\/2022, 16:33:36', 'body': \"> > You have many OSS project already converted to business?\\r\\n> \\r\\n> Not so many, but there are a few - rather big - projects that do converted and are doing well now.\\r\\n> \\r\\n> > Can you show your results,\\r\\n> \\r\\n> Discourse, GitLab, NodeBB, Docker. Just from back of my head; sure there are more.\\r\\n\\r\\nAll of the examples you mention sell convenience, not software. \\r\\n\\r\\nFor some software solutions, the user may want to have the luxuries of open-source without having to fully commit full-time resources to the management and maintenance of those people\/infrastructures. Marak could have never been RedHat because Faker\/Colors are set-it-and-forget-it libraries. For these libraries, most of the work happens prior to release and the user just plugs it into their code. There's near-zero opportunities to monetize them by offering convenience. Mattermost for instance has a paid version that's hosted and has extra features but what can Faker\/Colors do? Invent exclusive colors? Implement SSO? Generate entire movie scripts?\\r\\n\\r\\nMaybe he could have started an API for no-code tools but then again, no-code devs are used to extremely generous free-tiers on APIs so it probably won't cover the cost of running a reliable infrastructure to handle usage bursts, etc.\"}, 'com_49': {'author': 'zunino', 'datetime': '01\/13\/2022, 19:20:25', 'body': \"@kctdfh I see the distinction you are making but, really, nothing justifies the author's rogue actions. I'm sure he would be in a better position if, say, he had decided to start a new, commercial endeavour, having the success of his open-source projects under his wing. The popularity of open-source work can shine on a CV or business proposal.\"}, 'com_50': {'author': 'kctdfh', 'datetime': '01\/13\/2022, 20:05:06', 'body': '@cronlabspl ?? Have not seen a start-up call themselves \"fully-managed [insert open-source tech]\"?? MongoDB Atlas is a money machine because people like using MongoDB without having to fine-tune their own provisioning, scaling, sharding, replication, security, or correctness. Who can afford reading MongoDB documentations, risk making a rookie mistake, spend hours every week troubleshooting, and basically manage people who manage the code that manages their software? They\\'ll just pay MongoDB to abstract the boring stuff away. It\\'s buying convenience.\\r\\n\\r\\n@zunino Yeah for sure not the best way to handle it and I don\\'t agree with it but I somewhat understand it. I see it like this (conjecture):\\r\\n- Dev isn\\'t doing well and feels unappreciated \/ feels they are being wronged - maybe even for an unrelated reason.\\r\\n- NPM\\'s weekly download stats says they\\'re appreciated\/valued\/successful but that number isn\\'t amounting to anything in their day-to-day. They know that this situation isn\\'t unique to them in the FOSS community.\\r\\n- Nuking their popular packages is certainly a good way to remind people that they depend on devs they\\'ve never heard of who may not be doing well. Not an effective form of protest because it ruins their reputation with zero sustained effect but it did rejuvenate the conversation.\\r\\n\\r\\nI wish him luck and hope he\\'s doing well'}, 'com_51': {'author': 'quenbyako', 'datetime': '01\/13\/2022, 21:08:59', 'body': '@glebfeklistov \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0437\u043e\u0432\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0430 \u0430\u0441\u0445\u043e\u043b\u043e\u043c, \u0437\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430 \u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f, \u0445\u043e\u0442\u044f \u043e\u043d \u0441\u0434\u0435\u043b\u0430\u043b \u043b\u0438\u0431\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043d\u043e\u0434\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438.\\r\\n\\r\\n\u0413\u043b\u0435\u0431, \u043a\u0440\u0430\u0441\u0430\u0432\u0447\u0438\u043a, \u043b\u0443\u0447\u0448\u0438\u0439 \ud83d\udc4d\ud83d\udcaa \u0422\u0430\u043a \u0438\u0445, \u0434\u043e\u043b\u0431\u043e\u0435\u0431\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044f\u0442 \u0432 \u043e\u043f\u0435\u043d\u0441\u0443\u0440\u0441 \u0437\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0430\u043a, \u043f\u043e\u0448\u043b\u0438 \u043e\u043d\u0438, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u043c\u0443\u0436\u0438\u043a\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044f\u0442 \u0440\u0430\u0437 \u0432 \u043f\u043e\u043b\u0433\u043e\u0434\u0430 \u0438 \u043e\u0431\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043c\u0443\u0434\u0430\u043a\u0430\u043c\u0438. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e! \ud83d\udc46'}, 'com_52': {'author': 'Lun3th', 'datetime': '01\/13\/2022, 23:42:40', 'body': \"So basically... he's own the code so he can do this thing. If you are a big company please support open source projects with MONEY. And also check a code change before you pull it blatantly. :D \\r\\n\\r\\nBtw. If I find his paypal I will donate him with 2-3 dollars because that was a big move :D\"}, 'com_53': {'author': 'hello-smile6', 'datetime': '01\/14\/2022, 04:25:40', 'body': \"If anyone is in charge of a large corporation's servers and wants to make a splash, just hit production servers with https:\/\/gist.github.com\/hello-smile6\/fa92b539fce2339440bdd75e087cae8b\"}, 'com_54': {'author': 'okyanusoz', 'datetime': '01\/14\/2022, 15:15:10', 'body': 'stop'}, 'com_55': {'author': 'sech1p', 'datetime': '01\/15\/2022, 11:20:45', 'body': 'What really happened with Aaron Swartz?'}, 'com_56': {'author': 'sech1p', 'datetime': '01\/15\/2022, 11:32:09', 'body': '> > What really happened with Aaron Swartz?\\r\\n> \\r\\n> No idea. [this](https:\/\/en.wikipedia.org\/wiki\/Aaron_Swartz) may help\\r\\n\\r\\ntwierdzenie Pitagorasa\\r\\nnie wierz w samob\u00f3jstwo Swartza'}, 'com_57': {'author': 'sech1p', 'datetime': '01\/15\/2022, 11:42:40', 'body': \"> > nie wierz w samob\u00f3jstwo Swartza\\r\\n> \\r\\n> Nigdzie nie napisa\u0142em \u017ce wierz\u0119 w to. Poda\u0142em tylko linka do artyku\u0142u.\\r\\n\\r\\nchill, chill, I just parafrased a one sentence from polish network, i don't judge whether you believe it or not\\r\\n\\r\\nbtw i read this article already\"}, 'com_58': {'author': 'xpswilllive', 'datetime': '01\/18\/2022, 06:17:41', 'body': 'u are fine'}, 'com_59': {'author': 'dmitrykurmanov', 'datetime': '01\/19\/2022, 10:25:52', 'body': \"> > > Everyone should contribute with $1 to the author. He will get the money he deserves. I am not using `colors.js`, but I will be happy to contribute\\r\\n> > \\r\\n> > \\r\\n> > and let's pay to terrorists too because that is the same meaning I think\\r\\n> \\r\\n> What are you talking about? This is incomparable. This is about helping someone from the community, our side, someone who might be in need, we don't know. Today it is him, maybe tomorrow it will be you.\\r\\n\\r\\nhelp him because he is asking for help is ok for me. I don't hate him personally or anything like that. But I think that it should be asking not demanding\/terrorizing. I wish him to be happy. I don't judge him. I judge his act and the situation. And it is a huge difference for me\"}, 'com_60': {'author': 'teror4uks', 'datetime': '01\/21\/2022, 13:40:37', 'body': '@quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.'}, 'com_61': {'author': 'okyanusoz', 'datetime': '01\/22\/2022, 06:22:30', 'body': '@cronlabspl Marak should stop this money disaster, not this discussion'}, 'com_62': {'author': 'hello-smile6', 'datetime': '01\/22\/2022, 06:24:15', 'body': '> @cronlabspl Marak should stop this money disaster, not this discussion\\r\\n\\r\\nHere!\\r\\n![img](https:\/\/assets.scratch.mit.edu\/045e55e80b60ddd40d5a1a2a1bb3403a.png)'}, 'com_63': {'author': 'WhiteNervosa', 'datetime': '01\/23\/2022, 07:38:27', 'body': \"Four months ago, Marak [dropped over $10,000 on NFTs](https:\/\/opensea.io\/Marak?search[chains][0]=ETHEREUM&search[eventTypes][0]=AUCTION_SUCCESSFUL&tab=activity). No matter your opinion of NFTs, if you have that amount of money as disposable income then you're doing alright.\\r\\n\\r\\nHe could have just archived this if it was the feeling that he was giving labor for nothing in return or even tried the [sponsor feature](https:\/\/github.com\/sponsors), earlier. Earlier because they [currently have 47 sponsors](https:\/\/github.com\/sponsors\/Marak#sponsors).\\r\\n\\r\\nThis is not about money. Worse even, what do those 47 people now think about **sponsoring to support others?**\\r\\n\\r\\nShort sighted, misguided, and harmful. _Bravo_ \ud83c\udf89\"}, 'com_64': {'author': 'G2G2G2G', 'datetime': '01\/23\/2022, 09:33:54', 'body': '@hello-smile6 what does \"syeal your data\" mean?'}, 'com_65': {'author': 'nacknime-official', 'datetime': '01\/23\/2022, 09:46:25', 'body': '@teror4uks \u0430 \u0442\u0430\u043c \u0447\u0442\u043e-\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e? \u043f\u0443\u0441\u0442\u044c \u0434\u0435\u043b\u0430\u0435\u0442 \u0441 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u043c \u0447\u0442\u043e \u0445\u043e\u0447\u0435\u0442, \u043e\u043d \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d'}, 'com_66': {'author': 'teror4uks', 'datetime': '01\/23\/2022, 13:49:51', 'body': '@nacknime-official  \u0435\u0449\u0451 \u043a\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043a\u0440\u0430\u0448\u0438\u0442\u0441\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0435\u0433\u043e \u0437\u0430\u0440\u0435\u043b\u0438\u0437\u0438\u0442\u044c \u0438 \u0435\u0441\u0442\u044c \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e.'}, 'com_67': {'author': 'nacknime-official', 'datetime': '01\/23\/2022, 16:55:02', 'body': '@teror4uks \u0442\u043a\u043d\u0438 \u043d\u043e\u0441\u043e\u043c, \u0447\u0442\u043e \u0442\u0430\u043c \u0442\u0430\u043a\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e'}, 'com_68': {'author': 'hello-smile6', 'datetime': '01\/23\/2022, 18:15:10', 'body': '> @hello-smile6 what does \"syeal your data\" mean?\\r\\n\\r\\nNot my art, ask the creator.'}, 'com_69': {'author': 'teror4uks', 'datetime': '01\/23\/2022, 19:52:34', 'body': '@nacknime-official  https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75'}, 'com_70': {'author': 'nacknime-official', 'datetime': '01\/24\/2022, 05:43:12', 'body': '@teror4uks \u0438\u043c\u0435\u044e \u0432\u0432\u0438\u0434\u0443 \u0442\u043a\u043d\u0438 \u043d\u043e\u0441\u043e\u043c \u0432 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e, \u0433\u0434\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0440\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e'}, 'com_71': {'author': 'teror4uks', 'datetime': '01\/24\/2022, 09:30:35', 'body': '@nacknime-official \u043b\u043e\u043b, \u043d\u0443 \u0441 \u0442\u043e\u0431\u043e\u0439 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0442\u044b \u043d\u0435 \u0432\u0438\u0434\u0438\u0448\u044c \u0442\u0443\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0434\u0443\u0435\u0442 \u0447\u0442\u043e \"\u043f\u0440\u0430\u0432\u0434\u043e\u0440\u0443\u0431\u044b\" \u0432\u0440\u043e\u0434\u0435 \u0442\u0435\u0431\u044f \u0437\u0434\u0435\u0441\u044c \u0432 \u043c\u0435\u043d\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435, \u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043b\u044e\u0434\u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u044e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0435 \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u043e \u0432 \u0446\u0438\u0432\u0438\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435.'}, 'com_72': {'author': 'wtlgo', 'datetime': '01\/26\/2022, 10:04:34', 'body': '@teror4uks \u0442\u044b, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u044f\u043b \u0441\u0443\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439. \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f - \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u0440 \u0441\u043e\u0444\u0442\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438, \u0438 \u043b\u044e\u0431\u043e\u0439, \u043a\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u044d\u0442\u0438\u043c\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0410 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u044d\u0442\u0438\u0445 \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0448\u044c \u044d\u0442\u043e\u0442 \u0441\u043e\u0444\u0442, \u0430\u0432\u0442\u043e\u0440 \u0441\u043d\u0438\u043c\u0430\u0435\u0442 \u0441 \u0441\u0435\u0431\u044f \u043b\u044e\u0431\u0443\u044e \u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0432\u0440\u0435\u0434, \u0447\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0442\u0435\u0431\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u0438\u0442\u044c. \u0422\u0430\u043a \u0447\u0442\u043e \u0441 \u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u043c\u0443 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u0438 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0438\u0442\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u043c\u0443 \u0437\u0430\u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0431\u0443\u0434\u044c \u0442\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u043d\u0435 \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0444\u0442\u0430.'}, 'com_73': {'author': 'dmitrykurmanov', 'datetime': '01\/26\/2022, 10:17:20', 'body': '> @teror4uks \u0442\u044b, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u044f\u043b \u0441\u0443\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439. \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f - \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u0440 \u0441\u043e\u0444\u0442\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438, \u0438 \u043b\u044e\u0431\u043e\u0439, \u043a\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u0441 \u044d\u0442\u0438\u043c\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438. \u0410 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u044d\u0442\u0438\u0445 \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0448\u044c \u044d\u0442\u043e\u0442 \u0441\u043e\u0444\u0442, \u0430\u0432\u0442\u043e\u0440 \u0441\u043d\u0438\u043c\u0430\u0435\u0442 \u0441 \u0441\u0435\u0431\u044f \u043b\u044e\u0431\u0443\u044e \u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0432\u0440\u0435\u0434, \u0447\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0442\u0435\u0431\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u0438\u0442\u044c. \u0422\u0430\u043a \u0447\u0442\u043e \u0441 \u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u043c\u0443 \u043d\u0438\u043a\u043e\u043c\u0443 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u0438 \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0438\u0442\u0438\u0442\u044c \u0432 \u0441\u0432\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u043c\u0443 \u0437\u0430\u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0431\u0443\u0434\u044c \u0442\u043e \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u043d\u0435 \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0444\u0442\u0430.\\r\\n\\r\\nhttps:\/\/habr.com\/en\/news\/t\/599865\/#comment_23921173'}, 'com_74': {'author': 'wtlgo', 'datetime': '01\/26\/2022, 10:47:40', 'body': '@dmitrykurmanov \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043d\u0430 \u0432\u043f\u043e\u043b\u043d\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435:\\r\\n\\r\\n> @quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u041d\u0430\u0441\u0447\u0435\u0442 \u044d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u043a\u0430 \u044f \u0441\u0443\u0434\u0438\u0442\u044c \u043d\u0435 \u0431\u0435\u0440\u0443\u0441\u044c, \u043d\u043e \u0441\u0443\u0442\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0430, \u044d\u0442\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442.'}, 'com_75': {'author': 'G2G2G2G', 'datetime': '01\/26\/2022, 15:25:31', 'body': 'yo russians, shut the fuck up before I meet up with you in ukraine and make you'}, 'com_76': {'author': 'wtlgo', 'datetime': '01\/26\/2022, 15:45:14', 'body': '> yo russians, shut the fuck up before I meet up with you in ukraine and make you\\r\\n\\r\\nAre you aware that almost half of Ukrainian people also use Russian as their primary language? How do you know that we are Russians and not someone else?'}, 'com_77': {'author': 'teror4uks', 'datetime': '01\/26\/2022, 15:55:16', 'body': '@wtlgo \u043d\u0443 \u044f \u043a\u0430\u043a \u0431\u044b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043d\u0435 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u043a\u0430\u043a\u043e\u0435 \u043f\u0440\u0430\u0432\u043e \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u0435-\u044e\u0440\u0435 \u0438\u043b\u0438 \u0434\u0435-\u0444\u0430\u043a\u0442\u043e :) \u0412 \u043e\u0431\u0449\u0435\u043c \u043f\u0443\u0441\u0442\u044c \u0438 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0435 \u044d\u0442\u0438\u0447\u043d\u043e, \u0432\u0441\u0451 \u0436\u0435 \u043c\u043e\u0440\u0430\u043b\u044c \u0438 \u044d\u0442\u0438\u043a\u0430 \u043d\u0430\u0441 \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u043b\u044e\u0434\u044c\u043c\u0438, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u043e\u0440\u0441\u0442\u043a\u0430 \u0437\u0430\u043a\u043e\u043d\u043e\u0432.'}, 'com_78': {'author': 'wtlgo', 'datetime': '01\/27\/2022, 10:11:45', 'body': '@teror4uks \u043e\u043f\u044f\u0442\u044c \u0442\u0430\u043a\u0438, \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b \u043f\u0440\u043e \u0442\u0432\u043e\u0439 \u0440\u0430\u0441\u0441\u043a\u0430\u0437 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \"\u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u043d\u0435 \u0443\u043c\u0435\u044e\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438\". \u042d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0443\u043f\u043a\u0430 \u0430\u0432\u0442\u043e\u0440\u0430 \u044f \u0441\u0443\u0434\u0438\u0442\u044c \u043d\u0435 \u0431\u0435\u0440\u0443\u0441\u044c.'}, 'com_79': {'author': 'teror4uks', 'datetime': '01\/27\/2022, 12:24:45', 'body': '@wtlgo \u0441\u0447\u0438\u0442\u0430\u044e \u0447\u0442\u043e \u0434\u0438\u0441\u043a\u0443\u0441\u0441 \u0441\u0435\u0431\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043b, \u0442\u044b \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u0444\u0440\u0430\u0437\u044b \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443 \u0438 \u043f\u044b\u0442\u0430\u0435\u0448\u044c\u0441\u044f \u0447\u0442\u043e \u0442\u043e \u043c\u043d\u0435 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0447\u0442\u043e, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0442\u0435\u043c\u0443'}, 'com_80': {'author': 'wtlgo', 'datetime': '01\/27\/2022, 12:40:04', 'body': '@teror4uks \u0447\u0442\u043e-\u0447\u0442\u043e \u044f \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b? \u0414\u0430\u0432\u0430\u0439 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u0412\u043e\u0442 \u0432\u0441\u044f \u0446\u0438\u0442\u0430\u0442\u0430.\\r\\n\\r\\n> @quenbyako \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u041d\u0443 \u0434\u0430\u0432\u0430\u0439 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043f\u043e \u0447\u0430\u0441\u0442\u044f\u043c, \u0442\u043e\u0431\u043e\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0435\\r\\n\\r\\n> \u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u043e\u043f\u0435\u043d\u0441\u043e\u0440\u0441\u043d\u044b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c\\r\\n\\r\\n\u0421\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0432\u043e\u0434 \u043e\u0442 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0430\u043c \u043d\u0435 \u0441\u0443\u043c\u0435\u043b \u043f\u0440\u043e\u0447\u0435\u0441\u0442\u044c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u043e \u0447\u0435\u043c \u043e\u043d\u0430. \u041d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c.\\r\\n\\r\\n> \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u0430\u043a \u0431\u044b \u0447\u0451\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d, \u043d\u0435 \u0445\u043e\u0447\u0435\u0448\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439, \u0432\u0440\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0438\u043a\u0442\u043e \u0442\u0435\u0431\u0435 \u043f\u0440\u0430\u0432\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0434\u0430\u0432\u0430\u043b.\\r\\n\\r\\n\u0418\u0437 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0447\u0435\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442 \u043d\u0435 \u044d\u0442\u043e. \u0415\u0441\u043b\u0438 \u0431\u044b \u0442\u044b \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043d\u0435 \u0440\u0443\u0441\u0441\u043a\u0438\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u043c \u0438\u043b\u0438 \u0443\u043c\u0435\u043b \u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e-\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438, \u0442\u043e \u0443\u0432\u0438\u0434\u0435\u043b \u0431\u044b, \u0447\u0442\u043e \u0438\u0437 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0447\u0435\u0442\u043a\u043e \u0432\u044b\u0442\u0435\u043a\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0430\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439, \u0435\u0441\u043b\u0438 \u0435\u043c\u0443 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f, \u0438 \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0432\u0438\u043d\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0440\u0430 \u043d\u0438 \u0432 \u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430\u043d\u0435\u0441\u043b\u0430 \u0435\u043c\u0443 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0440\u0435\u0434. \u0410\u0432\u0442\u043e\u0440 \u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u0430\u0432\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u0433\u043e \u0434\u0443\u0448\u0435 \u0432\u0437\u0434\u0443\u043c\u0430\u0435\u0442\u0441\u044f. \\r\\n\\r\\n\u0418\u0442\u0430\u043a, \u0433\u043e\u0441\u043f\u043e\u0434\u0438\u043d, \u0447\u0442\u043e \u0436\u0435 \u044f \u0432\u044b\u0434\u0435\u0440\u043d\u0443\u043b \u0442\u0443\u0442 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430? \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0438\u0437\u0432\u043e\u043b\u044c \u043d\u0430 \u043c\u0435\u043d\u044f \u0442\u0443\u0442 \u043d\u0435 \u043d\u0430\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u0442\u044c \u0438 \u0433\u043e\u043b\u043e\u0441\u043b\u043e\u0432\u043d\u044b\u043c\u0438 \u043e\u0431\u0432\u0438\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0435 \u0431\u0440\u043e\u0441\u0430\u0442\u044c\u0441\u044f. \u042f \u043d\u0438\u0447\u0435\u0433\u043e \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0435 \u0432\u044b\u0434\u0435\u0440\u0433\u0438\u0432\u0430\u044e, \u0430 \u0435\u0441\u043b\u0438 \u0443 \u0442\u0435\u0431\u044f \u043d\u0435\u0442 \u0434\u043e\u0432\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0442\u0438\u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0435\u043f\u0440\u0430\u0432\u043e\u0442\u044b, \u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u0432\u0435\u0448\u0430\u0442\u044c \u044d\u0442\u043e \u043d\u0430 \u043c\u0435\u043d\u044f. \u042d\u0442\u0438\u043a\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f \u043e\u0442\u0432\u0435\u0447\u0430\u043b, \u0442\u044b \u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u043b.\\r\\n\\r\\n\u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u0442\u043e, \u0447\u0442\u043e \u0442\u0430\u043c \u0447\u0430\u0441\u0442\u044c \u0444\u0440\u0430\u0437\u044b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443 - \u0442\u0443\u0442, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u044e, \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0430\u044f \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u044f. \u0415\u0441\u043b\u0438 \u0442\u0435\u0431\u0435 \u0442\u0430\u043a \u0441\u0442\u0440\u0430\u0448\u043d\u043e, \u0447\u0442\u043e \u043d\u0430 \u0442\u0432\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0435 \u0434\u0430\u0439 \u0411\u043e\u0433 \u043e\u0442\u0432\u0435\u0442\u0438\u0442 \u043a\u0442\u043e-\u0442\u043e \u0435\u0449\u0435, \u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u0442\u0443\u0442: \u043e\u0442\u043e\u0448\u043b\u0438 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a\u0443 e-mail \u0438 \u0435\u0433\u043e \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0438\u043a\u0442\u043e, \u043a\u0440\u043e\u043c\u0435 \u0442\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a\u0430, \u043d\u0435 \u0443\u0432\u0438\u0434\u0438\u0442. \u0410 \u043f\u043e\u043a\u0430 \u043f\u0438\u0448\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0443, \u043d\u0435 \u0443\u0434\u0438\u0432\u043b\u044f\u0439\u0441\u044f, \u0435\u0441\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u043a\u0438 \u0447\u0442\u043e-\u0442\u043e \u0432 \u0438\u0442\u043e\u0433\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0442\u0435\u0431\u0435.'}, 'com_81': {'author': 'teror4uks', 'datetime': '01\/27\/2022, 13:26:19', 'body': '@wtlgo \u0442\u0432\u043e\u0451 \u043f\u0440\u0430\u0432\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c, \u043c\u043e\u0451 \u043f\u0440\u0430\u0432\u043e \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0442\u044c \u0442\u043e\u0442 \u0431\u0440\u0435\u0434 \u0447\u0442\u043e \u0442\u044b \u043f\u0438\u0448\u0435\u0448\u044c'}, 'com_82': {'author': 'wtlgo', 'datetime': '01\/27\/2022, 13:28:13', 'body': '@teror4uks \u044d\u0442\u043e \u043d\u0435 \u0431\u0440\u0435\u0434. \u0411\u0440\u0435\u0434 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0442\u0430\u043a\u0438 \u0442\u044b, \u0447\u0442\u043e \u044f \u0438 \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u0442\u0435\u0431\u0435 \u0434\u043e\u043d\u0435\u0441\u0442\u0438.'}, 'com_83': {'author': 'elegantShock2258', 'datetime': '01\/28\/2022, 16:20:54', 'body': 'Speak American! Liberty babyyy \ud83c\uddfa\ud83c\uddf8\ud83c\uddfa\ud83c\uddf8\ud83c\uddfa\ud83c\uddf8'}, 'com_84': {'author': 'elegantShock2258', 'datetime': '01\/28\/2022, 16:24:07', 'body': '> I just paid @Marak 100$. If you have a time to have a futile dispute, use that time to help people in need.\\r\\n\\r\\nYes he needs proper help instead of showing his outbursts up here in the internet and ruining his good name and reputation.'}, 'com_85': {'author': 'Awilum', 'datetime': '02\/01\/2022, 12:20:19', 'body': '> https:\/\/opensea.io\/marak\\r\\n> \\r\\n> Are you sure he needs help?\\r\\n@okyanusoz \\r\\n\\r\\nbecause this story about Colors.js and Faker.js is is look like a scam. imho.'}, 'com_86': {'author': 'satouriko', 'datetime': '02\/04\/2022, 03:20:05', 'body': '> @hello-smile6 what does \"syeal your data\" mean?\\r\\n\\r\\nI guess \"steal\"'}, 'com_87': {'author': 'hello-smile6', 'datetime': '02\/08\/2022, 01:24:33', 'body': '> > @hello-smile6 what does \"syeal your data\" mean?\\r\\n> \\r\\n> I guess \"steal\"\\r\\n\\r\\nYes. Unfortunately, as I said, I didn\\'t create it, so don\\'t blame me for spelling.'}, 'com_88': {'author': 'Lin2Jing4', 'datetime': '02\/12\/2022, 16:39:10', 'body': '\"You can feel the regret. With Cuck Licenses, you get the worst of two worlds: You get no credit for your work, nor money for licensing fees like other proprietary software and your software will be used to violate your and other users\\' privacy when it is used in closed-source environments. Oh, no... copes incoming\"\\r\\n(Luke Madison Smith, 2021, \"Why I Use the GPL and Not Cuck Licenses\").'}, 'com_89': {'author': 'elegantShock2258', 'datetime': '03\/02\/2022, 15:45:11', 'body': \"> there is no american language\\r\\n\\r\\nYes that's the joke\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'package.json': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Marak\/colors.js\/raw\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26\/package.json', 'patch': '@@ -1,7 +1,7 @@\\n {\\n     \"name\": \"colors\",\\n     \"description\": \"get colors in your node.js console\",\\n-    \"version\": \"1.4.44-liberty\",\\n+    \"version\": \"1.4.44-liberty-2\",\\n     \"author\": \"Marak Squires\",\\n     \"contributors\": [\\n         {'}}",
            "message_norm":"bump to `v1.4.44-liberty-2`",
            "language":"en",
            "entities":"[('v1.4.44', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['package.json'])",
            "num_files":1.0
        },
        {
            "index":2350,
            "vuln_id":"GHSA-m52x-29pq-w3vv",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/mpetroff\/pannellum\/commit\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914'}",
            "dataset":"osv",
            "summary":"Pannellum Cross-Site Scripting due to data not being sanitized for URIs or vbscript Versions of `pannellum` prior to 2.5.6 are vulnerable to Cross-Site Scripting (XSS). The package fails to sanitize URLs for data URIs, which may allow attackers to execute arbitrary code in a victim's browser. \n\n\n## Recommendation\n\nUpgrade to version 2.5.6 or later.",
            "published_date":"2019-11-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/mpetroff\/pannellum",
            "commit_href":"https:\/\/github.com\/mpetroff\/pannellum\/commit\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "commit_sha":"cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "patch":"SINGLE",
            "chain_ord":"['cc2f3d99953de59db908e0c6efd1c2c17f7c6914']",
            "before_first_fix_commit":"{'40111b237e763821437f501c94d8511022274dc3', 'f42e80facb41bb97321a0e2056d9ef5a4779e627'}",
            "last_fix_commit":"cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/22\/2019, 01:35:45",
            "message":"Merge pull request from GHSA-m52x-29pq-w3vv\n\nFix potential XSS vulnerability",
            "author":"Matthew Petroff",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 6, 'total': 19}",
            "files":"{'src\/js\/pannellum.js': {'additions': 13, 'deletions': 6, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mpetroff\/pannellum\/raw\/cc2f3d99953de59db908e0c6efd1c2c17f7c6914\/src%2Fjs%2Fpannellum.js', 'patch': \"@@ -1719,7 +1719,7 @@ function createHotSpot(hs) {\\n         if (config.basePath && !absoluteURL(imgp))\\n             imgp = config.basePath + imgp;\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL ? hs.URL : imgp);\\n+        a.href = sanitizeURL(hs.URL ? hs.URL : imgp, true);\\n         a.target = '_blank';\\n         span.appendChild(a);\\n         var image = document.createElement('img');\\n@@ -1731,7 +1731,7 @@ function createHotSpot(hs) {\\n         span.style.maxWidth = 'initial';\\n     } else if (hs.URL) {\\n         a = document.createElement('a');\\n-        a.href = sanitizeURL(hs.URL);\\n+        a.href = sanitizeURL(hs.URL, true);\\n         if (hs.attributes) {\\n             for (var key in hs.attributes) {\\n                 a.setAttribute(key, hs.attributes[key]);\\n@@ -2005,7 +2005,7 @@ function processOptions(isPreview) {\\n                 var authorText = escapeHTML(config[key]);\\n                 if (config.authorURL) {\\n                     var authorLink = document.createElement('a');\\n-                    authorLink.href = sanitizeURL(config['authorURL']);\\n+                    authorLink.href = sanitizeURL(config['authorURL'], true);\\n                     authorLink.target = '_blank';\\n                     authorLink.innerHTML = escapeHTML(config[key]);\\n                     authorText = authorLink.outerHTML;\\n@@ -2016,7 +2016,7 @@ function processOptions(isPreview) {\\n             \\n             case 'fallback':\\n                 var link = document.createElement('a');\\n-                link.href = sanitizeURL(config[key]);\\n+                link.href = sanitizeURL(config[key], true);\\n                 link.target = '_blank';\\n                 link.textContent = 'Click here to view this panorama in an alternative viewer.';\\n                 var message = document.createElement('p');\\n@@ -2378,10 +2378,17 @@ function escapeHTML(s) {\\n  * The URL cannot be of protocol 'javascript'.\\n  * @private\\n  * @param {string} url - URL to sanitize\\n+ * @param {boolean} href - True if URL is for link (blocks data URIs)\\n  * @returns {string} Sanitized URL\\n  *\/\\n-function sanitizeURL(url) {\\n-    if (url.trim().toLowerCase().indexOf('javascript:') === 0) {\\n+function sanitizeURL(url, href) {\\n+    if (url.trim().toLowerCase().indexOf('javascript:') === 0 ||\\n+        url.trim().toLowerCase().indexOf('vbscript:') === 0) {\\n+        console.log('Script URL removed.');\\n+        return 'about:blank';\\n+    }\\n+    if (href && url.trim().toLowerCase().indexOf('data:') === 0) {\\n+        console.log('Data URI removed from link.');\\n         return 'about:blank';\\n     }\\n     return url;\"}}",
            "message_norm":"merge pull request from ghsa-m52x-29pq-w3vv\n\nfix potential xss vulnerability",
            "language":"ca",
            "entities":"[('ghsa-m52x-29pq-w3vv', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('xss', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/js\/pannellum.js'])",
            "num_files":1.0
        },
        {
            "index":3074,
            "vuln_id":"GHSA-v82p-hv3v-p6qp",
            "cwe_id":"{'CWE-20'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69'}",
            "dataset":"osv",
            "summary":"Incomplete validation in MKL requantization ### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9",
            "commit_sha":"203214568f5bc237603dbab6e1fd389f1572f5c9",
            "patch":"MULTI",
            "chain_ord":"['9e62869465573cb2d9b5053f1fa02a81fce21d69', '203214568f5bc237603dbab6e1fd389f1572f5c9']",
            "before_first_fix_commit":"{'aff0d5b2883ea3de9b52f9e7cd996a34b299bf06'}",
            "last_fix_commit":"203214568f5bc237603dbab6e1fd389f1572f5c9",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/30\/2021, 23:06:23",
            "message":"Reorganize and add more validation to MKL requantization\n\nPiperOrigin-RevId: 387901341\nChange-Id: I2515b9034c64e113db0bcec8337d30643ab0a0f1",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 25, 'deletions': 15, 'total': 40}",
            "files":"{'tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc': {'additions': 25, 'deletions': 15, 'changes': 40, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/203214568f5bc237603dbab6e1fd389f1572f5c9\/tensorflow%2Fcore%2Fkernels%2Fmkl%2Fmkl_requantize_per_channel_op.cc', 'patch': '@@ -49,35 +49,45 @@ class MklRequantizePerChannelOp : public OpKernel {\\n   void Compute(OpKernelContext* ctx) override {\\n     try {\\n       const Tensor& input = ctx->input(kInputTensorIndex);\\n+      OP_REQUIRES(\\n+          ctx, input.dims() == 4,\\n+          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n+                                  \"supports 4D tensors only.\"));\\n+\\n       const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);\\n+      size_t depth = input_min_vec.NumElements();\\n       float* input_min_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_min_vec.flat<float>().data()));\\n+\\n       const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_max_vec.NumElements() == depth,\\n+          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n+                                  depth, \" was \", input_max_vec.NumElements()));\\n       float* input_max_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_max_vec.flat<float>().data()));\\n \\n       const Tensor& input_requested_min = ctx->input(this->kRequestMinIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_min must be a scalar\"));\\n       const float input_requested_min_float =\\n           input_requested_min.flat<float>()(0);\\n+\\n       const Tensor& input_requested_max = ctx->input(this->kRequestMaxIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_max must be a scalar\"));\\n       const float input_requested_max_float =\\n           input_requested_max.flat<float>()(0);\\n \\n-      size_t depth = input_min_vec.NumElements();\\n-      OP_REQUIRES(\\n-          ctx, input.dims() == 4,\\n-          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n-                                  \"supports 4D tensors only.\"));\\n-      OP_REQUIRES(\\n-          ctx, input_min_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_min has incorrect size, expected \",\\n-                                  depth, \" was \", input_min_vec.dim_size(0)));\\n-      OP_REQUIRES(\\n-          ctx, input_max_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n-                                  depth, \" was \", input_max_vec.dim_size(0)));\\n-\\n-      if (out_type_ == DT_QINT8) DCHECK(input_requested_min_float < 0.0f);\\n+      if (out_type_ == DT_QINT8) {\\n+        OP_REQUIRES(ctx, input_requested_min_float < 0.0f,\\n+                    errors::InvalidArgument(\\n+                        \"If out_type is QINT8, requested_output_max must be \"\\n+                        \"non negative, got \",\\n+                        input_requested_min_float));\\n+      }\\n \\n       const float factor = (out_type_ == DT_QINT8) ? 127.0f : 255.0f;\\n       const float requested_min_max ='}}",
            "message_norm":"reorganize and add more validation to mkl requantization\n\npiperorigin-revid: 387901341\nchange-id: i2515b9034c64e113db0bcec8337d30643ab0a0f1",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('387901341', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3479,
            "vuln_id":"GHSA-xqj7-j8j5-f2xr",
            "cwe_id":"{'CWE-327'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839', 'https:\/\/github.com\/bcgit\/bc-java\/commit\/22467b6e8fe19717ecdf201c0cf91bacf04a55ad'}",
            "dataset":"osv",
            "summary":"Bouncy Castle has a flaw in the Low-level interface to RSA key pair generator Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later.",
            "published_date":"2018-10-16",
            "chain_len":2,
            "project":"https:\/\/github.com\/bcgit\/bc-java",
            "commit_href":"https:\/\/github.com\/bcgit\/bc-java\/commit\/73780ac522b7795fc165630aba8d5f5729acc839",
            "commit_sha":"73780ac522b7795fc165630aba8d5f5729acc839",
            "patch":"MULTI",
            "chain_ord":"['73780ac522b7795fc165630aba8d5f5729acc839', '22467b6e8fe19717ecdf201c0cf91bacf04a55ad']",
            "before_first_fix_commit":"{'73780ac522b7795fc165630aba8d5f5729acc839'}",
            "last_fix_commit":"22467b6e8fe19717ecdf201c0cf91bacf04a55ad",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2018, 08:40:01",
            "message":"BJA-694 cleaned up primality test",
            "author":"David Hook",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bcgit\/bc-java\/raw\/73780ac522b7795fc165630aba8d5f5729acc839\/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fbouncycastle%2Fcrypto%2Fgenerators%2FRSAKeyPairGenerator.java', 'patch': '@@ -20,12 +20,10 @@\\n     private static final BigInteger ONE = BigInteger.valueOf(1);\\n \\n     private RSAKeyGenerationParameters param;\\n-    private int iterations;\\n \\n     public void init(KeyGenerationParameters param)\\n     {\\n         this.param = (RSAKeyGenerationParameters)param;\\n-        this.iterations = getNumberOfIterations(this.param.getStrength(), this.param.getCertainty());\\n     }\\n \\n     public AsymmetricCipherKeyPair generateKeyPair()\\n@@ -159,6 +157,8 @@ public AsymmetricCipherKeyPair generateKeyPair()\\n      *\/\\n     protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger sqrdBound)\\n     {\\n+        int iterations = getNumberOfIterations(bitlength, param.getCertainty());\\n+\\n         for (int i = 0; i != 5 * bitlength; i++)\\n         {\\n             BigInteger p = new BigInteger(bitlength, 1, param.getRandom());\\n@@ -173,7 +173,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n                 continue;\\n             }\\n \\n-            if (!isProbablePrime(p))\\n+            if (!isProbablePrime(p, iterations))\\n             {\\n                 continue;\\n             }\\n@@ -189,7 +189,7 @@ protected BigInteger chooseRandomPrime(int bitlength, BigInteger e, BigInteger s\\n         throw new IllegalStateException(\"unable to generate prime number for RSA key\");\\n     }\\n \\n-    protected boolean isProbablePrime(BigInteger x)\\n+    protected boolean isProbablePrime(BigInteger x, int iterations)\\n     {\\n         \/*\\n          * Primes class for FIPS 186-4 C.3 primality checking'}}",
            "message_norm":"bja-694 cleaned up primality test",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/org\/bouncycastle\/crypto\/generators\/RSAKeyPairGenerator.java'])",
            "num_files":1.0
        },
        {
            "index":1143,
            "vuln_id":"GHSA-85wq-pqhp-hmq6",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/e69c28e44dae41322112471e1c80f840bde314d4', 'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/23f4809e6c10a221e9d67f2e841536845387b42d'}",
            "dataset":"osv",
            "summary":"Cross-Site Request Forgery in Jenkins Jenkins versions 2.56 and earlier as well as 2.46.1 LTS and earlier are vulnerable to an issue in the Jenkins user database authentication realm: create an account if signup is enabled; or create an account if the victim is an administrator, possibly deleting the existing default admin user in the process and allowing a wide variety of impacts.",
            "published_date":"2022-05-14",
            "chain_len":3,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/e69c28e44dae41322112471e1c80f840bde314d4",
            "commit_sha":"e69c28e44dae41322112471e1c80f840bde314d4",
            "patch":"MULTI",
            "chain_ord":"['3c5e5ca63d9a1ac1c4087682dc0d426625eafed8', 'e69c28e44dae41322112471e1c80f840bde314d4', '23f4809e6c10a221e9d67f2e841536845387b42d']",
            "before_first_fix_commit":"{'eeb699ed8c2ce937f2b836692b36a98da7bb5622'}",
            "last_fix_commit":"23f4809e6c10a221e9d67f2e841536845387b42d",
            "chain_ord_pos":2.0,
            "commit_datetime":"04\/01\/2017, 17:41:02",
            "message":"[SECURITY-412] Fix handling of restart\/safeRestart URLs",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 8, 'total': 29}",
            "files":"{'core\/src\/main\/java\/jenkins\/model\/Jenkins.java': {'additions': 21, 'deletions': 8, 'changes': 29, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/e69c28e44dae41322112471e1c80f840bde314d4\/core%2Fsrc%2Fmain%2Fjava%2Fjenkins%2Fmodel%2FJenkins.java', 'patch': '@@ -3367,19 +3367,25 @@ public DirectoryBrowserSupport doUserContent() {\\n      *\\n      * This first replaces \"app\" to {@link HudsonIsRestarting}\\n      *\/\\n-    @CLIMethod(name=\"restart\")\\n-    @RequirePOST\\n     public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\")) {\\n             req.getView(this,\"_restart.jelly\").forward(req,rsp);\\n             return;\\n         }\\n \\n-        restart();\\n+        if (req != null && req.getMethod().equals(\"POST\")) {\\n+            restart();\\n+        }\\n \\n-        if (rsp != null) \/\/ null for CLI\\n-            rsp.sendRedirect2(\".\");\\n+        rsp.sendRedirect2(\".\");\\n+    }\\n+\\n+    @CLIMethod(name=\"restart\")\\n+    @Restricted(NoExternalUse.class)\\n+    public void cliRestart() throws RestartNotSupportedException {\\n+        checkPermission(ADMINISTER);\\n+        restart();\\n     }\\n \\n     \/**\\n@@ -3389,18 +3395,25 @@ public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOExceptio\\n      *\\n      * @since 1.332\\n      *\/\\n-    @CLIMethod(name=\"safe-restart\")\\n-    @RequirePOST\\n     public HttpResponse doSafeRestart(StaplerRequest req) throws IOException, ServletException, RestartNotSupportedException {\\n         checkPermission(ADMINISTER);\\n         if (req != null && req.getMethod().equals(\"GET\"))\\n             return HttpResponses.forwardToView(this,\"_safeRestart.jelly\");\\n \\n-        safeRestart();\\n+        if (req != null && req.getMethod().equals(\"POST\")) {\\n+            safeRestart();\\n+        }\\n \\n         return HttpResponses.redirectToDot();\\n     }\\n \\n+    @CLIMethod(name=\"safe-restart\")\\n+    @Restricted(NoExternalUse.class)\\n+    public void cliSafeRestart() throws RestartNotSupportedException {\\n+        checkPermission(ADMINISTER);\\n+        safeRestart();\\n+    }\\n+\\n     \/**\\n      * Performs a restart.\\n      *\/'}}",
            "message_norm":"[security-412] fix handling of restart\/saferestart urls",
            "language":"en",
            "entities":"[('security-412', 'SECWORD', ''), ('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/jenkins\/model\/Jenkins.java'])",
            "num_files":1.0
        },
        {
            "index":1832,
            "vuln_id":"GHSA-g6vq-wc8w-4g69",
            "cwe_id":"{'CWE-352'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37'}",
            "dataset":"osv",
            "summary":"firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF) firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF).",
            "published_date":"2021-12-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/firefly-iii\/firefly-iii",
            "commit_href":"https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "commit_sha":"518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "patch":"SINGLE",
            "chain_ord":"['518b4ba5a7a56760902758ae0a2c6a392c2f4d37']",
            "before_first_fix_commit":"{'0f9c1b9427b946b5eb580112edfcb3ed6a812970'}",
            "last_fix_commit":"518b4ba5a7a56760902758ae0a2c6a392c2f4d37",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2021, 18:22:07",
            "message":"Fix CSRF issues",
            "author":"James Cole",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 5, 'total': 11}",
            "files":"{'routes\/web.php': {'additions': 6, 'deletions': 5, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/firefly-iii\/firefly-iii\/raw\/518b4ba5a7a56760902758ae0a2c6a392c2f4d37\/routes%2Fweb.php', 'patch': \"@@ -213,7 +213,7 @@ static function () {\\n     ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\\\Http\\\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\\n     static function () {\\n         Route::get('', ['uses' => 'Bill\\\\IndexController@index', 'as' => 'index']);\\n-        Route::get('rescan\/{bill}', ['uses' => 'Bill\\\\ShowController@rescan', 'as' => 'rescan']);\\n+        Route::post('rescan\/{bill}', ['uses' => 'Bill\\\\ShowController@rescan', 'as' => 'rescan']);\\n         Route::get('create', ['uses' => 'Bill\\\\CreateController@create', 'as' => 'create']);\\n         Route::get('edit\/{bill}', ['uses' => 'Bill\\\\EditController@edit', 'as' => 'edit']);\\n         Route::get('delete\/{bill}', ['uses' => 'Bill\\\\DeleteController@delete', 'as' => 'delete']);\\n@@ -649,7 +649,7 @@ static function () {\\n         Route::get('rate\/{fromCurrencyCode}\/{toCurrencyCode}\/{date}', ['uses' => 'Json\\\\ExchangeController@getRate', 'as' => 'rate']);\\n \\n         \/\/ intro things:\\n-        Route::any('intro\/finished\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postFinished', 'as' => 'intro.finished']);\\n+        Route::post('intro\/finished\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postFinished', 'as' => 'intro.finished']);\\n         Route::post('intro\/enable\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@postEnable', 'as' => 'intro.enable']);\\n         Route::get('intro\/{route}\/{specificPage?}', ['uses' => 'Json\\\\IntroController@getIntroSteps', 'as' => 'intro']);\\n     }\\n@@ -726,14 +726,15 @@ static function () {\\n         Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\\n         Route::get('2fa\/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\\n         Route::post('2fa\/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\\n-        Route::get('\/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\\n-        Route::get('2fa\/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\\n+        Route::post('\/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\\n+        Route::post('2fa\/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\\n \\n     }\\n );\\n \\n \/**\\n  * Recurring Transactions Controller.\\n+ * \\n  *\/\\n Route::group(\\n     ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\\\Http\\\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\\n@@ -1078,7 +1079,7 @@ static function () {\\n \/\/ See reference nr. 6\\n         Route::post('store\/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\\n         Route::get('delete\/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\\n-        Route::get('switch\/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\\n+        Route::post('switch\/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\\n \\n         Route::post('destroy\/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\\n     }\"}}",
            "message_norm":"fix csrf issues",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('csrf', 'SECWORD', ''), ('issues', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['routes\/web.php'])",
            "num_files":1.0
        },
        {
            "index":3159,
            "vuln_id":"GHSA-vq36-27g6-p492",
            "cwe_id":"{'CWE-125'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd'}",
            "dataset":"osv",
            "summary":"Out of bounds read in Tensorflow ### Impact\nTensorFlow's [type inference](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/274df9b02330b790aa8de1cee164b70f72b9b244\/tensorflow\/core\/graph\/graph.cc#L223-L229) can cause a heap OOB read as the bounds checking is done in a `DCHECK` (which is a no-op during production):\n\n```cc\nif (node_t.type_id() != TFT_UNSET) {\n  int ix = input_idx[i];\n  DCHECK(ix < node_t.args_size())\n      << \"input \" << i << \" should have an output \" << ix\n      << \" but instead only has \" << node_t.args_size()\n      << \" outputs: \" << node_t.DebugString();\n  input_types.emplace_back(node_t.args(ix));\n  \/\/ ...\n}       \n```   \n      \nAn attacker can control `input_idx` such that `ix` would be larger than the number of values in `node_t.args`.\n        \n### Patches\nWe have patched the issue in GitHub commit [c99d98cd189839dcf51aee94e7437b54b31f8abd](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd).\n  \nThe fix will be included in TensorFlow 2.8.0. This is the only affected version.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "commit_sha":"c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "patch":"SINGLE",
            "chain_ord":"['c99d98cd189839dcf51aee94e7437b54b31f8abd']",
            "before_first_fix_commit":"{'c5ae019abd2f260cf3400abcce4962c75cc5182c'}",
            "last_fix_commit":"c99d98cd189839dcf51aee94e7437b54b31f8abd",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/13\/2021, 01:42:30",
            "message":"Handle invalid inputs instead of crashing.\n\nPiperOrigin-RevId: 409549744\nChange-Id: I7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
            "author":"Dan Moldovan",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 4, 'total': 14}",
            "files":"{'tensorflow\/core\/graph\/graph.cc': {'additions': 10, 'deletions': 4, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/c99d98cd189839dcf51aee94e7437b54b31f8abd\/tensorflow%2Fcore%2Fgraph%2Fgraph.cc', 'patch': '@@ -222,10 +222,16 @@ void Node::RunForwardTypeInference() {\\n       const auto& node_t = node->def().experimental_type();\\n       if (node_t.type_id() != TFT_UNSET) {\\n         int ix = input_idx[i];\\n-        DCHECK(ix < node_t.args_size())\\n-            << \"input \" << i << \" should have an output \" << ix\\n-            << \" but instead only has \" << node_t.args_size()\\n-            << \" outputs: \" << node_t.DebugString();\\n+        if (ix >= node_t.args_size()) {\\n+          LOG(WARNING) << name() << \" has bad type information: input \" << i\\n+                       << \" should have an output \" << ix\\n+                       << \" but instead only has \" << node_t.args_size()\\n+                       << \" outputs: \" << node_t.DebugString()\\n+                       << \"\\\\nThis indicates either \"\\n+                          \"a bug in op registration or a corrupted graph.\";\\n+          ClearTypeInfo();\\n+          return;\\n+        }\\n         input_types.emplace_back(node_t.args(ix));\\n       } else {\\n         input_types.emplace_back(*no_type);'}}",
            "message_norm":"handle invalid inputs instead of crashing.\n\npiperorigin-revid: 409549744\nchange-id: i7f5935b34b53f7e426a5462fcc027bdbf5dcda24",
            "language":"en",
            "entities":"[('409549744', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/graph\/graph.cc'])",
            "num_files":1.0
        },
        {
            "index":2320,
            "vuln_id":"GHSA-jxqv-jcvh-7gr4",
            "cwe_id":"{'CWE-208', 'CWE-203'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/runatlantis\/atlantis\/commit\/48870911974adddaa4c99c8089e79b7d787fa820'}",
            "dataset":"osv",
            "summary":"Atlantis Events prior to 0.19.7 vulnerable to Timing Attack The package github.com\/runatlantis\/atlantis\/server\/controllers\/events before 0.19.7 are vulnerable to Timing Attack in the webhook event validator code, which does not use a constant-time comparison function to validate the webhook secret. It can allow an attacker to recover this secret as an attacker and then forge webhook events.",
            "published_date":"2022-07-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/runatlantis\/atlantis",
            "commit_href":"https:\/\/github.com\/runatlantis\/atlantis\/commit\/48870911974adddaa4c99c8089e79b7d787fa820",
            "commit_sha":"48870911974adddaa4c99c8089e79b7d787fa820",
            "patch":"SINGLE",
            "chain_ord":"['48870911974adddaa4c99c8089e79b7d787fa820']",
            "before_first_fix_commit":"{'e153cea2bf1305e71c4f6a958c1378e22caa0211'}",
            "last_fix_commit":"48870911974adddaa4c99c8089e79b7d787fa820",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/15\/2022, 16:54:36",
            "message":"fix: use constant time comparison of webhook secret in gitlab event validator (#2392)",
            "author":"Connor Edwards",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'server\/controllers\/events\/gitlab_request_parser_validator.go': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/runatlantis\/atlantis\/raw\/48870911974adddaa4c99c8089e79b7d787fa820\/server%2Fcontrollers%2Fevents%2Fgitlab_request_parser_validator.go', 'patch': '@@ -14,6 +14,7 @@\\n package events\\n \\n import (\\n+\\t\"crypto\/subtle\"\\n \\t\"encoding\/json\"\\n \\t\"fmt\"\\n \\t\"io\"\\n@@ -61,8 +62,7 @@ func (d *DefaultGitlabRequestParserValidator) ParseAndValidate(r *http.Request,\\n \\n \\t\/\/ Validate secret if specified.\\n \\theaderSecret := r.Header.Get(secretHeader)\\n-\\tsecretStr := string(secret)\\n-\\tif len(secret) != 0 && headerSecret != secretStr {\\n+\\tif len(secret) != 0 && subtle.ConstantTimeCompare(secret, []byte(headerSecret)) != 1 {\\n \\t\\treturn nil, fmt.Errorf(\"header %s=%s did not match expected secret\", secretHeader, headerSecret)\\n \\t}'}}",
            "message_norm":"fix: use constant time comparison of webhook secret in gitlab event validator (#2392)",
            "language":"en",
            "entities":"[('#2392', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/controllers\/events\/gitlab_request_parser_validator.go'])",
            "num_files":1.0
        },
        {
            "index":464,
            "vuln_id":"GHSA-4qwp-7c67-jmcc",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/facade\/ignition\/commit\/11ffca14abd22db779d90b12e193f8000f6d184b'}",
            "dataset":"osv",
            "summary":"Unauthenticated remote code execution in Ignition Ignition before 2.5.2, as used in Laravel and other products, allows unauthenticated remote attackers to execute arbitrary code because of insecure usage of file_get_contents() and file_put_contents(). This is exploitable on sites using debug mode with Laravel before 8.4.2.",
            "published_date":"2021-03-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/facade\/ignition",
            "commit_href":"https:\/\/github.com\/facade\/ignition\/commit\/11ffca14abd22db779d90b12e193f8000f6d184b",
            "commit_sha":"11ffca14abd22db779d90b12e193f8000f6d184b",
            "patch":"SINGLE",
            "chain_ord":"['11ffca14abd22db779d90b12e193f8000f6d184b']",
            "before_first_fix_commit":"{'9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa'}",
            "last_fix_commit":"11ffca14abd22db779d90b12e193f8000f6d184b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/18\/2021, 11:46:18",
            "message":"Fix MakeViewVariableOptionalSolution to disallow stream wrappers and files that do not end in .blade.php\n\nThis is already fixed in 2.5.2, See https:\/\/github.com\/facade\/ignition\/pull\/334\n\nI could not update to 2.5.2 due to some dependent package required php 7.3, currently clients site is running in php 7.2\n\nOn branch 2.4.1-branch\nChanges to be committed:\n\tmodified:   src\/Solutions\/MakeViewVariableOptionalSolution.php",
            "author":"Anas Mirza",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 0, 'total': 18}",
            "files":"{'src\/Solutions\/MakeViewVariableOptionalSolution.php': {'additions': 18, 'deletions': 0, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/facade\/ignition\/raw\/11ffca14abd22db779d90b12e193f8000f6d184b\/src%2FSolutions%2FMakeViewVariableOptionalSolution.php', 'patch': '@@ -4,6 +4,7 @@\\n \\n use Facade\\\\IgnitionContracts\\\\RunnableSolution;\\n use Illuminate\\\\Support\\\\Facades\\\\Blade;\\n+use Illuminate\\\\Support\\\\Str;\\n \\n class MakeViewVariableOptionalSolution implements RunnableSolution\\n {\\n@@ -70,8 +71,25 @@ public function run(array $parameters = [])\\n         }\\n     }\\n \\n+    protected function isSafePath(string $path): bool\\n+    {\\n+        if (!Str::startsWith($path, [\\'\/\\', \\'.\/\\'])) {\\n+            return false;\\n+        }\\n+\\n+        if (!Str::endsWith($path, \\'.blade.php\\')) {\\n+            return false;\\n+        }\\n+\\n+        return true;\\n+    }\\n+\\n     public function makeOptional(array $parameters = [])\\n     {\\n+        if (!$this->isSafePath($parameters[\\'viewFile\\'])) {\\n+            return false;\\n+        }\\n+\\n         $originalContents = file_get_contents($parameters[\\'viewFile\\']);\\n         $newContents = str_replace(\\'$\\'.$parameters[\\'variableName\\'], \\'$\\'.$parameters[\\'variableName\\'].\" ?? \\'\\'\", $originalContents);'}}",
            "message_norm":"fix makeviewvariableoptionalsolution to disallow stream wrappers and files that do not end in .blade.php\n\nthis is already fixed in 2.5.2, see https:\/\/github.com\/facade\/ignition\/pull\/334\n\ni could not update to 2.5.2 due to some dependent package required php 7.3, currently clients site is running in php 7.2\n\non branch 2.4.1-branch\nchanges to be committed:\n\tmodified:   src\/solutions\/makeviewvariableoptionalsolution.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fixed', 'ACTION', ''), ('2.5.2', 'VERSION', ''), ('https:\/\/github.com\/facade\/ignition\/pull\/334', 'URL', ''), ('update', 'ACTION', ''), ('2.5.2', 'VERSION', ''), ('2.4.1', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Solutions\/MakeViewVariableOptionalSolution.php'])",
            "num_files":1.0
        },
        {
            "index":1487,
            "vuln_id":"GHSA-c558-5gfm-p2r8",
            "cwe_id":"{'CWE-79'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7', 'https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a'}",
            "dataset":"osv",
            "summary":"JSPUI spellcheck and autocomplete tools vulnerable to Cross Site Scripting ### Impact\nThe JSPUI spellcheck \"Did you mean\" HTML escapes the data-spell attribute in the link, but not the actual displayed text.  Similarly, the JSPUI autocomplete HTML does not properly escape text passed to it. Both are vulnerable to XSS.  This vulnerability only impacts the JSPUI.\n\n_This vulnerability does NOT impact the XMLUI or 7.x._\n\n### Patches\n_DSpace 6.x:_\n* Fixed in 6.4 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7\n* 6.x patch files available (may be applied manually if an immediate upgrade to 6.4 or above is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/ebb83a75234d3de9be129464013e998dc929b68d.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/35030a23e48b5946f5853332c797e1c4adea7bb7.patch\n\n_DSpace 5.x:_\n* Fixed in 5.11 via two commits: \n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5\n* 5.x patch files available (may be applied manually if an immediate upgrade to 5.11 or 6.4 is not possible)\n    * Fix for spellcheck: https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a.patch\n    * Fix for autocomplete: https:\/\/github.com\/DSpace\/DSpace\/commit\/6f75bb084ab1937d094208c55cd84340040bcbb5.patch\n\n#### Apply the patch to your DSpace\nIf at all possible, we recommend upgrading your DSpace site based on the upgrade instructions. However, if you are unable to do so, you can manually apply the above patches as follows:\n1. Download the appropriate patch file to the machine where DSpace is running\n2. From the `[dspace-src]` folder, apply the patch, e.g. `git apply [name-of-file].patch`\n3. Now, update your DSpace site (based loosely on the Upgrade instructions). This generally involves three steps:\n    1. Rebuild DSpace, e.g. `mvn -U clean package`  (This will recompile all DSpace code)\n    2. Redeploy DSpace, e.g. `ant update`  (This will copy all updated WARs \/ configs to your installation directory). Depending on your setup you also may need to copy the updated WARs over to your Tomcat webapps folder.\n    3. Restart Tomcat\n\n### References\nDiscovered & reported by Hassan Bhuiyan (Brunel University London)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@dspace.org",
            "published_date":"2022-08-06",
            "chain_len":4,
            "project":"https:\/\/github.com\/DSpace\/DSpace",
            "commit_href":"https:\/\/github.com\/DSpace\/DSpace\/commit\/c89e493e517b424dea6175caba54e91d3847fc3a",
            "commit_sha":"c89e493e517b424dea6175caba54e91d3847fc3a",
            "patch":"MULTI",
            "chain_ord":"['ebb83a75234d3de9be129464013e998dc929b68d', '35030a23e48b5946f5853332c797e1c4adea7bb7', 'c89e493e517b424dea6175caba54e91d3847fc3a', '6f75bb084ab1937d094208c55cd84340040bcbb5']",
            "before_first_fix_commit":"{'d1dd7d23329ef055069759df15cfa200c8e32e54'}",
            "last_fix_commit":"6f75bb084ab1937d094208c55cd84340040bcbb5",
            "chain_ord_pos":3.0,
            "commit_datetime":"07\/26\/2022, 04:25:18",
            "message":"[DS-4453] Escape spellcheck, autocomplete HTML (JSPUI)",
            "author":"Kim Shepherd",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/DSpace\/DSpace\/raw\/c89e493e517b424dea6175caba54e91d3847fc3a\/dspace-jspui%2Fsrc%2Fmain%2Fwebapp%2Fsearch%2Fdiscovery.jsp', 'patch': '@@ -196,7 +196,7 @@\\n                                 <input type=\"text\" size=\"50\" id=\"query\" name=\"query\" value=\"<%= (query==null ? \"\" : Utils.addEntities(query)) %>\"\/>\\n                                 <input type=\"submit\" id=\"main-query-submit\" class=\"btn btn-primary\" value=\"<fmt:message key=\"jsp.general.go\"\/>\" \/>\\n <% if (StringUtils.isNotBlank(spellCheckQuery)) {%>\\n-\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%= spellCheckQuery %><\/a><\/fmt:param><\/fmt:message><\/p>\\n+\\t<p class=\"lead\"><fmt:message key=\"jsp.search.didyoumean\"><fmt:param><a id=\"spellCheckQuery\" data-spell=\"<%= Utils.addEntities(spellCheckQuery) %>\" href=\"#\"><%=Utils.addEntities(spellCheckQuery) %><\/a><\/fmt:param><\/fmt:message><\/p>\\n <% } %>                  \\n                                 <input type=\"hidden\" value=\"<%= rpp %>\" name=\"rpp\" \/>\\n                                 <input type=\"hidden\" value=\"<%= Utils.addEntities(sortedBy) %>\" name=\"sort_by\" \/>'}}",
            "message_norm":"[ds-4453] escape spellcheck, autocomplete html (jspui)",
            "language":"fr",
            "entities":"[('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['dspace-jspui\/src\/main\/webapp\/search\/discovery.jsp'])",
            "num_files":1.0
        },
        {
            "index":1765,
            "vuln_id":"GHSA-fq86-3f29-px2c",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082'}",
            "dataset":"osv",
            "summary":"`CHECK`-failures during Grappler's `IsSimplifiableReshape` in Tensorflow ### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/grappler\/optimizers\/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-07",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/1fb27733f943295d874417630edd3b38b34ce082",
            "commit_sha":"1fb27733f943295d874417630edd3b38b34ce082",
            "patch":"MULTI",
            "chain_ord":"['ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1', '1fb27733f943295d874417630edd3b38b34ce082', '240655511cd3e701155f944a972db71b6c0b1bb6']",
            "before_first_fix_commit":"{'1fb27733f943295d874417630edd3b38b34ce082'}",
            "last_fix_commit":"240655511cd3e701155f944a972db71b6c0b1bb6",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/11\/2021, 17:16:14",
            "message":"Remove `CHECK`-fails from `IsSimplifiableReshape`\n\nPiperOrigin-RevId: 409164987\nChange-Id: I58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'tensorflow\/core\/grappler\/optimizers\/constant_folding.cc': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/1fb27733f943295d874417630edd3b38b34ce082\/tensorflow%2Fcore%2Fgrappler%2Foptimizers%2Fconstant_folding.cc', 'patch': '@@ -1689,7 +1689,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!IsReshape(node)) {\\n     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");\\n   }\\n-  CHECK_LE(2, node.input_size());\\n+  if (2 > node.input_size()) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have at most 2 inputs but has \",\\n+                            node.input_size());\\n+  }\\n   const NodeDef* new_shape = node_map_->GetNode(node.input(1));\\n   if (!IsReallyConstant(*new_shape)) {\\n     return errors::Internal(\"Node \", node.name(), \" has shape \",\\n@@ -1707,7 +1711,11 @@ Status ConstantFolding::IsSimplifiableReshape(\\n   if (!s.ok()) {\\n     return errors::Internal(\"Could not evaluate node \", node.name());\\n   }\\n-  CHECK_EQ(1, outputs.size());\\n+  if (outputs.size() != 1) {\\n+    return errors::Internal(\"Node \", node.name(),\\n+                            \" must have exactly 1 output but has \",\\n+                            outputs.size());\\n+  }\\n \\n   const std::vector<OpInfo::TensorProperties>& props =\\n       properties.GetInputProperties(node.name());'}}",
            "message_norm":"remove `check`-fails from `issimplifiablereshape`\n\npiperorigin-revid: 409164987\nchange-id: i58c7dd459ff348c3dbae95e00c4c5e63b30a4e65",
            "language":"en",
            "entities":"[('remove', 'ACTION', ''), ('409164987', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/grappler\/optimizers\/constant_folding.cc'])",
            "num_files":1.0
        },
        {
            "index":2011,
            "vuln_id":"GHSA-h6xx-pmxh-3wgp",
            "cwe_id":"{'CWE-285', 'CWE-287'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/etcd-io\/etcd\/commit\/bf9d0d8291dc71ecbfb2690612954e1a298154b2', 'https:\/\/github.com\/etcd-io\/etcd\/commit\/0191509637546621d6f2e18e074e955ab8ef374d'}",
            "dataset":"osv",
            "summary":"Improper Authentication in etcd etcd versions 3.2.x before 3.2.26 and 3.3.x before 3.3.11 are vulnerable to an improper authentication issue when role-based access control (RBAC) is used and client-cert-auth is enabled. If an etcd client server TLS certificate contains a Common Name (CN) which matches a valid RBAC username, a remote attacker may authenticate as that user with any valid (trusted) client certificate in a REST API request to the gRPC-gateway.",
            "published_date":"2022-02-15",
            "chain_len":2,
            "project":"https:\/\/github.com\/etcd-io\/etcd",
            "commit_href":"https:\/\/github.com\/etcd-io\/etcd\/commit\/bf9d0d8291dc71ecbfb2690612954e1a298154b2",
            "commit_sha":"bf9d0d8291dc71ecbfb2690612954e1a298154b2",
            "patch":"MULTI",
            "chain_ord":"['0191509637546621d6f2e18e074e955ab8ef374d', 'bf9d0d8291dc71ecbfb2690612954e1a298154b2']",
            "before_first_fix_commit":"{'9c6b407e7d45b89c72c45a065294b6eac91888ab'}",
            "last_fix_commit":"bf9d0d8291dc71ecbfb2690612954e1a298154b2",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/02\/2019, 20:54:40",
            "message":"auth: disable CommonName auth for gRPC-gateway\n\nSigned-off-by: Sam Batschelet <sbatsche@redhat.com>",
            "author":"Sam Batschelet",
            "comments":null,
            "stats":"{'additions': 21, 'deletions': 0, 'total': 21}",
            "files":"{'auth\/store.go': {'additions': 21, 'deletions': 0, 'changes': 21, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/etcd-io\/etcd\/raw\/bf9d0d8291dc71ecbfb2690612954e1a298154b2\/auth%2Fstore.go', 'patch': '@@ -1166,6 +1166,27 @@ func (as *authStore) AuthInfoFromTLS(ctx context.Context) (ai *AuthInfo) {\\n \\t\\t\\tUsername: chains[0].Subject.CommonName,\\n \\t\\t\\tRevision: as.Revision(),\\n \\t\\t}\\n+\\t\\tmd, ok := metadata.FromIncomingContext(ctx)\\n+\\t\\tif !ok {\\n+\\t\\t\\treturn nil\\n+\\t\\t}\\n+\\n+\\t\\t\/\/ gRPC-gateway proxy request to etcd server includes Grpcgateway-Accept\\n+\\t\\t\/\/ header. The proxy uses etcd client server certificate. If the certificate\\n+\\t\\t\/\/ has a CommonName we should never use this for authentication.\\n+\\t\\tif gw := md[\"grpcgateway-accept\"]; len(gw) > 0 {\\n+\\t\\t\\tif as.lg != nil {\\n+\\t\\t\\t\\tas.lg.Warn(\\n+\\t\\t\\t\\t\\t\"ignoring common name in gRPC-gateway proxy request\",\\n+\\t\\t\\t\\t\\tzap.String(\"common-name\", ai.Username),\\n+\\t\\t\\t\\t\\tzap.String(\"user-name\", ai.Username),\\n+\\t\\t\\t\\t\\tzap.Uint64(\"revision\", ai.Revision),\\n+\\t\\t\\t\\t)\\n+\\t\\t\\t} else {\\n+\\t\\t\\t\\tplog.Warningf(\"ignoring common name in gRPC-gateway proxy request %s\", ai.Username)\\n+\\t\\t\\t}\\n+\\t\\t\\treturn nil\\n+\\t\\t}\\n \\t\\tif as.lg != nil {\\n \\t\\t\\tas.lg.Debug(\\n \\t\\t\\t\\t\"found command name\",'}}",
            "message_norm":"auth: disable commonname auth for grpc-gateway\n\nsigned-off-by: sam batschelet <sbatsche@redhat.com>",
            "language":"en",
            "entities":"[('auth', 'SECWORD', ''), ('auth', 'SECWORD', ''), ('sbatsche@redhat.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['auth\/store.go'])",
            "num_files":1.0
        },
        {
            "index":1999,
            "vuln_id":"GHSA-h6ch-v84p-w6p9",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/kpdecker\/jsdiff\/commit\/2aec4298639bf30fb88a00b356bf404d3551b8c0'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service (ReDoS) A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.",
            "published_date":"2019-06-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/kpdecker\/jsdiff",
            "commit_href":"https:\/\/github.com\/kpdecker\/jsdiff\/commit\/2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "commit_sha":"2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "patch":"SINGLE",
            "chain_ord":"['2aec4298639bf30fb88a00b356bf404d3551b8c0']",
            "before_first_fix_commit":"{'a47aca9cb199d558e02ce406e9838356803e204f'}",
            "last_fix_commit":"2aec4298639bf30fb88a00b356bf404d3551b8c0",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/05\/2018, 04:00:42",
            "message":"Optimize parch header parser",
            "author":"Kevin Decker",
            "comments":"{'com_1': {'author': 'mariosanchezgarcia', 'datetime': '07\/30\/2019, 17:32:24', 'body': 'Mario'}}",
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'src\/patch\/parse.js': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kpdecker\/jsdiff\/raw\/2aec4298639bf30fb88a00b356bf404d3551b8c0\/src%2Fpatch%2Fparse.js', 'patch': '@@ -53,16 +53,16 @@ export function parsePatch(uniDiff, options = {}) {\\n   \/\/ Parses the --- and +++ headers, if none are found, no lines\\n   \/\/ are consumed.\\n   function parseFileHeader(index) {\\n-    const headerPattern = \/^(---|\\\\+\\\\+\\\\+)\\\\s+([\\\\S ]*)(?:\\\\t(.*?)\\\\s*)?$\/;\\n-    const fileHeader = headerPattern.exec(diffstr[i]);\\n+    const fileHeader = (\/^(---|\\\\+\\\\+\\\\+)\\\\s+(.*)$\/).exec(diffstr[i]);\\n     if (fileHeader) {\\n       let keyPrefix = fileHeader[1] === \\'---\\' ? \\'old\\' : \\'new\\';\\n-      let fileName = fileHeader[2].replace(\/\\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n+      const data = fileHeader[2].split(\\'\\\\t\\', 2);\\n+      let fileName = data[0].replace(\/\\\\\\\\\\\\\\\\\/g, \\'\\\\\\\\\\');\\n       if (\/^\".*\"$\/.test(fileName)) {\\n         fileName = fileName.substr(1, fileName.length - 2);\\n       }\\n       index[keyPrefix + \\'FileName\\'] = fileName;\\n-      index[keyPrefix + \\'Header\\'] = fileHeader[3];\\n+      index[keyPrefix + \\'Header\\'] = (data[1] || \\'\\').trim();\\n \\n       i++;\\n     }'}}",
            "message_norm":"optimize parch header parser",
            "language":"en",
            "entities":"[('optimize', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/patch\/parse.js'])",
            "num_files":1.0
        },
        {
            "index":369,
            "vuln_id":"GHSA-46c5-pfj8-fv65",
            "cwe_id":"{'CWE-704'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/pmmp\/PocketMine-MP\/commit\/c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1'}",
            "dataset":"osv",
            "summary":"Improperly checked metadata on tools\/armour itemstacks received from the client ### Impact\nDue to a workaround applied in 1.13, an attacker may send a negative damage\/meta value in a tool or armour item's NBT, which `TypeConverter` then blindly uses as if it was valid without being checked.\n\nWhen this invalid metadata value reaches `Durable->setDamage()`, an exception is thrown because the metadata is not within the expected range for damage values.\n\nThis can be reproduced with either a too-large damage value, or a negative one.\n\n### Patches\nc8e1cfcbee4945fd4b63d2a7e96025c59744d4f1\n\n### Workarounds\nIn theory this can be checked by plugins using a custom `TypeConverter`, but this is likely to be very cumbersome.\n\n### For more information\n* Email us at [team@pmmp.io](mailto:team@pmmp.io)",
            "published_date":"2022-03-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/pmmp\/PocketMine-MP",
            "commit_href":"https:\/\/github.com\/pmmp\/PocketMine-MP\/commit\/c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1",
            "commit_sha":"c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1",
            "patch":"SINGLE",
            "chain_ord":"['c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1']",
            "before_first_fix_commit":"{'869dda9a45a12028243cae590552458ce970ec18'}",
            "last_fix_commit":"c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/15\/2022, 23:44:41",
            "message":"TypeConverter: account for possible out-of-range meta in items",
            "author":"Dylan K. Taylor",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/network\/mcpe\/convert\/TypeConverter.php': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pmmp\/PocketMine-MP\/raw\/c8e1cfcbee4945fd4b63d2a7e96025c59744d4f1\/src%2Fnetwork%2Fmcpe%2Fconvert%2FTypeConverter.php', 'patch': '@@ -232,6 +232,9 @@ public function netItemStackToCore(ItemStack $itemStack) : Item{\\n \\t\\t\\t\\t$compound = null;\\n \\t\\t\\t}\\n \\t\\t}\\n+\\t\\tif($meta < 0 || $meta >= 0x7fff){ \/\/this meta value may have been restored from the NBT\\n+\\t\\t\\tthrow new TypeConversionException(\"Item meta must be in range 0 ... \" . 0x7fff . \" (received $meta)\");\\n+\\t\\t}\\n \\n \\t\\ttry{\\n \\t\\t\\treturn ItemFactory::getInstance()->get('}}",
            "message_norm":"typeconverter: account for possible out-of-range meta in items",
            "language":"en",
            "entities":"[('out-of-range', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/network\/mcpe\/convert\/TypeConverter.php'])",
            "num_files":1.0
        },
        {
            "index":815,
            "vuln_id":"GHSA-6cf8-qhqj-vjqm",
            "cwe_id":"{'CWE-400'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/totaljs\/framework\/commit\/b3f901561d66ab799a4a99279893b94cad7ae4ff'}",
            "dataset":"osv",
            "summary":"Prototype pollution in total.js There is a prototype pollution vulnerability in the package total.js before version 3.4.7. The set function can be used to set a value into the object according to the path. However the keys of the path being set are not properly sanitized, leading to a prototype pollution vulnerability. The impact depends on the application. In some cases it is possible to achieve Denial of service (DoS), Remote Code Execution or Property Injection.",
            "published_date":"2021-02-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/totaljs\/framework",
            "commit_href":"https:\/\/github.com\/totaljs\/framework\/commit\/b3f901561d66ab799a4a99279893b94cad7ae4ff",
            "commit_sha":"b3f901561d66ab799a4a99279893b94cad7ae4ff",
            "patch":"SINGLE",
            "chain_ord":"['b3f901561d66ab799a4a99279893b94cad7ae4ff']",
            "before_first_fix_commit":"{'1e1faeb20d2291038e10b98f2046a4058135e767'}",
            "last_fix_commit":"b3f901561d66ab799a4a99279893b94cad7ae4ff",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/31\/2020, 10:41:21",
            "message":"Fixed `U.set()` by adding check for `Prototype pollution`.",
            "author":"Peter Sirka",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'utils.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/totaljs\/framework\/raw\/b3f901561d66ab799a4a99279893b94cad7ae4ff\/utils.js', 'patch': \"@@ -6621,6 +6621,10 @@ exports.set = function(obj, path, value) {\\n \\tvar v = arr[arr.length - 1];\\n \\tvar ispush = v.lastIndexOf('[]') !== -1;\\n \\tvar a = builder.join(';') + ';var v=typeof(a)===\\\\'function\\\\'?a(U.get(b)):a;w' + (v[0] === '[' ? '' : '.') + (ispush ? v.replace(REGREPLACEARR, '.push(v)') : (v + '=v')) + ';return v';\\n+\\n+\\tif ((\/__proto__|constructor|prototype\/).test(a))\\n+\\t\\tthrow new Error('Prototype pollution');\\n+\\n \\tvar fn = new Function('w', 'a', 'b', a);\\n \\tF.temporary.other[cachekey] = fn;\\n \\tfn(obj, value, path);\"}}",
            "message_norm":"fixed `u.set()` by adding check for `prototype pollution`.",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('adding', 'ACTION', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['utils.js'])",
            "num_files":1.0
        },
        {
            "index":425,
            "vuln_id":"GHSA-4gw3-8f77-f72c",
            "cwe_id":"{'CWE-400'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/codemirror\/CodeMirror\/commit\/55d0333907117c9231ffdf555ae8824705993bbb'}",
            "dataset":"osv",
            "summary":"Regular expression denial of service in codemirror This affects the package codemirror before 5.58.2; the package org.apache.marmotta.webjars:codemirror before 5.58.2.\n The vulnerable regular expression is located in https:\/\/github.com\/codemirror\/CodeMirror\/blob\/cdb228ac736369c685865b122b736cd0d397836c\/mode\/javascript\/javascript.jsL129. The ReDOS vulnerability of the regex is mainly due to the sub-pattern (s|\/*.*?*\/)*",
            "published_date":"2021-05-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/codemirror\/CodeMirror",
            "commit_href":"https:\/\/github.com\/codemirror\/CodeMirror\/commit\/55d0333907117c9231ffdf555ae8824705993bbb",
            "commit_sha":"55d0333907117c9231ffdf555ae8824705993bbb",
            "patch":"SINGLE",
            "chain_ord":"['55d0333907117c9231ffdf555ae8824705993bbb']",
            "before_first_fix_commit":"{'cdb228ac736369c685865b122b736cd0d397836c'}",
            "last_fix_commit":"55d0333907117c9231ffdf555ae8824705993bbb",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/09\/2020, 13:38:39",
            "message":"[javascript mode] Fix potentially-exponential regexp",
            "author":"Marijn Haverbeke",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'mode\/javascript\/javascript.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/codemirror\/codemirror5\/raw\/55d0333907117c9231ffdf555ae8824705993bbb\/mode%2Fjavascript%2Fjavascript.js', 'patch': '@@ -126,7 +126,7 @@ CodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\\n           var kw = keywords[word]\\n           return ret(kw.type, kw.style, word)\\n         }\\n-        if (word == \"async\" && stream.match(\/^(\\\\s|\\\\\/\\\\*.*?\\\\*\\\\\/)*[\\\\[\\\\(\\\\w]\/, false))\\n+        if (word == \"async\" && stream.match(\/^(\\\\s|\\\\\/\\\\*([^*]|\\\\*(?!\\\\\/))*?\\\\*\\\\\/)*[\\\\[\\\\(\\\\w]\/, false))\\n           return ret(\"async\", \"keyword\", word)\\n       }\\n       return ret(\"variable\", \"variable\", word)'}}",
            "message_norm":"[javascript mode] fix potentially-exponential regexp",
            "language":"ca",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mode\/javascript\/javascript.js'])",
            "num_files":1.0
        },
        {
            "index":3347,
            "vuln_id":"GHSA-x2jc-pwfj-h9p3",
            "cwe_id":"{'CWE-89'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d'}",
            "dataset":"osv",
            "summary":"SQL Injection in sequelize Affected versions of `sequelize` use MySQL's backslash-based escape syntax when connecting to SQLite, despite the fact that SQLite uses PostgreSQL's escape syntax, which can result in a SQL Injection vulnerability.\n\n\n## Recommendation\n\nUpdate to version 1.7.0-alpha3 or later.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/sequelize\/sequelize",
            "commit_href":"https:\/\/github.com\/sequelize\/sequelize\/commit\/c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "commit_sha":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "patch":"SINGLE",
            "chain_ord":"['c876192aa6ce1f67e22b26a4d175b8478615f42d']",
            "before_first_fix_commit":"{'7dc35e3889e3fa0859b96be41092717444cc2a38'}",
            "last_fix_commit":"c876192aa6ce1f67e22b26a4d175b8478615f42d",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/15\/2013, 03:24:59",
            "message":"Fix string escaping for sqlite\n\nSQLite was defaulting to the MySQL backslash-escaped style, but it uses\npostgres-style escaping. This is a SQL-injection vulnerability, and\nshouldn't be taken lightly (although SQLite is mostly for testing).",
            "author":"Benjamin Woodruff",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'lib\/sql-string.js': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/sequelize\/sequelize\/raw\/c876192aa6ce1f67e22b26a4d175b8478615f42d\/lib%2Fsql-string.js', 'patch': '@@ -37,8 +37,9 @@ SqlString.escape = function(val, stringifyObjects, timeZone, dialect) {\\n     }\\n   }\\n \\n-  if (dialect == \"postgres\") {\\n+  if (dialect === \"postgres\" || dialect === \"sqlite\") {\\n     \/\/ http:\/\/www.postgresql.org\/docs\/8.2\/static\/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\\n+    \/\/ http:\/\/stackoverflow.com\/q\/603572\/130598\\n     val = val.replace(\/\\'\/g, \"\\'\\'\");\\n   } else {\\n     val = val.replace(\/[\\\\0\\\\n\\\\r\\\\b\\\\t\\\\\\\\\\\\\\'\\\\\"\\\\x1a]\/g, function(s) {'}}",
            "message_norm":"fix string escaping for sqlite\n\nsqlite was defaulting to the mysql backslash-escaped style, but it uses\npostgres-style escaping. this is a sql-injection vulnerability, and\nshouldn't be taken lightly (although sqlite is mostly for testing).",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('escaping', 'SECWORD', ''), ('escaped', 'SECWORD', ''), ('escaping', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/sql-string.js'])",
            "num_files":1.0
        },
        {
            "index":1898,
            "vuln_id":"GHSA-gmh3-x5w7-jg5m",
            "cwe_id":"{'CWE-79'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/79c6914bab8c9da07ac950fda17648d08c68b130'}",
            "dataset":"osv",
            "summary":"Microweber before v1.2.20 vulnerable to cross-site scripting Prior to Microweber v1.2.20, due to improper neutralization of input, an attacker can steal tokens to perform cross-site request forgery (CSRF), fetch contents from same-site and redirect a user.",
            "published_date":"2022-07-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/79c6914bab8c9da07ac950fda17648d08c68b130",
            "commit_sha":"79c6914bab8c9da07ac950fda17648d08c68b130",
            "patch":"SINGLE",
            "chain_ord":"['79c6914bab8c9da07ac950fda17648d08c68b130']",
            "before_first_fix_commit":"{'d35e691e72d358430abc8e99f5ba9eb374423b9f'}",
            "last_fix_commit":"79c6914bab8c9da07ac950fda17648d08c68b130",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2022, 17:31:13",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 2, 'total': 16}",
            "files":"{'userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php': {'additions': 14, 'deletions': 2, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/79c6914bab8c9da07ac950fda17648d08c68b130\/userfiles%2Fmodules%2Fmicroweber%2Ftoolbar%2Feditor_tools%2Fmodule_settings%2Findex.php', 'patch': '@@ -87,14 +87,24 @@\\n     if (isset($_GET[\\'autosize\\'])) {\\n         $autoSize = $_GET[\\'autosize\\'];\\n     }\\n-    $autoSize = xss_clean($autoSize);\\n+    $autoSize = intval($autoSize);\\n \\n     $type = \\'\\';\\n     if (isset($_GET[\\'type\\'])) {\\n         $type = $_GET[\\'type\\'];\\n     }\\n     $type = xss_clean($type);\\n \\n+            $other = [\\n+                \\';\\',\\n+                \\'\\\\\\'\\',\\n+                \\'\/\/\\',\\n+                \\'`\\',\\n+                \\'\\\\\\\\\\',\\n+\\n+            ];\\n+    $type = str_replace($other, \\'\\', $type);\\n+\\n     $mod_id = $mod_orig_id = false;\\n     $is_linked_mod = false;\\n \\n@@ -108,6 +118,8 @@\\n     if ($mod_id != $mod_orig_id) {\\n         $is_linked_mod = true;\\n     }\\n+\\n+\\n     ?>\\n \\n     <script type=\"text\/javascript\">\\n@@ -124,7 +136,7 @@\\n         addIcon();\\n \\n         autoSize = <?php  print $autoSize; ?>;\\n-        settingsType = \\'<?php print $type; ?>\\';\\n+        settingsType = \\'<?php print htmlentities($type); ?>\\';\\n \\n         window.onbeforeunload = function () {\\n             $(document.body).addClass(\"mw-external-loading\")'}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php'])",
            "num_files":1.0
        },
        {
            "index":637,
            "vuln_id":"GHSA-5gqf-456p-4836",
            "cwe_id":"{'CWE-476'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr in `SdcaOptimizer` ### Impact\nThe implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\nsparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_values = []\n\ndense_features = []\ndense_weights = []\n\nexample_weights = tf.constant((0.0), dtype=tf.float32)\nexample_labels = tf.constant((0.0), dtype=tf.float32)\n\nsparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]\n  \nexample_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)\n  \ntf.raw_ops.SdcaOptimizer(\n  sparse_example_indices=sparse_example_indices,\n  sparse_feature_indices=sparse_feature_indices,\n  sparse_feature_values=sparse_feature_values, dense_features=dense_features,\n  example_weights=example_weights, example_labels=example_labels, \n  sparse_indices=sparse_indices, sparse_weights=sparse_weights, \n  dense_weights=dense_weights, example_state_data=example_state_data,\n  loss_type=\"logistic_loss\", l1=0.0, l2=0.0, num_loss_partitions=1,\n  num_inner_iterations=1, adaptative=False)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/60a45c8b6192a4699f2e2709a2645a751d435cc3\/tensorflow\/core\/kernels\/sdca_internal.cc) does not validate that the user supplied arguments satisfy all [constraints expected by the op](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/raw_ops\/SdcaOptimizer).\n\n### Patches\nWe have patched the issue in GitHub commit [f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
            "commit_sha":"f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
            "patch":"SINGLE",
            "chain_ord":"['f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb']",
            "before_first_fix_commit":"{'60a45c8b6192a4699f2e2709a2645a751d435cc3'}",
            "last_fix_commit":"f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/05\/2021, 18:40:50",
            "message":"Add several missing validations in SDCA\n\nPiperOrigin-RevId: 372172877\nChange-Id: Id366da962432e18dcbfac847d11e98488bebb70a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 36, 'deletions': 0, 'total': 36}",
            "files":"{'tensorflow\/core\/kernels\/sdca_internal.cc': {'additions': 36, 'deletions': 0, 'changes': 36, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb\/tensorflow%2Fcore%2Fkernels%2Fsdca_internal.cc', 'patch': '@@ -99,17 +99,31 @@ Status ModelWeights::Initialize(OpKernelContext* const context) {\\n   OpInputList sparse_weights_inputs;\\n   TF_RETURN_IF_ERROR(\\n       context->input_list(\"sparse_weights\", &sparse_weights_inputs));\\n+  if (sparse_indices_inputs.size() != sparse_weights_inputs.size())\\n+    return errors::InvalidArgument(\\n+        \"sparse_indices and sparse_weights must have the same length, got \",\\n+        sparse_indices_inputs.size(), \" and \", sparse_weights_inputs.size());\\n   OpInputList dense_weights_inputs;\\n   TF_RETURN_IF_ERROR(\\n       context->input_list(\"dense_weights\", &dense_weights_inputs));\\n \\n   OpOutputList sparse_weights_outputs;\\n   TF_RETURN_IF_ERROR(context->output_list(\"out_delta_sparse_weights\",\\n                                           &sparse_weights_outputs));\\n+  if (sparse_weights_outputs.size() != sparse_weights_inputs.size())\\n+    return errors::InvalidArgument(\\n+        \"out_delta_sparse_weights and sparse_weights must have the same \"\\n+        \"length, got \",\\n+        sparse_weights_outputs.size(), \" and \", sparse_weights_inputs.size());\\n \\n   OpOutputList dense_weights_outputs;\\n   TF_RETURN_IF_ERROR(\\n       context->output_list(\"out_delta_dense_weights\", &dense_weights_outputs));\\n+  if (dense_weights_outputs.size() != dense_weights_inputs.size())\\n+    return errors::InvalidArgument(\\n+        \"out_delta_dense_weights and dense_weights must have the same length, \"\\n+        \"got \",\\n+        dense_weights_outputs.size(), \" and \", dense_weights_inputs.size());\\n \\n   for (int i = 0; i < sparse_weights_inputs.size(); ++i) {\\n     Tensor* delta_t;\\n@@ -327,13 +341,28 @@ Status Examples::Initialize(OpKernelContext* const context,\\n   OpInputList sparse_example_indices_inputs;\\n   TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\",\\n                                          &sparse_example_indices_inputs));\\n+  if (sparse_example_indices_inputs.size() != num_sparse_features)\\n+    return errors::InvalidArgument(\\n+        \"Expected \", num_sparse_features,\\n+        \" tensors in sparse_example_indices but got \",\\n+        sparse_example_indices_inputs.size());\\n   OpInputList sparse_feature_indices_inputs;\\n   TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\",\\n                                          &sparse_feature_indices_inputs));\\n+  if (sparse_feature_indices_inputs.size() != num_sparse_features)\\n+    return errors::InvalidArgument(\\n+        \"Expected \", num_sparse_features,\\n+        \" tensors in sparse_feature_indices but got \",\\n+        sparse_feature_indices_inputs.size());\\n   OpInputList sparse_feature_values_inputs;\\n   if (num_sparse_features_with_values > 0) {\\n     TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\",\\n                                            &sparse_feature_values_inputs));\\n+    if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)\\n+      return errors::InvalidArgument(\\n+          \"Expected \", num_sparse_features_with_values,\\n+          \" tensors in sparse_feature_values but got \",\\n+          sparse_feature_values_inputs.size());\\n   }\\n \\n   const Tensor* example_weights_t;\\n@@ -400,6 +429,13 @@ Status Examples::CreateSparseFeatureRepresentation(\\n           sparse_example_indices_inputs[i].template flat<int64>();\\n       auto feature_indices =\\n           sparse_feature_indices_inputs[i].template flat<int64>();\\n+      if (example_indices.size() != feature_indices.size()) {\\n+        mutex_lock l(mu);\\n+        result = errors::InvalidArgument(\\n+            \"Found mismatched example_indices and feature_indices [\",\\n+            example_indices, \"] vs [\", feature_indices, \"]\");\\n+        return;\\n+      }\\n \\n       \/\/ Parse features for each example. Features for a particular example\\n       \/\/ are at the offsets (start_id, end_id]'}}",
            "message_norm":"add several missing validations in sdca\n\npiperorigin-revid: 372172877\nchange-id: id366da962432e18dcbfac847d11e98488bebb70a",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('missing validations', 'SECWORD', ''), ('372172877', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sdca_internal.cc'])",
            "num_files":1.0
        },
        {
            "index":3249,
            "vuln_id":"GHSA-w8f3-pvx4-4c3h",
            "cwe_id":"{'CWE-1321'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Quernest\/arr-flatten-unflatten\/commit\/cb4351c75f87a4fbec3b6140c40ee2993f574372'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in arr-flatten-unflatten All versions of package arr-flatten-unflatten up to and including version 1.1.4 are vulnerable to Prototype Pollution via the constructor.",
            "published_date":"2021-05-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/Quernest\/arr-flatten-unflatten",
            "commit_href":"https:\/\/github.com\/Quernest\/arr-flatten-unflatten\/commit\/cb4351c75f87a4fbec3b6140c40ee2993f574372",
            "commit_sha":"cb4351c75f87a4fbec3b6140c40ee2993f574372",
            "patch":"SINGLE",
            "chain_ord":"['cb4351c75f87a4fbec3b6140c40ee2993f574372']",
            "before_first_fix_commit":"{'f4ccf0a8d55288490e729233fe2885eec15f74d0', '28bf4357297b67730ec1db002c001a76cd349b61'}",
            "last_fix_commit":"cb4351c75f87a4fbec3b6140c40ee2993f574372",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/25\/2021, 20:45:17",
            "message":"Merge pull request #8 from 418sec\/1-npm-arr-flatten-unflatten\n\nSecurity Fix for Prototype Pollution - huntr.dev",
            "author":"Quernest",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'unflatten.js': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Quernest\/arr-flatten-unflatten\/raw\/cb4351c75f87a4fbec3b6140c40ee2993f574372\/unflatten.js', 'patch': '@@ -10,6 +10,8 @@ function unflatten(obj = {}) {\\n     let m = {};\\n \\n     while ((m = regex.exec(p))) {\\n+      if (curr[prop] === constructor.prototype)\\n+        curr[prop] = {}\\n       curr = curr[prop] || (curr[prop] = m[2] ? [] : {});\\n       prop = m[2] || m[1];\\n     }'}}",
            "message_norm":"merge pull request #8 from 418sec\/1-npm-arr-flatten-unflatten\n\nsecurity fix for prototype pollution - huntr.dev",
            "language":"en",
            "entities":"[('#8', 'ISSUE', ''), ('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['unflatten.js'])",
            "num_files":1.0
        },
        {
            "index":239,
            "vuln_id":"GHSA-3cgf-9m6x-pwwr",
            "cwe_id":"{'CWE-362'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/rusqlite\/rusqlite\/commit\/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f'}",
            "dataset":"osv",
            "summary":"Data races in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via UnlockNotification.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rusqlite\/rusqlite",
            "commit_href":"https:\/\/github.com\/rusqlite\/rusqlite\/commit\/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
            "commit_sha":"45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
            "patch":"SINGLE",
            "chain_ord":"['45fd77ee43c38eea4d6f4e2e56c1667a55ec654f']",
            "before_first_fix_commit":"{'c9ef5bd63cad5c0c123344c072b490a1a9bcbe1f'}",
            "last_fix_commit":"45fd77ee43c38eea4d6f4e2e56c1667a55ec654f",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/15\/2020, 19:05:31",
            "message":"UnlockNotification should hold mutex when calling condvar",
            "author":"Thom Chiovoloni",
            "comments":null,
            "stats":"{'additions': 9, 'deletions': 11, 'total': 20}",
            "files":"{'src\/unlock_notify.rs': {'additions': 9, 'deletions': 11, 'changes': 20, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rusqlite\/rusqlite\/raw\/45fd77ee43c38eea4d6f4e2e56c1667a55ec654f\/src%2Funlock_notify.rs', 'patch': '@@ -26,12 +26,13 @@ impl UnlockNotification {\\n         }\\n     }\\n \\n-    fn fired(&mut self) {\\n-        *self.mutex.lock().unwrap() = true;\\n+    fn fired(&self) {\\n+        let mut flag = self.mutex.lock().unwrap();\\n+        *flag = true;\\n         self.cond.notify_one();\\n     }\\n \\n-    fn wait(&mut self) {\\n+    fn wait(&self) {\\n         let mut fired = self.mutex.lock().unwrap();\\n         while !*fired {\\n             fired = self.cond.wait(fired).unwrap();\\n@@ -43,12 +44,9 @@ impl UnlockNotification {\\n #[cfg(feature = \"unlock_notify\")]\\n unsafe extern \"C\" fn unlock_notify_cb(ap_arg: *mut *mut c_void, n_arg: c_int) {\\n     use std::slice::from_raw_parts;\\n-    let args = from_raw_parts(ap_arg, n_arg as usize);\\n-    for arg in args {\\n-        let _ = catch_unwind(|| {\\n-            let un: &mut UnlockNotification = &mut *(*arg as *mut UnlockNotification);\\n-            un.fired()\\n-        });\\n+    let args = from_raw_parts(ap_arg as *const &UnlockNotification, n_arg as usize);\\n+    for un in args {\\n+        let _ = catch_unwind(std::panic::AssertUnwindSafe(|| un.fired()));\\n     }\\n }\\n \\n@@ -73,12 +71,12 @@ pub unsafe fn is_locked(db: *mut ffi::sqlite3, rc: c_int) -> bool {\\n \/\/\/ back the current transaction (if any).\\n #[cfg(feature = \"unlock_notify\")]\\n pub unsafe fn wait_for_unlock_notify(db: *mut ffi::sqlite3) -> c_int {\\n-    let mut un = UnlockNotification::new();\\n+    let un = UnlockNotification::new();\\n     \/* Register for an unlock-notify callback. *\/\\n     let rc = ffi::sqlite3_unlock_notify(\\n         db,\\n         Some(unlock_notify_cb),\\n-        &mut un as *mut UnlockNotification as *mut c_void,\\n+        &un as *const UnlockNotification as *mut c_void,\\n     );\\n     debug_assert!(\\n         rc == ffi::SQLITE_LOCKED || rc == ffi::SQLITE_LOCKED_SHAREDCACHE || rc == ffi::SQLITE_OK'}}",
            "message_norm":"unlocknotification should hold mutex when calling condvar",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/unlock_notify.rs'])",
            "num_files":1.0
        }
    ]
}