{
    "schema":{
        "fields":[
            {
                "name":"index",
                "type":"integer"
            },
            {
                "name":"vuln_id",
                "type":"string"
            },
            {
                "name":"cwe_id",
                "type":"string"
            },
            {
                "name":"score",
                "type":"number"
            },
            {
                "name":"chain",
                "type":"string"
            },
            {
                "name":"dataset",
                "type":"string"
            },
            {
                "name":"summary",
                "type":"string"
            },
            {
                "name":"published_date",
                "type":"string"
            },
            {
                "name":"chain_len",
                "type":"integer"
            },
            {
                "name":"project",
                "type":"string"
            },
            {
                "name":"commit_href",
                "type":"string"
            },
            {
                "name":"commit_sha",
                "type":"string"
            },
            {
                "name":"patch",
                "type":"string"
            },
            {
                "name":"chain_ord",
                "type":"string"
            },
            {
                "name":"before_first_fix_commit",
                "type":"string"
            },
            {
                "name":"last_fix_commit",
                "type":"string"
            },
            {
                "name":"chain_ord_pos",
                "type":"number"
            },
            {
                "name":"commit_datetime",
                "type":"string"
            },
            {
                "name":"message",
                "type":"string"
            },
            {
                "name":"author",
                "type":"string"
            },
            {
                "name":"comments",
                "type":"string"
            },
            {
                "name":"stats",
                "type":"string"
            },
            {
                "name":"files",
                "type":"string"
            },
            {
                "name":"message_norm",
                "type":"string"
            },
            {
                "name":"language",
                "type":"string"
            },
            {
                "name":"entities",
                "type":"string"
            },
            {
                "name":"classification_level_1",
                "type":"string"
            },
            {
                "name":"classification_level_2",
                "type":"string"
            },
            {
                "name":"list_files",
                "type":"string"
            },
            {
                "name":"num_files",
                "type":"number"
            }
        ],
        "primaryKey":[
            "index"
        ],
        "pandas_version":"1.4.0"
    },
    "data":[
        {
            "index":468,
            "vuln_id":"GHSA-4r65-35qq-ch8j",
            "cwe_id":"{'CWE-209'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/ansible\/ansible\/commit\/fe28767970c8ec62aabe493c46b53a5de1e5fac0'}",
            "dataset":"osv",
            "summary":"Ansible discloses sensitive information in traceback error message Ansible is an IT automation system that handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration. A flaw was found in Ansible Engine's ansible-connection module where sensitive information, such as the Ansible user credentials, is disclosed by default in the traceback error message when Ansible receives an unexpected response from `set_options`. The highest threat from this vulnerability is confidentiality.",
            "published_date":"2022-03-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/ansible\/ansible",
            "commit_href":"https:\/\/github.com\/ansible\/ansible\/commit\/fe28767970c8ec62aabe493c46b53a5de1e5fac0",
            "commit_sha":"fe28767970c8ec62aabe493c46b53a5de1e5fac0",
            "patch":"SINGLE",
            "chain_ord":"['fe28767970c8ec62aabe493c46b53a5de1e5fac0']",
            "before_first_fix_commit":"{'6d2398db280f145eed70a6618282c9db630a380a'}",
            "last_fix_commit":"fe28767970c8ec62aabe493c46b53a5de1e5fac0",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/07\/2021, 20:43:11",
            "message":"Fixed exposed credentials in exception\n\nUnder certain conditions, sensitive connection parameters are shown in tracebacks when Ansible receives an unexpected response (in my case `None`) from `set_options` in ansible-connection. This patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
            "author":"dalrrard",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 1, 'total': 19}",
            "files":"{'lib\/ansible\/module_utils\/connection.py': {'additions': 18, 'deletions': 1, 'changes': 19, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ansible\/ansible\/raw\/fe28767970c8ec62aabe493c46b53a5de1e5fac0\/lib%2Fansible%2Fmodule_utils%2Fconnection.py', 'patch': '@@ -38,10 +38,13 @@\\n import uuid\\n \\n from functools import partial\\n+from ansible import constants as C\\n from ansible.module_utils._text import to_bytes, to_text\\n from ansible.module_utils.common.json import AnsibleJSONEncoder\\n+from ansible.module_utils.common.parameters import remove_values\\n from ansible.module_utils.six import iteritems\\n from ansible.module_utils.six.moves import cPickle\\n+from ansible.utils.helpers import deduplicate_list\\n \\n \\n def write_to_file_descriptor(fd, obj):\\n@@ -163,12 +166,26 @@ def _exec_jsonrpc(self, name, *args, **kwargs):\\n         try:\\n             response = json.loads(out)\\n         except ValueError:\\n-            params = [repr(arg) for arg in args] + [\\'{0}={1!r}\\'.format(k, v) for k, v in iteritems(kwargs)]\\n+            sensitive_keys = list(\\n+                    C.MAGIC_VARIABLE_MAPPING[\"password\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"private_key_file\"]\\n+                    + C.MAGIC_VARIABLE_MAPPING[\"become_pass\"]\\n+            )\\n+            sensitive_values = [\\n+                v2 \\n+                for k, v in iteritems(kwargs) \\n+                for k2, v2 in iteritems(v) \\n+                if k2 in sensitive_keys\\n+            ]\\n+            params = [repr(remove_values(arg, sensitive_values)) for arg in args] + [\\n+                \"{0}={1!r}\".format(k, remove_values(v, sensitive_values)) \\n+                for k, v in iteritems(kwargs)]\\n             params = \\', \\'.join(params)\\n             raise ConnectionError(\\n                 \"Unable to decode JSON from response to {0}({1}). Received \\'{2}\\'.\".format(name, params, out)\\n             )\\n \\n+\\n         if response[\\'id\\'] != reqid:\\n             raise ConnectionError(\\'invalid json-rpc id received\\')\\n         if \"result_type\" in response:'}}",
            "message_norm":"fixed exposed credentials in exception\n\nunder certain conditions, sensitive connection parameters are shown in tracebacks when ansible receives an unexpected response (in my case `none`) from `set_options` in ansible-connection. this patch creates a list of sensitive connection parameter names from `ansible.constants`, pulls a list of those values in the `params` that are about to be dumped to the screen and log file, and sends the `params` and list of `sensitive_values` to the `module_utils.common.parameters.remove_values` function for processing to hide them before being exposed.",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('sensitive', 'SECWORD', ''), ('sensitive', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ansible\/module_utils\/connection.py'])",
            "num_files":1.0
        },
        {
            "index":2255,
            "vuln_id":"GHSA-jhj6-5mh6-4pvf",
            "cwe_id":"{'CWE-476'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/kitabisa\/teler\/commit\/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e'}",
            "dataset":"osv",
            "summary":"Denial-of-Service within Docker container ### Impact\nIf you run teler inside a Docker container and encounter `errors.Exit` function, it will cause denial-of-service (`SIGSEGV`) because it doesn't get process ID and process group ID of teler properly to kills.\n\n### Patches\nUpgrade to the >= 0.0.1 version.\n\n### Workarounds\nN\/A\n\n### References\n- https:\/\/github.com\/kitabisa\/teler\/commit\/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Issues Section](https:\/\/github.com\/kitabisa\/teler\/issues)\n* Email us at [infosec@kitabisa.com](mailto:infosec@kitabisa.com)",
            "published_date":"2021-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/kitabisa\/teler",
            "commit_href":"https:\/\/github.com\/kitabisa\/teler\/commit\/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
            "commit_sha":"ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
            "patch":"SINGLE",
            "chain_ord":"['ec6082049dba9e44a21f35fb7b123d42ce1a1a7e']",
            "before_first_fix_commit":"{'7be1cb4511a8236d5203a924bc0aa4db008aafb8'}",
            "last_fix_commit":"ec6082049dba9e44a21f35fb7b123d42ce1a1a7e",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/02\/2020, 14:09:38",
            "message":":hammer: Fix segmentation fault of syscall\n\nIf teler is run via the docker image, the syscall function cannot allocate and return a nil pointer to address.",
            "author":"Dwi Siswanto",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'pkg\/errors\/abort.go': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kitabisa\/teler\/raw\/ec6082049dba9e44a21f35fb7b123d42ce1a1a7e\/pkg%2Ferrors%2Fabort.go', 'patch': '@@ -2,10 +2,17 @@\\n \\n package errors\\n \\n-import \"syscall\"\\n+import (\\n+\\t\"os\"\\n+\\t\"syscall\"\\n+)\\n \\n \/\/ Abort will terminate & sends SIGTERM to process\\n func Abort(i ...int) {\\n+\\tif _, err := os.Stat(\"\/.dockerenv\"); err == nil {\\n+\\t\\tos.Exit(i[0])\\n+\\t}\\n+\\n \\tpgid, err := syscall.Getpgid(syscall.Getpid())\\n \\tif err != nil {\\n \\t\\tExit(err.Error())'}}",
            "message_norm":":hammer: fix segmentation fault of syscall\n\nif teler is run via the docker image, the syscall function cannot allocate and return a nil pointer to address.",
            "language":"en",
            "entities":"[('segmentation fault', 'SECWORD', ''), ('address', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pkg\/errors\/abort.go'])",
            "num_files":1.0
        },
        {
            "index":1941,
            "vuln_id":"GHSA-gvm4-h8j3-rjrq",
            "cwe_id":"{'CWE-617'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4'}",
            "dataset":"osv",
            "summary":"CHECK-fail in `LoadAndRemapMatrix` ### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:\n    \n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/d94227d43aa125ad8b54115c03cece54f6a1977b\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.\n  \n```cc\nconst string& ckpt_path = ckpt_path_t->scalar<tstring>()();\n```\n\nHowever, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar<T>()()` to trigger and terminate the process.\n\n### Patches\nWe have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/77dd114513d7796e1e2b8aece214a380af26fbf4",
            "commit_sha":"77dd114513d7796e1e2b8aece214a380af26fbf4",
            "patch":"SINGLE",
            "chain_ord":"['77dd114513d7796e1e2b8aece214a380af26fbf4']",
            "before_first_fix_commit":"{'faa76f39014ed3b5e2c158593b1335522e573c7f'}",
            "last_fix_commit":"77dd114513d7796e1e2b8aece214a380af26fbf4",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/04\/2021, 22:46:30",
            "message":"Fix a check fail\n\nPiperOrigin-RevId: 372011072\nChange-Id: I1062cfaed0aa16884e9a16312483794d188db76f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/77dd114513d7796e1e2b8aece214a380af26fbf4\/tensorflow%2Fcore%2Fkernels%2Fload_and_remap_matrix_op.cc', 'patch': '@@ -123,6 +123,11 @@ class LoadAndRemapMatrixOp : public OpKernel {\\n     \/\/ Processes the checkpoint source and the provided Tensor name.\\n     const Tensor* ckpt_path_t;\\n     OP_REQUIRES_OK(context, context->input(\"ckpt_path\", &ckpt_path_t));\\n+    OP_REQUIRES(\\n+        context, ckpt_path_t->NumElements() == 1,\\n+        errors::InvalidArgument(\"The `ckpt_path` tensor must have exactly one \"\\n+                                \"element, got tensor of shape \",\\n+                                ckpt_path_t->shape().DebugString()));\\n     const string& ckpt_path = ckpt_path_t->scalar<tstring>()();\\n     const Tensor* old_tensor_name_t;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"fix a check fail\n\npiperorigin-revid: 372011072\nchange-id: i1062cfaed0aa16884e9a16312483794d188db76f",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372011072', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/load_and_remap_matrix_op.cc'])",
            "num_files":1.0
        },
        {
            "index":1553,
            "vuln_id":"GHSA-cgjv-rghq-qhgp",
            "cwe_id":"{'CWE-22'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/AlgoRythm-Dylan\/httpserv\/commit\/bcfe9d4316c2b59aab3a64a38905376026888735'}",
            "dataset":"osv",
            "summary":"Path Traversal in algo-httpserv Versions of `algo-httpserv` prior to 1.1.2 are vulnerable to Path Traversal.  Due to insufficient input sanitization, attackers can access server files by using relative paths. \n\n\n## Recommendation\n\nUpgrade to version 1.1.2 or later.",
            "published_date":"2019-09-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/AlgoRythm-Dylan\/httpserv",
            "commit_href":"https:\/\/github.com\/AlgoRythm-Dylan\/httpserv\/commit\/bcfe9d4316c2b59aab3a64a38905376026888735",
            "commit_sha":"bcfe9d4316c2b59aab3a64a38905376026888735",
            "patch":"SINGLE",
            "chain_ord":"['bcfe9d4316c2b59aab3a64a38905376026888735']",
            "before_first_fix_commit":"{'7763b4f9b0b9e1873ae0cdfef582c786ee96f091'}",
            "last_fix_commit":"bcfe9d4316c2b59aab3a64a38905376026888735",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/17\/2019, 22:10:35",
            "message":"Fixed path vulnerability",
            "author":"AlgoRythm-Dylan",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 2, 'total': 9}",
            "files":"{'httpserv.js': {'additions': 7, 'deletions': 2, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/AlgoRythm-Dylan\/httpserv\/raw\/bcfe9d4316c2b59aab3a64a38905376026888735\/httpserv.js', 'patch': '@@ -1,6 +1,7 @@\\n \/\/ Stream-based KISS HTTP(S) server\\n \\n const url = require(\"url\");\\n+const pathlib = require(\"path\")\\n const fs = require(\"fs\");\\n \\n \/\/ A small database of MIME associations\\n@@ -32,7 +33,7 @@ var MIMES = {\\n     \".zip\": \"application\/zip\"\\n }\\n \\n-var servePath = \"serve\";\\n+var servePath = \"serve\/\";\\n function doStream(request, response, filePath, stats, MIME){\\n     let responseOptions = {};\\n     let streamOptions = {};\\n@@ -82,7 +83,11 @@ module.exports.serve = function(request, response){\\n         MIME = MIMES[fileType];\\n     }\\n     \/\/ Serve the actual file\\n-    var filePath = servePath + path;\\n+    var filePath = pathlib.join(servePath, path);\\n+    if(filePath.indexOf(servePath) !== 0){\\n+        response.end();\\n+        return;\\n+    }\\n     let handler = handlers[path];\\n     if(handler !== undefined){\\n         if(handler.requestTypes === null || handler.requestTypes.indexOf(request.method) != -1){'}}",
            "message_norm":"fixed path vulnerability",
            "language":"en",
            "entities":"[('fixed', 'ACTION', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['httpserv.js'])",
            "num_files":1.0
        },
        {
            "index":1257,
            "vuln_id":"GHSA-8v5f-hp78-jgxq",
            "cwe_id":"{'CWE-347'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/hokaccha\/node-jwt-simple\/commit\/ead36e1d687645da9c3be8befdaaef622ea33106'}",
            "dataset":"osv",
            "summary":"Signature Verification Bypass in jwt-simple Versions of `jwt-simple` prior to 0.5.3 are vulnerable to Signature Verification Bypass. If no algorithm is specified in the `decode()` function, the packages uses the algorithm in the JWT to decode tokens. This allows an attacker to create a HS256 (symmetric algorithm) JWT with the server's public key as secret, and the package will verify it as HS256 instead of RS256 (asymmetric algorithm).\n\n\n## Recommendation\n\nUpgrade to version 0.5.3 or later.",
            "published_date":"2019-06-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/hokaccha\/node-jwt-simple",
            "commit_href":"https:\/\/github.com\/hokaccha\/node-jwt-simple\/commit\/ead36e1d687645da9c3be8befdaaef622ea33106",
            "commit_sha":"ead36e1d687645da9c3be8befdaaef622ea33106",
            "patch":"SINGLE",
            "chain_ord":"['ead36e1d687645da9c3be8befdaaef622ea33106']",
            "before_first_fix_commit":"{'ecb19a046432f3e9d9490c10c74c1d6f123c18e0'}",
            "last_fix_commit":"ead36e1d687645da9c3be8befdaaef622ea33106",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2017, 01:56:51",
            "message":"Use RS256 if algorithm is undefined but key is RSA",
            "author":"Daniel",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'lib\/jwt.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/hokaccha\/node-jwt-simple\/raw\/ead36e1d687645da9c3be8befdaaef622ea33106\/lib%2Fjwt.js', 'patch': \"@@ -76,6 +76,10 @@ jwt.decode = function jwt_decode(token, key, noVerify, algorithm) {\\n   var payload = JSON.parse(base64urlDecode(payloadSeg));\\n \\n   if (!noVerify) {\\n+    if (!algorithm && \/BEGIN( RSA)? PUBLIC KEY\/.test(key.toString())) {\\n+      algorithm = 'RS256';\\n+    }\\n+\\n     var signingMethod = algorithmMap[algorithm || header.alg];\\n     var signingType = typeMap[algorithm || header.alg];\\n     if (!signingMethod || !signingType) {\"}}",
            "message_norm":"use rs256 if algorithm is undefined but key is rsa",
            "language":"en",
            "entities":"[('key', 'SECWORD', ''), ('rsa', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/jwt.js'])",
            "num_files":1.0
        },
        {
            "index":2502,
            "vuln_id":"GHSA-p493-635q-r6gr",
            "cwe_id":"{'CWE-74'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/pugjs\/pug\/commit\/991e78f7c4220b2f8da042877c6f0ef5a4683be0'}",
            "dataset":"osv",
            "summary":"Remote code execution via the `pretty` option. ### Impact\n\nIf a remote attacker was able to control the `pretty` option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.\n\n### Patches\n\nUpgrade to `pug@3.0.1` or `pug-code-gen@3.0.2` or `pug-code-gen@2.0.3`, which correctly sanitise the parameter.\n\n### Workarounds\n\nIf there is no way for un-trusted input to be passed to pug as the `pretty` option, e.g. if you compile templates in advance before applying user input to them, you do not need to upgrade.\n\n### References\n\n\nOriginal report: https:\/\/github.com\/pugjs\/pug\/issues\/3312\n\n### For more information\n\nIf you believe you have found other vulnerabilities, please **DO NOT** open an issue. Instead, you can follow the instructions in our [Security Policy](https:\/\/github.com\/pugjs\/pug\/blob\/master\/SECURITY.md)",
            "published_date":"2021-03-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/pugjs\/pug",
            "commit_href":"https:\/\/github.com\/pugjs\/pug\/commit\/991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "commit_sha":"991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "patch":"SINGLE",
            "chain_ord":"['991e78f7c4220b2f8da042877c6f0ef5a4683be0']",
            "before_first_fix_commit":"{'06baa525a23049756de9587461d389a12bc12537'}",
            "last_fix_commit":"991e78f7c4220b2f8da042877c6f0ef5a4683be0",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/28\/2021, 18:21:18",
            "message":"fix: sanitise and escape the `pretty` option (#3314)",
            "author":"Forbes Lindesay",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 2, 'total': 13}",
            "files":"{'packages\/pug-code-gen\/index.js': {'additions': 11, 'deletions': 2, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pugjs\/pug\/raw\/991e78f7c4220b2f8da042877c6f0ef5a4683be0\/packages%2Fpug-code-gen%2Findex.js', 'patch': '@@ -57,6 +57,11 @@ function Compiler(node, options) {\\n   if (this.pp && typeof this.pp !== \\'string\\') {\\n     this.pp = \\'  \\';\\n   }\\n+  if (this.pp && !\/^\\\\s+$\/.test(this.pp)) {\\n+    throw new Error(\\n+      \\'The pretty parameter should either be a boolean or whitespace only string\\'\\n+    );\\n+  }\\n   this.debug = false !== options.compileDebug;\\n   this.indents = 0;\\n   this.parentIndents = 0;\\n@@ -452,7 +457,9 @@ Compiler.prototype = {\\n   visitMixinBlock: function(block) {\\n     if (this.pp)\\n       this.buf.push(\\n-        \"pug_indent.push(\\'\" + Array(this.indents + 1).join(this.pp) + \"\\');\"\\n+        \\'pug_indent.push(\\' +\\n+          stringify(Array(this.indents + 1).join(this.pp)) +\\n+          \\');\\'\\n       );\\n     this.buf.push(\\'block && block();\\');\\n     if (this.pp) this.buf.push(\\'pug_indent.pop();\\');\\n@@ -504,7 +511,9 @@ Compiler.prototype = {\\n       this.mixins[key].used = true;\\n       if (pp)\\n         this.buf.push(\\n-          \"pug_indent.push(\\'\" + Array(this.indents + 1).join(pp) + \"\\');\"\\n+          \\'pug_indent.push(\\' +\\n+            stringify(Array(this.indents + 1).join(pp)) +\\n+            \\');\\'\\n         );\\n       if (block || attrs.length || attrsBlocks.length) {\\n         this.buf.push(name + \\'.call({\\');'}}",
            "message_norm":"fix: sanitise and escape the `pretty` option (#3314)",
            "language":"en",
            "entities":"[('sanitise', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('#3314', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['packages\/pug-code-gen\/index.js'])",
            "num_files":1.0
        },
        {
            "index":464,
            "vuln_id":"GHSA-4qwp-7c67-jmcc",
            "cwe_id":"{'CWE-94'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/facade\/ignition\/commit\/11ffca14abd22db779d90b12e193f8000f6d184b'}",
            "dataset":"osv",
            "summary":"Unauthenticated remote code execution in Ignition Ignition before 2.5.2, as used in Laravel and other products, allows unauthenticated remote attackers to execute arbitrary code because of insecure usage of file_get_contents() and file_put_contents(). This is exploitable on sites using debug mode with Laravel before 8.4.2.",
            "published_date":"2021-03-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/facade\/ignition",
            "commit_href":"https:\/\/github.com\/facade\/ignition\/commit\/11ffca14abd22db779d90b12e193f8000f6d184b",
            "commit_sha":"11ffca14abd22db779d90b12e193f8000f6d184b",
            "patch":"SINGLE",
            "chain_ord":"['11ffca14abd22db779d90b12e193f8000f6d184b']",
            "before_first_fix_commit":"{'9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa'}",
            "last_fix_commit":"11ffca14abd22db779d90b12e193f8000f6d184b",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/18\/2021, 11:46:18",
            "message":"Fix MakeViewVariableOptionalSolution to disallow stream wrappers and files that do not end in .blade.php\n\nThis is already fixed in 2.5.2, See https:\/\/github.com\/facade\/ignition\/pull\/334\n\nI could not update to 2.5.2 due to some dependent package required php 7.3, currently clients site is running in php 7.2\n\nOn branch 2.4.1-branch\nChanges to be committed:\n\tmodified:   src\/Solutions\/MakeViewVariableOptionalSolution.php",
            "author":"Anas Mirza",
            "comments":null,
            "stats":"{'additions': 18, 'deletions': 0, 'total': 18}",
            "files":"{'src\/Solutions\/MakeViewVariableOptionalSolution.php': {'additions': 18, 'deletions': 0, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/facade\/ignition\/raw\/11ffca14abd22db779d90b12e193f8000f6d184b\/src%2FSolutions%2FMakeViewVariableOptionalSolution.php', 'patch': '@@ -4,6 +4,7 @@\\n \\n use Facade\\\\IgnitionContracts\\\\RunnableSolution;\\n use Illuminate\\\\Support\\\\Facades\\\\Blade;\\n+use Illuminate\\\\Support\\\\Str;\\n \\n class MakeViewVariableOptionalSolution implements RunnableSolution\\n {\\n@@ -70,8 +71,25 @@ public function run(array $parameters = [])\\n         }\\n     }\\n \\n+    protected function isSafePath(string $path): bool\\n+    {\\n+        if (!Str::startsWith($path, [\\'\/\\', \\'.\/\\'])) {\\n+            return false;\\n+        }\\n+\\n+        if (!Str::endsWith($path, \\'.blade.php\\')) {\\n+            return false;\\n+        }\\n+\\n+        return true;\\n+    }\\n+\\n     public function makeOptional(array $parameters = [])\\n     {\\n+        if (!$this->isSafePath($parameters[\\'viewFile\\'])) {\\n+            return false;\\n+        }\\n+\\n         $originalContents = file_get_contents($parameters[\\'viewFile\\']);\\n         $newContents = str_replace(\\'$\\'.$parameters[\\'variableName\\'], \\'$\\'.$parameters[\\'variableName\\'].\" ?? \\'\\'\", $originalContents);'}}",
            "message_norm":"fix makeviewvariableoptionalsolution to disallow stream wrappers and files that do not end in .blade.php\n\nthis is already fixed in 2.5.2, see https:\/\/github.com\/facade\/ignition\/pull\/334\n\ni could not update to 2.5.2 due to some dependent package required php 7.3, currently clients site is running in php 7.2\n\non branch 2.4.1-branch\nchanges to be committed:\n\tmodified:   src\/solutions\/makeviewvariableoptionalsolution.php",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fixed', 'ACTION', ''), ('2.5.2', 'VERSION', ''), ('https:\/\/github.com\/facade\/ignition\/pull\/334', 'URL', ''), ('update', 'ACTION', ''), ('2.5.2', 'VERSION', ''), ('2.4.1', 'VERSION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Solutions\/MakeViewVariableOptionalSolution.php'])",
            "num_files":1.0
        },
        {
            "index":1802,
            "vuln_id":"GHSA-g25h-jr74-qp5j",
            "cwe_id":"{'CWE-20'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `QuantizeV2` ### Impact                                                                                                                                                                                                                                                                                \nDue to incomplete validation in `tf.raw_ops.QuantizeV2`, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeV2(\n  input=[1,2,3],\n  min_range=[1,2],\n  max_range=[],\n  T=tf.qint32,\n  mode='SCALED',\n  round_mode='HALF_AWAY_FROM_ZERO',\n  narrow_range=False,\n  axis=1,\n  ensure_minimum_range=3)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/quantize_op.cc#L59) has some validation but does not check that `min_range` and `max_range` both have the same non-zero number of elements. If `axis` is provided (i.e., not `-1`), then validation should check that it is a value in range for the rank of `input` tensor and then the lengths of `min_range` and `max_range` inputs match the `axis` dimension of the `input` tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [6da6620efad397c85493b8f8667b821403516708](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6da6620efad397c85493b8f8667b821403516708",
            "commit_sha":"6da6620efad397c85493b8f8667b821403516708",
            "patch":"SINGLE",
            "chain_ord":"['6da6620efad397c85493b8f8667b821403516708']",
            "before_first_fix_commit":"{'eb921122119a6b6e470ee98b89e65d721663179d'}",
            "last_fix_commit":"6da6620efad397c85493b8f8667b821403516708",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/28\/2021, 00:19:57",
            "message":"Secure tf.raw_ops.QuantizeV2\n\nValidate size and shape of min_range and max_range\nEnsure axis is within input dims limits\n\nPiperOrigin-RevId: 387232799\nChange-Id: I36975281f7b5758e9e31a8dcc73fe610ef456318",
            "author":"Laura Pak",
            "comments":null,
            "stats":"{'additions': 43, 'deletions': 0, 'total': 43}",
            "files":"{'tensorflow\/core\/kernels\/quantize_op.cc': {'additions': 43, 'deletions': 0, 'changes': 43, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6da6620efad397c85493b8f8667b821403516708\/tensorflow%2Fcore%2Fkernels%2Fquantize_op.cc', 'patch': '@@ -113,7 +113,50 @@ class QuantizeV2Op : public OpKernel {\\n \\n     int num_slices = 1;\\n     if (axis_ > -1) {\\n+      OP_REQUIRES(\\n+          ctx, input.dims() > axis_,\\n+          errors::InvalidArgument(\\n+              \"Axis is on a zero-based index, so its value must always be less \"\\n+              \"than number of input\\'s dims, but given axis value was \",\\n+              axis_, \" and input\\'s dims was \", input.dims()));\\n       num_slices = input.dim_size(axis_);\\n+      OP_REQUIRES(ctx, input_min_range.dims() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but min_range dims are \",\\n+                      input_min_range.dims()));\\n+      OP_REQUIRES(ctx, input_min_range.dim_size(0) == num_slices,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, min_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but min_range is a 1-D tensor of size \",\\n+                      input_min_range.dim_size(0),\\n+                      \" and input\\'s axis dimension is of size \", num_slices));\\n+      OP_REQUIRES(ctx, input_max_range.dims() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but max_range dims are \",\\n+                      input_max_range.dims()));\\n+      OP_REQUIRES(ctx, input_max_range.dim_size(0) == num_slices,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is specified, max_range must be a 1-D tensor \"\\n+                      \"whose size matches the axis dimension of the input and \"\\n+                      \"output tensors, but max_range is a 1-D tensor of size \",\\n+                      input_max_range.dim_size(0),\\n+                      \" and input\\'s axis dimension is of size \", num_slices));\\n+    } else {\\n+      OP_REQUIRES(ctx, input_min_range.NumElements() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is not specified, min_range must contain a \"\\n+                      \"single float element, but it contains \",\\n+                      input_min_range.NumElements(), \" elements\"));\\n+      OP_REQUIRES(ctx, input_max_range.NumElements() == 1,\\n+                  errors::InvalidArgument(\\n+                      \"If axis is not specified, max_range must contain a \"\\n+                      \"single float element, but it contains \",\\n+                      input_max_range.NumElements(), \" elements\"));\\n     }\\n \\n     const TensorShape& minmax_shape = ctx->input(1).shape();'}}",
            "message_norm":"secure tf.raw_ops.quantizev2\n\nvalidate size and shape of min_range and max_range\nensure axis is within input dims limits\n\npiperorigin-revid: 387232799\nchange-id: i36975281f7b5758e9e31a8dcc73fe610ef456318",
            "language":"en",
            "entities":"[('secure', 'SECWORD', ''), ('validate', 'ACTION', ''), ('ensure', 'ACTION', ''), ('387232799', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantize_op.cc'])",
            "num_files":1.0
        },
        {
            "index":943,
            "vuln_id":"GHSA-73qw-ww62-m54x",
            "cwe_id":"{'CWE-77'}",
            "score":10.0,
            "chain":"{'https:\/\/github.com\/quadule\/colorscore\/commit\/570b5e854cecddd44d2047c44126aed951b61718'}",
            "dataset":"osv",
            "summary":"Critical severity vulnerability that affects colorscore The initialize method in the Histogram class in lib\/colorscore\/histogram.rb in the colorscore gem before 0.0.5 for Ruby allows context-dependent attackers to execute arbitrary code via shell metacharacters in the (1) image_path, (2) colors, or (3) depth variable.",
            "published_date":"2017-10-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/quadule\/colorscore",
            "commit_href":"https:\/\/github.com\/quadule\/colorscore\/commit\/570b5e854cecddd44d2047c44126aed951b61718",
            "commit_sha":"570b5e854cecddd44d2047c44126aed951b61718",
            "patch":"SINGLE",
            "chain_ord":"['570b5e854cecddd44d2047c44126aed951b61718']",
            "before_first_fix_commit":"{'d589ce05be678c87174adae013ca5ac79f567828'}",
            "last_fix_commit":"570b5e854cecddd44d2047c44126aed951b61718",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/05\/2016, 10:53:22",
            "message":"Fix CVE-2015-7541\n\nAvoid passsing possible user input directly into the shell. Instead\nquote the `image_path` value before calling the `convert` command.\n\nSee here http:\/\/rubysec.com\/advisories\/CVE-2015-7541\/ for more\ninformation.",
            "author":"Florian Frank",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'lib\/colorscore\/histogram.rb': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/quadule\/colorscore\/raw\/570b5e854cecddd44d2047c44126aed951b61718\/lib%2Fcolorscore%2Fhistogram.rb', 'patch': '@@ -1,7 +1,9 @@\\n+require \"shellwords\"\\n+\\n module Colorscore\\n   class Histogram\\n     def initialize(image_path, colors=16, depth=8)\\n-      output = `convert #{image_path} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors} -depth #{depth} histogram:info:-`\\n+      output = `convert #{image_path.shellescape} -resize 400x400 -format %c -dither None -quantize YIQ -colors #{colors.to_i} -depth #{depth.to_i} histogram:info:-`\\n       @lines = output.lines.sort.reverse.map(&:strip).reject(&:empty?)\\n     end'}}",
            "message_norm":"fix cve-2015-7541\n\navoid passsing possible user input directly into the shell. instead\nquote the `image_path` value before calling the `convert` command.\n\nsee here http:\/\/rubysec.com\/advisories\/cve-2015-7541\/ for more\ninformation.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('cve-2015-7541', 'VULNID', 'CVE'), ('http:\/\/rubysec.com\/advisories\/cve-2015-7541\/', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/colorscore\/histogram.rb'])",
            "num_files":1.0
        },
        {
            "index":1497,
            "vuln_id":"GHSA-c697-r227-pq6h",
            "cwe_id":"{'CWE-434'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/35d1853baf64d6a1d90fd8803e52439da53a3911'}",
            "dataset":"osv",
            "summary":"Unrestricted Upload of File with Dangerous Type in pimcore Unrestricted Upload of File with Dangerous Type in Packagist pimcore\/pimcore",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/35d1853baf64d6a1d90fd8803e52439da53a3911",
            "commit_sha":"35d1853baf64d6a1d90fd8803e52439da53a3911",
            "patch":"SINGLE",
            "chain_ord":"['35d1853baf64d6a1d90fd8803e52439da53a3911']",
            "before_first_fix_commit":"{'d8377fc752dc3a42ca72cb49650481191f14ec63'}",
            "last_fix_commit":"35d1853baf64d6a1d90fd8803e52439da53a3911",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/17\/2022, 15:52:05",
            "message":"[Settings] Validate SVG uploads for branding",
            "author":"Bernhard Rusch",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'bundles\/AdminBundle\/Controller\/Admin\/SettingsController.php': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/35d1853baf64d6a1d90fd8803e52439da53a3911\/bundles%2FAdminBundle%2FController%2FAdmin%2FSettingsController.php', 'patch': \"@@ -109,6 +109,12 @@ public function uploadCustomLogoAction(Request $request)\\n             throw new \\\\Exception('Unsupported file format');\\n         }\\n \\n+        if($fileExt === 'svg') {\\n+            if(strpos(file_get_contents($_FILES['Filedata']['tmp_name']), '<script')) {\\n+                throw new \\\\Exception('Scripts in SVG files are not supported');\\n+            }\\n+        }\\n+\\n         $storage = Tool\\\\Storage::get('admin');\\n         $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($_FILES['Filedata']['tmp_name'], 'rb'));\"}}",
            "message_norm":"[settings] validate svg uploads for branding",
            "language":"sv",
            "entities":"[('validate', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/SettingsController.php'])",
            "num_files":1.0
        },
        {
            "index":835,
            "vuln_id":"GHSA-6gm7-j668-w6h9",
            "cwe_id":"{'CWE-89'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/pimcore\/pimcore\/commit\/a697830359df06246acca502ee2455614de68017'}",
            "dataset":"osv",
            "summary":"SQL Injection in Pimcore Pimcore prior to version 10.3.5 is vulnerable SQL injection in RecyclebinController.php. This vulnerability affects data confidentiality.",
            "published_date":"2022-04-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/pimcore",
            "commit_href":"https:\/\/github.com\/pimcore\/pimcore\/commit\/a697830359df06246acca502ee2455614de68017",
            "commit_sha":"a697830359df06246acca502ee2455614de68017",
            "patch":"SINGLE",
            "chain_ord":"['a697830359df06246acca502ee2455614de68017']",
            "before_first_fix_commit":"{'e649598b4d2892c0bef9dea24cdf8f7006dc1ef1'}",
            "last_fix_commit":"a697830359df06246acca502ee2455614de68017",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/04\/2022, 08:59:41",
            "message":"[Recyclebin] Quote condition filter",
            "author":"dpahuja",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/pimcore\/raw\/a697830359df06246acca502ee2455614de68017\/bundles%2FAdminBundle%2FController%2FAdmin%2FRecyclebinController.php', 'patch': '@@ -119,7 +119,7 @@ public function listAction(Request $request)\\n                         $condition = $field . \\' BETWEEN \\' . $db->quote($value) . \\' AND \\' . $db->quote($maxTime);\\n                         $conditionFilters[] = $condition;\\n                     } else {\\n-                        $conditionFilters[] = $field . $operator . \" \\'\" . $value . \"\\' \";\\n+                        $conditionFilters[] = $field . $operator . \\' \\' . $db->quote($value);\\n                     }\\n                 }\\n             }'}}",
            "message_norm":"[recyclebin] quote condition filter",
            "language":"it",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['bundles\/AdminBundle\/Controller\/Admin\/RecyclebinController.php'])",
            "num_files":1.0
        },
        {
            "index":2944,
            "vuln_id":"GHSA-rgvq-pcvf-hx75",
            "cwe_id":"{'CWE-131'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e'}",
            "dataset":"osv",
            "summary":"Heap OOB and null pointer dereference in `RaggedTensorToTensor` ### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = ['ROW_SPLITS']\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":3,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f94ef358bb3e91d517446454edff6535bcfe8e4a",
            "commit_sha":"f94ef358bb3e91d517446454edff6535bcfe8e4a",
            "patch":"MULTI",
            "chain_ord":"['f94ef358bb3e91d517446454edff6535bcfe8e4a', 'b761c9b652af2107cfbc33efd19be0ce41daa33e', 'c4d7afb6a5986b04505aca4466ae1951686c80f6']",
            "before_first_fix_commit":"{'50034ad2d55b10eb9d4593374546710b12f134e1'}",
            "last_fix_commit":"c4d7afb6a5986b04505aca4466ae1951686c80f6",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2021, 21:54:18",
            "message":"Fix `tf.raw_ops.RaggedTensorToTensor` failing CHECK in `tensor.cc`.\n\nPiperOrigin-RevId: 368300502\nChange-Id: I91255d23c4bfd3aa3c029aac773937c09daf3c64",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f94ef358bb3e91d517446454edff6535bcfe8e4a\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_tensor_op.cc', 'patch': '@@ -345,6 +345,11 @@ class RaggedTensorToTensorBaseOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     INDEX_TYPE first_dimension;\\n+    const Tensor first_partition_tensor =\\n+        context->input(kFirstPartitionInputIndex);\\n+    OP_REQUIRES(context, first_partition_tensor.NumElements() > 0,\\n+                errors::InvalidArgument(\"Invalid first partition input. Tensor \"\\n+                                        \"requires at least one element.\"));\\n     OP_REQUIRES_OK(context, GetFirstDimensionSize(context, &first_dimension));\\n     vector<INDEX_TYPE> output_size;\\n     OP_REQUIRES_OK(context,'}}",
            "message_norm":"fix `tf.raw_ops.raggedtensortotensor` failing check in `tensor.cc`.\n\npiperorigin-revid: 368300502\nchange-id: i91255d23c4bfd3aa3c029aac773937c09daf3c64",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('368300502', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_tensor_op.cc'])",
            "num_files":1.0
        },
        {
            "index":777,
            "vuln_id":"GHSA-67mm-m3wx-j7fr",
            "cwe_id":"{'CWE-77'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/domharrington\/node-gitlog\/pull\/65\/commits\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4'}",
            "dataset":"osv",
            "summary":"Command injection in gitlog The gitlog function in src\/index.ts in gitlog before 4.0.4 has a command injection vulnerability.",
            "published_date":"2021-04-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/domharrington\/node-gitlog",
            "commit_href":"https:\/\/github.com\/domharrington\/node-gitlog\/pull\/65\/commits\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "commit_sha":"bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "patch":"SINGLE",
            "chain_ord":"['bb22ffb2c907e0284f887ab625e12b88c31f4bf4']",
            "before_first_fix_commit":"{'256a9617fcaa04bba7652ef2a20bc0aa6cc5dbe1'}",
            "last_fix_commit":"bb22ffb2c907e0284f887ab625e12b88c31f4bf4",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/17\/2020, 11:48:28",
            "message":"Use child_process.execFile instead of child_process.exec",
            "author":"Ron",
            "comments":null,
            "stats":"{'additions': 24, 'deletions': 22, 'total': 46}",
            "files":"{'src\/index.ts': {'additions': 24, 'deletions': 22, 'changes': 46, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/domharrington\/node-gitlog\/raw\/bb22ffb2c907e0284f887ab625e12b88c31f4bf4\/src%2Findex.ts', 'patch': '@@ -1,4 +1,4 @@\\n-import { exec, execSync, ExecSyncOptions, ExecException } from \"child_process\";\\n+import { execFile, execFileSync, ExecSyncOptions, ExecException } from \"child_process\";\\n import { existsSync } from \"fs\";\\n import createDebugger from \"debug\";\\n \\n@@ -126,8 +126,8 @@ const defaultOptions = {\\n };\\n \\n \/** Add optional parameter to command *\/\\n-function addOptional<Field extends string = DefaultField>(\\n-  command: string,\\n+function addOptionalArgument<Field extends string = DefaultField>(\\n+  command: string[],\\n   options: GitlogOptions<Field>\\n ) {\\n   let commandWithOptions = command;\\n@@ -140,9 +140,9 @@ function addOptional<Field extends string = DefaultField>(\\n     \"committer\",\\n   ] as const;\\n \\n-  for (let i = cmdOptional.length; i--; ) {\\n+  for (let i = cmdOptional.length; i--;) {\\n     if (options[cmdOptional[i]]) {\\n-      commandWithOptions += ` --${cmdOptional[i]}=\"${options[cmdOptional[i]]}\"`;\\n+      commandWithOptions.push(`--${cmdOptional[i]}=${options[cmdOptional[i]]}`);\\n     }\\n   }\\n \\n@@ -234,30 +234,30 @@ const parseCommits = <T extends string>(\\n };\\n \\n \/** Run \"git log\" and return the result as JSON *\/\\n-function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n+function createCommandArguments<T extends CommitField | DefaultField = DefaultField>(\\n   options: GitlogOptions<T>\\n ) {\\n   \/\/ Start constructing command\\n-  let command = \"git log -l0 \";\\n+  let command: string[] = [\"log\", \"-l0\"];\\n \\n   if (options.findCopiesHarder) {\\n-    command += \"--find-copies-harder \";\\n+    command.push(\"--find-copies-harder\");\\n   }\\n \\n   if (options.all) {\\n-    command += \"--all \";\\n+    command.push(\"--all\");\\n   }\\n \\n   if (options.includeMergeCommitFiles) {\\n-    command += \"-m \";\\n+    command.push(\"-m\");\\n   }\\n \\n-  command += `-n ${options.number}`;\\n+  command.push(`-n ${options.number}`);\\n \\n-  command = addOptional(command, options);\\n+  command = addOptionalArgument(command, options);\\n \\n   \/\/ Start of custom format\\n-  command += \\' --pretty=\"@begin@\\';\\n+  let prettyArgument: string = \\'--pretty=@begin@\\';\\n \\n   \/\/ Iterating through the fields and adding them to the custom format\\n   if (options.fields) {\\n@@ -266,29 +266,31 @@ function createCommand<T extends CommitField | DefaultField = DefaultField>(\\n         throw new Error(`Unknown field: ${field}`);\\n       }\\n \\n-      command += delimiter + fieldMap[field];\\n+      prettyArgument += delimiter + fieldMap[field];\\n     });\\n   }\\n \\n   \/\/ Close custom format\\n-  command += \\'@end@\"\\';\\n+  prettyArgument += \\'@end@\\';\\n+  command.push(prettyArgument);\\n \\n   \/\/ Append branch (revision range) if specified\\n   if (options.branch) {\\n-    command += ` ${options.branch}`;\\n+    command.push(options.branch);\\n   }\\n \\n   \/\/ File and file status\\n   if (options.nameStatus && !options.fileLineRange) {\\n-    command += \" --name-status\";\\n+    command.push(\"--name-status\");\\n   }\\n \\n   if (options.fileLineRange) {\\n-    command += ` -L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`;\\n+    command.push(`-L ${options.fileLineRange.startLine},${options.fileLineRange.endLine}:${options.fileLineRange.file}`);\\n   }\\n \\n   if (options.file) {\\n-    command += ` -- ${options.file}`;\\n+    command.push(\"--\");\\n+    command.push(options.file);\\n   }\\n \\n   debug(\"command\", options.execOptions, command);\\n@@ -342,10 +344,10 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     ...userOptions,\\n   };\\n   const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\\n-  const command = createCommand(options);\\n+  const commandArguments = createCommandArguments(options);\\n \\n   if (!cb) {\\n-    const stdout = execSync(command, execOptions).toString();\\n+    const stdout = execFileSync(\"git\", commandArguments, execOptions).toString();\\n     const commits = stdout.split(\"@begin@\");\\n \\n     if (commits[0] === \"\") {\\n@@ -356,7 +358,7 @@ function gitlog<Field extends CommitField = DefaultField>(\\n     return parseCommits(commits, options.fields, options.nameStatus);\\n   }\\n \\n-  exec(command, execOptions, (err, stdout, stderr) => {\\n+  execFile(\"git\", commandArguments, execOptions, (err, stdout, stderr) => {\\n     debug(\"stdout\", stdout);\\n     const commits = stdout.split(\"@begin@\");'}}",
            "message_norm":"use child_process.execfile instead of child_process.exec",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.ts'])",
            "num_files":1.0
        },
        {
            "index":288,
            "vuln_id":"GHSA-3pg8-c473-w6rr",
            "cwe_id":"{'CWE-79'}",
            "score":6.9,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/3caa32334db0c277b84e993eaca2036f5d1dbef8'}",
            "dataset":"osv",
            "summary":"Stored Cross-site Scripting in showdoc ShowDoc is a tool for an IT team to share documents online. showdoc contains a stored cross-site scripting vulnerability in the File Library page when uploading a file in .ofd format in versions prior to 2.10.4. At this time, there is no known workaround. Users should update to version 2.10.4.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/3caa32334db0c277b84e993eaca2036f5d1dbef8",
            "commit_sha":"3caa32334db0c277b84e993eaca2036f5d1dbef8",
            "patch":"SINGLE",
            "chain_ord":"['3caa32334db0c277b84e993eaca2036f5d1dbef8']",
            "before_first_fix_commit":"{'92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f'}",
            "last_fix_commit":"3caa32334db0c277b84e993eaca2036f5d1dbef8",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 15:26:49",
            "message":"Upload file vulnerability",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 7, 'total': 12}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 5, 'deletions': 7, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/3caa32334db0c277b84e993eaca2036f5d1dbef8\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': \"@@ -54,10 +54,10 @@ public function deleteFile($file_id){\\n \\t}\\n \\n \\t\/\/\u4e0a\u4f20\u6587\u4ef6\uff0c\u8fd4\u56deurl\\n-\\tpublic function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0  ){\\n+\\tpublic function upload($_files , $file_key , $uid , $item_id = 0  , $page_id = 0 , $check_filename = true  ){\\n \\t\\t$uploadFile = $_files[$file_key] ;\\n \\n-\\t\\tif( !$this->isAllowedFilename($_files[$file_key]['name']) ){\\n+\\t\\tif( $check_filename && !$this->isAllowedFilename($_files[$file_key]['name']) ){\\n \\t\\t\\treturn false;\\n \\t\\t}\\n \\n@@ -324,14 +324,12 @@ public function isDangerFilename($filename){\\n \\tpublic function isAllowedFilename($filename){\\n \\t\\t$allow_array = array(\\n \\t\\t\\t'.jpg','.jpeg','.png','.bmp','.gif','.ico','.webp',\\n-\\t\\t\\t'.mp3','.wav','.mp4',\\n-\\t\\t\\t'.mov','.webmv','.flac','.mkv',\\n+\\t\\t\\t'.mp3','.wav','.mp4','.mov','.flac','.mkv',\\n \\t\\t\\t'.zip','.tar','.gz','.tgz','.ipa','.apk','.rar','.iso',\\n-\\t\\t\\t'.pdf','.ofd','.swf','.epub','.xps',\\n-\\t\\t\\t'.doc','.docx','.wps',\\n+\\t\\t\\t'.pdf','.epub','.xps','.doc','.docx','.wps',\\n \\t\\t\\t'.ppt','.pptx','.xls','.xlsx','.txt','.psd','.csv',\\n \\t\\t\\t'.cer','.ppt','.pub','.json','.css',\\n-\\t\\t\\t) ;\\n+\\t\\t) ;\\n \\n \\t\\t$ext = strtolower(substr($filename,strripos($filename,'.')) ); \/\/\u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\uff08\u8f6c\u4e3a\u5c0f\u5199\u540e\uff09\\n \\t\\tif(in_array( $ext , $allow_array ) ){\"}}",
            "message_norm":"upload file vulnerability",
            "language":"ro",
            "entities":"[('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":1216,
            "vuln_id":"GHSA-8h4j-vm3r-vcq3",
            "cwe_id":"{'CWE-416'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3'}",
            "dataset":"osv",
            "summary":"Use after free in rusqlite An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via an Auxdata API use-after-free.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/rusqlite\/rusqlite",
            "commit_href":"https:\/\/github.com\/rusqlite\/rusqlite\/commit\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "commit_sha":"2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "patch":"SINGLE",
            "chain_ord":"['2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3']",
            "before_first_fix_commit":"{'71b2f5187b0cbace3f8b6ff53432ff2ca0defcf0'}",
            "last_fix_commit":"2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2020, 02:41:01",
            "message":"Actually fix auxdata api...",
            "author":"Thom Chiovoloni",
            "comments":null,
            "stats":"{'additions': 54, 'deletions': 65, 'total': 119}",
            "files":"{'src\/functions.rs': {'additions': 54, 'deletions': 65, 'changes': 119, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rusqlite\/rusqlite\/raw\/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3\/src%2Ffunctions.rs', 'patch': '@@ -12,6 +12,8 @@\\n \/\/! use regex::Regex;\\n \/\/! use rusqlite::functions::FunctionFlags;\\n \/\/! use rusqlite::{Connection, Error, Result, NO_PARAMS};\\n+\/\/! use std::sync::Arc;\\n+\/\/! type BoxError = Box<dyn std::error::Error + Send + Sync + \\'static>;\\n \/\/!\\n \/\/! fn add_regexp_function(db: &Connection) -> Result<()> {\\n \/\/!     db.create_scalar_function(\\n@@ -20,34 +22,19 @@\\n \/\/!         FunctionFlags::SQLITE_UTF8 | FunctionFlags::SQLITE_DETERMINISTIC,\\n \/\/!         move |ctx| {\\n \/\/!             assert_eq!(ctx.len(), 2, \"called with unexpected number of arguments\");\\n-\/\/!\\n-\/\/!             let saved_re: Option<&Regex> = ctx.get_aux(0)?;\\n-\/\/!             let new_re = match saved_re {\\n-\/\/!                 None => {\\n-\/\/!                     let s = ctx.get::<String>(0)?;\\n-\/\/!                     match Regex::new(&s) {\\n-\/\/!                         Ok(r) => Some(r),\\n-\/\/!                         Err(err) => return Err(Error::UserFunctionError(Box::new(err))),\\n-\/\/!                     }\\n-\/\/!                 }\\n-\/\/!                 Some(_) => None,\\n-\/\/!             };\\n-\/\/!\\n+\/\/!             let regexp: Arc<Regex> = ctx\\n+\/\/!                 .get_or_create_aux(0, |vr| -> Result<_, BoxError> {\\n+\/\/!                     Ok(Regex::new(vr.as_str()?)?)\\n+\/\/!                 })?;\\n \/\/!             let is_match = {\\n-\/\/!                 let re = saved_re.unwrap_or_else(|| new_re.as_ref().unwrap());\\n-\/\/!\\n \/\/!                 let text = ctx\\n \/\/!                     .get_raw(1)\\n \/\/!                     .as_str()\\n \/\/!                     .map_err(|e| Error::UserFunctionError(e.into()))?;\\n \/\/!\\n-\/\/!                 re.is_match(text)\\n+\/\/!                 regexp.is_match(text)\\n \/\/!             };\\n \/\/!\\n-\/\/!             if let Some(re) = new_re {\\n-\/\/!                 ctx.set_aux(0, re);\\n-\/\/!             }\\n-\/\/!\\n \/\/!             Ok(is_match)\\n \/\/!         },\\n \/\/!     )\\n@@ -67,11 +54,12 @@\\n \/\/!     Ok(())\\n \/\/! }\\n \/\/! ```\\n-use std::any::TypeId;\\n+use std::any::Any;\\n use std::os::raw::{c_int, c_void};\\n use std::panic::{catch_unwind, RefUnwindSafe, UnwindSafe};\\n use std::ptr;\\n use std::slice;\\n+use std::sync::Arc;\\n \\n use crate::ffi;\\n use crate::ffi::sqlite3_context;\\n@@ -121,6 +109,7 @@ unsafe extern \"C\" fn free_boxed_value<T>(p: *mut c_void) {\\n pub struct Context<\\'a> {\\n     ctx: *mut sqlite3_context,\\n     args: &\\'a [*mut sqlite3_value],\\n+    \/\/ conn: PhantomData<&\\'conn mut Connection>,\\n }\\n \\n impl Context<\\'_> {\\n@@ -174,47 +163,60 @@ impl Context<\\'_> {\\n         unsafe { ValueRef::from_value(arg) }\\n     }\\n \\n+    pub fn get_or_create_aux<T, E, F>(&self, arg: c_int, func: F) -> Result<Arc<T>>\\n+    where\\n+        T: Send + Sync + \\'static,\\n+        E: Into<Box<dyn std::error::Error + Send + Sync + \\'static>>,\\n+        F: FnOnce(ValueRef<\\'_>) -> Result<T, E>,\\n+    {\\n+        if let Some(v) = self.get_aux(arg)? {\\n+            Ok(v)\\n+        } else {\\n+            let vr = self.get_raw(arg as usize);\\n+            self.set_aux(\\n+                arg,\\n+                func(vr).map_err(|e| Error::UserFunctionError(e.into()))?,\\n+            )\\n+        }\\n+    }\\n+\\n     \/\/\/ Sets the auxilliary data associated with a particular parameter. See\\n     \/\/\/ https:\/\/www.sqlite.org\/c3ref\/get_auxdata.html for a discussion of\\n     \/\/\/ this feature, or the unit tests of this module for an example.\\n-    pub fn set_aux<T: \\'static>(&self, arg: c_int, value: T) {\\n-        let boxed = Box::into_raw(Box::new(AuxData {\\n-            id: TypeId::of::<T>(),\\n-            value,\\n-        }));\\n+    pub fn set_aux<T: Send + Sync + \\'static>(&self, arg: c_int, value: T) -> Result<Arc<T>> {\\n+        let orig: Arc<T> = Arc::new(value);\\n+        let inner: AuxInner = orig.clone();\\n+        let outer = Box::new(inner);\\n+        let raw: *mut AuxInner = Box::into_raw(outer);\\n         unsafe {\\n             ffi::sqlite3_set_auxdata(\\n                 self.ctx,\\n                 arg,\\n-                boxed as *mut c_void,\\n-                Some(free_boxed_value::<AuxData<T>>),\\n+                raw as *mut _,\\n+                Some(free_boxed_value::<AuxInner>),\\n             )\\n         };\\n+        Ok(orig)\\n     }\\n \\n-    \/\/\/ Gets the auxilliary data that was associated with a given parameter\\n-    \/\/\/ via `set_aux`. Returns `Ok(None)` if no data has been associated,\\n-    \/\/\/ and .\\n-    pub fn get_aux<T: \\'static>(&self, arg: c_int) -> Result<Option<&T>> {\\n-        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *const AuxData<T> };\\n+    \/\/\/ Gets the auxilliary data that was associated with a given parameter via\\n+    \/\/\/ `set_aux`. Returns `Ok(None)` if no data has been associated, and\\n+    \/\/\/ Ok(Some(v)) if it has. Returns an error if the requested type does not\\n+    \/\/\/ match.\\n+    pub fn get_aux<T: Send + Sync + \\'static>(&self, arg: c_int) -> Result<Option<Arc<T>>> {\\n+        let p = unsafe { ffi::sqlite3_get_auxdata(self.ctx, arg) as *const AuxInner };\\n         if p.is_null() {\\n             Ok(None)\\n         } else {\\n-            let id = unsafe { (*p).id };\\n-            if TypeId::of::<T>() != id {\\n-                Err(Error::GetAuxWrongType)\\n-            } else {\\n-                Ok(Some(unsafe { &(*p).value }))\\n-            }\\n+            let v: AuxInner = AuxInner::clone(unsafe { &*p });\\n+            v.downcast::<T>()\\n+                .map(Some)\\n+                .map_err(|_| Error::GetAuxWrongType)\\n         }\\n     }\\n }\\n \\n-#[repr(C)]\\n-struct AuxData<T: \\'static> {\\n-    id: TypeId,\\n-    value: T,\\n-}\\n+type AuxInner = Arc<dyn Any + Send + Sync + \\'static>;\\n \\n \/\/\/ `feature = \"functions\"` Aggregate is the callback interface for user-defined\\n \/\/\/ aggregate function.\\n@@ -776,34 +778,21 @@ mod test {\\n     \/\/ expression multiple times within one query.\\n     fn regexp_with_auxilliary(ctx: &Context<\\'_>) -> Result<bool> {\\n         assert_eq!(ctx.len(), 2, \"called with unexpected number of arguments\");\\n-\\n-        let saved_re: Option<&Regex> = ctx.get_aux(0)?;\\n-        let new_re = match saved_re {\\n-            None => {\\n-                let s = ctx.get::<String>(0)?;\\n-                match Regex::new(&s) {\\n-                    Ok(r) => Some(r),\\n-                    Err(err) => return Err(Error::UserFunctionError(Box::new(err))),\\n-                }\\n-            }\\n-            Some(_) => None,\\n-        };\\n+        type BoxError = Box<dyn std::error::Error + Send + Sync + \\'static>;\\n+        let regexp: std::sync::Arc<Regex> = ctx\\n+            .get_or_create_aux(0, |vr| -> Result<_, BoxError> {\\n+                Ok(Regex::new(vr.as_str()?)?)\\n+            })?;\\n \\n         let is_match = {\\n-            let re = saved_re.unwrap_or_else(|| new_re.as_ref().unwrap());\\n-\\n             let text = ctx\\n                 .get_raw(1)\\n                 .as_str()\\n                 .map_err(|e| Error::UserFunctionError(e.into()))?;\\n \\n-            re.is_match(text)\\n+            regexp.is_match(text)\\n         };\\n \\n-        if let Some(re) = new_re {\\n-            ctx.set_aux(0, re);\\n-        }\\n-\\n         Ok(is_match)\\n     }\\n \\n@@ -878,10 +867,10 @@ mod test {\\n         let db = Connection::open_in_memory().unwrap();\\n         db.create_scalar_function(\"example\", 2, FunctionFlags::default(), |ctx| {\\n             if !ctx.get::<bool>(1)? {\\n-                ctx.set_aux::<i64>(0, 100);\\n+                ctx.set_aux::<i64>(0, 100)?;\\n             } else {\\n                 assert_eq!(ctx.get_aux::<String>(0), Err(Error::GetAuxWrongType));\\n-                assert_eq!(ctx.get_aux::<i64>(0), Ok(Some(&100)));\\n+                assert_eq!(*ctx.get_aux::<i64>(0).unwrap().unwrap(), 100);\\n             }\\n             Ok(true)\\n         })'}}",
            "message_norm":"actually fix auxdata api...",
            "language":"ca",
            "entities":"[('fix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/functions.rs'])",
            "num_files":1.0
        },
        {
            "index":229,
            "vuln_id":"GHSA-394c-5j6w-4xmx",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/faisalman\/ua-parser-js\/commit\/6d1f26df051ba681463ef109d36c9cf0f7e32b18'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service (ReDoS) in ua-parser-js The package ua-parser-js before 0.7.23 are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/faisalman\/ua-parser-js",
            "commit_href":"https:\/\/github.com\/faisalman\/ua-parser-js\/commit\/6d1f26df051ba681463ef109d36c9cf0f7e32b18",
            "commit_sha":"6d1f26df051ba681463ef109d36c9cf0f7e32b18",
            "patch":"SINGLE",
            "chain_ord":"['6d1f26df051ba681463ef109d36c9cf0f7e32b18']",
            "before_first_fix_commit":"{'86471ad7e24724757e6147cd449cc2af4fab6280'}",
            "last_fix_commit":"6d1f26df051ba681463ef109d36c9cf0f7e32b18",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/30\/2020, 17:50:19",
            "message":"Fix ReDoS vulnerabilities reported by Snyk",
            "author":"Faisal Salman",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 14, 'total': 28}",
            "files":"{'src\/ua-parser.js': {'additions': 14, 'deletions': 14, 'changes': 28, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/faisalman\/ua-parser-js\/raw\/6d1f26df051ba681463ef109d36c9cf0f7e32b18\/src%2Fua-parser.js', 'patch': \"@@ -222,7 +222,7 @@\\n \\n             \/\/ Presto based\\n             \/(opera\\\\smini)\\\\\/([\\\\w\\\\.-]+)\/i,                                       \/\/ Opera Mini\\n-            \/(opera\\\\s[mobiletab]+).+version\\\\\/([\\\\w\\\\.-]+)\/i,                      \/\/ Opera Mobi\/Tablet\\n+            \/(opera\\\\s[mobiletab]{3,6}).+version\\\\\/([\\\\w\\\\.-]+)\/i,                  \/\/ Opera Mobi\/Tablet\\n             \/(opera).+version\\\\\/([\\\\w\\\\.]+)\/i,                                     \/\/ Opera > 9.80\\n             \/(opera)[\\\\\/\\\\s]+([\\\\w\\\\.]+)\/i                                          \/\/ Opera < 9.80\\n             ], [NAME, VERSION], [\\n@@ -252,7 +252,7 @@\\n             \/(konqueror)\\\\\/([\\\\w\\\\.]+)\/i                                           \/\/ Konqueror\\n             ], [[NAME, 'Konqueror'], VERSION], [\\n \\n-            \/(trident).+rv[:\\\\s]([\\\\w\\\\.]+).+like\\\\sgecko\/i                         \/\/ IE11\\n+            \/(trident).+rv[:\\\\s]([\\\\w\\\\.]{1,9}).+like\\\\sgecko\/i                     \/\/ IE11\\n             ], [[NAME, 'IE'], VERSION], [\\n \\n             \/(edge|edgios|edga|edg)\\\\\/((\\\\d+)?[\\\\w\\\\.]+)\/i                          \/\/ Microsoft Edge\\n@@ -362,13 +362,13 @@\\n             \/fxios\\\\\/([\\\\w\\\\.-]+)\/i                                                \/\/ Firefox for iOS\\n             ], [VERSION, [NAME, 'Firefox']], [\\n \\n-            \/version\\\\\/([\\\\w\\\\.]+).+?mobile\\\\\/\\\\w+\\\\s(safari)\/i                       \/\/ Mobile Safari\\n+            \/version\\\\\/([\\\\w\\\\.]+)\\\\s.*mobile\\\\\/\\\\w+\\\\s(safari)\/i                      \/\/ Mobile Safari\\n             ], [VERSION, [NAME, 'Mobile Safari']], [\\n \\n-            \/version\\\\\/([\\\\w\\\\.]+).+?(mobile\\\\s?safari|safari)\/i                    \/\/ Safari & Safari Mobile\\n+            \/version\\\\\/([\\\\w\\\\.]+)\\\\s.*(mobile\\\\s?safari|safari)\/i                   \/\/ Safari & Safari Mobile\\n             ], [VERSION, NAME], [\\n \\n-            \/webkit.+?(gsa)\\\\\/([\\\\w\\\\.]+).+?(mobile\\\\s?safari|safari)(\\\\\/[\\\\w\\\\.]+)\/i  \/\/ Google Search Appliance on iOS\\n+            \/webkit.+?(gsa)\\\\\/([\\\\w\\\\.]+)\\\\s.*(mobile\\\\s?safari|safari)(\\\\\/[\\\\w\\\\.]+)\/i \/\/ Google Search Appliance on iOS\\n             ], [[NAME, 'GSA'], VERSION], [\\n \\n             \/webkit.+?(mobile\\\\s?safari|safari)(\\\\\/[\\\\w\\\\.]+)\/i                     \/\/ Safari < 3.0\\n@@ -387,7 +387,7 @@\\n \\n                                                                                 \/\/ Firefox\/SeaMonkey\/K-Meleon\/IceCat\/IceApe\/Firebird\/Phoenix\\n             \/(firefox)\\\\\/([\\\\w\\\\.]+)\\\\s[\\\\w\\\\s\\\\-]+\\\\\/[\\\\w\\\\.]+$\/i,                       \/\/ Other Firefox-based\\n-            \/(mozilla)\\\\\/([\\\\w\\\\.]+).+rv\\\\:.+gecko\\\\\/\\\\d+\/i,                          \/\/ Mozilla\\n+            \/(mozilla)\\\\\/([\\\\w\\\\.]+)\\\\s.+rv\\\\:.+gecko\\\\\/\\\\d+\/i,                        \/\/ Mozilla\\n \\n             \/\/ Other\\n             \/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\\\\\/\\\\s]?([\\\\w\\\\.]+)\/i,\\n@@ -487,7 +487,7 @@\\n             \/(sprint\\\\s(\\\\w+))\/i                                                  \/\/ Sprint Phones\\n             ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [\\n \\n-            \/(htc)[;_\\\\s-]+([\\\\w\\\\s]+(?=\\\\)|\\\\sbuild)|\\\\w+)\/i,                        \/\/ HTC\\n+            \/(htc)[;_\\\\s-]{1,2}([\\\\w\\\\s]+(?=\\\\)|\\\\sbuild)|\\\\w+)\/i,                    \/\/ HTC\\n             \/(zte)-(\\\\w*)\/i,                                                     \/\/ ZTE\\n             \/(alcatel|geeksphone|nexian|panasonic|(?=;\\\\s)sony)[_\\\\s-]?([\\\\w-]*)\/i\\n                                                                                 \/\/ Alcatel\/GeeksPhone\/Nexian\/Panasonic\/Sony\\n@@ -591,13 +591,13 @@\\n             ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [\\n \\n             \/android.+;\\\\s(\\\\w+)\\\\s+build\\\\\/hm\\\\1\/i,                                 \/\/ Xiaomi Hongmi 'numeric' models\\n-            \/android.+(hm[\\\\s\\\\-_]*note?[\\\\s_]*(?:\\\\d\\\\w)?)\\\\s+build\/i,               \/\/ Xiaomi Hongmi\\n-            \/android.+(redmi[\\\\s\\\\-_]*(?:note|k)?(?:[\\\\s_]?[\\\\w\\\\s]+))(?:\\\\s+build|\\\\))\/i,      \\n+            \/android.+(hm[\\\\s\\\\-_]?note?[\\\\s_]?(?:\\\\d\\\\w)?)\\\\sbuild\/i,                \/\/ Xiaomi Hongmi\\n+            \/android.+(redmi[\\\\s\\\\-_]?(?:note|k)?(?:[\\\\s_]?[\\\\w\\\\s]+))(?:\\\\sbuild|\\\\))\/i,      \\n                                                                                 \/\/ Xiaomi Redmi\\n-            \/android.+(mi[\\\\s\\\\-_]*(?:a\\\\d|one|one[\\\\s_]plus|note lte)?[\\\\s_]?(?:\\\\d?\\\\w?)[\\\\s_]*(?:plus)?)\\\\s+build\/i    \\n+            \/android.+(mi[\\\\s\\\\-_]?(?:a\\\\d|one|one[\\\\s_]plus|note lte)?[\\\\s_]?(?:\\\\d?\\\\w?)[\\\\s_]?(?:plus)?)\\\\sbuild\/i    \\n                                                                                 \/\/ Xiaomi Mi\\n             ], [[MODEL, \/_\/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [\\n-            \/android.+(mi[\\\\s\\\\-_]*(?:pad)(?:[\\\\s_]?[\\\\w\\\\s]+))(?:\\\\s+build|\\\\))\/i     \/\/ Mi Pad tablets\\n+            \/android.+(mi[\\\\s\\\\-_]?(?:pad)(?:[\\\\s_]?[\\\\w\\\\s]+))(?:\\\\sbuild|\\\\))\/i     \/\/ Mi Pad tablets\\n             ],[[MODEL, \/_\/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, TABLET]], [\\n             \/android.+;\\\\s(m[1-5]\\\\snote)\\\\sbuild\/i                                \/\/ Meizu\\n             ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\\n@@ -611,7 +611,7 @@\\n             \/android.+[;\\\\\/]\\\\s*(RCT[\\\\d\\\\w]+)\\\\s+build\/i                            \/\/ RCA Tablets\\n             ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [\\n \\n-            \/android.+[;\\\\\/\\\\s]+(Venue[\\\\d\\\\s]{2,7})\\\\s+build\/i                      \/\/ Dell Venue Tablets\\n+            \/android.+[;\\\\\/\\\\s](Venue[\\\\d\\\\s]{2,7})\\\\s+build\/i                       \/\/ Dell Venue Tablets\\n             ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [\\n \\n             \/android.+[;\\\\\/]\\\\s*(Q[T|M][\\\\d\\\\w]+)\\\\s+build\/i                         \/\/ Verizon Tablet\\n@@ -669,8 +669,8 @@\\n             \/android.+[;\\\\\/]\\\\s*TU_(1491)\\\\s+build\/i                               \/\/ Rotor Tablets\\n             ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [\\n \\n-            \/android.+(KS(.+))\\\\s+build\/i                                        \/\/ Amazon Kindle Tablets\\n-            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [\\n+            \/\/android.+(KS(.+))\\\\s+build\/i                                        \/\/ Amazon Kindle Tablets\\n+            \/\/], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [\\n \\n             \/android.+(Gigaset)[\\\\s\\\\-]+(Q\\\\w{1,9})\\\\s+build\/i                      \/\/ Gigaset Tablets\\n             ], [VENDOR, MODEL, [TYPE, TABLET]], [\"}}",
            "message_norm":"fix redos vulnerabilities reported by snyk",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('redos', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/ua-parser.js'])",
            "num_files":1.0
        },
        {
            "index":3283,
            "vuln_id":"GHSA-whv6-rj84-2vh2",
            "cwe_id":"{'CWE-79'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/juliushaertl\/nextcloud-vue-collections\/commit\/8ec1fca214f003538cec4137792ede928f25f583'}",
            "dataset":"osv",
            "summary":"Cross-Site Scripting in nextcloud-vue-collections Versions of `nextcloud-vue-collections` prior to 0.4.2 are vulnerable to Cross-Site Scripting (XSS).  The `v-tooltip` component has an insecure `defaultHTML` configuration that allows arbitrary JavaScript to be injected in the tooltip of a collection item. This allows attackers to execute arbitrary code in a victim's browser.\n\n\n## Recommendation\n\nUpgrade to version 0.4.2 or later.",
            "published_date":"2020-09-04",
            "chain_len":1,
            "project":"https:\/\/github.com\/juliushaertl\/nextcloud-vue-collections",
            "commit_href":"https:\/\/github.com\/juliushaertl\/nextcloud-vue-collections\/commit\/8ec1fca214f003538cec4137792ede928f25f583",
            "commit_sha":"8ec1fca214f003538cec4137792ede928f25f583",
            "patch":"SINGLE",
            "chain_ord":"['8ec1fca214f003538cec4137792ede928f25f583']",
            "before_first_fix_commit":"{'1d55cc3b462bc344de6cfbe45d590d0c2f99fc1a'}",
            "last_fix_commit":"8ec1fca214f003538cec4137792ede928f25f583",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/29\/2019, 13:41:42",
            "message":"Force defaultHtml setting of v-tooltip to be disabled\n\nSigned-off-by: Julius H\u00e4rtl <jus@bitgrid.net>",
            "author":"Julius H\u00e4rtl",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/components\/CollectionListItem.vue': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/nextcloud\/nextcloud-vue-collections\/raw\/8ec1fca214f003538cec4137792ede928f25f583\/src%2Fcomponents%2FCollectionListItem.vue', 'patch': \"@@ -60,6 +60,9 @@ import Action from 'nextcloud-vue\/dist\/Components\/Action'\\n import Avatar from 'nextcloud-vue\/dist\/Components\/Avatar'\\n import Tooltip from 'nextcloud-vue\/dist\/Directives\/Tooltip'\\n \\n+Tooltip.options.defaultHtml = false\\n+\\n+\\n export default {\\n \\tname: 'CollectionListItem',\\n \\tcomponents: {\"}}",
            "message_norm":"force defaulthtml setting of v-tooltip to be disabled\n\nsigned-off-by: julius h\u00e4rtl <jus@bitgrid.net>",
            "language":"en",
            "entities":"[('jus@bitgrid.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/components\/CollectionListItem.vue'])",
            "num_files":1.0
        },
        {
            "index":3455,
            "vuln_id":"GHSA-xm2v-8rrw-w9pm",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2be2cdf3a123e231b16f766aa0e27d56b4606535'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Conv2DBackpropInput` ### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,\n                               out_backprop=out_backprop, strides=[1, 1, 1, 1],\n                               use_cudnn_on_gpu=True, padding='SAME',\n                               explicit_paddings=[], data_format='NHWC',\n                               dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/b40060c9f697b044e3107917c797ba052f4506ab\/tensorflow\/core\/kernels\/conv_grad_input_ops.h#L625-L655) does a division by a quantity that is controlled by the caller:\n\n```cc \n  const size_t size_A = output_image_size * dims.out_depth; \n  const size_t size_B = filter_total_size * dims.out_depth;\n  const size_t size_C = output_image_size * filter_total_size;\n  const size_t work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction ? 1 :\n      (target_working_set_size + work_unit_size - 1) \/ work_unit_size;\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2be2cdf3a123e231b16f766aa0e27d56b4606535](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2be2cdf3a123e231b16f766aa0e27d56b4606535).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/2be2cdf3a123e231b16f766aa0e27d56b4606535",
            "commit_sha":"2be2cdf3a123e231b16f766aa0e27d56b4606535",
            "patch":"SINGLE",
            "chain_ord":"['2be2cdf3a123e231b16f766aa0e27d56b4606535']",
            "before_first_fix_commit":"{'b40060c9f697b044e3107917c797ba052f4506ab'}",
            "last_fix_commit":"2be2cdf3a123e231b16f766aa0e27d56b4606535",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/20\/2021, 01:13:04",
            "message":"Prevent yet another division by zero\n\nPiperOrigin-RevId: 369343977\nChange-Id: I1a60da4cf512e60fd91e069c16e026544632fe7f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/conv_grad_input_ops.h': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/2be2cdf3a123e231b16f766aa0e27d56b4606535\/tensorflow%2Fcore%2Fkernels%2Fconv_grad_input_ops.h', 'patch': '@@ -649,6 +649,11 @@ class Conv2DCustomBackpropInputOp : public OpKernel {\\n         dims.batch_size == 1 ||\\n         thread_work_unit_size >= min_thread_work_unit_size;\\n \\n+    OP_REQUIRES(\\n+        context, work_unit_size > 0,\\n+        errors::InvalidArgument(\"input, filter_sizes and out_backprop tensors \"\\n+                                \"must all have at least 1 element\"));\\n+\\n     const size_t shard_size =\\n         use_parallel_contraction\\n             ? 1'}}",
            "message_norm":"prevent yet another division by zero\n\npiperorigin-revid: 369343977\nchange-id: i1a60da4cf512e60fd91e069c16e026544632fe7f",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by zero', 'SECWORD', ''), ('369343977', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/conv_grad_input_ops.h'])",
            "num_files":1.0
        },
        {
            "index":1183,
            "vuln_id":"GHSA-8c76-mxv5-w4g8",
            "cwe_id":"{'CWE-79'}",
            "score":6.8,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/955471c27e671c49e4b012e3b120b004082ac3f7'}",
            "dataset":"osv",
            "summary":"Stored Cross-site Scripting in Microweber Microweber 1.2.11 and prior contains multiple stored cross-site scripting vulnerabilities in Shop's Other Settings, Shop's Autorespond E-mail Settings and Shops' Payments Methods.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/955471c27e671c49e4b012e3b120b004082ac3f7",
            "commit_sha":"955471c27e671c49e4b012e3b120b004082ac3f7",
            "patch":"SINGLE",
            "chain_ord":"['955471c27e671c49e4b012e3b120b004082ac3f7']",
            "before_first_fix_commit":"{'46e100a1b3e613f3e27b82942b00bdb0e69df4fa'}",
            "last_fix_commit":"955471c27e671c49e4b012e3b120b004082ac3f7",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 10:14:14",
            "message":"Update SaveOptionApiController.php",
            "author":"Bozhidar Slaveykov",
            "comments":null,
            "stats":"{'additions': 19, 'deletions': 7, 'total': 26}",
            "files":"{'src\/MicroweberPackages\/Option\/Http\/Controllers\/Api\/SaveOptionApiController.php': {'additions': 19, 'deletions': 7, 'changes': 26, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/955471c27e671c49e4b012e3b120b004082ac3f7\/src%2FMicroweberPackages%2FOption%2FHttp%2FControllers%2FApi%2FSaveOptionApiController.php', 'patch': \"@@ -6,18 +6,30 @@\\n \\n class SaveOptionApiController\\n {\\n-    public function saveOption(Request $request) {\\n+    public $whitelistedGroupKeys = [\\n+        'website' => [\\n+            'website_head',\\n+            'website_footer'\\n+        ]\\n+    ];\\n+\\n+    public function saveOption(Request $request)\\n+    {\\n \\n         $cleanFromXss = true;\\n         $option = $request->all();\\n \\n-        \/\/ Allow for this keys\\n+        \/\/ Allow for this keys and groups\\n         if (isset($option['option_key'])) {\\n-            if ($option['option_key'] == 'website_head') {\\n-                $cleanFromXss = false;\\n-            }\\n-            if ($option['option_key'] == 'website_footer') {\\n-                $cleanFromXss = false;\\n+            foreach ($this->whitelistedGroupKeys as $group => $keys) {\\n+                if ($option['option_group'] == $group) {\\n+                    foreach ($keys as $key) {\\n+                        if ($option['option_key'] == $key) {\\n+                            $cleanFromXss = false;\\n+                            break;\\n+                        }\\n+                    }\\n+                }\\n             }\\n         }\"}}",
            "message_norm":"update saveoptionapicontroller.php",
            "language":"it",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SUBMIT_CENTERED",
            "list_files":"dict_keys(['src\/MicroweberPackages\/Option\/Http\/Controllers\/Api\/SaveOptionApiController.php'])",
            "num_files":1.0
        },
        {
            "index":1021,
            "vuln_id":"GHSA-7fc2-rm35-2pp7",
            "cwe_id":"{'CWE-352'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/ipython\/ipython\/commit\/1415a9710407e7c14900531813c15ba6165f0816', 'https:\/\/github.com\/ipython\/ipython\/commit\/a05fe052a18810e92d9be8c1185952c13fe4e5b0'}",
            "dataset":"osv",
            "summary":"IPython vulnerable to cross site request forgery (CSRF) IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.",
            "published_date":"2022-05-17",
            "chain_len":2,
            "project":"https:\/\/github.com\/ipython\/ipython",
            "commit_href":"https:\/\/github.com\/ipython\/ipython\/commit\/1415a9710407e7c14900531813c15ba6165f0816",
            "commit_sha":"1415a9710407e7c14900531813c15ba6165f0816",
            "patch":"MULTI",
            "chain_ord":"['1415a9710407e7c14900531813c15ba6165f0816', 'a05fe052a18810e92d9be8c1185952c13fe4e5b0']",
            "before_first_fix_commit":"{'6884e8b36dc1e2d59e1d8ddb5e95788728d76e6f'}",
            "last_fix_commit":"a05fe052a18810e92d9be8c1185952c13fe4e5b0",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2015, 07:11:16",
            "message":"check origin of API requests\n\nprotects agains CSRF on POST endpoints via forms.",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 48, 'deletions': 1, 'total': 49}",
            "files":"{'IPython\/html\/base\/handlers.py': {'additions': 48, 'deletions': 1, 'changes': 49, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ipython\/ipython\/raw\/1415a9710407e7c14900531813c15ba6165f0816\/IPython%2Fhtml%2Fbase%2Fhandlers.py', 'patch': '@@ -5,7 +5,6 @@\\n \\n import functools\\n import json\\n-import logging\\n import os\\n import re\\n import sys\\n@@ -15,6 +14,10 @@\\n     from http.client import responses\\n except ImportError:\\n     from httplib import responses\\n+try:\\n+    from urllib.parse import urlparse # Py 3\\n+except ImportError:\\n+    from urlparse import urlparse # Py 2\\n \\n from jinja2 import TemplateNotFound\\n from tornado import web\\n@@ -320,6 +323,50 @@ def write_error(self, status_code, **kwargs):\\n class APIHandler(IPythonHandler):\\n     \"\"\"Base class for API handlers\"\"\"\\n     \\n+    def check_origin(self):\\n+        \"\"\"Check Origin for cross-site API requests.\\n+        \\n+        Copied from WebSocket with changes:\\n+        \\n+        - allow unspecified host\/origin (e.g. scripts)\\n+        \"\"\"\\n+        if self.allow_origin == \\'*\\':\\n+            return True\\n+\\n+        host = self.request.headers.get(\"Host\")\\n+        origin = self.request.headers.get(\"Origin\")\\n+\\n+        # If no header is provided, assume it comes from a script\/curl.\\n+        # We are only concerned with cross-site browser stuff here.\\n+        if origin is None or host is None:\\n+            return True\\n+        \\n+        origin = origin.lower()\\n+        origin_host = urlparse(origin).netloc\\n+        \\n+        # OK if origin matches host\\n+        if origin_host == host:\\n+            return True\\n+        \\n+        # Check CORS headers\\n+        if self.allow_origin:\\n+            allow = self.allow_origin == origin\\n+        elif self.allow_origin_pat:\\n+            allow = bool(self.allow_origin_pat.match(origin))\\n+        else:\\n+            # No CORS headers deny the request\\n+            allow = False\\n+        if not allow:\\n+            self.log.warn(\"Blocking Cross Origin API request.  Origin: %s, Host: %s\",\\n+                origin, host,\\n+            )\\n+        return allow\\n+\\n+    def prepare(self):\\n+        if not self.check_origin():\\n+            raise web.HTTPError(404)\\n+        return super(APIHandler, self).prepare()\\n+\\n     @property\\n     def content_security_policy(self):\\n         csp = \\'; \\'.join(['}}",
            "message_norm":"check origin of api requests\n\nprotects agains csrf on post endpoints via forms.",
            "language":"en",
            "entities":"[('protects', 'ACTION', ''), ('csrf', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['IPython\/html\/base\/handlers.py'])",
            "num_files":1.0
        },
        {
            "index":1006,
            "vuln_id":"GHSA-79mg-4w23-4fqc",
            "cwe_id":"{'CWE-89', 'CWE-287'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/fiveai\/Cachet\/commit\/27bca8280419966ba80c6fa283d985ddffa84bb6'}",
            "dataset":"osv",
            "summary":"Unauthenticated SQL Injection in Cachet ### Impact\nIn Cachet versions through 2.3.18, there is a SQL injection which is in the `SearchableTrait#scopeSearch()`. Attackers without authentication can utilize this vulnerability to exfiltrate sensitive data from the database such as administrator's password and session.\n\n### Patches\n\nThe original repository of [https:\/\/github.com\/CachetHQ\/Cachet](https:\/\/github.com\/CachetHQ\/Cachet) is not active, the stable version 2.3.18 and it's developing 2.4 branch is affected. \n\nUpdate to version 2.5 or later in the [https:\/\/github.com\/fiveai\/Cachet fork](https:\/\/github.com\/fiveai\/Cachet) to fix this vulnerability.",
            "published_date":"2021-08-30",
            "chain_len":1,
            "project":"https:\/\/github.com\/fiveai\/Cachet",
            "commit_href":"https:\/\/github.com\/fiveai\/Cachet\/commit\/27bca8280419966ba80c6fa283d985ddffa84bb6",
            "commit_sha":"27bca8280419966ba80c6fa283d985ddffa84bb6",
            "patch":"SINGLE",
            "chain_ord":"['27bca8280419966ba80c6fa283d985ddffa84bb6']",
            "before_first_fix_commit":"{'8c1a2c27d4a46777a78bceefa7f3fee297ebe7be'}",
            "last_fix_commit":"27bca8280419966ba80c6fa283d985ddffa84bb6",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/15\/2021, 14:17:35",
            "message":"Ensure only allowed searchable columns are used in DB Query",
            "author":"Seb Dangerfield",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 2, 'total': 5}",
            "files":"{'app\/Models\/Traits\/SearchableTrait.php': {'additions': 3, 'deletions': 2, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fiveai\/Cachet\/raw\/27bca8280419966ba80c6fa283d985ddffa84bb6\/app%2FModels%2FTraits%2FSearchableTrait.php', 'patch': '@@ -34,10 +34,11 @@ public function scopeSearch(Builder $query, array $search = [])\\n             return $query;\\n         }\\n \\n-        if (!array_intersect(array_keys($search), $this->searchable)) {\\n+        $allowed_search = array_intersect_key($search, array_flip($this->searchable));\\n+        if (! $allowed_search) {\\n             return $query;\\n         }\\n \\n-        return $query->where($search);\\n+        return $query->where($allowed_search);\\n     }\\n }'}}",
            "message_norm":"ensure only allowed searchable columns are used in db query",
            "language":"en",
            "entities":"[('ensure', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Models\/Traits\/SearchableTrait.php'])",
            "num_files":1.0
        },
        {
            "index":1662,
            "vuln_id":"GHSA-f522-ffg8-j8r6",
            "cwe_id":"{'CWE-20'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/eca4beb21e61877d76fdf6bea771f72f39544d9b', 'https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/b3051b277f7caa08cd2edc6f74f50aeda65d2976'}",
            "dataset":"osv",
            "summary":"Regular Expression Denial of Service in is-my-json-valid Version of `is-my-json-valid` before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.\n\n\n## Recommendation\n\nUpdate to version 1.4.1, 2.17.2 or later.",
            "published_date":"2017-10-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/mafintosh\/is-my-json-valid",
            "commit_href":"https:\/\/github.com\/mafintosh\/is-my-json-valid\/commit\/eca4beb21e61877d76fdf6bea771f72f39544d9b",
            "commit_sha":"eca4beb21e61877d76fdf6bea771f72f39544d9b",
            "patch":"MULTI",
            "chain_ord":"['eca4beb21e61877d76fdf6bea771f72f39544d9b', 'b3051b277f7caa08cd2edc6f74f50aeda65d2976']",
            "before_first_fix_commit":"{'5c6a43dedebf975508465b375af98e9afde2f49c', '767c6c0ee5e55c506ccd49141e7f31cb1910c47f'}",
            "last_fix_commit":"b3051b277f7caa08cd2edc6f74f50aeda65d2976",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/17\/2016, 21:55:32",
            "message":"fix utc-millisec regex to avoid a ddos attack",
            "author":"Mathias Buus",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'formats.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/is-my-json-valid\/raw\/eca4beb21e61877d76fdf6bea771f72f39544d9b\/formats.js', 'patch': \"@@ -11,4 +11,4 @@ exports['alpha'] = \/^[a-zA-Z]+$\/\\n exports['alphanumeric'] = \/^[a-zA-Z0-9]+$\/\\n exports['style'] = \/\\\\s*(.+?):\\\\s*([^;]+);?\/g\\n exports['phone'] = \/^\\\\+(?:[0-9] ?){6,14}[0-9]$\/\\n-exports['utc-millisec'] = \/^[0-9]+(\\\\.?[0-9]+)?$\/\\n+exports['utc-millisec'] = \/^[0-9]{1,15}\\\\.?[0-9]{0,15}$\/\"}}",
            "message_norm":"fix utc-millisec regex to avoid a ddos attack",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('ddos', 'SECWORD', ''), ('attack', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['formats.js'])",
            "num_files":1.0
        },
        {
            "index":776,
            "vuln_id":"GHSA-67j9-c52g-w2q9",
            "cwe_id":"{'CWE-863'}",
            "score":4.9,
            "chain":"{'https:\/\/github.com\/spiral-project\/ihatemoney\/commit\/8d77cf5d5646e1d2d8ded13f0660638f57e98471'}",
            "dataset":"osv",
            "summary":"Authorization Bypass in I hate money ### Impact\nAn authenticated member of one project can modify and delete members of another project, without knowledge of this other project's private code. This can be further exploited to access all bills of another project without knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new project. An attacker can create a new project and then use it to become authenticated and exploit this flaw. As such, the exposure is similar to an unauthenticated attack, because it is trivial to become authenticated.\n\n### Patches\n```diff\n ihatemoney\/models.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a\/ihatemoney\/models.py b\/ihatemoney\/models.py\nindex fe7b519..5691c75 100644\n--- a\/ihatemoney\/models.py\n+++ b\/ihatemoney\/models.py\n@@ -380,7 +380,7 @@ class Person(db.Model):\n         def get_by_name(self, name, project):\n             return (\n                 Person.query.filter(Person.name == name)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n@@ -389,7 +389,7 @@ class Person(db.Model):\n                 project = g.project\n             return (\n                 Person.query.filter(Person.id == id)\n-                .filter(Project.id == project.id)\n+                .filter(Person.project_id == project.id)\n                 .one()\n             )\n \n```\n\n### Workarounds\n\nTo limit the impact, it is possible to disable public project creation by setting `ALLOW_PUBLIC_PROJECT_CREATION = False` in the configuration (see [documentation](https:\/\/ihatemoney.readthedocs.io\/en\/latest\/configuration.html)). Existing users will still be able to exploit the flaw, but this will prevent an external attacker from creating a new project.\n\n### For more information\n\n`Person.query.get()` and `Person.query.get_by_name()` were mistakenly running a database join on the Project table without constraining the result.\n\nAs a result, `Person.query.get(42, \"projectfoo\")` would return the Person with id=42, even if it is not associated to the project \"projectfoo\".  The only condition is that \"projectfoo\" must exist.\n\nThis flaw can be exploited in several places:\n\n1) API: PUT requests to `\/api\/projects\/<project>\/members\/<personID>` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This allows an authenticated attacker to alter the state of a member (name, weight, activated) in any project.  In addition, the altered member will no longer be associated with its original project but will be associated to the attacker project instead, breaking many features of IHateMoney.  For instance, bills referencing the altered member will no longer be visible in the original project.\n\n   This causes an additional information disclosure and loss of integrity on bills: the attacker will now be able to see, edit and delete bills belonging to the altered member, because IHateMoney now believes that these bills are associated to the attacker project through the altered member.\n\n   For instance, assume that `Person(id=42)` is a member of project \"targetProject\", and that the attacker has access to another project \"attackerProject\" with the private code \"attackerPassword\".  The attacker can modify `Person(id=42)` with this command:\n\n     $ curl -X PUT -d \"name=Pwn3d&activated=1\" --basic -u attackerProject:attackerPassword http:\/\/$SERVER\/api\/projects\/attackerProject\/members\/42\n\n   The attacker can now see, edit and delete bills paid by `Person(id=42)` by simply browsing to http:\/\/$SERVER\/attackerProject\/\n\n2) Editing a member through the web interface at `\/<project>\/members\/<personID>\/edit` will succeed even though `<personID>` is not a member of `<project>`.\n\n   This is very similar to the PUT exploit.  Reusing the same example, the attacker needs to login to its \"attackerProject\" project with the private code \"attackerPassword\".  It can then alter the state of `Person(id=42)` by accessing the edit form at the following URL:\n\n     http:\/\/$SERVER\/attackerProject\/members\/42\/edit\n\n   Again, as a result of the alteration, the altered member will become associated to the project \"attackerProject\", resulting in the same information disclosure and loss of integrity on bills.\n\n3) API: DELETE requests to `\/api\/projects\/<project>\/members\/<personID>` will similarly allow to delete the member `<personID>` even if it belongs to a different project than `<project>`.\n\n     $ curl -X DELETE --basic -u attackerProject:attackerPassword http:\/\/$SERVER\/api\/projects\/attackerProject\/members\/42\n\n   The impact is less serious than with PUT, because DELETE only deactivates a member (it does not really delete it).\n\nAll these exploits require authentication: an attacker needs to know a valid project name and its associated \"private code\".  Once this requirement is fullfilled, the attacker can exploit this flaw to alter the state of members in any other project, without needing to know the target project name or its private code.\n\n`Person.query.get_by_name()` suffers from the same issue as `Person.query.get()`.  It has an additional issue: if multiple Person objects with the same name exist (this is possible if they are associated to different projects), `get_by_name()` will crash with `MultipleResultsFound` because of the call to `one()`.\n\nHowever, since `Person.query.get_by_name()` is currently not used anywhere in IHateMoney, the bug affecting this function has no impact and is not exploitable.",
            "published_date":"2020-07-27",
            "chain_len":1,
            "project":"https:\/\/github.com\/spiral-project\/ihatemoney",
            "commit_href":"https:\/\/github.com\/spiral-project\/ihatemoney\/commit\/8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "commit_sha":"8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "patch":"SINGLE",
            "chain_ord":"['8d77cf5d5646e1d2d8ded13f0660638f57e98471']",
            "before_first_fix_commit":"{'040d76af83411fb58ab400dc4eac909191a3e5fa'}",
            "last_fix_commit":"8d77cf5d5646e1d2d8ded13f0660638f57e98471",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/17\/2020, 15:43:33",
            "message":"Fix unauthorized access and modification of project data (CVE-2020-15120)\n\nAn authenticated member of one project can modify and delete members of\nanother project, without knowledge of this other project's private\ncode. This can be further exploited to access all bills of another project\nwithout knowledge of this other project's private code.\n\nWith the default configuration, anybody is allowed to create a new\nproject. An attacker can create a new project and then use it to become\nauthenticated and exploit this flaw. As such, the exposure is similar to\nan unauthenticated attack, because it is trivial to become authenticated.\n\nThis issue was caused by a wrong database queries in PersonQuery.\n\nFor more details, see https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/GHSA-67j9-c52g-w2q9",
            "author":"Baptiste Jonglez",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'ihatemoney\/models.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/spiral-project\/ihatemoney\/raw\/8d77cf5d5646e1d2d8ded13f0660638f57e98471\/ihatemoney%2Fmodels.py', 'patch': '@@ -380,7 +380,7 @@ class PersonQuery(BaseQuery):\\n         def get_by_name(self, name, project):\\n             return (\\n                 Person.query.filter(Person.name == name)\\n-                .filter(Project.id == project.id)\\n+                .filter(Person.project_id == project.id)\\n                 .one()\\n             )\\n \\n@@ -389,7 +389,7 @@ def get(self, id, project=None):\\n                 project = g.project\\n             return (\\n                 Person.query.filter(Person.id == id)\\n-                .filter(Project.id == project.id)\\n+                .filter(Person.project_id == project.id)\\n                 .one()\\n             )'}}",
            "message_norm":"fix unauthorized access and modification of project data (cve-2020-15120)\n\nan authenticated member of one project can modify and delete members of\nanother project, without knowledge of this other project's private\ncode. this can be further exploited to access all bills of another project\nwithout knowledge of this other project's private code.\n\nwith the default configuration, anybody is allowed to create a new\nproject. an attacker can create a new project and then use it to become\nauthenticated and exploit this flaw. as such, the exposure is similar to\nan unauthenticated attack, because it is trivial to become authenticated.\n\nthis issue was caused by a wrong database queries in personquery.\n\nfor more details, see https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/ghsa-67j9-c52g-w2q9",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('cve-2020-15120', 'VULNID', 'CVE'), ('exploited', 'SECWORD', ''), ('attacker', 'FLAW', ''), ('exploit', 'SECWORD', ''), ('flaw', 'FLAW', ''), ('unauthenticated', 'SECWORD', ''), ('attack', 'FLAW', ''), ('issue', 'FLAW', ''), ('https:\/\/github.com\/spiral-project\/ihatemoney\/security\/advisories\/ghsa-67j9-c52g-w2q9', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['ihatemoney\/models.py'])",
            "num_files":1.0
        },
        {
            "index":347,
            "vuln_id":"GHSA-43jf-985q-588j",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
            "dataset":"osv",
            "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "commit_sha":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "patch":"MULTI",
            "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
            "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
            "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "chain_ord_pos":2.0,
            "commit_datetime":"11\/12\/2021, 16:19:38",
            "message":"Eliminate debug `CHECK`-fail from `function.cc`\n\nPiperOrigin-RevId: 409416119\nChange-Id: I8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -191,7 +191,11 @@ class FunctionInstantiationHelper {\\n     for (size_t i = 0; i < dtypes.size(); ++i) {\\n       TF_RETURN_IF_ERROR(AddItem(strings::StrCat(arg_def.name(), \":\", i),\\n                                  {true, arg_index, 0, false, {dtypes[i]}}));\\n-      DCHECK_EQ(arg_index, result_.nodes.size());\\n+      if (arg_index != result_.nodes.size()) {\\n+        return errors::Internal(\\n+            \"Expected arg_index to be equal to the number of nodes in result.\",\\n+            \" Got \", arg_index, \" and \", result_.nodes.size());\\n+      }\\n       string name = arg_def.name();\\n       if (dtypes.size() > 1) {\\n         strings::StrAppend(&name, \"_\", i);'}}",
            "message_norm":"eliminate debug `check`-fail from `function.cc`\n\npiperorigin-revid: 409416119\nchange-id: i8376ee464d434e9b970ff0ad49edfdaa2a273cfe",
            "language":"en",
            "entities":"[('409416119', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
            "num_files":1.0
        },
        {
            "index":1573,
            "vuln_id":"GHSA-cmgw-8vpc-rc59",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8721ba96e5760c229217b594f6d2ba332beedf22'}",
            "dataset":"osv",
            "summary":"Segfault on strings tensors with mistmatched dimensions, due to Go code ### Impact\nUnder certain conditions, Go code can trigger a segfault in string deallocation.\n\n\nFor string tensors, `C.TF_TString_Dealloc` is called during garbage collection within a finalizer function.  However, tensor structure isn't checked until encoding to avoid a performance penalty.  The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions).\n\nTo fix this, the call to set the finalizer function is deferred until `NewTensor` returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written.\n\n### Patches\nWe have patched the issue in GitHub commit [8721ba96e5760c229217b594f6d2ba332beedf22](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8721ba96e5760c229217b594f6d2ba332beedf22) (merging [#50508](https:\/\/github.com\/tensorflow\/tensorflow\/pull\/50508)).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, which is the other affected version.                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [fixing PR](https:\/\/github.com\/tensorflow\/tensorflow\/pull\/50508).",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8721ba96e5760c229217b594f6d2ba332beedf22",
            "commit_sha":"8721ba96e5760c229217b594f6d2ba332beedf22",
            "patch":"SINGLE",
            "chain_ord":"['8721ba96e5760c229217b594f6d2ba332beedf22']",
            "before_first_fix_commit":"{'5a14b2e21e2026b0838f892fed43c4c0e4b3c299', '49499c17794b39a2a7d5be2b477ed7d5704d0629'}",
            "last_fix_commit":"8721ba96e5760c229217b594f6d2ba332beedf22",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/13\/2021, 22:13:47",
            "message":"Merge pull request #50508 from wamuir:fix-tstring-dealloc\n\nPiperOrigin-RevId: 384557722\nChange-Id: I72858edf72952fd4e7e0a1d9776c9408a7081d42",
            "author":"TensorFlower Gardener",
            "comments":null,
            "stats":"{'additions': 17, 'deletions': 13, 'total': 30}",
            "files":"{'tensorflow\/go\/tensor.go': {'additions': 17, 'deletions': 13, 'changes': 30, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8721ba96e5760c229217b594f6d2ba332beedf22\/tensorflow%2Fgo%2Ftensor.go', 'patch': '@@ -98,9 +98,9 @@ func NewTensor(value interface{}) (*Tensor, error) {\\n \\n \\traw := tensorData(t.c)\\n \\n-\\truntime.SetFinalizer(t, func(t *Tensor) {\\n+\\tdefer runtime.SetFinalizer(t, func(t *Tensor) {\\n \\t\\tif dataType == String {\\n-\\t\\t\\tt.clearTStrings(raw, nflattened)\\n+\\t\\t\\tt.clearTStrings(raw, int64(nbytes\/C.sizeof_TF_TString))\\n \\t\\t}\\n \\n \\t\\tt.finalize()\\n@@ -111,15 +111,18 @@ func NewTensor(value interface{}) (*Tensor, error) {\\n \\tif isAllArray(val.Type()) {\\n \\t\\t\/\/ We have arrays all the way down, or just primitive types. We can\\n \\t\\t\/\/ just copy the memory in as it is all contiguous.\\n-\\t\\tif err := copyPtr(buf, unpackEFace(value).data, int(val.Type().Size())); err != nil {\\n+\\t\\tif _, err := copyPtr(buf, unpackEFace(value).data, int(val.Type().Size())); err != nil {\\n \\t\\t\\treturn nil, err\\n \\t\\t}\\n \\t} else {\\n \\t\\t\/\/ When there are slices involved the memory for each leaf slice may\\n \\t\\t\/\/ not be contiguous with the others or in the order we might\\n \\t\\t\/\/ expect, so we need to work our way down to each slice of\\n \\t\\t\/\/ primitives and copy them individually\\n-\\t\\tif err := encodeTensorWithSlices(buf, val, shape); err != nil {\\n+\\t\\tif n, err := encodeTensorWithSlices(buf, val, shape); err != nil {\\n+\\t\\t\\t\/\/ Set nbytes to count of bytes written for deferred call to\\n+\\t\\t\\t\/\/ runtime.SetFinalizer\\n+\\t\\t\\tnbytes = uintptr(n)\\n \\t\\t\\treturn nil, err\\n \\t\\t}\\n \\t}\\n@@ -486,13 +489,13 @@ func sizeVarUint(v uint64) int {\\n \\n \/\/ encodeTensorWithSlices writes v to the specified buffer using the format specified in\\n \/\/ c_api.h. Use stringEncoder for String tensors.\\n-func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) error {\\n+func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) (int, error) {\\n \\t\/\/ If current dimension is a slice, verify that it has the expected size\\n \\t\/\/ Go\\'s type system makes that guarantee for arrays.\\n \\tif v.Kind() == reflect.Slice {\\n \\t\\texpected := int(shape[0])\\n \\t\\tif v.Len() != expected {\\n-\\t\\t\\treturn fmt.Errorf(\"mismatched slice lengths: %d and %d\", v.Len(), expected)\\n+\\t\\t\\treturn 0, fmt.Errorf(\"mismatched slice lengths: %d and %d\", v.Len(), expected)\\n \\t\\t}\\n \\t} else if v.Kind() == reflect.String {\\n \\t\\ts := v.Interface().(string)\\n@@ -501,7 +504,7 @@ func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) err\\n \\t\\tptr := unsafe.Pointer(&tstr)\\n \\t\\treturn copyPtr(w, ptr, C.sizeof_TF_TString)\\n \\t} else if v.Kind() != reflect.Array {\\n-\\t\\treturn fmt.Errorf(\"unsupported type %v\", v.Type())\\n+\\t\\treturn 0, fmt.Errorf(\"unsupported type %v\", v.Type())\\n \\t}\\n \\n \\t\/\/ Once we have just a single dimension we can just copy the data\\n@@ -514,15 +517,17 @@ func encodeTensorWithSlices(w *bytes.Buffer, v reflect.Value, shape []int64) err\\n \\t\\treturn copyPtr(w, ptr, v.Len()*int(elt.Type().Size()))\\n \\t}\\n \\n+\\tn := 0\\n \\tsubShape := shape[1:]\\n \\tfor i := 0; i < v.Len(); i++ {\\n-\\t\\terr := encodeTensorWithSlices(w, v.Index(i), subShape)\\n+\\t\\tj, err := encodeTensorWithSlices(w, v.Index(i), subShape)\\n \\t\\tif err != nil {\\n-\\t\\t\\treturn err\\n+\\t\\t\\treturn n + j, err\\n \\t\\t}\\n+\\t\\tn += j\\n \\t}\\n \\n-\\treturn nil\\n+\\treturn n, nil\\n }\\n \\n \/\/ It isn\\'t safe to use reflect.SliceHeader as it uses a uintptr for Data and\\n@@ -536,15 +541,14 @@ type sliceHeader struct {\\n \/\/ copyPtr copies the backing data for a slice or array directly into w. Note\\n \/\/ we don\\'t need to worry about byte ordering because we want the natural byte\\n \/\/ order for the machine we\\'re running on.\\n-func copyPtr(w *bytes.Buffer, ptr unsafe.Pointer, l int) error {\\n+func copyPtr(w *bytes.Buffer, ptr unsafe.Pointer, l int) (int, error) {\\n \\t\/\/ Convert our slice header into a []byte so we can call w.Write\\n \\tb := *(*[]byte)(unsafe.Pointer(&sliceHeader{\\n \\t\\tData: ptr,\\n \\t\\tLen:  l,\\n \\t\\tCap:  l,\\n \\t}))\\n-\\t_, err := w.Write(b)\\n-\\treturn err\\n+\\treturn w.Write(b)\\n }\\n \\n func bug(format string, args ...interface{}) error {'}}",
            "message_norm":"merge pull request #50508 from wamuir:fix-tstring-dealloc\n\npiperorigin-revid: 384557722\nchange-id: i72858edf72952fd4e7e0a1d9776c9408a7081d42",
            "language":"en",
            "entities":"[('#50508', 'ISSUE', ''), ('384557722', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/go\/tensor.go'])",
            "num_files":1.0
        },
        {
            "index":3157,
            "vuln_id":"GHSA-vpwq-6cp4-ffqc",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/star7th\/showdoc\/commit\/ba45d19e1d77a7eea866dab30eff5da552694891'}",
            "dataset":"osv",
            "summary":"Stored Cross-site Scripting in ShowDoc ShowDoc prior to version 2.10.4 is vulnerable to stored cross-site scripting viva `axd` and `cshtml` file upload.",
            "published_date":"2022-03-16",
            "chain_len":1,
            "project":"https:\/\/github.com\/star7th\/showdoc",
            "commit_href":"https:\/\/github.com\/star7th\/showdoc\/commit\/ba45d19e1d77a7eea866dab30eff5da552694891",
            "commit_sha":"ba45d19e1d77a7eea866dab30eff5da552694891",
            "patch":"SINGLE",
            "chain_ord":"['ba45d19e1d77a7eea866dab30eff5da552694891']",
            "before_first_fix_commit":"{'4e6b321c0d63ee7c4480409c7a68ae116096c4bc'}",
            "last_fix_commit":"ba45d19e1d77a7eea866dab30eff5da552694891",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/14\/2022, 02:52:48",
            "message":"bug",
            "author":"star7th",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'server\/Application\/Api\/Model\/AttachmentModel.class.php': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/star7th\/showdoc\/raw\/ba45d19e1d77a7eea866dab30eff5da552694891\/server%2FApplication%2FApi%2FModel%2FAttachmentModel.class.php', 'patch': '@@ -309,6 +309,8 @@ public function isDangerFilename($filename){\\n \\t\\t\\t|| $isDangerStr($filename , \".aspx\")\\n \\t\\t\\t|| $isDangerStr($filename , \".xsd\")\\n \\t\\t\\t|| $isDangerStr($filename , \".asa\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".cshtml\")\\n+\\t\\t\\t|| $isDangerStr($filename , \".axd\")\\n \\t\\t) {\\n \\t\\t\\treturn true;\\n \\t\\t}'}}",
            "message_norm":"bug",
            "language":"id",
            "entities":"[('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/Application\/Api\/Model\/AttachmentModel.class.php'])",
            "num_files":1.0
        },
        {
            "index":1133,
            "vuln_id":"GHSA-84mw-34w6-2q43",
            "cwe_id":"{'CWE-476'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b055b9c474cd376259dde8779908f9eeaf097d93'}",
            "dataset":"osv",
            "summary":"Null pointer dereference via invalid Ragged Tensors ### Impact\nCalling `tf.raw_ops.RaggedTensorToVariant` with arguments specifying an invalid ragged tensor results in a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 23, 1])\n```\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding='VALID', data_format='NDHWC', dilations=[1, 1, 1, 1, 1])\n```\n\nThe implementation of [`RaggedTensorToVariant` operations](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/904b3926ed1c6c70380d5313d282d248a776baa1\/tensorflow\/core\/kernels\/ragged_tensor_to_variant_op.cc#L39-L40) does not validate that the ragged tensor argument is non-empty:\n\n```cc\n  int ragged_rank = batched_ragged.ragged_rank();\n  auto batched_splits_top_vec = batched_ragged.splits(0).vec<SPLIT_TYPE>();\n```\n\nSince `batched_ragged` contains no elements, `batched_ragged.splits` is a null vector, thus `batched_ragged.splits(0)` will result in  dereferencing `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [b055b9c474cd376259dde8779908f9eeaf097d93](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b055b9c474cd376259dde8779908f9eeaf097d93).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/b055b9c474cd376259dde8779908f9eeaf097d93",
            "commit_sha":"b055b9c474cd376259dde8779908f9eeaf097d93",
            "patch":"SINGLE",
            "chain_ord":"['b055b9c474cd376259dde8779908f9eeaf097d93']",
            "before_first_fix_commit":"{'904b3926ed1c6c70380d5313d282d248a776baa1'}",
            "last_fix_commit":"b055b9c474cd376259dde8779908f9eeaf097d93",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/13\/2021, 21:49:50",
            "message":"Fix `tf.raw_ops.RaggedTensorToVariant` invalid resize.\n\nPiperOrigin-RevId: 368299574\nChange-Id: I751c186325aa0bab397928845e790e60c2d90918",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/ragged_tensor_to_variant_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/b055b9c474cd376259dde8779908f9eeaf097d93\/tensorflow%2Fcore%2Fkernels%2Fragged_tensor_to_variant_op.cc', 'patch': '@@ -159,6 +159,11 @@ class RaggedTensorToVariantOp : public OpKernel {\\n \\n     \/\/ Unbatch the Ragged Tensor and encode the components.\\n     std::vector<RaggedTensorVariant> unbatched_ragged_input;\\n+    auto batched_splits_top_vec =\\n+        batched_ragged_input.splits(0).vec<SPLIT_TYPE>();\\n+    int num_components = batched_splits_top_vec.size() - 1;\\n+    OP_REQUIRES(context, num_components >= 0,\\n+                errors::Internal(\"Invalid split argument.\"));\\n     OP_REQUIRES_OK(context, UnbatchRaggedZerothDim<VALUE_TYPE, SPLIT_TYPE>(\\n                                 batched_ragged_input, &unbatched_ragged_input));'}}",
            "message_norm":"fix `tf.raw_ops.raggedtensortovariant` invalid resize.\n\npiperorigin-revid: 368299574\nchange-id: i751c186325aa0bab397928845e790e60c2d90918",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('368299574', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/ragged_tensor_to_variant_op.cc'])",
            "num_files":1.0
        },
        {
            "index":593,
            "vuln_id":"GHSA-58v3-j75h-xr49",
            "cwe_id":"{'CWE-284'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/seccomp\/libseccomp-golang\/commit\/06e7a29f36a34b8cf419aeb87b979ee508e58f9e'}",
            "dataset":"osv",
            "summary":"Improper Input Validation in libseccomp-golang libseccomp-golang 0.9.0 and earlier incorrectly generates BPFs that OR multiple arguments rather than ANDing them. A process running under a restrictive seccomp filter that specified multiple syscall arguments could bypass intended access restrictions by specifying a single matching argument.",
            "published_date":"2021-05-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/seccomp\/libseccomp-golang",
            "commit_href":"https:\/\/github.com\/seccomp\/libseccomp-golang\/commit\/06e7a29f36a34b8cf419aeb87b979ee508e58f9e",
            "commit_sha":"06e7a29f36a34b8cf419aeb87b979ee508e58f9e",
            "patch":"SINGLE",
            "chain_ord":"['06e7a29f36a34b8cf419aeb87b979ee508e58f9e']",
            "before_first_fix_commit":"{'fc0298087f328ac97a1fa781392de96b2ebb8aac'}",
            "last_fix_commit":"06e7a29f36a34b8cf419aeb87b979ee508e58f9e",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/19\/2017, 20:28:29",
            "message":"golang: Resolve bug with handling of multiple argument rules\n\nIn the upstream library, when added with a single API call,\nmultiple syscall argument rules should be matched with AND\nlogic - if all of them match, the rule matches.\n\nAt present, the Golang bindings apply OR logic to this case.\nThis commit resolves this and reverts to the behavior of the\nmain library.\n\nSigned-off-by: Matthew Heon <matthew.heon@gmail.com>",
            "author":"Matthew Heon",
            "comments":null,
            "stats":"{'additions': 37, 'deletions': 27, 'total': 64}",
            "files":"{'seccomp_internal.go': {'additions': 37, 'deletions': 27, 'changes': 64, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/seccomp\/libseccomp-golang\/raw\/06e7a29f36a34b8cf419aeb87b979ee508e58f9e\/seccomp_internal.go', 'patch': '@@ -120,23 +120,27 @@ unsigned int get_micro_version()\\n \\n typedef struct scmp_arg_cmp* scmp_cast_t;\\n \\n-\/\/ Wrapper to create an scmp_arg_cmp struct\\n-void*\\n-make_struct_arg_cmp(\\n-                    unsigned int arg,\\n-                    int compare,\\n-                    uint64_t a,\\n-                    uint64_t b\\n-                   )\\n+void* make_arg_cmp_array(unsigned int length)\\n {\\n-\\tstruct scmp_arg_cmp *s = malloc(sizeof(struct scmp_arg_cmp));\\n+        return calloc(length, sizeof(struct scmp_arg_cmp));\\n+}\\n \\n-\\ts->arg = arg;\\n-\\ts->op = compare;\\n-\\ts->datum_a = a;\\n-\\ts->datum_b = b;\\n+\/\/ Wrapper to add an scmp_arg_cmp struct to an existing arg_cmp array\\n+void add_struct_arg_cmp(\\n+                        struct scmp_arg_cmp* arr,\\n+                        unsigned int pos,\\n+                        unsigned int arg,\\n+                        int compare,\\n+                        uint64_t a,\\n+                        uint64_t b\\n+                       )\\n+{\\n+        arr[pos].arg = arg;\\n+        arr[pos].op = compare;\\n+        arr[pos].datum_a = a;\\n+        arr[pos].datum_b = b;\\n \\n-\\treturn s;\\n+        return;\\n }\\n *\/\\n import \"C\"\\n@@ -239,12 +243,9 @@ func (f *ScmpFilter) setFilterAttr(attr scmpFilterAttr, value C.uint32_t) error\\n \/\/ DOES NOT LOCK OR CHECK VALIDITY\\n \/\/ Assumes caller has already done this\\n \/\/ Wrapper for seccomp_rule_add_... functions\\n-func (f *ScmpFilter) addRuleWrapper(call ScmpSyscall, action ScmpAction, exact bool, cond C.scmp_cast_t) error {\\n-\\tvar length C.uint\\n-\\tif cond != nil {\\n-\\t\\tlength = 1\\n-\\t} else {\\n-\\t\\tlength = 0\\n+func (f *ScmpFilter) addRuleWrapper(call ScmpSyscall, action ScmpAction, exact bool, length C.uint, cond C.scmp_cast_t) error {\\n+\\tif length != 0 && cond == nil {\\n+\\t\\treturn fmt.Errorf(\"null conditions list, but length is nonzero\")\\n \\t}\\n \\n \\tvar retCode C.int\\n@@ -258,6 +259,8 @@ func (f *ScmpFilter) addRuleWrapper(call ScmpSyscall, action ScmpAction, exact b\\n \\t\\treturn fmt.Errorf(\"unrecognized syscall\")\\n \\t} else if syscall.Errno(-1*retCode) == syscall.EPERM {\\n \\t\\treturn fmt.Errorf(\"requested action matches default action of filter\")\\n+\\t} else if syscall.Errno(-1*retCode) == syscall.EINVAL {\\n+\\t\\treturn fmt.Errorf(\"two checks on same syscall argument\")\\n \\t} else if retCode != 0 {\\n \\t\\treturn syscall.Errno(-1 * retCode)\\n \\t}\\n@@ -275,7 +278,7 @@ func (f *ScmpFilter) addRuleGeneric(call ScmpSyscall, action ScmpAction, exact b\\n \\t}\\n \\n \\tif len(conds) == 0 {\\n-\\t\\tif err := f.addRuleWrapper(call, action, exact, nil); err != nil {\\n+\\t\\tif err := f.addRuleWrapper(call, action, exact, 0, nil); err != nil {\\n \\t\\t\\treturn err\\n \\t\\t}\\n \\t} else {\\n@@ -287,13 +290,20 @@ func (f *ScmpFilter) addRuleGeneric(call ScmpSyscall, action ScmpAction, exact b\\n \\t\\t\\t}\\n \\t\\t}\\n \\n-\\t\\tfor _, cond := range conds {\\n-\\t\\t\\tcmpStruct := C.make_struct_arg_cmp(C.uint(cond.Argument), cond.Op.toNative(), C.uint64_t(cond.Operand1), C.uint64_t(cond.Operand2))\\n-\\t\\t\\tdefer C.free(cmpStruct)\\n+\\t\\targsArr := C.make_arg_cmp_array(C.uint(len(conds)))\\n+\\t\\tif argsArr == nil {\\n+\\t\\t\\treturn fmt.Errorf(\"error allocating memory for conditions\")\\n+\\t\\t}\\n+\\t\\tdefer C.free(argsArr)\\n+\\n+\\t\\tfor i, cond := range conds {\\n+\\t\\t\\tC.add_struct_arg_cmp(C.scmp_cast_t(argsArr), C.uint(i),\\n+\\t\\t\\t\\tC.uint(cond.Argument), cond.Op.toNative(),\\n+\\t\\t\\t\\tC.uint64_t(cond.Operand1), C.uint64_t(cond.Operand2))\\n+\\t\\t}\\n \\n-\\t\\t\\tif err := f.addRuleWrapper(call, action, exact, C.scmp_cast_t(cmpStruct)); err != nil {\\n-\\t\\t\\t\\treturn err\\n-\\t\\t\\t}\\n+\\t\\tif err := f.addRuleWrapper(call, action, exact, C.uint(len(conds)), C.scmp_cast_t(argsArr)); err != nil {\\n+\\t\\t\\treturn err\\n \\t\\t}\\n \\t}'}}",
            "message_norm":"golang: resolve bug with handling of multiple argument rules\n\nin the upstream library, when added with a single api call,\nmultiple syscall argument rules should be matched with and\nlogic - if all of them match, the rule matches.\n\nat present, the golang bindings apply or logic to this case.\nthis commit resolves this and reverts to the behavior of the\nmain library.\n\nsigned-off-by: matthew heon <matthew.heon@gmail.com>",
            "language":"en",
            "entities":"[('bug', 'FLAW', ''), ('added', 'ACTION', ''), ('matthew.heon@gmail.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['seccomp_internal.go'])",
            "num_files":1.0
        },
        {
            "index":1798,
            "vuln_id":"GHSA-fxqh-cfjm-fp93",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1'}",
            "dataset":"osv",
            "summary":"Division by 0 in `Reverse` ### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`:\n\n```python\nimport tensorflow as tf\n\ntensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)\ndims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)\n\ntf.raw_ops.Reverse(tensor=tensor_input, dims=dims)\n``` \n    \nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/36229ea9e9451dac14a8b1f4711c435a1d84a594\/tensorflow\/core\/kernels\/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument:\n    \n```cc\nconst int64 N = input.dim_size(0);\nconst int64 cost_per_unit = input.NumElements() \/ N;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [4071d8e2f6c45c1955a811fee757ca2adbe462c1](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "commit_sha":"4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "patch":"SINGLE",
            "chain_ord":"['4071d8e2f6c45c1955a811fee757ca2adbe462c1']",
            "before_first_fix_commit":"{'36229ea9e9451dac14a8b1f4711c435a1d84a594'}",
            "last_fix_commit":"4071d8e2f6c45c1955a811fee757ca2adbe462c1",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/29\/2021, 19:24:18",
            "message":"Fix FPE issue with `tf.raw_ops.Reverse`.\n\nPiperOrigin-RevId: 371176973\nChange-Id: Ic6d483bfc95313ec2299c2d1c956cfe96c96626c",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'tensorflow\/core\/kernels\/reverse_op.cc': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4071d8e2f6c45c1955a811fee757ca2adbe462c1\/tensorflow%2Fcore%2Fkernels%2Freverse_op.cc', 'patch': '@@ -155,6 +155,12 @@ class ReverseOp : public OpKernel {\\n \\n   void Compute(OpKernelContext* context) override {\\n     const Tensor& input = context->input(0);\\n+    \/\/ If input is provided, check to make sure the first dimension is valid.\\n+    if (input.dims() > 0) {\\n+      OP_REQUIRES(\\n+          context, input.dim_size(0) != 0,\\n+          errors::InvalidArgument(\"Invalid input first dimension. Found 0.\"));\\n+    }\\n     const Tensor& dims = context->input(1);\\n \\n     if (TensorShapeUtils::IsScalar(input.shape())) {'}}",
            "message_norm":"fix fpe issue with `tf.raw_ops.reverse`.\n\npiperorigin-revid: 371176973\nchange-id: ic6d483bfc95313ec2299c2d1c956cfe96c96626c",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('fpe', 'SECWORD', ''), ('issue', 'FLAW', ''), ('371176973', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/reverse_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3318,
            "vuln_id":"GHSA-wrwf-pmmj-w989",
            "cwe_id":"{'CWE-203'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/bcgit\/bc-java\/commit\/a00b684465b38d722ca9a3543b8af8568e6bad5c'}",
            "dataset":"osv",
            "summary":"Observable Discrepancy in BouncyCastle BouncyCastle TLS prior to version 1.0.3, when configured to use the JCE (Java Cryptography Extension) for cryptographic functions, provides a weak Bleichenbacher oracle when any TLS cipher suite using RSA key exchange is negotiated. An attacker can recover the private key from a vulnerable application. This vulnerability is referred to as \"ROBOT.\"",
            "published_date":"2022-05-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/bcgit\/bc-java",
            "commit_href":"https:\/\/github.com\/bcgit\/bc-java\/commit\/a00b684465b38d722ca9a3543b8af8568e6bad5c",
            "commit_sha":"a00b684465b38d722ca9a3543b8af8568e6bad5c",
            "patch":"SINGLE",
            "chain_ord":"['a00b684465b38d722ca9a3543b8af8568e6bad5c']",
            "before_first_fix_commit":"{'199be1bdc892dcb3360af1b5a887a7e133d2cdac'}",
            "last_fix_commit":"a00b684465b38d722ca9a3543b8af8568e6bad5c",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/12\/2017, 01:41:43",
            "message":"Confirm size of decrypted PMS before using",
            "author":"Peter Dettman",
            "comments":"{'com_1': {'author': 'carnil', 'datetime': '12\/12\/2017, 20:44:47', 'body': 'CVE-2017-13098'}, 'com_2': {'author': 'bcgit', 'datetime': '12\/12\/2017, 23:34:09', 'body': 'This is also available in the current beta in https:\/\/www.bouncycastle.org\/betas 159b09 or later.'}, 'com_3': {'author': 'zenithravi', 'datetime': '12\/14\/2017, 09:12:16', 'body': 'Any plan ? When fix for CVE-2017-13098 (159b09) will be released ?'}, 'com_4': {'author': 'bcgit', 'datetime': '12\/14\/2017, 11:05:34', 'body': \"We're hoping to have 1.59 out in the next week or so.\"}}",
            "stats":"{'additions': 5, 'deletions': 1, 'total': 6}",
            "files":"{'tls\/src\/main\/java\/org\/bouncycastle\/tls\/crypto\/impl\/jcajce\/JceDefaultTlsCredentialedDecryptor.java': {'additions': 5, 'deletions': 1, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/bcgit\/bc-java\/raw\/a00b684465b38d722ca9a3543b8af8568e6bad5c\/tls%2Fsrc%2Fmain%2Fjava%2Forg%2Fbouncycastle%2Ftls%2Fcrypto%2Fimpl%2Fjcajce%2FJceDefaultTlsCredentialedDecryptor.java', 'patch': '@@ -97,7 +97,11 @@ protected TlsSecret safeDecryptPreMasterSecret(TlsCryptoParameters cryptoParams,\\n         {\\n             Cipher c = crypto.createRSAEncryptionCipher();\\n             c.init(Cipher.DECRYPT_MODE, rsaServerPrivateKey);\\n-            M = c.doFinal(encryptedPreMasterSecret);\\n+            byte[] m = c.doFinal(encryptedPreMasterSecret);\\n+            if (m != null && m.length == 48)\\n+            {\\n+                M = m;\\n+            }\\n         }\\n         catch (Exception e)\\n         {'}}",
            "message_norm":"confirm size of decrypted pms before using",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tls\/src\/main\/java\/org\/bouncycastle\/tls\/crypto\/impl\/jcajce\/JceDefaultTlsCredentialedDecryptor.java'])",
            "num_files":1.0
        },
        {
            "index":962,
            "vuln_id":"GHSA-75c5-f4gw-38r9",
            "cwe_id":"{'CWE-74'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/pear\/Archive_Tar\/commit\/0670a05fdab997036a3fc3ef113b8f5922e574da'}",
            "dataset":"osv",
            "summary":"Multiple vulnerabilities through filename manipulation in Archive_Tar Archive_Tar through 1.4.10 has :\/\/ filename sanitization only to address phar attacks, and thus any other stream-wrapper attack (such as file:\/\/ to overwrite files) can still succeed. See: https:\/\/github.com\/pear\/Archive_Tar\/issues\/33",
            "published_date":"2021-04-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/pear\/Archive_Tar",
            "commit_href":"https:\/\/github.com\/pear\/Archive_Tar\/commit\/0670a05fdab997036a3fc3ef113b8f5922e574da",
            "commit_sha":"0670a05fdab997036a3fc3ef113b8f5922e574da",
            "patch":"SINGLE",
            "chain_ord":"['0670a05fdab997036a3fc3ef113b8f5922e574da']",
            "before_first_fix_commit":"{'bbb4f10f71a1da2715ec6d9a683f4f23c507a49b'}",
            "last_fix_commit":"0670a05fdab997036a3fc3ef113b8f5922e574da",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/19\/2020, 08:52:43",
            "message":"Fixes #33 - ensure we catch additional malicious\/crafted filenames",
            "author":"Michiel Rook",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'Archive\/Tar.php': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pear\/Archive_Tar\/raw\/0670a05fdab997036a3fc3ef113b8f5922e574da\/Archive%2FTar.php', 'patch': '@@ -1730,7 +1730,7 @@ public function _readHeader($v_binary_data, &$v_header)\\n \\n         \/\/ ----- Extract the properties\\n         $v_header[\\'filename\\'] = rtrim($v_data[\\'filename\\'], \"\\\\0\");\\n-        if ($this->_maliciousFilename($v_header[\\'filename\\'])) {\\n+        if ($this->_isMaliciousFilename($v_header[\\'filename\\'])) {\\n             $this->_error(\\n                 \\'Malicious .tar detected, file \"\\' . $v_header[\\'filename\\'] .\\n                 \\'\" will not install in desired directory tree\\'\\n@@ -1800,9 +1800,9 @@ private function _tarRecToSize($tar_size)\\n      *\\n      * @return bool\\n      *\/\\n-    private function _maliciousFilename($file)\\n+    private function _isMaliciousFilename($file)\\n     {\\n-        if (strpos($file, \\'phar:\/\/\\') === 0) {\\n+        if (strpos($file, \\':\/\/\\') !== false) {\\n             return true;\\n         }\\n         if (strpos($file, \\'..\/\\') !== false || strpos($file, \\'..\\\\\\\\\\') !== false) {\\n@@ -1838,7 +1838,7 @@ public function _readLongHeader(&$v_header)\\n \\n         $v_filename = rtrim(substr($v_filename, 0, $v_filesize), \"\\\\0\");\\n         $v_header[\\'filename\\'] = $v_filename;\\n-        if ($this->_maliciousFilename($v_filename)) {\\n+        if ($this->_isMaliciousFilename($v_filename)) {\\n             $this->_error(\\n                 \\'Malicious .tar detected, file \"\\' . $v_filename .\\n                 \\'\" will not install in desired directory tree\\''}}",
            "message_norm":"fixes #33 - ensure we catch additional malicious\/crafted filenames",
            "language":"en",
            "entities":"[('fixes', 'ACTION', ''), ('#33', 'ISSUE', ''), ('ensure', 'ACTION', ''), ('malicious', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['Archive\/Tar.php'])",
            "num_files":1.0
        },
        {
            "index":1405,
            "vuln_id":"GHSA-9m95-8hx6-7p9v",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57'}",
            "dataset":"osv",
            "summary":"Improper input validation in umoci ### Impact\n\numoci 0.4.6 and earlier can be tricked into modifying host files by\ncreating a malicious layer that has a symlink with the name \".\" (or\n\"\/\"). Because umoci deletes inodes if they change types, this results in\nthe rootfs directory being replaced with an attacker-controlled symlink.\nSubsequent image layers will then be applied on top of the target of the\nsymlink (which could be any directory on the host filesystem the user\nrunning umoci has access to).\n\nWhile umoci does have defences against symlink-based attacks, they are\nall implemented by resolving things relative to the rootfs directory --\nif the rootfs itself is a symlink, umoci resolves it first.\n\nThis vulnerability affects both \"umoci unpack\" and \"umoci raw unpack\".\n\n### Patches\nThis issue has been patched in umoci 0.4.7, see the references section\nfor the specific commit which fixed this vulnerability.\n\n### Workarounds\nNote that if you use umoci as an unprivileged user (using the --rootless\nflag) then umoci will not be able to overwrite any files that your user\ndoesn't have access to. Other possible mitigations are to run umoci\nunder an LSM profile such as AppArmor or SELinux to restrict the level\nof access it has outside of container image directories.\n\n### References\n* [oss-security public disclosure](https:\/\/www.openwall.com\/lists\/oss-security\/2021\/04\/06\/2)\n* [patch](https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57)\n\n### Credits\nThanks to Robin Peraglie from Cure53 for discovering and reporting this\nvulnerability.\n\n### For more information\n\nIf you have any questions or comments about this advisory\n* Open an issue in <https:\/\/github.com\/opencontainers\/umoci>.\n* Email us at <security@opencontainers.org>.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencontainers\/umoci",
            "commit_href":"https:\/\/github.com\/opencontainers\/umoci\/commit\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "commit_sha":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "patch":"SINGLE",
            "chain_ord":"['d9efc31daf2206f7d3fdb839863cf7a576a2eb57']",
            "before_first_fix_commit":"{'07fa845e5b068dee64dcbf391b456a564a6fcfa6'}",
            "last_fix_commit":"d9efc31daf2206f7d3fdb839863cf7a576a2eb57",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/23\/2021, 13:17:06",
            "message":"layer: don't permit \/ type to be changed on extraction\n\nIf users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. This is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nFixes: CVE-2021-29136\nReported-by: Robin Peraglie <robin@cure53.de>\nTested-by: Daniel Dao <dqminh89@gmail.com>\nReviewed-by: Tycho Andersen <tycho@tycho.pizza>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
            "author":"Aleksa Sarai",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'oci\/layer\/tar_extract.go': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencontainers\/umoci\/raw\/d9efc31daf2206f7d3fdb839863cf7a576a2eb57\/oci%2Flayer%2Ftar_extract.go', 'patch': '@@ -404,6 +404,11 @@ func (te *TarExtractor) UnpackEntry(root string, hdr *tar.Header, r io.Reader) (\\n \\tif filepath.Join(\"\/\", hdr.Name) == \"\/\" {\\n \\t\\t\/\/ If we got an entry for the root, then unsafeDir is the full path.\\n \\t\\tunsafeDir, file = hdr.Name, \".\"\\n+\\t\\t\/\/ If we\\'re being asked to change the root type, bail because they may\\n+\\t\\t\/\/ change it to a symlink which we could inadvertently follow.\\n+\\t\\tif hdr.Typeflag != tar.TypeDir {\\n+\\t\\t\\treturn errors.New(\"malicious tar entry -- refusing to change type of root directory\")\\n+\\t\\t}\\n \\t}\\n \\tdir, err := securejoin.SecureJoinVFS(root, unsafeDir, te.fsEval)\\n \\tif err != nil {'}}",
            "message_norm":"layer: don't permit \/ type to be changed on extraction\n\nif users can change the type of \/ to a symlink, they can cause umoci to\noverwrite host files. this is obviously bad, and is not caught by the\nrest of our directory escape detection code because the root itself has\nbeen changed to a different directory.\n\nfixes: cve-2021-29136\nreported-by: robin peraglie <robin@cure53.de>\ntested-by: daniel dao <dqminh89@gmail.com>\nreviewed-by: tycho andersen <tycho@tycho.pizza>\nsigned-off-by: aleksa sarai <cyphar@cyphar.com>",
            "language":"en",
            "entities":"[('changed', 'ACTION', ''), ('change', 'ACTION', ''), ('symlink', 'SECWORD', ''), ('escape', 'SECWORD', ''), ('changed', 'ACTION', ''), ('fixes', 'ACTION', ''), ('cve-2021-29136', 'VULNID', 'CVE'), ('robin@cure53.de', 'EMAIL', ''), ('dqminh89@gmail.com', 'EMAIL', ''), ('cyphar@cyphar.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['oci\/layer\/tar_extract.go'])",
            "num_files":1.0
        },
        {
            "index":3313,
            "vuln_id":"GHSA-wqwf-x5cj-rg56",
            "cwe_id":"{'CWE-78'}",
            "score":7.1,
            "chain":"{'https:\/\/github.com\/kubernetes\/kubernetes\/commit\/d65039c56ce4de5f2efdc38aa1284eeb95f89169'}",
            "dataset":"osv",
            "summary":"Arbitrary Command Injection In Kubernetes versions 1.9.0-1.9.9, 1.10.0-1.10.5, and 1.11.0-1.11.1, user input was handled insecurely while setting up volume mounts on Windows nodes, which could lead to command line argument injection.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/kubernetes\/kubernetes",
            "commit_href":"https:\/\/github.com\/kubernetes\/kubernetes\/commit\/d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "commit_sha":"d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "patch":"SINGLE",
            "chain_ord":"['d65039c56ce4de5f2efdc38aa1284eeb95f89169']",
            "before_first_fix_commit":"{'dc0afb24d138220cb53d9be3298f1539b0be4f7a', '27bc865cc1bffb97d4dff38492aa9f830f859e45'}",
            "last_fix_commit":"d65039c56ce4de5f2efdc38aa1284eeb95f89169",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/03\/2018, 13:16:06",
            "message":"Merge pull request #65751 from andyzhangx\/mount-windows-fix\n\nAutomatic merge from submit-queue (batch tested with PRs 65381, 65751). If you want to cherry-pick this change to another branch, please follow the instructions <a href=\"https:\/\/github.com\/kubernetes\/community\/blob\/master\/contributors\/devel\/cherry-picks.md\">here<\/a>.\n\nfix smb mount security issue\n\n**What this PR does \/ why we need it**:\r\nfix smb mount security issue:\r\nuser PowerShell Environment Variables to store user input string to prevent command line injection, the env var in PowerShell would be taken as literal values and not as executable vulnerable code, this kind of fix is common for command line injection issue (called: parameterized way)\r\n\r\nOriginally use go sdk for `New-SmbGlobalMapping` is best solution, while after discussion with Windows team, go API for `New-SmbGlobalMapping` is not ready yet and the new functionality of basic win32 API [NetUseAdd](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa370645(v=vs.85).aspx) is not public yet, use [PowerShell with Environment Variables](https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1) is also their recommended way.\r\n\r\n**Which issue(s) this PR fixes** *(optional, in `fixes #<issue number>(, fixes #<issue_number>, ...)` format, will close the issue(s) when PR gets merged)*:\r\nFixes #65750 \r\n\r\n**Special notes for your reviewer**:\r\n - This is a security issue fix, no behavior change, E2E test of smb mount passes.\r\n - Original logging as `azureMount` is incorrect since this mount_windows is for mount disk & smb, it's a common feature on Windows, not specific to Azure, I will send another PR to fixing all the logging naming issue, anyway it's not related to this security issue. Let's keep this PR simple.\r\n\r\n**Release note**:\r\n\r\n```\r\nfix smb mount security issue\r\n```\r\n\r\n\/sig windows\r\n\/sig storage\r\n\/kind bug\r\n\r\n@jessfraz \r\n\/assign @jsafrane @msau42",
            "author":"Kubernetes Submit Queue",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 6, 'total': 18}",
            "files":"{'pkg\/util\/mount\/mount_windows.go': {'additions': 12, 'deletions': 6, 'changes': 18, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/kubernetes\/kubernetes\/raw\/d65039c56ce4de5f2efdc38aa1284eeb95f89169\/pkg%2Futil%2Fmount%2Fmount_windows.go', 'patch': '@@ -83,14 +83,20 @@ func (mounter *Mounter) Mount(source string, target string, fstype string, optio\\n \\t\\t\\treturn fmt.Errorf(\"azureMount: only cifs mount is supported now, fstype: %q, mounting source (%q), target (%q), with options (%q)\", fstype, source, target, options)\\n \\t\\t}\\n \\n-\\t\\tcmdLine := fmt.Sprintf(`$User = \"%s\";$PWord = ConvertTo-SecureString -String \"%s\" -AsPlainText -Force;`+\\n-\\t\\t\\t`$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord`,\\n-\\t\\t\\toptions[0], options[1])\\n-\\n \\t\\tbindSource = source\\n-\\t\\tcmdLine += fmt.Sprintf(\";New-SmbGlobalMapping -RemotePath %s -Credential $Credential\", source)\\n \\n-\\t\\tif output, err := exec.Command(\"powershell\", \"\/c\", cmdLine).CombinedOutput(); err != nil {\\n+\\t\\t\/\/ use PowerShell Environment Variables to store user input string to prevent command line injection\\n+\\t\\t\/\/ https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1\\n+\\t\\tcmdLine := fmt.Sprintf(`$PWord = ConvertTo-SecureString -String $Env:smbpassword -AsPlainText -Force` +\\n+\\t\\t\\t`;$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Env:smbuser, $PWord` +\\n+\\t\\t\\t`;New-SmbGlobalMapping -RemotePath $Env:smbremotepath -Credential $Credential`)\\n+\\n+\\t\\tcmd := exec.Command(\"powershell\", \"\/c\", cmdLine)\\n+\\t\\tcmd.Env = append(os.Environ(),\\n+\\t\\t\\tfmt.Sprintf(\"smbuser=%s\", options[0]),\\n+\\t\\t\\tfmt.Sprintf(\"smbpassword=%s\", options[1]),\\n+\\t\\t\\tfmt.Sprintf(\"smbremotepath=%s\", source))\\n+\\t\\tif output, err := cmd.CombinedOutput(); err != nil {\\n \\t\\t\\treturn fmt.Errorf(\"azureMount: SmbGlobalMapping failed: %v, only SMB mount is supported now, output: %q\", err, string(output))\\n \\t\\t}\\n \\t}'}}",
            "message_norm":"merge pull request #65751 from andyzhangx\/mount-windows-fix\n\nautomatic merge from submit-queue (batch tested with prs 65381, 65751). if you want to cherry-pick this change to another branch, please follow the instructions <a href=\"https:\/\/github.com\/kubernetes\/community\/blob\/master\/contributors\/devel\/cherry-picks.md\">here<\/a>.\n\nfix smb mount security issue\n\n**what this pr does \/ why we need it**:\r\nfix smb mount security issue:\r\nuser powershell environment variables to store user input string to prevent command line injection, the env var in powershell would be taken as literal values and not as executable vulnerable code, this kind of fix is common for command line injection issue (called: parameterized way)\r\n\r\noriginally use go sdk for `new-smbglobalmapping` is best solution, while after discussion with windows team, go api for `new-smbglobalmapping` is not ready yet and the new functionality of basic win32 api [netuseadd](https:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/aa370645(v=vs.85).aspx) is not public yet, use [powershell with environment variables](https:\/\/docs.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_environment_variables?view=powershell-5.1) is also their recommended way.\r\n\r\n**which issue(s) this pr fixes** *(optional, in `fixes #<issue number>(, fixes #<issue_number>, ...)` format, will close the issue(s) when pr gets merged)*:\r\nfixes #65750 \r\n\r\n**special notes for your reviewer**:\r\n - this is a security issue fix, no behavior change, e2e test of smb mount passes.\r\n - original logging as `azuremount` is incorrect since this mount_windows is for mount disk & smb, it's a common feature on windows, not specific to azure, i will send another pr to fixing all the logging naming issue, anyway it's not related to this security issue. let's keep this pr simple.\r\n\r\n**release note**:\r\n\r\n```\r\nfix smb mount security issue\r\n```\r\n\r\n\/sig windows\r\n\/sig storage\r\n\/kind bug\r\n\r\n@jessfraz \r\n\/assign @jsafrane @msau42",
            "language":"en",
            "entities":"[('#65751', 'ISSUE', ''), ('href=\"https:\/\/github.com', 'URL', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('prevent', 'ACTION', ''), ('injection', 'SECWORD', ''), ('vulnerable', 'SECWORD', ''), ('injection', 'SECWORD', ''), ('issue', 'FLAW', ''), ('netuseadd](https:\/\/msdn.microsoft.com', 'URL', ''), ('variables](https:\/\/docs.microsoft.com', 'URL', ''), ('issue(s', 'FLAW', ''), ('fixes', 'ACTION', ''), ('fixes', 'ACTION', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('issue(s', 'FLAW', ''), ('fixes', 'ACTION', ''), ('#65750', 'ISSUE', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fixing', 'ACTION', ''), ('issue', 'FLAW', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['pkg\/util\/mount\/mount_windows.go'])",
            "num_files":1.0
        },
        {
            "index":3203,
            "vuln_id":"GHSA-w2pm-r78h-4m7v",
            "cwe_id":"{'CWE-78'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/laravel\/framework\/commit\/44c3feb604944599ad1c782a9942981c3991fa31'}",
            "dataset":"osv",
            "summary":"OS Command Injection in Laravel Framework OS Command injection vulnerability in function link in Filesystem.php in Laravel Framework before 5.8.17.",
            "published_date":"2022-01-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/laravel\/framework",
            "commit_href":"https:\/\/github.com\/laravel\/framework\/commit\/44c3feb604944599ad1c782a9942981c3991fa31",
            "commit_sha":"44c3feb604944599ad1c782a9942981c3991fa31",
            "patch":"SINGLE",
            "chain_ord":"['44c3feb604944599ad1c782a9942981c3991fa31']",
            "before_first_fix_commit":"{'c7a3ca1c6df547a807807ffc782c13b92d44a1ad'}",
            "last_fix_commit":"44c3feb604944599ad1c782a9942981c3991fa31",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/14\/2019, 15:58:33",
            "message":"use escapeshellarg on windows symlink",
            "author":"Taylor Otwell",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/Illuminate\/Filesystem\/Filesystem.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/laravel\/framework\/raw\/44c3feb604944599ad1c782a9942981c3991fa31\/src%2FIlluminate%2FFilesystem%2FFilesystem.php', 'patch': '@@ -254,7 +254,7 @@ public function link($target, $link)\\n \\n         $mode = $this->isDirectory($target) ? \\'J\\' : \\'H\\';\\n \\n-        exec(\"mklink \/{$mode} \\\\\"{$link}\\\\\" \\\\\"{$target}\\\\\"\");\\n+        exec(\"mklink \/{$mode} \".escapeshellarg($link).\" \".escapeshellarg($target));\\n     }\\n \\n     \/**'}}",
            "message_norm":"use escapeshellarg on windows symlink",
            "language":"en",
            "entities":"[('escapeshellarg', 'SECWORD', ''), ('symlink', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Illuminate\/Filesystem\/Filesystem.php'])",
            "num_files":1.0
        },
        {
            "index":1251,
            "vuln_id":"GHSA-8rm6-75mf-7r7r",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5117e0851348065ed59c991562c0ec80d9193db2'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of hashtable lookup ### Impact\nThe TFLite implementation of hashtable lookup is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8\/tensorflow\/lite\/kernels\/hashtable_lookup.cc#L114-L115):\n\n```cc\nconst int num_rows = SizeOfDimension(value, 0); \nconst int row_bytes = value->bytes \/ num_rows; \n```\n\nAn attacker can craft a model such that `values`'s first dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [5117e0851348065ed59c991562c0ec80d9193db2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5117e0851348065ed59c991562c0ec80d9193db2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/5117e0851348065ed59c991562c0ec80d9193db2",
            "commit_sha":"5117e0851348065ed59c991562c0ec80d9193db2",
            "patch":"SINGLE",
            "chain_ord":"['5117e0851348065ed59c991562c0ec80d9193db2']",
            "before_first_fix_commit":"{'ba6822bd7b7324ba201a28b2f278c29a98edbef2'}",
            "last_fix_commit":"5117e0851348065ed59c991562c0ec80d9193db2",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 23:16:56",
            "message":"Prevent a division by 0\n\nPiperOrigin-RevId: 371007407\nChange-Id: Iecf2718de48d6bf5a69b02a9df9deda8ec1b19d3",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'tensorflow\/lite\/kernels\/hashtable_lookup.cc': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/5117e0851348065ed59c991562c0ec80d9193db2\/tensorflow%2Flite%2Fkernels%2Fhashtable_lookup.cc', 'patch': '@@ -112,6 +112,7 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\\n \\n   const int num_rows = SizeOfDimension(value, 0);\\n+  TF_LITE_ENSURE(context, num_rows != 0);\\n   const int row_bytes = value->bytes \/ num_rows;\\n   void* pointer = nullptr;\\n   DynamicBuffer buf;'}}",
            "message_norm":"prevent a division by 0\n\npiperorigin-revid: 371007407\nchange-id: iecf2718de48d6bf5a69b02a9df9deda8ec1b19d3",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('division by 0', 'SECWORD', ''), ('371007407', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/hashtable_lookup.cc'])",
            "num_files":1.0
        },
        {
            "index":244,
            "vuln_id":"GHSA-3f99-hvg4-qjwj",
            "cwe_id":"{'CWE-335'}",
            "score":8.7,
            "chain":"{'https:\/\/github.com\/juliangruber\/keypair\/commit\/9596418d3363d3e757676c0b6a8f2d35a9d1cb18'}",
            "dataset":"osv",
            "summary":"Insecure random number generation in keypair ## Description and Impact\n\nA bug in the pseudo-random number generator used by [keypair](https:\/\/github.com\/juliangruber\/keypair) versions up to and including 1.0.3 could allow for weak RSA key generation. This could enable an attacker to decrypt confidential messages or gain authorized access to an account belonging to the victim. We recommend replacing any RSA keys that were generated using keypair version 1.0.3 or earlier.\n\n## Fix\n\n* The [bug](https:\/\/github.com\/juliangruber\/keypair\/blob\/87c62f255baa12c1ec4f98a91600f82af80be6db\/index.js#L1008) in the pseudo-random number generator is fixed in commit [`9596418`](https:\/\/github.com\/juliangruber\/keypair\/commit\/9596418d3363d3e757676c0b6a8f2d35a9d1cb18).\n* If the crypto module is available, it is used instead of the pseudo-random number generator. Also fixed in [`9596418`](https:\/\/github.com\/juliangruber\/keypair\/commit\/9596418d3363d3e757676c0b6a8f2d35a9d1cb18)\n\n## Additional Details\n\nThe specific [line](https:\/\/github.com\/juliangruber\/keypair\/blob\/87c62f255baa12c1ec4f98a91600f82af80be6db\/index.js#L1008) with the flaw is:\n\n```javascript\nb.putByte(String.fromCharCode(next & 0xFF))\n```\n\nThe [definition](https:\/\/github.com\/juliangruber\/keypair\/blob\/87c62f255baa12c1ec4f98a91600f82af80be6db\/index.js#L350-L352) of `putByte` is \n\n```javascript\nutil.ByteBuffer.prototype.putByte = function(b) {\n  this.data += String.fromCharCode(b);\n};\n```\n\nSimplified, this is `String.fromCharCode(String.fromCharCode(next & 0xFF))`. This results in most of the buffer containing zeros. An example generated buffer:\n\n(Note: truncated for brevity)\n\n```\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00....\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n```\n\nSince it is masking with 0xFF, approximately 97% of the bytes are converted to zeros. The impact is that each byte in the RNG seed has a 97% chance of being 0 due to incorrect conversion.\n\n## Credit\n\nThis issue was reported to GitHub Security Lab by Ross Wheeler of Axosoft. It was discovered by Axosoft engineer Dan Suceava, who noticed that [keypair](https:\/\/github.com\/juliangruber\/keypair) was regularly generating duplicate RSA keys. GitHub security engineer [@vcsjones (Kevin Jones)](https:\/\/github.com\/vcsjones) independently investigated the problem and identified the cause and source code location of the bug.",
            "published_date":"2021-10-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/juliangruber\/keypair",
            "commit_href":"https:\/\/github.com\/juliangruber\/keypair\/commit\/9596418d3363d3e757676c0b6a8f2d35a9d1cb18",
            "commit_sha":"9596418d3363d3e757676c0b6a8f2d35a9d1cb18",
            "patch":"SINGLE",
            "chain_ord":"['9596418d3363d3e757676c0b6a8f2d35a9d1cb18']",
            "before_first_fix_commit":"{'87c62f255baa12c1ec4f98a91600f82af80be6db'}",
            "last_fix_commit":"9596418d3363d3e757676c0b6a8f2d35a9d1cb18",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/11\/2021, 17:01:56",
            "message":"Merge pull request from GHSA-3f99-hvg4-qjwj\n\n* fix double String.fromCharCode\n\n* use crypto module if available\n\nCo-authored-by: Julian Gruber <julian@juliangruber.com>",
            "author":"Kevin Backhouse",
            "comments":"{'com_1': {'author': 'ChALkeR', 'datetime': '10\/12\/2021, 16:44:04', 'body': \"How is this a fix?\\r\\n\\r\\nThis looks like it still falls back to xorshift128+ for the purpose of ssh keys generation?\\r\\n\\r\\nThat... doesn't look like a good idea perhaps.\\r\\n\\r\\nWhy is `Math.random` based code even present there?\\r\\n\\r\\nThe environments where there is no way to generate the key in a secure way should fail, and not fall back to a predictable pseudo-random generator.\\r\\n\\r\\n_Note: not considering this confidential, as this is all over Twitter now afaik._\"}, 'com_2': {'author': 'juliangruber', 'datetime': '10\/13\/2021, 08:21:54', 'body': \"I'm not a security researcher myself so I'm preferring to relay judgement of this issue to those who are, which has happened in this advisory.\\r\\n\\r\\nAt this point I'm not going to perform any major changes to this library myself. If you want to contribute, would you consider making a docs PR with your concerns, adding a disclaimer to the README?\"}, 'com_3': {'author': 'normanr', 'datetime': '10\/13\/2021, 16:04:03', 'body': 'Thank you for responding promptly to the security researchers and taking the time to merge this security fix. A good example of how to handle security related bug reports.'}}",
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'index.js': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/juliangruber\/keypair\/raw\/9596418d3363d3e757676c0b6a8f2d35a9d1cb18\/index.js', 'patch': \"@@ -756,7 +756,11 @@ util.createBuffer = function(input, encoding) {\\n  *\/\\n \\n var prng = forge.prng = {};\\n-var crypto = null;\\n+\\n+var crypto;\\n+try {\\n+  crypto = require('crypto');\\n+} catch (_) {}\\n \\n prng.create = function(plugin) {\\n   var ctx = {\\n@@ -1005,7 +1009,7 @@ prng.create = function(plugin) {\\n           \/\/ throw in more pseudo random\\n           next = seed >>> (i << 3);\\n           next ^= Math.floor(Math.random() * 0xFF);\\n-          b.putByte(String.fromCharCode(next & 0xFF));\\n+          b.putByte(next & 0xFF);\\n         }\\n       }\\n     }\"}}",
            "message_norm":"merge pull request from ghsa-3f99-hvg4-qjwj\n\n* fix double string.fromcharcode\n\n* use crypto module if available\n\nco-authored-by: julian gruber <julian@juliangruber.com>",
            "language":"en",
            "entities":"[('ghsa-3f99-hvg4-qjwj', 'VULNID', 'GHSA'), ('fix', 'ACTION', ''), ('crypto', 'SECWORD', ''), ('julian@juliangruber.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1923,
            "vuln_id":"GHSA-grc3-8q8m-4j7c",
            "cwe_id":"{'CWE-280', 'CWE-732'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/apache\/accumulo\/commit\/877ad502f6857e48342664e4b0ce83db74e4cda4'}",
            "dataset":"osv",
            "summary":"Improper privilege handling in Apache Accumulo Apache Accumulo versions 1.5.0 through 1.10.0 and version 2.0.0 do not properly check the return value of some policy enforcement functions before permitting an authenticated user to perform certain administrative operations. Specifically, the return values of the 'canFlush' and 'canPerformSystemActions' security functions are not checked in some instances, therefore allowing an authenticated user with insufficient permissions to perform the following actions: flushing a table, shutting down Accumulo or an individual tablet server, and setting or removing system-wide Accumulo configuration properties.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/accumulo",
            "commit_href":"https:\/\/github.com\/apache\/accumulo\/commit\/877ad502f6857e48342664e4b0ce83db74e4cda4",
            "commit_sha":"877ad502f6857e48342664e4b0ce83db74e4cda4",
            "patch":"SINGLE",
            "chain_ord":"['877ad502f6857e48342664e4b0ce83db74e4cda4']",
            "before_first_fix_commit":"{'024a72ed8b80c21470ab2eed04787e3216b7b606'}",
            "last_fix_commit":"877ad502f6857e48342664e4b0ce83db74e4cda4",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/08\/2020, 19:08:36",
            "message":"Throw exceptions when permissions checks fail (#1828)\n\n(cherry-picked for 2.0.1)\n\nAdd and throw missing exceptions when permissions checks fail. This\nprevents certain operations that the user does not have privileges to\nperform from succeeding anyway.",
            "author":"Christopher Tubbs",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 7, 'total': 21}",
            "files":"{'server\/master\/src\/main\/java\/org\/apache\/accumulo\/master\/MasterClientServiceHandler.java': {'additions': 14, 'deletions': 7, 'changes': 21, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/accumulo\/raw\/877ad502f6857e48342664e4b0ce83db74e4cda4\/server%2Fmaster%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Faccumulo%2Fmaster%2FMasterClientServiceHandler.java', 'patch': '@@ -112,7 +112,8 @@ public long initiateFlush(TInfo tinfo, TCredentials c, String tableIdStr)\\n       throws ThriftSecurityException, ThriftTableOperationException {\\n     TableId tableId = TableId.of(tableIdStr);\\n     NamespaceId namespaceId = getNamespaceIdFromTableId(TableOperation.FLUSH, tableId);\\n-    master.security.canFlush(c, tableId, namespaceId);\\n+    if (!master.security.canFlush(c, tableId, namespaceId))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     String zTablePath = Constants.ZROOT + \"\/\" + master.getInstanceID() + Constants.ZTABLES + \"\/\"\\n         + tableId + Constants.ZTABLE_FLUSH_ID;\\n@@ -145,7 +146,8 @@ public void waitForFlush(TInfo tinfo, TCredentials c, String tableIdStr, ByteBuf\\n       throws ThriftSecurityException, ThriftTableOperationException {\\n     TableId tableId = TableId.of(tableIdStr);\\n     NamespaceId namespaceId = getNamespaceIdFromTableId(TableOperation.FLUSH, tableId);\\n-    master.security.canFlush(c, tableId, namespaceId);\\n+    if (!master.security.canFlush(c, tableId, namespaceId))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     Text startRow = ByteBufferUtil.toText(startRowBB);\\n     Text endRow = ByteBufferUtil.toText(endRowBB);\\n@@ -247,7 +249,8 @@ public void setTableProperty(TInfo info, TCredentials credentials, String tableN\\n   @Override\\n   public void shutdown(TInfo info, TCredentials c, boolean stopTabletServers)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n     if (stopTabletServers) {\\n       master.setMasterGoalState(MasterGoalState.CLEAN_STOP);\\n       EventCoordinator.Listener eventListener = master.nextEvent.getListener();\\n@@ -261,7 +264,8 @@ public void shutdown(TInfo info, TCredentials c, boolean stopTabletServers)\\n   @Override\\n   public void shutdownTabletServer(TInfo info, TCredentials c, String tabletServer, boolean force)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     final TServerInstance doomed = master.tserverSet.find(tabletServer);\\n     if (!force) {\\n@@ -333,15 +337,17 @@ public void reportTabletStatus(TInfo info, TCredentials credentials, String serv\\n   @Override\\n   public void setMasterGoalState(TInfo info, TCredentials c, MasterGoalState state)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     master.setMasterGoalState(state);\\n   }\\n \\n   @Override\\n   public void removeSystemProperty(TInfo info, TCredentials c, String property)\\n       throws ThriftSecurityException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     try {\\n       SystemPropUtil.removeSystemProperty(master.getContext(), property);\\n@@ -355,7 +361,8 @@ public void removeSystemProperty(TInfo info, TCredentials c, String property)\\n   @Override\\n   public void setSystemProperty(TInfo info, TCredentials c, String property, String value)\\n       throws ThriftSecurityException, TException {\\n-    master.security.canPerformSystemActions(c);\\n+    if (!master.security.canPerformSystemActions(c))\\n+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);\\n \\n     try {\\n       SystemPropUtil.setSystemProperty(master.getContext(), property, value);'}}",
            "message_norm":"throw exceptions when permissions checks fail (#1828)\n\n(cherry-picked for 2.0.1)\n\nadd and throw missing exceptions when permissions checks fail. this\nprevents certain operations that the user does not have privileges to\nperform from succeeding anyway.",
            "language":"en",
            "entities":"[('permissions', 'SECWORD', ''), ('#1828', 'ISSUE', ''), ('2.0.1', 'VERSION', ''), ('add', 'ACTION', ''), ('permissions', 'SECWORD', ''), ('prevents', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['server\/master\/src\/main\/java\/org\/apache\/accumulo\/master\/MasterClientServiceHandler.java'])",
            "num_files":1.0
        },
        {
            "index":2918,
            "vuln_id":"GHSA-rcj2-vvjx-87pm",
            "cwe_id":"{'CWE-311'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/arrow-kt\/arrow\/commit\/74198dab522393487d5344f194dc21208ab71ae8'}",
            "dataset":"osv",
            "summary":"Missing Encryption of Sensitive Data in arrow-kt Arrow arrow-kt Arrow before 0.9.0 resolved Gradle build artifacts (for compiling and building the published JARs) over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by an MITM attack.",
            "published_date":"2019-04-22",
            "chain_len":1,
            "project":"https:\/\/github.com\/arrow-kt\/arrow",
            "commit_href":"https:\/\/github.com\/arrow-kt\/arrow\/commit\/74198dab522393487d5344f194dc21208ab71ae8",
            "commit_sha":"74198dab522393487d5344f194dc21208ab71ae8",
            "patch":"SINGLE",
            "chain_ord":"['74198dab522393487d5344f194dc21208ab71ae8']",
            "before_first_fix_commit":"{'b78924304193c4301b1c0a6cc0c253f105ed0a15'}",
            "last_fix_commit":"74198dab522393487d5344f194dc21208ab71ae8",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/19\/2019, 17:11:32",
            "message":"Fix some http vulnerabilities",
            "author":"Paco",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 4, 'total': 8}",
            "files":"{'build.gradle': {'additions': 4, 'deletions': 4, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/arrow-kt\/arrow\/raw\/74198dab522393487d5344f194dc21208ab71ae8\/build.gradle', 'patch': '@@ -39,7 +39,7 @@ buildscript {\\n             url \"https:\/\/plugins.gradle.org\/m2\/\"\\n         }\\n         jcenter()\\n-        maven { url \"http:\/\/dl.bintray.com\/kotlin\/kotlin-dev\" }\\n+        maven { url \"https:\/\/dl.bintray.com\/kotlin\/kotlin-dev\" }\\n         maven { url \"https:\/\/dl.bintray.com\/jetbrains\/markdown\/\" }\\n         maven { url \"https:\/\/dl.bintray.com\/arrow-kt\/arrow-kt\/\" }\\n     }\\n@@ -69,8 +69,8 @@ allprojects {\\n     repositories {\\n         jcenter()\\n         maven { url \\'https:\/\/kotlin.bintray.com\/kotlinx\\' }\\n-        maven { url \"http:\/\/dl.bintray.com\/kotlin\/kotlin-dev\" }\\n-        maven { url \"http:\/\/dl.bintray.com\/arrow-kt\/arrow-kt\" }\\n+        maven { url \"https:\/\/dl.bintray.com\/kotlin\/kotlin-dev\" }\\n+        maven { url \"https:\/\/dl.bintray.com\/arrow-kt\/arrow-kt\" }\\n         maven { url \"https:\/\/dl.bintray.com\/jetbrains\/markdown\/\" }\\n     }\\n }\\n@@ -252,4 +252,4 @@ dependencyUpdates {\\n \\n task checkDependenciesVersion {\\n     dependsOn dependencyUpdates\\n-}\\n\\\\ No newline at end of file\\n+}'}}",
            "message_norm":"fix some http vulnerabilities",
            "language":"sv",
            "entities":"[('fix', 'ACTION', ''), ('vulnerabilities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['build.gradle'])",
            "num_files":1.0
        },
        {
            "index":3092,
            "vuln_id":"GHSA-vc5r-xfc4-4x22",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/pimcore\/data-hub\/commit\/15d5b57af2466eebd3bbc531ead5dafa35d0a36e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in Pimcore Datahub Pimcore Datahub prior to 1.2.4 is vulnerable to stored cross-site scripting. An admin user accessing Datahub triggers the attack, which may result in the user's cookie being stolen.",
            "published_date":"2022-03-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/pimcore\/data-hub",
            "commit_href":"https:\/\/github.com\/pimcore\/data-hub\/commit\/15d5b57af2466eebd3bbc531ead5dafa35d0a36e",
            "commit_sha":"15d5b57af2466eebd3bbc531ead5dafa35d0a36e",
            "patch":"SINGLE",
            "chain_ord":"['15d5b57af2466eebd3bbc531ead5dafa35d0a36e']",
            "before_first_fix_commit":"{'1561fa5cda0d1a79139efbd2113e42a63d5602e4'}",
            "last_fix_commit":"15d5b57af2466eebd3bbc531ead5dafa35d0a36e",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/16\/2022, 13:24:41",
            "message":"follow up to https:\/\/github.com\/pimcore\/data-hub\/pull\/462",
            "author":"dpahuja",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/Controller\/ConfigController.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pimcore\/data-hub\/raw\/15d5b57af2466eebd3bbc531ead5dafa35d0a36e\/src%2FController%2FConfigController.php', 'patch': \"@@ -50,7 +50,7 @@ private function buildItem($configuration): array\\n \\n         return [\\n             'id' => $name,\\n-            'text' => $name,\\n+            'text' => htmlspecialchars($name),\\n             'type' => 'config',\\n             'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,\\n             'expandable' => false,\"}}",
            "message_norm":"follow up to https:\/\/github.com\/pimcore\/data-hub\/pull\/462",
            "language":"en",
            "entities":"[('https:\/\/github.com\/pimcore\/data-hub\/pull\/462', 'URL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Controller\/ConfigController.php'])",
            "num_files":1.0
        },
        {
            "index":624,
            "vuln_id":"GHSA-5fh3-25xr-g85h",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57'}",
            "dataset":"osv",
            "summary":"snipe-it is vulnerable to Cross-site Scripting snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-12-03",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "commit_sha":"ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "patch":"SINGLE",
            "chain_ord":"['ff81e6d5366c2cfb15618793ad919ae4cbb3ac57']",
            "before_first_fix_commit":"{'3b68a6f1befeef504c0a3263e87a2afd55abc430', '00fad35c2a6ddc9813d3322da91086eb06cb7406'}",
            "last_fix_commit":"ff81e6d5366c2cfb15618793ad919ae4cbb3ac57",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/25\/2021, 03:56:36",
            "message":"Merge pull request #10361 from snipe\/fixes\/xss_in_accessories_checkout_notes\n\nEscape notes in transformCheckedOutAccessory",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Transformers\/AccessoriesTransformer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/ff81e6d5366c2cfb15618793ad919ae4cbb3ac57\/app%2FHttp%2FTransformers%2FAccessoriesTransformer.php', 'patch': \"@@ -82,7 +82,7 @@ public function transformCheckedoutAccessory ($accessory, $accessory_users, $tot\\n                 'first_name'=> e($user->first_name),\\n                 'last_name'=> e($user->last_name),\\n                 'employee_number' =>  e($user->employee_num),\\n-                'checkout_notes' => $user->pivot->note,\\n+                'checkout_notes' => e($user->pivot->note),\\n                 'last_checkout' => Helper::getFormattedDateObject($user->pivot->created_at, 'datetime'),\\n                 'type' => 'user',\\n                 'available_actions' => ['checkin' => true]\"}}",
            "message_norm":"merge pull request #10361 from snipe\/fixes\/xss_in_accessories_checkout_notes\n\nescape notes in transformcheckedoutaccessory",
            "language":"en",
            "entities":"[('#10361', 'ISSUE', ''), ('xss_in_accessories_checkout_notes', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Transformers\/AccessoriesTransformer.php'])",
            "num_files":1.0
        },
        {
            "index":1121,
            "vuln_id":"GHSA-83rx-c8cr-6j8q",
            "cwe_id":"{'CWE-829'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/naptha\/tesseract.js\/commit\/679eba055f2a4271558e86beec3d1b70cae3fb28'}",
            "dataset":"osv",
            "summary":"Insecure Default Configuration in tesseract.js Versions of `tesseract.js` prior to 1.0.19 default to using a third-party proxy.  Requests may be proxied through `crossorigin.me` which clearly states is not suitable for production use. This may lead to instability and privacy violations.\n\n\n## Recommendation\n\nUpgrade to version 1.0.19 or later.",
            "published_date":"2019-06-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/naptha\/tesseract.js",
            "commit_href":"https:\/\/github.com\/naptha\/tesseract.js\/commit\/679eba055f2a4271558e86beec3d1b70cae3fb28",
            "commit_sha":"679eba055f2a4271558e86beec3d1b70cae3fb28",
            "patch":"SINGLE",
            "chain_ord":"['679eba055f2a4271558e86beec3d1b70cae3fb28']",
            "before_first_fix_commit":"{'06d32c6804acbf1f5af1c13966cb72a4ff864ecb'}",
            "last_fix_commit":"679eba055f2a4271558e86beec3d1b70cae3fb28",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/16\/2019, 12:34:36",
            "message":"Add stubs for error handling",
            "author":"HoldYourWaffle",
            "comments":null,
            "stats":"{'additions': 11, 'deletions': 6, 'total': 17}",
            "files":"{'src\/browser\/index.js': {'additions': 11, 'deletions': 6, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/naptha\/tesseract.js\/raw\/679eba055f2a4271558e86beec3d1b70cae3fb28\/src%2Fbrowser%2Findex.js', 'patch': '@@ -52,25 +52,30 @@ function loadImage(image, cb){\\n             var im = new Image\\n             im.src = image;\\n             im.onload = e => loadImage(im, cb);\\n+            \/\/im.onerror = e => ?; TODO handle error\\n             return\\n         }else{\\n             var xhr = new XMLHttpRequest();\\n             xhr.open(\\'GET\\', image, true)\\n             xhr.responseType = \"blob\";\\n-            xhr.onload = e => loadImage(xhr.response, cb);\\n-            xhr.onerror = function(e){\\n-                if(\/^https?:\\\\\/\\\\\/\/.test(image) && !\/^https:\\\\\/\\\\\/crossorigin.me\/.test(image)){\\n-                    console.debug(\\'Attempting to load image with CORS proxy\\')\\n-                    loadImage(\\'https:\/\/crossorigin.me\/\\' + image, cb)\\n+            \\n+            xhr.onload = e => {\\n+                if (xhr.status >= 400){\\n+                    \/\/TODO handle error\\n+                }else{\\n+                    loadImage(xhr.response, cb);\\n                 }\\n-            }\\n+            };\\n+            \/\/xhr.onerror = e => ?; TODO handle error\\n+            \\n             xhr.send(null)\\n             return\\n         }\\n     }else if(image instanceof File){\\n         \/\/ files\\n         var fr = new FileReader()\\n         fr.onload = e => loadImage(fr.result, cb);\\n+        \/\/fr.onerror = e => ?; TODO handle error\\n         fr.readAsDataURL(image)\\n         return\\n     }else if(image instanceof Blob){'}}",
            "message_norm":"add stubs for error handling",
            "language":"da",
            "entities":"[('add', 'ACTION', ''), ('error handling', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/browser\/index.js'])",
            "num_files":1.0
        },
        {
            "index":454,
            "vuln_id":"GHSA-4p8f-mmfj-r45g",
            "cwe_id":"{'CWE-79'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/fatfreecrm\/fat_free_crm\/commit\/6d60bc8ed010c4eda05d6645c64849f415f68d65'}",
            "dataset":"osv",
            "summary":"Cross-site scripting in fat_free_crm Fat Free CRM before 0.18.1 has XSS in the tags_helper in app\/helpers\/tags_helper.rb.",
            "published_date":"2019-08-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/fatfreecrm\/fat_free_crm",
            "commit_href":"https:\/\/github.com\/fatfreecrm\/fat_free_crm\/commit\/6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "commit_sha":"6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "patch":"SINGLE",
            "chain_ord":"['6d60bc8ed010c4eda05d6645c64849f415f68d65']",
            "before_first_fix_commit":"{'557fe238a65ca94ce21e3940724ab96e55e1b27d'}",
            "last_fix_commit":"6d60bc8ed010c4eda05d6645c64849f415f68d65",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/26\/2018, 23:55:55",
            "message":"Context-sensitive XSS bugfix.",
            "author":"Antonin Steinhauser",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/helpers\/tags_helper.rb': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/fatfreecrm\/fat_free_crm\/raw\/6d60bc8ed010c4eda05d6645c64849f415f68d65\/app%2Fhelpers%2Ftags_helper.rb', 'patch': '@@ -17,7 +17,7 @@ def tags_for_index(model)\\n       elsif !query.include?(hashtag)\\n         query += \" #{hashtag}\"\\n       end\\n-      out << link_to_function(tag, \"crm.search_tagged(\\'#{query}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n+      out << link_to_function(tag, \"crm.search_tagged(\\'#{escape_javascript(query)}\\', \\'#{model.class.to_s.tableize}\\')\", title: tag)\\n     end\\n   end'}}",
            "message_norm":"context-sensitive xss bugfix.",
            "language":"fr",
            "entities":"[('sensitive', 'SECWORD', ''), ('xss', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/helpers\/tags_helper.rb'])",
            "num_files":1.0
        },
        {
            "index":92,
            "vuln_id":"GHSA-2gw2-8q9w-cw8p",
            "cwe_id":"{'CWE-426'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/ffi\/ffi\/commit\/e0fe486df0e117ed67b0282b6ada04b7214ca05c', 'https:\/\/github.com\/ffi\/ffi\/commit\/09e0c6076466b4383da7fa4e13f714311109945a'}",
            "dataset":"osv",
            "summary":"Ruby-ffi has a DLL loading issue  ruby-ffi version 1.9.23 and earlier has a DLL loading issue which can be hijacked on Windows OS, when a Symbol is used as DLL name instead of a String This vulnerability appears to have been fixed in v1.9.24 and later.",
            "published_date":"2018-08-31",
            "chain_len":2,
            "project":"https:\/\/github.com\/ffi\/ffi",
            "commit_href":"https:\/\/github.com\/ffi\/ffi\/commit\/e0fe486df0e117ed67b0282b6ada04b7214ca05c",
            "commit_sha":"e0fe486df0e117ed67b0282b6ada04b7214ca05c",
            "patch":"MULTI",
            "chain_ord":"['e0fe486df0e117ed67b0282b6ada04b7214ca05c', '09e0c6076466b4383da7fa4e13f714311109945a']",
            "before_first_fix_commit":"{'e0fe486df0e117ed67b0282b6ada04b7214ca05c'}",
            "last_fix_commit":"09e0c6076466b4383da7fa4e13f714311109945a",
            "chain_ord_pos":1.0,
            "commit_datetime":"06\/01\/2018, 20:18:25",
            "message":"Don't treat Symbol args different to Strings in ffi_lib\n\nSymbols were sent directly to FFI::DynamicLibrary.open in the first\nattempt, resulting in a TypeError, so that only the mangled library\nname was actually loaded.\n\nThis moves conversion to String to the front, so that subsequent\ncalls can assume Strings only.",
            "author":"Lars Kanis",
            "comments":"{'com_1': {'author': 'Cbeg-76', 'datetime': '08\/23\/2019, 15:31:30', 'body': 'gem install ffi'}}",
            "stats":"{'additions': 1, 'deletions': 3, 'total': 4}",
            "files":"{'lib\/ffi\/library.rb': {'additions': 1, 'deletions': 3, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ffi\/ffi\/raw\/e0fe486df0e117ed67b0282b6ada04b7214ca05c\/lib%2Fffi%2Flibrary.rb', 'patch': '@@ -43,7 +43,6 @@ module FFI\\n   #  FFI.map_library_name \\'jpeg\\'  # -> \"jpeg.dll\"\\n   def self.map_library_name(lib)\\n     # Mangle the library name to reflect the native library naming conventions\\n-    lib = lib.to_s unless lib.kind_of?(String)\\n     lib = Library::LIBC if lib == \\'c\\'\\n \\n     if lib && File.basename(lib) == lib\\n@@ -103,7 +102,7 @@ def ffi_lib(*names)\\n           FFI::DynamicLibrary.open(nil, FFI::DynamicLibrary::RTLD_LAZY | FFI::DynamicLibrary::RTLD_LOCAL)\\n \\n         else\\n-          libnames = (name.is_a?(::Array) ? name : [ name ]).map { |n| [ n, FFI.map_library_name(n) ].uniq }.flatten.compact\\n+          libnames = (name.is_a?(::Array) ? name : [ name ]).map(&:to_s).map { |n| [ n, FFI.map_library_name(n) ].uniq }.flatten.compact\\n           lib = nil\\n           errors = {}\\n \\n@@ -126,7 +125,6 @@ def ffi_lib(*names)\\n                 retry\\n               else\\n                 # TODO better library lookup logic\\n-                libname = libname.to_s\\n                 unless libname.start_with?(\"\/\")\\n                   path = [\\'\/usr\/lib\/\\',\\'\/usr\/local\/lib\/\\'].find do |pth|\\n                     File.exist?(pth + libname)'}}",
            "message_norm":"don't treat symbol args different to strings in ffi_lib\n\nsymbols were sent directly to ffi::dynamiclibrary.open in the first\nattempt, resulting in a typeerror, so that only the mangled library\nname was actually loaded.\n\nthis moves conversion to string to the front, so that subsequent\ncalls can assume strings only.",
            "language":"en",
            "entities":"[('typeerror', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/ffi\/library.rb'])",
            "num_files":1.0
        },
        {
            "index":348,
            "vuln_id":"GHSA-43jf-985q-588j",
            "cwe_id":"{'CWE-617'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645'}",
            "dataset":"osv",
            "summary":"Multiple `CHECK`-fails in `function.cc` in TensowFlow ### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/a1320ec1eac186da1d03f033109191f715b2b130\/tensorflow\/core\/framework\/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2022-02-09",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/3d89911481ba6ebe8c88c1c0b595412121e6c645",
            "commit_sha":"3d89911481ba6ebe8c88c1c0b595412121e6c645",
            "patch":"MULTI",
            "chain_ord":"['3d89911481ba6ebe8c88c1c0b595412121e6c645', 'dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2']",
            "before_first_fix_commit":"{'955059813cc325dc1db5e2daa6221271406d4439'}",
            "last_fix_commit":"dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/12\/2021, 16:12:05",
            "message":"Eliminate `CHECK`-fail from `function.cc`.\n\nPiperOrigin-RevId: 409414744\nChange-Id: Ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 1, 'total': 4}",
            "files":"{'tensorflow\/core\/framework\/function.cc': {'additions': 3, 'deletions': 1, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/3d89911481ba6ebe8c88c1c0b595412121e6c645\/tensorflow%2Fcore%2Fframework%2Ffunction.cc', 'patch': '@@ -181,7 +181,9 @@ class FunctionInstantiationHelper {\\n     DataTypeVector dtypes;\\n     TF_RETURN_IF_ERROR(\\n         ArgNumType(attr_values, arg_def, &is_type_list, &dtypes));\\n-    CHECK_GE(dtypes.size(), size_t{1});\\n+    if (dtypes.size() < size_t{1}) {\\n+      return errors::Internal(\"Expected a list of at least one dtype\");\\n+    }\\n     int arg_index = result_.nodes.size();\\n     TF_RETURN_IF_ERROR(\\n         AddItem(arg_def.name(), {true, arg_index, 0, is_type_list, dtypes}));'}}",
            "message_norm":"eliminate `check`-fail from `function.cc`.\n\npiperorigin-revid: 409414744\nchange-id: ic854e12ab2edb88b165d32e2d632c4ee654d71ad",
            "language":"it",
            "entities":"[('409414744', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/framework\/function.cc'])",
            "num_files":1.0
        },
        {
            "index":2758,
            "vuln_id":"GHSA-qhh5-9738-g9mx",
            "cwe_id":"{'CWE-276'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/apache\/incubator-dolphinscheduler\/commit\/b8a9e2e00f2f207ae60c913a7173b59405ff95f1'}",
            "dataset":"osv",
            "summary":"Incorrect Default Permissions in Apache DolphinScheduler Versions of Apache DolphinScheduler prior to 1.3.2 allowed an ordinary user under any tenant to override another users password through the API interface.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/apache\/incubator-dolphinscheduler",
            "commit_href":"https:\/\/github.com\/apache\/incubator-dolphinscheduler\/commit\/b8a9e2e00f2f207ae60c913a7173b59405ff95f1",
            "commit_sha":"b8a9e2e00f2f207ae60c913a7173b59405ff95f1",
            "patch":"SINGLE",
            "chain_ord":"['b8a9e2e00f2f207ae60c913a7173b59405ff95f1']",
            "before_first_fix_commit":"{'0505ebf45d93fc1518386804ceffa6b36595f9c5'}",
            "last_fix_commit":"b8a9e2e00f2f207ae60c913a7173b59405ff95f1",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/18\/2020, 06:07:47",
            "message":"modify general user can't create,delete,update token (#3538)\n\nCo-authored-by: qiaozhanwei <qiaozhanwei@analysys.com.cn>",
            "author":"qiaozhanwei",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 8, 'total': 15}",
            "files":"{'dolphinscheduler-api\/src\/main\/java\/org\/apache\/dolphinscheduler\/api\/service\/AccessTokenService.java': {'additions': 7, 'deletions': 8, 'changes': 15, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/apache\/dolphinscheduler\/raw\/b8a9e2e00f2f207ae60c913a7173b59405ff95f1\/dolphinscheduler-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdolphinscheduler%2Fapi%2Fservice%2FAccessTokenService.java', 'patch': '@@ -84,7 +84,9 @@ public Map<String, Object> queryAccessTokenList(User loginUser, String searchVal\\n      *\/\\n     public Map<String, Object> createToken(User loginUser, int userId, String expireTime, String token) {\\n         Map<String, Object> result = new HashMap<>(5);\\n-        if(check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)){\\n+\\n+        if (!hasPerm(loginUser,userId)){\\n+            putMsg(result, Status.USER_NO_OPERATION_PERM);\\n             return result;\\n         }\\n \\n@@ -140,10 +142,6 @@ public Map<String, Object> generateToken(User loginUser, int userId, String expi\\n     public Map<String, Object> delAccessTokenById(User loginUser, int id) {\\n         Map<String, Object> result = new HashMap<>(5);\\n \\n-        if(check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)){\\n-            return result;\\n-        }\\n-\\n         AccessToken accessToken = accessTokenMapper.selectById(id);\\n \\n         if (accessToken == null) {\\n@@ -152,8 +150,7 @@ public Map<String, Object> delAccessTokenById(User loginUser, int id) {\\n             return result;\\n         }\\n \\n-        if (loginUser.getId() != accessToken.getUserId() &&\\n-                loginUser.getUserType() != UserType.ADMIN_USER) {\\n+        if (!hasPerm(loginUser,accessToken.getUserId())){\\n             putMsg(result, Status.USER_NO_OPERATION_PERM);\\n             return result;\\n         }\\n@@ -176,9 +173,11 @@ public Map<String, Object> delAccessTokenById(User loginUser, int id) {\\n     public Map<String, Object> updateToken(User loginUser, int id, int userId, String expireTime, String token) {\\n         Map<String, Object> result = new HashMap<>(5);\\n \\n-        if(check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)){\\n+        if (!hasPerm(loginUser,userId)){\\n+            putMsg(result, Status.USER_NO_OPERATION_PERM);\\n             return result;\\n         }\\n+\\n         AccessToken accessToken = accessTokenMapper.selectById(id);\\n         if (accessToken == null) {\\n             logger.error(\"access token not exist,  access token id {}\", id);'}}",
            "message_norm":"modify general user can't create,delete,update token (#3538)\n\nco-authored-by: qiaozhanwei <qiaozhanwei@analysys.com.cn>",
            "language":"en",
            "entities":"[('update', 'ACTION', ''), ('#3538', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['dolphinscheduler-api\/src\/main\/java\/org\/apache\/dolphinscheduler\/api\/service\/AccessTokenService.java'])",
            "num_files":1.0
        },
        {
            "index":2952,
            "vuln_id":"GHSA-rhcw-wjcm-9h6g",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/undertow-io\/undertow\/pull\/997\/commits\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90'}",
            "dataset":"osv",
            "summary":"Denial of service in Undertow A flaw was found in the Undertow AJP connector. Malicious requests and abrupt connection closes could be triggered by an attacker using query strings with non-RFC compliant characters resulting in a denial of service. The highest threat from this vulnerability is to system availability. This affects Undertow 2.1.5.SP1, 2.0.33.SP2, and 2.2.3.SP1.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/undertow-io\/undertow",
            "commit_href":"https:\/\/github.com\/undertow-io\/undertow\/pull\/997\/commits\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "commit_sha":"98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "patch":"SINGLE",
            "chain_ord":"['98a9ab7f2d7fe7a7254eaf17d47816c452169c90']",
            "before_first_fix_commit":"{'47dc5e37cb20d8eeb4d4f632fe959d436f86128a'}",
            "last_fix_commit":"98a9ab7f2d7fe7a7254eaf17d47816c452169c90",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/29\/2020, 13:24:40",
            "message":"UNDERTOW-1813 Make PathResourceManager.getResource rethrow a SecurityException",
            "author":"Boris Unckel",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'core\/src\/main\/java\/io\/undertow\/server\/handlers\/resource\/PathResourceManager.java': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/undertow-io\/undertow\/raw\/98a9ab7f2d7fe7a7254eaf17d47816c452169c90\/core%2Fsrc%2Fmain%2Fjava%2Fio%2Fundertow%2Fserver%2Fhandlers%2Fresource%2FPathResourceManager.java', 'patch': '@@ -230,9 +230,15 @@ public Resource getResource(final String p) {\\n                 log.tracef(\"Failed to get path resource %s from path resource manager with base %s, as the path did not exist\", p, base);\\n                 return null;\\n             }\\n-        } catch (Exception e) {\\n+        } catch (IOException e) {\\n             UndertowLogger.REQUEST_LOGGER.debugf(e, \"Invalid path %s\", p);\\n             return null;\\n+        } catch (SecurityException e) {\\n+            UndertowLogger.REQUEST_LOGGER.errorf(e, \"Missing JSM permissions for path %s\", p);\\n+            throw e;\\n+        } catch (Exception e) {\\n+            UndertowLogger.REQUEST_LOGGER.debugf(e, \"Other issue for path %s\", p);\\n+            return null;\\n         }\\n     }'}}",
            "message_norm":"undertow-1813 make pathresourcemanager.getresource rethrow a securityexception",
            "language":"en",
            "entities":"[('securityexception', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['core\/src\/main\/java\/io\/undertow\/server\/handlers\/resource\/PathResourceManager.java'])",
            "num_files":1.0
        },
        {
            "index":566,
            "vuln_id":"GHSA-56wv-2wr9-3h9r",
            "cwe_id":"{'CWE-347'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1', 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/7b64e3efaa806b4daaf73bb5172af3581812f8de', 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/4a16daeaf139be20654ef58a9fe4c79dc030458c'}",
            "dataset":"osv",
            "summary":"Improper Verification of Cryptographic Signature in fastecdsa An issue was discovered in fastecdsa before 2.1.2. When using the NIST P-256 curve in the ECDSA implementation, the point at infinity is mishandled. This means that for an extreme value in k and s^-1, the signature verification fails even if the signature is correct. This behavior is not solely a usability problem. There are some threat models where an attacker can benefit by successfully guessing users for whom signature verification will fail.",
            "published_date":"2021-10-12",
            "chain_len":3,
            "project":"https:\/\/github.com\/AntonKueltz\/fastecdsa",
            "commit_href":"https:\/\/github.com\/AntonKueltz\/fastecdsa\/commit\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
            "commit_sha":"e592f106edd5acf6dacedfab2ad16fe6c735c9d1",
            "patch":"MULTI",
            "chain_ord":"['e592f106edd5acf6dacedfab2ad16fe6c735c9d1', '7b64e3efaa806b4daaf73bb5172af3581812f8de', '4a16daeaf139be20654ef58a9fe4c79dc030458c']",
            "before_first_fix_commit":"{'7b64e3efaa806b4daaf73bb5172af3581812f8de'}",
            "last_fix_commit":"4a16daeaf139be20654ef58a9fe4c79dc030458c",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/14\/2020, 09:15:41",
            "message":"Properly handle the point at infinity",
            "author":"AntonKueltz",
            "comments":null,
            "stats":"{'additions': 50, 'deletions': 1, 'total': 51}",
            "files":"{'src\/curveMath.c': {'additions': 50, 'deletions': 1, 'changes': 51, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/AntonKueltz\/fastecdsa\/raw\/e592f106edd5acf6dacedfab2ad16fe6c735c9d1\/src%2FcurveMath.c', 'patch': '@@ -15,7 +15,22 @@ int pointZZ_pEqual(const PointZZ_p * op1, const PointZZ_p * op2) {\\n }\\n \\n \\n+int pointZZ_pIsIdentityElement(const PointZZ_p * op) {\\n+    return mpz_cmp_ui(op->x, 0) == 0 && mpz_cmp_ui(op->y, 0) == 0 ? 1 : 0;\\n+}\\n+\\n+\\n+void pointZZ_pSetToIdentityElement(PointZZ_p * op) {\\n+    mpz_set_ui(op->x, 0);\\n+    mpz_set_ui(op->y, 0);\\n+}\\n+\\n+\\n void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * curve) {\\n+    if(pointZZ_pIsIdentityElement(op)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     mpz_t numer, denom, lambda;\\n     mpz_inits(numer, denom, lambda, NULL);\\n \\n@@ -45,6 +60,35 @@ void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * cu\\n \\n \\n void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2, const CurveZZ_p * curve) {\\n+    \/\/ handle identity element cases\\n+    if(pointZZ_pIsIdentityElement(op1) && pointZZ_pIsIdentityElement(op2)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    } else if(pointZZ_pIsIdentityElement(op1)) {\\n+        mpz_set(rop->x, op2->x);\\n+        mpz_set(rop->y, op2->y);\\n+        return;\\n+    } else if(pointZZ_pIsIdentityElement(op2)) {\\n+        mpz_set(rop->x, op1->x);\\n+        mpz_set(rop->y, op1->y);\\n+        return;\\n+    }\\n+\\n+    \/\/ use doubling algorithm if points are equal\\n+    if(pointZZ_pEqual(op1, op2)) {\\n+        pointZZ_pDouble(rop, op1, curve);\\n+        return;\\n+    }\\n+\\n+    \/\/ check if points sum to identity element\\n+    mpz_t negy;\\n+    mpz_init(negy);\\n+    mpz_sub(negy, curve->p, op2->y);\\n+    if(mpz_cmp(op1->x, op2->x) == 0 && mpz_cmp(op1->y, negy) == 0) {\\n+        mpz_clear(negy);\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n+\\n     mpz_t xdiff, ydiff, lambda;\\n     mpz_inits(xdiff, ydiff, lambda, NULL);\\n \\n@@ -67,11 +111,16 @@ void pointZZ_pAdd(PointZZ_p * rop, const PointZZ_p * op1, const PointZZ_p * op2,\\n     mpz_sub(rop->y, rop->y, op1->y);\\n     mpz_mod(rop->y, rop->y, curve->p);\\n \\n-    mpz_clears(xdiff, ydiff, lambda, NULL);\\n+    mpz_clears(negy, xdiff, ydiff, lambda, NULL);\\n }\\n \\n \\n void pointZZ_pMul(PointZZ_p * rop, const PointZZ_p * point, const mpz_t scalar, const CurveZZ_p * curve) {\\n+    \/\/ handle the identity element\\n+    if(pointZZ_pIsIdentityElement(point)) {\\n+        return pointZZ_pSetToIdentityElement(rop);\\n+    }\\n+\\n     PointZZ_p R0, R1, tmp;\\n     mpz_inits(R1.x, R1.y, tmp.x, tmp.y, NULL);\\n     mpz_init_set(R0.x, point->x);'}}",
            "message_norm":"properly handle the point at infinity",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/curveMath.c'])",
            "num_files":1.0
        },
        {
            "index":3330,
            "vuln_id":"GHSA-wwgf-3xp7-cxj4",
            "cwe_id":"{'CWE-200'}",
            "score":5.9,
            "chain":"{'https:\/\/github.com\/FriendsOfPHP\/security-advisories\/commit\/942fd37245cb724ba8cc8d6f11f075a1bd53b338'}",
            "dataset":"osv",
            "summary":"Potentially sensitive data exposure in Symfony Web Socket Bundle ### Impact\nInside `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::onPublish()`, messages are arbitrarily broadcasted to the related Topic if `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::dispatch()` does not succeed.  The `dispatch()` method can be considered to not succeed if (depending on the version of the bundle) the callback defined on a topic route is misconfigured, a `Gos\\Bundle\\WebSocketBundle\\Topic\\TopicInterface` implementation is not found for the callback, a topic which also implements `Gos\\Bundle\\WebSocketBundle\\Topic\\SecuredTopicInterface` rejects the connection, or an Exception is unhandled.  This can result in an unintended broadcast to the websocket server potentially with data that should be considered sensitive.\n\n### Patches\nIn 1.10.4, 2.6.1, and 3.3.0, `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::onPublish()` has been changed to no longer broadcast an event's data if `Gos\\Bundle\\WebSocketBundle\\Server\\App\\Dispatcher\\TopicDispatcher::dispatch()` fails.\n\n### Workarounds\nUpgrade to 1.10.4, 2.6.1, and 3.3.0\n\nNote, the 1.x branch is considered end of support as of July 1, 2020.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [this repository](https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle)",
            "published_date":"2020-07-07",
            "chain_len":1,
            "project":"https:\/\/github.com\/FriendsOfPHP\/security-advisories",
            "commit_href":"https:\/\/github.com\/FriendsOfPHP\/security-advisories\/commit\/942fd37245cb724ba8cc8d6f11f075a1bd53b338",
            "commit_sha":"942fd37245cb724ba8cc8d6f11f075a1bd53b338",
            "patch":"SINGLE",
            "chain_ord":"['942fd37245cb724ba8cc8d6f11f075a1bd53b338']",
            "before_first_fix_commit":"{'c6fc7221e152c3a73fed562ad9c815ccf258a476'}",
            "last_fix_commit":"942fd37245cb724ba8cc8d6f11f075a1bd53b338",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/06\/2020, 14:36:56",
            "message":"Add gos\/web-socket-bundle advisory",
            "author":"Michael Babker",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'gos\/web-socket-bundle\/2020-07-06-1.yaml': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'added', 'raw_url': 'https:\/\/github.com\/FriendsOfPHP\/security-advisories\/raw\/942fd37245cb724ba8cc8d6f11f075a1bd53b338\/gos%2Fweb-socket-bundle%2F2020-07-06-1.yaml', 'patch': \"@@ -0,0 +1,13 @@\\n+title:     Potentially sensitive data exposure\\n+link:      https:\/\/github.com\/GeniusesOfSymfony\/WebSocketBundle\/security\/advisories\/GHSA-wwgf-3xp7-cxj4\\n+branches:\\n+    1.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['<1.10.4']\\n+    3.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['>=2.0.0', '<2.6.1']\\n+    3.x:\\n+        time:       2020-07-06 14:08:35\\n+        versions:   ['>=3.0.0', '<3.3.0']\\n+reference: composer:\/\/gos\/web-socket-bundle\"}}",
            "message_norm":"add gos\/web-socket-bundle advisory",
            "language":"en",
            "entities":"[('add', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['gos\/web-socket-bundle\/2020-07-06-1.yaml'])",
            "num_files":1.0
        },
        {
            "index":2539,
            "vuln_id":"GHSA-p92x-r36w-9395",
            "cwe_id":"{'CWE-843'}",
            "score":5.6,
            "chain":"{'https:\/\/github.com\/aheckmann\/mpath\/commit\/89402d2880d4ea3518480a8c9847c541f2d824fc'}",
            "dataset":"osv",
            "summary":"Type confusion in mpath This affects the package mpath before 0.8.4. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition ignoreProperties.indexOf(parts[i]) !== -1 returns -1 if parts[i] is ['__proto__']. This is because the method that has been called if the input is an array is Array.prototype.indexOf() and not String.prototype.indexOf(). They behave differently depending on the type of the input.",
            "published_date":"2021-09-02",
            "chain_len":1,
            "project":"https:\/\/github.com\/aheckmann\/mpath",
            "commit_href":"https:\/\/github.com\/aheckmann\/mpath\/commit\/89402d2880d4ea3518480a8c9847c541f2d824fc",
            "commit_sha":"89402d2880d4ea3518480a8c9847c541f2d824fc",
            "patch":"SINGLE",
            "chain_ord":"['89402d2880d4ea3518480a8c9847c541f2d824fc']",
            "before_first_fix_commit":"{'03c4efef8b25425476c1e0d7b6a0fb5adc18c0f9'}",
            "last_fix_commit":"89402d2880d4ea3518480a8c9847c541f2d824fc",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/01\/2021, 15:12:24",
            "message":"fix: throw error if `parts` contains an element that isn't a string or number\n\nFix #13",
            "author":"Valeri Karpov",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 0, 'total': 12}",
            "files":"{'lib\/index.js': {'additions': 12, 'deletions': 0, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mongoosejs\/mpath\/raw\/89402d2880d4ea3518480a8c9847c541f2d824fc\/lib%2Findex.js', 'patch': \"@@ -64,6 +64,9 @@ exports.get = function(path, o, special, map) {\\n \\n   for (var i = 0; i < parts.length; ++i) {\\n     part = parts[i];\\n+    if (typeof parts[i] !== 'string' && typeof parts[i] !== 'number') {\\n+      throw new TypeError('Each segment of path to `get()` must be a string or number, got ' + typeof parts[i]);\\n+    }\\n \\n     if (Array.isArray(obj) && !\/^\\\\d+$\/.test(part)) {\\n       \/\/ reading a property from the array items\\n@@ -112,6 +115,9 @@ exports.has = function(path, o) {\\n   var len = parts.length;\\n   var cur = o;\\n   for (var i = 0; i < len; ++i) {\\n+    if (typeof parts[i] !== 'string' && typeof parts[i] !== 'number') {\\n+      throw new TypeError('Each segment of path to `has()` must be a string or number, got ' + typeof parts[i]);\\n+    }\\n     if (cur == null || typeof cur !== 'object' || !(parts[i] in cur)) {\\n       return false;\\n     }\\n@@ -143,6 +149,9 @@ exports.unset = function(path, o) {\\n     if (cur == null || typeof cur !== 'object' || !(parts[i] in cur)) {\\n       return false;\\n     }\\n+    if (typeof parts[i] !== 'string' && typeof parts[i] !== 'number') {\\n+      throw new TypeError('Each segment of path to `unset()` must be a string or number, got ' + typeof parts[i]);\\n+    }\\n     \/\/ Disallow any updates to __proto__ or special properties.\\n     if (ignoreProperties.indexOf(parts[i]) !== -1) {\\n       return false;\\n@@ -193,6 +202,9 @@ exports.set = function(path, val, o, special, map, _copying) {\\n   if (null == o) return;\\n \\n   for (var i = 0; i < parts.length; ++i) {\\n+    if (typeof parts[i] !== 'string' && typeof parts[i] !== 'number') {\\n+      throw new TypeError('Each segment of path to `set()` must be a string or number, got ' + typeof parts[i]);\\n+    }\\n     \/\/ Silently ignore any updates to `__proto__`, these are potentially\\n     \/\/ dangerous if using mpath with unsanitized data.\\n     if (ignoreProperties.indexOf(parts[i]) !== -1) {\"}}",
            "message_norm":"fix: throw error if `parts` contains an element that isn't a string or number\n\nfix #13",
            "language":"en",
            "entities":"[('error', 'FLAW', ''), ('fix', 'ACTION', ''), ('#13', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":3188,
            "vuln_id":"GHSA-vx6v-xg64-pmr8",
            "cwe_id":"{'CWE-79'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/2c7065e0c4296e0c692fb4a7ee19c7357583af30'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in django-helpdesk django-helpdesk is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting').",
            "published_date":"2021-11-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/django-helpdesk\/django-helpdesk",
            "commit_href":"https:\/\/github.com\/django-helpdesk\/django-helpdesk\/commit\/2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "commit_sha":"2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "patch":"SINGLE",
            "chain_ord":"['2c7065e0c4296e0c692fb4a7ee19c7357583af30']",
            "before_first_fix_commit":"{'3f245871ac91356fd91a4e2cea5048bcac1d833e'}",
            "last_fix_commit":"2c7065e0c4296e0c692fb4a7ee19c7357583af30",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/11\/2021, 10:32:09",
            "message":"Add function `htmlEntities`\n\n`htmlentities()` is a function which converts special characters. This allows you to show to display the string without the browser reading it as HTML.",
            "author":"lethanhphuc",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'helpdesk\/templates\/helpdesk\/ticket_list.html': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/django-helpdesk\/django-helpdesk\/raw\/2c7065e0c4296e0c692fb4a7ee19c7357583af30\/helpdesk%2Ftemplates%2Fhelpdesk%2Fticket_list.html', 'patch': '@@ -330,7 +330,11 @@ <h5 class=\"mb-0\">\\n         function get_url(row) {\\n             return \"{% url \\'helpdesk:view\\' 1234 %}\".replace(\/1234\/, row.id.toString());\\n         }\\n-\\n+        \\n+        function htmlEntities(str) {\\n+            return String(str).replace(\/&\/g, \\'&amp;\\').replace(\/<\/g, \\'&lt;\\').replace(\/>\/g, \\'&gt;\\').replace(\/\"\/g, \\'&quot;\\');\\n+        }\\n+        \\n         $(document).ready(function () {\\n             \/\/ Ticket DataTable Initialization\\n             $(\\'#ticketTable\\').DataTable({\\n@@ -366,7 +370,7 @@ <h5 class=\"mb-0\">\\n                             if (type === \\'display\\') {\\n                                 data = \\'<div class=\"tickettitle\"><a href=\"\\' + get_url(row) + \\'\" >\\' +\\n                                     row.id + \\'. \\' +\\n-                                    row.title + \\'<\/a><\/div>\\';\\n+                                    htmlEntities(row.title) + \\'<\/a><\/div>\\';\\n                             }\\n                             return data\\n                         }'}}",
            "message_norm":"add function `htmlentities`\n\n`htmlentities()` is a function which converts special characters. this allows you to show to display the string without the browser reading it as html.",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('htmlentities', 'SECWORD', ''), ('htmlentities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['helpdesk\/templates\/helpdesk\/ticket_list.html'])",
            "num_files":1.0
        },
        {
            "index":2122,
            "vuln_id":"GHSA-hrgx-p36p-89q4",
            "cwe_id":"{'CWE-89', 'CWE-95'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804'}",
            "dataset":"osv",
            "summary":"PrestaShop eval injection possible if shop vulnerable to SQL injection ### Impact\nEval injection possible if the shop is vulnerable to an SQL injection.\n\n### Patches\nThe problem is fixed in version 1.7.8.7\n\n### Workarounds\nDelete the MySQL Smarty cache feature by removing these lines in the file `config\/smarty.config.inc.php` lines 43-46 (PrestaShop 1.7) or 40-43 (PrestaShop 1.6):\n```php\nif (Configuration::get('PS_SMARTY_CACHING_TYPE') == 'mysql') {\n    include _PS_CLASS_DIR_.'Smarty\/SmartyCacheResourceMysql.php';\n    $smarty->caching_type = 'mysql';\n}\n```",
            "published_date":"2022-07-29",
            "chain_len":1,
            "project":"https:\/\/github.com\/PrestaShop\/PrestaShop",
            "commit_href":"https:\/\/github.com\/PrestaShop\/PrestaShop\/commit\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "commit_sha":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "patch":"SINGLE",
            "chain_ord":"['b6d96e7c2a4e35a44e96ffbcdfd34439b56af804']",
            "before_first_fix_commit":"{'dc8dc1faef7185ad30fc8dcb0653524d9bfb7c82', 'f342765697f5f980e4c6bb537f6575bf5e657077'}",
            "last_fix_commit":"b6d96e7c2a4e35a44e96ffbcdfd34439b56af804",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/25\/2022, 08:51:31",
            "message":"Merge pull request from GHSA-hrgx-p36p-89q4\n\nCrypt\/decrypt smarty cache in DB",
            "author":"atomiix",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'classes\/Smarty\/SmartyCacheResourceMysql.php': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/PrestaShop\/PrestaShop\/raw\/b6d96e7c2a4e35a44e96ffbcdfd34439b56af804\/classes%2FSmarty%2FSmartyCacheResourceMysql.php', 'patch': '@@ -25,6 +25,14 @@\\n  *\/\\n class Smarty_CacheResource_Mysql extends Smarty_CacheResource_Custom\\n {\\n+    \/** @var PhpEncryption *\/\\n+    private $phpEncryption;\\n+\\n+    public function __construct()\\n+    {\\n+        $this->phpEncryption = new PhpEncryption(_NEW_COOKIE_KEY_);\\n+    }\\n+\\n     \/**\\n      * fetch cached content and its modification time from data source.\\n      *\\n@@ -39,7 +47,7 @@ protected function fetch($id, $name, $cache_id, $compile_id, &$content, &$mtime)\\n     {\\n         $row = Db::getInstance()->getRow(\\'SELECT modified, content FROM \\' . _DB_PREFIX_ . \\'smarty_cache WHERE id_smarty_cache = \"\\' . pSQL($id, true) . \\'\"\\');\\n         if ($row) {\\n-            $content = $row[\\'content\\'];\\n+            $content = $this->phpEncryption->decrypt($row[\\'content\\']);\\n             $mtime = strtotime($row[\\'modified\\']);\\n         } else {\\n             $content = null;\\n@@ -87,7 +95,7 @@ protected function save($id, $name, $cache_id, $compile_id, $exp_time, $content)\\n \\t\\t\\t\"\\' . pSQL($id, true) . \\'\",\\n \\t\\t\\t\"\\' . pSQL(sha1($name)) . \\'\",\\n \\t\\t\\t\"\\' . pSQL($cache_id, true) . \\'\",\\n-\\t\\t\\t\"\\' . pSQL($content, true) . \\'\"\\n+\\t\\t\\t\"\\' . $this->phpEncryption->encrypt($content) . \\'\"\\n \\t\\t)\\');\\n \\n         return (bool) Db::getInstance()->Affected_Rows();'}}",
            "message_norm":"merge pull request from ghsa-hrgx-p36p-89q4\n\ncrypt\/decrypt smarty cache in db",
            "language":"en",
            "entities":"[('ghsa-hrgx-p36p-89q4', 'VULNID', 'GHSA'), ('crypt', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['classes\/Smarty\/SmartyCacheResourceMysql.php'])",
            "num_files":1.0
        },
        {
            "index":1813,
            "vuln_id":"GHSA-g4h2-gqm3-c9wq",
            "cwe_id":"{'CWE-681'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4f663d4b8f0bec1b48da6fa091a7d29609980fa4'}",
            "dataset":"osv",
            "summary":"Segfault in tf.raw_ops.ImmutableConst ### Impact\nCalling [`tf.raw_ops.ImmutableConst`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/raw_ops\/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.\n\n```python\n>>> import tensorflow as tf\n>>> tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=\"\/tmp\/test.txt\")\n...\nSegmentation fault\n```\n\n### Patches\nWe have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### Workarounds\nIf using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
            "commit_sha":"4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
            "patch":"SINGLE",
            "chain_ord":"['4f663d4b8f0bec1b48da6fa091a7d29609980fa4']",
            "before_first_fix_commit":"{'f0e867da82025a97524a233eaedfccfcf6295d5c'}",
            "last_fix_commit":"4f663d4b8f0bec1b48da6fa091a7d29609980fa4",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/08\/2021, 20:29:30",
            "message":"Allowlist certain data types to avoid a seg fault.\n\nPiperOrigin-RevId: 356326671\nChange-Id: I23b65b52e93798cb5a6744632d31b0f88c6b6b31",
            "author":"Amit Patankar",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/immutable_constant_op.cc': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/4f663d4b8f0bec1b48da6fa091a7d29609980fa4\/tensorflow%2Fcore%2Fkernels%2Fimmutable_constant_op.cc', 'patch': '@@ -17,6 +17,8 @@ limitations under the License.\\n \\n #include <unordered_set>\\n \\n+#include \"tensorflow\/core\/framework\/types.pb.h\"\\n+\\n namespace tensorflow {\\n \\n namespace {\\n@@ -86,6 +88,9 @@ ImmutableConstantOp::ImmutableConstantOp(OpKernelConstruction* context)\\n   OP_REQUIRES_OK(context,\\n                  context->GetAttr(kMemoryRegionNameAttr, &region_name_));\\n   OP_REQUIRES_OK(context, context->GetAttr(kDTypeAttr, &dtype_));\\n+  OP_REQUIRES(context, dtype_ != DT_RESOURCE && dtype_ != DT_VARIANT,\\n+              errors::InvalidArgument(\\n+                  \"Resource and variant dtypes are invalid for this op.\"));\\n   OP_REQUIRES_OK(context, context->GetAttr(kShapeAttr, &shape_));\\n }'}}",
            "message_norm":"allowlist certain data types to avoid a seg fault.\n\npiperorigin-revid: 356326671\nchange-id: i23b65b52e93798cb5a6744632d31b0f88c6b6b31",
            "language":"en",
            "entities":"[('fault', 'FLAW', ''), ('356326671', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/immutable_constant_op.cc'])",
            "num_files":1.0
        },
        {
            "index":3074,
            "vuln_id":"GHSA-v82p-hv3v-p6qp",
            "cwe_id":"{'CWE-20'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69'}",
            "dataset":"osv",
            "summary":"Incomplete validation in MKL requantization ### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-08-25",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/203214568f5bc237603dbab6e1fd389f1572f5c9",
            "commit_sha":"203214568f5bc237603dbab6e1fd389f1572f5c9",
            "patch":"MULTI",
            "chain_ord":"['9e62869465573cb2d9b5053f1fa02a81fce21d69', '203214568f5bc237603dbab6e1fd389f1572f5c9']",
            "before_first_fix_commit":"{'aff0d5b2883ea3de9b52f9e7cd996a34b299bf06'}",
            "last_fix_commit":"203214568f5bc237603dbab6e1fd389f1572f5c9",
            "chain_ord_pos":2.0,
            "commit_datetime":"07\/30\/2021, 23:06:23",
            "message":"Reorganize and add more validation to MKL requantization\n\nPiperOrigin-RevId: 387901341\nChange-Id: I2515b9034c64e113db0bcec8337d30643ab0a0f1",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 25, 'deletions': 15, 'total': 40}",
            "files":"{'tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc': {'additions': 25, 'deletions': 15, 'changes': 40, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/203214568f5bc237603dbab6e1fd389f1572f5c9\/tensorflow%2Fcore%2Fkernels%2Fmkl%2Fmkl_requantize_per_channel_op.cc', 'patch': '@@ -49,35 +49,45 @@ class MklRequantizePerChannelOp : public OpKernel {\\n   void Compute(OpKernelContext* ctx) override {\\n     try {\\n       const Tensor& input = ctx->input(kInputTensorIndex);\\n+      OP_REQUIRES(\\n+          ctx, input.dims() == 4,\\n+          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n+                                  \"supports 4D tensors only.\"));\\n+\\n       const Tensor& input_min_vec = ctx->input(kInputMinVecIndex);\\n+      size_t depth = input_min_vec.NumElements();\\n       float* input_min_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_min_vec.flat<float>().data()));\\n+\\n       const Tensor& input_max_vec = ctx->input(kInputMaxVecIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_max_vec.NumElements() == depth,\\n+          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n+                                  depth, \" was \", input_max_vec.NumElements()));\\n       float* input_max_vec_data = (float*)const_cast<void*>(\\n           static_cast<const void*>(input_max_vec.flat<float>().data()));\\n \\n       const Tensor& input_requested_min = ctx->input(this->kRequestMinIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_min must be a scalar\"));\\n       const float input_requested_min_float =\\n           input_requested_min.flat<float>()(0);\\n+\\n       const Tensor& input_requested_max = ctx->input(this->kRequestMaxIndex);\\n+      OP_REQUIRES(\\n+          ctx, input_requested_min.NumElements() == 1,\\n+          errors::InvalidArgument(\"requested_output_max must be a scalar\"));\\n       const float input_requested_max_float =\\n           input_requested_max.flat<float>()(0);\\n \\n-      size_t depth = input_min_vec.NumElements();\\n-      OP_REQUIRES(\\n-          ctx, input.dims() == 4,\\n-          errors::InvalidArgument(\"Current RequantizePerChannel operator\"\\n-                                  \"supports 4D tensors only.\"));\\n-      OP_REQUIRES(\\n-          ctx, input_min_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_min has incorrect size, expected \",\\n-                                  depth, \" was \", input_min_vec.dim_size(0)));\\n-      OP_REQUIRES(\\n-          ctx, input_max_vec.dim_size(0) == depth,\\n-          errors::InvalidArgument(\"input_max has incorrect size, expected \",\\n-                                  depth, \" was \", input_max_vec.dim_size(0)));\\n-\\n-      if (out_type_ == DT_QINT8) DCHECK(input_requested_min_float < 0.0f);\\n+      if (out_type_ == DT_QINT8) {\\n+        OP_REQUIRES(ctx, input_requested_min_float < 0.0f,\\n+                    errors::InvalidArgument(\\n+                        \"If out_type is QINT8, requested_output_max must be \"\\n+                        \"non negative, got \",\\n+                        input_requested_min_float));\\n+      }\\n \\n       const float factor = (out_type_ == DT_QINT8) ? 127.0f : 255.0f;\\n       const float requested_min_max ='}}",
            "message_norm":"reorganize and add more validation to mkl requantization\n\npiperorigin-revid: 387901341\nchange-id: i2515b9034c64e113db0bcec8337d30643ab0a0f1",
            "language":"en",
            "entities":"[('add', 'ACTION', ''), ('387901341', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/mkl\/mkl_requantize_per_channel_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2059,
            "vuln_id":"GHSA-hgch-jjmr-gp7w",
            "cwe_id":"{'CWE-94'}",
            "score":9.9,
            "chain":"{'https:\/\/github.com\/commenthol\/safer-eval\/commit\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5'}",
            "dataset":"osv",
            "summary":"Sandbox Breakout \/ Arbitrary Code Execution in safer-eval Versions of `safer-eval` before 1.3.2 are vulnerable to Sandbox Escape leading to Remote Code Execution. A payload using constructor properties can escape the sandbox and execute arbitrary code.\n\n\n## Recommendation\n\nUpgrade to version 1.3.2.",
            "published_date":"2019-10-17",
            "chain_len":1,
            "project":"https:\/\/github.com\/commenthol\/safer-eval",
            "commit_href":"https:\/\/github.com\/commenthol\/safer-eval\/commit\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "commit_sha":"1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "patch":"SINGLE",
            "chain_ord":"['1c29f6a6e304fb650c05056e217e457a0d2cc3c5']",
            "before_first_fix_commit":"{'74e5bb845c3cf1cab4f0a5a8dea08685c20970c7'}",
            "last_fix_commit":"1c29f6a6e304fb650c05056e217e457a0d2cc3c5",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/09\/2019, 20:54:53",
            "message":"fix: disallow usage of Object.constructor",
            "author":"commenthol",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 1, 'total': 5}",
            "files":"{'src\/index.js': {'additions': 4, 'deletions': 1, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/commenthol\/safer-eval\/raw\/1c29f6a6e304fb650c05056e217e457a0d2cc3c5\/src%2Findex.js', 'patch': '@@ -40,8 +40,11 @@ class SaferEval {\\n     if (typeof code !== \\'string\\') {\\n       throw new TypeError(\\'not a string\\')\\n     }\\n+    let src = \\'Object.constructor = function () {};\\\\n\\'\\n+    src += \\'return \\' + code + \\';\\\\n\\'\\n+\\n     return vm.runInContext(\\n-      \\'(function () {\"use strict\"; return \\' + code + \\'})()\\',\\n+      \\'(function () {\"use strict\"; \\' + src + \\'})()\\',\\n       this._context,\\n       this._options\\n     )'}}",
            "message_norm":"fix: disallow usage of object.constructor",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1671,
            "vuln_id":"GHSA-f5fj-7265-jxhj",
            "cwe_id":"{'CWE-200'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/go-gitea\/gitea\/commit\/194a11eb110cd98fc2ba52861abf7770db6885a3'}",
            "dataset":"osv",
            "summary":"Information Exposure Gitea version prior to version 1.5.1 contains a CWE-200 vulnerability that can result in Exposure of users private email addresses. This attack appear to be exploitable via Watch a repository to receive email notifications. Emails received contain the other recipients even if they have the email set as private. This vulnerability appears to have been fixed in 1.5.1.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/go-gitea\/gitea",
            "commit_href":"https:\/\/github.com\/go-gitea\/gitea\/commit\/194a11eb110cd98fc2ba52861abf7770db6885a3",
            "commit_sha":"194a11eb110cd98fc2ba52861abf7770db6885a3",
            "patch":"SINGLE",
            "chain_ord":"['194a11eb110cd98fc2ba52861abf7770db6885a3']",
            "before_first_fix_commit":"{'912953e82a851492c7fd1f2e9c10d3a1955b625c'}",
            "last_fix_commit":"194a11eb110cd98fc2ba52861abf7770db6885a3",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/24\/2018, 04:41:26",
            "message":"Don't disclose emails of all users when sending out emails (#4664)",
            "author":"techknowlogick",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 2, 'total': 12}",
            "files":"{'models\/issue_mail.go': {'additions': 10, 'deletions': 2, 'changes': 12, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/go-gitea\/gitea\/raw\/194a11eb110cd98fc2ba52861abf7770db6885a3\/models%2Fissue_mail.go', 'patch': '@@ -1,4 +1,5 @@\\n \/\/ Copyright 2016 The Gogs Authors. All rights reserved.\\n+\/\/ Copyright 2018 The Gitea Authors. All rights reserved.\\n \/\/ Use of this source code is governed by a MIT-style\\n \/\/ license that can be found in the LICENSE file.\\n \\n@@ -87,7 +88,9 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\t\\tnames = append(names, participants[i].Name)\\n \\t}\\n \\n-\\tSendIssueCommentMail(issue, doer, content, comment, tos)\\n+\\tfor _, to := range tos {\\n+\\t\\tSendIssueCommentMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\t\/\/ Mail mentioned people and exclude watchers.\\n \\tnames = append(names, doer.Name)\\n@@ -99,7 +102,12 @@ func mailIssueCommentToParticipants(e Engine, issue *Issue, doer *User, content\\n \\n \\t\\ttos = append(tos, mentions[i])\\n \\t}\\n-\\tSendIssueMentionMail(issue, doer, content, comment, getUserEmailsByNames(e, tos))\\n+\\n+\\temails := getUserEmailsByNames(e, tos)\\n+\\n+\\tfor _, to := range emails {\\n+\\t\\tSendIssueMentionMail(issue, doer, content, comment, []string{to})\\n+\\t}\\n \\n \\treturn nil\\n }'}}",
            "message_norm":"don't disclose emails of all users when sending out emails (#4664)",
            "language":"en",
            "entities":"[('disclose', 'SECWORD', ''), ('#4664', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['models\/issue_mail.go'])",
            "num_files":1.0
        },
        {
            "index":723,
            "vuln_id":"GHSA-5xvc-vgmp-jgc3",
            "cwe_id":"{'CWE-284'}",
            "score":9.1,
            "chain":"{'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/9e200d974e0cb85d828a6afedb8ab90a37878f28', 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "dataset":"osv",
            "summary":"Improper Access Control in jupyterhub-firstuseauthenticator ### Impact\n\nWhen JupyterHub is used with FirstUseAuthenticator, the vulnerability allows unauthorized access to any user's account if `create_users=True` and the username is known or guessed.\n\n### Patches\n\nUpgrade to jupyterhub-firstuseauthenticator to 1.0, or apply patch https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38.patch\n\n### Workarounds\n\nIf you cannot upgrade, there is no complete workaround, but it can be mitigated.\n\nIf you cannot upgrade yet, you can disable user creation with `c.FirstUseAuthenticator.create_users = False`, which will only allow login with fully normalized usernames for already existing users prior to jupyterhub-firstuserauthenticator 1.0. If any users have never logged in with their normalized username (i.e. lowercase), they will still be vulnerable until you can patch or upgrade.",
            "published_date":"2021-10-28",
            "chain_len":2,
            "project":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator",
            "commit_href":"https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/pull\/38\/commits\/9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "commit_sha":"9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "patch":"MULTI",
            "chain_ord":"['32b21898fb2b53b1a2e36270de6854ad70e9e9bf', '9e200d974e0cb85d828a6afedb8ab90a37878f28']",
            "before_first_fix_commit":"{'32b21898fb2b53b1a2e36270de6854ad70e9e9bf'}",
            "last_fix_commit":"9e200d974e0cb85d828a6afedb8ab90a37878f28",
            "chain_ord_pos":2.0,
            "commit_datetime":"10\/26\/2021, 07:00:03",
            "message":"Use normalize_username instead of .lower\n\nallows for following normalization changes",
            "author":"Min RK",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'firstuseauthenticator\/firstuseauthenticator.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jupyterhub\/firstuseauthenticator\/raw\/9e200d974e0cb85d828a6afedb8ab90a37878f28\/firstuseauthenticator%2Ffirstuseauthenticator.py', 'patch': \"@@ -138,7 +138,7 @@ def validate_username(self, name):\\n \\n     @gen.coroutine\\n     def authenticate(self, handler, data):\\n-        username = data['username'].lower()\\n+        username = self.normalize_username(data['username'])\\n \\n         if not self.create_users:\\n             if not self._user_exists(username):\"}}",
            "message_norm":"use normalize_username instead of .lower\n\nallows for following normalization changes",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['firstuseauthenticator\/firstuseauthenticator.py'])",
            "num_files":1.0
        },
        {
            "index":1004,
            "vuln_id":"GHSA-79jw-2f46-wv22",
            "cwe_id":"{'CWE-74'}",
            "score":7.2,
            "chain":"{'https:\/\/github.com\/octobercms\/library\/commit\/c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe'}",
            "dataset":"osv",
            "summary":"Authenticated remote code execution in October CMS ### Impact\n\nAn authenticated user with the permissions to create, modify and delete website pages can exploit this vulnerability to bypass  `cms.safe_mode` \/ `cms.enableSafeMode` in order to execute arbitrary code.\n\n- This issue only affects admin panels that rely on safe mode and restricted permissions.\n- To exploit this vulnerability, an attacker must first have access to the backend area.\n\n### Patches\n\nThe issue has been patched in Build 474 (v1.0.474) and v1.1.10.\n\n### Workarounds\n\nApply https:\/\/github.com\/octobercms\/library\/commit\/c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe to your installation manually if unable to upgrade to Build 474 or v1.1.10.\n\n### References\n\nCredits to:\n- David Miller\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n- Email us at [hello@octobercms.com](mailto:hello@octobercms.com)",
            "published_date":"2022-02-23",
            "chain_len":1,
            "project":"https:\/\/github.com\/octobercms\/library",
            "commit_href":"https:\/\/github.com\/octobercms\/library\/commit\/c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe",
            "commit_sha":"c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe",
            "patch":"SINGLE",
            "chain_ord":"['c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe']",
            "before_first_fix_commit":"{'8f06437ab772b48dd7ea7079c293f436438f867d'}",
            "last_fix_commit":"c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/20\/2022, 00:25:32",
            "message":"Backport fix from 2.0",
            "author":"Samuel Georges",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 1, 'total': 3}",
            "files":"{'src\/Halcyon\/Processors\/SectionParser.php': {'additions': 2, 'deletions': 1, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/octobercms\/library\/raw\/c393c5ce9ca2c5acc3ed6c9bb0dab5ffd61965fe\/src%2FHalcyon%2FProcessors%2FSectionParser.php', 'patch': \"@@ -72,7 +72,8 @@ public static function render($data, $options = [])\\n             }\\n         }\\n \\n-        $content[] = $markup;\\n+        $sections = preg_split('\/^'.preg_quote(self::SECTION_SEPARATOR).'\\\\s*$\/m', $markup, -1);\\n+        $content[] = end($sections);\\n \\n         $content = trim(implode(PHP_EOL.self::SECTION_SEPARATOR.PHP_EOL, $content));\"}}",
            "message_norm":"backport fix from 2.0",
            "language":"en",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/Halcyon\/Processors\/SectionParser.php'])",
            "num_files":1.0
        },
        {
            "index":2876,
            "vuln_id":"GHSA-r659-8xfp-j327",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Vincit\/objection.js\/commit\/46b842a6bc897198b83f41ac85c92864b991d7e9', 'https:\/\/github.com\/vincit\/objection.js\/commit\/b41aab8dcd78f426f7468dcda541a7aca18a66a6'}",
            "dataset":"osv",
            "summary":"objection.js Prototype Pollution vulnerability before v2.2.16 objection.js prior to version 2.2.16 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'). This issue is patched in version 2.2.16.",
            "published_date":"2021-09-07",
            "chain_len":2,
            "project":"https:\/\/github.com\/Vincit\/objection.js",
            "commit_href":"https:\/\/github.com\/Vincit\/objection.js\/commit\/46b842a6bc897198b83f41ac85c92864b991d7e9",
            "commit_sha":"46b842a6bc897198b83f41ac85c92864b991d7e9",
            "patch":"MULTI",
            "chain_ord":"['b41aab8dcd78f426f7468dcda541a7aca18a66a6', '46b842a6bc897198b83f41ac85c92864b991d7e9']",
            "before_first_fix_commit":"{'260b284a1cbfb044991894c5a3cf3dedc8ce7267'}",
            "last_fix_commit":"46b842a6bc897198b83f41ac85c92864b991d7e9",
            "chain_ord_pos":2.0,
            "commit_datetime":"09\/03\/2021, 09:24:20",
            "message":"Security Fix for Prototype Pollution\n\nFix prototype pollution when path components are not strings",
            "author":"ready-research",
            "comments":null,
            "stats":"{'additions': 7, 'deletions': 1, 'total': 8}",
            "files":"{'lib\/utils\/objectUtils.js': {'additions': 7, 'deletions': 1, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Vincit\/objection.js\/raw\/46b842a6bc897198b83f41ac85c92864b991d7e9\/lib%2Futils%2FobjectUtils.js', 'patch': \"@@ -225,6 +225,9 @@ function set(obj, path, value) {\\n \\n   for (let i = 0, l = path.length - 1; i < l; ++i) {\\n     const key = path[i];\\n+    if (key === '__proto__') {\\n+      return false;\\n+    }\\n     let child = obj[key];\\n \\n     if (!isObject(child)) {\\n@@ -252,7 +255,10 @@ function set(obj, path, value) {\\n function zipObject(keys, values) {\\n   const out = {};\\n \\n-  for (let i = 0, l = keys.length; i < l; ++i) {\\n+  for (let i = 0, l = keys.length; i < l; ++i) {    \\n+    if (keys[i] === '__proto__') {\\n+      return false;\\n+    }\\n     out[keys[i]] = values[i];\\n   }\"}}",
            "message_norm":"security fix for prototype pollution\n\nfix prototype pollution when path components are not strings",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/utils\/objectUtils.js'])",
            "num_files":1.0
        },
        {
            "index":2343,
            "vuln_id":"GHSA-m43c-649m-pm48",
            "cwe_id":"{'CWE-190'}",
            "score":8.8,
            "chain":"{'https:\/\/github.com\/opencv\/opencv\/pull\/9726\/commits\/c58152d94ba878b2d7d76bcac59146312199b9eb'}",
            "dataset":"osv",
            "summary":"Integer Overflow or Wraparound in OpenCV. In opencv\/modules\/imgcodecs\/src\/utils.cpp, functions FillUniColor and FillUniGray do not check the input length, which can lead to integer overflow. If the image is from remote, may lead to remote code execution or denial of service. This affects Opencv 3.3 (corresponding with OpenCV-Python 3.3.0.9) and earlier.",
            "published_date":"2021-10-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/opencv\/opencv",
            "commit_href":"https:\/\/github.com\/opencv\/opencv\/pull\/9726\/commits\/c58152d94ba878b2d7d76bcac59146312199b9eb",
            "commit_sha":"c58152d94ba878b2d7d76bcac59146312199b9eb",
            "patch":"SINGLE",
            "chain_ord":"['c58152d94ba878b2d7d76bcac59146312199b9eb']",
            "before_first_fix_commit":"{'7475d23fec4bb7c7e2b662a0fa022d706dd2b520'}",
            "last_fix_commit":"c58152d94ba878b2d7d76bcac59146312199b9eb",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/27\/2017, 06:04:01",
            "message":"Fix out of bounds write",
            "author":"blendin",
            "comments":"{'com_1': {'author': 'tyomitch', 'datetime': '04\/29\/2019, 11:17:11', 'body': 'CVE-2017-1000450'}}",
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'modules\/imgcodecs\/src\/grfmt_bmp.cpp': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/opencv\/opencv\/raw\/c58152d94ba878b2d7d76bcac59146312199b9eb\/modules%2Fimgcodecs%2Fsrc%2Fgrfmt_bmp.cpp', 'patch': '@@ -375,6 +375,9 @@ decode_rle4_bad: ;\\n                                                 gray_palette[code] );\\n \\n                         line_end_flag = y - prev_y;\\n+\\n+                        if( y >= m_height )\\n+                            break;\\n                     }\\n                     else if( code > 2 ) \/\/ absolute mode\\n                     {'}}",
            "message_norm":"fix out of bounds write",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bounds write', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['modules\/imgcodecs\/src\/grfmt_bmp.cpp'])",
            "num_files":1.0
        },
        {
            "index":2111,
            "vuln_id":"GHSA-hpx4-xjp7-m4vr",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/f623d05d0c3487ae24c4f13907e4709484e5bf41'}",
            "dataset":"osv",
            "summary":"Stored cross-site scripting in Snipe-IT Snipe-IT prior to version 5.4.3 is vulnerable to stored cross-site scripting because the input to the `checked_out_to` parameter is not escaped. The vulnerability is capable of stealing a user's cookie.",
            "published_date":"2022-04-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/f623d05d0c3487ae24c4f13907e4709484e5bf41",
            "commit_sha":"f623d05d0c3487ae24c4f13907e4709484e5bf41",
            "patch":"SINGLE",
            "chain_ord":"['f623d05d0c3487ae24c4f13907e4709484e5bf41']",
            "before_first_fix_commit":"{'ef7f21e3ba01f13da2e656358343ba1236a122de'}",
            "last_fix_commit":"f623d05d0c3487ae24c4f13907e4709484e5bf41",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/24\/2022, 14:27:11",
            "message":"Escape checkout target name\n\nSigned-off-by: snipe <snipe@snipe.net>",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'app\/Http\/Transformers\/DepreciationReportTransformer.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/f623d05d0c3487ae24c4f13907e4709484e5bf41\/app%2FHttp%2FTransformers%2FDepreciationReportTransformer.php', 'patch': \"@@ -98,7 +98,7 @@ public function transformAsset(Asset $asset)\\n             'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),\\n             'book_value' => Helper::formatCurrencyOutput($depreciated_value),\\n             'monthly_depreciation' => $monthly_depreciation,\\n-            'checked_out_to' => $checkout_target,\\n+            'checked_out_to' => ($checkout_target) ? e($checkout_target) : null,\\n             'diff' =>  Helper::formatCurrencyOutput($diff),\\n             'number_of_months' =>  ($asset->model && $asset->model->depreciation) ? e($asset->model->depreciation->months) : null,\\n             'depreciation' => (($asset->model) && ($asset->model->depreciation)) ?  e($asset->model->depreciation->name) : null,\"}}",
            "message_norm":"escape checkout target name\n\nsigned-off-by: snipe <snipe@snipe.net>",
            "language":"en",
            "entities":"[('escape', 'SECWORD', ''), ('snipe@snipe.net', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Transformers\/DepreciationReportTransformer.php'])",
            "num_files":1.0
        },
        {
            "index":1579,
            "vuln_id":"GHSA-cph5-m8f7-6c5x",
            "cwe_id":"{'CWE-697', 'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/axios\/axios\/commit\/5b457116e31db0e88fede6c428e969e87f290929'}",
            "dataset":"osv",
            "summary":"Incorrect Comparison in axios axios is vulnerable to Inefficient Regular Expression Complexity",
            "published_date":"2021-09-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/axios\/axios",
            "commit_href":"https:\/\/github.com\/axios\/axios\/commit\/5b457116e31db0e88fede6c428e969e87f290929",
            "commit_sha":"5b457116e31db0e88fede6c428e969e87f290929",
            "patch":"SINGLE",
            "chain_ord":"['5b457116e31db0e88fede6c428e969e87f290929']",
            "before_first_fix_commit":"{'5bc9ea24dda14e74def0b8ae9cdb3fa1a0c77773'}",
            "last_fix_commit":"5b457116e31db0e88fede6c428e969e87f290929",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/30\/2021, 12:33:43",
            "message":"Security fix for ReDoS (#3980)",
            "author":"ready-research",
            "comments":"{'com_1': {'author': 'kanatBektursyn', 'datetime': '09\/02\/2021, 07:27:22', 'body': 'What is the usage of self made trim function?'}, 'com_2': {'author': 'muditjuneja', 'datetime': '09\/03\/2021, 13:40:44', 'body': 'Something related to this : https:\/\/app.snyk.io\/vuln\/SNYK-JS-AXIOS-1579269?'}, 'com_3': {'author': 'vargaurav', 'datetime': '09\/05\/2021, 05:56:14', 'body': 'This is getting flagged in snyk.'}, 'com_4': {'author': 'tbogard', 'datetime': '09\/06\/2021, 01:01:48', 'body': '> What is the usage of self made trim function?\\r\\n\\r\\nProbably an intended custom made trim function with the intention to be faster... but ended in bloating resources...'}, 'com_5': {'author': 'catscarlet', 'datetime': '09\/08\/2021, 03:25:02', 'body': 'But, but `str.trim()` should not only deal with \\\\s but also deal with \\\\uFEFF and \\\\xA0. \\r\\n\\r\\nThe trim Polyfill was:\\r\\n\\r\\n```\\r\\nif (!String.prototype.trim) {\\r\\n  String.prototype.trim = function () {\\r\\n    return this.replace(\/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$\/g, \\'\\');\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\nMDN(en) removed this part because of \"outdated with WebView Android 37\".\\r\\nThe other languages still have this Polyfill part.\\r\\n\\r\\nSee mdn\/content#7602'}, 'com_6': {'author': 'Teej42', 'datetime': '09\/09\/2021, 17:15:48', 'body': 'It is not clear to me, but was this fix added in v0.21.4 release, or will be added in the next release?'}, 'com_7': {'author': 'jasonsaayman', 'datetime': '09\/09\/2021, 17:57:06', 'body': \"Already added :) I think the custom trim function was used like this incase a browser or version of node did not have native support. I don't think we can drop it just yet due to supporting a pretty large range of browsers. However I will review some of that code when I have a chance and see if it would be possible to get rid of it.\"}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/utils.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/axios\/axios\/raw\/5b457116e31db0e88fede6c428e969e87f290929\/lib%2Futils.js', 'patch': \"@@ -185,7 +185,7 @@ function isURLSearchParams(val) {\\n  * @returns {String} The String freed of excess whitespace\\n  *\/\\n function trim(str) {\\n-  return str.replace(\/^\\\\s*\/, '').replace(\/\\\\s*$\/, '');\\n+  return str.trim ? str.trim() : str.replace(\/^\\\\s+|\\\\s+$\/g, '');\\n }\\n \\n \/**\"}}",
            "message_norm":"security fix for redos (#3980)",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('redos', 'SECWORD', ''), ('#3980', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/utils.js'])",
            "num_files":1.0
        },
        {
            "index":3097,
            "vuln_id":"GHSA-vcjj-9vg7-vf68",
            "cwe_id":"{'CWE-476'}",
            "score":7.8,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/15691e456c7dc9bd6be203b09765b063bf4a380c'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TFLite ### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\n```python\nimport tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.Input(shape=(1, 2, 3)))\nmodel.add(tf.keras.layers.Dense(0, activation='relu'))\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninterpreter.invoke()\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/149562d49faa709ea80df1d99fc41d005b81082a\/tensorflow\/lite\/kernels\/internal\/optimized\/optimized_ops.h#L268-L285) unconditionally dereferences a pointer.\n\n```cc\n  if (y4 > 1) {\n    \/\/ ...\n  } else {\n    for (int i0 = 0; i0 < y0; ++i0) {\n      const T* input2_data_ptr = nullptr;\n      for (int i1 = 0; i1 < y1; ++i1) {\n        input2_data_ptr = input2_data_reset;\n        for (int i2 = 0; i2 < y2; ++i2) {\n          scalar_broadcast_f(y3, params, *input1_data_ptr, input2_data_ptr,\n                             output_data_ptr);\n        }\n      }\n    }\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [15691e456c7dc9bd6be203b09765b063bf4a380c](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/15691e456c7dc9bd6be203b09765b063bf4a380c).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/15691e456c7dc9bd6be203b09765b063bf4a380c",
            "commit_sha":"15691e456c7dc9bd6be203b09765b063bf4a380c",
            "patch":"SINGLE",
            "chain_ord":"['15691e456c7dc9bd6be203b09765b063bf4a380c']",
            "before_first_fix_commit":"{'c107c1a6cee9afe5f718a48b70ffaa44bece42a2'}",
            "last_fix_commit":"15691e456c7dc9bd6be203b09765b063bf4a380c",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/28\/2021, 01:40:39",
            "message":"Prevent dereferencing of null pointers in TFLite's `add.cc`.\n\nPiperOrigin-RevId: 387244946\nChange-Id: I56094233327fbd8439b92e1dbb1262176e00eeb9",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'tensorflow\/lite\/kernels\/internal\/optimized\/optimized_ops.h': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/15691e456c7dc9bd6be203b09765b063bf4a380c\/tensorflow%2Flite%2Fkernels%2Finternal%2Foptimized%2Foptimized_ops.h', 'patch': '@@ -265,7 +265,7 @@ inline void BinaryBroadcastFiveFold(const ArithmeticParams& unswitched_params,\\n       \/\/ We have broadcast y2*y3*y4 of input2 data y1 times, and now move on.\\n       input2_data_reset = input2_data_ptr;\\n     }\\n-  } else {\\n+  } else if (input1_data_ptr != nullptr) {\\n     \/\/ Special case of y4 == 1, in which the innermost loop is a single\\n     \/\/ element and can be combined with the next (y3) as an inner broadcast.\\n     \/\/'}}",
            "message_norm":"prevent dereferencing of null pointers in tflite's `add.cc`.\n\npiperorigin-revid: 387244946\nchange-id: i56094233327fbd8439b92e1dbb1262176e00eeb9",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('387244946', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/internal\/optimized\/optimized_ops.h'])",
            "num_files":1.0
        },
        {
            "index":1561,
            "vuln_id":"GHSA-cjc7-49v2-jp64",
            "cwe_id":"{'CWE-787', 'CWE-665'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3', 'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc'}",
            "dataset":"osv",
            "summary":"Incomplete validation in `SparseAdd` ### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/656e7673b14acd7835dc778867f84916c6d1cac2\/tensorflow\/core\/kernels\/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":2,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/41727ff06111117bdf86b37db198217fd7a143cc",
            "commit_sha":"41727ff06111117bdf86b37db198217fd7a143cc",
            "patch":"MULTI",
            "chain_ord":"['6fd02f44810754ae7481838b6a67c5df7f909ca3', '41727ff06111117bdf86b37db198217fd7a143cc']",
            "before_first_fix_commit":"{'6f432d6334edc93fd5af0070170def56b0413e8a'}",
            "last_fix_commit":"41727ff06111117bdf86b37db198217fd7a143cc",
            "chain_ord_pos":2.0,
            "commit_datetime":"05\/11\/2021, 22:41:51",
            "message":"Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373248068\nChange-Id: I0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 12, 'deletions': 5, 'total': 17}",
            "files":"{'tensorflow\/core\/kernels\/sparse_add_op.cc': {'additions': 12, 'deletions': 5, 'changes': 17, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/41727ff06111117bdf86b37db198217fd7a143cc\/tensorflow%2Fcore%2Fkernels%2Fsparse_add_op.cc', 'patch': '@@ -44,6 +44,11 @@ class SparseAddOp : public OpKernel {\\n                     b_indices->shape().DebugString()));\\n     const int64 a_nnz = a_indices->dim_size(0);\\n     const int64 b_nnz = b_indices->dim_size(0);\\n+    const int num_dims = a_indices->dim_size(1);\\n+    OP_REQUIRES(ctx, b_indices->dim_size(1) == num_dims,\\n+                errors::InvalidArgument(\\n+                    \"Input indices must have the same dimension, got \",\\n+                    num_dims, \" and \", b_indices->dim_size(1)));\\n \\n     OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\\n     OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\\n@@ -72,6 +77,13 @@ class SparseAddOp : public OpKernel {\\n                     \"Input shapes should be a vector but received shapes \",\\n                     a_shape->shape().DebugString(), \" and \",\\n                     b_shape->shape().DebugString()));\\n+    OP_REQUIRES(\\n+        ctx, a_shape->NumElements() == num_dims,\\n+        errors::InvalidArgument(\"Second dimension of a_indices and length of \"\\n+                                \"a_shape must match, got \",\\n+                                num_dims, \" and \", a_shape->NumElements()));\\n+    OP_REQUIRES(ctx, num_dims > 0,\\n+                errors::InvalidArgument(\"Tesors must not be empty\"));\\n     OP_REQUIRES(\\n         ctx, a_shape->IsSameSize(*b_shape),\\n         errors::InvalidArgument(\\n@@ -100,11 +112,6 @@ class SparseAddOp : public OpKernel {\\n     std::vector<std::pair<bool, int64>> entries_to_copy;  \/\/ from_a?, idx\\n     entries_to_copy.reserve(a_nnz + b_nnz);\\n     std::vector<T> out_values;\\n-    const int num_dims = a_shape->dim_size(0);\\n-\\n-    OP_REQUIRES(ctx, num_dims > 0,\\n-                errors::InvalidArgument(\"Invalid input_a shape. Received: \",\\n-                                        a_shape->DebugString()));\\n \\n     \/\/ The input and output sparse tensors are assumed to be ordered along\\n     \/\/ increasing dimension number.'}}",
            "message_norm":"validate that a and b are proper sparse tensors\n\npiperorigin-revid: 373248068\nchange-id: i0a2041a0747901b3f00387a6a3bce9bca6b0b3b1",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('373248068', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/sparse_add_op.cc'])",
            "num_files":1.0
        },
        {
            "index":2432,
            "vuln_id":"GHSA-mj63-64x7-57xf",
            "cwe_id":"{'CWE-22'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/49c643bf66620646884ed141c94e5fdd85bcdd2f', 'https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/99bd29e3995c254e2d6f6c2e3454e4271665955a'}",
            "dataset":"osv",
            "summary":"Path traversal in impacket Multiple path traversal vulnerabilities exist in smbserver.py in Impacket before 0.9.23. An attacker that connects to a running smbserver instance can list and write to arbitrary files via ..\/ directory traversal. This could potentially be abused to achieve arbitrary code execution by replacing \/etc\/shadow or an SSH authorized key.",
            "published_date":"2021-06-18",
            "chain_len":2,
            "project":"https:\/\/github.com\/SecureAuthCorp\/impacket",
            "commit_href":"https:\/\/github.com\/SecureAuthCorp\/impacket\/commit\/99bd29e3995c254e2d6f6c2e3454e4271665955a",
            "commit_sha":"99bd29e3995c254e2d6f6c2e3454e4271665955a",
            "patch":"MULTI",
            "chain_ord":"['99bd29e3995c254e2d6f6c2e3454e4271665955a', '49c643bf66620646884ed141c94e5fdd85bcdd2f']",
            "before_first_fix_commit":"{'6688da5d97592269aae72b3a00dc1ab186c0b33d', '91902eafb68fea932cf2350cab329f15afa554e5'}",
            "last_fix_commit":"49c643bf66620646884ed141c94e5fdd85bcdd2f",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/25\/2021, 11:06:02",
            "message":"Fix Path Traversal vulnerabilities by checking path prefix against incoming filename",
            "author":"OmriI",
            "comments":null,
            "stats":"{'additions': 2011, 'deletions': 1936, 'total': 3947}",
            "files":"{'impacket\/smbserver.py': {'additions': 2011, 'deletions': 1936, 'changes': 3947, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/SecureAuthCorp\/impacket\/raw\/99bd29e3995c254e2d6f6c2e3454e4271665955a\/impacket%2Fsmbserver.py', 'patch': None}}",
            "message_norm":"fix path traversal vulnerabilities by checking path prefix against incoming filename",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('vulnerabilities', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['impacket\/smbserver.py'])",
            "num_files":1.0
        },
        {
            "index":2143,
            "vuln_id":"GHSA-hwch-749c-rv63",
            "cwe_id":"{'CWE-74'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/github\/hubot-scripts\/commit\/feee5abdb038a229a98969ae443cdb8a61747782'}",
            "dataset":"osv",
            "summary":"Potential Command Injection in hubot-scripts Versions 2.4.3 and earlier of hubot-scripts are vulnerable to a command injection vulnerablity in the `hubot-scripts\/package\/src\/scripts\/email.coffee` module.\n\n\n### Mitigating Factors\nThe email script is not enabled by default, it has to be manually added to hubot's list of loaded scripts.\n\n\n## Recommendation\n\nUpdate hubot-scripts to version 2.4.4 or later.",
            "published_date":"2020-08-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/github\/hubot-scripts",
            "commit_href":"https:\/\/github.com\/github\/hubot-scripts\/commit\/feee5abdb038a229a98969ae443cdb8a61747782",
            "commit_sha":"feee5abdb038a229a98969ae443cdb8a61747782",
            "patch":"SINGLE",
            "chain_ord":"['feee5abdb038a229a98969ae443cdb8a61747782']",
            "before_first_fix_commit":"{'8f3dd0ab5af14664d317e4925f72aa3f78adb6e9'}",
            "last_fix_commit":"feee5abdb038a229a98969ae443cdb8a61747782",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/26\/2013, 19:00:24",
            "message":"Fix code execution issue in email command.",
            "author":"Neal Poole",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 4, 'total': 10}",
            "files":"{'src\/scripts\/email.coffee': {'additions': 6, 'deletions': 4, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/github\/hubot-scripts\/raw\/feee5abdb038a229a98969ae443cdb8a61747782\/src%2Fscripts%2Femail.coffee', 'patch': '@@ -18,16 +18,18 @@\\n \\n util = require \\'util\\'\\n child_process = require \\'child_process\\'\\n-exec = child_process.exec\\n \\n module.exports = (robot) ->\\n   emailTime = null\\n   sendEmail = (recipients, subject, msg, from) ->\\n-    mailCommand = \"\"\"echo \\'#{msg}\\' | mail -s \\'#{subject}\\' -r \\'#{from}\\' \\'#{recipients}\\'\"\"\"\\n-    exec mailCommand, (error, stdout, stderr) ->\\n+    mailArgs = [\\'-s\\', subject, \\'-a\\', \"From: #{from}\", \\'--\\']\\n+    mailArgs = mailArgs.concat recipients\\n+    p = child_process.execFile \\'mail\\', mailArgs, {}, (error, stdout, stderr) ->\\n       util.print \\'stdout: \\' + stdout\\n       util.print \\'stderr: \\' + stderr\\n+    p.stdin.write \"#{msg}\\\\n\"\\n+    p.stdin.end()\\n \\n   robot.respond \/email (.*) -s (.*) -m (.*)\/i, (msg) ->\\n-    sendEmail msg.match[1], msg.match[2], msg.match[3], msg.message.user.id\\n+    sendEmail msg.match[1].split(\" \"), msg.match[2], msg.match[3], msg.message.user.id\\n     msg.send \"email sent\"'}}",
            "message_norm":"fix code execution issue in email command.",
            "language":"fr",
            "entities":"[('fix', 'ACTION', ''), ('code execution', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/scripts\/email.coffee'])",
            "num_files":1.0
        },
        {
            "index":3055,
            "vuln_id":"GHSA-v5rv-hpxg-8x49",
            "cwe_id":"{'CWE-347'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/ServiceStack\/ServiceStack\/commit\/540d4060e877a03ae95343c1a8560a26768585ee'}",
            "dataset":"osv",
            "summary":"Signature validation bypass in ServiceStack ServiceStack before 5.9.2 mishandles JWT signature verification unless an application has a custom ValidateToken function that establishes a valid minimum length for a signature.",
            "published_date":"2021-01-13",
            "chain_len":1,
            "project":"https:\/\/github.com\/ServiceStack\/ServiceStack",
            "commit_href":"https:\/\/github.com\/ServiceStack\/ServiceStack\/commit\/540d4060e877a03ae95343c1a8560a26768585ee",
            "commit_sha":"540d4060e877a03ae95343c1a8560a26768585ee",
            "patch":"SINGLE",
            "chain_ord":"['540d4060e877a03ae95343c1a8560a26768585ee']",
            "before_first_fix_commit":"{'794f1363f51f81fbead1dc8eb4dbc5076b2236a3'}",
            "last_fix_commit":"540d4060e877a03ae95343c1a8560a26768585ee",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/04\/2020, 06:16:17",
            "message":"Update EquivalentTo to test length & null for equality as well",
            "author":"Demis Bellot",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 0, 'total': 6}",
            "files":"{'src\/ServiceStack.Common\/EnumerableExtensions.cs': {'additions': 6, 'deletions': 0, 'changes': 6, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/ServiceStack\/ServiceStack\/raw\/540d4060e877a03ae95343c1a8560a26768585ee\/src%2FServiceStack.Common%2FEnumerableExtensions.cs', 'patch': '@@ -234,6 +234,12 @@ public static T FirstNonDefault<T>(this IEnumerable<T> values)\\n         [MethodImpl(MethodImplOptions.AggressiveInlining)]\\n         public static bool EquivalentTo(this byte[] bytes, byte[] other)\\n         {\\n+            if (bytes == null || other == null)\\n+                return bytes == other;\\n+\\n+            if (bytes.Length != other.Length)\\n+                return false;\\n+\\n             var compare = 0;\\n             for (var i = 0; i < other.Length; i++)\\n                 compare |= other[i] ^ bytes[i];'}}",
            "message_norm":"update equivalentto to test length & null for equality as well",
            "language":"en",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/ServiceStack.Common\/EnumerableExtensions.cs'])",
            "num_files":1.0
        },
        {
            "index":1294,
            "vuln_id":"GHSA-92v9-xh2q-fq9f",
            "cwe_id":"{'CWE-1321', 'CWE-915'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/tony-tsx\/cookiex-deep\/commit\/b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in @cookiex\/deep The npm @cookiex\/deep package before version 0.0.7 has a prototype pollution vulnerability. The global proto object can be polluted using the __proto__ object.",
            "published_date":"2021-09-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/tony-tsx\/cookiex-deep",
            "commit_href":"https:\/\/github.com\/tony-tsx\/cookiex-deep\/commit\/b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88",
            "commit_sha":"b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88",
            "patch":"SINGLE",
            "chain_ord":"['b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88']",
            "before_first_fix_commit":"{'ed91f5d004e8a1e3f269bb48c3b2ac294f8580ef'}",
            "last_fix_commit":"b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/13\/2021, 18:04:49",
            "message":"fix: prototype pollution fix #1",
            "author":"Tony",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/assigner.ts': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tony-tsx\/cookiex-deep\/raw\/b5bea2b7f34a5fa9abb4446cbd038ecdbcd09c88\/src%2Fassigner.ts', 'patch': \"@@ -1,12 +1,12 @@\\n const untracker = [ undefined, null ]\\n-\\n+const invalids = [ '__proto__', 'constructor', 'prototype' ]\\n const Assigner = function( delegate: ( a: any, b: any ) => any, useuntrack: boolean = true ): ( ...args: any[] ) => any {\\n   const assigner = ( ...args: any[] ) => {\\n-    console.log( { args } )\\n     return args.reduce( ( a, b ) => {\\n       if ( untracker.includes( a ) ) throw new TypeError( `can't convert ${a} to object` )\\n       if ( useuntrack && untracker.includes( b ) ) return a\\n       Object.keys( b ).forEach( key => {\\n+        if ( invalids.includes( key ) ) return void 0\\n         if ( untracker.includes( a[key] ) ) a[key] = b[key]\\n         else a[key] = delegate.call( this, a[key], b[key] )\\n       } )\"}}",
            "message_norm":"fix: prototype pollution fix #1",
            "language":"fr",
            "entities":"[('prototype pollution', 'SECWORD', ''), ('#1', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/assigner.ts'])",
            "num_files":1.0
        },
        {
            "index":466,
            "vuln_id":"GHSA-4r4m-hjwj-43p8",
            "cwe_id":"{'CWE-300'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/socketio\/engine.io-client\/commit\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1'}",
            "dataset":"osv",
            "summary":"Insecure Defaults Allow MITM Over TLS in engine.io-client Affected versions of `engine.io-client` do not verify certificates by default, and as such may be vulnerable to Man-in-the-Middle attacks.\n\nThe vulnerability is related to the way that node.js handles the `rejectUnauthorized` setting. If the value is something that evaluates to false, such as undefined or null, certificate verification will be disabled. \n\n\n\n## Recommendation\n\nUpdate to version 1.6.9 or later.\n\nIf you are unable to upgrade, ensure all calls to socket.io to have a `rejectedUnauthorized: true` flag.",
            "published_date":"2019-02-18",
            "chain_len":1,
            "project":"https:\/\/github.com\/socketio\/engine.io-client",
            "commit_href":"https:\/\/github.com\/socketio\/engine.io-client\/commit\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "commit_sha":"2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "patch":"SINGLE",
            "chain_ord":"['2c55b278a491bf45313ecc0825cf800e2f7ff5c1']",
            "before_first_fix_commit":"{'6045ccf5aa3ad5dbd976acb1e722a9692a5d55fb'}",
            "last_fix_commit":"2c55b278a491bf45313ecc0825cf800e2f7ff5c1",
            "chain_ord_pos":1.0,
            "commit_datetime":"03\/30\/2016, 15:30:14",
            "message":"default `rejectUnauthorized` to `true`",
            "author":"Guillermo Rauch",
            "comments":"{'com_1': {'author': 'andrew-aladev', 'datetime': '09\/28\/2016, 13:48:33', 'body': 'WAT? I am sure that you haven\\'t tested websocket with this \"patch\".'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/socket.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/socketio\/engine.io-client\/raw\/2c55b278a491bf45313ecc0825cf800e2f7ff5c1\/lib%2Fsocket.js', 'patch': \"@@ -90,7 +90,7 @@ function Socket (uri, opts) {\\n   this.cert = opts.cert || null;\\n   this.ca = opts.ca || null;\\n   this.ciphers = opts.ciphers || null;\\n-  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n+  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\\n \\n   \/\/ other options for Node.js client\\n   var freeGlobal = typeof global === 'object' && global;\"}}",
            "message_norm":"default `rejectunauthorized` to `true`",
            "language":"ro",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/socket.js'])",
            "num_files":1.0
        },
        {
            "index":279,
            "vuln_id":"GHSA-3mw4-6rj6-74g5",
            "cwe_id":"{'CWE-476'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559'}",
            "dataset":"osv",
            "summary":"Null pointer dereference in TensorFlow ### Impact \nThe [implementation of `QuantizedMaxPool`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/kernels\/quantized_pooling_ops.cc#L114-L130) has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizedMaxPool(\n    input = tf.constant([[[[4]]]], dtype=tf.quint8),\n    min_input = [],\n    max_input = [1],\n    ksize = [1, 1, 1, 1],\n    strides = [1, 1, 1, 1],\n    padding = \"SAME\", name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [53b0dd6dc5957652f35964af16b892ec9af4a559](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/53b0dd6dc5957652f35964af16b892ec9af4a559",
            "commit_sha":"53b0dd6dc5957652f35964af16b892ec9af4a559",
            "patch":"SINGLE",
            "chain_ord":"['53b0dd6dc5957652f35964af16b892ec9af4a559']",
            "before_first_fix_commit":"{'19cff800e5805097da69bb1ad0b0a2dd9f83741a'}",
            "last_fix_commit":"53b0dd6dc5957652f35964af16b892ec9af4a559",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/03\/2021, 18:02:20",
            "message":"Fix nullptr exception in QuantizedMaxPool op when empty list is sent to min_input or max_input parameters.\n\nPiperOrigin-RevId: 413960973\nChange-Id: I9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
            "author":"Isha Arkatkar",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 0, 'total': 14}",
            "files":"{'tensorflow\/core\/kernels\/quantized_pooling_ops.cc': {'additions': 14, 'deletions': 0, 'changes': 14, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/53b0dd6dc5957652f35964af16b892ec9af4a559\/tensorflow%2Fcore%2Fkernels%2Fquantized_pooling_ops.cc', 'patch': '@@ -15,6 +15,8 @@ limitations under the License.\\n \\n \/\/ See docs in ..\/ops\/nn_ops.cc.\\n \\n+#include \"tensorflow\/core\/framework\/op_requires.h\"\\n+#include \"tensorflow\/core\/platform\/errors.h\"\\n #define EIGEN_USE_THREADS\\n \\n #include \"third_party\/eigen3\/unsupported\/Eigen\/CXX11\/Tensor\"\\n@@ -117,6 +119,18 @@ class QuantizedMaxPoolingOp : public MaxPoolingOp<Device, T> {\\n       : MaxPoolingOp<Device, T>(context) {}\\n \\n   void Compute(OpKernelContext* context) override {\\n+    auto min_input_tensor = context->input(1);\\n+    auto max_input_tensor = context->input(2);\\n+    OP_REQUIRES(\\n+        context, min_input_tensor.NumElements() == 1,\\n+        errors::InvalidArgument(\\n+            \"min_input must be a scalar float value, got tensor with shape \",\\n+            min_input_tensor.shape()));\\n+    OP_REQUIRES(\\n+        context, max_input_tensor.NumElements() == 1,\\n+        errors::InvalidArgument(\\n+            \"max_input must be a scalar float value, got tensor with shape \",\\n+            max_input_tensor.shape()));\\n     const float min_input = context->input(1).flat<float>()(0);\\n     const float max_input = context->input(2).flat<float>()(0);\\n     MaxPoolingOp<Device, T>::Compute(context);'}}",
            "message_norm":"fix nullptr exception in quantizedmaxpool op when empty list is sent to min_input or max_input parameters.\n\npiperorigin-revid: 413960973\nchange-id: i9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('nullptr exception', 'SECWORD', ''), ('413960973', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_pooling_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3062,
            "vuln_id":"GHSA-v6r6-84gr-92rm",
            "cwe_id":"{'CWE-787', 'CWE-119'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fc9141f42f6a72180ecd24021c3e6b36165fe0d'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `AvgPool3DGrad` ### Impact\nThe implementation of `tf.raw_ops.AvgPool3DGrad` is vulnerable to a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\norig_input_shape = tf.constant([10, 6, 3, 7, 7], shape=[5], dtype=tf.int32)\ngrad = tf.constant([0.01, 0, 0], shape=[3, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.AvgPool3DGrad(\n  orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides,\n  padding=padding)\n```\n\nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/d80ffba9702dc19d1fac74fc4b766b3fa1ee976b\/tensorflow\/core\/kernels\/pooling_ops_3d.cc#L376-L450) assumes that the `orig_input_shape` and `grad` tensors have similar first and last dimensions but does not check that this assumption is validated.\n\n### Patches\nWe have patched the issue in GitHub commit [6fc9141f42f6a72180ecd24021c3e6b36165fe0d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fc9141f42f6a72180ecd24021c3e6b36165fe0d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/6fc9141f42f6a72180ecd24021c3e6b36165fe0d",
            "commit_sha":"6fc9141f42f6a72180ecd24021c3e6b36165fe0d",
            "patch":"SINGLE",
            "chain_ord":"['6fc9141f42f6a72180ecd24021c3e6b36165fe0d']",
            "before_first_fix_commit":"{'d80ffba9702dc19d1fac74fc4b766b3fa1ee976b'}",
            "last_fix_commit":"6fc9141f42f6a72180ecd24021c3e6b36165fe0d",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2021, 16:51:26",
            "message":"Fix assertion failure in pooling_ops_3d\n\nPiperOrigin-RevId: 372364504\nChange-Id: Iecde4fe26b47a8fa935d6e2611b5585ed5777781",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 0, 'total': 13}",
            "files":"{'tensorflow\/core\/kernels\/pooling_ops_3d.cc': {'additions': 13, 'deletions': 0, 'changes': 13, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/6fc9141f42f6a72180ecd24021c3e6b36165fe0d\/tensorflow%2Fcore%2Fkernels%2Fpooling_ops_3d.cc', 'patch': '@@ -383,6 +383,19 @@ struct LaunchAvgPooling3dGradOp<CPUDevice, T> {\\n                      const std::array<int64, 3>& output_shape,\\n                      const std::array<int64, 3>& padding,\\n                      TensorFormat data_format, Tensor* output) {\\n+    OP_REQUIRES(\\n+        context, tensor_in_shape.dim_size(0) == out_backprop.dim_size(0),\\n+        errors::InvalidArgument(\\n+            \"Expected first dimension of tensor_in_shape and \"\\n+            \"out_backprop to match, got \",\\n+            tensor_in_shape.dim_size(0), \" and \", out_backprop.dim_size(0)));\\n+    OP_REQUIRES(\\n+        context, tensor_in_shape.dim_size(4) == out_backprop.dim_size(4),\\n+        errors::InvalidArgument(\\n+            \"Expected last dimension of tensor_in_shape and \"\\n+            \"out_backprop to match, got \",\\n+            tensor_in_shape.dim_size(4), \" and \", out_backprop.dim_size(4)));\\n+\\n     output->flat<T>().setZero();\\n     std::array<int64, 3> input_size = {{tensor_in_shape.dim_size(3),\\n                                         tensor_in_shape.dim_size(2),'}}",
            "message_norm":"fix assertion failure in pooling_ops_3d\n\npiperorigin-revid: 372364504\nchange-id: iecde4fe26b47a8fa935d6e2611b5585ed5777781",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('372364504', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/pooling_ops_3d.cc'])",
            "num_files":1.0
        },
        {
            "index":3160,
            "vuln_id":"GHSA-vqj2-4v8m-8vrq",
            "cwe_id":"{'CWE-377', 'CWE-668'}",
            "score":8.2,
            "chain":"{'https:\/\/github.com\/mlflow\/mlflow\/commit\/61984e6843d2e59235d82a580c529920cd8f3711'}",
            "dataset":"osv",
            "summary":"Insecure Temporary File in mlflow mlflow prior to 1.23.1 contains an insecure temporary file. The insecure function `tempfile.mktemp()` is deprecated and `mkstemp()` should be used instead.",
            "published_date":"2022-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/mlflow\/mlflow",
            "commit_href":"https:\/\/github.com\/mlflow\/mlflow\/commit\/61984e6843d2e59235d82a580c529920cd8f3711",
            "commit_sha":"61984e6843d2e59235d82a580c529920cd8f3711",
            "patch":"SINGLE",
            "chain_ord":"['61984e6843d2e59235d82a580c529920cd8f3711']",
            "before_first_fix_commit":"{'271750bc2a65f469956a11499c022df138c6d0f6'}",
            "last_fix_commit":"61984e6843d2e59235d82a580c529920cd8f3711",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/26\/2022, 23:59:23",
            "message":"Use mkstemp to replace deprecated mktemp call (#5303)\n\n* Use mkstemp\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Remove num examples\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Close instead of remove\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* Close the handle\r\n\r\nSigned-off-by: dbczumar <corey.zumar@databricks.com>",
            "author":"Corey Zumar",
            "comments":"{'com_1': {'author': 'sr-mpamera', 'datetime': '03\/02\/2022, 15:40:16', 'body': 'The security check fails even though the mlflow is upgraded to 1.23.1. It gives the error \"Insecure Temporary File in mlflow\".\\r\\nAny suggested solution please ?'}}",
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'mlflow\/utils\/file_utils.py': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mlflow\/mlflow\/raw\/61984e6843d2e59235d82a580c529920cd8f3711\/mlflow%2Futils%2Ffile_utils.py', 'patch': '@@ -287,7 +287,7 @@ def _filter_timestamps(tar_info):\\n         tar_info.mtime = 0\\n         return tar_info if custom_filter is None else custom_filter(tar_info)\\n \\n-    unzipped_filename = tempfile.mktemp()\\n+    unzipped_file_handle, unzipped_filename = tempfile.mkstemp()\\n     try:\\n         with tarfile.open(unzipped_filename, \"w\") as tar:\\n             tar.add(source_dir, arcname=archive_name, filter=_filter_timestamps)\\n@@ -298,7 +298,7 @@ def _filter_timestamps(tar_info):\\n         ) as gzipped_tar, open(unzipped_filename, \"rb\") as tar:\\n             gzipped_tar.write(tar.read())\\n     finally:\\n-        os.remove(unzipped_filename)\\n+        os.close(unzipped_file_handle)\\n \\n \\n def _copy_project(src_path, dst_path=\"\"):'}}",
            "message_norm":"use mkstemp to replace deprecated mktemp call (#5303)\n\n* use mkstemp\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* remove num examples\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* close instead of remove\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>\r\n\r\n* close the handle\r\n\r\nsigned-off-by: dbczumar <corey.zumar@databricks.com>",
            "language":"en",
            "entities":"[('#5303', 'ISSUE', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('remove', 'ACTION', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('remove', 'ACTION', ''), ('corey.zumar@databricks.com', 'EMAIL', ''), ('corey.zumar@databricks.com', 'EMAIL', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['mlflow\/utils\/file_utils.py'])",
            "num_files":1.0
        },
        {
            "index":693,
            "vuln_id":"GHSA-5rqg-jm4f-cqx7",
            "cwe_id":"{'CWE-835'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75', 'https:\/\/github.com\/Marak\/colors.js\/commit\/137c6dae3339e97f4bbc838c221803c363b0a9fd', 'https:\/\/github.com\/Marak\/colors.js\/commit\/6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26'}",
            "dataset":"osv",
            "summary":"Infinite loop causing Denial of Service in colors colors is a library for including colored text in node.js consoles. Between 07 and 09 January 2022, colors versions 1.4.1, 1.4.2, and 1.4.44-liberty-2 were published including malicious code that caused a Denial of Service due to an infinite loop. Software dependent on these versions experienced the printing of randomized characters to console and an infinite loop resulting in unbound system resource consumption.\n\nUsers of colors relying on these specific versions should downgrade to version 1.4.0.",
            "published_date":"2022-01-10",
            "chain_len":3,
            "project":"https:\/\/github.com\/Marak\/colors.js",
            "commit_href":"https:\/\/github.com\/Marak\/colors.js\/commit\/5d2d242f656103ac38086d6b26433a09f1c38c75",
            "commit_sha":"5d2d242f656103ac38086d6b26433a09f1c38c75",
            "patch":"MULTI",
            "chain_ord":"['137c6dae3339e97f4bbc838c221803c363b0a9fd', '5d2d242f656103ac38086d6b26433a09f1c38c75', '6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26']",
            "before_first_fix_commit":"{'5d2d242f656103ac38086d6b26433a09f1c38c75'}",
            "last_fix_commit":"6bc50e79eeaa1d87369bb3e7e608ebed18c5cf26",
            "chain_ord_pos":2.0,
            "commit_datetime":"01\/08\/2022, 04:21:02",
            "message":"Fix bug",
            "author":"Marak",
            "comments":"{'com_1': {'author': 'bacloud22', 'datetime': '01\/08\/2022, 07:00:53', 'body': 'oops, now it works \ud83e\udd23'}, 'com_2': {'author': 'AuroPick', 'datetime': '01\/10\/2022, 01:19:13', 'body': 'delete this shit'}, 'com_3': {'author': 'KeZengOo', 'datetime': '01\/10\/2022, 02:21:07', 'body': 'Amazing\uff01'}, 'com_4': {'author': 'summic', 'datetime': '01\/10\/2022, 02:48:32', 'body': 'Disgusting!'}, 'com_5': {'author': 'zhang354455288', 'datetime': '01\/10\/2022, 06:50:25', 'body': 'niubi laotie'}, 'com_6': {'author': 'yyg1219', 'datetime': '01\/10\/2022, 07:10:16', 'body': 'niua niua'}, 'com_7': {'author': 'zhangwenwen12138', 'datetime': '01\/10\/2022, 08:10:05', 'body': '\u94c1\u5b50\uff0c\u4f60\u600e\u4e48\u4e86'}, 'com_8': {'author': 'vaecebyZ', 'datetime': '01\/10\/2022, 09:31:36', 'body': \"While we sympathize with you, you're doing a disservice to other developers.\ud83d\ude28\"}, 'com_9': {'author': 'chen-fac', 'datetime': '01\/10\/2022, 09:37:07', 'body': '\u524d\u6392\u51fa\u552e\u82b1\u751f\u74dc\u5b50'}, 'com_10': {'author': 'DragonCat1', 'datetime': '01\/10\/2022, 09:52:22', 'body': '\u5e7f\u544a\u4f4d\u62db\u79df'}, 'com_11': {'author': 'evanchen0629', 'datetime': '01\/10\/2022, 09:53:53', 'body': '\u524d\u9762\u7684\u540c\u5fd7\u628a\u811a\u6536\u4e00\u6536'}, 'com_12': {'author': 'wokalek', 'datetime': '01\/10\/2022, 09:58:35', 'body': 'Starege'}, 'com_13': {'author': 'brolnickij', 'datetime': '01\/10\/2022, 10:17:54', 'body': 'nice trolling :D'}, 'com_14': {'author': 'withsalt', 'datetime': '01\/10\/2022, 10:26:09', 'body': 'nice code!'}, 'com_15': {'author': 'Ansen', 'datetime': '01\/10\/2022, 10:29:24', 'body': 'six six six'}, 'com_16': {'author': 'SheltonZhu', 'datetime': '01\/10\/2022, 10:39:39', 'body': 'brilliant !!!!!'}, 'com_17': {'author': 'mxj1337', 'datetime': '01\/10\/2022, 11:00:51', 'body': 'LIKE'}, 'com_18': {'author': 'WeirdConstructor', 'datetime': '01\/10\/2022, 12:33:35', 'body': 'Obviously this bugfix is missing a regression test! ;-)'}, 'com_19': {'author': 'wuzhidexiaolang', 'datetime': '01\/10\/2022, 14:28:13', 'body': 'nice'}, 'com_20': {'author': 'manudevcode', 'datetime': '01\/10\/2022, 16:02:59', 'body': \"Lol, when your intentional error, doesn't work xD\"}, 'com_21': {'author': 'LuciusChen', 'datetime': '01\/10\/2022, 16:18:08', 'body': '\u725b\u903c\u554a'}, 'com_22': {'author': 'golangboy', 'datetime': '01\/10\/2022, 17:01:00', 'body': '\u524d\u7aef\u5708\u771f\u70ed\u95f9'}, 'com_23': {'author': 'prietales', 'datetime': '01\/10\/2022, 17:53:17', 'body': 'let am should be const.'}, 'com_24': {'author': 'xinx1n', 'datetime': '01\/11\/2022, 02:20:44', 'body': '\u82df\u5229\u56fd\u5bb6\u751f\u6b7b\u4ee5'}, 'com_25': {'author': 'paoqi1997', 'datetime': '01\/11\/2022, 02:20:59', 'body': '12, 3456'}, 'com_26': {'author': 'manudevcode', 'datetime': '01\/11\/2022, 03:31:54', 'body': '> 12, 3456\\r\\n\\r\\nLa tuya por si las dudas xD'}, 'com_27': {'author': '949nb', 'datetime': '01\/11\/2022, 06:47:08', 'body': 'nice code!'}, 'com_28': {'author': 'npljy', 'datetime': '01\/11\/2022, 08:20:14', 'body': \"If you want to make money from open source, then don't open source\"}, 'com_29': {'author': 'machinebitezz', 'datetime': '01\/11\/2022, 14:24:03', 'body': 'Power to you tbh'}, 'com_30': {'author': 'ethnh', 'datetime': '01\/11\/2022, 16:19:27', 'body': '\ud83d\udd34\ud83d\udfe0\ud83d\udfe1\ud83d\udfe2\ud83d\udd35\ud83d\udfe3\ud83d\udfe4\u26ab\u26aa nice colors'}, 'com_31': {'author': 'zhushiqiang', 'datetime': '01\/12\/2022, 01:47:25', 'body': '666'}, 'com_32': {'author': 'zhushiqiang', 'datetime': '01\/12\/2022, 13:39:52', 'body': '\u8fd9\u662f\u6765\u81eaQQ\u90ae\u7bb1\u7684\u5047\u671f\u81ea\u52a8\u56de\u590d\u90ae\u4ef6\u3002\\n\\xa0\\n\u60a8\u597d\uff0c\u6211\u6700\u8fd1\u6b63\u5728\u4f11\u5047\u4e2d\uff0c\u65e0\u6cd5\u4eb2\u81ea\u56de\u590d\u60a8\u7684\u90ae\u4ef6\u3002\u6211\u5c06\u5728\u5047\u671f\u7ed3\u675f\u540e\uff0c\u5c3d\u5feb\u7ed9\u60a8\u56de\u590d\u3002'}, 'com_33': {'author': 'joaodematejr', 'datetime': '01\/13\/2022, 02:30:37', 'body': '@brunoibias'}, 'com_34': {'author': 'Rusnura', 'datetime': '01\/13\/2022, 03:18:05', 'body': 'Hello World!'}, 'com_35': {'author': 'a6513375', 'datetime': '01\/13\/2022, 13:39:17', 'body': '> \\r\\n\\r\\n\u6211\u8d85'}, 'com_36': {'author': 'zbeanbean', 'datetime': '01\/14\/2022, 06:26:34', 'body': 'wondeful'}, 'com_37': {'author': 'PalmDevs', 'datetime': '01\/19\/2022, 09:58:13', 'body': 'Reject `let`, `const`. Return to `var`. \ud83d\ude0f'}, 'com_38': {'author': 'TechStudent10', 'datetime': '01\/19\/2022, 12:10:56', 'body': 'What bug are you fixing exactly?'}, 'com_39': {'author': 'frankhasen', 'datetime': '01\/19\/2022, 14:07:04', 'body': '> What bug are you fixing exactly?\\r\\n\\r\\nfixing capitalizm bro'}, 'com_40': {'author': 'TechStudent10', 'datetime': '01\/19\/2022, 14:48:09', 'body': '> > What bug are you fixing exactly?\\r\\n> \\r\\n> fixing capitalizm bro\\r\\n\\r\\ntrue i guess.'}, 'com_41': {'author': 'joerez', 'datetime': '01\/20\/2022, 21:33:57', 'body': 'put me in the screencap'}, 'com_42': {'author': 'aaj', 'datetime': '01\/20\/2022, 21:38:03', 'body': 'witnessed'}, 'com_43': {'author': 'yasath', 'datetime': '01\/28\/2022, 14:20:12', 'body': 'so real bestie'}, 'com_44': {'author': 'N1ark', 'datetime': '01\/28\/2022, 14:21:12', 'body': 'we stan'}}",
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Marak\/colors.js\/raw\/5d2d242f656103ac38086d6b26433a09f1c38c75\/lib%2Findex.js', 'patch': \"@@ -15,7 +15,7 @@ require('.\/extendStringPrototype')();\\n \/* remove this line after testing *\/\\n let am = require('..\/lib\/custom\/american');\\n am();\\n-for (let i = 666; i < Infinity; i++;) {\\n+for (let i = 666; i < Infinity; i++) {\\n   if (i % 333) {\\n     \/\/ console.log('testing'.zalgo.rainbow)\\n   }\"}}",
            "message_norm":"fix bug",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('bug', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1184,
            "vuln_id":"GHSA-8c89-2vwr-chcq",
            "cwe_id":"{'CWE-787', 'CWE-131'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6c40f0c6cbf00d46c7717a26419f2062f2f8694'}",
            "dataset":"osv",
            "summary":"Heap buffer overflow in `QuantizedResizeBilinear` ### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nimages = tf.constant([], shape=[0], dtype=tf.qint32)\nsize = tf.constant([], shape=[0], dtype=tf.int32) \nmin = tf.constant([], dtype=tf.float32)\nmax = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max, align_corners=False, half_pixel_centers=False)\n```\n\nThis is because the [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/50711818d2e61ccce012591eeb4fdf93a8496726\/tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc\nconst float in_min = context->input(2).flat<float>()(0);\nconst float in_max = context->input(3).flat<float>()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat<T>()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches \nWe have patched the issue in GitHub commit [f6c40f0c6cbf00d46c7717a26419f2062f2f8694](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6c40f0c6cbf00d46c7717a26419f2062f2f8694).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
            "commit_sha":"f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
            "patch":"SINGLE",
            "chain_ord":"['f6c40f0c6cbf00d46c7717a26419f2062f2f8694']",
            "before_first_fix_commit":"{'50711818d2e61ccce012591eeb4fdf93a8496726'}",
            "last_fix_commit":"f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/22\/2021, 00:00:39",
            "message":"Validate min and max arguments to `QuantizedResizeBilinear`.\n\nPiperOrigin-RevId: 369765091\nChange-Id: I33be8b78273ab7d08b97541692fe05cb7f94963a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 2, 'total': 10}",
            "files":"{'tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc': {'additions': 8, 'deletions': 2, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/f6c40f0c6cbf00d46c7717a26419f2062f2f8694\/tensorflow%2Fcore%2Fkernels%2Fquantized_resize_bilinear_op.cc', 'patch': '@@ -702,8 +702,14 @@ class QuantizedResizeBilinearOp : public OpKernel {\\n   }\\n \\n   void Compute(OpKernelContext* context) override {\\n-    const float in_min = context->input(2).flat<float>()(0);\\n-    const float in_max = context->input(3).flat<float>()(0);\\n+    const auto& in_min_tensor = context->input(2);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),\\n+                errors::InvalidArgument(\"min must be a scalar\"));\\n+    const float in_min = in_min_tensor.flat<float>()(0);\\n+    const auto& in_max_tensor = context->input(3);\\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),\\n+                errors::InvalidArgument(\"max must be a scalar\"));\\n+    const float in_max = in_max_tensor.flat<float>()(0);\\n \\n     ImageResizerState st(align_corners_, false);\\n     st.ValidateAndCreateOutput(context);'}}",
            "message_norm":"validate min and max arguments to `quantizedresizebilinear`.\n\npiperorigin-revid: 369765091\nchange-id: i33be8b78273ab7d08b97541692fe05cb7f94963a",
            "language":"en",
            "entities":"[('validate', 'ACTION', ''), ('369765091', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/quantized_resize_bilinear_op.cc'])",
            "num_files":1.0
        },
        {
            "index":621,
            "vuln_id":"GHSA-5f9h-9pjv-v6j7",
            "cwe_id":"{'CWE-22', 'CWE-548'}",
            "score":8.6,
            "chain":"{'https:\/\/github.com\/rack\/rack\/commit\/dddb7ad18ed79ca6ab06ccc417a169fde451246e'}",
            "dataset":"osv",
            "summary":"Directory traversal in Rack::Directory app bundled with Rack A directory traversal vulnerability exists in rack < 2.2.0 that allows an attacker perform directory traversal vulnerability in the Rack::Directory app that is bundled with Rack which could result in information disclosure.",
            "published_date":"2020-07-06",
            "chain_len":1,
            "project":"https:\/\/github.com\/rack\/rack",
            "commit_href":"https:\/\/github.com\/rack\/rack\/commit\/dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "commit_sha":"dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "patch":"SINGLE",
            "chain_ord":"['dddb7ad18ed79ca6ab06ccc417a169fde451246e']",
            "before_first_fix_commit":"{'16a51d8e0b64964323c3719b8154106af5cc0feb'}",
            "last_fix_commit":"dddb7ad18ed79ca6ab06ccc417a169fde451246e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/12\/2020, 16:23:33",
            "message":"Use Dir.entries instead of Dir[glob] to prevent user-specified glob metacharacters\n\n[CVE-2020-8161]",
            "author":"Jack McCracken",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 2, 'total': 3}",
            "files":"{'lib\/rack\/directory.rb': {'additions': 1, 'deletions': 2, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/rack\/rack\/raw\/dddb7ad18ed79ca6ab06ccc417a169fde451246e\/lib%2Frack%2Fdirectory.rb', 'patch': \"@@ -106,13 +106,12 @@ def check_forbidden(path_info)\\n \\n     def list_directory(path_info, path, script_name)\\n       files = [['..\/', 'Parent Directory', '', '', '']]\\n-      glob = ::File.join(path, '*')\\n \\n       url_head = (script_name.split('\/') + path_info.split('\/')).map do |part|\\n         Rack::Utils.escape_path part\\n       end\\n \\n-      Dir[glob].sort.each do |node|\\n+      Dir.entries(path).reject { |e| e.start_with?('.') }.sort.each do |node|\\n         stat = stat(node)\\n         next unless stat\\n         basename = ::File.basename(node)\"}}",
            "message_norm":"use dir.entries instead of dir[glob] to prevent user-specified glob metacharacters\n\n[cve-2020-8161]",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('cve-2020-8161', 'VULNID', 'CVE')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/rack\/directory.rb'])",
            "num_files":1.0
        },
        {
            "index":2682,
            "vuln_id":"GHSA-q3g3-h9r4-prrc",
            "cwe_id":"{'CWE-125'}",
            "score":7.3,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/93f428fd1768df147171ed674fee1fc5ab8309ec'}",
            "dataset":"osv",
            "summary":"Reference binding to nullptr and heap OOB in binary cwise ops ### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations):\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SqrtGrad(y=[4, 16],dy=[])\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/84d053187cb80d975ef2b9684d4b61981bca0c41\/tensorflow\/core\/kernels\/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr.\n\n### Patches\nWe have patched the issue in GitHub commit [93f428fd1768df147171ed674fee1fc5ab8309ec](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/93f428fd1768df147171ed674fee1fc5ab8309ec).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo  360.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/93f428fd1768df147171ed674fee1fc5ab8309ec",
            "commit_sha":"93f428fd1768df147171ed674fee1fc5ab8309ec",
            "patch":"SINGLE",
            "chain_ord":"['93f428fd1768df147171ed674fee1fc5ab8309ec']",
            "before_first_fix_commit":"{'bc9c546ce7015c57c2f15c168b3d9201de679a1d'}",
            "last_fix_commit":"93f428fd1768df147171ed674fee1fc5ab8309ec",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/31\/2021, 04:42:36",
            "message":"Fix nullptr deref and heap OOB access in binary cwise ops.\n\nPiperOrigin-RevId: 387936777\nChange-Id: I608b8074cec36a982cca622b7144cb2c43e6e19f",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 0, 'total': 5}",
            "files":"{'tensorflow\/core\/kernels\/cwise_ops_common.h': {'additions': 5, 'deletions': 0, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/93f428fd1768df147171ed674fee1fc5ab8309ec\/tensorflow%2Fcore%2Fkernels%2Fcwise_ops_common.h', 'patch': '@@ -265,6 +265,11 @@ class SimpleBinaryOp : public OpKernel {\\n   void Compute(OpKernelContext* ctx) override {\\n     const Tensor& in0 = ctx->input(0);\\n     const Tensor& in1 = ctx->input(1);\\n+    OP_REQUIRES(\\n+        ctx, in0.NumElements() == in1.NumElements(),\\n+        errors::InvalidArgument(\"The two arguments to a cwise op must have \"\\n+                                \"same number of elements, got \",\\n+                                in0.NumElements(), \" and \", in1.NumElements()));\\n     auto in0_flat = in0.flat<Tin>();\\n     auto in1_flat = in1.flat<Tin>();\\n     const Device& eigen_device = ctx->eigen_device<Device>();'}}",
            "message_norm":"fix nullptr deref and heap oob access in binary cwise ops.\n\npiperorigin-revid: 387936777\nchange-id: i608b8074cec36a982cca622b7144cb2c43e6e19f",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('nullptr', 'SECWORD', ''), ('heap oob', 'SECWORD', ''), ('387936777', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/cwise_ops_common.h'])",
            "num_files":1.0
        },
        {
            "index":898,
            "vuln_id":"GHSA-6rv4-4qv6-88g2",
            "cwe_id":"{'CWE-1321'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/IonicaBizau\/set-or-get.js\/commit\/82ede5cccb2e8d13e4f62599203a4389f6d8e936'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in set-or-get Prototype pollution vulnerability in \u2018set-or-get\u2019 version 1.0.0 through 1.2.10 allows an attacker to cause a denial of service and may lead to remote code execution.",
            "published_date":"2021-04-12",
            "chain_len":1,
            "project":"https:\/\/github.com\/IonicaBizau\/set-or-get.js",
            "commit_href":"https:\/\/github.com\/IonicaBizau\/set-or-get.js\/commit\/82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "commit_sha":"82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "patch":"SINGLE",
            "chain_ord":"['82ede5cccb2e8d13e4f62599203a4389f6d8e936']",
            "before_first_fix_commit":"{'6a7767c49df4be3efd5e32a68a1ea1fa449cbd03'}",
            "last_fix_commit":"82ede5cccb2e8d13e4f62599203a4389f6d8e936",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/17\/2020, 17:22:45",
            "message":"Security fix for Prototype Pollution",
            "author":"Arjun Shibu",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/IonicaBizau\/set-or-get.js\/raw\/82ede5cccb2e8d13e4f62599203a4389f6d8e936\/lib%2Findex.js', 'patch': '@@ -13,6 +13,8 @@ var Deffy = require(\"deffy\");\\n  * @return {Object|Array} The field value.\\n  *\/\\n function SetOrGet(input, field, def) {\\n+    if (field == \\'__proto__\\' || field == \\'constructor\\' || field == \\'prototype\\')\\n+        throw new Error(\\'Restricted setting magical attributes\\')\\n     return input[field] = Deffy(input[field], def);\\n }'}}",
            "message_norm":"security fix for prototype pollution",
            "language":"en",
            "entities":"[('security', 'SECWORD', ''), ('prototype pollution', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":1907,
            "vuln_id":"GHSA-gp67-c7j2-2qg2",
            "cwe_id":"{'CWE-532', 'CWE-319'}",
            "score":6.5,
            "chain":"{'https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/commit\/aadefdbf319954cf0c5acbe032637e1c0a924f37'}",
            "dataset":"osv",
            "summary":"Insertion of Sensitive Information into Log File in Jenkins Mask Passwords Plugin Jenkins Mask Passwords Plugin 2.12.0 and earlier transmits globally configured passwords in plain text as part of the configuration form, potentially resulting in their exposure.",
            "published_date":"2022-05-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/mask-passwords-plugin",
            "commit_href":"https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/commit\/aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "commit_sha":"aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "patch":"SINGLE",
            "chain_ord":"['aadefdbf319954cf0c5acbe032637e1c0a924f37']",
            "before_first_fix_commit":"{'3440b0aa5d2553889245327a9d37a006b4b17c3f'}",
            "last_fix_commit":"aadefdbf319954cf0c5acbe032637e1c0a924f37",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/28\/2020, 02:43:19",
            "message":"[SECURITY-157] Fix global mask passwords config\n\nSince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nThis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nSee also:\n\n- [SECURITY-157][SECURITY-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#SECURITY-157\n[SECURITY-157]: https:\/\/issues.jenkins-ci.org\/browse\/SECURITY-157",
            "author":"Sam Gleske",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/main\/resources\/com\/michelin\/cio\/hudson\/plugins\/maskpasswords\/MaskPasswordsBuildWrapper\/global.jelly': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/mask-passwords-plugin\/raw\/aadefdbf319954cf0c5acbe032637e1c0a924f37\/src%2Fmain%2Fresources%2Fcom%2Fmichelin%2Fcio%2Fhudson%2Fplugins%2Fmaskpasswords%2FMaskPasswordsBuildWrapper%2Fglobal.jelly', 'patch': '@@ -51,7 +51,7 @@\\n                         <\/td>\\n                         <td width=\"10%\" align=\"right\">${%Password}<\/td>\\n                         <td width=\"30%\">\\n-                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.password?globalVarPasswordPair.password:\\'\\'}\"\/>\\n+                            <f:password name=\"globalVarPasswordPair.password\" value=\"${!empty globalVarPasswordPair.passwordAsSecret?globalVarPasswordPair.passwordAsSecret.encryptedValue:\\'\\'}\"\/>\\n                         <\/td>\\n                         <td width=\"20%\" align=\"right\"><f:repeatableDeleteButton\/><\/td>\\n                     <\/tr>'}}",
            "message_norm":"[security-157] fix global mask passwords config\n\nsince the security issue has been public for several months, there's no\nneed to hide proposing the fix.\n\nthis fixes the global configuration page by displaying the encrypted\nvalues of global password variables instead of plaintext within the\npassword form.\n\nsee also:\n\n- [security-157][security-157]\n- [security advisory published 2019-08-07][advisory]\n\n[advisory]: https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#security-157\n[security-157]: https:\/\/issues.jenkins-ci.org\/browse\/security-157",
            "language":"en",
            "entities":"[('security-157', 'SECWORD', ''), ('fix', 'ACTION', ''), ('passwords', 'SECWORD', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', ''), ('fixes', 'ACTION', ''), ('password', 'SECWORD', ''), ('password', 'SECWORD', ''), ('security-157][security-157', 'SECWORD', ''), ('security', 'SECWORD', ''), ('https:\/\/jenkins.io\/security\/advisory\/2019-08-07\/#security-157', 'SECWORD', ''), ('security-157', 'SECWORD', ''), ('https:\/\/issues.jenkins-ci.org\/browse\/security-157', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/main\/resources\/com\/michelin\/cio\/hudson\/plugins\/maskpasswords\/MaskPasswordsBuildWrapper\/global.jelly'])",
            "num_files":1.0
        },
        {
            "index":2568,
            "vuln_id":"GHSA-pfxf-wh96-fvjc",
            "cwe_id":"{'CWE-117'}",
            "score":5.3,
            "chain":"{'https:\/\/github.com\/jhipster\/jhipster-kotlin\/commit\/426ccab85e7e0da562643200637b99b6a2a99449'}",
            "dataset":"osv",
            "summary":"Log Forging in generator-jhipster-kotlin ### Impact\n\nWe log the mail for invalid password reset attempts. \nAs the email is provided by a user and the api is public this can be used by an attacker to forge log entries.\nThis is vulnerable to https:\/\/cwe.mitre.org\/data\/definitions\/117.html\n\nThis problem affects only application generated with jwt or session authentication. Applications using oauth are not vulnerable.\n\n### Patches\n\nversion 1.7.0.\n\n### Workarounds\n\nIn `AccountResource.kt` you should change the line\n\n```kotlin\n log.warn(\"Password reset requested for non existing mail '$mail'\");\n```\n\nto \n\n```kotlin\n log.warn(\"Password reset requested for non existing mail\");\n```\n\n### References\n\n* https:\/\/cwe.mitre.org\/data\/definitions\/117.html\n* https:\/\/owasp.org\/www-community\/attacks\/Log_Injection\n* https:\/\/www.baeldung.com\/jvm-log-forging\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [jhipster kotlin](https:\/\/github.com\/jhipster\/jhipster-kotlin)",
            "published_date":"2020-06-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/jhipster\/jhipster-kotlin",
            "commit_href":"https:\/\/github.com\/jhipster\/jhipster-kotlin\/commit\/426ccab85e7e0da562643200637b99b6a2a99449",
            "commit_sha":"426ccab85e7e0da562643200637b99b6a2a99449",
            "patch":"SINGLE",
            "chain_ord":"['426ccab85e7e0da562643200637b99b6a2a99449']",
            "before_first_fix_commit":"{'72d229b48b87c5575c116a8b0ba6c3c9f02ac287'}",
            "last_fix_commit":"426ccab85e7e0da562643200637b99b6a2a99449",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/06\/2020, 20:18:48",
            "message":"prevent log forging when doing password reset init request",
            "author":"Frederik Hahne",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'generators\/server\/templates\/src\/main\/kotlin\/package\/web\/rest\/AccountResource.kt.ejs': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jhipster\/jhipster-kotlin\/raw\/426ccab85e7e0da562643200637b99b6a2a99449\/generators%2Fserver%2Ftemplates%2Fsrc%2Fmain%2Fkotlin%2Fpackage%2Fweb%2Frest%2FAccountResource.kt.ejs', 'patch': '@@ -406,7 +406,7 @@ class AccountResource(\\n         } else {\\n             \/\/ Pretend the request has been successful to prevent checking which emails really exist\\n             \/\/ but log that an invalid attempt has been made\\n-            log.warn(\"Password reset requested for non existing mail \\'$mail\\'\");\\n+            log.warn(\"Password reset requested for non existing mail\");\\n         }\\n     }\\n     <%_ } else { _%>\\n@@ -418,7 +418,7 @@ class AccountResource(\\n                 } else {\\n                     \/\/ Pretend the request has been successful to prevent checking which emails really exist\\n                     \/\/ but log that an invalid attempt has been made\\n-                    log.warn(\"Password reset request for non existing email \\'$mail\\'\")\\n+                    log.warn(\"Password reset request for non existing email\")\\n                 }\\n             }.then()\\n     <%_ } _%>'}}",
            "message_norm":"prevent log forging when doing password reset init request",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('password', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['generators\/server\/templates\/src\/main\/kotlin\/package\/web\/rest\/AccountResource.kt.ejs'])",
            "num_files":1.0
        },
        {
            "index":1688,
            "vuln_id":"GHSA-f7r3-p866-q9qr",
            "cwe_id":"{'CWE-400'}",
            "score":3.7,
            "chain":"{'https:\/\/github.com\/Twipped\/ircdkit\/pull\/2\/commits\/595ed02cde517fad57854d2ac2855a09a626e665', 'https:\/\/github.com\/Twipped\/ircdkit\/commit\/f0cc6dc913ec17b499fa33a676bb72c624456f2c'}",
            "dataset":"osv",
            "summary":"ircdkit vulnerable to Denial of Service due to unhandled connection end event Versions of `ircdkit` 1.0.3 and prior are vulnerable to a remote denial of service.\n\n\n## Recommendation\n\nUpgrade to version 1.0.4.",
            "published_date":"2019-06-03",
            "chain_len":2,
            "project":"https:\/\/github.com\/Twipped\/ircdkit",
            "commit_href":"https:\/\/github.com\/Twipped\/ircdkit\/commit\/f0cc6dc913ec17b499fa33a676bb72c624456f2c",
            "commit_sha":"f0cc6dc913ec17b499fa33a676bb72c624456f2c",
            "patch":"MULTI",
            "chain_ord":"['f0cc6dc913ec17b499fa33a676bb72c624456f2c', '595ed02cde517fad57854d2ac2855a09a626e665']",
            "before_first_fix_commit":"{'74aa751e75a90af34ef63377fcbd41285d155380'}",
            "last_fix_commit":"595ed02cde517fad57854d2ac2855a09a626e665",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/30\/2019, 03:09:45",
            "message":"DOS fix\n\ncorrected unhandled connection 'end' event, fixes issue #1",
            "author":"Trinity Fox",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'lib\/index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Twipped\/ircdkit\/raw\/f0cc6dc913ec17b499fa33a676bb72c624456f2c\/lib%2Findex.js', 'patch': \"@@ -47,7 +47,7 @@ function create (options) {\\n \\n \\t\\tclient.on('end', function () {\\n \\t\\t\\tdebug('connection ended');\\n-\\t\\t\\tremoveClient(client);\\n+\\t\\t\\tclient.close();\\n \\t\\t\\tapp.emit('connection:end', client);\\n \\t\\t});\"}}",
            "message_norm":"dos fix\n\ncorrected unhandled connection 'end' event, fixes issue #1",
            "language":"en",
            "entities":"[('dos', 'SECWORD', ''), ('fix', 'ACTION', ''), ('#1', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/index.js'])",
            "num_files":1.0
        },
        {
            "index":2124,
            "vuln_id":"GHSA-hrmm-f4j8-8vxc",
            "cwe_id":"{'CWE-787'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/d797e3f00e34c12c8c0ae52f56344325439dccd7', 'https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/a9ab1aae31078e80593b9227db11d316c2239ef3'}",
            "dataset":"osv",
            "summary":"Out-of-bounds write A remote code execution vulnerability exists in the way that the Chakra scripting engine handles objects in memory in Microsoft Edge, aka 'Chakra Scripting Engine Memory Corruption Vulnerability'. This CVE ID is unique from CVE-2019-0912, CVE-2019-0913, CVE-2019-0914, CVE-2019-0915, CVE-2019-0916, CVE-2019-0917, CVE-2019-0923, CVE-2019-0924, CVE-2019-0925, CVE-2019-0927, CVE-2019-0933, CVE-2019-0937.",
            "published_date":"2021-03-29",
            "chain_len":2,
            "project":"https:\/\/github.com\/chakra-core\/ChakraCore",
            "commit_href":"https:\/\/github.com\/chakra-core\/ChakraCore\/commit\/a9ab1aae31078e80593b9227db11d316c2239ef3",
            "commit_sha":"a9ab1aae31078e80593b9227db11d316c2239ef3",
            "patch":"MULTI",
            "chain_ord":"['a9ab1aae31078e80593b9227db11d316c2239ef3', 'd797e3f00e34c12c8c0ae52f56344325439dccd7']",
            "before_first_fix_commit":"{'ea0491305137183603bf43844b5584d4cc972e28', '4594e340bc9ca9f857010a68e8b562d65b46eed6'}",
            "last_fix_commit":"d797e3f00e34c12c8c0ae52f56344325439dccd7",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/12\/2019, 23:15:50",
            "message":"[CVE-2019-0922] Type confusion in Edge - Individual",
            "author":"Meghana Gupta",
            "comments":null,
            "stats":"{'additions': 8, 'deletions': 1, 'total': 9}",
            "files":"{'lib\/Backend\/GlobOptArrays.cpp': {'additions': 8, 'deletions': 1, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/chakra-core\/ChakraCore\/raw\/a9ab1aae31078e80593b9227db11d316c2239ef3\/lib%2FBackend%2FGlobOptArrays.cpp', 'patch': '@@ -1736,7 +1736,14 @@ void GlobOpt::ArraySrcOpt::Optimize()\\n     {\\n         if (newBaseValueType != baseValueType)\\n         {\\n-            UpdateValue(nullptr, nullptr, nullptr);\\n+            if (globOpt->IsSafeToTransferInPrePass(baseOpnd, baseValue))\\n+            {\\n+                UpdateValue(nullptr, nullptr, nullptr);\\n+            }\\n+            else if (globOpt->IsOperationThatLikelyKillsJsArraysWithNoMissingValues(instr) && baseValueInfo->HasNoMissingValues())\\n+            {\\n+                globOpt->ChangeValueType(nullptr, baseValue, baseValueInfo->Type().SetHasNoMissingValues(false), true);\\n+            }\\n         }\\n \\n         \/\/ For javascript arrays and objects with javascript arrays:'}}",
            "message_norm":"[cve-2019-0922] type confusion in edge - individual",
            "language":"en",
            "entities":"[('cve-2019-0922', 'VULNID', 'CVE'), ('type confusion', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['lib\/Backend\/GlobOptArrays.cpp'])",
            "num_files":1.0
        },
        {
            "index":836,
            "vuln_id":"GHSA-6gmv-pjp9-p8w8",
            "cwe_id":"{'CWE-125'}",
            "score":8.1,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/37c01fb5e25c3d80213060460196406c43d31995'}",
            "dataset":"osv",
            "summary":"Out of bounds read in Tensorflow ### Impact \nThe [implementation of shape inference for `ReverseSequence`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/ops\/array_ops.cc#L1636-L1671) does not fully validate the value of `batch_dim` and can result in a heap OOB read:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ReverseSequence(\n    input = ['aaa','bbb'],\n    seq_lengths = [1,1,1],\n    seq_dim = -10,\n    batch_dim = -10 )\n  return y\n    \ntest()\n```\n\nThere is a check to make sure the value of `batch_dim` does not go over the rank of the input, but there is no check for negative values:\n\n```cc\n  const int32_t input_rank = c->Rank(input);\n  if (batch_dim >= input_rank) {\n    return errors::InvalidArgument( \n        \"batch_dim must be < input rank: \", batch_dim, \" vs. \", input_rank);\n  }\n  \/\/ ...\n  \n  DimensionHandle batch_dim_dim = c->Dim(input, batch_dim);\n``` \n    \nNegative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then [the implementation of `Dim`](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/5100e359aef5c8021f2e71c7b986420b85ce7b3d\/tensorflow\/core\/framework\/shape_inference.h#L415-L428) would access elements before the start of an array:\n\n```cc\n  DimensionHandle Dim(ShapeHandle s, int64_t idx) {\n    if (!s.Handle() || s->rank_ == kUnknownRank) {\n      return UnknownDim();\n    }\n    return DimKnownRank(s, idx);\n  } \n\u00b7\n  static DimensionHandle DimKnownRank(ShapeHandle s, int64_t idx) {\n    CHECK_NE(s->rank_, kUnknownRank);\n    if (idx < 0) {\n      return s->dims_[s->dims_.size() + idx];\n    }\n    return s->dims_[idx];\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37c01fb5e25c3d80213060460196406c43d31995](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/37c01fb5e25c3d80213060460196406c43d31995).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
            "published_date":"2022-02-09",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/37c01fb5e25c3d80213060460196406c43d31995",
            "commit_sha":"37c01fb5e25c3d80213060460196406c43d31995",
            "patch":"SINGLE",
            "chain_ord":"['37c01fb5e25c3d80213060460196406c43d31995']",
            "before_first_fix_commit":"{'3218043d6d3a019756607643cf65574fbfef5d7a'}",
            "last_fix_commit":"37c01fb5e25c3d80213060460196406c43d31995",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/23\/2021, 22:27:30",
            "message":"Fix out of bound error in ReverseSequence Op shape function\n\nPiperOrigin-RevId: 411896080\nChange-Id: I7e59a38e2f960886edf2b6c54ed5a84e86a9b193",
            "author":"Isha Arkatkar",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 0, 'total': 10}",
            "files":"{'tensorflow\/core\/ops\/array_ops.cc': {'additions': 10, 'deletions': 0, 'changes': 10, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/37c01fb5e25c3d80213060460196406c43d31995\/tensorflow%2Fcore%2Fops%2Farray_ops.cc', 'patch': '@@ -1653,11 +1653,21 @@ REGISTER_OP(\"ReverseSequence\")\\n         return errors::InvalidArgument(\\n             \"batch_dim must be < input rank: \", batch_dim, \" vs. \", input_rank);\\n       }\\n+\\n       if (seq_dim >= input_rank) {\\n         return errors::InvalidArgument(\\n             \"seq_dim must be < input rank: \", seq_dim, \" vs. \", input_rank);\\n       }\\n \\n+      \/\/ To prevent out of bound access when calling c->Dim(input, batch_dim),\\n+      \/\/ batch_dim range [-1 * input rank, input rank) is allowed. However,\\n+      \/\/ the op implementation has a stricter bound for batch_dim requiring >= 0\\n+      \/\/ value. Thus, perform strict check here.\\n+      if (batch_dim < 0) {\\n+        return errors::InvalidArgument(\"batch_dim must be >=0, got \",\\n+                                       batch_dim);\\n+      }\\n+\\n       DimensionHandle batch_dim_dim = c->Dim(input, batch_dim);\\n       TF_RETURN_IF_ERROR(\\n           c->Merge(batch_dim_dim, c->Dim(seq_lens_shape, 0), &batch_dim_dim));'}}",
            "message_norm":"fix out of bound error in reversesequence op shape function\n\npiperorigin-revid: 411896080\nchange-id: i7e59a38e2f960886edf2b6c54ed5a84e86a9b193",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('out of bound', 'SECWORD', ''), ('error', 'FLAW', ''), ('411896080', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/ops\/array_ops.cc'])",
            "num_files":1.0
        },
        {
            "index":3235,
            "vuln_id":"GHSA-w6cx-qg2q-rvq8",
            "cwe_id":"{'CWE-22'}",
            "score":7.6,
            "chain":"{'https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780'}",
            "dataset":"osv",
            "summary":"Path Traversal in @finastra\/ssr-pages A path traversal issue can occur when providing untrusted input to the `svg` property as an argument to the `build(MessagePageOptions)` function.\n\n### References\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\n- https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780",
            "published_date":"2022-03-01",
            "chain_len":1,
            "project":"https:\/\/github.com\/Finastra\/ssr-pages",
            "commit_href":"https:\/\/github.com\/Finastra\/ssr-pages\/pull\/1\/commits\/c3e4c563384ae3ba3892f37dd190218577620780",
            "commit_sha":"c3e4c563384ae3ba3892f37dd190218577620780",
            "patch":"SINGLE",
            "chain_ord":"['c3e4c563384ae3ba3892f37dd190218577620780']",
            "before_first_fix_commit":"{'a61ab5a82983ad2d0779454f929bbb76f00ed605'}",
            "last_fix_commit":"c3e4c563384ae3ba3892f37dd190218577620780",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/25\/2022, 14:09:28",
            "message":"fix: Fix path traversal vulnerability",
            "author":"David Bocl\u00e9",
            "comments":null,
            "stats":"{'additions': 10, 'deletions': 1, 'total': 11}",
            "files":"{'src\/helpers\/inlineSVG.helper.ts': {'additions': 10, 'deletions': 1, 'changes': 11, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Finastra\/ssr-pages\/raw\/c3e4c563384ae3ba3892f37dd190218577620780\/src%2Fhelpers%2FinlineSVG.helper.ts', 'patch': \"@@ -2,6 +2,15 @@ import { readFileSync } from 'fs';\\n import { join } from 'path';\\r\\n \\r\\n export default function inlineSVG(iconName) {\\r\\n-  const path = join(__dirname, `..\/assets\/img\/${iconName}.svg`);\\r\\n+  const path = join(__dirname, `..\/assets\/img\/${iconNameWhitelist(iconName)}.svg`);\\r\\n   return readFileSync(path, 'utf8');\\r\\n }\\r\\n+\\r\\n+function iconNameWhitelist(iconName) {\\r\\n+  const fallbackIconName = 'warning'\\r\\n+  const whitelist = ['warning', 'exit'];\\r\\n+  if (!whitelist.includes(iconName)) {\\r\\n+    return fallbackIconName;\\r\\n+  }\\r\\n+  return iconName;\\r\\n+}\\n\\\\ No newline at end of file\"}}",
            "message_norm":"fix: fix path traversal vulnerability",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('path traversal', 'SECWORD', ''), ('vulnerability', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/helpers\/inlineSVG.helper.ts'])",
            "num_files":1.0
        },
        {
            "index":2085,
            "vuln_id":"GHSA-hjhp-hwfj-hwf3",
            "cwe_id":"{'CWE-352'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/03a1601bf343181df9f405dd2109aec483cb7053'}",
            "dataset":"osv",
            "summary":"Cross Site Request Forgery in firefly-iii  firefly-iii is vulnerable to a Cross-Site Request Forgery (CSRF) attack which can disable two factor authentication for the target user.",
            "published_date":"2021-12-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/firefly-iii\/firefly-iii",
            "commit_href":"https:\/\/github.com\/firefly-iii\/firefly-iii\/commit\/03a1601bf343181df9f405dd2109aec483cb7053",
            "commit_sha":"03a1601bf343181df9f405dd2109aec483cb7053",
            "patch":"SINGLE",
            "chain_ord":"['03a1601bf343181df9f405dd2109aec483cb7053']",
            "before_first_fix_commit":"{'edfff4ec57133bc78bbe6bdc4e1939b75bf9d845'}",
            "last_fix_commit":"03a1601bf343181df9f405dd2109aec483cb7053",
            "chain_ord_pos":1.0,
            "commit_datetime":"11\/24\/2021, 19:04:39",
            "message":"Fix.",
            "author":"James Cole",
            "comments":null,
            "stats":"{'additions': 5, 'deletions': 4, 'total': 9}",
            "files":"{'resources\/views\/v1\/profile\/index.twig': {'additions': 5, 'deletions': 4, 'changes': 9, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/firefly-iii\/firefly-iii\/raw\/03a1601bf343181df9f405dd2109aec483cb7053\/resources%2Fviews%2Fv1%2Fprofile%2Findex.twig', 'patch': '@@ -107,7 +107,7 @@\\n                     <div class=\"box box-default\">\\n                         <div class=\"box-body\">\\n                             <p class=\"text-info\">{{ \\'pref_two_factor_auth_help\\'|_ }}<\/p>\\n-                            {% if enabled2FA == false %}\\n+                            {% if enabled2FA == true %}\\n                                 <p class=\"text-info\">\\n                                     {{ trans_choice(\\'firefly.pref_two_factor_backup_code_count\\', mfaBackupCount) }}\\n                                 <\/p>\\n@@ -116,10 +116,11 @@\\n                                     <a class=\"btn btn-info\" href=\"{{ route(\\'profile.code\\') }}\">\\n                                         <span class=\"fa fa-recycle\"><\/span>\\n                                         {{ \\'pref_two_factor_auth_reset_code\\'|_ }}<\/a>\\n-                                    <a class=\"btn btn-danger\" href=\"{{ route(\\'profile.delete-code\\') }}\">\\n-                                        <span class=\"fa fa-trash\"><\/span>\\n-                                        {{ \\'pref_two_factor_auth_disable_2fa\\'|_ }}<\/a>\\n                                 <\/div>\\n+                                <form method=\"post\" action=\"{{ route(\\'profile.delete-code\\') }}\">\\n+                                    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" \/>\\n+                                    <input class=\"btn btn-danger\" style=\"margin-top:20px;\" type=\"submit\" name=\"submit\" value=\"{{ \\'pref_two_factor_auth_disable_2fa\\'|_ }}\" \/>\\n+                                <\/form>\\n                                 <form method=\"post\" action=\"{{ route(\\'profile.new-backup-codes\\') }}\">\\n                                     <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" \/>\\n                                     <input class=\"btn btn-default\" style=\"margin-top:20px;\" type=\"submit\" name=\"submit\" value=\"{{ \\'pref_two_factor_new_backup_codes\\'|_ }}\" \/>'}}",
            "message_norm":"fix.",
            "language":"ca",
            "entities":null,
            "classification_level_1":"POORLY_DOCUMENTED",
            "classification_level_2":"SINGLE_WORD",
            "list_files":"dict_keys(['resources\/views\/v1\/profile\/index.twig'])",
            "num_files":1.0
        },
        {
            "index":54,
            "vuln_id":"GHSA-278g-rq84-9hmg",
            "cwe_id":"{'CWE-20'}",
            "score":5.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d'}",
            "dataset":"osv",
            "summary":"`CHECK`-fail in `MapStage` ### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.MapStage`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapStage(\n  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),\n  indices=tf.constant((0), dtype=tf.int32),\n  values=[tf.constant((0), dtype=tf.int32)],\n  dtypes=[tf.int32,\n  tf.int64],\n  capacity=0,\n  memory_limit=0,\n  container='',\n  shared_name='')\n```\n  \nThe [implementation](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/460e000de3a83278fb00b61a16d161b1964f15f4\/tensorflow\/core\/kernels\/map_stage_op.cc#L513) does not check that the `key` input is a valid non-empty tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [d7de67733925de196ec8863a33445b73f9562d1d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
            "published_date":"2021-08-25",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/d7de67733925de196ec8863a33445b73f9562d1d",
            "commit_sha":"d7de67733925de196ec8863a33445b73f9562d1d",
            "patch":"SINGLE",
            "chain_ord":"['d7de67733925de196ec8863a33445b73f9562d1d']",
            "before_first_fix_commit":"{'102cacf28ad5a9e7f00b5a195d1995ead8870006'}",
            "last_fix_commit":"d7de67733925de196ec8863a33445b73f9562d1d",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/30\/2021, 05:23:46",
            "message":"Prevent a CHECK-fail due to empty tensor input in `map_stage_op.cc`\n\nPiperOrigin-RevId: 387737906\nChange-Id: Idc52df0c71c7ed6e2dd633b651a581932f277c8a",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 0, 'total': 2}",
            "files":"{'tensorflow\/core\/kernels\/map_stage_op.cc': {'additions': 2, 'deletions': 0, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/d7de67733925de196ec8863a33445b73f9562d1d\/tensorflow%2Fcore%2Fkernels%2Fmap_stage_op.cc', 'patch': '@@ -527,6 +527,8 @@ class MapStageOp : public OpKernel {\\n     OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\\n     OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\\n     OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\\n+    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\\n+                errors::InvalidArgument(\"key must not be empty\"));\\n \\n     \/\/ Create copy for insertion into Staging Area\\n     Tensor key(*key_tensor);'}}",
            "message_norm":"prevent a check-fail due to empty tensor input in `map_stage_op.cc`\n\npiperorigin-revid: 387737906\nchange-id: idc52df0c71c7ed6e2dd633b651a581932f277c8a",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('387737906', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/core\/kernels\/map_stage_op.cc'])",
            "num_files":1.0
        },
        {
            "index":812,
            "vuln_id":"GHSA-6c8f-qphg-qjgp",
            "cwe_id":"{'CWE-668'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/kind-of\/commit\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b'}",
            "dataset":"osv",
            "summary":"Validation Bypass in kind-of Versions of `kind-of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. \n\n\n## Recommendation\n\nUpgrade to versions 6.0.3 or later.",
            "published_date":"2020-03-31",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/kind-of",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/kind-of\/commit\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "commit_sha":"1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "patch":"SINGLE",
            "chain_ord":"['1df992ce6d5a1292048e5fe9c52c5382f941ee0b']",
            "before_first_fix_commit":"{'975c13a7cfaf25d811475823824af3a9c04b0ba8', '4da96c0047906d22a4d6964a668d3abaca122e50'}",
            "last_fix_commit":"1df992ce6d5a1292048e5fe9c52c5382f941ee0b",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/16\/2020, 16:37:23",
            "message":"Merge pull request #31 from xiaofen9\/master\n\nfix type checking vul in ctorName",
            "author":"Brian Woodward",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/kind-of\/raw\/1df992ce6d5a1292048e5fe9c52c5382f941ee0b\/index.js', 'patch': \"@@ -66,7 +66,7 @@ module.exports = function kindOf(val) {\\n };\\n \\n function ctorName(val) {\\n-  return val.constructor ? val.constructor.name : null;\\n+  return val.constructor && typeof val.constructor === 'function' ? val.constructor.name : null;\\n }\\n \\n function isArray(val) {\"}}",
            "message_norm":"merge pull request #31 from xiaofen9\/master\n\nfix type checking vul in ctorname",
            "language":"en",
            "entities":"[('#31', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":316,
            "vuln_id":"GHSA-3w67-q784-6w7c",
            "cwe_id":"{'CWE-369'}",
            "score":2.5,
            "chain":"{'https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d'}",
            "dataset":"osv",
            "summary":"Division by zero in TFLite's implementation of `GatherNd` ### Impact\nThe reference implementation of the `GatherNd` TFLite operator is [vulnerable to a division by zero error](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7\/tensorflow\/lite\/kernels\/internal\/reference\/reference_ops.h#L966):\n\n```cc \nret.dims_to_count[i] = remain_flat_size \/ params_shape.Dims(i);\n```\n\nAn attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [8e45822aa0b9f5df4b4c64f221e64dc930a70a9d](https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
            "published_date":"2021-05-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/tensorflow\/tensorflow",
            "commit_href":"https:\/\/github.com\/tensorflow\/tensorflow\/commit\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "commit_sha":"8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "patch":"SINGLE",
            "chain_ord":"['8e45822aa0b9f5df4b4c64f221e64dc930a70a9d']",
            "before_first_fix_commit":"{'0d45ea1ca641b21b73bcf9c00e0179cda284e7e7'}",
            "last_fix_commit":"8e45822aa0b9f5df4b4c64f221e64dc930a70a9d",
            "chain_ord_pos":1.0,
            "commit_datetime":"04\/28\/2021, 00:46:10",
            "message":"Handle one more division by 0 in TFLite.\n\nPiperOrigin-RevId: 370800140\nChange-Id: I9ab42e5aaccf02f226d1282611490a54cf7d273e",
            "author":"Mihai Maruseac",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'tensorflow\/lite\/kernels\/gather_nd.cc': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/tensorflow\/tensorflow\/raw\/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d\/tensorflow%2Flite%2Fkernels%2Fgather_nd.cc', 'patch': '@@ -155,6 +155,9 @@ TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\\n   TF_LITE_ENSURE_OK(context,\\n                     GetOutputSafe(context, node, kOutputTensor, &output));\\n \\n+  \/\/ Prevent division by 0 in the helper\\n+  TF_LITE_ENSURE(context, NumElements(params) > 0);\\n+\\n   switch (indices->type) {\\n     case kTfLiteInt32:\\n       return EvalGatherNd<int32_t>(context, params, indices, output);'}}",
            "message_norm":"handle one more division by 0 in tflite.\n\npiperorigin-revid: 370800140\nchange-id: i9ab42e5aaccf02f226d1282611490a54cf7d273e",
            "language":"en",
            "entities":"[('division by 0', 'SECWORD', ''), ('370800140', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['tensorflow\/lite\/kernels\/gather_nd.cc'])",
            "num_files":1.0
        },
        {
            "index":75,
            "vuln_id":"GHSA-29vr-79w7-p649",
            "cwe_id":"{'CWE-863'}",
            "score":9.8,
            "chain":"{'https:\/\/github.com\/Gerapy\/Gerapy\/commit\/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28'}",
            "dataset":"osv",
            "summary":"Incorrect Authorization in Gerapy An Access Control vunerabiity exists in Gerapy v 0.9.7 via the spider parameter in project_configure function.",
            "published_date":"2022-03-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/Gerapy\/Gerapy",
            "commit_href":"https:\/\/github.com\/Gerapy\/Gerapy\/commit\/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
            "commit_sha":"49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
            "patch":"SINGLE",
            "chain_ord":"['49bcb19be5e0320e7e1535f34fe00f16a3cf3b28']",
            "before_first_fix_commit":"{'f1cd46d80328497c016fbac12c9239b9dcaef047'}",
            "last_fix_commit":"49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/26\/2021, 09:50:00",
            "message":"fix remote execute",
            "author":"Germey",
            "comments":null,
            "stats":"{'additions': 56, 'deletions': 40, 'total': 96}",
            "files":"{'gerapy\/server\/core\/views.py': {'additions': 56, 'deletions': 40, 'changes': 96, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Gerapy\/Gerapy\/raw\/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28\/gerapy%2Fserver%2Fcore%2Fviews.py', 'patch': '@@ -2,7 +2,12 @@\\n from pathlib import Path\\n from urllib.parse import unquote\\n import base64\\n-import json, os, requests, time, pytz, pymongo\\n+import json\\n+import os\\n+import requests\\n+import time\\n+import pytz\\n+import pymongo\\n from shutil import rmtree\\n from requests.exceptions import ConnectionError\\n from os.path import join, exists\\n@@ -173,7 +178,8 @@ def spider_list(request, client_id, project_name):\\n         client = Client.objects.get(id=client_id)\\n         scrapyd = get_scrapyd(client)\\n         spiders = scrapyd.list_spiders(project_name)\\n-        spiders = [{\\'name\\': spider, \\'id\\': index + 1} for index, spider in enumerate(spiders)]\\n+        spiders = [{\\'name\\': spider, \\'id\\': index + 1}\\n+                   for index, spider in enumerate(spiders)]\\n         return JsonResponse(spiders)\\n \\n \\n@@ -242,23 +248,25 @@ def project_configure(request, project_name):\\n     if request.method == \\'GET\\':\\n         project = Project.objects.get(name=project_name)\\n         project = model_to_dict(project)\\n-        project[\\'configuration\\'] = json.loads(project[\\'configuration\\']) if project[\\'configuration\\'] else None\\n+        project[\\'configuration\\'] = json.loads(\\n+            project[\\'configuration\\']) if project[\\'configuration\\'] else None\\n         return JsonResponse(project)\\n-    \\n+\\n     # update configuration\\n     elif request.method == \\'POST\\':\\n         project = Project.objects.filter(name=project_name)\\n         data = json.loads(request.body)\\n-        configuration = json.dumps(data.get(\\'configuration\\'), ensure_ascii=False)\\n+        configuration = json.dumps(\\n+            data.get(\\'configuration\\'), ensure_ascii=False)\\n         project.update(**{\\'configuration\\': configuration})\\n-        \\n         # for safe protection\\n-        project_name = re.sub(\\'[\\\\!\\\\@\\\\#\\\\$\\\\;\\\\&\\\\*\\\\~\\\\\"\\\\\\'\\\\{\\\\}\\\\]\\\\[\\\\-\\\\+\\\\%\\\\^]+\\', \\'\\', project_name)\\n+        project_name = re.sub(\\n+            \\'[\\\\s\\\\!\\\\@\\\\#\\\\$\\\\;\\\\&\\\\*\\\\~\\\\\"\\\\\\'\\\\{\\\\}\\\\]\\\\[\\\\-\\\\+\\\\%\\\\^]+\\', \\'\\', project_name)\\n         # execute generate cmd\\n-        cmd = \\' \\'.join([\\'gerapy\\', \\'generate\\', project_name])\\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\\n+        cmd = [\\'gerapy\\', \\'generate\\', project_name]\\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\\n-        \\n+\\n         if not stderr:\\n             return JsonResponse({\\'status\\': \\'1\\'})\\n         else:\\n@@ -294,7 +302,8 @@ def project_create(request):\\n         data[\\'configurable\\'] = 1\\n         project, result = Project.objects.update_or_create(**data)\\n         # generate a single project folder\\n-        path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data[\\'name\\'])\\n+        path = join(os.path.abspath(\\n+            join(os.getcwd(), PROJECTS_FOLDER)), data[\\'name\\'])\\n         os.mkdir(path)\\n         return JsonResponse(model_to_dict(project))\\n \\n@@ -334,12 +343,13 @@ def project_clone(request):\\n         if not address.startswith(\\'http\\'):\\n             return JsonResponse({\\'status\\': False})\\n         address = address + \\'.git\\' if not address.endswith(\\'.git\\') else address\\n-        cmd = \\'git clone {address} {target}\\'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))\\n+        cmd = [\\'git\\', \\'clone\\', \\'address\\', join(PROJECTS_FOLDER, Path(address).stem)]\\n         logger.debug(\\'clone cmd %s\\', cmd)\\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\\n         logger.debug(\\'clone run result %s\\', stdout)\\n-        if stderr: logger.error(stderr)\\n+        if stderr:\\n+            logger.error(stderr)\\n         return JsonResponse({\\'status\\': True}) if not stderr else JsonResponse({\\'status\\': False})\\n \\n \\n@@ -393,10 +403,12 @@ def project_version(request, client_id, project_name):\\n                 return JsonResponse({\\'message\\': \\'Connect Error\\'}, status=500)\\n             if len(versions) > 0:\\n                 version = versions[-1]\\n-                deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))\\n+                deployed_at = timezone.datetime.fromtimestamp(\\n+                    int(version), tz=pytz.timezone(TIME_ZONE))\\n             else:\\n                 deployed_at = None\\n-            deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)\\n+            deploy, result = Deploy.objects.update_or_create(\\n+                client=client, project=project, deployed_at=deployed_at)\\n         # return deploy json info\\n         return JsonResponse(model_to_dict(deploy))\\n \\n@@ -446,7 +458,7 @@ def project_build(request, project_name):\\n     # get project folder\\n     path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\\n     project_path = join(path, project_name)\\n-    \\n+\\n     # get build version\\n     if request.method == \\'GET\\':\\n         egg = find_egg(project_path)\\n@@ -470,7 +482,7 @@ def project_build(request, project_name):\\n         # transfer model to dict then dumps it to json\\n         data = model_to_dict(model)\\n         return JsonResponse(data)\\n-    \\n+\\n     # build operation manually by clicking button\\n     elif request.method == \\'POST\\':\\n         data = json.loads(request.body)\\n@@ -483,7 +495,8 @@ def project_build(request, project_name):\\n         built_at = timezone.now()\\n         # if project does not exists in db, create it\\n         if not Project.objects.filter(name=project_name):\\n-            Project(name=project_name, description=description, built_at=built_at, egg=egg).save()\\n+            Project(name=project_name, description=description,\\n+                    built_at=built_at, egg=egg).save()\\n             model = Project.objects.get(name=project_name)\\n         # if project exists, update egg, description, built_at info\\n         else:\\n@@ -526,17 +539,16 @@ def project_parse(request, project_name):\\n         body = data.get(\\'body\\', \\'\\')\\n         if args.get(\\'method\\').lower() != \\'get\\':\\n             args[\\'body\\'] = \"\\'\" + json.dumps(body, ensure_ascii=False) + \"\\'\"\\n-        \\n-        args_cmd = \\' \\'.join(\\n-            [\\'--{arg} {value}\\'.format(arg=arg, value=value) for arg, value in args.items()])\\n-        logger.debug(\\'args cmd %s\\', args_cmd)\\n-        cmd = \\'gerapy parse {args_cmd} {project_path} {spider_name}\\'.format(\\n-            args_cmd=args_cmd,\\n-            project_path=project_path,\\n-            spider_name=spider_name\\n-        )\\n+\\n+        args_array = []\\n+        for arg, value in args.items():\\n+            args_array.append(f\\'--{arg}\\')\\n+            args_array.append(f\\'{value}\\')\\n+        cmd = [\\'gerapy\\', \\'parse\\'] + args_array + [project_path] + [spider_name]\\n+        print(\\'cmd\\', cmd)\\n         logger.debug(\\'parse cmd %s\\', cmd)\\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\\n+        p = Popen(cmd, shell=False, stdin=PIPE,\\n+                         stdout=PIPE, stderr=PIPE, close_fds=True)\\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\\n         logger.debug(\\'stdout %s, stderr %s\\', stdout, stderr)\\n         if not stderr:\\n@@ -645,7 +657,6 @@ def job_list(request, client_id, project_name):\\n                 job[\\'status\\'] = status\\n                 jobs.append(job)\\n         return JsonResponse(jobs)\\n-    \\n \\n \\n @api_view([\\'GET\\'])\\n@@ -663,7 +674,8 @@ def job_log(request, client_id, project_name, spider_name, job_id):\\n     if request.method == \\'GET\\':\\n         client = Client.objects.get(id=client_id)\\n         # get log url\\n-        url = log_url(client.ip, client.port, project_name, spider_name, job_id)\\n+        url = log_url(client.ip, client.port,\\n+                      project_name, spider_name, job_id)\\n         # get last 1000 bytes of log\\n         response = requests.get(url, timeout=5, headers={\\n             \\'Range\\': \\'bytes=-1000\\'\\n@@ -765,7 +777,8 @@ def monitor_create(request):\\n     if request.method == \\'POST\\':\\n         data = json.loads(request.body)\\n         data = data[\\'form\\']\\n-        data[\\'configuration\\'] = json.dumps(data[\\'configuration\\'], ensure_ascii=False)\\n+        data[\\'configuration\\'] = json.dumps(\\n+            data[\\'configuration\\'], ensure_ascii=False)\\n         monitor = Monitor.objects.create(**data)\\n         return JsonResponse(model_to_dict(monitor))\\n \\n@@ -785,7 +798,8 @@ def task_create(request):\\n                                    name=data.get(\\'name\\'),\\n                                    spider=data.get(\\'spider\\'),\\n                                    trigger=data.get(\\'trigger\\'),\\n-                                   configuration=json.dumps(data.get(\\'configuration\\'), ensure_ascii=False),\\n+                                   configuration=json.dumps(\\n+                                       data.get(\\'configuration\\'), ensure_ascii=False),\\n                                    modified=1)\\n         return JsonResponse({\\'result\\': \\'1\\', \\'data\\': model_to_dict(task)})\\n \\n@@ -803,7 +817,8 @@ def task_update(request, task_id):\\n         task = Task.objects.filter(id=task_id)\\n         data = json.loads(request.body)\\n         data[\\'clients\\'] = json.dumps(data.get(\\'clients\\'), ensure_ascii=False)\\n-        data[\\'configuration\\'] = json.dumps(data.get(\\'configuration\\'), ensure_ascii=False)\\n+        data[\\'configuration\\'] = json.dumps(\\n+            data.get(\\'configuration\\'), ensure_ascii=False)\\n         data[\\'modified\\'] = 1\\n         task.update(**data)\\n         return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\\n@@ -823,11 +838,10 @@ def task_remove(request, task_id):\\n         clients = clients_of_task(task)\\n         for client in clients:\\n             job_id = get_job_id(client, task)\\n-            DjangoJob.objects.filter(name=job_id).delete()\\n+            DjangoJob.objects.filter(id=job_id).delete()\\n         # delete task\\n         Task.objects.filter(id=task_id).delete()\\n         return JsonResponse({\\'result\\': \\'1\\'})\\n-    \\n \\n \\n @api_view([\\'GET\\'])\\n@@ -875,12 +889,14 @@ def task_status(request, task_id):\\n         clients = clients_of_task(task)\\n         for client in clients:\\n             job_id = get_job_id(client, task)\\n-            jobs = DjangoJob.objects.filter(name=job_id)\\n+            jobs = DjangoJob.objects.filter(id=job_id)\\n             logger.debug(\\'jobs from djangojob %s\\', jobs)\\n             # if job does not exist, for date mode exceed time\\n-            if not jobs: continue\\n-            job = DjangoJob.objects.get(name=job_id)\\n-            executions = serialize(\\'json\\', DjangoJobExecution.objects.filter(job=job))\\n+            if not jobs:\\n+                continue\\n+            job = DjangoJob.objects.get(id=job_id)\\n+            executions = serialize(\\n+                \\'json\\', DjangoJobExecution.objects.filter(job=job))\\n             result.append({\\n                 \\'client\\': model_to_dict(client),\\n                 \\'next\\': job.next_run_time,'}}",
            "message_norm":"fix remote execute",
            "language":"ro",
            "entities":"[('fix', 'ACTION', ''), ('remote execute', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['gerapy\/server\/core\/views.py'])",
            "num_files":1.0
        },
        {
            "index":2080,
            "vuln_id":"GHSA-hj5v-574p-mj7c",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/pytest-dev\/py\/pull\/257\/commits\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144'}",
            "dataset":"osv",
            "summary":"Regular expression deinal of service in py A denial of service via regular expression in the py.path.svnwc component of py (aka python-py) through 1.9.0 could be used by attackers to cause a compute-time denial of service attack by supplying malicious input to the blame functionality.",
            "published_date":"2021-04-20",
            "chain_len":1,
            "project":"https:\/\/github.com\/pytest-dev\/py",
            "commit_href":"https:\/\/github.com\/pytest-dev\/py\/pull\/257\/commits\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "commit_sha":"4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "patch":"SINGLE",
            "chain_ord":"['4a9017dc6199d2a564b6e4b0aa39d6d8870e4144']",
            "before_first_fix_commit":"{'2da2caea38812eaa3ce09dd5292e3635ce9b16c8'}",
            "last_fix_commit":"4a9017dc6199d2a564b6e4b0aa39d6d8870e4144",
            "chain_ord_pos":1.0,
            "commit_datetime":"09\/04\/2020, 10:57:26",
            "message":"svnwc: fix regular expression vulnerable to DoS in blame functionality\n\nThe subpattern `\\d+\\s*\\S+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nSVN blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nFixes #256.",
            "author":"Ran Benita",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'py\/_path\/svnwc.py': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/pytest-dev\/py\/raw\/4a9017dc6199d2a564b6e4b0aa39d6d8870e4144\/py%2F_path%2Fsvnwc.py', 'patch': '@@ -396,7 +396,7 @@ def makecmdoptions(self):\\n     def __str__(self):\\n         return \"<SvnAuth username=%s ...>\" %(self.username,)\\n \\n-rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s*(\\\\S+) (.*)\\')\\n+rex_blame = re.compile(r\\'\\\\s*(\\\\d+)\\\\s+(\\\\S+) (.*)\\')\\n \\n class SvnWCCommandPath(common.PathBase):\\n     \"\"\" path implementation offering access\/modification to svn working copies.'}}",
            "message_norm":"svnwc: fix regular expression vulnerable to dos in blame functionality\n\nthe subpattern `\\d+\\s*\\s+` is ambiguous which makes the pattern subject\nto catastrophic backtracing given a string like `\"1\" * 5000`.\n\nsvn blame output seems to always have at least one space between the\nrevision number and the user name, so the ambiguity can be fixed by\nchanging the `*` to `+`.\n\nfixes #256.",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('vulnerable', 'SECWORD', ''), ('dos', 'SECWORD', ''), ('user name', 'SECWORD', ''), ('fixed', 'ACTION', ''), ('changing', 'ACTION', ''), ('fixes', 'ACTION', ''), ('#256', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['py\/_path\/svnwc.py'])",
            "num_files":1.0
        },
        {
            "index":264,
            "vuln_id":"GHSA-3j78-7m59-r7gv",
            "cwe_id":"{'CWE-284'}",
            "score":8.0,
            "chain":"{'https:\/\/github.com\/buddypress\/BuddyPress\/commit\/39294680369a0c992290577a9d740f4a2f2c2ca3'}",
            "dataset":"osv",
            "summary":"Private data exposure via REST API in BuddyPress In BuddyPress before 5.1.2, requests to a certain REST API endpoint can result in private user data getting exposed. Authentication is not needed.\n\nThis has been patched in version 5.1.2.",
            "published_date":"2020-02-24",
            "chain_len":1,
            "project":"https:\/\/github.com\/buddypress\/BuddyPress",
            "commit_href":"https:\/\/github.com\/buddypress\/BuddyPress\/commit\/39294680369a0c992290577a9d740f4a2f2c2ca3",
            "commit_sha":"39294680369a0c992290577a9d740f4a2f2c2ca3",
            "patch":"SINGLE",
            "chain_ord":"['39294680369a0c992290577a9d740f4a2f2c2ca3']",
            "before_first_fix_commit":"{'98da00c5892ccc7aca5702ffd43d651cb78c0c7c'}",
            "last_fix_commit":"39294680369a0c992290577a9d740f4a2f2c2ca3",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/31\/2020, 16:32:54",
            "message":"Admin: Sanitize external links to activated BP component pages.\n\nProps imath.\nSee #8235.\n\ngit-svn-id: https:\/\/buddypress.svn.wordpress.org\/trunk@12549 cdf35c40-ae34-48e0-9cc9-0c9da1808c22",
            "author":"Mercime",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/bp-core\/admin\/bp-core-admin-slugs.php': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/buddypress\/buddypress\/raw\/39294680369a0c992290577a9d740f4a2f2c2ca3\/src%2Fbp-core%2Fadmin%2Fbp-core-admin-slugs.php', 'patch': '@@ -145,7 +145,7 @@ function bp_core_admin_slugs_options() {\\n \\n \\t\\t\\t\\t\\t\\t\\t<?php if ( !empty( $existing_pages[$name] ) ) : ?>\\n \\n-\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"<?php echo get_permalink( $existing_pages[$name] ); ?>\" class=\"button-secondary\" target=\"_bp\"><?php _e( \\'View\\', \\'buddypress\\' ); ?><\/a>\\n+\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"<?php echo esc_url( get_permalink( $existing_pages[$name] ) ); ?>\" class=\"button-secondary\" target=\"_bp\"><?php _e( \\'View\\', \\'buddypress\\' ); ?><\/a>\\n \\n \\t\\t\\t\\t\\t\\t\\t<?php endif; ?>'}}",
            "message_norm":"admin: sanitize external links to activated bp component pages.\n\nprops imath.\nsee #8235.\n\ngit-svn-id: https:\/\/buddypress.svn.wordpress.org\/trunk@12549 cdf35c40-ae34-48e0-9cc9-0c9da1808c22",
            "language":"en",
            "entities":"[('admin', 'SECWORD', ''), ('sanitize', 'SECWORD', ''), ('#8235', 'ISSUE', ''), ('https:\/\/buddypress.svn.wordpress.org\/trunk@12549', 'URL', ''), ('cdf35c40', 'SHA', 'generic_sha'), ('0c9da1808c22', 'SHA', 'generic_sha')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/bp-core\/admin\/bp-core-admin-slugs.php'])",
            "num_files":1.0
        },
        {
            "index":231,
            "vuln_id":"GHSA-39q4-p535-c852",
            "cwe_id":"{'CWE-400'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/locutusjs\/locutus\/commit\/eb863321990e7e5514aa14f68b8d9978ece9e65e'}",
            "dataset":"osv",
            "summary":"Uncontrolled Resource Consumption in locutus The package locutus before 2.0.15 are vulnerable to Regular Expression Denial of Service (ReDoS) via the gopher_parsedir function.",
            "published_date":"2021-06-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/locutusjs\/locutus",
            "commit_href":"https:\/\/github.com\/locutusjs\/locutus\/commit\/eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "commit_sha":"eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "patch":"SINGLE",
            "chain_ord":"['eb863321990e7e5514aa14f68b8d9978ece9e65e']",
            "before_first_fix_commit":"{'243b723896c3c82f5496b6008f9aa1be52741899'}",
            "last_fix_commit":"eb863321990e7e5514aa14f68b8d9978ece9e65e",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/27\/2021, 06:46:30",
            "message":"Prevent ReDos issue with regex inside gopher_parsedir (#446)",
            "author":"Rafa\u0142 Kukawski",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'src\/php\/net-gopher\/gopher_parsedir.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/locutusjs\/locutus\/raw\/eb863321990e7e5514aa14f68b8d9978ece9e65e\/src%2Fphp%2Fnet-gopher%2Fgopher_parsedir.js', 'patch': '@@ -22,7 +22,7 @@ module.exports = function gopher_parsedir (dirent) { \/\/ eslint-disable-line came\\n    * s = Audio file format, primarily a WAV file\\n    *\/\\n \\n-  const entryPattern = \/^(.)(.*?)\\\\t(.*?)\\\\t(.*?)\\\\t(.*?)\\\\u000d\\\\u000a$\/\\n+  const entryPattern = \/^(.)([^\\\\t]*)\\\\t([^\\\\t]*)\\\\t([^\\\\t]*)\\\\t([^\\\\t]*)\\\\r\\\\n$\/\\n   const entry = dirent.match(entryPattern)\\n \\n   if (entry === null) {'}}",
            "message_norm":"prevent redos issue with regex inside gopher_parsedir (#446)",
            "language":"en",
            "entities":"[('prevent', 'ACTION', ''), ('redos', 'SECWORD', ''), ('issue', 'FLAW', ''), ('#446', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/php\/net-gopher\/gopher_parsedir.js'])",
            "num_files":1.0
        },
        {
            "index":3211,
            "vuln_id":"GHSA-w3v3-cxq5-9vr4",
            "cwe_id":"{'CWE-276', 'CWE-284'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/snipe\/snipe-it\/commit\/cf14a0222c67472086cd08b2155f045edaf75f2e'}",
            "dataset":"osv",
            "summary":"Incorrect Default Permissions and Improper Access Control in snipe-it snipe-it is vulnerable to Improper Access Control\/Incorrect Default Permissions.",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/snipe\/snipe-it",
            "commit_href":"https:\/\/github.com\/snipe\/snipe-it\/commit\/cf14a0222c67472086cd08b2155f045edaf75f2e",
            "commit_sha":"cf14a0222c67472086cd08b2155f045edaf75f2e",
            "patch":"SINGLE",
            "chain_ord":"['cf14a0222c67472086cd08b2155f045edaf75f2e']",
            "before_first_fix_commit":"{'b78e610ce3b4295fb4c56659976a5d5d26eeb6da', 'bb095641c2f421f744796d184287c46fc9303591'}",
            "last_fix_commit":"cf14a0222c67472086cd08b2155f045edaf75f2e",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/11\/2022, 03:24:31",
            "message":"Merge pull request #10498 from Haxatron\/master\n\nFix access control",
            "author":"snipe",
            "comments":null,
            "stats":"{'additions': 6, 'deletions': 2, 'total': 8}",
            "files":"{'app\/Http\/Controllers\/BulkAssetModelsController.php': {'additions': 6, 'deletions': 2, 'changes': 8, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/snipe\/snipe-it\/raw\/cf14a0222c67472086cd08b2155f045edaf75f2e\/app%2FHttp%2FControllers%2FBulkAssetModelsController.php', 'patch': \"@@ -32,6 +32,7 @@ public function edit(Request $request)\\n \\n             \/\/ If deleting....\\n             if ($request->input('bulk_actions')=='delete') {\\n+                $this->authorize('delete', AssetModel::class);\\n                 $valid_count = 0;\\n                 foreach ($models as $model) {\\n                     if ($model->assets_count == 0) {\\n@@ -42,7 +43,7 @@ public function edit(Request $request)\\n \\n             \/\/ Otherwise display the bulk edit screen\\n             }\\n-\\n+            $this->authorize('update', AssetModel::class);\\n             $nochange = ['NC' => 'No Change'];\\n             return view('models\/bulk-edit', compact('models'))\\n                 ->with('fieldset_list', $nochange + Helper::customFieldsetList())\\n@@ -63,7 +64,8 @@ public function edit(Request $request)\\n      *\/\\n     public function update(Request $request)\\n     {\\n-\\n+        $this->authorize('update', AssetModel::class);\\n+      \\n         $models_raw_array = $request->input('ids');\\n         $update_array = array();\\n \\n@@ -103,6 +105,8 @@ public function update(Request $request)\\n      *\/\\n     public function destroy(Request $request)\\n     {\\n+        $this->authorize('delete', AssetModel::class);\\n+      \\n         $models_raw_array = $request->input('ids');\\n \\n         if ((is_array($models_raw_array)) && (count($models_raw_array) > 0)) {\"}}",
            "message_norm":"merge pull request #10498 from haxatron\/master\n\nfix access control",
            "language":"en",
            "entities":"[('#10498', 'ISSUE', ''), ('access control', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['app\/Http\/Controllers\/BulkAssetModelsController.php'])",
            "num_files":1.0
        },
        {
            "index":277,
            "vuln_id":"GHSA-3mpr-hq3p-49h9",
            "cwe_id":"{'CWE-471'}",
            "score":0.0,
            "chain":"{'https:\/\/github.com\/jonschlinkert\/mixin-deep\/commit\/578b0bc5e74e14de9ef4975f504dc698796bdf9c'}",
            "dataset":"osv",
            "summary":"Prototype Pollution in mixin-deep Versions of `mixin-deep` before 1.3.1 are vulnerable to prototype pollution via merging functions.\n\n\n## Recommendation\n\nUpdate to version 1.3.1 or later.",
            "published_date":"2018-07-26",
            "chain_len":1,
            "project":"https:\/\/github.com\/jonschlinkert\/mixin-deep",
            "commit_href":"https:\/\/github.com\/jonschlinkert\/mixin-deep\/commit\/578b0bc5e74e14de9ef4975f504dc698796bdf9c",
            "commit_sha":"578b0bc5e74e14de9ef4975f504dc698796bdf9c",
            "patch":"SINGLE",
            "chain_ord":"['578b0bc5e74e14de9ef4975f504dc698796bdf9c']",
            "before_first_fix_commit":"{'7705bdf88ff0263242c07c824d20526203876668'}",
            "last_fix_commit":"578b0bc5e74e14de9ef4975f504dc698796bdf9c",
            "chain_ord_pos":1.0,
            "commit_datetime":"02\/07\/2018, 16:04:06",
            "message":"exclude __proto__",
            "author":"doowb",
            "comments":null,
            "stats":"{'additions': 4, 'deletions': 0, 'total': 4}",
            "files":"{'index.js': {'additions': 4, 'deletions': 0, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jonschlinkert\/mixin-deep\/raw\/578b0bc5e74e14de9ef4975f504dc698796bdf9c\/index.js', 'patch': \"@@ -23,6 +23,10 @@ function mixinDeep(target, objects) {\\n  *\/\\n \\n function copy(val, key) {\\n+  if (key === '__proto__') {\\n+    return;\\n+  }\\n+\\n   var obj = this[key];\\n   if (isObject(val) && isObject(obj)) {\\n     mixinDeep(obj, val);\"}}",
            "message_norm":"exclude __proto__",
            "language":"pt",
            "entities":null,
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":671,
            "vuln_id":"GHSA-5ppx-rgw2-xg23",
            "cwe_id":"{'CWE-79'}",
            "score":4.8,
            "chain":"{'https:\/\/github.com\/jenkinsci\/jenkins\/commit\/f67068170b55633571e5462e52b6124b23d7cb84'}",
            "dataset":"osv",
            "summary":"Improper Neutralization of Input During Web Page Generation in Jenkins Jenkins 2.88 and earlier; 2.73.2 and earlier Autocompletion suggestions for text fields were not escaped, resulting in a persisted cross-site scripting vulnerability if the source for the suggestions allowed specifying text that includes HTML metacharacters like less-than and greater-than characters.",
            "published_date":"2022-05-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/jenkinsci\/jenkins",
            "commit_href":"https:\/\/github.com\/jenkinsci\/jenkins\/commit\/f67068170b55633571e5462e52b6124b23d7cb84",
            "commit_sha":"f67068170b55633571e5462e52b6124b23d7cb84",
            "patch":"SINGLE",
            "chain_ord":"['f67068170b55633571e5462e52b6124b23d7cb84']",
            "before_first_fix_commit":"{'566a8ddb885f0bef9bc848e60455c0aabbf0c1d3'}",
            "last_fix_commit":"f67068170b55633571e5462e52b6124b23d7cb84",
            "chain_ord_pos":1.0,
            "commit_datetime":"10\/24\/2017, 16:01:03",
            "message":"[SECURITY-641] Escape autocompletion suggestions",
            "author":"Daniel Beck",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 0, 'total': 1}",
            "files":"{'war\/src\/main\/webapp\/scripts\/hudson-behavior.js': {'additions': 1, 'deletions': 0, 'changes': 1, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/jenkinsci\/jenkins\/raw\/f67068170b55633571e5462e52b6124b23d7cb84\/war%2Fsrc%2Fmain%2Fwebapp%2Fscripts%2Fhudson-behavior.js', 'patch': '@@ -712,6 +712,7 @@ var jenkinsRules = {\\n         };\\n         ac.prehighlightClassName = \"yui-ac-prehighlight\";\\n         ac.animSpeed = 0;\\n+        ac.formatResult = ac.formatEscapedResult;\\n         ac.useShadow = true;\\n         ac.autoSnapContainer = true;\\n         ac.delimChar = e.getAttribute(\"autoCompleteDelimChar\");'}}",
            "message_norm":"[security-641] escape autocompletion suggestions",
            "language":"fr",
            "entities":"[('security-641', 'SECWORD', ''), ('escape', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['war\/src\/main\/webapp\/scripts\/hudson-behavior.js'])",
            "num_files":1.0
        },
        {
            "index":2955,
            "vuln_id":"GHSA-rhq2-3vr9-6mcr",
            "cwe_id":"{'CWE-22'}",
            "score":8.3,
            "chain":"{'https:\/\/github.com\/gradio-app\/gradio\/commit\/41bd3645bdb616e1248b2167ca83636a2653f781'}",
            "dataset":"osv",
            "summary":"Files on the host computer can be accessed from the Gradio interface ### Impact\nThis is a vulnerability that affects anyone who creates and publicly shares Gradio interfaces using `gradio<2.4.8`. Because of the way that static files were being served, someone who generated a public Gradio link and shared it with others would potentially be exposing the files on the computer that generated the link, while the link was active. An attacker would be able to view the contents of a file on the computer if they knew the exact relative filepath. We do not have any evidence that this was ever exploited, but we treated the issue seriously and immediately took steps to mitigate it (see below)\n\n### Response\n1. We worked with @haby0 to immediately patch the issue and released a new version, `gradio 2.5.0`, within 24 hours of the issue being brought to our attention \n2. We enabled a notification that is printed to anyone using an older version of gradio telling them to upgrade (see screenshot below)\n3. We expanded our test suite to test for this vulnerability ensuring that our patch does not get reverted in future releases of `gradio`\n\n![image](https:\/\/user-images.githubusercontent.com\/1778297\/146251425-f36b519b-6d4a-4dfb-8d89-c1ed005979d3.png)\n\n### Patches\nThe problem has been patched in `gradio>=2.5.0`.",
            "published_date":"2022-01-21",
            "chain_len":1,
            "project":"https:\/\/github.com\/gradio-app\/gradio",
            "commit_href":"https:\/\/github.com\/gradio-app\/gradio\/commit\/41bd3645bdb616e1248b2167ca83636a2653f781",
            "commit_sha":"41bd3645bdb616e1248b2167ca83636a2653f781",
            "patch":"SINGLE",
            "chain_ord":"['41bd3645bdb616e1248b2167ca83636a2653f781']",
            "before_first_fix_commit":"{'0b2c4901a63b2e5a7d7b3964d27b8f82d6d330e1'}",
            "last_fix_commit":"41bd3645bdb616e1248b2167ca83636a2653f781",
            "chain_ord_pos":1.0,
            "commit_datetime":"12\/14\/2021, 21:01:55",
            "message":"secure path hotfix",
            "author":"Ali Abid",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 3, 'total': 5}",
            "files":"{'gradio\/networking.py': {'additions': 2, 'deletions': 3, 'changes': 5, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/gradio-app\/gradio\/raw\/41bd3645bdb616e1248b2167ca83636a2653f781\/gradio%2Fnetworking.py', 'patch': '@@ -377,15 +377,14 @@ def interpret():\\n @app.route(\"\/file\/<path:path>\", methods=[\"GET\"])\\n @login_check\\n def file(path):\\n-    path = secure_filename(path)\\n     if app.interface.encrypt and isinstance(app.interface.examples, str) and path.startswith(app.interface.examples):\\n-        with open(os.path.join(app.cwd, path), \"rb\") as encrypted_file:\\n+        with open(safe_join(app.cwd, path), \"rb\") as encrypted_file:\\n             encrypted_data = encrypted_file.read()\\n         file_data = encryptor.decrypt(\\n             app.interface.encryption_key, encrypted_data)\\n         return send_file(io.BytesIO(file_data), attachment_filename=os.path.basename(path))\\n     else:\\n-        return send_file(os.path.join(app.cwd, path))\\n+        return send_file(safe_join(app.cwd, path))\\n \\n \\n @app.route(\"\/api\/queue\/push\/\", methods=[\"POST\"])'}}",
            "message_norm":"secure path hotfix",
            "language":"en",
            "entities":"[('secure', 'SECWORD', ''), ('hotfix', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['gradio\/networking.py'])",
            "num_files":1.0
        },
        {
            "index":2709,
            "vuln_id":"GHSA-q6mp-562x-ggvv",
            "cwe_id":"{'CWE-79'}",
            "score":5.4,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e'}",
            "dataset":"osv",
            "summary":"Cross-site Scripting in microweber Cross-site Scripting (XSS) - Stored in GitHub repository microweber\/microweber prior to 1.2.19.",
            "published_date":"2022-07-05",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "commit_sha":"70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "patch":"SINGLE",
            "chain_ord":"['70b46e231e7b2c113666745a0ab6de9a8b7ef08e']",
            "before_first_fix_commit":"{'b7663f9af0f4ab777275ffe7a3b77958f98c81fb'}",
            "last_fix_commit":"70b46e231e7b2c113666745a0ab6de9a8b7ef08e",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/04\/2022, 08:02:08",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 2, 'deletions': 2, 'total': 4}",
            "files":"{'src\/MicroweberPackages\/Utils\/System\/Files.php': {'additions': 2, 'deletions': 2, 'changes': 4, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/70b46e231e7b2c113666745a0ab6de9a8b7ef08e\/src%2FMicroweberPackages%2FUtils%2FSystem%2FFiles.php', 'patch': \"@@ -1154,11 +1154,11 @@ function get_allowed_files_extensions_for_upload($fileTypes = 'images', $returnA\\n                 break;\\n             case 'file':\\n             case 'files':\\n-                $are_allowed .= ',css,json,zip,gzip,csv,7z';\\n+                $are_allowed .= ',css,json,zip,gzip,psd,csv,7z';\\n                 break;\\n             case 'documents':\\n             case 'doc':\\n-                $are_allowed .= ',doc,docx,pdf,odt,pages,rtf,txt,pps,ppt,pptx,xls,xlsx';\\n+                $are_allowed .= ',doc,docx,pdf,odt,rtf,txt,pps,ppt,pptx,xls,xlsx';\\n                 break;\\n             case 'archives':\\n             case 'arc':\"}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/MicroweberPackages\/Utils\/System\/Files.php'])",
            "num_files":1.0
        },
        {
            "index":319,
            "vuln_id":"GHSA-3wcq-x3mq-6r9p",
            "cwe_id":"{'CWE-908', 'CWE-200'}",
            "score":7.7,
            "chain":"{'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/0d0d593f8df4e2712c43957a6c62e95047f12b2d', 'https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56'}",
            "dataset":"osv",
            "summary":"Potential memory exposure in dns-packet This affects the package dns-packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.",
            "published_date":"2021-05-24",
            "chain_len":2,
            "project":"https:\/\/github.com\/mafintosh\/dns-packet",
            "commit_href":"https:\/\/github.com\/mafintosh\/dns-packet\/commit\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
            "commit_sha":"25f15dd0fedc53688b25fd053ebbdffe3d5c1c56",
            "patch":"MULTI",
            "chain_ord":"['25f15dd0fedc53688b25fd053ebbdffe3d5c1c56', '0d0d593f8df4e2712c43957a6c62e95047f12b2d']",
            "before_first_fix_commit":"{'7f35bac5b4680d7bfbb34fbc475ecfdbf9d25092'}",
            "last_fix_commit":"0d0d593f8df4e2712c43957a6c62e95047f12b2d",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/19\/2021, 17:59:39",
            "message":"do trim on encodingLength as well",
            "author":"Mathias Buus",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'index.js': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/mafintosh\/dns-packet\/raw\/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56\/index.js', 'patch': \"@@ -78,7 +78,7 @@ name.decode.bytes = 0\\n \\n name.encodingLength = function (n) {\\n   if (n === '.') return 1\\n-  return Buffer.byteLength(n) + 2\\n+  return Buffer.byteLength(n.replace(\/^\\\\.|\\\\.$\/gm, '')) + 2\\n }\\n \\n const string = {}\"}}",
            "message_norm":"do trim on encodinglength as well",
            "language":"en",
            "entities":"[('encodinglength', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['index.js'])",
            "num_files":1.0
        },
        {
            "index":1898,
            "vuln_id":"GHSA-gmh3-x5w7-jg5m",
            "cwe_id":"{'CWE-79'}",
            "score":6.3,
            "chain":"{'https:\/\/github.com\/microweber\/microweber\/commit\/79c6914bab8c9da07ac950fda17648d08c68b130'}",
            "dataset":"osv",
            "summary":"Microweber before v1.2.20 vulnerable to cross-site scripting Prior to Microweber v1.2.20, due to improper neutralization of input, an attacker can steal tokens to perform cross-site request forgery (CSRF), fetch contents from same-site and redirect a user.",
            "published_date":"2022-07-10",
            "chain_len":1,
            "project":"https:\/\/github.com\/microweber\/microweber",
            "commit_href":"https:\/\/github.com\/microweber\/microweber\/commit\/79c6914bab8c9da07ac950fda17648d08c68b130",
            "commit_sha":"79c6914bab8c9da07ac950fda17648d08c68b130",
            "patch":"SINGLE",
            "chain_ord":"['79c6914bab8c9da07ac950fda17648d08c68b130']",
            "before_first_fix_commit":"{'d35e691e72d358430abc8e99f5ba9eb374423b9f'}",
            "last_fix_commit":"79c6914bab8c9da07ac950fda17648d08c68b130",
            "chain_ord_pos":1.0,
            "commit_datetime":"07\/08\/2022, 17:31:13",
            "message":"update",
            "author":"Peter Ivanov",
            "comments":null,
            "stats":"{'additions': 14, 'deletions': 2, 'total': 16}",
            "files":"{'userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php': {'additions': 14, 'deletions': 2, 'changes': 16, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/microweber\/microweber\/raw\/79c6914bab8c9da07ac950fda17648d08c68b130\/userfiles%2Fmodules%2Fmicroweber%2Ftoolbar%2Feditor_tools%2Fmodule_settings%2Findex.php', 'patch': '@@ -87,14 +87,24 @@\\n     if (isset($_GET[\\'autosize\\'])) {\\n         $autoSize = $_GET[\\'autosize\\'];\\n     }\\n-    $autoSize = xss_clean($autoSize);\\n+    $autoSize = intval($autoSize);\\n \\n     $type = \\'\\';\\n     if (isset($_GET[\\'type\\'])) {\\n         $type = $_GET[\\'type\\'];\\n     }\\n     $type = xss_clean($type);\\n \\n+            $other = [\\n+                \\';\\',\\n+                \\'\\\\\\'\\',\\n+                \\'\/\/\\',\\n+                \\'`\\',\\n+                \\'\\\\\\\\\\',\\n+\\n+            ];\\n+    $type = str_replace($other, \\'\\', $type);\\n+\\n     $mod_id = $mod_orig_id = false;\\n     $is_linked_mod = false;\\n \\n@@ -108,6 +118,8 @@\\n     if ($mod_id != $mod_orig_id) {\\n         $is_linked_mod = true;\\n     }\\n+\\n+\\n     ?>\\n \\n     <script type=\"text\/javascript\">\\n@@ -124,7 +136,7 @@\\n         addIcon();\\n \\n         autoSize = <?php  print $autoSize; ?>;\\n-        settingsType = \\'<?php print $type; ?>\\';\\n+        settingsType = \\'<?php print htmlentities($type); ?>\\';\\n \\n         window.onbeforeunload = function () {\\n             $(document.body).addClass(\"mw-external-loading\")'}}",
            "message_norm":"update",
            "language":"ro",
            "entities":"[('update', 'ACTION', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['userfiles\/modules\/microweber\/toolbar\/editor_tools\/module_settings\/index.php'])",
            "num_files":1.0
        },
        {
            "index":3091,
            "vuln_id":"GHSA-vc3x-gx6c-g99f",
            "cwe_id":"{'CWE-190'}",
            "score":7.5,
            "chain":"{'https:\/\/github.com\/Bytom\/bytom\/commit\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42'}",
            "dataset":"osv",
            "summary":"Denial of Service in Bytom In the client in Bytom before 1.0.6, checkTopicRegister in p2p\/discover\/net.go does not prevent negative idx values, leading to a crash.",
            "published_date":"2022-02-15",
            "chain_len":1,
            "project":"https:\/\/github.com\/Bytom\/bytom",
            "commit_href":"https:\/\/github.com\/Bytom\/bytom\/commit\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "commit_sha":"1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "patch":"SINGLE",
            "chain_ord":"['1ac3c8ac4f2b1e1df9675228290bda6b9586ba42']",
            "before_first_fix_commit":"{'69b3d4c7cf41c6628efb34ed79ad35e9e22bbf82'}",
            "last_fix_commit":"1ac3c8ac4f2b1e1df9675228290bda6b9586ba42",
            "chain_ord_pos":1.0,
            "commit_datetime":"08\/31\/2018, 05:48:40",
            "message":"p2p\/discv5: fix idx can be negative after uint convert to int(can cause crash) (#1307)",
            "author":"yahtoo",
            "comments":null,
            "stats":"{'additions': 1, 'deletions': 1, 'total': 2}",
            "files":"{'p2p\/discover\/net.go': {'additions': 1, 'deletions': 1, 'changes': 2, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Bytom\/bytom\/raw\/1ac3c8ac4f2b1e1df9675228290bda6b9586ba42\/p2p%2Fdiscover%2Fnet.go', 'patch': '@@ -1221,7 +1221,7 @@ func (net *Network) checkTopicRegister(data *topicRegister) (*pong, error) {\\n \\tif hash != pongpkt.data.(*pong).TopicHash {\\n \\t\\treturn nil, errors.New(\"topic hash mismatch\")\\n \\t}\\n-\\tif data.Idx < 0 || int(data.Idx) >= len(data.Topics) {\\n+\\tif int(data.Idx) < 0 || int(data.Idx) >= len(data.Topics) {\\n \\t\\treturn nil, errors.New(\"topic index out of range\")\\n \\t}\\n \\treturn pongpkt.data.(*pong), nil'}}",
            "message_norm":"p2p\/discv5: fix idx can be negative after uint convert to int(can cause crash) (#1307)",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('#1307', 'ISSUE', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['p2p\/discover\/net.go'])",
            "num_files":1.0
        },
        {
            "index":3194,
            "vuln_id":"GHSA-vxhc-c4qm-647p",
            "cwe_id":"{'CWE-284', 'CWE-863'}",
            "score":4.3,
            "chain":"{'https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/8cc100012d46282799fb19f735a53b7101569377'}",
            "dataset":"osv",
            "summary":"Improper Access Control in Dolibarr In \u201cDolibarr\u201d application, 2.8.1 to 13.0.4 don\u2019t restrict or incorrectly restricts access to a resource from an unauthorized actor. A low privileged attacker can modify the Private Note which only an administrator has rights to do, the affected field is at \u201c\/adherents\/note.php?id=1\u201d endpoint.",
            "published_date":"2021-08-11",
            "chain_len":1,
            "project":"https:\/\/github.com\/Dolibarr\/dolibarr",
            "commit_href":"https:\/\/github.com\/Dolibarr\/dolibarr\/commit\/8cc100012d46282799fb19f735a53b7101569377",
            "commit_sha":"8cc100012d46282799fb19f735a53b7101569377",
            "patch":"SINGLE",
            "chain_ord":"['8cc100012d46282799fb19f735a53b7101569377']",
            "before_first_fix_commit":"{'0271645d8efd5815bbb2d8750c76e8b27ee974be'}",
            "last_fix_commit":"8cc100012d46282799fb19f735a53b7101569377",
            "chain_ord_pos":1.0,
            "commit_datetime":"05\/09\/2021, 10:50:46",
            "message":"Fix vulnerabiity: External users can set a public note",
            "author":"Laurent Destailleur",
            "comments":null,
            "stats":"{'additions': 13, 'deletions': 11, 'total': 24}",
            "files":"{'htdocs\/core\/actions_setnotes.inc.php': {'additions': 13, 'deletions': 11, 'changes': 24, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/Dolibarr\/dolibarr\/raw\/8cc100012d46282799fb19f735a53b7101569377\/htdocs%2Fcore%2Factions_setnotes.inc.php', 'patch': \"@@ -67,16 +67,18 @@\\n \\t\\t\\t}\\n \\t\\t}\\n \\t}\\n-} elseif ($action == 'setnote_private' && !empty($permissionnote) && !GETPOST('cancel', 'alpha')) {\\n-\\t\/\/ Set public note\\n-\\tif (empty($action) || !is_object($object) || empty($id)) {\\n-\\t\\tdol_print_error('', 'Include of actions_setnotes.inc.php was done but required variable was not set before');\\n-\\t}\\n-\\tif (empty($object->id)) {\\n-\\t\\t$object->fetch($id); \/\/ Fetch may not be already done\\n-\\t}\\n-\\t$result = $object->update_note(dol_html_entity_decode(GETPOST('note_private', 'restricthtml'), ENT_QUOTES | ENT_HTML5), '_private');\\n-\\tif ($result < 0) {\\n-\\t\\tsetEventMessages($object->error, $object->errors, 'errors');\\n+} elseif ($action == 'setnote_private' && !empty($permissionnote) && !GETPOST('cancel', 'alpha')) {\\t\/\/ Set public note\\n+\\tif (empty($user->socid)) {\\n+\\t\\t\/\/ Private notes (always hidden to external users)\\n+\\t\\tif (empty($action) || !is_object($object) || empty($id)) {\\n+\\t\\t\\tdol_print_error('', 'Include of actions_setnotes.inc.php was done but required variable was not set before');\\n+\\t\\t}\\n+\\t\\tif (empty($object->id)) {\\n+\\t\\t\\t$object->fetch($id); \/\/ Fetch may not be already done\\n+\\t\\t}\\n+\\t\\t$result = $object->update_note(dol_html_entity_decode(GETPOST('note_private', 'restricthtml'), ENT_QUOTES | ENT_HTML5), '_private');\\n+\\t\\tif ($result < 0) {\\n+\\t\\t\\tsetEventMessages($object->error, $object->errors, 'errors');\\n+\\t\\t}\\n \\t}\\n }\"}}",
            "message_norm":"fix vulnerabiity: external users can set a public note",
            "language":"ca",
            "entities":"[('fix', 'ACTION', ''), ('vulnerabiity', 'SECWORD', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['htdocs\/core\/actions_setnotes.inc.php'])",
            "num_files":1.0
        },
        {
            "index":2423,
            "vuln_id":"GHSA-mh83-jcw5-rjh8",
            "cwe_id":"{'CWE-611'}",
            "score":6.1,
            "chain":"{'https:\/\/github.com\/stanfordnlp\/corenlp\/commit\/1f52136321cfca68b991bd7870563d06cf96624d'}",
            "dataset":"osv",
            "summary":"XML External Entity Reference in edu.stanford.nlp:stanford-corenlp The TransformXML() function makes use of SAXParser generated from a SAXParserFactory with no FEATURE_SECURE_PROCESSING set, allowing for XXE attacks.",
            "published_date":"2022-01-14",
            "chain_len":1,
            "project":"https:\/\/github.com\/stanfordnlp\/corenlp",
            "commit_href":"https:\/\/github.com\/stanfordnlp\/corenlp\/commit\/1f52136321cfca68b991bd7870563d06cf96624d",
            "commit_sha":"1f52136321cfca68b991bd7870563d06cf96624d",
            "patch":"SINGLE",
            "chain_ord":"['1f52136321cfca68b991bd7870563d06cf96624d']",
            "before_first_fix_commit":"{'76666dd1d1697177585bbc618c21faf998028509'}",
            "last_fix_commit":"1f52136321cfca68b991bd7870563d06cf96624d",
            "chain_ord_pos":1.0,
            "commit_datetime":"01\/12\/2022, 07:13:08",
            "message":"Fix SAXParser security issue",
            "author":"Haxatron",
            "comments":null,
            "stats":"{'additions': 3, 'deletions': 0, 'total': 3}",
            "files":"{'src\/edu\/stanford\/nlp\/process\/TransformXML.java': {'additions': 3, 'deletions': 0, 'changes': 3, 'status': 'modified', 'raw_url': 'https:\/\/github.com\/stanfordnlp\/CoreNLP\/raw\/1f52136321cfca68b991bd7870563d06cf96624d\/src%2Fedu%2Fstanford%2Fnlp%2Fprocess%2FTransformXML.java', 'patch': '@@ -5,6 +5,7 @@\\n import java.io.*;\\n import java.util.*;\\n \\n+import javax.xml.XMLConstants;\\n import javax.xml.parsers.SAXParser;\\n import javax.xml.parsers.SAXParserFactory;\\n \\n@@ -195,6 +196,8 @@ public void processText(String text) {\\n \\n   public TransformXML() {\\n     try {\\n+      SAXParserFactory spf = SAXParserFactory.newInstance();\\n+      spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\\n       saxParser = SAXParserFactory.newInstance().newSAXParser();\\n     } catch (Exception e) {\\n       log.info(\"Error configuring XML parser: \" + e);'}}",
            "message_norm":"fix saxparser security issue",
            "language":"en",
            "entities":"[('fix', 'ACTION', ''), ('security', 'SECWORD', ''), ('issue', 'FLAW', '')]",
            "classification_level_1":null,
            "classification_level_2":null,
            "list_files":"dict_keys(['src\/edu\/stanford\/nlp\/process\/TransformXML.java'])",
            "num_files":1.0
        }
    ]
}